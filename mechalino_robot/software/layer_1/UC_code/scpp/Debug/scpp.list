
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b634  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800b7d8  0800b7d8  0001b7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc98  0800bc98  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc98  0800bc98  0001bc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bca0  0800bca0  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bca4  0800bca4  0001bca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800bca8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000290  0800bf38  00020290  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800bf38  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120a4  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a0b  00000000  00000000  000323a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00034db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd8  00000000  00000000  00035e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183c0  00000000  00000000  00036ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154f2  00000000  00000000  0004eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092212  00000000  00000000  0006439a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ba0  00000000  00000000  000f65ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000fc14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000290 	.word	0x20000290
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b7bc 	.word	0x0800b7bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000294 	.word	0x20000294
 80001dc:	0800b7bc 	.word	0x0800b7bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800103c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <MX_GPIO_Init+0xbc>)
 800108e:	f002 f8f5 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_GPIO_Init+0xbc>)
 80010ac:	f001 ff62 	bl	8002f74 <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020800 	.word	0x40020800

080010c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f002 f8d7 	bl	80032b0 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 fdd6 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200002ac 	.word	0x200002ac
 8001114:	40005400 	.word	0x40005400
 8001118:	00061a80 	.word	0x00061a80

0800111c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_I2C_MspInit+0x94>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d134      	bne.n	80011a8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800115a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116c:	2304      	movs	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <HAL_I2C_MspInit+0x9c>)
 8001178:	f001 fefc 	bl	8002f74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	201f      	movs	r0, #31
 800119e:	f001 fe20 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011a2:	201f      	movs	r0, #31
 80011a4:	f001 fe39 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <PID_init>:
void apply_speed(); // applies the desired speed from -100 to 100 to robots.
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PID_init(PIDController *pid, float kp, float ki, float kd, float setpoint) {
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6178      	str	r0, [r7, #20]
 80011c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80011c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80011cc:	ed87 1a02 	vstr	s2, [r7, #8]
 80011d0:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->kp = kp;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]
    pid->integral = 0;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
    total_Gz = 0;
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <PID_init+0x54>)
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	200003a8 	.word	0x200003a8

08001214 <PID_compute>:

float PID_compute(PIDController *pid, float input) {
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	ed87 0a00 	vstr	s0, [r7]
	float error = pid->setpoint - input;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	ed93 7a03 	vldr	s14, [r3, #12]
 8001226:	edd7 7a00 	vldr	s15, [r7]
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->integral += error;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	ed93 7a04 	vldr	s14, [r3, #16]
 8001238:	edd7 7a05 	vldr	s15, [r7, #20]
 800123c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edc3 7a04 	vstr	s15, [r3, #16]
    float derivative = error - pid->prev_error;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edd3 7a05 	vldr	s15, [r3, #20]
 800124c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001254:	edc7 7a04 	vstr	s15, [r7, #16]
    float output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	edd3 6a01 	vldr	s13, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001280:	edd7 7a04 	vldr	s15, [r7, #16]
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128c:	edc7 7a03 	vstr	s15, [r7, #12]
    pid->prev_error = error;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	615a      	str	r2, [r3, #20]
    return output;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	ee07 3a90 	vmov	s15, r3
}
 800129c:	eeb0 0a67 	vmov.f32	s0, s15
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <apply_speed>:

void apply_speed()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
	// if current_speed = 0, stop!
	if (current_speed == 0)
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <apply_speed+0x118>)
 80012b4:	f993 3000 	ldrsb.w	r3, [r3]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <apply_speed+0x24>
	{
		TIM1->CCR1 = MOTOR_STOP;
 80012bc:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <apply_speed+0x11c>)
 80012be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80012c2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR3 = MOTOR_STOP;
 80012c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80012cc:	63da      	str	r2, [r3, #60]	; 0x3c
		return;
 80012ce:	e075      	b.n	80013bc <apply_speed+0x110>
	}
	else
	{
		int speedR = MOTOR_MAX_1 - (int)control_signal;
 80012d0:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <apply_speed+0x120>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 80012e2:	607b      	str	r3, [r7, #4]
		if (speedR > MOTOR_SLOW_2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f640 421c 	movw	r2, #3100	; 0xc1c
 80012ea:	4293      	cmp	r3, r2
 80012ec:	dd03      	ble.n	80012f6 <apply_speed+0x4a>
		{
			speedR = MOTOR_SLOW_2;
 80012ee:	f640 431c 	movw	r3, #3100	; 0xc1c
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	e006      	b.n	8001304 <apply_speed+0x58>
		}
		else if (speedR < MOTOR_MAX_1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80012fc:	da02      	bge.n	8001304 <apply_speed+0x58>
		{
			speedR = MOTOR_MAX_1;
 80012fe:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001302:	607b      	str	r3, [r7, #4]
		}
		int speedL = MOTOR_MAX_2 - (int)control_signal;
 8001304:	4b31      	ldr	r3, [pc, #196]	; (80013cc <apply_speed+0x120>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800130e:	ee17 3a90 	vmov	r3, s15
 8001312:	f5c3 539f 	rsb	r3, r3, #5088	; 0x13e0
 8001316:	330c      	adds	r3, #12
 8001318:	603b      	str	r3, [r7, #0]
		if (speedL < MOTOR_SLOW_1)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001320:	da03      	bge.n	800132a <apply_speed+0x7e>
		{
			speedL = MOTOR_SLOW_1;
 8001322:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	e007      	b.n	800133a <apply_speed+0x8e>
		}
		else if (speedL > MOTOR_MAX_2)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f241 32ec 	movw	r2, #5100	; 0x13ec
 8001330:	4293      	cmp	r3, r2
 8001332:	dd02      	ble.n	800133a <apply_speed+0x8e>
		{
			speedL = MOTOR_MAX_2;
 8001334:	f241 33ec 	movw	r3, #5100	; 0x13ec
 8001338:	603b      	str	r3, [r7, #0]
		}
		// PID control
		current_Gz = MPU6050.Gz - Gz_mean;
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <apply_speed+0x124>)
 800133c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <apply_speed+0x128>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7fe ffa7 	bl	8000298 <__aeabi_dsub>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc51 	bl	8000bf8 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <apply_speed+0x12c>)
 800135a:	6013      	str	r3, [r2, #0]
		total_Gz += current_Gz * (LOOP_DELAY / 1000.0f);
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <apply_speed+0x12c>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80013dc <apply_speed+0x130>
 8001366:	ee27 7a87 	vmul.f32	s14, s15, s14
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <apply_speed+0x134>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <apply_speed+0x134>)
 8001376:	edc3 7a00 	vstr	s15, [r3]
		control_signal = PID_compute(&pid_m, total_Gz);
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <apply_speed+0x134>)
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	eeb0 0a67 	vmov.f32	s0, s15
 8001384:	4817      	ldr	r0, [pc, #92]	; (80013e4 <apply_speed+0x138>)
 8001386:	f7ff ff45 	bl	8001214 <PID_compute>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <apply_speed+0x120>)
 8001390:	edc3 7a00 	vstr	s15, [r3]

		if (current_speed > 0) // forward
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <apply_speed+0x118>)
 8001396:	f993 3000 	ldrsb.w	r3, [r3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	dd07      	ble.n	80013ae <apply_speed+0x102>
		{
			TIM1->CCR1 = speedR;
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <apply_speed+0x11c>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6353      	str	r3, [r2, #52]	; 0x34
			TIM2->CCR3 = speedL;
 80013a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	63d3      	str	r3, [r2, #60]	; 0x3c
 80013ac:	e006      	b.n	80013bc <apply_speed+0x110>
		}
		else
		{
			TIM2->CCR3 = speedR;
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM1->CCR1 = speedL;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <apply_speed+0x11c>)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6353      	str	r3, [r2, #52]	; 0x34
		}
	}
}
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200003b5 	.word	0x200003b5
 80013c8:	40010000 	.word	0x40010000
 80013cc:	200003ac 	.word	0x200003ac
 80013d0:	20000300 	.word	0x20000300
 80013d4:	20000360 	.word	0x20000360
 80013d8:	200003a4 	.word	0x200003a4
 80013dc:	3c23d70a 	.word	0x3c23d70a
 80013e0:	200003a8 	.word	0x200003a8
 80013e4:	20000378 	.word	0x20000378

080013e8 <speed_ctl>:

void speed_ctl()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	current_speed = speed;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <speed_ctl+0x3c>)
 80013ee:	f993 2000 	ldrsb.w	r2, [r3]
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <speed_ctl+0x40>)
 80013f4:	701a      	strb	r2, [r3, #0]
	PID_init(&pid_m, kp, ki, kd, 0);
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <speed_ctl+0x44>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <speed_ctl+0x48>)
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <speed_ctl+0x4c>)
 8001404:	edd3 6a00 	vldr	s13, [r3]
 8001408:	eddf 1a0b 	vldr	s3, [pc, #44]	; 8001438 <speed_ctl+0x50>
 800140c:	eeb0 1a66 	vmov.f32	s2, s13
 8001410:	eef0 0a47 	vmov.f32	s1, s14
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <speed_ctl+0x54>)
 800141a:	f7ff fecf 	bl	80011bc <PID_init>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200003b4 	.word	0x200003b4
 8001428:	200003b5 	.word	0x200003b5
 800142c:	20000000 	.word	0x20000000
 8001430:	20000390 	.word	0x20000390
 8001434:	20000394 	.word	0x20000394
 8001438:	00000000 	.word	0x00000000
 800143c:	20000378 	.word	0x20000378

08001440 <rotate>:

void rotate(float angle)
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a01 	vstr	s0, [r7, #4]

	for(int interations = 0; interations < CALIB; interations++)
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	e016      	b.n	800147e <rotate+0x3e>
	{
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001450:	4980      	ldr	r1, [pc, #512]	; (8001654 <rotate+0x214>)
 8001452:	4881      	ldr	r0, [pc, #516]	; (8001658 <rotate+0x218>)
 8001454:	f000 fc8c 	bl	8001d70 <MPU6050_Read_All>
	  Gz_mean += MPU6050.Gz;
 8001458:	4b7e      	ldr	r3, [pc, #504]	; (8001654 <rotate+0x214>)
 800145a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800145e:	4b7f      	ldr	r3, [pc, #508]	; (800165c <rotate+0x21c>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7fe ff1a 	bl	800029c <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	497b      	ldr	r1, [pc, #492]	; (800165c <rotate+0x21c>)
 800146e:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(50);
 8001472:	2032      	movs	r0, #50	; 0x32
 8001474:	f001 fbb6 	bl	8002be4 <HAL_Delay>
	for(int interations = 0; interations < CALIB; interations++)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b31      	cmp	r3, #49	; 0x31
 8001482:	dde5      	ble.n	8001450 <rotate+0x10>
	}
	Gz_mean /= CALIB;
 8001484:	4b75      	ldr	r3, [pc, #468]	; (800165c <rotate+0x21c>)
 8001486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b74      	ldr	r3, [pc, #464]	; (8001660 <rotate+0x220>)
 8001490:	f7ff f9e4 	bl	800085c <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4970      	ldr	r1, [pc, #448]	; (800165c <rotate+0x21c>)
 800149a:	e9c1 2300 	strd	r2, r3, [r1]

	if (angle > 0)
 800149e:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	dd09      	ble.n	80014c0 <rotate+0x80>
		angle -= R_offset_error;
 80014ac:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <rotate+0x224>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80014b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80014be:	e0b7      	b.n	8001630 <rotate+0x1f0>
	else
		angle += R_offset_error;
 80014c0:	4b68      	ldr	r3, [pc, #416]	; (8001664 <rotate+0x224>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ce:	edc7 7a01 	vstr	s15, [r7, #4]


	while(abs(angle)>0.1)
 80014d2:	e0ad      	b.n	8001630 <rotate+0x1f0>
	{
		total_Gz = 0;
 80014d4:	4b64      	ldr	r3, [pc, #400]	; (8001668 <rotate+0x228>)
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
		if (angle > 0)
 80014dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	dd08      	ble.n	80014fc <rotate+0xbc>
		{
			mR = MOTOR_SLOW_1-150;
 80014ea:	4b60      	ldr	r3, [pc, #384]	; (800166c <rotate+0x22c>)
 80014ec:	f640 225a 	movw	r2, #2650	; 0xa5a
 80014f0:	801a      	strh	r2, [r3, #0]
			mL = MOTOR_SLOW_1+50;
 80014f2:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <rotate+0x230>)
 80014f4:	f640 3222 	movw	r2, #2850	; 0xb22
 80014f8:	801a      	strh	r2, [r3, #0]
 80014fa:	e062      	b.n	80015c2 <rotate+0x182>
		}
		else
		{
			mR = MOTOR_SLOW_2+150;
 80014fc:	4b5b      	ldr	r3, [pc, #364]	; (800166c <rotate+0x22c>)
 80014fe:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8001502:	801a      	strh	r2, [r3, #0]
			mL = MOTOR_SLOW_2-50;
 8001504:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <rotate+0x230>)
 8001506:	f640 32ea 	movw	r2, #3050	; 0xbea
 800150a:	801a      	strh	r2, [r3, #0]
		}
		while (fabs(total_Gz) - fabs(angle) < 0)
 800150c:	e059      	b.n	80015c2 <rotate+0x182>
		{
			TIM1->CCR1 = mR;
 800150e:	4b57      	ldr	r3, [pc, #348]	; (800166c <rotate+0x22c>)
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	4b58      	ldr	r3, [pc, #352]	; (8001674 <rotate+0x234>)
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR3 = mL;
 8001516:	4b56      	ldr	r3, [pc, #344]	; (8001670 <rotate+0x230>)
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800151e:	63da      	str	r2, [r3, #60]	; 0x3c
			if (angle>0)
 8001520:	edd7 7a01 	vldr	s15, [r7, #4]
 8001524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd0c      	ble.n	8001548 <rotate+0x108>
			{
				mR-=5;
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <rotate+0x22c>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	3b05      	subs	r3, #5
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b4d      	ldr	r3, [pc, #308]	; (800166c <rotate+0x22c>)
 8001538:	801a      	strh	r2, [r3, #0]
				mL-=5;
 800153a:	4b4d      	ldr	r3, [pc, #308]	; (8001670 <rotate+0x230>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	3b05      	subs	r3, #5
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b4b      	ldr	r3, [pc, #300]	; (8001670 <rotate+0x230>)
 8001544:	801a      	strh	r2, [r3, #0]
 8001546:	e00b      	b.n	8001560 <rotate+0x120>
			}
			else
			{
				mR+=5;
 8001548:	4b48      	ldr	r3, [pc, #288]	; (800166c <rotate+0x22c>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	3305      	adds	r3, #5
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b46      	ldr	r3, [pc, #280]	; (800166c <rotate+0x22c>)
 8001552:	801a      	strh	r2, [r3, #0]
				mL+=5;
 8001554:	4b46      	ldr	r3, [pc, #280]	; (8001670 <rotate+0x230>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	3305      	adds	r3, #5
 800155a:	b29a      	uxth	r2, r3
 800155c:	4b44      	ldr	r3, [pc, #272]	; (8001670 <rotate+0x230>)
 800155e:	801a      	strh	r2, [r3, #0]
			}
			HAL_Delay(Rdelay);
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <rotate+0x238>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fb3d 	bl	8002be4 <HAL_Delay>
			MPU6050_Read_All(&hi2c1, &MPU6050);
 800156a:	493a      	ldr	r1, [pc, #232]	; (8001654 <rotate+0x214>)
 800156c:	483a      	ldr	r0, [pc, #232]	; (8001658 <rotate+0x218>)
 800156e:	f000 fbff 	bl	8001d70 <MPU6050_Read_All>
			current_Gz = (MPU6050.Gz - Gz_mean);
 8001572:	4b38      	ldr	r3, [pc, #224]	; (8001654 <rotate+0x214>)
 8001574:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <rotate+0x21c>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7fe fe8b 	bl	8000298 <__aeabi_dsub>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fb35 	bl	8000bf8 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	4a3a      	ldr	r2, [pc, #232]	; (800167c <rotate+0x23c>)
 8001592:	6013      	str	r3, [r2, #0]
			total_Gz += current_Gz * (Rdelay / 1000.0f);
 8001594:	4b38      	ldr	r3, [pc, #224]	; (8001678 <rotate+0x238>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001680 <rotate+0x240>
 80015a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015a8:	4b34      	ldr	r3, [pc, #208]	; (800167c <rotate+0x23c>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b2:	4b2d      	ldr	r3, [pc, #180]	; (8001668 <rotate+0x228>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <rotate+0x228>)
 80015be:	edc3 7a00 	vstr	s15, [r3]
		while (fabs(total_Gz) - fabs(angle) < 0)
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <rotate+0x228>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eef0 7ae7 	vabs.f32	s15, s15
 80015cc:	ee17 0a90 	vmov	r0, s15
 80015d0:	f7fe ffc2 	bl	8000558 <__aeabi_f2d>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015dc:	eef0 7ae7 	vabs.f32	s15, s15
 80015e0:	ee17 0a90 	vmov	r0, s15
 80015e4:	f7fe ffb8 	bl	8000558 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fe52 	bl	8000298 <__aeabi_dsub>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	f7ff fa72 	bl	8000aec <__aeabi_dcmplt>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	f47f af7f 	bne.w	800150e <rotate+0xce>
		}
		TIM1->CCR1 = 0;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <rotate+0x234>)
 8001612:	2200      	movs	r2, #0
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR3 = 0;
 8001616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800161a:	2200      	movs	r2, #0
 800161c:	63da      	str	r2, [r3, #60]	; 0x3c
		angle = angle - total_Gz;
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <rotate+0x228>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ed97 7a01 	vldr	s14, [r7, #4]
 8001628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162c:	edc7 7a01 	vstr	s15, [r7, #4]
	while(abs(angle)>0.1)
 8001630:	edd7 7a01 	vldr	s15, [r7, #4]
 8001634:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001638:	ee17 3a90 	vmov	r3, s15
 800163c:	2b00      	cmp	r3, #0
 800163e:	bfb8      	it	lt
 8001640:	425b      	neglt	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	f73f af46 	bgt.w	80014d4 <rotate+0x94>
	}
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bdb0      	pop	{r4, r5, r7, pc}
 8001652:	bf00      	nop
 8001654:	20000300 	.word	0x20000300
 8001658:	200002ac 	.word	0x200002ac
 800165c:	20000360 	.word	0x20000360
 8001660:	40490000 	.word	0x40490000
 8001664:	200003a0 	.word	0x200003a0
 8001668:	200003a8 	.word	0x200003a8
 800166c:	200003b0 	.word	0x200003b0
 8001670:	200003b2 	.word	0x200003b2
 8001674:	40010000 	.word	0x40010000
 8001678:	2000000c 	.word	0x2000000c
 800167c:	200003a4 	.word	0x200003a4
 8001680:	447a0000 	.word	0x447a0000

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800168a:	f001 fa39 	bl	8002b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168e:	f000 fa79 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001692:	f7ff fcb5 	bl	8001000 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001696:	f000 ffe1 	bl	800265c <MX_TIM1_Init>
  MX_TIM2_Init();
 800169a:	f001 f87f 	bl	800279c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800169e:	f001 f98b 	bl	80029b8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80016a2:	f7ff fd0d 	bl	80010c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80016a6:	2201      	movs	r2, #1
 80016a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ac:	486a      	ldr	r0, [pc, #424]	; (8001858 <main+0x1d4>)
 80016ae:	f001 fde5 	bl	800327c <HAL_GPIO_WritePin>
  HAL_Delay(10000);
 80016b2:	f242 7010 	movw	r0, #10000	; 0x2710
 80016b6:	f001 fa95 	bl	8002be4 <HAL_Delay>

  while (MPU6050_Init(&hi2c1) == 1); //Initialise the MPU6050
 80016ba:	bf00      	nop
 80016bc:	4867      	ldr	r0, [pc, #412]	; (800185c <main+0x1d8>)
 80016be:	f000 fb00 	bl	8001cc2 <MPU6050_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d0f9      	beq.n	80016bc <main+0x38>
  // calibrate MPU6050
  for(int interations = 0; interations < CALIB; interations++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	e030      	b.n	8001730 <main+0xac>
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80016ce:	4964      	ldr	r1, [pc, #400]	; (8001860 <main+0x1dc>)
 80016d0:	4862      	ldr	r0, [pc, #392]	; (800185c <main+0x1d8>)
 80016d2:	f000 fb4d 	bl	8001d70 <MPU6050_Read_All>
	  Gz_mean += MPU6050.Gz;
 80016d6:	4b62      	ldr	r3, [pc, #392]	; (8001860 <main+0x1dc>)
 80016d8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016dc:	4b61      	ldr	r3, [pc, #388]	; (8001864 <main+0x1e0>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe fddb 	bl	800029c <__adddf3>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	495e      	ldr	r1, [pc, #376]	; (8001864 <main+0x1e0>)
 80016ec:	e9c1 2300 	strd	r2, r3, [r1]
	  Ax_mean += MPU6050.Ax;
 80016f0:	4b5b      	ldr	r3, [pc, #364]	; (8001860 <main+0x1dc>)
 80016f2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016f6:	4b5c      	ldr	r3, [pc, #368]	; (8001868 <main+0x1e4>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7fe fdce 	bl	800029c <__adddf3>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4958      	ldr	r1, [pc, #352]	; (8001868 <main+0x1e4>)
 8001706:	e9c1 2300 	strd	r2, r3, [r1]
	  Ay_mean += MPU6050.Ay;
 800170a:	4b55      	ldr	r3, [pc, #340]	; (8001860 <main+0x1dc>)
 800170c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001710:	4b56      	ldr	r3, [pc, #344]	; (800186c <main+0x1e8>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7fe fdc1 	bl	800029c <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4953      	ldr	r1, [pc, #332]	; (800186c <main+0x1e8>)
 8001720:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(50);
 8001724:	2032      	movs	r0, #50	; 0x32
 8001726:	f001 fa5d 	bl	8002be4 <HAL_Delay>
  for(int interations = 0; interations < CALIB; interations++)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b31      	cmp	r3, #49	; 0x31
 8001734:	ddcb      	ble.n	80016ce <main+0x4a>
  }
  Gz_mean /= CALIB;
 8001736:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <main+0x1e0>)
 8001738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <main+0x1ec>)
 8001742:	f7ff f88b 	bl	800085c <__aeabi_ddiv>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4946      	ldr	r1, [pc, #280]	; (8001864 <main+0x1e0>)
 800174c:	e9c1 2300 	strd	r2, r3, [r1]
  Ax_mean /= CALIB;
 8001750:	4b45      	ldr	r3, [pc, #276]	; (8001868 <main+0x1e4>)
 8001752:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <main+0x1ec>)
 800175c:	f7ff f87e 	bl	800085c <__aeabi_ddiv>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4940      	ldr	r1, [pc, #256]	; (8001868 <main+0x1e4>)
 8001766:	e9c1 2300 	strd	r2, r3, [r1]
  Ay_mean /= CALIB;
 800176a:	4b40      	ldr	r3, [pc, #256]	; (800186c <main+0x1e8>)
 800176c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <main+0x1ec>)
 8001776:	f7ff f871 	bl	800085c <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	493b      	ldr	r1, [pc, #236]	; (800186c <main+0x1e8>)
 8001780:	e9c1 2300 	strd	r2, r3, [r1]

  HAL_TIM_PWM_Init(&htim1);
 8001784:	483b      	ldr	r0, [pc, #236]	; (8001874 <main+0x1f0>)
 8001786:	f003 f9fa 	bl	8004b7e <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 800178a:	483b      	ldr	r0, [pc, #236]	; (8001878 <main+0x1f4>)
 800178c:	f003 f9f7 	bl	8004b7e <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001790:	2100      	movs	r1, #0
 8001792:	4838      	ldr	r0, [pc, #224]	; (8001874 <main+0x1f0>)
 8001794:	f003 fa4c 	bl	8004c30 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001798:	2108      	movs	r1, #8
 800179a:	4837      	ldr	r0, [pc, #220]	; (8001878 <main+0x1f4>)
 800179c:	f003 fa48 	bl	8004c30 <HAL_TIM_PWM_Start>
  TIM1->CR1 = 0x01;
 80017a0:	4b36      	ldr	r3, [pc, #216]	; (800187c <main+0x1f8>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
  TIM2->CR1 = 0x01;
 80017a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 80017ae:	2201      	movs	r2, #1
 80017b0:	4933      	ldr	r1, [pc, #204]	; (8001880 <main+0x1fc>)
 80017b2:	4834      	ldr	r0, [pc, #208]	; (8001884 <main+0x200>)
 80017b4:	f004 f8e1 	bl	800597a <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017be:	4826      	ldr	r0, [pc, #152]	; (8001858 <main+0x1d4>)
 80017c0:	f001 fd5c 	bl	800327c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// check if there is any new command
	if (USART_recive == 1)
 80017c4:	4b30      	ldr	r3, [pc, #192]	; (8001888 <main+0x204>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	f040 8140 	bne.w	8001a4e <main+0x3ca>
	{
	  char *delimiter = " ";
 80017ce:	4b2f      	ldr	r3, [pc, #188]	; (800188c <main+0x208>)
 80017d0:	60bb      	str	r3, [r7, #8]
	  char *saveptr;
	  char *token;
	  token = strtok_r(rx_buffer, delimiter, &saveptr);
 80017d2:	463b      	mov	r3, r7
 80017d4:	461a      	mov	r2, r3
 80017d6:	68b9      	ldr	r1, [r7, #8]
 80017d8:	482d      	ldr	r0, [pc, #180]	; (8001890 <main+0x20c>)
 80017da:	f006 fee8 	bl	80085ae <strtok_r>
 80017de:	6078      	str	r0, [r7, #4]
	  if (token != NULL) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d004      	beq.n	80017f0 <main+0x16c>
		  command = token[0];
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <main+0x210>)
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e002      	b.n	80017f6 <main+0x172>
	  }
	  else
	  {
		  command = COMMAND_NC; // failed to read the command, so drop it
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <main+0x210>)
 80017f2:	224e      	movs	r2, #78	; 0x4e
 80017f4:	701a      	strb	r2, [r3, #0]
	  }
	  // commands with 1 or 2 arguments
	  if (command == COMMAND_MOVE || command == COMMAND_ROTATE)
 80017f6:	4b27      	ldr	r3, [pc, #156]	; (8001894 <main+0x210>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b4d      	cmp	r3, #77	; 0x4d
 80017fc:	d003      	beq.n	8001806 <main+0x182>
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <main+0x210>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b52      	cmp	r3, #82	; 0x52
 8001804:	d14f      	bne.n	80018a6 <main+0x222>
	  {
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001806:	463b      	mov	r3, r7
 8001808:	461a      	mov	r2, r3
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	2000      	movs	r0, #0
 800180e:	f006 fece 	bl	80085ae <strtok_r>
 8001812:	6078      	str	r0, [r7, #4]
		  if (token != NULL) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <main+0x1a4>
			  Arg1 = atoi(token);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f005 f849 	bl	80068b2 <atoi>
 8001820:	4603      	mov	r3, r0
 8001822:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <main+0x214>)
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e002      	b.n	800182e <main+0x1aa>
		  }
		  else
		  {
			  command = COMMAND_NC; // failed to read arguments, so drop the command
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <main+0x210>)
 800182a:	224e      	movs	r2, #78	; 0x4e
 800182c:	701a      	strb	r2, [r3, #0]
		  }
		  // commands with a second argument
		  if (command == COMMAND_MOVE)
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <main+0x210>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b4d      	cmp	r3, #77	; 0x4d
 8001834:	d137      	bne.n	80018a6 <main+0x222>
		  {
			  token = strtok_r(NULL, delimiter, &saveptr);
 8001836:	463b      	mov	r3, r7
 8001838:	461a      	mov	r2, r3
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	2000      	movs	r0, #0
 800183e:	f006 feb6 	bl	80085ae <strtok_r>
 8001842:	6078      	str	r0, [r7, #4]
			  if (token != NULL) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d02a      	beq.n	80018a0 <main+0x21c>
				  Arg2 = atoi(token);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f005 f831 	bl	80068b2 <atoi>
 8001850:	4603      	mov	r3, r0
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <main+0x218>)
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e026      	b.n	80018a6 <main+0x222>
 8001858:	40020800 	.word	0x40020800
 800185c:	200002ac 	.word	0x200002ac
 8001860:	20000300 	.word	0x20000300
 8001864:	20000360 	.word	0x20000360
 8001868:	20000368 	.word	0x20000368
 800186c:	20000370 	.word	0x20000370
 8001870:	40490000 	.word	0x40490000
 8001874:	200003ec 	.word	0x200003ec
 8001878:	20000434 	.word	0x20000434
 800187c:	40010000 	.word	0x40010000
 8001880:	200003d8 	.word	0x200003d8
 8001884:	2000047c 	.word	0x2000047c
 8001888:	200003d7 	.word	0x200003d7
 800188c:	0800b7d8 	.word	0x0800b7d8
 8001890:	200003b8 	.word	0x200003b8
 8001894:	20000010 	.word	0x20000010
 8001898:	200003dc 	.word	0x200003dc
 800189c:	200003e0 	.word	0x200003e0
			  }
			  else
			  {
				  command = COMMAND_NC; // failed to read arguments, so drop the command
 80018a0:	4ba4      	ldr	r3, [pc, #656]	; (8001b34 <main+0x4b0>)
 80018a2:	224e      	movs	r2, #78	; 0x4e
 80018a4:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  // TODO: remove later / for debugging
	  if (command == 'P')
 80018a6:	4ba3      	ldr	r3, [pc, #652]	; (8001b34 <main+0x4b0>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b50      	cmp	r3, #80	; 0x50
 80018ac:	d14f      	bne.n	800194e <main+0x2ca>
	  {
		  token = strtok_r(NULL, delimiter, &saveptr);
 80018ae:	463b      	mov	r3, r7
 80018b0:	461a      	mov	r2, r3
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	2000      	movs	r0, #0
 80018b6:	f006 fe7a 	bl	80085ae <strtok_r>
 80018ba:	6078      	str	r0, [r7, #4]
		  kp = atof(token);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f004 fff5 	bl	80068ac <atof>
 80018c2:	ec53 2b10 	vmov	r2, r3, d0
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f995 	bl	8000bf8 <__aeabi_d2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a99      	ldr	r2, [pc, #612]	; (8001b38 <main+0x4b4>)
 80018d2:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 80018d4:	463b      	mov	r3, r7
 80018d6:	461a      	mov	r2, r3
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	2000      	movs	r0, #0
 80018dc:	f006 fe67 	bl	80085ae <strtok_r>
 80018e0:	6078      	str	r0, [r7, #4]
		  ki = atof(token);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f004 ffe2 	bl	80068ac <atof>
 80018e8:	ec53 2b10 	vmov	r2, r3, d0
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f982 	bl	8000bf8 <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a91      	ldr	r2, [pc, #580]	; (8001b3c <main+0x4b8>)
 80018f8:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 80018fa:	463b      	mov	r3, r7
 80018fc:	461a      	mov	r2, r3
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	2000      	movs	r0, #0
 8001902:	f006 fe54 	bl	80085ae <strtok_r>
 8001906:	6078      	str	r0, [r7, #4]
		  kd = atof(token);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f004 ffcf 	bl	80068ac <atof>
 800190e:	ec53 2b10 	vmov	r2, r3, d0
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f7ff f96f 	bl	8000bf8 <__aeabi_d2f>
 800191a:	4603      	mov	r3, r0
 800191c:	4a88      	ldr	r2, [pc, #544]	; (8001b40 <main+0x4bc>)
 800191e:	6013      	str	r3, [r2, #0]
		  PID_init(&pid_m, kp, ki, kd, 0);
 8001920:	4b85      	ldr	r3, [pc, #532]	; (8001b38 <main+0x4b4>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	4b85      	ldr	r3, [pc, #532]	; (8001b3c <main+0x4b8>)
 8001928:	ed93 7a00 	vldr	s14, [r3]
 800192c:	4b84      	ldr	r3, [pc, #528]	; (8001b40 <main+0x4bc>)
 800192e:	edd3 6a00 	vldr	s13, [r3]
 8001932:	eddf 1a84 	vldr	s3, [pc, #528]	; 8001b44 <main+0x4c0>
 8001936:	eeb0 1a66 	vmov.f32	s2, s13
 800193a:	eef0 0a47 	vmov.f32	s1, s14
 800193e:	eeb0 0a67 	vmov.f32	s0, s15
 8001942:	4881      	ldr	r0, [pc, #516]	; (8001b48 <main+0x4c4>)
 8001944:	f7ff fc3a 	bl	80011bc <PID_init>
		  command = COMMAND_NC;
 8001948:	4b7a      	ldr	r3, [pc, #488]	; (8001b34 <main+0x4b0>)
 800194a:	224e      	movs	r2, #78	; 0x4e
 800194c:	701a      	strb	r2, [r3, #0]
	  }
	  if (command == 'X')
 800194e:	4b79      	ldr	r3, [pc, #484]	; (8001b34 <main+0x4b0>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b58      	cmp	r3, #88	; 0x58
 8001954:	d16e      	bne.n	8001a34 <main+0x3b0>
	  {
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001956:	463b      	mov	r3, r7
 8001958:	461a      	mov	r2, r3
 800195a:	68b9      	ldr	r1, [r7, #8]
 800195c:	2000      	movs	r0, #0
 800195e:	f006 fe26 	bl	80085ae <strtok_r>
 8001962:	6078      	str	r0, [r7, #4]
		  kp2 = atof(token);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f004 ffa1 	bl	80068ac <atof>
 800196a:	ec53 2b10 	vmov	r2, r3, d0
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f941 	bl	8000bf8 <__aeabi_d2f>
 8001976:	4603      	mov	r3, r0
 8001978:	4a74      	ldr	r2, [pc, #464]	; (8001b4c <main+0x4c8>)
 800197a:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 800197c:	463b      	mov	r3, r7
 800197e:	461a      	mov	r2, r3
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	2000      	movs	r0, #0
 8001984:	f006 fe13 	bl	80085ae <strtok_r>
 8001988:	6078      	str	r0, [r7, #4]
		  ki2 = atof(token);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f004 ff8e 	bl	80068ac <atof>
 8001990:	ec53 2b10 	vmov	r2, r3, d0
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f92e 	bl	8000bf8 <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
 800199e:	4a6c      	ldr	r2, [pc, #432]	; (8001b50 <main+0x4cc>)
 80019a0:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 80019a2:	463b      	mov	r3, r7
 80019a4:	461a      	mov	r2, r3
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	2000      	movs	r0, #0
 80019aa:	f006 fe00 	bl	80085ae <strtok_r>
 80019ae:	6078      	str	r0, [r7, #4]
		  kd2 = atof(token);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f004 ff7b 	bl	80068ac <atof>
 80019b6:	ec53 2b10 	vmov	r2, r3, d0
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f91b 	bl	8000bf8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a63      	ldr	r2, [pc, #396]	; (8001b54 <main+0x4d0>)
 80019c6:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 80019c8:	463b      	mov	r3, r7
 80019ca:	461a      	mov	r2, r3
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	2000      	movs	r0, #0
 80019d0:	f006 fded 	bl	80085ae <strtok_r>
 80019d4:	6078      	str	r0, [r7, #4]
		  GzMul = atof(token);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f004 ff68 	bl	80068ac <atof>
 80019dc:	ec53 2b10 	vmov	r2, r3, d0
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f908 	bl	8000bf8 <__aeabi_d2f>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a5b      	ldr	r2, [pc, #364]	; (8001b58 <main+0x4d4>)
 80019ec:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 80019ee:	463b      	mov	r3, r7
 80019f0:	461a      	mov	r2, r3
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	2000      	movs	r0, #0
 80019f6:	f006 fdda 	bl	80085ae <strtok_r>
 80019fa:	6078      	str	r0, [r7, #4]
		  R_offset_error = atof(token);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f004 ff55 	bl	80068ac <atof>
 8001a02:	ec53 2b10 	vmov	r2, r3, d0
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f8f5 	bl	8000bf8 <__aeabi_d2f>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <main+0x4d8>)
 8001a12:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001a14:	463b      	mov	r3, r7
 8001a16:	461a      	mov	r2, r3
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f006 fdc7 	bl	80085ae <strtok_r>
 8001a20:	6078      	str	r0, [r7, #4]
		  Rdelay = atoi(token);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f004 ff45 	bl	80068b2 <atoi>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a4d      	ldr	r2, [pc, #308]	; (8001b60 <main+0x4dc>)
 8001a2c:	6013      	str	r3, [r2, #0]
		  command = COMMAND_NC;
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <main+0x4b0>)
 8001a30:	224e      	movs	r2, #78	; 0x4e
 8001a32:	701a      	strb	r2, [r3, #0]
	  }
	  USART_recive = 0;
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <main+0x4e0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
	  if (command == COMMAND_NC)
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <main+0x4b0>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b4e      	cmp	r3, #78	; 0x4e
 8001a40:	d105      	bne.n	8001a4e <main+0x3ca>
		  HAL_UART_Transmit(&huart1, (uint8_t *)("DONE"), sizeof("DONE"), 100);
 8001a42:	2364      	movs	r3, #100	; 0x64
 8001a44:	2205      	movs	r2, #5
 8001a46:	4948      	ldr	r1, [pc, #288]	; (8001b68 <main+0x4e4>)
 8001a48:	4848      	ldr	r0, [pc, #288]	; (8001b6c <main+0x4e8>)
 8001a4a:	f003 ff04 	bl	8005856 <HAL_UART_Transmit>
	}
	// handle current command
	switch(command)
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <main+0x4b0>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	3b48      	subs	r3, #72	; 0x48
 8001a54:	2b0a      	cmp	r3, #10
 8001a56:	d86b      	bhi.n	8001b30 <main+0x4ac>
 8001a58:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <main+0x3dc>)
 8001a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5e:	bf00      	nop
 8001a60:	08001a8d 	.word	0x08001a8d
 8001a64:	08001b31 	.word	0x08001b31
 8001a68:	08001b31 	.word	0x08001b31
 8001a6c:	08001b31 	.word	0x08001b31
 8001a70:	08001b31 	.word	0x08001b31
 8001a74:	08001aaf 	.word	0x08001aaf
 8001a78:	08001b31 	.word	0x08001b31
 8001a7c:	08001b31 	.word	0x08001b31
 8001a80:	08001b31 	.word	0x08001b31
 8001a84:	08001b31 	.word	0x08001b31
 8001a88:	08001b09 	.word	0x08001b09
	case COMMAND_NC:
		// nothing to do
		break;
	case COMMAND_HALT:
		// stop both movement and rotation
		speed = 0;
 8001a8c:	4b38      	ldr	r3, [pc, #224]	; (8001b70 <main+0x4ec>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
		speed_ctl();
 8001a92:	f7ff fca9 	bl	80013e8 <speed_ctl>
		apply_speed();
 8001a96:	f7ff fc09 	bl	80012ac <apply_speed>
		command = COMMAND_NC; // command done
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <main+0x4b0>)
 8001a9c:	224e      	movs	r2, #78	; 0x4e
 8001a9e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)("DONE"), sizeof("DONE"), 100);
 8001aa0:	2364      	movs	r3, #100	; 0x64
 8001aa2:	2205      	movs	r2, #5
 8001aa4:	4930      	ldr	r1, [pc, #192]	; (8001b68 <main+0x4e4>)
 8001aa6:	4831      	ldr	r0, [pc, #196]	; (8001b6c <main+0x4e8>)
 8001aa8:	f003 fed5 	bl	8005856 <HAL_UART_Transmit>
		break;
 8001aac:	e041      	b.n	8001b32 <main+0x4ae>
	case COMMAND_MOVE:
		// set speed
		speed = Arg1;
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <main+0x4f0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b25a      	sxtb	r2, r3
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <main+0x4ec>)
 8001ab6:	701a      	strb	r2, [r3, #0]
		speed_ctl();
 8001ab8:	f7ff fc96 	bl	80013e8 <speed_ctl>
		apply_speed();
 8001abc:	f7ff fbf6 	bl	80012ac <apply_speed>
		while(Arg2 > 0)
 8001ac0:	e00d      	b.n	8001ade <main+0x45a>
		{
			Arg2 -= LOOP_DELAY;
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <main+0x4f4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3b0a      	subs	r3, #10
 8001ac8:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <main+0x4f4>)
 8001aca:	6013      	str	r3, [r2, #0]
			HAL_Delay(LOOP_DELAY);
 8001acc:	200a      	movs	r0, #10
 8001ace:	f001 f889 	bl	8002be4 <HAL_Delay>
			MPU6050_Read_All(&hi2c1, &MPU6050);
 8001ad2:	492a      	ldr	r1, [pc, #168]	; (8001b7c <main+0x4f8>)
 8001ad4:	482a      	ldr	r0, [pc, #168]	; (8001b80 <main+0x4fc>)
 8001ad6:	f000 f94b 	bl	8001d70 <MPU6050_Read_All>
			apply_speed();
 8001ada:	f7ff fbe7 	bl	80012ac <apply_speed>
		while(Arg2 > 0)
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <main+0x4f4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	dced      	bgt.n	8001ac2 <main+0x43e>
		}
		speed = 0;
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <main+0x4ec>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
		speed_ctl();
 8001aec:	f7ff fc7c 	bl	80013e8 <speed_ctl>
		apply_speed();
 8001af0:	f7ff fbdc 	bl	80012ac <apply_speed>
		command = COMMAND_NC; // command done
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <main+0x4b0>)
 8001af6:	224e      	movs	r2, #78	; 0x4e
 8001af8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)("DONE"), sizeof("DONE"), 100);
 8001afa:	2364      	movs	r3, #100	; 0x64
 8001afc:	2205      	movs	r2, #5
 8001afe:	491a      	ldr	r1, [pc, #104]	; (8001b68 <main+0x4e4>)
 8001b00:	481a      	ldr	r0, [pc, #104]	; (8001b6c <main+0x4e8>)
 8001b02:	f003 fea8 	bl	8005856 <HAL_UART_Transmit>
		break;
 8001b06:	e014      	b.n	8001b32 <main+0x4ae>
	case COMMAND_ROTATE:
		rotate(Arg1);
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <main+0x4f0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	f7ff fc92 	bl	8001440 <rotate>
		command = COMMAND_NC; // command done
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <main+0x4b0>)
 8001b1e:	224e      	movs	r2, #78	; 0x4e
 8001b20:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)("DONE"), sizeof("DONE"), 100);
 8001b22:	2364      	movs	r3, #100	; 0x64
 8001b24:	2205      	movs	r2, #5
 8001b26:	4910      	ldr	r1, [pc, #64]	; (8001b68 <main+0x4e4>)
 8001b28:	4810      	ldr	r0, [pc, #64]	; (8001b6c <main+0x4e8>)
 8001b2a:	f003 fe94 	bl	8005856 <HAL_UART_Transmit>
		break;
 8001b2e:	e000      	b.n	8001b32 <main+0x4ae>
	default:
		// TODO: implementation of other commands
		break;
 8001b30:	bf00      	nop
	if (USART_recive == 1)
 8001b32:	e647      	b.n	80017c4 <main+0x140>
 8001b34:	20000010 	.word	0x20000010
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000390 	.word	0x20000390
 8001b40:	20000394 	.word	0x20000394
 8001b44:	00000000 	.word	0x00000000
 8001b48:	20000378 	.word	0x20000378
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000398 	.word	0x20000398
 8001b58:	2000039c 	.word	0x2000039c
 8001b5c:	200003a0 	.word	0x200003a0
 8001b60:	2000000c 	.word	0x2000000c
 8001b64:	200003d7 	.word	0x200003d7
 8001b68:	0800b7dc 	.word	0x0800b7dc
 8001b6c:	2000047c 	.word	0x2000047c
 8001b70:	200003b4 	.word	0x200003b4
 8001b74:	200003dc 	.word	0x200003dc
 8001b78:	200003e0 	.word	0x200003e0
 8001b7c:	20000300 	.word	0x20000300
 8001b80:	200002ac 	.word	0x200002ac

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b094      	sub	sp, #80	; 0x50
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	2230      	movs	r2, #48	; 0x30
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f006 fcc9 	bl	800852a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a27      	ldr	r2, [pc, #156]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <SystemClock_Config+0xd0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001be4:	2301      	movs	r3, #1
 8001be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8001bf8:	2314      	movs	r3, #20
 8001bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c00:	2302      	movs	r3, #2
 8001c02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c04:	2304      	movs	r3, #4
 8001c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c08:	f107 0320 	add.w	r3, r7, #32
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fb0f 	bl	8004230 <HAL_RCC_OscConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c18:	f000 f84e 	bl	8001cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c20:	2302      	movs	r3, #2
 8001c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	2102      	movs	r1, #2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fd71 	bl	8004720 <HAL_RCC_ClockConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c44:	f000 f838 	bl	8001cb8 <Error_Handler>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3750      	adds	r7, #80	; 0x50
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40007000 	.word	0x40007000

08001c58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);


  rx_buffer[rx_buffer_index++] = UART1_rxBuffer[0];
 8001c60:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_UART_RxCpltCallback+0x4c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	b2d1      	uxtb	r1, r2
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_UART_RxCpltCallback+0x4c>)
 8001c6a:	7011      	strb	r1, [r2, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <HAL_UART_RxCpltCallback+0x50>)
 8001c70:	7819      	ldrb	r1, [r3, #0]
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_UART_RxCpltCallback+0x54>)
 8001c74:	5499      	strb	r1, [r3, r2]

  if ((UART1_rxBuffer[0] == '\r') || rx_buffer_index > 30) // end of data
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_UART_RxCpltCallback+0x50>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b0d      	cmp	r3, #13
 8001c7c:	d003      	beq.n	8001c86 <HAL_UART_RxCpltCallback+0x2e>
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_UART_RxCpltCallback+0x4c>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b1e      	cmp	r3, #30
 8001c84:	d905      	bls.n	8001c92 <HAL_UART_RxCpltCallback+0x3a>
  {
	  rx_buffer_index = 0;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_UART_RxCpltCallback+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
	  USART_recive = 1;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <HAL_UART_RxCpltCallback+0x58>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 8001c92:	2201      	movs	r2, #1
 8001c94:	4904      	ldr	r1, [pc, #16]	; (8001ca8 <HAL_UART_RxCpltCallback+0x50>)
 8001c96:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8001c98:	f003 fe6f 	bl	800597a <HAL_UART_Receive_IT>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200003d6 	.word	0x200003d6
 8001ca8:	200003d8 	.word	0x200003d8
 8001cac:	200003b8 	.word	0x200003b8
 8001cb0:	200003d7 	.word	0x200003d7
 8001cb4:	2000047c 	.word	0x2000047c

08001cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <Error_Handler+0x8>

08001cc2 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b088      	sub	sp, #32
 8001cc6:	af04      	add	r7, sp, #16
 8001cc8:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001cca:	2364      	movs	r3, #100	; 0x64
 8001ccc:	9302      	str	r3, [sp, #8]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	f107 030f 	add.w	r3, r7, #15
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2275      	movs	r2, #117	; 0x75
 8001cdc:	21d0      	movs	r1, #208	; 0xd0
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f001 fd24 	bl	800372c <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	2b68      	cmp	r3, #104	; 0x68
 8001ce8:	d13d      	bne.n	8001d66 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001cee:	2364      	movs	r3, #100	; 0x64
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	f107 030e 	add.w	r3, r7, #14
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	226b      	movs	r2, #107	; 0x6b
 8001d00:	21d0      	movs	r1, #208	; 0xd0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f001 fc18 	bl	8003538 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001d08:	2307      	movs	r3, #7
 8001d0a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001d0c:	2364      	movs	r3, #100	; 0x64
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	2301      	movs	r3, #1
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	f107 030e 	add.w	r3, r7, #14
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	2219      	movs	r2, #25
 8001d1e:	21d0      	movs	r1, #208	; 0xd0
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f001 fc09 	bl	8003538 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001d2a:	2364      	movs	r3, #100	; 0x64
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	f107 030e 	add.w	r3, r7, #14
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	221c      	movs	r2, #28
 8001d3c:	21d0      	movs	r1, #208	; 0xd0
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f001 fbfa 	bl	8003538 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001d44:	2300      	movs	r3, #0
 8001d46:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001d48:	2364      	movs	r3, #100	; 0x64
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	f107 030e 	add.w	r3, r7, #14
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2301      	movs	r3, #1
 8001d58:	221b      	movs	r2, #27
 8001d5a:	21d0      	movs	r1, #208	; 0xd0
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f001 fbeb 	bl	8003538 <HAL_I2C_Mem_Write>
        return 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <MPU6050_Init+0xa6>
    }
    return 1;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d74:	b094      	sub	sp, #80	; 0x50
 8001d76:	af04      	add	r7, sp, #16
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001d7c:	2364      	movs	r3, #100	; 0x64
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	230e      	movs	r3, #14
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	223b      	movs	r2, #59	; 0x3b
 8001d8e:	21d0      	movs	r1, #208	; 0xd0
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f001 fccb 	bl	800372c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001d96:	7a3b      	ldrb	r3, [r7, #8]
 8001d98:	021b      	lsls	r3, r3, #8
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	7a7b      	ldrb	r3, [r7, #9]
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001da8:	7abb      	ldrb	r3, [r7, #10]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	7afb      	ldrb	r3, [r7, #11]
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	b21a      	sxth	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001dba:	7b3b      	ldrb	r3, [r7, #12]
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	7b7b      	ldrb	r3, [r7, #13]
 8001dc2:	b21b      	sxth	r3, r3
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001dcc:	7bbb      	ldrb	r3, [r7, #14]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001dda:	7c3b      	ldrb	r3, [r7, #16]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	7c7b      	ldrb	r3, [r7, #17]
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	4313      	orrs	r3, r2
 8001de6:	b21a      	sxth	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001dec:	7cbb      	ldrb	r3, [r7, #18]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	7cfb      	ldrb	r3, [r7, #19]
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	b21a      	sxth	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001dfe:	7d3b      	ldrb	r3, [r7, #20]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b21a      	sxth	r2, r3
 8001e04:	7d7b      	ldrb	r3, [r7, #21]
 8001e06:	b21b      	sxth	r3, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb8c 	bl	8000534 <__aeabi_i2d>
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	4bbd      	ldr	r3, [pc, #756]	; (8002118 <MPU6050_Read_All+0x3a8>)
 8001e22:	f7fe fd1b 	bl	800085c <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fb7c 	bl	8000534 <__aeabi_i2d>
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4bb5      	ldr	r3, [pc, #724]	; (8002118 <MPU6050_Read_All+0x3a8>)
 8001e42:	f7fe fd0b 	bl	800085c <__aeabi_ddiv>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb6c 	bl	8000534 <__aeabi_i2d>
 8001e5c:	a3a8      	add	r3, pc, #672	; (adr r3, 8002100 <MPU6050_Read_All+0x390>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fcfb 	bl	800085c <__aeabi_ddiv>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	6839      	ldr	r1, [r7, #0]
 8001e6c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001e70:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e7c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800211c <MPU6050_Read_All+0x3ac>
 8001e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e84:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002120 <MPU6050_Read_All+0x3b0>
 8001e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb4b 	bl	8000534 <__aeabi_i2d>
 8001e9e:	a39a      	add	r3, pc, #616	; (adr r3, 8002108 <MPU6050_Read_All+0x398>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fcda 	bl	800085c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	6839      	ldr	r1, [r7, #0]
 8001eae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fb3b 	bl	8000534 <__aeabi_i2d>
 8001ebe:	a392      	add	r3, pc, #584	; (adr r3, 8002108 <MPU6050_Read_All+0x398>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fcca 	bl	800085c <__aeabi_ddiv>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	6839      	ldr	r1, [r7, #0]
 8001ece:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb2b 	bl	8000534 <__aeabi_i2d>
 8001ede:	a38a      	add	r3, pc, #552	; (adr r3, 8002108 <MPU6050_Read_All+0x398>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe fcba 	bl	800085c <__aeabi_ddiv>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	6839      	ldr	r1, [r7, #0]
 8001eee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001ef2:	f000 fe6b 	bl	8002bcc <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b8a      	ldr	r3, [pc, #552]	; (8002124 <MPU6050_Read_All+0x3b4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb08 	bl	8000514 <__aeabi_ui2d>
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b87      	ldr	r3, [pc, #540]	; (8002128 <MPU6050_Read_All+0x3b8>)
 8001f0a:	f7fe fca7 	bl	800085c <__aeabi_ddiv>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001f16:	f000 fe59 	bl	8002bcc <HAL_GetTick>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a81      	ldr	r2, [pc, #516]	; (8002124 <MPU6050_Read_All+0x3b4>)
 8001f1e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f26:	461a      	mov	r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faf4 	bl	8000534 <__aeabi_i2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	ec43 2b10 	vmov	d0, r2, r3
 8001f54:	f009 f8ba 	bl	800b0cc <sqrt>
 8001f58:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f68:	f7fe fdb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d11f      	bne.n	8001fb2 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fadb 	bl	8000534 <__aeabi_i2d>
 8001f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f82:	f7fe fc6b 	bl	800085c <__aeabi_ddiv>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	ec43 2b17 	vmov	d7, r2, r3
 8001f8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f92:	eef0 0a67 	vmov.f32	s1, s15
 8001f96:	f009 f8c7 	bl	800b128 <atan>
 8001f9a:	ec51 0b10 	vmov	r0, r1, d0
 8001f9e:	a35c      	add	r3, pc, #368	; (adr r3, 8002110 <MPU6050_Read_All+0x3a0>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fb30 	bl	8000608 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001fb0:	e005      	b.n	8001fbe <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	425b      	negs	r3, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fab4 	bl	8000534 <__aeabi_i2d>
 8001fcc:	4682      	mov	sl, r0
 8001fce:	468b      	mov	fp, r1
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe faac 	bl	8000534 <__aeabi_i2d>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	ec43 2b11 	vmov	d1, r2, r3
 8001fe4:	ec4b ab10 	vmov	d0, sl, fp
 8001fe8:	f009 f86e 	bl	800b0c8 <atan2>
 8001fec:	ec51 0b10 	vmov	r0, r1, d0
 8001ff0:	a347      	add	r3, pc, #284	; (adr r3, 8002110 <MPU6050_Read_All+0x3a0>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f7fe fb07 	bl	8000608 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	4b49      	ldr	r3, [pc, #292]	; (800212c <MPU6050_Read_All+0x3bc>)
 8002008:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800200c:	f7fe fd6e 	bl	8000aec <__aeabi_dcmplt>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <MPU6050_Read_All+0x2bc>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <MPU6050_Read_All+0x3c0>)
 8002022:	f7fe fd81 	bl	8000b28 <__aeabi_dcmpgt>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d114      	bne.n	8002056 <MPU6050_Read_All+0x2e6>
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <MPU6050_Read_All+0x3c0>)
 8002032:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002036:	f7fe fd77 	bl	8000b28 <__aeabi_dcmpgt>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <MPU6050_Read_All+0x2fc>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <MPU6050_Read_All+0x3bc>)
 800204c:	f7fe fd4e 	bl	8000aec <__aeabi_dcmplt>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8002056:	4937      	ldr	r1, [pc, #220]	; (8002134 <MPU6050_Read_All+0x3c4>)
 8002058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800205c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002060:	6839      	ldr	r1, [r7, #0]
 8002062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002066:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800206a:	e014      	b.n	8002096 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002072:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002076:	eeb0 1a47 	vmov.f32	s2, s14
 800207a:	eef0 1a67 	vmov.f32	s3, s15
 800207e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002082:	482c      	ldr	r0, [pc, #176]	; (8002134 <MPU6050_Read_All+0x3c4>)
 8002084:	f000 f85a 	bl	800213c <Kalman_getAngle>
 8002088:	eeb0 7a40 	vmov.f32	s14, s0
 800208c:	eef0 7a60 	vmov.f32	s15, s1
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800209c:	4690      	mov	r8, r2
 800209e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <MPU6050_Read_All+0x3c0>)
 80020a8:	4640      	mov	r0, r8
 80020aa:	4649      	mov	r1, r9
 80020ac:	f7fe fd3c 	bl	8000b28 <__aeabi_dcmpgt>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020bc:	4614      	mov	r4, r2
 80020be:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80020ce:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80020d2:	eeb0 1a47 	vmov.f32	s2, s14
 80020d6:	eef0 1a67 	vmov.f32	s3, s15
 80020da:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80020de:	4816      	ldr	r0, [pc, #88]	; (8002138 <MPU6050_Read_All+0x3c8>)
 80020e0:	f000 f82c 	bl	800213c <Kalman_getAngle>
 80020e4:	eeb0 7a40 	vmov.f32	s14, s0
 80020e8:	eef0 7a60 	vmov.f32	s15, s1
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80020f2:	bf00      	nop
 80020f4:	3740      	adds	r7, #64	; 0x40
 80020f6:	46bd      	mov	sp, r7
 80020f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020fc:	f3af 8000 	nop.w
 8002100:	00000000 	.word	0x00000000
 8002104:	40cc2900 	.word	0x40cc2900
 8002108:	00000000 	.word	0x00000000
 800210c:	40606000 	.word	0x40606000
 8002110:	1a63c1f8 	.word	0x1a63c1f8
 8002114:	404ca5dc 	.word	0x404ca5dc
 8002118:	40d00000 	.word	0x40d00000
 800211c:	43aa0000 	.word	0x43aa0000
 8002120:	42121eb8 	.word	0x42121eb8
 8002124:	200003e4 	.word	0x200003e4
 8002128:	408f4000 	.word	0x408f4000
 800212c:	c0568000 	.word	0xc0568000
 8002130:	40568000 	.word	0x40568000
 8002134:	20000060 	.word	0x20000060
 8002138:	20000018 	.word	0x20000018

0800213c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800213c:	b5b0      	push	{r4, r5, r7, lr}
 800213e:	b096      	sub	sp, #88	; 0x58
 8002140:	af00      	add	r7, sp, #0
 8002142:	61f8      	str	r0, [r7, #28]
 8002144:	ed87 0b04 	vstr	d0, [r7, #16]
 8002148:	ed87 1b02 	vstr	d1, [r7, #8]
 800214c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800215a:	f7fe f89d 	bl	8000298 <__aeabi_dsub>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800216c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002170:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002174:	f7fe fa48 	bl	8000608 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4620      	mov	r0, r4
 800217e:	4629      	mov	r1, r5
 8002180:	f7fe f88c 	bl	800029c <__adddf3>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	69f9      	ldr	r1, [r7, #28]
 800218a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800219a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800219e:	f7fe fa33 	bl	8000608 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021b0:	f7fe f872 	bl	8000298 <__aeabi_dsub>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80021c2:	f7fe f869 	bl	8000298 <__aeabi_dsub>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	f7fe f862 	bl	800029c <__adddf3>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021e4:	f7fe fa10 	bl	8000608 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe f854 	bl	800029c <__adddf3>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	69f9      	ldr	r1, [r7, #28]
 80021fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800220a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800220e:	f7fe f9fb 	bl	8000608 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe f83d 	bl	8000298 <__aeabi_dsub>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	69f9      	ldr	r1, [r7, #28]
 8002224:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002238:	f7fe f9e6 	bl	8000608 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4620      	mov	r0, r4
 8002242:	4629      	mov	r1, r5
 8002244:	f7fe f828 	bl	8000298 <__aeabi_dsub>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	69f9      	ldr	r1, [r7, #28]
 800224e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800225e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002262:	f7fe f9d1 	bl	8000608 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4620      	mov	r0, r4
 800226c:	4629      	mov	r1, r5
 800226e:	f7fe f815 	bl	800029c <__adddf3>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	69f9      	ldr	r1, [r7, #28]
 8002278:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002288:	f7fe f808 	bl	800029c <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800229a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800229e:	f7fe fadd 	bl	800085c <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80022b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022b4:	f7fe fad2 	bl	800085c <__aeabi_ddiv>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80022c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022ca:	f7fd ffe5 	bl	8000298 <__aeabi_dsub>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80022dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022e4:	f7fe f990 	bl	8000608 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4620      	mov	r0, r4
 80022ee:	4629      	mov	r1, r5
 80022f0:	f7fd ffd4 	bl	800029c <__adddf3>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	69f9      	ldr	r1, [r7, #28]
 80022fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002308:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800230c:	f7fe f97c 	bl	8000608 <__aeabi_dmul>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fd ffc0 	bl	800029c <__adddf3>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	69f9      	ldr	r1, [r7, #28]
 8002322:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800232c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002336:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002340:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002348:	f7fe f95e 	bl	8000608 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4620      	mov	r0, r4
 8002352:	4629      	mov	r1, r5
 8002354:	f7fd ffa0 	bl	8000298 <__aeabi_dsub>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	69f9      	ldr	r1, [r7, #28]
 800235e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002368:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800236c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002370:	f7fe f94a 	bl	8000608 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4620      	mov	r0, r4
 800237a:	4629      	mov	r1, r5
 800237c:	f7fd ff8c 	bl	8000298 <__aeabi_dsub>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	69f9      	ldr	r1, [r7, #28]
 8002386:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002390:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002398:	f7fe f936 	bl	8000608 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4620      	mov	r0, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	f7fd ff78 	bl	8000298 <__aeabi_dsub>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	69f9      	ldr	r1, [r7, #28]
 80023ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80023b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023c0:	f7fe f922 	bl	8000608 <__aeabi_dmul>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fd ff64 	bl	8000298 <__aeabi_dsub>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	69f9      	ldr	r1, [r7, #28]
 80023d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023e0:	ec43 2b17 	vmov	d7, r2, r3
};
 80023e4:	eeb0 0a47 	vmov.f32	s0, s14
 80023e8:	eef0 0a67 	vmov.f32	s1, s15
 80023ec:	3758      	adds	r7, #88	; 0x58
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080023f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <HAL_MspInit+0x4c>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_MspInit+0x4c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_MspInit+0x4c>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <NMI_Handler+0x4>

0800244a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <MemManage_Handler+0x4>

08002456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <BusFault_Handler+0x4>

0800245c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <UsageFault_Handler+0x4>

08002462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002490:	f000 fb88 	bl	8002ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <USART1_IRQHandler+0x10>)
 800249e:	f003 fa9d 	bl	80059dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000047c 	.word	0x2000047c

080024ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return 1;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_kill>:

int _kill(int pid, int sig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024c6:	f006 f8bf 	bl	8008648 <__errno>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2216      	movs	r2, #22
 80024ce:	601a      	str	r2, [r3, #0]
  return -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_exit>:

void _exit (int status)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffe7 	bl	80024bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ee:	e7fe      	b.n	80024ee <_exit+0x12>

080024f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e00a      	b.n	8002518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002502:	f3af 8000 	nop.w
 8002506:	4601      	mov	r1, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf0      	blt.n	8002502 <_read+0x12>
  }

  return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e009      	b.n	8002550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	dbf1      	blt.n	800253c <_write+0x12>
  }
  return len;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_close>:

int _close(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258a:	605a      	str	r2, [r3, #4]
  return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_isatty>:

int _isatty(int file)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <_sbrk+0x5c>)
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <_sbrk+0x60>)
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <_sbrk+0x64>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <_sbrk+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d207      	bcs.n	800260c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025fc:	f006 f824 	bl	8008648 <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	220c      	movs	r2, #12
 8002604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e009      	b.n	8002620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <_sbrk+0x64>)
 800261c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20010000 	.word	0x20010000
 800262c:	00000400 	.word	0x00000400
 8002630:	200003e8 	.word	0x200003e8
 8002634:	20000610 	.word	0x20000610

08002638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <SystemInit+0x20>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	4a05      	ldr	r2, [pc, #20]	; (8002658 <SystemInit+0x20>)
 8002644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b096      	sub	sp, #88	; 0x58
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002662:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800267a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	615a      	str	r2, [r3, #20]
 800268c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	2220      	movs	r2, #32
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f005 ff48 	bl	800852a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800269a:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <MX_TIM1_Init+0x138>)
 800269c:	4a3e      	ldr	r2, [pc, #248]	; (8002798 <MX_TIM1_Init+0x13c>)
 800269e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 80026a0:	4b3c      	ldr	r3, [pc, #240]	; (8002794 <MX_TIM1_Init+0x138>)
 80026a2:	2227      	movs	r2, #39	; 0x27
 80026a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <MX_TIM1_Init+0x138>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 80026ac:	4b39      	ldr	r3, [pc, #228]	; (8002794 <MX_TIM1_Init+0x138>)
 80026ae:	f649 4240 	movw	r2, #40000	; 0x9c40
 80026b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b4:	4b37      	ldr	r3, [pc, #220]	; (8002794 <MX_TIM1_Init+0x138>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026ba:	4b36      	ldr	r3, [pc, #216]	; (8002794 <MX_TIM1_Init+0x138>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c0:	4b34      	ldr	r3, [pc, #208]	; (8002794 <MX_TIM1_Init+0x138>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026c6:	4833      	ldr	r0, [pc, #204]	; (8002794 <MX_TIM1_Init+0x138>)
 80026c8:	f002 fa0a 	bl	8004ae0 <HAL_TIM_Base_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80026d2:	f7ff faf1 	bl	8001cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026e0:	4619      	mov	r1, r3
 80026e2:	482c      	ldr	r0, [pc, #176]	; (8002794 <MX_TIM1_Init+0x138>)
 80026e4:	f002 fc16 	bl	8004f14 <HAL_TIM_ConfigClockSource>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80026ee:	f7ff fae3 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026f2:	4828      	ldr	r0, [pc, #160]	; (8002794 <MX_TIM1_Init+0x138>)
 80026f4:	f002 fa43 	bl	8004b7e <HAL_TIM_PWM_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80026fe:	f7ff fadb 	bl	8001cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800270a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800270e:	4619      	mov	r1, r3
 8002710:	4820      	ldr	r0, [pc, #128]	; (8002794 <MX_TIM1_Init+0x138>)
 8002712:	f002 ff93 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800271c:	f7ff facc 	bl	8001cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002720:	2360      	movs	r3, #96	; 0x60
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800272c:	2300      	movs	r3, #0
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002734:	2300      	movs	r3, #0
 8002736:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800273c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002740:	2200      	movs	r2, #0
 8002742:	4619      	mov	r1, r3
 8002744:	4813      	ldr	r0, [pc, #76]	; (8002794 <MX_TIM1_Init+0x138>)
 8002746:	f002 fb23 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002750:	f7ff fab2 	bl	8001cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800276c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4807      	ldr	r0, [pc, #28]	; (8002794 <MX_TIM1_Init+0x138>)
 8002778:	f002 ffce 	bl	8005718 <HAL_TIMEx_ConfigBreakDeadTime>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002782:	f7ff fa99 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002786:	4803      	ldr	r0, [pc, #12]	; (8002794 <MX_TIM1_Init+0x138>)
 8002788:	f000 f8b4 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 800278c:	bf00      	nop
 800278e:	3758      	adds	r7, #88	; 0x58
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200003ec 	.word	0x200003ec
 8002798:	40010000 	.word	0x40010000

0800279c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08e      	sub	sp, #56	; 0x38
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b0:	f107 0320 	add.w	r3, r7, #32
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
 80027c8:	615a      	str	r2, [r3, #20]
 80027ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <MX_TIM2_Init+0xe8>)
 80027ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 80027d4:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <MX_TIM2_Init+0xe8>)
 80027d6:	2227      	movs	r2, #39	; 0x27
 80027d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <MX_TIM2_Init+0xe8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 80027e0:	4b28      	ldr	r3, [pc, #160]	; (8002884 <MX_TIM2_Init+0xe8>)
 80027e2:	f649 4240 	movw	r2, #40000	; 0x9c40
 80027e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e8:	4b26      	ldr	r3, [pc, #152]	; (8002884 <MX_TIM2_Init+0xe8>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ee:	4b25      	ldr	r3, [pc, #148]	; (8002884 <MX_TIM2_Init+0xe8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027f4:	4823      	ldr	r0, [pc, #140]	; (8002884 <MX_TIM2_Init+0xe8>)
 80027f6:	f002 f973 	bl	8004ae0 <HAL_TIM_Base_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002800:	f7ff fa5a 	bl	8001cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800280a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800280e:	4619      	mov	r1, r3
 8002810:	481c      	ldr	r0, [pc, #112]	; (8002884 <MX_TIM2_Init+0xe8>)
 8002812:	f002 fb7f 	bl	8004f14 <HAL_TIM_ConfigClockSource>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800281c:	f7ff fa4c 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002820:	4818      	ldr	r0, [pc, #96]	; (8002884 <MX_TIM2_Init+0xe8>)
 8002822:	f002 f9ac 	bl	8004b7e <HAL_TIM_PWM_Init>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800282c:	f7ff fa44 	bl	8001cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002838:	f107 0320 	add.w	r3, r7, #32
 800283c:	4619      	mov	r1, r3
 800283e:	4811      	ldr	r0, [pc, #68]	; (8002884 <MX_TIM2_Init+0xe8>)
 8002840:	f002 fefc 	bl	800563c <HAL_TIMEx_MasterConfigSynchronization>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800284a:	f7ff fa35 	bl	8001cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800284e:	2360      	movs	r3, #96	; 0x60
 8002850:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	2208      	movs	r2, #8
 8002862:	4619      	mov	r1, r3
 8002864:	4807      	ldr	r0, [pc, #28]	; (8002884 <MX_TIM2_Init+0xe8>)
 8002866:	f002 fa93 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002870:	f7ff fa22 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002874:	4803      	ldr	r0, [pc, #12]	; (8002884 <MX_TIM2_Init+0xe8>)
 8002876:	f000 f83d 	bl	80028f4 <HAL_TIM_MspPostInit>

}
 800287a:	bf00      	nop
 800287c:	3738      	adds	r7, #56	; 0x38
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000434 	.word	0x20000434

08002888 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a15      	ldr	r2, [pc, #84]	; (80028ec <HAL_TIM_Base_MspInit+0x64>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_TIM_Base_MspInit+0x68>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <HAL_TIM_Base_MspInit+0x68>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6453      	str	r3, [r2, #68]	; 0x44
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_TIM_Base_MspInit+0x68>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028b6:	e012      	b.n	80028de <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d10d      	bne.n	80028de <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_TIM_Base_MspInit+0x68>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_TIM_Base_MspInit+0x68>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6413      	str	r3, [r2, #64]	; 0x40
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_TIM_Base_MspInit+0x68>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
}
 80028de:	bf00      	nop
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
 800290a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <HAL_TIM_MspPostInit+0xb4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d11f      	bne.n	8002956 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	4b24      	ldr	r3, [pc, #144]	; (80029ac <HAL_TIM_MspPostInit+0xb8>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a23      	ldr	r2, [pc, #140]	; (80029ac <HAL_TIM_MspPostInit+0xb8>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_TIM_MspPostInit+0xb8>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002944:	2301      	movs	r3, #1
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	4619      	mov	r1, r3
 800294e:	4818      	ldr	r0, [pc, #96]	; (80029b0 <HAL_TIM_MspPostInit+0xbc>)
 8002950:	f000 fb10 	bl	8002f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002954:	e023      	b.n	800299e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d11e      	bne.n	800299e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_TIM_MspPostInit+0xb8>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4a10      	ldr	r2, [pc, #64]	; (80029ac <HAL_TIM_MspPostInit+0xb8>)
 800296a:	f043 0302 	orr.w	r3, r3, #2
 800296e:	6313      	str	r3, [r2, #48]	; 0x30
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_TIM_MspPostInit+0xb8>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800297c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2300      	movs	r3, #0
 800298c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800298e:	2301      	movs	r3, #1
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	4619      	mov	r1, r3
 8002998:	4806      	ldr	r0, [pc, #24]	; (80029b4 <HAL_TIM_MspPostInit+0xc0>)
 800299a:	f000 faeb 	bl	8002f74 <HAL_GPIO_Init>
}
 800299e:	bf00      	nop
 80029a0:	3728      	adds	r7, #40	; 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020400 	.word	0x40020400

080029b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_USART1_UART_Init+0x50>)
 80029c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029de:	220c      	movs	r2, #12
 80029e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029f0:	f002 fee4 	bl	80057bc <HAL_UART_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029fa:	f7ff f95d 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	2000047c 	.word	0x2000047c
 8002a08:	40011000 	.word	0x40011000

08002a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <HAL_UART_MspInit+0x94>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d134      	bne.n	8002a98 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_UART_MspInit+0x98>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <HAL_UART_MspInit+0x98>)
 8002a38:	f043 0310 	orr.w	r3, r3, #16
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_UART_MspInit+0x98>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]


    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_UART_MspInit+0x98>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_UART_MspInit+0x98>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_UART_MspInit+0x98>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a78:	2307      	movs	r3, #7
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4619      	mov	r1, r3
 8002a82:	4809      	ldr	r0, [pc, #36]	; (8002aa8 <HAL_UART_MspInit+0x9c>)
 8002a84:	f000 fa76 	bl	8002f74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	2025      	movs	r0, #37	; 0x25
 8002a8e:	f000 f9a8 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a92:	2025      	movs	r0, #37	; 0x25
 8002a94:	f000 f9c1 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a98:	bf00      	nop
 8002a9a:	3728      	adds	r7, #40	; 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40011000 	.word	0x40011000
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020000 	.word	0x40020000

08002aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ab2:	490e      	ldr	r1, [pc, #56]	; (8002aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ab4:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab8:	e002      	b.n	8002ac0 <LoopCopyDataInit>

08002aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002abe:	3304      	adds	r3, #4

08002ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac4:	d3f9      	bcc.n	8002aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ac8:	4c0b      	ldr	r4, [pc, #44]	; (8002af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002acc:	e001      	b.n	8002ad2 <LoopFillZerobss>

08002ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad0:	3204      	adds	r2, #4

08002ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad4:	d3fb      	bcc.n	8002ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ad6:	f7ff fdaf 	bl	8002638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ada:	f005 fdbb 	bl	8008654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ade:	f7fe fdd1 	bl	8001684 <main>
  bx  lr    
 8002ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ae4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aec:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002af0:	0800bca8 	.word	0x0800bca8
  ldr r2, =_sbss
 8002af4:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002af8:	20000610 	.word	0x20000610

08002afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC_IRQHandler>
	...

08002b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <HAL_Init+0x40>)
 8002b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_Init+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_Init+0x40>)
 8002b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <HAL_Init+0x40>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b28:	2003      	movs	r0, #3
 8002b2a:	f000 f94f 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b2e:	200f      	movs	r0, #15
 8002b30:	f000 f808 	bl	8002b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b34:	f7ff fc5e 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00

08002b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_InitTick+0x54>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_InitTick+0x58>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f967 	bl	8002e36 <HAL_SYSTICK_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00e      	b.n	8002b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d80a      	bhi.n	8002b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f000 f92f 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b84:	4a06      	ldr	r2, [pc, #24]	; (8002ba0 <HAL_InitTick+0x5c>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200000a8 	.word	0x200000a8
 8002b9c:	200000b0 	.word	0x200000b0
 8002ba0:	200000ac 	.word	0x200000ac

08002ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_IncTick+0x20>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_IncTick+0x24>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <HAL_IncTick+0x24>)
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	200000b0 	.word	0x200000b0
 8002bc8:	200004c0 	.word	0x200004c0

08002bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_GetTick+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	200004c0 	.word	0x200004c0

08002be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff ffee 	bl	8002bcc <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d005      	beq.n	8002c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_Delay+0x44>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c0a:	bf00      	nop
 8002c0c:	f7ff ffde 	bl	8002bcc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d8f7      	bhi.n	8002c0c <HAL_Delay+0x28>
  {
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200000b0 	.word	0x200000b0

08002c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5e:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	60d3      	str	r3, [r2, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	; (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
         );
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff3e 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff31 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff feb6 	bl	8002bcc <HAL_GetTick>
 8002e60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d008      	beq.n	8002e80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e052      	b.n	8002f26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0216 	bic.w	r2, r2, #22
 8002e8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <HAL_DMA_Abort+0x62>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0208 	bic.w	r2, r2, #8
 8002ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed0:	e013      	b.n	8002efa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ed2:	f7ff fe7b 	bl	8002bcc <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d90c      	bls.n	8002efa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2203      	movs	r2, #3
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e015      	b.n	8002f26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e4      	bne.n	8002ed2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	223f      	movs	r2, #63	; 0x3f
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d004      	beq.n	8002f4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2280      	movs	r2, #128	; 0x80
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e00c      	b.n	8002f66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2205      	movs	r2, #5
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e159      	b.n	8003244 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	f040 8148 	bne.w	800323e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d005      	beq.n	8002fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b03      	cmp	r3, #3
 8003032:	d017      	beq.n	8003064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0303 	and.w	r3, r3, #3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d123      	bne.n	80030b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	08da      	lsrs	r2, r3, #3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3208      	adds	r2, #8
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08da      	lsrs	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3208      	adds	r2, #8
 80030b2:	69b9      	ldr	r1, [r7, #24]
 80030b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0203 	and.w	r2, r3, #3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a2 	beq.w	800323e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b57      	ldr	r3, [pc, #348]	; (800325c <HAL_GPIO_Init+0x2e8>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	4a56      	ldr	r2, [pc, #344]	; (800325c <HAL_GPIO_Init+0x2e8>)
 8003104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003108:	6453      	str	r3, [r2, #68]	; 0x44
 800310a:	4b54      	ldr	r3, [pc, #336]	; (800325c <HAL_GPIO_Init+0x2e8>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003116:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_GPIO_Init+0x2ec>)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	3302      	adds	r3, #2
 800311e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	220f      	movs	r2, #15
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a49      	ldr	r2, [pc, #292]	; (8003264 <HAL_GPIO_Init+0x2f0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d019      	beq.n	8003176 <HAL_GPIO_Init+0x202>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a48      	ldr	r2, [pc, #288]	; (8003268 <HAL_GPIO_Init+0x2f4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_Init+0x1fe>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a47      	ldr	r2, [pc, #284]	; (800326c <HAL_GPIO_Init+0x2f8>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_GPIO_Init+0x1fa>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a46      	ldr	r2, [pc, #280]	; (8003270 <HAL_GPIO_Init+0x2fc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_Init+0x1f6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a45      	ldr	r2, [pc, #276]	; (8003274 <HAL_GPIO_Init+0x300>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_GPIO_Init+0x1f2>
 8003162:	2304      	movs	r3, #4
 8003164:	e008      	b.n	8003178 <HAL_GPIO_Init+0x204>
 8003166:	2307      	movs	r3, #7
 8003168:	e006      	b.n	8003178 <HAL_GPIO_Init+0x204>
 800316a:	2303      	movs	r3, #3
 800316c:	e004      	b.n	8003178 <HAL_GPIO_Init+0x204>
 800316e:	2302      	movs	r3, #2
 8003170:	e002      	b.n	8003178 <HAL_GPIO_Init+0x204>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_GPIO_Init+0x204>
 8003176:	2300      	movs	r3, #0
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	f002 0203 	and.w	r2, r2, #3
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	4093      	lsls	r3, r2
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003188:	4935      	ldr	r1, [pc, #212]	; (8003260 <HAL_GPIO_Init+0x2ec>)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	3302      	adds	r3, #2
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003196:	4b38      	ldr	r3, [pc, #224]	; (8003278 <HAL_GPIO_Init+0x304>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ba:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <HAL_GPIO_Init+0x304>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <HAL_GPIO_Init+0x304>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e4:	4a24      	ldr	r2, [pc, #144]	; (8003278 <HAL_GPIO_Init+0x304>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_GPIO_Init+0x304>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4013      	ands	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800320e:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_GPIO_Init+0x304>)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <HAL_GPIO_Init+0x304>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003238:	4a0f      	ldr	r2, [pc, #60]	; (8003278 <HAL_GPIO_Init+0x304>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3301      	adds	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	2b0f      	cmp	r3, #15
 8003248:	f67f aea2 	bls.w	8002f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	3724      	adds	r7, #36	; 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800
 8003260:	40013800 	.word	0x40013800
 8003264:	40020000 	.word	0x40020000
 8003268:	40020400 	.word	0x40020400
 800326c:	40020800 	.word	0x40020800
 8003270:	40020c00 	.word	0x40020c00
 8003274:	40021000 	.word	0x40021000
 8003278:	40013c00 	.word	0x40013c00

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e12b      	b.n	800351a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fd ff20 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2224      	movs	r2, #36	; 0x24
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003314:	f001 fbbc 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8003318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4a81      	ldr	r2, [pc, #516]	; (8003524 <HAL_I2C_Init+0x274>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d807      	bhi.n	8003334 <HAL_I2C_Init+0x84>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a80      	ldr	r2, [pc, #512]	; (8003528 <HAL_I2C_Init+0x278>)
 8003328:	4293      	cmp	r3, r2
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e006      	b.n	8003342 <HAL_I2C_Init+0x92>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a7d      	ldr	r2, [pc, #500]	; (800352c <HAL_I2C_Init+0x27c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e0e7      	b.n	800351a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a78      	ldr	r2, [pc, #480]	; (8003530 <HAL_I2C_Init+0x280>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0c9b      	lsrs	r3, r3, #18
 8003354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4a6a      	ldr	r2, [pc, #424]	; (8003524 <HAL_I2C_Init+0x274>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d802      	bhi.n	8003384 <HAL_I2C_Init+0xd4>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3301      	adds	r3, #1
 8003382:	e009      	b.n	8003398 <HAL_I2C_Init+0xe8>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	4a69      	ldr	r2, [pc, #420]	; (8003534 <HAL_I2C_Init+0x284>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	3301      	adds	r3, #1
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	430b      	orrs	r3, r1
 800339e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	495c      	ldr	r1, [pc, #368]	; (8003524 <HAL_I2C_Init+0x274>)
 80033b4:	428b      	cmp	r3, r1
 80033b6:	d819      	bhi.n	80033ec <HAL_I2C_Init+0x13c>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1e59      	subs	r1, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c6:	1c59      	adds	r1, r3, #1
 80033c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033cc:	400b      	ands	r3, r1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_I2C_Init+0x138>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1e59      	subs	r1, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	e051      	b.n	800348c <HAL_I2C_Init+0x1dc>
 80033e8:	2304      	movs	r3, #4
 80033ea:	e04f      	b.n	800348c <HAL_I2C_Init+0x1dc>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d111      	bne.n	8003418 <HAL_I2C_Init+0x168>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e58      	subs	r0, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	440b      	add	r3, r1
 8003402:	fbb0 f3f3 	udiv	r3, r0, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e012      	b.n	800343e <HAL_I2C_Init+0x18e>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1e58      	subs	r0, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6859      	ldr	r1, [r3, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	0099      	lsls	r1, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	fbb0 f3f3 	udiv	r3, r0, r3
 800342e:	3301      	adds	r3, #1
 8003430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf0c      	ite	eq
 8003438:	2301      	moveq	r3, #1
 800343a:	2300      	movne	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Init+0x196>
 8003442:	2301      	movs	r3, #1
 8003444:	e022      	b.n	800348c <HAL_I2C_Init+0x1dc>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10e      	bne.n	800346c <HAL_I2C_Init+0x1bc>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1e58      	subs	r0, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6859      	ldr	r1, [r3, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	440b      	add	r3, r1
 800345c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003460:	3301      	adds	r3, #1
 8003462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800346a:	e00f      	b.n	800348c <HAL_I2C_Init+0x1dc>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e58      	subs	r0, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	0099      	lsls	r1, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003488:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	6809      	ldr	r1, [r1, #0]
 8003490:	4313      	orrs	r3, r2
 8003492:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6911      	ldr	r1, [r2, #16]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68d2      	ldr	r2, [r2, #12]
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	000186a0 	.word	0x000186a0
 8003528:	001e847f 	.word	0x001e847f
 800352c:	003d08ff 	.word	0x003d08ff
 8003530:	431bde83 	.word	0x431bde83
 8003534:	10624dd3 	.word	0x10624dd3

08003538 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4603      	mov	r3, r0
 8003548:	817b      	strh	r3, [r7, #10]
 800354a:	460b      	mov	r3, r1
 800354c:	813b      	strh	r3, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003552:	f7ff fb3b 	bl	8002bcc <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	f040 80d9 	bne.w	8003718 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	2319      	movs	r3, #25
 800356c:	2201      	movs	r2, #1
 800356e:	496d      	ldr	r1, [pc, #436]	; (8003724 <HAL_I2C_Mem_Write+0x1ec>)
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 fc7f 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
 800357e:	e0cc      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_I2C_Mem_Write+0x56>
 800358a:	2302      	movs	r3, #2
 800358c:	e0c5      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d007      	beq.n	80035b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2221      	movs	r2, #33	; 0x21
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2240      	movs	r2, #64	; 0x40
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a3a      	ldr	r2, [r7, #32]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a4d      	ldr	r2, [pc, #308]	; (8003728 <HAL_I2C_Mem_Write+0x1f0>)
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035f6:	88f8      	ldrh	r0, [r7, #6]
 80035f8:	893a      	ldrh	r2, [r7, #8]
 80035fa:	8979      	ldrh	r1, [r7, #10]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	4603      	mov	r3, r0
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fab6 	bl	8003b78 <I2C_RequestMemoryWrite>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d052      	beq.n	80036b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e081      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fd00 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	2b04      	cmp	r3, #4
 800362c:	d107      	bne.n	800363e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800363c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e06b      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	781a      	ldrb	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	3b01      	subs	r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b04      	cmp	r3, #4
 800367e:	d11b      	bne.n	80036b8 <HAL_I2C_Mem_Write+0x180>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	d017      	beq.n	80036b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1aa      	bne.n	8003616 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fcec 	bl	80040a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d107      	bne.n	80036e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e016      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	00100002 	.word	0x00100002
 8003728:	ffff0000 	.word	0xffff0000

0800372c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08c      	sub	sp, #48	; 0x30
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	461a      	mov	r2, r3
 800373a:	4603      	mov	r3, r0
 800373c:	817b      	strh	r3, [r7, #10]
 800373e:	460b      	mov	r3, r1
 8003740:	813b      	strh	r3, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003746:	f7ff fa41 	bl	8002bcc <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b20      	cmp	r3, #32
 8003756:	f040 8208 	bne.w	8003b6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	2319      	movs	r3, #25
 8003760:	2201      	movs	r2, #1
 8003762:	497b      	ldr	r1, [pc, #492]	; (8003950 <HAL_I2C_Mem_Read+0x224>)
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fb85 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
 8003772:	e1fb      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_I2C_Mem_Read+0x56>
 800377e:	2302      	movs	r3, #2
 8003780:	e1f4      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d007      	beq.n	80037a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2222      	movs	r2, #34	; 0x22
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2240      	movs	r2, #64	; 0x40
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4a5b      	ldr	r2, [pc, #364]	; (8003954 <HAL_I2C_Mem_Read+0x228>)
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ea:	88f8      	ldrh	r0, [r7, #6]
 80037ec:	893a      	ldrh	r2, [r7, #8]
 80037ee:	8979      	ldrh	r1, [r7, #10]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4603      	mov	r3, r0
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa52 	bl	8003ca4 <I2C_RequestMemoryRead>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1b0      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d113      	bne.n	800383a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	623b      	str	r3, [r7, #32]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e184      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	2b01      	cmp	r3, #1
 8003840:	d11b      	bne.n	800387a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e164      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	2b02      	cmp	r3, #2
 8003880:	d11b      	bne.n	80038ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003890:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	e144      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038d0:	e138      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	f200 80f1 	bhi.w	8003abe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d123      	bne.n	800392c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fc1b 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e139      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a
 800392a:	e10b      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	2b02      	cmp	r3, #2
 8003932:	d14e      	bne.n	80039d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	2200      	movs	r2, #0
 800393c:	4906      	ldr	r1, [pc, #24]	; (8003958 <HAL_I2C_Mem_Read+0x22c>)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fa98 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d008      	beq.n	800395c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e10e      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
 800394e:	bf00      	nop
 8003950:	00100002 	.word	0x00100002
 8003954:	ffff0000 	.word	0xffff0000
 8003958:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d0:	e0b8      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	2200      	movs	r2, #0
 80039da:	4966      	ldr	r1, [pc, #408]	; (8003b74 <HAL_I2C_Mem_Read+0x448>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fa49 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0bf      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a34:	2200      	movs	r2, #0
 8003a36:	494f      	ldr	r1, [pc, #316]	; (8003b74 <HAL_I2C_Mem_Read+0x448>)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 fa1b 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e091      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003abc:	e042      	b.n	8003b44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fb2e 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e04c      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d118      	bne.n	8003b44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f47f aec2 	bne.w	80038d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b6a:	2302      	movs	r3, #2
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3728      	adds	r7, #40	; 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	00010004 	.word	0x00010004

08003b78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	4608      	mov	r0, r1
 8003b82:	4611      	mov	r1, r2
 8003b84:	461a      	mov	r2, r3
 8003b86:	4603      	mov	r3, r0
 8003b88:	817b      	strh	r3, [r7, #10]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	813b      	strh	r3, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f960 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00d      	beq.n	8003bd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc8:	d103      	bne.n	8003bd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e05f      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bd6:	897b      	ldrh	r3, [r7, #10]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003be4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	492d      	ldr	r1, [pc, #180]	; (8003ca0 <I2C_RequestMemoryWrite+0x128>)
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f998 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e04c      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c14:	6a39      	ldr	r1, [r7, #32]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fa02 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00d      	beq.n	8003c3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d107      	bne.n	8003c3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e02b      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d105      	bne.n	8003c50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c44:	893b      	ldrh	r3, [r7, #8]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	611a      	str	r2, [r3, #16]
 8003c4e:	e021      	b.n	8003c94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c50:	893b      	ldrh	r3, [r7, #8]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	6a39      	ldr	r1, [r7, #32]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f9dc 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00d      	beq.n	8003c8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d107      	bne.n	8003c86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e005      	b.n	8003c96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c8a:	893b      	ldrh	r3, [r7, #8]
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	00010002 	.word	0x00010002

08003ca4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	817b      	strh	r3, [r7, #10]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	813b      	strh	r3, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f8c2 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d103      	bne.n	8003d0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0aa      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	4952      	ldr	r1, [pc, #328]	; (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f8fa 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e097      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f964 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e076      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e021      	b.n	8003dd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d8c:	893b      	ldrh	r3, [r7, #8]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f93e 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e050      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd2:	6a39      	ldr	r1, [r7, #32]
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f923 	bl	8004020 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00d      	beq.n	8003dfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d107      	bne.n	8003df8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e035      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f82b 	bl	8003e74 <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e32:	d103      	bne.n	8003e3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e013      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e40:	897b      	ldrh	r3, [r7, #10]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	4906      	ldr	r1, [pc, #24]	; (8003e70 <I2C_RequestMemoryRead+0x1cc>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 f863 	bl	8003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	00010002 	.word	0x00010002

08003e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e84:	e025      	b.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d021      	beq.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fe fe9d 	bl	8002bcc <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d116      	bne.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e023      	b.n	8003f1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10d      	bne.n	8003ef8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	e00c      	b.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d0b6      	beq.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f30:	e051      	b.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f40:	d123      	bne.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e046      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d021      	beq.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fe fe1b 	bl	8002bcc <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d116      	bne.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e020      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10c      	bne.n	8003ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	e00b      	b.n	8004012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	43da      	mvns	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d18d      	bne.n	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402c:	e02d      	b.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f8ce 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e02d      	b.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d021      	beq.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7fe fdc1 	bl	8002bcc <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d116      	bne.n	800408a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e007      	b.n	800409a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b80      	cmp	r3, #128	; 0x80
 8004096:	d1ca      	bne.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ae:	e02d      	b.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f88d 	bl	80041d0 <I2C_IsAcknowledgeFailed>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e02d      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d021      	beq.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c8:	f7fe fd80 	bl	8002bcc <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d302      	bcc.n	80040de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d116      	bne.n	800410c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b04      	cmp	r3, #4
 8004118:	d1ca      	bne.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004130:	e042      	b.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b10      	cmp	r3, #16
 800413e:	d119      	bne.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0210 	mvn.w	r2, #16
 8004148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e029      	b.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fe fd2a 	bl	8002bcc <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f043 0220 	orr.w	r2, r3, #32
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e007      	b.n	80041c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d1b5      	bne.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d11b      	bne.n	8004220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e267      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d075      	beq.n	800433a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424e:	4b88      	ldr	r3, [pc, #544]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b04      	cmp	r3, #4
 8004258:	d00c      	beq.n	8004274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425a:	4b85      	ldr	r3, [pc, #532]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004262:	2b08      	cmp	r3, #8
 8004264:	d112      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004266:	4b82      	ldr	r3, [pc, #520]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004272:	d10b      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	4b7e      	ldr	r3, [pc, #504]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05b      	beq.n	8004338 <HAL_RCC_OscConfig+0x108>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d157      	bne.n	8004338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e242      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d106      	bne.n	80042a4 <HAL_RCC_OscConfig+0x74>
 8004296:	4b76      	ldr	r3, [pc, #472]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a75      	ldr	r2, [pc, #468]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e01d      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x98>
 80042ae:	4b70      	ldr	r3, [pc, #448]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a6f      	ldr	r2, [pc, #444]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80042b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b6d      	ldr	r3, [pc, #436]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a6c      	ldr	r2, [pc, #432]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042c8:	4b69      	ldr	r3, [pc, #420]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a68      	ldr	r2, [pc, #416]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80042ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b66      	ldr	r3, [pc, #408]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a65      	ldr	r2, [pc, #404]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80042da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe fc70 	bl	8002bcc <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe fc6c 	bl	8002bcc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e207      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	4b5b      	ldr	r3, [pc, #364]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0xc0>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fe fc5c 	bl	8002bcc <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004318:	f7fe fc58 	bl	8002bcc <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e1f3      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	4b51      	ldr	r3, [pc, #324]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0xe8>
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d063      	beq.n	800440e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004346:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800435a:	2b08      	cmp	r3, #8
 800435c:	d11c      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435e:	4b44      	ldr	r3, [pc, #272]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	4b41      	ldr	r3, [pc, #260]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1c7      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004382:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4937      	ldr	r1, [pc, #220]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	e03a      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a0:	4b34      	ldr	r3, [pc, #208]	; (8004474 <HAL_RCC_OscConfig+0x244>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fe fc11 	bl	8002bcc <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ae:	f7fe fc0d 	bl	8002bcc <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e1a8      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4925      	ldr	r1, [pc, #148]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
 80043e0:	e015      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RCC_OscConfig+0x244>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fbf0 	bl	8002bcc <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f0:	f7fe fbec 	bl	8002bcc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e187      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d036      	beq.n	8004488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_RCC_OscConfig+0x248>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fe fbd0 	bl	8002bcc <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004430:	f7fe fbcc 	bl	8002bcc <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e167      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCC_OscConfig+0x240>)
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x200>
 800444e:	e01b      	b.n	8004488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_OscConfig+0x248>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004456:	f7fe fbb9 	bl	8002bcc <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	e00e      	b.n	800447c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445e:	f7fe fbb5 	bl	8002bcc <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d907      	bls.n	800447c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e150      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
 8004470:	40023800 	.word	0x40023800
 8004474:	42470000 	.word	0x42470000
 8004478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447c:	4b88      	ldr	r3, [pc, #544]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 800447e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1ea      	bne.n	800445e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 8097 	beq.w	80045c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449a:	4b81      	ldr	r3, [pc, #516]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10f      	bne.n	80044c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	4b7d      	ldr	r3, [pc, #500]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	4a7c      	ldr	r2, [pc, #496]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 80044b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b4:	6413      	str	r3, [r2, #64]	; 0x40
 80044b6:	4b7a      	ldr	r3, [pc, #488]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c6:	4b77      	ldr	r3, [pc, #476]	; (80046a4 <HAL_RCC_OscConfig+0x474>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d118      	bne.n	8004504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d2:	4b74      	ldr	r3, [pc, #464]	; (80046a4 <HAL_RCC_OscConfig+0x474>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a73      	ldr	r2, [pc, #460]	; (80046a4 <HAL_RCC_OscConfig+0x474>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044de:	f7fe fb75 	bl	8002bcc <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e6:	f7fe fb71 	bl	8002bcc <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e10c      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	4b6a      	ldr	r3, [pc, #424]	; (80046a4 <HAL_RCC_OscConfig+0x474>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x2ea>
 800450c:	4b64      	ldr	r3, [pc, #400]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a63      	ldr	r2, [pc, #396]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
 8004518:	e01c      	b.n	8004554 <HAL_RCC_OscConfig+0x324>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b05      	cmp	r3, #5
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x30c>
 8004522:	4b5f      	ldr	r3, [pc, #380]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a5e      	ldr	r2, [pc, #376]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004528:	f043 0304 	orr.w	r3, r3, #4
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
 800452e:	4b5c      	ldr	r3, [pc, #368]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a5b      	ldr	r2, [pc, #364]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
 800453a:	e00b      	b.n	8004554 <HAL_RCC_OscConfig+0x324>
 800453c:	4b58      	ldr	r3, [pc, #352]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	4a57      	ldr	r2, [pc, #348]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	6713      	str	r3, [r2, #112]	; 0x70
 8004548:	4b55      	ldr	r3, [pc, #340]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	4a54      	ldr	r2, [pc, #336]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 800454e:	f023 0304 	bic.w	r3, r3, #4
 8004552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d015      	beq.n	8004588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fe fb36 	bl	8002bcc <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004562:	e00a      	b.n	800457a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004564:	f7fe fb32 	bl	8002bcc <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e0cb      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457a:	4b49      	ldr	r3, [pc, #292]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0ee      	beq.n	8004564 <HAL_RCC_OscConfig+0x334>
 8004586:	e014      	b.n	80045b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004588:	f7fe fb20 	bl	8002bcc <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458e:	e00a      	b.n	80045a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fe fb1c 	bl	8002bcc <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e0b5      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a6:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1ee      	bne.n	8004590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b8:	4b39      	ldr	r3, [pc, #228]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	4a38      	ldr	r2, [pc, #224]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 80045be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80a1 	beq.w	8004710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ce:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d05c      	beq.n	8004694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d141      	bne.n	8004666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e2:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <HAL_RCC_OscConfig+0x478>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fe faf0 	bl	8002bcc <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fe faec 	bl	8002bcc <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e087      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69da      	ldr	r2, [r3, #28]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	019b      	lsls	r3, r3, #6
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	041b      	lsls	r3, r3, #16
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	061b      	lsls	r3, r3, #24
 8004632:	491b      	ldr	r1, [pc, #108]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004634:	4313      	orrs	r3, r2
 8004636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004638:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <HAL_RCC_OscConfig+0x478>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe fac5 	bl	8002bcc <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe fac1 	bl	8002bcc <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e05c      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x416>
 8004664:	e054      	b.n	8004710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <HAL_RCC_OscConfig+0x478>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fe faae 	bl	8002bcc <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004674:	f7fe faaa 	bl	8002bcc <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e045      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_RCC_OscConfig+0x470>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x444>
 8004692:	e03d      	b.n	8004710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e038      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40007000 	.word	0x40007000
 80046a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046ac:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d028      	beq.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d121      	bne.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d11a      	bne.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d111      	bne.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	3b01      	subs	r3, #1
 80046f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d107      	bne.n	800470c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e000      	b.n	8004712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0cc      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b68      	ldr	r3, [pc, #416]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d90c      	bls.n	800475c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a58      	ldr	r2, [pc, #352]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800477e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a52      	ldr	r2, [pc, #328]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d044      	beq.n	8004840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d119      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d003      	beq.n	80047de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e067      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4934      	ldr	r1, [pc, #208]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004810:	f7fe f9dc 	bl	8002bcc <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fe f9d8 	bl	8002bcc <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e04f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d20c      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	490a      	ldr	r1, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	5ccb      	ldrb	r3, [r1, r3]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe f93c 	bl	8002b44 <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00
 80048dc:	40023800 	.word	0x40023800
 80048e0:	0800b7e4 	.word	0x0800b7e4
 80048e4:	200000a8 	.word	0x200000a8
 80048e8:	200000ac 	.word	0x200000ac

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048f0:	b090      	sub	sp, #64	; 0x40
 80048f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	637b      	str	r3, [r7, #52]	; 0x34
 80048f8:	2300      	movs	r3, #0
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fc:	2300      	movs	r3, #0
 80048fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004904:	4b59      	ldr	r3, [pc, #356]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b08      	cmp	r3, #8
 800490e:	d00d      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x40>
 8004910:	2b08      	cmp	r3, #8
 8004912:	f200 80a1 	bhi.w	8004a58 <HAL_RCC_GetSysClockFreq+0x16c>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x34>
 800491a:	2b04      	cmp	r3, #4
 800491c:	d003      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x3a>
 800491e:	e09b      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004922:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004924:	e09b      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004926:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004928:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800492a:	e098      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492c:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004936:	4b4d      	ldr	r3, [pc, #308]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d028      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004942:	4b4a      	ldr	r3, [pc, #296]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	2200      	movs	r2, #0
 800494a:	623b      	str	r3, [r7, #32]
 800494c:	627a      	str	r2, [r7, #36]	; 0x24
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004954:	2100      	movs	r1, #0
 8004956:	4b47      	ldr	r3, [pc, #284]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004958:	fb03 f201 	mul.w	r2, r3, r1
 800495c:	2300      	movs	r3, #0
 800495e:	fb00 f303 	mul.w	r3, r0, r3
 8004962:	4413      	add	r3, r2
 8004964:	4a43      	ldr	r2, [pc, #268]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004966:	fba0 1202 	umull	r1, r2, r0, r2
 800496a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800496c:	460a      	mov	r2, r1
 800496e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004972:	4413      	add	r3, r2
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004978:	2200      	movs	r2, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	61fa      	str	r2, [r7, #28]
 800497e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004986:	f7fc f987 	bl	8000c98 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4613      	mov	r3, r2
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004992:	e053      	b.n	8004a3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004994:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	2200      	movs	r2, #0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	617a      	str	r2, [r7, #20]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049a6:	f04f 0b00 	mov.w	fp, #0
 80049aa:	4652      	mov	r2, sl
 80049ac:	465b      	mov	r3, fp
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	0159      	lsls	r1, r3, #5
 80049b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049bc:	0150      	lsls	r0, r2, #5
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	ebb2 080a 	subs.w	r8, r2, sl
 80049c6:	eb63 090b 	sbc.w	r9, r3, fp
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049de:	ebb2 0408 	subs.w	r4, r2, r8
 80049e2:	eb63 0509 	sbc.w	r5, r3, r9
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	00eb      	lsls	r3, r5, #3
 80049f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049f4:	00e2      	lsls	r2, r4, #3
 80049f6:	4614      	mov	r4, r2
 80049f8:	461d      	mov	r5, r3
 80049fa:	eb14 030a 	adds.w	r3, r4, sl
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	eb45 030b 	adc.w	r3, r5, fp
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a12:	4629      	mov	r1, r5
 8004a14:	028b      	lsls	r3, r1, #10
 8004a16:	4621      	mov	r1, r4
 8004a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	028a      	lsls	r2, r1, #10
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a26:	2200      	movs	r2, #0
 8004a28:	60bb      	str	r3, [r7, #8]
 8004a2a:	60fa      	str	r2, [r7, #12]
 8004a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a30:	f7fc f932 	bl	8000c98 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	3301      	adds	r3, #1
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a56:	e002      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3740      	adds	r7, #64	; 0x40
 8004a64:	46bd      	mov	sp, r7
 8004a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	00f42400 	.word	0x00f42400
 8004a74:	017d7840 	.word	0x017d7840

08004a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	200000a8 	.word	0x200000a8

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a94:	f7ff fff0 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0a9b      	lsrs	r3, r3, #10
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	0800b7f4 	.word	0x0800b7f4

08004ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004abc:	f7ff ffdc 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0b5b      	lsrs	r3, r3, #13
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4903      	ldr	r1, [pc, #12]	; (8004adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	0800b7f4 	.word	0x0800b7f4

08004ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e041      	b.n	8004b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fd febe 	bl	8002888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f000 fac0 	bl	80050a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e041      	b.n	8004c14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f839 	bl	8004c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f000 fa71 	bl	80050a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c24:	bf00      	nop
 8004c26:	370c      	adds	r7, #12
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d109      	bne.n	8004c54 <HAL_TIM_PWM_Start+0x24>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e022      	b.n	8004c9a <HAL_TIM_PWM_Start+0x6a>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d109      	bne.n	8004c6e <HAL_TIM_PWM_Start+0x3e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	e015      	b.n	8004c9a <HAL_TIM_PWM_Start+0x6a>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d109      	bne.n	8004c88 <HAL_TIM_PWM_Start+0x58>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	e008      	b.n	8004c9a <HAL_TIM_PWM_Start+0x6a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e068      	b.n	8004d74 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_TIM_PWM_Start+0x82>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cb0:	e013      	b.n	8004cda <HAL_TIM_PWM_Start+0xaa>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_PWM_Start+0x92>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc0:	e00b      	b.n	8004cda <HAL_TIM_PWM_Start+0xaa>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0xa2>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd0:	e003      	b.n	8004cda <HAL_TIM_PWM_Start+0xaa>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fc84 	bl	80055f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a23      	ldr	r2, [pc, #140]	; (8004d7c <HAL_TIM_PWM_Start+0x14c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d107      	bne.n	8004d02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <HAL_TIM_PWM_Start+0x14c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x10e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d14:	d013      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x10e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <HAL_TIM_PWM_Start+0x150>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x10e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <HAL_TIM_PWM_Start+0x154>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x10e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <HAL_TIM_PWM_Start+0x158>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIM_PWM_Start+0x10e>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <HAL_TIM_PWM_Start+0x15c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d111      	bne.n	8004d62 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b06      	cmp	r3, #6
 8004d4e:	d010      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d60:	e007      	b.n	8004d72 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40014000 	.word	0x40014000

08004d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e0ae      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b0c      	cmp	r3, #12
 8004dba:	f200 809f 	bhi.w	8004efc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004df9 	.word	0x08004df9
 8004dc8:	08004efd 	.word	0x08004efd
 8004dcc:	08004efd 	.word	0x08004efd
 8004dd0:	08004efd 	.word	0x08004efd
 8004dd4:	08004e39 	.word	0x08004e39
 8004dd8:	08004efd 	.word	0x08004efd
 8004ddc:	08004efd 	.word	0x08004efd
 8004de0:	08004efd 	.word	0x08004efd
 8004de4:	08004e7b 	.word	0x08004e7b
 8004de8:	08004efd 	.word	0x08004efd
 8004dec:	08004efd 	.word	0x08004efd
 8004df0:	08004efd 	.word	0x08004efd
 8004df4:	08004ebb 	.word	0x08004ebb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f9d0 	bl	80051a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0208 	orr.w	r2, r2, #8
 8004e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0204 	bic.w	r2, r2, #4
 8004e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6999      	ldr	r1, [r3, #24]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	619a      	str	r2, [r3, #24]
      break;
 8004e36:	e064      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fa16 	bl	8005270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6999      	ldr	r1, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	021a      	lsls	r2, r3, #8
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	619a      	str	r2, [r3, #24]
      break;
 8004e78:	e043      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fa61 	bl	8005348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0208 	orr.w	r2, r2, #8
 8004e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0204 	bic.w	r2, r2, #4
 8004ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69d9      	ldr	r1, [r3, #28]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	61da      	str	r2, [r3, #28]
      break;
 8004eb8:	e023      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 faab 	bl	800541c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	021a      	lsls	r2, r3, #8
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	61da      	str	r2, [r3, #28]
      break;
 8004efa:	e002      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIM_ConfigClockSource+0x1c>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e0b4      	b.n	800509a <HAL_TIM_ConfigClockSource+0x186>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f68:	d03e      	beq.n	8004fe8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6e:	f200 8087 	bhi.w	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	f000 8086 	beq.w	8005086 <HAL_TIM_ConfigClockSource+0x172>
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	d87f      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b70      	cmp	r3, #112	; 0x70
 8004f82:	d01a      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0xa6>
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d87b      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d050      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x11a>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d877      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b50      	cmp	r3, #80	; 0x50
 8004f92:	d03c      	beq.n	800500e <HAL_TIM_ConfigClockSource+0xfa>
 8004f94:	2b50      	cmp	r3, #80	; 0x50
 8004f96:	d873      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d058      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x13a>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d86f      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b30      	cmp	r3, #48	; 0x30
 8004fa2:	d064      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d86b      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d060      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d867      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d05c      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d05a      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fb8:	e062      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6899      	ldr	r1, [r3, #8]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f000 faf1 	bl	80055b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	609a      	str	r2, [r3, #8]
      break;
 8004fe6:	e04f      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6899      	ldr	r1, [r3, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f000 fada 	bl	80055b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500a:	609a      	str	r2, [r3, #8]
      break;
 800500c:	e03c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 fa4e 	bl	80054bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2150      	movs	r1, #80	; 0x50
 8005026:	4618      	mov	r0, r3
 8005028:	f000 faa7 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 800502c:	e02c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fa6d 	bl	800551a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2160      	movs	r1, #96	; 0x60
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fa97 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 800504c:	e01c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6859      	ldr	r1, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	461a      	mov	r2, r3
 800505c:	f000 fa2e 	bl	80054bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2140      	movs	r1, #64	; 0x40
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fa87 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 800506c:	e00c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f000 fa7e 	bl	800557a <TIM_ITRx_SetConfig>
      break;
 800507e:	e003      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      break;
 8005084:	e000      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a34      	ldr	r2, [pc, #208]	; (8005188 <TIM_Base_SetConfig+0xe4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00f      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a31      	ldr	r2, [pc, #196]	; (800518c <TIM_Base_SetConfig+0xe8>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a30      	ldr	r2, [pc, #192]	; (8005190 <TIM_Base_SetConfig+0xec>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x38>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2f      	ldr	r2, [pc, #188]	; (8005194 <TIM_Base_SetConfig+0xf0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a25      	ldr	r2, [pc, #148]	; (8005188 <TIM_Base_SetConfig+0xe4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01b      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d017      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a22      	ldr	r2, [pc, #136]	; (800518c <TIM_Base_SetConfig+0xe8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a21      	ldr	r2, [pc, #132]	; (8005190 <TIM_Base_SetConfig+0xec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a20      	ldr	r2, [pc, #128]	; (8005194 <TIM_Base_SetConfig+0xf0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1f      	ldr	r2, [pc, #124]	; (8005198 <TIM_Base_SetConfig+0xf4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1e      	ldr	r2, [pc, #120]	; (800519c <TIM_Base_SetConfig+0xf8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <TIM_Base_SetConfig+0xfc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a08      	ldr	r2, [pc, #32]	; (8005188 <TIM_Base_SetConfig+0xe4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800
 8005194:	40000c00 	.word	0x40000c00
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400
 80051a0:	40014800 	.word	0x40014800

080051a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 0201 	bic.w	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f023 0302 	bic.w	r3, r3, #2
 80051ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a1c      	ldr	r2, [pc, #112]	; (800526c <TIM_OC1_SetConfig+0xc8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10c      	bne.n	800521a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0308 	bic.w	r3, r3, #8
 8005206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 0304 	bic.w	r3, r3, #4
 8005218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a13      	ldr	r2, [pc, #76]	; (800526c <TIM_OC1_SetConfig+0xc8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d111      	bne.n	8005246 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40010000 	.word	0x40010000

08005270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005270:	b480      	push	{r7}
 8005272:	b087      	sub	sp, #28
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f023 0210 	bic.w	r2, r3, #16
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f023 0320 	bic.w	r3, r3, #32
 80052ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <TIM_OC2_SetConfig+0xd4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d10d      	bne.n	80052ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	011b      	lsls	r3, r3, #4
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a15      	ldr	r2, [pc, #84]	; (8005344 <TIM_OC2_SetConfig+0xd4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d113      	bne.n	800531c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000

08005348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <TIM_OC3_SetConfig+0xd0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d10d      	bne.n	80053c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a14      	ldr	r2, [pc, #80]	; (8005418 <TIM_OC3_SetConfig+0xd0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d113      	bne.n	80053f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	621a      	str	r2, [r3, #32]
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	40010000 	.word	0x40010000

0800541c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	031b      	lsls	r3, r3, #12
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <TIM_OC4_SetConfig+0x9c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d109      	bne.n	8005490 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005482:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000

080054bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f023 0201 	bic.w	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f023 030a 	bic.w	r3, r3, #10
 80054f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551a:	b480      	push	{r7}
 800551c:	b087      	sub	sp, #28
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	f023 0210 	bic.w	r2, r3, #16
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	031b      	lsls	r3, r3, #12
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	f043 0307 	orr.w	r3, r3, #7
 800559c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	021a      	lsls	r2, r3, #8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	609a      	str	r2, [r3, #8]
}
 80055e4:	bf00      	nop
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2201      	movs	r2, #1
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1a      	ldr	r2, [r3, #32]
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	43db      	mvns	r3, r3
 8005612:	401a      	ands	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	fa01 f303 	lsl.w	r3, r1, r3
 8005628:	431a      	orrs	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e050      	b.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1c      	ldr	r2, [pc, #112]	; (8005704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d018      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d013      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a18      	ldr	r2, [pc, #96]	; (8005708 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d00e      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a16      	ldr	r2, [pc, #88]	; (800570c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d009      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a15      	ldr	r2, [pc, #84]	; (8005710 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d004      	beq.n	80056ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a13      	ldr	r2, [pc, #76]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d10c      	bne.n	80056e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40014000 	.word	0x40014000

08005718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005730:	2302      	movs	r3, #2
 8005732:	e03d      	b.n	80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e03f      	b.n	800584e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fd f912 	bl	8002a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	; 0x24
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fddf 	bl	80063c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b08a      	sub	sp, #40	; 0x28
 800585a:	af02      	add	r7, sp, #8
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	4613      	mov	r3, r2
 8005864:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b20      	cmp	r3, #32
 8005874:	d17c      	bne.n	8005970 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <HAL_UART_Transmit+0x2c>
 800587c:	88fb      	ldrh	r3, [r7, #6]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e075      	b.n	8005972 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_UART_Transmit+0x3e>
 8005890:	2302      	movs	r3, #2
 8005892:	e06e      	b.n	8005972 <HAL_UART_Transmit+0x11c>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2221      	movs	r2, #33	; 0x21
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058aa:	f7fd f98f 	bl	8002bcc <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	88fa      	ldrh	r2, [r7, #6]
 80058ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c4:	d108      	bne.n	80058d8 <HAL_UART_Transmit+0x82>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e003      	b.n	80058e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058dc:	2300      	movs	r3, #0
 80058de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058e8:	e02a      	b.n	8005940 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2200      	movs	r2, #0
 80058f2:	2180      	movs	r1, #128	; 0x80
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fb1f 	bl	8005f38 <UART_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e036      	b.n	8005972 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	461a      	mov	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	3302      	adds	r3, #2
 800591e:	61bb      	str	r3, [r7, #24]
 8005920:	e007      	b.n	8005932 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	3301      	adds	r3, #1
 8005930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1cf      	bne.n	80058ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2200      	movs	r2, #0
 8005952:	2140      	movs	r1, #64	; 0x40
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 faef 	bl	8005f38 <UART_WaitOnFlagUntilTimeout>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	4613      	mov	r3, r2
 8005986:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b20      	cmp	r3, #32
 8005992:	d11d      	bne.n	80059d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_UART_Receive_IT+0x26>
 800599a:	88fb      	ldrh	r3, [r7, #6]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e016      	b.n	80059d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_UART_Receive_IT+0x38>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e00f      	b.n	80059d2 <HAL_UART_Receive_IT+0x58>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	461a      	mov	r2, r3
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fb24 	bl	8006014 <UART_Start_Receive_IT>
 80059cc:	4603      	mov	r3, r0
 80059ce:	e000      	b.n	80059d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b0ba      	sub	sp, #232	; 0xe8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10f      	bne.n	8005a42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_UART_IRQHandler+0x66>
 8005a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fc07 	bl	800624e <UART_Receive_IT>
      return;
 8005a40:	e256      	b.n	8005ef0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80de 	beq.w	8005c08 <HAL_UART_IRQHandler+0x22c>
 8005a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d106      	bne.n	8005a66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80d1 	beq.w	8005c08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <HAL_UART_IRQHandler+0xae>
 8005a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	f043 0201 	orr.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8e:	f003 0304 	and.w	r3, r3, #4
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <HAL_UART_IRQHandler+0xd2>
 8005a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f043 0202 	orr.w	r2, r3, #2
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00b      	beq.n	8005ad2 <HAL_UART_IRQHandler+0xf6>
 8005aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f043 0204 	orr.w	r2, r3, #4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d011      	beq.n	8005b02 <HAL_UART_IRQHandler+0x126>
 8005ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d105      	bne.n	8005af6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d005      	beq.n	8005b02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f043 0208 	orr.w	r2, r3, #8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 81ed 	beq.w	8005ee6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_UART_IRQHandler+0x14e>
 8005b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d002      	beq.n	8005b2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb92 	bl	800624e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695b      	ldr	r3, [r3, #20]
 8005b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b34:	2b40      	cmp	r3, #64	; 0x40
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <HAL_UART_IRQHandler+0x17a>
 8005b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d04f      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa9a 	bl	8006090 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b40      	cmp	r3, #64	; 0x40
 8005b68:	d141      	bne.n	8005bee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3314      	adds	r3, #20
 8005b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1d9      	bne.n	8005b6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d013      	beq.n	8005be6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	4a7d      	ldr	r2, [pc, #500]	; (8005db8 <HAL_UART_IRQHandler+0x3dc>)
 8005bc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd f9af 	bl	8002f2e <HAL_DMA_Abort_IT>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be4:	e00e      	b.n	8005c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f990 	bl	8005f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bec:	e00a      	b.n	8005c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f98c 	bl	8005f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf4:	e006      	b.n	8005c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f988 	bl	8005f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c02:	e170      	b.n	8005ee6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c04:	bf00      	nop
    return;
 8005c06:	e16e      	b.n	8005ee6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	f040 814a 	bne.w	8005ea6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8143 	beq.w	8005ea6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 813c 	beq.w	8005ea6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	60bb      	str	r3, [r7, #8]
 8005c42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	f040 80b4 	bne.w	8005dbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8140 	beq.w	8005eea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c72:	429a      	cmp	r2, r3
 8005c74:	f080 8139 	bcs.w	8005eea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8a:	f000 8088 	beq.w	8005d9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1d9      	bne.n	8005c8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3314      	adds	r3, #20
 8005ce0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cec:	f023 0301 	bic.w	r3, r3, #1
 8005cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3314      	adds	r3, #20
 8005cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cfe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1e1      	bne.n	8005cda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3314      	adds	r3, #20
 8005d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d42:	e841 2300 	strex	r3, r2, [r1]
 8005d46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e3      	bne.n	8005d16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d66:	e853 3f00 	ldrex	r3, [r3]
 8005d6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6e:	f023 0310 	bic.w	r3, r3, #16
 8005d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d80:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d88:	e841 2300 	strex	r3, r2, [r1]
 8005d8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1e3      	bne.n	8005d5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fd f858 	bl	8002e4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	4619      	mov	r1, r3
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f8b6 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005db4:	e099      	b.n	8005eea <HAL_UART_IRQHandler+0x50e>
 8005db6:	bf00      	nop
 8005db8:	08006157 	.word	0x08006157
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 808b 	beq.w	8005eee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8086 	beq.w	8005eee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005df8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e06:	647a      	str	r2, [r7, #68]	; 0x44
 8005e08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e3      	bne.n	8005de2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3314      	adds	r3, #20
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	623b      	str	r3, [r7, #32]
   return(result);
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3314      	adds	r3, #20
 8005e3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e3e:	633a      	str	r2, [r7, #48]	; 0x30
 8005e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e3      	bne.n	8005e1a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0310 	bic.w	r3, r3, #16
 8005e76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	330c      	adds	r3, #12
 8005e80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e84:	61fa      	str	r2, [r7, #28]
 8005e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	69b9      	ldr	r1, [r7, #24]
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	617b      	str	r3, [r7, #20]
   return(result);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e3      	bne.n	8005e60 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f83e 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ea4:	e023      	b.n	8005eee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d009      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x4ea>
 8005eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f95d 	bl	800617e <UART_Transmit_IT>
    return;
 8005ec4:	e014      	b.n	8005ef0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x514>
 8005ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d008      	beq.n	8005ef0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f99d 	bl	800621e <UART_EndTransmit_IT>
    return;
 8005ee4:	e004      	b.n	8005ef0 <HAL_UART_IRQHandler+0x514>
    return;
 8005ee6:	bf00      	nop
 8005ee8:	e002      	b.n	8005ef0 <HAL_UART_IRQHandler+0x514>
      return;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <HAL_UART_IRQHandler+0x514>
      return;
 8005eee:	bf00      	nop
  }
}
 8005ef0:	37e8      	adds	r7, #232	; 0xe8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop

08005ef8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b090      	sub	sp, #64	; 0x40
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f48:	e050      	b.n	8005fec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f50:	d04c      	beq.n	8005fec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d007      	beq.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f58:	f7fc fe38 	bl	8002bcc <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d241      	bcs.n	8005fec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f88:	637a      	str	r2, [r7, #52]	; 0x34
 8005f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e5      	bne.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3314      	adds	r3, #20
 8005fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fbc:	623a      	str	r2, [r7, #32]
 8005fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e00f      	b.n	800600c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	bf0c      	ite	eq
 8005ffc:	2301      	moveq	r3, #1
 8005ffe:	2300      	movne	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	429a      	cmp	r2, r3
 8006008:	d09f      	beq.n	8005f4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3740      	adds	r7, #64	; 0x40
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	88fa      	ldrh	r2, [r7, #6]
 800602c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	88fa      	ldrh	r2, [r7, #6]
 8006032:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2222      	movs	r2, #34	; 0x22
 800603e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006060:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0201 	orr.w	r2, r2, #1
 8006070:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0220 	orr.w	r2, r2, #32
 8006080:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006090:	b480      	push	{r7}
 8006092:	b095      	sub	sp, #84	; 0x54
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	330c      	adds	r3, #12
 80060b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060b8:	643a      	str	r2, [r7, #64]	; 0x40
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3314      	adds	r3, #20
 80060d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	61fb      	str	r3, [r7, #28]
   return(result);
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f023 0301 	bic.w	r3, r3, #1
 80060e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3314      	adds	r3, #20
 80060ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e5      	bne.n	80060cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006104:	2b01      	cmp	r3, #1
 8006106:	d119      	bne.n	800613c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	330c      	adds	r3, #12
 800610e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	e853 3f00 	ldrex	r3, [r3]
 8006116:	60bb      	str	r3, [r7, #8]
   return(result);
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f023 0310 	bic.w	r3, r3, #16
 800611e:	647b      	str	r3, [r7, #68]	; 0x44
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	330c      	adds	r3, #12
 8006126:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006128:	61ba      	str	r2, [r7, #24]
 800612a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6979      	ldr	r1, [r7, #20]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	613b      	str	r3, [r7, #16]
   return(result);
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e5      	bne.n	8006108 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	631a      	str	r2, [r3, #48]	; 0x30
}
 800614a:	bf00      	nop
 800614c:	3754      	adds	r7, #84	; 0x54
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7ff fecb 	bl	8005f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b21      	cmp	r3, #33	; 0x21
 8006190:	d13e      	bne.n	8006210 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800619a:	d114      	bne.n	80061c6 <UART_Transmit_IT+0x48>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d110      	bne.n	80061c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	1c9a      	adds	r2, r3, #2
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	621a      	str	r2, [r3, #32]
 80061c4:	e008      	b.n	80061d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	1c59      	adds	r1, r3, #1
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6211      	str	r1, [r2, #32]
 80061d0:	781a      	ldrb	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4619      	mov	r1, r3
 80061e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10f      	bne.n	800620c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	e000      	b.n	8006212 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006210:	2302      	movs	r3, #2
  }
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006234:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fe5a 	bl	8005ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b08c      	sub	sp, #48	; 0x30
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b22      	cmp	r3, #34	; 0x22
 8006260:	f040 80ab 	bne.w	80063ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626c:	d117      	bne.n	800629e <UART_Receive_IT+0x50>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d113      	bne.n	800629e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628c:	b29a      	uxth	r2, r3
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28
 800629c:	e026      	b.n	80062ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b0:	d007      	beq.n	80062c2 <UART_Receive_IT+0x74>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <UART_Receive_IT+0x82>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	e008      	b.n	80062e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4619      	mov	r1, r3
 80062fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d15a      	bne.n	80063b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0220 	bic.w	r2, r2, #32
 800630e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800631e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	2b01      	cmp	r3, #1
 800633e:	d135      	bne.n	80063ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	613b      	str	r3, [r7, #16]
   return(result);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f023 0310 	bic.w	r3, r3, #16
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	330c      	adds	r3, #12
 8006364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006366:	623a      	str	r2, [r7, #32]
 8006368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	69f9      	ldr	r1, [r7, #28]
 800636c:	6a3a      	ldr	r2, [r7, #32]
 800636e:	e841 2300 	strex	r3, r2, [r1]
 8006372:	61bb      	str	r3, [r7, #24]
   return(result);
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1e5      	bne.n	8006346 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b10      	cmp	r3, #16
 8006386:	d10a      	bne.n	800639e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff fdbb 	bl	8005f20 <HAL_UARTEx_RxEventCallback>
 80063aa:	e002      	b.n	80063b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7fb fc53 	bl	8001c58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e002      	b.n	80063bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	e000      	b.n	80063bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80063ba:	2302      	movs	r3, #2
  }
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3730      	adds	r7, #48	; 0x30
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c8:	b0c0      	sub	sp, #256	; 0x100
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e0:	68d9      	ldr	r1, [r3, #12]
 80063e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	ea40 0301 	orr.w	r3, r0, r1
 80063ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	431a      	orrs	r2, r3
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	4313      	orrs	r3, r2
 800640c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800641c:	f021 010c 	bic.w	r1, r1, #12
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800642a:	430b      	orrs	r3, r1
 800642c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643e:	6999      	ldr	r1, [r3, #24]
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	ea40 0301 	orr.w	r3, r0, r1
 800644a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4b8f      	ldr	r3, [pc, #572]	; (8006690 <UART_SetConfig+0x2cc>)
 8006454:	429a      	cmp	r2, r3
 8006456:	d005      	beq.n	8006464 <UART_SetConfig+0xa0>
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b8d      	ldr	r3, [pc, #564]	; (8006694 <UART_SetConfig+0x2d0>)
 8006460:	429a      	cmp	r2, r3
 8006462:	d104      	bne.n	800646e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006464:	f7fe fb28 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8006468:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800646c:	e003      	b.n	8006476 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800646e:	f7fe fb0f 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8006472:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647a:	69db      	ldr	r3, [r3, #28]
 800647c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006480:	f040 810c 	bne.w	800669c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006488:	2200      	movs	r2, #0
 800648a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800648e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006496:	4622      	mov	r2, r4
 8006498:	462b      	mov	r3, r5
 800649a:	1891      	adds	r1, r2, r2
 800649c:	65b9      	str	r1, [r7, #88]	; 0x58
 800649e:	415b      	adcs	r3, r3
 80064a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064a6:	4621      	mov	r1, r4
 80064a8:	eb12 0801 	adds.w	r8, r2, r1
 80064ac:	4629      	mov	r1, r5
 80064ae:	eb43 0901 	adc.w	r9, r3, r1
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064c6:	4690      	mov	r8, r2
 80064c8:	4699      	mov	r9, r3
 80064ca:	4623      	mov	r3, r4
 80064cc:	eb18 0303 	adds.w	r3, r8, r3
 80064d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064d4:	462b      	mov	r3, r5
 80064d6:	eb49 0303 	adc.w	r3, r9, r3
 80064da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80064ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80064f2:	460b      	mov	r3, r1
 80064f4:	18db      	adds	r3, r3, r3
 80064f6:	653b      	str	r3, [r7, #80]	; 0x50
 80064f8:	4613      	mov	r3, r2
 80064fa:	eb42 0303 	adc.w	r3, r2, r3
 80064fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006504:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006508:	f7fa fbc6 	bl	8000c98 <__aeabi_uldivmod>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	4b61      	ldr	r3, [pc, #388]	; (8006698 <UART_SetConfig+0x2d4>)
 8006512:	fba3 2302 	umull	r2, r3, r3, r2
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	011c      	lsls	r4, r3, #4
 800651a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800651e:	2200      	movs	r2, #0
 8006520:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006524:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006528:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800652c:	4642      	mov	r2, r8
 800652e:	464b      	mov	r3, r9
 8006530:	1891      	adds	r1, r2, r2
 8006532:	64b9      	str	r1, [r7, #72]	; 0x48
 8006534:	415b      	adcs	r3, r3
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006538:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800653c:	4641      	mov	r1, r8
 800653e:	eb12 0a01 	adds.w	sl, r2, r1
 8006542:	4649      	mov	r1, r9
 8006544:	eb43 0b01 	adc.w	fp, r3, r1
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006554:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800655c:	4692      	mov	sl, r2
 800655e:	469b      	mov	fp, r3
 8006560:	4643      	mov	r3, r8
 8006562:	eb1a 0303 	adds.w	r3, sl, r3
 8006566:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800656a:	464b      	mov	r3, r9
 800656c:	eb4b 0303 	adc.w	r3, fp, r3
 8006570:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006580:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006584:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006588:	460b      	mov	r3, r1
 800658a:	18db      	adds	r3, r3, r3
 800658c:	643b      	str	r3, [r7, #64]	; 0x40
 800658e:	4613      	mov	r3, r2
 8006590:	eb42 0303 	adc.w	r3, r2, r3
 8006594:	647b      	str	r3, [r7, #68]	; 0x44
 8006596:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800659a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800659e:	f7fa fb7b 	bl	8000c98 <__aeabi_uldivmod>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	4b3b      	ldr	r3, [pc, #236]	; (8006698 <UART_SetConfig+0x2d4>)
 80065aa:	fba3 2301 	umull	r2, r3, r3, r1
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	2264      	movs	r2, #100	; 0x64
 80065b2:	fb02 f303 	mul.w	r3, r2, r3
 80065b6:	1acb      	subs	r3, r1, r3
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80065be:	4b36      	ldr	r3, [pc, #216]	; (8006698 <UART_SetConfig+0x2d4>)
 80065c0:	fba3 2302 	umull	r2, r3, r3, r2
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065cc:	441c      	add	r4, r3
 80065ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80065dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80065e0:	4642      	mov	r2, r8
 80065e2:	464b      	mov	r3, r9
 80065e4:	1891      	adds	r1, r2, r2
 80065e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80065e8:	415b      	adcs	r3, r3
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80065f0:	4641      	mov	r1, r8
 80065f2:	1851      	adds	r1, r2, r1
 80065f4:	6339      	str	r1, [r7, #48]	; 0x30
 80065f6:	4649      	mov	r1, r9
 80065f8:	414b      	adcs	r3, r1
 80065fa:	637b      	str	r3, [r7, #52]	; 0x34
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006608:	4659      	mov	r1, fp
 800660a:	00cb      	lsls	r3, r1, #3
 800660c:	4651      	mov	r1, sl
 800660e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006612:	4651      	mov	r1, sl
 8006614:	00ca      	lsls	r2, r1, #3
 8006616:	4610      	mov	r0, r2
 8006618:	4619      	mov	r1, r3
 800661a:	4603      	mov	r3, r0
 800661c:	4642      	mov	r2, r8
 800661e:	189b      	adds	r3, r3, r2
 8006620:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006624:	464b      	mov	r3, r9
 8006626:	460a      	mov	r2, r1
 8006628:	eb42 0303 	adc.w	r3, r2, r3
 800662c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800663c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006644:	460b      	mov	r3, r1
 8006646:	18db      	adds	r3, r3, r3
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
 800664a:	4613      	mov	r3, r2
 800664c:	eb42 0303 	adc.w	r3, r2, r3
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006652:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006656:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800665a:	f7fa fb1d 	bl	8000c98 <__aeabi_uldivmod>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4b0d      	ldr	r3, [pc, #52]	; (8006698 <UART_SetConfig+0x2d4>)
 8006664:	fba3 1302 	umull	r1, r3, r3, r2
 8006668:	095b      	lsrs	r3, r3, #5
 800666a:	2164      	movs	r1, #100	; 0x64
 800666c:	fb01 f303 	mul.w	r3, r1, r3
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	3332      	adds	r3, #50	; 0x32
 8006676:	4a08      	ldr	r2, [pc, #32]	; (8006698 <UART_SetConfig+0x2d4>)
 8006678:	fba2 2303 	umull	r2, r3, r2, r3
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	f003 0207 	and.w	r2, r3, #7
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4422      	add	r2, r4
 800668a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800668c:	e106      	b.n	800689c <UART_SetConfig+0x4d8>
 800668e:	bf00      	nop
 8006690:	40011000 	.word	0x40011000
 8006694:	40011400 	.word	0x40011400
 8006698:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800669c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066a0:	2200      	movs	r2, #0
 80066a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066ae:	4642      	mov	r2, r8
 80066b0:	464b      	mov	r3, r9
 80066b2:	1891      	adds	r1, r2, r2
 80066b4:	6239      	str	r1, [r7, #32]
 80066b6:	415b      	adcs	r3, r3
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066be:	4641      	mov	r1, r8
 80066c0:	1854      	adds	r4, r2, r1
 80066c2:	4649      	mov	r1, r9
 80066c4:	eb43 0501 	adc.w	r5, r3, r1
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	00eb      	lsls	r3, r5, #3
 80066d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066d6:	00e2      	lsls	r2, r4, #3
 80066d8:	4614      	mov	r4, r2
 80066da:	461d      	mov	r5, r3
 80066dc:	4643      	mov	r3, r8
 80066de:	18e3      	adds	r3, r4, r3
 80066e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066e4:	464b      	mov	r3, r9
 80066e6:	eb45 0303 	adc.w	r3, r5, r3
 80066ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800670a:	4629      	mov	r1, r5
 800670c:	008b      	lsls	r3, r1, #2
 800670e:	4621      	mov	r1, r4
 8006710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006714:	4621      	mov	r1, r4
 8006716:	008a      	lsls	r2, r1, #2
 8006718:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800671c:	f7fa fabc 	bl	8000c98 <__aeabi_uldivmod>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4b60      	ldr	r3, [pc, #384]	; (80068a8 <UART_SetConfig+0x4e4>)
 8006726:	fba3 2302 	umull	r2, r3, r3, r2
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	011c      	lsls	r4, r3, #4
 800672e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006732:	2200      	movs	r2, #0
 8006734:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800673c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006740:	4642      	mov	r2, r8
 8006742:	464b      	mov	r3, r9
 8006744:	1891      	adds	r1, r2, r2
 8006746:	61b9      	str	r1, [r7, #24]
 8006748:	415b      	adcs	r3, r3
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006750:	4641      	mov	r1, r8
 8006752:	1851      	adds	r1, r2, r1
 8006754:	6139      	str	r1, [r7, #16]
 8006756:	4649      	mov	r1, r9
 8006758:	414b      	adcs	r3, r1
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006768:	4659      	mov	r1, fp
 800676a:	00cb      	lsls	r3, r1, #3
 800676c:	4651      	mov	r1, sl
 800676e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006772:	4651      	mov	r1, sl
 8006774:	00ca      	lsls	r2, r1, #3
 8006776:	4610      	mov	r0, r2
 8006778:	4619      	mov	r1, r3
 800677a:	4603      	mov	r3, r0
 800677c:	4642      	mov	r2, r8
 800677e:	189b      	adds	r3, r3, r2
 8006780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006784:	464b      	mov	r3, r9
 8006786:	460a      	mov	r2, r1
 8006788:	eb42 0303 	adc.w	r3, r2, r3
 800678c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	67bb      	str	r3, [r7, #120]	; 0x78
 800679a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067a8:	4649      	mov	r1, r9
 80067aa:	008b      	lsls	r3, r1, #2
 80067ac:	4641      	mov	r1, r8
 80067ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067b2:	4641      	mov	r1, r8
 80067b4:	008a      	lsls	r2, r1, #2
 80067b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80067ba:	f7fa fa6d 	bl	8000c98 <__aeabi_uldivmod>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4611      	mov	r1, r2
 80067c4:	4b38      	ldr	r3, [pc, #224]	; (80068a8 <UART_SetConfig+0x4e4>)
 80067c6:	fba3 2301 	umull	r2, r3, r3, r1
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	2264      	movs	r2, #100	; 0x64
 80067ce:	fb02 f303 	mul.w	r3, r2, r3
 80067d2:	1acb      	subs	r3, r1, r3
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	3332      	adds	r3, #50	; 0x32
 80067d8:	4a33      	ldr	r2, [pc, #204]	; (80068a8 <UART_SetConfig+0x4e4>)
 80067da:	fba2 2303 	umull	r2, r3, r2, r3
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067e4:	441c      	add	r4, r3
 80067e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067ea:	2200      	movs	r2, #0
 80067ec:	673b      	str	r3, [r7, #112]	; 0x70
 80067ee:	677a      	str	r2, [r7, #116]	; 0x74
 80067f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80067f4:	4642      	mov	r2, r8
 80067f6:	464b      	mov	r3, r9
 80067f8:	1891      	adds	r1, r2, r2
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	415b      	adcs	r3, r3
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006804:	4641      	mov	r1, r8
 8006806:	1851      	adds	r1, r2, r1
 8006808:	6039      	str	r1, [r7, #0]
 800680a:	4649      	mov	r1, r9
 800680c:	414b      	adcs	r3, r1
 800680e:	607b      	str	r3, [r7, #4]
 8006810:	f04f 0200 	mov.w	r2, #0
 8006814:	f04f 0300 	mov.w	r3, #0
 8006818:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800681c:	4659      	mov	r1, fp
 800681e:	00cb      	lsls	r3, r1, #3
 8006820:	4651      	mov	r1, sl
 8006822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006826:	4651      	mov	r1, sl
 8006828:	00ca      	lsls	r2, r1, #3
 800682a:	4610      	mov	r0, r2
 800682c:	4619      	mov	r1, r3
 800682e:	4603      	mov	r3, r0
 8006830:	4642      	mov	r2, r8
 8006832:	189b      	adds	r3, r3, r2
 8006834:	66bb      	str	r3, [r7, #104]	; 0x68
 8006836:	464b      	mov	r3, r9
 8006838:	460a      	mov	r2, r1
 800683a:	eb42 0303 	adc.w	r3, r2, r3
 800683e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	663b      	str	r3, [r7, #96]	; 0x60
 800684a:	667a      	str	r2, [r7, #100]	; 0x64
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	f04f 0300 	mov.w	r3, #0
 8006854:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006858:	4649      	mov	r1, r9
 800685a:	008b      	lsls	r3, r1, #2
 800685c:	4641      	mov	r1, r8
 800685e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006862:	4641      	mov	r1, r8
 8006864:	008a      	lsls	r2, r1, #2
 8006866:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800686a:	f7fa fa15 	bl	8000c98 <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <UART_SetConfig+0x4e4>)
 8006874:	fba3 1302 	umull	r1, r3, r3, r2
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	2164      	movs	r1, #100	; 0x64
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	3332      	adds	r3, #50	; 0x32
 8006886:	4a08      	ldr	r2, [pc, #32]	; (80068a8 <UART_SetConfig+0x4e4>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f003 020f 	and.w	r2, r3, #15
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4422      	add	r2, r4
 800689a:	609a      	str	r2, [r3, #8]
}
 800689c:	bf00      	nop
 800689e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068a2:	46bd      	mov	sp, r7
 80068a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068a8:	51eb851f 	.word	0x51eb851f

080068ac <atof>:
 80068ac:	2100      	movs	r1, #0
 80068ae:	f000 be19 	b.w	80074e4 <strtod>

080068b2 <atoi>:
 80068b2:	220a      	movs	r2, #10
 80068b4:	2100      	movs	r1, #0
 80068b6:	f000 bea5 	b.w	8007604 <strtol>

080068ba <sulp>:
 80068ba:	b570      	push	{r4, r5, r6, lr}
 80068bc:	4604      	mov	r4, r0
 80068be:	460d      	mov	r5, r1
 80068c0:	ec45 4b10 	vmov	d0, r4, r5
 80068c4:	4616      	mov	r6, r2
 80068c6:	f003 fd5b 	bl	800a380 <__ulp>
 80068ca:	ec51 0b10 	vmov	r0, r1, d0
 80068ce:	b17e      	cbz	r6, 80068f0 <sulp+0x36>
 80068d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dd09      	ble.n	80068f0 <sulp+0x36>
 80068dc:	051b      	lsls	r3, r3, #20
 80068de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80068e2:	2400      	movs	r4, #0
 80068e4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80068e8:	4622      	mov	r2, r4
 80068ea:	462b      	mov	r3, r5
 80068ec:	f7f9 fe8c 	bl	8000608 <__aeabi_dmul>
 80068f0:	bd70      	pop	{r4, r5, r6, pc}
 80068f2:	0000      	movs	r0, r0
 80068f4:	0000      	movs	r0, r0
	...

080068f8 <_strtod_l>:
 80068f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068fc:	ed2d 8b02 	vpush	{d8}
 8006900:	b09b      	sub	sp, #108	; 0x6c
 8006902:	4604      	mov	r4, r0
 8006904:	9213      	str	r2, [sp, #76]	; 0x4c
 8006906:	2200      	movs	r2, #0
 8006908:	9216      	str	r2, [sp, #88]	; 0x58
 800690a:	460d      	mov	r5, r1
 800690c:	f04f 0800 	mov.w	r8, #0
 8006910:	f04f 0900 	mov.w	r9, #0
 8006914:	460a      	mov	r2, r1
 8006916:	9215      	str	r2, [sp, #84]	; 0x54
 8006918:	7811      	ldrb	r1, [r2, #0]
 800691a:	292b      	cmp	r1, #43	; 0x2b
 800691c:	d04c      	beq.n	80069b8 <_strtod_l+0xc0>
 800691e:	d83a      	bhi.n	8006996 <_strtod_l+0x9e>
 8006920:	290d      	cmp	r1, #13
 8006922:	d834      	bhi.n	800698e <_strtod_l+0x96>
 8006924:	2908      	cmp	r1, #8
 8006926:	d834      	bhi.n	8006992 <_strtod_l+0x9a>
 8006928:	2900      	cmp	r1, #0
 800692a:	d03d      	beq.n	80069a8 <_strtod_l+0xb0>
 800692c:	2200      	movs	r2, #0
 800692e:	920a      	str	r2, [sp, #40]	; 0x28
 8006930:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006932:	7832      	ldrb	r2, [r6, #0]
 8006934:	2a30      	cmp	r2, #48	; 0x30
 8006936:	f040 80b4 	bne.w	8006aa2 <_strtod_l+0x1aa>
 800693a:	7872      	ldrb	r2, [r6, #1]
 800693c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006940:	2a58      	cmp	r2, #88	; 0x58
 8006942:	d170      	bne.n	8006a26 <_strtod_l+0x12e>
 8006944:	9302      	str	r3, [sp, #8]
 8006946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	ab16      	add	r3, sp, #88	; 0x58
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	4a8e      	ldr	r2, [pc, #568]	; (8006b88 <_strtod_l+0x290>)
 8006950:	ab17      	add	r3, sp, #92	; 0x5c
 8006952:	a915      	add	r1, sp, #84	; 0x54
 8006954:	4620      	mov	r0, r4
 8006956:	f002 fdf1 	bl	800953c <__gethex>
 800695a:	f010 070f 	ands.w	r7, r0, #15
 800695e:	4605      	mov	r5, r0
 8006960:	d005      	beq.n	800696e <_strtod_l+0x76>
 8006962:	2f06      	cmp	r7, #6
 8006964:	d12a      	bne.n	80069bc <_strtod_l+0xc4>
 8006966:	3601      	adds	r6, #1
 8006968:	2300      	movs	r3, #0
 800696a:	9615      	str	r6, [sp, #84]	; 0x54
 800696c:	930a      	str	r3, [sp, #40]	; 0x28
 800696e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 857f 	bne.w	8007474 <_strtod_l+0xb7c>
 8006976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006978:	b1db      	cbz	r3, 80069b2 <_strtod_l+0xba>
 800697a:	4642      	mov	r2, r8
 800697c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006980:	ec43 2b10 	vmov	d0, r2, r3
 8006984:	b01b      	add	sp, #108	; 0x6c
 8006986:	ecbd 8b02 	vpop	{d8}
 800698a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698e:	2920      	cmp	r1, #32
 8006990:	d1cc      	bne.n	800692c <_strtod_l+0x34>
 8006992:	3201      	adds	r2, #1
 8006994:	e7bf      	b.n	8006916 <_strtod_l+0x1e>
 8006996:	292d      	cmp	r1, #45	; 0x2d
 8006998:	d1c8      	bne.n	800692c <_strtod_l+0x34>
 800699a:	2101      	movs	r1, #1
 800699c:	910a      	str	r1, [sp, #40]	; 0x28
 800699e:	1c51      	adds	r1, r2, #1
 80069a0:	9115      	str	r1, [sp, #84]	; 0x54
 80069a2:	7852      	ldrb	r2, [r2, #1]
 80069a4:	2a00      	cmp	r2, #0
 80069a6:	d1c3      	bne.n	8006930 <_strtod_l+0x38>
 80069a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069aa:	9515      	str	r5, [sp, #84]	; 0x54
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 855f 	bne.w	8007470 <_strtod_l+0xb78>
 80069b2:	4642      	mov	r2, r8
 80069b4:	464b      	mov	r3, r9
 80069b6:	e7e3      	b.n	8006980 <_strtod_l+0x88>
 80069b8:	2100      	movs	r1, #0
 80069ba:	e7ef      	b.n	800699c <_strtod_l+0xa4>
 80069bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80069be:	b13a      	cbz	r2, 80069d0 <_strtod_l+0xd8>
 80069c0:	2135      	movs	r1, #53	; 0x35
 80069c2:	a818      	add	r0, sp, #96	; 0x60
 80069c4:	f003 fdd9 	bl	800a57a <__copybits>
 80069c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80069ca:	4620      	mov	r0, r4
 80069cc:	f003 f9ac 	bl	8009d28 <_Bfree>
 80069d0:	3f01      	subs	r7, #1
 80069d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80069d4:	2f04      	cmp	r7, #4
 80069d6:	d806      	bhi.n	80069e6 <_strtod_l+0xee>
 80069d8:	e8df f007 	tbb	[pc, r7]
 80069dc:	201d0314 	.word	0x201d0314
 80069e0:	14          	.byte	0x14
 80069e1:	00          	.byte	0x00
 80069e2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80069e6:	05e9      	lsls	r1, r5, #23
 80069e8:	bf48      	it	mi
 80069ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80069ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069f2:	0d1b      	lsrs	r3, r3, #20
 80069f4:	051b      	lsls	r3, r3, #20
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1b9      	bne.n	800696e <_strtod_l+0x76>
 80069fa:	f001 fe25 	bl	8008648 <__errno>
 80069fe:	2322      	movs	r3, #34	; 0x22
 8006a00:	6003      	str	r3, [r0, #0]
 8006a02:	e7b4      	b.n	800696e <_strtod_l+0x76>
 8006a04:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006a08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006a14:	e7e7      	b.n	80069e6 <_strtod_l+0xee>
 8006a16:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006b90 <_strtod_l+0x298>
 8006a1a:	e7e4      	b.n	80069e6 <_strtod_l+0xee>
 8006a1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006a20:	f04f 38ff 	mov.w	r8, #4294967295
 8006a24:	e7df      	b.n	80069e6 <_strtod_l+0xee>
 8006a26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	9215      	str	r2, [sp, #84]	; 0x54
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b30      	cmp	r3, #48	; 0x30
 8006a30:	d0f9      	beq.n	8006a26 <_strtod_l+0x12e>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d09b      	beq.n	800696e <_strtod_l+0x76>
 8006a36:	2301      	movs	r3, #1
 8006a38:	f04f 0a00 	mov.w	sl, #0
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006a46:	46d3      	mov	fp, sl
 8006a48:	220a      	movs	r2, #10
 8006a4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006a4c:	7806      	ldrb	r6, [r0, #0]
 8006a4e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006a52:	b2d9      	uxtb	r1, r3
 8006a54:	2909      	cmp	r1, #9
 8006a56:	d926      	bls.n	8006aa6 <_strtod_l+0x1ae>
 8006a58:	494c      	ldr	r1, [pc, #304]	; (8006b8c <_strtod_l+0x294>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f001 fd6d 	bl	800853a <strncmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d030      	beq.n	8006ac6 <_strtod_l+0x1ce>
 8006a64:	2000      	movs	r0, #0
 8006a66:	4632      	mov	r2, r6
 8006a68:	9005      	str	r0, [sp, #20]
 8006a6a:	465e      	mov	r6, fp
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2a65      	cmp	r2, #101	; 0x65
 8006a70:	d001      	beq.n	8006a76 <_strtod_l+0x17e>
 8006a72:	2a45      	cmp	r2, #69	; 0x45
 8006a74:	d113      	bne.n	8006a9e <_strtod_l+0x1a6>
 8006a76:	b91e      	cbnz	r6, 8006a80 <_strtod_l+0x188>
 8006a78:	9a04      	ldr	r2, [sp, #16]
 8006a7a:	4302      	orrs	r2, r0
 8006a7c:	d094      	beq.n	80069a8 <_strtod_l+0xb0>
 8006a7e:	2600      	movs	r6, #0
 8006a80:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006a82:	1c6a      	adds	r2, r5, #1
 8006a84:	9215      	str	r2, [sp, #84]	; 0x54
 8006a86:	786a      	ldrb	r2, [r5, #1]
 8006a88:	2a2b      	cmp	r2, #43	; 0x2b
 8006a8a:	d074      	beq.n	8006b76 <_strtod_l+0x27e>
 8006a8c:	2a2d      	cmp	r2, #45	; 0x2d
 8006a8e:	d078      	beq.n	8006b82 <_strtod_l+0x28a>
 8006a90:	f04f 0c00 	mov.w	ip, #0
 8006a94:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a98:	2909      	cmp	r1, #9
 8006a9a:	d97f      	bls.n	8006b9c <_strtod_l+0x2a4>
 8006a9c:	9515      	str	r5, [sp, #84]	; 0x54
 8006a9e:	2700      	movs	r7, #0
 8006aa0:	e09e      	b.n	8006be0 <_strtod_l+0x2e8>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e7c8      	b.n	8006a38 <_strtod_l+0x140>
 8006aa6:	f1bb 0f08 	cmp.w	fp, #8
 8006aaa:	bfd8      	it	le
 8006aac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006aae:	f100 0001 	add.w	r0, r0, #1
 8006ab2:	bfda      	itte	le
 8006ab4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ab8:	9309      	strle	r3, [sp, #36]	; 0x24
 8006aba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006abe:	f10b 0b01 	add.w	fp, fp, #1
 8006ac2:	9015      	str	r0, [sp, #84]	; 0x54
 8006ac4:	e7c1      	b.n	8006a4a <_strtod_l+0x152>
 8006ac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	9215      	str	r2, [sp, #84]	; 0x54
 8006acc:	785a      	ldrb	r2, [r3, #1]
 8006ace:	f1bb 0f00 	cmp.w	fp, #0
 8006ad2:	d037      	beq.n	8006b44 <_strtod_l+0x24c>
 8006ad4:	9005      	str	r0, [sp, #20]
 8006ad6:	465e      	mov	r6, fp
 8006ad8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006adc:	2b09      	cmp	r3, #9
 8006ade:	d912      	bls.n	8006b06 <_strtod_l+0x20e>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e7c4      	b.n	8006a6e <_strtod_l+0x176>
 8006ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	9215      	str	r2, [sp, #84]	; 0x54
 8006aea:	785a      	ldrb	r2, [r3, #1]
 8006aec:	3001      	adds	r0, #1
 8006aee:	2a30      	cmp	r2, #48	; 0x30
 8006af0:	d0f8      	beq.n	8006ae4 <_strtod_l+0x1ec>
 8006af2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	f200 84c1 	bhi.w	800747e <_strtod_l+0xb86>
 8006afc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006afe:	9005      	str	r0, [sp, #20]
 8006b00:	2000      	movs	r0, #0
 8006b02:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b04:	4606      	mov	r6, r0
 8006b06:	3a30      	subs	r2, #48	; 0x30
 8006b08:	f100 0301 	add.w	r3, r0, #1
 8006b0c:	d014      	beq.n	8006b38 <_strtod_l+0x240>
 8006b0e:	9905      	ldr	r1, [sp, #20]
 8006b10:	4419      	add	r1, r3
 8006b12:	9105      	str	r1, [sp, #20]
 8006b14:	4633      	mov	r3, r6
 8006b16:	eb00 0c06 	add.w	ip, r0, r6
 8006b1a:	210a      	movs	r1, #10
 8006b1c:	4563      	cmp	r3, ip
 8006b1e:	d113      	bne.n	8006b48 <_strtod_l+0x250>
 8006b20:	1833      	adds	r3, r6, r0
 8006b22:	2b08      	cmp	r3, #8
 8006b24:	f106 0601 	add.w	r6, r6, #1
 8006b28:	4406      	add	r6, r0
 8006b2a:	dc1a      	bgt.n	8006b62 <_strtod_l+0x26a>
 8006b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b2e:	230a      	movs	r3, #10
 8006b30:	fb03 2301 	mla	r3, r3, r1, r2
 8006b34:	9309      	str	r3, [sp, #36]	; 0x24
 8006b36:	2300      	movs	r3, #0
 8006b38:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b3a:	1c51      	adds	r1, r2, #1
 8006b3c:	9115      	str	r1, [sp, #84]	; 0x54
 8006b3e:	7852      	ldrb	r2, [r2, #1]
 8006b40:	4618      	mov	r0, r3
 8006b42:	e7c9      	b.n	8006ad8 <_strtod_l+0x1e0>
 8006b44:	4658      	mov	r0, fp
 8006b46:	e7d2      	b.n	8006aee <_strtod_l+0x1f6>
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	f103 0301 	add.w	r3, r3, #1
 8006b4e:	dc03      	bgt.n	8006b58 <_strtod_l+0x260>
 8006b50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b52:	434f      	muls	r7, r1
 8006b54:	9709      	str	r7, [sp, #36]	; 0x24
 8006b56:	e7e1      	b.n	8006b1c <_strtod_l+0x224>
 8006b58:	2b10      	cmp	r3, #16
 8006b5a:	bfd8      	it	le
 8006b5c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006b60:	e7dc      	b.n	8006b1c <_strtod_l+0x224>
 8006b62:	2e10      	cmp	r6, #16
 8006b64:	bfdc      	itt	le
 8006b66:	230a      	movle	r3, #10
 8006b68:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006b6c:	e7e3      	b.n	8006b36 <_strtod_l+0x23e>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9305      	str	r3, [sp, #20]
 8006b72:	2301      	movs	r3, #1
 8006b74:	e780      	b.n	8006a78 <_strtod_l+0x180>
 8006b76:	f04f 0c00 	mov.w	ip, #0
 8006b7a:	1caa      	adds	r2, r5, #2
 8006b7c:	9215      	str	r2, [sp, #84]	; 0x54
 8006b7e:	78aa      	ldrb	r2, [r5, #2]
 8006b80:	e788      	b.n	8006a94 <_strtod_l+0x19c>
 8006b82:	f04f 0c01 	mov.w	ip, #1
 8006b86:	e7f8      	b.n	8006b7a <_strtod_l+0x282>
 8006b88:	0800b800 	.word	0x0800b800
 8006b8c:	0800b7fc 	.word	0x0800b7fc
 8006b90:	7ff00000 	.word	0x7ff00000
 8006b94:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b96:	1c51      	adds	r1, r2, #1
 8006b98:	9115      	str	r1, [sp, #84]	; 0x54
 8006b9a:	7852      	ldrb	r2, [r2, #1]
 8006b9c:	2a30      	cmp	r2, #48	; 0x30
 8006b9e:	d0f9      	beq.n	8006b94 <_strtod_l+0x29c>
 8006ba0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006ba4:	2908      	cmp	r1, #8
 8006ba6:	f63f af7a 	bhi.w	8006a9e <_strtod_l+0x1a6>
 8006baa:	3a30      	subs	r2, #48	; 0x30
 8006bac:	9208      	str	r2, [sp, #32]
 8006bae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006bb0:	920c      	str	r2, [sp, #48]	; 0x30
 8006bb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006bb4:	1c57      	adds	r7, r2, #1
 8006bb6:	9715      	str	r7, [sp, #84]	; 0x54
 8006bb8:	7852      	ldrb	r2, [r2, #1]
 8006bba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006bbe:	f1be 0f09 	cmp.w	lr, #9
 8006bc2:	d938      	bls.n	8006c36 <_strtod_l+0x33e>
 8006bc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bc6:	1a7f      	subs	r7, r7, r1
 8006bc8:	2f08      	cmp	r7, #8
 8006bca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006bce:	dc03      	bgt.n	8006bd8 <_strtod_l+0x2e0>
 8006bd0:	9908      	ldr	r1, [sp, #32]
 8006bd2:	428f      	cmp	r7, r1
 8006bd4:	bfa8      	it	ge
 8006bd6:	460f      	movge	r7, r1
 8006bd8:	f1bc 0f00 	cmp.w	ip, #0
 8006bdc:	d000      	beq.n	8006be0 <_strtod_l+0x2e8>
 8006bde:	427f      	negs	r7, r7
 8006be0:	2e00      	cmp	r6, #0
 8006be2:	d14f      	bne.n	8006c84 <_strtod_l+0x38c>
 8006be4:	9904      	ldr	r1, [sp, #16]
 8006be6:	4301      	orrs	r1, r0
 8006be8:	f47f aec1 	bne.w	800696e <_strtod_l+0x76>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f47f aedb 	bne.w	80069a8 <_strtod_l+0xb0>
 8006bf2:	2a69      	cmp	r2, #105	; 0x69
 8006bf4:	d029      	beq.n	8006c4a <_strtod_l+0x352>
 8006bf6:	dc26      	bgt.n	8006c46 <_strtod_l+0x34e>
 8006bf8:	2a49      	cmp	r2, #73	; 0x49
 8006bfa:	d026      	beq.n	8006c4a <_strtod_l+0x352>
 8006bfc:	2a4e      	cmp	r2, #78	; 0x4e
 8006bfe:	f47f aed3 	bne.w	80069a8 <_strtod_l+0xb0>
 8006c02:	499b      	ldr	r1, [pc, #620]	; (8006e70 <_strtod_l+0x578>)
 8006c04:	a815      	add	r0, sp, #84	; 0x54
 8006c06:	f002 fed9 	bl	80099bc <__match>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	f43f aecc 	beq.w	80069a8 <_strtod_l+0xb0>
 8006c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b28      	cmp	r3, #40	; 0x28
 8006c16:	d12f      	bne.n	8006c78 <_strtod_l+0x380>
 8006c18:	4996      	ldr	r1, [pc, #600]	; (8006e74 <_strtod_l+0x57c>)
 8006c1a:	aa18      	add	r2, sp, #96	; 0x60
 8006c1c:	a815      	add	r0, sp, #84	; 0x54
 8006c1e:	f002 fee1 	bl	80099e4 <__hexnan>
 8006c22:	2805      	cmp	r0, #5
 8006c24:	d128      	bne.n	8006c78 <_strtod_l+0x380>
 8006c26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006c30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006c34:	e69b      	b.n	800696e <_strtod_l+0x76>
 8006c36:	9f08      	ldr	r7, [sp, #32]
 8006c38:	210a      	movs	r1, #10
 8006c3a:	fb01 2107 	mla	r1, r1, r7, r2
 8006c3e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006c42:	9208      	str	r2, [sp, #32]
 8006c44:	e7b5      	b.n	8006bb2 <_strtod_l+0x2ba>
 8006c46:	2a6e      	cmp	r2, #110	; 0x6e
 8006c48:	e7d9      	b.n	8006bfe <_strtod_l+0x306>
 8006c4a:	498b      	ldr	r1, [pc, #556]	; (8006e78 <_strtod_l+0x580>)
 8006c4c:	a815      	add	r0, sp, #84	; 0x54
 8006c4e:	f002 feb5 	bl	80099bc <__match>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	f43f aea8 	beq.w	80069a8 <_strtod_l+0xb0>
 8006c58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c5a:	4988      	ldr	r1, [pc, #544]	; (8006e7c <_strtod_l+0x584>)
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	a815      	add	r0, sp, #84	; 0x54
 8006c60:	9315      	str	r3, [sp, #84]	; 0x54
 8006c62:	f002 feab 	bl	80099bc <__match>
 8006c66:	b910      	cbnz	r0, 8006c6e <_strtod_l+0x376>
 8006c68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	9315      	str	r3, [sp, #84]	; 0x54
 8006c6e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006e8c <_strtod_l+0x594>
 8006c72:	f04f 0800 	mov.w	r8, #0
 8006c76:	e67a      	b.n	800696e <_strtod_l+0x76>
 8006c78:	4881      	ldr	r0, [pc, #516]	; (8006e80 <_strtod_l+0x588>)
 8006c7a:	f001 fd21 	bl	80086c0 <nan>
 8006c7e:	ec59 8b10 	vmov	r8, r9, d0
 8006c82:	e674      	b.n	800696e <_strtod_l+0x76>
 8006c84:	9b05      	ldr	r3, [sp, #20]
 8006c86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c88:	1afb      	subs	r3, r7, r3
 8006c8a:	f1bb 0f00 	cmp.w	fp, #0
 8006c8e:	bf08      	it	eq
 8006c90:	46b3      	moveq	fp, r6
 8006c92:	2e10      	cmp	r6, #16
 8006c94:	9308      	str	r3, [sp, #32]
 8006c96:	4635      	mov	r5, r6
 8006c98:	bfa8      	it	ge
 8006c9a:	2510      	movge	r5, #16
 8006c9c:	f7f9 fc3a 	bl	8000514 <__aeabi_ui2d>
 8006ca0:	2e09      	cmp	r6, #9
 8006ca2:	4680      	mov	r8, r0
 8006ca4:	4689      	mov	r9, r1
 8006ca6:	dd13      	ble.n	8006cd0 <_strtod_l+0x3d8>
 8006ca8:	4b76      	ldr	r3, [pc, #472]	; (8006e84 <_strtod_l+0x58c>)
 8006caa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006cae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006cb2:	f7f9 fca9 	bl	8000608 <__aeabi_dmul>
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	4650      	mov	r0, sl
 8006cba:	4689      	mov	r9, r1
 8006cbc:	f7f9 fc2a 	bl	8000514 <__aeabi_ui2d>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	f7f9 fae8 	bl	800029c <__adddf3>
 8006ccc:	4680      	mov	r8, r0
 8006cce:	4689      	mov	r9, r1
 8006cd0:	2e0f      	cmp	r6, #15
 8006cd2:	dc38      	bgt.n	8006d46 <_strtod_l+0x44e>
 8006cd4:	9b08      	ldr	r3, [sp, #32]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f43f ae49 	beq.w	800696e <_strtod_l+0x76>
 8006cdc:	dd24      	ble.n	8006d28 <_strtod_l+0x430>
 8006cde:	2b16      	cmp	r3, #22
 8006ce0:	dc0b      	bgt.n	8006cfa <_strtod_l+0x402>
 8006ce2:	4968      	ldr	r1, [pc, #416]	; (8006e84 <_strtod_l+0x58c>)
 8006ce4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cec:	4642      	mov	r2, r8
 8006cee:	464b      	mov	r3, r9
 8006cf0:	f7f9 fc8a 	bl	8000608 <__aeabi_dmul>
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	4689      	mov	r9, r1
 8006cf8:	e639      	b.n	800696e <_strtod_l+0x76>
 8006cfa:	9a08      	ldr	r2, [sp, #32]
 8006cfc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006d00:	4293      	cmp	r3, r2
 8006d02:	db20      	blt.n	8006d46 <_strtod_l+0x44e>
 8006d04:	4c5f      	ldr	r4, [pc, #380]	; (8006e84 <_strtod_l+0x58c>)
 8006d06:	f1c6 060f 	rsb	r6, r6, #15
 8006d0a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006d0e:	4642      	mov	r2, r8
 8006d10:	464b      	mov	r3, r9
 8006d12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d16:	f7f9 fc77 	bl	8000608 <__aeabi_dmul>
 8006d1a:	9b08      	ldr	r3, [sp, #32]
 8006d1c:	1b9e      	subs	r6, r3, r6
 8006d1e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006d22:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006d26:	e7e3      	b.n	8006cf0 <_strtod_l+0x3f8>
 8006d28:	9b08      	ldr	r3, [sp, #32]
 8006d2a:	3316      	adds	r3, #22
 8006d2c:	db0b      	blt.n	8006d46 <_strtod_l+0x44e>
 8006d2e:	9b05      	ldr	r3, [sp, #20]
 8006d30:	1bdf      	subs	r7, r3, r7
 8006d32:	4b54      	ldr	r3, [pc, #336]	; (8006e84 <_strtod_l+0x58c>)
 8006d34:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	4649      	mov	r1, r9
 8006d40:	f7f9 fd8c 	bl	800085c <__aeabi_ddiv>
 8006d44:	e7d6      	b.n	8006cf4 <_strtod_l+0x3fc>
 8006d46:	9b08      	ldr	r3, [sp, #32]
 8006d48:	1b75      	subs	r5, r6, r5
 8006d4a:	441d      	add	r5, r3
 8006d4c:	2d00      	cmp	r5, #0
 8006d4e:	dd70      	ble.n	8006e32 <_strtod_l+0x53a>
 8006d50:	f015 030f 	ands.w	r3, r5, #15
 8006d54:	d00a      	beq.n	8006d6c <_strtod_l+0x474>
 8006d56:	494b      	ldr	r1, [pc, #300]	; (8006e84 <_strtod_l+0x58c>)
 8006d58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d64:	f7f9 fc50 	bl	8000608 <__aeabi_dmul>
 8006d68:	4680      	mov	r8, r0
 8006d6a:	4689      	mov	r9, r1
 8006d6c:	f035 050f 	bics.w	r5, r5, #15
 8006d70:	d04d      	beq.n	8006e0e <_strtod_l+0x516>
 8006d72:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006d76:	dd22      	ble.n	8006dbe <_strtod_l+0x4c6>
 8006d78:	2500      	movs	r5, #0
 8006d7a:	46ab      	mov	fp, r5
 8006d7c:	9509      	str	r5, [sp, #36]	; 0x24
 8006d7e:	9505      	str	r5, [sp, #20]
 8006d80:	2322      	movs	r3, #34	; 0x22
 8006d82:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006e8c <_strtod_l+0x594>
 8006d86:	6023      	str	r3, [r4, #0]
 8006d88:	f04f 0800 	mov.w	r8, #0
 8006d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f43f aded 	beq.w	800696e <_strtod_l+0x76>
 8006d94:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006d96:	4620      	mov	r0, r4
 8006d98:	f002 ffc6 	bl	8009d28 <_Bfree>
 8006d9c:	9905      	ldr	r1, [sp, #20]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f002 ffc2 	bl	8009d28 <_Bfree>
 8006da4:	4659      	mov	r1, fp
 8006da6:	4620      	mov	r0, r4
 8006da8:	f002 ffbe 	bl	8009d28 <_Bfree>
 8006dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dae:	4620      	mov	r0, r4
 8006db0:	f002 ffba 	bl	8009d28 <_Bfree>
 8006db4:	4629      	mov	r1, r5
 8006db6:	4620      	mov	r0, r4
 8006db8:	f002 ffb6 	bl	8009d28 <_Bfree>
 8006dbc:	e5d7      	b.n	800696e <_strtod_l+0x76>
 8006dbe:	4b32      	ldr	r3, [pc, #200]	; (8006e88 <_strtod_l+0x590>)
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	112d      	asrs	r5, r5, #4
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4649      	mov	r1, r9
 8006dca:	469a      	mov	sl, r3
 8006dcc:	2d01      	cmp	r5, #1
 8006dce:	dc21      	bgt.n	8006e14 <_strtod_l+0x51c>
 8006dd0:	b10b      	cbz	r3, 8006dd6 <_strtod_l+0x4de>
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	4689      	mov	r9, r1
 8006dd6:	492c      	ldr	r1, [pc, #176]	; (8006e88 <_strtod_l+0x590>)
 8006dd8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006ddc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006de8:	f7f9 fc0e 	bl	8000608 <__aeabi_dmul>
 8006dec:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <_strtod_l+0x594>)
 8006dee:	460a      	mov	r2, r1
 8006df0:	400b      	ands	r3, r1
 8006df2:	4927      	ldr	r1, [pc, #156]	; (8006e90 <_strtod_l+0x598>)
 8006df4:	428b      	cmp	r3, r1
 8006df6:	4680      	mov	r8, r0
 8006df8:	d8be      	bhi.n	8006d78 <_strtod_l+0x480>
 8006dfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006dfe:	428b      	cmp	r3, r1
 8006e00:	bf86      	itte	hi
 8006e02:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006e94 <_strtod_l+0x59c>
 8006e06:	f04f 38ff 	movhi.w	r8, #4294967295
 8006e0a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9304      	str	r3, [sp, #16]
 8006e12:	e07b      	b.n	8006f0c <_strtod_l+0x614>
 8006e14:	07ea      	lsls	r2, r5, #31
 8006e16:	d505      	bpl.n	8006e24 <_strtod_l+0x52c>
 8006e18:	9b04      	ldr	r3, [sp, #16]
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f7f9 fbf3 	bl	8000608 <__aeabi_dmul>
 8006e22:	2301      	movs	r3, #1
 8006e24:	9a04      	ldr	r2, [sp, #16]
 8006e26:	3208      	adds	r2, #8
 8006e28:	f10a 0a01 	add.w	sl, sl, #1
 8006e2c:	106d      	asrs	r5, r5, #1
 8006e2e:	9204      	str	r2, [sp, #16]
 8006e30:	e7cc      	b.n	8006dcc <_strtod_l+0x4d4>
 8006e32:	d0ec      	beq.n	8006e0e <_strtod_l+0x516>
 8006e34:	426d      	negs	r5, r5
 8006e36:	f015 020f 	ands.w	r2, r5, #15
 8006e3a:	d00a      	beq.n	8006e52 <_strtod_l+0x55a>
 8006e3c:	4b11      	ldr	r3, [pc, #68]	; (8006e84 <_strtod_l+0x58c>)
 8006e3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e42:	4640      	mov	r0, r8
 8006e44:	4649      	mov	r1, r9
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	f7f9 fd07 	bl	800085c <__aeabi_ddiv>
 8006e4e:	4680      	mov	r8, r0
 8006e50:	4689      	mov	r9, r1
 8006e52:	112d      	asrs	r5, r5, #4
 8006e54:	d0db      	beq.n	8006e0e <_strtod_l+0x516>
 8006e56:	2d1f      	cmp	r5, #31
 8006e58:	dd1e      	ble.n	8006e98 <_strtod_l+0x5a0>
 8006e5a:	2500      	movs	r5, #0
 8006e5c:	46ab      	mov	fp, r5
 8006e5e:	9509      	str	r5, [sp, #36]	; 0x24
 8006e60:	9505      	str	r5, [sp, #20]
 8006e62:	2322      	movs	r3, #34	; 0x22
 8006e64:	f04f 0800 	mov.w	r8, #0
 8006e68:	f04f 0900 	mov.w	r9, #0
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	e78d      	b.n	8006d8c <_strtod_l+0x494>
 8006e70:	0800b95e 	.word	0x0800b95e
 8006e74:	0800b814 	.word	0x0800b814
 8006e78:	0800b956 	.word	0x0800b956
 8006e7c:	0800b995 	.word	0x0800b995
 8006e80:	0800bc20 	.word	0x0800bc20
 8006e84:	0800bb00 	.word	0x0800bb00
 8006e88:	0800bad8 	.word	0x0800bad8
 8006e8c:	7ff00000 	.word	0x7ff00000
 8006e90:	7ca00000 	.word	0x7ca00000
 8006e94:	7fefffff 	.word	0x7fefffff
 8006e98:	f015 0310 	ands.w	r3, r5, #16
 8006e9c:	bf18      	it	ne
 8006e9e:	236a      	movne	r3, #106	; 0x6a
 8006ea0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007244 <_strtod_l+0x94c>
 8006ea4:	9304      	str	r3, [sp, #16]
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	2300      	movs	r3, #0
 8006eac:	07ea      	lsls	r2, r5, #31
 8006eae:	d504      	bpl.n	8006eba <_strtod_l+0x5c2>
 8006eb0:	e9da 2300 	ldrd	r2, r3, [sl]
 8006eb4:	f7f9 fba8 	bl	8000608 <__aeabi_dmul>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	106d      	asrs	r5, r5, #1
 8006ebc:	f10a 0a08 	add.w	sl, sl, #8
 8006ec0:	d1f4      	bne.n	8006eac <_strtod_l+0x5b4>
 8006ec2:	b10b      	cbz	r3, 8006ec8 <_strtod_l+0x5d0>
 8006ec4:	4680      	mov	r8, r0
 8006ec6:	4689      	mov	r9, r1
 8006ec8:	9b04      	ldr	r3, [sp, #16]
 8006eca:	b1bb      	cbz	r3, 8006efc <_strtod_l+0x604>
 8006ecc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006ed0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	dd10      	ble.n	8006efc <_strtod_l+0x604>
 8006eda:	2b1f      	cmp	r3, #31
 8006edc:	f340 811e 	ble.w	800711c <_strtod_l+0x824>
 8006ee0:	2b34      	cmp	r3, #52	; 0x34
 8006ee2:	bfde      	ittt	le
 8006ee4:	f04f 33ff 	movle.w	r3, #4294967295
 8006ee8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006eec:	4093      	lslle	r3, r2
 8006eee:	f04f 0800 	mov.w	r8, #0
 8006ef2:	bfcc      	ite	gt
 8006ef4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006ef8:	ea03 0901 	andle.w	r9, r3, r1
 8006efc:	2200      	movs	r2, #0
 8006efe:	2300      	movs	r3, #0
 8006f00:	4640      	mov	r0, r8
 8006f02:	4649      	mov	r1, r9
 8006f04:	f7f9 fde8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d1a6      	bne.n	8006e5a <_strtod_l+0x562>
 8006f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f12:	4633      	mov	r3, r6
 8006f14:	465a      	mov	r2, fp
 8006f16:	4620      	mov	r0, r4
 8006f18:	f002 ff6e 	bl	8009df8 <__s2b>
 8006f1c:	9009      	str	r0, [sp, #36]	; 0x24
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f43f af2a 	beq.w	8006d78 <_strtod_l+0x480>
 8006f24:	9a08      	ldr	r2, [sp, #32]
 8006f26:	9b05      	ldr	r3, [sp, #20]
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	eba3 0307 	sub.w	r3, r3, r7
 8006f2e:	bfa8      	it	ge
 8006f30:	2300      	movge	r3, #0
 8006f32:	930c      	str	r3, [sp, #48]	; 0x30
 8006f34:	2500      	movs	r5, #0
 8006f36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f3a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f3c:	46ab      	mov	fp, r5
 8006f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f40:	4620      	mov	r0, r4
 8006f42:	6859      	ldr	r1, [r3, #4]
 8006f44:	f002 feb0 	bl	8009ca8 <_Balloc>
 8006f48:	9005      	str	r0, [sp, #20]
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	f43f af18 	beq.w	8006d80 <_strtod_l+0x488>
 8006f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	3202      	adds	r2, #2
 8006f56:	f103 010c 	add.w	r1, r3, #12
 8006f5a:	0092      	lsls	r2, r2, #2
 8006f5c:	300c      	adds	r0, #12
 8006f5e:	f001 fb9f 	bl	80086a0 <memcpy>
 8006f62:	ec49 8b10 	vmov	d0, r8, r9
 8006f66:	aa18      	add	r2, sp, #96	; 0x60
 8006f68:	a917      	add	r1, sp, #92	; 0x5c
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f003 fa78 	bl	800a460 <__d2b>
 8006f70:	ec49 8b18 	vmov	d8, r8, r9
 8006f74:	9016      	str	r0, [sp, #88]	; 0x58
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f43f af02 	beq.w	8006d80 <_strtod_l+0x488>
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f002 ffd2 	bl	8009f28 <__i2b>
 8006f84:	4683      	mov	fp, r0
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f43f aefa 	beq.w	8006d80 <_strtod_l+0x488>
 8006f8c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006f8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f90:	2e00      	cmp	r6, #0
 8006f92:	bfab      	itete	ge
 8006f94:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006f96:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006f98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006f9a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006f9e:	bfac      	ite	ge
 8006fa0:	eb06 0a03 	addge.w	sl, r6, r3
 8006fa4:	1b9f      	sublt	r7, r3, r6
 8006fa6:	9b04      	ldr	r3, [sp, #16]
 8006fa8:	1af6      	subs	r6, r6, r3
 8006faa:	4416      	add	r6, r2
 8006fac:	4ba0      	ldr	r3, [pc, #640]	; (8007230 <_strtod_l+0x938>)
 8006fae:	3e01      	subs	r6, #1
 8006fb0:	429e      	cmp	r6, r3
 8006fb2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006fb6:	f280 80c4 	bge.w	8007142 <_strtod_l+0x84a>
 8006fba:	1b9b      	subs	r3, r3, r6
 8006fbc:	2b1f      	cmp	r3, #31
 8006fbe:	eba2 0203 	sub.w	r2, r2, r3
 8006fc2:	f04f 0101 	mov.w	r1, #1
 8006fc6:	f300 80b0 	bgt.w	800712a <_strtod_l+0x832>
 8006fca:	fa01 f303 	lsl.w	r3, r1, r3
 8006fce:	930e      	str	r3, [sp, #56]	; 0x38
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8006fd4:	eb0a 0602 	add.w	r6, sl, r2
 8006fd8:	9b04      	ldr	r3, [sp, #16]
 8006fda:	45b2      	cmp	sl, r6
 8006fdc:	4417      	add	r7, r2
 8006fde:	441f      	add	r7, r3
 8006fe0:	4653      	mov	r3, sl
 8006fe2:	bfa8      	it	ge
 8006fe4:	4633      	movge	r3, r6
 8006fe6:	42bb      	cmp	r3, r7
 8006fe8:	bfa8      	it	ge
 8006fea:	463b      	movge	r3, r7
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bfc2      	ittt	gt
 8006ff0:	1af6      	subgt	r6, r6, r3
 8006ff2:	1aff      	subgt	r7, r7, r3
 8006ff4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	dd17      	ble.n	800702e <_strtod_l+0x736>
 8006ffe:	4659      	mov	r1, fp
 8007000:	461a      	mov	r2, r3
 8007002:	4620      	mov	r0, r4
 8007004:	f003 f850 	bl	800a0a8 <__pow5mult>
 8007008:	4683      	mov	fp, r0
 800700a:	2800      	cmp	r0, #0
 800700c:	f43f aeb8 	beq.w	8006d80 <_strtod_l+0x488>
 8007010:	4601      	mov	r1, r0
 8007012:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007014:	4620      	mov	r0, r4
 8007016:	f002 ff9d 	bl	8009f54 <__multiply>
 800701a:	900b      	str	r0, [sp, #44]	; 0x2c
 800701c:	2800      	cmp	r0, #0
 800701e:	f43f aeaf 	beq.w	8006d80 <_strtod_l+0x488>
 8007022:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007024:	4620      	mov	r0, r4
 8007026:	f002 fe7f 	bl	8009d28 <_Bfree>
 800702a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800702c:	9316      	str	r3, [sp, #88]	; 0x58
 800702e:	2e00      	cmp	r6, #0
 8007030:	f300 808c 	bgt.w	800714c <_strtod_l+0x854>
 8007034:	9b08      	ldr	r3, [sp, #32]
 8007036:	2b00      	cmp	r3, #0
 8007038:	dd08      	ble.n	800704c <_strtod_l+0x754>
 800703a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800703c:	9905      	ldr	r1, [sp, #20]
 800703e:	4620      	mov	r0, r4
 8007040:	f003 f832 	bl	800a0a8 <__pow5mult>
 8007044:	9005      	str	r0, [sp, #20]
 8007046:	2800      	cmp	r0, #0
 8007048:	f43f ae9a 	beq.w	8006d80 <_strtod_l+0x488>
 800704c:	2f00      	cmp	r7, #0
 800704e:	dd08      	ble.n	8007062 <_strtod_l+0x76a>
 8007050:	9905      	ldr	r1, [sp, #20]
 8007052:	463a      	mov	r2, r7
 8007054:	4620      	mov	r0, r4
 8007056:	f003 f881 	bl	800a15c <__lshift>
 800705a:	9005      	str	r0, [sp, #20]
 800705c:	2800      	cmp	r0, #0
 800705e:	f43f ae8f 	beq.w	8006d80 <_strtod_l+0x488>
 8007062:	f1ba 0f00 	cmp.w	sl, #0
 8007066:	dd08      	ble.n	800707a <_strtod_l+0x782>
 8007068:	4659      	mov	r1, fp
 800706a:	4652      	mov	r2, sl
 800706c:	4620      	mov	r0, r4
 800706e:	f003 f875 	bl	800a15c <__lshift>
 8007072:	4683      	mov	fp, r0
 8007074:	2800      	cmp	r0, #0
 8007076:	f43f ae83 	beq.w	8006d80 <_strtod_l+0x488>
 800707a:	9a05      	ldr	r2, [sp, #20]
 800707c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800707e:	4620      	mov	r0, r4
 8007080:	f003 f8f4 	bl	800a26c <__mdiff>
 8007084:	4605      	mov	r5, r0
 8007086:	2800      	cmp	r0, #0
 8007088:	f43f ae7a 	beq.w	8006d80 <_strtod_l+0x488>
 800708c:	68c3      	ldr	r3, [r0, #12]
 800708e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007090:	2300      	movs	r3, #0
 8007092:	60c3      	str	r3, [r0, #12]
 8007094:	4659      	mov	r1, fp
 8007096:	f003 f8cd 	bl	800a234 <__mcmp>
 800709a:	2800      	cmp	r0, #0
 800709c:	da60      	bge.n	8007160 <_strtod_l+0x868>
 800709e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a0:	ea53 0308 	orrs.w	r3, r3, r8
 80070a4:	f040 8084 	bne.w	80071b0 <_strtod_l+0x8b8>
 80070a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d17f      	bne.n	80071b0 <_strtod_l+0x8b8>
 80070b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070b4:	0d1b      	lsrs	r3, r3, #20
 80070b6:	051b      	lsls	r3, r3, #20
 80070b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80070bc:	d978      	bls.n	80071b0 <_strtod_l+0x8b8>
 80070be:	696b      	ldr	r3, [r5, #20]
 80070c0:	b913      	cbnz	r3, 80070c8 <_strtod_l+0x7d0>
 80070c2:	692b      	ldr	r3, [r5, #16]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	dd73      	ble.n	80071b0 <_strtod_l+0x8b8>
 80070c8:	4629      	mov	r1, r5
 80070ca:	2201      	movs	r2, #1
 80070cc:	4620      	mov	r0, r4
 80070ce:	f003 f845 	bl	800a15c <__lshift>
 80070d2:	4659      	mov	r1, fp
 80070d4:	4605      	mov	r5, r0
 80070d6:	f003 f8ad 	bl	800a234 <__mcmp>
 80070da:	2800      	cmp	r0, #0
 80070dc:	dd68      	ble.n	80071b0 <_strtod_l+0x8b8>
 80070de:	9904      	ldr	r1, [sp, #16]
 80070e0:	4a54      	ldr	r2, [pc, #336]	; (8007234 <_strtod_l+0x93c>)
 80070e2:	464b      	mov	r3, r9
 80070e4:	2900      	cmp	r1, #0
 80070e6:	f000 8084 	beq.w	80071f2 <_strtod_l+0x8fa>
 80070ea:	ea02 0109 	and.w	r1, r2, r9
 80070ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070f2:	dc7e      	bgt.n	80071f2 <_strtod_l+0x8fa>
 80070f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070f8:	f77f aeb3 	ble.w	8006e62 <_strtod_l+0x56a>
 80070fc:	4b4e      	ldr	r3, [pc, #312]	; (8007238 <_strtod_l+0x940>)
 80070fe:	4640      	mov	r0, r8
 8007100:	4649      	mov	r1, r9
 8007102:	2200      	movs	r2, #0
 8007104:	f7f9 fa80 	bl	8000608 <__aeabi_dmul>
 8007108:	4b4a      	ldr	r3, [pc, #296]	; (8007234 <_strtod_l+0x93c>)
 800710a:	400b      	ands	r3, r1
 800710c:	4680      	mov	r8, r0
 800710e:	4689      	mov	r9, r1
 8007110:	2b00      	cmp	r3, #0
 8007112:	f47f ae3f 	bne.w	8006d94 <_strtod_l+0x49c>
 8007116:	2322      	movs	r3, #34	; 0x22
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	e63b      	b.n	8006d94 <_strtod_l+0x49c>
 800711c:	f04f 32ff 	mov.w	r2, #4294967295
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	ea03 0808 	and.w	r8, r3, r8
 8007128:	e6e8      	b.n	8006efc <_strtod_l+0x604>
 800712a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800712e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007132:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007136:	36e2      	adds	r6, #226	; 0xe2
 8007138:	fa01 f306 	lsl.w	r3, r1, r6
 800713c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007140:	e748      	b.n	8006fd4 <_strtod_l+0x6dc>
 8007142:	2100      	movs	r1, #0
 8007144:	2301      	movs	r3, #1
 8007146:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800714a:	e743      	b.n	8006fd4 <_strtod_l+0x6dc>
 800714c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800714e:	4632      	mov	r2, r6
 8007150:	4620      	mov	r0, r4
 8007152:	f003 f803 	bl	800a15c <__lshift>
 8007156:	9016      	str	r0, [sp, #88]	; 0x58
 8007158:	2800      	cmp	r0, #0
 800715a:	f47f af6b 	bne.w	8007034 <_strtod_l+0x73c>
 800715e:	e60f      	b.n	8006d80 <_strtod_l+0x488>
 8007160:	46ca      	mov	sl, r9
 8007162:	d171      	bne.n	8007248 <_strtod_l+0x950>
 8007164:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007166:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800716a:	b352      	cbz	r2, 80071c2 <_strtod_l+0x8ca>
 800716c:	4a33      	ldr	r2, [pc, #204]	; (800723c <_strtod_l+0x944>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d12a      	bne.n	80071c8 <_strtod_l+0x8d0>
 8007172:	9b04      	ldr	r3, [sp, #16]
 8007174:	4641      	mov	r1, r8
 8007176:	b1fb      	cbz	r3, 80071b8 <_strtod_l+0x8c0>
 8007178:	4b2e      	ldr	r3, [pc, #184]	; (8007234 <_strtod_l+0x93c>)
 800717a:	ea09 0303 	and.w	r3, r9, r3
 800717e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007182:	f04f 32ff 	mov.w	r2, #4294967295
 8007186:	d81a      	bhi.n	80071be <_strtod_l+0x8c6>
 8007188:	0d1b      	lsrs	r3, r3, #20
 800718a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	4299      	cmp	r1, r3
 8007194:	d118      	bne.n	80071c8 <_strtod_l+0x8d0>
 8007196:	4b2a      	ldr	r3, [pc, #168]	; (8007240 <_strtod_l+0x948>)
 8007198:	459a      	cmp	sl, r3
 800719a:	d102      	bne.n	80071a2 <_strtod_l+0x8aa>
 800719c:	3101      	adds	r1, #1
 800719e:	f43f adef 	beq.w	8006d80 <_strtod_l+0x488>
 80071a2:	4b24      	ldr	r3, [pc, #144]	; (8007234 <_strtod_l+0x93c>)
 80071a4:	ea0a 0303 	and.w	r3, sl, r3
 80071a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80071ac:	f04f 0800 	mov.w	r8, #0
 80071b0:	9b04      	ldr	r3, [sp, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1a2      	bne.n	80070fc <_strtod_l+0x804>
 80071b6:	e5ed      	b.n	8006d94 <_strtod_l+0x49c>
 80071b8:	f04f 33ff 	mov.w	r3, #4294967295
 80071bc:	e7e9      	b.n	8007192 <_strtod_l+0x89a>
 80071be:	4613      	mov	r3, r2
 80071c0:	e7e7      	b.n	8007192 <_strtod_l+0x89a>
 80071c2:	ea53 0308 	orrs.w	r3, r3, r8
 80071c6:	d08a      	beq.n	80070de <_strtod_l+0x7e6>
 80071c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ca:	b1e3      	cbz	r3, 8007206 <_strtod_l+0x90e>
 80071cc:	ea13 0f0a 	tst.w	r3, sl
 80071d0:	d0ee      	beq.n	80071b0 <_strtod_l+0x8b8>
 80071d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d4:	9a04      	ldr	r2, [sp, #16]
 80071d6:	4640      	mov	r0, r8
 80071d8:	4649      	mov	r1, r9
 80071da:	b1c3      	cbz	r3, 800720e <_strtod_l+0x916>
 80071dc:	f7ff fb6d 	bl	80068ba <sulp>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	ec51 0b18 	vmov	r0, r1, d8
 80071e8:	f7f9 f858 	bl	800029c <__adddf3>
 80071ec:	4680      	mov	r8, r0
 80071ee:	4689      	mov	r9, r1
 80071f0:	e7de      	b.n	80071b0 <_strtod_l+0x8b8>
 80071f2:	4013      	ands	r3, r2
 80071f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80071f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80071fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007200:	f04f 38ff 	mov.w	r8, #4294967295
 8007204:	e7d4      	b.n	80071b0 <_strtod_l+0x8b8>
 8007206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007208:	ea13 0f08 	tst.w	r3, r8
 800720c:	e7e0      	b.n	80071d0 <_strtod_l+0x8d8>
 800720e:	f7ff fb54 	bl	80068ba <sulp>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	ec51 0b18 	vmov	r0, r1, d8
 800721a:	f7f9 f83d 	bl	8000298 <__aeabi_dsub>
 800721e:	2200      	movs	r2, #0
 8007220:	2300      	movs	r3, #0
 8007222:	4680      	mov	r8, r0
 8007224:	4689      	mov	r9, r1
 8007226:	f7f9 fc57 	bl	8000ad8 <__aeabi_dcmpeq>
 800722a:	2800      	cmp	r0, #0
 800722c:	d0c0      	beq.n	80071b0 <_strtod_l+0x8b8>
 800722e:	e618      	b.n	8006e62 <_strtod_l+0x56a>
 8007230:	fffffc02 	.word	0xfffffc02
 8007234:	7ff00000 	.word	0x7ff00000
 8007238:	39500000 	.word	0x39500000
 800723c:	000fffff 	.word	0x000fffff
 8007240:	7fefffff 	.word	0x7fefffff
 8007244:	0800b828 	.word	0x0800b828
 8007248:	4659      	mov	r1, fp
 800724a:	4628      	mov	r0, r5
 800724c:	f003 f962 	bl	800a514 <__ratio>
 8007250:	ec57 6b10 	vmov	r6, r7, d0
 8007254:	ee10 0a10 	vmov	r0, s0
 8007258:	2200      	movs	r2, #0
 800725a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800725e:	4639      	mov	r1, r7
 8007260:	f7f9 fc4e 	bl	8000b00 <__aeabi_dcmple>
 8007264:	2800      	cmp	r0, #0
 8007266:	d071      	beq.n	800734c <_strtod_l+0xa54>
 8007268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d17c      	bne.n	8007368 <_strtod_l+0xa70>
 800726e:	f1b8 0f00 	cmp.w	r8, #0
 8007272:	d15a      	bne.n	800732a <_strtod_l+0xa32>
 8007274:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007278:	2b00      	cmp	r3, #0
 800727a:	d15d      	bne.n	8007338 <_strtod_l+0xa40>
 800727c:	4b90      	ldr	r3, [pc, #576]	; (80074c0 <_strtod_l+0xbc8>)
 800727e:	2200      	movs	r2, #0
 8007280:	4630      	mov	r0, r6
 8007282:	4639      	mov	r1, r7
 8007284:	f7f9 fc32 	bl	8000aec <__aeabi_dcmplt>
 8007288:	2800      	cmp	r0, #0
 800728a:	d15c      	bne.n	8007346 <_strtod_l+0xa4e>
 800728c:	4630      	mov	r0, r6
 800728e:	4639      	mov	r1, r7
 8007290:	4b8c      	ldr	r3, [pc, #560]	; (80074c4 <_strtod_l+0xbcc>)
 8007292:	2200      	movs	r2, #0
 8007294:	f7f9 f9b8 	bl	8000608 <__aeabi_dmul>
 8007298:	4606      	mov	r6, r0
 800729a:	460f      	mov	r7, r1
 800729c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80072a0:	9606      	str	r6, [sp, #24]
 80072a2:	9307      	str	r3, [sp, #28]
 80072a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80072ac:	4b86      	ldr	r3, [pc, #536]	; (80074c8 <_strtod_l+0xbd0>)
 80072ae:	ea0a 0303 	and.w	r3, sl, r3
 80072b2:	930d      	str	r3, [sp, #52]	; 0x34
 80072b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072b6:	4b85      	ldr	r3, [pc, #532]	; (80074cc <_strtod_l+0xbd4>)
 80072b8:	429a      	cmp	r2, r3
 80072ba:	f040 8090 	bne.w	80073de <_strtod_l+0xae6>
 80072be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80072c2:	ec49 8b10 	vmov	d0, r8, r9
 80072c6:	f003 f85b 	bl	800a380 <__ulp>
 80072ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072ce:	ec51 0b10 	vmov	r0, r1, d0
 80072d2:	f7f9 f999 	bl	8000608 <__aeabi_dmul>
 80072d6:	4642      	mov	r2, r8
 80072d8:	464b      	mov	r3, r9
 80072da:	f7f8 ffdf 	bl	800029c <__adddf3>
 80072de:	460b      	mov	r3, r1
 80072e0:	4979      	ldr	r1, [pc, #484]	; (80074c8 <_strtod_l+0xbd0>)
 80072e2:	4a7b      	ldr	r2, [pc, #492]	; (80074d0 <_strtod_l+0xbd8>)
 80072e4:	4019      	ands	r1, r3
 80072e6:	4291      	cmp	r1, r2
 80072e8:	4680      	mov	r8, r0
 80072ea:	d944      	bls.n	8007376 <_strtod_l+0xa7e>
 80072ec:	ee18 2a90 	vmov	r2, s17
 80072f0:	4b78      	ldr	r3, [pc, #480]	; (80074d4 <_strtod_l+0xbdc>)
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d104      	bne.n	8007300 <_strtod_l+0xa08>
 80072f6:	ee18 3a10 	vmov	r3, s16
 80072fa:	3301      	adds	r3, #1
 80072fc:	f43f ad40 	beq.w	8006d80 <_strtod_l+0x488>
 8007300:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80074d4 <_strtod_l+0xbdc>
 8007304:	f04f 38ff 	mov.w	r8, #4294967295
 8007308:	9916      	ldr	r1, [sp, #88]	; 0x58
 800730a:	4620      	mov	r0, r4
 800730c:	f002 fd0c 	bl	8009d28 <_Bfree>
 8007310:	9905      	ldr	r1, [sp, #20]
 8007312:	4620      	mov	r0, r4
 8007314:	f002 fd08 	bl	8009d28 <_Bfree>
 8007318:	4659      	mov	r1, fp
 800731a:	4620      	mov	r0, r4
 800731c:	f002 fd04 	bl	8009d28 <_Bfree>
 8007320:	4629      	mov	r1, r5
 8007322:	4620      	mov	r0, r4
 8007324:	f002 fd00 	bl	8009d28 <_Bfree>
 8007328:	e609      	b.n	8006f3e <_strtod_l+0x646>
 800732a:	f1b8 0f01 	cmp.w	r8, #1
 800732e:	d103      	bne.n	8007338 <_strtod_l+0xa40>
 8007330:	f1b9 0f00 	cmp.w	r9, #0
 8007334:	f43f ad95 	beq.w	8006e62 <_strtod_l+0x56a>
 8007338:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007490 <_strtod_l+0xb98>
 800733c:	4f60      	ldr	r7, [pc, #384]	; (80074c0 <_strtod_l+0xbc8>)
 800733e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007342:	2600      	movs	r6, #0
 8007344:	e7ae      	b.n	80072a4 <_strtod_l+0x9ac>
 8007346:	4f5f      	ldr	r7, [pc, #380]	; (80074c4 <_strtod_l+0xbcc>)
 8007348:	2600      	movs	r6, #0
 800734a:	e7a7      	b.n	800729c <_strtod_l+0x9a4>
 800734c:	4b5d      	ldr	r3, [pc, #372]	; (80074c4 <_strtod_l+0xbcc>)
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	2200      	movs	r2, #0
 8007354:	f7f9 f958 	bl	8000608 <__aeabi_dmul>
 8007358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800735a:	4606      	mov	r6, r0
 800735c:	460f      	mov	r7, r1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d09c      	beq.n	800729c <_strtod_l+0x9a4>
 8007362:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007366:	e79d      	b.n	80072a4 <_strtod_l+0x9ac>
 8007368:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007498 <_strtod_l+0xba0>
 800736c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007370:	ec57 6b17 	vmov	r6, r7, d7
 8007374:	e796      	b.n	80072a4 <_strtod_l+0x9ac>
 8007376:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800737a:	9b04      	ldr	r3, [sp, #16]
 800737c:	46ca      	mov	sl, r9
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1c2      	bne.n	8007308 <_strtod_l+0xa10>
 8007382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007388:	0d1b      	lsrs	r3, r3, #20
 800738a:	051b      	lsls	r3, r3, #20
 800738c:	429a      	cmp	r2, r3
 800738e:	d1bb      	bne.n	8007308 <_strtod_l+0xa10>
 8007390:	4630      	mov	r0, r6
 8007392:	4639      	mov	r1, r7
 8007394:	f7f9 fc98 	bl	8000cc8 <__aeabi_d2lz>
 8007398:	f7f9 f908 	bl	80005ac <__aeabi_l2d>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4630      	mov	r0, r6
 80073a2:	4639      	mov	r1, r7
 80073a4:	f7f8 ff78 	bl	8000298 <__aeabi_dsub>
 80073a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073ae:	ea43 0308 	orr.w	r3, r3, r8
 80073b2:	4313      	orrs	r3, r2
 80073b4:	4606      	mov	r6, r0
 80073b6:	460f      	mov	r7, r1
 80073b8:	d054      	beq.n	8007464 <_strtod_l+0xb6c>
 80073ba:	a339      	add	r3, pc, #228	; (adr r3, 80074a0 <_strtod_l+0xba8>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f7f9 fb94 	bl	8000aec <__aeabi_dcmplt>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f47f ace5 	bne.w	8006d94 <_strtod_l+0x49c>
 80073ca:	a337      	add	r3, pc, #220	; (adr r3, 80074a8 <_strtod_l+0xbb0>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	4630      	mov	r0, r6
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f9 fba8 	bl	8000b28 <__aeabi_dcmpgt>
 80073d8:	2800      	cmp	r0, #0
 80073da:	d095      	beq.n	8007308 <_strtod_l+0xa10>
 80073dc:	e4da      	b.n	8006d94 <_strtod_l+0x49c>
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	b333      	cbz	r3, 8007430 <_strtod_l+0xb38>
 80073e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073e8:	d822      	bhi.n	8007430 <_strtod_l+0xb38>
 80073ea:	a331      	add	r3, pc, #196	; (adr r3, 80074b0 <_strtod_l+0xbb8>)
 80073ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f9 fb84 	bl	8000b00 <__aeabi_dcmple>
 80073f8:	b1a0      	cbz	r0, 8007424 <_strtod_l+0xb2c>
 80073fa:	4639      	mov	r1, r7
 80073fc:	4630      	mov	r0, r6
 80073fe:	f7f9 fbdb 	bl	8000bb8 <__aeabi_d2uiz>
 8007402:	2801      	cmp	r0, #1
 8007404:	bf38      	it	cc
 8007406:	2001      	movcc	r0, #1
 8007408:	f7f9 f884 	bl	8000514 <__aeabi_ui2d>
 800740c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800740e:	4606      	mov	r6, r0
 8007410:	460f      	mov	r7, r1
 8007412:	bb23      	cbnz	r3, 800745e <_strtod_l+0xb66>
 8007414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007418:	9010      	str	r0, [sp, #64]	; 0x40
 800741a:	9311      	str	r3, [sp, #68]	; 0x44
 800741c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007420:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007428:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800742c:	1a9b      	subs	r3, r3, r2
 800742e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007430:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007434:	eeb0 0a48 	vmov.f32	s0, s16
 8007438:	eef0 0a68 	vmov.f32	s1, s17
 800743c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007440:	f002 ff9e 	bl	800a380 <__ulp>
 8007444:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007448:	ec53 2b10 	vmov	r2, r3, d0
 800744c:	f7f9 f8dc 	bl	8000608 <__aeabi_dmul>
 8007450:	ec53 2b18 	vmov	r2, r3, d8
 8007454:	f7f8 ff22 	bl	800029c <__adddf3>
 8007458:	4680      	mov	r8, r0
 800745a:	4689      	mov	r9, r1
 800745c:	e78d      	b.n	800737a <_strtod_l+0xa82>
 800745e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007462:	e7db      	b.n	800741c <_strtod_l+0xb24>
 8007464:	a314      	add	r3, pc, #80	; (adr r3, 80074b8 <_strtod_l+0xbc0>)
 8007466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746a:	f7f9 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800746e:	e7b3      	b.n	80073d8 <_strtod_l+0xae0>
 8007470:	2300      	movs	r3, #0
 8007472:	930a      	str	r3, [sp, #40]	; 0x28
 8007474:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007476:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	f7ff ba7c 	b.w	8006976 <_strtod_l+0x7e>
 800747e:	2a65      	cmp	r2, #101	; 0x65
 8007480:	f43f ab75 	beq.w	8006b6e <_strtod_l+0x276>
 8007484:	2a45      	cmp	r2, #69	; 0x45
 8007486:	f43f ab72 	beq.w	8006b6e <_strtod_l+0x276>
 800748a:	2301      	movs	r3, #1
 800748c:	f7ff bbaa 	b.w	8006be4 <_strtod_l+0x2ec>
 8007490:	00000000 	.word	0x00000000
 8007494:	bff00000 	.word	0xbff00000
 8007498:	00000000 	.word	0x00000000
 800749c:	3ff00000 	.word	0x3ff00000
 80074a0:	94a03595 	.word	0x94a03595
 80074a4:	3fdfffff 	.word	0x3fdfffff
 80074a8:	35afe535 	.word	0x35afe535
 80074ac:	3fe00000 	.word	0x3fe00000
 80074b0:	ffc00000 	.word	0xffc00000
 80074b4:	41dfffff 	.word	0x41dfffff
 80074b8:	94a03595 	.word	0x94a03595
 80074bc:	3fcfffff 	.word	0x3fcfffff
 80074c0:	3ff00000 	.word	0x3ff00000
 80074c4:	3fe00000 	.word	0x3fe00000
 80074c8:	7ff00000 	.word	0x7ff00000
 80074cc:	7fe00000 	.word	0x7fe00000
 80074d0:	7c9fffff 	.word	0x7c9fffff
 80074d4:	7fefffff 	.word	0x7fefffff

080074d8 <_strtod_r>:
 80074d8:	4b01      	ldr	r3, [pc, #4]	; (80074e0 <_strtod_r+0x8>)
 80074da:	f7ff ba0d 	b.w	80068f8 <_strtod_l>
 80074de:	bf00      	nop
 80074e0:	200000c0 	.word	0x200000c0

080074e4 <strtod>:
 80074e4:	460a      	mov	r2, r1
 80074e6:	4601      	mov	r1, r0
 80074e8:	4802      	ldr	r0, [pc, #8]	; (80074f4 <strtod+0x10>)
 80074ea:	4b03      	ldr	r3, [pc, #12]	; (80074f8 <strtod+0x14>)
 80074ec:	6800      	ldr	r0, [r0, #0]
 80074ee:	f7ff ba03 	b.w	80068f8 <_strtod_l>
 80074f2:	bf00      	nop
 80074f4:	20000278 	.word	0x20000278
 80074f8:	200000c0 	.word	0x200000c0

080074fc <_strtol_l.constprop.0>:
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007502:	d001      	beq.n	8007508 <_strtol_l.constprop.0+0xc>
 8007504:	2b24      	cmp	r3, #36	; 0x24
 8007506:	d906      	bls.n	8007516 <_strtol_l.constprop.0+0x1a>
 8007508:	f001 f89e 	bl	8008648 <__errno>
 800750c:	2316      	movs	r3, #22
 800750e:	6003      	str	r3, [r0, #0]
 8007510:	2000      	movs	r0, #0
 8007512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007516:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80075fc <_strtol_l.constprop.0+0x100>
 800751a:	460d      	mov	r5, r1
 800751c:	462e      	mov	r6, r5
 800751e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007522:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007526:	f017 0708 	ands.w	r7, r7, #8
 800752a:	d1f7      	bne.n	800751c <_strtol_l.constprop.0+0x20>
 800752c:	2c2d      	cmp	r4, #45	; 0x2d
 800752e:	d132      	bne.n	8007596 <_strtol_l.constprop.0+0x9a>
 8007530:	782c      	ldrb	r4, [r5, #0]
 8007532:	2701      	movs	r7, #1
 8007534:	1cb5      	adds	r5, r6, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d05b      	beq.n	80075f2 <_strtol_l.constprop.0+0xf6>
 800753a:	2b10      	cmp	r3, #16
 800753c:	d109      	bne.n	8007552 <_strtol_l.constprop.0+0x56>
 800753e:	2c30      	cmp	r4, #48	; 0x30
 8007540:	d107      	bne.n	8007552 <_strtol_l.constprop.0+0x56>
 8007542:	782c      	ldrb	r4, [r5, #0]
 8007544:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007548:	2c58      	cmp	r4, #88	; 0x58
 800754a:	d14d      	bne.n	80075e8 <_strtol_l.constprop.0+0xec>
 800754c:	786c      	ldrb	r4, [r5, #1]
 800754e:	2310      	movs	r3, #16
 8007550:	3502      	adds	r5, #2
 8007552:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007556:	f108 38ff 	add.w	r8, r8, #4294967295
 800755a:	f04f 0e00 	mov.w	lr, #0
 800755e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007562:	4676      	mov	r6, lr
 8007564:	fb03 8a19 	mls	sl, r3, r9, r8
 8007568:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800756c:	f1bc 0f09 	cmp.w	ip, #9
 8007570:	d816      	bhi.n	80075a0 <_strtol_l.constprop.0+0xa4>
 8007572:	4664      	mov	r4, ip
 8007574:	42a3      	cmp	r3, r4
 8007576:	dd24      	ble.n	80075c2 <_strtol_l.constprop.0+0xc6>
 8007578:	f1be 3fff 	cmp.w	lr, #4294967295
 800757c:	d008      	beq.n	8007590 <_strtol_l.constprop.0+0x94>
 800757e:	45b1      	cmp	r9, r6
 8007580:	d31c      	bcc.n	80075bc <_strtol_l.constprop.0+0xc0>
 8007582:	d101      	bne.n	8007588 <_strtol_l.constprop.0+0x8c>
 8007584:	45a2      	cmp	sl, r4
 8007586:	db19      	blt.n	80075bc <_strtol_l.constprop.0+0xc0>
 8007588:	fb06 4603 	mla	r6, r6, r3, r4
 800758c:	f04f 0e01 	mov.w	lr, #1
 8007590:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007594:	e7e8      	b.n	8007568 <_strtol_l.constprop.0+0x6c>
 8007596:	2c2b      	cmp	r4, #43	; 0x2b
 8007598:	bf04      	itt	eq
 800759a:	782c      	ldrbeq	r4, [r5, #0]
 800759c:	1cb5      	addeq	r5, r6, #2
 800759e:	e7ca      	b.n	8007536 <_strtol_l.constprop.0+0x3a>
 80075a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80075a4:	f1bc 0f19 	cmp.w	ip, #25
 80075a8:	d801      	bhi.n	80075ae <_strtol_l.constprop.0+0xb2>
 80075aa:	3c37      	subs	r4, #55	; 0x37
 80075ac:	e7e2      	b.n	8007574 <_strtol_l.constprop.0+0x78>
 80075ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80075b2:	f1bc 0f19 	cmp.w	ip, #25
 80075b6:	d804      	bhi.n	80075c2 <_strtol_l.constprop.0+0xc6>
 80075b8:	3c57      	subs	r4, #87	; 0x57
 80075ba:	e7db      	b.n	8007574 <_strtol_l.constprop.0+0x78>
 80075bc:	f04f 3eff 	mov.w	lr, #4294967295
 80075c0:	e7e6      	b.n	8007590 <_strtol_l.constprop.0+0x94>
 80075c2:	f1be 3fff 	cmp.w	lr, #4294967295
 80075c6:	d105      	bne.n	80075d4 <_strtol_l.constprop.0+0xd8>
 80075c8:	2322      	movs	r3, #34	; 0x22
 80075ca:	6003      	str	r3, [r0, #0]
 80075cc:	4646      	mov	r6, r8
 80075ce:	b942      	cbnz	r2, 80075e2 <_strtol_l.constprop.0+0xe6>
 80075d0:	4630      	mov	r0, r6
 80075d2:	e79e      	b.n	8007512 <_strtol_l.constprop.0+0x16>
 80075d4:	b107      	cbz	r7, 80075d8 <_strtol_l.constprop.0+0xdc>
 80075d6:	4276      	negs	r6, r6
 80075d8:	2a00      	cmp	r2, #0
 80075da:	d0f9      	beq.n	80075d0 <_strtol_l.constprop.0+0xd4>
 80075dc:	f1be 0f00 	cmp.w	lr, #0
 80075e0:	d000      	beq.n	80075e4 <_strtol_l.constprop.0+0xe8>
 80075e2:	1e69      	subs	r1, r5, #1
 80075e4:	6011      	str	r1, [r2, #0]
 80075e6:	e7f3      	b.n	80075d0 <_strtol_l.constprop.0+0xd4>
 80075e8:	2430      	movs	r4, #48	; 0x30
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1b1      	bne.n	8007552 <_strtol_l.constprop.0+0x56>
 80075ee:	2308      	movs	r3, #8
 80075f0:	e7af      	b.n	8007552 <_strtol_l.constprop.0+0x56>
 80075f2:	2c30      	cmp	r4, #48	; 0x30
 80075f4:	d0a5      	beq.n	8007542 <_strtol_l.constprop.0+0x46>
 80075f6:	230a      	movs	r3, #10
 80075f8:	e7ab      	b.n	8007552 <_strtol_l.constprop.0+0x56>
 80075fa:	bf00      	nop
 80075fc:	0800b851 	.word	0x0800b851

08007600 <_strtol_r>:
 8007600:	f7ff bf7c 	b.w	80074fc <_strtol_l.constprop.0>

08007604 <strtol>:
 8007604:	4613      	mov	r3, r2
 8007606:	460a      	mov	r2, r1
 8007608:	4601      	mov	r1, r0
 800760a:	4802      	ldr	r0, [pc, #8]	; (8007614 <strtol+0x10>)
 800760c:	6800      	ldr	r0, [r0, #0]
 800760e:	f7ff bf75 	b.w	80074fc <_strtol_l.constprop.0>
 8007612:	bf00      	nop
 8007614:	20000278 	.word	0x20000278

08007618 <__cvt>:
 8007618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	ec55 4b10 	vmov	r4, r5, d0
 8007620:	2d00      	cmp	r5, #0
 8007622:	460e      	mov	r6, r1
 8007624:	4619      	mov	r1, r3
 8007626:	462b      	mov	r3, r5
 8007628:	bfbb      	ittet	lt
 800762a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800762e:	461d      	movlt	r5, r3
 8007630:	2300      	movge	r3, #0
 8007632:	232d      	movlt	r3, #45	; 0x2d
 8007634:	700b      	strb	r3, [r1, #0]
 8007636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007638:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800763c:	4691      	mov	r9, r2
 800763e:	f023 0820 	bic.w	r8, r3, #32
 8007642:	bfbc      	itt	lt
 8007644:	4622      	movlt	r2, r4
 8007646:	4614      	movlt	r4, r2
 8007648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800764c:	d005      	beq.n	800765a <__cvt+0x42>
 800764e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007652:	d100      	bne.n	8007656 <__cvt+0x3e>
 8007654:	3601      	adds	r6, #1
 8007656:	2102      	movs	r1, #2
 8007658:	e000      	b.n	800765c <__cvt+0x44>
 800765a:	2103      	movs	r1, #3
 800765c:	ab03      	add	r3, sp, #12
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	ab02      	add	r3, sp, #8
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	ec45 4b10 	vmov	d0, r4, r5
 8007668:	4653      	mov	r3, sl
 800766a:	4632      	mov	r2, r6
 800766c:	f001 f8c0 	bl	80087f0 <_dtoa_r>
 8007670:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007674:	4607      	mov	r7, r0
 8007676:	d102      	bne.n	800767e <__cvt+0x66>
 8007678:	f019 0f01 	tst.w	r9, #1
 800767c:	d022      	beq.n	80076c4 <__cvt+0xac>
 800767e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007682:	eb07 0906 	add.w	r9, r7, r6
 8007686:	d110      	bne.n	80076aa <__cvt+0x92>
 8007688:	783b      	ldrb	r3, [r7, #0]
 800768a:	2b30      	cmp	r3, #48	; 0x30
 800768c:	d10a      	bne.n	80076a4 <__cvt+0x8c>
 800768e:	2200      	movs	r2, #0
 8007690:	2300      	movs	r3, #0
 8007692:	4620      	mov	r0, r4
 8007694:	4629      	mov	r1, r5
 8007696:	f7f9 fa1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800769a:	b918      	cbnz	r0, 80076a4 <__cvt+0x8c>
 800769c:	f1c6 0601 	rsb	r6, r6, #1
 80076a0:	f8ca 6000 	str.w	r6, [sl]
 80076a4:	f8da 3000 	ldr.w	r3, [sl]
 80076a8:	4499      	add	r9, r3
 80076aa:	2200      	movs	r2, #0
 80076ac:	2300      	movs	r3, #0
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f9 fa11 	bl	8000ad8 <__aeabi_dcmpeq>
 80076b6:	b108      	cbz	r0, 80076bc <__cvt+0xa4>
 80076b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80076bc:	2230      	movs	r2, #48	; 0x30
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	454b      	cmp	r3, r9
 80076c2:	d307      	bcc.n	80076d4 <__cvt+0xbc>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076c8:	1bdb      	subs	r3, r3, r7
 80076ca:	4638      	mov	r0, r7
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	b004      	add	sp, #16
 80076d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d4:	1c59      	adds	r1, r3, #1
 80076d6:	9103      	str	r1, [sp, #12]
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e7f0      	b.n	80076be <__cvt+0xa6>

080076dc <__exponent>:
 80076dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076de:	4603      	mov	r3, r0
 80076e0:	2900      	cmp	r1, #0
 80076e2:	bfb8      	it	lt
 80076e4:	4249      	neglt	r1, r1
 80076e6:	f803 2b02 	strb.w	r2, [r3], #2
 80076ea:	bfb4      	ite	lt
 80076ec:	222d      	movlt	r2, #45	; 0x2d
 80076ee:	222b      	movge	r2, #43	; 0x2b
 80076f0:	2909      	cmp	r1, #9
 80076f2:	7042      	strb	r2, [r0, #1]
 80076f4:	dd2a      	ble.n	800774c <__exponent+0x70>
 80076f6:	f10d 0207 	add.w	r2, sp, #7
 80076fa:	4617      	mov	r7, r2
 80076fc:	260a      	movs	r6, #10
 80076fe:	4694      	mov	ip, r2
 8007700:	fb91 f5f6 	sdiv	r5, r1, r6
 8007704:	fb06 1415 	mls	r4, r6, r5, r1
 8007708:	3430      	adds	r4, #48	; 0x30
 800770a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800770e:	460c      	mov	r4, r1
 8007710:	2c63      	cmp	r4, #99	; 0x63
 8007712:	f102 32ff 	add.w	r2, r2, #4294967295
 8007716:	4629      	mov	r1, r5
 8007718:	dcf1      	bgt.n	80076fe <__exponent+0x22>
 800771a:	3130      	adds	r1, #48	; 0x30
 800771c:	f1ac 0402 	sub.w	r4, ip, #2
 8007720:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007724:	1c41      	adds	r1, r0, #1
 8007726:	4622      	mov	r2, r4
 8007728:	42ba      	cmp	r2, r7
 800772a:	d30a      	bcc.n	8007742 <__exponent+0x66>
 800772c:	f10d 0209 	add.w	r2, sp, #9
 8007730:	eba2 020c 	sub.w	r2, r2, ip
 8007734:	42bc      	cmp	r4, r7
 8007736:	bf88      	it	hi
 8007738:	2200      	movhi	r2, #0
 800773a:	4413      	add	r3, r2
 800773c:	1a18      	subs	r0, r3, r0
 800773e:	b003      	add	sp, #12
 8007740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007742:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007746:	f801 5f01 	strb.w	r5, [r1, #1]!
 800774a:	e7ed      	b.n	8007728 <__exponent+0x4c>
 800774c:	2330      	movs	r3, #48	; 0x30
 800774e:	3130      	adds	r1, #48	; 0x30
 8007750:	7083      	strb	r3, [r0, #2]
 8007752:	70c1      	strb	r1, [r0, #3]
 8007754:	1d03      	adds	r3, r0, #4
 8007756:	e7f1      	b.n	800773c <__exponent+0x60>

08007758 <_printf_float>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	ed2d 8b02 	vpush	{d8}
 8007760:	b08d      	sub	sp, #52	; 0x34
 8007762:	460c      	mov	r4, r1
 8007764:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007768:	4616      	mov	r6, r2
 800776a:	461f      	mov	r7, r3
 800776c:	4605      	mov	r5, r0
 800776e:	f000 ff21 	bl	80085b4 <_localeconv_r>
 8007772:	f8d0 a000 	ldr.w	sl, [r0]
 8007776:	4650      	mov	r0, sl
 8007778:	f7f8 fd82 	bl	8000280 <strlen>
 800777c:	2300      	movs	r3, #0
 800777e:	930a      	str	r3, [sp, #40]	; 0x28
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	9305      	str	r3, [sp, #20]
 8007784:	f8d8 3000 	ldr.w	r3, [r8]
 8007788:	f894 b018 	ldrb.w	fp, [r4, #24]
 800778c:	3307      	adds	r3, #7
 800778e:	f023 0307 	bic.w	r3, r3, #7
 8007792:	f103 0208 	add.w	r2, r3, #8
 8007796:	f8c8 2000 	str.w	r2, [r8]
 800779a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800779e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077a2:	9307      	str	r3, [sp, #28]
 80077a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80077a8:	ee08 0a10 	vmov	s16, r0
 80077ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80077b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077b4:	4b9e      	ldr	r3, [pc, #632]	; (8007a30 <_printf_float+0x2d8>)
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ba:	f7f9 f9bf 	bl	8000b3c <__aeabi_dcmpun>
 80077be:	bb88      	cbnz	r0, 8007824 <_printf_float+0xcc>
 80077c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077c4:	4b9a      	ldr	r3, [pc, #616]	; (8007a30 <_printf_float+0x2d8>)
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ca:	f7f9 f999 	bl	8000b00 <__aeabi_dcmple>
 80077ce:	bb48      	cbnz	r0, 8007824 <_printf_float+0xcc>
 80077d0:	2200      	movs	r2, #0
 80077d2:	2300      	movs	r3, #0
 80077d4:	4640      	mov	r0, r8
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7f9 f988 	bl	8000aec <__aeabi_dcmplt>
 80077dc:	b110      	cbz	r0, 80077e4 <_printf_float+0x8c>
 80077de:	232d      	movs	r3, #45	; 0x2d
 80077e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e4:	4a93      	ldr	r2, [pc, #588]	; (8007a34 <_printf_float+0x2dc>)
 80077e6:	4b94      	ldr	r3, [pc, #592]	; (8007a38 <_printf_float+0x2e0>)
 80077e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80077ec:	bf94      	ite	ls
 80077ee:	4690      	movls	r8, r2
 80077f0:	4698      	movhi	r8, r3
 80077f2:	2303      	movs	r3, #3
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	9b05      	ldr	r3, [sp, #20]
 80077f8:	f023 0304 	bic.w	r3, r3, #4
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	f04f 0900 	mov.w	r9, #0
 8007802:	9700      	str	r7, [sp, #0]
 8007804:	4633      	mov	r3, r6
 8007806:	aa0b      	add	r2, sp, #44	; 0x2c
 8007808:	4621      	mov	r1, r4
 800780a:	4628      	mov	r0, r5
 800780c:	f000 f9da 	bl	8007bc4 <_printf_common>
 8007810:	3001      	adds	r0, #1
 8007812:	f040 8090 	bne.w	8007936 <_printf_float+0x1de>
 8007816:	f04f 30ff 	mov.w	r0, #4294967295
 800781a:	b00d      	add	sp, #52	; 0x34
 800781c:	ecbd 8b02 	vpop	{d8}
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	4642      	mov	r2, r8
 8007826:	464b      	mov	r3, r9
 8007828:	4640      	mov	r0, r8
 800782a:	4649      	mov	r1, r9
 800782c:	f7f9 f986 	bl	8000b3c <__aeabi_dcmpun>
 8007830:	b140      	cbz	r0, 8007844 <_printf_float+0xec>
 8007832:	464b      	mov	r3, r9
 8007834:	2b00      	cmp	r3, #0
 8007836:	bfbc      	itt	lt
 8007838:	232d      	movlt	r3, #45	; 0x2d
 800783a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800783e:	4a7f      	ldr	r2, [pc, #508]	; (8007a3c <_printf_float+0x2e4>)
 8007840:	4b7f      	ldr	r3, [pc, #508]	; (8007a40 <_printf_float+0x2e8>)
 8007842:	e7d1      	b.n	80077e8 <_printf_float+0x90>
 8007844:	6863      	ldr	r3, [r4, #4]
 8007846:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800784a:	9206      	str	r2, [sp, #24]
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	d13f      	bne.n	80078d0 <_printf_float+0x178>
 8007850:	2306      	movs	r3, #6
 8007852:	6063      	str	r3, [r4, #4]
 8007854:	9b05      	ldr	r3, [sp, #20]
 8007856:	6861      	ldr	r1, [r4, #4]
 8007858:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800785c:	2300      	movs	r3, #0
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	ab0a      	add	r3, sp, #40	; 0x28
 8007862:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007866:	ab09      	add	r3, sp, #36	; 0x24
 8007868:	ec49 8b10 	vmov	d0, r8, r9
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	6022      	str	r2, [r4, #0]
 8007870:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007874:	4628      	mov	r0, r5
 8007876:	f7ff fecf 	bl	8007618 <__cvt>
 800787a:	9b06      	ldr	r3, [sp, #24]
 800787c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800787e:	2b47      	cmp	r3, #71	; 0x47
 8007880:	4680      	mov	r8, r0
 8007882:	d108      	bne.n	8007896 <_printf_float+0x13e>
 8007884:	1cc8      	adds	r0, r1, #3
 8007886:	db02      	blt.n	800788e <_printf_float+0x136>
 8007888:	6863      	ldr	r3, [r4, #4]
 800788a:	4299      	cmp	r1, r3
 800788c:	dd41      	ble.n	8007912 <_printf_float+0x1ba>
 800788e:	f1ab 0302 	sub.w	r3, fp, #2
 8007892:	fa5f fb83 	uxtb.w	fp, r3
 8007896:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800789a:	d820      	bhi.n	80078de <_printf_float+0x186>
 800789c:	3901      	subs	r1, #1
 800789e:	465a      	mov	r2, fp
 80078a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078a4:	9109      	str	r1, [sp, #36]	; 0x24
 80078a6:	f7ff ff19 	bl	80076dc <__exponent>
 80078aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ac:	1813      	adds	r3, r2, r0
 80078ae:	2a01      	cmp	r2, #1
 80078b0:	4681      	mov	r9, r0
 80078b2:	6123      	str	r3, [r4, #16]
 80078b4:	dc02      	bgt.n	80078bc <_printf_float+0x164>
 80078b6:	6822      	ldr	r2, [r4, #0]
 80078b8:	07d2      	lsls	r2, r2, #31
 80078ba:	d501      	bpl.n	80078c0 <_printf_float+0x168>
 80078bc:	3301      	adds	r3, #1
 80078be:	6123      	str	r3, [r4, #16]
 80078c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d09c      	beq.n	8007802 <_printf_float+0xaa>
 80078c8:	232d      	movs	r3, #45	; 0x2d
 80078ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ce:	e798      	b.n	8007802 <_printf_float+0xaa>
 80078d0:	9a06      	ldr	r2, [sp, #24]
 80078d2:	2a47      	cmp	r2, #71	; 0x47
 80078d4:	d1be      	bne.n	8007854 <_printf_float+0xfc>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1bc      	bne.n	8007854 <_printf_float+0xfc>
 80078da:	2301      	movs	r3, #1
 80078dc:	e7b9      	b.n	8007852 <_printf_float+0xfa>
 80078de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80078e2:	d118      	bne.n	8007916 <_printf_float+0x1be>
 80078e4:	2900      	cmp	r1, #0
 80078e6:	6863      	ldr	r3, [r4, #4]
 80078e8:	dd0b      	ble.n	8007902 <_printf_float+0x1aa>
 80078ea:	6121      	str	r1, [r4, #16]
 80078ec:	b913      	cbnz	r3, 80078f4 <_printf_float+0x19c>
 80078ee:	6822      	ldr	r2, [r4, #0]
 80078f0:	07d0      	lsls	r0, r2, #31
 80078f2:	d502      	bpl.n	80078fa <_printf_float+0x1a2>
 80078f4:	3301      	adds	r3, #1
 80078f6:	440b      	add	r3, r1
 80078f8:	6123      	str	r3, [r4, #16]
 80078fa:	65a1      	str	r1, [r4, #88]	; 0x58
 80078fc:	f04f 0900 	mov.w	r9, #0
 8007900:	e7de      	b.n	80078c0 <_printf_float+0x168>
 8007902:	b913      	cbnz	r3, 800790a <_printf_float+0x1b2>
 8007904:	6822      	ldr	r2, [r4, #0]
 8007906:	07d2      	lsls	r2, r2, #31
 8007908:	d501      	bpl.n	800790e <_printf_float+0x1b6>
 800790a:	3302      	adds	r3, #2
 800790c:	e7f4      	b.n	80078f8 <_printf_float+0x1a0>
 800790e:	2301      	movs	r3, #1
 8007910:	e7f2      	b.n	80078f8 <_printf_float+0x1a0>
 8007912:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007918:	4299      	cmp	r1, r3
 800791a:	db05      	blt.n	8007928 <_printf_float+0x1d0>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	6121      	str	r1, [r4, #16]
 8007920:	07d8      	lsls	r0, r3, #31
 8007922:	d5ea      	bpl.n	80078fa <_printf_float+0x1a2>
 8007924:	1c4b      	adds	r3, r1, #1
 8007926:	e7e7      	b.n	80078f8 <_printf_float+0x1a0>
 8007928:	2900      	cmp	r1, #0
 800792a:	bfd4      	ite	le
 800792c:	f1c1 0202 	rsble	r2, r1, #2
 8007930:	2201      	movgt	r2, #1
 8007932:	4413      	add	r3, r2
 8007934:	e7e0      	b.n	80078f8 <_printf_float+0x1a0>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	055a      	lsls	r2, r3, #21
 800793a:	d407      	bmi.n	800794c <_printf_float+0x1f4>
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	4642      	mov	r2, r8
 8007940:	4631      	mov	r1, r6
 8007942:	4628      	mov	r0, r5
 8007944:	47b8      	blx	r7
 8007946:	3001      	adds	r0, #1
 8007948:	d12c      	bne.n	80079a4 <_printf_float+0x24c>
 800794a:	e764      	b.n	8007816 <_printf_float+0xbe>
 800794c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007950:	f240 80e0 	bls.w	8007b14 <_printf_float+0x3bc>
 8007954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007958:	2200      	movs	r2, #0
 800795a:	2300      	movs	r3, #0
 800795c:	f7f9 f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007960:	2800      	cmp	r0, #0
 8007962:	d034      	beq.n	80079ce <_printf_float+0x276>
 8007964:	4a37      	ldr	r2, [pc, #220]	; (8007a44 <_printf_float+0x2ec>)
 8007966:	2301      	movs	r3, #1
 8007968:	4631      	mov	r1, r6
 800796a:	4628      	mov	r0, r5
 800796c:	47b8      	blx	r7
 800796e:	3001      	adds	r0, #1
 8007970:	f43f af51 	beq.w	8007816 <_printf_float+0xbe>
 8007974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007978:	429a      	cmp	r2, r3
 800797a:	db02      	blt.n	8007982 <_printf_float+0x22a>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	07d8      	lsls	r0, r3, #31
 8007980:	d510      	bpl.n	80079a4 <_printf_float+0x24c>
 8007982:	ee18 3a10 	vmov	r3, s16
 8007986:	4652      	mov	r2, sl
 8007988:	4631      	mov	r1, r6
 800798a:	4628      	mov	r0, r5
 800798c:	47b8      	blx	r7
 800798e:	3001      	adds	r0, #1
 8007990:	f43f af41 	beq.w	8007816 <_printf_float+0xbe>
 8007994:	f04f 0800 	mov.w	r8, #0
 8007998:	f104 091a 	add.w	r9, r4, #26
 800799c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800799e:	3b01      	subs	r3, #1
 80079a0:	4543      	cmp	r3, r8
 80079a2:	dc09      	bgt.n	80079b8 <_printf_float+0x260>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	079b      	lsls	r3, r3, #30
 80079a8:	f100 8107 	bmi.w	8007bba <_printf_float+0x462>
 80079ac:	68e0      	ldr	r0, [r4, #12]
 80079ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b0:	4298      	cmp	r0, r3
 80079b2:	bfb8      	it	lt
 80079b4:	4618      	movlt	r0, r3
 80079b6:	e730      	b.n	800781a <_printf_float+0xc2>
 80079b8:	2301      	movs	r3, #1
 80079ba:	464a      	mov	r2, r9
 80079bc:	4631      	mov	r1, r6
 80079be:	4628      	mov	r0, r5
 80079c0:	47b8      	blx	r7
 80079c2:	3001      	adds	r0, #1
 80079c4:	f43f af27 	beq.w	8007816 <_printf_float+0xbe>
 80079c8:	f108 0801 	add.w	r8, r8, #1
 80079cc:	e7e6      	b.n	800799c <_printf_float+0x244>
 80079ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dc39      	bgt.n	8007a48 <_printf_float+0x2f0>
 80079d4:	4a1b      	ldr	r2, [pc, #108]	; (8007a44 <_printf_float+0x2ec>)
 80079d6:	2301      	movs	r3, #1
 80079d8:	4631      	mov	r1, r6
 80079da:	4628      	mov	r0, r5
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	f43f af19 	beq.w	8007816 <_printf_float+0xbe>
 80079e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80079e8:	4313      	orrs	r3, r2
 80079ea:	d102      	bne.n	80079f2 <_printf_float+0x29a>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	07d9      	lsls	r1, r3, #31
 80079f0:	d5d8      	bpl.n	80079a4 <_printf_float+0x24c>
 80079f2:	ee18 3a10 	vmov	r3, s16
 80079f6:	4652      	mov	r2, sl
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	f43f af09 	beq.w	8007816 <_printf_float+0xbe>
 8007a04:	f04f 0900 	mov.w	r9, #0
 8007a08:	f104 0a1a 	add.w	sl, r4, #26
 8007a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0e:	425b      	negs	r3, r3
 8007a10:	454b      	cmp	r3, r9
 8007a12:	dc01      	bgt.n	8007a18 <_printf_float+0x2c0>
 8007a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a16:	e792      	b.n	800793e <_printf_float+0x1e6>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b8      	blx	r7
 8007a22:	3001      	adds	r0, #1
 8007a24:	f43f aef7 	beq.w	8007816 <_printf_float+0xbe>
 8007a28:	f109 0901 	add.w	r9, r9, #1
 8007a2c:	e7ee      	b.n	8007a0c <_printf_float+0x2b4>
 8007a2e:	bf00      	nop
 8007a30:	7fefffff 	.word	0x7fefffff
 8007a34:	0800b951 	.word	0x0800b951
 8007a38:	0800b955 	.word	0x0800b955
 8007a3c:	0800b959 	.word	0x0800b959
 8007a40:	0800b95d 	.word	0x0800b95d
 8007a44:	0800b961 	.word	0x0800b961
 8007a48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	bfa8      	it	ge
 8007a50:	461a      	movge	r2, r3
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	4691      	mov	r9, r2
 8007a56:	dc37      	bgt.n	8007ac8 <_printf_float+0x370>
 8007a58:	f04f 0b00 	mov.w	fp, #0
 8007a5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a60:	f104 021a 	add.w	r2, r4, #26
 8007a64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a66:	9305      	str	r3, [sp, #20]
 8007a68:	eba3 0309 	sub.w	r3, r3, r9
 8007a6c:	455b      	cmp	r3, fp
 8007a6e:	dc33      	bgt.n	8007ad8 <_printf_float+0x380>
 8007a70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a74:	429a      	cmp	r2, r3
 8007a76:	db3b      	blt.n	8007af0 <_printf_float+0x398>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	07da      	lsls	r2, r3, #31
 8007a7c:	d438      	bmi.n	8007af0 <_printf_float+0x398>
 8007a7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a82:	eba2 0903 	sub.w	r9, r2, r3
 8007a86:	9b05      	ldr	r3, [sp, #20]
 8007a88:	1ad2      	subs	r2, r2, r3
 8007a8a:	4591      	cmp	r9, r2
 8007a8c:	bfa8      	it	ge
 8007a8e:	4691      	movge	r9, r2
 8007a90:	f1b9 0f00 	cmp.w	r9, #0
 8007a94:	dc35      	bgt.n	8007b02 <_printf_float+0x3aa>
 8007a96:	f04f 0800 	mov.w	r8, #0
 8007a9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a9e:	f104 0a1a 	add.w	sl, r4, #26
 8007aa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	eba3 0309 	sub.w	r3, r3, r9
 8007aac:	4543      	cmp	r3, r8
 8007aae:	f77f af79 	ble.w	80079a4 <_printf_float+0x24c>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4652      	mov	r2, sl
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	f43f aeaa 	beq.w	8007816 <_printf_float+0xbe>
 8007ac2:	f108 0801 	add.w	r8, r8, #1
 8007ac6:	e7ec      	b.n	8007aa2 <_printf_float+0x34a>
 8007ac8:	4613      	mov	r3, r2
 8007aca:	4631      	mov	r1, r6
 8007acc:	4642      	mov	r2, r8
 8007ace:	4628      	mov	r0, r5
 8007ad0:	47b8      	blx	r7
 8007ad2:	3001      	adds	r0, #1
 8007ad4:	d1c0      	bne.n	8007a58 <_printf_float+0x300>
 8007ad6:	e69e      	b.n	8007816 <_printf_float+0xbe>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4631      	mov	r1, r6
 8007adc:	4628      	mov	r0, r5
 8007ade:	9205      	str	r2, [sp, #20]
 8007ae0:	47b8      	blx	r7
 8007ae2:	3001      	adds	r0, #1
 8007ae4:	f43f ae97 	beq.w	8007816 <_printf_float+0xbe>
 8007ae8:	9a05      	ldr	r2, [sp, #20]
 8007aea:	f10b 0b01 	add.w	fp, fp, #1
 8007aee:	e7b9      	b.n	8007a64 <_printf_float+0x30c>
 8007af0:	ee18 3a10 	vmov	r3, s16
 8007af4:	4652      	mov	r2, sl
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b8      	blx	r7
 8007afc:	3001      	adds	r0, #1
 8007afe:	d1be      	bne.n	8007a7e <_printf_float+0x326>
 8007b00:	e689      	b.n	8007816 <_printf_float+0xbe>
 8007b02:	9a05      	ldr	r2, [sp, #20]
 8007b04:	464b      	mov	r3, r9
 8007b06:	4442      	add	r2, r8
 8007b08:	4631      	mov	r1, r6
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b8      	blx	r7
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d1c1      	bne.n	8007a96 <_printf_float+0x33e>
 8007b12:	e680      	b.n	8007816 <_printf_float+0xbe>
 8007b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b16:	2a01      	cmp	r2, #1
 8007b18:	dc01      	bgt.n	8007b1e <_printf_float+0x3c6>
 8007b1a:	07db      	lsls	r3, r3, #31
 8007b1c:	d53a      	bpl.n	8007b94 <_printf_float+0x43c>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4642      	mov	r2, r8
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f43f ae74 	beq.w	8007816 <_printf_float+0xbe>
 8007b2e:	ee18 3a10 	vmov	r3, s16
 8007b32:	4652      	mov	r2, sl
 8007b34:	4631      	mov	r1, r6
 8007b36:	4628      	mov	r0, r5
 8007b38:	47b8      	blx	r7
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	f43f ae6b 	beq.w	8007816 <_printf_float+0xbe>
 8007b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b44:	2200      	movs	r2, #0
 8007b46:	2300      	movs	r3, #0
 8007b48:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007b4c:	f7f8 ffc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b50:	b9d8      	cbnz	r0, 8007b8a <_printf_float+0x432>
 8007b52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b56:	f108 0201 	add.w	r2, r8, #1
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	47b8      	blx	r7
 8007b60:	3001      	adds	r0, #1
 8007b62:	d10e      	bne.n	8007b82 <_printf_float+0x42a>
 8007b64:	e657      	b.n	8007816 <_printf_float+0xbe>
 8007b66:	2301      	movs	r3, #1
 8007b68:	4652      	mov	r2, sl
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b8      	blx	r7
 8007b70:	3001      	adds	r0, #1
 8007b72:	f43f ae50 	beq.w	8007816 <_printf_float+0xbe>
 8007b76:	f108 0801 	add.w	r8, r8, #1
 8007b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	4543      	cmp	r3, r8
 8007b80:	dcf1      	bgt.n	8007b66 <_printf_float+0x40e>
 8007b82:	464b      	mov	r3, r9
 8007b84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b88:	e6da      	b.n	8007940 <_printf_float+0x1e8>
 8007b8a:	f04f 0800 	mov.w	r8, #0
 8007b8e:	f104 0a1a 	add.w	sl, r4, #26
 8007b92:	e7f2      	b.n	8007b7a <_printf_float+0x422>
 8007b94:	2301      	movs	r3, #1
 8007b96:	4642      	mov	r2, r8
 8007b98:	e7df      	b.n	8007b5a <_printf_float+0x402>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	464a      	mov	r2, r9
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	f43f ae36 	beq.w	8007816 <_printf_float+0xbe>
 8007baa:	f108 0801 	add.w	r8, r8, #1
 8007bae:	68e3      	ldr	r3, [r4, #12]
 8007bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bb2:	1a5b      	subs	r3, r3, r1
 8007bb4:	4543      	cmp	r3, r8
 8007bb6:	dcf0      	bgt.n	8007b9a <_printf_float+0x442>
 8007bb8:	e6f8      	b.n	80079ac <_printf_float+0x254>
 8007bba:	f04f 0800 	mov.w	r8, #0
 8007bbe:	f104 0919 	add.w	r9, r4, #25
 8007bc2:	e7f4      	b.n	8007bae <_printf_float+0x456>

08007bc4 <_printf_common>:
 8007bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	4616      	mov	r6, r2
 8007bca:	4699      	mov	r9, r3
 8007bcc:	688a      	ldr	r2, [r1, #8]
 8007bce:	690b      	ldr	r3, [r1, #16]
 8007bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	bfb8      	it	lt
 8007bd8:	4613      	movlt	r3, r2
 8007bda:	6033      	str	r3, [r6, #0]
 8007bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007be0:	4607      	mov	r7, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	b10a      	cbz	r2, 8007bea <_printf_common+0x26>
 8007be6:	3301      	adds	r3, #1
 8007be8:	6033      	str	r3, [r6, #0]
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	0699      	lsls	r1, r3, #26
 8007bee:	bf42      	ittt	mi
 8007bf0:	6833      	ldrmi	r3, [r6, #0]
 8007bf2:	3302      	addmi	r3, #2
 8007bf4:	6033      	strmi	r3, [r6, #0]
 8007bf6:	6825      	ldr	r5, [r4, #0]
 8007bf8:	f015 0506 	ands.w	r5, r5, #6
 8007bfc:	d106      	bne.n	8007c0c <_printf_common+0x48>
 8007bfe:	f104 0a19 	add.w	sl, r4, #25
 8007c02:	68e3      	ldr	r3, [r4, #12]
 8007c04:	6832      	ldr	r2, [r6, #0]
 8007c06:	1a9b      	subs	r3, r3, r2
 8007c08:	42ab      	cmp	r3, r5
 8007c0a:	dc26      	bgt.n	8007c5a <_printf_common+0x96>
 8007c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c10:	1e13      	subs	r3, r2, #0
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	bf18      	it	ne
 8007c16:	2301      	movne	r3, #1
 8007c18:	0692      	lsls	r2, r2, #26
 8007c1a:	d42b      	bmi.n	8007c74 <_printf_common+0xb0>
 8007c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c20:	4649      	mov	r1, r9
 8007c22:	4638      	mov	r0, r7
 8007c24:	47c0      	blx	r8
 8007c26:	3001      	adds	r0, #1
 8007c28:	d01e      	beq.n	8007c68 <_printf_common+0xa4>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	6922      	ldr	r2, [r4, #16]
 8007c2e:	f003 0306 	and.w	r3, r3, #6
 8007c32:	2b04      	cmp	r3, #4
 8007c34:	bf02      	ittt	eq
 8007c36:	68e5      	ldreq	r5, [r4, #12]
 8007c38:	6833      	ldreq	r3, [r6, #0]
 8007c3a:	1aed      	subeq	r5, r5, r3
 8007c3c:	68a3      	ldr	r3, [r4, #8]
 8007c3e:	bf0c      	ite	eq
 8007c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c44:	2500      	movne	r5, #0
 8007c46:	4293      	cmp	r3, r2
 8007c48:	bfc4      	itt	gt
 8007c4a:	1a9b      	subgt	r3, r3, r2
 8007c4c:	18ed      	addgt	r5, r5, r3
 8007c4e:	2600      	movs	r6, #0
 8007c50:	341a      	adds	r4, #26
 8007c52:	42b5      	cmp	r5, r6
 8007c54:	d11a      	bne.n	8007c8c <_printf_common+0xc8>
 8007c56:	2000      	movs	r0, #0
 8007c58:	e008      	b.n	8007c6c <_printf_common+0xa8>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4652      	mov	r2, sl
 8007c5e:	4649      	mov	r1, r9
 8007c60:	4638      	mov	r0, r7
 8007c62:	47c0      	blx	r8
 8007c64:	3001      	adds	r0, #1
 8007c66:	d103      	bne.n	8007c70 <_printf_common+0xac>
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c70:	3501      	adds	r5, #1
 8007c72:	e7c6      	b.n	8007c02 <_printf_common+0x3e>
 8007c74:	18e1      	adds	r1, r4, r3
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	2030      	movs	r0, #48	; 0x30
 8007c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c7e:	4422      	add	r2, r4
 8007c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c88:	3302      	adds	r3, #2
 8007c8a:	e7c7      	b.n	8007c1c <_printf_common+0x58>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	4622      	mov	r2, r4
 8007c90:	4649      	mov	r1, r9
 8007c92:	4638      	mov	r0, r7
 8007c94:	47c0      	blx	r8
 8007c96:	3001      	adds	r0, #1
 8007c98:	d0e6      	beq.n	8007c68 <_printf_common+0xa4>
 8007c9a:	3601      	adds	r6, #1
 8007c9c:	e7d9      	b.n	8007c52 <_printf_common+0x8e>
	...

08007ca0 <_printf_i>:
 8007ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca4:	7e0f      	ldrb	r7, [r1, #24]
 8007ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ca8:	2f78      	cmp	r7, #120	; 0x78
 8007caa:	4691      	mov	r9, r2
 8007cac:	4680      	mov	r8, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	469a      	mov	sl, r3
 8007cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cb6:	d807      	bhi.n	8007cc8 <_printf_i+0x28>
 8007cb8:	2f62      	cmp	r7, #98	; 0x62
 8007cba:	d80a      	bhi.n	8007cd2 <_printf_i+0x32>
 8007cbc:	2f00      	cmp	r7, #0
 8007cbe:	f000 80d4 	beq.w	8007e6a <_printf_i+0x1ca>
 8007cc2:	2f58      	cmp	r7, #88	; 0x58
 8007cc4:	f000 80c0 	beq.w	8007e48 <_printf_i+0x1a8>
 8007cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cd0:	e03a      	b.n	8007d48 <_printf_i+0xa8>
 8007cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cd6:	2b15      	cmp	r3, #21
 8007cd8:	d8f6      	bhi.n	8007cc8 <_printf_i+0x28>
 8007cda:	a101      	add	r1, pc, #4	; (adr r1, 8007ce0 <_printf_i+0x40>)
 8007cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ce0:	08007d39 	.word	0x08007d39
 8007ce4:	08007d4d 	.word	0x08007d4d
 8007ce8:	08007cc9 	.word	0x08007cc9
 8007cec:	08007cc9 	.word	0x08007cc9
 8007cf0:	08007cc9 	.word	0x08007cc9
 8007cf4:	08007cc9 	.word	0x08007cc9
 8007cf8:	08007d4d 	.word	0x08007d4d
 8007cfc:	08007cc9 	.word	0x08007cc9
 8007d00:	08007cc9 	.word	0x08007cc9
 8007d04:	08007cc9 	.word	0x08007cc9
 8007d08:	08007cc9 	.word	0x08007cc9
 8007d0c:	08007e51 	.word	0x08007e51
 8007d10:	08007d79 	.word	0x08007d79
 8007d14:	08007e0b 	.word	0x08007e0b
 8007d18:	08007cc9 	.word	0x08007cc9
 8007d1c:	08007cc9 	.word	0x08007cc9
 8007d20:	08007e73 	.word	0x08007e73
 8007d24:	08007cc9 	.word	0x08007cc9
 8007d28:	08007d79 	.word	0x08007d79
 8007d2c:	08007cc9 	.word	0x08007cc9
 8007d30:	08007cc9 	.word	0x08007cc9
 8007d34:	08007e13 	.word	0x08007e13
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	1d1a      	adds	r2, r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	602a      	str	r2, [r5, #0]
 8007d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e09f      	b.n	8007e8c <_printf_i+0x1ec>
 8007d4c:	6820      	ldr	r0, [r4, #0]
 8007d4e:	682b      	ldr	r3, [r5, #0]
 8007d50:	0607      	lsls	r7, r0, #24
 8007d52:	f103 0104 	add.w	r1, r3, #4
 8007d56:	6029      	str	r1, [r5, #0]
 8007d58:	d501      	bpl.n	8007d5e <_printf_i+0xbe>
 8007d5a:	681e      	ldr	r6, [r3, #0]
 8007d5c:	e003      	b.n	8007d66 <_printf_i+0xc6>
 8007d5e:	0646      	lsls	r6, r0, #25
 8007d60:	d5fb      	bpl.n	8007d5a <_printf_i+0xba>
 8007d62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	da03      	bge.n	8007d72 <_printf_i+0xd2>
 8007d6a:	232d      	movs	r3, #45	; 0x2d
 8007d6c:	4276      	negs	r6, r6
 8007d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d72:	485a      	ldr	r0, [pc, #360]	; (8007edc <_printf_i+0x23c>)
 8007d74:	230a      	movs	r3, #10
 8007d76:	e012      	b.n	8007d9e <_printf_i+0xfe>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	6820      	ldr	r0, [r4, #0]
 8007d7c:	1d19      	adds	r1, r3, #4
 8007d7e:	6029      	str	r1, [r5, #0]
 8007d80:	0605      	lsls	r5, r0, #24
 8007d82:	d501      	bpl.n	8007d88 <_printf_i+0xe8>
 8007d84:	681e      	ldr	r6, [r3, #0]
 8007d86:	e002      	b.n	8007d8e <_printf_i+0xee>
 8007d88:	0641      	lsls	r1, r0, #25
 8007d8a:	d5fb      	bpl.n	8007d84 <_printf_i+0xe4>
 8007d8c:	881e      	ldrh	r6, [r3, #0]
 8007d8e:	4853      	ldr	r0, [pc, #332]	; (8007edc <_printf_i+0x23c>)
 8007d90:	2f6f      	cmp	r7, #111	; 0x6f
 8007d92:	bf0c      	ite	eq
 8007d94:	2308      	moveq	r3, #8
 8007d96:	230a      	movne	r3, #10
 8007d98:	2100      	movs	r1, #0
 8007d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d9e:	6865      	ldr	r5, [r4, #4]
 8007da0:	60a5      	str	r5, [r4, #8]
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	bfa2      	ittt	ge
 8007da6:	6821      	ldrge	r1, [r4, #0]
 8007da8:	f021 0104 	bicge.w	r1, r1, #4
 8007dac:	6021      	strge	r1, [r4, #0]
 8007dae:	b90e      	cbnz	r6, 8007db4 <_printf_i+0x114>
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	d04b      	beq.n	8007e4c <_printf_i+0x1ac>
 8007db4:	4615      	mov	r5, r2
 8007db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dba:	fb03 6711 	mls	r7, r3, r1, r6
 8007dbe:	5dc7      	ldrb	r7, [r0, r7]
 8007dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007dc4:	4637      	mov	r7, r6
 8007dc6:	42bb      	cmp	r3, r7
 8007dc8:	460e      	mov	r6, r1
 8007dca:	d9f4      	bls.n	8007db6 <_printf_i+0x116>
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d10b      	bne.n	8007de8 <_printf_i+0x148>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	07de      	lsls	r6, r3, #31
 8007dd4:	d508      	bpl.n	8007de8 <_printf_i+0x148>
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	6861      	ldr	r1, [r4, #4]
 8007dda:	4299      	cmp	r1, r3
 8007ddc:	bfde      	ittt	le
 8007dde:	2330      	movle	r3, #48	; 0x30
 8007de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007de4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007de8:	1b52      	subs	r2, r2, r5
 8007dea:	6122      	str	r2, [r4, #16]
 8007dec:	f8cd a000 	str.w	sl, [sp]
 8007df0:	464b      	mov	r3, r9
 8007df2:	aa03      	add	r2, sp, #12
 8007df4:	4621      	mov	r1, r4
 8007df6:	4640      	mov	r0, r8
 8007df8:	f7ff fee4 	bl	8007bc4 <_printf_common>
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	d14a      	bne.n	8007e96 <_printf_i+0x1f6>
 8007e00:	f04f 30ff 	mov.w	r0, #4294967295
 8007e04:	b004      	add	sp, #16
 8007e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	f043 0320 	orr.w	r3, r3, #32
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	4833      	ldr	r0, [pc, #204]	; (8007ee0 <_printf_i+0x240>)
 8007e14:	2778      	movs	r7, #120	; 0x78
 8007e16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	6829      	ldr	r1, [r5, #0]
 8007e1e:	061f      	lsls	r7, r3, #24
 8007e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e24:	d402      	bmi.n	8007e2c <_printf_i+0x18c>
 8007e26:	065f      	lsls	r7, r3, #25
 8007e28:	bf48      	it	mi
 8007e2a:	b2b6      	uxthmi	r6, r6
 8007e2c:	07df      	lsls	r7, r3, #31
 8007e2e:	bf48      	it	mi
 8007e30:	f043 0320 	orrmi.w	r3, r3, #32
 8007e34:	6029      	str	r1, [r5, #0]
 8007e36:	bf48      	it	mi
 8007e38:	6023      	strmi	r3, [r4, #0]
 8007e3a:	b91e      	cbnz	r6, 8007e44 <_printf_i+0x1a4>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	f023 0320 	bic.w	r3, r3, #32
 8007e42:	6023      	str	r3, [r4, #0]
 8007e44:	2310      	movs	r3, #16
 8007e46:	e7a7      	b.n	8007d98 <_printf_i+0xf8>
 8007e48:	4824      	ldr	r0, [pc, #144]	; (8007edc <_printf_i+0x23c>)
 8007e4a:	e7e4      	b.n	8007e16 <_printf_i+0x176>
 8007e4c:	4615      	mov	r5, r2
 8007e4e:	e7bd      	b.n	8007dcc <_printf_i+0x12c>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	6826      	ldr	r6, [r4, #0]
 8007e54:	6961      	ldr	r1, [r4, #20]
 8007e56:	1d18      	adds	r0, r3, #4
 8007e58:	6028      	str	r0, [r5, #0]
 8007e5a:	0635      	lsls	r5, r6, #24
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	d501      	bpl.n	8007e64 <_printf_i+0x1c4>
 8007e60:	6019      	str	r1, [r3, #0]
 8007e62:	e002      	b.n	8007e6a <_printf_i+0x1ca>
 8007e64:	0670      	lsls	r0, r6, #25
 8007e66:	d5fb      	bpl.n	8007e60 <_printf_i+0x1c0>
 8007e68:	8019      	strh	r1, [r3, #0]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	6123      	str	r3, [r4, #16]
 8007e6e:	4615      	mov	r5, r2
 8007e70:	e7bc      	b.n	8007dec <_printf_i+0x14c>
 8007e72:	682b      	ldr	r3, [r5, #0]
 8007e74:	1d1a      	adds	r2, r3, #4
 8007e76:	602a      	str	r2, [r5, #0]
 8007e78:	681d      	ldr	r5, [r3, #0]
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f7f8 f9ae 	bl	80001e0 <memchr>
 8007e84:	b108      	cbz	r0, 8007e8a <_printf_i+0x1ea>
 8007e86:	1b40      	subs	r0, r0, r5
 8007e88:	6060      	str	r0, [r4, #4]
 8007e8a:	6863      	ldr	r3, [r4, #4]
 8007e8c:	6123      	str	r3, [r4, #16]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e94:	e7aa      	b.n	8007dec <_printf_i+0x14c>
 8007e96:	6923      	ldr	r3, [r4, #16]
 8007e98:	462a      	mov	r2, r5
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	47d0      	blx	sl
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d0ad      	beq.n	8007e00 <_printf_i+0x160>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	079b      	lsls	r3, r3, #30
 8007ea8:	d413      	bmi.n	8007ed2 <_printf_i+0x232>
 8007eaa:	68e0      	ldr	r0, [r4, #12]
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	4298      	cmp	r0, r3
 8007eb0:	bfb8      	it	lt
 8007eb2:	4618      	movlt	r0, r3
 8007eb4:	e7a6      	b.n	8007e04 <_printf_i+0x164>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	4632      	mov	r2, r6
 8007eba:	4649      	mov	r1, r9
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	47d0      	blx	sl
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d09d      	beq.n	8007e00 <_printf_i+0x160>
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	68e3      	ldr	r3, [r4, #12]
 8007ec8:	9903      	ldr	r1, [sp, #12]
 8007eca:	1a5b      	subs	r3, r3, r1
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	dcf2      	bgt.n	8007eb6 <_printf_i+0x216>
 8007ed0:	e7eb      	b.n	8007eaa <_printf_i+0x20a>
 8007ed2:	2500      	movs	r5, #0
 8007ed4:	f104 0619 	add.w	r6, r4, #25
 8007ed8:	e7f5      	b.n	8007ec6 <_printf_i+0x226>
 8007eda:	bf00      	nop
 8007edc:	0800b963 	.word	0x0800b963
 8007ee0:	0800b974 	.word	0x0800b974

08007ee4 <_scanf_float>:
 8007ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee8:	b087      	sub	sp, #28
 8007eea:	4617      	mov	r7, r2
 8007eec:	9303      	str	r3, [sp, #12]
 8007eee:	688b      	ldr	r3, [r1, #8]
 8007ef0:	1e5a      	subs	r2, r3, #1
 8007ef2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007ef6:	bf83      	ittte	hi
 8007ef8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007efc:	195b      	addhi	r3, r3, r5
 8007efe:	9302      	strhi	r3, [sp, #8]
 8007f00:	2300      	movls	r3, #0
 8007f02:	bf86      	itte	hi
 8007f04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f08:	608b      	strhi	r3, [r1, #8]
 8007f0a:	9302      	strls	r3, [sp, #8]
 8007f0c:	680b      	ldr	r3, [r1, #0]
 8007f0e:	468b      	mov	fp, r1
 8007f10:	2500      	movs	r5, #0
 8007f12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f16:	f84b 3b1c 	str.w	r3, [fp], #28
 8007f1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f1e:	4680      	mov	r8, r0
 8007f20:	460c      	mov	r4, r1
 8007f22:	465e      	mov	r6, fp
 8007f24:	46aa      	mov	sl, r5
 8007f26:	46a9      	mov	r9, r5
 8007f28:	9501      	str	r5, [sp, #4]
 8007f2a:	68a2      	ldr	r2, [r4, #8]
 8007f2c:	b152      	cbz	r2, 8007f44 <_scanf_float+0x60>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b4e      	cmp	r3, #78	; 0x4e
 8007f34:	d864      	bhi.n	8008000 <_scanf_float+0x11c>
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d83c      	bhi.n	8007fb4 <_scanf_float+0xd0>
 8007f3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007f3e:	b2c8      	uxtb	r0, r1
 8007f40:	280e      	cmp	r0, #14
 8007f42:	d93a      	bls.n	8007fba <_scanf_float+0xd6>
 8007f44:	f1b9 0f00 	cmp.w	r9, #0
 8007f48:	d003      	beq.n	8007f52 <_scanf_float+0x6e>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f56:	f1ba 0f01 	cmp.w	sl, #1
 8007f5a:	f200 8113 	bhi.w	8008184 <_scanf_float+0x2a0>
 8007f5e:	455e      	cmp	r6, fp
 8007f60:	f200 8105 	bhi.w	800816e <_scanf_float+0x28a>
 8007f64:	2501      	movs	r5, #1
 8007f66:	4628      	mov	r0, r5
 8007f68:	b007      	add	sp, #28
 8007f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007f72:	2a0d      	cmp	r2, #13
 8007f74:	d8e6      	bhi.n	8007f44 <_scanf_float+0x60>
 8007f76:	a101      	add	r1, pc, #4	; (adr r1, 8007f7c <_scanf_float+0x98>)
 8007f78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f7c:	080080bb 	.word	0x080080bb
 8007f80:	08007f45 	.word	0x08007f45
 8007f84:	08007f45 	.word	0x08007f45
 8007f88:	08007f45 	.word	0x08007f45
 8007f8c:	0800811b 	.word	0x0800811b
 8007f90:	080080f3 	.word	0x080080f3
 8007f94:	08007f45 	.word	0x08007f45
 8007f98:	08007f45 	.word	0x08007f45
 8007f9c:	080080c9 	.word	0x080080c9
 8007fa0:	08007f45 	.word	0x08007f45
 8007fa4:	08007f45 	.word	0x08007f45
 8007fa8:	08007f45 	.word	0x08007f45
 8007fac:	08007f45 	.word	0x08007f45
 8007fb0:	08008081 	.word	0x08008081
 8007fb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007fb8:	e7db      	b.n	8007f72 <_scanf_float+0x8e>
 8007fba:	290e      	cmp	r1, #14
 8007fbc:	d8c2      	bhi.n	8007f44 <_scanf_float+0x60>
 8007fbe:	a001      	add	r0, pc, #4	; (adr r0, 8007fc4 <_scanf_float+0xe0>)
 8007fc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007fc4:	08008073 	.word	0x08008073
 8007fc8:	08007f45 	.word	0x08007f45
 8007fcc:	08008073 	.word	0x08008073
 8007fd0:	08008107 	.word	0x08008107
 8007fd4:	08007f45 	.word	0x08007f45
 8007fd8:	08008021 	.word	0x08008021
 8007fdc:	0800805d 	.word	0x0800805d
 8007fe0:	0800805d 	.word	0x0800805d
 8007fe4:	0800805d 	.word	0x0800805d
 8007fe8:	0800805d 	.word	0x0800805d
 8007fec:	0800805d 	.word	0x0800805d
 8007ff0:	0800805d 	.word	0x0800805d
 8007ff4:	0800805d 	.word	0x0800805d
 8007ff8:	0800805d 	.word	0x0800805d
 8007ffc:	0800805d 	.word	0x0800805d
 8008000:	2b6e      	cmp	r3, #110	; 0x6e
 8008002:	d809      	bhi.n	8008018 <_scanf_float+0x134>
 8008004:	2b60      	cmp	r3, #96	; 0x60
 8008006:	d8b2      	bhi.n	8007f6e <_scanf_float+0x8a>
 8008008:	2b54      	cmp	r3, #84	; 0x54
 800800a:	d077      	beq.n	80080fc <_scanf_float+0x218>
 800800c:	2b59      	cmp	r3, #89	; 0x59
 800800e:	d199      	bne.n	8007f44 <_scanf_float+0x60>
 8008010:	2d07      	cmp	r5, #7
 8008012:	d197      	bne.n	8007f44 <_scanf_float+0x60>
 8008014:	2508      	movs	r5, #8
 8008016:	e029      	b.n	800806c <_scanf_float+0x188>
 8008018:	2b74      	cmp	r3, #116	; 0x74
 800801a:	d06f      	beq.n	80080fc <_scanf_float+0x218>
 800801c:	2b79      	cmp	r3, #121	; 0x79
 800801e:	e7f6      	b.n	800800e <_scanf_float+0x12a>
 8008020:	6821      	ldr	r1, [r4, #0]
 8008022:	05c8      	lsls	r0, r1, #23
 8008024:	d51a      	bpl.n	800805c <_scanf_float+0x178>
 8008026:	9b02      	ldr	r3, [sp, #8]
 8008028:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800802c:	6021      	str	r1, [r4, #0]
 800802e:	f109 0901 	add.w	r9, r9, #1
 8008032:	b11b      	cbz	r3, 800803c <_scanf_float+0x158>
 8008034:	3b01      	subs	r3, #1
 8008036:	3201      	adds	r2, #1
 8008038:	9302      	str	r3, [sp, #8]
 800803a:	60a2      	str	r2, [r4, #8]
 800803c:	68a3      	ldr	r3, [r4, #8]
 800803e:	3b01      	subs	r3, #1
 8008040:	60a3      	str	r3, [r4, #8]
 8008042:	6923      	ldr	r3, [r4, #16]
 8008044:	3301      	adds	r3, #1
 8008046:	6123      	str	r3, [r4, #16]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3b01      	subs	r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	607b      	str	r3, [r7, #4]
 8008050:	f340 8084 	ble.w	800815c <_scanf_float+0x278>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	3301      	adds	r3, #1
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	e766      	b.n	8007f2a <_scanf_float+0x46>
 800805c:	eb1a 0f05 	cmn.w	sl, r5
 8008060:	f47f af70 	bne.w	8007f44 <_scanf_float+0x60>
 8008064:	6822      	ldr	r2, [r4, #0]
 8008066:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800806a:	6022      	str	r2, [r4, #0]
 800806c:	f806 3b01 	strb.w	r3, [r6], #1
 8008070:	e7e4      	b.n	800803c <_scanf_float+0x158>
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	0610      	lsls	r0, r2, #24
 8008076:	f57f af65 	bpl.w	8007f44 <_scanf_float+0x60>
 800807a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800807e:	e7f4      	b.n	800806a <_scanf_float+0x186>
 8008080:	f1ba 0f00 	cmp.w	sl, #0
 8008084:	d10e      	bne.n	80080a4 <_scanf_float+0x1c0>
 8008086:	f1b9 0f00 	cmp.w	r9, #0
 800808a:	d10e      	bne.n	80080aa <_scanf_float+0x1c6>
 800808c:	6822      	ldr	r2, [r4, #0]
 800808e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008092:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008096:	d108      	bne.n	80080aa <_scanf_float+0x1c6>
 8008098:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800809c:	6022      	str	r2, [r4, #0]
 800809e:	f04f 0a01 	mov.w	sl, #1
 80080a2:	e7e3      	b.n	800806c <_scanf_float+0x188>
 80080a4:	f1ba 0f02 	cmp.w	sl, #2
 80080a8:	d055      	beq.n	8008156 <_scanf_float+0x272>
 80080aa:	2d01      	cmp	r5, #1
 80080ac:	d002      	beq.n	80080b4 <_scanf_float+0x1d0>
 80080ae:	2d04      	cmp	r5, #4
 80080b0:	f47f af48 	bne.w	8007f44 <_scanf_float+0x60>
 80080b4:	3501      	adds	r5, #1
 80080b6:	b2ed      	uxtb	r5, r5
 80080b8:	e7d8      	b.n	800806c <_scanf_float+0x188>
 80080ba:	f1ba 0f01 	cmp.w	sl, #1
 80080be:	f47f af41 	bne.w	8007f44 <_scanf_float+0x60>
 80080c2:	f04f 0a02 	mov.w	sl, #2
 80080c6:	e7d1      	b.n	800806c <_scanf_float+0x188>
 80080c8:	b97d      	cbnz	r5, 80080ea <_scanf_float+0x206>
 80080ca:	f1b9 0f00 	cmp.w	r9, #0
 80080ce:	f47f af3c 	bne.w	8007f4a <_scanf_float+0x66>
 80080d2:	6822      	ldr	r2, [r4, #0]
 80080d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80080d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80080dc:	f47f af39 	bne.w	8007f52 <_scanf_float+0x6e>
 80080e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080e4:	6022      	str	r2, [r4, #0]
 80080e6:	2501      	movs	r5, #1
 80080e8:	e7c0      	b.n	800806c <_scanf_float+0x188>
 80080ea:	2d03      	cmp	r5, #3
 80080ec:	d0e2      	beq.n	80080b4 <_scanf_float+0x1d0>
 80080ee:	2d05      	cmp	r5, #5
 80080f0:	e7de      	b.n	80080b0 <_scanf_float+0x1cc>
 80080f2:	2d02      	cmp	r5, #2
 80080f4:	f47f af26 	bne.w	8007f44 <_scanf_float+0x60>
 80080f8:	2503      	movs	r5, #3
 80080fa:	e7b7      	b.n	800806c <_scanf_float+0x188>
 80080fc:	2d06      	cmp	r5, #6
 80080fe:	f47f af21 	bne.w	8007f44 <_scanf_float+0x60>
 8008102:	2507      	movs	r5, #7
 8008104:	e7b2      	b.n	800806c <_scanf_float+0x188>
 8008106:	6822      	ldr	r2, [r4, #0]
 8008108:	0591      	lsls	r1, r2, #22
 800810a:	f57f af1b 	bpl.w	8007f44 <_scanf_float+0x60>
 800810e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008112:	6022      	str	r2, [r4, #0]
 8008114:	f8cd 9004 	str.w	r9, [sp, #4]
 8008118:	e7a8      	b.n	800806c <_scanf_float+0x188>
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008120:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008124:	d006      	beq.n	8008134 <_scanf_float+0x250>
 8008126:	0550      	lsls	r0, r2, #21
 8008128:	f57f af0c 	bpl.w	8007f44 <_scanf_float+0x60>
 800812c:	f1b9 0f00 	cmp.w	r9, #0
 8008130:	f43f af0f 	beq.w	8007f52 <_scanf_float+0x6e>
 8008134:	0591      	lsls	r1, r2, #22
 8008136:	bf58      	it	pl
 8008138:	9901      	ldrpl	r1, [sp, #4]
 800813a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800813e:	bf58      	it	pl
 8008140:	eba9 0101 	subpl.w	r1, r9, r1
 8008144:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008148:	bf58      	it	pl
 800814a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800814e:	6022      	str	r2, [r4, #0]
 8008150:	f04f 0900 	mov.w	r9, #0
 8008154:	e78a      	b.n	800806c <_scanf_float+0x188>
 8008156:	f04f 0a03 	mov.w	sl, #3
 800815a:	e787      	b.n	800806c <_scanf_float+0x188>
 800815c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008160:	4639      	mov	r1, r7
 8008162:	4640      	mov	r0, r8
 8008164:	4798      	blx	r3
 8008166:	2800      	cmp	r0, #0
 8008168:	f43f aedf 	beq.w	8007f2a <_scanf_float+0x46>
 800816c:	e6ea      	b.n	8007f44 <_scanf_float+0x60>
 800816e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008172:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008176:	463a      	mov	r2, r7
 8008178:	4640      	mov	r0, r8
 800817a:	4798      	blx	r3
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	3b01      	subs	r3, #1
 8008180:	6123      	str	r3, [r4, #16]
 8008182:	e6ec      	b.n	8007f5e <_scanf_float+0x7a>
 8008184:	1e6b      	subs	r3, r5, #1
 8008186:	2b06      	cmp	r3, #6
 8008188:	d825      	bhi.n	80081d6 <_scanf_float+0x2f2>
 800818a:	2d02      	cmp	r5, #2
 800818c:	d836      	bhi.n	80081fc <_scanf_float+0x318>
 800818e:	455e      	cmp	r6, fp
 8008190:	f67f aee8 	bls.w	8007f64 <_scanf_float+0x80>
 8008194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008198:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800819c:	463a      	mov	r2, r7
 800819e:	4640      	mov	r0, r8
 80081a0:	4798      	blx	r3
 80081a2:	6923      	ldr	r3, [r4, #16]
 80081a4:	3b01      	subs	r3, #1
 80081a6:	6123      	str	r3, [r4, #16]
 80081a8:	e7f1      	b.n	800818e <_scanf_float+0x2aa>
 80081aa:	9802      	ldr	r0, [sp, #8]
 80081ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80081b4:	9002      	str	r0, [sp, #8]
 80081b6:	463a      	mov	r2, r7
 80081b8:	4640      	mov	r0, r8
 80081ba:	4798      	blx	r3
 80081bc:	6923      	ldr	r3, [r4, #16]
 80081be:	3b01      	subs	r3, #1
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081c6:	fa5f fa8a 	uxtb.w	sl, sl
 80081ca:	f1ba 0f02 	cmp.w	sl, #2
 80081ce:	d1ec      	bne.n	80081aa <_scanf_float+0x2c6>
 80081d0:	3d03      	subs	r5, #3
 80081d2:	b2ed      	uxtb	r5, r5
 80081d4:	1b76      	subs	r6, r6, r5
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	05da      	lsls	r2, r3, #23
 80081da:	d52f      	bpl.n	800823c <_scanf_float+0x358>
 80081dc:	055b      	lsls	r3, r3, #21
 80081de:	d510      	bpl.n	8008202 <_scanf_float+0x31e>
 80081e0:	455e      	cmp	r6, fp
 80081e2:	f67f aebf 	bls.w	8007f64 <_scanf_float+0x80>
 80081e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081ee:	463a      	mov	r2, r7
 80081f0:	4640      	mov	r0, r8
 80081f2:	4798      	blx	r3
 80081f4:	6923      	ldr	r3, [r4, #16]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	6123      	str	r3, [r4, #16]
 80081fa:	e7f1      	b.n	80081e0 <_scanf_float+0x2fc>
 80081fc:	46aa      	mov	sl, r5
 80081fe:	9602      	str	r6, [sp, #8]
 8008200:	e7df      	b.n	80081c2 <_scanf_float+0x2de>
 8008202:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	2965      	cmp	r1, #101	; 0x65
 800820a:	f103 33ff 	add.w	r3, r3, #4294967295
 800820e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008212:	6123      	str	r3, [r4, #16]
 8008214:	d00c      	beq.n	8008230 <_scanf_float+0x34c>
 8008216:	2945      	cmp	r1, #69	; 0x45
 8008218:	d00a      	beq.n	8008230 <_scanf_float+0x34c>
 800821a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800821e:	463a      	mov	r2, r7
 8008220:	4640      	mov	r0, r8
 8008222:	4798      	blx	r3
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800822a:	3b01      	subs	r3, #1
 800822c:	1eb5      	subs	r5, r6, #2
 800822e:	6123      	str	r3, [r4, #16]
 8008230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008234:	463a      	mov	r2, r7
 8008236:	4640      	mov	r0, r8
 8008238:	4798      	blx	r3
 800823a:	462e      	mov	r6, r5
 800823c:	6825      	ldr	r5, [r4, #0]
 800823e:	f015 0510 	ands.w	r5, r5, #16
 8008242:	d158      	bne.n	80082f6 <_scanf_float+0x412>
 8008244:	7035      	strb	r5, [r6, #0]
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800824c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008250:	d11c      	bne.n	800828c <_scanf_float+0x3a8>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	454b      	cmp	r3, r9
 8008256:	eba3 0209 	sub.w	r2, r3, r9
 800825a:	d124      	bne.n	80082a6 <_scanf_float+0x3c2>
 800825c:	2200      	movs	r2, #0
 800825e:	4659      	mov	r1, fp
 8008260:	4640      	mov	r0, r8
 8008262:	f7ff f939 	bl	80074d8 <_strtod_r>
 8008266:	9b03      	ldr	r3, [sp, #12]
 8008268:	6821      	ldr	r1, [r4, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f011 0f02 	tst.w	r1, #2
 8008270:	ec57 6b10 	vmov	r6, r7, d0
 8008274:	f103 0204 	add.w	r2, r3, #4
 8008278:	d020      	beq.n	80082bc <_scanf_float+0x3d8>
 800827a:	9903      	ldr	r1, [sp, #12]
 800827c:	600a      	str	r2, [r1, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	e9c3 6700 	strd	r6, r7, [r3]
 8008284:	68e3      	ldr	r3, [r4, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60e3      	str	r3, [r4, #12]
 800828a:	e66c      	b.n	8007f66 <_scanf_float+0x82>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0e4      	beq.n	800825c <_scanf_float+0x378>
 8008292:	9905      	ldr	r1, [sp, #20]
 8008294:	230a      	movs	r3, #10
 8008296:	462a      	mov	r2, r5
 8008298:	3101      	adds	r1, #1
 800829a:	4640      	mov	r0, r8
 800829c:	f7ff f9b0 	bl	8007600 <_strtol_r>
 80082a0:	9b04      	ldr	r3, [sp, #16]
 80082a2:	9e05      	ldr	r6, [sp, #20]
 80082a4:	1ac2      	subs	r2, r0, r3
 80082a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80082aa:	429e      	cmp	r6, r3
 80082ac:	bf28      	it	cs
 80082ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80082b2:	4912      	ldr	r1, [pc, #72]	; (80082fc <_scanf_float+0x418>)
 80082b4:	4630      	mov	r0, r6
 80082b6:	f000 f8d5 	bl	8008464 <siprintf>
 80082ba:	e7cf      	b.n	800825c <_scanf_float+0x378>
 80082bc:	f011 0f04 	tst.w	r1, #4
 80082c0:	9903      	ldr	r1, [sp, #12]
 80082c2:	600a      	str	r2, [r1, #0]
 80082c4:	d1db      	bne.n	800827e <_scanf_float+0x39a>
 80082c6:	f8d3 8000 	ldr.w	r8, [r3]
 80082ca:	ee10 2a10 	vmov	r2, s0
 80082ce:	ee10 0a10 	vmov	r0, s0
 80082d2:	463b      	mov	r3, r7
 80082d4:	4639      	mov	r1, r7
 80082d6:	f7f8 fc31 	bl	8000b3c <__aeabi_dcmpun>
 80082da:	b128      	cbz	r0, 80082e8 <_scanf_float+0x404>
 80082dc:	4808      	ldr	r0, [pc, #32]	; (8008300 <_scanf_float+0x41c>)
 80082de:	f000 f9f7 	bl	80086d0 <nanf>
 80082e2:	ed88 0a00 	vstr	s0, [r8]
 80082e6:	e7cd      	b.n	8008284 <_scanf_float+0x3a0>
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f8 fc84 	bl	8000bf8 <__aeabi_d2f>
 80082f0:	f8c8 0000 	str.w	r0, [r8]
 80082f4:	e7c6      	b.n	8008284 <_scanf_float+0x3a0>
 80082f6:	2500      	movs	r5, #0
 80082f8:	e635      	b.n	8007f66 <_scanf_float+0x82>
 80082fa:	bf00      	nop
 80082fc:	0800b985 	.word	0x0800b985
 8008300:	0800bc20 	.word	0x0800bc20

08008304 <std>:
 8008304:	2300      	movs	r3, #0
 8008306:	b510      	push	{r4, lr}
 8008308:	4604      	mov	r4, r0
 800830a:	e9c0 3300 	strd	r3, r3, [r0]
 800830e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008312:	6083      	str	r3, [r0, #8]
 8008314:	8181      	strh	r1, [r0, #12]
 8008316:	6643      	str	r3, [r0, #100]	; 0x64
 8008318:	81c2      	strh	r2, [r0, #14]
 800831a:	6183      	str	r3, [r0, #24]
 800831c:	4619      	mov	r1, r3
 800831e:	2208      	movs	r2, #8
 8008320:	305c      	adds	r0, #92	; 0x5c
 8008322:	f000 f902 	bl	800852a <memset>
 8008326:	4b05      	ldr	r3, [pc, #20]	; (800833c <std+0x38>)
 8008328:	6263      	str	r3, [r4, #36]	; 0x24
 800832a:	4b05      	ldr	r3, [pc, #20]	; (8008340 <std+0x3c>)
 800832c:	62a3      	str	r3, [r4, #40]	; 0x28
 800832e:	4b05      	ldr	r3, [pc, #20]	; (8008344 <std+0x40>)
 8008330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008332:	4b05      	ldr	r3, [pc, #20]	; (8008348 <std+0x44>)
 8008334:	6224      	str	r4, [r4, #32]
 8008336:	6323      	str	r3, [r4, #48]	; 0x30
 8008338:	bd10      	pop	{r4, pc}
 800833a:	bf00      	nop
 800833c:	080084a5 	.word	0x080084a5
 8008340:	080084c7 	.word	0x080084c7
 8008344:	080084ff 	.word	0x080084ff
 8008348:	08008523 	.word	0x08008523

0800834c <stdio_exit_handler>:
 800834c:	4a02      	ldr	r2, [pc, #8]	; (8008358 <stdio_exit_handler+0xc>)
 800834e:	4903      	ldr	r1, [pc, #12]	; (800835c <stdio_exit_handler+0x10>)
 8008350:	4803      	ldr	r0, [pc, #12]	; (8008360 <stdio_exit_handler+0x14>)
 8008352:	f000 b869 	b.w	8008428 <_fwalk_sglue>
 8008356:	bf00      	nop
 8008358:	200000b4 	.word	0x200000b4
 800835c:	0800a9d9 	.word	0x0800a9d9
 8008360:	2000022c 	.word	0x2000022c

08008364 <cleanup_stdio>:
 8008364:	6841      	ldr	r1, [r0, #4]
 8008366:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <cleanup_stdio+0x34>)
 8008368:	4299      	cmp	r1, r3
 800836a:	b510      	push	{r4, lr}
 800836c:	4604      	mov	r4, r0
 800836e:	d001      	beq.n	8008374 <cleanup_stdio+0x10>
 8008370:	f002 fb32 	bl	800a9d8 <_fflush_r>
 8008374:	68a1      	ldr	r1, [r4, #8]
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <cleanup_stdio+0x38>)
 8008378:	4299      	cmp	r1, r3
 800837a:	d002      	beq.n	8008382 <cleanup_stdio+0x1e>
 800837c:	4620      	mov	r0, r4
 800837e:	f002 fb2b 	bl	800a9d8 <_fflush_r>
 8008382:	68e1      	ldr	r1, [r4, #12]
 8008384:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <cleanup_stdio+0x3c>)
 8008386:	4299      	cmp	r1, r3
 8008388:	d004      	beq.n	8008394 <cleanup_stdio+0x30>
 800838a:	4620      	mov	r0, r4
 800838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008390:	f002 bb22 	b.w	800a9d8 <_fflush_r>
 8008394:	bd10      	pop	{r4, pc}
 8008396:	bf00      	nop
 8008398:	200004c4 	.word	0x200004c4
 800839c:	2000052c 	.word	0x2000052c
 80083a0:	20000594 	.word	0x20000594

080083a4 <global_stdio_init.part.0>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <global_stdio_init.part.0+0x30>)
 80083a8:	4c0b      	ldr	r4, [pc, #44]	; (80083d8 <global_stdio_init.part.0+0x34>)
 80083aa:	4a0c      	ldr	r2, [pc, #48]	; (80083dc <global_stdio_init.part.0+0x38>)
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	4620      	mov	r0, r4
 80083b0:	2200      	movs	r2, #0
 80083b2:	2104      	movs	r1, #4
 80083b4:	f7ff ffa6 	bl	8008304 <std>
 80083b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80083bc:	2201      	movs	r2, #1
 80083be:	2109      	movs	r1, #9
 80083c0:	f7ff ffa0 	bl	8008304 <std>
 80083c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80083c8:	2202      	movs	r2, #2
 80083ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ce:	2112      	movs	r1, #18
 80083d0:	f7ff bf98 	b.w	8008304 <std>
 80083d4:	200005fc 	.word	0x200005fc
 80083d8:	200004c4 	.word	0x200004c4
 80083dc:	0800834d 	.word	0x0800834d

080083e0 <__sfp_lock_acquire>:
 80083e0:	4801      	ldr	r0, [pc, #4]	; (80083e8 <__sfp_lock_acquire+0x8>)
 80083e2:	f000 b95b 	b.w	800869c <__retarget_lock_acquire_recursive>
 80083e6:	bf00      	nop
 80083e8:	20000605 	.word	0x20000605

080083ec <__sfp_lock_release>:
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <__sfp_lock_release+0x8>)
 80083ee:	f000 b956 	b.w	800869e <__retarget_lock_release_recursive>
 80083f2:	bf00      	nop
 80083f4:	20000605 	.word	0x20000605

080083f8 <__sinit>:
 80083f8:	b510      	push	{r4, lr}
 80083fa:	4604      	mov	r4, r0
 80083fc:	f7ff fff0 	bl	80083e0 <__sfp_lock_acquire>
 8008400:	6a23      	ldr	r3, [r4, #32]
 8008402:	b11b      	cbz	r3, 800840c <__sinit+0x14>
 8008404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008408:	f7ff bff0 	b.w	80083ec <__sfp_lock_release>
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <__sinit+0x28>)
 800840e:	6223      	str	r3, [r4, #32]
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <__sinit+0x2c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1f5      	bne.n	8008404 <__sinit+0xc>
 8008418:	f7ff ffc4 	bl	80083a4 <global_stdio_init.part.0>
 800841c:	e7f2      	b.n	8008404 <__sinit+0xc>
 800841e:	bf00      	nop
 8008420:	08008365 	.word	0x08008365
 8008424:	200005fc 	.word	0x200005fc

08008428 <_fwalk_sglue>:
 8008428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800842c:	4607      	mov	r7, r0
 800842e:	4688      	mov	r8, r1
 8008430:	4614      	mov	r4, r2
 8008432:	2600      	movs	r6, #0
 8008434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008438:	f1b9 0901 	subs.w	r9, r9, #1
 800843c:	d505      	bpl.n	800844a <_fwalk_sglue+0x22>
 800843e:	6824      	ldr	r4, [r4, #0]
 8008440:	2c00      	cmp	r4, #0
 8008442:	d1f7      	bne.n	8008434 <_fwalk_sglue+0xc>
 8008444:	4630      	mov	r0, r6
 8008446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844a:	89ab      	ldrh	r3, [r5, #12]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d907      	bls.n	8008460 <_fwalk_sglue+0x38>
 8008450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008454:	3301      	adds	r3, #1
 8008456:	d003      	beq.n	8008460 <_fwalk_sglue+0x38>
 8008458:	4629      	mov	r1, r5
 800845a:	4638      	mov	r0, r7
 800845c:	47c0      	blx	r8
 800845e:	4306      	orrs	r6, r0
 8008460:	3568      	adds	r5, #104	; 0x68
 8008462:	e7e9      	b.n	8008438 <_fwalk_sglue+0x10>

08008464 <siprintf>:
 8008464:	b40e      	push	{r1, r2, r3}
 8008466:	b500      	push	{lr}
 8008468:	b09c      	sub	sp, #112	; 0x70
 800846a:	ab1d      	add	r3, sp, #116	; 0x74
 800846c:	9002      	str	r0, [sp, #8]
 800846e:	9006      	str	r0, [sp, #24]
 8008470:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008474:	4809      	ldr	r0, [pc, #36]	; (800849c <siprintf+0x38>)
 8008476:	9107      	str	r1, [sp, #28]
 8008478:	9104      	str	r1, [sp, #16]
 800847a:	4909      	ldr	r1, [pc, #36]	; (80084a0 <siprintf+0x3c>)
 800847c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008480:	9105      	str	r1, [sp, #20]
 8008482:	6800      	ldr	r0, [r0, #0]
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	a902      	add	r1, sp, #8
 8008488:	f002 f922 	bl	800a6d0 <_svfiprintf_r>
 800848c:	9b02      	ldr	r3, [sp, #8]
 800848e:	2200      	movs	r2, #0
 8008490:	701a      	strb	r2, [r3, #0]
 8008492:	b01c      	add	sp, #112	; 0x70
 8008494:	f85d eb04 	ldr.w	lr, [sp], #4
 8008498:	b003      	add	sp, #12
 800849a:	4770      	bx	lr
 800849c:	20000278 	.word	0x20000278
 80084a0:	ffff0208 	.word	0xffff0208

080084a4 <__sread>:
 80084a4:	b510      	push	{r4, lr}
 80084a6:	460c      	mov	r4, r1
 80084a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ac:	f000 f8a8 	bl	8008600 <_read_r>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	bfab      	itete	ge
 80084b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084b6:	89a3      	ldrhlt	r3, [r4, #12]
 80084b8:	181b      	addge	r3, r3, r0
 80084ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084be:	bfac      	ite	ge
 80084c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80084c2:	81a3      	strhlt	r3, [r4, #12]
 80084c4:	bd10      	pop	{r4, pc}

080084c6 <__swrite>:
 80084c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ca:	461f      	mov	r7, r3
 80084cc:	898b      	ldrh	r3, [r1, #12]
 80084ce:	05db      	lsls	r3, r3, #23
 80084d0:	4605      	mov	r5, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	4616      	mov	r6, r2
 80084d6:	d505      	bpl.n	80084e4 <__swrite+0x1e>
 80084d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084dc:	2302      	movs	r3, #2
 80084de:	2200      	movs	r2, #0
 80084e0:	f000 f87c 	bl	80085dc <_lseek_r>
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084ee:	81a3      	strh	r3, [r4, #12]
 80084f0:	4632      	mov	r2, r6
 80084f2:	463b      	mov	r3, r7
 80084f4:	4628      	mov	r0, r5
 80084f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084fa:	f000 b893 	b.w	8008624 <_write_r>

080084fe <__sseek>:
 80084fe:	b510      	push	{r4, lr}
 8008500:	460c      	mov	r4, r1
 8008502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008506:	f000 f869 	bl	80085dc <_lseek_r>
 800850a:	1c43      	adds	r3, r0, #1
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	bf15      	itete	ne
 8008510:	6560      	strne	r0, [r4, #84]	; 0x54
 8008512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800851a:	81a3      	strheq	r3, [r4, #12]
 800851c:	bf18      	it	ne
 800851e:	81a3      	strhne	r3, [r4, #12]
 8008520:	bd10      	pop	{r4, pc}

08008522 <__sclose>:
 8008522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008526:	f000 b849 	b.w	80085bc <_close_r>

0800852a <memset>:
 800852a:	4402      	add	r2, r0
 800852c:	4603      	mov	r3, r0
 800852e:	4293      	cmp	r3, r2
 8008530:	d100      	bne.n	8008534 <memset+0xa>
 8008532:	4770      	bx	lr
 8008534:	f803 1b01 	strb.w	r1, [r3], #1
 8008538:	e7f9      	b.n	800852e <memset+0x4>

0800853a <strncmp>:
 800853a:	b510      	push	{r4, lr}
 800853c:	b16a      	cbz	r2, 800855a <strncmp+0x20>
 800853e:	3901      	subs	r1, #1
 8008540:	1884      	adds	r4, r0, r2
 8008542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008546:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800854a:	429a      	cmp	r2, r3
 800854c:	d103      	bne.n	8008556 <strncmp+0x1c>
 800854e:	42a0      	cmp	r0, r4
 8008550:	d001      	beq.n	8008556 <strncmp+0x1c>
 8008552:	2a00      	cmp	r2, #0
 8008554:	d1f5      	bne.n	8008542 <strncmp+0x8>
 8008556:	1ad0      	subs	r0, r2, r3
 8008558:	bd10      	pop	{r4, pc}
 800855a:	4610      	mov	r0, r2
 800855c:	e7fc      	b.n	8008558 <strncmp+0x1e>

0800855e <__strtok_r>:
 800855e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008560:	b908      	cbnz	r0, 8008566 <__strtok_r+0x8>
 8008562:	6810      	ldr	r0, [r2, #0]
 8008564:	b188      	cbz	r0, 800858a <__strtok_r+0x2c>
 8008566:	4604      	mov	r4, r0
 8008568:	4620      	mov	r0, r4
 800856a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800856e:	460f      	mov	r7, r1
 8008570:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008574:	b91e      	cbnz	r6, 800857e <__strtok_r+0x20>
 8008576:	b965      	cbnz	r5, 8008592 <__strtok_r+0x34>
 8008578:	6015      	str	r5, [r2, #0]
 800857a:	4628      	mov	r0, r5
 800857c:	e005      	b.n	800858a <__strtok_r+0x2c>
 800857e:	42b5      	cmp	r5, r6
 8008580:	d1f6      	bne.n	8008570 <__strtok_r+0x12>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f0      	bne.n	8008568 <__strtok_r+0xa>
 8008586:	6014      	str	r4, [r2, #0]
 8008588:	7003      	strb	r3, [r0, #0]
 800858a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800858c:	461c      	mov	r4, r3
 800858e:	e00c      	b.n	80085aa <__strtok_r+0x4c>
 8008590:	b915      	cbnz	r5, 8008598 <__strtok_r+0x3a>
 8008592:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008596:	460e      	mov	r6, r1
 8008598:	f816 5b01 	ldrb.w	r5, [r6], #1
 800859c:	42ab      	cmp	r3, r5
 800859e:	d1f7      	bne.n	8008590 <__strtok_r+0x32>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0f3      	beq.n	800858c <__strtok_r+0x2e>
 80085a4:	2300      	movs	r3, #0
 80085a6:	f804 3c01 	strb.w	r3, [r4, #-1]
 80085aa:	6014      	str	r4, [r2, #0]
 80085ac:	e7ed      	b.n	800858a <__strtok_r+0x2c>

080085ae <strtok_r>:
 80085ae:	2301      	movs	r3, #1
 80085b0:	f7ff bfd5 	b.w	800855e <__strtok_r>

080085b4 <_localeconv_r>:
 80085b4:	4800      	ldr	r0, [pc, #0]	; (80085b8 <_localeconv_r+0x4>)
 80085b6:	4770      	bx	lr
 80085b8:	200001b0 	.word	0x200001b0

080085bc <_close_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4d06      	ldr	r5, [pc, #24]	; (80085d8 <_close_r+0x1c>)
 80085c0:	2300      	movs	r3, #0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7f9 ffcb 	bl	8002562 <_close>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_close_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_close_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20000600 	.word	0x20000600

080085dc <_lseek_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4d07      	ldr	r5, [pc, #28]	; (80085fc <_lseek_r+0x20>)
 80085e0:	4604      	mov	r4, r0
 80085e2:	4608      	mov	r0, r1
 80085e4:	4611      	mov	r1, r2
 80085e6:	2200      	movs	r2, #0
 80085e8:	602a      	str	r2, [r5, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f7f9 ffe0 	bl	80025b0 <_lseek>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_lseek_r+0x1e>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_lseek_r+0x1e>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	20000600 	.word	0x20000600

08008600 <_read_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4d07      	ldr	r5, [pc, #28]	; (8008620 <_read_r+0x20>)
 8008604:	4604      	mov	r4, r0
 8008606:	4608      	mov	r0, r1
 8008608:	4611      	mov	r1, r2
 800860a:	2200      	movs	r2, #0
 800860c:	602a      	str	r2, [r5, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	f7f9 ff6e 	bl	80024f0 <_read>
 8008614:	1c43      	adds	r3, r0, #1
 8008616:	d102      	bne.n	800861e <_read_r+0x1e>
 8008618:	682b      	ldr	r3, [r5, #0]
 800861a:	b103      	cbz	r3, 800861e <_read_r+0x1e>
 800861c:	6023      	str	r3, [r4, #0]
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	20000600 	.word	0x20000600

08008624 <_write_r>:
 8008624:	b538      	push	{r3, r4, r5, lr}
 8008626:	4d07      	ldr	r5, [pc, #28]	; (8008644 <_write_r+0x20>)
 8008628:	4604      	mov	r4, r0
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	2200      	movs	r2, #0
 8008630:	602a      	str	r2, [r5, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	f7f9 ff79 	bl	800252a <_write>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d102      	bne.n	8008642 <_write_r+0x1e>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	b103      	cbz	r3, 8008642 <_write_r+0x1e>
 8008640:	6023      	str	r3, [r4, #0]
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20000600 	.word	0x20000600

08008648 <__errno>:
 8008648:	4b01      	ldr	r3, [pc, #4]	; (8008650 <__errno+0x8>)
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20000278 	.word	0x20000278

08008654 <__libc_init_array>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	4d0d      	ldr	r5, [pc, #52]	; (800868c <__libc_init_array+0x38>)
 8008658:	4c0d      	ldr	r4, [pc, #52]	; (8008690 <__libc_init_array+0x3c>)
 800865a:	1b64      	subs	r4, r4, r5
 800865c:	10a4      	asrs	r4, r4, #2
 800865e:	2600      	movs	r6, #0
 8008660:	42a6      	cmp	r6, r4
 8008662:	d109      	bne.n	8008678 <__libc_init_array+0x24>
 8008664:	4d0b      	ldr	r5, [pc, #44]	; (8008694 <__libc_init_array+0x40>)
 8008666:	4c0c      	ldr	r4, [pc, #48]	; (8008698 <__libc_init_array+0x44>)
 8008668:	f003 f8a8 	bl	800b7bc <_init>
 800866c:	1b64      	subs	r4, r4, r5
 800866e:	10a4      	asrs	r4, r4, #2
 8008670:	2600      	movs	r6, #0
 8008672:	42a6      	cmp	r6, r4
 8008674:	d105      	bne.n	8008682 <__libc_init_array+0x2e>
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	f855 3b04 	ldr.w	r3, [r5], #4
 800867c:	4798      	blx	r3
 800867e:	3601      	adds	r6, #1
 8008680:	e7ee      	b.n	8008660 <__libc_init_array+0xc>
 8008682:	f855 3b04 	ldr.w	r3, [r5], #4
 8008686:	4798      	blx	r3
 8008688:	3601      	adds	r6, #1
 800868a:	e7f2      	b.n	8008672 <__libc_init_array+0x1e>
 800868c:	0800bca0 	.word	0x0800bca0
 8008690:	0800bca0 	.word	0x0800bca0
 8008694:	0800bca0 	.word	0x0800bca0
 8008698:	0800bca4 	.word	0x0800bca4

0800869c <__retarget_lock_acquire_recursive>:
 800869c:	4770      	bx	lr

0800869e <__retarget_lock_release_recursive>:
 800869e:	4770      	bx	lr

080086a0 <memcpy>:
 80086a0:	440a      	add	r2, r1
 80086a2:	4291      	cmp	r1, r2
 80086a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086a8:	d100      	bne.n	80086ac <memcpy+0xc>
 80086aa:	4770      	bx	lr
 80086ac:	b510      	push	{r4, lr}
 80086ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b6:	4291      	cmp	r1, r2
 80086b8:	d1f9      	bne.n	80086ae <memcpy+0xe>
 80086ba:	bd10      	pop	{r4, pc}
 80086bc:	0000      	movs	r0, r0
	...

080086c0 <nan>:
 80086c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086c8 <nan+0x8>
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	00000000 	.word	0x00000000
 80086cc:	7ff80000 	.word	0x7ff80000

080086d0 <nanf>:
 80086d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086d8 <nanf+0x8>
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	7fc00000 	.word	0x7fc00000

080086dc <quorem>:
 80086dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	6903      	ldr	r3, [r0, #16]
 80086e2:	690c      	ldr	r4, [r1, #16]
 80086e4:	42a3      	cmp	r3, r4
 80086e6:	4607      	mov	r7, r0
 80086e8:	db7e      	blt.n	80087e8 <quorem+0x10c>
 80086ea:	3c01      	subs	r4, #1
 80086ec:	f101 0814 	add.w	r8, r1, #20
 80086f0:	f100 0514 	add.w	r5, r0, #20
 80086f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008702:	3301      	adds	r3, #1
 8008704:	429a      	cmp	r2, r3
 8008706:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800870a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800870e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008712:	d331      	bcc.n	8008778 <quorem+0x9c>
 8008714:	f04f 0e00 	mov.w	lr, #0
 8008718:	4640      	mov	r0, r8
 800871a:	46ac      	mov	ip, r5
 800871c:	46f2      	mov	sl, lr
 800871e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008722:	b293      	uxth	r3, r2
 8008724:	fb06 e303 	mla	r3, r6, r3, lr
 8008728:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800872c:	0c1a      	lsrs	r2, r3, #16
 800872e:	b29b      	uxth	r3, r3
 8008730:	ebaa 0303 	sub.w	r3, sl, r3
 8008734:	f8dc a000 	ldr.w	sl, [ip]
 8008738:	fa13 f38a 	uxtah	r3, r3, sl
 800873c:	fb06 220e 	mla	r2, r6, lr, r2
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	9b00      	ldr	r3, [sp, #0]
 8008744:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008748:	b292      	uxth	r2, r2
 800874a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800874e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008752:	f8bd 3000 	ldrh.w	r3, [sp]
 8008756:	4581      	cmp	r9, r0
 8008758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800875c:	f84c 3b04 	str.w	r3, [ip], #4
 8008760:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008764:	d2db      	bcs.n	800871e <quorem+0x42>
 8008766:	f855 300b 	ldr.w	r3, [r5, fp]
 800876a:	b92b      	cbnz	r3, 8008778 <quorem+0x9c>
 800876c:	9b01      	ldr	r3, [sp, #4]
 800876e:	3b04      	subs	r3, #4
 8008770:	429d      	cmp	r5, r3
 8008772:	461a      	mov	r2, r3
 8008774:	d32c      	bcc.n	80087d0 <quorem+0xf4>
 8008776:	613c      	str	r4, [r7, #16]
 8008778:	4638      	mov	r0, r7
 800877a:	f001 fd5b 	bl	800a234 <__mcmp>
 800877e:	2800      	cmp	r0, #0
 8008780:	db22      	blt.n	80087c8 <quorem+0xec>
 8008782:	3601      	adds	r6, #1
 8008784:	4629      	mov	r1, r5
 8008786:	2000      	movs	r0, #0
 8008788:	f858 2b04 	ldr.w	r2, [r8], #4
 800878c:	f8d1 c000 	ldr.w	ip, [r1]
 8008790:	b293      	uxth	r3, r2
 8008792:	1ac3      	subs	r3, r0, r3
 8008794:	0c12      	lsrs	r2, r2, #16
 8008796:	fa13 f38c 	uxtah	r3, r3, ip
 800879a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800879e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087a8:	45c1      	cmp	r9, r8
 80087aa:	f841 3b04 	str.w	r3, [r1], #4
 80087ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087b2:	d2e9      	bcs.n	8008788 <quorem+0xac>
 80087b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087bc:	b922      	cbnz	r2, 80087c8 <quorem+0xec>
 80087be:	3b04      	subs	r3, #4
 80087c0:	429d      	cmp	r5, r3
 80087c2:	461a      	mov	r2, r3
 80087c4:	d30a      	bcc.n	80087dc <quorem+0x100>
 80087c6:	613c      	str	r4, [r7, #16]
 80087c8:	4630      	mov	r0, r6
 80087ca:	b003      	add	sp, #12
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	6812      	ldr	r2, [r2, #0]
 80087d2:	3b04      	subs	r3, #4
 80087d4:	2a00      	cmp	r2, #0
 80087d6:	d1ce      	bne.n	8008776 <quorem+0x9a>
 80087d8:	3c01      	subs	r4, #1
 80087da:	e7c9      	b.n	8008770 <quorem+0x94>
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	3b04      	subs	r3, #4
 80087e0:	2a00      	cmp	r2, #0
 80087e2:	d1f0      	bne.n	80087c6 <quorem+0xea>
 80087e4:	3c01      	subs	r4, #1
 80087e6:	e7eb      	b.n	80087c0 <quorem+0xe4>
 80087e8:	2000      	movs	r0, #0
 80087ea:	e7ee      	b.n	80087ca <quorem+0xee>
 80087ec:	0000      	movs	r0, r0
	...

080087f0 <_dtoa_r>:
 80087f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f4:	ed2d 8b04 	vpush	{d8-d9}
 80087f8:	69c5      	ldr	r5, [r0, #28]
 80087fa:	b093      	sub	sp, #76	; 0x4c
 80087fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008800:	ec57 6b10 	vmov	r6, r7, d0
 8008804:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008808:	9107      	str	r1, [sp, #28]
 800880a:	4604      	mov	r4, r0
 800880c:	920a      	str	r2, [sp, #40]	; 0x28
 800880e:	930d      	str	r3, [sp, #52]	; 0x34
 8008810:	b975      	cbnz	r5, 8008830 <_dtoa_r+0x40>
 8008812:	2010      	movs	r0, #16
 8008814:	f001 f982 	bl	8009b1c <malloc>
 8008818:	4602      	mov	r2, r0
 800881a:	61e0      	str	r0, [r4, #28]
 800881c:	b920      	cbnz	r0, 8008828 <_dtoa_r+0x38>
 800881e:	4bae      	ldr	r3, [pc, #696]	; (8008ad8 <_dtoa_r+0x2e8>)
 8008820:	21ef      	movs	r1, #239	; 0xef
 8008822:	48ae      	ldr	r0, [pc, #696]	; (8008adc <_dtoa_r+0x2ec>)
 8008824:	f002 f92a 	bl	800aa7c <__assert_func>
 8008828:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800882c:	6005      	str	r5, [r0, #0]
 800882e:	60c5      	str	r5, [r0, #12]
 8008830:	69e3      	ldr	r3, [r4, #28]
 8008832:	6819      	ldr	r1, [r3, #0]
 8008834:	b151      	cbz	r1, 800884c <_dtoa_r+0x5c>
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	604a      	str	r2, [r1, #4]
 800883a:	2301      	movs	r3, #1
 800883c:	4093      	lsls	r3, r2
 800883e:	608b      	str	r3, [r1, #8]
 8008840:	4620      	mov	r0, r4
 8008842:	f001 fa71 	bl	8009d28 <_Bfree>
 8008846:	69e3      	ldr	r3, [r4, #28]
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	1e3b      	subs	r3, r7, #0
 800884e:	bfbb      	ittet	lt
 8008850:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008854:	9303      	strlt	r3, [sp, #12]
 8008856:	2300      	movge	r3, #0
 8008858:	2201      	movlt	r2, #1
 800885a:	bfac      	ite	ge
 800885c:	f8c8 3000 	strge.w	r3, [r8]
 8008860:	f8c8 2000 	strlt.w	r2, [r8]
 8008864:	4b9e      	ldr	r3, [pc, #632]	; (8008ae0 <_dtoa_r+0x2f0>)
 8008866:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800886a:	ea33 0308 	bics.w	r3, r3, r8
 800886e:	d11b      	bne.n	80088a8 <_dtoa_r+0xb8>
 8008870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008872:	f242 730f 	movw	r3, #9999	; 0x270f
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800887c:	4333      	orrs	r3, r6
 800887e:	f000 8593 	beq.w	80093a8 <_dtoa_r+0xbb8>
 8008882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008884:	b963      	cbnz	r3, 80088a0 <_dtoa_r+0xb0>
 8008886:	4b97      	ldr	r3, [pc, #604]	; (8008ae4 <_dtoa_r+0x2f4>)
 8008888:	e027      	b.n	80088da <_dtoa_r+0xea>
 800888a:	4b97      	ldr	r3, [pc, #604]	; (8008ae8 <_dtoa_r+0x2f8>)
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	9800      	ldr	r0, [sp, #0]
 8008896:	b013      	add	sp, #76	; 0x4c
 8008898:	ecbd 8b04 	vpop	{d8-d9}
 800889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a0:	4b90      	ldr	r3, [pc, #576]	; (8008ae4 <_dtoa_r+0x2f4>)
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	3303      	adds	r3, #3
 80088a6:	e7f3      	b.n	8008890 <_dtoa_r+0xa0>
 80088a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088ac:	2200      	movs	r2, #0
 80088ae:	ec51 0b17 	vmov	r0, r1, d7
 80088b2:	eeb0 8a47 	vmov.f32	s16, s14
 80088b6:	eef0 8a67 	vmov.f32	s17, s15
 80088ba:	2300      	movs	r3, #0
 80088bc:	f7f8 f90c 	bl	8000ad8 <__aeabi_dcmpeq>
 80088c0:	4681      	mov	r9, r0
 80088c2:	b160      	cbz	r0, 80088de <_dtoa_r+0xee>
 80088c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088c6:	2301      	movs	r3, #1
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 8568 	beq.w	80093a2 <_dtoa_r+0xbb2>
 80088d2:	4b86      	ldr	r3, [pc, #536]	; (8008aec <_dtoa_r+0x2fc>)
 80088d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	3b01      	subs	r3, #1
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	e7da      	b.n	8008894 <_dtoa_r+0xa4>
 80088de:	aa10      	add	r2, sp, #64	; 0x40
 80088e0:	a911      	add	r1, sp, #68	; 0x44
 80088e2:	4620      	mov	r0, r4
 80088e4:	eeb0 0a48 	vmov.f32	s0, s16
 80088e8:	eef0 0a68 	vmov.f32	s1, s17
 80088ec:	f001 fdb8 	bl	800a460 <__d2b>
 80088f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80088f4:	4682      	mov	sl, r0
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	d07f      	beq.n	80089fa <_dtoa_r+0x20a>
 80088fa:	ee18 3a90 	vmov	r3, s17
 80088fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008902:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008906:	ec51 0b18 	vmov	r0, r1, d8
 800890a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800890e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008912:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008916:	4619      	mov	r1, r3
 8008918:	2200      	movs	r2, #0
 800891a:	4b75      	ldr	r3, [pc, #468]	; (8008af0 <_dtoa_r+0x300>)
 800891c:	f7f7 fcbc 	bl	8000298 <__aeabi_dsub>
 8008920:	a367      	add	r3, pc, #412	; (adr r3, 8008ac0 <_dtoa_r+0x2d0>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fe6f 	bl	8000608 <__aeabi_dmul>
 800892a:	a367      	add	r3, pc, #412	; (adr r3, 8008ac8 <_dtoa_r+0x2d8>)
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f7f7 fcb4 	bl	800029c <__adddf3>
 8008934:	4606      	mov	r6, r0
 8008936:	4628      	mov	r0, r5
 8008938:	460f      	mov	r7, r1
 800893a:	f7f7 fdfb 	bl	8000534 <__aeabi_i2d>
 800893e:	a364      	add	r3, pc, #400	; (adr r3, 8008ad0 <_dtoa_r+0x2e0>)
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f7f7 fe60 	bl	8000608 <__aeabi_dmul>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4630      	mov	r0, r6
 800894e:	4639      	mov	r1, r7
 8008950:	f7f7 fca4 	bl	800029c <__adddf3>
 8008954:	4606      	mov	r6, r0
 8008956:	460f      	mov	r7, r1
 8008958:	f7f8 f906 	bl	8000b68 <__aeabi_d2iz>
 800895c:	2200      	movs	r2, #0
 800895e:	4683      	mov	fp, r0
 8008960:	2300      	movs	r3, #0
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	f7f8 f8c1 	bl	8000aec <__aeabi_dcmplt>
 800896a:	b148      	cbz	r0, 8008980 <_dtoa_r+0x190>
 800896c:	4658      	mov	r0, fp
 800896e:	f7f7 fde1 	bl	8000534 <__aeabi_i2d>
 8008972:	4632      	mov	r2, r6
 8008974:	463b      	mov	r3, r7
 8008976:	f7f8 f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800897a:	b908      	cbnz	r0, 8008980 <_dtoa_r+0x190>
 800897c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008980:	f1bb 0f16 	cmp.w	fp, #22
 8008984:	d857      	bhi.n	8008a36 <_dtoa_r+0x246>
 8008986:	4b5b      	ldr	r3, [pc, #364]	; (8008af4 <_dtoa_r+0x304>)
 8008988:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	ec51 0b18 	vmov	r0, r1, d8
 8008994:	f7f8 f8aa 	bl	8000aec <__aeabi_dcmplt>
 8008998:	2800      	cmp	r0, #0
 800899a:	d04e      	beq.n	8008a3a <_dtoa_r+0x24a>
 800899c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80089a0:	2300      	movs	r3, #0
 80089a2:	930c      	str	r3, [sp, #48]	; 0x30
 80089a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089a6:	1b5b      	subs	r3, r3, r5
 80089a8:	1e5a      	subs	r2, r3, #1
 80089aa:	bf45      	ittet	mi
 80089ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80089b0:	9305      	strmi	r3, [sp, #20]
 80089b2:	2300      	movpl	r3, #0
 80089b4:	2300      	movmi	r3, #0
 80089b6:	9206      	str	r2, [sp, #24]
 80089b8:	bf54      	ite	pl
 80089ba:	9305      	strpl	r3, [sp, #20]
 80089bc:	9306      	strmi	r3, [sp, #24]
 80089be:	f1bb 0f00 	cmp.w	fp, #0
 80089c2:	db3c      	blt.n	8008a3e <_dtoa_r+0x24e>
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80089ca:	445b      	add	r3, fp
 80089cc:	9306      	str	r3, [sp, #24]
 80089ce:	2300      	movs	r3, #0
 80089d0:	9308      	str	r3, [sp, #32]
 80089d2:	9b07      	ldr	r3, [sp, #28]
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d868      	bhi.n	8008aaa <_dtoa_r+0x2ba>
 80089d8:	2b05      	cmp	r3, #5
 80089da:	bfc4      	itt	gt
 80089dc:	3b04      	subgt	r3, #4
 80089de:	9307      	strgt	r3, [sp, #28]
 80089e0:	9b07      	ldr	r3, [sp, #28]
 80089e2:	f1a3 0302 	sub.w	r3, r3, #2
 80089e6:	bfcc      	ite	gt
 80089e8:	2500      	movgt	r5, #0
 80089ea:	2501      	movle	r5, #1
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	f200 8085 	bhi.w	8008afc <_dtoa_r+0x30c>
 80089f2:	e8df f003 	tbb	[pc, r3]
 80089f6:	3b2e      	.short	0x3b2e
 80089f8:	5839      	.short	0x5839
 80089fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80089fe:	441d      	add	r5, r3
 8008a00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a04:	2b20      	cmp	r3, #32
 8008a06:	bfc1      	itttt	gt
 8008a08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008a10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008a14:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008a18:	bfd6      	itet	le
 8008a1a:	f1c3 0320 	rsble	r3, r3, #32
 8008a1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008a22:	fa06 f003 	lslle.w	r0, r6, r3
 8008a26:	f7f7 fd75 	bl	8000514 <__aeabi_ui2d>
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008a30:	3d01      	subs	r5, #1
 8008a32:	920e      	str	r2, [sp, #56]	; 0x38
 8008a34:	e76f      	b.n	8008916 <_dtoa_r+0x126>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e7b3      	b.n	80089a2 <_dtoa_r+0x1b2>
 8008a3a:	900c      	str	r0, [sp, #48]	; 0x30
 8008a3c:	e7b2      	b.n	80089a4 <_dtoa_r+0x1b4>
 8008a3e:	9b05      	ldr	r3, [sp, #20]
 8008a40:	eba3 030b 	sub.w	r3, r3, fp
 8008a44:	9305      	str	r3, [sp, #20]
 8008a46:	f1cb 0300 	rsb	r3, fp, #0
 8008a4a:	9308      	str	r3, [sp, #32]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a50:	e7bf      	b.n	80089d2 <_dtoa_r+0x1e2>
 8008a52:	2300      	movs	r3, #0
 8008a54:	9309      	str	r3, [sp, #36]	; 0x24
 8008a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	dc52      	bgt.n	8008b02 <_dtoa_r+0x312>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	461a      	mov	r2, r3
 8008a64:	920a      	str	r2, [sp, #40]	; 0x28
 8008a66:	e00b      	b.n	8008a80 <_dtoa_r+0x290>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e7f3      	b.n	8008a54 <_dtoa_r+0x264>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a72:	445b      	add	r3, fp
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	3301      	adds	r3, #1
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	bfb8      	it	lt
 8008a7e:	2301      	movlt	r3, #1
 8008a80:	69e0      	ldr	r0, [r4, #28]
 8008a82:	2100      	movs	r1, #0
 8008a84:	2204      	movs	r2, #4
 8008a86:	f102 0614 	add.w	r6, r2, #20
 8008a8a:	429e      	cmp	r6, r3
 8008a8c:	d93d      	bls.n	8008b0a <_dtoa_r+0x31a>
 8008a8e:	6041      	str	r1, [r0, #4]
 8008a90:	4620      	mov	r0, r4
 8008a92:	f001 f909 	bl	8009ca8 <_Balloc>
 8008a96:	9000      	str	r0, [sp, #0]
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	d139      	bne.n	8008b10 <_dtoa_r+0x320>
 8008a9c:	4b16      	ldr	r3, [pc, #88]	; (8008af8 <_dtoa_r+0x308>)
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	f240 11af 	movw	r1, #431	; 0x1af
 8008aa4:	e6bd      	b.n	8008822 <_dtoa_r+0x32>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e7e1      	b.n	8008a6e <_dtoa_r+0x27e>
 8008aaa:	2501      	movs	r5, #1
 8008aac:	2300      	movs	r3, #0
 8008aae:	9307      	str	r3, [sp, #28]
 8008ab0:	9509      	str	r5, [sp, #36]	; 0x24
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab6:	9301      	str	r3, [sp, #4]
 8008ab8:	9304      	str	r3, [sp, #16]
 8008aba:	2200      	movs	r2, #0
 8008abc:	2312      	movs	r3, #18
 8008abe:	e7d1      	b.n	8008a64 <_dtoa_r+0x274>
 8008ac0:	636f4361 	.word	0x636f4361
 8008ac4:	3fd287a7 	.word	0x3fd287a7
 8008ac8:	8b60c8b3 	.word	0x8b60c8b3
 8008acc:	3fc68a28 	.word	0x3fc68a28
 8008ad0:	509f79fb 	.word	0x509f79fb
 8008ad4:	3fd34413 	.word	0x3fd34413
 8008ad8:	0800b99f 	.word	0x0800b99f
 8008adc:	0800b9b6 	.word	0x0800b9b6
 8008ae0:	7ff00000 	.word	0x7ff00000
 8008ae4:	0800b99b 	.word	0x0800b99b
 8008ae8:	0800b992 	.word	0x0800b992
 8008aec:	0800b962 	.word	0x0800b962
 8008af0:	3ff80000 	.word	0x3ff80000
 8008af4:	0800bb00 	.word	0x0800bb00
 8008af8:	0800ba0e 	.word	0x0800ba0e
 8008afc:	2301      	movs	r3, #1
 8008afe:	9309      	str	r3, [sp, #36]	; 0x24
 8008b00:	e7d7      	b.n	8008ab2 <_dtoa_r+0x2c2>
 8008b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b04:	9301      	str	r3, [sp, #4]
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	e7ba      	b.n	8008a80 <_dtoa_r+0x290>
 8008b0a:	3101      	adds	r1, #1
 8008b0c:	0052      	lsls	r2, r2, #1
 8008b0e:	e7ba      	b.n	8008a86 <_dtoa_r+0x296>
 8008b10:	69e3      	ldr	r3, [r4, #28]
 8008b12:	9a00      	ldr	r2, [sp, #0]
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	2b0e      	cmp	r3, #14
 8008b1a:	f200 80a8 	bhi.w	8008c6e <_dtoa_r+0x47e>
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	f000 80a5 	beq.w	8008c6e <_dtoa_r+0x47e>
 8008b24:	f1bb 0f00 	cmp.w	fp, #0
 8008b28:	dd38      	ble.n	8008b9c <_dtoa_r+0x3ac>
 8008b2a:	4bc0      	ldr	r3, [pc, #768]	; (8008e2c <_dtoa_r+0x63c>)
 8008b2c:	f00b 020f 	and.w	r2, fp, #15
 8008b30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008b38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008b3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008b40:	d019      	beq.n	8008b76 <_dtoa_r+0x386>
 8008b42:	4bbb      	ldr	r3, [pc, #748]	; (8008e30 <_dtoa_r+0x640>)
 8008b44:	ec51 0b18 	vmov	r0, r1, d8
 8008b48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b4c:	f7f7 fe86 	bl	800085c <__aeabi_ddiv>
 8008b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b54:	f008 080f 	and.w	r8, r8, #15
 8008b58:	2503      	movs	r5, #3
 8008b5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008e30 <_dtoa_r+0x640>
 8008b5e:	f1b8 0f00 	cmp.w	r8, #0
 8008b62:	d10a      	bne.n	8008b7a <_dtoa_r+0x38a>
 8008b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b68:	4632      	mov	r2, r6
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	f7f7 fe76 	bl	800085c <__aeabi_ddiv>
 8008b70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b74:	e02b      	b.n	8008bce <_dtoa_r+0x3de>
 8008b76:	2502      	movs	r5, #2
 8008b78:	e7ef      	b.n	8008b5a <_dtoa_r+0x36a>
 8008b7a:	f018 0f01 	tst.w	r8, #1
 8008b7e:	d008      	beq.n	8008b92 <_dtoa_r+0x3a2>
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b88:	f7f7 fd3e 	bl	8000608 <__aeabi_dmul>
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460f      	mov	r7, r1
 8008b92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b96:	f109 0908 	add.w	r9, r9, #8
 8008b9a:	e7e0      	b.n	8008b5e <_dtoa_r+0x36e>
 8008b9c:	f000 809f 	beq.w	8008cde <_dtoa_r+0x4ee>
 8008ba0:	f1cb 0600 	rsb	r6, fp, #0
 8008ba4:	4ba1      	ldr	r3, [pc, #644]	; (8008e2c <_dtoa_r+0x63c>)
 8008ba6:	4fa2      	ldr	r7, [pc, #648]	; (8008e30 <_dtoa_r+0x640>)
 8008ba8:	f006 020f 	and.w	r2, r6, #15
 8008bac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	ec51 0b18 	vmov	r0, r1, d8
 8008bb8:	f7f7 fd26 	bl	8000608 <__aeabi_dmul>
 8008bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc0:	1136      	asrs	r6, r6, #4
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	2502      	movs	r5, #2
 8008bc6:	2e00      	cmp	r6, #0
 8008bc8:	d17e      	bne.n	8008cc8 <_dtoa_r+0x4d8>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1d0      	bne.n	8008b70 <_dtoa_r+0x380>
 8008bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 8084 	beq.w	8008ce2 <_dtoa_r+0x4f2>
 8008bda:	4b96      	ldr	r3, [pc, #600]	; (8008e34 <_dtoa_r+0x644>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4640      	mov	r0, r8
 8008be0:	4649      	mov	r1, r9
 8008be2:	f7f7 ff83 	bl	8000aec <__aeabi_dcmplt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d07b      	beq.n	8008ce2 <_dtoa_r+0x4f2>
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d078      	beq.n	8008ce2 <_dtoa_r+0x4f2>
 8008bf0:	9b01      	ldr	r3, [sp, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dd39      	ble.n	8008c6a <_dtoa_r+0x47a>
 8008bf6:	4b90      	ldr	r3, [pc, #576]	; (8008e38 <_dtoa_r+0x648>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	f7f7 fd03 	bl	8000608 <__aeabi_dmul>
 8008c02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c06:	9e01      	ldr	r6, [sp, #4]
 8008c08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008c0c:	3501      	adds	r5, #1
 8008c0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008c12:	4628      	mov	r0, r5
 8008c14:	f7f7 fc8e 	bl	8000534 <__aeabi_i2d>
 8008c18:	4642      	mov	r2, r8
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	f7f7 fcf4 	bl	8000608 <__aeabi_dmul>
 8008c20:	4b86      	ldr	r3, [pc, #536]	; (8008e3c <_dtoa_r+0x64c>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	f7f7 fb3a 	bl	800029c <__adddf3>
 8008c28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c30:	9303      	str	r3, [sp, #12]
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	d158      	bne.n	8008ce8 <_dtoa_r+0x4f8>
 8008c36:	4b82      	ldr	r3, [pc, #520]	; (8008e40 <_dtoa_r+0x650>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	f7f7 fb2b 	bl	8000298 <__aeabi_dsub>
 8008c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c46:	4680      	mov	r8, r0
 8008c48:	4689      	mov	r9, r1
 8008c4a:	f7f7 ff6d 	bl	8000b28 <__aeabi_dcmpgt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f040 8296 	bne.w	8009180 <_dtoa_r+0x990>
 8008c54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008c58:	4640      	mov	r0, r8
 8008c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c5e:	4649      	mov	r1, r9
 8008c60:	f7f7 ff44 	bl	8000aec <__aeabi_dcmplt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	f040 8289 	bne.w	800917c <_dtoa_r+0x98c>
 8008c6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008c6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f2c0 814e 	blt.w	8008f12 <_dtoa_r+0x722>
 8008c76:	f1bb 0f0e 	cmp.w	fp, #14
 8008c7a:	f300 814a 	bgt.w	8008f12 <_dtoa_r+0x722>
 8008c7e:	4b6b      	ldr	r3, [pc, #428]	; (8008e2c <_dtoa_r+0x63c>)
 8008c80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f280 80dc 	bge.w	8008e48 <_dtoa_r+0x658>
 8008c90:	9b04      	ldr	r3, [sp, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f300 80d8 	bgt.w	8008e48 <_dtoa_r+0x658>
 8008c98:	f040 826f 	bne.w	800917a <_dtoa_r+0x98a>
 8008c9c:	4b68      	ldr	r3, [pc, #416]	; (8008e40 <_dtoa_r+0x650>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	f7f7 fcb0 	bl	8000608 <__aeabi_dmul>
 8008ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cac:	f7f7 ff32 	bl	8000b14 <__aeabi_dcmpge>
 8008cb0:	9e04      	ldr	r6, [sp, #16]
 8008cb2:	4637      	mov	r7, r6
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	f040 8245 	bne.w	8009144 <_dtoa_r+0x954>
 8008cba:	9d00      	ldr	r5, [sp, #0]
 8008cbc:	2331      	movs	r3, #49	; 0x31
 8008cbe:	f805 3b01 	strb.w	r3, [r5], #1
 8008cc2:	f10b 0b01 	add.w	fp, fp, #1
 8008cc6:	e241      	b.n	800914c <_dtoa_r+0x95c>
 8008cc8:	07f2      	lsls	r2, r6, #31
 8008cca:	d505      	bpl.n	8008cd8 <_dtoa_r+0x4e8>
 8008ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd0:	f7f7 fc9a 	bl	8000608 <__aeabi_dmul>
 8008cd4:	3501      	adds	r5, #1
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	1076      	asrs	r6, r6, #1
 8008cda:	3708      	adds	r7, #8
 8008cdc:	e773      	b.n	8008bc6 <_dtoa_r+0x3d6>
 8008cde:	2502      	movs	r5, #2
 8008ce0:	e775      	b.n	8008bce <_dtoa_r+0x3de>
 8008ce2:	9e04      	ldr	r6, [sp, #16]
 8008ce4:	465f      	mov	r7, fp
 8008ce6:	e792      	b.n	8008c0e <_dtoa_r+0x41e>
 8008ce8:	9900      	ldr	r1, [sp, #0]
 8008cea:	4b50      	ldr	r3, [pc, #320]	; (8008e2c <_dtoa_r+0x63c>)
 8008cec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cf0:	4431      	add	r1, r6
 8008cf2:	9102      	str	r1, [sp, #8]
 8008cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cf6:	eeb0 9a47 	vmov.f32	s18, s14
 8008cfa:	eef0 9a67 	vmov.f32	s19, s15
 8008cfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d06:	2900      	cmp	r1, #0
 8008d08:	d044      	beq.n	8008d94 <_dtoa_r+0x5a4>
 8008d0a:	494e      	ldr	r1, [pc, #312]	; (8008e44 <_dtoa_r+0x654>)
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	f7f7 fda5 	bl	800085c <__aeabi_ddiv>
 8008d12:	ec53 2b19 	vmov	r2, r3, d9
 8008d16:	f7f7 fabf 	bl	8000298 <__aeabi_dsub>
 8008d1a:	9d00      	ldr	r5, [sp, #0]
 8008d1c:	ec41 0b19 	vmov	d9, r0, r1
 8008d20:	4649      	mov	r1, r9
 8008d22:	4640      	mov	r0, r8
 8008d24:	f7f7 ff20 	bl	8000b68 <__aeabi_d2iz>
 8008d28:	4606      	mov	r6, r0
 8008d2a:	f7f7 fc03 	bl	8000534 <__aeabi_i2d>
 8008d2e:	4602      	mov	r2, r0
 8008d30:	460b      	mov	r3, r1
 8008d32:	4640      	mov	r0, r8
 8008d34:	4649      	mov	r1, r9
 8008d36:	f7f7 faaf 	bl	8000298 <__aeabi_dsub>
 8008d3a:	3630      	adds	r6, #48	; 0x30
 8008d3c:	f805 6b01 	strb.w	r6, [r5], #1
 8008d40:	ec53 2b19 	vmov	r2, r3, d9
 8008d44:	4680      	mov	r8, r0
 8008d46:	4689      	mov	r9, r1
 8008d48:	f7f7 fed0 	bl	8000aec <__aeabi_dcmplt>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d164      	bne.n	8008e1a <_dtoa_r+0x62a>
 8008d50:	4642      	mov	r2, r8
 8008d52:	464b      	mov	r3, r9
 8008d54:	4937      	ldr	r1, [pc, #220]	; (8008e34 <_dtoa_r+0x644>)
 8008d56:	2000      	movs	r0, #0
 8008d58:	f7f7 fa9e 	bl	8000298 <__aeabi_dsub>
 8008d5c:	ec53 2b19 	vmov	r2, r3, d9
 8008d60:	f7f7 fec4 	bl	8000aec <__aeabi_dcmplt>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	f040 80b6 	bne.w	8008ed6 <_dtoa_r+0x6e6>
 8008d6a:	9b02      	ldr	r3, [sp, #8]
 8008d6c:	429d      	cmp	r5, r3
 8008d6e:	f43f af7c 	beq.w	8008c6a <_dtoa_r+0x47a>
 8008d72:	4b31      	ldr	r3, [pc, #196]	; (8008e38 <_dtoa_r+0x648>)
 8008d74:	ec51 0b19 	vmov	r0, r1, d9
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f7f7 fc45 	bl	8000608 <__aeabi_dmul>
 8008d7e:	4b2e      	ldr	r3, [pc, #184]	; (8008e38 <_dtoa_r+0x648>)
 8008d80:	ec41 0b19 	vmov	d9, r0, r1
 8008d84:	2200      	movs	r2, #0
 8008d86:	4640      	mov	r0, r8
 8008d88:	4649      	mov	r1, r9
 8008d8a:	f7f7 fc3d 	bl	8000608 <__aeabi_dmul>
 8008d8e:	4680      	mov	r8, r0
 8008d90:	4689      	mov	r9, r1
 8008d92:	e7c5      	b.n	8008d20 <_dtoa_r+0x530>
 8008d94:	ec51 0b17 	vmov	r0, r1, d7
 8008d98:	f7f7 fc36 	bl	8000608 <__aeabi_dmul>
 8008d9c:	9b02      	ldr	r3, [sp, #8]
 8008d9e:	9d00      	ldr	r5, [sp, #0]
 8008da0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008da2:	ec41 0b19 	vmov	d9, r0, r1
 8008da6:	4649      	mov	r1, r9
 8008da8:	4640      	mov	r0, r8
 8008daa:	f7f7 fedd 	bl	8000b68 <__aeabi_d2iz>
 8008dae:	4606      	mov	r6, r0
 8008db0:	f7f7 fbc0 	bl	8000534 <__aeabi_i2d>
 8008db4:	3630      	adds	r6, #48	; 0x30
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4640      	mov	r0, r8
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	f7f7 fa6b 	bl	8000298 <__aeabi_dsub>
 8008dc2:	f805 6b01 	strb.w	r6, [r5], #1
 8008dc6:	9b02      	ldr	r3, [sp, #8]
 8008dc8:	429d      	cmp	r5, r3
 8008dca:	4680      	mov	r8, r0
 8008dcc:	4689      	mov	r9, r1
 8008dce:	f04f 0200 	mov.w	r2, #0
 8008dd2:	d124      	bne.n	8008e1e <_dtoa_r+0x62e>
 8008dd4:	4b1b      	ldr	r3, [pc, #108]	; (8008e44 <_dtoa_r+0x654>)
 8008dd6:	ec51 0b19 	vmov	r0, r1, d9
 8008dda:	f7f7 fa5f 	bl	800029c <__adddf3>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4640      	mov	r0, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	f7f7 fe9f 	bl	8000b28 <__aeabi_dcmpgt>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d173      	bne.n	8008ed6 <_dtoa_r+0x6e6>
 8008dee:	ec53 2b19 	vmov	r2, r3, d9
 8008df2:	4914      	ldr	r1, [pc, #80]	; (8008e44 <_dtoa_r+0x654>)
 8008df4:	2000      	movs	r0, #0
 8008df6:	f7f7 fa4f 	bl	8000298 <__aeabi_dsub>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4649      	mov	r1, r9
 8008e02:	f7f7 fe73 	bl	8000aec <__aeabi_dcmplt>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	f43f af2f 	beq.w	8008c6a <_dtoa_r+0x47a>
 8008e0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e0e:	1e6b      	subs	r3, r5, #1
 8008e10:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e16:	2b30      	cmp	r3, #48	; 0x30
 8008e18:	d0f8      	beq.n	8008e0c <_dtoa_r+0x61c>
 8008e1a:	46bb      	mov	fp, r7
 8008e1c:	e04a      	b.n	8008eb4 <_dtoa_r+0x6c4>
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <_dtoa_r+0x648>)
 8008e20:	f7f7 fbf2 	bl	8000608 <__aeabi_dmul>
 8008e24:	4680      	mov	r8, r0
 8008e26:	4689      	mov	r9, r1
 8008e28:	e7bd      	b.n	8008da6 <_dtoa_r+0x5b6>
 8008e2a:	bf00      	nop
 8008e2c:	0800bb00 	.word	0x0800bb00
 8008e30:	0800bad8 	.word	0x0800bad8
 8008e34:	3ff00000 	.word	0x3ff00000
 8008e38:	40240000 	.word	0x40240000
 8008e3c:	401c0000 	.word	0x401c0000
 8008e40:	40140000 	.word	0x40140000
 8008e44:	3fe00000 	.word	0x3fe00000
 8008e48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e4c:	9d00      	ldr	r5, [sp, #0]
 8008e4e:	4642      	mov	r2, r8
 8008e50:	464b      	mov	r3, r9
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 fd01 	bl	800085c <__aeabi_ddiv>
 8008e5a:	f7f7 fe85 	bl	8000b68 <__aeabi_d2iz>
 8008e5e:	9001      	str	r0, [sp, #4]
 8008e60:	f7f7 fb68 	bl	8000534 <__aeabi_i2d>
 8008e64:	4642      	mov	r2, r8
 8008e66:	464b      	mov	r3, r9
 8008e68:	f7f7 fbce 	bl	8000608 <__aeabi_dmul>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f7 fa10 	bl	8000298 <__aeabi_dsub>
 8008e78:	9e01      	ldr	r6, [sp, #4]
 8008e7a:	9f04      	ldr	r7, [sp, #16]
 8008e7c:	3630      	adds	r6, #48	; 0x30
 8008e7e:	f805 6b01 	strb.w	r6, [r5], #1
 8008e82:	9e00      	ldr	r6, [sp, #0]
 8008e84:	1bae      	subs	r6, r5, r6
 8008e86:	42b7      	cmp	r7, r6
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	d134      	bne.n	8008ef8 <_dtoa_r+0x708>
 8008e8e:	f7f7 fa05 	bl	800029c <__adddf3>
 8008e92:	4642      	mov	r2, r8
 8008e94:	464b      	mov	r3, r9
 8008e96:	4606      	mov	r6, r0
 8008e98:	460f      	mov	r7, r1
 8008e9a:	f7f7 fe45 	bl	8000b28 <__aeabi_dcmpgt>
 8008e9e:	b9c8      	cbnz	r0, 8008ed4 <_dtoa_r+0x6e4>
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	f7f7 fe16 	bl	8000ad8 <__aeabi_dcmpeq>
 8008eac:	b110      	cbz	r0, 8008eb4 <_dtoa_r+0x6c4>
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	07db      	lsls	r3, r3, #31
 8008eb2:	d40f      	bmi.n	8008ed4 <_dtoa_r+0x6e4>
 8008eb4:	4651      	mov	r1, sl
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 ff36 	bl	8009d28 <_Bfree>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ec0:	702b      	strb	r3, [r5, #0]
 8008ec2:	f10b 0301 	add.w	r3, fp, #1
 8008ec6:	6013      	str	r3, [r2, #0]
 8008ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f43f ace2 	beq.w	8008894 <_dtoa_r+0xa4>
 8008ed0:	601d      	str	r5, [r3, #0]
 8008ed2:	e4df      	b.n	8008894 <_dtoa_r+0xa4>
 8008ed4:	465f      	mov	r7, fp
 8008ed6:	462b      	mov	r3, r5
 8008ed8:	461d      	mov	r5, r3
 8008eda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ede:	2a39      	cmp	r2, #57	; 0x39
 8008ee0:	d106      	bne.n	8008ef0 <_dtoa_r+0x700>
 8008ee2:	9a00      	ldr	r2, [sp, #0]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d1f7      	bne.n	8008ed8 <_dtoa_r+0x6e8>
 8008ee8:	9900      	ldr	r1, [sp, #0]
 8008eea:	2230      	movs	r2, #48	; 0x30
 8008eec:	3701      	adds	r7, #1
 8008eee:	700a      	strb	r2, [r1, #0]
 8008ef0:	781a      	ldrb	r2, [r3, #0]
 8008ef2:	3201      	adds	r2, #1
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	e790      	b.n	8008e1a <_dtoa_r+0x62a>
 8008ef8:	4ba3      	ldr	r3, [pc, #652]	; (8009188 <_dtoa_r+0x998>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	f7f7 fb84 	bl	8000608 <__aeabi_dmul>
 8008f00:	2200      	movs	r2, #0
 8008f02:	2300      	movs	r3, #0
 8008f04:	4606      	mov	r6, r0
 8008f06:	460f      	mov	r7, r1
 8008f08:	f7f7 fde6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d09e      	beq.n	8008e4e <_dtoa_r+0x65e>
 8008f10:	e7d0      	b.n	8008eb4 <_dtoa_r+0x6c4>
 8008f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f14:	2a00      	cmp	r2, #0
 8008f16:	f000 80ca 	beq.w	80090ae <_dtoa_r+0x8be>
 8008f1a:	9a07      	ldr	r2, [sp, #28]
 8008f1c:	2a01      	cmp	r2, #1
 8008f1e:	f300 80ad 	bgt.w	800907c <_dtoa_r+0x88c>
 8008f22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	f000 80a5 	beq.w	8009074 <_dtoa_r+0x884>
 8008f2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f2e:	9e08      	ldr	r6, [sp, #32]
 8008f30:	9d05      	ldr	r5, [sp, #20]
 8008f32:	9a05      	ldr	r2, [sp, #20]
 8008f34:	441a      	add	r2, r3
 8008f36:	9205      	str	r2, [sp, #20]
 8008f38:	9a06      	ldr	r2, [sp, #24]
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	441a      	add	r2, r3
 8008f3e:	4620      	mov	r0, r4
 8008f40:	9206      	str	r2, [sp, #24]
 8008f42:	f000 fff1 	bl	8009f28 <__i2b>
 8008f46:	4607      	mov	r7, r0
 8008f48:	b165      	cbz	r5, 8008f64 <_dtoa_r+0x774>
 8008f4a:	9b06      	ldr	r3, [sp, #24]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd09      	ble.n	8008f64 <_dtoa_r+0x774>
 8008f50:	42ab      	cmp	r3, r5
 8008f52:	9a05      	ldr	r2, [sp, #20]
 8008f54:	bfa8      	it	ge
 8008f56:	462b      	movge	r3, r5
 8008f58:	1ad2      	subs	r2, r2, r3
 8008f5a:	9205      	str	r2, [sp, #20]
 8008f5c:	9a06      	ldr	r2, [sp, #24]
 8008f5e:	1aed      	subs	r5, r5, r3
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	9306      	str	r3, [sp, #24]
 8008f64:	9b08      	ldr	r3, [sp, #32]
 8008f66:	b1f3      	cbz	r3, 8008fa6 <_dtoa_r+0x7b6>
 8008f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80a3 	beq.w	80090b6 <_dtoa_r+0x8c6>
 8008f70:	2e00      	cmp	r6, #0
 8008f72:	dd10      	ble.n	8008f96 <_dtoa_r+0x7a6>
 8008f74:	4639      	mov	r1, r7
 8008f76:	4632      	mov	r2, r6
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f001 f895 	bl	800a0a8 <__pow5mult>
 8008f7e:	4652      	mov	r2, sl
 8008f80:	4601      	mov	r1, r0
 8008f82:	4607      	mov	r7, r0
 8008f84:	4620      	mov	r0, r4
 8008f86:	f000 ffe5 	bl	8009f54 <__multiply>
 8008f8a:	4651      	mov	r1, sl
 8008f8c:	4680      	mov	r8, r0
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 feca 	bl	8009d28 <_Bfree>
 8008f94:	46c2      	mov	sl, r8
 8008f96:	9b08      	ldr	r3, [sp, #32]
 8008f98:	1b9a      	subs	r2, r3, r6
 8008f9a:	d004      	beq.n	8008fa6 <_dtoa_r+0x7b6>
 8008f9c:	4651      	mov	r1, sl
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f001 f882 	bl	800a0a8 <__pow5mult>
 8008fa4:	4682      	mov	sl, r0
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 ffbd 	bl	8009f28 <__i2b>
 8008fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	f340 8081 	ble.w	80090ba <_dtoa_r+0x8ca>
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4601      	mov	r1, r0
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f001 f873 	bl	800a0a8 <__pow5mult>
 8008fc2:	9b07      	ldr	r3, [sp, #28]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	dd7a      	ble.n	80090c0 <_dtoa_r+0x8d0>
 8008fca:	f04f 0800 	mov.w	r8, #0
 8008fce:	6933      	ldr	r3, [r6, #16]
 8008fd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008fd4:	6918      	ldr	r0, [r3, #16]
 8008fd6:	f000 ff59 	bl	8009e8c <__hi0bits>
 8008fda:	f1c0 0020 	rsb	r0, r0, #32
 8008fde:	9b06      	ldr	r3, [sp, #24]
 8008fe0:	4418      	add	r0, r3
 8008fe2:	f010 001f 	ands.w	r0, r0, #31
 8008fe6:	f000 8094 	beq.w	8009112 <_dtoa_r+0x922>
 8008fea:	f1c0 0320 	rsb	r3, r0, #32
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	f340 8085 	ble.w	80090fe <_dtoa_r+0x90e>
 8008ff4:	9b05      	ldr	r3, [sp, #20]
 8008ff6:	f1c0 001c 	rsb	r0, r0, #28
 8008ffa:	4403      	add	r3, r0
 8008ffc:	9305      	str	r3, [sp, #20]
 8008ffe:	9b06      	ldr	r3, [sp, #24]
 8009000:	4403      	add	r3, r0
 8009002:	4405      	add	r5, r0
 8009004:	9306      	str	r3, [sp, #24]
 8009006:	9b05      	ldr	r3, [sp, #20]
 8009008:	2b00      	cmp	r3, #0
 800900a:	dd05      	ble.n	8009018 <_dtoa_r+0x828>
 800900c:	4651      	mov	r1, sl
 800900e:	461a      	mov	r2, r3
 8009010:	4620      	mov	r0, r4
 8009012:	f001 f8a3 	bl	800a15c <__lshift>
 8009016:	4682      	mov	sl, r0
 8009018:	9b06      	ldr	r3, [sp, #24]
 800901a:	2b00      	cmp	r3, #0
 800901c:	dd05      	ble.n	800902a <_dtoa_r+0x83a>
 800901e:	4631      	mov	r1, r6
 8009020:	461a      	mov	r2, r3
 8009022:	4620      	mov	r0, r4
 8009024:	f001 f89a 	bl	800a15c <__lshift>
 8009028:	4606      	mov	r6, r0
 800902a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800902c:	2b00      	cmp	r3, #0
 800902e:	d072      	beq.n	8009116 <_dtoa_r+0x926>
 8009030:	4631      	mov	r1, r6
 8009032:	4650      	mov	r0, sl
 8009034:	f001 f8fe 	bl	800a234 <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	da6c      	bge.n	8009116 <_dtoa_r+0x926>
 800903c:	2300      	movs	r3, #0
 800903e:	4651      	mov	r1, sl
 8009040:	220a      	movs	r2, #10
 8009042:	4620      	mov	r0, r4
 8009044:	f000 fe92 	bl	8009d6c <__multadd>
 8009048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800904e:	4682      	mov	sl, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 81b0 	beq.w	80093b6 <_dtoa_r+0xbc6>
 8009056:	2300      	movs	r3, #0
 8009058:	4639      	mov	r1, r7
 800905a:	220a      	movs	r2, #10
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fe85 	bl	8009d6c <__multadd>
 8009062:	9b01      	ldr	r3, [sp, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	4607      	mov	r7, r0
 8009068:	f300 8096 	bgt.w	8009198 <_dtoa_r+0x9a8>
 800906c:	9b07      	ldr	r3, [sp, #28]
 800906e:	2b02      	cmp	r3, #2
 8009070:	dc59      	bgt.n	8009126 <_dtoa_r+0x936>
 8009072:	e091      	b.n	8009198 <_dtoa_r+0x9a8>
 8009074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800907a:	e758      	b.n	8008f2e <_dtoa_r+0x73e>
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	1e5e      	subs	r6, r3, #1
 8009080:	9b08      	ldr	r3, [sp, #32]
 8009082:	42b3      	cmp	r3, r6
 8009084:	bfbf      	itttt	lt
 8009086:	9b08      	ldrlt	r3, [sp, #32]
 8009088:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800908a:	9608      	strlt	r6, [sp, #32]
 800908c:	1af3      	sublt	r3, r6, r3
 800908e:	bfb4      	ite	lt
 8009090:	18d2      	addlt	r2, r2, r3
 8009092:	1b9e      	subge	r6, r3, r6
 8009094:	9b04      	ldr	r3, [sp, #16]
 8009096:	bfbc      	itt	lt
 8009098:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800909a:	2600      	movlt	r6, #0
 800909c:	2b00      	cmp	r3, #0
 800909e:	bfb7      	itett	lt
 80090a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80090a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80090a8:	1a9d      	sublt	r5, r3, r2
 80090aa:	2300      	movlt	r3, #0
 80090ac:	e741      	b.n	8008f32 <_dtoa_r+0x742>
 80090ae:	9e08      	ldr	r6, [sp, #32]
 80090b0:	9d05      	ldr	r5, [sp, #20]
 80090b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80090b4:	e748      	b.n	8008f48 <_dtoa_r+0x758>
 80090b6:	9a08      	ldr	r2, [sp, #32]
 80090b8:	e770      	b.n	8008f9c <_dtoa_r+0x7ac>
 80090ba:	9b07      	ldr	r3, [sp, #28]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	dc19      	bgt.n	80090f4 <_dtoa_r+0x904>
 80090c0:	9b02      	ldr	r3, [sp, #8]
 80090c2:	b9bb      	cbnz	r3, 80090f4 <_dtoa_r+0x904>
 80090c4:	9b03      	ldr	r3, [sp, #12]
 80090c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090ca:	b99b      	cbnz	r3, 80090f4 <_dtoa_r+0x904>
 80090cc:	9b03      	ldr	r3, [sp, #12]
 80090ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090d2:	0d1b      	lsrs	r3, r3, #20
 80090d4:	051b      	lsls	r3, r3, #20
 80090d6:	b183      	cbz	r3, 80090fa <_dtoa_r+0x90a>
 80090d8:	9b05      	ldr	r3, [sp, #20]
 80090da:	3301      	adds	r3, #1
 80090dc:	9305      	str	r3, [sp, #20]
 80090de:	9b06      	ldr	r3, [sp, #24]
 80090e0:	3301      	adds	r3, #1
 80090e2:	9306      	str	r3, [sp, #24]
 80090e4:	f04f 0801 	mov.w	r8, #1
 80090e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f47f af6f 	bne.w	8008fce <_dtoa_r+0x7de>
 80090f0:	2001      	movs	r0, #1
 80090f2:	e774      	b.n	8008fde <_dtoa_r+0x7ee>
 80090f4:	f04f 0800 	mov.w	r8, #0
 80090f8:	e7f6      	b.n	80090e8 <_dtoa_r+0x8f8>
 80090fa:	4698      	mov	r8, r3
 80090fc:	e7f4      	b.n	80090e8 <_dtoa_r+0x8f8>
 80090fe:	d082      	beq.n	8009006 <_dtoa_r+0x816>
 8009100:	9a05      	ldr	r2, [sp, #20]
 8009102:	331c      	adds	r3, #28
 8009104:	441a      	add	r2, r3
 8009106:	9205      	str	r2, [sp, #20]
 8009108:	9a06      	ldr	r2, [sp, #24]
 800910a:	441a      	add	r2, r3
 800910c:	441d      	add	r5, r3
 800910e:	9206      	str	r2, [sp, #24]
 8009110:	e779      	b.n	8009006 <_dtoa_r+0x816>
 8009112:	4603      	mov	r3, r0
 8009114:	e7f4      	b.n	8009100 <_dtoa_r+0x910>
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	dc37      	bgt.n	800918c <_dtoa_r+0x99c>
 800911c:	9b07      	ldr	r3, [sp, #28]
 800911e:	2b02      	cmp	r3, #2
 8009120:	dd34      	ble.n	800918c <_dtoa_r+0x99c>
 8009122:	9b04      	ldr	r3, [sp, #16]
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	b963      	cbnz	r3, 8009144 <_dtoa_r+0x954>
 800912a:	4631      	mov	r1, r6
 800912c:	2205      	movs	r2, #5
 800912e:	4620      	mov	r0, r4
 8009130:	f000 fe1c 	bl	8009d6c <__multadd>
 8009134:	4601      	mov	r1, r0
 8009136:	4606      	mov	r6, r0
 8009138:	4650      	mov	r0, sl
 800913a:	f001 f87b 	bl	800a234 <__mcmp>
 800913e:	2800      	cmp	r0, #0
 8009140:	f73f adbb 	bgt.w	8008cba <_dtoa_r+0x4ca>
 8009144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009146:	9d00      	ldr	r5, [sp, #0]
 8009148:	ea6f 0b03 	mvn.w	fp, r3
 800914c:	f04f 0800 	mov.w	r8, #0
 8009150:	4631      	mov	r1, r6
 8009152:	4620      	mov	r0, r4
 8009154:	f000 fde8 	bl	8009d28 <_Bfree>
 8009158:	2f00      	cmp	r7, #0
 800915a:	f43f aeab 	beq.w	8008eb4 <_dtoa_r+0x6c4>
 800915e:	f1b8 0f00 	cmp.w	r8, #0
 8009162:	d005      	beq.n	8009170 <_dtoa_r+0x980>
 8009164:	45b8      	cmp	r8, r7
 8009166:	d003      	beq.n	8009170 <_dtoa_r+0x980>
 8009168:	4641      	mov	r1, r8
 800916a:	4620      	mov	r0, r4
 800916c:	f000 fddc 	bl	8009d28 <_Bfree>
 8009170:	4639      	mov	r1, r7
 8009172:	4620      	mov	r0, r4
 8009174:	f000 fdd8 	bl	8009d28 <_Bfree>
 8009178:	e69c      	b.n	8008eb4 <_dtoa_r+0x6c4>
 800917a:	2600      	movs	r6, #0
 800917c:	4637      	mov	r7, r6
 800917e:	e7e1      	b.n	8009144 <_dtoa_r+0x954>
 8009180:	46bb      	mov	fp, r7
 8009182:	4637      	mov	r7, r6
 8009184:	e599      	b.n	8008cba <_dtoa_r+0x4ca>
 8009186:	bf00      	nop
 8009188:	40240000 	.word	0x40240000
 800918c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 80c8 	beq.w	8009324 <_dtoa_r+0xb34>
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	9301      	str	r3, [sp, #4]
 8009198:	2d00      	cmp	r5, #0
 800919a:	dd05      	ble.n	80091a8 <_dtoa_r+0x9b8>
 800919c:	4639      	mov	r1, r7
 800919e:	462a      	mov	r2, r5
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 ffdb 	bl	800a15c <__lshift>
 80091a6:	4607      	mov	r7, r0
 80091a8:	f1b8 0f00 	cmp.w	r8, #0
 80091ac:	d05b      	beq.n	8009266 <_dtoa_r+0xa76>
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	4620      	mov	r0, r4
 80091b2:	f000 fd79 	bl	8009ca8 <_Balloc>
 80091b6:	4605      	mov	r5, r0
 80091b8:	b928      	cbnz	r0, 80091c6 <_dtoa_r+0x9d6>
 80091ba:	4b83      	ldr	r3, [pc, #524]	; (80093c8 <_dtoa_r+0xbd8>)
 80091bc:	4602      	mov	r2, r0
 80091be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80091c2:	f7ff bb2e 	b.w	8008822 <_dtoa_r+0x32>
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	3202      	adds	r2, #2
 80091ca:	0092      	lsls	r2, r2, #2
 80091cc:	f107 010c 	add.w	r1, r7, #12
 80091d0:	300c      	adds	r0, #12
 80091d2:	f7ff fa65 	bl	80086a0 <memcpy>
 80091d6:	2201      	movs	r2, #1
 80091d8:	4629      	mov	r1, r5
 80091da:	4620      	mov	r0, r4
 80091dc:	f000 ffbe 	bl	800a15c <__lshift>
 80091e0:	9b00      	ldr	r3, [sp, #0]
 80091e2:	3301      	adds	r3, #1
 80091e4:	9304      	str	r3, [sp, #16]
 80091e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091ea:	4413      	add	r3, r2
 80091ec:	9308      	str	r3, [sp, #32]
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	f003 0301 	and.w	r3, r3, #1
 80091f4:	46b8      	mov	r8, r7
 80091f6:	9306      	str	r3, [sp, #24]
 80091f8:	4607      	mov	r7, r0
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	4631      	mov	r1, r6
 80091fe:	3b01      	subs	r3, #1
 8009200:	4650      	mov	r0, sl
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	f7ff fa6a 	bl	80086dc <quorem>
 8009208:	4641      	mov	r1, r8
 800920a:	9002      	str	r0, [sp, #8]
 800920c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009210:	4650      	mov	r0, sl
 8009212:	f001 f80f 	bl	800a234 <__mcmp>
 8009216:	463a      	mov	r2, r7
 8009218:	9005      	str	r0, [sp, #20]
 800921a:	4631      	mov	r1, r6
 800921c:	4620      	mov	r0, r4
 800921e:	f001 f825 	bl	800a26c <__mdiff>
 8009222:	68c2      	ldr	r2, [r0, #12]
 8009224:	4605      	mov	r5, r0
 8009226:	bb02      	cbnz	r2, 800926a <_dtoa_r+0xa7a>
 8009228:	4601      	mov	r1, r0
 800922a:	4650      	mov	r0, sl
 800922c:	f001 f802 	bl	800a234 <__mcmp>
 8009230:	4602      	mov	r2, r0
 8009232:	4629      	mov	r1, r5
 8009234:	4620      	mov	r0, r4
 8009236:	9209      	str	r2, [sp, #36]	; 0x24
 8009238:	f000 fd76 	bl	8009d28 <_Bfree>
 800923c:	9b07      	ldr	r3, [sp, #28]
 800923e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009240:	9d04      	ldr	r5, [sp, #16]
 8009242:	ea43 0102 	orr.w	r1, r3, r2
 8009246:	9b06      	ldr	r3, [sp, #24]
 8009248:	4319      	orrs	r1, r3
 800924a:	d110      	bne.n	800926e <_dtoa_r+0xa7e>
 800924c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009250:	d029      	beq.n	80092a6 <_dtoa_r+0xab6>
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	dd02      	ble.n	800925e <_dtoa_r+0xa6e>
 8009258:	9b02      	ldr	r3, [sp, #8]
 800925a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800925e:	9b01      	ldr	r3, [sp, #4]
 8009260:	f883 9000 	strb.w	r9, [r3]
 8009264:	e774      	b.n	8009150 <_dtoa_r+0x960>
 8009266:	4638      	mov	r0, r7
 8009268:	e7ba      	b.n	80091e0 <_dtoa_r+0x9f0>
 800926a:	2201      	movs	r2, #1
 800926c:	e7e1      	b.n	8009232 <_dtoa_r+0xa42>
 800926e:	9b05      	ldr	r3, [sp, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	db04      	blt.n	800927e <_dtoa_r+0xa8e>
 8009274:	9907      	ldr	r1, [sp, #28]
 8009276:	430b      	orrs	r3, r1
 8009278:	9906      	ldr	r1, [sp, #24]
 800927a:	430b      	orrs	r3, r1
 800927c:	d120      	bne.n	80092c0 <_dtoa_r+0xad0>
 800927e:	2a00      	cmp	r2, #0
 8009280:	dded      	ble.n	800925e <_dtoa_r+0xa6e>
 8009282:	4651      	mov	r1, sl
 8009284:	2201      	movs	r2, #1
 8009286:	4620      	mov	r0, r4
 8009288:	f000 ff68 	bl	800a15c <__lshift>
 800928c:	4631      	mov	r1, r6
 800928e:	4682      	mov	sl, r0
 8009290:	f000 ffd0 	bl	800a234 <__mcmp>
 8009294:	2800      	cmp	r0, #0
 8009296:	dc03      	bgt.n	80092a0 <_dtoa_r+0xab0>
 8009298:	d1e1      	bne.n	800925e <_dtoa_r+0xa6e>
 800929a:	f019 0f01 	tst.w	r9, #1
 800929e:	d0de      	beq.n	800925e <_dtoa_r+0xa6e>
 80092a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092a4:	d1d8      	bne.n	8009258 <_dtoa_r+0xa68>
 80092a6:	9a01      	ldr	r2, [sp, #4]
 80092a8:	2339      	movs	r3, #57	; 0x39
 80092aa:	7013      	strb	r3, [r2, #0]
 80092ac:	462b      	mov	r3, r5
 80092ae:	461d      	mov	r5, r3
 80092b0:	3b01      	subs	r3, #1
 80092b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80092b6:	2a39      	cmp	r2, #57	; 0x39
 80092b8:	d06c      	beq.n	8009394 <_dtoa_r+0xba4>
 80092ba:	3201      	adds	r2, #1
 80092bc:	701a      	strb	r2, [r3, #0]
 80092be:	e747      	b.n	8009150 <_dtoa_r+0x960>
 80092c0:	2a00      	cmp	r2, #0
 80092c2:	dd07      	ble.n	80092d4 <_dtoa_r+0xae4>
 80092c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80092c8:	d0ed      	beq.n	80092a6 <_dtoa_r+0xab6>
 80092ca:	9a01      	ldr	r2, [sp, #4]
 80092cc:	f109 0301 	add.w	r3, r9, #1
 80092d0:	7013      	strb	r3, [r2, #0]
 80092d2:	e73d      	b.n	8009150 <_dtoa_r+0x960>
 80092d4:	9b04      	ldr	r3, [sp, #16]
 80092d6:	9a08      	ldr	r2, [sp, #32]
 80092d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80092dc:	4293      	cmp	r3, r2
 80092de:	d043      	beq.n	8009368 <_dtoa_r+0xb78>
 80092e0:	4651      	mov	r1, sl
 80092e2:	2300      	movs	r3, #0
 80092e4:	220a      	movs	r2, #10
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 fd40 	bl	8009d6c <__multadd>
 80092ec:	45b8      	cmp	r8, r7
 80092ee:	4682      	mov	sl, r0
 80092f0:	f04f 0300 	mov.w	r3, #0
 80092f4:	f04f 020a 	mov.w	r2, #10
 80092f8:	4641      	mov	r1, r8
 80092fa:	4620      	mov	r0, r4
 80092fc:	d107      	bne.n	800930e <_dtoa_r+0xb1e>
 80092fe:	f000 fd35 	bl	8009d6c <__multadd>
 8009302:	4680      	mov	r8, r0
 8009304:	4607      	mov	r7, r0
 8009306:	9b04      	ldr	r3, [sp, #16]
 8009308:	3301      	adds	r3, #1
 800930a:	9304      	str	r3, [sp, #16]
 800930c:	e775      	b.n	80091fa <_dtoa_r+0xa0a>
 800930e:	f000 fd2d 	bl	8009d6c <__multadd>
 8009312:	4639      	mov	r1, r7
 8009314:	4680      	mov	r8, r0
 8009316:	2300      	movs	r3, #0
 8009318:	220a      	movs	r2, #10
 800931a:	4620      	mov	r0, r4
 800931c:	f000 fd26 	bl	8009d6c <__multadd>
 8009320:	4607      	mov	r7, r0
 8009322:	e7f0      	b.n	8009306 <_dtoa_r+0xb16>
 8009324:	9b04      	ldr	r3, [sp, #16]
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	9d00      	ldr	r5, [sp, #0]
 800932a:	4631      	mov	r1, r6
 800932c:	4650      	mov	r0, sl
 800932e:	f7ff f9d5 	bl	80086dc <quorem>
 8009332:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009336:	9b00      	ldr	r3, [sp, #0]
 8009338:	f805 9b01 	strb.w	r9, [r5], #1
 800933c:	1aea      	subs	r2, r5, r3
 800933e:	9b01      	ldr	r3, [sp, #4]
 8009340:	4293      	cmp	r3, r2
 8009342:	dd07      	ble.n	8009354 <_dtoa_r+0xb64>
 8009344:	4651      	mov	r1, sl
 8009346:	2300      	movs	r3, #0
 8009348:	220a      	movs	r2, #10
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fd0e 	bl	8009d6c <__multadd>
 8009350:	4682      	mov	sl, r0
 8009352:	e7ea      	b.n	800932a <_dtoa_r+0xb3a>
 8009354:	9b01      	ldr	r3, [sp, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	bfc8      	it	gt
 800935a:	461d      	movgt	r5, r3
 800935c:	9b00      	ldr	r3, [sp, #0]
 800935e:	bfd8      	it	le
 8009360:	2501      	movle	r5, #1
 8009362:	441d      	add	r5, r3
 8009364:	f04f 0800 	mov.w	r8, #0
 8009368:	4651      	mov	r1, sl
 800936a:	2201      	movs	r2, #1
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fef5 	bl	800a15c <__lshift>
 8009372:	4631      	mov	r1, r6
 8009374:	4682      	mov	sl, r0
 8009376:	f000 ff5d 	bl	800a234 <__mcmp>
 800937a:	2800      	cmp	r0, #0
 800937c:	dc96      	bgt.n	80092ac <_dtoa_r+0xabc>
 800937e:	d102      	bne.n	8009386 <_dtoa_r+0xb96>
 8009380:	f019 0f01 	tst.w	r9, #1
 8009384:	d192      	bne.n	80092ac <_dtoa_r+0xabc>
 8009386:	462b      	mov	r3, r5
 8009388:	461d      	mov	r5, r3
 800938a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800938e:	2a30      	cmp	r2, #48	; 0x30
 8009390:	d0fa      	beq.n	8009388 <_dtoa_r+0xb98>
 8009392:	e6dd      	b.n	8009150 <_dtoa_r+0x960>
 8009394:	9a00      	ldr	r2, [sp, #0]
 8009396:	429a      	cmp	r2, r3
 8009398:	d189      	bne.n	80092ae <_dtoa_r+0xabe>
 800939a:	f10b 0b01 	add.w	fp, fp, #1
 800939e:	2331      	movs	r3, #49	; 0x31
 80093a0:	e796      	b.n	80092d0 <_dtoa_r+0xae0>
 80093a2:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <_dtoa_r+0xbdc>)
 80093a4:	f7ff ba99 	b.w	80088da <_dtoa_r+0xea>
 80093a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f47f aa6d 	bne.w	800888a <_dtoa_r+0x9a>
 80093b0:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <_dtoa_r+0xbe0>)
 80093b2:	f7ff ba92 	b.w	80088da <_dtoa_r+0xea>
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	dcb5      	bgt.n	8009328 <_dtoa_r+0xb38>
 80093bc:	9b07      	ldr	r3, [sp, #28]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	f73f aeb1 	bgt.w	8009126 <_dtoa_r+0x936>
 80093c4:	e7b0      	b.n	8009328 <_dtoa_r+0xb38>
 80093c6:	bf00      	nop
 80093c8:	0800ba0e 	.word	0x0800ba0e
 80093cc:	0800b961 	.word	0x0800b961
 80093d0:	0800b992 	.word	0x0800b992

080093d4 <_free_r>:
 80093d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093d6:	2900      	cmp	r1, #0
 80093d8:	d044      	beq.n	8009464 <_free_r+0x90>
 80093da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093de:	9001      	str	r0, [sp, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f1a1 0404 	sub.w	r4, r1, #4
 80093e6:	bfb8      	it	lt
 80093e8:	18e4      	addlt	r4, r4, r3
 80093ea:	f000 fc51 	bl	8009c90 <__malloc_lock>
 80093ee:	4a1e      	ldr	r2, [pc, #120]	; (8009468 <_free_r+0x94>)
 80093f0:	9801      	ldr	r0, [sp, #4]
 80093f2:	6813      	ldr	r3, [r2, #0]
 80093f4:	b933      	cbnz	r3, 8009404 <_free_r+0x30>
 80093f6:	6063      	str	r3, [r4, #4]
 80093f8:	6014      	str	r4, [r2, #0]
 80093fa:	b003      	add	sp, #12
 80093fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009400:	f000 bc4c 	b.w	8009c9c <__malloc_unlock>
 8009404:	42a3      	cmp	r3, r4
 8009406:	d908      	bls.n	800941a <_free_r+0x46>
 8009408:	6825      	ldr	r5, [r4, #0]
 800940a:	1961      	adds	r1, r4, r5
 800940c:	428b      	cmp	r3, r1
 800940e:	bf01      	itttt	eq
 8009410:	6819      	ldreq	r1, [r3, #0]
 8009412:	685b      	ldreq	r3, [r3, #4]
 8009414:	1949      	addeq	r1, r1, r5
 8009416:	6021      	streq	r1, [r4, #0]
 8009418:	e7ed      	b.n	80093f6 <_free_r+0x22>
 800941a:	461a      	mov	r2, r3
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b10b      	cbz	r3, 8009424 <_free_r+0x50>
 8009420:	42a3      	cmp	r3, r4
 8009422:	d9fa      	bls.n	800941a <_free_r+0x46>
 8009424:	6811      	ldr	r1, [r2, #0]
 8009426:	1855      	adds	r5, r2, r1
 8009428:	42a5      	cmp	r5, r4
 800942a:	d10b      	bne.n	8009444 <_free_r+0x70>
 800942c:	6824      	ldr	r4, [r4, #0]
 800942e:	4421      	add	r1, r4
 8009430:	1854      	adds	r4, r2, r1
 8009432:	42a3      	cmp	r3, r4
 8009434:	6011      	str	r1, [r2, #0]
 8009436:	d1e0      	bne.n	80093fa <_free_r+0x26>
 8009438:	681c      	ldr	r4, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	6053      	str	r3, [r2, #4]
 800943e:	440c      	add	r4, r1
 8009440:	6014      	str	r4, [r2, #0]
 8009442:	e7da      	b.n	80093fa <_free_r+0x26>
 8009444:	d902      	bls.n	800944c <_free_r+0x78>
 8009446:	230c      	movs	r3, #12
 8009448:	6003      	str	r3, [r0, #0]
 800944a:	e7d6      	b.n	80093fa <_free_r+0x26>
 800944c:	6825      	ldr	r5, [r4, #0]
 800944e:	1961      	adds	r1, r4, r5
 8009450:	428b      	cmp	r3, r1
 8009452:	bf04      	itt	eq
 8009454:	6819      	ldreq	r1, [r3, #0]
 8009456:	685b      	ldreq	r3, [r3, #4]
 8009458:	6063      	str	r3, [r4, #4]
 800945a:	bf04      	itt	eq
 800945c:	1949      	addeq	r1, r1, r5
 800945e:	6021      	streq	r1, [r4, #0]
 8009460:	6054      	str	r4, [r2, #4]
 8009462:	e7ca      	b.n	80093fa <_free_r+0x26>
 8009464:	b003      	add	sp, #12
 8009466:	bd30      	pop	{r4, r5, pc}
 8009468:	20000608 	.word	0x20000608

0800946c <rshift>:
 800946c:	6903      	ldr	r3, [r0, #16]
 800946e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009476:	ea4f 1261 	mov.w	r2, r1, asr #5
 800947a:	f100 0414 	add.w	r4, r0, #20
 800947e:	dd45      	ble.n	800950c <rshift+0xa0>
 8009480:	f011 011f 	ands.w	r1, r1, #31
 8009484:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009488:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800948c:	d10c      	bne.n	80094a8 <rshift+0x3c>
 800948e:	f100 0710 	add.w	r7, r0, #16
 8009492:	4629      	mov	r1, r5
 8009494:	42b1      	cmp	r1, r6
 8009496:	d334      	bcc.n	8009502 <rshift+0x96>
 8009498:	1a9b      	subs	r3, r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	1eea      	subs	r2, r5, #3
 800949e:	4296      	cmp	r6, r2
 80094a0:	bf38      	it	cc
 80094a2:	2300      	movcc	r3, #0
 80094a4:	4423      	add	r3, r4
 80094a6:	e015      	b.n	80094d4 <rshift+0x68>
 80094a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094ac:	f1c1 0820 	rsb	r8, r1, #32
 80094b0:	40cf      	lsrs	r7, r1
 80094b2:	f105 0e04 	add.w	lr, r5, #4
 80094b6:	46a1      	mov	r9, r4
 80094b8:	4576      	cmp	r6, lr
 80094ba:	46f4      	mov	ip, lr
 80094bc:	d815      	bhi.n	80094ea <rshift+0x7e>
 80094be:	1a9a      	subs	r2, r3, r2
 80094c0:	0092      	lsls	r2, r2, #2
 80094c2:	3a04      	subs	r2, #4
 80094c4:	3501      	adds	r5, #1
 80094c6:	42ae      	cmp	r6, r5
 80094c8:	bf38      	it	cc
 80094ca:	2200      	movcc	r2, #0
 80094cc:	18a3      	adds	r3, r4, r2
 80094ce:	50a7      	str	r7, [r4, r2]
 80094d0:	b107      	cbz	r7, 80094d4 <rshift+0x68>
 80094d2:	3304      	adds	r3, #4
 80094d4:	1b1a      	subs	r2, r3, r4
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094dc:	bf08      	it	eq
 80094de:	2300      	moveq	r3, #0
 80094e0:	6102      	str	r2, [r0, #16]
 80094e2:	bf08      	it	eq
 80094e4:	6143      	streq	r3, [r0, #20]
 80094e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094ea:	f8dc c000 	ldr.w	ip, [ip]
 80094ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80094f2:	ea4c 0707 	orr.w	r7, ip, r7
 80094f6:	f849 7b04 	str.w	r7, [r9], #4
 80094fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094fe:	40cf      	lsrs	r7, r1
 8009500:	e7da      	b.n	80094b8 <rshift+0x4c>
 8009502:	f851 cb04 	ldr.w	ip, [r1], #4
 8009506:	f847 cf04 	str.w	ip, [r7, #4]!
 800950a:	e7c3      	b.n	8009494 <rshift+0x28>
 800950c:	4623      	mov	r3, r4
 800950e:	e7e1      	b.n	80094d4 <rshift+0x68>

08009510 <__hexdig_fun>:
 8009510:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009514:	2b09      	cmp	r3, #9
 8009516:	d802      	bhi.n	800951e <__hexdig_fun+0xe>
 8009518:	3820      	subs	r0, #32
 800951a:	b2c0      	uxtb	r0, r0
 800951c:	4770      	bx	lr
 800951e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009522:	2b05      	cmp	r3, #5
 8009524:	d801      	bhi.n	800952a <__hexdig_fun+0x1a>
 8009526:	3847      	subs	r0, #71	; 0x47
 8009528:	e7f7      	b.n	800951a <__hexdig_fun+0xa>
 800952a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800952e:	2b05      	cmp	r3, #5
 8009530:	d801      	bhi.n	8009536 <__hexdig_fun+0x26>
 8009532:	3827      	subs	r0, #39	; 0x27
 8009534:	e7f1      	b.n	800951a <__hexdig_fun+0xa>
 8009536:	2000      	movs	r0, #0
 8009538:	4770      	bx	lr
	...

0800953c <__gethex>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	4617      	mov	r7, r2
 8009542:	680a      	ldr	r2, [r1, #0]
 8009544:	b085      	sub	sp, #20
 8009546:	f102 0b02 	add.w	fp, r2, #2
 800954a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800954e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009552:	4681      	mov	r9, r0
 8009554:	468a      	mov	sl, r1
 8009556:	9302      	str	r3, [sp, #8]
 8009558:	32fe      	adds	r2, #254	; 0xfe
 800955a:	eb02 030b 	add.w	r3, r2, fp
 800955e:	46d8      	mov	r8, fp
 8009560:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	2830      	cmp	r0, #48	; 0x30
 8009568:	d0f7      	beq.n	800955a <__gethex+0x1e>
 800956a:	f7ff ffd1 	bl	8009510 <__hexdig_fun>
 800956e:	4604      	mov	r4, r0
 8009570:	2800      	cmp	r0, #0
 8009572:	d138      	bne.n	80095e6 <__gethex+0xaa>
 8009574:	49a7      	ldr	r1, [pc, #668]	; (8009814 <__gethex+0x2d8>)
 8009576:	2201      	movs	r2, #1
 8009578:	4640      	mov	r0, r8
 800957a:	f7fe ffde 	bl	800853a <strncmp>
 800957e:	4606      	mov	r6, r0
 8009580:	2800      	cmp	r0, #0
 8009582:	d169      	bne.n	8009658 <__gethex+0x11c>
 8009584:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009588:	465d      	mov	r5, fp
 800958a:	f7ff ffc1 	bl	8009510 <__hexdig_fun>
 800958e:	2800      	cmp	r0, #0
 8009590:	d064      	beq.n	800965c <__gethex+0x120>
 8009592:	465a      	mov	r2, fp
 8009594:	7810      	ldrb	r0, [r2, #0]
 8009596:	2830      	cmp	r0, #48	; 0x30
 8009598:	4690      	mov	r8, r2
 800959a:	f102 0201 	add.w	r2, r2, #1
 800959e:	d0f9      	beq.n	8009594 <__gethex+0x58>
 80095a0:	f7ff ffb6 	bl	8009510 <__hexdig_fun>
 80095a4:	2301      	movs	r3, #1
 80095a6:	fab0 f480 	clz	r4, r0
 80095aa:	0964      	lsrs	r4, r4, #5
 80095ac:	465e      	mov	r6, fp
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	4642      	mov	r2, r8
 80095b2:	4615      	mov	r5, r2
 80095b4:	3201      	adds	r2, #1
 80095b6:	7828      	ldrb	r0, [r5, #0]
 80095b8:	f7ff ffaa 	bl	8009510 <__hexdig_fun>
 80095bc:	2800      	cmp	r0, #0
 80095be:	d1f8      	bne.n	80095b2 <__gethex+0x76>
 80095c0:	4994      	ldr	r1, [pc, #592]	; (8009814 <__gethex+0x2d8>)
 80095c2:	2201      	movs	r2, #1
 80095c4:	4628      	mov	r0, r5
 80095c6:	f7fe ffb8 	bl	800853a <strncmp>
 80095ca:	b978      	cbnz	r0, 80095ec <__gethex+0xb0>
 80095cc:	b946      	cbnz	r6, 80095e0 <__gethex+0xa4>
 80095ce:	1c6e      	adds	r6, r5, #1
 80095d0:	4632      	mov	r2, r6
 80095d2:	4615      	mov	r5, r2
 80095d4:	3201      	adds	r2, #1
 80095d6:	7828      	ldrb	r0, [r5, #0]
 80095d8:	f7ff ff9a 	bl	8009510 <__hexdig_fun>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d1f8      	bne.n	80095d2 <__gethex+0x96>
 80095e0:	1b73      	subs	r3, r6, r5
 80095e2:	009e      	lsls	r6, r3, #2
 80095e4:	e004      	b.n	80095f0 <__gethex+0xb4>
 80095e6:	2400      	movs	r4, #0
 80095e8:	4626      	mov	r6, r4
 80095ea:	e7e1      	b.n	80095b0 <__gethex+0x74>
 80095ec:	2e00      	cmp	r6, #0
 80095ee:	d1f7      	bne.n	80095e0 <__gethex+0xa4>
 80095f0:	782b      	ldrb	r3, [r5, #0]
 80095f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095f6:	2b50      	cmp	r3, #80	; 0x50
 80095f8:	d13d      	bne.n	8009676 <__gethex+0x13a>
 80095fa:	786b      	ldrb	r3, [r5, #1]
 80095fc:	2b2b      	cmp	r3, #43	; 0x2b
 80095fe:	d02f      	beq.n	8009660 <__gethex+0x124>
 8009600:	2b2d      	cmp	r3, #45	; 0x2d
 8009602:	d031      	beq.n	8009668 <__gethex+0x12c>
 8009604:	1c69      	adds	r1, r5, #1
 8009606:	f04f 0b00 	mov.w	fp, #0
 800960a:	7808      	ldrb	r0, [r1, #0]
 800960c:	f7ff ff80 	bl	8009510 <__hexdig_fun>
 8009610:	1e42      	subs	r2, r0, #1
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	2a18      	cmp	r2, #24
 8009616:	d82e      	bhi.n	8009676 <__gethex+0x13a>
 8009618:	f1a0 0210 	sub.w	r2, r0, #16
 800961c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009620:	f7ff ff76 	bl	8009510 <__hexdig_fun>
 8009624:	f100 3cff 	add.w	ip, r0, #4294967295
 8009628:	fa5f fc8c 	uxtb.w	ip, ip
 800962c:	f1bc 0f18 	cmp.w	ip, #24
 8009630:	d91d      	bls.n	800966e <__gethex+0x132>
 8009632:	f1bb 0f00 	cmp.w	fp, #0
 8009636:	d000      	beq.n	800963a <__gethex+0xfe>
 8009638:	4252      	negs	r2, r2
 800963a:	4416      	add	r6, r2
 800963c:	f8ca 1000 	str.w	r1, [sl]
 8009640:	b1dc      	cbz	r4, 800967a <__gethex+0x13e>
 8009642:	9b01      	ldr	r3, [sp, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	bf14      	ite	ne
 8009648:	f04f 0800 	movne.w	r8, #0
 800964c:	f04f 0806 	moveq.w	r8, #6
 8009650:	4640      	mov	r0, r8
 8009652:	b005      	add	sp, #20
 8009654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009658:	4645      	mov	r5, r8
 800965a:	4626      	mov	r6, r4
 800965c:	2401      	movs	r4, #1
 800965e:	e7c7      	b.n	80095f0 <__gethex+0xb4>
 8009660:	f04f 0b00 	mov.w	fp, #0
 8009664:	1ca9      	adds	r1, r5, #2
 8009666:	e7d0      	b.n	800960a <__gethex+0xce>
 8009668:	f04f 0b01 	mov.w	fp, #1
 800966c:	e7fa      	b.n	8009664 <__gethex+0x128>
 800966e:	230a      	movs	r3, #10
 8009670:	fb03 0002 	mla	r0, r3, r2, r0
 8009674:	e7d0      	b.n	8009618 <__gethex+0xdc>
 8009676:	4629      	mov	r1, r5
 8009678:	e7e0      	b.n	800963c <__gethex+0x100>
 800967a:	eba5 0308 	sub.w	r3, r5, r8
 800967e:	3b01      	subs	r3, #1
 8009680:	4621      	mov	r1, r4
 8009682:	2b07      	cmp	r3, #7
 8009684:	dc0a      	bgt.n	800969c <__gethex+0x160>
 8009686:	4648      	mov	r0, r9
 8009688:	f000 fb0e 	bl	8009ca8 <_Balloc>
 800968c:	4604      	mov	r4, r0
 800968e:	b940      	cbnz	r0, 80096a2 <__gethex+0x166>
 8009690:	4b61      	ldr	r3, [pc, #388]	; (8009818 <__gethex+0x2dc>)
 8009692:	4602      	mov	r2, r0
 8009694:	21e4      	movs	r1, #228	; 0xe4
 8009696:	4861      	ldr	r0, [pc, #388]	; (800981c <__gethex+0x2e0>)
 8009698:	f001 f9f0 	bl	800aa7c <__assert_func>
 800969c:	3101      	adds	r1, #1
 800969e:	105b      	asrs	r3, r3, #1
 80096a0:	e7ef      	b.n	8009682 <__gethex+0x146>
 80096a2:	f100 0a14 	add.w	sl, r0, #20
 80096a6:	2300      	movs	r3, #0
 80096a8:	495a      	ldr	r1, [pc, #360]	; (8009814 <__gethex+0x2d8>)
 80096aa:	f8cd a004 	str.w	sl, [sp, #4]
 80096ae:	469b      	mov	fp, r3
 80096b0:	45a8      	cmp	r8, r5
 80096b2:	d342      	bcc.n	800973a <__gethex+0x1fe>
 80096b4:	9801      	ldr	r0, [sp, #4]
 80096b6:	f840 bb04 	str.w	fp, [r0], #4
 80096ba:	eba0 000a 	sub.w	r0, r0, sl
 80096be:	1080      	asrs	r0, r0, #2
 80096c0:	6120      	str	r0, [r4, #16]
 80096c2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80096c6:	4658      	mov	r0, fp
 80096c8:	f000 fbe0 	bl	8009e8c <__hi0bits>
 80096cc:	683d      	ldr	r5, [r7, #0]
 80096ce:	eba8 0000 	sub.w	r0, r8, r0
 80096d2:	42a8      	cmp	r0, r5
 80096d4:	dd59      	ble.n	800978a <__gethex+0x24e>
 80096d6:	eba0 0805 	sub.w	r8, r0, r5
 80096da:	4641      	mov	r1, r8
 80096dc:	4620      	mov	r0, r4
 80096de:	f000 ff6f 	bl	800a5c0 <__any_on>
 80096e2:	4683      	mov	fp, r0
 80096e4:	b1b8      	cbz	r0, 8009716 <__gethex+0x1da>
 80096e6:	f108 33ff 	add.w	r3, r8, #4294967295
 80096ea:	1159      	asrs	r1, r3, #5
 80096ec:	f003 021f 	and.w	r2, r3, #31
 80096f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80096f4:	f04f 0b01 	mov.w	fp, #1
 80096f8:	fa0b f202 	lsl.w	r2, fp, r2
 80096fc:	420a      	tst	r2, r1
 80096fe:	d00a      	beq.n	8009716 <__gethex+0x1da>
 8009700:	455b      	cmp	r3, fp
 8009702:	dd06      	ble.n	8009712 <__gethex+0x1d6>
 8009704:	f1a8 0102 	sub.w	r1, r8, #2
 8009708:	4620      	mov	r0, r4
 800970a:	f000 ff59 	bl	800a5c0 <__any_on>
 800970e:	2800      	cmp	r0, #0
 8009710:	d138      	bne.n	8009784 <__gethex+0x248>
 8009712:	f04f 0b02 	mov.w	fp, #2
 8009716:	4641      	mov	r1, r8
 8009718:	4620      	mov	r0, r4
 800971a:	f7ff fea7 	bl	800946c <rshift>
 800971e:	4446      	add	r6, r8
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	42b3      	cmp	r3, r6
 8009724:	da41      	bge.n	80097aa <__gethex+0x26e>
 8009726:	4621      	mov	r1, r4
 8009728:	4648      	mov	r0, r9
 800972a:	f000 fafd 	bl	8009d28 <_Bfree>
 800972e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009730:	2300      	movs	r3, #0
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009738:	e78a      	b.n	8009650 <__gethex+0x114>
 800973a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800973e:	2a2e      	cmp	r2, #46	; 0x2e
 8009740:	d014      	beq.n	800976c <__gethex+0x230>
 8009742:	2b20      	cmp	r3, #32
 8009744:	d106      	bne.n	8009754 <__gethex+0x218>
 8009746:	9b01      	ldr	r3, [sp, #4]
 8009748:	f843 bb04 	str.w	fp, [r3], #4
 800974c:	f04f 0b00 	mov.w	fp, #0
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	465b      	mov	r3, fp
 8009754:	7828      	ldrb	r0, [r5, #0]
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	f7ff feda 	bl	8009510 <__hexdig_fun>
 800975c:	9b03      	ldr	r3, [sp, #12]
 800975e:	f000 000f 	and.w	r0, r0, #15
 8009762:	4098      	lsls	r0, r3
 8009764:	ea4b 0b00 	orr.w	fp, fp, r0
 8009768:	3304      	adds	r3, #4
 800976a:	e7a1      	b.n	80096b0 <__gethex+0x174>
 800976c:	45a8      	cmp	r8, r5
 800976e:	d8e8      	bhi.n	8009742 <__gethex+0x206>
 8009770:	2201      	movs	r2, #1
 8009772:	4628      	mov	r0, r5
 8009774:	9303      	str	r3, [sp, #12]
 8009776:	f7fe fee0 	bl	800853a <strncmp>
 800977a:	4926      	ldr	r1, [pc, #152]	; (8009814 <__gethex+0x2d8>)
 800977c:	9b03      	ldr	r3, [sp, #12]
 800977e:	2800      	cmp	r0, #0
 8009780:	d1df      	bne.n	8009742 <__gethex+0x206>
 8009782:	e795      	b.n	80096b0 <__gethex+0x174>
 8009784:	f04f 0b03 	mov.w	fp, #3
 8009788:	e7c5      	b.n	8009716 <__gethex+0x1da>
 800978a:	da0b      	bge.n	80097a4 <__gethex+0x268>
 800978c:	eba5 0800 	sub.w	r8, r5, r0
 8009790:	4621      	mov	r1, r4
 8009792:	4642      	mov	r2, r8
 8009794:	4648      	mov	r0, r9
 8009796:	f000 fce1 	bl	800a15c <__lshift>
 800979a:	eba6 0608 	sub.w	r6, r6, r8
 800979e:	4604      	mov	r4, r0
 80097a0:	f100 0a14 	add.w	sl, r0, #20
 80097a4:	f04f 0b00 	mov.w	fp, #0
 80097a8:	e7ba      	b.n	8009720 <__gethex+0x1e4>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	42b3      	cmp	r3, r6
 80097ae:	dd73      	ble.n	8009898 <__gethex+0x35c>
 80097b0:	1b9e      	subs	r6, r3, r6
 80097b2:	42b5      	cmp	r5, r6
 80097b4:	dc34      	bgt.n	8009820 <__gethex+0x2e4>
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d023      	beq.n	8009804 <__gethex+0x2c8>
 80097bc:	2b03      	cmp	r3, #3
 80097be:	d025      	beq.n	800980c <__gethex+0x2d0>
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d115      	bne.n	80097f0 <__gethex+0x2b4>
 80097c4:	42b5      	cmp	r5, r6
 80097c6:	d113      	bne.n	80097f0 <__gethex+0x2b4>
 80097c8:	2d01      	cmp	r5, #1
 80097ca:	d10b      	bne.n	80097e4 <__gethex+0x2a8>
 80097cc:	9a02      	ldr	r2, [sp, #8]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	2301      	movs	r3, #1
 80097d4:	6123      	str	r3, [r4, #16]
 80097d6:	f8ca 3000 	str.w	r3, [sl]
 80097da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097dc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80097e0:	601c      	str	r4, [r3, #0]
 80097e2:	e735      	b.n	8009650 <__gethex+0x114>
 80097e4:	1e69      	subs	r1, r5, #1
 80097e6:	4620      	mov	r0, r4
 80097e8:	f000 feea 	bl	800a5c0 <__any_on>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d1ed      	bne.n	80097cc <__gethex+0x290>
 80097f0:	4621      	mov	r1, r4
 80097f2:	4648      	mov	r0, r9
 80097f4:	f000 fa98 	bl	8009d28 <_Bfree>
 80097f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097fa:	2300      	movs	r3, #0
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009802:	e725      	b.n	8009650 <__gethex+0x114>
 8009804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1f2      	bne.n	80097f0 <__gethex+0x2b4>
 800980a:	e7df      	b.n	80097cc <__gethex+0x290>
 800980c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1dc      	bne.n	80097cc <__gethex+0x290>
 8009812:	e7ed      	b.n	80097f0 <__gethex+0x2b4>
 8009814:	0800b7fc 	.word	0x0800b7fc
 8009818:	0800ba0e 	.word	0x0800ba0e
 800981c:	0800ba1f 	.word	0x0800ba1f
 8009820:	f106 38ff 	add.w	r8, r6, #4294967295
 8009824:	f1bb 0f00 	cmp.w	fp, #0
 8009828:	d133      	bne.n	8009892 <__gethex+0x356>
 800982a:	f1b8 0f00 	cmp.w	r8, #0
 800982e:	d004      	beq.n	800983a <__gethex+0x2fe>
 8009830:	4641      	mov	r1, r8
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fec4 	bl	800a5c0 <__any_on>
 8009838:	4683      	mov	fp, r0
 800983a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800983e:	2301      	movs	r3, #1
 8009840:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009844:	f008 081f 	and.w	r8, r8, #31
 8009848:	fa03 f308 	lsl.w	r3, r3, r8
 800984c:	4213      	tst	r3, r2
 800984e:	4631      	mov	r1, r6
 8009850:	4620      	mov	r0, r4
 8009852:	bf18      	it	ne
 8009854:	f04b 0b02 	orrne.w	fp, fp, #2
 8009858:	1bad      	subs	r5, r5, r6
 800985a:	f7ff fe07 	bl	800946c <rshift>
 800985e:	687e      	ldr	r6, [r7, #4]
 8009860:	f04f 0802 	mov.w	r8, #2
 8009864:	f1bb 0f00 	cmp.w	fp, #0
 8009868:	d04a      	beq.n	8009900 <__gethex+0x3c4>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d016      	beq.n	800989e <__gethex+0x362>
 8009870:	2b03      	cmp	r3, #3
 8009872:	d018      	beq.n	80098a6 <__gethex+0x36a>
 8009874:	2b01      	cmp	r3, #1
 8009876:	d109      	bne.n	800988c <__gethex+0x350>
 8009878:	f01b 0f02 	tst.w	fp, #2
 800987c:	d006      	beq.n	800988c <__gethex+0x350>
 800987e:	f8da 3000 	ldr.w	r3, [sl]
 8009882:	ea4b 0b03 	orr.w	fp, fp, r3
 8009886:	f01b 0f01 	tst.w	fp, #1
 800988a:	d10f      	bne.n	80098ac <__gethex+0x370>
 800988c:	f048 0810 	orr.w	r8, r8, #16
 8009890:	e036      	b.n	8009900 <__gethex+0x3c4>
 8009892:	f04f 0b01 	mov.w	fp, #1
 8009896:	e7d0      	b.n	800983a <__gethex+0x2fe>
 8009898:	f04f 0801 	mov.w	r8, #1
 800989c:	e7e2      	b.n	8009864 <__gethex+0x328>
 800989e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098a0:	f1c3 0301 	rsb	r3, r3, #1
 80098a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80098a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0ef      	beq.n	800988c <__gethex+0x350>
 80098ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098b0:	f104 0214 	add.w	r2, r4, #20
 80098b4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80098be:	2300      	movs	r3, #0
 80098c0:	4694      	mov	ip, r2
 80098c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80098c6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80098ca:	d01e      	beq.n	800990a <__gethex+0x3ce>
 80098cc:	3101      	adds	r1, #1
 80098ce:	f8cc 1000 	str.w	r1, [ip]
 80098d2:	f1b8 0f02 	cmp.w	r8, #2
 80098d6:	f104 0214 	add.w	r2, r4, #20
 80098da:	d13d      	bne.n	8009958 <__gethex+0x41c>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	3b01      	subs	r3, #1
 80098e0:	42ab      	cmp	r3, r5
 80098e2:	d10b      	bne.n	80098fc <__gethex+0x3c0>
 80098e4:	1169      	asrs	r1, r5, #5
 80098e6:	2301      	movs	r3, #1
 80098e8:	f005 051f 	and.w	r5, r5, #31
 80098ec:	fa03 f505 	lsl.w	r5, r3, r5
 80098f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098f4:	421d      	tst	r5, r3
 80098f6:	bf18      	it	ne
 80098f8:	f04f 0801 	movne.w	r8, #1
 80098fc:	f048 0820 	orr.w	r8, r8, #32
 8009900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009902:	601c      	str	r4, [r3, #0]
 8009904:	9b02      	ldr	r3, [sp, #8]
 8009906:	601e      	str	r6, [r3, #0]
 8009908:	e6a2      	b.n	8009650 <__gethex+0x114>
 800990a:	4290      	cmp	r0, r2
 800990c:	f842 3c04 	str.w	r3, [r2, #-4]
 8009910:	d8d6      	bhi.n	80098c0 <__gethex+0x384>
 8009912:	68a2      	ldr	r2, [r4, #8]
 8009914:	4593      	cmp	fp, r2
 8009916:	db17      	blt.n	8009948 <__gethex+0x40c>
 8009918:	6861      	ldr	r1, [r4, #4]
 800991a:	4648      	mov	r0, r9
 800991c:	3101      	adds	r1, #1
 800991e:	f000 f9c3 	bl	8009ca8 <_Balloc>
 8009922:	4682      	mov	sl, r0
 8009924:	b918      	cbnz	r0, 800992e <__gethex+0x3f2>
 8009926:	4b1b      	ldr	r3, [pc, #108]	; (8009994 <__gethex+0x458>)
 8009928:	4602      	mov	r2, r0
 800992a:	2184      	movs	r1, #132	; 0x84
 800992c:	e6b3      	b.n	8009696 <__gethex+0x15a>
 800992e:	6922      	ldr	r2, [r4, #16]
 8009930:	3202      	adds	r2, #2
 8009932:	f104 010c 	add.w	r1, r4, #12
 8009936:	0092      	lsls	r2, r2, #2
 8009938:	300c      	adds	r0, #12
 800993a:	f7fe feb1 	bl	80086a0 <memcpy>
 800993e:	4621      	mov	r1, r4
 8009940:	4648      	mov	r0, r9
 8009942:	f000 f9f1 	bl	8009d28 <_Bfree>
 8009946:	4654      	mov	r4, sl
 8009948:	6922      	ldr	r2, [r4, #16]
 800994a:	1c51      	adds	r1, r2, #1
 800994c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009950:	6121      	str	r1, [r4, #16]
 8009952:	2101      	movs	r1, #1
 8009954:	6151      	str	r1, [r2, #20]
 8009956:	e7bc      	b.n	80098d2 <__gethex+0x396>
 8009958:	6921      	ldr	r1, [r4, #16]
 800995a:	4559      	cmp	r1, fp
 800995c:	dd0b      	ble.n	8009976 <__gethex+0x43a>
 800995e:	2101      	movs	r1, #1
 8009960:	4620      	mov	r0, r4
 8009962:	f7ff fd83 	bl	800946c <rshift>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	3601      	adds	r6, #1
 800996a:	42b3      	cmp	r3, r6
 800996c:	f6ff aedb 	blt.w	8009726 <__gethex+0x1ea>
 8009970:	f04f 0801 	mov.w	r8, #1
 8009974:	e7c2      	b.n	80098fc <__gethex+0x3c0>
 8009976:	f015 051f 	ands.w	r5, r5, #31
 800997a:	d0f9      	beq.n	8009970 <__gethex+0x434>
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	441a      	add	r2, r3
 8009980:	f1c5 0520 	rsb	r5, r5, #32
 8009984:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009988:	f000 fa80 	bl	8009e8c <__hi0bits>
 800998c:	42a8      	cmp	r0, r5
 800998e:	dbe6      	blt.n	800995e <__gethex+0x422>
 8009990:	e7ee      	b.n	8009970 <__gethex+0x434>
 8009992:	bf00      	nop
 8009994:	0800ba0e 	.word	0x0800ba0e

08009998 <L_shift>:
 8009998:	f1c2 0208 	rsb	r2, r2, #8
 800999c:	0092      	lsls	r2, r2, #2
 800999e:	b570      	push	{r4, r5, r6, lr}
 80099a0:	f1c2 0620 	rsb	r6, r2, #32
 80099a4:	6843      	ldr	r3, [r0, #4]
 80099a6:	6804      	ldr	r4, [r0, #0]
 80099a8:	fa03 f506 	lsl.w	r5, r3, r6
 80099ac:	432c      	orrs	r4, r5
 80099ae:	40d3      	lsrs	r3, r2
 80099b0:	6004      	str	r4, [r0, #0]
 80099b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80099b6:	4288      	cmp	r0, r1
 80099b8:	d3f4      	bcc.n	80099a4 <L_shift+0xc>
 80099ba:	bd70      	pop	{r4, r5, r6, pc}

080099bc <__match>:
 80099bc:	b530      	push	{r4, r5, lr}
 80099be:	6803      	ldr	r3, [r0, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099c6:	b914      	cbnz	r4, 80099ce <__match+0x12>
 80099c8:	6003      	str	r3, [r0, #0]
 80099ca:	2001      	movs	r0, #1
 80099cc:	bd30      	pop	{r4, r5, pc}
 80099ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099d6:	2d19      	cmp	r5, #25
 80099d8:	bf98      	it	ls
 80099da:	3220      	addls	r2, #32
 80099dc:	42a2      	cmp	r2, r4
 80099de:	d0f0      	beq.n	80099c2 <__match+0x6>
 80099e0:	2000      	movs	r0, #0
 80099e2:	e7f3      	b.n	80099cc <__match+0x10>

080099e4 <__hexnan>:
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	680b      	ldr	r3, [r1, #0]
 80099ea:	6801      	ldr	r1, [r0, #0]
 80099ec:	115e      	asrs	r6, r3, #5
 80099ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099f2:	f013 031f 	ands.w	r3, r3, #31
 80099f6:	b087      	sub	sp, #28
 80099f8:	bf18      	it	ne
 80099fa:	3604      	addne	r6, #4
 80099fc:	2500      	movs	r5, #0
 80099fe:	1f37      	subs	r7, r6, #4
 8009a00:	4682      	mov	sl, r0
 8009a02:	4690      	mov	r8, r2
 8009a04:	9301      	str	r3, [sp, #4]
 8009a06:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a0a:	46b9      	mov	r9, r7
 8009a0c:	463c      	mov	r4, r7
 8009a0e:	9502      	str	r5, [sp, #8]
 8009a10:	46ab      	mov	fp, r5
 8009a12:	784a      	ldrb	r2, [r1, #1]
 8009a14:	1c4b      	adds	r3, r1, #1
 8009a16:	9303      	str	r3, [sp, #12]
 8009a18:	b342      	cbz	r2, 8009a6c <__hexnan+0x88>
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	9105      	str	r1, [sp, #20]
 8009a1e:	9204      	str	r2, [sp, #16]
 8009a20:	f7ff fd76 	bl	8009510 <__hexdig_fun>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d14f      	bne.n	8009ac8 <__hexnan+0xe4>
 8009a28:	9a04      	ldr	r2, [sp, #16]
 8009a2a:	9905      	ldr	r1, [sp, #20]
 8009a2c:	2a20      	cmp	r2, #32
 8009a2e:	d818      	bhi.n	8009a62 <__hexnan+0x7e>
 8009a30:	9b02      	ldr	r3, [sp, #8]
 8009a32:	459b      	cmp	fp, r3
 8009a34:	dd13      	ble.n	8009a5e <__hexnan+0x7a>
 8009a36:	454c      	cmp	r4, r9
 8009a38:	d206      	bcs.n	8009a48 <__hexnan+0x64>
 8009a3a:	2d07      	cmp	r5, #7
 8009a3c:	dc04      	bgt.n	8009a48 <__hexnan+0x64>
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4649      	mov	r1, r9
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7ff ffa8 	bl	8009998 <L_shift>
 8009a48:	4544      	cmp	r4, r8
 8009a4a:	d950      	bls.n	8009aee <__hexnan+0x10a>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f1a4 0904 	sub.w	r9, r4, #4
 8009a52:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a56:	f8cd b008 	str.w	fp, [sp, #8]
 8009a5a:	464c      	mov	r4, r9
 8009a5c:	461d      	mov	r5, r3
 8009a5e:	9903      	ldr	r1, [sp, #12]
 8009a60:	e7d7      	b.n	8009a12 <__hexnan+0x2e>
 8009a62:	2a29      	cmp	r2, #41	; 0x29
 8009a64:	d155      	bne.n	8009b12 <__hexnan+0x12e>
 8009a66:	3102      	adds	r1, #2
 8009a68:	f8ca 1000 	str.w	r1, [sl]
 8009a6c:	f1bb 0f00 	cmp.w	fp, #0
 8009a70:	d04f      	beq.n	8009b12 <__hexnan+0x12e>
 8009a72:	454c      	cmp	r4, r9
 8009a74:	d206      	bcs.n	8009a84 <__hexnan+0xa0>
 8009a76:	2d07      	cmp	r5, #7
 8009a78:	dc04      	bgt.n	8009a84 <__hexnan+0xa0>
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	4649      	mov	r1, r9
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f7ff ff8a 	bl	8009998 <L_shift>
 8009a84:	4544      	cmp	r4, r8
 8009a86:	d934      	bls.n	8009af2 <__hexnan+0x10e>
 8009a88:	f1a8 0204 	sub.w	r2, r8, #4
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a92:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a96:	429f      	cmp	r7, r3
 8009a98:	d2f9      	bcs.n	8009a8e <__hexnan+0xaa>
 8009a9a:	1b3b      	subs	r3, r7, r4
 8009a9c:	f023 0303 	bic.w	r3, r3, #3
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	3e03      	subs	r6, #3
 8009aa4:	3401      	adds	r4, #1
 8009aa6:	42a6      	cmp	r6, r4
 8009aa8:	bf38      	it	cc
 8009aaa:	2304      	movcc	r3, #4
 8009aac:	4443      	add	r3, r8
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f843 2b04 	str.w	r2, [r3], #4
 8009ab4:	429f      	cmp	r7, r3
 8009ab6:	d2fb      	bcs.n	8009ab0 <__hexnan+0xcc>
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	b91b      	cbnz	r3, 8009ac4 <__hexnan+0xe0>
 8009abc:	4547      	cmp	r7, r8
 8009abe:	d126      	bne.n	8009b0e <__hexnan+0x12a>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	603b      	str	r3, [r7, #0]
 8009ac4:	2005      	movs	r0, #5
 8009ac6:	e025      	b.n	8009b14 <__hexnan+0x130>
 8009ac8:	3501      	adds	r5, #1
 8009aca:	2d08      	cmp	r5, #8
 8009acc:	f10b 0b01 	add.w	fp, fp, #1
 8009ad0:	dd06      	ble.n	8009ae0 <__hexnan+0xfc>
 8009ad2:	4544      	cmp	r4, r8
 8009ad4:	d9c3      	bls.n	8009a5e <__hexnan+0x7a>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009adc:	2501      	movs	r5, #1
 8009ade:	3c04      	subs	r4, #4
 8009ae0:	6822      	ldr	r2, [r4, #0]
 8009ae2:	f000 000f 	and.w	r0, r0, #15
 8009ae6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009aea:	6020      	str	r0, [r4, #0]
 8009aec:	e7b7      	b.n	8009a5e <__hexnan+0x7a>
 8009aee:	2508      	movs	r5, #8
 8009af0:	e7b5      	b.n	8009a5e <__hexnan+0x7a>
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0df      	beq.n	8009ab8 <__hexnan+0xd4>
 8009af8:	f1c3 0320 	rsb	r3, r3, #32
 8009afc:	f04f 32ff 	mov.w	r2, #4294967295
 8009b00:	40da      	lsrs	r2, r3
 8009b02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009b06:	4013      	ands	r3, r2
 8009b08:	f846 3c04 	str.w	r3, [r6, #-4]
 8009b0c:	e7d4      	b.n	8009ab8 <__hexnan+0xd4>
 8009b0e:	3f04      	subs	r7, #4
 8009b10:	e7d2      	b.n	8009ab8 <__hexnan+0xd4>
 8009b12:	2004      	movs	r0, #4
 8009b14:	b007      	add	sp, #28
 8009b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009b1c <malloc>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <malloc+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f000 b823 	b.w	8009b6c <_malloc_r>
 8009b26:	bf00      	nop
 8009b28:	20000278 	.word	0x20000278

08009b2c <sbrk_aligned>:
 8009b2c:	b570      	push	{r4, r5, r6, lr}
 8009b2e:	4e0e      	ldr	r6, [pc, #56]	; (8009b68 <sbrk_aligned+0x3c>)
 8009b30:	460c      	mov	r4, r1
 8009b32:	6831      	ldr	r1, [r6, #0]
 8009b34:	4605      	mov	r5, r0
 8009b36:	b911      	cbnz	r1, 8009b3e <sbrk_aligned+0x12>
 8009b38:	f000 ff90 	bl	800aa5c <_sbrk_r>
 8009b3c:	6030      	str	r0, [r6, #0]
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4628      	mov	r0, r5
 8009b42:	f000 ff8b 	bl	800aa5c <_sbrk_r>
 8009b46:	1c43      	adds	r3, r0, #1
 8009b48:	d00a      	beq.n	8009b60 <sbrk_aligned+0x34>
 8009b4a:	1cc4      	adds	r4, r0, #3
 8009b4c:	f024 0403 	bic.w	r4, r4, #3
 8009b50:	42a0      	cmp	r0, r4
 8009b52:	d007      	beq.n	8009b64 <sbrk_aligned+0x38>
 8009b54:	1a21      	subs	r1, r4, r0
 8009b56:	4628      	mov	r0, r5
 8009b58:	f000 ff80 	bl	800aa5c <_sbrk_r>
 8009b5c:	3001      	adds	r0, #1
 8009b5e:	d101      	bne.n	8009b64 <sbrk_aligned+0x38>
 8009b60:	f04f 34ff 	mov.w	r4, #4294967295
 8009b64:	4620      	mov	r0, r4
 8009b66:	bd70      	pop	{r4, r5, r6, pc}
 8009b68:	2000060c 	.word	0x2000060c

08009b6c <_malloc_r>:
 8009b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b70:	1ccd      	adds	r5, r1, #3
 8009b72:	f025 0503 	bic.w	r5, r5, #3
 8009b76:	3508      	adds	r5, #8
 8009b78:	2d0c      	cmp	r5, #12
 8009b7a:	bf38      	it	cc
 8009b7c:	250c      	movcc	r5, #12
 8009b7e:	2d00      	cmp	r5, #0
 8009b80:	4607      	mov	r7, r0
 8009b82:	db01      	blt.n	8009b88 <_malloc_r+0x1c>
 8009b84:	42a9      	cmp	r1, r5
 8009b86:	d905      	bls.n	8009b94 <_malloc_r+0x28>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	2600      	movs	r6, #0
 8009b8e:	4630      	mov	r0, r6
 8009b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c68 <_malloc_r+0xfc>
 8009b98:	f000 f87a 	bl	8009c90 <__malloc_lock>
 8009b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8009ba0:	461c      	mov	r4, r3
 8009ba2:	bb5c      	cbnz	r4, 8009bfc <_malloc_r+0x90>
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	f7ff ffc0 	bl	8009b2c <sbrk_aligned>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	4604      	mov	r4, r0
 8009bb0:	d155      	bne.n	8009c5e <_malloc_r+0xf2>
 8009bb2:	f8d8 4000 	ldr.w	r4, [r8]
 8009bb6:	4626      	mov	r6, r4
 8009bb8:	2e00      	cmp	r6, #0
 8009bba:	d145      	bne.n	8009c48 <_malloc_r+0xdc>
 8009bbc:	2c00      	cmp	r4, #0
 8009bbe:	d048      	beq.n	8009c52 <_malloc_r+0xe6>
 8009bc0:	6823      	ldr	r3, [r4, #0]
 8009bc2:	4631      	mov	r1, r6
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	eb04 0903 	add.w	r9, r4, r3
 8009bca:	f000 ff47 	bl	800aa5c <_sbrk_r>
 8009bce:	4581      	cmp	r9, r0
 8009bd0:	d13f      	bne.n	8009c52 <_malloc_r+0xe6>
 8009bd2:	6821      	ldr	r1, [r4, #0]
 8009bd4:	1a6d      	subs	r5, r5, r1
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f7ff ffa7 	bl	8009b2c <sbrk_aligned>
 8009bde:	3001      	adds	r0, #1
 8009be0:	d037      	beq.n	8009c52 <_malloc_r+0xe6>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	442b      	add	r3, r5
 8009be6:	6023      	str	r3, [r4, #0]
 8009be8:	f8d8 3000 	ldr.w	r3, [r8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d038      	beq.n	8009c62 <_malloc_r+0xf6>
 8009bf0:	685a      	ldr	r2, [r3, #4]
 8009bf2:	42a2      	cmp	r2, r4
 8009bf4:	d12b      	bne.n	8009c4e <_malloc_r+0xe2>
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	605a      	str	r2, [r3, #4]
 8009bfa:	e00f      	b.n	8009c1c <_malloc_r+0xb0>
 8009bfc:	6822      	ldr	r2, [r4, #0]
 8009bfe:	1b52      	subs	r2, r2, r5
 8009c00:	d41f      	bmi.n	8009c42 <_malloc_r+0xd6>
 8009c02:	2a0b      	cmp	r2, #11
 8009c04:	d917      	bls.n	8009c36 <_malloc_r+0xca>
 8009c06:	1961      	adds	r1, r4, r5
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	6025      	str	r5, [r4, #0]
 8009c0c:	bf18      	it	ne
 8009c0e:	6059      	strne	r1, [r3, #4]
 8009c10:	6863      	ldr	r3, [r4, #4]
 8009c12:	bf08      	it	eq
 8009c14:	f8c8 1000 	streq.w	r1, [r8]
 8009c18:	5162      	str	r2, [r4, r5]
 8009c1a:	604b      	str	r3, [r1, #4]
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f104 060b 	add.w	r6, r4, #11
 8009c22:	f000 f83b 	bl	8009c9c <__malloc_unlock>
 8009c26:	f026 0607 	bic.w	r6, r6, #7
 8009c2a:	1d23      	adds	r3, r4, #4
 8009c2c:	1af2      	subs	r2, r6, r3
 8009c2e:	d0ae      	beq.n	8009b8e <_malloc_r+0x22>
 8009c30:	1b9b      	subs	r3, r3, r6
 8009c32:	50a3      	str	r3, [r4, r2]
 8009c34:	e7ab      	b.n	8009b8e <_malloc_r+0x22>
 8009c36:	42a3      	cmp	r3, r4
 8009c38:	6862      	ldr	r2, [r4, #4]
 8009c3a:	d1dd      	bne.n	8009bf8 <_malloc_r+0x8c>
 8009c3c:	f8c8 2000 	str.w	r2, [r8]
 8009c40:	e7ec      	b.n	8009c1c <_malloc_r+0xb0>
 8009c42:	4623      	mov	r3, r4
 8009c44:	6864      	ldr	r4, [r4, #4]
 8009c46:	e7ac      	b.n	8009ba2 <_malloc_r+0x36>
 8009c48:	4634      	mov	r4, r6
 8009c4a:	6876      	ldr	r6, [r6, #4]
 8009c4c:	e7b4      	b.n	8009bb8 <_malloc_r+0x4c>
 8009c4e:	4613      	mov	r3, r2
 8009c50:	e7cc      	b.n	8009bec <_malloc_r+0x80>
 8009c52:	230c      	movs	r3, #12
 8009c54:	603b      	str	r3, [r7, #0]
 8009c56:	4638      	mov	r0, r7
 8009c58:	f000 f820 	bl	8009c9c <__malloc_unlock>
 8009c5c:	e797      	b.n	8009b8e <_malloc_r+0x22>
 8009c5e:	6025      	str	r5, [r4, #0]
 8009c60:	e7dc      	b.n	8009c1c <_malloc_r+0xb0>
 8009c62:	605b      	str	r3, [r3, #4]
 8009c64:	deff      	udf	#255	; 0xff
 8009c66:	bf00      	nop
 8009c68:	20000608 	.word	0x20000608

08009c6c <__ascii_mbtowc>:
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	b901      	cbnz	r1, 8009c72 <__ascii_mbtowc+0x6>
 8009c70:	a901      	add	r1, sp, #4
 8009c72:	b142      	cbz	r2, 8009c86 <__ascii_mbtowc+0x1a>
 8009c74:	b14b      	cbz	r3, 8009c8a <__ascii_mbtowc+0x1e>
 8009c76:	7813      	ldrb	r3, [r2, #0]
 8009c78:	600b      	str	r3, [r1, #0]
 8009c7a:	7812      	ldrb	r2, [r2, #0]
 8009c7c:	1e10      	subs	r0, r2, #0
 8009c7e:	bf18      	it	ne
 8009c80:	2001      	movne	r0, #1
 8009c82:	b002      	add	sp, #8
 8009c84:	4770      	bx	lr
 8009c86:	4610      	mov	r0, r2
 8009c88:	e7fb      	b.n	8009c82 <__ascii_mbtowc+0x16>
 8009c8a:	f06f 0001 	mvn.w	r0, #1
 8009c8e:	e7f8      	b.n	8009c82 <__ascii_mbtowc+0x16>

08009c90 <__malloc_lock>:
 8009c90:	4801      	ldr	r0, [pc, #4]	; (8009c98 <__malloc_lock+0x8>)
 8009c92:	f7fe bd03 	b.w	800869c <__retarget_lock_acquire_recursive>
 8009c96:	bf00      	nop
 8009c98:	20000604 	.word	0x20000604

08009c9c <__malloc_unlock>:
 8009c9c:	4801      	ldr	r0, [pc, #4]	; (8009ca4 <__malloc_unlock+0x8>)
 8009c9e:	f7fe bcfe 	b.w	800869e <__retarget_lock_release_recursive>
 8009ca2:	bf00      	nop
 8009ca4:	20000604 	.word	0x20000604

08009ca8 <_Balloc>:
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	69c6      	ldr	r6, [r0, #28]
 8009cac:	4604      	mov	r4, r0
 8009cae:	460d      	mov	r5, r1
 8009cb0:	b976      	cbnz	r6, 8009cd0 <_Balloc+0x28>
 8009cb2:	2010      	movs	r0, #16
 8009cb4:	f7ff ff32 	bl	8009b1c <malloc>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	61e0      	str	r0, [r4, #28]
 8009cbc:	b920      	cbnz	r0, 8009cc8 <_Balloc+0x20>
 8009cbe:	4b18      	ldr	r3, [pc, #96]	; (8009d20 <_Balloc+0x78>)
 8009cc0:	4818      	ldr	r0, [pc, #96]	; (8009d24 <_Balloc+0x7c>)
 8009cc2:	216b      	movs	r1, #107	; 0x6b
 8009cc4:	f000 feda 	bl	800aa7c <__assert_func>
 8009cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ccc:	6006      	str	r6, [r0, #0]
 8009cce:	60c6      	str	r6, [r0, #12]
 8009cd0:	69e6      	ldr	r6, [r4, #28]
 8009cd2:	68f3      	ldr	r3, [r6, #12]
 8009cd4:	b183      	cbz	r3, 8009cf8 <_Balloc+0x50>
 8009cd6:	69e3      	ldr	r3, [r4, #28]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cde:	b9b8      	cbnz	r0, 8009d10 <_Balloc+0x68>
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ce6:	1d72      	adds	r2, r6, #5
 8009ce8:	0092      	lsls	r2, r2, #2
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 fee4 	bl	800aab8 <_calloc_r>
 8009cf0:	b160      	cbz	r0, 8009d0c <_Balloc+0x64>
 8009cf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cf6:	e00e      	b.n	8009d16 <_Balloc+0x6e>
 8009cf8:	2221      	movs	r2, #33	; 0x21
 8009cfa:	2104      	movs	r1, #4
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f000 fedb 	bl	800aab8 <_calloc_r>
 8009d02:	69e3      	ldr	r3, [r4, #28]
 8009d04:	60f0      	str	r0, [r6, #12]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e4      	bne.n	8009cd6 <_Balloc+0x2e>
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	6802      	ldr	r2, [r0, #0]
 8009d12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d16:	2300      	movs	r3, #0
 8009d18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d1c:	e7f7      	b.n	8009d0e <_Balloc+0x66>
 8009d1e:	bf00      	nop
 8009d20:	0800b99f 	.word	0x0800b99f
 8009d24:	0800ba7f 	.word	0x0800ba7f

08009d28 <_Bfree>:
 8009d28:	b570      	push	{r4, r5, r6, lr}
 8009d2a:	69c6      	ldr	r6, [r0, #28]
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	b976      	cbnz	r6, 8009d50 <_Bfree+0x28>
 8009d32:	2010      	movs	r0, #16
 8009d34:	f7ff fef2 	bl	8009b1c <malloc>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	61e8      	str	r0, [r5, #28]
 8009d3c:	b920      	cbnz	r0, 8009d48 <_Bfree+0x20>
 8009d3e:	4b09      	ldr	r3, [pc, #36]	; (8009d64 <_Bfree+0x3c>)
 8009d40:	4809      	ldr	r0, [pc, #36]	; (8009d68 <_Bfree+0x40>)
 8009d42:	218f      	movs	r1, #143	; 0x8f
 8009d44:	f000 fe9a 	bl	800aa7c <__assert_func>
 8009d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d4c:	6006      	str	r6, [r0, #0]
 8009d4e:	60c6      	str	r6, [r0, #12]
 8009d50:	b13c      	cbz	r4, 8009d62 <_Bfree+0x3a>
 8009d52:	69eb      	ldr	r3, [r5, #28]
 8009d54:	6862      	ldr	r2, [r4, #4]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d5c:	6021      	str	r1, [r4, #0]
 8009d5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d62:	bd70      	pop	{r4, r5, r6, pc}
 8009d64:	0800b99f 	.word	0x0800b99f
 8009d68:	0800ba7f 	.word	0x0800ba7f

08009d6c <__multadd>:
 8009d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d70:	690d      	ldr	r5, [r1, #16]
 8009d72:	4607      	mov	r7, r0
 8009d74:	460c      	mov	r4, r1
 8009d76:	461e      	mov	r6, r3
 8009d78:	f101 0c14 	add.w	ip, r1, #20
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	f8dc 3000 	ldr.w	r3, [ip]
 8009d82:	b299      	uxth	r1, r3
 8009d84:	fb02 6101 	mla	r1, r2, r1, r6
 8009d88:	0c1e      	lsrs	r6, r3, #16
 8009d8a:	0c0b      	lsrs	r3, r1, #16
 8009d8c:	fb02 3306 	mla	r3, r2, r6, r3
 8009d90:	b289      	uxth	r1, r1
 8009d92:	3001      	adds	r0, #1
 8009d94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d98:	4285      	cmp	r5, r0
 8009d9a:	f84c 1b04 	str.w	r1, [ip], #4
 8009d9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009da2:	dcec      	bgt.n	8009d7e <__multadd+0x12>
 8009da4:	b30e      	cbz	r6, 8009dea <__multadd+0x7e>
 8009da6:	68a3      	ldr	r3, [r4, #8]
 8009da8:	42ab      	cmp	r3, r5
 8009daa:	dc19      	bgt.n	8009de0 <__multadd+0x74>
 8009dac:	6861      	ldr	r1, [r4, #4]
 8009dae:	4638      	mov	r0, r7
 8009db0:	3101      	adds	r1, #1
 8009db2:	f7ff ff79 	bl	8009ca8 <_Balloc>
 8009db6:	4680      	mov	r8, r0
 8009db8:	b928      	cbnz	r0, 8009dc6 <__multadd+0x5a>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <__multadd+0x84>)
 8009dbe:	480d      	ldr	r0, [pc, #52]	; (8009df4 <__multadd+0x88>)
 8009dc0:	21ba      	movs	r1, #186	; 0xba
 8009dc2:	f000 fe5b 	bl	800aa7c <__assert_func>
 8009dc6:	6922      	ldr	r2, [r4, #16]
 8009dc8:	3202      	adds	r2, #2
 8009dca:	f104 010c 	add.w	r1, r4, #12
 8009dce:	0092      	lsls	r2, r2, #2
 8009dd0:	300c      	adds	r0, #12
 8009dd2:	f7fe fc65 	bl	80086a0 <memcpy>
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f7ff ffa5 	bl	8009d28 <_Bfree>
 8009dde:	4644      	mov	r4, r8
 8009de0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009de4:	3501      	adds	r5, #1
 8009de6:	615e      	str	r6, [r3, #20]
 8009de8:	6125      	str	r5, [r4, #16]
 8009dea:	4620      	mov	r0, r4
 8009dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df0:	0800ba0e 	.word	0x0800ba0e
 8009df4:	0800ba7f 	.word	0x0800ba7f

08009df8 <__s2b>:
 8009df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	4615      	mov	r5, r2
 8009e00:	461f      	mov	r7, r3
 8009e02:	2209      	movs	r2, #9
 8009e04:	3308      	adds	r3, #8
 8009e06:	4606      	mov	r6, r0
 8009e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	2201      	movs	r2, #1
 8009e10:	429a      	cmp	r2, r3
 8009e12:	db09      	blt.n	8009e28 <__s2b+0x30>
 8009e14:	4630      	mov	r0, r6
 8009e16:	f7ff ff47 	bl	8009ca8 <_Balloc>
 8009e1a:	b940      	cbnz	r0, 8009e2e <__s2b+0x36>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	4b19      	ldr	r3, [pc, #100]	; (8009e84 <__s2b+0x8c>)
 8009e20:	4819      	ldr	r0, [pc, #100]	; (8009e88 <__s2b+0x90>)
 8009e22:	21d3      	movs	r1, #211	; 0xd3
 8009e24:	f000 fe2a 	bl	800aa7c <__assert_func>
 8009e28:	0052      	lsls	r2, r2, #1
 8009e2a:	3101      	adds	r1, #1
 8009e2c:	e7f0      	b.n	8009e10 <__s2b+0x18>
 8009e2e:	9b08      	ldr	r3, [sp, #32]
 8009e30:	6143      	str	r3, [r0, #20]
 8009e32:	2d09      	cmp	r5, #9
 8009e34:	f04f 0301 	mov.w	r3, #1
 8009e38:	6103      	str	r3, [r0, #16]
 8009e3a:	dd16      	ble.n	8009e6a <__s2b+0x72>
 8009e3c:	f104 0909 	add.w	r9, r4, #9
 8009e40:	46c8      	mov	r8, r9
 8009e42:	442c      	add	r4, r5
 8009e44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009e48:	4601      	mov	r1, r0
 8009e4a:	3b30      	subs	r3, #48	; 0x30
 8009e4c:	220a      	movs	r2, #10
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff ff8c 	bl	8009d6c <__multadd>
 8009e54:	45a0      	cmp	r8, r4
 8009e56:	d1f5      	bne.n	8009e44 <__s2b+0x4c>
 8009e58:	f1a5 0408 	sub.w	r4, r5, #8
 8009e5c:	444c      	add	r4, r9
 8009e5e:	1b2d      	subs	r5, r5, r4
 8009e60:	1963      	adds	r3, r4, r5
 8009e62:	42bb      	cmp	r3, r7
 8009e64:	db04      	blt.n	8009e70 <__s2b+0x78>
 8009e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e6a:	340a      	adds	r4, #10
 8009e6c:	2509      	movs	r5, #9
 8009e6e:	e7f6      	b.n	8009e5e <__s2b+0x66>
 8009e70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e74:	4601      	mov	r1, r0
 8009e76:	3b30      	subs	r3, #48	; 0x30
 8009e78:	220a      	movs	r2, #10
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f7ff ff76 	bl	8009d6c <__multadd>
 8009e80:	e7ee      	b.n	8009e60 <__s2b+0x68>
 8009e82:	bf00      	nop
 8009e84:	0800ba0e 	.word	0x0800ba0e
 8009e88:	0800ba7f 	.word	0x0800ba7f

08009e8c <__hi0bits>:
 8009e8c:	0c03      	lsrs	r3, r0, #16
 8009e8e:	041b      	lsls	r3, r3, #16
 8009e90:	b9d3      	cbnz	r3, 8009ec8 <__hi0bits+0x3c>
 8009e92:	0400      	lsls	r0, r0, #16
 8009e94:	2310      	movs	r3, #16
 8009e96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009e9a:	bf04      	itt	eq
 8009e9c:	0200      	lsleq	r0, r0, #8
 8009e9e:	3308      	addeq	r3, #8
 8009ea0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ea4:	bf04      	itt	eq
 8009ea6:	0100      	lsleq	r0, r0, #4
 8009ea8:	3304      	addeq	r3, #4
 8009eaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009eae:	bf04      	itt	eq
 8009eb0:	0080      	lsleq	r0, r0, #2
 8009eb2:	3302      	addeq	r3, #2
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	db05      	blt.n	8009ec4 <__hi0bits+0x38>
 8009eb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ebc:	f103 0301 	add.w	r3, r3, #1
 8009ec0:	bf08      	it	eq
 8009ec2:	2320      	moveq	r3, #32
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	4770      	bx	lr
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e7e4      	b.n	8009e96 <__hi0bits+0xa>

08009ecc <__lo0bits>:
 8009ecc:	6803      	ldr	r3, [r0, #0]
 8009ece:	f013 0207 	ands.w	r2, r3, #7
 8009ed2:	d00c      	beq.n	8009eee <__lo0bits+0x22>
 8009ed4:	07d9      	lsls	r1, r3, #31
 8009ed6:	d422      	bmi.n	8009f1e <__lo0bits+0x52>
 8009ed8:	079a      	lsls	r2, r3, #30
 8009eda:	bf49      	itett	mi
 8009edc:	085b      	lsrmi	r3, r3, #1
 8009ede:	089b      	lsrpl	r3, r3, #2
 8009ee0:	6003      	strmi	r3, [r0, #0]
 8009ee2:	2201      	movmi	r2, #1
 8009ee4:	bf5c      	itt	pl
 8009ee6:	6003      	strpl	r3, [r0, #0]
 8009ee8:	2202      	movpl	r2, #2
 8009eea:	4610      	mov	r0, r2
 8009eec:	4770      	bx	lr
 8009eee:	b299      	uxth	r1, r3
 8009ef0:	b909      	cbnz	r1, 8009ef6 <__lo0bits+0x2a>
 8009ef2:	0c1b      	lsrs	r3, r3, #16
 8009ef4:	2210      	movs	r2, #16
 8009ef6:	b2d9      	uxtb	r1, r3
 8009ef8:	b909      	cbnz	r1, 8009efe <__lo0bits+0x32>
 8009efa:	3208      	adds	r2, #8
 8009efc:	0a1b      	lsrs	r3, r3, #8
 8009efe:	0719      	lsls	r1, r3, #28
 8009f00:	bf04      	itt	eq
 8009f02:	091b      	lsreq	r3, r3, #4
 8009f04:	3204      	addeq	r2, #4
 8009f06:	0799      	lsls	r1, r3, #30
 8009f08:	bf04      	itt	eq
 8009f0a:	089b      	lsreq	r3, r3, #2
 8009f0c:	3202      	addeq	r2, #2
 8009f0e:	07d9      	lsls	r1, r3, #31
 8009f10:	d403      	bmi.n	8009f1a <__lo0bits+0x4e>
 8009f12:	085b      	lsrs	r3, r3, #1
 8009f14:	f102 0201 	add.w	r2, r2, #1
 8009f18:	d003      	beq.n	8009f22 <__lo0bits+0x56>
 8009f1a:	6003      	str	r3, [r0, #0]
 8009f1c:	e7e5      	b.n	8009eea <__lo0bits+0x1e>
 8009f1e:	2200      	movs	r2, #0
 8009f20:	e7e3      	b.n	8009eea <__lo0bits+0x1e>
 8009f22:	2220      	movs	r2, #32
 8009f24:	e7e1      	b.n	8009eea <__lo0bits+0x1e>
	...

08009f28 <__i2b>:
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	f7ff febb 	bl	8009ca8 <_Balloc>
 8009f32:	4602      	mov	r2, r0
 8009f34:	b928      	cbnz	r0, 8009f42 <__i2b+0x1a>
 8009f36:	4b05      	ldr	r3, [pc, #20]	; (8009f4c <__i2b+0x24>)
 8009f38:	4805      	ldr	r0, [pc, #20]	; (8009f50 <__i2b+0x28>)
 8009f3a:	f240 1145 	movw	r1, #325	; 0x145
 8009f3e:	f000 fd9d 	bl	800aa7c <__assert_func>
 8009f42:	2301      	movs	r3, #1
 8009f44:	6144      	str	r4, [r0, #20]
 8009f46:	6103      	str	r3, [r0, #16]
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	bf00      	nop
 8009f4c:	0800ba0e 	.word	0x0800ba0e
 8009f50:	0800ba7f 	.word	0x0800ba7f

08009f54 <__multiply>:
 8009f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	4691      	mov	r9, r2
 8009f5a:	690a      	ldr	r2, [r1, #16]
 8009f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	bfb8      	it	lt
 8009f64:	460b      	movlt	r3, r1
 8009f66:	460c      	mov	r4, r1
 8009f68:	bfbc      	itt	lt
 8009f6a:	464c      	movlt	r4, r9
 8009f6c:	4699      	movlt	r9, r3
 8009f6e:	6927      	ldr	r7, [r4, #16]
 8009f70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009f74:	68a3      	ldr	r3, [r4, #8]
 8009f76:	6861      	ldr	r1, [r4, #4]
 8009f78:	eb07 060a 	add.w	r6, r7, sl
 8009f7c:	42b3      	cmp	r3, r6
 8009f7e:	b085      	sub	sp, #20
 8009f80:	bfb8      	it	lt
 8009f82:	3101      	addlt	r1, #1
 8009f84:	f7ff fe90 	bl	8009ca8 <_Balloc>
 8009f88:	b930      	cbnz	r0, 8009f98 <__multiply+0x44>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	4b44      	ldr	r3, [pc, #272]	; (800a0a0 <__multiply+0x14c>)
 8009f8e:	4845      	ldr	r0, [pc, #276]	; (800a0a4 <__multiply+0x150>)
 8009f90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009f94:	f000 fd72 	bl	800aa7c <__assert_func>
 8009f98:	f100 0514 	add.w	r5, r0, #20
 8009f9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fa0:	462b      	mov	r3, r5
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	4543      	cmp	r3, r8
 8009fa6:	d321      	bcc.n	8009fec <__multiply+0x98>
 8009fa8:	f104 0314 	add.w	r3, r4, #20
 8009fac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fb0:	f109 0314 	add.w	r3, r9, #20
 8009fb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009fb8:	9202      	str	r2, [sp, #8]
 8009fba:	1b3a      	subs	r2, r7, r4
 8009fbc:	3a15      	subs	r2, #21
 8009fbe:	f022 0203 	bic.w	r2, r2, #3
 8009fc2:	3204      	adds	r2, #4
 8009fc4:	f104 0115 	add.w	r1, r4, #21
 8009fc8:	428f      	cmp	r7, r1
 8009fca:	bf38      	it	cc
 8009fcc:	2204      	movcc	r2, #4
 8009fce:	9201      	str	r2, [sp, #4]
 8009fd0:	9a02      	ldr	r2, [sp, #8]
 8009fd2:	9303      	str	r3, [sp, #12]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d80c      	bhi.n	8009ff2 <__multiply+0x9e>
 8009fd8:	2e00      	cmp	r6, #0
 8009fda:	dd03      	ble.n	8009fe4 <__multiply+0x90>
 8009fdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d05b      	beq.n	800a09c <__multiply+0x148>
 8009fe4:	6106      	str	r6, [r0, #16]
 8009fe6:	b005      	add	sp, #20
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fec:	f843 2b04 	str.w	r2, [r3], #4
 8009ff0:	e7d8      	b.n	8009fa4 <__multiply+0x50>
 8009ff2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ff6:	f1ba 0f00 	cmp.w	sl, #0
 8009ffa:	d024      	beq.n	800a046 <__multiply+0xf2>
 8009ffc:	f104 0e14 	add.w	lr, r4, #20
 800a000:	46a9      	mov	r9, r5
 800a002:	f04f 0c00 	mov.w	ip, #0
 800a006:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a00a:	f8d9 1000 	ldr.w	r1, [r9]
 800a00e:	fa1f fb82 	uxth.w	fp, r2
 800a012:	b289      	uxth	r1, r1
 800a014:	fb0a 110b 	mla	r1, sl, fp, r1
 800a018:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a01c:	f8d9 2000 	ldr.w	r2, [r9]
 800a020:	4461      	add	r1, ip
 800a022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a026:	fb0a c20b 	mla	r2, sl, fp, ip
 800a02a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a02e:	b289      	uxth	r1, r1
 800a030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a034:	4577      	cmp	r7, lr
 800a036:	f849 1b04 	str.w	r1, [r9], #4
 800a03a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a03e:	d8e2      	bhi.n	800a006 <__multiply+0xb2>
 800a040:	9a01      	ldr	r2, [sp, #4]
 800a042:	f845 c002 	str.w	ip, [r5, r2]
 800a046:	9a03      	ldr	r2, [sp, #12]
 800a048:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a04c:	3304      	adds	r3, #4
 800a04e:	f1b9 0f00 	cmp.w	r9, #0
 800a052:	d021      	beq.n	800a098 <__multiply+0x144>
 800a054:	6829      	ldr	r1, [r5, #0]
 800a056:	f104 0c14 	add.w	ip, r4, #20
 800a05a:	46ae      	mov	lr, r5
 800a05c:	f04f 0a00 	mov.w	sl, #0
 800a060:	f8bc b000 	ldrh.w	fp, [ip]
 800a064:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a068:	fb09 220b 	mla	r2, r9, fp, r2
 800a06c:	4452      	add	r2, sl
 800a06e:	b289      	uxth	r1, r1
 800a070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a074:	f84e 1b04 	str.w	r1, [lr], #4
 800a078:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a07c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a080:	f8be 1000 	ldrh.w	r1, [lr]
 800a084:	fb09 110a 	mla	r1, r9, sl, r1
 800a088:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a08c:	4567      	cmp	r7, ip
 800a08e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a092:	d8e5      	bhi.n	800a060 <__multiply+0x10c>
 800a094:	9a01      	ldr	r2, [sp, #4]
 800a096:	50a9      	str	r1, [r5, r2]
 800a098:	3504      	adds	r5, #4
 800a09a:	e799      	b.n	8009fd0 <__multiply+0x7c>
 800a09c:	3e01      	subs	r6, #1
 800a09e:	e79b      	b.n	8009fd8 <__multiply+0x84>
 800a0a0:	0800ba0e 	.word	0x0800ba0e
 800a0a4:	0800ba7f 	.word	0x0800ba7f

0800a0a8 <__pow5mult>:
 800a0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ac:	4615      	mov	r5, r2
 800a0ae:	f012 0203 	ands.w	r2, r2, #3
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	460f      	mov	r7, r1
 800a0b6:	d007      	beq.n	800a0c8 <__pow5mult+0x20>
 800a0b8:	4c25      	ldr	r4, [pc, #148]	; (800a150 <__pow5mult+0xa8>)
 800a0ba:	3a01      	subs	r2, #1
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0c2:	f7ff fe53 	bl	8009d6c <__multadd>
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	10ad      	asrs	r5, r5, #2
 800a0ca:	d03d      	beq.n	800a148 <__pow5mult+0xa0>
 800a0cc:	69f4      	ldr	r4, [r6, #28]
 800a0ce:	b97c      	cbnz	r4, 800a0f0 <__pow5mult+0x48>
 800a0d0:	2010      	movs	r0, #16
 800a0d2:	f7ff fd23 	bl	8009b1c <malloc>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	61f0      	str	r0, [r6, #28]
 800a0da:	b928      	cbnz	r0, 800a0e8 <__pow5mult+0x40>
 800a0dc:	4b1d      	ldr	r3, [pc, #116]	; (800a154 <__pow5mult+0xac>)
 800a0de:	481e      	ldr	r0, [pc, #120]	; (800a158 <__pow5mult+0xb0>)
 800a0e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a0e4:	f000 fcca 	bl	800aa7c <__assert_func>
 800a0e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0ec:	6004      	str	r4, [r0, #0]
 800a0ee:	60c4      	str	r4, [r0, #12]
 800a0f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a0f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a0f8:	b94c      	cbnz	r4, 800a10e <__pow5mult+0x66>
 800a0fa:	f240 2171 	movw	r1, #625	; 0x271
 800a0fe:	4630      	mov	r0, r6
 800a100:	f7ff ff12 	bl	8009f28 <__i2b>
 800a104:	2300      	movs	r3, #0
 800a106:	f8c8 0008 	str.w	r0, [r8, #8]
 800a10a:	4604      	mov	r4, r0
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	f04f 0900 	mov.w	r9, #0
 800a112:	07eb      	lsls	r3, r5, #31
 800a114:	d50a      	bpl.n	800a12c <__pow5mult+0x84>
 800a116:	4639      	mov	r1, r7
 800a118:	4622      	mov	r2, r4
 800a11a:	4630      	mov	r0, r6
 800a11c:	f7ff ff1a 	bl	8009f54 <__multiply>
 800a120:	4639      	mov	r1, r7
 800a122:	4680      	mov	r8, r0
 800a124:	4630      	mov	r0, r6
 800a126:	f7ff fdff 	bl	8009d28 <_Bfree>
 800a12a:	4647      	mov	r7, r8
 800a12c:	106d      	asrs	r5, r5, #1
 800a12e:	d00b      	beq.n	800a148 <__pow5mult+0xa0>
 800a130:	6820      	ldr	r0, [r4, #0]
 800a132:	b938      	cbnz	r0, 800a144 <__pow5mult+0x9c>
 800a134:	4622      	mov	r2, r4
 800a136:	4621      	mov	r1, r4
 800a138:	4630      	mov	r0, r6
 800a13a:	f7ff ff0b 	bl	8009f54 <__multiply>
 800a13e:	6020      	str	r0, [r4, #0]
 800a140:	f8c0 9000 	str.w	r9, [r0]
 800a144:	4604      	mov	r4, r0
 800a146:	e7e4      	b.n	800a112 <__pow5mult+0x6a>
 800a148:	4638      	mov	r0, r7
 800a14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a14e:	bf00      	nop
 800a150:	0800bbc8 	.word	0x0800bbc8
 800a154:	0800b99f 	.word	0x0800b99f
 800a158:	0800ba7f 	.word	0x0800ba7f

0800a15c <__lshift>:
 800a15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a160:	460c      	mov	r4, r1
 800a162:	6849      	ldr	r1, [r1, #4]
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a16a:	68a3      	ldr	r3, [r4, #8]
 800a16c:	4607      	mov	r7, r0
 800a16e:	4691      	mov	r9, r2
 800a170:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a174:	f108 0601 	add.w	r6, r8, #1
 800a178:	42b3      	cmp	r3, r6
 800a17a:	db0b      	blt.n	800a194 <__lshift+0x38>
 800a17c:	4638      	mov	r0, r7
 800a17e:	f7ff fd93 	bl	8009ca8 <_Balloc>
 800a182:	4605      	mov	r5, r0
 800a184:	b948      	cbnz	r0, 800a19a <__lshift+0x3e>
 800a186:	4602      	mov	r2, r0
 800a188:	4b28      	ldr	r3, [pc, #160]	; (800a22c <__lshift+0xd0>)
 800a18a:	4829      	ldr	r0, [pc, #164]	; (800a230 <__lshift+0xd4>)
 800a18c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a190:	f000 fc74 	bl	800aa7c <__assert_func>
 800a194:	3101      	adds	r1, #1
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	e7ee      	b.n	800a178 <__lshift+0x1c>
 800a19a:	2300      	movs	r3, #0
 800a19c:	f100 0114 	add.w	r1, r0, #20
 800a1a0:	f100 0210 	add.w	r2, r0, #16
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	4553      	cmp	r3, sl
 800a1a8:	db33      	blt.n	800a212 <__lshift+0xb6>
 800a1aa:	6920      	ldr	r0, [r4, #16]
 800a1ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1b0:	f104 0314 	add.w	r3, r4, #20
 800a1b4:	f019 091f 	ands.w	r9, r9, #31
 800a1b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a1c0:	d02b      	beq.n	800a21a <__lshift+0xbe>
 800a1c2:	f1c9 0e20 	rsb	lr, r9, #32
 800a1c6:	468a      	mov	sl, r1
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	6818      	ldr	r0, [r3, #0]
 800a1cc:	fa00 f009 	lsl.w	r0, r0, r9
 800a1d0:	4310      	orrs	r0, r2
 800a1d2:	f84a 0b04 	str.w	r0, [sl], #4
 800a1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1da:	459c      	cmp	ip, r3
 800a1dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a1e0:	d8f3      	bhi.n	800a1ca <__lshift+0x6e>
 800a1e2:	ebac 0304 	sub.w	r3, ip, r4
 800a1e6:	3b15      	subs	r3, #21
 800a1e8:	f023 0303 	bic.w	r3, r3, #3
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	f104 0015 	add.w	r0, r4, #21
 800a1f2:	4584      	cmp	ip, r0
 800a1f4:	bf38      	it	cc
 800a1f6:	2304      	movcc	r3, #4
 800a1f8:	50ca      	str	r2, [r1, r3]
 800a1fa:	b10a      	cbz	r2, 800a200 <__lshift+0xa4>
 800a1fc:	f108 0602 	add.w	r6, r8, #2
 800a200:	3e01      	subs	r6, #1
 800a202:	4638      	mov	r0, r7
 800a204:	612e      	str	r6, [r5, #16]
 800a206:	4621      	mov	r1, r4
 800a208:	f7ff fd8e 	bl	8009d28 <_Bfree>
 800a20c:	4628      	mov	r0, r5
 800a20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a212:	f842 0f04 	str.w	r0, [r2, #4]!
 800a216:	3301      	adds	r3, #1
 800a218:	e7c5      	b.n	800a1a6 <__lshift+0x4a>
 800a21a:	3904      	subs	r1, #4
 800a21c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a220:	f841 2f04 	str.w	r2, [r1, #4]!
 800a224:	459c      	cmp	ip, r3
 800a226:	d8f9      	bhi.n	800a21c <__lshift+0xc0>
 800a228:	e7ea      	b.n	800a200 <__lshift+0xa4>
 800a22a:	bf00      	nop
 800a22c:	0800ba0e 	.word	0x0800ba0e
 800a230:	0800ba7f 	.word	0x0800ba7f

0800a234 <__mcmp>:
 800a234:	b530      	push	{r4, r5, lr}
 800a236:	6902      	ldr	r2, [r0, #16]
 800a238:	690c      	ldr	r4, [r1, #16]
 800a23a:	1b12      	subs	r2, r2, r4
 800a23c:	d10e      	bne.n	800a25c <__mcmp+0x28>
 800a23e:	f100 0314 	add.w	r3, r0, #20
 800a242:	3114      	adds	r1, #20
 800a244:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a248:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a24c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a250:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a254:	42a5      	cmp	r5, r4
 800a256:	d003      	beq.n	800a260 <__mcmp+0x2c>
 800a258:	d305      	bcc.n	800a266 <__mcmp+0x32>
 800a25a:	2201      	movs	r2, #1
 800a25c:	4610      	mov	r0, r2
 800a25e:	bd30      	pop	{r4, r5, pc}
 800a260:	4283      	cmp	r3, r0
 800a262:	d3f3      	bcc.n	800a24c <__mcmp+0x18>
 800a264:	e7fa      	b.n	800a25c <__mcmp+0x28>
 800a266:	f04f 32ff 	mov.w	r2, #4294967295
 800a26a:	e7f7      	b.n	800a25c <__mcmp+0x28>

0800a26c <__mdiff>:
 800a26c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a270:	460c      	mov	r4, r1
 800a272:	4606      	mov	r6, r0
 800a274:	4611      	mov	r1, r2
 800a276:	4620      	mov	r0, r4
 800a278:	4690      	mov	r8, r2
 800a27a:	f7ff ffdb 	bl	800a234 <__mcmp>
 800a27e:	1e05      	subs	r5, r0, #0
 800a280:	d110      	bne.n	800a2a4 <__mdiff+0x38>
 800a282:	4629      	mov	r1, r5
 800a284:	4630      	mov	r0, r6
 800a286:	f7ff fd0f 	bl	8009ca8 <_Balloc>
 800a28a:	b930      	cbnz	r0, 800a29a <__mdiff+0x2e>
 800a28c:	4b3a      	ldr	r3, [pc, #232]	; (800a378 <__mdiff+0x10c>)
 800a28e:	4602      	mov	r2, r0
 800a290:	f240 2137 	movw	r1, #567	; 0x237
 800a294:	4839      	ldr	r0, [pc, #228]	; (800a37c <__mdiff+0x110>)
 800a296:	f000 fbf1 	bl	800aa7c <__assert_func>
 800a29a:	2301      	movs	r3, #1
 800a29c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a4:	bfa4      	itt	ge
 800a2a6:	4643      	movge	r3, r8
 800a2a8:	46a0      	movge	r8, r4
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2b0:	bfa6      	itte	ge
 800a2b2:	461c      	movge	r4, r3
 800a2b4:	2500      	movge	r5, #0
 800a2b6:	2501      	movlt	r5, #1
 800a2b8:	f7ff fcf6 	bl	8009ca8 <_Balloc>
 800a2bc:	b920      	cbnz	r0, 800a2c8 <__mdiff+0x5c>
 800a2be:	4b2e      	ldr	r3, [pc, #184]	; (800a378 <__mdiff+0x10c>)
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	f240 2145 	movw	r1, #581	; 0x245
 800a2c6:	e7e5      	b.n	800a294 <__mdiff+0x28>
 800a2c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a2cc:	6926      	ldr	r6, [r4, #16]
 800a2ce:	60c5      	str	r5, [r0, #12]
 800a2d0:	f104 0914 	add.w	r9, r4, #20
 800a2d4:	f108 0514 	add.w	r5, r8, #20
 800a2d8:	f100 0e14 	add.w	lr, r0, #20
 800a2dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a2e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a2e4:	f108 0210 	add.w	r2, r8, #16
 800a2e8:	46f2      	mov	sl, lr
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800a2f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a2f4:	fa11 f88b 	uxtah	r8, r1, fp
 800a2f8:	b299      	uxth	r1, r3
 800a2fa:	0c1b      	lsrs	r3, r3, #16
 800a2fc:	eba8 0801 	sub.w	r8, r8, r1
 800a300:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a304:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a308:	fa1f f888 	uxth.w	r8, r8
 800a30c:	1419      	asrs	r1, r3, #16
 800a30e:	454e      	cmp	r6, r9
 800a310:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a314:	f84a 3b04 	str.w	r3, [sl], #4
 800a318:	d8e8      	bhi.n	800a2ec <__mdiff+0x80>
 800a31a:	1b33      	subs	r3, r6, r4
 800a31c:	3b15      	subs	r3, #21
 800a31e:	f023 0303 	bic.w	r3, r3, #3
 800a322:	3304      	adds	r3, #4
 800a324:	3415      	adds	r4, #21
 800a326:	42a6      	cmp	r6, r4
 800a328:	bf38      	it	cc
 800a32a:	2304      	movcc	r3, #4
 800a32c:	441d      	add	r5, r3
 800a32e:	4473      	add	r3, lr
 800a330:	469e      	mov	lr, r3
 800a332:	462e      	mov	r6, r5
 800a334:	4566      	cmp	r6, ip
 800a336:	d30e      	bcc.n	800a356 <__mdiff+0xea>
 800a338:	f10c 0203 	add.w	r2, ip, #3
 800a33c:	1b52      	subs	r2, r2, r5
 800a33e:	f022 0203 	bic.w	r2, r2, #3
 800a342:	3d03      	subs	r5, #3
 800a344:	45ac      	cmp	ip, r5
 800a346:	bf38      	it	cc
 800a348:	2200      	movcc	r2, #0
 800a34a:	4413      	add	r3, r2
 800a34c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a350:	b17a      	cbz	r2, 800a372 <__mdiff+0x106>
 800a352:	6107      	str	r7, [r0, #16]
 800a354:	e7a4      	b.n	800a2a0 <__mdiff+0x34>
 800a356:	f856 8b04 	ldr.w	r8, [r6], #4
 800a35a:	fa11 f288 	uxtah	r2, r1, r8
 800a35e:	1414      	asrs	r4, r2, #16
 800a360:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a364:	b292      	uxth	r2, r2
 800a366:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a36a:	f84e 2b04 	str.w	r2, [lr], #4
 800a36e:	1421      	asrs	r1, r4, #16
 800a370:	e7e0      	b.n	800a334 <__mdiff+0xc8>
 800a372:	3f01      	subs	r7, #1
 800a374:	e7ea      	b.n	800a34c <__mdiff+0xe0>
 800a376:	bf00      	nop
 800a378:	0800ba0e 	.word	0x0800ba0e
 800a37c:	0800ba7f 	.word	0x0800ba7f

0800a380 <__ulp>:
 800a380:	b082      	sub	sp, #8
 800a382:	ed8d 0b00 	vstr	d0, [sp]
 800a386:	9a01      	ldr	r2, [sp, #4]
 800a388:	4b0f      	ldr	r3, [pc, #60]	; (800a3c8 <__ulp+0x48>)
 800a38a:	4013      	ands	r3, r2
 800a38c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a390:	2b00      	cmp	r3, #0
 800a392:	dc08      	bgt.n	800a3a6 <__ulp+0x26>
 800a394:	425b      	negs	r3, r3
 800a396:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a39a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a39e:	da04      	bge.n	800a3aa <__ulp+0x2a>
 800a3a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a3a4:	4113      	asrs	r3, r2
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	e008      	b.n	800a3bc <__ulp+0x3c>
 800a3aa:	f1a2 0314 	sub.w	r3, r2, #20
 800a3ae:	2b1e      	cmp	r3, #30
 800a3b0:	bfda      	itte	le
 800a3b2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a3b6:	40da      	lsrle	r2, r3
 800a3b8:	2201      	movgt	r2, #1
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	ec41 0b10 	vmov	d0, r0, r1
 800a3c4:	b002      	add	sp, #8
 800a3c6:	4770      	bx	lr
 800a3c8:	7ff00000 	.word	0x7ff00000

0800a3cc <__b2d>:
 800a3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d0:	6906      	ldr	r6, [r0, #16]
 800a3d2:	f100 0814 	add.w	r8, r0, #20
 800a3d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a3da:	1f37      	subs	r7, r6, #4
 800a3dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	f7ff fd53 	bl	8009e8c <__hi0bits>
 800a3e6:	f1c0 0320 	rsb	r3, r0, #32
 800a3ea:	280a      	cmp	r0, #10
 800a3ec:	600b      	str	r3, [r1, #0]
 800a3ee:	491b      	ldr	r1, [pc, #108]	; (800a45c <__b2d+0x90>)
 800a3f0:	dc15      	bgt.n	800a41e <__b2d+0x52>
 800a3f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a3f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a3fa:	45b8      	cmp	r8, r7
 800a3fc:	ea43 0501 	orr.w	r5, r3, r1
 800a400:	bf34      	ite	cc
 800a402:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a406:	2300      	movcs	r3, #0
 800a408:	3015      	adds	r0, #21
 800a40a:	fa02 f000 	lsl.w	r0, r2, r0
 800a40e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a412:	4303      	orrs	r3, r0
 800a414:	461c      	mov	r4, r3
 800a416:	ec45 4b10 	vmov	d0, r4, r5
 800a41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a41e:	45b8      	cmp	r8, r7
 800a420:	bf3a      	itte	cc
 800a422:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a426:	f1a6 0708 	subcc.w	r7, r6, #8
 800a42a:	2300      	movcs	r3, #0
 800a42c:	380b      	subs	r0, #11
 800a42e:	d012      	beq.n	800a456 <__b2d+0x8a>
 800a430:	f1c0 0120 	rsb	r1, r0, #32
 800a434:	fa23 f401 	lsr.w	r4, r3, r1
 800a438:	4082      	lsls	r2, r0
 800a43a:	4322      	orrs	r2, r4
 800a43c:	4547      	cmp	r7, r8
 800a43e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a442:	bf8c      	ite	hi
 800a444:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a448:	2200      	movls	r2, #0
 800a44a:	4083      	lsls	r3, r0
 800a44c:	40ca      	lsrs	r2, r1
 800a44e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a452:	4313      	orrs	r3, r2
 800a454:	e7de      	b.n	800a414 <__b2d+0x48>
 800a456:	ea42 0501 	orr.w	r5, r2, r1
 800a45a:	e7db      	b.n	800a414 <__b2d+0x48>
 800a45c:	3ff00000 	.word	0x3ff00000

0800a460 <__d2b>:
 800a460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a464:	460f      	mov	r7, r1
 800a466:	2101      	movs	r1, #1
 800a468:	ec59 8b10 	vmov	r8, r9, d0
 800a46c:	4616      	mov	r6, r2
 800a46e:	f7ff fc1b 	bl	8009ca8 <_Balloc>
 800a472:	4604      	mov	r4, r0
 800a474:	b930      	cbnz	r0, 800a484 <__d2b+0x24>
 800a476:	4602      	mov	r2, r0
 800a478:	4b24      	ldr	r3, [pc, #144]	; (800a50c <__d2b+0xac>)
 800a47a:	4825      	ldr	r0, [pc, #148]	; (800a510 <__d2b+0xb0>)
 800a47c:	f240 310f 	movw	r1, #783	; 0x30f
 800a480:	f000 fafc 	bl	800aa7c <__assert_func>
 800a484:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a48c:	bb2d      	cbnz	r5, 800a4da <__d2b+0x7a>
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	f1b8 0300 	subs.w	r3, r8, #0
 800a494:	d026      	beq.n	800a4e4 <__d2b+0x84>
 800a496:	4668      	mov	r0, sp
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	f7ff fd17 	bl	8009ecc <__lo0bits>
 800a49e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a4a2:	b1e8      	cbz	r0, 800a4e0 <__d2b+0x80>
 800a4a4:	f1c0 0320 	rsb	r3, r0, #32
 800a4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	40c2      	lsrs	r2, r0
 800a4b0:	6163      	str	r3, [r4, #20]
 800a4b2:	9201      	str	r2, [sp, #4]
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	61a3      	str	r3, [r4, #24]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bf14      	ite	ne
 800a4bc:	2202      	movne	r2, #2
 800a4be:	2201      	moveq	r2, #1
 800a4c0:	6122      	str	r2, [r4, #16]
 800a4c2:	b1bd      	cbz	r5, 800a4f4 <__d2b+0x94>
 800a4c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a4c8:	4405      	add	r5, r0
 800a4ca:	603d      	str	r5, [r7, #0]
 800a4cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4d0:	6030      	str	r0, [r6, #0]
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	b003      	add	sp, #12
 800a4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4de:	e7d6      	b.n	800a48e <__d2b+0x2e>
 800a4e0:	6161      	str	r1, [r4, #20]
 800a4e2:	e7e7      	b.n	800a4b4 <__d2b+0x54>
 800a4e4:	a801      	add	r0, sp, #4
 800a4e6:	f7ff fcf1 	bl	8009ecc <__lo0bits>
 800a4ea:	9b01      	ldr	r3, [sp, #4]
 800a4ec:	6163      	str	r3, [r4, #20]
 800a4ee:	3020      	adds	r0, #32
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	e7e5      	b.n	800a4c0 <__d2b+0x60>
 800a4f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a4fc:	6038      	str	r0, [r7, #0]
 800a4fe:	6918      	ldr	r0, [r3, #16]
 800a500:	f7ff fcc4 	bl	8009e8c <__hi0bits>
 800a504:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a508:	e7e2      	b.n	800a4d0 <__d2b+0x70>
 800a50a:	bf00      	nop
 800a50c:	0800ba0e 	.word	0x0800ba0e
 800a510:	0800ba7f 	.word	0x0800ba7f

0800a514 <__ratio>:
 800a514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	4688      	mov	r8, r1
 800a51a:	4669      	mov	r1, sp
 800a51c:	4681      	mov	r9, r0
 800a51e:	f7ff ff55 	bl	800a3cc <__b2d>
 800a522:	a901      	add	r1, sp, #4
 800a524:	4640      	mov	r0, r8
 800a526:	ec55 4b10 	vmov	r4, r5, d0
 800a52a:	f7ff ff4f 	bl	800a3cc <__b2d>
 800a52e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a532:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a536:	eba3 0c02 	sub.w	ip, r3, r2
 800a53a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a53e:	1a9b      	subs	r3, r3, r2
 800a540:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a544:	ec51 0b10 	vmov	r0, r1, d0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bfd6      	itet	le
 800a54c:	460a      	movle	r2, r1
 800a54e:	462a      	movgt	r2, r5
 800a550:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a554:	468b      	mov	fp, r1
 800a556:	462f      	mov	r7, r5
 800a558:	bfd4      	ite	le
 800a55a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a55e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a562:	4620      	mov	r0, r4
 800a564:	ee10 2a10 	vmov	r2, s0
 800a568:	465b      	mov	r3, fp
 800a56a:	4639      	mov	r1, r7
 800a56c:	f7f6 f976 	bl	800085c <__aeabi_ddiv>
 800a570:	ec41 0b10 	vmov	d0, r0, r1
 800a574:	b003      	add	sp, #12
 800a576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a57a <__copybits>:
 800a57a:	3901      	subs	r1, #1
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	1149      	asrs	r1, r1, #5
 800a580:	6914      	ldr	r4, [r2, #16]
 800a582:	3101      	adds	r1, #1
 800a584:	f102 0314 	add.w	r3, r2, #20
 800a588:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a58c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a590:	1f05      	subs	r5, r0, #4
 800a592:	42a3      	cmp	r3, r4
 800a594:	d30c      	bcc.n	800a5b0 <__copybits+0x36>
 800a596:	1aa3      	subs	r3, r4, r2
 800a598:	3b11      	subs	r3, #17
 800a59a:	f023 0303 	bic.w	r3, r3, #3
 800a59e:	3211      	adds	r2, #17
 800a5a0:	42a2      	cmp	r2, r4
 800a5a2:	bf88      	it	hi
 800a5a4:	2300      	movhi	r3, #0
 800a5a6:	4418      	add	r0, r3
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4288      	cmp	r0, r1
 800a5ac:	d305      	bcc.n	800a5ba <__copybits+0x40>
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a5b4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a5b8:	e7eb      	b.n	800a592 <__copybits+0x18>
 800a5ba:	f840 3b04 	str.w	r3, [r0], #4
 800a5be:	e7f4      	b.n	800a5aa <__copybits+0x30>

0800a5c0 <__any_on>:
 800a5c0:	f100 0214 	add.w	r2, r0, #20
 800a5c4:	6900      	ldr	r0, [r0, #16]
 800a5c6:	114b      	asrs	r3, r1, #5
 800a5c8:	4298      	cmp	r0, r3
 800a5ca:	b510      	push	{r4, lr}
 800a5cc:	db11      	blt.n	800a5f2 <__any_on+0x32>
 800a5ce:	dd0a      	ble.n	800a5e6 <__any_on+0x26>
 800a5d0:	f011 011f 	ands.w	r1, r1, #31
 800a5d4:	d007      	beq.n	800a5e6 <__any_on+0x26>
 800a5d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a5da:	fa24 f001 	lsr.w	r0, r4, r1
 800a5de:	fa00 f101 	lsl.w	r1, r0, r1
 800a5e2:	428c      	cmp	r4, r1
 800a5e4:	d10b      	bne.n	800a5fe <__any_on+0x3e>
 800a5e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d803      	bhi.n	800a5f6 <__any_on+0x36>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	bd10      	pop	{r4, pc}
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	e7f7      	b.n	800a5e6 <__any_on+0x26>
 800a5f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5fa:	2900      	cmp	r1, #0
 800a5fc:	d0f5      	beq.n	800a5ea <__any_on+0x2a>
 800a5fe:	2001      	movs	r0, #1
 800a600:	e7f6      	b.n	800a5f0 <__any_on+0x30>

0800a602 <__ascii_wctomb>:
 800a602:	b149      	cbz	r1, 800a618 <__ascii_wctomb+0x16>
 800a604:	2aff      	cmp	r2, #255	; 0xff
 800a606:	bf85      	ittet	hi
 800a608:	238a      	movhi	r3, #138	; 0x8a
 800a60a:	6003      	strhi	r3, [r0, #0]
 800a60c:	700a      	strbls	r2, [r1, #0]
 800a60e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a612:	bf98      	it	ls
 800a614:	2001      	movls	r0, #1
 800a616:	4770      	bx	lr
 800a618:	4608      	mov	r0, r1
 800a61a:	4770      	bx	lr

0800a61c <__ssputs_r>:
 800a61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	688e      	ldr	r6, [r1, #8]
 800a622:	461f      	mov	r7, r3
 800a624:	42be      	cmp	r6, r7
 800a626:	680b      	ldr	r3, [r1, #0]
 800a628:	4682      	mov	sl, r0
 800a62a:	460c      	mov	r4, r1
 800a62c:	4690      	mov	r8, r2
 800a62e:	d82c      	bhi.n	800a68a <__ssputs_r+0x6e>
 800a630:	898a      	ldrh	r2, [r1, #12]
 800a632:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a636:	d026      	beq.n	800a686 <__ssputs_r+0x6a>
 800a638:	6965      	ldr	r5, [r4, #20]
 800a63a:	6909      	ldr	r1, [r1, #16]
 800a63c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a640:	eba3 0901 	sub.w	r9, r3, r1
 800a644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a648:	1c7b      	adds	r3, r7, #1
 800a64a:	444b      	add	r3, r9
 800a64c:	106d      	asrs	r5, r5, #1
 800a64e:	429d      	cmp	r5, r3
 800a650:	bf38      	it	cc
 800a652:	461d      	movcc	r5, r3
 800a654:	0553      	lsls	r3, r2, #21
 800a656:	d527      	bpl.n	800a6a8 <__ssputs_r+0x8c>
 800a658:	4629      	mov	r1, r5
 800a65a:	f7ff fa87 	bl	8009b6c <_malloc_r>
 800a65e:	4606      	mov	r6, r0
 800a660:	b360      	cbz	r0, 800a6bc <__ssputs_r+0xa0>
 800a662:	6921      	ldr	r1, [r4, #16]
 800a664:	464a      	mov	r2, r9
 800a666:	f7fe f81b 	bl	80086a0 <memcpy>
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	6126      	str	r6, [r4, #16]
 800a678:	6165      	str	r5, [r4, #20]
 800a67a:	444e      	add	r6, r9
 800a67c:	eba5 0509 	sub.w	r5, r5, r9
 800a680:	6026      	str	r6, [r4, #0]
 800a682:	60a5      	str	r5, [r4, #8]
 800a684:	463e      	mov	r6, r7
 800a686:	42be      	cmp	r6, r7
 800a688:	d900      	bls.n	800a68c <__ssputs_r+0x70>
 800a68a:	463e      	mov	r6, r7
 800a68c:	6820      	ldr	r0, [r4, #0]
 800a68e:	4632      	mov	r2, r6
 800a690:	4641      	mov	r1, r8
 800a692:	f000 f9c9 	bl	800aa28 <memmove>
 800a696:	68a3      	ldr	r3, [r4, #8]
 800a698:	1b9b      	subs	r3, r3, r6
 800a69a:	60a3      	str	r3, [r4, #8]
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	4433      	add	r3, r6
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	f000 fa1b 	bl	800aae4 <_realloc_r>
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d1e0      	bne.n	800a676 <__ssputs_r+0x5a>
 800a6b4:	6921      	ldr	r1, [r4, #16]
 800a6b6:	4650      	mov	r0, sl
 800a6b8:	f7fe fe8c 	bl	80093d4 <_free_r>
 800a6bc:	230c      	movs	r3, #12
 800a6be:	f8ca 3000 	str.w	r3, [sl]
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6c8:	81a3      	strh	r3, [r4, #12]
 800a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ce:	e7e9      	b.n	800a6a4 <__ssputs_r+0x88>

0800a6d0 <_svfiprintf_r>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	4698      	mov	r8, r3
 800a6d6:	898b      	ldrh	r3, [r1, #12]
 800a6d8:	061b      	lsls	r3, r3, #24
 800a6da:	b09d      	sub	sp, #116	; 0x74
 800a6dc:	4607      	mov	r7, r0
 800a6de:	460d      	mov	r5, r1
 800a6e0:	4614      	mov	r4, r2
 800a6e2:	d50e      	bpl.n	800a702 <_svfiprintf_r+0x32>
 800a6e4:	690b      	ldr	r3, [r1, #16]
 800a6e6:	b963      	cbnz	r3, 800a702 <_svfiprintf_r+0x32>
 800a6e8:	2140      	movs	r1, #64	; 0x40
 800a6ea:	f7ff fa3f 	bl	8009b6c <_malloc_r>
 800a6ee:	6028      	str	r0, [r5, #0]
 800a6f0:	6128      	str	r0, [r5, #16]
 800a6f2:	b920      	cbnz	r0, 800a6fe <_svfiprintf_r+0x2e>
 800a6f4:	230c      	movs	r3, #12
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	e0d0      	b.n	800a8a0 <_svfiprintf_r+0x1d0>
 800a6fe:	2340      	movs	r3, #64	; 0x40
 800a700:	616b      	str	r3, [r5, #20]
 800a702:	2300      	movs	r3, #0
 800a704:	9309      	str	r3, [sp, #36]	; 0x24
 800a706:	2320      	movs	r3, #32
 800a708:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a70c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a710:	2330      	movs	r3, #48	; 0x30
 800a712:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8b8 <_svfiprintf_r+0x1e8>
 800a716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a71a:	f04f 0901 	mov.w	r9, #1
 800a71e:	4623      	mov	r3, r4
 800a720:	469a      	mov	sl, r3
 800a722:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a726:	b10a      	cbz	r2, 800a72c <_svfiprintf_r+0x5c>
 800a728:	2a25      	cmp	r2, #37	; 0x25
 800a72a:	d1f9      	bne.n	800a720 <_svfiprintf_r+0x50>
 800a72c:	ebba 0b04 	subs.w	fp, sl, r4
 800a730:	d00b      	beq.n	800a74a <_svfiprintf_r+0x7a>
 800a732:	465b      	mov	r3, fp
 800a734:	4622      	mov	r2, r4
 800a736:	4629      	mov	r1, r5
 800a738:	4638      	mov	r0, r7
 800a73a:	f7ff ff6f 	bl	800a61c <__ssputs_r>
 800a73e:	3001      	adds	r0, #1
 800a740:	f000 80a9 	beq.w	800a896 <_svfiprintf_r+0x1c6>
 800a744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a746:	445a      	add	r2, fp
 800a748:	9209      	str	r2, [sp, #36]	; 0x24
 800a74a:	f89a 3000 	ldrb.w	r3, [sl]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 80a1 	beq.w	800a896 <_svfiprintf_r+0x1c6>
 800a754:	2300      	movs	r3, #0
 800a756:	f04f 32ff 	mov.w	r2, #4294967295
 800a75a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a75e:	f10a 0a01 	add.w	sl, sl, #1
 800a762:	9304      	str	r3, [sp, #16]
 800a764:	9307      	str	r3, [sp, #28]
 800a766:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a76a:	931a      	str	r3, [sp, #104]	; 0x68
 800a76c:	4654      	mov	r4, sl
 800a76e:	2205      	movs	r2, #5
 800a770:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a774:	4850      	ldr	r0, [pc, #320]	; (800a8b8 <_svfiprintf_r+0x1e8>)
 800a776:	f7f5 fd33 	bl	80001e0 <memchr>
 800a77a:	9a04      	ldr	r2, [sp, #16]
 800a77c:	b9d8      	cbnz	r0, 800a7b6 <_svfiprintf_r+0xe6>
 800a77e:	06d0      	lsls	r0, r2, #27
 800a780:	bf44      	itt	mi
 800a782:	2320      	movmi	r3, #32
 800a784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a788:	0711      	lsls	r1, r2, #28
 800a78a:	bf44      	itt	mi
 800a78c:	232b      	movmi	r3, #43	; 0x2b
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a792:	f89a 3000 	ldrb.w	r3, [sl]
 800a796:	2b2a      	cmp	r3, #42	; 0x2a
 800a798:	d015      	beq.n	800a7c6 <_svfiprintf_r+0xf6>
 800a79a:	9a07      	ldr	r2, [sp, #28]
 800a79c:	4654      	mov	r4, sl
 800a79e:	2000      	movs	r0, #0
 800a7a0:	f04f 0c0a 	mov.w	ip, #10
 800a7a4:	4621      	mov	r1, r4
 800a7a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7aa:	3b30      	subs	r3, #48	; 0x30
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	d94d      	bls.n	800a84c <_svfiprintf_r+0x17c>
 800a7b0:	b1b0      	cbz	r0, 800a7e0 <_svfiprintf_r+0x110>
 800a7b2:	9207      	str	r2, [sp, #28]
 800a7b4:	e014      	b.n	800a7e0 <_svfiprintf_r+0x110>
 800a7b6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	46a2      	mov	sl, r4
 800a7c4:	e7d2      	b.n	800a76c <_svfiprintf_r+0x9c>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	1d19      	adds	r1, r3, #4
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	9103      	str	r1, [sp, #12]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	bfbb      	ittet	lt
 800a7d2:	425b      	neglt	r3, r3
 800a7d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d8:	9307      	strge	r3, [sp, #28]
 800a7da:	9307      	strlt	r3, [sp, #28]
 800a7dc:	bfb8      	it	lt
 800a7de:	9204      	strlt	r2, [sp, #16]
 800a7e0:	7823      	ldrb	r3, [r4, #0]
 800a7e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a7e4:	d10c      	bne.n	800a800 <_svfiprintf_r+0x130>
 800a7e6:	7863      	ldrb	r3, [r4, #1]
 800a7e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ea:	d134      	bne.n	800a856 <_svfiprintf_r+0x186>
 800a7ec:	9b03      	ldr	r3, [sp, #12]
 800a7ee:	1d1a      	adds	r2, r3, #4
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	9203      	str	r2, [sp, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	bfb8      	it	lt
 800a7f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7fc:	3402      	adds	r4, #2
 800a7fe:	9305      	str	r3, [sp, #20]
 800a800:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a8c8 <_svfiprintf_r+0x1f8>
 800a804:	7821      	ldrb	r1, [r4, #0]
 800a806:	2203      	movs	r2, #3
 800a808:	4650      	mov	r0, sl
 800a80a:	f7f5 fce9 	bl	80001e0 <memchr>
 800a80e:	b138      	cbz	r0, 800a820 <_svfiprintf_r+0x150>
 800a810:	9b04      	ldr	r3, [sp, #16]
 800a812:	eba0 000a 	sub.w	r0, r0, sl
 800a816:	2240      	movs	r2, #64	; 0x40
 800a818:	4082      	lsls	r2, r0
 800a81a:	4313      	orrs	r3, r2
 800a81c:	3401      	adds	r4, #1
 800a81e:	9304      	str	r3, [sp, #16]
 800a820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a824:	4825      	ldr	r0, [pc, #148]	; (800a8bc <_svfiprintf_r+0x1ec>)
 800a826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a82a:	2206      	movs	r2, #6
 800a82c:	f7f5 fcd8 	bl	80001e0 <memchr>
 800a830:	2800      	cmp	r0, #0
 800a832:	d038      	beq.n	800a8a6 <_svfiprintf_r+0x1d6>
 800a834:	4b22      	ldr	r3, [pc, #136]	; (800a8c0 <_svfiprintf_r+0x1f0>)
 800a836:	bb1b      	cbnz	r3, 800a880 <_svfiprintf_r+0x1b0>
 800a838:	9b03      	ldr	r3, [sp, #12]
 800a83a:	3307      	adds	r3, #7
 800a83c:	f023 0307 	bic.w	r3, r3, #7
 800a840:	3308      	adds	r3, #8
 800a842:	9303      	str	r3, [sp, #12]
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	4433      	add	r3, r6
 800a848:	9309      	str	r3, [sp, #36]	; 0x24
 800a84a:	e768      	b.n	800a71e <_svfiprintf_r+0x4e>
 800a84c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a850:	460c      	mov	r4, r1
 800a852:	2001      	movs	r0, #1
 800a854:	e7a6      	b.n	800a7a4 <_svfiprintf_r+0xd4>
 800a856:	2300      	movs	r3, #0
 800a858:	3401      	adds	r4, #1
 800a85a:	9305      	str	r3, [sp, #20]
 800a85c:	4619      	mov	r1, r3
 800a85e:	f04f 0c0a 	mov.w	ip, #10
 800a862:	4620      	mov	r0, r4
 800a864:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a868:	3a30      	subs	r2, #48	; 0x30
 800a86a:	2a09      	cmp	r2, #9
 800a86c:	d903      	bls.n	800a876 <_svfiprintf_r+0x1a6>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d0c6      	beq.n	800a800 <_svfiprintf_r+0x130>
 800a872:	9105      	str	r1, [sp, #20]
 800a874:	e7c4      	b.n	800a800 <_svfiprintf_r+0x130>
 800a876:	fb0c 2101 	mla	r1, ip, r1, r2
 800a87a:	4604      	mov	r4, r0
 800a87c:	2301      	movs	r3, #1
 800a87e:	e7f0      	b.n	800a862 <_svfiprintf_r+0x192>
 800a880:	ab03      	add	r3, sp, #12
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	462a      	mov	r2, r5
 800a886:	4b0f      	ldr	r3, [pc, #60]	; (800a8c4 <_svfiprintf_r+0x1f4>)
 800a888:	a904      	add	r1, sp, #16
 800a88a:	4638      	mov	r0, r7
 800a88c:	f7fc ff64 	bl	8007758 <_printf_float>
 800a890:	1c42      	adds	r2, r0, #1
 800a892:	4606      	mov	r6, r0
 800a894:	d1d6      	bne.n	800a844 <_svfiprintf_r+0x174>
 800a896:	89ab      	ldrh	r3, [r5, #12]
 800a898:	065b      	lsls	r3, r3, #25
 800a89a:	f53f af2d 	bmi.w	800a6f8 <_svfiprintf_r+0x28>
 800a89e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a0:	b01d      	add	sp, #116	; 0x74
 800a8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a6:	ab03      	add	r3, sp, #12
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	462a      	mov	r2, r5
 800a8ac:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <_svfiprintf_r+0x1f4>)
 800a8ae:	a904      	add	r1, sp, #16
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7fd f9f5 	bl	8007ca0 <_printf_i>
 800a8b6:	e7eb      	b.n	800a890 <_svfiprintf_r+0x1c0>
 800a8b8:	0800bbd4 	.word	0x0800bbd4
 800a8bc:	0800bbde 	.word	0x0800bbde
 800a8c0:	08007759 	.word	0x08007759
 800a8c4:	0800a61d 	.word	0x0800a61d
 800a8c8:	0800bbda 	.word	0x0800bbda

0800a8cc <__sflush_r>:
 800a8cc:	898a      	ldrh	r2, [r1, #12]
 800a8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	0710      	lsls	r0, r2, #28
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	d458      	bmi.n	800a98c <__sflush_r+0xc0>
 800a8da:	684b      	ldr	r3, [r1, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	dc05      	bgt.n	800a8ec <__sflush_r+0x20>
 800a8e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	dc02      	bgt.n	800a8ec <__sflush_r+0x20>
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ee:	2e00      	cmp	r6, #0
 800a8f0:	d0f9      	beq.n	800a8e6 <__sflush_r+0x1a>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8f8:	682f      	ldr	r7, [r5, #0]
 800a8fa:	6a21      	ldr	r1, [r4, #32]
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	d032      	beq.n	800a966 <__sflush_r+0x9a>
 800a900:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	075a      	lsls	r2, r3, #29
 800a906:	d505      	bpl.n	800a914 <__sflush_r+0x48>
 800a908:	6863      	ldr	r3, [r4, #4]
 800a90a:	1ac0      	subs	r0, r0, r3
 800a90c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a90e:	b10b      	cbz	r3, 800a914 <__sflush_r+0x48>
 800a910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a912:	1ac0      	subs	r0, r0, r3
 800a914:	2300      	movs	r3, #0
 800a916:	4602      	mov	r2, r0
 800a918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a91a:	6a21      	ldr	r1, [r4, #32]
 800a91c:	4628      	mov	r0, r5
 800a91e:	47b0      	blx	r6
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	d106      	bne.n	800a934 <__sflush_r+0x68>
 800a926:	6829      	ldr	r1, [r5, #0]
 800a928:	291d      	cmp	r1, #29
 800a92a:	d82b      	bhi.n	800a984 <__sflush_r+0xb8>
 800a92c:	4a29      	ldr	r2, [pc, #164]	; (800a9d4 <__sflush_r+0x108>)
 800a92e:	410a      	asrs	r2, r1
 800a930:	07d6      	lsls	r6, r2, #31
 800a932:	d427      	bmi.n	800a984 <__sflush_r+0xb8>
 800a934:	2200      	movs	r2, #0
 800a936:	6062      	str	r2, [r4, #4]
 800a938:	04d9      	lsls	r1, r3, #19
 800a93a:	6922      	ldr	r2, [r4, #16]
 800a93c:	6022      	str	r2, [r4, #0]
 800a93e:	d504      	bpl.n	800a94a <__sflush_r+0x7e>
 800a940:	1c42      	adds	r2, r0, #1
 800a942:	d101      	bne.n	800a948 <__sflush_r+0x7c>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b903      	cbnz	r3, 800a94a <__sflush_r+0x7e>
 800a948:	6560      	str	r0, [r4, #84]	; 0x54
 800a94a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94c:	602f      	str	r7, [r5, #0]
 800a94e:	2900      	cmp	r1, #0
 800a950:	d0c9      	beq.n	800a8e6 <__sflush_r+0x1a>
 800a952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a956:	4299      	cmp	r1, r3
 800a958:	d002      	beq.n	800a960 <__sflush_r+0x94>
 800a95a:	4628      	mov	r0, r5
 800a95c:	f7fe fd3a 	bl	80093d4 <_free_r>
 800a960:	2000      	movs	r0, #0
 800a962:	6360      	str	r0, [r4, #52]	; 0x34
 800a964:	e7c0      	b.n	800a8e8 <__sflush_r+0x1c>
 800a966:	2301      	movs	r3, #1
 800a968:	4628      	mov	r0, r5
 800a96a:	47b0      	blx	r6
 800a96c:	1c41      	adds	r1, r0, #1
 800a96e:	d1c8      	bne.n	800a902 <__sflush_r+0x36>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0c5      	beq.n	800a902 <__sflush_r+0x36>
 800a976:	2b1d      	cmp	r3, #29
 800a978:	d001      	beq.n	800a97e <__sflush_r+0xb2>
 800a97a:	2b16      	cmp	r3, #22
 800a97c:	d101      	bne.n	800a982 <__sflush_r+0xb6>
 800a97e:	602f      	str	r7, [r5, #0]
 800a980:	e7b1      	b.n	800a8e6 <__sflush_r+0x1a>
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	e7ad      	b.n	800a8e8 <__sflush_r+0x1c>
 800a98c:	690f      	ldr	r7, [r1, #16]
 800a98e:	2f00      	cmp	r7, #0
 800a990:	d0a9      	beq.n	800a8e6 <__sflush_r+0x1a>
 800a992:	0793      	lsls	r3, r2, #30
 800a994:	680e      	ldr	r6, [r1, #0]
 800a996:	bf08      	it	eq
 800a998:	694b      	ldreq	r3, [r1, #20]
 800a99a:	600f      	str	r7, [r1, #0]
 800a99c:	bf18      	it	ne
 800a99e:	2300      	movne	r3, #0
 800a9a0:	eba6 0807 	sub.w	r8, r6, r7
 800a9a4:	608b      	str	r3, [r1, #8]
 800a9a6:	f1b8 0f00 	cmp.w	r8, #0
 800a9aa:	dd9c      	ble.n	800a8e6 <__sflush_r+0x1a>
 800a9ac:	6a21      	ldr	r1, [r4, #32]
 800a9ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9b0:	4643      	mov	r3, r8
 800a9b2:	463a      	mov	r2, r7
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b0      	blx	r6
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	dc06      	bgt.n	800a9ca <__sflush_r+0xfe>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	e78e      	b.n	800a8e8 <__sflush_r+0x1c>
 800a9ca:	4407      	add	r7, r0
 800a9cc:	eba8 0800 	sub.w	r8, r8, r0
 800a9d0:	e7e9      	b.n	800a9a6 <__sflush_r+0xda>
 800a9d2:	bf00      	nop
 800a9d4:	dfbffffe 	.word	0xdfbffffe

0800a9d8 <_fflush_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	690b      	ldr	r3, [r1, #16]
 800a9dc:	4605      	mov	r5, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	b913      	cbnz	r3, 800a9e8 <_fflush_r+0x10>
 800a9e2:	2500      	movs	r5, #0
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	b118      	cbz	r0, 800a9f2 <_fflush_r+0x1a>
 800a9ea:	6a03      	ldr	r3, [r0, #32]
 800a9ec:	b90b      	cbnz	r3, 800a9f2 <_fflush_r+0x1a>
 800a9ee:	f7fd fd03 	bl	80083f8 <__sinit>
 800a9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d0f3      	beq.n	800a9e2 <_fflush_r+0xa>
 800a9fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9fc:	07d0      	lsls	r0, r2, #31
 800a9fe:	d404      	bmi.n	800aa0a <_fflush_r+0x32>
 800aa00:	0599      	lsls	r1, r3, #22
 800aa02:	d402      	bmi.n	800aa0a <_fflush_r+0x32>
 800aa04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa06:	f7fd fe49 	bl	800869c <__retarget_lock_acquire_recursive>
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	f7ff ff5d 	bl	800a8cc <__sflush_r>
 800aa12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa14:	07da      	lsls	r2, r3, #31
 800aa16:	4605      	mov	r5, r0
 800aa18:	d4e4      	bmi.n	800a9e4 <_fflush_r+0xc>
 800aa1a:	89a3      	ldrh	r3, [r4, #12]
 800aa1c:	059b      	lsls	r3, r3, #22
 800aa1e:	d4e1      	bmi.n	800a9e4 <_fflush_r+0xc>
 800aa20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa22:	f7fd fe3c 	bl	800869e <__retarget_lock_release_recursive>
 800aa26:	e7dd      	b.n	800a9e4 <_fflush_r+0xc>

0800aa28 <memmove>:
 800aa28:	4288      	cmp	r0, r1
 800aa2a:	b510      	push	{r4, lr}
 800aa2c:	eb01 0402 	add.w	r4, r1, r2
 800aa30:	d902      	bls.n	800aa38 <memmove+0x10>
 800aa32:	4284      	cmp	r4, r0
 800aa34:	4623      	mov	r3, r4
 800aa36:	d807      	bhi.n	800aa48 <memmove+0x20>
 800aa38:	1e43      	subs	r3, r0, #1
 800aa3a:	42a1      	cmp	r1, r4
 800aa3c:	d008      	beq.n	800aa50 <memmove+0x28>
 800aa3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa46:	e7f8      	b.n	800aa3a <memmove+0x12>
 800aa48:	4402      	add	r2, r0
 800aa4a:	4601      	mov	r1, r0
 800aa4c:	428a      	cmp	r2, r1
 800aa4e:	d100      	bne.n	800aa52 <memmove+0x2a>
 800aa50:	bd10      	pop	{r4, pc}
 800aa52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa5a:	e7f7      	b.n	800aa4c <memmove+0x24>

0800aa5c <_sbrk_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	4d06      	ldr	r5, [pc, #24]	; (800aa78 <_sbrk_r+0x1c>)
 800aa60:	2300      	movs	r3, #0
 800aa62:	4604      	mov	r4, r0
 800aa64:	4608      	mov	r0, r1
 800aa66:	602b      	str	r3, [r5, #0]
 800aa68:	f7f7 fdb0 	bl	80025cc <_sbrk>
 800aa6c:	1c43      	adds	r3, r0, #1
 800aa6e:	d102      	bne.n	800aa76 <_sbrk_r+0x1a>
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	b103      	cbz	r3, 800aa76 <_sbrk_r+0x1a>
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	20000600 	.word	0x20000600

0800aa7c <__assert_func>:
 800aa7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa7e:	4614      	mov	r4, r2
 800aa80:	461a      	mov	r2, r3
 800aa82:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <__assert_func+0x2c>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4605      	mov	r5, r0
 800aa88:	68d8      	ldr	r0, [r3, #12]
 800aa8a:	b14c      	cbz	r4, 800aaa0 <__assert_func+0x24>
 800aa8c:	4b07      	ldr	r3, [pc, #28]	; (800aaac <__assert_func+0x30>)
 800aa8e:	9100      	str	r1, [sp, #0]
 800aa90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa94:	4906      	ldr	r1, [pc, #24]	; (800aab0 <__assert_func+0x34>)
 800aa96:	462b      	mov	r3, r5
 800aa98:	f000 f854 	bl	800ab44 <fiprintf>
 800aa9c:	f000 f864 	bl	800ab68 <abort>
 800aaa0:	4b04      	ldr	r3, [pc, #16]	; (800aab4 <__assert_func+0x38>)
 800aaa2:	461c      	mov	r4, r3
 800aaa4:	e7f3      	b.n	800aa8e <__assert_func+0x12>
 800aaa6:	bf00      	nop
 800aaa8:	20000278 	.word	0x20000278
 800aaac:	0800bbe5 	.word	0x0800bbe5
 800aab0:	0800bbf2 	.word	0x0800bbf2
 800aab4:	0800bc20 	.word	0x0800bc20

0800aab8 <_calloc_r>:
 800aab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaba:	fba1 2402 	umull	r2, r4, r1, r2
 800aabe:	b94c      	cbnz	r4, 800aad4 <_calloc_r+0x1c>
 800aac0:	4611      	mov	r1, r2
 800aac2:	9201      	str	r2, [sp, #4]
 800aac4:	f7ff f852 	bl	8009b6c <_malloc_r>
 800aac8:	9a01      	ldr	r2, [sp, #4]
 800aaca:	4605      	mov	r5, r0
 800aacc:	b930      	cbnz	r0, 800aadc <_calloc_r+0x24>
 800aace:	4628      	mov	r0, r5
 800aad0:	b003      	add	sp, #12
 800aad2:	bd30      	pop	{r4, r5, pc}
 800aad4:	220c      	movs	r2, #12
 800aad6:	6002      	str	r2, [r0, #0]
 800aad8:	2500      	movs	r5, #0
 800aada:	e7f8      	b.n	800aace <_calloc_r+0x16>
 800aadc:	4621      	mov	r1, r4
 800aade:	f7fd fd24 	bl	800852a <memset>
 800aae2:	e7f4      	b.n	800aace <_calloc_r+0x16>

0800aae4 <_realloc_r>:
 800aae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae8:	4680      	mov	r8, r0
 800aaea:	4614      	mov	r4, r2
 800aaec:	460e      	mov	r6, r1
 800aaee:	b921      	cbnz	r1, 800aafa <_realloc_r+0x16>
 800aaf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	f7ff b839 	b.w	8009b6c <_malloc_r>
 800aafa:	b92a      	cbnz	r2, 800ab08 <_realloc_r+0x24>
 800aafc:	f7fe fc6a 	bl	80093d4 <_free_r>
 800ab00:	4625      	mov	r5, r4
 800ab02:	4628      	mov	r0, r5
 800ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab08:	f000 f835 	bl	800ab76 <_malloc_usable_size_r>
 800ab0c:	4284      	cmp	r4, r0
 800ab0e:	4607      	mov	r7, r0
 800ab10:	d802      	bhi.n	800ab18 <_realloc_r+0x34>
 800ab12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab16:	d812      	bhi.n	800ab3e <_realloc_r+0x5a>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	f7ff f826 	bl	8009b6c <_malloc_r>
 800ab20:	4605      	mov	r5, r0
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d0ed      	beq.n	800ab02 <_realloc_r+0x1e>
 800ab26:	42bc      	cmp	r4, r7
 800ab28:	4622      	mov	r2, r4
 800ab2a:	4631      	mov	r1, r6
 800ab2c:	bf28      	it	cs
 800ab2e:	463a      	movcs	r2, r7
 800ab30:	f7fd fdb6 	bl	80086a0 <memcpy>
 800ab34:	4631      	mov	r1, r6
 800ab36:	4640      	mov	r0, r8
 800ab38:	f7fe fc4c 	bl	80093d4 <_free_r>
 800ab3c:	e7e1      	b.n	800ab02 <_realloc_r+0x1e>
 800ab3e:	4635      	mov	r5, r6
 800ab40:	e7df      	b.n	800ab02 <_realloc_r+0x1e>
	...

0800ab44 <fiprintf>:
 800ab44:	b40e      	push	{r1, r2, r3}
 800ab46:	b503      	push	{r0, r1, lr}
 800ab48:	4601      	mov	r1, r0
 800ab4a:	ab03      	add	r3, sp, #12
 800ab4c:	4805      	ldr	r0, [pc, #20]	; (800ab64 <fiprintf+0x20>)
 800ab4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab52:	6800      	ldr	r0, [r0, #0]
 800ab54:	9301      	str	r3, [sp, #4]
 800ab56:	f000 f83f 	bl	800abd8 <_vfiprintf_r>
 800ab5a:	b002      	add	sp, #8
 800ab5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab60:	b003      	add	sp, #12
 800ab62:	4770      	bx	lr
 800ab64:	20000278 	.word	0x20000278

0800ab68 <abort>:
 800ab68:	b508      	push	{r3, lr}
 800ab6a:	2006      	movs	r0, #6
 800ab6c:	f000 fa0c 	bl	800af88 <raise>
 800ab70:	2001      	movs	r0, #1
 800ab72:	f7f7 fcb3 	bl	80024dc <_exit>

0800ab76 <_malloc_usable_size_r>:
 800ab76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab7a:	1f18      	subs	r0, r3, #4
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bfbc      	itt	lt
 800ab80:	580b      	ldrlt	r3, [r1, r0]
 800ab82:	18c0      	addlt	r0, r0, r3
 800ab84:	4770      	bx	lr

0800ab86 <__sfputc_r>:
 800ab86:	6893      	ldr	r3, [r2, #8]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	b410      	push	{r4}
 800ab8e:	6093      	str	r3, [r2, #8]
 800ab90:	da08      	bge.n	800aba4 <__sfputc_r+0x1e>
 800ab92:	6994      	ldr	r4, [r2, #24]
 800ab94:	42a3      	cmp	r3, r4
 800ab96:	db01      	blt.n	800ab9c <__sfputc_r+0x16>
 800ab98:	290a      	cmp	r1, #10
 800ab9a:	d103      	bne.n	800aba4 <__sfputc_r+0x1e>
 800ab9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aba0:	f000 b934 	b.w	800ae0c <__swbuf_r>
 800aba4:	6813      	ldr	r3, [r2, #0]
 800aba6:	1c58      	adds	r0, r3, #1
 800aba8:	6010      	str	r0, [r2, #0]
 800abaa:	7019      	strb	r1, [r3, #0]
 800abac:	4608      	mov	r0, r1
 800abae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <__sfputs_r>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	4606      	mov	r6, r0
 800abb8:	460f      	mov	r7, r1
 800abba:	4614      	mov	r4, r2
 800abbc:	18d5      	adds	r5, r2, r3
 800abbe:	42ac      	cmp	r4, r5
 800abc0:	d101      	bne.n	800abc6 <__sfputs_r+0x12>
 800abc2:	2000      	movs	r0, #0
 800abc4:	e007      	b.n	800abd6 <__sfputs_r+0x22>
 800abc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abca:	463a      	mov	r2, r7
 800abcc:	4630      	mov	r0, r6
 800abce:	f7ff ffda 	bl	800ab86 <__sfputc_r>
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	d1f3      	bne.n	800abbe <__sfputs_r+0xa>
 800abd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abd8 <_vfiprintf_r>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	460d      	mov	r5, r1
 800abde:	b09d      	sub	sp, #116	; 0x74
 800abe0:	4614      	mov	r4, r2
 800abe2:	4698      	mov	r8, r3
 800abe4:	4606      	mov	r6, r0
 800abe6:	b118      	cbz	r0, 800abf0 <_vfiprintf_r+0x18>
 800abe8:	6a03      	ldr	r3, [r0, #32]
 800abea:	b90b      	cbnz	r3, 800abf0 <_vfiprintf_r+0x18>
 800abec:	f7fd fc04 	bl	80083f8 <__sinit>
 800abf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abf2:	07d9      	lsls	r1, r3, #31
 800abf4:	d405      	bmi.n	800ac02 <_vfiprintf_r+0x2a>
 800abf6:	89ab      	ldrh	r3, [r5, #12]
 800abf8:	059a      	lsls	r2, r3, #22
 800abfa:	d402      	bmi.n	800ac02 <_vfiprintf_r+0x2a>
 800abfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abfe:	f7fd fd4d 	bl	800869c <__retarget_lock_acquire_recursive>
 800ac02:	89ab      	ldrh	r3, [r5, #12]
 800ac04:	071b      	lsls	r3, r3, #28
 800ac06:	d501      	bpl.n	800ac0c <_vfiprintf_r+0x34>
 800ac08:	692b      	ldr	r3, [r5, #16]
 800ac0a:	b99b      	cbnz	r3, 800ac34 <_vfiprintf_r+0x5c>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f000 f93a 	bl	800ae88 <__swsetup_r>
 800ac14:	b170      	cbz	r0, 800ac34 <_vfiprintf_r+0x5c>
 800ac16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac18:	07dc      	lsls	r4, r3, #31
 800ac1a:	d504      	bpl.n	800ac26 <_vfiprintf_r+0x4e>
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac20:	b01d      	add	sp, #116	; 0x74
 800ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac26:	89ab      	ldrh	r3, [r5, #12]
 800ac28:	0598      	lsls	r0, r3, #22
 800ac2a:	d4f7      	bmi.n	800ac1c <_vfiprintf_r+0x44>
 800ac2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac2e:	f7fd fd36 	bl	800869e <__retarget_lock_release_recursive>
 800ac32:	e7f3      	b.n	800ac1c <_vfiprintf_r+0x44>
 800ac34:	2300      	movs	r3, #0
 800ac36:	9309      	str	r3, [sp, #36]	; 0x24
 800ac38:	2320      	movs	r3, #32
 800ac3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac42:	2330      	movs	r3, #48	; 0x30
 800ac44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800adf8 <_vfiprintf_r+0x220>
 800ac48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac4c:	f04f 0901 	mov.w	r9, #1
 800ac50:	4623      	mov	r3, r4
 800ac52:	469a      	mov	sl, r3
 800ac54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac58:	b10a      	cbz	r2, 800ac5e <_vfiprintf_r+0x86>
 800ac5a:	2a25      	cmp	r2, #37	; 0x25
 800ac5c:	d1f9      	bne.n	800ac52 <_vfiprintf_r+0x7a>
 800ac5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac62:	d00b      	beq.n	800ac7c <_vfiprintf_r+0xa4>
 800ac64:	465b      	mov	r3, fp
 800ac66:	4622      	mov	r2, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff ffa2 	bl	800abb4 <__sfputs_r>
 800ac70:	3001      	adds	r0, #1
 800ac72:	f000 80a9 	beq.w	800adc8 <_vfiprintf_r+0x1f0>
 800ac76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac78:	445a      	add	r2, fp
 800ac7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 80a1 	beq.w	800adc8 <_vfiprintf_r+0x1f0>
 800ac86:	2300      	movs	r3, #0
 800ac88:	f04f 32ff 	mov.w	r2, #4294967295
 800ac8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac90:	f10a 0a01 	add.w	sl, sl, #1
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	9307      	str	r3, [sp, #28]
 800ac98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac9e:	4654      	mov	r4, sl
 800aca0:	2205      	movs	r2, #5
 800aca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca6:	4854      	ldr	r0, [pc, #336]	; (800adf8 <_vfiprintf_r+0x220>)
 800aca8:	f7f5 fa9a 	bl	80001e0 <memchr>
 800acac:	9a04      	ldr	r2, [sp, #16]
 800acae:	b9d8      	cbnz	r0, 800ace8 <_vfiprintf_r+0x110>
 800acb0:	06d1      	lsls	r1, r2, #27
 800acb2:	bf44      	itt	mi
 800acb4:	2320      	movmi	r3, #32
 800acb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acba:	0713      	lsls	r3, r2, #28
 800acbc:	bf44      	itt	mi
 800acbe:	232b      	movmi	r3, #43	; 0x2b
 800acc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc4:	f89a 3000 	ldrb.w	r3, [sl]
 800acc8:	2b2a      	cmp	r3, #42	; 0x2a
 800acca:	d015      	beq.n	800acf8 <_vfiprintf_r+0x120>
 800accc:	9a07      	ldr	r2, [sp, #28]
 800acce:	4654      	mov	r4, sl
 800acd0:	2000      	movs	r0, #0
 800acd2:	f04f 0c0a 	mov.w	ip, #10
 800acd6:	4621      	mov	r1, r4
 800acd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acdc:	3b30      	subs	r3, #48	; 0x30
 800acde:	2b09      	cmp	r3, #9
 800ace0:	d94d      	bls.n	800ad7e <_vfiprintf_r+0x1a6>
 800ace2:	b1b0      	cbz	r0, 800ad12 <_vfiprintf_r+0x13a>
 800ace4:	9207      	str	r2, [sp, #28]
 800ace6:	e014      	b.n	800ad12 <_vfiprintf_r+0x13a>
 800ace8:	eba0 0308 	sub.w	r3, r0, r8
 800acec:	fa09 f303 	lsl.w	r3, r9, r3
 800acf0:	4313      	orrs	r3, r2
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	46a2      	mov	sl, r4
 800acf6:	e7d2      	b.n	800ac9e <_vfiprintf_r+0xc6>
 800acf8:	9b03      	ldr	r3, [sp, #12]
 800acfa:	1d19      	adds	r1, r3, #4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	9103      	str	r1, [sp, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfbb      	ittet	lt
 800ad04:	425b      	neglt	r3, r3
 800ad06:	f042 0202 	orrlt.w	r2, r2, #2
 800ad0a:	9307      	strge	r3, [sp, #28]
 800ad0c:	9307      	strlt	r3, [sp, #28]
 800ad0e:	bfb8      	it	lt
 800ad10:	9204      	strlt	r2, [sp, #16]
 800ad12:	7823      	ldrb	r3, [r4, #0]
 800ad14:	2b2e      	cmp	r3, #46	; 0x2e
 800ad16:	d10c      	bne.n	800ad32 <_vfiprintf_r+0x15a>
 800ad18:	7863      	ldrb	r3, [r4, #1]
 800ad1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1c:	d134      	bne.n	800ad88 <_vfiprintf_r+0x1b0>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	1d1a      	adds	r2, r3, #4
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	9203      	str	r2, [sp, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bfb8      	it	lt
 800ad2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad2e:	3402      	adds	r4, #2
 800ad30:	9305      	str	r3, [sp, #20]
 800ad32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ae08 <_vfiprintf_r+0x230>
 800ad36:	7821      	ldrb	r1, [r4, #0]
 800ad38:	2203      	movs	r2, #3
 800ad3a:	4650      	mov	r0, sl
 800ad3c:	f7f5 fa50 	bl	80001e0 <memchr>
 800ad40:	b138      	cbz	r0, 800ad52 <_vfiprintf_r+0x17a>
 800ad42:	9b04      	ldr	r3, [sp, #16]
 800ad44:	eba0 000a 	sub.w	r0, r0, sl
 800ad48:	2240      	movs	r2, #64	; 0x40
 800ad4a:	4082      	lsls	r2, r0
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	3401      	adds	r4, #1
 800ad50:	9304      	str	r3, [sp, #16]
 800ad52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad56:	4829      	ldr	r0, [pc, #164]	; (800adfc <_vfiprintf_r+0x224>)
 800ad58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad5c:	2206      	movs	r2, #6
 800ad5e:	f7f5 fa3f 	bl	80001e0 <memchr>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d03f      	beq.n	800ade6 <_vfiprintf_r+0x20e>
 800ad66:	4b26      	ldr	r3, [pc, #152]	; (800ae00 <_vfiprintf_r+0x228>)
 800ad68:	bb1b      	cbnz	r3, 800adb2 <_vfiprintf_r+0x1da>
 800ad6a:	9b03      	ldr	r3, [sp, #12]
 800ad6c:	3307      	adds	r3, #7
 800ad6e:	f023 0307 	bic.w	r3, r3, #7
 800ad72:	3308      	adds	r3, #8
 800ad74:	9303      	str	r3, [sp, #12]
 800ad76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad78:	443b      	add	r3, r7
 800ad7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad7c:	e768      	b.n	800ac50 <_vfiprintf_r+0x78>
 800ad7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad82:	460c      	mov	r4, r1
 800ad84:	2001      	movs	r0, #1
 800ad86:	e7a6      	b.n	800acd6 <_vfiprintf_r+0xfe>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	3401      	adds	r4, #1
 800ad8c:	9305      	str	r3, [sp, #20]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	f04f 0c0a 	mov.w	ip, #10
 800ad94:	4620      	mov	r0, r4
 800ad96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9a:	3a30      	subs	r2, #48	; 0x30
 800ad9c:	2a09      	cmp	r2, #9
 800ad9e:	d903      	bls.n	800ada8 <_vfiprintf_r+0x1d0>
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d0c6      	beq.n	800ad32 <_vfiprintf_r+0x15a>
 800ada4:	9105      	str	r1, [sp, #20]
 800ada6:	e7c4      	b.n	800ad32 <_vfiprintf_r+0x15a>
 800ada8:	fb0c 2101 	mla	r1, ip, r1, r2
 800adac:	4604      	mov	r4, r0
 800adae:	2301      	movs	r3, #1
 800adb0:	e7f0      	b.n	800ad94 <_vfiprintf_r+0x1bc>
 800adb2:	ab03      	add	r3, sp, #12
 800adb4:	9300      	str	r3, [sp, #0]
 800adb6:	462a      	mov	r2, r5
 800adb8:	4b12      	ldr	r3, [pc, #72]	; (800ae04 <_vfiprintf_r+0x22c>)
 800adba:	a904      	add	r1, sp, #16
 800adbc:	4630      	mov	r0, r6
 800adbe:	f7fc fccb 	bl	8007758 <_printf_float>
 800adc2:	4607      	mov	r7, r0
 800adc4:	1c78      	adds	r0, r7, #1
 800adc6:	d1d6      	bne.n	800ad76 <_vfiprintf_r+0x19e>
 800adc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adca:	07d9      	lsls	r1, r3, #31
 800adcc:	d405      	bmi.n	800adda <_vfiprintf_r+0x202>
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	059a      	lsls	r2, r3, #22
 800add2:	d402      	bmi.n	800adda <_vfiprintf_r+0x202>
 800add4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800add6:	f7fd fc62 	bl	800869e <__retarget_lock_release_recursive>
 800adda:	89ab      	ldrh	r3, [r5, #12]
 800addc:	065b      	lsls	r3, r3, #25
 800adde:	f53f af1d 	bmi.w	800ac1c <_vfiprintf_r+0x44>
 800ade2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ade4:	e71c      	b.n	800ac20 <_vfiprintf_r+0x48>
 800ade6:	ab03      	add	r3, sp, #12
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	462a      	mov	r2, r5
 800adec:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <_vfiprintf_r+0x22c>)
 800adee:	a904      	add	r1, sp, #16
 800adf0:	4630      	mov	r0, r6
 800adf2:	f7fc ff55 	bl	8007ca0 <_printf_i>
 800adf6:	e7e4      	b.n	800adc2 <_vfiprintf_r+0x1ea>
 800adf8:	0800bbd4 	.word	0x0800bbd4
 800adfc:	0800bbde 	.word	0x0800bbde
 800ae00:	08007759 	.word	0x08007759
 800ae04:	0800abb5 	.word	0x0800abb5
 800ae08:	0800bbda 	.word	0x0800bbda

0800ae0c <__swbuf_r>:
 800ae0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0e:	460e      	mov	r6, r1
 800ae10:	4614      	mov	r4, r2
 800ae12:	4605      	mov	r5, r0
 800ae14:	b118      	cbz	r0, 800ae1e <__swbuf_r+0x12>
 800ae16:	6a03      	ldr	r3, [r0, #32]
 800ae18:	b90b      	cbnz	r3, 800ae1e <__swbuf_r+0x12>
 800ae1a:	f7fd faed 	bl	80083f8 <__sinit>
 800ae1e:	69a3      	ldr	r3, [r4, #24]
 800ae20:	60a3      	str	r3, [r4, #8]
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	071a      	lsls	r2, r3, #28
 800ae26:	d525      	bpl.n	800ae74 <__swbuf_r+0x68>
 800ae28:	6923      	ldr	r3, [r4, #16]
 800ae2a:	b31b      	cbz	r3, 800ae74 <__swbuf_r+0x68>
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	6922      	ldr	r2, [r4, #16]
 800ae30:	1a98      	subs	r0, r3, r2
 800ae32:	6963      	ldr	r3, [r4, #20]
 800ae34:	b2f6      	uxtb	r6, r6
 800ae36:	4283      	cmp	r3, r0
 800ae38:	4637      	mov	r7, r6
 800ae3a:	dc04      	bgt.n	800ae46 <__swbuf_r+0x3a>
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4628      	mov	r0, r5
 800ae40:	f7ff fdca 	bl	800a9d8 <_fflush_r>
 800ae44:	b9e0      	cbnz	r0, 800ae80 <__swbuf_r+0x74>
 800ae46:	68a3      	ldr	r3, [r4, #8]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	60a3      	str	r3, [r4, #8]
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	6022      	str	r2, [r4, #0]
 800ae52:	701e      	strb	r6, [r3, #0]
 800ae54:	6962      	ldr	r2, [r4, #20]
 800ae56:	1c43      	adds	r3, r0, #1
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d004      	beq.n	800ae66 <__swbuf_r+0x5a>
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	07db      	lsls	r3, r3, #31
 800ae60:	d506      	bpl.n	800ae70 <__swbuf_r+0x64>
 800ae62:	2e0a      	cmp	r6, #10
 800ae64:	d104      	bne.n	800ae70 <__swbuf_r+0x64>
 800ae66:	4621      	mov	r1, r4
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f7ff fdb5 	bl	800a9d8 <_fflush_r>
 800ae6e:	b938      	cbnz	r0, 800ae80 <__swbuf_r+0x74>
 800ae70:	4638      	mov	r0, r7
 800ae72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae74:	4621      	mov	r1, r4
 800ae76:	4628      	mov	r0, r5
 800ae78:	f000 f806 	bl	800ae88 <__swsetup_r>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d0d5      	beq.n	800ae2c <__swbuf_r+0x20>
 800ae80:	f04f 37ff 	mov.w	r7, #4294967295
 800ae84:	e7f4      	b.n	800ae70 <__swbuf_r+0x64>
	...

0800ae88 <__swsetup_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	4b2a      	ldr	r3, [pc, #168]	; (800af34 <__swsetup_r+0xac>)
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	6818      	ldr	r0, [r3, #0]
 800ae90:	460c      	mov	r4, r1
 800ae92:	b118      	cbz	r0, 800ae9c <__swsetup_r+0x14>
 800ae94:	6a03      	ldr	r3, [r0, #32]
 800ae96:	b90b      	cbnz	r3, 800ae9c <__swsetup_r+0x14>
 800ae98:	f7fd faae 	bl	80083f8 <__sinit>
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aea2:	0718      	lsls	r0, r3, #28
 800aea4:	d422      	bmi.n	800aeec <__swsetup_r+0x64>
 800aea6:	06d9      	lsls	r1, r3, #27
 800aea8:	d407      	bmi.n	800aeba <__swsetup_r+0x32>
 800aeaa:	2309      	movs	r3, #9
 800aeac:	602b      	str	r3, [r5, #0]
 800aeae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb8:	e034      	b.n	800af24 <__swsetup_r+0x9c>
 800aeba:	0758      	lsls	r0, r3, #29
 800aebc:	d512      	bpl.n	800aee4 <__swsetup_r+0x5c>
 800aebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aec0:	b141      	cbz	r1, 800aed4 <__swsetup_r+0x4c>
 800aec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aec6:	4299      	cmp	r1, r3
 800aec8:	d002      	beq.n	800aed0 <__swsetup_r+0x48>
 800aeca:	4628      	mov	r0, r5
 800aecc:	f7fe fa82 	bl	80093d4 <_free_r>
 800aed0:	2300      	movs	r3, #0
 800aed2:	6363      	str	r3, [r4, #52]	; 0x34
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	2300      	movs	r3, #0
 800aede:	6063      	str	r3, [r4, #4]
 800aee0:	6923      	ldr	r3, [r4, #16]
 800aee2:	6023      	str	r3, [r4, #0]
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	f043 0308 	orr.w	r3, r3, #8
 800aeea:	81a3      	strh	r3, [r4, #12]
 800aeec:	6923      	ldr	r3, [r4, #16]
 800aeee:	b94b      	cbnz	r3, 800af04 <__swsetup_r+0x7c>
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aefa:	d003      	beq.n	800af04 <__swsetup_r+0x7c>
 800aefc:	4621      	mov	r1, r4
 800aefe:	4628      	mov	r0, r5
 800af00:	f000 f884 	bl	800b00c <__smakebuf_r>
 800af04:	89a0      	ldrh	r0, [r4, #12]
 800af06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af0a:	f010 0301 	ands.w	r3, r0, #1
 800af0e:	d00a      	beq.n	800af26 <__swsetup_r+0x9e>
 800af10:	2300      	movs	r3, #0
 800af12:	60a3      	str	r3, [r4, #8]
 800af14:	6963      	ldr	r3, [r4, #20]
 800af16:	425b      	negs	r3, r3
 800af18:	61a3      	str	r3, [r4, #24]
 800af1a:	6923      	ldr	r3, [r4, #16]
 800af1c:	b943      	cbnz	r3, 800af30 <__swsetup_r+0xa8>
 800af1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af22:	d1c4      	bne.n	800aeae <__swsetup_r+0x26>
 800af24:	bd38      	pop	{r3, r4, r5, pc}
 800af26:	0781      	lsls	r1, r0, #30
 800af28:	bf58      	it	pl
 800af2a:	6963      	ldrpl	r3, [r4, #20]
 800af2c:	60a3      	str	r3, [r4, #8]
 800af2e:	e7f4      	b.n	800af1a <__swsetup_r+0x92>
 800af30:	2000      	movs	r0, #0
 800af32:	e7f7      	b.n	800af24 <__swsetup_r+0x9c>
 800af34:	20000278 	.word	0x20000278

0800af38 <_raise_r>:
 800af38:	291f      	cmp	r1, #31
 800af3a:	b538      	push	{r3, r4, r5, lr}
 800af3c:	4604      	mov	r4, r0
 800af3e:	460d      	mov	r5, r1
 800af40:	d904      	bls.n	800af4c <_raise_r+0x14>
 800af42:	2316      	movs	r3, #22
 800af44:	6003      	str	r3, [r0, #0]
 800af46:	f04f 30ff 	mov.w	r0, #4294967295
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af4e:	b112      	cbz	r2, 800af56 <_raise_r+0x1e>
 800af50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af54:	b94b      	cbnz	r3, 800af6a <_raise_r+0x32>
 800af56:	4620      	mov	r0, r4
 800af58:	f000 f830 	bl	800afbc <_getpid_r>
 800af5c:	462a      	mov	r2, r5
 800af5e:	4601      	mov	r1, r0
 800af60:	4620      	mov	r0, r4
 800af62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af66:	f000 b817 	b.w	800af98 <_kill_r>
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d00a      	beq.n	800af84 <_raise_r+0x4c>
 800af6e:	1c59      	adds	r1, r3, #1
 800af70:	d103      	bne.n	800af7a <_raise_r+0x42>
 800af72:	2316      	movs	r3, #22
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	2001      	movs	r0, #1
 800af78:	e7e7      	b.n	800af4a <_raise_r+0x12>
 800af7a:	2400      	movs	r4, #0
 800af7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af80:	4628      	mov	r0, r5
 800af82:	4798      	blx	r3
 800af84:	2000      	movs	r0, #0
 800af86:	e7e0      	b.n	800af4a <_raise_r+0x12>

0800af88 <raise>:
 800af88:	4b02      	ldr	r3, [pc, #8]	; (800af94 <raise+0xc>)
 800af8a:	4601      	mov	r1, r0
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	f7ff bfd3 	b.w	800af38 <_raise_r>
 800af92:	bf00      	nop
 800af94:	20000278 	.word	0x20000278

0800af98 <_kill_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4d07      	ldr	r5, [pc, #28]	; (800afb8 <_kill_r+0x20>)
 800af9c:	2300      	movs	r3, #0
 800af9e:	4604      	mov	r4, r0
 800afa0:	4608      	mov	r0, r1
 800afa2:	4611      	mov	r1, r2
 800afa4:	602b      	str	r3, [r5, #0]
 800afa6:	f7f7 fa89 	bl	80024bc <_kill>
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	d102      	bne.n	800afb4 <_kill_r+0x1c>
 800afae:	682b      	ldr	r3, [r5, #0]
 800afb0:	b103      	cbz	r3, 800afb4 <_kill_r+0x1c>
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	bd38      	pop	{r3, r4, r5, pc}
 800afb6:	bf00      	nop
 800afb8:	20000600 	.word	0x20000600

0800afbc <_getpid_r>:
 800afbc:	f7f7 ba76 	b.w	80024ac <_getpid>

0800afc0 <__swhatbuf_r>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	460c      	mov	r4, r1
 800afc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc8:	2900      	cmp	r1, #0
 800afca:	b096      	sub	sp, #88	; 0x58
 800afcc:	4615      	mov	r5, r2
 800afce:	461e      	mov	r6, r3
 800afd0:	da0d      	bge.n	800afee <__swhatbuf_r+0x2e>
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800afd8:	f04f 0100 	mov.w	r1, #0
 800afdc:	bf0c      	ite	eq
 800afde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800afe2:	2340      	movne	r3, #64	; 0x40
 800afe4:	2000      	movs	r0, #0
 800afe6:	6031      	str	r1, [r6, #0]
 800afe8:	602b      	str	r3, [r5, #0]
 800afea:	b016      	add	sp, #88	; 0x58
 800afec:	bd70      	pop	{r4, r5, r6, pc}
 800afee:	466a      	mov	r2, sp
 800aff0:	f000 f848 	bl	800b084 <_fstat_r>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	dbec      	blt.n	800afd2 <__swhatbuf_r+0x12>
 800aff8:	9901      	ldr	r1, [sp, #4]
 800affa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800affe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b002:	4259      	negs	r1, r3
 800b004:	4159      	adcs	r1, r3
 800b006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b00a:	e7eb      	b.n	800afe4 <__swhatbuf_r+0x24>

0800b00c <__smakebuf_r>:
 800b00c:	898b      	ldrh	r3, [r1, #12]
 800b00e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b010:	079d      	lsls	r5, r3, #30
 800b012:	4606      	mov	r6, r0
 800b014:	460c      	mov	r4, r1
 800b016:	d507      	bpl.n	800b028 <__smakebuf_r+0x1c>
 800b018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	6123      	str	r3, [r4, #16]
 800b020:	2301      	movs	r3, #1
 800b022:	6163      	str	r3, [r4, #20]
 800b024:	b002      	add	sp, #8
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	ab01      	add	r3, sp, #4
 800b02a:	466a      	mov	r2, sp
 800b02c:	f7ff ffc8 	bl	800afc0 <__swhatbuf_r>
 800b030:	9900      	ldr	r1, [sp, #0]
 800b032:	4605      	mov	r5, r0
 800b034:	4630      	mov	r0, r6
 800b036:	f7fe fd99 	bl	8009b6c <_malloc_r>
 800b03a:	b948      	cbnz	r0, 800b050 <__smakebuf_r+0x44>
 800b03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b040:	059a      	lsls	r2, r3, #22
 800b042:	d4ef      	bmi.n	800b024 <__smakebuf_r+0x18>
 800b044:	f023 0303 	bic.w	r3, r3, #3
 800b048:	f043 0302 	orr.w	r3, r3, #2
 800b04c:	81a3      	strh	r3, [r4, #12]
 800b04e:	e7e3      	b.n	800b018 <__smakebuf_r+0xc>
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	6020      	str	r0, [r4, #0]
 800b054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b058:	81a3      	strh	r3, [r4, #12]
 800b05a:	9b00      	ldr	r3, [sp, #0]
 800b05c:	6163      	str	r3, [r4, #20]
 800b05e:	9b01      	ldr	r3, [sp, #4]
 800b060:	6120      	str	r0, [r4, #16]
 800b062:	b15b      	cbz	r3, 800b07c <__smakebuf_r+0x70>
 800b064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b068:	4630      	mov	r0, r6
 800b06a:	f000 f81d 	bl	800b0a8 <_isatty_r>
 800b06e:	b128      	cbz	r0, 800b07c <__smakebuf_r+0x70>
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	f023 0303 	bic.w	r3, r3, #3
 800b076:	f043 0301 	orr.w	r3, r3, #1
 800b07a:	81a3      	strh	r3, [r4, #12]
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	431d      	orrs	r5, r3
 800b080:	81a5      	strh	r5, [r4, #12]
 800b082:	e7cf      	b.n	800b024 <__smakebuf_r+0x18>

0800b084 <_fstat_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d07      	ldr	r5, [pc, #28]	; (800b0a4 <_fstat_r+0x20>)
 800b088:	2300      	movs	r3, #0
 800b08a:	4604      	mov	r4, r0
 800b08c:	4608      	mov	r0, r1
 800b08e:	4611      	mov	r1, r2
 800b090:	602b      	str	r3, [r5, #0]
 800b092:	f7f7 fa72 	bl	800257a <_fstat>
 800b096:	1c43      	adds	r3, r0, #1
 800b098:	d102      	bne.n	800b0a0 <_fstat_r+0x1c>
 800b09a:	682b      	ldr	r3, [r5, #0]
 800b09c:	b103      	cbz	r3, 800b0a0 <_fstat_r+0x1c>
 800b09e:	6023      	str	r3, [r4, #0]
 800b0a0:	bd38      	pop	{r3, r4, r5, pc}
 800b0a2:	bf00      	nop
 800b0a4:	20000600 	.word	0x20000600

0800b0a8 <_isatty_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	4d06      	ldr	r5, [pc, #24]	; (800b0c4 <_isatty_r+0x1c>)
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	602b      	str	r3, [r5, #0]
 800b0b4:	f7f7 fa71 	bl	800259a <_isatty>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_isatty_r+0x1a>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_isatty_r+0x1a>
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	20000600 	.word	0x20000600

0800b0c8 <atan2>:
 800b0c8:	f000 bab2 	b.w	800b630 <__ieee754_atan2>

0800b0cc <sqrt>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	ed2d 8b02 	vpush	{d8}
 800b0d2:	ec55 4b10 	vmov	r4, r5, d0
 800b0d6:	f000 f9d1 	bl	800b47c <__ieee754_sqrt>
 800b0da:	4622      	mov	r2, r4
 800b0dc:	462b      	mov	r3, r5
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	eeb0 8a40 	vmov.f32	s16, s0
 800b0e6:	eef0 8a60 	vmov.f32	s17, s1
 800b0ea:	f7f5 fd27 	bl	8000b3c <__aeabi_dcmpun>
 800b0ee:	b990      	cbnz	r0, 800b116 <sqrt+0x4a>
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	f7f5 fcf8 	bl	8000aec <__aeabi_dcmplt>
 800b0fc:	b158      	cbz	r0, 800b116 <sqrt+0x4a>
 800b0fe:	f7fd faa3 	bl	8008648 <__errno>
 800b102:	2321      	movs	r3, #33	; 0x21
 800b104:	6003      	str	r3, [r0, #0]
 800b106:	2200      	movs	r2, #0
 800b108:	2300      	movs	r3, #0
 800b10a:	4610      	mov	r0, r2
 800b10c:	4619      	mov	r1, r3
 800b10e:	f7f5 fba5 	bl	800085c <__aeabi_ddiv>
 800b112:	ec41 0b18 	vmov	d8, r0, r1
 800b116:	eeb0 0a48 	vmov.f32	s0, s16
 800b11a:	eef0 0a68 	vmov.f32	s1, s17
 800b11e:	ecbd 8b02 	vpop	{d8}
 800b122:	bd38      	pop	{r3, r4, r5, pc}
 800b124:	0000      	movs	r0, r0
	...

0800b128 <atan>:
 800b128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	ec55 4b10 	vmov	r4, r5, d0
 800b130:	4bc3      	ldr	r3, [pc, #780]	; (800b440 <atan+0x318>)
 800b132:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b136:	429e      	cmp	r6, r3
 800b138:	46ab      	mov	fp, r5
 800b13a:	dd18      	ble.n	800b16e <atan+0x46>
 800b13c:	4bc1      	ldr	r3, [pc, #772]	; (800b444 <atan+0x31c>)
 800b13e:	429e      	cmp	r6, r3
 800b140:	dc01      	bgt.n	800b146 <atan+0x1e>
 800b142:	d109      	bne.n	800b158 <atan+0x30>
 800b144:	b144      	cbz	r4, 800b158 <atan+0x30>
 800b146:	4622      	mov	r2, r4
 800b148:	462b      	mov	r3, r5
 800b14a:	4620      	mov	r0, r4
 800b14c:	4629      	mov	r1, r5
 800b14e:	f7f5 f8a5 	bl	800029c <__adddf3>
 800b152:	4604      	mov	r4, r0
 800b154:	460d      	mov	r5, r1
 800b156:	e006      	b.n	800b166 <atan+0x3e>
 800b158:	f1bb 0f00 	cmp.w	fp, #0
 800b15c:	f300 8131 	bgt.w	800b3c2 <atan+0x29a>
 800b160:	a59b      	add	r5, pc, #620	; (adr r5, 800b3d0 <atan+0x2a8>)
 800b162:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b166:	ec45 4b10 	vmov	d0, r4, r5
 800b16a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16e:	4bb6      	ldr	r3, [pc, #728]	; (800b448 <atan+0x320>)
 800b170:	429e      	cmp	r6, r3
 800b172:	dc14      	bgt.n	800b19e <atan+0x76>
 800b174:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b178:	429e      	cmp	r6, r3
 800b17a:	dc0d      	bgt.n	800b198 <atan+0x70>
 800b17c:	a396      	add	r3, pc, #600	; (adr r3, 800b3d8 <atan+0x2b0>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	ee10 0a10 	vmov	r0, s0
 800b186:	4629      	mov	r1, r5
 800b188:	f7f5 f888 	bl	800029c <__adddf3>
 800b18c:	4baf      	ldr	r3, [pc, #700]	; (800b44c <atan+0x324>)
 800b18e:	2200      	movs	r2, #0
 800b190:	f7f5 fcca 	bl	8000b28 <__aeabi_dcmpgt>
 800b194:	2800      	cmp	r0, #0
 800b196:	d1e6      	bne.n	800b166 <atan+0x3e>
 800b198:	f04f 3aff 	mov.w	sl, #4294967295
 800b19c:	e02b      	b.n	800b1f6 <atan+0xce>
 800b19e:	f000 f963 	bl	800b468 <fabs>
 800b1a2:	4bab      	ldr	r3, [pc, #684]	; (800b450 <atan+0x328>)
 800b1a4:	429e      	cmp	r6, r3
 800b1a6:	ec55 4b10 	vmov	r4, r5, d0
 800b1aa:	f300 80bf 	bgt.w	800b32c <atan+0x204>
 800b1ae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b1b2:	429e      	cmp	r6, r3
 800b1b4:	f300 80a0 	bgt.w	800b2f8 <atan+0x1d0>
 800b1b8:	ee10 2a10 	vmov	r2, s0
 800b1bc:	ee10 0a10 	vmov	r0, s0
 800b1c0:	462b      	mov	r3, r5
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	f7f5 f86a 	bl	800029c <__adddf3>
 800b1c8:	4ba0      	ldr	r3, [pc, #640]	; (800b44c <atan+0x324>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f7f5 f864 	bl	8000298 <__aeabi_dsub>
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	460f      	mov	r7, r1
 800b1d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1da:	4620      	mov	r0, r4
 800b1dc:	4629      	mov	r1, r5
 800b1de:	f7f5 f85d 	bl	800029c <__adddf3>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	4639      	mov	r1, r7
 800b1ea:	f7f5 fb37 	bl	800085c <__aeabi_ddiv>
 800b1ee:	f04f 0a00 	mov.w	sl, #0
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	460d      	mov	r5, r1
 800b1f6:	4622      	mov	r2, r4
 800b1f8:	462b      	mov	r3, r5
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	f7f5 fa03 	bl	8000608 <__aeabi_dmul>
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	4680      	mov	r8, r0
 800b208:	4689      	mov	r9, r1
 800b20a:	f7f5 f9fd 	bl	8000608 <__aeabi_dmul>
 800b20e:	a374      	add	r3, pc, #464	; (adr r3, 800b3e0 <atan+0x2b8>)
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	4606      	mov	r6, r0
 800b216:	460f      	mov	r7, r1
 800b218:	f7f5 f9f6 	bl	8000608 <__aeabi_dmul>
 800b21c:	a372      	add	r3, pc, #456	; (adr r3, 800b3e8 <atan+0x2c0>)
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	f7f5 f83b 	bl	800029c <__adddf3>
 800b226:	4632      	mov	r2, r6
 800b228:	463b      	mov	r3, r7
 800b22a:	f7f5 f9ed 	bl	8000608 <__aeabi_dmul>
 800b22e:	a370      	add	r3, pc, #448	; (adr r3, 800b3f0 <atan+0x2c8>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	f7f5 f832 	bl	800029c <__adddf3>
 800b238:	4632      	mov	r2, r6
 800b23a:	463b      	mov	r3, r7
 800b23c:	f7f5 f9e4 	bl	8000608 <__aeabi_dmul>
 800b240:	a36d      	add	r3, pc, #436	; (adr r3, 800b3f8 <atan+0x2d0>)
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	f7f5 f829 	bl	800029c <__adddf3>
 800b24a:	4632      	mov	r2, r6
 800b24c:	463b      	mov	r3, r7
 800b24e:	f7f5 f9db 	bl	8000608 <__aeabi_dmul>
 800b252:	a36b      	add	r3, pc, #428	; (adr r3, 800b400 <atan+0x2d8>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f5 f820 	bl	800029c <__adddf3>
 800b25c:	4632      	mov	r2, r6
 800b25e:	463b      	mov	r3, r7
 800b260:	f7f5 f9d2 	bl	8000608 <__aeabi_dmul>
 800b264:	a368      	add	r3, pc, #416	; (adr r3, 800b408 <atan+0x2e0>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	f7f5 f817 	bl	800029c <__adddf3>
 800b26e:	4642      	mov	r2, r8
 800b270:	464b      	mov	r3, r9
 800b272:	f7f5 f9c9 	bl	8000608 <__aeabi_dmul>
 800b276:	a366      	add	r3, pc, #408	; (adr r3, 800b410 <atan+0x2e8>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	4680      	mov	r8, r0
 800b27e:	4689      	mov	r9, r1
 800b280:	4630      	mov	r0, r6
 800b282:	4639      	mov	r1, r7
 800b284:	f7f5 f9c0 	bl	8000608 <__aeabi_dmul>
 800b288:	a363      	add	r3, pc, #396	; (adr r3, 800b418 <atan+0x2f0>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f5 f803 	bl	8000298 <__aeabi_dsub>
 800b292:	4632      	mov	r2, r6
 800b294:	463b      	mov	r3, r7
 800b296:	f7f5 f9b7 	bl	8000608 <__aeabi_dmul>
 800b29a:	a361      	add	r3, pc, #388	; (adr r3, 800b420 <atan+0x2f8>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f7f4 fffa 	bl	8000298 <__aeabi_dsub>
 800b2a4:	4632      	mov	r2, r6
 800b2a6:	463b      	mov	r3, r7
 800b2a8:	f7f5 f9ae 	bl	8000608 <__aeabi_dmul>
 800b2ac:	a35e      	add	r3, pc, #376	; (adr r3, 800b428 <atan+0x300>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	f7f4 fff1 	bl	8000298 <__aeabi_dsub>
 800b2b6:	4632      	mov	r2, r6
 800b2b8:	463b      	mov	r3, r7
 800b2ba:	f7f5 f9a5 	bl	8000608 <__aeabi_dmul>
 800b2be:	a35c      	add	r3, pc, #368	; (adr r3, 800b430 <atan+0x308>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	f7f4 ffe8 	bl	8000298 <__aeabi_dsub>
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	463b      	mov	r3, r7
 800b2cc:	f7f5 f99c 	bl	8000608 <__aeabi_dmul>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	4649      	mov	r1, r9
 800b2d8:	f7f4 ffe0 	bl	800029c <__adddf3>
 800b2dc:	4622      	mov	r2, r4
 800b2de:	462b      	mov	r3, r5
 800b2e0:	f7f5 f992 	bl	8000608 <__aeabi_dmul>
 800b2e4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	d14b      	bne.n	800b386 <atan+0x25e>
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	f7f4 ffd1 	bl	8000298 <__aeabi_dsub>
 800b2f6:	e72c      	b.n	800b152 <atan+0x2a>
 800b2f8:	ee10 0a10 	vmov	r0, s0
 800b2fc:	4b53      	ldr	r3, [pc, #332]	; (800b44c <atan+0x324>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	4629      	mov	r1, r5
 800b302:	f7f4 ffc9 	bl	8000298 <__aeabi_dsub>
 800b306:	4b51      	ldr	r3, [pc, #324]	; (800b44c <atan+0x324>)
 800b308:	4606      	mov	r6, r0
 800b30a:	460f      	mov	r7, r1
 800b30c:	2200      	movs	r2, #0
 800b30e:	4620      	mov	r0, r4
 800b310:	4629      	mov	r1, r5
 800b312:	f7f4 ffc3 	bl	800029c <__adddf3>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f5 fa9d 	bl	800085c <__aeabi_ddiv>
 800b322:	f04f 0a01 	mov.w	sl, #1
 800b326:	4604      	mov	r4, r0
 800b328:	460d      	mov	r5, r1
 800b32a:	e764      	b.n	800b1f6 <atan+0xce>
 800b32c:	4b49      	ldr	r3, [pc, #292]	; (800b454 <atan+0x32c>)
 800b32e:	429e      	cmp	r6, r3
 800b330:	da1d      	bge.n	800b36e <atan+0x246>
 800b332:	ee10 0a10 	vmov	r0, s0
 800b336:	4b48      	ldr	r3, [pc, #288]	; (800b458 <atan+0x330>)
 800b338:	2200      	movs	r2, #0
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7f4 ffac 	bl	8000298 <__aeabi_dsub>
 800b340:	4b45      	ldr	r3, [pc, #276]	; (800b458 <atan+0x330>)
 800b342:	4606      	mov	r6, r0
 800b344:	460f      	mov	r7, r1
 800b346:	2200      	movs	r2, #0
 800b348:	4620      	mov	r0, r4
 800b34a:	4629      	mov	r1, r5
 800b34c:	f7f5 f95c 	bl	8000608 <__aeabi_dmul>
 800b350:	4b3e      	ldr	r3, [pc, #248]	; (800b44c <atan+0x324>)
 800b352:	2200      	movs	r2, #0
 800b354:	f7f4 ffa2 	bl	800029c <__adddf3>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4630      	mov	r0, r6
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f5 fa7c 	bl	800085c <__aeabi_ddiv>
 800b364:	f04f 0a02 	mov.w	sl, #2
 800b368:	4604      	mov	r4, r0
 800b36a:	460d      	mov	r5, r1
 800b36c:	e743      	b.n	800b1f6 <atan+0xce>
 800b36e:	462b      	mov	r3, r5
 800b370:	ee10 2a10 	vmov	r2, s0
 800b374:	4939      	ldr	r1, [pc, #228]	; (800b45c <atan+0x334>)
 800b376:	2000      	movs	r0, #0
 800b378:	f7f5 fa70 	bl	800085c <__aeabi_ddiv>
 800b37c:	f04f 0a03 	mov.w	sl, #3
 800b380:	4604      	mov	r4, r0
 800b382:	460d      	mov	r5, r1
 800b384:	e737      	b.n	800b1f6 <atan+0xce>
 800b386:	4b36      	ldr	r3, [pc, #216]	; (800b460 <atan+0x338>)
 800b388:	4e36      	ldr	r6, [pc, #216]	; (800b464 <atan+0x33c>)
 800b38a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f7f4 ff81 	bl	8000298 <__aeabi_dsub>
 800b396:	4622      	mov	r2, r4
 800b398:	462b      	mov	r3, r5
 800b39a:	f7f4 ff7d 	bl	8000298 <__aeabi_dsub>
 800b39e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b3aa:	f7f4 ff75 	bl	8000298 <__aeabi_dsub>
 800b3ae:	f1bb 0f00 	cmp.w	fp, #0
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	460d      	mov	r5, r1
 800b3b6:	f6bf aed6 	bge.w	800b166 <atan+0x3e>
 800b3ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3be:	461d      	mov	r5, r3
 800b3c0:	e6d1      	b.n	800b166 <atan+0x3e>
 800b3c2:	a51d      	add	r5, pc, #116	; (adr r5, 800b438 <atan+0x310>)
 800b3c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3c8:	e6cd      	b.n	800b166 <atan+0x3e>
 800b3ca:	bf00      	nop
 800b3cc:	f3af 8000 	nop.w
 800b3d0:	54442d18 	.word	0x54442d18
 800b3d4:	bff921fb 	.word	0xbff921fb
 800b3d8:	8800759c 	.word	0x8800759c
 800b3dc:	7e37e43c 	.word	0x7e37e43c
 800b3e0:	e322da11 	.word	0xe322da11
 800b3e4:	3f90ad3a 	.word	0x3f90ad3a
 800b3e8:	24760deb 	.word	0x24760deb
 800b3ec:	3fa97b4b 	.word	0x3fa97b4b
 800b3f0:	a0d03d51 	.word	0xa0d03d51
 800b3f4:	3fb10d66 	.word	0x3fb10d66
 800b3f8:	c54c206e 	.word	0xc54c206e
 800b3fc:	3fb745cd 	.word	0x3fb745cd
 800b400:	920083ff 	.word	0x920083ff
 800b404:	3fc24924 	.word	0x3fc24924
 800b408:	5555550d 	.word	0x5555550d
 800b40c:	3fd55555 	.word	0x3fd55555
 800b410:	2c6a6c2f 	.word	0x2c6a6c2f
 800b414:	bfa2b444 	.word	0xbfa2b444
 800b418:	52defd9a 	.word	0x52defd9a
 800b41c:	3fadde2d 	.word	0x3fadde2d
 800b420:	af749a6d 	.word	0xaf749a6d
 800b424:	3fb3b0f2 	.word	0x3fb3b0f2
 800b428:	fe231671 	.word	0xfe231671
 800b42c:	3fbc71c6 	.word	0x3fbc71c6
 800b430:	9998ebc4 	.word	0x9998ebc4
 800b434:	3fc99999 	.word	0x3fc99999
 800b438:	54442d18 	.word	0x54442d18
 800b43c:	3ff921fb 	.word	0x3ff921fb
 800b440:	440fffff 	.word	0x440fffff
 800b444:	7ff00000 	.word	0x7ff00000
 800b448:	3fdbffff 	.word	0x3fdbffff
 800b44c:	3ff00000 	.word	0x3ff00000
 800b450:	3ff2ffff 	.word	0x3ff2ffff
 800b454:	40038000 	.word	0x40038000
 800b458:	3ff80000 	.word	0x3ff80000
 800b45c:	bff00000 	.word	0xbff00000
 800b460:	0800bc48 	.word	0x0800bc48
 800b464:	0800bc28 	.word	0x0800bc28

0800b468 <fabs>:
 800b468:	ec51 0b10 	vmov	r0, r1, d0
 800b46c:	ee10 2a10 	vmov	r2, s0
 800b470:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b474:	ec43 2b10 	vmov	d0, r2, r3
 800b478:	4770      	bx	lr
	...

0800b47c <__ieee754_sqrt>:
 800b47c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	ec55 4b10 	vmov	r4, r5, d0
 800b484:	4e67      	ldr	r6, [pc, #412]	; (800b624 <__ieee754_sqrt+0x1a8>)
 800b486:	43ae      	bics	r6, r5
 800b488:	ee10 0a10 	vmov	r0, s0
 800b48c:	ee10 2a10 	vmov	r2, s0
 800b490:	4629      	mov	r1, r5
 800b492:	462b      	mov	r3, r5
 800b494:	d10d      	bne.n	800b4b2 <__ieee754_sqrt+0x36>
 800b496:	f7f5 f8b7 	bl	8000608 <__aeabi_dmul>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	f7f4 fefb 	bl	800029c <__adddf3>
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	460d      	mov	r5, r1
 800b4aa:	ec45 4b10 	vmov	d0, r4, r5
 800b4ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b2:	2d00      	cmp	r5, #0
 800b4b4:	dc0b      	bgt.n	800b4ce <__ieee754_sqrt+0x52>
 800b4b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b4ba:	4326      	orrs	r6, r4
 800b4bc:	d0f5      	beq.n	800b4aa <__ieee754_sqrt+0x2e>
 800b4be:	b135      	cbz	r5, 800b4ce <__ieee754_sqrt+0x52>
 800b4c0:	f7f4 feea 	bl	8000298 <__aeabi_dsub>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	f7f5 f9c8 	bl	800085c <__aeabi_ddiv>
 800b4cc:	e7eb      	b.n	800b4a6 <__ieee754_sqrt+0x2a>
 800b4ce:	1509      	asrs	r1, r1, #20
 800b4d0:	f000 808d 	beq.w	800b5ee <__ieee754_sqrt+0x172>
 800b4d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4d8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b4dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4e0:	07c9      	lsls	r1, r1, #31
 800b4e2:	bf5c      	itt	pl
 800b4e4:	005b      	lslpl	r3, r3, #1
 800b4e6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b4ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b4ee:	bf58      	it	pl
 800b4f0:	0052      	lslpl	r2, r2, #1
 800b4f2:	2500      	movs	r5, #0
 800b4f4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b4f8:	1076      	asrs	r6, r6, #1
 800b4fa:	0052      	lsls	r2, r2, #1
 800b4fc:	f04f 0e16 	mov.w	lr, #22
 800b500:	46ac      	mov	ip, r5
 800b502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b506:	eb0c 0001 	add.w	r0, ip, r1
 800b50a:	4298      	cmp	r0, r3
 800b50c:	bfde      	ittt	le
 800b50e:	1a1b      	suble	r3, r3, r0
 800b510:	eb00 0c01 	addle.w	ip, r0, r1
 800b514:	186d      	addle	r5, r5, r1
 800b516:	005b      	lsls	r3, r3, #1
 800b518:	f1be 0e01 	subs.w	lr, lr, #1
 800b51c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b520:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b524:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b528:	d1ed      	bne.n	800b506 <__ieee754_sqrt+0x8a>
 800b52a:	4674      	mov	r4, lr
 800b52c:	2720      	movs	r7, #32
 800b52e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b532:	4563      	cmp	r3, ip
 800b534:	eb01 000e 	add.w	r0, r1, lr
 800b538:	dc02      	bgt.n	800b540 <__ieee754_sqrt+0xc4>
 800b53a:	d113      	bne.n	800b564 <__ieee754_sqrt+0xe8>
 800b53c:	4290      	cmp	r0, r2
 800b53e:	d811      	bhi.n	800b564 <__ieee754_sqrt+0xe8>
 800b540:	2800      	cmp	r0, #0
 800b542:	eb00 0e01 	add.w	lr, r0, r1
 800b546:	da57      	bge.n	800b5f8 <__ieee754_sqrt+0x17c>
 800b548:	f1be 0f00 	cmp.w	lr, #0
 800b54c:	db54      	blt.n	800b5f8 <__ieee754_sqrt+0x17c>
 800b54e:	f10c 0801 	add.w	r8, ip, #1
 800b552:	eba3 030c 	sub.w	r3, r3, ip
 800b556:	4290      	cmp	r0, r2
 800b558:	bf88      	it	hi
 800b55a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b55e:	1a12      	subs	r2, r2, r0
 800b560:	440c      	add	r4, r1
 800b562:	46c4      	mov	ip, r8
 800b564:	005b      	lsls	r3, r3, #1
 800b566:	3f01      	subs	r7, #1
 800b568:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b56c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b570:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b574:	d1dd      	bne.n	800b532 <__ieee754_sqrt+0xb6>
 800b576:	4313      	orrs	r3, r2
 800b578:	d01b      	beq.n	800b5b2 <__ieee754_sqrt+0x136>
 800b57a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b628 <__ieee754_sqrt+0x1ac>
 800b57e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b62c <__ieee754_sqrt+0x1b0>
 800b582:	e9da 0100 	ldrd	r0, r1, [sl]
 800b586:	e9db 2300 	ldrd	r2, r3, [fp]
 800b58a:	f7f4 fe85 	bl	8000298 <__aeabi_dsub>
 800b58e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	4640      	mov	r0, r8
 800b598:	4649      	mov	r1, r9
 800b59a:	f7f5 fab1 	bl	8000b00 <__aeabi_dcmple>
 800b59e:	b140      	cbz	r0, 800b5b2 <__ieee754_sqrt+0x136>
 800b5a0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b5a4:	e9da 0100 	ldrd	r0, r1, [sl]
 800b5a8:	e9db 2300 	ldrd	r2, r3, [fp]
 800b5ac:	d126      	bne.n	800b5fc <__ieee754_sqrt+0x180>
 800b5ae:	3501      	adds	r5, #1
 800b5b0:	463c      	mov	r4, r7
 800b5b2:	106a      	asrs	r2, r5, #1
 800b5b4:	0863      	lsrs	r3, r4, #1
 800b5b6:	07e9      	lsls	r1, r5, #31
 800b5b8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b5bc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b5c0:	bf48      	it	mi
 800b5c2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b5c6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b5ca:	461c      	mov	r4, r3
 800b5cc:	e76d      	b.n	800b4aa <__ieee754_sqrt+0x2e>
 800b5ce:	0ad3      	lsrs	r3, r2, #11
 800b5d0:	3815      	subs	r0, #21
 800b5d2:	0552      	lsls	r2, r2, #21
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0fa      	beq.n	800b5ce <__ieee754_sqrt+0x152>
 800b5d8:	02dc      	lsls	r4, r3, #11
 800b5da:	d50a      	bpl.n	800b5f2 <__ieee754_sqrt+0x176>
 800b5dc:	f1c1 0420 	rsb	r4, r1, #32
 800b5e0:	fa22 f404 	lsr.w	r4, r2, r4
 800b5e4:	1e4d      	subs	r5, r1, #1
 800b5e6:	408a      	lsls	r2, r1
 800b5e8:	4323      	orrs	r3, r4
 800b5ea:	1b41      	subs	r1, r0, r5
 800b5ec:	e772      	b.n	800b4d4 <__ieee754_sqrt+0x58>
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	e7f0      	b.n	800b5d4 <__ieee754_sqrt+0x158>
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	3101      	adds	r1, #1
 800b5f6:	e7ef      	b.n	800b5d8 <__ieee754_sqrt+0x15c>
 800b5f8:	46e0      	mov	r8, ip
 800b5fa:	e7aa      	b.n	800b552 <__ieee754_sqrt+0xd6>
 800b5fc:	f7f4 fe4e 	bl	800029c <__adddf3>
 800b600:	e9da 8900 	ldrd	r8, r9, [sl]
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	4640      	mov	r0, r8
 800b60a:	4649      	mov	r1, r9
 800b60c:	f7f5 fa6e 	bl	8000aec <__aeabi_dcmplt>
 800b610:	b120      	cbz	r0, 800b61c <__ieee754_sqrt+0x1a0>
 800b612:	1ca0      	adds	r0, r4, #2
 800b614:	bf08      	it	eq
 800b616:	3501      	addeq	r5, #1
 800b618:	3402      	adds	r4, #2
 800b61a:	e7ca      	b.n	800b5b2 <__ieee754_sqrt+0x136>
 800b61c:	3401      	adds	r4, #1
 800b61e:	f024 0401 	bic.w	r4, r4, #1
 800b622:	e7c6      	b.n	800b5b2 <__ieee754_sqrt+0x136>
 800b624:	7ff00000 	.word	0x7ff00000
 800b628:	20000280 	.word	0x20000280
 800b62c:	20000288 	.word	0x20000288

0800b630 <__ieee754_atan2>:
 800b630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b634:	ec57 6b11 	vmov	r6, r7, d1
 800b638:	4273      	negs	r3, r6
 800b63a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b7b8 <__ieee754_atan2+0x188>
 800b63e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b642:	4333      	orrs	r3, r6
 800b644:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b648:	4543      	cmp	r3, r8
 800b64a:	ec51 0b10 	vmov	r0, r1, d0
 800b64e:	ee11 5a10 	vmov	r5, s2
 800b652:	d80a      	bhi.n	800b66a <__ieee754_atan2+0x3a>
 800b654:	4244      	negs	r4, r0
 800b656:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b65a:	4304      	orrs	r4, r0
 800b65c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b660:	4544      	cmp	r4, r8
 800b662:	ee10 9a10 	vmov	r9, s0
 800b666:	468e      	mov	lr, r1
 800b668:	d907      	bls.n	800b67a <__ieee754_atan2+0x4a>
 800b66a:	4632      	mov	r2, r6
 800b66c:	463b      	mov	r3, r7
 800b66e:	f7f4 fe15 	bl	800029c <__adddf3>
 800b672:	ec41 0b10 	vmov	d0, r0, r1
 800b676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b67a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b67e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b682:	4334      	orrs	r4, r6
 800b684:	d103      	bne.n	800b68e <__ieee754_atan2+0x5e>
 800b686:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b68a:	f7ff bd4d 	b.w	800b128 <atan>
 800b68e:	17bc      	asrs	r4, r7, #30
 800b690:	f004 0402 	and.w	r4, r4, #2
 800b694:	ea53 0909 	orrs.w	r9, r3, r9
 800b698:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b69c:	d107      	bne.n	800b6ae <__ieee754_atan2+0x7e>
 800b69e:	2c02      	cmp	r4, #2
 800b6a0:	d05f      	beq.n	800b762 <__ieee754_atan2+0x132>
 800b6a2:	2c03      	cmp	r4, #3
 800b6a4:	d1e5      	bne.n	800b672 <__ieee754_atan2+0x42>
 800b6a6:	a140      	add	r1, pc, #256	; (adr r1, 800b7a8 <__ieee754_atan2+0x178>)
 800b6a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6ac:	e7e1      	b.n	800b672 <__ieee754_atan2+0x42>
 800b6ae:	4315      	orrs	r5, r2
 800b6b0:	d106      	bne.n	800b6c0 <__ieee754_atan2+0x90>
 800b6b2:	f1be 0f00 	cmp.w	lr, #0
 800b6b6:	da5f      	bge.n	800b778 <__ieee754_atan2+0x148>
 800b6b8:	a13d      	add	r1, pc, #244	; (adr r1, 800b7b0 <__ieee754_atan2+0x180>)
 800b6ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6be:	e7d8      	b.n	800b672 <__ieee754_atan2+0x42>
 800b6c0:	4542      	cmp	r2, r8
 800b6c2:	d10f      	bne.n	800b6e4 <__ieee754_atan2+0xb4>
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b6ca:	d107      	bne.n	800b6dc <__ieee754_atan2+0xac>
 800b6cc:	2c02      	cmp	r4, #2
 800b6ce:	d84c      	bhi.n	800b76a <__ieee754_atan2+0x13a>
 800b6d0:	4b33      	ldr	r3, [pc, #204]	; (800b7a0 <__ieee754_atan2+0x170>)
 800b6d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6da:	e7ca      	b.n	800b672 <__ieee754_atan2+0x42>
 800b6dc:	2c02      	cmp	r4, #2
 800b6de:	d848      	bhi.n	800b772 <__ieee754_atan2+0x142>
 800b6e0:	4b30      	ldr	r3, [pc, #192]	; (800b7a4 <__ieee754_atan2+0x174>)
 800b6e2:	e7f6      	b.n	800b6d2 <__ieee754_atan2+0xa2>
 800b6e4:	4543      	cmp	r3, r8
 800b6e6:	d0e4      	beq.n	800b6b2 <__ieee754_atan2+0x82>
 800b6e8:	1a9b      	subs	r3, r3, r2
 800b6ea:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b6ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b6f2:	da1e      	bge.n	800b732 <__ieee754_atan2+0x102>
 800b6f4:	2f00      	cmp	r7, #0
 800b6f6:	da01      	bge.n	800b6fc <__ieee754_atan2+0xcc>
 800b6f8:	323c      	adds	r2, #60	; 0x3c
 800b6fa:	db1e      	blt.n	800b73a <__ieee754_atan2+0x10a>
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	463b      	mov	r3, r7
 800b700:	f7f5 f8ac 	bl	800085c <__aeabi_ddiv>
 800b704:	ec41 0b10 	vmov	d0, r0, r1
 800b708:	f7ff feae 	bl	800b468 <fabs>
 800b70c:	f7ff fd0c 	bl	800b128 <atan>
 800b710:	ec51 0b10 	vmov	r0, r1, d0
 800b714:	2c01      	cmp	r4, #1
 800b716:	d013      	beq.n	800b740 <__ieee754_atan2+0x110>
 800b718:	2c02      	cmp	r4, #2
 800b71a:	d015      	beq.n	800b748 <__ieee754_atan2+0x118>
 800b71c:	2c00      	cmp	r4, #0
 800b71e:	d0a8      	beq.n	800b672 <__ieee754_atan2+0x42>
 800b720:	a317      	add	r3, pc, #92	; (adr r3, 800b780 <__ieee754_atan2+0x150>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 fdb7 	bl	8000298 <__aeabi_dsub>
 800b72a:	a317      	add	r3, pc, #92	; (adr r3, 800b788 <__ieee754_atan2+0x158>)
 800b72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b730:	e014      	b.n	800b75c <__ieee754_atan2+0x12c>
 800b732:	a117      	add	r1, pc, #92	; (adr r1, 800b790 <__ieee754_atan2+0x160>)
 800b734:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b738:	e7ec      	b.n	800b714 <__ieee754_atan2+0xe4>
 800b73a:	2000      	movs	r0, #0
 800b73c:	2100      	movs	r1, #0
 800b73e:	e7e9      	b.n	800b714 <__ieee754_atan2+0xe4>
 800b740:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b744:	4619      	mov	r1, r3
 800b746:	e794      	b.n	800b672 <__ieee754_atan2+0x42>
 800b748:	a30d      	add	r3, pc, #52	; (adr r3, 800b780 <__ieee754_atan2+0x150>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f4 fda3 	bl	8000298 <__aeabi_dsub>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	a10c      	add	r1, pc, #48	; (adr r1, 800b788 <__ieee754_atan2+0x158>)
 800b758:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b75c:	f7f4 fd9c 	bl	8000298 <__aeabi_dsub>
 800b760:	e787      	b.n	800b672 <__ieee754_atan2+0x42>
 800b762:	a109      	add	r1, pc, #36	; (adr r1, 800b788 <__ieee754_atan2+0x158>)
 800b764:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b768:	e783      	b.n	800b672 <__ieee754_atan2+0x42>
 800b76a:	a10b      	add	r1, pc, #44	; (adr r1, 800b798 <__ieee754_atan2+0x168>)
 800b76c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b770:	e77f      	b.n	800b672 <__ieee754_atan2+0x42>
 800b772:	2000      	movs	r0, #0
 800b774:	2100      	movs	r1, #0
 800b776:	e77c      	b.n	800b672 <__ieee754_atan2+0x42>
 800b778:	a105      	add	r1, pc, #20	; (adr r1, 800b790 <__ieee754_atan2+0x160>)
 800b77a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b77e:	e778      	b.n	800b672 <__ieee754_atan2+0x42>
 800b780:	33145c07 	.word	0x33145c07
 800b784:	3ca1a626 	.word	0x3ca1a626
 800b788:	54442d18 	.word	0x54442d18
 800b78c:	400921fb 	.word	0x400921fb
 800b790:	54442d18 	.word	0x54442d18
 800b794:	3ff921fb 	.word	0x3ff921fb
 800b798:	54442d18 	.word	0x54442d18
 800b79c:	3fe921fb 	.word	0x3fe921fb
 800b7a0:	0800bc68 	.word	0x0800bc68
 800b7a4:	0800bc80 	.word	0x0800bc80
 800b7a8:	54442d18 	.word	0x54442d18
 800b7ac:	c00921fb 	.word	0xc00921fb
 800b7b0:	54442d18 	.word	0x54442d18
 800b7b4:	bff921fb 	.word	0xbff921fb
 800b7b8:	7ff00000 	.word	0x7ff00000

0800b7bc <_init>:
 800b7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7be:	bf00      	nop
 800b7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c2:	bc08      	pop	{r3}
 800b7c4:	469e      	mov	lr, r3
 800b7c6:	4770      	bx	lr

0800b7c8 <_fini>:
 800b7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ca:	bf00      	nop
 800b7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ce:	bc08      	pop	{r3}
 800b7d0:	469e      	mov	lr, r3
 800b7d2:	4770      	bx	lr
