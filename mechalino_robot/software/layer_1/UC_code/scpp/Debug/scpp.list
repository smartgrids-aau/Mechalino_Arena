
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800c248  0800c248  0000d248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c738  0800c738  0000e230  2**0
                  CONTENTS
  4 .ARM          00000008  0800c738  0800c738  0000d738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c740  0800c740  0000e230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c740  0800c740  0000d740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c744  0800c744  0000d744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800c748  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000230  0800c978  0000e230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  0800c978  0000e630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fae  00000000  00000000  0000e260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9c  00000000  00000000  0002120e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00023eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de8  00000000  00000000  00025040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ae0  00000000  00000000  00025e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b3d  00000000  00000000  0003f908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f3f2  00000000  00000000  00056445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000f5837  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006550  00000000  00000000  000f58c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000fbe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000230 	.word	0x20000230
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c230 	.word	0x0800c230

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000234 	.word	0x20000234
 80001dc:	0800c230 	.word	0x0800c230

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_ADC1_Init+0xa0>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001016:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001024:	2201      	movs	r2, #1
 8001026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <MX_ADC1_Init+0xa4>)
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001058:	f001 fbd6 	bl	8002808 <HAL_ADC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001062:	f000 febd 	bl	8001de0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001078:	f001 fc0a 	bl	8002890 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001082:	f000 fead 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2000024c 	.word	0x2000024c
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f001 ff83 	bl	8003014 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b0:	4815      	ldr	r0, [pc, #84]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011b2:	f002 f8b3 	bl	800331c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011b6:	2200      	movs	r2, #0
 80011b8:	213b      	movs	r1, #59	@ 0x3b
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011bc:	f002 f8ae 	bl	800331c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011da:	f001 ff1b 	bl	8003014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011de:	233b      	movs	r3, #59	@ 0x3b
 80011e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011f6:	f001 ff0d 	bl	8003014 <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020400 	.word	0x40020400

08001210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f002 f87f 	bl	8003350 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 fdc2 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000294 	.word	0x20000294
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f001 fea4 	bl	8003014 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_UART_RxCpltCallback+0x5c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d120      	bne.n	8001350 <HAL_UART_RxCpltCallback+0x54>
		if (UART1_rxBuffer[0] == '\n') { // Assuming commands are newline terminated
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d10c      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x34>
			rx_buffer[rx_index] = '\0'; // Null terminate the string
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]
			rx_complete = 1; // Set flag for command complete
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_RxCpltCallback+0x6c>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
			rx_index = 0; // Reset index
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e00a      	b.n	8001346 <HAL_UART_RxCpltCallback+0x4a>
		} else {
			rx_buffer[rx_index++] = UART1_rxBuffer[0]; // Store character in buffer
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800133a:	7011      	strb	r1, [r2, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 8001344:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1); // Listen for next character
 8001346:	2201      	movs	r2, #1
 8001348:	4904      	ldr	r1, [pc, #16]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 800134a:	4808      	ldr	r0, [pc, #32]	@ (800136c <HAL_UART_RxCpltCallback+0x70>)
 800134c:	f003 fe4a 	bl	8004fe4 <HAL_UART_Receive_IT>
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	20000358 	.word	0x20000358
 8001360:	20000350 	.word	0x20000350
 8001364:	200002ec 	.word	0x200002ec
 8001368:	20000354 	.word	0x20000354
 800136c:	20000498 	.word	0x20000498

08001370 <pid_controller>:

float pid_controller(PIDController *pid, float setpoint, float measured_value) {
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	ed87 0a02 	vstr	s0, [r7, #8]
 800137c:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measured_value;
 8001380:	ed97 7a02 	vldr	s14, [r7, #8]
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->integral += error;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	ed93 7a00 	vldr	s14, [r3]
 8001396:	edd7 7a07 	vldr	s15, [r7, #28]
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	edc3 7a00 	vstr	s15, [r3]
	float derivative = error - pid->previous_error;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80013aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	605a      	str	r2, [r3, #4]

	float output = pid->kp * error + pid->ki * pid->integral
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	ed93 7a02 	vldr	s14, [r3, #8]
 80013c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013da:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->kd * derivative;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	edd3 6a04 	vldr	s13, [r3, #16]
 80013e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float output = pid->kp * error + pid->ki * pid->integral
 80013ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f0:	edc7 7a05 	vstr	s15, [r7, #20]
	return output;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	ee07 3a90 	vmov	s15, r3
}
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	3724      	adds	r7, #36	@ 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a4a      	ldr	r2, [pc, #296]	@ (8001540 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001416:	4293      	cmp	r3, r2
 8001418:	f040 808d 	bne.w	8001536 <HAL_TIM_PeriodElapsedCallback+0x12e>
		if (timer_count > 0) {
 800141c:	4b49      	ldr	r3, [pc, #292]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8087 	beq.w	8001536 <HAL_TIM_PeriodElapsedCallback+0x12e>
			timer_count--;
 8001428:	4b46      	ldr	r3, [pc, #280]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	3b01      	subs	r3, #1
 8001430:	b29a      	uxth	r2, r3
 8001432:	4b44      	ldr	r3, [pc, #272]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001434:	801a      	strh	r2, [r3, #0]

			// Update left servo PWM
			if (servo_left.current_pwm != servo_left.target_pwm) {
 8001436:	4b44      	ldr	r3, [pc, #272]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	4b43      	ldr	r3, [pc, #268]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	429a      	cmp	r2, r3
 8001440:	d030      	beq.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0x9c>
				if (servo_left.current_pwm < servo_left.target_pwm) {
 8001442:	4b41      	ldr	r3, [pc, #260]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	4b40      	ldr	r3, [pc, #256]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	429a      	cmp	r2, r3
 800144c:	d212      	bcs.n	8001474 <HAL_TIM_PeriodElapsedCallback+0x6c>
					servo_left.current_pwm += increment_speed;
 800144e:	4b3f      	ldr	r3, [pc, #252]	@ (800154c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b3c      	ldr	r3, [pc, #240]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4413      	add	r3, r2
 800145a:	4a3b      	ldr	r2, [pc, #236]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800145c:	6093      	str	r3, [r2, #8]
					if (servo_left.current_pwm > servo_left.target_pwm) {
 800145e:	4b3a      	ldr	r3, [pc, #232]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	4b39      	ldr	r3, [pc, #228]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	429a      	cmp	r2, r3
 8001468:	d916      	bls.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x90>
						servo_left.current_pwm = servo_left.target_pwm;
 800146a:	4b37      	ldr	r3, [pc, #220]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	4a36      	ldr	r2, [pc, #216]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001470:	6093      	str	r3, [r2, #8]
 8001472:	e011      	b.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x90>
					}
				} else {
					servo_left.current_pwm -= increment_speed;
 8001474:	4b35      	ldr	r3, [pc, #212]	@ (800154c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	1a9b      	subs	r3, r3, r2
 8001480:	4a31      	ldr	r2, [pc, #196]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001482:	6093      	str	r3, [r2, #8]
					if (servo_left.current_pwm < servo_left.target_pwm) {
 8001484:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d203      	bcs.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x90>
						servo_left.current_pwm = servo_left.target_pwm;
 8001490:	4b2d      	ldr	r3, [pc, #180]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4a2c      	ldr	r2, [pc, #176]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001496:	6093      	str	r3, [r2, #8]
					}
				}
				set_servo_pwm(&servo_left, servo_left.current_pwm);
 8001498:	4b2b      	ldr	r3, [pc, #172]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4619      	mov	r1, r3
 800149e:	482a      	ldr	r0, [pc, #168]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80014a0:	f000 fb6c 	bl	8001b7c <set_servo_pwm>
			}

			// Update right servo PWM
			if (servo_right.current_pwm != servo_right.target_pwm) {
 80014a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	4b29      	ldr	r3, [pc, #164]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d030      	beq.n	8001512 <HAL_TIM_PeriodElapsedCallback+0x10a>
				if (servo_right.current_pwm < servo_right.target_pwm) {
 80014b0:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d212      	bcs.n	80014e2 <HAL_TIM_PeriodElapsedCallback+0xda>
					servo_right.current_pwm += increment_speed;
 80014bc:	4b23      	ldr	r3, [pc, #140]	@ (800154c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b23      	ldr	r3, [pc, #140]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a21      	ldr	r2, [pc, #132]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014ca:	6093      	str	r3, [r2, #8]
					if (servo_right.current_pwm > servo_right.target_pwm) {
 80014cc:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d916      	bls.n	8001506 <HAL_TIM_PeriodElapsedCallback+0xfe>
						servo_right.current_pwm = servo_right.target_pwm;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014de:	6093      	str	r3, [r2, #8]
 80014e0:	e011      	b.n	8001506 <HAL_TIM_PeriodElapsedCallback+0xfe>
					}
				} else {
					servo_right.current_pwm -= increment_speed;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	4a18      	ldr	r2, [pc, #96]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014f0:	6093      	str	r3, [r2, #8]
					if (servo_right.current_pwm < servo_right.target_pwm) {
 80014f2:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d203      	bcs.n	8001506 <HAL_TIM_PeriodElapsedCallback+0xfe>
						servo_right.current_pwm = servo_right.target_pwm;
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001504:	6093      	str	r3, [r2, #8]
					}
				}
				set_servo_pwm(&servo_right, servo_right.current_pwm);
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	4619      	mov	r1, r3
 800150c:	4810      	ldr	r0, [pc, #64]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800150e:	f000 fb35 	bl	8001b7c <set_servo_pwm>
			}

			// Stop servos when duration expires
			if (timer_count == 0) {
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10c      	bne.n	8001536 <HAL_TIM_PeriodElapsedCallback+0x12e>
				set_servo_pwm(&servo_left, SERVO_STOP); // Stop left servo
 800151c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001520:	4809      	ldr	r0, [pc, #36]	@ (8001548 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001522:	f000 fb2b 	bl	8001b7c <set_servo_pwm>
				set_servo_pwm(&servo_right, SERVO_STOP); // Stop right servo
 8001526:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800152a:	4809      	ldr	r0, [pc, #36]	@ (8001550 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800152c:	f000 fb26 	bl	8001b7c <set_servo_pwm>
				HAL_TIM_Base_Stop_IT(htim); // Stop the timer
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f002 fd81 	bl	8004038 <HAL_TIM_Base_Stop_IT>
//				// Do nothing
//				break;
//			}
//		}
	}
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40000400 	.word	0x40000400
 8001544:	2000035a 	.word	0x2000035a
 8001548:	20000000 	.word	0x20000000
 800154c:	20000048 	.word	0x20000048
 8001550:	20000010 	.word	0x20000010

08001554 <handle_rotation>:

void handle_rotation() {
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
	float target_angle = calculate_angle(current_x, current_y, target_x,
 800155a:	4b65      	ldr	r3, [pc, #404]	@ (80016f0 <handle_rotation+0x19c>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	4b64      	ldr	r3, [pc, #400]	@ (80016f4 <handle_rotation+0x1a0>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	4b64      	ldr	r3, [pc, #400]	@ (80016f8 <handle_rotation+0x1a4>)
 8001568:	edd3 6a00 	vldr	s13, [r3]
 800156c:	4b63      	ldr	r3, [pc, #396]	@ (80016fc <handle_rotation+0x1a8>)
 800156e:	ed93 6a00 	vldr	s12, [r3]
 8001572:	eef0 1a46 	vmov.f32	s3, s12
 8001576:	eeb0 1a66 	vmov.f32	s2, s13
 800157a:	eef0 0a47 	vmov.f32	s1, s14
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	f000 f951 	bl	8001828 <calculate_angle>
 8001586:	ed87 0a06 	vstr	s0, [r7, #24]
			target_y);
	float angle_error = target_angle - current_yaw;
 800158a:	4b5d      	ldr	r3, [pc, #372]	@ (8001700 <handle_rotation+0x1ac>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ed97 7a06 	vldr	s14, [r7, #24]
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalize the angle error to always choose the shortest rotation path
	if (angle_error > 180) {
 800159c:	edd7 7a07 	vldr	s15, [r7, #28]
 80015a0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001704 <handle_rotation+0x1b0>
 80015a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	dd08      	ble.n	80015c0 <handle_rotation+0x6c>
		angle_error -= 360;
 80015ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80015b2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001708 <handle_rotation+0x1b4>
 80015b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015ba:	edc7 7a07 	vstr	s15, [r7, #28]
 80015be:	e010      	b.n	80015e2 <handle_rotation+0x8e>
	} else if (angle_error < -180) {
 80015c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80015c4:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800170c <handle_rotation+0x1b8>
 80015c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d507      	bpl.n	80015e2 <handle_rotation+0x8e>
		angle_error += 360;
 80015d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80015d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001708 <handle_rotation+0x1b4>
 80015da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015de:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if (fabsf(angle_error) > ANGLE_THRESHOLD) {
 80015e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80015e6:	eef0 7ae7 	vabs.f32	s15, s15
 80015ea:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80015ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	dd6c      	ble.n	80016d2 <handle_rotation+0x17e>
		// PID-based correction for rotation
		float rotation_correction = pid_controller(&rotation_pid, target_angle,
 80015f8:	4b41      	ldr	r3, [pc, #260]	@ (8001700 <handle_rotation+0x1ac>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	eef0 0a67 	vmov.f32	s1, s15
 8001602:	ed97 0a06 	vldr	s0, [r7, #24]
 8001606:	4842      	ldr	r0, [pc, #264]	@ (8001710 <handle_rotation+0x1bc>)
 8001608:	f7ff feb2 	bl	8001370 <pid_controller>
 800160c:	ed87 0a05 	vstr	s0, [r7, #20]
				current_yaw);

		if (angle_error > 0) {
 8001610:	edd7 7a07 	vldr	s15, [r7, #28]
 8001614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	dd2c      	ble.n	8001678 <handle_rotation+0x124>
			// Rotate right: Both motors move forward speed
			uint32_t left_pwm = fmaxf(FORWARD_SLOW,
 800161e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001714 <handle_rotation+0x1c0>
 8001622:	edd7 7a05 	vldr	s15, [r7, #20]
 8001626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162a:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8001718 <handle_rotation+0x1c4>
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	f009 fc70 	bl	800af16 <fmaxf>
 8001636:	eef0 7a40 	vmov.f32	s15, s0
 800163a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800163e:	ee17 3a90 	vmov	r3, s15
 8001642:	60bb      	str	r3, [r7, #8]
			FORWARD_MAX - rotation_correction);
			uint32_t right_pwm = fmaxf(FORWARD_SLOW,
 8001644:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001714 <handle_rotation+0x1c0>
 8001648:	edd7 7a05 	vldr	s15, [r7, #20]
 800164c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001650:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001718 <handle_rotation+0x1c4>
 8001654:	eeb0 0a67 	vmov.f32	s0, s15
 8001658:	f009 fc5d 	bl	800af16 <fmaxf>
 800165c:	eef0 7a40 	vmov.f32	s15, s0
 8001660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001664:	ee17 3a90 	vmov	r3, s15
 8001668:	607b      	str	r3, [r7, #4]
			FORWARD_MAX - rotation_correction);
			start_pwm_update(left_pwm, right_pwm, 300); // Rotate right for 400ms
 800166a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f000 fab5 	bl	8001be0 <start_pwm_update>
	} else {
		// Stop rotating and switch to moving state
		start_pwm_update(SERVO_STOP, SERVO_STOP, 1);
		current_state = MOVING;
	}
}
 8001676:	e036      	b.n	80016e6 <handle_rotation+0x192>
			uint32_t left_pwm = fminf(BACKWARD_SLOW,
 8001678:	edd7 7a05 	vldr	s15, [r7, #20]
 800167c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800171c <handle_rotation+0x1c8>
 8001680:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001684:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001720 <handle_rotation+0x1cc>
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	f009 fc60 	bl	800af50 <fminf>
 8001690:	eef0 7a40 	vmov.f32	s15, s0
 8001694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001698:	ee17 3a90 	vmov	r3, s15
 800169c:	613b      	str	r3, [r7, #16]
			uint32_t right_pwm = fminf(BACKWARD_SLOW,
 800169e:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800171c <handle_rotation+0x1c8>
 80016a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016aa:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8001720 <handle_rotation+0x1cc>
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	f009 fc4d 	bl	800af50 <fminf>
 80016b6:	eef0 7a40 	vmov.f32	s15, s0
 80016ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016be:	ee17 3a90 	vmov	r3, s15
 80016c2:	60fb      	str	r3, [r7, #12]
			start_pwm_update(left_pwm, right_pwm, 300); // Rotate left for 400ms
 80016c4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	6938      	ldr	r0, [r7, #16]
 80016cc:	f000 fa88 	bl	8001be0 <start_pwm_update>
}
 80016d0:	e009      	b.n	80016e6 <handle_rotation+0x192>
		start_pwm_update(SERVO_STOP, SERVO_STOP, 1);
 80016d2:	2201      	movs	r2, #1
 80016d4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80016d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80016dc:	f000 fa80 	bl	8001be0 <start_pwm_update>
		current_state = MOVING;
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <handle_rotation+0x1d0>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
}
 80016e6:	bf00      	nop
 80016e8:	3720      	adds	r7, #32
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000035c 	.word	0x2000035c
 80016f4:	20000360 	.word	0x20000360
 80016f8:	20000368 	.word	0x20000368
 80016fc:	2000036c 	.word	0x2000036c
 8001700:	20000364 	.word	0x20000364
 8001704:	43340000 	.word	0x43340000
 8001708:	43b40000 	.word	0x43b40000
 800170c:	c3340000 	.word	0xc3340000
 8001710:	20000020 	.word	0x20000020
 8001714:	459f6000 	.word	0x459f6000
 8001718:	4541c000 	.word	0x4541c000
 800171c:	44480000 	.word	0x44480000
 8001720:	452f0000 	.word	0x452f0000
 8001724:	200002e8 	.word	0x200002e8

08001728 <handle_movement>:

void handle_movement() {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
	float distance = distance_to_target(current_x, current_y, target_x,
 800172e:	4b32      	ldr	r3, [pc, #200]	@ (80017f8 <handle_movement+0xd0>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <handle_movement+0xd4>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <handle_movement+0xd8>)
 800173c:	edd3 6a00 	vldr	s13, [r3]
 8001740:	4b30      	ldr	r3, [pc, #192]	@ (8001804 <handle_movement+0xdc>)
 8001742:	ed93 6a00 	vldr	s12, [r3]
 8001746:	eef0 1a46 	vmov.f32	s3, s12
 800174a:	eeb0 1a66 	vmov.f32	s2, s13
 800174e:	eef0 0a47 	vmov.f32	s1, s14
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	f000 f913 	bl	8001980 <distance_to_target>
 800175a:	ed87 0a03 	vstr	s0, [r7, #12]
			target_y);

	if (distance > DISTANCE_THRESHOLD) {
 800175e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001762:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001808 <handle_movement+0xe0>
 8001766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	dd35      	ble.n	80017dc <handle_movement+0xb4>
		// PID-based correction for forward movement
		float movement_correction = pid_controller(&movement_pid, distance, 0);
 8001770:	eddf 0a26 	vldr	s1, [pc, #152]	@ 800180c <handle_movement+0xe4>
 8001774:	ed97 0a03 	vldr	s0, [r7, #12]
 8001778:	4825      	ldr	r0, [pc, #148]	@ (8001810 <handle_movement+0xe8>)
 800177a:	f7ff fdf9 	bl	8001370 <pid_controller>
 800177e:	ed87 0a02 	vstr	s0, [r7, #8]

		// Move forward with one motor forward, one backward
		uint32_t left_pwm = fmaxf(FORWARD_SLOW,
 8001782:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001814 <handle_movement+0xec>
 8001786:	edd7 7a02 	vldr	s15, [r7, #8]
 800178a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178e:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8001818 <handle_movement+0xf0>
 8001792:	eeb0 0a67 	vmov.f32	s0, s15
 8001796:	f009 fbbe 	bl	800af16 <fmaxf>
 800179a:	eef0 7a40 	vmov.f32	s15, s0
 800179e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a2:	ee17 3a90 	vmov	r3, s15
 80017a6:	607b      	str	r3, [r7, #4]
		FORWARD_MAX - movement_correction);  // Left motor forward
		uint32_t right_pwm = fminf(BACKWARD_SLOW,
 80017a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ac:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800181c <handle_movement+0xf4>
 80017b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017b4:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8001820 <handle_movement+0xf8>
 80017b8:	eeb0 0a67 	vmov.f32	s0, s15
 80017bc:	f009 fbc8 	bl	800af50 <fminf>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c8:	ee17 3a90 	vmov	r3, s15
 80017cc:	603b      	str	r3, [r7, #0]
		BACKWARD_MAX + movement_correction);  // Right motor backward
		start_pwm_update(left_pwm, right_pwm, 300);  // Move forward for 400ms
 80017ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017d2:	6839      	ldr	r1, [r7, #0]
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 fa03 	bl	8001be0 <start_pwm_update>
	} else {
		// Stop the robot when it reaches the target
		start_pwm_update(SERVO_STOP, SERVO_STOP, 1);
		current_state = IDLE;
	}
}
 80017da:	e009      	b.n	80017f0 <handle_movement+0xc8>
		start_pwm_update(SERVO_STOP, SERVO_STOP, 1);
 80017dc:	2201      	movs	r2, #1
 80017de:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80017e2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017e6:	f000 f9fb 	bl	8001be0 <start_pwm_update>
		current_state = IDLE;
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <handle_movement+0xfc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
}
 80017f0:	bf00      	nop
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000035c 	.word	0x2000035c
 80017fc:	20000360 	.word	0x20000360
 8001800:	20000368 	.word	0x20000368
 8001804:	2000036c 	.word	0x2000036c
 8001808:	3df5c28f 	.word	0x3df5c28f
 800180c:	00000000 	.word	0x00000000
 8001810:	20000034 	.word	0x20000034
 8001814:	459f6000 	.word	0x459f6000
 8001818:	4541c000 	.word	0x4541c000
 800181c:	44480000 	.word	0x44480000
 8001820:	452f0000 	.word	0x452f0000
 8001824:	200002e8 	.word	0x200002e8

08001828 <calculate_angle>:

float calculate_angle(float x, float y, float x_next, float y_next) {
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001832:	edc7 0a02 	vstr	s1, [r7, #8]
 8001836:	ed87 1a01 	vstr	s2, [r7, #4]
 800183a:	edc7 1a00 	vstr	s3, [r7]
	// Berechnung des Skalarprodukts
	float dot_product = -y * (y_next - y);
 800183e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001842:	eeb1 7a67 	vneg.f32	s14, s15
 8001846:	edd7 6a00 	vldr	s13, [r7]
 800184a:	edd7 7a02 	vldr	s15, [r7, #8]
 800184e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	edc7 7a08 	vstr	s15, [r7, #32]

	// Länge der Vektoren
	float length_v1 = fabsf(y); // Da v1 die Länge von (0, -y) ist, entspricht die Länge |y|
 800185a:	edd7 7a02 	vldr	s15, [r7, #8]
 800185e:	eef0 7ae7 	vabs.f32	s15, s15
 8001862:	edc7 7a07 	vstr	s15, [r7, #28]
	float length_v2 = (float) sqrt(pow(x_next - x, 2) + pow(y_next - y, 2));
 8001866:	ed97 7a01 	vldr	s14, [r7, #4]
 800186a:	edd7 7a03 	vldr	s15, [r7, #12]
 800186e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001872:	ee17 0a90 	vmov	r0, s15
 8001876:	f7fe fe6f 	bl	8000558 <__aeabi_f2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001970 <calculate_angle+0x148>
 8001882:	ec43 2b10 	vmov	d0, r2, r3
 8001886:	f009 fa97 	bl	800adb8 <pow>
 800188a:	ec55 4b10 	vmov	r4, r5, d0
 800188e:	ed97 7a00 	vldr	s14, [r7]
 8001892:	edd7 7a02 	vldr	s15, [r7, #8]
 8001896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189a:	ee17 0a90 	vmov	r0, s15
 800189e:	f7fe fe5b 	bl	8000558 <__aeabi_f2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 8001970 <calculate_angle+0x148>
 80018aa:	ec43 2b10 	vmov	d0, r2, r3
 80018ae:	f009 fa83 	bl	800adb8 <pow>
 80018b2:	ec53 2b10 	vmov	r2, r3, d0
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe fcef 	bl	800029c <__adddf3>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	ec43 2b17 	vmov	d7, r2, r3
 80018c6:	eeb0 0a47 	vmov.f32	s0, s14
 80018ca:	eef0 0a67 	vmov.f32	s1, s15
 80018ce:	f009 fae3 	bl	800ae98 <sqrt>
 80018d2:	ec53 2b10 	vmov	r2, r3, d0
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f98d 	bl	8000bf8 <__aeabi_d2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]

	// Berechnung des Kosinus des Winkels
	float cos_theta = dot_product / (length_v1 * length_v2);
 80018e2:	ed97 7a07 	vldr	s14, [r7, #28]
 80018e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80018ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ee:	edd7 6a08 	vldr	s13, [r7, #32]
 80018f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f6:	edc7 7a05 	vstr	s15, [r7, #20]

	// Berechnung des Winkels in Radiant und Umwandlung in Grad
	float theta_rad = (float) acos(cos_theta);
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7fe fe2c 	bl	8000558 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	ec43 2b10 	vmov	d0, r2, r3
 8001908:	f009 fa22 	bl	800ad50 <acos>
 800190c:	ec53 2b10 	vmov	r2, r3, d0
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f970 	bl	8000bf8 <__aeabi_d2f>
 8001918:	4603      	mov	r3, r0
 800191a:	613b      	str	r3, [r7, #16]
	float theta_deg = (float) (theta_rad * (180.0 / M_PI));
 800191c:	6938      	ldr	r0, [r7, #16]
 800191e:	f7fe fe1b 	bl	8000558 <__aeabi_f2d>
 8001922:	a315      	add	r3, pc, #84	@ (adr r3, 8001978 <calculate_angle+0x150>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe6e 	bl	8000608 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4610      	mov	r0, r2
 8001932:	4619      	mov	r1, r3
 8001934:	f7ff f960 	bl	8000bf8 <__aeabi_d2f>
 8001938:	4603      	mov	r3, r0
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24

	// Bestimmen der Richtung
	if (x_next < x) {
 800193c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001940:	edd7 7a03 	vldr	s15, [r7, #12]
 8001944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	d505      	bpl.n	800195a <calculate_angle+0x132>
		theta_deg = -theta_deg; // Negativer Winkel, wenn x_next links von x ist
 800194e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001952:	eef1 7a67 	vneg.f32	s15, s15
 8001956:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	}

	return theta_deg;
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	ee07 3a90 	vmov	s15, r3
}
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	3728      	adds	r7, #40	@ 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bdb0      	pop	{r4, r5, r7, pc}
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w
 8001970:	00000000 	.word	0x00000000
 8001974:	40000000 	.word	0x40000000
 8001978:	1a63c1f8 	.word	0x1a63c1f8
 800197c:	404ca5dc 	.word	0x404ca5dc

08001980 <distance_to_target>:

float distance_to_target(float current_x, float current_y, float target_x,
		float target_y) {
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	ed87 0a03 	vstr	s0, [r7, #12]
 800198a:	edc7 0a02 	vstr	s1, [r7, #8]
 800198e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001992:	edc7 1a00 	vstr	s3, [r7]
	return sqrt(pow(target_x - current_x, 2) + pow(target_y - current_y, 2));
 8001996:	ed97 7a01 	vldr	s14, [r7, #4]
 800199a:	edd7 7a03 	vldr	s15, [r7, #12]
 800199e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a2:	ee17 0a90 	vmov	r0, s15
 80019a6:	f7fe fdd7 	bl	8000558 <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8001a20 <distance_to_target+0xa0>
 80019b2:	ec43 2b10 	vmov	d0, r2, r3
 80019b6:	f009 f9ff 	bl	800adb8 <pow>
 80019ba:	ec55 4b10 	vmov	r4, r5, d0
 80019be:	ed97 7a00 	vldr	s14, [r7]
 80019c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ca:	ee17 0a90 	vmov	r0, s15
 80019ce:	f7fe fdc3 	bl	8000558 <__aeabi_f2d>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001a20 <distance_to_target+0xa0>
 80019da:	ec43 2b10 	vmov	d0, r2, r3
 80019de:	f009 f9eb 	bl	800adb8 <pow>
 80019e2:	ec53 2b10 	vmov	r2, r3, d0
 80019e6:	4620      	mov	r0, r4
 80019e8:	4629      	mov	r1, r5
 80019ea:	f7fe fc57 	bl	800029c <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	ec43 2b17 	vmov	d7, r2, r3
 80019f6:	eeb0 0a47 	vmov.f32	s0, s14
 80019fa:	eef0 0a67 	vmov.f32	s1, s15
 80019fe:	f009 fa4b 	bl	800ae98 <sqrt>
 8001a02:	ec53 2b10 	vmov	r2, r3, d0
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f8f5 	bl	8000bf8 <__aeabi_d2f>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	ee07 3a90 	vmov	s15, r3
}
 8001a14:	eeb0 0a67 	vmov.f32	s0, s15
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40000000 	.word	0x40000000

08001a28 <execute_command>:

void execute_command(const char *cmd) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	6078      	str	r0, [r7, #4]
	if (strncmp(cmd, "STOP", 4) == 0) {
 8001a30:	2204      	movs	r2, #4
 8001a32:	4945      	ldr	r1, [pc, #276]	@ (8001b48 <execute_command+0x120>)
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f005 f9be 	bl	8006db6 <strncmp>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10a      	bne.n	8001a56 <execute_command+0x2e>
		start_pwm_update(SERVO_STOP, SERVO_STOP, 1);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001a46:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001a4a:	f000 f8c9 	bl	8001be0 <start_pwm_update>
		target_set = 0; // Set the target flag
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <execute_command+0x124>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
		// Recalculate direction to target and start movement
		current_state = ROTATING;  // Start with rotating to face the target
	} else {
		//printf("Unknown command: %s\n", cmd);
	}
}
 8001a54:	e073      	b.n	8001b3e <execute_command+0x116>
	} else if (strncmp(cmd, "START_SPINNING", 14) == 0) {
 8001a56:	220e      	movs	r2, #14
 8001a58:	493d      	ldr	r1, [pc, #244]	@ (8001b50 <execute_command+0x128>)
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f005 f9ab 	bl	8006db6 <strncmp>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10b      	bne.n	8001a7e <execute_command+0x56>
		start_pwm_update(FORWARD_MAX, FORWARD_MAX, 50000); // Example to spin in place
 8001a66:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001a6a:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 8001a6e:	f241 30ec 	movw	r0, #5100	@ 0x13ec
 8001a72:	f000 f8b5 	bl	8001be0 <start_pwm_update>
		target_set = 0; // Set the target flag
 8001a76:	4b35      	ldr	r3, [pc, #212]	@ (8001b4c <execute_command+0x124>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
}
 8001a7c:	e05f      	b.n	8001b3e <execute_command+0x116>
	} else if (strncmp(cmd, "LOCATION_UPDATE", 15) == 0) {
 8001a7e:	220f      	movs	r2, #15
 8001a80:	4934      	ldr	r1, [pc, #208]	@ (8001b54 <execute_command+0x12c>)
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f005 f997 	bl	8006db6 <strncmp>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d141      	bne.n	8001b12 <execute_command+0xea>
		sscanf(cmd + 16, "%f;%f;%f", &current_x, &current_y, &current_yaw);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f103 0010 	add.w	r0, r3, #16
 8001a94:	4b30      	ldr	r3, [pc, #192]	@ (8001b58 <execute_command+0x130>)
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <execute_command+0x134>)
 8001a9a:	4a31      	ldr	r2, [pc, #196]	@ (8001b60 <execute_command+0x138>)
 8001a9c:	4931      	ldr	r1, [pc, #196]	@ (8001b64 <execute_command+0x13c>)
 8001a9e:	f005 f913 	bl	8006cc8 <siscanf>
		if (target_set) {
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <execute_command+0x124>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d049      	beq.n	8001b3e <execute_command+0x116>
			float target_angle = calculate_angle(current_x, current_y, target_x,
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <execute_command+0x138>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <execute_command+0x134>)
 8001ab2:	ed93 7a00 	vldr	s14, [r3]
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <execute_command+0x140>)
 8001ab8:	edd3 6a00 	vldr	s13, [r3]
 8001abc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b6c <execute_command+0x144>)
 8001abe:	ed93 6a00 	vldr	s12, [r3]
 8001ac2:	eef0 1a46 	vmov.f32	s3, s12
 8001ac6:	eeb0 1a66 	vmov.f32	s2, s13
 8001aca:	eef0 0a47 	vmov.f32	s1, s14
 8001ace:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad2:	f7ff fea9 	bl	8001828 <calculate_angle>
 8001ad6:	ed87 0a03 	vstr	s0, [r7, #12]
			float angle_error = target_angle - current_yaw;
 8001ada:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <execute_command+0x130>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae8:	edc7 7a02 	vstr	s15, [r7, #8]
			if (fabsf(angle_error) > ANGLE_THRESHOLD) {
 8001aec:	edd7 7a02 	vldr	s15, [r7, #8]
 8001af0:	eef0 7ae7 	vabs.f32	s15, s15
 8001af4:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8001af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	dd03      	ble.n	8001b0a <execute_command+0xe2>
				current_state = ROTATING;  // Start rotating incrementally
 8001b02:	4b1b      	ldr	r3, [pc, #108]	@ (8001b70 <execute_command+0x148>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
}
 8001b08:	e019      	b.n	8001b3e <execute_command+0x116>
				current_state = MOVING;  // Start moving forward incrementally
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <execute_command+0x148>)
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	701a      	strb	r2, [r3, #0]
}
 8001b10:	e015      	b.n	8001b3e <execute_command+0x116>
	} else if (strncmp(cmd, "TARGET_UPDATE", 13) == 0) {
 8001b12:	220d      	movs	r2, #13
 8001b14:	4917      	ldr	r1, [pc, #92]	@ (8001b74 <execute_command+0x14c>)
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f005 f94d 	bl	8006db6 <strncmp>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10d      	bne.n	8001b3e <execute_command+0x116>
		sscanf(cmd + 14, "%f;%f", &target_x, &target_y);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f103 000e 	add.w	r0, r3, #14
 8001b28:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <execute_command+0x144>)
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b68 <execute_command+0x140>)
 8001b2c:	4912      	ldr	r1, [pc, #72]	@ (8001b78 <execute_command+0x150>)
 8001b2e:	f005 f8cb 	bl	8006cc8 <siscanf>
		target_set = 1; // Set the target flag
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <execute_command+0x124>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
		current_state = ROTATING;  // Start with rotating to face the target
 8001b38:	4b0d      	ldr	r3, [pc, #52]	@ (8001b70 <execute_command+0x148>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	0800c248 	.word	0x0800c248
 8001b4c:	20000370 	.word	0x20000370
 8001b50:	0800c250 	.word	0x0800c250
 8001b54:	0800c260 	.word	0x0800c260
 8001b58:	20000364 	.word	0x20000364
 8001b5c:	20000360 	.word	0x20000360
 8001b60:	2000035c 	.word	0x2000035c
 8001b64:	0800c270 	.word	0x0800c270
 8001b68:	20000368 	.word	0x20000368
 8001b6c:	2000036c 	.word	0x2000036c
 8001b70:	200002e8 	.word	0x200002e8
 8001b74:	0800c27c 	.word	0x0800c27c
 8001b78:	0800c28c 	.word	0x0800c28c

08001b7c <set_servo_pwm>:

void set_servo_pwm(Servo *servo, uint32_t pulse) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
	servo->current_pwm = pulse;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d105      	bne.n	8001ba0 <set_servo_pwm+0x24>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b9e:	e018      	b.n	8001bd2 <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d105      	bne.n	8001bb4 <set_servo_pwm+0x38>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001bb2:	e00e      	b.n	8001bd2 <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d105      	bne.n	8001bc8 <set_servo_pwm+0x4c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001bc6:	e004      	b.n	8001bd2 <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <start_pwm_update>:

void start_pwm_update(uint32_t left_target, uint32_t right_target,
		uint32_t duration_ms) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	servo_left.target_pwm = left_target;
 8001bec:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <start_pwm_update+0x30>)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	60d3      	str	r3, [r2, #12]
	servo_right.target_pwm = right_target;
 8001bf2:	4a08      	ldr	r2, [pc, #32]	@ (8001c14 <start_pwm_update+0x34>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
	timer_count = duration_ms;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <start_pwm_update+0x38>)
 8001bfe:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3); // Start the timer with interrupt
 8001c00:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <start_pwm_update+0x3c>)
 8001c02:	f002 f9b7 	bl	8003f74 <HAL_TIM_Base_Start_IT>
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000010 	.word	0x20000010
 8001c18:	2000035a 	.word	0x2000035a
 8001c1c:	20000408 	.word	0x20000408

08001c20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001c24:	f000 fd5a 	bl	80026dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001c28:	f000 f86e 	bl	8001d08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001c2c:	f7ff fa7a 	bl	8001124 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001c30:	f000 fa2c 	bl	800208c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001c34:	f000 faca 	bl	80021cc <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001c38:	f000 fcac 	bl	8002594 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8001c3c:	f7ff fae8 	bl	8001210 <MX_I2C1_Init>
	MX_ADC1_Init();
 8001c40:	f7ff f9d8 	bl	8000ff4 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001c44:	f000 fb38 	bl	80022b8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001c48:	f000 fb84 	bl	8002354 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c52:	4823      	ldr	r0, [pc, #140]	@ (8001ce0 <main+0xc0>)
 8001c54:	f001 fb62 	bl	800331c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001c58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c5c:	f000 fdb0 	bl	80027c0 <HAL_Delay>
	 }
	 Gz_mean /= CALIB;
	 Ax_mean /= CALIB;
	 Ay_mean /= CALIB;*/

	HAL_TIM_PWM_Init(&htim1);
 8001c60:	4820      	ldr	r0, [pc, #128]	@ (8001ce4 <main+0xc4>)
 8001c62:	f002 fa18 	bl	8004096 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8001c66:	4820      	ldr	r0, [pc, #128]	@ (8001ce8 <main+0xc8>)
 8001c68:	f002 fa15 	bl	8004096 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	481d      	ldr	r0, [pc, #116]	@ (8001ce4 <main+0xc4>)
 8001c70:	f002 fa6a 	bl	8004148 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001c74:	2108      	movs	r1, #8
 8001c76:	481c      	ldr	r0, [pc, #112]	@ (8001ce8 <main+0xc8>)
 8001c78:	f002 fa66 	bl	8004148 <HAL_TIM_PWM_Start>
	TIM1->CR1 = 0x01;
 8001c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cec <main+0xcc>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
	TIM2->CR1 = 0x01;
 8001c82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer)); // interrupt based
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4918      	ldr	r1, [pc, #96]	@ (8001cf0 <main+0xd0>)
 8001c8e:	4819      	ldr	r0, [pc, #100]	@ (8001cf4 <main+0xd4>)
 8001c90:	f003 f9a8 	bl	8004fe4 <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim4); // Start TIM4 interrupt at startup (only once)
 8001c94:	4818      	ldr	r0, [pc, #96]	@ (8001cf8 <main+0xd8>)
 8001c96:	f002 f96d 	bl	8003f74 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ca0:	480f      	ldr	r0, [pc, #60]	@ (8001ce0 <main+0xc0>)
 8001ca2:	f001 fb3b 	bl	800331c <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (rx_complete) {
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <main+0xdc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <main+0x9a>
			execute_command(rx_buffer); // Process the command
 8001cae:	4814      	ldr	r0, [pc, #80]	@ (8001d00 <main+0xe0>)
 8001cb0:	f7ff feba 	bl	8001a28 <execute_command>
			rx_complete = 0; // Reset the completion flag
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <main+0xdc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
		}
		switch (current_state) {
 8001cba:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <main+0xe4>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d008      	beq.n	8001cd6 <main+0xb6>
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	dcee      	bgt.n	8001ca6 <main+0x86>
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d007      	beq.n	8001cdc <main+0xbc>
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d1ea      	bne.n	8001ca6 <main+0x86>
		case ROTATING:
			// Adjust rotation using PID
			handle_rotation();
 8001cd0:	f7ff fc40 	bl	8001554 <handle_rotation>
			break;
 8001cd4:	e003      	b.n	8001cde <main+0xbe>
		case MOVING:
			// Adjust movement using PID
			handle_movement();
 8001cd6:	f7ff fd27 	bl	8001728 <handle_movement>
			break;
 8001cda:	e000      	b.n	8001cde <main+0xbe>
		case IDLE:
			// Do nothing
			break;
 8001cdc:	bf00      	nop
		if (rx_complete) {
 8001cde:	e7e2      	b.n	8001ca6 <main+0x86>
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	20000378 	.word	0x20000378
 8001ce8:	200003c0 	.word	0x200003c0
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	20000358 	.word	0x20000358
 8001cf4:	20000498 	.word	0x20000498
 8001cf8:	20000450 	.word	0x20000450
 8001cfc:	20000354 	.word	0x20000354
 8001d00:	200002ec 	.word	0x200002ec
 8001d04:	200002e8 	.word	0x200002e8

08001d08 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b094      	sub	sp, #80	@ 0x50
 8001d0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001d0e:	f107 0320 	add.w	r3, r7, #32
 8001d12:	2230      	movs	r2, #48	@ 0x30
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f005 f845 	bl	8006da6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	4b29      	ldr	r3, [pc, #164]	@ (8001dd8 <SystemClock_Config+0xd0>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	4a28      	ldr	r2, [pc, #160]	@ (8001dd8 <SystemClock_Config+0xd0>)
 8001d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3c:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <SystemClock_Config+0xd0>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	4b23      	ldr	r3, [pc, #140]	@ (8001ddc <SystemClock_Config+0xd4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d54:	4a21      	ldr	r2, [pc, #132]	@ (8001ddc <SystemClock_Config+0xd4>)
 8001d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <SystemClock_Config+0xd4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d64:	607b      	str	r3, [r7, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d72:	2302      	movs	r3, #2
 8001d74:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 20;
 8001d7c:	2314      	movs	r3, #20
 8001d7e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 128;
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d84:	2302      	movs	r3, #2
 8001d86:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d8c:	f107 0320 	add.w	r3, r7, #32
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 fc21 	bl	80035d8 <HAL_RCC_OscConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <SystemClock_Config+0x98>
		Error_Handler();
 8001d9c:	f000 f820 	bl	8001de0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001da0:	230f      	movs	r3, #15
 8001da2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da4:	2302      	movs	r3, #2
 8001da6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fe83 	bl	8003ac8 <HAL_RCC_ClockConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <SystemClock_Config+0xc4>
		Error_Handler();
 8001dc8:	f000 f80a 	bl	8001de0 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001dcc:	f001 ff62 	bl	8003c94 <HAL_RCC_EnableCSS>
}
 8001dd0:	bf00      	nop
 8001dd2:	3750      	adds	r7, #80	@ 0x50
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40007000 	.word	0x40007000

08001de0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <Error_Handler+0x8>

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001e40:	f002 f82e 	bl	8003ea0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <NMI_Handler+0x8>

08001e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <MemManage_Handler+0x4>

08001e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	bf00      	nop
 8001e66:	e7fd      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e96:	f000 fc73 	bl	8002780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <TIM3_IRQHandler+0x10>)
 8001ea6:	f002 f9ff 	bl	80042a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000408 	.word	0x20000408

08001eb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <TIM4_IRQHandler+0x10>)
 8001eba:	f002 f9f5 	bl	80042a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000450 	.word	0x20000450

08001ec8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <USART1_IRQHandler+0x10>)
 8001ece:	f003 f8af 	bl	8005030 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000498 	.word	0x20000498

08001edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return 1;
 8001ee0:	2301      	movs	r3, #1
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <_kill>:

int _kill(int pid, int sig)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ef6:	f004 ffbb 	bl	8006e70 <__errno>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2216      	movs	r2, #22
 8001efe:	601a      	str	r2, [r3, #0]
  return -1;
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_exit>:

void _exit (int status)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ffe7 	bl	8001eec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f1e:	bf00      	nop
 8001f20:	e7fd      	b.n	8001f1e <_exit+0x12>

08001f22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e00a      	b.n	8001f4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f34:	f3af 8000 	nop.w
 8001f38:	4601      	mov	r1, r0
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	60ba      	str	r2, [r7, #8]
 8001f40:	b2ca      	uxtb	r2, r1
 8001f42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3301      	adds	r3, #1
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	dbf0      	blt.n	8001f34 <_read+0x12>
  }

  return len;
 8001f52:	687b      	ldr	r3, [r7, #4]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e009      	b.n	8001f82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	60ba      	str	r2, [r7, #8]
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	dbf1      	blt.n	8001f6e <_write+0x12>
  }
  return len;
 8001f8a:	687b      	ldr	r3, [r7, #4]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_close>:

int _close(int file)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fbc:	605a      	str	r2, [r3, #4]
  return 0;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_isatty>:

int _isatty(int file)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f004 ff20 	bl	8006e70 <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20010000 	.word	0x20010000
 800205c:	00000400 	.word	0x00000400
 8002060:	20000374 	.word	0x20000374
 8002064:	20000630 	.word	0x20000630

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <SystemInit+0x20>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <SystemInit+0x20>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b096      	sub	sp, #88	@ 0x58
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002092:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2220      	movs	r2, #32
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f004 fe6e 	bl	8006da6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ca:	4b3e      	ldr	r3, [pc, #248]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80020cc:	4a3e      	ldr	r2, [pc, #248]	@ (80021c8 <MX_TIM1_Init+0x13c>)
 80020ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 80020d0:	4b3c      	ldr	r3, [pc, #240]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80020d2:	2227      	movs	r2, #39	@ 0x27
 80020d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d6:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 80020dc:	4b39      	ldr	r3, [pc, #228]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80020de:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80020e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e4:	4b37      	ldr	r3, [pc, #220]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ea:	4b36      	ldr	r3, [pc, #216]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b34      	ldr	r3, [pc, #208]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020f6:	4833      	ldr	r0, [pc, #204]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80020f8:	f001 feed 	bl	8003ed6 <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002102:	f7ff fe6d 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800210a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800210c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002110:	4619      	mov	r1, r3
 8002112:	482c      	ldr	r0, [pc, #176]	@ (80021c4 <MX_TIM1_Init+0x138>)
 8002114:	f002 fa7a 	bl	800460c <HAL_TIM_ConfigClockSource>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800211e:	f7ff fe5f 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002122:	4828      	ldr	r0, [pc, #160]	@ (80021c4 <MX_TIM1_Init+0x138>)
 8002124:	f001 ffb7 	bl	8004096 <HAL_TIM_PWM_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800212e:	f7ff fe57 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800213a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800213e:	4619      	mov	r1, r3
 8002140:	4820      	ldr	r0, [pc, #128]	@ (80021c4 <MX_TIM1_Init+0x138>)
 8002142:	f002 fe2b 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800214c:	f7ff fe48 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002150:	2360      	movs	r3, #96	@ 0x60
 8002152:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800215c:	2300      	movs	r3, #0
 800215e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800216c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002170:	2200      	movs	r2, #0
 8002172:	4619      	mov	r1, r3
 8002174:	4813      	ldr	r0, [pc, #76]	@ (80021c4 <MX_TIM1_Init+0x138>)
 8002176:	f002 f987 	bl	8004488 <HAL_TIM_PWM_ConfigChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002180:	f7ff fe2e 	bl	8001de0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002198:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800219c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4807      	ldr	r0, [pc, #28]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80021a8:	f002 fe66 	bl	8004e78 <HAL_TIMEx_ConfigBreakDeadTime>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80021b2:	f7ff fe15 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021b6:	4803      	ldr	r0, [pc, #12]	@ (80021c4 <MX_TIM1_Init+0x138>)
 80021b8:	f000 f98a 	bl	80024d0 <HAL_TIM_MspPostInit>

}
 80021bc:	bf00      	nop
 80021be:	3758      	adds	r7, #88	@ 0x58
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000378 	.word	0x20000378
 80021c8:	40010000 	.word	0x40010000

080021cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08e      	sub	sp, #56	@ 0x38
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	f107 0320 	add.w	r3, r7, #32
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]
 80021fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021fc:	4b2d      	ldr	r3, [pc, #180]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 80021fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002202:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8002204:	4b2b      	ldr	r3, [pc, #172]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 8002206:	2227      	movs	r2, #39	@ 0x27
 8002208:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220a:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8002210:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 8002212:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8002216:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002218:	4b26      	ldr	r3, [pc, #152]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800221e:	4b25      	ldr	r3, [pc, #148]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002224:	4823      	ldr	r0, [pc, #140]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 8002226:	f001 fe56 	bl	8003ed6 <HAL_TIM_Base_Init>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002230:	f7ff fdd6 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002238:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800223a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800223e:	4619      	mov	r1, r3
 8002240:	481c      	ldr	r0, [pc, #112]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 8002242:	f002 f9e3 	bl	800460c <HAL_TIM_ConfigClockSource>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800224c:	f7ff fdc8 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002250:	4818      	ldr	r0, [pc, #96]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 8002252:	f001 ff20 	bl	8004096 <HAL_TIM_PWM_Init>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800225c:	f7ff fdc0 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002268:	f107 0320 	add.w	r3, r7, #32
 800226c:	4619      	mov	r1, r3
 800226e:	4811      	ldr	r0, [pc, #68]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 8002270:	f002 fd94 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800227a:	f7ff fdb1 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800227e:	2360      	movs	r3, #96	@ 0x60
 8002280:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	2208      	movs	r2, #8
 8002292:	4619      	mov	r1, r3
 8002294:	4807      	ldr	r0, [pc, #28]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 8002296:	f002 f8f7 	bl	8004488 <HAL_TIM_PWM_ConfigChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80022a0:	f7ff fd9e 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022a4:	4803      	ldr	r0, [pc, #12]	@ (80022b4 <MX_TIM2_Init+0xe8>)
 80022a6:	f000 f913 	bl	80024d0 <HAL_TIM_MspPostInit>

}
 80022aa:	bf00      	nop
 80022ac:	3738      	adds	r7, #56	@ 0x38
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200003c0 	.word	0x200003c0

080022b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022cc:	463b      	mov	r3, r7
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <MX_TIM3_Init+0x94>)
 80022d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <MX_TIM3_Init+0x98>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80022da:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <MX_TIM3_Init+0x94>)
 80022dc:	2201      	movs	r2, #1
 80022de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <MX_TIM3_Init+0x94>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 80022e6:	4b19      	ldr	r3, [pc, #100]	@ (800234c <MX_TIM3_Init+0x94>)
 80022e8:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80022ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b17      	ldr	r3, [pc, #92]	@ (800234c <MX_TIM3_Init+0x94>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b15      	ldr	r3, [pc, #84]	@ (800234c <MX_TIM3_Init+0x94>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022fa:	4814      	ldr	r0, [pc, #80]	@ (800234c <MX_TIM3_Init+0x94>)
 80022fc:	f001 fdeb 	bl	8003ed6 <HAL_TIM_Base_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002306:	f7ff fd6b 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800230e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	4619      	mov	r1, r3
 8002316:	480d      	ldr	r0, [pc, #52]	@ (800234c <MX_TIM3_Init+0x94>)
 8002318:	f002 f978 	bl	800460c <HAL_TIM_ConfigClockSource>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002322:	f7ff fd5d 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800232e:	463b      	mov	r3, r7
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	@ (800234c <MX_TIM3_Init+0x94>)
 8002334:	f002 fd32 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800233e:	f7ff fd4f 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000408 	.word	0x20000408
 8002350:	40000400 	.word	0x40000400

08002354 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235a:	f107 0308 	add.w	r3, r7, #8
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002368:	463b      	mov	r3, r7
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002370:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <MX_TIM4_Init+0x94>)
 8002372:	4a1e      	ldr	r2, [pc, #120]	@ (80023ec <MX_TIM4_Init+0x98>)
 8002374:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002376:	4b1c      	ldr	r3, [pc, #112]	@ (80023e8 <MX_TIM4_Init+0x94>)
 8002378:	2201      	movs	r2, #1
 800237a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237c:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <MX_TIM4_Init+0x94>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39999;
 8002382:	4b19      	ldr	r3, [pc, #100]	@ (80023e8 <MX_TIM4_Init+0x94>)
 8002384:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8002388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238a:	4b17      	ldr	r3, [pc, #92]	@ (80023e8 <MX_TIM4_Init+0x94>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <MX_TIM4_Init+0x94>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002396:	4814      	ldr	r0, [pc, #80]	@ (80023e8 <MX_TIM4_Init+0x94>)
 8002398:	f001 fd9d 	bl	8003ed6 <HAL_TIM_Base_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80023a2:	f7ff fd1d 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	4619      	mov	r1, r3
 80023b2:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <MX_TIM4_Init+0x94>)
 80023b4:	f002 f92a 	bl	800460c <HAL_TIM_ConfigClockSource>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80023be:	f7ff fd0f 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	4619      	mov	r1, r3
 80023ce:	4806      	ldr	r0, [pc, #24]	@ (80023e8 <MX_TIM4_Init+0x94>)
 80023d0:	f002 fce4 	bl	8004d9c <HAL_TIMEx_MasterConfigSynchronization>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80023da:	f7ff fd01 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000450 	.word	0x20000450
 80023ec:	40000800 	.word	0x40000800

080023f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a30      	ldr	r2, [pc, #192]	@ (80024c0 <HAL_TIM_Base_MspInit+0xd0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	4b2f      	ldr	r3, [pc, #188]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	4a2e      	ldr	r2, [pc, #184]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6453      	str	r3, [r2, #68]	@ 0x44
 8002412:	4b2c      	ldr	r3, [pc, #176]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800241e:	e04a      	b.n	80024b6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b25      	ldr	r3, [pc, #148]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a24      	ldr	r2, [pc, #144]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
}
 8002446:	e036      	b.n	80024b6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1e      	ldr	r2, [pc, #120]	@ (80024c8 <HAL_TIM_Base_MspInit+0xd8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d116      	bne.n	8002480 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	6413      	str	r3, [r2, #64]	@ 0x40
 8002462:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	201d      	movs	r0, #29
 8002474:	f000 fd05 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002478:	201d      	movs	r0, #29
 800247a:	f000 fd1e 	bl	8002eba <HAL_NVIC_EnableIRQ>
}
 800247e:	e01a      	b.n	80024b6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a11      	ldr	r2, [pc, #68]	@ (80024cc <HAL_TIM_Base_MspInit+0xdc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d115      	bne.n	80024b6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b0d      	ldr	r3, [pc, #52]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	4a0c      	ldr	r2, [pc, #48]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	6413      	str	r3, [r2, #64]	@ 0x40
 800249a:	4b0a      	ldr	r3, [pc, #40]	@ (80024c4 <HAL_TIM_Base_MspInit+0xd4>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	201e      	movs	r0, #30
 80024ac:	f000 fce9 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024b0:	201e      	movs	r0, #30
 80024b2:	f000 fd02 	bl	8002eba <HAL_NVIC_EnableIRQ>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40010000 	.word	0x40010000
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40000800 	.word	0x40000800

080024d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	@ 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a25      	ldr	r2, [pc, #148]	@ (8002584 <HAL_TIM_MspPostInit+0xb4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d11f      	bne.n	8002532 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <HAL_TIM_MspPostInit+0xb8>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	4a23      	ldr	r2, [pc, #140]	@ (8002588 <HAL_TIM_MspPostInit+0xb8>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	@ 0x30
 8002502:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <HAL_TIM_MspPostInit+0xb8>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800250e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002520:	2301      	movs	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	4619      	mov	r1, r3
 800252a:	4818      	ldr	r0, [pc, #96]	@ (800258c <HAL_TIM_MspPostInit+0xbc>)
 800252c:	f000 fd72 	bl	8003014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002530:	e023      	b.n	800257a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800253a:	d11e      	bne.n	800257a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <HAL_TIM_MspPostInit+0xb8>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	4a10      	ldr	r2, [pc, #64]	@ (8002588 <HAL_TIM_MspPostInit+0xb8>)
 8002546:	f043 0302 	orr.w	r3, r3, #2
 800254a:	6313      	str	r3, [r2, #48]	@ 0x30
 800254c:	4b0e      	ldr	r3, [pc, #56]	@ (8002588 <HAL_TIM_MspPostInit+0xb8>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800256a:	2301      	movs	r3, #1
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4806      	ldr	r0, [pc, #24]	@ (8002590 <HAL_TIM_MspPostInit+0xc0>)
 8002576:	f000 fd4d 	bl	8003014 <HAL_GPIO_Init>
}
 800257a:	bf00      	nop
 800257c:	3728      	adds	r7, #40	@ 0x28
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40010000 	.word	0x40010000
 8002588:	40023800 	.word	0x40023800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400

08002594 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002598:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <MX_USART1_UART_Init+0x4c>)
 800259a:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <MX_USART1_UART_Init+0x50>)
 800259c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <MX_USART1_UART_Init+0x4c>)
 80025a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80025a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <MX_USART1_UART_Init+0x4c>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <MX_USART1_UART_Init+0x4c>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <MX_USART1_UART_Init+0x4c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025b8:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <MX_USART1_UART_Init+0x4c>)
 80025ba:	220c      	movs	r2, #12
 80025bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025be:	4b08      	ldr	r3, [pc, #32]	@ (80025e0 <MX_USART1_UART_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c4:	4b06      	ldr	r3, [pc, #24]	@ (80025e0 <MX_USART1_UART_Init+0x4c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ca:	4805      	ldr	r0, [pc, #20]	@ (80025e0 <MX_USART1_UART_Init+0x4c>)
 80025cc:	f002 fcba 	bl	8004f44 <HAL_UART_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80025d6:	f7ff fc03 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000498 	.word	0x20000498
 80025e4:	40011000 	.word	0x40011000

080025e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	@ 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1d      	ldr	r2, [pc, #116]	@ (800267c <HAL_UART_MspInit+0x94>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d134      	bne.n	8002674 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <HAL_UART_MspInit+0x98>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_UART_MspInit+0x98>)
 8002614:	f043 0310 	orr.w	r3, r3, #16
 8002618:	6453      	str	r3, [r2, #68]	@ 0x44
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_UART_MspInit+0x98>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <HAL_UART_MspInit+0x98>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a14      	ldr	r2, [pc, #80]	@ (8002680 <HAL_UART_MspInit+0x98>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <HAL_UART_MspInit+0x98>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002642:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002654:	2307      	movs	r3, #7
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	4619      	mov	r1, r3
 800265e:	4809      	ldr	r0, [pc, #36]	@ (8002684 <HAL_UART_MspInit+0x9c>)
 8002660:	f000 fcd8 	bl	8003014 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	2100      	movs	r1, #0
 8002668:	2025      	movs	r0, #37	@ 0x25
 800266a:	f000 fc0a 	bl	8002e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800266e:	2025      	movs	r0, #37	@ 0x25
 8002670:	f000 fc23 	bl	8002eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002674:	bf00      	nop
 8002676:	3728      	adds	r7, #40	@ 0x28
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40011000 	.word	0x40011000
 8002680:	40023800 	.word	0x40023800
 8002684:	40020000 	.word	0x40020000

08002688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800268c:	480d      	ldr	r0, [pc, #52]	@ (80026c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800268e:	490e      	ldr	r1, [pc, #56]	@ (80026c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002690:	4a0e      	ldr	r2, [pc, #56]	@ (80026cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002694:	e002      	b.n	800269c <LoopCopyDataInit>

08002696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269a:	3304      	adds	r3, #4

0800269c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800269c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a0:	d3f9      	bcc.n	8002696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a2:	4a0b      	ldr	r2, [pc, #44]	@ (80026d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026a4:	4c0b      	ldr	r4, [pc, #44]	@ (80026d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a8:	e001      	b.n	80026ae <LoopFillZerobss>

080026aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ac:	3204      	adds	r2, #4

080026ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b0:	d3fb      	bcc.n	80026aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026b2:	f7ff fcd9 	bl	8002068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b6:	f004 fbe1 	bl	8006e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ba:	f7ff fab1 	bl	8001c20 <main>
  bx  lr    
 80026be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c8:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 80026cc:	0800c748 	.word	0x0800c748
  ldr r2, =_sbss
 80026d0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80026d4:	20000630 	.word	0x20000630

080026d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d8:	e7fe      	b.n	80026d8 <ADC_IRQHandler>
	...

080026dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026e0:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <HAL_Init+0x40>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a0d      	ldr	r2, [pc, #52]	@ (800271c <HAL_Init+0x40>)
 80026e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_Init+0x40>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	@ (800271c <HAL_Init+0x40>)
 80026f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f8:	4b08      	ldr	r3, [pc, #32]	@ (800271c <HAL_Init+0x40>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a07      	ldr	r2, [pc, #28]	@ (800271c <HAL_Init+0x40>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002704:	2003      	movs	r0, #3
 8002706:	f000 fbb1 	bl	8002e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270a:	200f      	movs	r0, #15
 800270c:	f000 f808 	bl	8002720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002710:	f7ff fb6c 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023c00 	.word	0x40023c00

08002720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002728:	4b12      	ldr	r3, [pc, #72]	@ (8002774 <HAL_InitTick+0x54>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_InitTick+0x58>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002736:	fbb3 f3f1 	udiv	r3, r3, r1
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fbc9 	bl	8002ed6 <HAL_SYSTICK_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e00e      	b.n	800276c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d80a      	bhi.n	800276a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002754:	2200      	movs	r2, #0
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f000 fb91 	bl	8002e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002760:	4a06      	ldr	r2, [pc, #24]	@ (800277c <HAL_InitTick+0x5c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	2000004c 	.word	0x2000004c
 8002778:	20000054 	.word	0x20000054
 800277c:	20000050 	.word	0x20000050

08002780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002784:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_IncTick+0x20>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b06      	ldr	r3, [pc, #24]	@ (80027a4 <HAL_IncTick+0x24>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4413      	add	r3, r2
 8002790:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <HAL_IncTick+0x24>)
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000054 	.word	0x20000054
 80027a4:	200004e0 	.word	0x200004e0

080027a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return uwTick;
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <HAL_GetTick+0x14>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	200004e0 	.word	0x200004e0

080027c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff ffee 	bl	80027a8 <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d005      	beq.n	80027e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027da:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <HAL_Delay+0x44>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027e6:	bf00      	nop
 80027e8:	f7ff ffde 	bl	80027a8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d8f7      	bhi.n	80027e8 <HAL_Delay+0x28>
  {
  }
}
 80027f8:	bf00      	nop
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000054 	.word	0x20000054

08002808 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e033      	b.n	8002886 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe fc38 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b00      	cmp	r3, #0
 8002844:	d118      	bne.n	8002878 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800284e:	f023 0302 	bic.w	r3, r3, #2
 8002852:	f043 0202 	orr.w	r2, r3, #2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f93a 	bl	8002ad4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	@ 0x40
 8002876:	e001      	b.n	800287c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002884:	7bfb      	ldrb	r3, [r7, #15]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x1c>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e105      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x228>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b09      	cmp	r3, #9
 80028ba:	d925      	bls.n	8002908 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68d9      	ldr	r1, [r3, #12]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	3b1e      	subs	r3, #30
 80028d2:	2207      	movs	r2, #7
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43da      	mvns	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	400a      	ands	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68d9      	ldr	r1, [r3, #12]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4618      	mov	r0, r3
 80028f4:	4603      	mov	r3, r0
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4403      	add	r3, r0
 80028fa:	3b1e      	subs	r3, #30
 80028fc:	409a      	lsls	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	e022      	b.n	800294e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6919      	ldr	r1, [r3, #16]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	2207      	movs	r2, #7
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	400a      	ands	r2, r1
 800292a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6919      	ldr	r1, [r3, #16]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	b29b      	uxth	r3, r3
 800293c:	4618      	mov	r0, r3
 800293e:	4603      	mov	r3, r0
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4403      	add	r3, r0
 8002944:	409a      	lsls	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b06      	cmp	r3, #6
 8002954:	d824      	bhi.n	80029a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b05      	subs	r3, #5
 8002968:	221f      	movs	r2, #31
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	400a      	ands	r2, r1
 8002976:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	4618      	mov	r0, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	3b05      	subs	r3, #5
 8002992:	fa00 f203 	lsl.w	r2, r0, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34
 800299e:	e04c      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b0c      	cmp	r3, #12
 80029a6:	d824      	bhi.n	80029f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	3b23      	subs	r3, #35	@ 0x23
 80029ba:	221f      	movs	r2, #31
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43da      	mvns	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	400a      	ands	r2, r1
 80029c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	3b23      	subs	r3, #35	@ 0x23
 80029e4:	fa00 f203 	lsl.w	r2, r0, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80029f0:	e023      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	3b41      	subs	r3, #65	@ 0x41
 8002a04:	221f      	movs	r2, #31
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	400a      	ands	r2, r1
 8002a12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4618      	mov	r0, r3
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b41      	subs	r3, #65	@ 0x41
 8002a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a3a:	4b22      	ldr	r3, [pc, #136]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x234>)
 8002a3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a21      	ldr	r2, [pc, #132]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x238>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d109      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x1cc>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b12      	cmp	r3, #18
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a19      	ldr	r2, [pc, #100]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x238>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d123      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x21e>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b10      	cmp	r3, #16
 8002a6c:	d003      	beq.n	8002a76 <HAL_ADC_ConfigChannel+0x1e6>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b11      	cmp	r3, #17
 8002a74:	d11b      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d111      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <HAL_ADC_ConfigChannel+0x23c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a10      	ldr	r2, [pc, #64]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x240>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	0c9a      	lsrs	r2, r3, #18
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002aa0:	e002      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f9      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40012300 	.word	0x40012300
 8002ac8:	40012000 	.word	0x40012000
 8002acc:	2000004c 	.word	0x2000004c
 8002ad0:	431bde83 	.word	0x431bde83

08002ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002adc:	4b79      	ldr	r3, [pc, #484]	@ (8002cc4 <ADC_Init+0x1f0>)
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	021a      	lsls	r2, r3, #8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6899      	ldr	r1, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	4a58      	ldr	r2, [pc, #352]	@ (8002cc8 <ADC_Init+0x1f4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d022      	beq.n	8002bb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	e00f      	b.n	8002bd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bd0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0202 	bic.w	r2, r2, #2
 8002be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6899      	ldr	r1, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7e1b      	ldrb	r3, [r3, #24]
 8002bec:	005a      	lsls	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d01b      	beq.n	8002c38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6859      	ldr	r1, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	035a      	lsls	r2, r3, #13
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	e007      	b.n	8002c48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	051a      	lsls	r2, r3, #20
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6899      	ldr	r1, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c8a:	025a      	lsls	r2, r3, #9
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6899      	ldr	r1, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	029a      	lsls	r2, r3, #10
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	609a      	str	r2, [r3, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40012300 	.word	0x40012300
 8002cc8:	0f000001 	.word	0x0f000001

08002ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	@ (8002d10 <__NVIC_SetPriorityGrouping+0x44>)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60d3      	str	r3, [r2, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d18:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__NVIC_GetPriorityGrouping+0x18>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0a1b      	lsrs	r3, r3, #8
 8002d1e:	f003 0307 	and.w	r3, r3, #7
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	db0b      	blt.n	8002d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4907      	ldr	r1, [pc, #28]	@ (8002d68 <__NVIC_EnableIRQ+0x38>)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	095b      	lsrs	r3, r3, #5
 8002d50:	2001      	movs	r0, #1
 8002d52:	fa00 f202 	lsl.w	r2, r0, r2
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	e000e100 	.word	0xe000e100

08002d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	db0a      	blt.n	8002d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	490c      	ldr	r1, [pc, #48]	@ (8002db8 <__NVIC_SetPriority+0x4c>)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d94:	e00a      	b.n	8002dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4908      	ldr	r1, [pc, #32]	@ (8002dbc <__NVIC_SetPriority+0x50>)
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	3b04      	subs	r3, #4
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	440b      	add	r3, r1
 8002daa:	761a      	strb	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	@ 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f1c3 0307 	rsb	r3, r3, #7
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf28      	it	cs
 8002dde:	2304      	movcs	r3, #4
 8002de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3304      	adds	r3, #4
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <NVIC_EncodePriority+0x30>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3b03      	subs	r3, #3
 8002dee:	e000      	b.n	8002df2 <NVIC_EncodePriority+0x32>
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	f04f 32ff 	mov.w	r2, #4294967295
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	401a      	ands	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	43d9      	mvns	r1, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e18:	4313      	orrs	r3, r2
         );
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	@ 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e38:	d301      	bcc.n	8002e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00f      	b.n	8002e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e68 <SysTick_Config+0x40>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e46:	210f      	movs	r1, #15
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f7ff ff8e 	bl	8002d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e50:	4b05      	ldr	r3, [pc, #20]	@ (8002e68 <SysTick_Config+0x40>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e56:	4b04      	ldr	r3, [pc, #16]	@ (8002e68 <SysTick_Config+0x40>)
 8002e58:	2207      	movs	r2, #7
 8002e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	e000e010 	.word	0xe000e010

08002e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ff29 	bl	8002ccc <__NVIC_SetPriorityGrouping>
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e94:	f7ff ff3e 	bl	8002d14 <__NVIC_GetPriorityGrouping>
 8002e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	6978      	ldr	r0, [r7, #20]
 8002ea0:	f7ff ff8e 	bl	8002dc0 <NVIC_EncodePriority>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff5d 	bl	8002d6c <__NVIC_SetPriority>
}
 8002eb2:	bf00      	nop
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff31 	bl	8002d30 <__NVIC_EnableIRQ>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffa2 	bl	8002e28 <SysTick_Config>
 8002ee4:	4603      	mov	r3, r0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002efc:	f7ff fc54 	bl	80027a8 <HAL_GetTick>
 8002f00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d008      	beq.n	8002f20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2280      	movs	r2, #128	@ 0x80
 8002f12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e052      	b.n	8002fc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0216 	bic.w	r2, r2, #22
 8002f2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d103      	bne.n	8002f50 <HAL_DMA_Abort+0x62>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0208 	bic.w	r2, r2, #8
 8002f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f70:	e013      	b.n	8002f9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f72:	f7ff fc19 	bl	80027a8 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d90c      	bls.n	8002f9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2203      	movs	r2, #3
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e015      	b.n	8002fc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e4      	bne.n	8002f72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	223f      	movs	r2, #63	@ 0x3f
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d004      	beq.n	8002fec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e00c      	b.n	8003006 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2205      	movs	r2, #5
 8002ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e159      	b.n	80032e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	f040 8148 	bne.w	80032de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d005      	beq.n	8003066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003062:	2b02      	cmp	r3, #2
 8003064:	d130      	bne.n	80030c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800309c:	2201      	movs	r2, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 0201 	and.w	r2, r3, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d017      	beq.n	8003104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d123      	bne.n	8003158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80a2 	beq.w	80032de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b57      	ldr	r3, [pc, #348]	@ (80032fc <HAL_GPIO_Init+0x2e8>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	4a56      	ldr	r2, [pc, #344]	@ (80032fc <HAL_GPIO_Init+0x2e8>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031aa:	4b54      	ldr	r3, [pc, #336]	@ (80032fc <HAL_GPIO_Init+0x2e8>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b6:	4a52      	ldr	r2, [pc, #328]	@ (8003300 <HAL_GPIO_Init+0x2ec>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a49      	ldr	r2, [pc, #292]	@ (8003304 <HAL_GPIO_Init+0x2f0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d019      	beq.n	8003216 <HAL_GPIO_Init+0x202>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a48      	ldr	r2, [pc, #288]	@ (8003308 <HAL_GPIO_Init+0x2f4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_GPIO_Init+0x1fe>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a47      	ldr	r2, [pc, #284]	@ (800330c <HAL_GPIO_Init+0x2f8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00d      	beq.n	800320e <HAL_GPIO_Init+0x1fa>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a46      	ldr	r2, [pc, #280]	@ (8003310 <HAL_GPIO_Init+0x2fc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <HAL_GPIO_Init+0x1f6>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a45      	ldr	r2, [pc, #276]	@ (8003314 <HAL_GPIO_Init+0x300>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_GPIO_Init+0x1f2>
 8003202:	2304      	movs	r3, #4
 8003204:	e008      	b.n	8003218 <HAL_GPIO_Init+0x204>
 8003206:	2307      	movs	r3, #7
 8003208:	e006      	b.n	8003218 <HAL_GPIO_Init+0x204>
 800320a:	2303      	movs	r3, #3
 800320c:	e004      	b.n	8003218 <HAL_GPIO_Init+0x204>
 800320e:	2302      	movs	r3, #2
 8003210:	e002      	b.n	8003218 <HAL_GPIO_Init+0x204>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_GPIO_Init+0x204>
 8003216:	2300      	movs	r3, #0
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	f002 0203 	and.w	r2, r2, #3
 800321e:	0092      	lsls	r2, r2, #2
 8003220:	4093      	lsls	r3, r2
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003228:	4935      	ldr	r1, [pc, #212]	@ (8003300 <HAL_GPIO_Init+0x2ec>)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	3302      	adds	r3, #2
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003236:	4b38      	ldr	r3, [pc, #224]	@ (8003318 <HAL_GPIO_Init+0x304>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	43db      	mvns	r3, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4013      	ands	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800325a:	4a2f      	ldr	r2, [pc, #188]	@ (8003318 <HAL_GPIO_Init+0x304>)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003260:	4b2d      	ldr	r3, [pc, #180]	@ (8003318 <HAL_GPIO_Init+0x304>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003284:	4a24      	ldr	r2, [pc, #144]	@ (8003318 <HAL_GPIO_Init+0x304>)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800328a:	4b23      	ldr	r3, [pc, #140]	@ (8003318 <HAL_GPIO_Init+0x304>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003318 <HAL_GPIO_Init+0x304>)
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b4:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <HAL_GPIO_Init+0x304>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003318 <HAL_GPIO_Init+0x304>)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3301      	adds	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b0f      	cmp	r3, #15
 80032e8:	f67f aea2 	bls.w	8003030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	3724      	adds	r7, #36	@ 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	40013800 	.word	0x40013800
 8003304:	40020000 	.word	0x40020000
 8003308:	40020400 	.word	0x40020400
 800330c:	40020800 	.word	0x40020800
 8003310:	40020c00 	.word	0x40020c00
 8003314:	40021000 	.word	0x40021000
 8003318:	40013c00 	.word	0x40013c00

0800331c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
 8003328:	4613      	mov	r3, r2
 800332a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800332c:	787b      	ldrb	r3, [r7, #1]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003338:	e003      	b.n	8003342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800333a:	887b      	ldrh	r3, [r7, #2]
 800333c:	041a      	lsls	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	619a      	str	r2, [r3, #24]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e12b      	b.n	80035ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd ff78 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	@ 0x24
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033b4:	f000 fd4c 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 80033b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a81      	ldr	r2, [pc, #516]	@ (80035c4 <HAL_I2C_Init+0x274>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d807      	bhi.n	80033d4 <HAL_I2C_Init+0x84>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a80      	ldr	r2, [pc, #512]	@ (80035c8 <HAL_I2C_Init+0x278>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	bf94      	ite	ls
 80033cc:	2301      	movls	r3, #1
 80033ce:	2300      	movhi	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e006      	b.n	80033e2 <HAL_I2C_Init+0x92>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4a7d      	ldr	r2, [pc, #500]	@ (80035cc <HAL_I2C_Init+0x27c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	bf94      	ite	ls
 80033dc:	2301      	movls	r3, #1
 80033de:	2300      	movhi	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0e7      	b.n	80035ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a78      	ldr	r2, [pc, #480]	@ (80035d0 <HAL_I2C_Init+0x280>)
 80033ee:	fba2 2303 	umull	r2, r3, r2, r3
 80033f2:	0c9b      	lsrs	r3, r3, #18
 80033f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a6a      	ldr	r2, [pc, #424]	@ (80035c4 <HAL_I2C_Init+0x274>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d802      	bhi.n	8003424 <HAL_I2C_Init+0xd4>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3301      	adds	r3, #1
 8003422:	e009      	b.n	8003438 <HAL_I2C_Init+0xe8>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800342a:	fb02 f303 	mul.w	r3, r2, r3
 800342e:	4a69      	ldr	r2, [pc, #420]	@ (80035d4 <HAL_I2C_Init+0x284>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	3301      	adds	r3, #1
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	430b      	orrs	r3, r1
 800343e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800344a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	495c      	ldr	r1, [pc, #368]	@ (80035c4 <HAL_I2C_Init+0x274>)
 8003454:	428b      	cmp	r3, r1
 8003456:	d819      	bhi.n	800348c <HAL_I2C_Init+0x13c>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e59      	subs	r1, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	fbb1 f3f3 	udiv	r3, r1, r3
 8003466:	1c59      	adds	r1, r3, #1
 8003468:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800346c:	400b      	ands	r3, r1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <HAL_I2C_Init+0x138>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1e59      	subs	r1, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003480:	3301      	adds	r3, #1
 8003482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003486:	e051      	b.n	800352c <HAL_I2C_Init+0x1dc>
 8003488:	2304      	movs	r3, #4
 800348a:	e04f      	b.n	800352c <HAL_I2C_Init+0x1dc>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d111      	bne.n	80034b8 <HAL_I2C_Init+0x168>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1e58      	subs	r0, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	440b      	add	r3, r1
 80034a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	e012      	b.n	80034de <HAL_I2C_Init+0x18e>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1e58      	subs	r0, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	0099      	lsls	r1, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ce:	3301      	adds	r3, #1
 80034d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_I2C_Init+0x196>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e022      	b.n	800352c <HAL_I2C_Init+0x1dc>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10e      	bne.n	800350c <HAL_I2C_Init+0x1bc>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1e58      	subs	r0, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6859      	ldr	r1, [r3, #4]
 80034f6:	460b      	mov	r3, r1
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	440b      	add	r3, r1
 80034fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003500:	3301      	adds	r3, #1
 8003502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800350a:	e00f      	b.n	800352c <HAL_I2C_Init+0x1dc>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1e58      	subs	r0, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	0099      	lsls	r1, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003522:	3301      	adds	r3, #1
 8003524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003528:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	6809      	ldr	r1, [r1, #0]
 8003530:	4313      	orrs	r3, r2
 8003532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	431a      	orrs	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800355a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6911      	ldr	r1, [r2, #16]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68d2      	ldr	r2, [r2, #12]
 8003566:	4311      	orrs	r1, r2
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	430b      	orrs	r3, r1
 800356e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	430a      	orrs	r2, r1
 800358a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	000186a0 	.word	0x000186a0
 80035c8:	001e847f 	.word	0x001e847f
 80035cc:	003d08ff 	.word	0x003d08ff
 80035d0:	431bde83 	.word	0x431bde83
 80035d4:	10624dd3 	.word	0x10624dd3

080035d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e267      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d075      	beq.n	80036e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035f6:	4b88      	ldr	r3, [pc, #544]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d00c      	beq.n	800361c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003602:	4b85      	ldr	r3, [pc, #532]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800360a:	2b08      	cmp	r3, #8
 800360c:	d112      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360e:	4b82      	ldr	r3, [pc, #520]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003616:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800361a:	d10b      	bne.n	8003634 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	4b7e      	ldr	r3, [pc, #504]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d05b      	beq.n	80036e0 <HAL_RCC_OscConfig+0x108>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d157      	bne.n	80036e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e242      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800363c:	d106      	bne.n	800364c <HAL_RCC_OscConfig+0x74>
 800363e:	4b76      	ldr	r3, [pc, #472]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a75      	ldr	r2, [pc, #468]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e01d      	b.n	8003688 <HAL_RCC_OscConfig+0xb0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0x98>
 8003656:	4b70      	ldr	r3, [pc, #448]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6f      	ldr	r2, [pc, #444]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 800365c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b6d      	ldr	r3, [pc, #436]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6c      	ldr	r2, [pc, #432]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0xb0>
 8003670:	4b69      	ldr	r3, [pc, #420]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a68      	ldr	r2, [pc, #416]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b66      	ldr	r3, [pc, #408]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a65      	ldr	r2, [pc, #404]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7ff f88a 	bl	80027a8 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7ff f886 	bl	80027a8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	@ 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e207      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0xc0>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7ff f876 	bl	80027a8 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c0:	f7ff f872 	bl	80027a8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	@ 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1f3      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	4b51      	ldr	r3, [pc, #324]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0xe8>
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d063      	beq.n	80037b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fa:	4b47      	ldr	r3, [pc, #284]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003702:	2b08      	cmp	r3, #8
 8003704:	d11c      	bne.n	8003740 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b44      	ldr	r3, [pc, #272]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d116      	bne.n	8003740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	4b41      	ldr	r3, [pc, #260]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_RCC_OscConfig+0x152>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e1c7      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372a:	4b3b      	ldr	r3, [pc, #236]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4937      	ldr	r1, [pc, #220]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	e03a      	b.n	80037b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003748:	4b34      	ldr	r3, [pc, #208]	@ (800381c <HAL_RCC_OscConfig+0x244>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7ff f82b 	bl	80027a8 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003756:	f7ff f827 	bl	80027a8 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e1a8      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003768:	4b2b      	ldr	r3, [pc, #172]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b28      	ldr	r3, [pc, #160]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4925      	ldr	r1, [pc, #148]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	e015      	b.n	80037b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378a:	4b24      	ldr	r3, [pc, #144]	@ (800381c <HAL_RCC_OscConfig+0x244>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003790:	f7ff f80a 	bl	80027a8 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003798:	f7ff f806 	bl	80027a8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e187      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d036      	beq.n	8003830 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ca:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <HAL_RCC_OscConfig+0x248>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fe ffea 	bl	80027a8 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fe ffe6 	bl	80027a8 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e167      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_OscConfig+0x240>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x200>
 80037f6:	e01b      	b.n	8003830 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f8:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <HAL_RCC_OscConfig+0x248>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037fe:	f7fe ffd3 	bl	80027a8 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003804:	e00e      	b.n	8003824 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003806:	f7fe ffcf 	bl	80027a8 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d907      	bls.n	8003824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e150      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
 8003818:	40023800 	.word	0x40023800
 800381c:	42470000 	.word	0x42470000
 8003820:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b88      	ldr	r3, [pc, #544]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ea      	bne.n	8003806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8097 	beq.w	800396c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003842:	4b81      	ldr	r3, [pc, #516]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b7d      	ldr	r3, [pc, #500]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	4a7c      	ldr	r2, [pc, #496]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	@ 0x40
 800385e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b77      	ldr	r3, [pc, #476]	@ (8003a4c <HAL_RCC_OscConfig+0x474>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d118      	bne.n	80038ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b74      	ldr	r3, [pc, #464]	@ (8003a4c <HAL_RCC_OscConfig+0x474>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a73      	ldr	r2, [pc, #460]	@ (8003a4c <HAL_RCC_OscConfig+0x474>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fe ff8f 	bl	80027a8 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	e008      	b.n	80038a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388e:	f7fe ff8b 	bl	80027a8 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e10c      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a4c <HAL_RCC_OscConfig+0x474>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0f0      	beq.n	800388e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x2ea>
 80038b4:	4b64      	ldr	r3, [pc, #400]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b8:	4a63      	ldr	r2, [pc, #396]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c0:	e01c      	b.n	80038fc <HAL_RCC_OscConfig+0x324>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b05      	cmp	r3, #5
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x30c>
 80038ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038d0:	f043 0304 	orr.w	r3, r3, #4
 80038d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038da:	4a5b      	ldr	r2, [pc, #364]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e2:	e00b      	b.n	80038fc <HAL_RCC_OscConfig+0x324>
 80038e4:	4b58      	ldr	r3, [pc, #352]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e8:	4a57      	ldr	r2, [pc, #348]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f0:	4b55      	ldr	r3, [pc, #340]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f4:	4a54      	ldr	r2, [pc, #336]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80038f6:	f023 0304 	bic.w	r3, r3, #4
 80038fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d015      	beq.n	8003930 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fe ff50 	bl	80027a8 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	e00a      	b.n	8003922 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390c:	f7fe ff4c 	bl	80027a8 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e0cb      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003922:	4b49      	ldr	r3, [pc, #292]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0ee      	beq.n	800390c <HAL_RCC_OscConfig+0x334>
 800392e:	e014      	b.n	800395a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003930:	f7fe ff3a 	bl	80027a8 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fe ff36 	bl	80027a8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e0b5      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1ee      	bne.n	8003938 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800395a:	7dfb      	ldrb	r3, [r7, #23]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003960:	4b39      	ldr	r3, [pc, #228]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	4a38      	ldr	r2, [pc, #224]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800396a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 80a1 	beq.w	8003ab8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003976:	4b34      	ldr	r3, [pc, #208]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b08      	cmp	r3, #8
 8003980:	d05c      	beq.n	8003a3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d141      	bne.n	8003a0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	4b31      	ldr	r3, [pc, #196]	@ (8003a50 <HAL_RCC_OscConfig+0x478>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003990:	f7fe ff0a 	bl	80027a8 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fe ff06 	bl	80027a8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e087      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	4b27      	ldr	r3, [pc, #156]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	3b01      	subs	r3, #1
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	491b      	ldr	r1, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a50 <HAL_RCC_OscConfig+0x478>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e6:	f7fe fedf 	bl	80027a8 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ee:	f7fe fedb 	bl	80027a8 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e05c      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x416>
 8003a0c:	e054      	b.n	8003ab8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b10      	ldr	r3, [pc, #64]	@ (8003a50 <HAL_RCC_OscConfig+0x478>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fe fec8 	bl	80027a8 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fe fec4 	bl	80027a8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e045      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <HAL_RCC_OscConfig+0x470>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x444>
 8003a3a:	e03d      	b.n	8003ab8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d107      	bne.n	8003a54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e038      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40007000 	.word	0x40007000
 8003a50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac4 <HAL_RCC_OscConfig+0x4ec>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d028      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d121      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d11a      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d111      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	085b      	lsrs	r3, r3, #1
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800

08003ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0cc      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b68      	ldr	r3, [pc, #416]	@ (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d90c      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b65      	ldr	r3, [pc, #404]	@ (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b63      	ldr	r3, [pc, #396]	@ (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b8      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b1c:	4b59      	ldr	r3, [pc, #356]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a58      	ldr	r2, [pc, #352]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b34:	4b53      	ldr	r3, [pc, #332]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a52      	ldr	r2, [pc, #328]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b50      	ldr	r3, [pc, #320]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	494d      	ldr	r1, [pc, #308]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d044      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b47      	ldr	r3, [pc, #284]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d119      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e07f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	4b3f      	ldr	r3, [pc, #252]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b96:	4b3b      	ldr	r3, [pc, #236]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e067      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b37      	ldr	r3, [pc, #220]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4934      	ldr	r1, [pc, #208]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb8:	f7fe fdf6 	bl	80027a8 <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7fe fdf2 	bl	80027a8 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e04f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be8:	4b25      	ldr	r3, [pc, #148]	@ (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d20c      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b22      	ldr	r3, [pc, #136]	@ (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e032      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4916      	ldr	r1, [pc, #88]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3a:	4b12      	ldr	r3, [pc, #72]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	490e      	ldr	r1, [pc, #56]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c4e:	f000 f82d 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	490a      	ldr	r1, [pc, #40]	@ (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	4a09      	ldr	r2, [pc, #36]	@ (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c6a:	4b09      	ldr	r3, [pc, #36]	@ (8003c90 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fd56 	bl	8002720 <HAL_InitTick>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800c2a0 	.word	0x0800c2a0
 8003c8c:	2000004c 	.word	0x2000004c
 8003c90:	20000050 	.word	0x20000050

08003c94 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003c98:	4b03      	ldr	r3, [pc, #12]	@ (8003ca8 <HAL_RCC_EnableCSS+0x14>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	4247004c 	.word	0x4247004c

08003cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb0:	b090      	sub	sp, #64	@ 0x40
 8003cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc4:	4b59      	ldr	r3, [pc, #356]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 030c 	and.w	r3, r3, #12
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d00d      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x40>
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	f200 80a1 	bhi.w	8003e18 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cde:	e09b      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ce0:	4b53      	ldr	r3, [pc, #332]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ce4:	e09b      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ce6:	4b53      	ldr	r3, [pc, #332]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cea:	e098      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cec:	4b4f      	ldr	r3, [pc, #316]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cf4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d028      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d02:	4b4a      	ldr	r3, [pc, #296]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	099b      	lsrs	r3, r3, #6
 8003d08:	2200      	movs	r2, #0
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d14:	2100      	movs	r1, #0
 8003d16:	4b47      	ldr	r3, [pc, #284]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d18:	fb03 f201 	mul.w	r2, r3, r1
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	fb00 f303 	mul.w	r3, r0, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	4a43      	ldr	r2, [pc, #268]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d26:	fba0 1202 	umull	r1, r2, r0, r2
 8003d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003d30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d32:	4413      	add	r3, r2
 8003d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d38:	2200      	movs	r2, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	61fa      	str	r2, [r7, #28]
 8003d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003d46:	f7fc ffa7 	bl	8000c98 <__aeabi_uldivmod>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4613      	mov	r3, r2
 8003d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d52:	e053      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d54:	4b35      	ldr	r3, [pc, #212]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	099b      	lsrs	r3, r3, #6
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	617a      	str	r2, [r7, #20]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d66:	f04f 0b00 	mov.w	fp, #0
 8003d6a:	4652      	mov	r2, sl
 8003d6c:	465b      	mov	r3, fp
 8003d6e:	f04f 0000 	mov.w	r0, #0
 8003d72:	f04f 0100 	mov.w	r1, #0
 8003d76:	0159      	lsls	r1, r3, #5
 8003d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d7c:	0150      	lsls	r0, r2, #5
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	ebb2 080a 	subs.w	r8, r2, sl
 8003d86:	eb63 090b 	sbc.w	r9, r3, fp
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d9e:	ebb2 0408 	subs.w	r4, r2, r8
 8003da2:	eb63 0509 	sbc.w	r5, r3, r9
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	00eb      	lsls	r3, r5, #3
 8003db0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db4:	00e2      	lsls	r2, r4, #3
 8003db6:	4614      	mov	r4, r2
 8003db8:	461d      	mov	r5, r3
 8003dba:	eb14 030a 	adds.w	r3, r4, sl
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	eb45 030b 	adc.w	r3, r5, fp
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	028b      	lsls	r3, r1, #10
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ddc:	4621      	mov	r1, r4
 8003dde:	028a      	lsls	r2, r1, #10
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de6:	2200      	movs	r2, #0
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	60fa      	str	r2, [r7, #12]
 8003dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df0:	f7fc ff52 	bl	8000c98 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	3301      	adds	r3, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003e0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e16:	e002      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3740      	adds	r7, #64	@ 0x40
 8003e24:	46bd      	mov	sp, r7
 8003e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	017d7840 	.word	0x017d7840

08003e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	@ (8003e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	2000004c 	.word	0x2000004c

08003e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e54:	f7ff fff0 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0a9b      	lsrs	r3, r3, #10
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	@ (8003e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40023800 	.word	0x40023800
 8003e74:	0800c2b0 	.word	0x0800c2b0

08003e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e7c:	f7ff ffdc 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0b5b      	lsrs	r3, r3, #13
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	@ (8003e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	0800c2b0 	.word	0x0800c2b0

08003ea0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003ea4:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eac:	2b80      	cmp	r3, #128	@ 0x80
 8003eae:	d104      	bne.n	8003eba <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003eb0:	f000 f80a 	bl	8003ec8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003eb4:	4b03      	ldr	r3, [pc, #12]	@ (8003ec4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003eb6:	2280      	movs	r2, #128	@ 0x80
 8003eb8:	701a      	strb	r2, [r3, #0]
  }
}
 8003eba:	bf00      	nop
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	4002380e 	.word	0x4002380e

08003ec8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e041      	b.n	8003f6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7fe fa77 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f000 fc69 	bl	80047ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d001      	beq.n	8003f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e044      	b.n	8004016 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8004024 <HAL_TIM_Base_Start_IT+0xb0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d018      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb6:	d013      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8004028 <HAL_TIM_Base_Start_IT+0xb4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00e      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a19      	ldr	r2, [pc, #100]	@ (800402c <HAL_TIM_Base_Start_IT+0xb8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d009      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a17      	ldr	r2, [pc, #92]	@ (8004030 <HAL_TIM_Base_Start_IT+0xbc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d004      	beq.n	8003fe0 <HAL_TIM_Base_Start_IT+0x6c>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a16      	ldr	r2, [pc, #88]	@ (8004034 <HAL_TIM_Base_Start_IT+0xc0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d111      	bne.n	8004004 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2b06      	cmp	r3, #6
 8003ff0:	d010      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0201 	orr.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004002:	e007      	b.n	8004014 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0201 	orr.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00
 8004034:	40014000 	.word	0x40014000

08004038 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	f241 1311 	movw	r3, #4369	@ 0x1111
 800405a:	4013      	ands	r3, r2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <HAL_TIM_Base_Stop_IT+0x48>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6a1a      	ldr	r2, [r3, #32]
 8004066:	f240 4344 	movw	r3, #1092	@ 0x444
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_TIM_Base_Stop_IT+0x48>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b082      	sub	sp, #8
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e041      	b.n	800412c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f839 	bl	8004134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f000 fb89 	bl	80047ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_TIM_PWM_Start+0x24>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b01      	cmp	r3, #1
 8004162:	bf14      	ite	ne
 8004164:	2301      	movne	r3, #1
 8004166:	2300      	moveq	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e022      	b.n	80041b2 <HAL_TIM_PWM_Start+0x6a>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b04      	cmp	r3, #4
 8004170:	d109      	bne.n	8004186 <HAL_TIM_PWM_Start+0x3e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e015      	b.n	80041b2 <HAL_TIM_PWM_Start+0x6a>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b08      	cmp	r3, #8
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_PWM_Start+0x58>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e008      	b.n	80041b2 <HAL_TIM_PWM_Start+0x6a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	bf14      	ite	ne
 80041ac:	2301      	movne	r3, #1
 80041ae:	2300      	moveq	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e068      	b.n	800428c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <HAL_TIM_PWM_Start+0x82>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041c8:	e013      	b.n	80041f2 <HAL_TIM_PWM_Start+0xaa>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d104      	bne.n	80041da <HAL_TIM_PWM_Start+0x92>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041d8:	e00b      	b.n	80041f2 <HAL_TIM_PWM_Start+0xaa>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d104      	bne.n	80041ea <HAL_TIM_PWM_Start+0xa2>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041e8:	e003      	b.n	80041f2 <HAL_TIM_PWM_Start+0xaa>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2201      	movs	r2, #1
 80041f8:	6839      	ldr	r1, [r7, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fda8 	bl	8004d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a23      	ldr	r2, [pc, #140]	@ (8004294 <HAL_TIM_PWM_Start+0x14c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d107      	bne.n	800421a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004218:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1d      	ldr	r2, [pc, #116]	@ (8004294 <HAL_TIM_PWM_Start+0x14c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_TIM_PWM_Start+0x10e>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800422c:	d013      	beq.n	8004256 <HAL_TIM_PWM_Start+0x10e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a19      	ldr	r2, [pc, #100]	@ (8004298 <HAL_TIM_PWM_Start+0x150>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_TIM_PWM_Start+0x10e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a17      	ldr	r2, [pc, #92]	@ (800429c <HAL_TIM_PWM_Start+0x154>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_TIM_PWM_Start+0x10e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a16      	ldr	r2, [pc, #88]	@ (80042a0 <HAL_TIM_PWM_Start+0x158>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_TIM_PWM_Start+0x10e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a14      	ldr	r2, [pc, #80]	@ (80042a4 <HAL_TIM_PWM_Start+0x15c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d111      	bne.n	800427a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b06      	cmp	r3, #6
 8004266:	d010      	beq.n	800428a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004278:	e007      	b.n	800428a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40010000 	.word	0x40010000
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40014000 	.word	0x40014000

080042a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0202 	mvn.w	r2, #2
 80042dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fa5b 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fa4d 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fa5e 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0204 	mvn.w	r2, #4
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa35 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fa27 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fa38 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0208 	mvn.w	r2, #8
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2204      	movs	r2, #4
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa0f 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fa01 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fa12 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0210 	mvn.w	r2, #16
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2208      	movs	r2, #8
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9e9 	bl	80047ae <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9db 	bl	800479a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f9ec 	bl	80047c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00c      	beq.n	8004414 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0201 	mvn.w	r2, #1
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fffa 	bl	8001408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00c      	beq.n	8004438 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fd7c 	bl	8004f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f9bd 	bl	80047d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0220 	mvn.w	r2, #32
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fd4e 	bl	8004f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e0ae      	b.n	8004604 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b0c      	cmp	r3, #12
 80044b2:	f200 809f 	bhi.w	80045f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044b6:	a201      	add	r2, pc, #4	@ (adr r2, 80044bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	080044f1 	.word	0x080044f1
 80044c0:	080045f5 	.word	0x080045f5
 80044c4:	080045f5 	.word	0x080045f5
 80044c8:	080045f5 	.word	0x080045f5
 80044cc:	08004531 	.word	0x08004531
 80044d0:	080045f5 	.word	0x080045f5
 80044d4:	080045f5 	.word	0x080045f5
 80044d8:	080045f5 	.word	0x080045f5
 80044dc:	08004573 	.word	0x08004573
 80044e0:	080045f5 	.word	0x080045f5
 80044e4:	080045f5 	.word	0x080045f5
 80044e8:	080045f5 	.word	0x080045f5
 80044ec:	080045b3 	.word	0x080045b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fa04 	bl	8004904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0208 	orr.w	r2, r2, #8
 800450a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0204 	bic.w	r2, r2, #4
 800451a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6999      	ldr	r1, [r3, #24]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	619a      	str	r2, [r3, #24]
      break;
 800452e:	e064      	b.n	80045fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fa4a 	bl	80049d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800454a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699a      	ldr	r2, [r3, #24]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800455a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6999      	ldr	r1, [r3, #24]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	021a      	lsls	r2, r3, #8
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	619a      	str	r2, [r3, #24]
      break;
 8004570:	e043      	b.n	80045fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fa95 	bl	8004aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0208 	orr.w	r2, r2, #8
 800458c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0204 	bic.w	r2, r2, #4
 800459c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69d9      	ldr	r1, [r3, #28]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	61da      	str	r2, [r3, #28]
      break;
 80045b0:	e023      	b.n	80045fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fadf 	bl	8004b7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69d9      	ldr	r1, [r3, #28]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	021a      	lsls	r2, r3, #8
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	61da      	str	r2, [r3, #28]
      break;
 80045f2:	e002      	b.n	80045fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	75fb      	strb	r3, [r7, #23]
      break;
 80045f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_TIM_ConfigClockSource+0x1c>
 8004624:	2302      	movs	r3, #2
 8004626:	e0b4      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x186>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800464e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004660:	d03e      	beq.n	80046e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004666:	f200 8087 	bhi.w	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466e:	f000 8086 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x172>
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004676:	d87f      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b70      	cmp	r3, #112	@ 0x70
 800467a:	d01a      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0xa6>
 800467c:	2b70      	cmp	r3, #112	@ 0x70
 800467e:	d87b      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b60      	cmp	r3, #96	@ 0x60
 8004682:	d050      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x11a>
 8004684:	2b60      	cmp	r3, #96	@ 0x60
 8004686:	d877      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b50      	cmp	r3, #80	@ 0x50
 800468a:	d03c      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0xfa>
 800468c:	2b50      	cmp	r3, #80	@ 0x50
 800468e:	d873      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b40      	cmp	r3, #64	@ 0x40
 8004692:	d058      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x13a>
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d86f      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b30      	cmp	r3, #48	@ 0x30
 800469a:	d064      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	2b30      	cmp	r3, #48	@ 0x30
 800469e:	d86b      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d060      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15a>
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d867      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d05c      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15a>
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d05a      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15a>
 80046b0:	e062      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c2:	f000 fb25 	bl	8004d10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	609a      	str	r2, [r3, #8]
      break;
 80046de:	e04f      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	f000 fb0e 	bl	8004d10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004702:	609a      	str	r2, [r3, #8]
      break;
 8004704:	e03c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004712:	461a      	mov	r2, r3
 8004714:	f000 fa82 	bl	8004c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2150      	movs	r1, #80	@ 0x50
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fadb 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 8004724:	e02c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004732:	461a      	mov	r2, r3
 8004734:	f000 faa1 	bl	8004c7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2160      	movs	r1, #96	@ 0x60
 800473e:	4618      	mov	r0, r3
 8004740:	f000 facb 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 8004744:	e01c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004752:	461a      	mov	r2, r3
 8004754:	f000 fa62 	bl	8004c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2140      	movs	r1, #64	@ 0x40
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fabb 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 8004764:	e00c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f000 fab2 	bl	8004cda <TIM_ITRx_SetConfig>
      break;
 8004776:	e003      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      break;
 800477c:	e000      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800477e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3a      	ldr	r2, [pc, #232]	@ (80048e8 <TIM_Base_SetConfig+0xfc>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00f      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480a:	d00b      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a37      	ldr	r2, [pc, #220]	@ (80048ec <TIM_Base_SetConfig+0x100>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a36      	ldr	r2, [pc, #216]	@ (80048f0 <TIM_Base_SetConfig+0x104>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0x38>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a35      	ldr	r2, [pc, #212]	@ (80048f4 <TIM_Base_SetConfig+0x108>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d108      	bne.n	8004836 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2b      	ldr	r2, [pc, #172]	@ (80048e8 <TIM_Base_SetConfig+0xfc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a28      	ldr	r2, [pc, #160]	@ (80048ec <TIM_Base_SetConfig+0x100>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a27      	ldr	r2, [pc, #156]	@ (80048f0 <TIM_Base_SetConfig+0x104>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a26      	ldr	r2, [pc, #152]	@ (80048f4 <TIM_Base_SetConfig+0x108>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	@ (80048f8 <TIM_Base_SetConfig+0x10c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a24      	ldr	r2, [pc, #144]	@ (80048fc <TIM_Base_SetConfig+0x110>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0x8a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a23      	ldr	r2, [pc, #140]	@ (8004900 <TIM_Base_SetConfig+0x114>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0e      	ldr	r2, [pc, #56]	@ (80048e8 <TIM_Base_SetConfig+0xfc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d103      	bne.n	80048bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f023 0201 	bic.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	611a      	str	r2, [r3, #16]
  }
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f023 0201 	bic.w	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0303 	bic.w	r3, r3, #3
 800493a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0302 	bic.w	r3, r3, #2
 800494c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a1c      	ldr	r2, [pc, #112]	@ (80049cc <TIM_OC1_SetConfig+0xc8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10c      	bne.n	800497a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0308 	bic.w	r3, r3, #8
 8004966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 0304 	bic.w	r3, r3, #4
 8004978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a13      	ldr	r2, [pc, #76]	@ (80049cc <TIM_OC1_SetConfig+0xc8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d111      	bne.n	80049a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	621a      	str	r2, [r3, #32]
}
 80049c0:	bf00      	nop
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40010000 	.word	0x40010000

080049d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f023 0210 	bic.w	r2, r3, #16
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f023 0320 	bic.w	r3, r3, #32
 8004a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa4 <TIM_OC2_SetConfig+0xd4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d10d      	bne.n	8004a4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a15      	ldr	r2, [pc, #84]	@ (8004aa4 <TIM_OC2_SetConfig+0xd4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d113      	bne.n	8004a7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40010000 	.word	0x40010000

08004aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a1d      	ldr	r2, [pc, #116]	@ (8004b78 <TIM_OC3_SetConfig+0xd0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d10d      	bne.n	8004b22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a14      	ldr	r2, [pc, #80]	@ (8004b78 <TIM_OC3_SetConfig+0xd0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d113      	bne.n	8004b52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	621a      	str	r2, [r3, #32]
}
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	40010000 	.word	0x40010000

08004b7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	031b      	lsls	r3, r3, #12
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a10      	ldr	r2, [pc, #64]	@ (8004c18 <TIM_OC4_SetConfig+0x9c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d109      	bne.n	8004bf0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	019b      	lsls	r3, r3, #6
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40010000 	.word	0x40010000

08004c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f023 0201 	bic.w	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 030a 	bic.w	r3, r3, #10
 8004c58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b087      	sub	sp, #28
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f023 0210 	bic.w	r2, r3, #16
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	031b      	lsls	r3, r3, #12
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	621a      	str	r2, [r3, #32]
}
 8004cce:	bf00      	nop
 8004cd0:	371c      	adds	r7, #28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	f043 0307 	orr.w	r3, r3, #7
 8004cfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	609a      	str	r2, [r3, #8]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	021a      	lsls	r2, r3, #8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2201      	movs	r2, #1
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1a      	ldr	r2, [r3, #32]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	43db      	mvns	r3, r3
 8004d72:	401a      	ands	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1a      	ldr	r2, [r3, #32]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	621a      	str	r2, [r3, #32]
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e050      	b.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e00:	d013      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a18      	ldr	r2, [pc, #96]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a16      	ldr	r2, [pc, #88]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a13      	ldr	r2, [pc, #76]	@ (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10c      	bne.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40014000 	.word	0x40014000

08004e78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e03d      	b.n	8004f10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e042      	b.n	8004fdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fd fb3c 	bl	80025e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	@ 0x24
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fcdb 	bl	8005944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d112      	bne.n	8005024 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_UART_Receive_IT+0x26>
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e00b      	b.n	8005026 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	461a      	mov	r2, r3
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 faba 	bl	8005594 <UART_Start_Receive_IT>
 8005020:	4603      	mov	r3, r0
 8005022:	e000      	b.n	8005026 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
  }
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b0ba      	sub	sp, #232	@ 0xe8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800506e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10f      	bne.n	8005096 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_UART_IRQHandler+0x66>
 8005082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fb99 	bl	80057c6 <UART_Receive_IT>
      return;
 8005094:	e25b      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80de 	beq.w	800525c <HAL_UART_IRQHandler+0x22c>
 80050a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80d1 	beq.w	800525c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <HAL_UART_IRQHandler+0xae>
 80050c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f043 0201 	orr.w	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <HAL_UART_IRQHandler+0xd2>
 80050ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f043 0202 	orr.w	r2, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_UART_IRQHandler+0xf6>
 800510e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511e:	f043 0204 	orr.w	r2, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	2b00      	cmp	r3, #0
 8005130:	d011      	beq.n	8005156 <HAL_UART_IRQHandler+0x126>
 8005132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d105      	bne.n	800514a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800513e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	f043 0208 	orr.w	r2, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 81f2 	beq.w	8005544 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_UART_IRQHandler+0x14e>
 800516c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fb24 	bl	80057c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005188:	2b40      	cmp	r3, #64	@ 0x40
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <HAL_UART_IRQHandler+0x17a>
 80051a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d04f      	beq.n	800524a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa2c 	bl	8005608 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ba:	2b40      	cmp	r3, #64	@ 0x40
 80051bc:	d141      	bne.n	8005242 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1d9      	bne.n	80051be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d013      	beq.n	800523a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	4a7e      	ldr	r2, [pc, #504]	@ (8005410 <HAL_UART_IRQHandler+0x3e0>)
 8005218:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521e:	4618      	mov	r0, r3
 8005220:	f7fd fed5 	bl	8002fce <HAL_DMA_Abort_IT>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005234:	4610      	mov	r0, r2
 8005236:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e00e      	b.n	8005258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f994 	bl	8005568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	e00a      	b.n	8005258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f990 	bl	8005568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	e006      	b.n	8005258 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f98c 	bl	8005568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005256:	e175      	b.n	8005544 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	bf00      	nop
    return;
 800525a:	e173      	b.n	8005544 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005260:	2b01      	cmp	r3, #1
 8005262:	f040 814f 	bne.w	8005504 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8148 	beq.w	8005504 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8141 	beq.w	8005504 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60bb      	str	r3, [r7, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a2:	2b40      	cmp	r3, #64	@ 0x40
 80052a4:	f040 80b6 	bne.w	8005414 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 8145 	beq.w	8005548 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052c6:	429a      	cmp	r2, r3
 80052c8:	f080 813e 	bcs.w	8005548 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052de:	f000 8088 	beq.w	80053f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052f0:	e853 3f00 	ldrex	r3, [r3]
 80052f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800530e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005312:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800531a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1d9      	bne.n	80052e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3314      	adds	r3, #20
 8005334:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800533e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3314      	adds	r3, #20
 800534e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005352:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005356:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800535a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800535e:	e841 2300 	strex	r3, r2, [r1]
 8005362:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1e1      	bne.n	800532e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3314      	adds	r3, #20
 8005370:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005374:	e853 3f00 	ldrex	r3, [r3]
 8005378:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800537a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800537c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3314      	adds	r3, #20
 800538a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800538e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005390:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005394:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800539c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e3      	bne.n	800536a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	330c      	adds	r3, #12
 80053b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ba:	e853 3f00 	ldrex	r3, [r3]
 80053be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c2:	f023 0310 	bic.w	r3, r3, #16
 80053c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	330c      	adds	r3, #12
 80053d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e3      	bne.n	80053b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fd fd7e 	bl	8002eee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005400:	b29b      	uxth	r3, r3
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	b29b      	uxth	r3, r3
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f8b7 	bl	800557c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800540e:	e09b      	b.n	8005548 <HAL_UART_IRQHandler+0x518>
 8005410:	080056cf 	.word	0x080056cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800541c:	b29b      	uxth	r3, r3
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 808e 	beq.w	800554c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8089 	beq.w	800554c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800544a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005450:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800545e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e3      	bne.n	800543a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	623b      	str	r3, [r7, #32]
   return(result);
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005496:	633a      	str	r2, [r7, #48]	@ 0x30
 8005498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800549c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e3      	bne.n	8005472 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054dc:	61fa      	str	r2, [r7, #28]
 80054de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e3      	bne.n	80054b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f83d 	bl	800557c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005502:	e023      	b.n	800554c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HAL_UART_IRQHandler+0x4f4>
 8005510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f8ea 	bl	80056f6 <UART_Transmit_IT>
    return;
 8005522:	e014      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00e      	beq.n	800554e <HAL_UART_IRQHandler+0x51e>
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 f92a 	bl	8005796 <UART_EndTransmit_IT>
    return;
 8005542:	e004      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
    return;
 8005544:	bf00      	nop
 8005546:	e002      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
      return;
 8005548:	bf00      	nop
 800554a:	e000      	b.n	800554e <HAL_UART_IRQHandler+0x51e>
      return;
 800554c:	bf00      	nop
  }
}
 800554e:	37e8      	adds	r7, #232	@ 0xe8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2222      	movs	r2, #34	@ 0x22
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0220 	orr.w	r2, r2, #32
 80055f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b095      	sub	sp, #84	@ 0x54
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561a:	e853 3f00 	ldrex	r3, [r3]
 800561e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005630:	643a      	str	r2, [r7, #64]	@ 0x40
 8005632:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005636:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005638:	e841 2300 	strex	r3, r2, [r1]
 800563c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1e5      	bne.n	8005610 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	61fb      	str	r3, [r7, #28]
   return(result);
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005664:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005666:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800566a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e5      	bne.n	8005644 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567c:	2b01      	cmp	r3, #1
 800567e:	d119      	bne.n	80056b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	f023 0310 	bic.w	r3, r3, #16
 8005696:	647b      	str	r3, [r7, #68]	@ 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056a0:	61ba      	str	r2, [r7, #24]
 80056a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6979      	ldr	r1, [r7, #20]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	613b      	str	r3, [r7, #16]
   return(result);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e5      	bne.n	8005680 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056c2:	bf00      	nop
 80056c4:	3754      	adds	r7, #84	@ 0x54
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b084      	sub	sp, #16
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff ff3d 	bl	8005568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b21      	cmp	r3, #33	@ 0x21
 8005708:	d13e      	bne.n	8005788 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005712:	d114      	bne.n	800573e <UART_Transmit_IT+0x48>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d110      	bne.n	800573e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005730:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	1c9a      	adds	r2, r3, #2
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	621a      	str	r2, [r3, #32]
 800573c:	e008      	b.n	8005750 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	1c59      	adds	r1, r3, #1
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6211      	str	r1, [r2, #32]
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29b      	uxth	r3, r3
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	4619      	mov	r1, r3
 800575e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10f      	bne.n	8005784 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005772:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005782:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	e000      	b.n	800578a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
  }
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff fecc 	bl	8005554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b08c      	sub	sp, #48	@ 0x30
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b22      	cmp	r3, #34	@ 0x22
 80057d8:	f040 80ae 	bne.w	8005938 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e4:	d117      	bne.n	8005816 <UART_Receive_IT+0x50>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d113      	bne.n	8005816 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005804:	b29a      	uxth	r2, r3
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	1c9a      	adds	r2, r3, #2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	629a      	str	r2, [r3, #40]	@ 0x28
 8005814:	e026      	b.n	8005864 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800581c:	2300      	movs	r3, #0
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005828:	d007      	beq.n	800583a <UART_Receive_IT+0x74>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <UART_Receive_IT+0x82>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e008      	b.n	800585a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005854:	b2da      	uxtb	r2, r3
 8005856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005858:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29b      	uxth	r3, r3
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4619      	mov	r1, r3
 8005872:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005874:	2b00      	cmp	r3, #0
 8005876:	d15d      	bne.n	8005934 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0220 	bic.w	r2, r2, #32
 8005886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005896:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695a      	ldr	r2, [r3, #20]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d135      	bne.n	800592a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	330c      	adds	r3, #12
 80058ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	613b      	str	r3, [r7, #16]
   return(result);
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f023 0310 	bic.w	r3, r3, #16
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e4:	623a      	str	r2, [r7, #32]
 80058e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	69f9      	ldr	r1, [r7, #28]
 80058ea:	6a3a      	ldr	r2, [r7, #32]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	2b10      	cmp	r3, #16
 8005904:	d10a      	bne.n	800591c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005920:	4619      	mov	r1, r3
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7ff fe2a 	bl	800557c <HAL_UARTEx_RxEventCallback>
 8005928:	e002      	b.n	8005930 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fb fce6 	bl	80012fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	e002      	b.n	800593a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3730      	adds	r7, #48	@ 0x30
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005948:	b0c0      	sub	sp, #256	@ 0x100
 800594a:	af00      	add	r7, sp, #0
 800594c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005960:	68d9      	ldr	r1, [r3, #12]
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	ea40 0301 	orr.w	r3, r0, r1
 800596c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800596e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	431a      	orrs	r2, r3
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	431a      	orrs	r2, r3
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800599c:	f021 010c 	bic.w	r1, r1, #12
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059aa:	430b      	orrs	r3, r1
 80059ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059be:	6999      	ldr	r1, [r3, #24]
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	ea40 0301 	orr.w	r3, r0, r1
 80059ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005c10 <UART_SetConfig+0x2cc>)
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d005      	beq.n	80059e4 <UART_SetConfig+0xa0>
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b8d      	ldr	r3, [pc, #564]	@ (8005c14 <UART_SetConfig+0x2d0>)
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d104      	bne.n	80059ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059e4:	f7fe fa48 	bl	8003e78 <HAL_RCC_GetPCLK2Freq>
 80059e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059ec:	e003      	b.n	80059f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059ee:	f7fe fa2f 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 80059f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a00:	f040 810c 	bne.w	8005c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a16:	4622      	mov	r2, r4
 8005a18:	462b      	mov	r3, r5
 8005a1a:	1891      	adds	r1, r2, r2
 8005a1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a1e:	415b      	adcs	r3, r3
 8005a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a26:	4621      	mov	r1, r4
 8005a28:	eb12 0801 	adds.w	r8, r2, r1
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	eb43 0901 	adc.w	r9, r3, r1
 8005a32:	f04f 0200 	mov.w	r2, #0
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a46:	4690      	mov	r8, r2
 8005a48:	4699      	mov	r9, r3
 8005a4a:	4623      	mov	r3, r4
 8005a4c:	eb18 0303 	adds.w	r3, r8, r3
 8005a50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a54:	462b      	mov	r3, r5
 8005a56:	eb49 0303 	adc.w	r3, r9, r3
 8005a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a72:	460b      	mov	r3, r1
 8005a74:	18db      	adds	r3, r3, r3
 8005a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a78:	4613      	mov	r3, r2
 8005a7a:	eb42 0303 	adc.w	r3, r2, r3
 8005a7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a88:	f7fb f906 	bl	8000c98 <__aeabi_uldivmod>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4b61      	ldr	r3, [pc, #388]	@ (8005c18 <UART_SetConfig+0x2d4>)
 8005a92:	fba3 2302 	umull	r2, r3, r3, r2
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	011c      	lsls	r4, r3, #4
 8005a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005aac:	4642      	mov	r2, r8
 8005aae:	464b      	mov	r3, r9
 8005ab0:	1891      	adds	r1, r2, r2
 8005ab2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ab4:	415b      	adcs	r3, r3
 8005ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005abc:	4641      	mov	r1, r8
 8005abe:	eb12 0a01 	adds.w	sl, r2, r1
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8005ac8:	f04f 0200 	mov.w	r2, #0
 8005acc:	f04f 0300 	mov.w	r3, #0
 8005ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005adc:	4692      	mov	sl, r2
 8005ade:	469b      	mov	fp, r3
 8005ae0:	4643      	mov	r3, r8
 8005ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aea:	464b      	mov	r3, r9
 8005aec:	eb4b 0303 	adc.w	r3, fp, r3
 8005af0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	18db      	adds	r3, r3, r3
 8005b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b0e:	4613      	mov	r3, r2
 8005b10:	eb42 0303 	adc.w	r3, r2, r3
 8005b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b1e:	f7fb f8bb 	bl	8000c98 <__aeabi_uldivmod>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	4b3b      	ldr	r3, [pc, #236]	@ (8005c18 <UART_SetConfig+0x2d4>)
 8005b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	2264      	movs	r2, #100	@ 0x64
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	1acb      	subs	r3, r1, r3
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b3e:	4b36      	ldr	r3, [pc, #216]	@ (8005c18 <UART_SetConfig+0x2d4>)
 8005b40:	fba3 2302 	umull	r2, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b4c:	441c      	add	r4, r3
 8005b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b60:	4642      	mov	r2, r8
 8005b62:	464b      	mov	r3, r9
 8005b64:	1891      	adds	r1, r2, r2
 8005b66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b68:	415b      	adcs	r3, r3
 8005b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b70:	4641      	mov	r1, r8
 8005b72:	1851      	adds	r1, r2, r1
 8005b74:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b76:	4649      	mov	r1, r9
 8005b78:	414b      	adcs	r3, r1
 8005b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b88:	4659      	mov	r1, fp
 8005b8a:	00cb      	lsls	r3, r1, #3
 8005b8c:	4651      	mov	r1, sl
 8005b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b92:	4651      	mov	r1, sl
 8005b94:	00ca      	lsls	r2, r1, #3
 8005b96:	4610      	mov	r0, r2
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	189b      	adds	r3, r3, r2
 8005ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	18db      	adds	r3, r3, r3
 8005bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bca:	4613      	mov	r3, r2
 8005bcc:	eb42 0303 	adc.w	r3, r2, r3
 8005bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bda:	f7fb f85d 	bl	8000c98 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <UART_SetConfig+0x2d4>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	@ 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	@ 0x32
 8005bf6:	4a08      	ldr	r2, [pc, #32]	@ (8005c18 <UART_SetConfig+0x2d4>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f003 0207 	and.w	r2, r3, #7
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4422      	add	r2, r4
 8005c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c0c:	e106      	b.n	8005e1c <UART_SetConfig+0x4d8>
 8005c0e:	bf00      	nop
 8005c10:	40011000 	.word	0x40011000
 8005c14:	40011400 	.word	0x40011400
 8005c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c2e:	4642      	mov	r2, r8
 8005c30:	464b      	mov	r3, r9
 8005c32:	1891      	adds	r1, r2, r2
 8005c34:	6239      	str	r1, [r7, #32]
 8005c36:	415b      	adcs	r3, r3
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c3e:	4641      	mov	r1, r8
 8005c40:	1854      	adds	r4, r2, r1
 8005c42:	4649      	mov	r1, r9
 8005c44:	eb43 0501 	adc.w	r5, r3, r1
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	f04f 0300 	mov.w	r3, #0
 8005c50:	00eb      	lsls	r3, r5, #3
 8005c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c56:	00e2      	lsls	r2, r4, #3
 8005c58:	4614      	mov	r4, r2
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	18e3      	adds	r3, r4, r3
 8005c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c64:	464b      	mov	r3, r9
 8005c66:	eb45 0303 	adc.w	r3, r5, r3
 8005c6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c7e:	f04f 0200 	mov.w	r2, #0
 8005c82:	f04f 0300 	mov.w	r3, #0
 8005c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	008b      	lsls	r3, r1, #2
 8005c8e:	4621      	mov	r1, r4
 8005c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c94:	4621      	mov	r1, r4
 8005c96:	008a      	lsls	r2, r1, #2
 8005c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c9c:	f7fa fffc 	bl	8000c98 <__aeabi_uldivmod>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4b60      	ldr	r3, [pc, #384]	@ (8005e28 <UART_SetConfig+0x4e4>)
 8005ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	011c      	lsls	r4, r3, #4
 8005cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	1891      	adds	r1, r2, r2
 8005cc6:	61b9      	str	r1, [r7, #24]
 8005cc8:	415b      	adcs	r3, r3
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd0:	4641      	mov	r1, r8
 8005cd2:	1851      	adds	r1, r2, r1
 8005cd4:	6139      	str	r1, [r7, #16]
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	414b      	adcs	r3, r1
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ce8:	4659      	mov	r1, fp
 8005cea:	00cb      	lsls	r3, r1, #3
 8005cec:	4651      	mov	r1, sl
 8005cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cf2:	4651      	mov	r1, sl
 8005cf4:	00ca      	lsls	r2, r1, #3
 8005cf6:	4610      	mov	r0, r2
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	189b      	adds	r3, r3, r2
 8005d00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d04:	464b      	mov	r3, r9
 8005d06:	460a      	mov	r2, r1
 8005d08:	eb42 0303 	adc.w	r3, r2, r3
 8005d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	f04f 0300 	mov.w	r3, #0
 8005d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d28:	4649      	mov	r1, r9
 8005d2a:	008b      	lsls	r3, r1, #2
 8005d2c:	4641      	mov	r1, r8
 8005d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d32:	4641      	mov	r1, r8
 8005d34:	008a      	lsls	r2, r1, #2
 8005d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d3a:	f7fa ffad 	bl	8000c98 <__aeabi_uldivmod>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4611      	mov	r1, r2
 8005d44:	4b38      	ldr	r3, [pc, #224]	@ (8005e28 <UART_SetConfig+0x4e4>)
 8005d46:	fba3 2301 	umull	r2, r3, r3, r1
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	2264      	movs	r2, #100	@ 0x64
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	1acb      	subs	r3, r1, r3
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	3332      	adds	r3, #50	@ 0x32
 8005d58:	4a33      	ldr	r2, [pc, #204]	@ (8005e28 <UART_SetConfig+0x4e4>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d64:	441c      	add	r4, r3
 8005d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d74:	4642      	mov	r2, r8
 8005d76:	464b      	mov	r3, r9
 8005d78:	1891      	adds	r1, r2, r2
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	415b      	adcs	r3, r3
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d84:	4641      	mov	r1, r8
 8005d86:	1851      	adds	r1, r2, r1
 8005d88:	6039      	str	r1, [r7, #0]
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	414b      	adcs	r3, r1
 8005d8e:	607b      	str	r3, [r7, #4]
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	00cb      	lsls	r3, r1, #3
 8005da0:	4651      	mov	r1, sl
 8005da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005da6:	4651      	mov	r1, sl
 8005da8:	00ca      	lsls	r2, r1, #3
 8005daa:	4610      	mov	r0, r2
 8005dac:	4619      	mov	r1, r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	4642      	mov	r2, r8
 8005db2:	189b      	adds	r3, r3, r2
 8005db4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005db6:	464b      	mov	r3, r9
 8005db8:	460a      	mov	r2, r1
 8005dba:	eb42 0303 	adc.w	r3, r2, r3
 8005dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dca:	667a      	str	r2, [r7, #100]	@ 0x64
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005dd8:	4649      	mov	r1, r9
 8005dda:	008b      	lsls	r3, r1, #2
 8005ddc:	4641      	mov	r1, r8
 8005dde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de2:	4641      	mov	r1, r8
 8005de4:	008a      	lsls	r2, r1, #2
 8005de6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dea:	f7fa ff55 	bl	8000c98 <__aeabi_uldivmod>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e28 <UART_SetConfig+0x4e4>)
 8005df4:	fba3 1302 	umull	r1, r3, r3, r2
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	2164      	movs	r1, #100	@ 0x64
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	3332      	adds	r3, #50	@ 0x32
 8005e06:	4a08      	ldr	r2, [pc, #32]	@ (8005e28 <UART_SetConfig+0x4e4>)
 8005e08:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	f003 020f 	and.w	r2, r3, #15
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4422      	add	r2, r4
 8005e1a:	609a      	str	r2, [r3, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e22:	46bd      	mov	sp, r7
 8005e24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e28:	51eb851f 	.word	0x51eb851f

08005e2c <__cvt>:
 8005e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	ec57 6b10 	vmov	r6, r7, d0
 8005e34:	2f00      	cmp	r7, #0
 8005e36:	460c      	mov	r4, r1
 8005e38:	4619      	mov	r1, r3
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	bfbb      	ittet	lt
 8005e3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e42:	461f      	movlt	r7, r3
 8005e44:	2300      	movge	r3, #0
 8005e46:	232d      	movlt	r3, #45	@ 0x2d
 8005e48:	700b      	strb	r3, [r1, #0]
 8005e4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e50:	4691      	mov	r9, r2
 8005e52:	f023 0820 	bic.w	r8, r3, #32
 8005e56:	bfbc      	itt	lt
 8005e58:	4632      	movlt	r2, r6
 8005e5a:	4616      	movlt	r6, r2
 8005e5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e60:	d005      	beq.n	8005e6e <__cvt+0x42>
 8005e62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e66:	d100      	bne.n	8005e6a <__cvt+0x3e>
 8005e68:	3401      	adds	r4, #1
 8005e6a:	2102      	movs	r1, #2
 8005e6c:	e000      	b.n	8005e70 <__cvt+0x44>
 8005e6e:	2103      	movs	r1, #3
 8005e70:	ab03      	add	r3, sp, #12
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	ab02      	add	r3, sp, #8
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	ec47 6b10 	vmov	d0, r6, r7
 8005e7c:	4653      	mov	r3, sl
 8005e7e:	4622      	mov	r2, r4
 8005e80:	f001 f8b2 	bl	8006fe8 <_dtoa_r>
 8005e84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e88:	4605      	mov	r5, r0
 8005e8a:	d119      	bne.n	8005ec0 <__cvt+0x94>
 8005e8c:	f019 0f01 	tst.w	r9, #1
 8005e90:	d00e      	beq.n	8005eb0 <__cvt+0x84>
 8005e92:	eb00 0904 	add.w	r9, r0, r4
 8005e96:	2200      	movs	r2, #0
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	f7fa fe1b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ea2:	b108      	cbz	r0, 8005ea8 <__cvt+0x7c>
 8005ea4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ea8:	2230      	movs	r2, #48	@ 0x30
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	454b      	cmp	r3, r9
 8005eae:	d31e      	bcc.n	8005eee <__cvt+0xc2>
 8005eb0:	9b03      	ldr	r3, [sp, #12]
 8005eb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005eb4:	1b5b      	subs	r3, r3, r5
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	b004      	add	sp, #16
 8005ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ec4:	eb00 0904 	add.w	r9, r0, r4
 8005ec8:	d1e5      	bne.n	8005e96 <__cvt+0x6a>
 8005eca:	7803      	ldrb	r3, [r0, #0]
 8005ecc:	2b30      	cmp	r3, #48	@ 0x30
 8005ece:	d10a      	bne.n	8005ee6 <__cvt+0xba>
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	f7fa fdfe 	bl	8000ad8 <__aeabi_dcmpeq>
 8005edc:	b918      	cbnz	r0, 8005ee6 <__cvt+0xba>
 8005ede:	f1c4 0401 	rsb	r4, r4, #1
 8005ee2:	f8ca 4000 	str.w	r4, [sl]
 8005ee6:	f8da 3000 	ldr.w	r3, [sl]
 8005eea:	4499      	add	r9, r3
 8005eec:	e7d3      	b.n	8005e96 <__cvt+0x6a>
 8005eee:	1c59      	adds	r1, r3, #1
 8005ef0:	9103      	str	r1, [sp, #12]
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	e7d9      	b.n	8005eaa <__cvt+0x7e>

08005ef6 <__exponent>:
 8005ef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ef8:	2900      	cmp	r1, #0
 8005efa:	bfba      	itte	lt
 8005efc:	4249      	neglt	r1, r1
 8005efe:	232d      	movlt	r3, #45	@ 0x2d
 8005f00:	232b      	movge	r3, #43	@ 0x2b
 8005f02:	2909      	cmp	r1, #9
 8005f04:	7002      	strb	r2, [r0, #0]
 8005f06:	7043      	strb	r3, [r0, #1]
 8005f08:	dd29      	ble.n	8005f5e <__exponent+0x68>
 8005f0a:	f10d 0307 	add.w	r3, sp, #7
 8005f0e:	461d      	mov	r5, r3
 8005f10:	270a      	movs	r7, #10
 8005f12:	461a      	mov	r2, r3
 8005f14:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f18:	fb07 1416 	mls	r4, r7, r6, r1
 8005f1c:	3430      	adds	r4, #48	@ 0x30
 8005f1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f22:	460c      	mov	r4, r1
 8005f24:	2c63      	cmp	r4, #99	@ 0x63
 8005f26:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	dcf1      	bgt.n	8005f12 <__exponent+0x1c>
 8005f2e:	3130      	adds	r1, #48	@ 0x30
 8005f30:	1e94      	subs	r4, r2, #2
 8005f32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f36:	1c41      	adds	r1, r0, #1
 8005f38:	4623      	mov	r3, r4
 8005f3a:	42ab      	cmp	r3, r5
 8005f3c:	d30a      	bcc.n	8005f54 <__exponent+0x5e>
 8005f3e:	f10d 0309 	add.w	r3, sp, #9
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	42ac      	cmp	r4, r5
 8005f46:	bf88      	it	hi
 8005f48:	2300      	movhi	r3, #0
 8005f4a:	3302      	adds	r3, #2
 8005f4c:	4403      	add	r3, r0
 8005f4e:	1a18      	subs	r0, r3, r0
 8005f50:	b003      	add	sp, #12
 8005f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f5c:	e7ed      	b.n	8005f3a <__exponent+0x44>
 8005f5e:	2330      	movs	r3, #48	@ 0x30
 8005f60:	3130      	adds	r1, #48	@ 0x30
 8005f62:	7083      	strb	r3, [r0, #2]
 8005f64:	70c1      	strb	r1, [r0, #3]
 8005f66:	1d03      	adds	r3, r0, #4
 8005f68:	e7f1      	b.n	8005f4e <__exponent+0x58>
	...

08005f6c <_printf_float>:
 8005f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f70:	b08d      	sub	sp, #52	@ 0x34
 8005f72:	460c      	mov	r4, r1
 8005f74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f78:	4616      	mov	r6, r2
 8005f7a:	461f      	mov	r7, r3
 8005f7c:	4605      	mov	r5, r0
 8005f7e:	f000 ff2d 	bl	8006ddc <_localeconv_r>
 8005f82:	6803      	ldr	r3, [r0, #0]
 8005f84:	9304      	str	r3, [sp, #16]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fa f97a 	bl	8000280 <strlen>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f90:	f8d8 3000 	ldr.w	r3, [r8]
 8005f94:	9005      	str	r0, [sp, #20]
 8005f96:	3307      	adds	r3, #7
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	f103 0208 	add.w	r2, r3, #8
 8005fa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005fa4:	f8d4 b000 	ldr.w	fp, [r4]
 8005fa8:	f8c8 2000 	str.w	r2, [r8]
 8005fac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005fb4:	9307      	str	r3, [sp, #28]
 8005fb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005fbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fc2:	4b9c      	ldr	r3, [pc, #624]	@ (8006234 <_printf_float+0x2c8>)
 8005fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc8:	f7fa fdb8 	bl	8000b3c <__aeabi_dcmpun>
 8005fcc:	bb70      	cbnz	r0, 800602c <_printf_float+0xc0>
 8005fce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fd2:	4b98      	ldr	r3, [pc, #608]	@ (8006234 <_printf_float+0x2c8>)
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd8:	f7fa fd92 	bl	8000b00 <__aeabi_dcmple>
 8005fdc:	bb30      	cbnz	r0, 800602c <_printf_float+0xc0>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa fd81 	bl	8000aec <__aeabi_dcmplt>
 8005fea:	b110      	cbz	r0, 8005ff2 <_printf_float+0x86>
 8005fec:	232d      	movs	r3, #45	@ 0x2d
 8005fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ff2:	4a91      	ldr	r2, [pc, #580]	@ (8006238 <_printf_float+0x2cc>)
 8005ff4:	4b91      	ldr	r3, [pc, #580]	@ (800623c <_printf_float+0x2d0>)
 8005ff6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ffa:	bf94      	ite	ls
 8005ffc:	4690      	movls	r8, r2
 8005ffe:	4698      	movhi	r8, r3
 8006000:	2303      	movs	r3, #3
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	f02b 0304 	bic.w	r3, fp, #4
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	f04f 0900 	mov.w	r9, #0
 800600e:	9700      	str	r7, [sp, #0]
 8006010:	4633      	mov	r3, r6
 8006012:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006014:	4621      	mov	r1, r4
 8006016:	4628      	mov	r0, r5
 8006018:	f000 f9d2 	bl	80063c0 <_printf_common>
 800601c:	3001      	adds	r0, #1
 800601e:	f040 808d 	bne.w	800613c <_printf_float+0x1d0>
 8006022:	f04f 30ff 	mov.w	r0, #4294967295
 8006026:	b00d      	add	sp, #52	@ 0x34
 8006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602c:	4642      	mov	r2, r8
 800602e:	464b      	mov	r3, r9
 8006030:	4640      	mov	r0, r8
 8006032:	4649      	mov	r1, r9
 8006034:	f7fa fd82 	bl	8000b3c <__aeabi_dcmpun>
 8006038:	b140      	cbz	r0, 800604c <_printf_float+0xe0>
 800603a:	464b      	mov	r3, r9
 800603c:	2b00      	cmp	r3, #0
 800603e:	bfbc      	itt	lt
 8006040:	232d      	movlt	r3, #45	@ 0x2d
 8006042:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006046:	4a7e      	ldr	r2, [pc, #504]	@ (8006240 <_printf_float+0x2d4>)
 8006048:	4b7e      	ldr	r3, [pc, #504]	@ (8006244 <_printf_float+0x2d8>)
 800604a:	e7d4      	b.n	8005ff6 <_printf_float+0x8a>
 800604c:	6863      	ldr	r3, [r4, #4]
 800604e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006052:	9206      	str	r2, [sp, #24]
 8006054:	1c5a      	adds	r2, r3, #1
 8006056:	d13b      	bne.n	80060d0 <_printf_float+0x164>
 8006058:	2306      	movs	r3, #6
 800605a:	6063      	str	r3, [r4, #4]
 800605c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006060:	2300      	movs	r3, #0
 8006062:	6022      	str	r2, [r4, #0]
 8006064:	9303      	str	r3, [sp, #12]
 8006066:	ab0a      	add	r3, sp, #40	@ 0x28
 8006068:	e9cd a301 	strd	sl, r3, [sp, #4]
 800606c:	ab09      	add	r3, sp, #36	@ 0x24
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	6861      	ldr	r1, [r4, #4]
 8006072:	ec49 8b10 	vmov	d0, r8, r9
 8006076:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800607a:	4628      	mov	r0, r5
 800607c:	f7ff fed6 	bl	8005e2c <__cvt>
 8006080:	9b06      	ldr	r3, [sp, #24]
 8006082:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006084:	2b47      	cmp	r3, #71	@ 0x47
 8006086:	4680      	mov	r8, r0
 8006088:	d129      	bne.n	80060de <_printf_float+0x172>
 800608a:	1cc8      	adds	r0, r1, #3
 800608c:	db02      	blt.n	8006094 <_printf_float+0x128>
 800608e:	6863      	ldr	r3, [r4, #4]
 8006090:	4299      	cmp	r1, r3
 8006092:	dd41      	ble.n	8006118 <_printf_float+0x1ac>
 8006094:	f1aa 0a02 	sub.w	sl, sl, #2
 8006098:	fa5f fa8a 	uxtb.w	sl, sl
 800609c:	3901      	subs	r1, #1
 800609e:	4652      	mov	r2, sl
 80060a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80060a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80060a6:	f7ff ff26 	bl	8005ef6 <__exponent>
 80060aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060ac:	1813      	adds	r3, r2, r0
 80060ae:	2a01      	cmp	r2, #1
 80060b0:	4681      	mov	r9, r0
 80060b2:	6123      	str	r3, [r4, #16]
 80060b4:	dc02      	bgt.n	80060bc <_printf_float+0x150>
 80060b6:	6822      	ldr	r2, [r4, #0]
 80060b8:	07d2      	lsls	r2, r2, #31
 80060ba:	d501      	bpl.n	80060c0 <_printf_float+0x154>
 80060bc:	3301      	adds	r3, #1
 80060be:	6123      	str	r3, [r4, #16]
 80060c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0a2      	beq.n	800600e <_printf_float+0xa2>
 80060c8:	232d      	movs	r3, #45	@ 0x2d
 80060ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ce:	e79e      	b.n	800600e <_printf_float+0xa2>
 80060d0:	9a06      	ldr	r2, [sp, #24]
 80060d2:	2a47      	cmp	r2, #71	@ 0x47
 80060d4:	d1c2      	bne.n	800605c <_printf_float+0xf0>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1c0      	bne.n	800605c <_printf_float+0xf0>
 80060da:	2301      	movs	r3, #1
 80060dc:	e7bd      	b.n	800605a <_printf_float+0xee>
 80060de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060e2:	d9db      	bls.n	800609c <_printf_float+0x130>
 80060e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060e8:	d118      	bne.n	800611c <_printf_float+0x1b0>
 80060ea:	2900      	cmp	r1, #0
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	dd0b      	ble.n	8006108 <_printf_float+0x19c>
 80060f0:	6121      	str	r1, [r4, #16]
 80060f2:	b913      	cbnz	r3, 80060fa <_printf_float+0x18e>
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	07d0      	lsls	r0, r2, #31
 80060f8:	d502      	bpl.n	8006100 <_printf_float+0x194>
 80060fa:	3301      	adds	r3, #1
 80060fc:	440b      	add	r3, r1
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006102:	f04f 0900 	mov.w	r9, #0
 8006106:	e7db      	b.n	80060c0 <_printf_float+0x154>
 8006108:	b913      	cbnz	r3, 8006110 <_printf_float+0x1a4>
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	07d2      	lsls	r2, r2, #31
 800610e:	d501      	bpl.n	8006114 <_printf_float+0x1a8>
 8006110:	3302      	adds	r3, #2
 8006112:	e7f4      	b.n	80060fe <_printf_float+0x192>
 8006114:	2301      	movs	r3, #1
 8006116:	e7f2      	b.n	80060fe <_printf_float+0x192>
 8006118:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800611c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800611e:	4299      	cmp	r1, r3
 8006120:	db05      	blt.n	800612e <_printf_float+0x1c2>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	6121      	str	r1, [r4, #16]
 8006126:	07d8      	lsls	r0, r3, #31
 8006128:	d5ea      	bpl.n	8006100 <_printf_float+0x194>
 800612a:	1c4b      	adds	r3, r1, #1
 800612c:	e7e7      	b.n	80060fe <_printf_float+0x192>
 800612e:	2900      	cmp	r1, #0
 8006130:	bfd4      	ite	le
 8006132:	f1c1 0202 	rsble	r2, r1, #2
 8006136:	2201      	movgt	r2, #1
 8006138:	4413      	add	r3, r2
 800613a:	e7e0      	b.n	80060fe <_printf_float+0x192>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	055a      	lsls	r2, r3, #21
 8006140:	d407      	bmi.n	8006152 <_printf_float+0x1e6>
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	4642      	mov	r2, r8
 8006146:	4631      	mov	r1, r6
 8006148:	4628      	mov	r0, r5
 800614a:	47b8      	blx	r7
 800614c:	3001      	adds	r0, #1
 800614e:	d12b      	bne.n	80061a8 <_printf_float+0x23c>
 8006150:	e767      	b.n	8006022 <_printf_float+0xb6>
 8006152:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006156:	f240 80dd 	bls.w	8006314 <_printf_float+0x3a8>
 800615a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800615e:	2200      	movs	r2, #0
 8006160:	2300      	movs	r3, #0
 8006162:	f7fa fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006166:	2800      	cmp	r0, #0
 8006168:	d033      	beq.n	80061d2 <_printf_float+0x266>
 800616a:	4a37      	ldr	r2, [pc, #220]	@ (8006248 <_printf_float+0x2dc>)
 800616c:	2301      	movs	r3, #1
 800616e:	4631      	mov	r1, r6
 8006170:	4628      	mov	r0, r5
 8006172:	47b8      	blx	r7
 8006174:	3001      	adds	r0, #1
 8006176:	f43f af54 	beq.w	8006022 <_printf_float+0xb6>
 800617a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800617e:	4543      	cmp	r3, r8
 8006180:	db02      	blt.n	8006188 <_printf_float+0x21c>
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	07d8      	lsls	r0, r3, #31
 8006186:	d50f      	bpl.n	80061a8 <_printf_float+0x23c>
 8006188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	47b8      	blx	r7
 8006192:	3001      	adds	r0, #1
 8006194:	f43f af45 	beq.w	8006022 <_printf_float+0xb6>
 8006198:	f04f 0900 	mov.w	r9, #0
 800619c:	f108 38ff 	add.w	r8, r8, #4294967295
 80061a0:	f104 0a1a 	add.w	sl, r4, #26
 80061a4:	45c8      	cmp	r8, r9
 80061a6:	dc09      	bgt.n	80061bc <_printf_float+0x250>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	079b      	lsls	r3, r3, #30
 80061ac:	f100 8103 	bmi.w	80063b6 <_printf_float+0x44a>
 80061b0:	68e0      	ldr	r0, [r4, #12]
 80061b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061b4:	4298      	cmp	r0, r3
 80061b6:	bfb8      	it	lt
 80061b8:	4618      	movlt	r0, r3
 80061ba:	e734      	b.n	8006026 <_printf_float+0xba>
 80061bc:	2301      	movs	r3, #1
 80061be:	4652      	mov	r2, sl
 80061c0:	4631      	mov	r1, r6
 80061c2:	4628      	mov	r0, r5
 80061c4:	47b8      	blx	r7
 80061c6:	3001      	adds	r0, #1
 80061c8:	f43f af2b 	beq.w	8006022 <_printf_float+0xb6>
 80061cc:	f109 0901 	add.w	r9, r9, #1
 80061d0:	e7e8      	b.n	80061a4 <_printf_float+0x238>
 80061d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dc39      	bgt.n	800624c <_printf_float+0x2e0>
 80061d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006248 <_printf_float+0x2dc>)
 80061da:	2301      	movs	r3, #1
 80061dc:	4631      	mov	r1, r6
 80061de:	4628      	mov	r0, r5
 80061e0:	47b8      	blx	r7
 80061e2:	3001      	adds	r0, #1
 80061e4:	f43f af1d 	beq.w	8006022 <_printf_float+0xb6>
 80061e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061ec:	ea59 0303 	orrs.w	r3, r9, r3
 80061f0:	d102      	bne.n	80061f8 <_printf_float+0x28c>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	07d9      	lsls	r1, r3, #31
 80061f6:	d5d7      	bpl.n	80061a8 <_printf_float+0x23c>
 80061f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	f43f af0d 	beq.w	8006022 <_printf_float+0xb6>
 8006208:	f04f 0a00 	mov.w	sl, #0
 800620c:	f104 0b1a 	add.w	fp, r4, #26
 8006210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006212:	425b      	negs	r3, r3
 8006214:	4553      	cmp	r3, sl
 8006216:	dc01      	bgt.n	800621c <_printf_float+0x2b0>
 8006218:	464b      	mov	r3, r9
 800621a:	e793      	b.n	8006144 <_printf_float+0x1d8>
 800621c:	2301      	movs	r3, #1
 800621e:	465a      	mov	r2, fp
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f aefb 	beq.w	8006022 <_printf_float+0xb6>
 800622c:	f10a 0a01 	add.w	sl, sl, #1
 8006230:	e7ee      	b.n	8006210 <_printf_float+0x2a4>
 8006232:	bf00      	nop
 8006234:	7fefffff 	.word	0x7fefffff
 8006238:	0800c2b8 	.word	0x0800c2b8
 800623c:	0800c2bc 	.word	0x0800c2bc
 8006240:	0800c2c0 	.word	0x0800c2c0
 8006244:	0800c2c4 	.word	0x0800c2c4
 8006248:	0800c658 	.word	0x0800c658
 800624c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800624e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006252:	4553      	cmp	r3, sl
 8006254:	bfa8      	it	ge
 8006256:	4653      	movge	r3, sl
 8006258:	2b00      	cmp	r3, #0
 800625a:	4699      	mov	r9, r3
 800625c:	dc36      	bgt.n	80062cc <_printf_float+0x360>
 800625e:	f04f 0b00 	mov.w	fp, #0
 8006262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006266:	f104 021a 	add.w	r2, r4, #26
 800626a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800626c:	9306      	str	r3, [sp, #24]
 800626e:	eba3 0309 	sub.w	r3, r3, r9
 8006272:	455b      	cmp	r3, fp
 8006274:	dc31      	bgt.n	80062da <_printf_float+0x36e>
 8006276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006278:	459a      	cmp	sl, r3
 800627a:	dc3a      	bgt.n	80062f2 <_printf_float+0x386>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	07da      	lsls	r2, r3, #31
 8006280:	d437      	bmi.n	80062f2 <_printf_float+0x386>
 8006282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006284:	ebaa 0903 	sub.w	r9, sl, r3
 8006288:	9b06      	ldr	r3, [sp, #24]
 800628a:	ebaa 0303 	sub.w	r3, sl, r3
 800628e:	4599      	cmp	r9, r3
 8006290:	bfa8      	it	ge
 8006292:	4699      	movge	r9, r3
 8006294:	f1b9 0f00 	cmp.w	r9, #0
 8006298:	dc33      	bgt.n	8006302 <_printf_float+0x396>
 800629a:	f04f 0800 	mov.w	r8, #0
 800629e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062a2:	f104 0b1a 	add.w	fp, r4, #26
 80062a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062a8:	ebaa 0303 	sub.w	r3, sl, r3
 80062ac:	eba3 0309 	sub.w	r3, r3, r9
 80062b0:	4543      	cmp	r3, r8
 80062b2:	f77f af79 	ble.w	80061a8 <_printf_float+0x23c>
 80062b6:	2301      	movs	r3, #1
 80062b8:	465a      	mov	r2, fp
 80062ba:	4631      	mov	r1, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	f43f aeae 	beq.w	8006022 <_printf_float+0xb6>
 80062c6:	f108 0801 	add.w	r8, r8, #1
 80062ca:	e7ec      	b.n	80062a6 <_printf_float+0x33a>
 80062cc:	4642      	mov	r2, r8
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	d1c2      	bne.n	800625e <_printf_float+0x2f2>
 80062d8:	e6a3      	b.n	8006022 <_printf_float+0xb6>
 80062da:	2301      	movs	r3, #1
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	9206      	str	r2, [sp, #24]
 80062e2:	47b8      	blx	r7
 80062e4:	3001      	adds	r0, #1
 80062e6:	f43f ae9c 	beq.w	8006022 <_printf_float+0xb6>
 80062ea:	9a06      	ldr	r2, [sp, #24]
 80062ec:	f10b 0b01 	add.w	fp, fp, #1
 80062f0:	e7bb      	b.n	800626a <_printf_float+0x2fe>
 80062f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	d1c0      	bne.n	8006282 <_printf_float+0x316>
 8006300:	e68f      	b.n	8006022 <_printf_float+0xb6>
 8006302:	9a06      	ldr	r2, [sp, #24]
 8006304:	464b      	mov	r3, r9
 8006306:	4442      	add	r2, r8
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	d1c3      	bne.n	800629a <_printf_float+0x32e>
 8006312:	e686      	b.n	8006022 <_printf_float+0xb6>
 8006314:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006318:	f1ba 0f01 	cmp.w	sl, #1
 800631c:	dc01      	bgt.n	8006322 <_printf_float+0x3b6>
 800631e:	07db      	lsls	r3, r3, #31
 8006320:	d536      	bpl.n	8006390 <_printf_float+0x424>
 8006322:	2301      	movs	r3, #1
 8006324:	4642      	mov	r2, r8
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	f43f ae78 	beq.w	8006022 <_printf_float+0xb6>
 8006332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006336:	4631      	mov	r1, r6
 8006338:	4628      	mov	r0, r5
 800633a:	47b8      	blx	r7
 800633c:	3001      	adds	r0, #1
 800633e:	f43f ae70 	beq.w	8006022 <_printf_float+0xb6>
 8006342:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006346:	2200      	movs	r2, #0
 8006348:	2300      	movs	r3, #0
 800634a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800634e:	f7fa fbc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006352:	b9c0      	cbnz	r0, 8006386 <_printf_float+0x41a>
 8006354:	4653      	mov	r3, sl
 8006356:	f108 0201 	add.w	r2, r8, #1
 800635a:	4631      	mov	r1, r6
 800635c:	4628      	mov	r0, r5
 800635e:	47b8      	blx	r7
 8006360:	3001      	adds	r0, #1
 8006362:	d10c      	bne.n	800637e <_printf_float+0x412>
 8006364:	e65d      	b.n	8006022 <_printf_float+0xb6>
 8006366:	2301      	movs	r3, #1
 8006368:	465a      	mov	r2, fp
 800636a:	4631      	mov	r1, r6
 800636c:	4628      	mov	r0, r5
 800636e:	47b8      	blx	r7
 8006370:	3001      	adds	r0, #1
 8006372:	f43f ae56 	beq.w	8006022 <_printf_float+0xb6>
 8006376:	f108 0801 	add.w	r8, r8, #1
 800637a:	45d0      	cmp	r8, sl
 800637c:	dbf3      	blt.n	8006366 <_printf_float+0x3fa>
 800637e:	464b      	mov	r3, r9
 8006380:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006384:	e6df      	b.n	8006146 <_printf_float+0x1da>
 8006386:	f04f 0800 	mov.w	r8, #0
 800638a:	f104 0b1a 	add.w	fp, r4, #26
 800638e:	e7f4      	b.n	800637a <_printf_float+0x40e>
 8006390:	2301      	movs	r3, #1
 8006392:	4642      	mov	r2, r8
 8006394:	e7e1      	b.n	800635a <_printf_float+0x3ee>
 8006396:	2301      	movs	r3, #1
 8006398:	464a      	mov	r2, r9
 800639a:	4631      	mov	r1, r6
 800639c:	4628      	mov	r0, r5
 800639e:	47b8      	blx	r7
 80063a0:	3001      	adds	r0, #1
 80063a2:	f43f ae3e 	beq.w	8006022 <_printf_float+0xb6>
 80063a6:	f108 0801 	add.w	r8, r8, #1
 80063aa:	68e3      	ldr	r3, [r4, #12]
 80063ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063ae:	1a5b      	subs	r3, r3, r1
 80063b0:	4543      	cmp	r3, r8
 80063b2:	dcf0      	bgt.n	8006396 <_printf_float+0x42a>
 80063b4:	e6fc      	b.n	80061b0 <_printf_float+0x244>
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	f104 0919 	add.w	r9, r4, #25
 80063be:	e7f4      	b.n	80063aa <_printf_float+0x43e>

080063c0 <_printf_common>:
 80063c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c4:	4616      	mov	r6, r2
 80063c6:	4698      	mov	r8, r3
 80063c8:	688a      	ldr	r2, [r1, #8]
 80063ca:	690b      	ldr	r3, [r1, #16]
 80063cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063d0:	4293      	cmp	r3, r2
 80063d2:	bfb8      	it	lt
 80063d4:	4613      	movlt	r3, r2
 80063d6:	6033      	str	r3, [r6, #0]
 80063d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063dc:	4607      	mov	r7, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	b10a      	cbz	r2, 80063e6 <_printf_common+0x26>
 80063e2:	3301      	adds	r3, #1
 80063e4:	6033      	str	r3, [r6, #0]
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	0699      	lsls	r1, r3, #26
 80063ea:	bf42      	ittt	mi
 80063ec:	6833      	ldrmi	r3, [r6, #0]
 80063ee:	3302      	addmi	r3, #2
 80063f0:	6033      	strmi	r3, [r6, #0]
 80063f2:	6825      	ldr	r5, [r4, #0]
 80063f4:	f015 0506 	ands.w	r5, r5, #6
 80063f8:	d106      	bne.n	8006408 <_printf_common+0x48>
 80063fa:	f104 0a19 	add.w	sl, r4, #25
 80063fe:	68e3      	ldr	r3, [r4, #12]
 8006400:	6832      	ldr	r2, [r6, #0]
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	42ab      	cmp	r3, r5
 8006406:	dc26      	bgt.n	8006456 <_printf_common+0x96>
 8006408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	3b00      	subs	r3, #0
 8006410:	bf18      	it	ne
 8006412:	2301      	movne	r3, #1
 8006414:	0692      	lsls	r2, r2, #26
 8006416:	d42b      	bmi.n	8006470 <_printf_common+0xb0>
 8006418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800641c:	4641      	mov	r1, r8
 800641e:	4638      	mov	r0, r7
 8006420:	47c8      	blx	r9
 8006422:	3001      	adds	r0, #1
 8006424:	d01e      	beq.n	8006464 <_printf_common+0xa4>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	6922      	ldr	r2, [r4, #16]
 800642a:	f003 0306 	and.w	r3, r3, #6
 800642e:	2b04      	cmp	r3, #4
 8006430:	bf02      	ittt	eq
 8006432:	68e5      	ldreq	r5, [r4, #12]
 8006434:	6833      	ldreq	r3, [r6, #0]
 8006436:	1aed      	subeq	r5, r5, r3
 8006438:	68a3      	ldr	r3, [r4, #8]
 800643a:	bf0c      	ite	eq
 800643c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006440:	2500      	movne	r5, #0
 8006442:	4293      	cmp	r3, r2
 8006444:	bfc4      	itt	gt
 8006446:	1a9b      	subgt	r3, r3, r2
 8006448:	18ed      	addgt	r5, r5, r3
 800644a:	2600      	movs	r6, #0
 800644c:	341a      	adds	r4, #26
 800644e:	42b5      	cmp	r5, r6
 8006450:	d11a      	bne.n	8006488 <_printf_common+0xc8>
 8006452:	2000      	movs	r0, #0
 8006454:	e008      	b.n	8006468 <_printf_common+0xa8>
 8006456:	2301      	movs	r3, #1
 8006458:	4652      	mov	r2, sl
 800645a:	4641      	mov	r1, r8
 800645c:	4638      	mov	r0, r7
 800645e:	47c8      	blx	r9
 8006460:	3001      	adds	r0, #1
 8006462:	d103      	bne.n	800646c <_printf_common+0xac>
 8006464:	f04f 30ff 	mov.w	r0, #4294967295
 8006468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646c:	3501      	adds	r5, #1
 800646e:	e7c6      	b.n	80063fe <_printf_common+0x3e>
 8006470:	18e1      	adds	r1, r4, r3
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	2030      	movs	r0, #48	@ 0x30
 8006476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800647a:	4422      	add	r2, r4
 800647c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006484:	3302      	adds	r3, #2
 8006486:	e7c7      	b.n	8006418 <_printf_common+0x58>
 8006488:	2301      	movs	r3, #1
 800648a:	4622      	mov	r2, r4
 800648c:	4641      	mov	r1, r8
 800648e:	4638      	mov	r0, r7
 8006490:	47c8      	blx	r9
 8006492:	3001      	adds	r0, #1
 8006494:	d0e6      	beq.n	8006464 <_printf_common+0xa4>
 8006496:	3601      	adds	r6, #1
 8006498:	e7d9      	b.n	800644e <_printf_common+0x8e>
	...

0800649c <_printf_i>:
 800649c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	7e0f      	ldrb	r7, [r1, #24]
 80064a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064a4:	2f78      	cmp	r7, #120	@ 0x78
 80064a6:	4691      	mov	r9, r2
 80064a8:	4680      	mov	r8, r0
 80064aa:	460c      	mov	r4, r1
 80064ac:	469a      	mov	sl, r3
 80064ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064b2:	d807      	bhi.n	80064c4 <_printf_i+0x28>
 80064b4:	2f62      	cmp	r7, #98	@ 0x62
 80064b6:	d80a      	bhi.n	80064ce <_printf_i+0x32>
 80064b8:	2f00      	cmp	r7, #0
 80064ba:	f000 80d2 	beq.w	8006662 <_printf_i+0x1c6>
 80064be:	2f58      	cmp	r7, #88	@ 0x58
 80064c0:	f000 80b9 	beq.w	8006636 <_printf_i+0x19a>
 80064c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064cc:	e03a      	b.n	8006544 <_printf_i+0xa8>
 80064ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064d2:	2b15      	cmp	r3, #21
 80064d4:	d8f6      	bhi.n	80064c4 <_printf_i+0x28>
 80064d6:	a101      	add	r1, pc, #4	@ (adr r1, 80064dc <_printf_i+0x40>)
 80064d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064dc:	08006535 	.word	0x08006535
 80064e0:	08006549 	.word	0x08006549
 80064e4:	080064c5 	.word	0x080064c5
 80064e8:	080064c5 	.word	0x080064c5
 80064ec:	080064c5 	.word	0x080064c5
 80064f0:	080064c5 	.word	0x080064c5
 80064f4:	08006549 	.word	0x08006549
 80064f8:	080064c5 	.word	0x080064c5
 80064fc:	080064c5 	.word	0x080064c5
 8006500:	080064c5 	.word	0x080064c5
 8006504:	080064c5 	.word	0x080064c5
 8006508:	08006649 	.word	0x08006649
 800650c:	08006573 	.word	0x08006573
 8006510:	08006603 	.word	0x08006603
 8006514:	080064c5 	.word	0x080064c5
 8006518:	080064c5 	.word	0x080064c5
 800651c:	0800666b 	.word	0x0800666b
 8006520:	080064c5 	.word	0x080064c5
 8006524:	08006573 	.word	0x08006573
 8006528:	080064c5 	.word	0x080064c5
 800652c:	080064c5 	.word	0x080064c5
 8006530:	0800660b 	.word	0x0800660b
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	1d1a      	adds	r2, r3, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6032      	str	r2, [r6, #0]
 800653c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006544:	2301      	movs	r3, #1
 8006546:	e09d      	b.n	8006684 <_printf_i+0x1e8>
 8006548:	6833      	ldr	r3, [r6, #0]
 800654a:	6820      	ldr	r0, [r4, #0]
 800654c:	1d19      	adds	r1, r3, #4
 800654e:	6031      	str	r1, [r6, #0]
 8006550:	0606      	lsls	r6, r0, #24
 8006552:	d501      	bpl.n	8006558 <_printf_i+0xbc>
 8006554:	681d      	ldr	r5, [r3, #0]
 8006556:	e003      	b.n	8006560 <_printf_i+0xc4>
 8006558:	0645      	lsls	r5, r0, #25
 800655a:	d5fb      	bpl.n	8006554 <_printf_i+0xb8>
 800655c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006560:	2d00      	cmp	r5, #0
 8006562:	da03      	bge.n	800656c <_printf_i+0xd0>
 8006564:	232d      	movs	r3, #45	@ 0x2d
 8006566:	426d      	negs	r5, r5
 8006568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800656c:	4859      	ldr	r0, [pc, #356]	@ (80066d4 <_printf_i+0x238>)
 800656e:	230a      	movs	r3, #10
 8006570:	e011      	b.n	8006596 <_printf_i+0xfa>
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	6833      	ldr	r3, [r6, #0]
 8006576:	0608      	lsls	r0, r1, #24
 8006578:	f853 5b04 	ldr.w	r5, [r3], #4
 800657c:	d402      	bmi.n	8006584 <_printf_i+0xe8>
 800657e:	0649      	lsls	r1, r1, #25
 8006580:	bf48      	it	mi
 8006582:	b2ad      	uxthmi	r5, r5
 8006584:	2f6f      	cmp	r7, #111	@ 0x6f
 8006586:	4853      	ldr	r0, [pc, #332]	@ (80066d4 <_printf_i+0x238>)
 8006588:	6033      	str	r3, [r6, #0]
 800658a:	bf14      	ite	ne
 800658c:	230a      	movne	r3, #10
 800658e:	2308      	moveq	r3, #8
 8006590:	2100      	movs	r1, #0
 8006592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006596:	6866      	ldr	r6, [r4, #4]
 8006598:	60a6      	str	r6, [r4, #8]
 800659a:	2e00      	cmp	r6, #0
 800659c:	bfa2      	ittt	ge
 800659e:	6821      	ldrge	r1, [r4, #0]
 80065a0:	f021 0104 	bicge.w	r1, r1, #4
 80065a4:	6021      	strge	r1, [r4, #0]
 80065a6:	b90d      	cbnz	r5, 80065ac <_printf_i+0x110>
 80065a8:	2e00      	cmp	r6, #0
 80065aa:	d04b      	beq.n	8006644 <_printf_i+0x1a8>
 80065ac:	4616      	mov	r6, r2
 80065ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80065b2:	fb03 5711 	mls	r7, r3, r1, r5
 80065b6:	5dc7      	ldrb	r7, [r0, r7]
 80065b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065bc:	462f      	mov	r7, r5
 80065be:	42bb      	cmp	r3, r7
 80065c0:	460d      	mov	r5, r1
 80065c2:	d9f4      	bls.n	80065ae <_printf_i+0x112>
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d10b      	bne.n	80065e0 <_printf_i+0x144>
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	07df      	lsls	r7, r3, #31
 80065cc:	d508      	bpl.n	80065e0 <_printf_i+0x144>
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	6861      	ldr	r1, [r4, #4]
 80065d2:	4299      	cmp	r1, r3
 80065d4:	bfde      	ittt	le
 80065d6:	2330      	movle	r3, #48	@ 0x30
 80065d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065e0:	1b92      	subs	r2, r2, r6
 80065e2:	6122      	str	r2, [r4, #16]
 80065e4:	f8cd a000 	str.w	sl, [sp]
 80065e8:	464b      	mov	r3, r9
 80065ea:	aa03      	add	r2, sp, #12
 80065ec:	4621      	mov	r1, r4
 80065ee:	4640      	mov	r0, r8
 80065f0:	f7ff fee6 	bl	80063c0 <_printf_common>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d14a      	bne.n	800668e <_printf_i+0x1f2>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	b004      	add	sp, #16
 80065fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	f043 0320 	orr.w	r3, r3, #32
 8006608:	6023      	str	r3, [r4, #0]
 800660a:	4833      	ldr	r0, [pc, #204]	@ (80066d8 <_printf_i+0x23c>)
 800660c:	2778      	movs	r7, #120	@ 0x78
 800660e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	6831      	ldr	r1, [r6, #0]
 8006616:	061f      	lsls	r7, r3, #24
 8006618:	f851 5b04 	ldr.w	r5, [r1], #4
 800661c:	d402      	bmi.n	8006624 <_printf_i+0x188>
 800661e:	065f      	lsls	r7, r3, #25
 8006620:	bf48      	it	mi
 8006622:	b2ad      	uxthmi	r5, r5
 8006624:	6031      	str	r1, [r6, #0]
 8006626:	07d9      	lsls	r1, r3, #31
 8006628:	bf44      	itt	mi
 800662a:	f043 0320 	orrmi.w	r3, r3, #32
 800662e:	6023      	strmi	r3, [r4, #0]
 8006630:	b11d      	cbz	r5, 800663a <_printf_i+0x19e>
 8006632:	2310      	movs	r3, #16
 8006634:	e7ac      	b.n	8006590 <_printf_i+0xf4>
 8006636:	4827      	ldr	r0, [pc, #156]	@ (80066d4 <_printf_i+0x238>)
 8006638:	e7e9      	b.n	800660e <_printf_i+0x172>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	f023 0320 	bic.w	r3, r3, #32
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	e7f6      	b.n	8006632 <_printf_i+0x196>
 8006644:	4616      	mov	r6, r2
 8006646:	e7bd      	b.n	80065c4 <_printf_i+0x128>
 8006648:	6833      	ldr	r3, [r6, #0]
 800664a:	6825      	ldr	r5, [r4, #0]
 800664c:	6961      	ldr	r1, [r4, #20]
 800664e:	1d18      	adds	r0, r3, #4
 8006650:	6030      	str	r0, [r6, #0]
 8006652:	062e      	lsls	r6, r5, #24
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	d501      	bpl.n	800665c <_printf_i+0x1c0>
 8006658:	6019      	str	r1, [r3, #0]
 800665a:	e002      	b.n	8006662 <_printf_i+0x1c6>
 800665c:	0668      	lsls	r0, r5, #25
 800665e:	d5fb      	bpl.n	8006658 <_printf_i+0x1bc>
 8006660:	8019      	strh	r1, [r3, #0]
 8006662:	2300      	movs	r3, #0
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	4616      	mov	r6, r2
 8006668:	e7bc      	b.n	80065e4 <_printf_i+0x148>
 800666a:	6833      	ldr	r3, [r6, #0]
 800666c:	1d1a      	adds	r2, r3, #4
 800666e:	6032      	str	r2, [r6, #0]
 8006670:	681e      	ldr	r6, [r3, #0]
 8006672:	6862      	ldr	r2, [r4, #4]
 8006674:	2100      	movs	r1, #0
 8006676:	4630      	mov	r0, r6
 8006678:	f7f9 fdb2 	bl	80001e0 <memchr>
 800667c:	b108      	cbz	r0, 8006682 <_printf_i+0x1e6>
 800667e:	1b80      	subs	r0, r0, r6
 8006680:	6060      	str	r0, [r4, #4]
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	2300      	movs	r3, #0
 8006688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800668c:	e7aa      	b.n	80065e4 <_printf_i+0x148>
 800668e:	6923      	ldr	r3, [r4, #16]
 8006690:	4632      	mov	r2, r6
 8006692:	4649      	mov	r1, r9
 8006694:	4640      	mov	r0, r8
 8006696:	47d0      	blx	sl
 8006698:	3001      	adds	r0, #1
 800669a:	d0ad      	beq.n	80065f8 <_printf_i+0x15c>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	079b      	lsls	r3, r3, #30
 80066a0:	d413      	bmi.n	80066ca <_printf_i+0x22e>
 80066a2:	68e0      	ldr	r0, [r4, #12]
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	4298      	cmp	r0, r3
 80066a8:	bfb8      	it	lt
 80066aa:	4618      	movlt	r0, r3
 80066ac:	e7a6      	b.n	80065fc <_printf_i+0x160>
 80066ae:	2301      	movs	r3, #1
 80066b0:	4632      	mov	r2, r6
 80066b2:	4649      	mov	r1, r9
 80066b4:	4640      	mov	r0, r8
 80066b6:	47d0      	blx	sl
 80066b8:	3001      	adds	r0, #1
 80066ba:	d09d      	beq.n	80065f8 <_printf_i+0x15c>
 80066bc:	3501      	adds	r5, #1
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	9903      	ldr	r1, [sp, #12]
 80066c2:	1a5b      	subs	r3, r3, r1
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	dcf2      	bgt.n	80066ae <_printf_i+0x212>
 80066c8:	e7eb      	b.n	80066a2 <_printf_i+0x206>
 80066ca:	2500      	movs	r5, #0
 80066cc:	f104 0619 	add.w	r6, r4, #25
 80066d0:	e7f5      	b.n	80066be <_printf_i+0x222>
 80066d2:	bf00      	nop
 80066d4:	0800c2c8 	.word	0x0800c2c8
 80066d8:	0800c2d9 	.word	0x0800c2d9

080066dc <_scanf_float>:
 80066dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e0:	b087      	sub	sp, #28
 80066e2:	4617      	mov	r7, r2
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	688b      	ldr	r3, [r1, #8]
 80066e8:	1e5a      	subs	r2, r3, #1
 80066ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80066ee:	bf81      	itttt	hi
 80066f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80066f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80066f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80066fc:	608b      	strhi	r3, [r1, #8]
 80066fe:	680b      	ldr	r3, [r1, #0]
 8006700:	460a      	mov	r2, r1
 8006702:	f04f 0500 	mov.w	r5, #0
 8006706:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800670a:	f842 3b1c 	str.w	r3, [r2], #28
 800670e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006712:	4680      	mov	r8, r0
 8006714:	460c      	mov	r4, r1
 8006716:	bf98      	it	ls
 8006718:	f04f 0b00 	movls.w	fp, #0
 800671c:	9201      	str	r2, [sp, #4]
 800671e:	4616      	mov	r6, r2
 8006720:	46aa      	mov	sl, r5
 8006722:	46a9      	mov	r9, r5
 8006724:	9502      	str	r5, [sp, #8]
 8006726:	68a2      	ldr	r2, [r4, #8]
 8006728:	b152      	cbz	r2, 8006740 <_scanf_float+0x64>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006730:	d864      	bhi.n	80067fc <_scanf_float+0x120>
 8006732:	2b40      	cmp	r3, #64	@ 0x40
 8006734:	d83c      	bhi.n	80067b0 <_scanf_float+0xd4>
 8006736:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800673a:	b2c8      	uxtb	r0, r1
 800673c:	280e      	cmp	r0, #14
 800673e:	d93a      	bls.n	80067b6 <_scanf_float+0xda>
 8006740:	f1b9 0f00 	cmp.w	r9, #0
 8006744:	d003      	beq.n	800674e <_scanf_float+0x72>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006752:	f1ba 0f01 	cmp.w	sl, #1
 8006756:	f200 8117 	bhi.w	8006988 <_scanf_float+0x2ac>
 800675a:	9b01      	ldr	r3, [sp, #4]
 800675c:	429e      	cmp	r6, r3
 800675e:	f200 8108 	bhi.w	8006972 <_scanf_float+0x296>
 8006762:	2001      	movs	r0, #1
 8006764:	b007      	add	sp, #28
 8006766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800676e:	2a0d      	cmp	r2, #13
 8006770:	d8e6      	bhi.n	8006740 <_scanf_float+0x64>
 8006772:	a101      	add	r1, pc, #4	@ (adr r1, 8006778 <_scanf_float+0x9c>)
 8006774:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006778:	080068bf 	.word	0x080068bf
 800677c:	08006741 	.word	0x08006741
 8006780:	08006741 	.word	0x08006741
 8006784:	08006741 	.word	0x08006741
 8006788:	0800691f 	.word	0x0800691f
 800678c:	080068f7 	.word	0x080068f7
 8006790:	08006741 	.word	0x08006741
 8006794:	08006741 	.word	0x08006741
 8006798:	080068cd 	.word	0x080068cd
 800679c:	08006741 	.word	0x08006741
 80067a0:	08006741 	.word	0x08006741
 80067a4:	08006741 	.word	0x08006741
 80067a8:	08006741 	.word	0x08006741
 80067ac:	08006885 	.word	0x08006885
 80067b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80067b4:	e7db      	b.n	800676e <_scanf_float+0x92>
 80067b6:	290e      	cmp	r1, #14
 80067b8:	d8c2      	bhi.n	8006740 <_scanf_float+0x64>
 80067ba:	a001      	add	r0, pc, #4	@ (adr r0, 80067c0 <_scanf_float+0xe4>)
 80067bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067c0:	08006875 	.word	0x08006875
 80067c4:	08006741 	.word	0x08006741
 80067c8:	08006875 	.word	0x08006875
 80067cc:	0800690b 	.word	0x0800690b
 80067d0:	08006741 	.word	0x08006741
 80067d4:	0800681d 	.word	0x0800681d
 80067d8:	0800685b 	.word	0x0800685b
 80067dc:	0800685b 	.word	0x0800685b
 80067e0:	0800685b 	.word	0x0800685b
 80067e4:	0800685b 	.word	0x0800685b
 80067e8:	0800685b 	.word	0x0800685b
 80067ec:	0800685b 	.word	0x0800685b
 80067f0:	0800685b 	.word	0x0800685b
 80067f4:	0800685b 	.word	0x0800685b
 80067f8:	0800685b 	.word	0x0800685b
 80067fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80067fe:	d809      	bhi.n	8006814 <_scanf_float+0x138>
 8006800:	2b60      	cmp	r3, #96	@ 0x60
 8006802:	d8b2      	bhi.n	800676a <_scanf_float+0x8e>
 8006804:	2b54      	cmp	r3, #84	@ 0x54
 8006806:	d07b      	beq.n	8006900 <_scanf_float+0x224>
 8006808:	2b59      	cmp	r3, #89	@ 0x59
 800680a:	d199      	bne.n	8006740 <_scanf_float+0x64>
 800680c:	2d07      	cmp	r5, #7
 800680e:	d197      	bne.n	8006740 <_scanf_float+0x64>
 8006810:	2508      	movs	r5, #8
 8006812:	e02c      	b.n	800686e <_scanf_float+0x192>
 8006814:	2b74      	cmp	r3, #116	@ 0x74
 8006816:	d073      	beq.n	8006900 <_scanf_float+0x224>
 8006818:	2b79      	cmp	r3, #121	@ 0x79
 800681a:	e7f6      	b.n	800680a <_scanf_float+0x12e>
 800681c:	6821      	ldr	r1, [r4, #0]
 800681e:	05c8      	lsls	r0, r1, #23
 8006820:	d51b      	bpl.n	800685a <_scanf_float+0x17e>
 8006822:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006826:	6021      	str	r1, [r4, #0]
 8006828:	f109 0901 	add.w	r9, r9, #1
 800682c:	f1bb 0f00 	cmp.w	fp, #0
 8006830:	d003      	beq.n	800683a <_scanf_float+0x15e>
 8006832:	3201      	adds	r2, #1
 8006834:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006838:	60a2      	str	r2, [r4, #8]
 800683a:	68a3      	ldr	r3, [r4, #8]
 800683c:	3b01      	subs	r3, #1
 800683e:	60a3      	str	r3, [r4, #8]
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	3301      	adds	r3, #1
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3b01      	subs	r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	607b      	str	r3, [r7, #4]
 800684e:	f340 8087 	ble.w	8006960 <_scanf_float+0x284>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	3301      	adds	r3, #1
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	e765      	b.n	8006726 <_scanf_float+0x4a>
 800685a:	eb1a 0105 	adds.w	r1, sl, r5
 800685e:	f47f af6f 	bne.w	8006740 <_scanf_float+0x64>
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006868:	6022      	str	r2, [r4, #0]
 800686a:	460d      	mov	r5, r1
 800686c:	468a      	mov	sl, r1
 800686e:	f806 3b01 	strb.w	r3, [r6], #1
 8006872:	e7e2      	b.n	800683a <_scanf_float+0x15e>
 8006874:	6822      	ldr	r2, [r4, #0]
 8006876:	0610      	lsls	r0, r2, #24
 8006878:	f57f af62 	bpl.w	8006740 <_scanf_float+0x64>
 800687c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006880:	6022      	str	r2, [r4, #0]
 8006882:	e7f4      	b.n	800686e <_scanf_float+0x192>
 8006884:	f1ba 0f00 	cmp.w	sl, #0
 8006888:	d10e      	bne.n	80068a8 <_scanf_float+0x1cc>
 800688a:	f1b9 0f00 	cmp.w	r9, #0
 800688e:	d10e      	bne.n	80068ae <_scanf_float+0x1d2>
 8006890:	6822      	ldr	r2, [r4, #0]
 8006892:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006896:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800689a:	d108      	bne.n	80068ae <_scanf_float+0x1d2>
 800689c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80068a0:	6022      	str	r2, [r4, #0]
 80068a2:	f04f 0a01 	mov.w	sl, #1
 80068a6:	e7e2      	b.n	800686e <_scanf_float+0x192>
 80068a8:	f1ba 0f02 	cmp.w	sl, #2
 80068ac:	d055      	beq.n	800695a <_scanf_float+0x27e>
 80068ae:	2d01      	cmp	r5, #1
 80068b0:	d002      	beq.n	80068b8 <_scanf_float+0x1dc>
 80068b2:	2d04      	cmp	r5, #4
 80068b4:	f47f af44 	bne.w	8006740 <_scanf_float+0x64>
 80068b8:	3501      	adds	r5, #1
 80068ba:	b2ed      	uxtb	r5, r5
 80068bc:	e7d7      	b.n	800686e <_scanf_float+0x192>
 80068be:	f1ba 0f01 	cmp.w	sl, #1
 80068c2:	f47f af3d 	bne.w	8006740 <_scanf_float+0x64>
 80068c6:	f04f 0a02 	mov.w	sl, #2
 80068ca:	e7d0      	b.n	800686e <_scanf_float+0x192>
 80068cc:	b97d      	cbnz	r5, 80068ee <_scanf_float+0x212>
 80068ce:	f1b9 0f00 	cmp.w	r9, #0
 80068d2:	f47f af38 	bne.w	8006746 <_scanf_float+0x6a>
 80068d6:	6822      	ldr	r2, [r4, #0]
 80068d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80068dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80068e0:	f040 8108 	bne.w	8006af4 <_scanf_float+0x418>
 80068e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	2501      	movs	r5, #1
 80068ec:	e7bf      	b.n	800686e <_scanf_float+0x192>
 80068ee:	2d03      	cmp	r5, #3
 80068f0:	d0e2      	beq.n	80068b8 <_scanf_float+0x1dc>
 80068f2:	2d05      	cmp	r5, #5
 80068f4:	e7de      	b.n	80068b4 <_scanf_float+0x1d8>
 80068f6:	2d02      	cmp	r5, #2
 80068f8:	f47f af22 	bne.w	8006740 <_scanf_float+0x64>
 80068fc:	2503      	movs	r5, #3
 80068fe:	e7b6      	b.n	800686e <_scanf_float+0x192>
 8006900:	2d06      	cmp	r5, #6
 8006902:	f47f af1d 	bne.w	8006740 <_scanf_float+0x64>
 8006906:	2507      	movs	r5, #7
 8006908:	e7b1      	b.n	800686e <_scanf_float+0x192>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	0591      	lsls	r1, r2, #22
 800690e:	f57f af17 	bpl.w	8006740 <_scanf_float+0x64>
 8006912:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006916:	6022      	str	r2, [r4, #0]
 8006918:	f8cd 9008 	str.w	r9, [sp, #8]
 800691c:	e7a7      	b.n	800686e <_scanf_float+0x192>
 800691e:	6822      	ldr	r2, [r4, #0]
 8006920:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006924:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006928:	d006      	beq.n	8006938 <_scanf_float+0x25c>
 800692a:	0550      	lsls	r0, r2, #21
 800692c:	f57f af08 	bpl.w	8006740 <_scanf_float+0x64>
 8006930:	f1b9 0f00 	cmp.w	r9, #0
 8006934:	f000 80de 	beq.w	8006af4 <_scanf_float+0x418>
 8006938:	0591      	lsls	r1, r2, #22
 800693a:	bf58      	it	pl
 800693c:	9902      	ldrpl	r1, [sp, #8]
 800693e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006942:	bf58      	it	pl
 8006944:	eba9 0101 	subpl.w	r1, r9, r1
 8006948:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800694c:	bf58      	it	pl
 800694e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006952:	6022      	str	r2, [r4, #0]
 8006954:	f04f 0900 	mov.w	r9, #0
 8006958:	e789      	b.n	800686e <_scanf_float+0x192>
 800695a:	f04f 0a03 	mov.w	sl, #3
 800695e:	e786      	b.n	800686e <_scanf_float+0x192>
 8006960:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006964:	4639      	mov	r1, r7
 8006966:	4640      	mov	r0, r8
 8006968:	4798      	blx	r3
 800696a:	2800      	cmp	r0, #0
 800696c:	f43f aedb 	beq.w	8006726 <_scanf_float+0x4a>
 8006970:	e6e6      	b.n	8006740 <_scanf_float+0x64>
 8006972:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006976:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800697a:	463a      	mov	r2, r7
 800697c:	4640      	mov	r0, r8
 800697e:	4798      	blx	r3
 8006980:	6923      	ldr	r3, [r4, #16]
 8006982:	3b01      	subs	r3, #1
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	e6e8      	b.n	800675a <_scanf_float+0x7e>
 8006988:	1e6b      	subs	r3, r5, #1
 800698a:	2b06      	cmp	r3, #6
 800698c:	d824      	bhi.n	80069d8 <_scanf_float+0x2fc>
 800698e:	2d02      	cmp	r5, #2
 8006990:	d836      	bhi.n	8006a00 <_scanf_float+0x324>
 8006992:	9b01      	ldr	r3, [sp, #4]
 8006994:	429e      	cmp	r6, r3
 8006996:	f67f aee4 	bls.w	8006762 <_scanf_float+0x86>
 800699a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800699e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069a2:	463a      	mov	r2, r7
 80069a4:	4640      	mov	r0, r8
 80069a6:	4798      	blx	r3
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	6123      	str	r3, [r4, #16]
 80069ae:	e7f0      	b.n	8006992 <_scanf_float+0x2b6>
 80069b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80069b8:	463a      	mov	r2, r7
 80069ba:	4640      	mov	r0, r8
 80069bc:	4798      	blx	r3
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	3b01      	subs	r3, #1
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069c8:	fa5f fa8a 	uxtb.w	sl, sl
 80069cc:	f1ba 0f02 	cmp.w	sl, #2
 80069d0:	d1ee      	bne.n	80069b0 <_scanf_float+0x2d4>
 80069d2:	3d03      	subs	r5, #3
 80069d4:	b2ed      	uxtb	r5, r5
 80069d6:	1b76      	subs	r6, r6, r5
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	05da      	lsls	r2, r3, #23
 80069dc:	d530      	bpl.n	8006a40 <_scanf_float+0x364>
 80069de:	055b      	lsls	r3, r3, #21
 80069e0:	d511      	bpl.n	8006a06 <_scanf_float+0x32a>
 80069e2:	9b01      	ldr	r3, [sp, #4]
 80069e4:	429e      	cmp	r6, r3
 80069e6:	f67f aebc 	bls.w	8006762 <_scanf_float+0x86>
 80069ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069f2:	463a      	mov	r2, r7
 80069f4:	4640      	mov	r0, r8
 80069f6:	4798      	blx	r3
 80069f8:	6923      	ldr	r3, [r4, #16]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	e7f0      	b.n	80069e2 <_scanf_float+0x306>
 8006a00:	46aa      	mov	sl, r5
 8006a02:	46b3      	mov	fp, r6
 8006a04:	e7de      	b.n	80069c4 <_scanf_float+0x2e8>
 8006a06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	2965      	cmp	r1, #101	@ 0x65
 8006a0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a12:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a16:	6123      	str	r3, [r4, #16]
 8006a18:	d00c      	beq.n	8006a34 <_scanf_float+0x358>
 8006a1a:	2945      	cmp	r1, #69	@ 0x45
 8006a1c:	d00a      	beq.n	8006a34 <_scanf_float+0x358>
 8006a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a22:	463a      	mov	r2, r7
 8006a24:	4640      	mov	r0, r8
 8006a26:	4798      	blx	r3
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	1eb5      	subs	r5, r6, #2
 8006a32:	6123      	str	r3, [r4, #16]
 8006a34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a38:	463a      	mov	r2, r7
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4798      	blx	r3
 8006a3e:	462e      	mov	r6, r5
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	f012 0210 	ands.w	r2, r2, #16
 8006a46:	d001      	beq.n	8006a4c <_scanf_float+0x370>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e68b      	b.n	8006764 <_scanf_float+0x88>
 8006a4c:	7032      	strb	r2, [r6, #0]
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a58:	d11c      	bne.n	8006a94 <_scanf_float+0x3b8>
 8006a5a:	9b02      	ldr	r3, [sp, #8]
 8006a5c:	454b      	cmp	r3, r9
 8006a5e:	eba3 0209 	sub.w	r2, r3, r9
 8006a62:	d123      	bne.n	8006aac <_scanf_float+0x3d0>
 8006a64:	9901      	ldr	r1, [sp, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	4640      	mov	r0, r8
 8006a6a:	f002 fc35 	bl	80092d8 <_strtod_r>
 8006a6e:	9b03      	ldr	r3, [sp, #12]
 8006a70:	6821      	ldr	r1, [r4, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f011 0f02 	tst.w	r1, #2
 8006a78:	ec57 6b10 	vmov	r6, r7, d0
 8006a7c:	f103 0204 	add.w	r2, r3, #4
 8006a80:	d01f      	beq.n	8006ac2 <_scanf_float+0x3e6>
 8006a82:	9903      	ldr	r1, [sp, #12]
 8006a84:	600a      	str	r2, [r1, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	e9c3 6700 	strd	r6, r7, [r3]
 8006a8c:	68e3      	ldr	r3, [r4, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60e3      	str	r3, [r4, #12]
 8006a92:	e7d9      	b.n	8006a48 <_scanf_float+0x36c>
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0e4      	beq.n	8006a64 <_scanf_float+0x388>
 8006a9a:	9905      	ldr	r1, [sp, #20]
 8006a9c:	230a      	movs	r3, #10
 8006a9e:	3101      	adds	r1, #1
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	f002 fc99 	bl	80093d8 <_strtol_r>
 8006aa6:	9b04      	ldr	r3, [sp, #16]
 8006aa8:	9e05      	ldr	r6, [sp, #20]
 8006aaa:	1ac2      	subs	r2, r0, r3
 8006aac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006ab0:	429e      	cmp	r6, r3
 8006ab2:	bf28      	it	cs
 8006ab4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006ab8:	4910      	ldr	r1, [pc, #64]	@ (8006afc <_scanf_float+0x420>)
 8006aba:	4630      	mov	r0, r6
 8006abc:	f000 f8e4 	bl	8006c88 <siprintf>
 8006ac0:	e7d0      	b.n	8006a64 <_scanf_float+0x388>
 8006ac2:	f011 0f04 	tst.w	r1, #4
 8006ac6:	9903      	ldr	r1, [sp, #12]
 8006ac8:	600a      	str	r2, [r1, #0]
 8006aca:	d1dc      	bne.n	8006a86 <_scanf_float+0x3aa>
 8006acc:	681d      	ldr	r5, [r3, #0]
 8006ace:	4632      	mov	r2, r6
 8006ad0:	463b      	mov	r3, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	f7fa f831 	bl	8000b3c <__aeabi_dcmpun>
 8006ada:	b128      	cbz	r0, 8006ae8 <_scanf_float+0x40c>
 8006adc:	4808      	ldr	r0, [pc, #32]	@ (8006b00 <_scanf_float+0x424>)
 8006ade:	f000 f9f5 	bl	8006ecc <nanf>
 8006ae2:	ed85 0a00 	vstr	s0, [r5]
 8006ae6:	e7d1      	b.n	8006a8c <_scanf_float+0x3b0>
 8006ae8:	4630      	mov	r0, r6
 8006aea:	4639      	mov	r1, r7
 8006aec:	f7fa f884 	bl	8000bf8 <__aeabi_d2f>
 8006af0:	6028      	str	r0, [r5, #0]
 8006af2:	e7cb      	b.n	8006a8c <_scanf_float+0x3b0>
 8006af4:	f04f 0900 	mov.w	r9, #0
 8006af8:	e629      	b.n	800674e <_scanf_float+0x72>
 8006afa:	bf00      	nop
 8006afc:	0800c2ea 	.word	0x0800c2ea
 8006b00:	0800c6a0 	.word	0x0800c6a0

08006b04 <std>:
 8006b04:	2300      	movs	r3, #0
 8006b06:	b510      	push	{r4, lr}
 8006b08:	4604      	mov	r4, r0
 8006b0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b12:	6083      	str	r3, [r0, #8]
 8006b14:	8181      	strh	r1, [r0, #12]
 8006b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b18:	81c2      	strh	r2, [r0, #14]
 8006b1a:	6183      	str	r3, [r0, #24]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	2208      	movs	r2, #8
 8006b20:	305c      	adds	r0, #92	@ 0x5c
 8006b22:	f000 f940 	bl	8006da6 <memset>
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <std+0x58>)
 8006b28:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <std+0x5c>)
 8006b2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b64 <std+0x60>)
 8006b30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b32:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <std+0x64>)
 8006b34:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b36:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <std+0x68>)
 8006b38:	6224      	str	r4, [r4, #32]
 8006b3a:	429c      	cmp	r4, r3
 8006b3c:	d006      	beq.n	8006b4c <std+0x48>
 8006b3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b42:	4294      	cmp	r4, r2
 8006b44:	d002      	beq.n	8006b4c <std+0x48>
 8006b46:	33d0      	adds	r3, #208	@ 0xd0
 8006b48:	429c      	cmp	r4, r3
 8006b4a:	d105      	bne.n	8006b58 <std+0x54>
 8006b4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b54:	f000 b9b6 	b.w	8006ec4 <__retarget_lock_init_recursive>
 8006b58:	bd10      	pop	{r4, pc}
 8006b5a:	bf00      	nop
 8006b5c:	08006d1d 	.word	0x08006d1d
 8006b60:	08006d43 	.word	0x08006d43
 8006b64:	08006d7b 	.word	0x08006d7b
 8006b68:	08006d9f 	.word	0x08006d9f
 8006b6c:	200004e4 	.word	0x200004e4

08006b70 <stdio_exit_handler>:
 8006b70:	4a02      	ldr	r2, [pc, #8]	@ (8006b7c <stdio_exit_handler+0xc>)
 8006b72:	4903      	ldr	r1, [pc, #12]	@ (8006b80 <stdio_exit_handler+0x10>)
 8006b74:	4803      	ldr	r0, [pc, #12]	@ (8006b84 <stdio_exit_handler+0x14>)
 8006b76:	f000 b869 	b.w	8006c4c <_fwalk_sglue>
 8006b7a:	bf00      	nop
 8006b7c:	20000058 	.word	0x20000058
 8006b80:	08009dc9 	.word	0x08009dc9
 8006b84:	20000068 	.word	0x20000068

08006b88 <cleanup_stdio>:
 8006b88:	6841      	ldr	r1, [r0, #4]
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bbc <cleanup_stdio+0x34>)
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	4604      	mov	r4, r0
 8006b92:	d001      	beq.n	8006b98 <cleanup_stdio+0x10>
 8006b94:	f003 f918 	bl	8009dc8 <_fflush_r>
 8006b98:	68a1      	ldr	r1, [r4, #8]
 8006b9a:	4b09      	ldr	r3, [pc, #36]	@ (8006bc0 <cleanup_stdio+0x38>)
 8006b9c:	4299      	cmp	r1, r3
 8006b9e:	d002      	beq.n	8006ba6 <cleanup_stdio+0x1e>
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f003 f911 	bl	8009dc8 <_fflush_r>
 8006ba6:	68e1      	ldr	r1, [r4, #12]
 8006ba8:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <cleanup_stdio+0x3c>)
 8006baa:	4299      	cmp	r1, r3
 8006bac:	d004      	beq.n	8006bb8 <cleanup_stdio+0x30>
 8006bae:	4620      	mov	r0, r4
 8006bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb4:	f003 b908 	b.w	8009dc8 <_fflush_r>
 8006bb8:	bd10      	pop	{r4, pc}
 8006bba:	bf00      	nop
 8006bbc:	200004e4 	.word	0x200004e4
 8006bc0:	2000054c 	.word	0x2000054c
 8006bc4:	200005b4 	.word	0x200005b4

08006bc8 <global_stdio_init.part.0>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf8 <global_stdio_init.part.0+0x30>)
 8006bcc:	4c0b      	ldr	r4, [pc, #44]	@ (8006bfc <global_stdio_init.part.0+0x34>)
 8006bce:	4a0c      	ldr	r2, [pc, #48]	@ (8006c00 <global_stdio_init.part.0+0x38>)
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2104      	movs	r1, #4
 8006bd8:	f7ff ff94 	bl	8006b04 <std>
 8006bdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006be0:	2201      	movs	r2, #1
 8006be2:	2109      	movs	r1, #9
 8006be4:	f7ff ff8e 	bl	8006b04 <std>
 8006be8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bec:	2202      	movs	r2, #2
 8006bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf2:	2112      	movs	r1, #18
 8006bf4:	f7ff bf86 	b.w	8006b04 <std>
 8006bf8:	2000061c 	.word	0x2000061c
 8006bfc:	200004e4 	.word	0x200004e4
 8006c00:	08006b71 	.word	0x08006b71

08006c04 <__sfp_lock_acquire>:
 8006c04:	4801      	ldr	r0, [pc, #4]	@ (8006c0c <__sfp_lock_acquire+0x8>)
 8006c06:	f000 b95e 	b.w	8006ec6 <__retarget_lock_acquire_recursive>
 8006c0a:	bf00      	nop
 8006c0c:	20000625 	.word	0x20000625

08006c10 <__sfp_lock_release>:
 8006c10:	4801      	ldr	r0, [pc, #4]	@ (8006c18 <__sfp_lock_release+0x8>)
 8006c12:	f000 b959 	b.w	8006ec8 <__retarget_lock_release_recursive>
 8006c16:	bf00      	nop
 8006c18:	20000625 	.word	0x20000625

08006c1c <__sinit>:
 8006c1c:	b510      	push	{r4, lr}
 8006c1e:	4604      	mov	r4, r0
 8006c20:	f7ff fff0 	bl	8006c04 <__sfp_lock_acquire>
 8006c24:	6a23      	ldr	r3, [r4, #32]
 8006c26:	b11b      	cbz	r3, 8006c30 <__sinit+0x14>
 8006c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2c:	f7ff bff0 	b.w	8006c10 <__sfp_lock_release>
 8006c30:	4b04      	ldr	r3, [pc, #16]	@ (8006c44 <__sinit+0x28>)
 8006c32:	6223      	str	r3, [r4, #32]
 8006c34:	4b04      	ldr	r3, [pc, #16]	@ (8006c48 <__sinit+0x2c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f5      	bne.n	8006c28 <__sinit+0xc>
 8006c3c:	f7ff ffc4 	bl	8006bc8 <global_stdio_init.part.0>
 8006c40:	e7f2      	b.n	8006c28 <__sinit+0xc>
 8006c42:	bf00      	nop
 8006c44:	08006b89 	.word	0x08006b89
 8006c48:	2000061c 	.word	0x2000061c

08006c4c <_fwalk_sglue>:
 8006c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c50:	4607      	mov	r7, r0
 8006c52:	4688      	mov	r8, r1
 8006c54:	4614      	mov	r4, r2
 8006c56:	2600      	movs	r6, #0
 8006c58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c5c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c60:	d505      	bpl.n	8006c6e <_fwalk_sglue+0x22>
 8006c62:	6824      	ldr	r4, [r4, #0]
 8006c64:	2c00      	cmp	r4, #0
 8006c66:	d1f7      	bne.n	8006c58 <_fwalk_sglue+0xc>
 8006c68:	4630      	mov	r0, r6
 8006c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d907      	bls.n	8006c84 <_fwalk_sglue+0x38>
 8006c74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	d003      	beq.n	8006c84 <_fwalk_sglue+0x38>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	4638      	mov	r0, r7
 8006c80:	47c0      	blx	r8
 8006c82:	4306      	orrs	r6, r0
 8006c84:	3568      	adds	r5, #104	@ 0x68
 8006c86:	e7e9      	b.n	8006c5c <_fwalk_sglue+0x10>

08006c88 <siprintf>:
 8006c88:	b40e      	push	{r1, r2, r3}
 8006c8a:	b500      	push	{lr}
 8006c8c:	b09c      	sub	sp, #112	@ 0x70
 8006c8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c90:	9002      	str	r0, [sp, #8]
 8006c92:	9006      	str	r0, [sp, #24]
 8006c94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c98:	4809      	ldr	r0, [pc, #36]	@ (8006cc0 <siprintf+0x38>)
 8006c9a:	9107      	str	r1, [sp, #28]
 8006c9c:	9104      	str	r1, [sp, #16]
 8006c9e:	4909      	ldr	r1, [pc, #36]	@ (8006cc4 <siprintf+0x3c>)
 8006ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca4:	9105      	str	r1, [sp, #20]
 8006ca6:	6800      	ldr	r0, [r0, #0]
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	a902      	add	r1, sp, #8
 8006cac:	f002 fbf2 	bl	8009494 <_svfiprintf_r>
 8006cb0:	9b02      	ldr	r3, [sp, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	b01c      	add	sp, #112	@ 0x70
 8006cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cbc:	b003      	add	sp, #12
 8006cbe:	4770      	bx	lr
 8006cc0:	20000064 	.word	0x20000064
 8006cc4:	ffff0208 	.word	0xffff0208

08006cc8 <siscanf>:
 8006cc8:	b40e      	push	{r1, r2, r3}
 8006cca:	b530      	push	{r4, r5, lr}
 8006ccc:	b09c      	sub	sp, #112	@ 0x70
 8006cce:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006cd0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006cd4:	f854 5b04 	ldr.w	r5, [r4], #4
 8006cd8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006cdc:	9002      	str	r0, [sp, #8]
 8006cde:	9006      	str	r0, [sp, #24]
 8006ce0:	f7f9 face 	bl	8000280 <strlen>
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <siscanf+0x4c>)
 8006ce6:	9003      	str	r0, [sp, #12]
 8006ce8:	9007      	str	r0, [sp, #28]
 8006cea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cec:	480a      	ldr	r0, [pc, #40]	@ (8006d18 <siscanf+0x50>)
 8006cee:	9401      	str	r4, [sp, #4]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006cf4:	9314      	str	r3, [sp, #80]	@ 0x50
 8006cf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cfa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006cfe:	462a      	mov	r2, r5
 8006d00:	4623      	mov	r3, r4
 8006d02:	a902      	add	r1, sp, #8
 8006d04:	6800      	ldr	r0, [r0, #0]
 8006d06:	f002 fd19 	bl	800973c <__ssvfiscanf_r>
 8006d0a:	b01c      	add	sp, #112	@ 0x70
 8006d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d10:	b003      	add	sp, #12
 8006d12:	4770      	bx	lr
 8006d14:	08006d3f 	.word	0x08006d3f
 8006d18:	20000064 	.word	0x20000064

08006d1c <__sread>:
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	460c      	mov	r4, r1
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	f000 f880 	bl	8006e28 <_read_r>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	bfab      	itete	ge
 8006d2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d30:	181b      	addge	r3, r3, r0
 8006d32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d36:	bfac      	ite	ge
 8006d38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d3a:	81a3      	strhlt	r3, [r4, #12]
 8006d3c:	bd10      	pop	{r4, pc}

08006d3e <__seofread>:
 8006d3e:	2000      	movs	r0, #0
 8006d40:	4770      	bx	lr

08006d42 <__swrite>:
 8006d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d46:	461f      	mov	r7, r3
 8006d48:	898b      	ldrh	r3, [r1, #12]
 8006d4a:	05db      	lsls	r3, r3, #23
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	4616      	mov	r6, r2
 8006d52:	d505      	bpl.n	8006d60 <__swrite+0x1e>
 8006d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d58:	2302      	movs	r3, #2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f000 f852 	bl	8006e04 <_lseek_r>
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	463b      	mov	r3, r7
 8006d70:	4628      	mov	r0, r5
 8006d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d76:	f000 b869 	b.w	8006e4c <_write_r>

08006d7a <__sseek>:
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d82:	f000 f83f 	bl	8006e04 <_lseek_r>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	89a3      	ldrh	r3, [r4, #12]
 8006d8a:	bf15      	itete	ne
 8006d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d96:	81a3      	strheq	r3, [r4, #12]
 8006d98:	bf18      	it	ne
 8006d9a:	81a3      	strhne	r3, [r4, #12]
 8006d9c:	bd10      	pop	{r4, pc}

08006d9e <__sclose>:
 8006d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da2:	f000 b81f 	b.w	8006de4 <_close_r>

08006da6 <memset>:
 8006da6:	4402      	add	r2, r0
 8006da8:	4603      	mov	r3, r0
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d100      	bne.n	8006db0 <memset+0xa>
 8006dae:	4770      	bx	lr
 8006db0:	f803 1b01 	strb.w	r1, [r3], #1
 8006db4:	e7f9      	b.n	8006daa <memset+0x4>

08006db6 <strncmp>:
 8006db6:	b510      	push	{r4, lr}
 8006db8:	b16a      	cbz	r2, 8006dd6 <strncmp+0x20>
 8006dba:	3901      	subs	r1, #1
 8006dbc:	1884      	adds	r4, r0, r2
 8006dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d103      	bne.n	8006dd2 <strncmp+0x1c>
 8006dca:	42a0      	cmp	r0, r4
 8006dcc:	d001      	beq.n	8006dd2 <strncmp+0x1c>
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	d1f5      	bne.n	8006dbe <strncmp+0x8>
 8006dd2:	1ad0      	subs	r0, r2, r3
 8006dd4:	bd10      	pop	{r4, pc}
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	e7fc      	b.n	8006dd4 <strncmp+0x1e>
	...

08006ddc <_localeconv_r>:
 8006ddc:	4800      	ldr	r0, [pc, #0]	@ (8006de0 <_localeconv_r+0x4>)
 8006dde:	4770      	bx	lr
 8006de0:	200001a4 	.word	0x200001a4

08006de4 <_close_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d06      	ldr	r5, [pc, #24]	@ (8006e00 <_close_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fb f8d0 	bl	8001f94 <_close>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_close_r+0x1a>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_close_r+0x1a>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	20000620 	.word	0x20000620

08006e04 <_lseek_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d07      	ldr	r5, [pc, #28]	@ (8006e24 <_lseek_r+0x20>)
 8006e08:	4604      	mov	r4, r0
 8006e0a:	4608      	mov	r0, r1
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	2200      	movs	r2, #0
 8006e10:	602a      	str	r2, [r5, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f7fb f8e5 	bl	8001fe2 <_lseek>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d102      	bne.n	8006e22 <_lseek_r+0x1e>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	b103      	cbz	r3, 8006e22 <_lseek_r+0x1e>
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	20000620 	.word	0x20000620

08006e28 <_read_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4d07      	ldr	r5, [pc, #28]	@ (8006e48 <_read_r+0x20>)
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	4608      	mov	r0, r1
 8006e30:	4611      	mov	r1, r2
 8006e32:	2200      	movs	r2, #0
 8006e34:	602a      	str	r2, [r5, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f7fb f873 	bl	8001f22 <_read>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_read_r+0x1e>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_read_r+0x1e>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20000620 	.word	0x20000620

08006e4c <_write_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d07      	ldr	r5, [pc, #28]	@ (8006e6c <_write_r+0x20>)
 8006e50:	4604      	mov	r4, r0
 8006e52:	4608      	mov	r0, r1
 8006e54:	4611      	mov	r1, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7fb f87e 	bl	8001f5c <_write>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_write_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_write_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20000620 	.word	0x20000620

08006e70 <__errno>:
 8006e70:	4b01      	ldr	r3, [pc, #4]	@ (8006e78 <__errno+0x8>)
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000064 	.word	0x20000064

08006e7c <__libc_init_array>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006eb4 <__libc_init_array+0x38>)
 8006e80:	4c0d      	ldr	r4, [pc, #52]	@ (8006eb8 <__libc_init_array+0x3c>)
 8006e82:	1b64      	subs	r4, r4, r5
 8006e84:	10a4      	asrs	r4, r4, #2
 8006e86:	2600      	movs	r6, #0
 8006e88:	42a6      	cmp	r6, r4
 8006e8a:	d109      	bne.n	8006ea0 <__libc_init_array+0x24>
 8006e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006ebc <__libc_init_array+0x40>)
 8006e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ec0 <__libc_init_array+0x44>)
 8006e90:	f005 f9ce 	bl	800c230 <_init>
 8006e94:	1b64      	subs	r4, r4, r5
 8006e96:	10a4      	asrs	r4, r4, #2
 8006e98:	2600      	movs	r6, #0
 8006e9a:	42a6      	cmp	r6, r4
 8006e9c:	d105      	bne.n	8006eaa <__libc_init_array+0x2e>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea4:	4798      	blx	r3
 8006ea6:	3601      	adds	r6, #1
 8006ea8:	e7ee      	b.n	8006e88 <__libc_init_array+0xc>
 8006eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eae:	4798      	blx	r3
 8006eb0:	3601      	adds	r6, #1
 8006eb2:	e7f2      	b.n	8006e9a <__libc_init_array+0x1e>
 8006eb4:	0800c740 	.word	0x0800c740
 8006eb8:	0800c740 	.word	0x0800c740
 8006ebc:	0800c740 	.word	0x0800c740
 8006ec0:	0800c744 	.word	0x0800c744

08006ec4 <__retarget_lock_init_recursive>:
 8006ec4:	4770      	bx	lr

08006ec6 <__retarget_lock_acquire_recursive>:
 8006ec6:	4770      	bx	lr

08006ec8 <__retarget_lock_release_recursive>:
 8006ec8:	4770      	bx	lr
	...

08006ecc <nanf>:
 8006ecc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006ed4 <nanf+0x8>
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	7fc00000 	.word	0x7fc00000

08006ed8 <quorem>:
 8006ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006edc:	6903      	ldr	r3, [r0, #16]
 8006ede:	690c      	ldr	r4, [r1, #16]
 8006ee0:	42a3      	cmp	r3, r4
 8006ee2:	4607      	mov	r7, r0
 8006ee4:	db7e      	blt.n	8006fe4 <quorem+0x10c>
 8006ee6:	3c01      	subs	r4, #1
 8006ee8:	f101 0814 	add.w	r8, r1, #20
 8006eec:	00a3      	lsls	r3, r4, #2
 8006eee:	f100 0514 	add.w	r5, r0, #20
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006efe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f02:	3301      	adds	r3, #1
 8006f04:	429a      	cmp	r2, r3
 8006f06:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f0e:	d32e      	bcc.n	8006f6e <quorem+0x96>
 8006f10:	f04f 0a00 	mov.w	sl, #0
 8006f14:	46c4      	mov	ip, r8
 8006f16:	46ae      	mov	lr, r5
 8006f18:	46d3      	mov	fp, sl
 8006f1a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f1e:	b298      	uxth	r0, r3
 8006f20:	fb06 a000 	mla	r0, r6, r0, sl
 8006f24:	0c02      	lsrs	r2, r0, #16
 8006f26:	0c1b      	lsrs	r3, r3, #16
 8006f28:	fb06 2303 	mla	r3, r6, r3, r2
 8006f2c:	f8de 2000 	ldr.w	r2, [lr]
 8006f30:	b280      	uxth	r0, r0
 8006f32:	b292      	uxth	r2, r2
 8006f34:	1a12      	subs	r2, r2, r0
 8006f36:	445a      	add	r2, fp
 8006f38:	f8de 0000 	ldr.w	r0, [lr]
 8006f3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f46:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f4a:	b292      	uxth	r2, r2
 8006f4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f50:	45e1      	cmp	r9, ip
 8006f52:	f84e 2b04 	str.w	r2, [lr], #4
 8006f56:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f5a:	d2de      	bcs.n	8006f1a <quorem+0x42>
 8006f5c:	9b00      	ldr	r3, [sp, #0]
 8006f5e:	58eb      	ldr	r3, [r5, r3]
 8006f60:	b92b      	cbnz	r3, 8006f6e <quorem+0x96>
 8006f62:	9b01      	ldr	r3, [sp, #4]
 8006f64:	3b04      	subs	r3, #4
 8006f66:	429d      	cmp	r5, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	d32f      	bcc.n	8006fcc <quorem+0xf4>
 8006f6c:	613c      	str	r4, [r7, #16]
 8006f6e:	4638      	mov	r0, r7
 8006f70:	f001 f9c2 	bl	80082f8 <__mcmp>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	db25      	blt.n	8006fc4 <quorem+0xec>
 8006f78:	4629      	mov	r1, r5
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f80:	f8d1 c000 	ldr.w	ip, [r1]
 8006f84:	fa1f fe82 	uxth.w	lr, r2
 8006f88:	fa1f f38c 	uxth.w	r3, ip
 8006f8c:	eba3 030e 	sub.w	r3, r3, lr
 8006f90:	4403      	add	r3, r0
 8006f92:	0c12      	lsrs	r2, r2, #16
 8006f94:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f98:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fa2:	45c1      	cmp	r9, r8
 8006fa4:	f841 3b04 	str.w	r3, [r1], #4
 8006fa8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fac:	d2e6      	bcs.n	8006f7c <quorem+0xa4>
 8006fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fb6:	b922      	cbnz	r2, 8006fc2 <quorem+0xea>
 8006fb8:	3b04      	subs	r3, #4
 8006fba:	429d      	cmp	r5, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	d30b      	bcc.n	8006fd8 <quorem+0x100>
 8006fc0:	613c      	str	r4, [r7, #16]
 8006fc2:	3601      	adds	r6, #1
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	b003      	add	sp, #12
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	3b04      	subs	r3, #4
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	d1cb      	bne.n	8006f6c <quorem+0x94>
 8006fd4:	3c01      	subs	r4, #1
 8006fd6:	e7c6      	b.n	8006f66 <quorem+0x8e>
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	3b04      	subs	r3, #4
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	d1ef      	bne.n	8006fc0 <quorem+0xe8>
 8006fe0:	3c01      	subs	r4, #1
 8006fe2:	e7ea      	b.n	8006fba <quorem+0xe2>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	e7ee      	b.n	8006fc6 <quorem+0xee>

08006fe8 <_dtoa_r>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	69c7      	ldr	r7, [r0, #28]
 8006fee:	b099      	sub	sp, #100	@ 0x64
 8006ff0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006ff4:	ec55 4b10 	vmov	r4, r5, d0
 8006ff8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006ffa:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ffc:	4683      	mov	fp, r0
 8006ffe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007000:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007002:	b97f      	cbnz	r7, 8007024 <_dtoa_r+0x3c>
 8007004:	2010      	movs	r0, #16
 8007006:	f000 fdfd 	bl	8007c04 <malloc>
 800700a:	4602      	mov	r2, r0
 800700c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007010:	b920      	cbnz	r0, 800701c <_dtoa_r+0x34>
 8007012:	4ba7      	ldr	r3, [pc, #668]	@ (80072b0 <_dtoa_r+0x2c8>)
 8007014:	21ef      	movs	r1, #239	@ 0xef
 8007016:	48a7      	ldr	r0, [pc, #668]	@ (80072b4 <_dtoa_r+0x2cc>)
 8007018:	f002 ffb2 	bl	8009f80 <__assert_func>
 800701c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007020:	6007      	str	r7, [r0, #0]
 8007022:	60c7      	str	r7, [r0, #12]
 8007024:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007028:	6819      	ldr	r1, [r3, #0]
 800702a:	b159      	cbz	r1, 8007044 <_dtoa_r+0x5c>
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	604a      	str	r2, [r1, #4]
 8007030:	2301      	movs	r3, #1
 8007032:	4093      	lsls	r3, r2
 8007034:	608b      	str	r3, [r1, #8]
 8007036:	4658      	mov	r0, fp
 8007038:	f000 feda 	bl	8007df0 <_Bfree>
 800703c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	1e2b      	subs	r3, r5, #0
 8007046:	bfb9      	ittee	lt
 8007048:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800704c:	9303      	strlt	r3, [sp, #12]
 800704e:	2300      	movge	r3, #0
 8007050:	6033      	strge	r3, [r6, #0]
 8007052:	9f03      	ldr	r7, [sp, #12]
 8007054:	4b98      	ldr	r3, [pc, #608]	@ (80072b8 <_dtoa_r+0x2d0>)
 8007056:	bfbc      	itt	lt
 8007058:	2201      	movlt	r2, #1
 800705a:	6032      	strlt	r2, [r6, #0]
 800705c:	43bb      	bics	r3, r7
 800705e:	d112      	bne.n	8007086 <_dtoa_r+0x9e>
 8007060:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007062:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800706c:	4323      	orrs	r3, r4
 800706e:	f000 854d 	beq.w	8007b0c <_dtoa_r+0xb24>
 8007072:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007074:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80072cc <_dtoa_r+0x2e4>
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 854f 	beq.w	8007b1c <_dtoa_r+0xb34>
 800707e:	f10a 0303 	add.w	r3, sl, #3
 8007082:	f000 bd49 	b.w	8007b18 <_dtoa_r+0xb30>
 8007086:	ed9d 7b02 	vldr	d7, [sp, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	ec51 0b17 	vmov	r0, r1, d7
 8007090:	2300      	movs	r3, #0
 8007092:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007096:	f7f9 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800709a:	4680      	mov	r8, r0
 800709c:	b158      	cbz	r0, 80070b6 <_dtoa_r+0xce>
 800709e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070a0:	2301      	movs	r3, #1
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070a6:	b113      	cbz	r3, 80070ae <_dtoa_r+0xc6>
 80070a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80070aa:	4b84      	ldr	r3, [pc, #528]	@ (80072bc <_dtoa_r+0x2d4>)
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80072d0 <_dtoa_r+0x2e8>
 80070b2:	f000 bd33 	b.w	8007b1c <_dtoa_r+0xb34>
 80070b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80070ba:	aa16      	add	r2, sp, #88	@ 0x58
 80070bc:	a917      	add	r1, sp, #92	@ 0x5c
 80070be:	4658      	mov	r0, fp
 80070c0:	f001 fa3a 	bl	8008538 <__d2b>
 80070c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80070c8:	4681      	mov	r9, r0
 80070ca:	2e00      	cmp	r6, #0
 80070cc:	d077      	beq.n	80071be <_dtoa_r+0x1d6>
 80070ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80070d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80070e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80070e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80070e8:	4619      	mov	r1, r3
 80070ea:	2200      	movs	r2, #0
 80070ec:	4b74      	ldr	r3, [pc, #464]	@ (80072c0 <_dtoa_r+0x2d8>)
 80070ee:	f7f9 f8d3 	bl	8000298 <__aeabi_dsub>
 80070f2:	a369      	add	r3, pc, #420	@ (adr r3, 8007298 <_dtoa_r+0x2b0>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f7f9 fa86 	bl	8000608 <__aeabi_dmul>
 80070fc:	a368      	add	r3, pc, #416	@ (adr r3, 80072a0 <_dtoa_r+0x2b8>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	f7f9 f8cb 	bl	800029c <__adddf3>
 8007106:	4604      	mov	r4, r0
 8007108:	4630      	mov	r0, r6
 800710a:	460d      	mov	r5, r1
 800710c:	f7f9 fa12 	bl	8000534 <__aeabi_i2d>
 8007110:	a365      	add	r3, pc, #404	@ (adr r3, 80072a8 <_dtoa_r+0x2c0>)
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	f7f9 fa77 	bl	8000608 <__aeabi_dmul>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4620      	mov	r0, r4
 8007120:	4629      	mov	r1, r5
 8007122:	f7f9 f8bb 	bl	800029c <__adddf3>
 8007126:	4604      	mov	r4, r0
 8007128:	460d      	mov	r5, r1
 800712a:	f7f9 fd1d 	bl	8000b68 <__aeabi_d2iz>
 800712e:	2200      	movs	r2, #0
 8007130:	4607      	mov	r7, r0
 8007132:	2300      	movs	r3, #0
 8007134:	4620      	mov	r0, r4
 8007136:	4629      	mov	r1, r5
 8007138:	f7f9 fcd8 	bl	8000aec <__aeabi_dcmplt>
 800713c:	b140      	cbz	r0, 8007150 <_dtoa_r+0x168>
 800713e:	4638      	mov	r0, r7
 8007140:	f7f9 f9f8 	bl	8000534 <__aeabi_i2d>
 8007144:	4622      	mov	r2, r4
 8007146:	462b      	mov	r3, r5
 8007148:	f7f9 fcc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800714c:	b900      	cbnz	r0, 8007150 <_dtoa_r+0x168>
 800714e:	3f01      	subs	r7, #1
 8007150:	2f16      	cmp	r7, #22
 8007152:	d851      	bhi.n	80071f8 <_dtoa_r+0x210>
 8007154:	4b5b      	ldr	r3, [pc, #364]	@ (80072c4 <_dtoa_r+0x2dc>)
 8007156:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007162:	f7f9 fcc3 	bl	8000aec <__aeabi_dcmplt>
 8007166:	2800      	cmp	r0, #0
 8007168:	d048      	beq.n	80071fc <_dtoa_r+0x214>
 800716a:	3f01      	subs	r7, #1
 800716c:	2300      	movs	r3, #0
 800716e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007170:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007172:	1b9b      	subs	r3, r3, r6
 8007174:	1e5a      	subs	r2, r3, #1
 8007176:	bf44      	itt	mi
 8007178:	f1c3 0801 	rsbmi	r8, r3, #1
 800717c:	2300      	movmi	r3, #0
 800717e:	9208      	str	r2, [sp, #32]
 8007180:	bf54      	ite	pl
 8007182:	f04f 0800 	movpl.w	r8, #0
 8007186:	9308      	strmi	r3, [sp, #32]
 8007188:	2f00      	cmp	r7, #0
 800718a:	db39      	blt.n	8007200 <_dtoa_r+0x218>
 800718c:	9b08      	ldr	r3, [sp, #32]
 800718e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007190:	443b      	add	r3, r7
 8007192:	9308      	str	r3, [sp, #32]
 8007194:	2300      	movs	r3, #0
 8007196:	930a      	str	r3, [sp, #40]	@ 0x28
 8007198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719a:	2b09      	cmp	r3, #9
 800719c:	d864      	bhi.n	8007268 <_dtoa_r+0x280>
 800719e:	2b05      	cmp	r3, #5
 80071a0:	bfc4      	itt	gt
 80071a2:	3b04      	subgt	r3, #4
 80071a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80071a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a8:	f1a3 0302 	sub.w	r3, r3, #2
 80071ac:	bfcc      	ite	gt
 80071ae:	2400      	movgt	r4, #0
 80071b0:	2401      	movle	r4, #1
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d863      	bhi.n	800727e <_dtoa_r+0x296>
 80071b6:	e8df f003 	tbb	[pc, r3]
 80071ba:	372a      	.short	0x372a
 80071bc:	5535      	.short	0x5535
 80071be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80071c2:	441e      	add	r6, r3
 80071c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80071c8:	2b20      	cmp	r3, #32
 80071ca:	bfc1      	itttt	gt
 80071cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80071d0:	409f      	lslgt	r7, r3
 80071d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80071d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80071da:	bfd6      	itet	le
 80071dc:	f1c3 0320 	rsble	r3, r3, #32
 80071e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80071e4:	fa04 f003 	lslle.w	r0, r4, r3
 80071e8:	f7f9 f994 	bl	8000514 <__aeabi_ui2d>
 80071ec:	2201      	movs	r2, #1
 80071ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071f2:	3e01      	subs	r6, #1
 80071f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80071f6:	e777      	b.n	80070e8 <_dtoa_r+0x100>
 80071f8:	2301      	movs	r3, #1
 80071fa:	e7b8      	b.n	800716e <_dtoa_r+0x186>
 80071fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80071fe:	e7b7      	b.n	8007170 <_dtoa_r+0x188>
 8007200:	427b      	negs	r3, r7
 8007202:	930a      	str	r3, [sp, #40]	@ 0x28
 8007204:	2300      	movs	r3, #0
 8007206:	eba8 0807 	sub.w	r8, r8, r7
 800720a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800720c:	e7c4      	b.n	8007198 <_dtoa_r+0x1b0>
 800720e:	2300      	movs	r3, #0
 8007210:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007214:	2b00      	cmp	r3, #0
 8007216:	dc35      	bgt.n	8007284 <_dtoa_r+0x29c>
 8007218:	2301      	movs	r3, #1
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	9307      	str	r3, [sp, #28]
 800721e:	461a      	mov	r2, r3
 8007220:	920e      	str	r2, [sp, #56]	@ 0x38
 8007222:	e00b      	b.n	800723c <_dtoa_r+0x254>
 8007224:	2301      	movs	r3, #1
 8007226:	e7f3      	b.n	8007210 <_dtoa_r+0x228>
 8007228:	2300      	movs	r3, #0
 800722a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800722c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800722e:	18fb      	adds	r3, r7, r3
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	3301      	adds	r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	9307      	str	r3, [sp, #28]
 8007238:	bfb8      	it	lt
 800723a:	2301      	movlt	r3, #1
 800723c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007240:	2100      	movs	r1, #0
 8007242:	2204      	movs	r2, #4
 8007244:	f102 0514 	add.w	r5, r2, #20
 8007248:	429d      	cmp	r5, r3
 800724a:	d91f      	bls.n	800728c <_dtoa_r+0x2a4>
 800724c:	6041      	str	r1, [r0, #4]
 800724e:	4658      	mov	r0, fp
 8007250:	f000 fd8e 	bl	8007d70 <_Balloc>
 8007254:	4682      	mov	sl, r0
 8007256:	2800      	cmp	r0, #0
 8007258:	d13c      	bne.n	80072d4 <_dtoa_r+0x2ec>
 800725a:	4b1b      	ldr	r3, [pc, #108]	@ (80072c8 <_dtoa_r+0x2e0>)
 800725c:	4602      	mov	r2, r0
 800725e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007262:	e6d8      	b.n	8007016 <_dtoa_r+0x2e>
 8007264:	2301      	movs	r3, #1
 8007266:	e7e0      	b.n	800722a <_dtoa_r+0x242>
 8007268:	2401      	movs	r4, #1
 800726a:	2300      	movs	r3, #0
 800726c:	9309      	str	r3, [sp, #36]	@ 0x24
 800726e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007270:	f04f 33ff 	mov.w	r3, #4294967295
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	2200      	movs	r2, #0
 800727a:	2312      	movs	r3, #18
 800727c:	e7d0      	b.n	8007220 <_dtoa_r+0x238>
 800727e:	2301      	movs	r3, #1
 8007280:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007282:	e7f5      	b.n	8007270 <_dtoa_r+0x288>
 8007284:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	9307      	str	r3, [sp, #28]
 800728a:	e7d7      	b.n	800723c <_dtoa_r+0x254>
 800728c:	3101      	adds	r1, #1
 800728e:	0052      	lsls	r2, r2, #1
 8007290:	e7d8      	b.n	8007244 <_dtoa_r+0x25c>
 8007292:	bf00      	nop
 8007294:	f3af 8000 	nop.w
 8007298:	636f4361 	.word	0x636f4361
 800729c:	3fd287a7 	.word	0x3fd287a7
 80072a0:	8b60c8b3 	.word	0x8b60c8b3
 80072a4:	3fc68a28 	.word	0x3fc68a28
 80072a8:	509f79fb 	.word	0x509f79fb
 80072ac:	3fd34413 	.word	0x3fd34413
 80072b0:	0800c2fc 	.word	0x0800c2fc
 80072b4:	0800c313 	.word	0x0800c313
 80072b8:	7ff00000 	.word	0x7ff00000
 80072bc:	0800c659 	.word	0x0800c659
 80072c0:	3ff80000 	.word	0x3ff80000
 80072c4:	0800c410 	.word	0x0800c410
 80072c8:	0800c36b 	.word	0x0800c36b
 80072cc:	0800c2f8 	.word	0x0800c2f8
 80072d0:	0800c658 	.word	0x0800c658
 80072d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072d8:	6018      	str	r0, [r3, #0]
 80072da:	9b07      	ldr	r3, [sp, #28]
 80072dc:	2b0e      	cmp	r3, #14
 80072de:	f200 80a4 	bhi.w	800742a <_dtoa_r+0x442>
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	f000 80a1 	beq.w	800742a <_dtoa_r+0x442>
 80072e8:	2f00      	cmp	r7, #0
 80072ea:	dd33      	ble.n	8007354 <_dtoa_r+0x36c>
 80072ec:	4bad      	ldr	r3, [pc, #692]	@ (80075a4 <_dtoa_r+0x5bc>)
 80072ee:	f007 020f 	and.w	r2, r7, #15
 80072f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072f6:	ed93 7b00 	vldr	d7, [r3]
 80072fa:	05f8      	lsls	r0, r7, #23
 80072fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007300:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007304:	d516      	bpl.n	8007334 <_dtoa_r+0x34c>
 8007306:	4ba8      	ldr	r3, [pc, #672]	@ (80075a8 <_dtoa_r+0x5c0>)
 8007308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800730c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007310:	f7f9 faa4 	bl	800085c <__aeabi_ddiv>
 8007314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007318:	f004 040f 	and.w	r4, r4, #15
 800731c:	2603      	movs	r6, #3
 800731e:	4da2      	ldr	r5, [pc, #648]	@ (80075a8 <_dtoa_r+0x5c0>)
 8007320:	b954      	cbnz	r4, 8007338 <_dtoa_r+0x350>
 8007322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800732a:	f7f9 fa97 	bl	800085c <__aeabi_ddiv>
 800732e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007332:	e028      	b.n	8007386 <_dtoa_r+0x39e>
 8007334:	2602      	movs	r6, #2
 8007336:	e7f2      	b.n	800731e <_dtoa_r+0x336>
 8007338:	07e1      	lsls	r1, r4, #31
 800733a:	d508      	bpl.n	800734e <_dtoa_r+0x366>
 800733c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007340:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007344:	f7f9 f960 	bl	8000608 <__aeabi_dmul>
 8007348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800734c:	3601      	adds	r6, #1
 800734e:	1064      	asrs	r4, r4, #1
 8007350:	3508      	adds	r5, #8
 8007352:	e7e5      	b.n	8007320 <_dtoa_r+0x338>
 8007354:	f000 80d2 	beq.w	80074fc <_dtoa_r+0x514>
 8007358:	427c      	negs	r4, r7
 800735a:	4b92      	ldr	r3, [pc, #584]	@ (80075a4 <_dtoa_r+0x5bc>)
 800735c:	4d92      	ldr	r5, [pc, #584]	@ (80075a8 <_dtoa_r+0x5c0>)
 800735e:	f004 020f 	and.w	r2, r4, #15
 8007362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800736e:	f7f9 f94b 	bl	8000608 <__aeabi_dmul>
 8007372:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007376:	1124      	asrs	r4, r4, #4
 8007378:	2300      	movs	r3, #0
 800737a:	2602      	movs	r6, #2
 800737c:	2c00      	cmp	r4, #0
 800737e:	f040 80b2 	bne.w	80074e6 <_dtoa_r+0x4fe>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1d3      	bne.n	800732e <_dtoa_r+0x346>
 8007386:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007388:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80b7 	beq.w	8007500 <_dtoa_r+0x518>
 8007392:	4b86      	ldr	r3, [pc, #536]	@ (80075ac <_dtoa_r+0x5c4>)
 8007394:	2200      	movs	r2, #0
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 fba7 	bl	8000aec <__aeabi_dcmplt>
 800739e:	2800      	cmp	r0, #0
 80073a0:	f000 80ae 	beq.w	8007500 <_dtoa_r+0x518>
 80073a4:	9b07      	ldr	r3, [sp, #28]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 80aa 	beq.w	8007500 <_dtoa_r+0x518>
 80073ac:	9b00      	ldr	r3, [sp, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	dd37      	ble.n	8007422 <_dtoa_r+0x43a>
 80073b2:	1e7b      	subs	r3, r7, #1
 80073b4:	9304      	str	r3, [sp, #16]
 80073b6:	4620      	mov	r0, r4
 80073b8:	4b7d      	ldr	r3, [pc, #500]	@ (80075b0 <_dtoa_r+0x5c8>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	4629      	mov	r1, r5
 80073be:	f7f9 f923 	bl	8000608 <__aeabi_dmul>
 80073c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c6:	9c00      	ldr	r4, [sp, #0]
 80073c8:	3601      	adds	r6, #1
 80073ca:	4630      	mov	r0, r6
 80073cc:	f7f9 f8b2 	bl	8000534 <__aeabi_i2d>
 80073d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073d4:	f7f9 f918 	bl	8000608 <__aeabi_dmul>
 80073d8:	4b76      	ldr	r3, [pc, #472]	@ (80075b4 <_dtoa_r+0x5cc>)
 80073da:	2200      	movs	r2, #0
 80073dc:	f7f8 ff5e 	bl	800029c <__adddf3>
 80073e0:	4605      	mov	r5, r0
 80073e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80073e6:	2c00      	cmp	r4, #0
 80073e8:	f040 808d 	bne.w	8007506 <_dtoa_r+0x51e>
 80073ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073f0:	4b71      	ldr	r3, [pc, #452]	@ (80075b8 <_dtoa_r+0x5d0>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	f7f8 ff50 	bl	8000298 <__aeabi_dsub>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007400:	462a      	mov	r2, r5
 8007402:	4633      	mov	r3, r6
 8007404:	f7f9 fb90 	bl	8000b28 <__aeabi_dcmpgt>
 8007408:	2800      	cmp	r0, #0
 800740a:	f040 828b 	bne.w	8007924 <_dtoa_r+0x93c>
 800740e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007412:	462a      	mov	r2, r5
 8007414:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007418:	f7f9 fb68 	bl	8000aec <__aeabi_dcmplt>
 800741c:	2800      	cmp	r0, #0
 800741e:	f040 8128 	bne.w	8007672 <_dtoa_r+0x68a>
 8007422:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007426:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800742a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800742c:	2b00      	cmp	r3, #0
 800742e:	f2c0 815a 	blt.w	80076e6 <_dtoa_r+0x6fe>
 8007432:	2f0e      	cmp	r7, #14
 8007434:	f300 8157 	bgt.w	80076e6 <_dtoa_r+0x6fe>
 8007438:	4b5a      	ldr	r3, [pc, #360]	@ (80075a4 <_dtoa_r+0x5bc>)
 800743a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800743e:	ed93 7b00 	vldr	d7, [r3]
 8007442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	ed8d 7b00 	vstr	d7, [sp]
 800744a:	da03      	bge.n	8007454 <_dtoa_r+0x46c>
 800744c:	9b07      	ldr	r3, [sp, #28]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f340 8101 	ble.w	8007656 <_dtoa_r+0x66e>
 8007454:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007458:	4656      	mov	r6, sl
 800745a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f9 f9fb 	bl	800085c <__aeabi_ddiv>
 8007466:	f7f9 fb7f 	bl	8000b68 <__aeabi_d2iz>
 800746a:	4680      	mov	r8, r0
 800746c:	f7f9 f862 	bl	8000534 <__aeabi_i2d>
 8007470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007474:	f7f9 f8c8 	bl	8000608 <__aeabi_dmul>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007484:	f7f8 ff08 	bl	8000298 <__aeabi_dsub>
 8007488:	f806 4b01 	strb.w	r4, [r6], #1
 800748c:	9d07      	ldr	r5, [sp, #28]
 800748e:	eba6 040a 	sub.w	r4, r6, sl
 8007492:	42a5      	cmp	r5, r4
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	f040 8117 	bne.w	80076ca <_dtoa_r+0x6e2>
 800749c:	f7f8 fefe 	bl	800029c <__adddf3>
 80074a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074a4:	4604      	mov	r4, r0
 80074a6:	460d      	mov	r5, r1
 80074a8:	f7f9 fb3e 	bl	8000b28 <__aeabi_dcmpgt>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f040 80f9 	bne.w	80076a4 <_dtoa_r+0x6bc>
 80074b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f9 fb0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80074be:	b118      	cbz	r0, 80074c8 <_dtoa_r+0x4e0>
 80074c0:	f018 0f01 	tst.w	r8, #1
 80074c4:	f040 80ee 	bne.w	80076a4 <_dtoa_r+0x6bc>
 80074c8:	4649      	mov	r1, r9
 80074ca:	4658      	mov	r0, fp
 80074cc:	f000 fc90 	bl	8007df0 <_Bfree>
 80074d0:	2300      	movs	r3, #0
 80074d2:	7033      	strb	r3, [r6, #0]
 80074d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074d6:	3701      	adds	r7, #1
 80074d8:	601f      	str	r7, [r3, #0]
 80074da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 831d 	beq.w	8007b1c <_dtoa_r+0xb34>
 80074e2:	601e      	str	r6, [r3, #0]
 80074e4:	e31a      	b.n	8007b1c <_dtoa_r+0xb34>
 80074e6:	07e2      	lsls	r2, r4, #31
 80074e8:	d505      	bpl.n	80074f6 <_dtoa_r+0x50e>
 80074ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074ee:	f7f9 f88b 	bl	8000608 <__aeabi_dmul>
 80074f2:	3601      	adds	r6, #1
 80074f4:	2301      	movs	r3, #1
 80074f6:	1064      	asrs	r4, r4, #1
 80074f8:	3508      	adds	r5, #8
 80074fa:	e73f      	b.n	800737c <_dtoa_r+0x394>
 80074fc:	2602      	movs	r6, #2
 80074fe:	e742      	b.n	8007386 <_dtoa_r+0x39e>
 8007500:	9c07      	ldr	r4, [sp, #28]
 8007502:	9704      	str	r7, [sp, #16]
 8007504:	e761      	b.n	80073ca <_dtoa_r+0x3e2>
 8007506:	4b27      	ldr	r3, [pc, #156]	@ (80075a4 <_dtoa_r+0x5bc>)
 8007508:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800750a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800750e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007512:	4454      	add	r4, sl
 8007514:	2900      	cmp	r1, #0
 8007516:	d053      	beq.n	80075c0 <_dtoa_r+0x5d8>
 8007518:	4928      	ldr	r1, [pc, #160]	@ (80075bc <_dtoa_r+0x5d4>)
 800751a:	2000      	movs	r0, #0
 800751c:	f7f9 f99e 	bl	800085c <__aeabi_ddiv>
 8007520:	4633      	mov	r3, r6
 8007522:	462a      	mov	r2, r5
 8007524:	f7f8 feb8 	bl	8000298 <__aeabi_dsub>
 8007528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800752c:	4656      	mov	r6, sl
 800752e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007532:	f7f9 fb19 	bl	8000b68 <__aeabi_d2iz>
 8007536:	4605      	mov	r5, r0
 8007538:	f7f8 fffc 	bl	8000534 <__aeabi_i2d>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007544:	f7f8 fea8 	bl	8000298 <__aeabi_dsub>
 8007548:	3530      	adds	r5, #48	@ 0x30
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007552:	f806 5b01 	strb.w	r5, [r6], #1
 8007556:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800755a:	f7f9 fac7 	bl	8000aec <__aeabi_dcmplt>
 800755e:	2800      	cmp	r0, #0
 8007560:	d171      	bne.n	8007646 <_dtoa_r+0x65e>
 8007562:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007566:	4911      	ldr	r1, [pc, #68]	@ (80075ac <_dtoa_r+0x5c4>)
 8007568:	2000      	movs	r0, #0
 800756a:	f7f8 fe95 	bl	8000298 <__aeabi_dsub>
 800756e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007572:	f7f9 fabb 	bl	8000aec <__aeabi_dcmplt>
 8007576:	2800      	cmp	r0, #0
 8007578:	f040 8095 	bne.w	80076a6 <_dtoa_r+0x6be>
 800757c:	42a6      	cmp	r6, r4
 800757e:	f43f af50 	beq.w	8007422 <_dtoa_r+0x43a>
 8007582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007586:	4b0a      	ldr	r3, [pc, #40]	@ (80075b0 <_dtoa_r+0x5c8>)
 8007588:	2200      	movs	r2, #0
 800758a:	f7f9 f83d 	bl	8000608 <__aeabi_dmul>
 800758e:	4b08      	ldr	r3, [pc, #32]	@ (80075b0 <_dtoa_r+0x5c8>)
 8007590:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007594:	2200      	movs	r2, #0
 8007596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800759a:	f7f9 f835 	bl	8000608 <__aeabi_dmul>
 800759e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075a2:	e7c4      	b.n	800752e <_dtoa_r+0x546>
 80075a4:	0800c410 	.word	0x0800c410
 80075a8:	0800c3e8 	.word	0x0800c3e8
 80075ac:	3ff00000 	.word	0x3ff00000
 80075b0:	40240000 	.word	0x40240000
 80075b4:	401c0000 	.word	0x401c0000
 80075b8:	40140000 	.word	0x40140000
 80075bc:	3fe00000 	.word	0x3fe00000
 80075c0:	4631      	mov	r1, r6
 80075c2:	4628      	mov	r0, r5
 80075c4:	f7f9 f820 	bl	8000608 <__aeabi_dmul>
 80075c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075cc:	9415      	str	r4, [sp, #84]	@ 0x54
 80075ce:	4656      	mov	r6, sl
 80075d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d4:	f7f9 fac8 	bl	8000b68 <__aeabi_d2iz>
 80075d8:	4605      	mov	r5, r0
 80075da:	f7f8 ffab 	bl	8000534 <__aeabi_i2d>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e6:	f7f8 fe57 	bl	8000298 <__aeabi_dsub>
 80075ea:	3530      	adds	r5, #48	@ 0x30
 80075ec:	f806 5b01 	strb.w	r5, [r6], #1
 80075f0:	4602      	mov	r2, r0
 80075f2:	460b      	mov	r3, r1
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075fa:	f04f 0200 	mov.w	r2, #0
 80075fe:	d124      	bne.n	800764a <_dtoa_r+0x662>
 8007600:	4bac      	ldr	r3, [pc, #688]	@ (80078b4 <_dtoa_r+0x8cc>)
 8007602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007606:	f7f8 fe49 	bl	800029c <__adddf3>
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007612:	f7f9 fa89 	bl	8000b28 <__aeabi_dcmpgt>
 8007616:	2800      	cmp	r0, #0
 8007618:	d145      	bne.n	80076a6 <_dtoa_r+0x6be>
 800761a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800761e:	49a5      	ldr	r1, [pc, #660]	@ (80078b4 <_dtoa_r+0x8cc>)
 8007620:	2000      	movs	r0, #0
 8007622:	f7f8 fe39 	bl	8000298 <__aeabi_dsub>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762e:	f7f9 fa5d 	bl	8000aec <__aeabi_dcmplt>
 8007632:	2800      	cmp	r0, #0
 8007634:	f43f aef5 	beq.w	8007422 <_dtoa_r+0x43a>
 8007638:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800763a:	1e73      	subs	r3, r6, #1
 800763c:	9315      	str	r3, [sp, #84]	@ 0x54
 800763e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007642:	2b30      	cmp	r3, #48	@ 0x30
 8007644:	d0f8      	beq.n	8007638 <_dtoa_r+0x650>
 8007646:	9f04      	ldr	r7, [sp, #16]
 8007648:	e73e      	b.n	80074c8 <_dtoa_r+0x4e0>
 800764a:	4b9b      	ldr	r3, [pc, #620]	@ (80078b8 <_dtoa_r+0x8d0>)
 800764c:	f7f8 ffdc 	bl	8000608 <__aeabi_dmul>
 8007650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007654:	e7bc      	b.n	80075d0 <_dtoa_r+0x5e8>
 8007656:	d10c      	bne.n	8007672 <_dtoa_r+0x68a>
 8007658:	4b98      	ldr	r3, [pc, #608]	@ (80078bc <_dtoa_r+0x8d4>)
 800765a:	2200      	movs	r2, #0
 800765c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007660:	f7f8 ffd2 	bl	8000608 <__aeabi_dmul>
 8007664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007668:	f7f9 fa54 	bl	8000b14 <__aeabi_dcmpge>
 800766c:	2800      	cmp	r0, #0
 800766e:	f000 8157 	beq.w	8007920 <_dtoa_r+0x938>
 8007672:	2400      	movs	r4, #0
 8007674:	4625      	mov	r5, r4
 8007676:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007678:	43db      	mvns	r3, r3
 800767a:	9304      	str	r3, [sp, #16]
 800767c:	4656      	mov	r6, sl
 800767e:	2700      	movs	r7, #0
 8007680:	4621      	mov	r1, r4
 8007682:	4658      	mov	r0, fp
 8007684:	f000 fbb4 	bl	8007df0 <_Bfree>
 8007688:	2d00      	cmp	r5, #0
 800768a:	d0dc      	beq.n	8007646 <_dtoa_r+0x65e>
 800768c:	b12f      	cbz	r7, 800769a <_dtoa_r+0x6b2>
 800768e:	42af      	cmp	r7, r5
 8007690:	d003      	beq.n	800769a <_dtoa_r+0x6b2>
 8007692:	4639      	mov	r1, r7
 8007694:	4658      	mov	r0, fp
 8007696:	f000 fbab 	bl	8007df0 <_Bfree>
 800769a:	4629      	mov	r1, r5
 800769c:	4658      	mov	r0, fp
 800769e:	f000 fba7 	bl	8007df0 <_Bfree>
 80076a2:	e7d0      	b.n	8007646 <_dtoa_r+0x65e>
 80076a4:	9704      	str	r7, [sp, #16]
 80076a6:	4633      	mov	r3, r6
 80076a8:	461e      	mov	r6, r3
 80076aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ae:	2a39      	cmp	r2, #57	@ 0x39
 80076b0:	d107      	bne.n	80076c2 <_dtoa_r+0x6da>
 80076b2:	459a      	cmp	sl, r3
 80076b4:	d1f8      	bne.n	80076a8 <_dtoa_r+0x6c0>
 80076b6:	9a04      	ldr	r2, [sp, #16]
 80076b8:	3201      	adds	r2, #1
 80076ba:	9204      	str	r2, [sp, #16]
 80076bc:	2230      	movs	r2, #48	@ 0x30
 80076be:	f88a 2000 	strb.w	r2, [sl]
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	3201      	adds	r2, #1
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	e7bd      	b.n	8007646 <_dtoa_r+0x65e>
 80076ca:	4b7b      	ldr	r3, [pc, #492]	@ (80078b8 <_dtoa_r+0x8d0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	f7f8 ff9b 	bl	8000608 <__aeabi_dmul>
 80076d2:	2200      	movs	r2, #0
 80076d4:	2300      	movs	r3, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	460d      	mov	r5, r1
 80076da:	f7f9 f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80076de:	2800      	cmp	r0, #0
 80076e0:	f43f aebb 	beq.w	800745a <_dtoa_r+0x472>
 80076e4:	e6f0      	b.n	80074c8 <_dtoa_r+0x4e0>
 80076e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	f000 80db 	beq.w	80078a4 <_dtoa_r+0x8bc>
 80076ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076f0:	2a01      	cmp	r2, #1
 80076f2:	f300 80bf 	bgt.w	8007874 <_dtoa_r+0x88c>
 80076f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80076f8:	2a00      	cmp	r2, #0
 80076fa:	f000 80b7 	beq.w	800786c <_dtoa_r+0x884>
 80076fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007702:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007704:	4646      	mov	r6, r8
 8007706:	9a08      	ldr	r2, [sp, #32]
 8007708:	2101      	movs	r1, #1
 800770a:	441a      	add	r2, r3
 800770c:	4658      	mov	r0, fp
 800770e:	4498      	add	r8, r3
 8007710:	9208      	str	r2, [sp, #32]
 8007712:	f000 fc6b 	bl	8007fec <__i2b>
 8007716:	4605      	mov	r5, r0
 8007718:	b15e      	cbz	r6, 8007732 <_dtoa_r+0x74a>
 800771a:	9b08      	ldr	r3, [sp, #32]
 800771c:	2b00      	cmp	r3, #0
 800771e:	dd08      	ble.n	8007732 <_dtoa_r+0x74a>
 8007720:	42b3      	cmp	r3, r6
 8007722:	9a08      	ldr	r2, [sp, #32]
 8007724:	bfa8      	it	ge
 8007726:	4633      	movge	r3, r6
 8007728:	eba8 0803 	sub.w	r8, r8, r3
 800772c:	1af6      	subs	r6, r6, r3
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	9308      	str	r3, [sp, #32]
 8007732:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007734:	b1f3      	cbz	r3, 8007774 <_dtoa_r+0x78c>
 8007736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 80b7 	beq.w	80078ac <_dtoa_r+0x8c4>
 800773e:	b18c      	cbz	r4, 8007764 <_dtoa_r+0x77c>
 8007740:	4629      	mov	r1, r5
 8007742:	4622      	mov	r2, r4
 8007744:	4658      	mov	r0, fp
 8007746:	f000 fd11 	bl	800816c <__pow5mult>
 800774a:	464a      	mov	r2, r9
 800774c:	4601      	mov	r1, r0
 800774e:	4605      	mov	r5, r0
 8007750:	4658      	mov	r0, fp
 8007752:	f000 fc61 	bl	8008018 <__multiply>
 8007756:	4649      	mov	r1, r9
 8007758:	9004      	str	r0, [sp, #16]
 800775a:	4658      	mov	r0, fp
 800775c:	f000 fb48 	bl	8007df0 <_Bfree>
 8007760:	9b04      	ldr	r3, [sp, #16]
 8007762:	4699      	mov	r9, r3
 8007764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007766:	1b1a      	subs	r2, r3, r4
 8007768:	d004      	beq.n	8007774 <_dtoa_r+0x78c>
 800776a:	4649      	mov	r1, r9
 800776c:	4658      	mov	r0, fp
 800776e:	f000 fcfd 	bl	800816c <__pow5mult>
 8007772:	4681      	mov	r9, r0
 8007774:	2101      	movs	r1, #1
 8007776:	4658      	mov	r0, fp
 8007778:	f000 fc38 	bl	8007fec <__i2b>
 800777c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800777e:	4604      	mov	r4, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 81cf 	beq.w	8007b24 <_dtoa_r+0xb3c>
 8007786:	461a      	mov	r2, r3
 8007788:	4601      	mov	r1, r0
 800778a:	4658      	mov	r0, fp
 800778c:	f000 fcee 	bl	800816c <__pow5mult>
 8007790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007792:	2b01      	cmp	r3, #1
 8007794:	4604      	mov	r4, r0
 8007796:	f300 8095 	bgt.w	80078c4 <_dtoa_r+0x8dc>
 800779a:	9b02      	ldr	r3, [sp, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 8087 	bne.w	80078b0 <_dtoa_r+0x8c8>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f040 8089 	bne.w	80078c0 <_dtoa_r+0x8d8>
 80077ae:	9b03      	ldr	r3, [sp, #12]
 80077b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077b4:	0d1b      	lsrs	r3, r3, #20
 80077b6:	051b      	lsls	r3, r3, #20
 80077b8:	b12b      	cbz	r3, 80077c6 <_dtoa_r+0x7de>
 80077ba:	9b08      	ldr	r3, [sp, #32]
 80077bc:	3301      	adds	r3, #1
 80077be:	9308      	str	r3, [sp, #32]
 80077c0:	f108 0801 	add.w	r8, r8, #1
 80077c4:	2301      	movs	r3, #1
 80077c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 81b0 	beq.w	8007b30 <_dtoa_r+0xb48>
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077d6:	6918      	ldr	r0, [r3, #16]
 80077d8:	f000 fbbc 	bl	8007f54 <__hi0bits>
 80077dc:	f1c0 0020 	rsb	r0, r0, #32
 80077e0:	9b08      	ldr	r3, [sp, #32]
 80077e2:	4418      	add	r0, r3
 80077e4:	f010 001f 	ands.w	r0, r0, #31
 80077e8:	d077      	beq.n	80078da <_dtoa_r+0x8f2>
 80077ea:	f1c0 0320 	rsb	r3, r0, #32
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	dd6b      	ble.n	80078ca <_dtoa_r+0x8e2>
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	f1c0 001c 	rsb	r0, r0, #28
 80077f8:	4403      	add	r3, r0
 80077fa:	4480      	add	r8, r0
 80077fc:	4406      	add	r6, r0
 80077fe:	9308      	str	r3, [sp, #32]
 8007800:	f1b8 0f00 	cmp.w	r8, #0
 8007804:	dd05      	ble.n	8007812 <_dtoa_r+0x82a>
 8007806:	4649      	mov	r1, r9
 8007808:	4642      	mov	r2, r8
 800780a:	4658      	mov	r0, fp
 800780c:	f000 fd08 	bl	8008220 <__lshift>
 8007810:	4681      	mov	r9, r0
 8007812:	9b08      	ldr	r3, [sp, #32]
 8007814:	2b00      	cmp	r3, #0
 8007816:	dd05      	ble.n	8007824 <_dtoa_r+0x83c>
 8007818:	4621      	mov	r1, r4
 800781a:	461a      	mov	r2, r3
 800781c:	4658      	mov	r0, fp
 800781e:	f000 fcff 	bl	8008220 <__lshift>
 8007822:	4604      	mov	r4, r0
 8007824:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007826:	2b00      	cmp	r3, #0
 8007828:	d059      	beq.n	80078de <_dtoa_r+0x8f6>
 800782a:	4621      	mov	r1, r4
 800782c:	4648      	mov	r0, r9
 800782e:	f000 fd63 	bl	80082f8 <__mcmp>
 8007832:	2800      	cmp	r0, #0
 8007834:	da53      	bge.n	80078de <_dtoa_r+0x8f6>
 8007836:	1e7b      	subs	r3, r7, #1
 8007838:	9304      	str	r3, [sp, #16]
 800783a:	4649      	mov	r1, r9
 800783c:	2300      	movs	r3, #0
 800783e:	220a      	movs	r2, #10
 8007840:	4658      	mov	r0, fp
 8007842:	f000 faf7 	bl	8007e34 <__multadd>
 8007846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007848:	4681      	mov	r9, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8172 	beq.w	8007b34 <_dtoa_r+0xb4c>
 8007850:	2300      	movs	r3, #0
 8007852:	4629      	mov	r1, r5
 8007854:	220a      	movs	r2, #10
 8007856:	4658      	mov	r0, fp
 8007858:	f000 faec 	bl	8007e34 <__multadd>
 800785c:	9b00      	ldr	r3, [sp, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	4605      	mov	r5, r0
 8007862:	dc67      	bgt.n	8007934 <_dtoa_r+0x94c>
 8007864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007866:	2b02      	cmp	r3, #2
 8007868:	dc41      	bgt.n	80078ee <_dtoa_r+0x906>
 800786a:	e063      	b.n	8007934 <_dtoa_r+0x94c>
 800786c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800786e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007872:	e746      	b.n	8007702 <_dtoa_r+0x71a>
 8007874:	9b07      	ldr	r3, [sp, #28]
 8007876:	1e5c      	subs	r4, r3, #1
 8007878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800787a:	42a3      	cmp	r3, r4
 800787c:	bfbf      	itttt	lt
 800787e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007880:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007882:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007884:	1ae3      	sublt	r3, r4, r3
 8007886:	bfb4      	ite	lt
 8007888:	18d2      	addlt	r2, r2, r3
 800788a:	1b1c      	subge	r4, r3, r4
 800788c:	9b07      	ldr	r3, [sp, #28]
 800788e:	bfbc      	itt	lt
 8007890:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007892:	2400      	movlt	r4, #0
 8007894:	2b00      	cmp	r3, #0
 8007896:	bfb5      	itete	lt
 8007898:	eba8 0603 	sublt.w	r6, r8, r3
 800789c:	9b07      	ldrge	r3, [sp, #28]
 800789e:	2300      	movlt	r3, #0
 80078a0:	4646      	movge	r6, r8
 80078a2:	e730      	b.n	8007706 <_dtoa_r+0x71e>
 80078a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80078a8:	4646      	mov	r6, r8
 80078aa:	e735      	b.n	8007718 <_dtoa_r+0x730>
 80078ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078ae:	e75c      	b.n	800776a <_dtoa_r+0x782>
 80078b0:	2300      	movs	r3, #0
 80078b2:	e788      	b.n	80077c6 <_dtoa_r+0x7de>
 80078b4:	3fe00000 	.word	0x3fe00000
 80078b8:	40240000 	.word	0x40240000
 80078bc:	40140000 	.word	0x40140000
 80078c0:	9b02      	ldr	r3, [sp, #8]
 80078c2:	e780      	b.n	80077c6 <_dtoa_r+0x7de>
 80078c4:	2300      	movs	r3, #0
 80078c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c8:	e782      	b.n	80077d0 <_dtoa_r+0x7e8>
 80078ca:	d099      	beq.n	8007800 <_dtoa_r+0x818>
 80078cc:	9a08      	ldr	r2, [sp, #32]
 80078ce:	331c      	adds	r3, #28
 80078d0:	441a      	add	r2, r3
 80078d2:	4498      	add	r8, r3
 80078d4:	441e      	add	r6, r3
 80078d6:	9208      	str	r2, [sp, #32]
 80078d8:	e792      	b.n	8007800 <_dtoa_r+0x818>
 80078da:	4603      	mov	r3, r0
 80078dc:	e7f6      	b.n	80078cc <_dtoa_r+0x8e4>
 80078de:	9b07      	ldr	r3, [sp, #28]
 80078e0:	9704      	str	r7, [sp, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	dc20      	bgt.n	8007928 <_dtoa_r+0x940>
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	dd1e      	ble.n	800792c <_dtoa_r+0x944>
 80078ee:	9b00      	ldr	r3, [sp, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f47f aec0 	bne.w	8007676 <_dtoa_r+0x68e>
 80078f6:	4621      	mov	r1, r4
 80078f8:	2205      	movs	r2, #5
 80078fa:	4658      	mov	r0, fp
 80078fc:	f000 fa9a 	bl	8007e34 <__multadd>
 8007900:	4601      	mov	r1, r0
 8007902:	4604      	mov	r4, r0
 8007904:	4648      	mov	r0, r9
 8007906:	f000 fcf7 	bl	80082f8 <__mcmp>
 800790a:	2800      	cmp	r0, #0
 800790c:	f77f aeb3 	ble.w	8007676 <_dtoa_r+0x68e>
 8007910:	4656      	mov	r6, sl
 8007912:	2331      	movs	r3, #49	@ 0x31
 8007914:	f806 3b01 	strb.w	r3, [r6], #1
 8007918:	9b04      	ldr	r3, [sp, #16]
 800791a:	3301      	adds	r3, #1
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	e6ae      	b.n	800767e <_dtoa_r+0x696>
 8007920:	9c07      	ldr	r4, [sp, #28]
 8007922:	9704      	str	r7, [sp, #16]
 8007924:	4625      	mov	r5, r4
 8007926:	e7f3      	b.n	8007910 <_dtoa_r+0x928>
 8007928:	9b07      	ldr	r3, [sp, #28]
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8104 	beq.w	8007b3c <_dtoa_r+0xb54>
 8007934:	2e00      	cmp	r6, #0
 8007936:	dd05      	ble.n	8007944 <_dtoa_r+0x95c>
 8007938:	4629      	mov	r1, r5
 800793a:	4632      	mov	r2, r6
 800793c:	4658      	mov	r0, fp
 800793e:	f000 fc6f 	bl	8008220 <__lshift>
 8007942:	4605      	mov	r5, r0
 8007944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d05a      	beq.n	8007a00 <_dtoa_r+0xa18>
 800794a:	6869      	ldr	r1, [r5, #4]
 800794c:	4658      	mov	r0, fp
 800794e:	f000 fa0f 	bl	8007d70 <_Balloc>
 8007952:	4606      	mov	r6, r0
 8007954:	b928      	cbnz	r0, 8007962 <_dtoa_r+0x97a>
 8007956:	4b84      	ldr	r3, [pc, #528]	@ (8007b68 <_dtoa_r+0xb80>)
 8007958:	4602      	mov	r2, r0
 800795a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800795e:	f7ff bb5a 	b.w	8007016 <_dtoa_r+0x2e>
 8007962:	692a      	ldr	r2, [r5, #16]
 8007964:	3202      	adds	r2, #2
 8007966:	0092      	lsls	r2, r2, #2
 8007968:	f105 010c 	add.w	r1, r5, #12
 800796c:	300c      	adds	r0, #12
 800796e:	f002 faf1 	bl	8009f54 <memcpy>
 8007972:	2201      	movs	r2, #1
 8007974:	4631      	mov	r1, r6
 8007976:	4658      	mov	r0, fp
 8007978:	f000 fc52 	bl	8008220 <__lshift>
 800797c:	f10a 0301 	add.w	r3, sl, #1
 8007980:	9307      	str	r3, [sp, #28]
 8007982:	9b00      	ldr	r3, [sp, #0]
 8007984:	4453      	add	r3, sl
 8007986:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007988:	9b02      	ldr	r3, [sp, #8]
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	462f      	mov	r7, r5
 8007990:	930a      	str	r3, [sp, #40]	@ 0x28
 8007992:	4605      	mov	r5, r0
 8007994:	9b07      	ldr	r3, [sp, #28]
 8007996:	4621      	mov	r1, r4
 8007998:	3b01      	subs	r3, #1
 800799a:	4648      	mov	r0, r9
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	f7ff fa9b 	bl	8006ed8 <quorem>
 80079a2:	4639      	mov	r1, r7
 80079a4:	9002      	str	r0, [sp, #8]
 80079a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079aa:	4648      	mov	r0, r9
 80079ac:	f000 fca4 	bl	80082f8 <__mcmp>
 80079b0:	462a      	mov	r2, r5
 80079b2:	9008      	str	r0, [sp, #32]
 80079b4:	4621      	mov	r1, r4
 80079b6:	4658      	mov	r0, fp
 80079b8:	f000 fcba 	bl	8008330 <__mdiff>
 80079bc:	68c2      	ldr	r2, [r0, #12]
 80079be:	4606      	mov	r6, r0
 80079c0:	bb02      	cbnz	r2, 8007a04 <_dtoa_r+0xa1c>
 80079c2:	4601      	mov	r1, r0
 80079c4:	4648      	mov	r0, r9
 80079c6:	f000 fc97 	bl	80082f8 <__mcmp>
 80079ca:	4602      	mov	r2, r0
 80079cc:	4631      	mov	r1, r6
 80079ce:	4658      	mov	r0, fp
 80079d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80079d2:	f000 fa0d 	bl	8007df0 <_Bfree>
 80079d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079da:	9e07      	ldr	r6, [sp, #28]
 80079dc:	ea43 0102 	orr.w	r1, r3, r2
 80079e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079e2:	4319      	orrs	r1, r3
 80079e4:	d110      	bne.n	8007a08 <_dtoa_r+0xa20>
 80079e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079ea:	d029      	beq.n	8007a40 <_dtoa_r+0xa58>
 80079ec:	9b08      	ldr	r3, [sp, #32]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dd02      	ble.n	80079f8 <_dtoa_r+0xa10>
 80079f2:	9b02      	ldr	r3, [sp, #8]
 80079f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80079f8:	9b00      	ldr	r3, [sp, #0]
 80079fa:	f883 8000 	strb.w	r8, [r3]
 80079fe:	e63f      	b.n	8007680 <_dtoa_r+0x698>
 8007a00:	4628      	mov	r0, r5
 8007a02:	e7bb      	b.n	800797c <_dtoa_r+0x994>
 8007a04:	2201      	movs	r2, #1
 8007a06:	e7e1      	b.n	80079cc <_dtoa_r+0x9e4>
 8007a08:	9b08      	ldr	r3, [sp, #32]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	db04      	blt.n	8007a18 <_dtoa_r+0xa30>
 8007a0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a10:	430b      	orrs	r3, r1
 8007a12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a14:	430b      	orrs	r3, r1
 8007a16:	d120      	bne.n	8007a5a <_dtoa_r+0xa72>
 8007a18:	2a00      	cmp	r2, #0
 8007a1a:	dded      	ble.n	80079f8 <_dtoa_r+0xa10>
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	2201      	movs	r2, #1
 8007a20:	4658      	mov	r0, fp
 8007a22:	f000 fbfd 	bl	8008220 <__lshift>
 8007a26:	4621      	mov	r1, r4
 8007a28:	4681      	mov	r9, r0
 8007a2a:	f000 fc65 	bl	80082f8 <__mcmp>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	dc03      	bgt.n	8007a3a <_dtoa_r+0xa52>
 8007a32:	d1e1      	bne.n	80079f8 <_dtoa_r+0xa10>
 8007a34:	f018 0f01 	tst.w	r8, #1
 8007a38:	d0de      	beq.n	80079f8 <_dtoa_r+0xa10>
 8007a3a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a3e:	d1d8      	bne.n	80079f2 <_dtoa_r+0xa0a>
 8007a40:	9a00      	ldr	r2, [sp, #0]
 8007a42:	2339      	movs	r3, #57	@ 0x39
 8007a44:	7013      	strb	r3, [r2, #0]
 8007a46:	4633      	mov	r3, r6
 8007a48:	461e      	mov	r6, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a50:	2a39      	cmp	r2, #57	@ 0x39
 8007a52:	d052      	beq.n	8007afa <_dtoa_r+0xb12>
 8007a54:	3201      	adds	r2, #1
 8007a56:	701a      	strb	r2, [r3, #0]
 8007a58:	e612      	b.n	8007680 <_dtoa_r+0x698>
 8007a5a:	2a00      	cmp	r2, #0
 8007a5c:	dd07      	ble.n	8007a6e <_dtoa_r+0xa86>
 8007a5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a62:	d0ed      	beq.n	8007a40 <_dtoa_r+0xa58>
 8007a64:	9a00      	ldr	r2, [sp, #0]
 8007a66:	f108 0301 	add.w	r3, r8, #1
 8007a6a:	7013      	strb	r3, [r2, #0]
 8007a6c:	e608      	b.n	8007680 <_dtoa_r+0x698>
 8007a6e:	9b07      	ldr	r3, [sp, #28]
 8007a70:	9a07      	ldr	r2, [sp, #28]
 8007a72:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d028      	beq.n	8007ace <_dtoa_r+0xae6>
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	2300      	movs	r3, #0
 8007a80:	220a      	movs	r2, #10
 8007a82:	4658      	mov	r0, fp
 8007a84:	f000 f9d6 	bl	8007e34 <__multadd>
 8007a88:	42af      	cmp	r7, r5
 8007a8a:	4681      	mov	r9, r0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	f04f 020a 	mov.w	r2, #10
 8007a94:	4639      	mov	r1, r7
 8007a96:	4658      	mov	r0, fp
 8007a98:	d107      	bne.n	8007aaa <_dtoa_r+0xac2>
 8007a9a:	f000 f9cb 	bl	8007e34 <__multadd>
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	9b07      	ldr	r3, [sp, #28]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	9307      	str	r3, [sp, #28]
 8007aa8:	e774      	b.n	8007994 <_dtoa_r+0x9ac>
 8007aaa:	f000 f9c3 	bl	8007e34 <__multadd>
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	220a      	movs	r2, #10
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	f000 f9bc 	bl	8007e34 <__multadd>
 8007abc:	4605      	mov	r5, r0
 8007abe:	e7f0      	b.n	8007aa2 <_dtoa_r+0xaba>
 8007ac0:	9b00      	ldr	r3, [sp, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bfcc      	ite	gt
 8007ac6:	461e      	movgt	r6, r3
 8007ac8:	2601      	movle	r6, #1
 8007aca:	4456      	add	r6, sl
 8007acc:	2700      	movs	r7, #0
 8007ace:	4649      	mov	r1, r9
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	4658      	mov	r0, fp
 8007ad4:	f000 fba4 	bl	8008220 <__lshift>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4681      	mov	r9, r0
 8007adc:	f000 fc0c 	bl	80082f8 <__mcmp>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	dcb0      	bgt.n	8007a46 <_dtoa_r+0xa5e>
 8007ae4:	d102      	bne.n	8007aec <_dtoa_r+0xb04>
 8007ae6:	f018 0f01 	tst.w	r8, #1
 8007aea:	d1ac      	bne.n	8007a46 <_dtoa_r+0xa5e>
 8007aec:	4633      	mov	r3, r6
 8007aee:	461e      	mov	r6, r3
 8007af0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007af4:	2a30      	cmp	r2, #48	@ 0x30
 8007af6:	d0fa      	beq.n	8007aee <_dtoa_r+0xb06>
 8007af8:	e5c2      	b.n	8007680 <_dtoa_r+0x698>
 8007afa:	459a      	cmp	sl, r3
 8007afc:	d1a4      	bne.n	8007a48 <_dtoa_r+0xa60>
 8007afe:	9b04      	ldr	r3, [sp, #16]
 8007b00:	3301      	adds	r3, #1
 8007b02:	9304      	str	r3, [sp, #16]
 8007b04:	2331      	movs	r3, #49	@ 0x31
 8007b06:	f88a 3000 	strb.w	r3, [sl]
 8007b0a:	e5b9      	b.n	8007680 <_dtoa_r+0x698>
 8007b0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b6c <_dtoa_r+0xb84>
 8007b12:	b11b      	cbz	r3, 8007b1c <_dtoa_r+0xb34>
 8007b14:	f10a 0308 	add.w	r3, sl, #8
 8007b18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	4650      	mov	r0, sl
 8007b1e:	b019      	add	sp, #100	@ 0x64
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	f77f ae37 	ble.w	800779a <_dtoa_r+0x7b2>
 8007b2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b30:	2001      	movs	r0, #1
 8007b32:	e655      	b.n	80077e0 <_dtoa_r+0x7f8>
 8007b34:	9b00      	ldr	r3, [sp, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f77f aed6 	ble.w	80078e8 <_dtoa_r+0x900>
 8007b3c:	4656      	mov	r6, sl
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4648      	mov	r0, r9
 8007b42:	f7ff f9c9 	bl	8006ed8 <quorem>
 8007b46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b4a:	f806 8b01 	strb.w	r8, [r6], #1
 8007b4e:	9b00      	ldr	r3, [sp, #0]
 8007b50:	eba6 020a 	sub.w	r2, r6, sl
 8007b54:	4293      	cmp	r3, r2
 8007b56:	ddb3      	ble.n	8007ac0 <_dtoa_r+0xad8>
 8007b58:	4649      	mov	r1, r9
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	220a      	movs	r2, #10
 8007b5e:	4658      	mov	r0, fp
 8007b60:	f000 f968 	bl	8007e34 <__multadd>
 8007b64:	4681      	mov	r9, r0
 8007b66:	e7ea      	b.n	8007b3e <_dtoa_r+0xb56>
 8007b68:	0800c36b 	.word	0x0800c36b
 8007b6c:	0800c2ef 	.word	0x0800c2ef

08007b70 <_free_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4605      	mov	r5, r0
 8007b74:	2900      	cmp	r1, #0
 8007b76:	d041      	beq.n	8007bfc <_free_r+0x8c>
 8007b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7c:	1f0c      	subs	r4, r1, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfb8      	it	lt
 8007b82:	18e4      	addlt	r4, r4, r3
 8007b84:	f000 f8e8 	bl	8007d58 <__malloc_lock>
 8007b88:	4a1d      	ldr	r2, [pc, #116]	@ (8007c00 <_free_r+0x90>)
 8007b8a:	6813      	ldr	r3, [r2, #0]
 8007b8c:	b933      	cbnz	r3, 8007b9c <_free_r+0x2c>
 8007b8e:	6063      	str	r3, [r4, #4]
 8007b90:	6014      	str	r4, [r2, #0]
 8007b92:	4628      	mov	r0, r5
 8007b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b98:	f000 b8e4 	b.w	8007d64 <__malloc_unlock>
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	d908      	bls.n	8007bb2 <_free_r+0x42>
 8007ba0:	6820      	ldr	r0, [r4, #0]
 8007ba2:	1821      	adds	r1, r4, r0
 8007ba4:	428b      	cmp	r3, r1
 8007ba6:	bf01      	itttt	eq
 8007ba8:	6819      	ldreq	r1, [r3, #0]
 8007baa:	685b      	ldreq	r3, [r3, #4]
 8007bac:	1809      	addeq	r1, r1, r0
 8007bae:	6021      	streq	r1, [r4, #0]
 8007bb0:	e7ed      	b.n	8007b8e <_free_r+0x1e>
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	b10b      	cbz	r3, 8007bbc <_free_r+0x4c>
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	d9fa      	bls.n	8007bb2 <_free_r+0x42>
 8007bbc:	6811      	ldr	r1, [r2, #0]
 8007bbe:	1850      	adds	r0, r2, r1
 8007bc0:	42a0      	cmp	r0, r4
 8007bc2:	d10b      	bne.n	8007bdc <_free_r+0x6c>
 8007bc4:	6820      	ldr	r0, [r4, #0]
 8007bc6:	4401      	add	r1, r0
 8007bc8:	1850      	adds	r0, r2, r1
 8007bca:	4283      	cmp	r3, r0
 8007bcc:	6011      	str	r1, [r2, #0]
 8007bce:	d1e0      	bne.n	8007b92 <_free_r+0x22>
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	6053      	str	r3, [r2, #4]
 8007bd6:	4408      	add	r0, r1
 8007bd8:	6010      	str	r0, [r2, #0]
 8007bda:	e7da      	b.n	8007b92 <_free_r+0x22>
 8007bdc:	d902      	bls.n	8007be4 <_free_r+0x74>
 8007bde:	230c      	movs	r3, #12
 8007be0:	602b      	str	r3, [r5, #0]
 8007be2:	e7d6      	b.n	8007b92 <_free_r+0x22>
 8007be4:	6820      	ldr	r0, [r4, #0]
 8007be6:	1821      	adds	r1, r4, r0
 8007be8:	428b      	cmp	r3, r1
 8007bea:	bf04      	itt	eq
 8007bec:	6819      	ldreq	r1, [r3, #0]
 8007bee:	685b      	ldreq	r3, [r3, #4]
 8007bf0:	6063      	str	r3, [r4, #4]
 8007bf2:	bf04      	itt	eq
 8007bf4:	1809      	addeq	r1, r1, r0
 8007bf6:	6021      	streq	r1, [r4, #0]
 8007bf8:	6054      	str	r4, [r2, #4]
 8007bfa:	e7ca      	b.n	8007b92 <_free_r+0x22>
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
 8007bfe:	bf00      	nop
 8007c00:	2000062c 	.word	0x2000062c

08007c04 <malloc>:
 8007c04:	4b02      	ldr	r3, [pc, #8]	@ (8007c10 <malloc+0xc>)
 8007c06:	4601      	mov	r1, r0
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	f000 b825 	b.w	8007c58 <_malloc_r>
 8007c0e:	bf00      	nop
 8007c10:	20000064 	.word	0x20000064

08007c14 <sbrk_aligned>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	4e0f      	ldr	r6, [pc, #60]	@ (8007c54 <sbrk_aligned+0x40>)
 8007c18:	460c      	mov	r4, r1
 8007c1a:	6831      	ldr	r1, [r6, #0]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	b911      	cbnz	r1, 8007c26 <sbrk_aligned+0x12>
 8007c20:	f002 f988 	bl	8009f34 <_sbrk_r>
 8007c24:	6030      	str	r0, [r6, #0]
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f002 f983 	bl	8009f34 <_sbrk_r>
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	d103      	bne.n	8007c3a <sbrk_aligned+0x26>
 8007c32:	f04f 34ff 	mov.w	r4, #4294967295
 8007c36:	4620      	mov	r0, r4
 8007c38:	bd70      	pop	{r4, r5, r6, pc}
 8007c3a:	1cc4      	adds	r4, r0, #3
 8007c3c:	f024 0403 	bic.w	r4, r4, #3
 8007c40:	42a0      	cmp	r0, r4
 8007c42:	d0f8      	beq.n	8007c36 <sbrk_aligned+0x22>
 8007c44:	1a21      	subs	r1, r4, r0
 8007c46:	4628      	mov	r0, r5
 8007c48:	f002 f974 	bl	8009f34 <_sbrk_r>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d1f2      	bne.n	8007c36 <sbrk_aligned+0x22>
 8007c50:	e7ef      	b.n	8007c32 <sbrk_aligned+0x1e>
 8007c52:	bf00      	nop
 8007c54:	20000628 	.word	0x20000628

08007c58 <_malloc_r>:
 8007c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c5c:	1ccd      	adds	r5, r1, #3
 8007c5e:	f025 0503 	bic.w	r5, r5, #3
 8007c62:	3508      	adds	r5, #8
 8007c64:	2d0c      	cmp	r5, #12
 8007c66:	bf38      	it	cc
 8007c68:	250c      	movcc	r5, #12
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	db01      	blt.n	8007c74 <_malloc_r+0x1c>
 8007c70:	42a9      	cmp	r1, r5
 8007c72:	d904      	bls.n	8007c7e <_malloc_r+0x26>
 8007c74:	230c      	movs	r3, #12
 8007c76:	6033      	str	r3, [r6, #0]
 8007c78:	2000      	movs	r0, #0
 8007c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d54 <_malloc_r+0xfc>
 8007c82:	f000 f869 	bl	8007d58 <__malloc_lock>
 8007c86:	f8d8 3000 	ldr.w	r3, [r8]
 8007c8a:	461c      	mov	r4, r3
 8007c8c:	bb44      	cbnz	r4, 8007ce0 <_malloc_r+0x88>
 8007c8e:	4629      	mov	r1, r5
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7ff ffbf 	bl	8007c14 <sbrk_aligned>
 8007c96:	1c43      	adds	r3, r0, #1
 8007c98:	4604      	mov	r4, r0
 8007c9a:	d158      	bne.n	8007d4e <_malloc_r+0xf6>
 8007c9c:	f8d8 4000 	ldr.w	r4, [r8]
 8007ca0:	4627      	mov	r7, r4
 8007ca2:	2f00      	cmp	r7, #0
 8007ca4:	d143      	bne.n	8007d2e <_malloc_r+0xd6>
 8007ca6:	2c00      	cmp	r4, #0
 8007ca8:	d04b      	beq.n	8007d42 <_malloc_r+0xea>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	4639      	mov	r1, r7
 8007cae:	4630      	mov	r0, r6
 8007cb0:	eb04 0903 	add.w	r9, r4, r3
 8007cb4:	f002 f93e 	bl	8009f34 <_sbrk_r>
 8007cb8:	4581      	cmp	r9, r0
 8007cba:	d142      	bne.n	8007d42 <_malloc_r+0xea>
 8007cbc:	6821      	ldr	r1, [r4, #0]
 8007cbe:	1a6d      	subs	r5, r5, r1
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7ff ffa6 	bl	8007c14 <sbrk_aligned>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d03a      	beq.n	8007d42 <_malloc_r+0xea>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	442b      	add	r3, r5
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	bb62      	cbnz	r2, 8007d34 <_malloc_r+0xdc>
 8007cda:	f8c8 7000 	str.w	r7, [r8]
 8007cde:	e00f      	b.n	8007d00 <_malloc_r+0xa8>
 8007ce0:	6822      	ldr	r2, [r4, #0]
 8007ce2:	1b52      	subs	r2, r2, r5
 8007ce4:	d420      	bmi.n	8007d28 <_malloc_r+0xd0>
 8007ce6:	2a0b      	cmp	r2, #11
 8007ce8:	d917      	bls.n	8007d1a <_malloc_r+0xc2>
 8007cea:	1961      	adds	r1, r4, r5
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	6025      	str	r5, [r4, #0]
 8007cf0:	bf18      	it	ne
 8007cf2:	6059      	strne	r1, [r3, #4]
 8007cf4:	6863      	ldr	r3, [r4, #4]
 8007cf6:	bf08      	it	eq
 8007cf8:	f8c8 1000 	streq.w	r1, [r8]
 8007cfc:	5162      	str	r2, [r4, r5]
 8007cfe:	604b      	str	r3, [r1, #4]
 8007d00:	4630      	mov	r0, r6
 8007d02:	f000 f82f 	bl	8007d64 <__malloc_unlock>
 8007d06:	f104 000b 	add.w	r0, r4, #11
 8007d0a:	1d23      	adds	r3, r4, #4
 8007d0c:	f020 0007 	bic.w	r0, r0, #7
 8007d10:	1ac2      	subs	r2, r0, r3
 8007d12:	bf1c      	itt	ne
 8007d14:	1a1b      	subne	r3, r3, r0
 8007d16:	50a3      	strne	r3, [r4, r2]
 8007d18:	e7af      	b.n	8007c7a <_malloc_r+0x22>
 8007d1a:	6862      	ldr	r2, [r4, #4]
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	bf0c      	ite	eq
 8007d20:	f8c8 2000 	streq.w	r2, [r8]
 8007d24:	605a      	strne	r2, [r3, #4]
 8007d26:	e7eb      	b.n	8007d00 <_malloc_r+0xa8>
 8007d28:	4623      	mov	r3, r4
 8007d2a:	6864      	ldr	r4, [r4, #4]
 8007d2c:	e7ae      	b.n	8007c8c <_malloc_r+0x34>
 8007d2e:	463c      	mov	r4, r7
 8007d30:	687f      	ldr	r7, [r7, #4]
 8007d32:	e7b6      	b.n	8007ca2 <_malloc_r+0x4a>
 8007d34:	461a      	mov	r2, r3
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d1fb      	bne.n	8007d34 <_malloc_r+0xdc>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	6053      	str	r3, [r2, #4]
 8007d40:	e7de      	b.n	8007d00 <_malloc_r+0xa8>
 8007d42:	230c      	movs	r3, #12
 8007d44:	6033      	str	r3, [r6, #0]
 8007d46:	4630      	mov	r0, r6
 8007d48:	f000 f80c 	bl	8007d64 <__malloc_unlock>
 8007d4c:	e794      	b.n	8007c78 <_malloc_r+0x20>
 8007d4e:	6005      	str	r5, [r0, #0]
 8007d50:	e7d6      	b.n	8007d00 <_malloc_r+0xa8>
 8007d52:	bf00      	nop
 8007d54:	2000062c 	.word	0x2000062c

08007d58 <__malloc_lock>:
 8007d58:	4801      	ldr	r0, [pc, #4]	@ (8007d60 <__malloc_lock+0x8>)
 8007d5a:	f7ff b8b4 	b.w	8006ec6 <__retarget_lock_acquire_recursive>
 8007d5e:	bf00      	nop
 8007d60:	20000624 	.word	0x20000624

08007d64 <__malloc_unlock>:
 8007d64:	4801      	ldr	r0, [pc, #4]	@ (8007d6c <__malloc_unlock+0x8>)
 8007d66:	f7ff b8af 	b.w	8006ec8 <__retarget_lock_release_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	20000624 	.word	0x20000624

08007d70 <_Balloc>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	69c6      	ldr	r6, [r0, #28]
 8007d74:	4604      	mov	r4, r0
 8007d76:	460d      	mov	r5, r1
 8007d78:	b976      	cbnz	r6, 8007d98 <_Balloc+0x28>
 8007d7a:	2010      	movs	r0, #16
 8007d7c:	f7ff ff42 	bl	8007c04 <malloc>
 8007d80:	4602      	mov	r2, r0
 8007d82:	61e0      	str	r0, [r4, #28]
 8007d84:	b920      	cbnz	r0, 8007d90 <_Balloc+0x20>
 8007d86:	4b18      	ldr	r3, [pc, #96]	@ (8007de8 <_Balloc+0x78>)
 8007d88:	4818      	ldr	r0, [pc, #96]	@ (8007dec <_Balloc+0x7c>)
 8007d8a:	216b      	movs	r1, #107	@ 0x6b
 8007d8c:	f002 f8f8 	bl	8009f80 <__assert_func>
 8007d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d94:	6006      	str	r6, [r0, #0]
 8007d96:	60c6      	str	r6, [r0, #12]
 8007d98:	69e6      	ldr	r6, [r4, #28]
 8007d9a:	68f3      	ldr	r3, [r6, #12]
 8007d9c:	b183      	cbz	r3, 8007dc0 <_Balloc+0x50>
 8007d9e:	69e3      	ldr	r3, [r4, #28]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007da6:	b9b8      	cbnz	r0, 8007dd8 <_Balloc+0x68>
 8007da8:	2101      	movs	r1, #1
 8007daa:	fa01 f605 	lsl.w	r6, r1, r5
 8007dae:	1d72      	adds	r2, r6, #5
 8007db0:	0092      	lsls	r2, r2, #2
 8007db2:	4620      	mov	r0, r4
 8007db4:	f002 f902 	bl	8009fbc <_calloc_r>
 8007db8:	b160      	cbz	r0, 8007dd4 <_Balloc+0x64>
 8007dba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dbe:	e00e      	b.n	8007dde <_Balloc+0x6e>
 8007dc0:	2221      	movs	r2, #33	@ 0x21
 8007dc2:	2104      	movs	r1, #4
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f002 f8f9 	bl	8009fbc <_calloc_r>
 8007dca:	69e3      	ldr	r3, [r4, #28]
 8007dcc:	60f0      	str	r0, [r6, #12]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e4      	bne.n	8007d9e <_Balloc+0x2e>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	bd70      	pop	{r4, r5, r6, pc}
 8007dd8:	6802      	ldr	r2, [r0, #0]
 8007dda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dde:	2300      	movs	r3, #0
 8007de0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007de4:	e7f7      	b.n	8007dd6 <_Balloc+0x66>
 8007de6:	bf00      	nop
 8007de8:	0800c2fc 	.word	0x0800c2fc
 8007dec:	0800c37c 	.word	0x0800c37c

08007df0 <_Bfree>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	69c6      	ldr	r6, [r0, #28]
 8007df4:	4605      	mov	r5, r0
 8007df6:	460c      	mov	r4, r1
 8007df8:	b976      	cbnz	r6, 8007e18 <_Bfree+0x28>
 8007dfa:	2010      	movs	r0, #16
 8007dfc:	f7ff ff02 	bl	8007c04 <malloc>
 8007e00:	4602      	mov	r2, r0
 8007e02:	61e8      	str	r0, [r5, #28]
 8007e04:	b920      	cbnz	r0, 8007e10 <_Bfree+0x20>
 8007e06:	4b09      	ldr	r3, [pc, #36]	@ (8007e2c <_Bfree+0x3c>)
 8007e08:	4809      	ldr	r0, [pc, #36]	@ (8007e30 <_Bfree+0x40>)
 8007e0a:	218f      	movs	r1, #143	@ 0x8f
 8007e0c:	f002 f8b8 	bl	8009f80 <__assert_func>
 8007e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e14:	6006      	str	r6, [r0, #0]
 8007e16:	60c6      	str	r6, [r0, #12]
 8007e18:	b13c      	cbz	r4, 8007e2a <_Bfree+0x3a>
 8007e1a:	69eb      	ldr	r3, [r5, #28]
 8007e1c:	6862      	ldr	r2, [r4, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e24:	6021      	str	r1, [r4, #0]
 8007e26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	0800c2fc 	.word	0x0800c2fc
 8007e30:	0800c37c 	.word	0x0800c37c

08007e34 <__multadd>:
 8007e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e38:	690d      	ldr	r5, [r1, #16]
 8007e3a:	4607      	mov	r7, r0
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	461e      	mov	r6, r3
 8007e40:	f101 0c14 	add.w	ip, r1, #20
 8007e44:	2000      	movs	r0, #0
 8007e46:	f8dc 3000 	ldr.w	r3, [ip]
 8007e4a:	b299      	uxth	r1, r3
 8007e4c:	fb02 6101 	mla	r1, r2, r1, r6
 8007e50:	0c1e      	lsrs	r6, r3, #16
 8007e52:	0c0b      	lsrs	r3, r1, #16
 8007e54:	fb02 3306 	mla	r3, r2, r6, r3
 8007e58:	b289      	uxth	r1, r1
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e60:	4285      	cmp	r5, r0
 8007e62:	f84c 1b04 	str.w	r1, [ip], #4
 8007e66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e6a:	dcec      	bgt.n	8007e46 <__multadd+0x12>
 8007e6c:	b30e      	cbz	r6, 8007eb2 <__multadd+0x7e>
 8007e6e:	68a3      	ldr	r3, [r4, #8]
 8007e70:	42ab      	cmp	r3, r5
 8007e72:	dc19      	bgt.n	8007ea8 <__multadd+0x74>
 8007e74:	6861      	ldr	r1, [r4, #4]
 8007e76:	4638      	mov	r0, r7
 8007e78:	3101      	adds	r1, #1
 8007e7a:	f7ff ff79 	bl	8007d70 <_Balloc>
 8007e7e:	4680      	mov	r8, r0
 8007e80:	b928      	cbnz	r0, 8007e8e <__multadd+0x5a>
 8007e82:	4602      	mov	r2, r0
 8007e84:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb8 <__multadd+0x84>)
 8007e86:	480d      	ldr	r0, [pc, #52]	@ (8007ebc <__multadd+0x88>)
 8007e88:	21ba      	movs	r1, #186	@ 0xba
 8007e8a:	f002 f879 	bl	8009f80 <__assert_func>
 8007e8e:	6922      	ldr	r2, [r4, #16]
 8007e90:	3202      	adds	r2, #2
 8007e92:	f104 010c 	add.w	r1, r4, #12
 8007e96:	0092      	lsls	r2, r2, #2
 8007e98:	300c      	adds	r0, #12
 8007e9a:	f002 f85b 	bl	8009f54 <memcpy>
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff ffa5 	bl	8007df0 <_Bfree>
 8007ea6:	4644      	mov	r4, r8
 8007ea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007eac:	3501      	adds	r5, #1
 8007eae:	615e      	str	r6, [r3, #20]
 8007eb0:	6125      	str	r5, [r4, #16]
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb8:	0800c36b 	.word	0x0800c36b
 8007ebc:	0800c37c 	.word	0x0800c37c

08007ec0 <__s2b>:
 8007ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	4615      	mov	r5, r2
 8007ec8:	461f      	mov	r7, r3
 8007eca:	2209      	movs	r2, #9
 8007ecc:	3308      	adds	r3, #8
 8007ece:	4606      	mov	r6, r0
 8007ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	db09      	blt.n	8007ef0 <__s2b+0x30>
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7ff ff47 	bl	8007d70 <_Balloc>
 8007ee2:	b940      	cbnz	r0, 8007ef6 <__s2b+0x36>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	4b19      	ldr	r3, [pc, #100]	@ (8007f4c <__s2b+0x8c>)
 8007ee8:	4819      	ldr	r0, [pc, #100]	@ (8007f50 <__s2b+0x90>)
 8007eea:	21d3      	movs	r1, #211	@ 0xd3
 8007eec:	f002 f848 	bl	8009f80 <__assert_func>
 8007ef0:	0052      	lsls	r2, r2, #1
 8007ef2:	3101      	adds	r1, #1
 8007ef4:	e7f0      	b.n	8007ed8 <__s2b+0x18>
 8007ef6:	9b08      	ldr	r3, [sp, #32]
 8007ef8:	6143      	str	r3, [r0, #20]
 8007efa:	2d09      	cmp	r5, #9
 8007efc:	f04f 0301 	mov.w	r3, #1
 8007f00:	6103      	str	r3, [r0, #16]
 8007f02:	dd16      	ble.n	8007f32 <__s2b+0x72>
 8007f04:	f104 0909 	add.w	r9, r4, #9
 8007f08:	46c8      	mov	r8, r9
 8007f0a:	442c      	add	r4, r5
 8007f0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007f10:	4601      	mov	r1, r0
 8007f12:	3b30      	subs	r3, #48	@ 0x30
 8007f14:	220a      	movs	r2, #10
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7ff ff8c 	bl	8007e34 <__multadd>
 8007f1c:	45a0      	cmp	r8, r4
 8007f1e:	d1f5      	bne.n	8007f0c <__s2b+0x4c>
 8007f20:	f1a5 0408 	sub.w	r4, r5, #8
 8007f24:	444c      	add	r4, r9
 8007f26:	1b2d      	subs	r5, r5, r4
 8007f28:	1963      	adds	r3, r4, r5
 8007f2a:	42bb      	cmp	r3, r7
 8007f2c:	db04      	blt.n	8007f38 <__s2b+0x78>
 8007f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f32:	340a      	adds	r4, #10
 8007f34:	2509      	movs	r5, #9
 8007f36:	e7f6      	b.n	8007f26 <__s2b+0x66>
 8007f38:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007f3c:	4601      	mov	r1, r0
 8007f3e:	3b30      	subs	r3, #48	@ 0x30
 8007f40:	220a      	movs	r2, #10
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7ff ff76 	bl	8007e34 <__multadd>
 8007f48:	e7ee      	b.n	8007f28 <__s2b+0x68>
 8007f4a:	bf00      	nop
 8007f4c:	0800c36b 	.word	0x0800c36b
 8007f50:	0800c37c 	.word	0x0800c37c

08007f54 <__hi0bits>:
 8007f54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f58:	4603      	mov	r3, r0
 8007f5a:	bf36      	itet	cc
 8007f5c:	0403      	lslcc	r3, r0, #16
 8007f5e:	2000      	movcs	r0, #0
 8007f60:	2010      	movcc	r0, #16
 8007f62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f66:	bf3c      	itt	cc
 8007f68:	021b      	lslcc	r3, r3, #8
 8007f6a:	3008      	addcc	r0, #8
 8007f6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f70:	bf3c      	itt	cc
 8007f72:	011b      	lslcc	r3, r3, #4
 8007f74:	3004      	addcc	r0, #4
 8007f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f7a:	bf3c      	itt	cc
 8007f7c:	009b      	lslcc	r3, r3, #2
 8007f7e:	3002      	addcc	r0, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	db05      	blt.n	8007f90 <__hi0bits+0x3c>
 8007f84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f88:	f100 0001 	add.w	r0, r0, #1
 8007f8c:	bf08      	it	eq
 8007f8e:	2020      	moveq	r0, #32
 8007f90:	4770      	bx	lr

08007f92 <__lo0bits>:
 8007f92:	6803      	ldr	r3, [r0, #0]
 8007f94:	4602      	mov	r2, r0
 8007f96:	f013 0007 	ands.w	r0, r3, #7
 8007f9a:	d00b      	beq.n	8007fb4 <__lo0bits+0x22>
 8007f9c:	07d9      	lsls	r1, r3, #31
 8007f9e:	d421      	bmi.n	8007fe4 <__lo0bits+0x52>
 8007fa0:	0798      	lsls	r0, r3, #30
 8007fa2:	bf49      	itett	mi
 8007fa4:	085b      	lsrmi	r3, r3, #1
 8007fa6:	089b      	lsrpl	r3, r3, #2
 8007fa8:	2001      	movmi	r0, #1
 8007faa:	6013      	strmi	r3, [r2, #0]
 8007fac:	bf5c      	itt	pl
 8007fae:	6013      	strpl	r3, [r2, #0]
 8007fb0:	2002      	movpl	r0, #2
 8007fb2:	4770      	bx	lr
 8007fb4:	b299      	uxth	r1, r3
 8007fb6:	b909      	cbnz	r1, 8007fbc <__lo0bits+0x2a>
 8007fb8:	0c1b      	lsrs	r3, r3, #16
 8007fba:	2010      	movs	r0, #16
 8007fbc:	b2d9      	uxtb	r1, r3
 8007fbe:	b909      	cbnz	r1, 8007fc4 <__lo0bits+0x32>
 8007fc0:	3008      	adds	r0, #8
 8007fc2:	0a1b      	lsrs	r3, r3, #8
 8007fc4:	0719      	lsls	r1, r3, #28
 8007fc6:	bf04      	itt	eq
 8007fc8:	091b      	lsreq	r3, r3, #4
 8007fca:	3004      	addeq	r0, #4
 8007fcc:	0799      	lsls	r1, r3, #30
 8007fce:	bf04      	itt	eq
 8007fd0:	089b      	lsreq	r3, r3, #2
 8007fd2:	3002      	addeq	r0, #2
 8007fd4:	07d9      	lsls	r1, r3, #31
 8007fd6:	d403      	bmi.n	8007fe0 <__lo0bits+0x4e>
 8007fd8:	085b      	lsrs	r3, r3, #1
 8007fda:	f100 0001 	add.w	r0, r0, #1
 8007fde:	d003      	beq.n	8007fe8 <__lo0bits+0x56>
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	4770      	bx	lr
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	4770      	bx	lr
 8007fe8:	2020      	movs	r0, #32
 8007fea:	4770      	bx	lr

08007fec <__i2b>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	460c      	mov	r4, r1
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	f7ff febd 	bl	8007d70 <_Balloc>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	b928      	cbnz	r0, 8008006 <__i2b+0x1a>
 8007ffa:	4b05      	ldr	r3, [pc, #20]	@ (8008010 <__i2b+0x24>)
 8007ffc:	4805      	ldr	r0, [pc, #20]	@ (8008014 <__i2b+0x28>)
 8007ffe:	f240 1145 	movw	r1, #325	@ 0x145
 8008002:	f001 ffbd 	bl	8009f80 <__assert_func>
 8008006:	2301      	movs	r3, #1
 8008008:	6144      	str	r4, [r0, #20]
 800800a:	6103      	str	r3, [r0, #16]
 800800c:	bd10      	pop	{r4, pc}
 800800e:	bf00      	nop
 8008010:	0800c36b 	.word	0x0800c36b
 8008014:	0800c37c 	.word	0x0800c37c

08008018 <__multiply>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	4614      	mov	r4, r2
 800801e:	690a      	ldr	r2, [r1, #16]
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	429a      	cmp	r2, r3
 8008024:	bfa8      	it	ge
 8008026:	4623      	movge	r3, r4
 8008028:	460f      	mov	r7, r1
 800802a:	bfa4      	itt	ge
 800802c:	460c      	movge	r4, r1
 800802e:	461f      	movge	r7, r3
 8008030:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008034:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008038:	68a3      	ldr	r3, [r4, #8]
 800803a:	6861      	ldr	r1, [r4, #4]
 800803c:	eb0a 0609 	add.w	r6, sl, r9
 8008040:	42b3      	cmp	r3, r6
 8008042:	b085      	sub	sp, #20
 8008044:	bfb8      	it	lt
 8008046:	3101      	addlt	r1, #1
 8008048:	f7ff fe92 	bl	8007d70 <_Balloc>
 800804c:	b930      	cbnz	r0, 800805c <__multiply+0x44>
 800804e:	4602      	mov	r2, r0
 8008050:	4b44      	ldr	r3, [pc, #272]	@ (8008164 <__multiply+0x14c>)
 8008052:	4845      	ldr	r0, [pc, #276]	@ (8008168 <__multiply+0x150>)
 8008054:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008058:	f001 ff92 	bl	8009f80 <__assert_func>
 800805c:	f100 0514 	add.w	r5, r0, #20
 8008060:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008064:	462b      	mov	r3, r5
 8008066:	2200      	movs	r2, #0
 8008068:	4543      	cmp	r3, r8
 800806a:	d321      	bcc.n	80080b0 <__multiply+0x98>
 800806c:	f107 0114 	add.w	r1, r7, #20
 8008070:	f104 0214 	add.w	r2, r4, #20
 8008074:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008078:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800807c:	9302      	str	r3, [sp, #8]
 800807e:	1b13      	subs	r3, r2, r4
 8008080:	3b15      	subs	r3, #21
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	3304      	adds	r3, #4
 8008088:	f104 0715 	add.w	r7, r4, #21
 800808c:	42ba      	cmp	r2, r7
 800808e:	bf38      	it	cc
 8008090:	2304      	movcc	r3, #4
 8008092:	9301      	str	r3, [sp, #4]
 8008094:	9b02      	ldr	r3, [sp, #8]
 8008096:	9103      	str	r1, [sp, #12]
 8008098:	428b      	cmp	r3, r1
 800809a:	d80c      	bhi.n	80080b6 <__multiply+0x9e>
 800809c:	2e00      	cmp	r6, #0
 800809e:	dd03      	ble.n	80080a8 <__multiply+0x90>
 80080a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d05b      	beq.n	8008160 <__multiply+0x148>
 80080a8:	6106      	str	r6, [r0, #16]
 80080aa:	b005      	add	sp, #20
 80080ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b0:	f843 2b04 	str.w	r2, [r3], #4
 80080b4:	e7d8      	b.n	8008068 <__multiply+0x50>
 80080b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80080ba:	f1ba 0f00 	cmp.w	sl, #0
 80080be:	d024      	beq.n	800810a <__multiply+0xf2>
 80080c0:	f104 0e14 	add.w	lr, r4, #20
 80080c4:	46a9      	mov	r9, r5
 80080c6:	f04f 0c00 	mov.w	ip, #0
 80080ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80080ce:	f8d9 3000 	ldr.w	r3, [r9]
 80080d2:	fa1f fb87 	uxth.w	fp, r7
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80080dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80080e0:	f8d9 7000 	ldr.w	r7, [r9]
 80080e4:	4463      	add	r3, ip
 80080e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80080ea:	fb0a c70b 	mla	r7, sl, fp, ip
 80080ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80080f8:	4572      	cmp	r2, lr
 80080fa:	f849 3b04 	str.w	r3, [r9], #4
 80080fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008102:	d8e2      	bhi.n	80080ca <__multiply+0xb2>
 8008104:	9b01      	ldr	r3, [sp, #4]
 8008106:	f845 c003 	str.w	ip, [r5, r3]
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008110:	3104      	adds	r1, #4
 8008112:	f1b9 0f00 	cmp.w	r9, #0
 8008116:	d021      	beq.n	800815c <__multiply+0x144>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	f104 0c14 	add.w	ip, r4, #20
 800811e:	46ae      	mov	lr, r5
 8008120:	f04f 0a00 	mov.w	sl, #0
 8008124:	f8bc b000 	ldrh.w	fp, [ip]
 8008128:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800812c:	fb09 770b 	mla	r7, r9, fp, r7
 8008130:	4457      	add	r7, sl
 8008132:	b29b      	uxth	r3, r3
 8008134:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008138:	f84e 3b04 	str.w	r3, [lr], #4
 800813c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008140:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008144:	f8be 3000 	ldrh.w	r3, [lr]
 8008148:	fb09 330a 	mla	r3, r9, sl, r3
 800814c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008150:	4562      	cmp	r2, ip
 8008152:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008156:	d8e5      	bhi.n	8008124 <__multiply+0x10c>
 8008158:	9f01      	ldr	r7, [sp, #4]
 800815a:	51eb      	str	r3, [r5, r7]
 800815c:	3504      	adds	r5, #4
 800815e:	e799      	b.n	8008094 <__multiply+0x7c>
 8008160:	3e01      	subs	r6, #1
 8008162:	e79b      	b.n	800809c <__multiply+0x84>
 8008164:	0800c36b 	.word	0x0800c36b
 8008168:	0800c37c 	.word	0x0800c37c

0800816c <__pow5mult>:
 800816c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008170:	4615      	mov	r5, r2
 8008172:	f012 0203 	ands.w	r2, r2, #3
 8008176:	4607      	mov	r7, r0
 8008178:	460e      	mov	r6, r1
 800817a:	d007      	beq.n	800818c <__pow5mult+0x20>
 800817c:	4c25      	ldr	r4, [pc, #148]	@ (8008214 <__pow5mult+0xa8>)
 800817e:	3a01      	subs	r2, #1
 8008180:	2300      	movs	r3, #0
 8008182:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008186:	f7ff fe55 	bl	8007e34 <__multadd>
 800818a:	4606      	mov	r6, r0
 800818c:	10ad      	asrs	r5, r5, #2
 800818e:	d03d      	beq.n	800820c <__pow5mult+0xa0>
 8008190:	69fc      	ldr	r4, [r7, #28]
 8008192:	b97c      	cbnz	r4, 80081b4 <__pow5mult+0x48>
 8008194:	2010      	movs	r0, #16
 8008196:	f7ff fd35 	bl	8007c04 <malloc>
 800819a:	4602      	mov	r2, r0
 800819c:	61f8      	str	r0, [r7, #28]
 800819e:	b928      	cbnz	r0, 80081ac <__pow5mult+0x40>
 80081a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008218 <__pow5mult+0xac>)
 80081a2:	481e      	ldr	r0, [pc, #120]	@ (800821c <__pow5mult+0xb0>)
 80081a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081a8:	f001 feea 	bl	8009f80 <__assert_func>
 80081ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081b0:	6004      	str	r4, [r0, #0]
 80081b2:	60c4      	str	r4, [r0, #12]
 80081b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081bc:	b94c      	cbnz	r4, 80081d2 <__pow5mult+0x66>
 80081be:	f240 2171 	movw	r1, #625	@ 0x271
 80081c2:	4638      	mov	r0, r7
 80081c4:	f7ff ff12 	bl	8007fec <__i2b>
 80081c8:	2300      	movs	r3, #0
 80081ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80081ce:	4604      	mov	r4, r0
 80081d0:	6003      	str	r3, [r0, #0]
 80081d2:	f04f 0900 	mov.w	r9, #0
 80081d6:	07eb      	lsls	r3, r5, #31
 80081d8:	d50a      	bpl.n	80081f0 <__pow5mult+0x84>
 80081da:	4631      	mov	r1, r6
 80081dc:	4622      	mov	r2, r4
 80081de:	4638      	mov	r0, r7
 80081e0:	f7ff ff1a 	bl	8008018 <__multiply>
 80081e4:	4631      	mov	r1, r6
 80081e6:	4680      	mov	r8, r0
 80081e8:	4638      	mov	r0, r7
 80081ea:	f7ff fe01 	bl	8007df0 <_Bfree>
 80081ee:	4646      	mov	r6, r8
 80081f0:	106d      	asrs	r5, r5, #1
 80081f2:	d00b      	beq.n	800820c <__pow5mult+0xa0>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	b938      	cbnz	r0, 8008208 <__pow5mult+0x9c>
 80081f8:	4622      	mov	r2, r4
 80081fa:	4621      	mov	r1, r4
 80081fc:	4638      	mov	r0, r7
 80081fe:	f7ff ff0b 	bl	8008018 <__multiply>
 8008202:	6020      	str	r0, [r4, #0]
 8008204:	f8c0 9000 	str.w	r9, [r0]
 8008208:	4604      	mov	r4, r0
 800820a:	e7e4      	b.n	80081d6 <__pow5mult+0x6a>
 800820c:	4630      	mov	r0, r6
 800820e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008212:	bf00      	nop
 8008214:	0800c3d8 	.word	0x0800c3d8
 8008218:	0800c2fc 	.word	0x0800c2fc
 800821c:	0800c37c 	.word	0x0800c37c

08008220 <__lshift>:
 8008220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008224:	460c      	mov	r4, r1
 8008226:	6849      	ldr	r1, [r1, #4]
 8008228:	6923      	ldr	r3, [r4, #16]
 800822a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800822e:	68a3      	ldr	r3, [r4, #8]
 8008230:	4607      	mov	r7, r0
 8008232:	4691      	mov	r9, r2
 8008234:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008238:	f108 0601 	add.w	r6, r8, #1
 800823c:	42b3      	cmp	r3, r6
 800823e:	db0b      	blt.n	8008258 <__lshift+0x38>
 8008240:	4638      	mov	r0, r7
 8008242:	f7ff fd95 	bl	8007d70 <_Balloc>
 8008246:	4605      	mov	r5, r0
 8008248:	b948      	cbnz	r0, 800825e <__lshift+0x3e>
 800824a:	4602      	mov	r2, r0
 800824c:	4b28      	ldr	r3, [pc, #160]	@ (80082f0 <__lshift+0xd0>)
 800824e:	4829      	ldr	r0, [pc, #164]	@ (80082f4 <__lshift+0xd4>)
 8008250:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008254:	f001 fe94 	bl	8009f80 <__assert_func>
 8008258:	3101      	adds	r1, #1
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	e7ee      	b.n	800823c <__lshift+0x1c>
 800825e:	2300      	movs	r3, #0
 8008260:	f100 0114 	add.w	r1, r0, #20
 8008264:	f100 0210 	add.w	r2, r0, #16
 8008268:	4618      	mov	r0, r3
 800826a:	4553      	cmp	r3, sl
 800826c:	db33      	blt.n	80082d6 <__lshift+0xb6>
 800826e:	6920      	ldr	r0, [r4, #16]
 8008270:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008274:	f104 0314 	add.w	r3, r4, #20
 8008278:	f019 091f 	ands.w	r9, r9, #31
 800827c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008280:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008284:	d02b      	beq.n	80082de <__lshift+0xbe>
 8008286:	f1c9 0e20 	rsb	lr, r9, #32
 800828a:	468a      	mov	sl, r1
 800828c:	2200      	movs	r2, #0
 800828e:	6818      	ldr	r0, [r3, #0]
 8008290:	fa00 f009 	lsl.w	r0, r0, r9
 8008294:	4310      	orrs	r0, r2
 8008296:	f84a 0b04 	str.w	r0, [sl], #4
 800829a:	f853 2b04 	ldr.w	r2, [r3], #4
 800829e:	459c      	cmp	ip, r3
 80082a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80082a4:	d8f3      	bhi.n	800828e <__lshift+0x6e>
 80082a6:	ebac 0304 	sub.w	r3, ip, r4
 80082aa:	3b15      	subs	r3, #21
 80082ac:	f023 0303 	bic.w	r3, r3, #3
 80082b0:	3304      	adds	r3, #4
 80082b2:	f104 0015 	add.w	r0, r4, #21
 80082b6:	4584      	cmp	ip, r0
 80082b8:	bf38      	it	cc
 80082ba:	2304      	movcc	r3, #4
 80082bc:	50ca      	str	r2, [r1, r3]
 80082be:	b10a      	cbz	r2, 80082c4 <__lshift+0xa4>
 80082c0:	f108 0602 	add.w	r6, r8, #2
 80082c4:	3e01      	subs	r6, #1
 80082c6:	4638      	mov	r0, r7
 80082c8:	612e      	str	r6, [r5, #16]
 80082ca:	4621      	mov	r1, r4
 80082cc:	f7ff fd90 	bl	8007df0 <_Bfree>
 80082d0:	4628      	mov	r0, r5
 80082d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80082da:	3301      	adds	r3, #1
 80082dc:	e7c5      	b.n	800826a <__lshift+0x4a>
 80082de:	3904      	subs	r1, #4
 80082e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80082e8:	459c      	cmp	ip, r3
 80082ea:	d8f9      	bhi.n	80082e0 <__lshift+0xc0>
 80082ec:	e7ea      	b.n	80082c4 <__lshift+0xa4>
 80082ee:	bf00      	nop
 80082f0:	0800c36b 	.word	0x0800c36b
 80082f4:	0800c37c 	.word	0x0800c37c

080082f8 <__mcmp>:
 80082f8:	690a      	ldr	r2, [r1, #16]
 80082fa:	4603      	mov	r3, r0
 80082fc:	6900      	ldr	r0, [r0, #16]
 80082fe:	1a80      	subs	r0, r0, r2
 8008300:	b530      	push	{r4, r5, lr}
 8008302:	d10e      	bne.n	8008322 <__mcmp+0x2a>
 8008304:	3314      	adds	r3, #20
 8008306:	3114      	adds	r1, #20
 8008308:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800830c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008310:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008314:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008318:	4295      	cmp	r5, r2
 800831a:	d003      	beq.n	8008324 <__mcmp+0x2c>
 800831c:	d205      	bcs.n	800832a <__mcmp+0x32>
 800831e:	f04f 30ff 	mov.w	r0, #4294967295
 8008322:	bd30      	pop	{r4, r5, pc}
 8008324:	42a3      	cmp	r3, r4
 8008326:	d3f3      	bcc.n	8008310 <__mcmp+0x18>
 8008328:	e7fb      	b.n	8008322 <__mcmp+0x2a>
 800832a:	2001      	movs	r0, #1
 800832c:	e7f9      	b.n	8008322 <__mcmp+0x2a>
	...

08008330 <__mdiff>:
 8008330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	4689      	mov	r9, r1
 8008336:	4606      	mov	r6, r0
 8008338:	4611      	mov	r1, r2
 800833a:	4648      	mov	r0, r9
 800833c:	4614      	mov	r4, r2
 800833e:	f7ff ffdb 	bl	80082f8 <__mcmp>
 8008342:	1e05      	subs	r5, r0, #0
 8008344:	d112      	bne.n	800836c <__mdiff+0x3c>
 8008346:	4629      	mov	r1, r5
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff fd11 	bl	8007d70 <_Balloc>
 800834e:	4602      	mov	r2, r0
 8008350:	b928      	cbnz	r0, 800835e <__mdiff+0x2e>
 8008352:	4b3f      	ldr	r3, [pc, #252]	@ (8008450 <__mdiff+0x120>)
 8008354:	f240 2137 	movw	r1, #567	@ 0x237
 8008358:	483e      	ldr	r0, [pc, #248]	@ (8008454 <__mdiff+0x124>)
 800835a:	f001 fe11 	bl	8009f80 <__assert_func>
 800835e:	2301      	movs	r3, #1
 8008360:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008364:	4610      	mov	r0, r2
 8008366:	b003      	add	sp, #12
 8008368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836c:	bfbc      	itt	lt
 800836e:	464b      	movlt	r3, r9
 8008370:	46a1      	movlt	r9, r4
 8008372:	4630      	mov	r0, r6
 8008374:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008378:	bfba      	itte	lt
 800837a:	461c      	movlt	r4, r3
 800837c:	2501      	movlt	r5, #1
 800837e:	2500      	movge	r5, #0
 8008380:	f7ff fcf6 	bl	8007d70 <_Balloc>
 8008384:	4602      	mov	r2, r0
 8008386:	b918      	cbnz	r0, 8008390 <__mdiff+0x60>
 8008388:	4b31      	ldr	r3, [pc, #196]	@ (8008450 <__mdiff+0x120>)
 800838a:	f240 2145 	movw	r1, #581	@ 0x245
 800838e:	e7e3      	b.n	8008358 <__mdiff+0x28>
 8008390:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008394:	6926      	ldr	r6, [r4, #16]
 8008396:	60c5      	str	r5, [r0, #12]
 8008398:	f109 0310 	add.w	r3, r9, #16
 800839c:	f109 0514 	add.w	r5, r9, #20
 80083a0:	f104 0e14 	add.w	lr, r4, #20
 80083a4:	f100 0b14 	add.w	fp, r0, #20
 80083a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	46d9      	mov	r9, fp
 80083b4:	f04f 0c00 	mov.w	ip, #0
 80083b8:	9b01      	ldr	r3, [sp, #4]
 80083ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	fa1f f38a 	uxth.w	r3, sl
 80083c8:	4619      	mov	r1, r3
 80083ca:	b283      	uxth	r3, r0
 80083cc:	1acb      	subs	r3, r1, r3
 80083ce:	0c00      	lsrs	r0, r0, #16
 80083d0:	4463      	add	r3, ip
 80083d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80083d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083e0:	4576      	cmp	r6, lr
 80083e2:	f849 3b04 	str.w	r3, [r9], #4
 80083e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083ea:	d8e5      	bhi.n	80083b8 <__mdiff+0x88>
 80083ec:	1b33      	subs	r3, r6, r4
 80083ee:	3b15      	subs	r3, #21
 80083f0:	f023 0303 	bic.w	r3, r3, #3
 80083f4:	3415      	adds	r4, #21
 80083f6:	3304      	adds	r3, #4
 80083f8:	42a6      	cmp	r6, r4
 80083fa:	bf38      	it	cc
 80083fc:	2304      	movcc	r3, #4
 80083fe:	441d      	add	r5, r3
 8008400:	445b      	add	r3, fp
 8008402:	461e      	mov	r6, r3
 8008404:	462c      	mov	r4, r5
 8008406:	4544      	cmp	r4, r8
 8008408:	d30e      	bcc.n	8008428 <__mdiff+0xf8>
 800840a:	f108 0103 	add.w	r1, r8, #3
 800840e:	1b49      	subs	r1, r1, r5
 8008410:	f021 0103 	bic.w	r1, r1, #3
 8008414:	3d03      	subs	r5, #3
 8008416:	45a8      	cmp	r8, r5
 8008418:	bf38      	it	cc
 800841a:	2100      	movcc	r1, #0
 800841c:	440b      	add	r3, r1
 800841e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008422:	b191      	cbz	r1, 800844a <__mdiff+0x11a>
 8008424:	6117      	str	r7, [r2, #16]
 8008426:	e79d      	b.n	8008364 <__mdiff+0x34>
 8008428:	f854 1b04 	ldr.w	r1, [r4], #4
 800842c:	46e6      	mov	lr, ip
 800842e:	0c08      	lsrs	r0, r1, #16
 8008430:	fa1c fc81 	uxtah	ip, ip, r1
 8008434:	4471      	add	r1, lr
 8008436:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800843a:	b289      	uxth	r1, r1
 800843c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008440:	f846 1b04 	str.w	r1, [r6], #4
 8008444:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008448:	e7dd      	b.n	8008406 <__mdiff+0xd6>
 800844a:	3f01      	subs	r7, #1
 800844c:	e7e7      	b.n	800841e <__mdiff+0xee>
 800844e:	bf00      	nop
 8008450:	0800c36b 	.word	0x0800c36b
 8008454:	0800c37c 	.word	0x0800c37c

08008458 <__ulp>:
 8008458:	b082      	sub	sp, #8
 800845a:	ed8d 0b00 	vstr	d0, [sp]
 800845e:	9a01      	ldr	r2, [sp, #4]
 8008460:	4b0f      	ldr	r3, [pc, #60]	@ (80084a0 <__ulp+0x48>)
 8008462:	4013      	ands	r3, r2
 8008464:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008468:	2b00      	cmp	r3, #0
 800846a:	dc08      	bgt.n	800847e <__ulp+0x26>
 800846c:	425b      	negs	r3, r3
 800846e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008472:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008476:	da04      	bge.n	8008482 <__ulp+0x2a>
 8008478:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800847c:	4113      	asrs	r3, r2
 800847e:	2200      	movs	r2, #0
 8008480:	e008      	b.n	8008494 <__ulp+0x3c>
 8008482:	f1a2 0314 	sub.w	r3, r2, #20
 8008486:	2b1e      	cmp	r3, #30
 8008488:	bfda      	itte	le
 800848a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800848e:	40da      	lsrle	r2, r3
 8008490:	2201      	movgt	r2, #1
 8008492:	2300      	movs	r3, #0
 8008494:	4619      	mov	r1, r3
 8008496:	4610      	mov	r0, r2
 8008498:	ec41 0b10 	vmov	d0, r0, r1
 800849c:	b002      	add	sp, #8
 800849e:	4770      	bx	lr
 80084a0:	7ff00000 	.word	0x7ff00000

080084a4 <__b2d>:
 80084a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a8:	6906      	ldr	r6, [r0, #16]
 80084aa:	f100 0814 	add.w	r8, r0, #20
 80084ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80084b2:	1f37      	subs	r7, r6, #4
 80084b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80084b8:	4610      	mov	r0, r2
 80084ba:	f7ff fd4b 	bl	8007f54 <__hi0bits>
 80084be:	f1c0 0320 	rsb	r3, r0, #32
 80084c2:	280a      	cmp	r0, #10
 80084c4:	600b      	str	r3, [r1, #0]
 80084c6:	491b      	ldr	r1, [pc, #108]	@ (8008534 <__b2d+0x90>)
 80084c8:	dc15      	bgt.n	80084f6 <__b2d+0x52>
 80084ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80084ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80084d2:	45b8      	cmp	r8, r7
 80084d4:	ea43 0501 	orr.w	r5, r3, r1
 80084d8:	bf34      	ite	cc
 80084da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80084de:	2300      	movcs	r3, #0
 80084e0:	3015      	adds	r0, #21
 80084e2:	fa02 f000 	lsl.w	r0, r2, r0
 80084e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80084ea:	4303      	orrs	r3, r0
 80084ec:	461c      	mov	r4, r3
 80084ee:	ec45 4b10 	vmov	d0, r4, r5
 80084f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f6:	45b8      	cmp	r8, r7
 80084f8:	bf3a      	itte	cc
 80084fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80084fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8008502:	2300      	movcs	r3, #0
 8008504:	380b      	subs	r0, #11
 8008506:	d012      	beq.n	800852e <__b2d+0x8a>
 8008508:	f1c0 0120 	rsb	r1, r0, #32
 800850c:	fa23 f401 	lsr.w	r4, r3, r1
 8008510:	4082      	lsls	r2, r0
 8008512:	4322      	orrs	r2, r4
 8008514:	4547      	cmp	r7, r8
 8008516:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800851a:	bf8c      	ite	hi
 800851c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008520:	2200      	movls	r2, #0
 8008522:	4083      	lsls	r3, r0
 8008524:	40ca      	lsrs	r2, r1
 8008526:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800852a:	4313      	orrs	r3, r2
 800852c:	e7de      	b.n	80084ec <__b2d+0x48>
 800852e:	ea42 0501 	orr.w	r5, r2, r1
 8008532:	e7db      	b.n	80084ec <__b2d+0x48>
 8008534:	3ff00000 	.word	0x3ff00000

08008538 <__d2b>:
 8008538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800853c:	460f      	mov	r7, r1
 800853e:	2101      	movs	r1, #1
 8008540:	ec59 8b10 	vmov	r8, r9, d0
 8008544:	4616      	mov	r6, r2
 8008546:	f7ff fc13 	bl	8007d70 <_Balloc>
 800854a:	4604      	mov	r4, r0
 800854c:	b930      	cbnz	r0, 800855c <__d2b+0x24>
 800854e:	4602      	mov	r2, r0
 8008550:	4b23      	ldr	r3, [pc, #140]	@ (80085e0 <__d2b+0xa8>)
 8008552:	4824      	ldr	r0, [pc, #144]	@ (80085e4 <__d2b+0xac>)
 8008554:	f240 310f 	movw	r1, #783	@ 0x30f
 8008558:	f001 fd12 	bl	8009f80 <__assert_func>
 800855c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008560:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008564:	b10d      	cbz	r5, 800856a <__d2b+0x32>
 8008566:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800856a:	9301      	str	r3, [sp, #4]
 800856c:	f1b8 0300 	subs.w	r3, r8, #0
 8008570:	d023      	beq.n	80085ba <__d2b+0x82>
 8008572:	4668      	mov	r0, sp
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	f7ff fd0c 	bl	8007f92 <__lo0bits>
 800857a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800857e:	b1d0      	cbz	r0, 80085b6 <__d2b+0x7e>
 8008580:	f1c0 0320 	rsb	r3, r0, #32
 8008584:	fa02 f303 	lsl.w	r3, r2, r3
 8008588:	430b      	orrs	r3, r1
 800858a:	40c2      	lsrs	r2, r0
 800858c:	6163      	str	r3, [r4, #20]
 800858e:	9201      	str	r2, [sp, #4]
 8008590:	9b01      	ldr	r3, [sp, #4]
 8008592:	61a3      	str	r3, [r4, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	bf0c      	ite	eq
 8008598:	2201      	moveq	r2, #1
 800859a:	2202      	movne	r2, #2
 800859c:	6122      	str	r2, [r4, #16]
 800859e:	b1a5      	cbz	r5, 80085ca <__d2b+0x92>
 80085a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80085a4:	4405      	add	r5, r0
 80085a6:	603d      	str	r5, [r7, #0]
 80085a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80085ac:	6030      	str	r0, [r6, #0]
 80085ae:	4620      	mov	r0, r4
 80085b0:	b003      	add	sp, #12
 80085b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085b6:	6161      	str	r1, [r4, #20]
 80085b8:	e7ea      	b.n	8008590 <__d2b+0x58>
 80085ba:	a801      	add	r0, sp, #4
 80085bc:	f7ff fce9 	bl	8007f92 <__lo0bits>
 80085c0:	9b01      	ldr	r3, [sp, #4]
 80085c2:	6163      	str	r3, [r4, #20]
 80085c4:	3020      	adds	r0, #32
 80085c6:	2201      	movs	r2, #1
 80085c8:	e7e8      	b.n	800859c <__d2b+0x64>
 80085ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80085ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80085d2:	6038      	str	r0, [r7, #0]
 80085d4:	6918      	ldr	r0, [r3, #16]
 80085d6:	f7ff fcbd 	bl	8007f54 <__hi0bits>
 80085da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80085de:	e7e5      	b.n	80085ac <__d2b+0x74>
 80085e0:	0800c36b 	.word	0x0800c36b
 80085e4:	0800c37c 	.word	0x0800c37c

080085e8 <__ratio>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	b085      	sub	sp, #20
 80085ee:	e9cd 1000 	strd	r1, r0, [sp]
 80085f2:	a902      	add	r1, sp, #8
 80085f4:	f7ff ff56 	bl	80084a4 <__b2d>
 80085f8:	9800      	ldr	r0, [sp, #0]
 80085fa:	a903      	add	r1, sp, #12
 80085fc:	ec55 4b10 	vmov	r4, r5, d0
 8008600:	f7ff ff50 	bl	80084a4 <__b2d>
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	6919      	ldr	r1, [r3, #16]
 8008608:	9b00      	ldr	r3, [sp, #0]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	1ac9      	subs	r1, r1, r3
 800860e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008612:	1a9b      	subs	r3, r3, r2
 8008614:	ec5b ab10 	vmov	sl, fp, d0
 8008618:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800861c:	2b00      	cmp	r3, #0
 800861e:	bfce      	itee	gt
 8008620:	462a      	movgt	r2, r5
 8008622:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008626:	465a      	movle	r2, fp
 8008628:	462f      	mov	r7, r5
 800862a:	46d9      	mov	r9, fp
 800862c:	bfcc      	ite	gt
 800862e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008632:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008636:	464b      	mov	r3, r9
 8008638:	4652      	mov	r2, sl
 800863a:	4620      	mov	r0, r4
 800863c:	4639      	mov	r1, r7
 800863e:	f7f8 f90d 	bl	800085c <__aeabi_ddiv>
 8008642:	ec41 0b10 	vmov	d0, r0, r1
 8008646:	b005      	add	sp, #20
 8008648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800864c <__copybits>:
 800864c:	3901      	subs	r1, #1
 800864e:	b570      	push	{r4, r5, r6, lr}
 8008650:	1149      	asrs	r1, r1, #5
 8008652:	6914      	ldr	r4, [r2, #16]
 8008654:	3101      	adds	r1, #1
 8008656:	f102 0314 	add.w	r3, r2, #20
 800865a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800865e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008662:	1f05      	subs	r5, r0, #4
 8008664:	42a3      	cmp	r3, r4
 8008666:	d30c      	bcc.n	8008682 <__copybits+0x36>
 8008668:	1aa3      	subs	r3, r4, r2
 800866a:	3b11      	subs	r3, #17
 800866c:	f023 0303 	bic.w	r3, r3, #3
 8008670:	3211      	adds	r2, #17
 8008672:	42a2      	cmp	r2, r4
 8008674:	bf88      	it	hi
 8008676:	2300      	movhi	r3, #0
 8008678:	4418      	add	r0, r3
 800867a:	2300      	movs	r3, #0
 800867c:	4288      	cmp	r0, r1
 800867e:	d305      	bcc.n	800868c <__copybits+0x40>
 8008680:	bd70      	pop	{r4, r5, r6, pc}
 8008682:	f853 6b04 	ldr.w	r6, [r3], #4
 8008686:	f845 6f04 	str.w	r6, [r5, #4]!
 800868a:	e7eb      	b.n	8008664 <__copybits+0x18>
 800868c:	f840 3b04 	str.w	r3, [r0], #4
 8008690:	e7f4      	b.n	800867c <__copybits+0x30>

08008692 <__any_on>:
 8008692:	f100 0214 	add.w	r2, r0, #20
 8008696:	6900      	ldr	r0, [r0, #16]
 8008698:	114b      	asrs	r3, r1, #5
 800869a:	4298      	cmp	r0, r3
 800869c:	b510      	push	{r4, lr}
 800869e:	db11      	blt.n	80086c4 <__any_on+0x32>
 80086a0:	dd0a      	ble.n	80086b8 <__any_on+0x26>
 80086a2:	f011 011f 	ands.w	r1, r1, #31
 80086a6:	d007      	beq.n	80086b8 <__any_on+0x26>
 80086a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80086ac:	fa24 f001 	lsr.w	r0, r4, r1
 80086b0:	fa00 f101 	lsl.w	r1, r0, r1
 80086b4:	428c      	cmp	r4, r1
 80086b6:	d10b      	bne.n	80086d0 <__any_on+0x3e>
 80086b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086bc:	4293      	cmp	r3, r2
 80086be:	d803      	bhi.n	80086c8 <__any_on+0x36>
 80086c0:	2000      	movs	r0, #0
 80086c2:	bd10      	pop	{r4, pc}
 80086c4:	4603      	mov	r3, r0
 80086c6:	e7f7      	b.n	80086b8 <__any_on+0x26>
 80086c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80086cc:	2900      	cmp	r1, #0
 80086ce:	d0f5      	beq.n	80086bc <__any_on+0x2a>
 80086d0:	2001      	movs	r0, #1
 80086d2:	e7f6      	b.n	80086c2 <__any_on+0x30>

080086d4 <sulp>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	4604      	mov	r4, r0
 80086d8:	460d      	mov	r5, r1
 80086da:	ec45 4b10 	vmov	d0, r4, r5
 80086de:	4616      	mov	r6, r2
 80086e0:	f7ff feba 	bl	8008458 <__ulp>
 80086e4:	ec51 0b10 	vmov	r0, r1, d0
 80086e8:	b17e      	cbz	r6, 800870a <sulp+0x36>
 80086ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80086ee:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd09      	ble.n	800870a <sulp+0x36>
 80086f6:	051b      	lsls	r3, r3, #20
 80086f8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80086fc:	2400      	movs	r4, #0
 80086fe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008702:	4622      	mov	r2, r4
 8008704:	462b      	mov	r3, r5
 8008706:	f7f7 ff7f 	bl	8000608 <__aeabi_dmul>
 800870a:	ec41 0b10 	vmov	d0, r0, r1
 800870e:	bd70      	pop	{r4, r5, r6, pc}

08008710 <_strtod_l>:
 8008710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	b09f      	sub	sp, #124	@ 0x7c
 8008716:	460c      	mov	r4, r1
 8008718:	9217      	str	r2, [sp, #92]	@ 0x5c
 800871a:	2200      	movs	r2, #0
 800871c:	921a      	str	r2, [sp, #104]	@ 0x68
 800871e:	9005      	str	r0, [sp, #20]
 8008720:	f04f 0a00 	mov.w	sl, #0
 8008724:	f04f 0b00 	mov.w	fp, #0
 8008728:	460a      	mov	r2, r1
 800872a:	9219      	str	r2, [sp, #100]	@ 0x64
 800872c:	7811      	ldrb	r1, [r2, #0]
 800872e:	292b      	cmp	r1, #43	@ 0x2b
 8008730:	d04a      	beq.n	80087c8 <_strtod_l+0xb8>
 8008732:	d838      	bhi.n	80087a6 <_strtod_l+0x96>
 8008734:	290d      	cmp	r1, #13
 8008736:	d832      	bhi.n	800879e <_strtod_l+0x8e>
 8008738:	2908      	cmp	r1, #8
 800873a:	d832      	bhi.n	80087a2 <_strtod_l+0x92>
 800873c:	2900      	cmp	r1, #0
 800873e:	d03b      	beq.n	80087b8 <_strtod_l+0xa8>
 8008740:	2200      	movs	r2, #0
 8008742:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008744:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008746:	782a      	ldrb	r2, [r5, #0]
 8008748:	2a30      	cmp	r2, #48	@ 0x30
 800874a:	f040 80b3 	bne.w	80088b4 <_strtod_l+0x1a4>
 800874e:	786a      	ldrb	r2, [r5, #1]
 8008750:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008754:	2a58      	cmp	r2, #88	@ 0x58
 8008756:	d16e      	bne.n	8008836 <_strtod_l+0x126>
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	4a8e      	ldr	r2, [pc, #568]	@ (800899c <_strtod_l+0x28c>)
 8008764:	9805      	ldr	r0, [sp, #20]
 8008766:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008768:	a919      	add	r1, sp, #100	@ 0x64
 800876a:	f001 fca3 	bl	800a0b4 <__gethex>
 800876e:	f010 060f 	ands.w	r6, r0, #15
 8008772:	4604      	mov	r4, r0
 8008774:	d005      	beq.n	8008782 <_strtod_l+0x72>
 8008776:	2e06      	cmp	r6, #6
 8008778:	d128      	bne.n	80087cc <_strtod_l+0xbc>
 800877a:	3501      	adds	r5, #1
 800877c:	2300      	movs	r3, #0
 800877e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008782:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008784:	2b00      	cmp	r3, #0
 8008786:	f040 858e 	bne.w	80092a6 <_strtod_l+0xb96>
 800878a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800878c:	b1cb      	cbz	r3, 80087c2 <_strtod_l+0xb2>
 800878e:	4652      	mov	r2, sl
 8008790:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008794:	ec43 2b10 	vmov	d0, r2, r3
 8008798:	b01f      	add	sp, #124	@ 0x7c
 800879a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879e:	2920      	cmp	r1, #32
 80087a0:	d1ce      	bne.n	8008740 <_strtod_l+0x30>
 80087a2:	3201      	adds	r2, #1
 80087a4:	e7c1      	b.n	800872a <_strtod_l+0x1a>
 80087a6:	292d      	cmp	r1, #45	@ 0x2d
 80087a8:	d1ca      	bne.n	8008740 <_strtod_l+0x30>
 80087aa:	2101      	movs	r1, #1
 80087ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80087ae:	1c51      	adds	r1, r2, #1
 80087b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80087b2:	7852      	ldrb	r2, [r2, #1]
 80087b4:	2a00      	cmp	r2, #0
 80087b6:	d1c5      	bne.n	8008744 <_strtod_l+0x34>
 80087b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80087ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f040 8570 	bne.w	80092a2 <_strtod_l+0xb92>
 80087c2:	4652      	mov	r2, sl
 80087c4:	465b      	mov	r3, fp
 80087c6:	e7e5      	b.n	8008794 <_strtod_l+0x84>
 80087c8:	2100      	movs	r1, #0
 80087ca:	e7ef      	b.n	80087ac <_strtod_l+0x9c>
 80087cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80087ce:	b13a      	cbz	r2, 80087e0 <_strtod_l+0xd0>
 80087d0:	2135      	movs	r1, #53	@ 0x35
 80087d2:	a81c      	add	r0, sp, #112	@ 0x70
 80087d4:	f7ff ff3a 	bl	800864c <__copybits>
 80087d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087da:	9805      	ldr	r0, [sp, #20]
 80087dc:	f7ff fb08 	bl	8007df0 <_Bfree>
 80087e0:	3e01      	subs	r6, #1
 80087e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80087e4:	2e04      	cmp	r6, #4
 80087e6:	d806      	bhi.n	80087f6 <_strtod_l+0xe6>
 80087e8:	e8df f006 	tbb	[pc, r6]
 80087ec:	201d0314 	.word	0x201d0314
 80087f0:	14          	.byte	0x14
 80087f1:	00          	.byte	0x00
 80087f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80087f6:	05e1      	lsls	r1, r4, #23
 80087f8:	bf48      	it	mi
 80087fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80087fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008802:	0d1b      	lsrs	r3, r3, #20
 8008804:	051b      	lsls	r3, r3, #20
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1bb      	bne.n	8008782 <_strtod_l+0x72>
 800880a:	f7fe fb31 	bl	8006e70 <__errno>
 800880e:	2322      	movs	r3, #34	@ 0x22
 8008810:	6003      	str	r3, [r0, #0]
 8008812:	e7b6      	b.n	8008782 <_strtod_l+0x72>
 8008814:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008818:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800881c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008820:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008824:	e7e7      	b.n	80087f6 <_strtod_l+0xe6>
 8008826:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80089a4 <_strtod_l+0x294>
 800882a:	e7e4      	b.n	80087f6 <_strtod_l+0xe6>
 800882c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008830:	f04f 3aff 	mov.w	sl, #4294967295
 8008834:	e7df      	b.n	80087f6 <_strtod_l+0xe6>
 8008836:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	9219      	str	r2, [sp, #100]	@ 0x64
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	2b30      	cmp	r3, #48	@ 0x30
 8008840:	d0f9      	beq.n	8008836 <_strtod_l+0x126>
 8008842:	2b00      	cmp	r3, #0
 8008844:	d09d      	beq.n	8008782 <_strtod_l+0x72>
 8008846:	2301      	movs	r3, #1
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800884c:	930c      	str	r3, [sp, #48]	@ 0x30
 800884e:	2300      	movs	r3, #0
 8008850:	9308      	str	r3, [sp, #32]
 8008852:	930a      	str	r3, [sp, #40]	@ 0x28
 8008854:	461f      	mov	r7, r3
 8008856:	220a      	movs	r2, #10
 8008858:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800885a:	7805      	ldrb	r5, [r0, #0]
 800885c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008860:	b2d9      	uxtb	r1, r3
 8008862:	2909      	cmp	r1, #9
 8008864:	d928      	bls.n	80088b8 <_strtod_l+0x1a8>
 8008866:	494e      	ldr	r1, [pc, #312]	@ (80089a0 <_strtod_l+0x290>)
 8008868:	2201      	movs	r2, #1
 800886a:	f7fe faa4 	bl	8006db6 <strncmp>
 800886e:	2800      	cmp	r0, #0
 8008870:	d032      	beq.n	80088d8 <_strtod_l+0x1c8>
 8008872:	2000      	movs	r0, #0
 8008874:	462a      	mov	r2, r5
 8008876:	4681      	mov	r9, r0
 8008878:	463d      	mov	r5, r7
 800887a:	4603      	mov	r3, r0
 800887c:	2a65      	cmp	r2, #101	@ 0x65
 800887e:	d001      	beq.n	8008884 <_strtod_l+0x174>
 8008880:	2a45      	cmp	r2, #69	@ 0x45
 8008882:	d114      	bne.n	80088ae <_strtod_l+0x19e>
 8008884:	b91d      	cbnz	r5, 800888e <_strtod_l+0x17e>
 8008886:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008888:	4302      	orrs	r2, r0
 800888a:	d095      	beq.n	80087b8 <_strtod_l+0xa8>
 800888c:	2500      	movs	r5, #0
 800888e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008890:	1c62      	adds	r2, r4, #1
 8008892:	9219      	str	r2, [sp, #100]	@ 0x64
 8008894:	7862      	ldrb	r2, [r4, #1]
 8008896:	2a2b      	cmp	r2, #43	@ 0x2b
 8008898:	d077      	beq.n	800898a <_strtod_l+0x27a>
 800889a:	2a2d      	cmp	r2, #45	@ 0x2d
 800889c:	d07b      	beq.n	8008996 <_strtod_l+0x286>
 800889e:	f04f 0c00 	mov.w	ip, #0
 80088a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80088a6:	2909      	cmp	r1, #9
 80088a8:	f240 8082 	bls.w	80089b0 <_strtod_l+0x2a0>
 80088ac:	9419      	str	r4, [sp, #100]	@ 0x64
 80088ae:	f04f 0800 	mov.w	r8, #0
 80088b2:	e0a2      	b.n	80089fa <_strtod_l+0x2ea>
 80088b4:	2300      	movs	r3, #0
 80088b6:	e7c7      	b.n	8008848 <_strtod_l+0x138>
 80088b8:	2f08      	cmp	r7, #8
 80088ba:	bfd5      	itete	le
 80088bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80088be:	9908      	ldrgt	r1, [sp, #32]
 80088c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80088c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80088c8:	f100 0001 	add.w	r0, r0, #1
 80088cc:	bfd4      	ite	le
 80088ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 80088d0:	9308      	strgt	r3, [sp, #32]
 80088d2:	3701      	adds	r7, #1
 80088d4:	9019      	str	r0, [sp, #100]	@ 0x64
 80088d6:	e7bf      	b.n	8008858 <_strtod_l+0x148>
 80088d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80088de:	785a      	ldrb	r2, [r3, #1]
 80088e0:	b37f      	cbz	r7, 8008942 <_strtod_l+0x232>
 80088e2:	4681      	mov	r9, r0
 80088e4:	463d      	mov	r5, r7
 80088e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80088ea:	2b09      	cmp	r3, #9
 80088ec:	d912      	bls.n	8008914 <_strtod_l+0x204>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e7c4      	b.n	800887c <_strtod_l+0x16c>
 80088f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088f4:	1c5a      	adds	r2, r3, #1
 80088f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80088f8:	785a      	ldrb	r2, [r3, #1]
 80088fa:	3001      	adds	r0, #1
 80088fc:	2a30      	cmp	r2, #48	@ 0x30
 80088fe:	d0f8      	beq.n	80088f2 <_strtod_l+0x1e2>
 8008900:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008904:	2b08      	cmp	r3, #8
 8008906:	f200 84d3 	bhi.w	80092b0 <_strtod_l+0xba0>
 800890a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800890c:	930c      	str	r3, [sp, #48]	@ 0x30
 800890e:	4681      	mov	r9, r0
 8008910:	2000      	movs	r0, #0
 8008912:	4605      	mov	r5, r0
 8008914:	3a30      	subs	r2, #48	@ 0x30
 8008916:	f100 0301 	add.w	r3, r0, #1
 800891a:	d02a      	beq.n	8008972 <_strtod_l+0x262>
 800891c:	4499      	add	r9, r3
 800891e:	eb00 0c05 	add.w	ip, r0, r5
 8008922:	462b      	mov	r3, r5
 8008924:	210a      	movs	r1, #10
 8008926:	4563      	cmp	r3, ip
 8008928:	d10d      	bne.n	8008946 <_strtod_l+0x236>
 800892a:	1c69      	adds	r1, r5, #1
 800892c:	4401      	add	r1, r0
 800892e:	4428      	add	r0, r5
 8008930:	2808      	cmp	r0, #8
 8008932:	dc16      	bgt.n	8008962 <_strtod_l+0x252>
 8008934:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008936:	230a      	movs	r3, #10
 8008938:	fb03 2300 	mla	r3, r3, r0, r2
 800893c:	930a      	str	r3, [sp, #40]	@ 0x28
 800893e:	2300      	movs	r3, #0
 8008940:	e018      	b.n	8008974 <_strtod_l+0x264>
 8008942:	4638      	mov	r0, r7
 8008944:	e7da      	b.n	80088fc <_strtod_l+0x1ec>
 8008946:	2b08      	cmp	r3, #8
 8008948:	f103 0301 	add.w	r3, r3, #1
 800894c:	dc03      	bgt.n	8008956 <_strtod_l+0x246>
 800894e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008950:	434e      	muls	r6, r1
 8008952:	960a      	str	r6, [sp, #40]	@ 0x28
 8008954:	e7e7      	b.n	8008926 <_strtod_l+0x216>
 8008956:	2b10      	cmp	r3, #16
 8008958:	bfde      	ittt	le
 800895a:	9e08      	ldrle	r6, [sp, #32]
 800895c:	434e      	mulle	r6, r1
 800895e:	9608      	strle	r6, [sp, #32]
 8008960:	e7e1      	b.n	8008926 <_strtod_l+0x216>
 8008962:	280f      	cmp	r0, #15
 8008964:	dceb      	bgt.n	800893e <_strtod_l+0x22e>
 8008966:	9808      	ldr	r0, [sp, #32]
 8008968:	230a      	movs	r3, #10
 800896a:	fb03 2300 	mla	r3, r3, r0, r2
 800896e:	9308      	str	r3, [sp, #32]
 8008970:	e7e5      	b.n	800893e <_strtod_l+0x22e>
 8008972:	4629      	mov	r1, r5
 8008974:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008976:	1c50      	adds	r0, r2, #1
 8008978:	9019      	str	r0, [sp, #100]	@ 0x64
 800897a:	7852      	ldrb	r2, [r2, #1]
 800897c:	4618      	mov	r0, r3
 800897e:	460d      	mov	r5, r1
 8008980:	e7b1      	b.n	80088e6 <_strtod_l+0x1d6>
 8008982:	f04f 0900 	mov.w	r9, #0
 8008986:	2301      	movs	r3, #1
 8008988:	e77d      	b.n	8008886 <_strtod_l+0x176>
 800898a:	f04f 0c00 	mov.w	ip, #0
 800898e:	1ca2      	adds	r2, r4, #2
 8008990:	9219      	str	r2, [sp, #100]	@ 0x64
 8008992:	78a2      	ldrb	r2, [r4, #2]
 8008994:	e785      	b.n	80088a2 <_strtod_l+0x192>
 8008996:	f04f 0c01 	mov.w	ip, #1
 800899a:	e7f8      	b.n	800898e <_strtod_l+0x27e>
 800899c:	0800c4f0 	.word	0x0800c4f0
 80089a0:	0800c4d8 	.word	0x0800c4d8
 80089a4:	7ff00000 	.word	0x7ff00000
 80089a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089aa:	1c51      	adds	r1, r2, #1
 80089ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80089ae:	7852      	ldrb	r2, [r2, #1]
 80089b0:	2a30      	cmp	r2, #48	@ 0x30
 80089b2:	d0f9      	beq.n	80089a8 <_strtod_l+0x298>
 80089b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80089b8:	2908      	cmp	r1, #8
 80089ba:	f63f af78 	bhi.w	80088ae <_strtod_l+0x19e>
 80089be:	3a30      	subs	r2, #48	@ 0x30
 80089c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80089c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80089c6:	f04f 080a 	mov.w	r8, #10
 80089ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80089cc:	1c56      	adds	r6, r2, #1
 80089ce:	9619      	str	r6, [sp, #100]	@ 0x64
 80089d0:	7852      	ldrb	r2, [r2, #1]
 80089d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80089d6:	f1be 0f09 	cmp.w	lr, #9
 80089da:	d939      	bls.n	8008a50 <_strtod_l+0x340>
 80089dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80089de:	1a76      	subs	r6, r6, r1
 80089e0:	2e08      	cmp	r6, #8
 80089e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80089e6:	dc03      	bgt.n	80089f0 <_strtod_l+0x2e0>
 80089e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80089ea:	4588      	cmp	r8, r1
 80089ec:	bfa8      	it	ge
 80089ee:	4688      	movge	r8, r1
 80089f0:	f1bc 0f00 	cmp.w	ip, #0
 80089f4:	d001      	beq.n	80089fa <_strtod_l+0x2ea>
 80089f6:	f1c8 0800 	rsb	r8, r8, #0
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	d14e      	bne.n	8008a9c <_strtod_l+0x38c>
 80089fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a00:	4308      	orrs	r0, r1
 8008a02:	f47f aebe 	bne.w	8008782 <_strtod_l+0x72>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f47f aed6 	bne.w	80087b8 <_strtod_l+0xa8>
 8008a0c:	2a69      	cmp	r2, #105	@ 0x69
 8008a0e:	d028      	beq.n	8008a62 <_strtod_l+0x352>
 8008a10:	dc25      	bgt.n	8008a5e <_strtod_l+0x34e>
 8008a12:	2a49      	cmp	r2, #73	@ 0x49
 8008a14:	d025      	beq.n	8008a62 <_strtod_l+0x352>
 8008a16:	2a4e      	cmp	r2, #78	@ 0x4e
 8008a18:	f47f aece 	bne.w	80087b8 <_strtod_l+0xa8>
 8008a1c:	499b      	ldr	r1, [pc, #620]	@ (8008c8c <_strtod_l+0x57c>)
 8008a1e:	a819      	add	r0, sp, #100	@ 0x64
 8008a20:	f001 fd6a 	bl	800a4f8 <__match>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f43f aec7 	beq.w	80087b8 <_strtod_l+0xa8>
 8008a2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b28      	cmp	r3, #40	@ 0x28
 8008a30:	d12e      	bne.n	8008a90 <_strtod_l+0x380>
 8008a32:	4997      	ldr	r1, [pc, #604]	@ (8008c90 <_strtod_l+0x580>)
 8008a34:	aa1c      	add	r2, sp, #112	@ 0x70
 8008a36:	a819      	add	r0, sp, #100	@ 0x64
 8008a38:	f001 fd72 	bl	800a520 <__hexnan>
 8008a3c:	2805      	cmp	r0, #5
 8008a3e:	d127      	bne.n	8008a90 <_strtod_l+0x380>
 8008a40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008a42:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008a46:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008a4a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008a4e:	e698      	b.n	8008782 <_strtod_l+0x72>
 8008a50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008a52:	fb08 2101 	mla	r1, r8, r1, r2
 8008a56:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008a5a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a5c:	e7b5      	b.n	80089ca <_strtod_l+0x2ba>
 8008a5e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008a60:	e7da      	b.n	8008a18 <_strtod_l+0x308>
 8008a62:	498c      	ldr	r1, [pc, #560]	@ (8008c94 <_strtod_l+0x584>)
 8008a64:	a819      	add	r0, sp, #100	@ 0x64
 8008a66:	f001 fd47 	bl	800a4f8 <__match>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f43f aea4 	beq.w	80087b8 <_strtod_l+0xa8>
 8008a70:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a72:	4989      	ldr	r1, [pc, #548]	@ (8008c98 <_strtod_l+0x588>)
 8008a74:	3b01      	subs	r3, #1
 8008a76:	a819      	add	r0, sp, #100	@ 0x64
 8008a78:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a7a:	f001 fd3d 	bl	800a4f8 <__match>
 8008a7e:	b910      	cbnz	r0, 8008a86 <_strtod_l+0x376>
 8008a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a82:	3301      	adds	r3, #1
 8008a84:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a86:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008ca8 <_strtod_l+0x598>
 8008a8a:	f04f 0a00 	mov.w	sl, #0
 8008a8e:	e678      	b.n	8008782 <_strtod_l+0x72>
 8008a90:	4882      	ldr	r0, [pc, #520]	@ (8008c9c <_strtod_l+0x58c>)
 8008a92:	f001 fa6d 	bl	8009f70 <nan>
 8008a96:	ec5b ab10 	vmov	sl, fp, d0
 8008a9a:	e672      	b.n	8008782 <_strtod_l+0x72>
 8008a9c:	eba8 0309 	sub.w	r3, r8, r9
 8008aa0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008aa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa4:	2f00      	cmp	r7, #0
 8008aa6:	bf08      	it	eq
 8008aa8:	462f      	moveq	r7, r5
 8008aaa:	2d10      	cmp	r5, #16
 8008aac:	462c      	mov	r4, r5
 8008aae:	bfa8      	it	ge
 8008ab0:	2410      	movge	r4, #16
 8008ab2:	f7f7 fd2f 	bl	8000514 <__aeabi_ui2d>
 8008ab6:	2d09      	cmp	r5, #9
 8008ab8:	4682      	mov	sl, r0
 8008aba:	468b      	mov	fp, r1
 8008abc:	dc13      	bgt.n	8008ae6 <_strtod_l+0x3d6>
 8008abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f43f ae5e 	beq.w	8008782 <_strtod_l+0x72>
 8008ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac8:	dd78      	ble.n	8008bbc <_strtod_l+0x4ac>
 8008aca:	2b16      	cmp	r3, #22
 8008acc:	dc5f      	bgt.n	8008b8e <_strtod_l+0x47e>
 8008ace:	4974      	ldr	r1, [pc, #464]	@ (8008ca0 <_strtod_l+0x590>)
 8008ad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ad8:	4652      	mov	r2, sl
 8008ada:	465b      	mov	r3, fp
 8008adc:	f7f7 fd94 	bl	8000608 <__aeabi_dmul>
 8008ae0:	4682      	mov	sl, r0
 8008ae2:	468b      	mov	fp, r1
 8008ae4:	e64d      	b.n	8008782 <_strtod_l+0x72>
 8008ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8008ca0 <_strtod_l+0x590>)
 8008ae8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008aec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008af0:	f7f7 fd8a 	bl	8000608 <__aeabi_dmul>
 8008af4:	4682      	mov	sl, r0
 8008af6:	9808      	ldr	r0, [sp, #32]
 8008af8:	468b      	mov	fp, r1
 8008afa:	f7f7 fd0b 	bl	8000514 <__aeabi_ui2d>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4650      	mov	r0, sl
 8008b04:	4659      	mov	r1, fp
 8008b06:	f7f7 fbc9 	bl	800029c <__adddf3>
 8008b0a:	2d0f      	cmp	r5, #15
 8008b0c:	4682      	mov	sl, r0
 8008b0e:	468b      	mov	fp, r1
 8008b10:	ddd5      	ble.n	8008abe <_strtod_l+0x3ae>
 8008b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b14:	1b2c      	subs	r4, r5, r4
 8008b16:	441c      	add	r4, r3
 8008b18:	2c00      	cmp	r4, #0
 8008b1a:	f340 8096 	ble.w	8008c4a <_strtod_l+0x53a>
 8008b1e:	f014 030f 	ands.w	r3, r4, #15
 8008b22:	d00a      	beq.n	8008b3a <_strtod_l+0x42a>
 8008b24:	495e      	ldr	r1, [pc, #376]	@ (8008ca0 <_strtod_l+0x590>)
 8008b26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b2a:	4652      	mov	r2, sl
 8008b2c:	465b      	mov	r3, fp
 8008b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b32:	f7f7 fd69 	bl	8000608 <__aeabi_dmul>
 8008b36:	4682      	mov	sl, r0
 8008b38:	468b      	mov	fp, r1
 8008b3a:	f034 040f 	bics.w	r4, r4, #15
 8008b3e:	d073      	beq.n	8008c28 <_strtod_l+0x518>
 8008b40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008b44:	dd48      	ble.n	8008bd8 <_strtod_l+0x4c8>
 8008b46:	2400      	movs	r4, #0
 8008b48:	46a0      	mov	r8, r4
 8008b4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008b4c:	46a1      	mov	r9, r4
 8008b4e:	9a05      	ldr	r2, [sp, #20]
 8008b50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008ca8 <_strtod_l+0x598>
 8008b54:	2322      	movs	r3, #34	@ 0x22
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	f04f 0a00 	mov.w	sl, #0
 8008b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f43f ae0f 	beq.w	8008782 <_strtod_l+0x72>
 8008b64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b66:	9805      	ldr	r0, [sp, #20]
 8008b68:	f7ff f942 	bl	8007df0 <_Bfree>
 8008b6c:	9805      	ldr	r0, [sp, #20]
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7ff f93e 	bl	8007df0 <_Bfree>
 8008b74:	9805      	ldr	r0, [sp, #20]
 8008b76:	4641      	mov	r1, r8
 8008b78:	f7ff f93a 	bl	8007df0 <_Bfree>
 8008b7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b7e:	9805      	ldr	r0, [sp, #20]
 8008b80:	f7ff f936 	bl	8007df0 <_Bfree>
 8008b84:	9805      	ldr	r0, [sp, #20]
 8008b86:	4621      	mov	r1, r4
 8008b88:	f7ff f932 	bl	8007df0 <_Bfree>
 8008b8c:	e5f9      	b.n	8008782 <_strtod_l+0x72>
 8008b8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008b94:	4293      	cmp	r3, r2
 8008b96:	dbbc      	blt.n	8008b12 <_strtod_l+0x402>
 8008b98:	4c41      	ldr	r4, [pc, #260]	@ (8008ca0 <_strtod_l+0x590>)
 8008b9a:	f1c5 050f 	rsb	r5, r5, #15
 8008b9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008ba2:	4652      	mov	r2, sl
 8008ba4:	465b      	mov	r3, fp
 8008ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008baa:	f7f7 fd2d 	bl	8000608 <__aeabi_dmul>
 8008bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb0:	1b5d      	subs	r5, r3, r5
 8008bb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008bb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008bba:	e78f      	b.n	8008adc <_strtod_l+0x3cc>
 8008bbc:	3316      	adds	r3, #22
 8008bbe:	dba8      	blt.n	8008b12 <_strtod_l+0x402>
 8008bc0:	4b37      	ldr	r3, [pc, #220]	@ (8008ca0 <_strtod_l+0x590>)
 8008bc2:	eba9 0808 	sub.w	r8, r9, r8
 8008bc6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008bca:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008bce:	4650      	mov	r0, sl
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	f7f7 fe43 	bl	800085c <__aeabi_ddiv>
 8008bd6:	e783      	b.n	8008ae0 <_strtod_l+0x3d0>
 8008bd8:	4b32      	ldr	r3, [pc, #200]	@ (8008ca4 <_strtod_l+0x594>)
 8008bda:	9308      	str	r3, [sp, #32]
 8008bdc:	2300      	movs	r3, #0
 8008bde:	1124      	asrs	r4, r4, #4
 8008be0:	4650      	mov	r0, sl
 8008be2:	4659      	mov	r1, fp
 8008be4:	461e      	mov	r6, r3
 8008be6:	2c01      	cmp	r4, #1
 8008be8:	dc21      	bgt.n	8008c2e <_strtod_l+0x51e>
 8008bea:	b10b      	cbz	r3, 8008bf0 <_strtod_l+0x4e0>
 8008bec:	4682      	mov	sl, r0
 8008bee:	468b      	mov	fp, r1
 8008bf0:	492c      	ldr	r1, [pc, #176]	@ (8008ca4 <_strtod_l+0x594>)
 8008bf2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008bf6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	465b      	mov	r3, fp
 8008bfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c02:	f7f7 fd01 	bl	8000608 <__aeabi_dmul>
 8008c06:	4b28      	ldr	r3, [pc, #160]	@ (8008ca8 <_strtod_l+0x598>)
 8008c08:	460a      	mov	r2, r1
 8008c0a:	400b      	ands	r3, r1
 8008c0c:	4927      	ldr	r1, [pc, #156]	@ (8008cac <_strtod_l+0x59c>)
 8008c0e:	428b      	cmp	r3, r1
 8008c10:	4682      	mov	sl, r0
 8008c12:	d898      	bhi.n	8008b46 <_strtod_l+0x436>
 8008c14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	bf86      	itte	hi
 8008c1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008cb0 <_strtod_l+0x5a0>
 8008c20:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008c28:	2300      	movs	r3, #0
 8008c2a:	9308      	str	r3, [sp, #32]
 8008c2c:	e07a      	b.n	8008d24 <_strtod_l+0x614>
 8008c2e:	07e2      	lsls	r2, r4, #31
 8008c30:	d505      	bpl.n	8008c3e <_strtod_l+0x52e>
 8008c32:	9b08      	ldr	r3, [sp, #32]
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fce6 	bl	8000608 <__aeabi_dmul>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	9a08      	ldr	r2, [sp, #32]
 8008c40:	3208      	adds	r2, #8
 8008c42:	3601      	adds	r6, #1
 8008c44:	1064      	asrs	r4, r4, #1
 8008c46:	9208      	str	r2, [sp, #32]
 8008c48:	e7cd      	b.n	8008be6 <_strtod_l+0x4d6>
 8008c4a:	d0ed      	beq.n	8008c28 <_strtod_l+0x518>
 8008c4c:	4264      	negs	r4, r4
 8008c4e:	f014 020f 	ands.w	r2, r4, #15
 8008c52:	d00a      	beq.n	8008c6a <_strtod_l+0x55a>
 8008c54:	4b12      	ldr	r3, [pc, #72]	@ (8008ca0 <_strtod_l+0x590>)
 8008c56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c5a:	4650      	mov	r0, sl
 8008c5c:	4659      	mov	r1, fp
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7f7 fdfb 	bl	800085c <__aeabi_ddiv>
 8008c66:	4682      	mov	sl, r0
 8008c68:	468b      	mov	fp, r1
 8008c6a:	1124      	asrs	r4, r4, #4
 8008c6c:	d0dc      	beq.n	8008c28 <_strtod_l+0x518>
 8008c6e:	2c1f      	cmp	r4, #31
 8008c70:	dd20      	ble.n	8008cb4 <_strtod_l+0x5a4>
 8008c72:	2400      	movs	r4, #0
 8008c74:	46a0      	mov	r8, r4
 8008c76:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c78:	46a1      	mov	r9, r4
 8008c7a:	9a05      	ldr	r2, [sp, #20]
 8008c7c:	2322      	movs	r3, #34	@ 0x22
 8008c7e:	f04f 0a00 	mov.w	sl, #0
 8008c82:	f04f 0b00 	mov.w	fp, #0
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	e768      	b.n	8008b5c <_strtod_l+0x44c>
 8008c8a:	bf00      	nop
 8008c8c:	0800c2c5 	.word	0x0800c2c5
 8008c90:	0800c4dc 	.word	0x0800c4dc
 8008c94:	0800c2bd 	.word	0x0800c2bd
 8008c98:	0800c2f2 	.word	0x0800c2f2
 8008c9c:	0800c6a0 	.word	0x0800c6a0
 8008ca0:	0800c410 	.word	0x0800c410
 8008ca4:	0800c3e8 	.word	0x0800c3e8
 8008ca8:	7ff00000 	.word	0x7ff00000
 8008cac:	7ca00000 	.word	0x7ca00000
 8008cb0:	7fefffff 	.word	0x7fefffff
 8008cb4:	f014 0310 	ands.w	r3, r4, #16
 8008cb8:	bf18      	it	ne
 8008cba:	236a      	movne	r3, #106	@ 0x6a
 8008cbc:	4ea9      	ldr	r6, [pc, #676]	@ (8008f64 <_strtod_l+0x854>)
 8008cbe:	9308      	str	r3, [sp, #32]
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	4659      	mov	r1, fp
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	07e2      	lsls	r2, r4, #31
 8008cc8:	d504      	bpl.n	8008cd4 <_strtod_l+0x5c4>
 8008cca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008cce:	f7f7 fc9b 	bl	8000608 <__aeabi_dmul>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	1064      	asrs	r4, r4, #1
 8008cd6:	f106 0608 	add.w	r6, r6, #8
 8008cda:	d1f4      	bne.n	8008cc6 <_strtod_l+0x5b6>
 8008cdc:	b10b      	cbz	r3, 8008ce2 <_strtod_l+0x5d2>
 8008cde:	4682      	mov	sl, r0
 8008ce0:	468b      	mov	fp, r1
 8008ce2:	9b08      	ldr	r3, [sp, #32]
 8008ce4:	b1b3      	cbz	r3, 8008d14 <_strtod_l+0x604>
 8008ce6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008cea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	4659      	mov	r1, fp
 8008cf2:	dd0f      	ble.n	8008d14 <_strtod_l+0x604>
 8008cf4:	2b1f      	cmp	r3, #31
 8008cf6:	dd55      	ble.n	8008da4 <_strtod_l+0x694>
 8008cf8:	2b34      	cmp	r3, #52	@ 0x34
 8008cfa:	bfde      	ittt	le
 8008cfc:	f04f 33ff 	movle.w	r3, #4294967295
 8008d00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008d04:	4093      	lslle	r3, r2
 8008d06:	f04f 0a00 	mov.w	sl, #0
 8008d0a:	bfcc      	ite	gt
 8008d0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008d10:	ea03 0b01 	andle.w	fp, r3, r1
 8008d14:	2200      	movs	r2, #0
 8008d16:	2300      	movs	r3, #0
 8008d18:	4650      	mov	r0, sl
 8008d1a:	4659      	mov	r1, fp
 8008d1c:	f7f7 fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d1a6      	bne.n	8008c72 <_strtod_l+0x562>
 8008d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008d2a:	9805      	ldr	r0, [sp, #20]
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	463a      	mov	r2, r7
 8008d30:	f7ff f8c6 	bl	8007ec0 <__s2b>
 8008d34:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f43f af05 	beq.w	8008b46 <_strtod_l+0x436>
 8008d3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	eba9 0308 	sub.w	r3, r9, r8
 8008d44:	bfa8      	it	ge
 8008d46:	2300      	movge	r3, #0
 8008d48:	9312      	str	r3, [sp, #72]	@ 0x48
 8008d4a:	2400      	movs	r4, #0
 8008d4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008d50:	9316      	str	r3, [sp, #88]	@ 0x58
 8008d52:	46a0      	mov	r8, r4
 8008d54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d56:	9805      	ldr	r0, [sp, #20]
 8008d58:	6859      	ldr	r1, [r3, #4]
 8008d5a:	f7ff f809 	bl	8007d70 <_Balloc>
 8008d5e:	4681      	mov	r9, r0
 8008d60:	2800      	cmp	r0, #0
 8008d62:	f43f aef4 	beq.w	8008b4e <_strtod_l+0x43e>
 8008d66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d68:	691a      	ldr	r2, [r3, #16]
 8008d6a:	3202      	adds	r2, #2
 8008d6c:	f103 010c 	add.w	r1, r3, #12
 8008d70:	0092      	lsls	r2, r2, #2
 8008d72:	300c      	adds	r0, #12
 8008d74:	f001 f8ee 	bl	8009f54 <memcpy>
 8008d78:	ec4b ab10 	vmov	d0, sl, fp
 8008d7c:	9805      	ldr	r0, [sp, #20]
 8008d7e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d80:	a91b      	add	r1, sp, #108	@ 0x6c
 8008d82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008d86:	f7ff fbd7 	bl	8008538 <__d2b>
 8008d8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f43f aede 	beq.w	8008b4e <_strtod_l+0x43e>
 8008d92:	9805      	ldr	r0, [sp, #20]
 8008d94:	2101      	movs	r1, #1
 8008d96:	f7ff f929 	bl	8007fec <__i2b>
 8008d9a:	4680      	mov	r8, r0
 8008d9c:	b948      	cbnz	r0, 8008db2 <_strtod_l+0x6a2>
 8008d9e:	f04f 0800 	mov.w	r8, #0
 8008da2:	e6d4      	b.n	8008b4e <_strtod_l+0x43e>
 8008da4:	f04f 32ff 	mov.w	r2, #4294967295
 8008da8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dac:	ea03 0a0a 	and.w	sl, r3, sl
 8008db0:	e7b0      	b.n	8008d14 <_strtod_l+0x604>
 8008db2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008db4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008db6:	2d00      	cmp	r5, #0
 8008db8:	bfab      	itete	ge
 8008dba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008dbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008dbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008dc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008dc2:	bfac      	ite	ge
 8008dc4:	18ef      	addge	r7, r5, r3
 8008dc6:	1b5e      	sublt	r6, r3, r5
 8008dc8:	9b08      	ldr	r3, [sp, #32]
 8008dca:	1aed      	subs	r5, r5, r3
 8008dcc:	4415      	add	r5, r2
 8008dce:	4b66      	ldr	r3, [pc, #408]	@ (8008f68 <_strtod_l+0x858>)
 8008dd0:	3d01      	subs	r5, #1
 8008dd2:	429d      	cmp	r5, r3
 8008dd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008dd8:	da50      	bge.n	8008e7c <_strtod_l+0x76c>
 8008dda:	1b5b      	subs	r3, r3, r5
 8008ddc:	2b1f      	cmp	r3, #31
 8008dde:	eba2 0203 	sub.w	r2, r2, r3
 8008de2:	f04f 0101 	mov.w	r1, #1
 8008de6:	dc3d      	bgt.n	8008e64 <_strtod_l+0x754>
 8008de8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008dee:	2300      	movs	r3, #0
 8008df0:	9310      	str	r3, [sp, #64]	@ 0x40
 8008df2:	18bd      	adds	r5, r7, r2
 8008df4:	9b08      	ldr	r3, [sp, #32]
 8008df6:	42af      	cmp	r7, r5
 8008df8:	4416      	add	r6, r2
 8008dfa:	441e      	add	r6, r3
 8008dfc:	463b      	mov	r3, r7
 8008dfe:	bfa8      	it	ge
 8008e00:	462b      	movge	r3, r5
 8008e02:	42b3      	cmp	r3, r6
 8008e04:	bfa8      	it	ge
 8008e06:	4633      	movge	r3, r6
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bfc2      	ittt	gt
 8008e0c:	1aed      	subgt	r5, r5, r3
 8008e0e:	1af6      	subgt	r6, r6, r3
 8008e10:	1aff      	subgt	r7, r7, r3
 8008e12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	dd16      	ble.n	8008e46 <_strtod_l+0x736>
 8008e18:	4641      	mov	r1, r8
 8008e1a:	9805      	ldr	r0, [sp, #20]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	f7ff f9a5 	bl	800816c <__pow5mult>
 8008e22:	4680      	mov	r8, r0
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d0ba      	beq.n	8008d9e <_strtod_l+0x68e>
 8008e28:	4601      	mov	r1, r0
 8008e2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008e2c:	9805      	ldr	r0, [sp, #20]
 8008e2e:	f7ff f8f3 	bl	8008018 <__multiply>
 8008e32:	900e      	str	r0, [sp, #56]	@ 0x38
 8008e34:	2800      	cmp	r0, #0
 8008e36:	f43f ae8a 	beq.w	8008b4e <_strtod_l+0x43e>
 8008e3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e3c:	9805      	ldr	r0, [sp, #20]
 8008e3e:	f7fe ffd7 	bl	8007df0 <_Bfree>
 8008e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e44:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	dc1d      	bgt.n	8008e86 <_strtod_l+0x776>
 8008e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dd23      	ble.n	8008e98 <_strtod_l+0x788>
 8008e50:	4649      	mov	r1, r9
 8008e52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008e54:	9805      	ldr	r0, [sp, #20]
 8008e56:	f7ff f989 	bl	800816c <__pow5mult>
 8008e5a:	4681      	mov	r9, r0
 8008e5c:	b9e0      	cbnz	r0, 8008e98 <_strtod_l+0x788>
 8008e5e:	f04f 0900 	mov.w	r9, #0
 8008e62:	e674      	b.n	8008b4e <_strtod_l+0x43e>
 8008e64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008e68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008e6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008e70:	35e2      	adds	r5, #226	@ 0xe2
 8008e72:	fa01 f305 	lsl.w	r3, r1, r5
 8008e76:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008e7a:	e7ba      	b.n	8008df2 <_strtod_l+0x6e2>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e80:	2301      	movs	r3, #1
 8008e82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e84:	e7b5      	b.n	8008df2 <_strtod_l+0x6e2>
 8008e86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e88:	9805      	ldr	r0, [sp, #20]
 8008e8a:	462a      	mov	r2, r5
 8008e8c:	f7ff f9c8 	bl	8008220 <__lshift>
 8008e90:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d1d9      	bne.n	8008e4a <_strtod_l+0x73a>
 8008e96:	e65a      	b.n	8008b4e <_strtod_l+0x43e>
 8008e98:	2e00      	cmp	r6, #0
 8008e9a:	dd07      	ble.n	8008eac <_strtod_l+0x79c>
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	9805      	ldr	r0, [sp, #20]
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	f7ff f9bd 	bl	8008220 <__lshift>
 8008ea6:	4681      	mov	r9, r0
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d0d8      	beq.n	8008e5e <_strtod_l+0x74e>
 8008eac:	2f00      	cmp	r7, #0
 8008eae:	dd08      	ble.n	8008ec2 <_strtod_l+0x7b2>
 8008eb0:	4641      	mov	r1, r8
 8008eb2:	9805      	ldr	r0, [sp, #20]
 8008eb4:	463a      	mov	r2, r7
 8008eb6:	f7ff f9b3 	bl	8008220 <__lshift>
 8008eba:	4680      	mov	r8, r0
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	f43f ae46 	beq.w	8008b4e <_strtod_l+0x43e>
 8008ec2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ec4:	9805      	ldr	r0, [sp, #20]
 8008ec6:	464a      	mov	r2, r9
 8008ec8:	f7ff fa32 	bl	8008330 <__mdiff>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	f43f ae3d 	beq.w	8008b4e <_strtod_l+0x43e>
 8008ed4:	68c3      	ldr	r3, [r0, #12]
 8008ed6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60c3      	str	r3, [r0, #12]
 8008edc:	4641      	mov	r1, r8
 8008ede:	f7ff fa0b 	bl	80082f8 <__mcmp>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	da46      	bge.n	8008f74 <_strtod_l+0x864>
 8008ee6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ee8:	ea53 030a 	orrs.w	r3, r3, sl
 8008eec:	d16c      	bne.n	8008fc8 <_strtod_l+0x8b8>
 8008eee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d168      	bne.n	8008fc8 <_strtod_l+0x8b8>
 8008ef6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008efa:	0d1b      	lsrs	r3, r3, #20
 8008efc:	051b      	lsls	r3, r3, #20
 8008efe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008f02:	d961      	bls.n	8008fc8 <_strtod_l+0x8b8>
 8008f04:	6963      	ldr	r3, [r4, #20]
 8008f06:	b913      	cbnz	r3, 8008f0e <_strtod_l+0x7fe>
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	dd5c      	ble.n	8008fc8 <_strtod_l+0x8b8>
 8008f0e:	4621      	mov	r1, r4
 8008f10:	2201      	movs	r2, #1
 8008f12:	9805      	ldr	r0, [sp, #20]
 8008f14:	f7ff f984 	bl	8008220 <__lshift>
 8008f18:	4641      	mov	r1, r8
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	f7ff f9ec 	bl	80082f8 <__mcmp>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	dd51      	ble.n	8008fc8 <_strtod_l+0x8b8>
 8008f24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f28:	9a08      	ldr	r2, [sp, #32]
 8008f2a:	0d1b      	lsrs	r3, r3, #20
 8008f2c:	051b      	lsls	r3, r3, #20
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	d06b      	beq.n	800900a <_strtod_l+0x8fa>
 8008f32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008f36:	d868      	bhi.n	800900a <_strtod_l+0x8fa>
 8008f38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008f3c:	f67f ae9d 	bls.w	8008c7a <_strtod_l+0x56a>
 8008f40:	4b0a      	ldr	r3, [pc, #40]	@ (8008f6c <_strtod_l+0x85c>)
 8008f42:	4650      	mov	r0, sl
 8008f44:	4659      	mov	r1, fp
 8008f46:	2200      	movs	r2, #0
 8008f48:	f7f7 fb5e 	bl	8000608 <__aeabi_dmul>
 8008f4c:	4b08      	ldr	r3, [pc, #32]	@ (8008f70 <_strtod_l+0x860>)
 8008f4e:	400b      	ands	r3, r1
 8008f50:	4682      	mov	sl, r0
 8008f52:	468b      	mov	fp, r1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f47f ae05 	bne.w	8008b64 <_strtod_l+0x454>
 8008f5a:	9a05      	ldr	r2, [sp, #20]
 8008f5c:	2322      	movs	r3, #34	@ 0x22
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	e600      	b.n	8008b64 <_strtod_l+0x454>
 8008f62:	bf00      	nop
 8008f64:	0800c508 	.word	0x0800c508
 8008f68:	fffffc02 	.word	0xfffffc02
 8008f6c:	39500000 	.word	0x39500000
 8008f70:	7ff00000 	.word	0x7ff00000
 8008f74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008f78:	d165      	bne.n	8009046 <_strtod_l+0x936>
 8008f7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008f7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f80:	b35a      	cbz	r2, 8008fda <_strtod_l+0x8ca>
 8008f82:	4a9f      	ldr	r2, [pc, #636]	@ (8009200 <_strtod_l+0xaf0>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d12b      	bne.n	8008fe0 <_strtod_l+0x8d0>
 8008f88:	9b08      	ldr	r3, [sp, #32]
 8008f8a:	4651      	mov	r1, sl
 8008f8c:	b303      	cbz	r3, 8008fd0 <_strtod_l+0x8c0>
 8008f8e:	4b9d      	ldr	r3, [pc, #628]	@ (8009204 <_strtod_l+0xaf4>)
 8008f90:	465a      	mov	r2, fp
 8008f92:	4013      	ands	r3, r2
 8008f94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9c:	d81b      	bhi.n	8008fd6 <_strtod_l+0x8c6>
 8008f9e:	0d1b      	lsrs	r3, r3, #20
 8008fa0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa8:	4299      	cmp	r1, r3
 8008faa:	d119      	bne.n	8008fe0 <_strtod_l+0x8d0>
 8008fac:	4b96      	ldr	r3, [pc, #600]	@ (8009208 <_strtod_l+0xaf8>)
 8008fae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d102      	bne.n	8008fba <_strtod_l+0x8aa>
 8008fb4:	3101      	adds	r1, #1
 8008fb6:	f43f adca 	beq.w	8008b4e <_strtod_l+0x43e>
 8008fba:	4b92      	ldr	r3, [pc, #584]	@ (8009204 <_strtod_l+0xaf4>)
 8008fbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fbe:	401a      	ands	r2, r3
 8008fc0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008fc4:	f04f 0a00 	mov.w	sl, #0
 8008fc8:	9b08      	ldr	r3, [sp, #32]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1b8      	bne.n	8008f40 <_strtod_l+0x830>
 8008fce:	e5c9      	b.n	8008b64 <_strtod_l+0x454>
 8008fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd4:	e7e8      	b.n	8008fa8 <_strtod_l+0x898>
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	e7e6      	b.n	8008fa8 <_strtod_l+0x898>
 8008fda:	ea53 030a 	orrs.w	r3, r3, sl
 8008fde:	d0a1      	beq.n	8008f24 <_strtod_l+0x814>
 8008fe0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fe2:	b1db      	cbz	r3, 800901c <_strtod_l+0x90c>
 8008fe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fe6:	4213      	tst	r3, r2
 8008fe8:	d0ee      	beq.n	8008fc8 <_strtod_l+0x8b8>
 8008fea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fec:	9a08      	ldr	r2, [sp, #32]
 8008fee:	4650      	mov	r0, sl
 8008ff0:	4659      	mov	r1, fp
 8008ff2:	b1bb      	cbz	r3, 8009024 <_strtod_l+0x914>
 8008ff4:	f7ff fb6e 	bl	80086d4 <sulp>
 8008ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ffc:	ec53 2b10 	vmov	r2, r3, d0
 8009000:	f7f7 f94c 	bl	800029c <__adddf3>
 8009004:	4682      	mov	sl, r0
 8009006:	468b      	mov	fp, r1
 8009008:	e7de      	b.n	8008fc8 <_strtod_l+0x8b8>
 800900a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800900e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009012:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009016:	f04f 3aff 	mov.w	sl, #4294967295
 800901a:	e7d5      	b.n	8008fc8 <_strtod_l+0x8b8>
 800901c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800901e:	ea13 0f0a 	tst.w	r3, sl
 8009022:	e7e1      	b.n	8008fe8 <_strtod_l+0x8d8>
 8009024:	f7ff fb56 	bl	80086d4 <sulp>
 8009028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800902c:	ec53 2b10 	vmov	r2, r3, d0
 8009030:	f7f7 f932 	bl	8000298 <__aeabi_dsub>
 8009034:	2200      	movs	r2, #0
 8009036:	2300      	movs	r3, #0
 8009038:	4682      	mov	sl, r0
 800903a:	468b      	mov	fp, r1
 800903c:	f7f7 fd4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009040:	2800      	cmp	r0, #0
 8009042:	d0c1      	beq.n	8008fc8 <_strtod_l+0x8b8>
 8009044:	e619      	b.n	8008c7a <_strtod_l+0x56a>
 8009046:	4641      	mov	r1, r8
 8009048:	4620      	mov	r0, r4
 800904a:	f7ff facd 	bl	80085e8 <__ratio>
 800904e:	ec57 6b10 	vmov	r6, r7, d0
 8009052:	2200      	movs	r2, #0
 8009054:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009058:	4630      	mov	r0, r6
 800905a:	4639      	mov	r1, r7
 800905c:	f7f7 fd50 	bl	8000b00 <__aeabi_dcmple>
 8009060:	2800      	cmp	r0, #0
 8009062:	d06f      	beq.n	8009144 <_strtod_l+0xa34>
 8009064:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d17a      	bne.n	8009160 <_strtod_l+0xa50>
 800906a:	f1ba 0f00 	cmp.w	sl, #0
 800906e:	d158      	bne.n	8009122 <_strtod_l+0xa12>
 8009070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009072:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009076:	2b00      	cmp	r3, #0
 8009078:	d15a      	bne.n	8009130 <_strtod_l+0xa20>
 800907a:	4b64      	ldr	r3, [pc, #400]	@ (800920c <_strtod_l+0xafc>)
 800907c:	2200      	movs	r2, #0
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	f7f7 fd33 	bl	8000aec <__aeabi_dcmplt>
 8009086:	2800      	cmp	r0, #0
 8009088:	d159      	bne.n	800913e <_strtod_l+0xa2e>
 800908a:	4630      	mov	r0, r6
 800908c:	4639      	mov	r1, r7
 800908e:	4b60      	ldr	r3, [pc, #384]	@ (8009210 <_strtod_l+0xb00>)
 8009090:	2200      	movs	r2, #0
 8009092:	f7f7 fab9 	bl	8000608 <__aeabi_dmul>
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800909e:	9606      	str	r6, [sp, #24]
 80090a0:	9307      	str	r3, [sp, #28]
 80090a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090a6:	4d57      	ldr	r5, [pc, #348]	@ (8009204 <_strtod_l+0xaf4>)
 80090a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80090ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ae:	401d      	ands	r5, r3
 80090b0:	4b58      	ldr	r3, [pc, #352]	@ (8009214 <_strtod_l+0xb04>)
 80090b2:	429d      	cmp	r5, r3
 80090b4:	f040 80b2 	bne.w	800921c <_strtod_l+0xb0c>
 80090b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80090be:	ec4b ab10 	vmov	d0, sl, fp
 80090c2:	f7ff f9c9 	bl	8008458 <__ulp>
 80090c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80090ca:	ec51 0b10 	vmov	r0, r1, d0
 80090ce:	f7f7 fa9b 	bl	8000608 <__aeabi_dmul>
 80090d2:	4652      	mov	r2, sl
 80090d4:	465b      	mov	r3, fp
 80090d6:	f7f7 f8e1 	bl	800029c <__adddf3>
 80090da:	460b      	mov	r3, r1
 80090dc:	4949      	ldr	r1, [pc, #292]	@ (8009204 <_strtod_l+0xaf4>)
 80090de:	4a4e      	ldr	r2, [pc, #312]	@ (8009218 <_strtod_l+0xb08>)
 80090e0:	4019      	ands	r1, r3
 80090e2:	4291      	cmp	r1, r2
 80090e4:	4682      	mov	sl, r0
 80090e6:	d942      	bls.n	800916e <_strtod_l+0xa5e>
 80090e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80090ea:	4b47      	ldr	r3, [pc, #284]	@ (8009208 <_strtod_l+0xaf8>)
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d103      	bne.n	80090f8 <_strtod_l+0x9e8>
 80090f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090f2:	3301      	adds	r3, #1
 80090f4:	f43f ad2b 	beq.w	8008b4e <_strtod_l+0x43e>
 80090f8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009208 <_strtod_l+0xaf8>
 80090fc:	f04f 3aff 	mov.w	sl, #4294967295
 8009100:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009102:	9805      	ldr	r0, [sp, #20]
 8009104:	f7fe fe74 	bl	8007df0 <_Bfree>
 8009108:	9805      	ldr	r0, [sp, #20]
 800910a:	4649      	mov	r1, r9
 800910c:	f7fe fe70 	bl	8007df0 <_Bfree>
 8009110:	9805      	ldr	r0, [sp, #20]
 8009112:	4641      	mov	r1, r8
 8009114:	f7fe fe6c 	bl	8007df0 <_Bfree>
 8009118:	9805      	ldr	r0, [sp, #20]
 800911a:	4621      	mov	r1, r4
 800911c:	f7fe fe68 	bl	8007df0 <_Bfree>
 8009120:	e618      	b.n	8008d54 <_strtod_l+0x644>
 8009122:	f1ba 0f01 	cmp.w	sl, #1
 8009126:	d103      	bne.n	8009130 <_strtod_l+0xa20>
 8009128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800912a:	2b00      	cmp	r3, #0
 800912c:	f43f ada5 	beq.w	8008c7a <_strtod_l+0x56a>
 8009130:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80091e0 <_strtod_l+0xad0>
 8009134:	4f35      	ldr	r7, [pc, #212]	@ (800920c <_strtod_l+0xafc>)
 8009136:	ed8d 7b06 	vstr	d7, [sp, #24]
 800913a:	2600      	movs	r6, #0
 800913c:	e7b1      	b.n	80090a2 <_strtod_l+0x992>
 800913e:	4f34      	ldr	r7, [pc, #208]	@ (8009210 <_strtod_l+0xb00>)
 8009140:	2600      	movs	r6, #0
 8009142:	e7aa      	b.n	800909a <_strtod_l+0x98a>
 8009144:	4b32      	ldr	r3, [pc, #200]	@ (8009210 <_strtod_l+0xb00>)
 8009146:	4630      	mov	r0, r6
 8009148:	4639      	mov	r1, r7
 800914a:	2200      	movs	r2, #0
 800914c:	f7f7 fa5c 	bl	8000608 <__aeabi_dmul>
 8009150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009152:	4606      	mov	r6, r0
 8009154:	460f      	mov	r7, r1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d09f      	beq.n	800909a <_strtod_l+0x98a>
 800915a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800915e:	e7a0      	b.n	80090a2 <_strtod_l+0x992>
 8009160:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80091e8 <_strtod_l+0xad8>
 8009164:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009168:	ec57 6b17 	vmov	r6, r7, d7
 800916c:	e799      	b.n	80090a2 <_strtod_l+0x992>
 800916e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009172:	9b08      	ldr	r3, [sp, #32]
 8009174:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1c1      	bne.n	8009100 <_strtod_l+0x9f0>
 800917c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009180:	0d1b      	lsrs	r3, r3, #20
 8009182:	051b      	lsls	r3, r3, #20
 8009184:	429d      	cmp	r5, r3
 8009186:	d1bb      	bne.n	8009100 <_strtod_l+0x9f0>
 8009188:	4630      	mov	r0, r6
 800918a:	4639      	mov	r1, r7
 800918c:	f7f7 fd9c 	bl	8000cc8 <__aeabi_d2lz>
 8009190:	f7f7 fa0c 	bl	80005ac <__aeabi_l2d>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4630      	mov	r0, r6
 800919a:	4639      	mov	r1, r7
 800919c:	f7f7 f87c 	bl	8000298 <__aeabi_dsub>
 80091a0:	460b      	mov	r3, r1
 80091a2:	4602      	mov	r2, r0
 80091a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80091a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80091ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ae:	ea46 060a 	orr.w	r6, r6, sl
 80091b2:	431e      	orrs	r6, r3
 80091b4:	d06f      	beq.n	8009296 <_strtod_l+0xb86>
 80091b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80091f0 <_strtod_l+0xae0>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	f7f7 fc96 	bl	8000aec <__aeabi_dcmplt>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	f47f accf 	bne.w	8008b64 <_strtod_l+0x454>
 80091c6:	a30c      	add	r3, pc, #48	@ (adr r3, 80091f8 <_strtod_l+0xae8>)
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091d0:	f7f7 fcaa 	bl	8000b28 <__aeabi_dcmpgt>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d093      	beq.n	8009100 <_strtod_l+0x9f0>
 80091d8:	e4c4      	b.n	8008b64 <_strtod_l+0x454>
 80091da:	bf00      	nop
 80091dc:	f3af 8000 	nop.w
 80091e0:	00000000 	.word	0x00000000
 80091e4:	bff00000 	.word	0xbff00000
 80091e8:	00000000 	.word	0x00000000
 80091ec:	3ff00000 	.word	0x3ff00000
 80091f0:	94a03595 	.word	0x94a03595
 80091f4:	3fdfffff 	.word	0x3fdfffff
 80091f8:	35afe535 	.word	0x35afe535
 80091fc:	3fe00000 	.word	0x3fe00000
 8009200:	000fffff 	.word	0x000fffff
 8009204:	7ff00000 	.word	0x7ff00000
 8009208:	7fefffff 	.word	0x7fefffff
 800920c:	3ff00000 	.word	0x3ff00000
 8009210:	3fe00000 	.word	0x3fe00000
 8009214:	7fe00000 	.word	0x7fe00000
 8009218:	7c9fffff 	.word	0x7c9fffff
 800921c:	9b08      	ldr	r3, [sp, #32]
 800921e:	b323      	cbz	r3, 800926a <_strtod_l+0xb5a>
 8009220:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009224:	d821      	bhi.n	800926a <_strtod_l+0xb5a>
 8009226:	a328      	add	r3, pc, #160	@ (adr r3, 80092c8 <_strtod_l+0xbb8>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	4630      	mov	r0, r6
 800922e:	4639      	mov	r1, r7
 8009230:	f7f7 fc66 	bl	8000b00 <__aeabi_dcmple>
 8009234:	b1a0      	cbz	r0, 8009260 <_strtod_l+0xb50>
 8009236:	4639      	mov	r1, r7
 8009238:	4630      	mov	r0, r6
 800923a:	f7f7 fcbd 	bl	8000bb8 <__aeabi_d2uiz>
 800923e:	2801      	cmp	r0, #1
 8009240:	bf38      	it	cc
 8009242:	2001      	movcc	r0, #1
 8009244:	f7f7 f966 	bl	8000514 <__aeabi_ui2d>
 8009248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800924a:	4606      	mov	r6, r0
 800924c:	460f      	mov	r7, r1
 800924e:	b9fb      	cbnz	r3, 8009290 <_strtod_l+0xb80>
 8009250:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009254:	9014      	str	r0, [sp, #80]	@ 0x50
 8009256:	9315      	str	r3, [sp, #84]	@ 0x54
 8009258:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800925c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009260:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009262:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009266:	1b5b      	subs	r3, r3, r5
 8009268:	9311      	str	r3, [sp, #68]	@ 0x44
 800926a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800926e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009272:	f7ff f8f1 	bl	8008458 <__ulp>
 8009276:	4650      	mov	r0, sl
 8009278:	ec53 2b10 	vmov	r2, r3, d0
 800927c:	4659      	mov	r1, fp
 800927e:	f7f7 f9c3 	bl	8000608 <__aeabi_dmul>
 8009282:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009286:	f7f7 f809 	bl	800029c <__adddf3>
 800928a:	4682      	mov	sl, r0
 800928c:	468b      	mov	fp, r1
 800928e:	e770      	b.n	8009172 <_strtod_l+0xa62>
 8009290:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009294:	e7e0      	b.n	8009258 <_strtod_l+0xb48>
 8009296:	a30e      	add	r3, pc, #56	@ (adr r3, 80092d0 <_strtod_l+0xbc0>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f7 fc26 	bl	8000aec <__aeabi_dcmplt>
 80092a0:	e798      	b.n	80091d4 <_strtod_l+0xac4>
 80092a2:	2300      	movs	r3, #0
 80092a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80092a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	f7ff ba6d 	b.w	800878a <_strtod_l+0x7a>
 80092b0:	2a65      	cmp	r2, #101	@ 0x65
 80092b2:	f43f ab66 	beq.w	8008982 <_strtod_l+0x272>
 80092b6:	2a45      	cmp	r2, #69	@ 0x45
 80092b8:	f43f ab63 	beq.w	8008982 <_strtod_l+0x272>
 80092bc:	2301      	movs	r3, #1
 80092be:	f7ff bb9e 	b.w	80089fe <_strtod_l+0x2ee>
 80092c2:	bf00      	nop
 80092c4:	f3af 8000 	nop.w
 80092c8:	ffc00000 	.word	0xffc00000
 80092cc:	41dfffff 	.word	0x41dfffff
 80092d0:	94a03595 	.word	0x94a03595
 80092d4:	3fcfffff 	.word	0x3fcfffff

080092d8 <_strtod_r>:
 80092d8:	4b01      	ldr	r3, [pc, #4]	@ (80092e0 <_strtod_r+0x8>)
 80092da:	f7ff ba19 	b.w	8008710 <_strtod_l>
 80092de:	bf00      	nop
 80092e0:	200000b4 	.word	0x200000b4

080092e4 <_strtol_l.constprop.0>:
 80092e4:	2b24      	cmp	r3, #36	@ 0x24
 80092e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ea:	4686      	mov	lr, r0
 80092ec:	4690      	mov	r8, r2
 80092ee:	d801      	bhi.n	80092f4 <_strtol_l.constprop.0+0x10>
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d106      	bne.n	8009302 <_strtol_l.constprop.0+0x1e>
 80092f4:	f7fd fdbc 	bl	8006e70 <__errno>
 80092f8:	2316      	movs	r3, #22
 80092fa:	6003      	str	r3, [r0, #0]
 80092fc:	2000      	movs	r0, #0
 80092fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009302:	4834      	ldr	r0, [pc, #208]	@ (80093d4 <_strtol_l.constprop.0+0xf0>)
 8009304:	460d      	mov	r5, r1
 8009306:	462a      	mov	r2, r5
 8009308:	f815 4b01 	ldrb.w	r4, [r5], #1
 800930c:	5d06      	ldrb	r6, [r0, r4]
 800930e:	f016 0608 	ands.w	r6, r6, #8
 8009312:	d1f8      	bne.n	8009306 <_strtol_l.constprop.0+0x22>
 8009314:	2c2d      	cmp	r4, #45	@ 0x2d
 8009316:	d12d      	bne.n	8009374 <_strtol_l.constprop.0+0x90>
 8009318:	782c      	ldrb	r4, [r5, #0]
 800931a:	2601      	movs	r6, #1
 800931c:	1c95      	adds	r5, r2, #2
 800931e:	f033 0210 	bics.w	r2, r3, #16
 8009322:	d109      	bne.n	8009338 <_strtol_l.constprop.0+0x54>
 8009324:	2c30      	cmp	r4, #48	@ 0x30
 8009326:	d12a      	bne.n	800937e <_strtol_l.constprop.0+0x9a>
 8009328:	782a      	ldrb	r2, [r5, #0]
 800932a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800932e:	2a58      	cmp	r2, #88	@ 0x58
 8009330:	d125      	bne.n	800937e <_strtol_l.constprop.0+0x9a>
 8009332:	786c      	ldrb	r4, [r5, #1]
 8009334:	2310      	movs	r3, #16
 8009336:	3502      	adds	r5, #2
 8009338:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800933c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009340:	2200      	movs	r2, #0
 8009342:	fbbc f9f3 	udiv	r9, ip, r3
 8009346:	4610      	mov	r0, r2
 8009348:	fb03 ca19 	mls	sl, r3, r9, ip
 800934c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009350:	2f09      	cmp	r7, #9
 8009352:	d81b      	bhi.n	800938c <_strtol_l.constprop.0+0xa8>
 8009354:	463c      	mov	r4, r7
 8009356:	42a3      	cmp	r3, r4
 8009358:	dd27      	ble.n	80093aa <_strtol_l.constprop.0+0xc6>
 800935a:	1c57      	adds	r7, r2, #1
 800935c:	d007      	beq.n	800936e <_strtol_l.constprop.0+0x8a>
 800935e:	4581      	cmp	r9, r0
 8009360:	d320      	bcc.n	80093a4 <_strtol_l.constprop.0+0xc0>
 8009362:	d101      	bne.n	8009368 <_strtol_l.constprop.0+0x84>
 8009364:	45a2      	cmp	sl, r4
 8009366:	db1d      	blt.n	80093a4 <_strtol_l.constprop.0+0xc0>
 8009368:	fb00 4003 	mla	r0, r0, r3, r4
 800936c:	2201      	movs	r2, #1
 800936e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009372:	e7eb      	b.n	800934c <_strtol_l.constprop.0+0x68>
 8009374:	2c2b      	cmp	r4, #43	@ 0x2b
 8009376:	bf04      	itt	eq
 8009378:	782c      	ldrbeq	r4, [r5, #0]
 800937a:	1c95      	addeq	r5, r2, #2
 800937c:	e7cf      	b.n	800931e <_strtol_l.constprop.0+0x3a>
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1da      	bne.n	8009338 <_strtol_l.constprop.0+0x54>
 8009382:	2c30      	cmp	r4, #48	@ 0x30
 8009384:	bf0c      	ite	eq
 8009386:	2308      	moveq	r3, #8
 8009388:	230a      	movne	r3, #10
 800938a:	e7d5      	b.n	8009338 <_strtol_l.constprop.0+0x54>
 800938c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009390:	2f19      	cmp	r7, #25
 8009392:	d801      	bhi.n	8009398 <_strtol_l.constprop.0+0xb4>
 8009394:	3c37      	subs	r4, #55	@ 0x37
 8009396:	e7de      	b.n	8009356 <_strtol_l.constprop.0+0x72>
 8009398:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800939c:	2f19      	cmp	r7, #25
 800939e:	d804      	bhi.n	80093aa <_strtol_l.constprop.0+0xc6>
 80093a0:	3c57      	subs	r4, #87	@ 0x57
 80093a2:	e7d8      	b.n	8009356 <_strtol_l.constprop.0+0x72>
 80093a4:	f04f 32ff 	mov.w	r2, #4294967295
 80093a8:	e7e1      	b.n	800936e <_strtol_l.constprop.0+0x8a>
 80093aa:	1c53      	adds	r3, r2, #1
 80093ac:	d108      	bne.n	80093c0 <_strtol_l.constprop.0+0xdc>
 80093ae:	2322      	movs	r3, #34	@ 0x22
 80093b0:	f8ce 3000 	str.w	r3, [lr]
 80093b4:	4660      	mov	r0, ip
 80093b6:	f1b8 0f00 	cmp.w	r8, #0
 80093ba:	d0a0      	beq.n	80092fe <_strtol_l.constprop.0+0x1a>
 80093bc:	1e69      	subs	r1, r5, #1
 80093be:	e006      	b.n	80093ce <_strtol_l.constprop.0+0xea>
 80093c0:	b106      	cbz	r6, 80093c4 <_strtol_l.constprop.0+0xe0>
 80093c2:	4240      	negs	r0, r0
 80093c4:	f1b8 0f00 	cmp.w	r8, #0
 80093c8:	d099      	beq.n	80092fe <_strtol_l.constprop.0+0x1a>
 80093ca:	2a00      	cmp	r2, #0
 80093cc:	d1f6      	bne.n	80093bc <_strtol_l.constprop.0+0xd8>
 80093ce:	f8c8 1000 	str.w	r1, [r8]
 80093d2:	e794      	b.n	80092fe <_strtol_l.constprop.0+0x1a>
 80093d4:	0800c531 	.word	0x0800c531

080093d8 <_strtol_r>:
 80093d8:	f7ff bf84 	b.w	80092e4 <_strtol_l.constprop.0>

080093dc <__ssputs_r>:
 80093dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e0:	688e      	ldr	r6, [r1, #8]
 80093e2:	461f      	mov	r7, r3
 80093e4:	42be      	cmp	r6, r7
 80093e6:	680b      	ldr	r3, [r1, #0]
 80093e8:	4682      	mov	sl, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	4690      	mov	r8, r2
 80093ee:	d82d      	bhi.n	800944c <__ssputs_r+0x70>
 80093f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093f8:	d026      	beq.n	8009448 <__ssputs_r+0x6c>
 80093fa:	6965      	ldr	r5, [r4, #20]
 80093fc:	6909      	ldr	r1, [r1, #16]
 80093fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009402:	eba3 0901 	sub.w	r9, r3, r1
 8009406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800940a:	1c7b      	adds	r3, r7, #1
 800940c:	444b      	add	r3, r9
 800940e:	106d      	asrs	r5, r5, #1
 8009410:	429d      	cmp	r5, r3
 8009412:	bf38      	it	cc
 8009414:	461d      	movcc	r5, r3
 8009416:	0553      	lsls	r3, r2, #21
 8009418:	d527      	bpl.n	800946a <__ssputs_r+0x8e>
 800941a:	4629      	mov	r1, r5
 800941c:	f7fe fc1c 	bl	8007c58 <_malloc_r>
 8009420:	4606      	mov	r6, r0
 8009422:	b360      	cbz	r0, 800947e <__ssputs_r+0xa2>
 8009424:	6921      	ldr	r1, [r4, #16]
 8009426:	464a      	mov	r2, r9
 8009428:	f000 fd94 	bl	8009f54 <memcpy>
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009436:	81a3      	strh	r3, [r4, #12]
 8009438:	6126      	str	r6, [r4, #16]
 800943a:	6165      	str	r5, [r4, #20]
 800943c:	444e      	add	r6, r9
 800943e:	eba5 0509 	sub.w	r5, r5, r9
 8009442:	6026      	str	r6, [r4, #0]
 8009444:	60a5      	str	r5, [r4, #8]
 8009446:	463e      	mov	r6, r7
 8009448:	42be      	cmp	r6, r7
 800944a:	d900      	bls.n	800944e <__ssputs_r+0x72>
 800944c:	463e      	mov	r6, r7
 800944e:	6820      	ldr	r0, [r4, #0]
 8009450:	4632      	mov	r2, r6
 8009452:	4641      	mov	r1, r8
 8009454:	f000 fd53 	bl	8009efe <memmove>
 8009458:	68a3      	ldr	r3, [r4, #8]
 800945a:	1b9b      	subs	r3, r3, r6
 800945c:	60a3      	str	r3, [r4, #8]
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	4433      	add	r3, r6
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	2000      	movs	r0, #0
 8009466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800946a:	462a      	mov	r2, r5
 800946c:	f001 f905 	bl	800a67a <_realloc_r>
 8009470:	4606      	mov	r6, r0
 8009472:	2800      	cmp	r0, #0
 8009474:	d1e0      	bne.n	8009438 <__ssputs_r+0x5c>
 8009476:	6921      	ldr	r1, [r4, #16]
 8009478:	4650      	mov	r0, sl
 800947a:	f7fe fb79 	bl	8007b70 <_free_r>
 800947e:	230c      	movs	r3, #12
 8009480:	f8ca 3000 	str.w	r3, [sl]
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	e7e9      	b.n	8009466 <__ssputs_r+0x8a>
	...

08009494 <_svfiprintf_r>:
 8009494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	4698      	mov	r8, r3
 800949a:	898b      	ldrh	r3, [r1, #12]
 800949c:	061b      	lsls	r3, r3, #24
 800949e:	b09d      	sub	sp, #116	@ 0x74
 80094a0:	4607      	mov	r7, r0
 80094a2:	460d      	mov	r5, r1
 80094a4:	4614      	mov	r4, r2
 80094a6:	d510      	bpl.n	80094ca <_svfiprintf_r+0x36>
 80094a8:	690b      	ldr	r3, [r1, #16]
 80094aa:	b973      	cbnz	r3, 80094ca <_svfiprintf_r+0x36>
 80094ac:	2140      	movs	r1, #64	@ 0x40
 80094ae:	f7fe fbd3 	bl	8007c58 <_malloc_r>
 80094b2:	6028      	str	r0, [r5, #0]
 80094b4:	6128      	str	r0, [r5, #16]
 80094b6:	b930      	cbnz	r0, 80094c6 <_svfiprintf_r+0x32>
 80094b8:	230c      	movs	r3, #12
 80094ba:	603b      	str	r3, [r7, #0]
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	b01d      	add	sp, #116	@ 0x74
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	2340      	movs	r3, #64	@ 0x40
 80094c8:	616b      	str	r3, [r5, #20]
 80094ca:	2300      	movs	r3, #0
 80094cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ce:	2320      	movs	r3, #32
 80094d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80094d8:	2330      	movs	r3, #48	@ 0x30
 80094da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009678 <_svfiprintf_r+0x1e4>
 80094de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094e2:	f04f 0901 	mov.w	r9, #1
 80094e6:	4623      	mov	r3, r4
 80094e8:	469a      	mov	sl, r3
 80094ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ee:	b10a      	cbz	r2, 80094f4 <_svfiprintf_r+0x60>
 80094f0:	2a25      	cmp	r2, #37	@ 0x25
 80094f2:	d1f9      	bne.n	80094e8 <_svfiprintf_r+0x54>
 80094f4:	ebba 0b04 	subs.w	fp, sl, r4
 80094f8:	d00b      	beq.n	8009512 <_svfiprintf_r+0x7e>
 80094fa:	465b      	mov	r3, fp
 80094fc:	4622      	mov	r2, r4
 80094fe:	4629      	mov	r1, r5
 8009500:	4638      	mov	r0, r7
 8009502:	f7ff ff6b 	bl	80093dc <__ssputs_r>
 8009506:	3001      	adds	r0, #1
 8009508:	f000 80a7 	beq.w	800965a <_svfiprintf_r+0x1c6>
 800950c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800950e:	445a      	add	r2, fp
 8009510:	9209      	str	r2, [sp, #36]	@ 0x24
 8009512:	f89a 3000 	ldrb.w	r3, [sl]
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 809f 	beq.w	800965a <_svfiprintf_r+0x1c6>
 800951c:	2300      	movs	r3, #0
 800951e:	f04f 32ff 	mov.w	r2, #4294967295
 8009522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009526:	f10a 0a01 	add.w	sl, sl, #1
 800952a:	9304      	str	r3, [sp, #16]
 800952c:	9307      	str	r3, [sp, #28]
 800952e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009532:	931a      	str	r3, [sp, #104]	@ 0x68
 8009534:	4654      	mov	r4, sl
 8009536:	2205      	movs	r2, #5
 8009538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800953c:	484e      	ldr	r0, [pc, #312]	@ (8009678 <_svfiprintf_r+0x1e4>)
 800953e:	f7f6 fe4f 	bl	80001e0 <memchr>
 8009542:	9a04      	ldr	r2, [sp, #16]
 8009544:	b9d8      	cbnz	r0, 800957e <_svfiprintf_r+0xea>
 8009546:	06d0      	lsls	r0, r2, #27
 8009548:	bf44      	itt	mi
 800954a:	2320      	movmi	r3, #32
 800954c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009550:	0711      	lsls	r1, r2, #28
 8009552:	bf44      	itt	mi
 8009554:	232b      	movmi	r3, #43	@ 0x2b
 8009556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800955a:	f89a 3000 	ldrb.w	r3, [sl]
 800955e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009560:	d015      	beq.n	800958e <_svfiprintf_r+0xfa>
 8009562:	9a07      	ldr	r2, [sp, #28]
 8009564:	4654      	mov	r4, sl
 8009566:	2000      	movs	r0, #0
 8009568:	f04f 0c0a 	mov.w	ip, #10
 800956c:	4621      	mov	r1, r4
 800956e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009572:	3b30      	subs	r3, #48	@ 0x30
 8009574:	2b09      	cmp	r3, #9
 8009576:	d94b      	bls.n	8009610 <_svfiprintf_r+0x17c>
 8009578:	b1b0      	cbz	r0, 80095a8 <_svfiprintf_r+0x114>
 800957a:	9207      	str	r2, [sp, #28]
 800957c:	e014      	b.n	80095a8 <_svfiprintf_r+0x114>
 800957e:	eba0 0308 	sub.w	r3, r0, r8
 8009582:	fa09 f303 	lsl.w	r3, r9, r3
 8009586:	4313      	orrs	r3, r2
 8009588:	9304      	str	r3, [sp, #16]
 800958a:	46a2      	mov	sl, r4
 800958c:	e7d2      	b.n	8009534 <_svfiprintf_r+0xa0>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	1d19      	adds	r1, r3, #4
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	9103      	str	r1, [sp, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	bfbb      	ittet	lt
 800959a:	425b      	neglt	r3, r3
 800959c:	f042 0202 	orrlt.w	r2, r2, #2
 80095a0:	9307      	strge	r3, [sp, #28]
 80095a2:	9307      	strlt	r3, [sp, #28]
 80095a4:	bfb8      	it	lt
 80095a6:	9204      	strlt	r2, [sp, #16]
 80095a8:	7823      	ldrb	r3, [r4, #0]
 80095aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80095ac:	d10a      	bne.n	80095c4 <_svfiprintf_r+0x130>
 80095ae:	7863      	ldrb	r3, [r4, #1]
 80095b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80095b2:	d132      	bne.n	800961a <_svfiprintf_r+0x186>
 80095b4:	9b03      	ldr	r3, [sp, #12]
 80095b6:	1d1a      	adds	r2, r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	9203      	str	r2, [sp, #12]
 80095bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095c0:	3402      	adds	r4, #2
 80095c2:	9305      	str	r3, [sp, #20]
 80095c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009688 <_svfiprintf_r+0x1f4>
 80095c8:	7821      	ldrb	r1, [r4, #0]
 80095ca:	2203      	movs	r2, #3
 80095cc:	4650      	mov	r0, sl
 80095ce:	f7f6 fe07 	bl	80001e0 <memchr>
 80095d2:	b138      	cbz	r0, 80095e4 <_svfiprintf_r+0x150>
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	eba0 000a 	sub.w	r0, r0, sl
 80095da:	2240      	movs	r2, #64	@ 0x40
 80095dc:	4082      	lsls	r2, r0
 80095de:	4313      	orrs	r3, r2
 80095e0:	3401      	adds	r4, #1
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e8:	4824      	ldr	r0, [pc, #144]	@ (800967c <_svfiprintf_r+0x1e8>)
 80095ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095ee:	2206      	movs	r2, #6
 80095f0:	f7f6 fdf6 	bl	80001e0 <memchr>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d036      	beq.n	8009666 <_svfiprintf_r+0x1d2>
 80095f8:	4b21      	ldr	r3, [pc, #132]	@ (8009680 <_svfiprintf_r+0x1ec>)
 80095fa:	bb1b      	cbnz	r3, 8009644 <_svfiprintf_r+0x1b0>
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	3307      	adds	r3, #7
 8009600:	f023 0307 	bic.w	r3, r3, #7
 8009604:	3308      	adds	r3, #8
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800960a:	4433      	add	r3, r6
 800960c:	9309      	str	r3, [sp, #36]	@ 0x24
 800960e:	e76a      	b.n	80094e6 <_svfiprintf_r+0x52>
 8009610:	fb0c 3202 	mla	r2, ip, r2, r3
 8009614:	460c      	mov	r4, r1
 8009616:	2001      	movs	r0, #1
 8009618:	e7a8      	b.n	800956c <_svfiprintf_r+0xd8>
 800961a:	2300      	movs	r3, #0
 800961c:	3401      	adds	r4, #1
 800961e:	9305      	str	r3, [sp, #20]
 8009620:	4619      	mov	r1, r3
 8009622:	f04f 0c0a 	mov.w	ip, #10
 8009626:	4620      	mov	r0, r4
 8009628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800962c:	3a30      	subs	r2, #48	@ 0x30
 800962e:	2a09      	cmp	r2, #9
 8009630:	d903      	bls.n	800963a <_svfiprintf_r+0x1a6>
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0c6      	beq.n	80095c4 <_svfiprintf_r+0x130>
 8009636:	9105      	str	r1, [sp, #20]
 8009638:	e7c4      	b.n	80095c4 <_svfiprintf_r+0x130>
 800963a:	fb0c 2101 	mla	r1, ip, r1, r2
 800963e:	4604      	mov	r4, r0
 8009640:	2301      	movs	r3, #1
 8009642:	e7f0      	b.n	8009626 <_svfiprintf_r+0x192>
 8009644:	ab03      	add	r3, sp, #12
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	462a      	mov	r2, r5
 800964a:	4b0e      	ldr	r3, [pc, #56]	@ (8009684 <_svfiprintf_r+0x1f0>)
 800964c:	a904      	add	r1, sp, #16
 800964e:	4638      	mov	r0, r7
 8009650:	f7fc fc8c 	bl	8005f6c <_printf_float>
 8009654:	1c42      	adds	r2, r0, #1
 8009656:	4606      	mov	r6, r0
 8009658:	d1d6      	bne.n	8009608 <_svfiprintf_r+0x174>
 800965a:	89ab      	ldrh	r3, [r5, #12]
 800965c:	065b      	lsls	r3, r3, #25
 800965e:	f53f af2d 	bmi.w	80094bc <_svfiprintf_r+0x28>
 8009662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009664:	e72c      	b.n	80094c0 <_svfiprintf_r+0x2c>
 8009666:	ab03      	add	r3, sp, #12
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	462a      	mov	r2, r5
 800966c:	4b05      	ldr	r3, [pc, #20]	@ (8009684 <_svfiprintf_r+0x1f0>)
 800966e:	a904      	add	r1, sp, #16
 8009670:	4638      	mov	r0, r7
 8009672:	f7fc ff13 	bl	800649c <_printf_i>
 8009676:	e7ed      	b.n	8009654 <_svfiprintf_r+0x1c0>
 8009678:	0800c631 	.word	0x0800c631
 800967c:	0800c63b 	.word	0x0800c63b
 8009680:	08005f6d 	.word	0x08005f6d
 8009684:	080093dd 	.word	0x080093dd
 8009688:	0800c637 	.word	0x0800c637

0800968c <_sungetc_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	1c4b      	adds	r3, r1, #1
 8009690:	4614      	mov	r4, r2
 8009692:	d103      	bne.n	800969c <_sungetc_r+0x10>
 8009694:	f04f 35ff 	mov.w	r5, #4294967295
 8009698:	4628      	mov	r0, r5
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	8993      	ldrh	r3, [r2, #12]
 800969e:	f023 0320 	bic.w	r3, r3, #32
 80096a2:	8193      	strh	r3, [r2, #12]
 80096a4:	6853      	ldr	r3, [r2, #4]
 80096a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80096a8:	b2cd      	uxtb	r5, r1
 80096aa:	b18a      	cbz	r2, 80096d0 <_sungetc_r+0x44>
 80096ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80096ae:	429a      	cmp	r2, r3
 80096b0:	dd08      	ble.n	80096c4 <_sungetc_r+0x38>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	1e5a      	subs	r2, r3, #1
 80096b6:	6022      	str	r2, [r4, #0]
 80096b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80096bc:	6863      	ldr	r3, [r4, #4]
 80096be:	3301      	adds	r3, #1
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	e7e9      	b.n	8009698 <_sungetc_r+0xc>
 80096c4:	4621      	mov	r1, r4
 80096c6:	f000 fbe0 	bl	8009e8a <__submore>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d0f1      	beq.n	80096b2 <_sungetc_r+0x26>
 80096ce:	e7e1      	b.n	8009694 <_sungetc_r+0x8>
 80096d0:	6921      	ldr	r1, [r4, #16]
 80096d2:	6822      	ldr	r2, [r4, #0]
 80096d4:	b141      	cbz	r1, 80096e8 <_sungetc_r+0x5c>
 80096d6:	4291      	cmp	r1, r2
 80096d8:	d206      	bcs.n	80096e8 <_sungetc_r+0x5c>
 80096da:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80096de:	42a9      	cmp	r1, r5
 80096e0:	d102      	bne.n	80096e8 <_sungetc_r+0x5c>
 80096e2:	3a01      	subs	r2, #1
 80096e4:	6022      	str	r2, [r4, #0]
 80096e6:	e7ea      	b.n	80096be <_sungetc_r+0x32>
 80096e8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80096ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80096f2:	2303      	movs	r3, #3
 80096f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80096f6:	4623      	mov	r3, r4
 80096f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	2301      	movs	r3, #1
 8009700:	e7de      	b.n	80096c0 <_sungetc_r+0x34>

08009702 <__ssrefill_r>:
 8009702:	b510      	push	{r4, lr}
 8009704:	460c      	mov	r4, r1
 8009706:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009708:	b169      	cbz	r1, 8009726 <__ssrefill_r+0x24>
 800970a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800970e:	4299      	cmp	r1, r3
 8009710:	d001      	beq.n	8009716 <__ssrefill_r+0x14>
 8009712:	f7fe fa2d 	bl	8007b70 <_free_r>
 8009716:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009718:	6063      	str	r3, [r4, #4]
 800971a:	2000      	movs	r0, #0
 800971c:	6360      	str	r0, [r4, #52]	@ 0x34
 800971e:	b113      	cbz	r3, 8009726 <__ssrefill_r+0x24>
 8009720:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009722:	6023      	str	r3, [r4, #0]
 8009724:	bd10      	pop	{r4, pc}
 8009726:	6923      	ldr	r3, [r4, #16]
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	2300      	movs	r3, #0
 800972c:	6063      	str	r3, [r4, #4]
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	f043 0320 	orr.w	r3, r3, #32
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	f04f 30ff 	mov.w	r0, #4294967295
 800973a:	e7f3      	b.n	8009724 <__ssrefill_r+0x22>

0800973c <__ssvfiscanf_r>:
 800973c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009740:	460c      	mov	r4, r1
 8009742:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009746:	2100      	movs	r1, #0
 8009748:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800974c:	49a5      	ldr	r1, [pc, #660]	@ (80099e4 <__ssvfiscanf_r+0x2a8>)
 800974e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009750:	f10d 0804 	add.w	r8, sp, #4
 8009754:	49a4      	ldr	r1, [pc, #656]	@ (80099e8 <__ssvfiscanf_r+0x2ac>)
 8009756:	4fa5      	ldr	r7, [pc, #660]	@ (80099ec <__ssvfiscanf_r+0x2b0>)
 8009758:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800975c:	4606      	mov	r6, r0
 800975e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	7813      	ldrb	r3, [r2, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 8158 	beq.w	8009a1a <__ssvfiscanf_r+0x2de>
 800976a:	5cf9      	ldrb	r1, [r7, r3]
 800976c:	f011 0108 	ands.w	r1, r1, #8
 8009770:	f102 0501 	add.w	r5, r2, #1
 8009774:	d019      	beq.n	80097aa <__ssvfiscanf_r+0x6e>
 8009776:	6863      	ldr	r3, [r4, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	dd0f      	ble.n	800979c <__ssvfiscanf_r+0x60>
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	781a      	ldrb	r2, [r3, #0]
 8009780:	5cba      	ldrb	r2, [r7, r2]
 8009782:	0712      	lsls	r2, r2, #28
 8009784:	d401      	bmi.n	800978a <__ssvfiscanf_r+0x4e>
 8009786:	462a      	mov	r2, r5
 8009788:	e7eb      	b.n	8009762 <__ssvfiscanf_r+0x26>
 800978a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800978c:	3201      	adds	r2, #1
 800978e:	9245      	str	r2, [sp, #276]	@ 0x114
 8009790:	6862      	ldr	r2, [r4, #4]
 8009792:	3301      	adds	r3, #1
 8009794:	3a01      	subs	r2, #1
 8009796:	6062      	str	r2, [r4, #4]
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	e7ec      	b.n	8009776 <__ssvfiscanf_r+0x3a>
 800979c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800979e:	4621      	mov	r1, r4
 80097a0:	4630      	mov	r0, r6
 80097a2:	4798      	blx	r3
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d0e9      	beq.n	800977c <__ssvfiscanf_r+0x40>
 80097a8:	e7ed      	b.n	8009786 <__ssvfiscanf_r+0x4a>
 80097aa:	2b25      	cmp	r3, #37	@ 0x25
 80097ac:	d012      	beq.n	80097d4 <__ssvfiscanf_r+0x98>
 80097ae:	4699      	mov	r9, r3
 80097b0:	6863      	ldr	r3, [r4, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f340 8093 	ble.w	80098de <__ssvfiscanf_r+0x1a2>
 80097b8:	6822      	ldr	r2, [r4, #0]
 80097ba:	7813      	ldrb	r3, [r2, #0]
 80097bc:	454b      	cmp	r3, r9
 80097be:	f040 812c 	bne.w	8009a1a <__ssvfiscanf_r+0x2de>
 80097c2:	6863      	ldr	r3, [r4, #4]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	6063      	str	r3, [r4, #4]
 80097c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80097ca:	3201      	adds	r2, #1
 80097cc:	3301      	adds	r3, #1
 80097ce:	6022      	str	r2, [r4, #0]
 80097d0:	9345      	str	r3, [sp, #276]	@ 0x114
 80097d2:	e7d8      	b.n	8009786 <__ssvfiscanf_r+0x4a>
 80097d4:	9141      	str	r1, [sp, #260]	@ 0x104
 80097d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80097d8:	7853      	ldrb	r3, [r2, #1]
 80097da:	2b2a      	cmp	r3, #42	@ 0x2a
 80097dc:	bf02      	ittt	eq
 80097de:	2310      	moveq	r3, #16
 80097e0:	1c95      	addeq	r5, r2, #2
 80097e2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80097e4:	220a      	movs	r2, #10
 80097e6:	46a9      	mov	r9, r5
 80097e8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80097ec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80097f0:	2b09      	cmp	r3, #9
 80097f2:	d91e      	bls.n	8009832 <__ssvfiscanf_r+0xf6>
 80097f4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80099f0 <__ssvfiscanf_r+0x2b4>
 80097f8:	2203      	movs	r2, #3
 80097fa:	4650      	mov	r0, sl
 80097fc:	f7f6 fcf0 	bl	80001e0 <memchr>
 8009800:	b138      	cbz	r0, 8009812 <__ssvfiscanf_r+0xd6>
 8009802:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009804:	eba0 000a 	sub.w	r0, r0, sl
 8009808:	2301      	movs	r3, #1
 800980a:	4083      	lsls	r3, r0
 800980c:	4313      	orrs	r3, r2
 800980e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009810:	464d      	mov	r5, r9
 8009812:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009816:	2b78      	cmp	r3, #120	@ 0x78
 8009818:	d806      	bhi.n	8009828 <__ssvfiscanf_r+0xec>
 800981a:	2b57      	cmp	r3, #87	@ 0x57
 800981c:	d810      	bhi.n	8009840 <__ssvfiscanf_r+0x104>
 800981e:	2b25      	cmp	r3, #37	@ 0x25
 8009820:	d0c5      	beq.n	80097ae <__ssvfiscanf_r+0x72>
 8009822:	d857      	bhi.n	80098d4 <__ssvfiscanf_r+0x198>
 8009824:	2b00      	cmp	r3, #0
 8009826:	d065      	beq.n	80098f4 <__ssvfiscanf_r+0x1b8>
 8009828:	2303      	movs	r3, #3
 800982a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800982c:	230a      	movs	r3, #10
 800982e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009830:	e078      	b.n	8009924 <__ssvfiscanf_r+0x1e8>
 8009832:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009834:	fb02 1103 	mla	r1, r2, r3, r1
 8009838:	3930      	subs	r1, #48	@ 0x30
 800983a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800983c:	464d      	mov	r5, r9
 800983e:	e7d2      	b.n	80097e6 <__ssvfiscanf_r+0xaa>
 8009840:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009844:	2a20      	cmp	r2, #32
 8009846:	d8ef      	bhi.n	8009828 <__ssvfiscanf_r+0xec>
 8009848:	a101      	add	r1, pc, #4	@ (adr r1, 8009850 <__ssvfiscanf_r+0x114>)
 800984a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800984e:	bf00      	nop
 8009850:	08009903 	.word	0x08009903
 8009854:	08009829 	.word	0x08009829
 8009858:	08009829 	.word	0x08009829
 800985c:	0800995d 	.word	0x0800995d
 8009860:	08009829 	.word	0x08009829
 8009864:	08009829 	.word	0x08009829
 8009868:	08009829 	.word	0x08009829
 800986c:	08009829 	.word	0x08009829
 8009870:	08009829 	.word	0x08009829
 8009874:	08009829 	.word	0x08009829
 8009878:	08009829 	.word	0x08009829
 800987c:	08009973 	.word	0x08009973
 8009880:	08009959 	.word	0x08009959
 8009884:	080098db 	.word	0x080098db
 8009888:	080098db 	.word	0x080098db
 800988c:	080098db 	.word	0x080098db
 8009890:	08009829 	.word	0x08009829
 8009894:	08009915 	.word	0x08009915
 8009898:	08009829 	.word	0x08009829
 800989c:	08009829 	.word	0x08009829
 80098a0:	08009829 	.word	0x08009829
 80098a4:	08009829 	.word	0x08009829
 80098a8:	08009983 	.word	0x08009983
 80098ac:	0800991d 	.word	0x0800991d
 80098b0:	080098fb 	.word	0x080098fb
 80098b4:	08009829 	.word	0x08009829
 80098b8:	08009829 	.word	0x08009829
 80098bc:	0800997f 	.word	0x0800997f
 80098c0:	08009829 	.word	0x08009829
 80098c4:	08009959 	.word	0x08009959
 80098c8:	08009829 	.word	0x08009829
 80098cc:	08009829 	.word	0x08009829
 80098d0:	08009903 	.word	0x08009903
 80098d4:	3b45      	subs	r3, #69	@ 0x45
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d8a6      	bhi.n	8009828 <__ssvfiscanf_r+0xec>
 80098da:	2305      	movs	r3, #5
 80098dc:	e021      	b.n	8009922 <__ssvfiscanf_r+0x1e6>
 80098de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80098e0:	4621      	mov	r1, r4
 80098e2:	4630      	mov	r0, r6
 80098e4:	4798      	blx	r3
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f43f af66 	beq.w	80097b8 <__ssvfiscanf_r+0x7c>
 80098ec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f040 808b 	bne.w	8009a0a <__ssvfiscanf_r+0x2ce>
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e08b      	b.n	8009a12 <__ssvfiscanf_r+0x2d6>
 80098fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80098fc:	f042 0220 	orr.w	r2, r2, #32
 8009900:	9241      	str	r2, [sp, #260]	@ 0x104
 8009902:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009904:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009908:	9241      	str	r2, [sp, #260]	@ 0x104
 800990a:	2210      	movs	r2, #16
 800990c:	2b6e      	cmp	r3, #110	@ 0x6e
 800990e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009910:	d902      	bls.n	8009918 <__ssvfiscanf_r+0x1dc>
 8009912:	e005      	b.n	8009920 <__ssvfiscanf_r+0x1e4>
 8009914:	2300      	movs	r3, #0
 8009916:	9342      	str	r3, [sp, #264]	@ 0x108
 8009918:	2303      	movs	r3, #3
 800991a:	e002      	b.n	8009922 <__ssvfiscanf_r+0x1e6>
 800991c:	2308      	movs	r3, #8
 800991e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009920:	2304      	movs	r3, #4
 8009922:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009924:	6863      	ldr	r3, [r4, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	dd39      	ble.n	800999e <__ssvfiscanf_r+0x262>
 800992a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800992c:	0659      	lsls	r1, r3, #25
 800992e:	d404      	bmi.n	800993a <__ssvfiscanf_r+0x1fe>
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	781a      	ldrb	r2, [r3, #0]
 8009934:	5cba      	ldrb	r2, [r7, r2]
 8009936:	0712      	lsls	r2, r2, #28
 8009938:	d438      	bmi.n	80099ac <__ssvfiscanf_r+0x270>
 800993a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800993c:	2b02      	cmp	r3, #2
 800993e:	dc47      	bgt.n	80099d0 <__ssvfiscanf_r+0x294>
 8009940:	466b      	mov	r3, sp
 8009942:	4622      	mov	r2, r4
 8009944:	a941      	add	r1, sp, #260	@ 0x104
 8009946:	4630      	mov	r0, r6
 8009948:	f000 f86c 	bl	8009a24 <_scanf_chars>
 800994c:	2801      	cmp	r0, #1
 800994e:	d064      	beq.n	8009a1a <__ssvfiscanf_r+0x2de>
 8009950:	2802      	cmp	r0, #2
 8009952:	f47f af18 	bne.w	8009786 <__ssvfiscanf_r+0x4a>
 8009956:	e7c9      	b.n	80098ec <__ssvfiscanf_r+0x1b0>
 8009958:	220a      	movs	r2, #10
 800995a:	e7d7      	b.n	800990c <__ssvfiscanf_r+0x1d0>
 800995c:	4629      	mov	r1, r5
 800995e:	4640      	mov	r0, r8
 8009960:	f000 fa5a 	bl	8009e18 <__sccl>
 8009964:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800996a:	9341      	str	r3, [sp, #260]	@ 0x104
 800996c:	4605      	mov	r5, r0
 800996e:	2301      	movs	r3, #1
 8009970:	e7d7      	b.n	8009922 <__ssvfiscanf_r+0x1e6>
 8009972:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009978:	9341      	str	r3, [sp, #260]	@ 0x104
 800997a:	2300      	movs	r3, #0
 800997c:	e7d1      	b.n	8009922 <__ssvfiscanf_r+0x1e6>
 800997e:	2302      	movs	r3, #2
 8009980:	e7cf      	b.n	8009922 <__ssvfiscanf_r+0x1e6>
 8009982:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009984:	06c3      	lsls	r3, r0, #27
 8009986:	f53f aefe 	bmi.w	8009786 <__ssvfiscanf_r+0x4a>
 800998a:	9b00      	ldr	r3, [sp, #0]
 800998c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800998e:	1d19      	adds	r1, r3, #4
 8009990:	9100      	str	r1, [sp, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	07c0      	lsls	r0, r0, #31
 8009996:	bf4c      	ite	mi
 8009998:	801a      	strhmi	r2, [r3, #0]
 800999a:	601a      	strpl	r2, [r3, #0]
 800999c:	e6f3      	b.n	8009786 <__ssvfiscanf_r+0x4a>
 800999e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80099a0:	4621      	mov	r1, r4
 80099a2:	4630      	mov	r0, r6
 80099a4:	4798      	blx	r3
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d0bf      	beq.n	800992a <__ssvfiscanf_r+0x1ee>
 80099aa:	e79f      	b.n	80098ec <__ssvfiscanf_r+0x1b0>
 80099ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80099ae:	3201      	adds	r2, #1
 80099b0:	9245      	str	r2, [sp, #276]	@ 0x114
 80099b2:	6862      	ldr	r2, [r4, #4]
 80099b4:	3a01      	subs	r2, #1
 80099b6:	2a00      	cmp	r2, #0
 80099b8:	6062      	str	r2, [r4, #4]
 80099ba:	dd02      	ble.n	80099c2 <__ssvfiscanf_r+0x286>
 80099bc:	3301      	adds	r3, #1
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	e7b6      	b.n	8009930 <__ssvfiscanf_r+0x1f4>
 80099c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80099c4:	4621      	mov	r1, r4
 80099c6:	4630      	mov	r0, r6
 80099c8:	4798      	blx	r3
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d0b0      	beq.n	8009930 <__ssvfiscanf_r+0x1f4>
 80099ce:	e78d      	b.n	80098ec <__ssvfiscanf_r+0x1b0>
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	dc0f      	bgt.n	80099f4 <__ssvfiscanf_r+0x2b8>
 80099d4:	466b      	mov	r3, sp
 80099d6:	4622      	mov	r2, r4
 80099d8:	a941      	add	r1, sp, #260	@ 0x104
 80099da:	4630      	mov	r0, r6
 80099dc:	f000 f87c 	bl	8009ad8 <_scanf_i>
 80099e0:	e7b4      	b.n	800994c <__ssvfiscanf_r+0x210>
 80099e2:	bf00      	nop
 80099e4:	0800968d 	.word	0x0800968d
 80099e8:	08009703 	.word	0x08009703
 80099ec:	0800c531 	.word	0x0800c531
 80099f0:	0800c637 	.word	0x0800c637
 80099f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009a20 <__ssvfiscanf_r+0x2e4>)
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f43f aec5 	beq.w	8009786 <__ssvfiscanf_r+0x4a>
 80099fc:	466b      	mov	r3, sp
 80099fe:	4622      	mov	r2, r4
 8009a00:	a941      	add	r1, sp, #260	@ 0x104
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7fc fe6a 	bl	80066dc <_scanf_float>
 8009a08:	e7a0      	b.n	800994c <__ssvfiscanf_r+0x210>
 8009a0a:	89a3      	ldrh	r3, [r4, #12]
 8009a0c:	065b      	lsls	r3, r3, #25
 8009a0e:	f53f af71 	bmi.w	80098f4 <__ssvfiscanf_r+0x1b8>
 8009a12:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009a1c:	e7f9      	b.n	8009a12 <__ssvfiscanf_r+0x2d6>
 8009a1e:	bf00      	nop
 8009a20:	080066dd 	.word	0x080066dd

08009a24 <_scanf_chars>:
 8009a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a28:	4615      	mov	r5, r2
 8009a2a:	688a      	ldr	r2, [r1, #8]
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b932      	cbnz	r2, 8009a40 <_scanf_chars+0x1c>
 8009a32:	698a      	ldr	r2, [r1, #24]
 8009a34:	2a00      	cmp	r2, #0
 8009a36:	bf14      	ite	ne
 8009a38:	f04f 32ff 	movne.w	r2, #4294967295
 8009a3c:	2201      	moveq	r2, #1
 8009a3e:	608a      	str	r2, [r1, #8]
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009ad4 <_scanf_chars+0xb0>
 8009a46:	06d1      	lsls	r1, r2, #27
 8009a48:	bf5f      	itttt	pl
 8009a4a:	681a      	ldrpl	r2, [r3, #0]
 8009a4c:	1d11      	addpl	r1, r2, #4
 8009a4e:	6019      	strpl	r1, [r3, #0]
 8009a50:	6816      	ldrpl	r6, [r2, #0]
 8009a52:	2700      	movs	r7, #0
 8009a54:	69a0      	ldr	r0, [r4, #24]
 8009a56:	b188      	cbz	r0, 8009a7c <_scanf_chars+0x58>
 8009a58:	2801      	cmp	r0, #1
 8009a5a:	d107      	bne.n	8009a6c <_scanf_chars+0x48>
 8009a5c:	682b      	ldr	r3, [r5, #0]
 8009a5e:	781a      	ldrb	r2, [r3, #0]
 8009a60:	6963      	ldr	r3, [r4, #20]
 8009a62:	5c9b      	ldrb	r3, [r3, r2]
 8009a64:	b953      	cbnz	r3, 8009a7c <_scanf_chars+0x58>
 8009a66:	2f00      	cmp	r7, #0
 8009a68:	d031      	beq.n	8009ace <_scanf_chars+0xaa>
 8009a6a:	e022      	b.n	8009ab2 <_scanf_chars+0x8e>
 8009a6c:	2802      	cmp	r0, #2
 8009a6e:	d120      	bne.n	8009ab2 <_scanf_chars+0x8e>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009a78:	071b      	lsls	r3, r3, #28
 8009a7a:	d41a      	bmi.n	8009ab2 <_scanf_chars+0x8e>
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	06da      	lsls	r2, r3, #27
 8009a80:	bf5e      	ittt	pl
 8009a82:	682b      	ldrpl	r3, [r5, #0]
 8009a84:	781b      	ldrbpl	r3, [r3, #0]
 8009a86:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009a8a:	682a      	ldr	r2, [r5, #0]
 8009a8c:	686b      	ldr	r3, [r5, #4]
 8009a8e:	3201      	adds	r2, #1
 8009a90:	602a      	str	r2, [r5, #0]
 8009a92:	68a2      	ldr	r2, [r4, #8]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	3a01      	subs	r2, #1
 8009a98:	606b      	str	r3, [r5, #4]
 8009a9a:	3701      	adds	r7, #1
 8009a9c:	60a2      	str	r2, [r4, #8]
 8009a9e:	b142      	cbz	r2, 8009ab2 <_scanf_chars+0x8e>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dcd7      	bgt.n	8009a54 <_scanf_chars+0x30>
 8009aa4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4798      	blx	r3
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d0d0      	beq.n	8009a54 <_scanf_chars+0x30>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	f013 0310 	ands.w	r3, r3, #16
 8009ab8:	d105      	bne.n	8009ac6 <_scanf_chars+0xa2>
 8009aba:	68e2      	ldr	r2, [r4, #12]
 8009abc:	3201      	adds	r2, #1
 8009abe:	60e2      	str	r2, [r4, #12]
 8009ac0:	69a2      	ldr	r2, [r4, #24]
 8009ac2:	b102      	cbz	r2, 8009ac6 <_scanf_chars+0xa2>
 8009ac4:	7033      	strb	r3, [r6, #0]
 8009ac6:	6923      	ldr	r3, [r4, #16]
 8009ac8:	443b      	add	r3, r7
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	2000      	movs	r0, #0
 8009ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ad2:	bf00      	nop
 8009ad4:	0800c531 	.word	0x0800c531

08009ad8 <_scanf_i>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	4698      	mov	r8, r3
 8009ade:	4b74      	ldr	r3, [pc, #464]	@ (8009cb0 <_scanf_i+0x1d8>)
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009aea:	b087      	sub	sp, #28
 8009aec:	ab03      	add	r3, sp, #12
 8009aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009af2:	4b70      	ldr	r3, [pc, #448]	@ (8009cb4 <_scanf_i+0x1dc>)
 8009af4:	69a1      	ldr	r1, [r4, #24]
 8009af6:	4a70      	ldr	r2, [pc, #448]	@ (8009cb8 <_scanf_i+0x1e0>)
 8009af8:	2903      	cmp	r1, #3
 8009afa:	bf08      	it	eq
 8009afc:	461a      	moveq	r2, r3
 8009afe:	68a3      	ldr	r3, [r4, #8]
 8009b00:	9201      	str	r2, [sp, #4]
 8009b02:	1e5a      	subs	r2, r3, #1
 8009b04:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009b08:	bf88      	it	hi
 8009b0a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009b0e:	4627      	mov	r7, r4
 8009b10:	bf82      	ittt	hi
 8009b12:	eb03 0905 	addhi.w	r9, r3, r5
 8009b16:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009b1a:	60a3      	strhi	r3, [r4, #8]
 8009b1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009b20:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009b24:	bf98      	it	ls
 8009b26:	f04f 0900 	movls.w	r9, #0
 8009b2a:	6023      	str	r3, [r4, #0]
 8009b2c:	463d      	mov	r5, r7
 8009b2e:	f04f 0b00 	mov.w	fp, #0
 8009b32:	6831      	ldr	r1, [r6, #0]
 8009b34:	ab03      	add	r3, sp, #12
 8009b36:	7809      	ldrb	r1, [r1, #0]
 8009b38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	f7f6 fb4f 	bl	80001e0 <memchr>
 8009b42:	b328      	cbz	r0, 8009b90 <_scanf_i+0xb8>
 8009b44:	f1bb 0f01 	cmp.w	fp, #1
 8009b48:	d159      	bne.n	8009bfe <_scanf_i+0x126>
 8009b4a:	6862      	ldr	r2, [r4, #4]
 8009b4c:	b92a      	cbnz	r2, 8009b5a <_scanf_i+0x82>
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	2108      	movs	r1, #8
 8009b52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b56:	6061      	str	r1, [r4, #4]
 8009b58:	6022      	str	r2, [r4, #0]
 8009b5a:	6822      	ldr	r2, [r4, #0]
 8009b5c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009b60:	6022      	str	r2, [r4, #0]
 8009b62:	68a2      	ldr	r2, [r4, #8]
 8009b64:	1e51      	subs	r1, r2, #1
 8009b66:	60a1      	str	r1, [r4, #8]
 8009b68:	b192      	cbz	r2, 8009b90 <_scanf_i+0xb8>
 8009b6a:	6832      	ldr	r2, [r6, #0]
 8009b6c:	1c51      	adds	r1, r2, #1
 8009b6e:	6031      	str	r1, [r6, #0]
 8009b70:	7812      	ldrb	r2, [r2, #0]
 8009b72:	f805 2b01 	strb.w	r2, [r5], #1
 8009b76:	6872      	ldr	r2, [r6, #4]
 8009b78:	3a01      	subs	r2, #1
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	6072      	str	r2, [r6, #4]
 8009b7e:	dc07      	bgt.n	8009b90 <_scanf_i+0xb8>
 8009b80:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009b84:	4631      	mov	r1, r6
 8009b86:	4650      	mov	r0, sl
 8009b88:	4790      	blx	r2
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	f040 8085 	bne.w	8009c9a <_scanf_i+0x1c2>
 8009b90:	f10b 0b01 	add.w	fp, fp, #1
 8009b94:	f1bb 0f03 	cmp.w	fp, #3
 8009b98:	d1cb      	bne.n	8009b32 <_scanf_i+0x5a>
 8009b9a:	6863      	ldr	r3, [r4, #4]
 8009b9c:	b90b      	cbnz	r3, 8009ba2 <_scanf_i+0xca>
 8009b9e:	230a      	movs	r3, #10
 8009ba0:	6063      	str	r3, [r4, #4]
 8009ba2:	6863      	ldr	r3, [r4, #4]
 8009ba4:	4945      	ldr	r1, [pc, #276]	@ (8009cbc <_scanf_i+0x1e4>)
 8009ba6:	6960      	ldr	r0, [r4, #20]
 8009ba8:	1ac9      	subs	r1, r1, r3
 8009baa:	f000 f935 	bl	8009e18 <__sccl>
 8009bae:	f04f 0b00 	mov.w	fp, #0
 8009bb2:	68a3      	ldr	r3, [r4, #8]
 8009bb4:	6822      	ldr	r2, [r4, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d03d      	beq.n	8009c36 <_scanf_i+0x15e>
 8009bba:	6831      	ldr	r1, [r6, #0]
 8009bbc:	6960      	ldr	r0, [r4, #20]
 8009bbe:	f891 c000 	ldrb.w	ip, [r1]
 8009bc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d035      	beq.n	8009c36 <_scanf_i+0x15e>
 8009bca:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009bce:	d124      	bne.n	8009c1a <_scanf_i+0x142>
 8009bd0:	0510      	lsls	r0, r2, #20
 8009bd2:	d522      	bpl.n	8009c1a <_scanf_i+0x142>
 8009bd4:	f10b 0b01 	add.w	fp, fp, #1
 8009bd8:	f1b9 0f00 	cmp.w	r9, #0
 8009bdc:	d003      	beq.n	8009be6 <_scanf_i+0x10e>
 8009bde:	3301      	adds	r3, #1
 8009be0:	f109 39ff 	add.w	r9, r9, #4294967295
 8009be4:	60a3      	str	r3, [r4, #8]
 8009be6:	6873      	ldr	r3, [r6, #4]
 8009be8:	3b01      	subs	r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	6073      	str	r3, [r6, #4]
 8009bee:	dd1b      	ble.n	8009c28 <_scanf_i+0x150>
 8009bf0:	6833      	ldr	r3, [r6, #0]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	6033      	str	r3, [r6, #0]
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	60a3      	str	r3, [r4, #8]
 8009bfc:	e7d9      	b.n	8009bb2 <_scanf_i+0xda>
 8009bfe:	f1bb 0f02 	cmp.w	fp, #2
 8009c02:	d1ae      	bne.n	8009b62 <_scanf_i+0x8a>
 8009c04:	6822      	ldr	r2, [r4, #0]
 8009c06:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009c0a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009c0e:	d1bf      	bne.n	8009b90 <_scanf_i+0xb8>
 8009c10:	2110      	movs	r1, #16
 8009c12:	6061      	str	r1, [r4, #4]
 8009c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c18:	e7a2      	b.n	8009b60 <_scanf_i+0x88>
 8009c1a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009c1e:	6022      	str	r2, [r4, #0]
 8009c20:	780b      	ldrb	r3, [r1, #0]
 8009c22:	f805 3b01 	strb.w	r3, [r5], #1
 8009c26:	e7de      	b.n	8009be6 <_scanf_i+0x10e>
 8009c28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4650      	mov	r0, sl
 8009c30:	4798      	blx	r3
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d0df      	beq.n	8009bf6 <_scanf_i+0x11e>
 8009c36:	6823      	ldr	r3, [r4, #0]
 8009c38:	05d9      	lsls	r1, r3, #23
 8009c3a:	d50d      	bpl.n	8009c58 <_scanf_i+0x180>
 8009c3c:	42bd      	cmp	r5, r7
 8009c3e:	d909      	bls.n	8009c54 <_scanf_i+0x17c>
 8009c40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009c44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c48:	4632      	mov	r2, r6
 8009c4a:	4650      	mov	r0, sl
 8009c4c:	4798      	blx	r3
 8009c4e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009c52:	464d      	mov	r5, r9
 8009c54:	42bd      	cmp	r5, r7
 8009c56:	d028      	beq.n	8009caa <_scanf_i+0x1d2>
 8009c58:	6822      	ldr	r2, [r4, #0]
 8009c5a:	f012 0210 	ands.w	r2, r2, #16
 8009c5e:	d113      	bne.n	8009c88 <_scanf_i+0x1b0>
 8009c60:	702a      	strb	r2, [r5, #0]
 8009c62:	6863      	ldr	r3, [r4, #4]
 8009c64:	9e01      	ldr	r6, [sp, #4]
 8009c66:	4639      	mov	r1, r7
 8009c68:	4650      	mov	r0, sl
 8009c6a:	47b0      	blx	r6
 8009c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c70:	6821      	ldr	r1, [r4, #0]
 8009c72:	1d1a      	adds	r2, r3, #4
 8009c74:	f8c8 2000 	str.w	r2, [r8]
 8009c78:	f011 0f20 	tst.w	r1, #32
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	d00f      	beq.n	8009ca0 <_scanf_i+0x1c8>
 8009c80:	6018      	str	r0, [r3, #0]
 8009c82:	68e3      	ldr	r3, [r4, #12]
 8009c84:	3301      	adds	r3, #1
 8009c86:	60e3      	str	r3, [r4, #12]
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	1bed      	subs	r5, r5, r7
 8009c8c:	445d      	add	r5, fp
 8009c8e:	442b      	add	r3, r5
 8009c90:	6123      	str	r3, [r4, #16]
 8009c92:	2000      	movs	r0, #0
 8009c94:	b007      	add	sp, #28
 8009c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9a:	f04f 0b00 	mov.w	fp, #0
 8009c9e:	e7ca      	b.n	8009c36 <_scanf_i+0x15e>
 8009ca0:	07ca      	lsls	r2, r1, #31
 8009ca2:	bf4c      	ite	mi
 8009ca4:	8018      	strhmi	r0, [r3, #0]
 8009ca6:	6018      	strpl	r0, [r3, #0]
 8009ca8:	e7eb      	b.n	8009c82 <_scanf_i+0x1aa>
 8009caa:	2001      	movs	r0, #1
 8009cac:	e7f2      	b.n	8009c94 <_scanf_i+0x1bc>
 8009cae:	bf00      	nop
 8009cb0:	0800c294 	.word	0x0800c294
 8009cb4:	080093d9 	.word	0x080093d9
 8009cb8:	0800a7b5 	.word	0x0800a7b5
 8009cbc:	0800c652 	.word	0x0800c652

08009cc0 <__sflush_r>:
 8009cc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc8:	0716      	lsls	r6, r2, #28
 8009cca:	4605      	mov	r5, r0
 8009ccc:	460c      	mov	r4, r1
 8009cce:	d454      	bmi.n	8009d7a <__sflush_r+0xba>
 8009cd0:	684b      	ldr	r3, [r1, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dc02      	bgt.n	8009cdc <__sflush_r+0x1c>
 8009cd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dd48      	ble.n	8009d6e <__sflush_r+0xae>
 8009cdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cde:	2e00      	cmp	r6, #0
 8009ce0:	d045      	beq.n	8009d6e <__sflush_r+0xae>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ce8:	682f      	ldr	r7, [r5, #0]
 8009cea:	6a21      	ldr	r1, [r4, #32]
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	d030      	beq.n	8009d52 <__sflush_r+0x92>
 8009cf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	0759      	lsls	r1, r3, #29
 8009cf6:	d505      	bpl.n	8009d04 <__sflush_r+0x44>
 8009cf8:	6863      	ldr	r3, [r4, #4]
 8009cfa:	1ad2      	subs	r2, r2, r3
 8009cfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cfe:	b10b      	cbz	r3, 8009d04 <__sflush_r+0x44>
 8009d00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d02:	1ad2      	subs	r2, r2, r3
 8009d04:	2300      	movs	r3, #0
 8009d06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d08:	6a21      	ldr	r1, [r4, #32]
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	47b0      	blx	r6
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	d106      	bne.n	8009d22 <__sflush_r+0x62>
 8009d14:	6829      	ldr	r1, [r5, #0]
 8009d16:	291d      	cmp	r1, #29
 8009d18:	d82b      	bhi.n	8009d72 <__sflush_r+0xb2>
 8009d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8009dc4 <__sflush_r+0x104>)
 8009d1c:	410a      	asrs	r2, r1
 8009d1e:	07d6      	lsls	r6, r2, #31
 8009d20:	d427      	bmi.n	8009d72 <__sflush_r+0xb2>
 8009d22:	2200      	movs	r2, #0
 8009d24:	6062      	str	r2, [r4, #4]
 8009d26:	04d9      	lsls	r1, r3, #19
 8009d28:	6922      	ldr	r2, [r4, #16]
 8009d2a:	6022      	str	r2, [r4, #0]
 8009d2c:	d504      	bpl.n	8009d38 <__sflush_r+0x78>
 8009d2e:	1c42      	adds	r2, r0, #1
 8009d30:	d101      	bne.n	8009d36 <__sflush_r+0x76>
 8009d32:	682b      	ldr	r3, [r5, #0]
 8009d34:	b903      	cbnz	r3, 8009d38 <__sflush_r+0x78>
 8009d36:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d3a:	602f      	str	r7, [r5, #0]
 8009d3c:	b1b9      	cbz	r1, 8009d6e <__sflush_r+0xae>
 8009d3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d42:	4299      	cmp	r1, r3
 8009d44:	d002      	beq.n	8009d4c <__sflush_r+0x8c>
 8009d46:	4628      	mov	r0, r5
 8009d48:	f7fd ff12 	bl	8007b70 <_free_r>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d50:	e00d      	b.n	8009d6e <__sflush_r+0xae>
 8009d52:	2301      	movs	r3, #1
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b0      	blx	r6
 8009d58:	4602      	mov	r2, r0
 8009d5a:	1c50      	adds	r0, r2, #1
 8009d5c:	d1c9      	bne.n	8009cf2 <__sflush_r+0x32>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d0c6      	beq.n	8009cf2 <__sflush_r+0x32>
 8009d64:	2b1d      	cmp	r3, #29
 8009d66:	d001      	beq.n	8009d6c <__sflush_r+0xac>
 8009d68:	2b16      	cmp	r3, #22
 8009d6a:	d11e      	bne.n	8009daa <__sflush_r+0xea>
 8009d6c:	602f      	str	r7, [r5, #0]
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e022      	b.n	8009db8 <__sflush_r+0xf8>
 8009d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d76:	b21b      	sxth	r3, r3
 8009d78:	e01b      	b.n	8009db2 <__sflush_r+0xf2>
 8009d7a:	690f      	ldr	r7, [r1, #16]
 8009d7c:	2f00      	cmp	r7, #0
 8009d7e:	d0f6      	beq.n	8009d6e <__sflush_r+0xae>
 8009d80:	0793      	lsls	r3, r2, #30
 8009d82:	680e      	ldr	r6, [r1, #0]
 8009d84:	bf08      	it	eq
 8009d86:	694b      	ldreq	r3, [r1, #20]
 8009d88:	600f      	str	r7, [r1, #0]
 8009d8a:	bf18      	it	ne
 8009d8c:	2300      	movne	r3, #0
 8009d8e:	eba6 0807 	sub.w	r8, r6, r7
 8009d92:	608b      	str	r3, [r1, #8]
 8009d94:	f1b8 0f00 	cmp.w	r8, #0
 8009d98:	dde9      	ble.n	8009d6e <__sflush_r+0xae>
 8009d9a:	6a21      	ldr	r1, [r4, #32]
 8009d9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d9e:	4643      	mov	r3, r8
 8009da0:	463a      	mov	r2, r7
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b0      	blx	r6
 8009da6:	2800      	cmp	r0, #0
 8009da8:	dc08      	bgt.n	8009dbc <__sflush_r+0xfc>
 8009daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	f04f 30ff 	mov.w	r0, #4294967295
 8009db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dbc:	4407      	add	r7, r0
 8009dbe:	eba8 0800 	sub.w	r8, r8, r0
 8009dc2:	e7e7      	b.n	8009d94 <__sflush_r+0xd4>
 8009dc4:	dfbffffe 	.word	0xdfbffffe

08009dc8 <_fflush_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	690b      	ldr	r3, [r1, #16]
 8009dcc:	4605      	mov	r5, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	b913      	cbnz	r3, 8009dd8 <_fflush_r+0x10>
 8009dd2:	2500      	movs	r5, #0
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	b118      	cbz	r0, 8009de2 <_fflush_r+0x1a>
 8009dda:	6a03      	ldr	r3, [r0, #32]
 8009ddc:	b90b      	cbnz	r3, 8009de2 <_fflush_r+0x1a>
 8009dde:	f7fc ff1d 	bl	8006c1c <__sinit>
 8009de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f3      	beq.n	8009dd2 <_fflush_r+0xa>
 8009dea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009dec:	07d0      	lsls	r0, r2, #31
 8009dee:	d404      	bmi.n	8009dfa <_fflush_r+0x32>
 8009df0:	0599      	lsls	r1, r3, #22
 8009df2:	d402      	bmi.n	8009dfa <_fflush_r+0x32>
 8009df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009df6:	f7fd f866 	bl	8006ec6 <__retarget_lock_acquire_recursive>
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	f7ff ff5f 	bl	8009cc0 <__sflush_r>
 8009e02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e04:	07da      	lsls	r2, r3, #31
 8009e06:	4605      	mov	r5, r0
 8009e08:	d4e4      	bmi.n	8009dd4 <_fflush_r+0xc>
 8009e0a:	89a3      	ldrh	r3, [r4, #12]
 8009e0c:	059b      	lsls	r3, r3, #22
 8009e0e:	d4e1      	bmi.n	8009dd4 <_fflush_r+0xc>
 8009e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e12:	f7fd f859 	bl	8006ec8 <__retarget_lock_release_recursive>
 8009e16:	e7dd      	b.n	8009dd4 <_fflush_r+0xc>

08009e18 <__sccl>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	780b      	ldrb	r3, [r1, #0]
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	2b5e      	cmp	r3, #94	@ 0x5e
 8009e20:	bf0b      	itete	eq
 8009e22:	784b      	ldrbeq	r3, [r1, #1]
 8009e24:	1c4a      	addne	r2, r1, #1
 8009e26:	1c8a      	addeq	r2, r1, #2
 8009e28:	2100      	movne	r1, #0
 8009e2a:	bf08      	it	eq
 8009e2c:	2101      	moveq	r1, #1
 8009e2e:	3801      	subs	r0, #1
 8009e30:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009e34:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009e38:	42a8      	cmp	r0, r5
 8009e3a:	d1fb      	bne.n	8009e34 <__sccl+0x1c>
 8009e3c:	b90b      	cbnz	r3, 8009e42 <__sccl+0x2a>
 8009e3e:	1e50      	subs	r0, r2, #1
 8009e40:	bd70      	pop	{r4, r5, r6, pc}
 8009e42:	f081 0101 	eor.w	r1, r1, #1
 8009e46:	54e1      	strb	r1, [r4, r3]
 8009e48:	4610      	mov	r0, r2
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009e50:	2d2d      	cmp	r5, #45	@ 0x2d
 8009e52:	d005      	beq.n	8009e60 <__sccl+0x48>
 8009e54:	2d5d      	cmp	r5, #93	@ 0x5d
 8009e56:	d016      	beq.n	8009e86 <__sccl+0x6e>
 8009e58:	2d00      	cmp	r5, #0
 8009e5a:	d0f1      	beq.n	8009e40 <__sccl+0x28>
 8009e5c:	462b      	mov	r3, r5
 8009e5e:	e7f2      	b.n	8009e46 <__sccl+0x2e>
 8009e60:	7846      	ldrb	r6, [r0, #1]
 8009e62:	2e5d      	cmp	r6, #93	@ 0x5d
 8009e64:	d0fa      	beq.n	8009e5c <__sccl+0x44>
 8009e66:	42b3      	cmp	r3, r6
 8009e68:	dcf8      	bgt.n	8009e5c <__sccl+0x44>
 8009e6a:	3002      	adds	r0, #2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	3201      	adds	r2, #1
 8009e70:	4296      	cmp	r6, r2
 8009e72:	54a1      	strb	r1, [r4, r2]
 8009e74:	dcfb      	bgt.n	8009e6e <__sccl+0x56>
 8009e76:	1af2      	subs	r2, r6, r3
 8009e78:	3a01      	subs	r2, #1
 8009e7a:	1c5d      	adds	r5, r3, #1
 8009e7c:	42b3      	cmp	r3, r6
 8009e7e:	bfa8      	it	ge
 8009e80:	2200      	movge	r2, #0
 8009e82:	18ab      	adds	r3, r5, r2
 8009e84:	e7e1      	b.n	8009e4a <__sccl+0x32>
 8009e86:	4610      	mov	r0, r2
 8009e88:	e7da      	b.n	8009e40 <__sccl+0x28>

08009e8a <__submore>:
 8009e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8e:	460c      	mov	r4, r1
 8009e90:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009e92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e96:	4299      	cmp	r1, r3
 8009e98:	d11d      	bne.n	8009ed6 <__submore+0x4c>
 8009e9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009e9e:	f7fd fedb 	bl	8007c58 <_malloc_r>
 8009ea2:	b918      	cbnz	r0, 8009eac <__submore+0x22>
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009eb0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009eb2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009eb6:	6360      	str	r0, [r4, #52]	@ 0x34
 8009eb8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009ebc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009ec0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009ec4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009ec8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009ecc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009ed0:	6020      	str	r0, [r4, #0]
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e7e8      	b.n	8009ea8 <__submore+0x1e>
 8009ed6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009ed8:	0077      	lsls	r7, r6, #1
 8009eda:	463a      	mov	r2, r7
 8009edc:	f000 fbcd 	bl	800a67a <_realloc_r>
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d0de      	beq.n	8009ea4 <__submore+0x1a>
 8009ee6:	eb00 0806 	add.w	r8, r0, r6
 8009eea:	4601      	mov	r1, r0
 8009eec:	4632      	mov	r2, r6
 8009eee:	4640      	mov	r0, r8
 8009ef0:	f000 f830 	bl	8009f54 <memcpy>
 8009ef4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009ef8:	f8c4 8000 	str.w	r8, [r4]
 8009efc:	e7e9      	b.n	8009ed2 <__submore+0x48>

08009efe <memmove>:
 8009efe:	4288      	cmp	r0, r1
 8009f00:	b510      	push	{r4, lr}
 8009f02:	eb01 0402 	add.w	r4, r1, r2
 8009f06:	d902      	bls.n	8009f0e <memmove+0x10>
 8009f08:	4284      	cmp	r4, r0
 8009f0a:	4623      	mov	r3, r4
 8009f0c:	d807      	bhi.n	8009f1e <memmove+0x20>
 8009f0e:	1e43      	subs	r3, r0, #1
 8009f10:	42a1      	cmp	r1, r4
 8009f12:	d008      	beq.n	8009f26 <memmove+0x28>
 8009f14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f18:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f1c:	e7f8      	b.n	8009f10 <memmove+0x12>
 8009f1e:	4402      	add	r2, r0
 8009f20:	4601      	mov	r1, r0
 8009f22:	428a      	cmp	r2, r1
 8009f24:	d100      	bne.n	8009f28 <memmove+0x2a>
 8009f26:	bd10      	pop	{r4, pc}
 8009f28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f30:	e7f7      	b.n	8009f22 <memmove+0x24>
	...

08009f34 <_sbrk_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d06      	ldr	r5, [pc, #24]	@ (8009f50 <_sbrk_r+0x1c>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	602b      	str	r3, [r5, #0]
 8009f40:	f7f8 f85c 	bl	8001ffc <_sbrk>
 8009f44:	1c43      	adds	r3, r0, #1
 8009f46:	d102      	bne.n	8009f4e <_sbrk_r+0x1a>
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	b103      	cbz	r3, 8009f4e <_sbrk_r+0x1a>
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	bd38      	pop	{r3, r4, r5, pc}
 8009f50:	20000620 	.word	0x20000620

08009f54 <memcpy>:
 8009f54:	440a      	add	r2, r1
 8009f56:	4291      	cmp	r1, r2
 8009f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f5c:	d100      	bne.n	8009f60 <memcpy+0xc>
 8009f5e:	4770      	bx	lr
 8009f60:	b510      	push	{r4, lr}
 8009f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f6a:	4291      	cmp	r1, r2
 8009f6c:	d1f9      	bne.n	8009f62 <memcpy+0xe>
 8009f6e:	bd10      	pop	{r4, pc}

08009f70 <nan>:
 8009f70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009f78 <nan+0x8>
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	00000000 	.word	0x00000000
 8009f7c:	7ff80000 	.word	0x7ff80000

08009f80 <__assert_func>:
 8009f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f82:	4614      	mov	r4, r2
 8009f84:	461a      	mov	r2, r3
 8009f86:	4b09      	ldr	r3, [pc, #36]	@ (8009fac <__assert_func+0x2c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	68d8      	ldr	r0, [r3, #12]
 8009f8e:	b954      	cbnz	r4, 8009fa6 <__assert_func+0x26>
 8009f90:	4b07      	ldr	r3, [pc, #28]	@ (8009fb0 <__assert_func+0x30>)
 8009f92:	461c      	mov	r4, r3
 8009f94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f98:	9100      	str	r1, [sp, #0]
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	4905      	ldr	r1, [pc, #20]	@ (8009fb4 <__assert_func+0x34>)
 8009f9e:	f000 fc19 	bl	800a7d4 <fiprintf>
 8009fa2:	f000 fc29 	bl	800a7f8 <abort>
 8009fa6:	4b04      	ldr	r3, [pc, #16]	@ (8009fb8 <__assert_func+0x38>)
 8009fa8:	e7f4      	b.n	8009f94 <__assert_func+0x14>
 8009faa:	bf00      	nop
 8009fac:	20000064 	.word	0x20000064
 8009fb0:	0800c6a0 	.word	0x0800c6a0
 8009fb4:	0800c672 	.word	0x0800c672
 8009fb8:	0800c665 	.word	0x0800c665

08009fbc <_calloc_r>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	fba1 5402 	umull	r5, r4, r1, r2
 8009fc2:	b93c      	cbnz	r4, 8009fd4 <_calloc_r+0x18>
 8009fc4:	4629      	mov	r1, r5
 8009fc6:	f7fd fe47 	bl	8007c58 <_malloc_r>
 8009fca:	4606      	mov	r6, r0
 8009fcc:	b928      	cbnz	r0, 8009fda <_calloc_r+0x1e>
 8009fce:	2600      	movs	r6, #0
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	220c      	movs	r2, #12
 8009fd6:	6002      	str	r2, [r0, #0]
 8009fd8:	e7f9      	b.n	8009fce <_calloc_r+0x12>
 8009fda:	462a      	mov	r2, r5
 8009fdc:	4621      	mov	r1, r4
 8009fde:	f7fc fee2 	bl	8006da6 <memset>
 8009fe2:	e7f5      	b.n	8009fd0 <_calloc_r+0x14>

08009fe4 <rshift>:
 8009fe4:	6903      	ldr	r3, [r0, #16]
 8009fe6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009fea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ff2:	f100 0414 	add.w	r4, r0, #20
 8009ff6:	dd45      	ble.n	800a084 <rshift+0xa0>
 8009ff8:	f011 011f 	ands.w	r1, r1, #31
 8009ffc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a000:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a004:	d10c      	bne.n	800a020 <rshift+0x3c>
 800a006:	f100 0710 	add.w	r7, r0, #16
 800a00a:	4629      	mov	r1, r5
 800a00c:	42b1      	cmp	r1, r6
 800a00e:	d334      	bcc.n	800a07a <rshift+0x96>
 800a010:	1a9b      	subs	r3, r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	1eea      	subs	r2, r5, #3
 800a016:	4296      	cmp	r6, r2
 800a018:	bf38      	it	cc
 800a01a:	2300      	movcc	r3, #0
 800a01c:	4423      	add	r3, r4
 800a01e:	e015      	b.n	800a04c <rshift+0x68>
 800a020:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a024:	f1c1 0820 	rsb	r8, r1, #32
 800a028:	40cf      	lsrs	r7, r1
 800a02a:	f105 0e04 	add.w	lr, r5, #4
 800a02e:	46a1      	mov	r9, r4
 800a030:	4576      	cmp	r6, lr
 800a032:	46f4      	mov	ip, lr
 800a034:	d815      	bhi.n	800a062 <rshift+0x7e>
 800a036:	1a9a      	subs	r2, r3, r2
 800a038:	0092      	lsls	r2, r2, #2
 800a03a:	3a04      	subs	r2, #4
 800a03c:	3501      	adds	r5, #1
 800a03e:	42ae      	cmp	r6, r5
 800a040:	bf38      	it	cc
 800a042:	2200      	movcc	r2, #0
 800a044:	18a3      	adds	r3, r4, r2
 800a046:	50a7      	str	r7, [r4, r2]
 800a048:	b107      	cbz	r7, 800a04c <rshift+0x68>
 800a04a:	3304      	adds	r3, #4
 800a04c:	1b1a      	subs	r2, r3, r4
 800a04e:	42a3      	cmp	r3, r4
 800a050:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a054:	bf08      	it	eq
 800a056:	2300      	moveq	r3, #0
 800a058:	6102      	str	r2, [r0, #16]
 800a05a:	bf08      	it	eq
 800a05c:	6143      	streq	r3, [r0, #20]
 800a05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a062:	f8dc c000 	ldr.w	ip, [ip]
 800a066:	fa0c fc08 	lsl.w	ip, ip, r8
 800a06a:	ea4c 0707 	orr.w	r7, ip, r7
 800a06e:	f849 7b04 	str.w	r7, [r9], #4
 800a072:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a076:	40cf      	lsrs	r7, r1
 800a078:	e7da      	b.n	800a030 <rshift+0x4c>
 800a07a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a07e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a082:	e7c3      	b.n	800a00c <rshift+0x28>
 800a084:	4623      	mov	r3, r4
 800a086:	e7e1      	b.n	800a04c <rshift+0x68>

0800a088 <__hexdig_fun>:
 800a088:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d802      	bhi.n	800a096 <__hexdig_fun+0xe>
 800a090:	3820      	subs	r0, #32
 800a092:	b2c0      	uxtb	r0, r0
 800a094:	4770      	bx	lr
 800a096:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	d801      	bhi.n	800a0a2 <__hexdig_fun+0x1a>
 800a09e:	3847      	subs	r0, #71	@ 0x47
 800a0a0:	e7f7      	b.n	800a092 <__hexdig_fun+0xa>
 800a0a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a0a6:	2b05      	cmp	r3, #5
 800a0a8:	d801      	bhi.n	800a0ae <__hexdig_fun+0x26>
 800a0aa:	3827      	subs	r0, #39	@ 0x27
 800a0ac:	e7f1      	b.n	800a092 <__hexdig_fun+0xa>
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	4770      	bx	lr
	...

0800a0b4 <__gethex>:
 800a0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b8:	b085      	sub	sp, #20
 800a0ba:	468a      	mov	sl, r1
 800a0bc:	9302      	str	r3, [sp, #8]
 800a0be:	680b      	ldr	r3, [r1, #0]
 800a0c0:	9001      	str	r0, [sp, #4]
 800a0c2:	4690      	mov	r8, r2
 800a0c4:	1c9c      	adds	r4, r3, #2
 800a0c6:	46a1      	mov	r9, r4
 800a0c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a0cc:	2830      	cmp	r0, #48	@ 0x30
 800a0ce:	d0fa      	beq.n	800a0c6 <__gethex+0x12>
 800a0d0:	eba9 0303 	sub.w	r3, r9, r3
 800a0d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a0d8:	f7ff ffd6 	bl	800a088 <__hexdig_fun>
 800a0dc:	4605      	mov	r5, r0
 800a0de:	2800      	cmp	r0, #0
 800a0e0:	d168      	bne.n	800a1b4 <__gethex+0x100>
 800a0e2:	49a0      	ldr	r1, [pc, #640]	@ (800a364 <__gethex+0x2b0>)
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	4648      	mov	r0, r9
 800a0e8:	f7fc fe65 	bl	8006db6 <strncmp>
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d167      	bne.n	800a1c2 <__gethex+0x10e>
 800a0f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a0f6:	4626      	mov	r6, r4
 800a0f8:	f7ff ffc6 	bl	800a088 <__hexdig_fun>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d062      	beq.n	800a1c6 <__gethex+0x112>
 800a100:	4623      	mov	r3, r4
 800a102:	7818      	ldrb	r0, [r3, #0]
 800a104:	2830      	cmp	r0, #48	@ 0x30
 800a106:	4699      	mov	r9, r3
 800a108:	f103 0301 	add.w	r3, r3, #1
 800a10c:	d0f9      	beq.n	800a102 <__gethex+0x4e>
 800a10e:	f7ff ffbb 	bl	800a088 <__hexdig_fun>
 800a112:	fab0 f580 	clz	r5, r0
 800a116:	096d      	lsrs	r5, r5, #5
 800a118:	f04f 0b01 	mov.w	fp, #1
 800a11c:	464a      	mov	r2, r9
 800a11e:	4616      	mov	r6, r2
 800a120:	3201      	adds	r2, #1
 800a122:	7830      	ldrb	r0, [r6, #0]
 800a124:	f7ff ffb0 	bl	800a088 <__hexdig_fun>
 800a128:	2800      	cmp	r0, #0
 800a12a:	d1f8      	bne.n	800a11e <__gethex+0x6a>
 800a12c:	498d      	ldr	r1, [pc, #564]	@ (800a364 <__gethex+0x2b0>)
 800a12e:	2201      	movs	r2, #1
 800a130:	4630      	mov	r0, r6
 800a132:	f7fc fe40 	bl	8006db6 <strncmp>
 800a136:	2800      	cmp	r0, #0
 800a138:	d13f      	bne.n	800a1ba <__gethex+0x106>
 800a13a:	b944      	cbnz	r4, 800a14e <__gethex+0x9a>
 800a13c:	1c74      	adds	r4, r6, #1
 800a13e:	4622      	mov	r2, r4
 800a140:	4616      	mov	r6, r2
 800a142:	3201      	adds	r2, #1
 800a144:	7830      	ldrb	r0, [r6, #0]
 800a146:	f7ff ff9f 	bl	800a088 <__hexdig_fun>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	d1f8      	bne.n	800a140 <__gethex+0x8c>
 800a14e:	1ba4      	subs	r4, r4, r6
 800a150:	00a7      	lsls	r7, r4, #2
 800a152:	7833      	ldrb	r3, [r6, #0]
 800a154:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a158:	2b50      	cmp	r3, #80	@ 0x50
 800a15a:	d13e      	bne.n	800a1da <__gethex+0x126>
 800a15c:	7873      	ldrb	r3, [r6, #1]
 800a15e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a160:	d033      	beq.n	800a1ca <__gethex+0x116>
 800a162:	2b2d      	cmp	r3, #45	@ 0x2d
 800a164:	d034      	beq.n	800a1d0 <__gethex+0x11c>
 800a166:	1c71      	adds	r1, r6, #1
 800a168:	2400      	movs	r4, #0
 800a16a:	7808      	ldrb	r0, [r1, #0]
 800a16c:	f7ff ff8c 	bl	800a088 <__hexdig_fun>
 800a170:	1e43      	subs	r3, r0, #1
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b18      	cmp	r3, #24
 800a176:	d830      	bhi.n	800a1da <__gethex+0x126>
 800a178:	f1a0 0210 	sub.w	r2, r0, #16
 800a17c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a180:	f7ff ff82 	bl	800a088 <__hexdig_fun>
 800a184:	f100 3cff 	add.w	ip, r0, #4294967295
 800a188:	fa5f fc8c 	uxtb.w	ip, ip
 800a18c:	f1bc 0f18 	cmp.w	ip, #24
 800a190:	f04f 030a 	mov.w	r3, #10
 800a194:	d91e      	bls.n	800a1d4 <__gethex+0x120>
 800a196:	b104      	cbz	r4, 800a19a <__gethex+0xe6>
 800a198:	4252      	negs	r2, r2
 800a19a:	4417      	add	r7, r2
 800a19c:	f8ca 1000 	str.w	r1, [sl]
 800a1a0:	b1ed      	cbz	r5, 800a1de <__gethex+0x12a>
 800a1a2:	f1bb 0f00 	cmp.w	fp, #0
 800a1a6:	bf0c      	ite	eq
 800a1a8:	2506      	moveq	r5, #6
 800a1aa:	2500      	movne	r5, #0
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	b005      	add	sp, #20
 800a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b4:	2500      	movs	r5, #0
 800a1b6:	462c      	mov	r4, r5
 800a1b8:	e7b0      	b.n	800a11c <__gethex+0x68>
 800a1ba:	2c00      	cmp	r4, #0
 800a1bc:	d1c7      	bne.n	800a14e <__gethex+0x9a>
 800a1be:	4627      	mov	r7, r4
 800a1c0:	e7c7      	b.n	800a152 <__gethex+0x9e>
 800a1c2:	464e      	mov	r6, r9
 800a1c4:	462f      	mov	r7, r5
 800a1c6:	2501      	movs	r5, #1
 800a1c8:	e7c3      	b.n	800a152 <__gethex+0x9e>
 800a1ca:	2400      	movs	r4, #0
 800a1cc:	1cb1      	adds	r1, r6, #2
 800a1ce:	e7cc      	b.n	800a16a <__gethex+0xb6>
 800a1d0:	2401      	movs	r4, #1
 800a1d2:	e7fb      	b.n	800a1cc <__gethex+0x118>
 800a1d4:	fb03 0002 	mla	r0, r3, r2, r0
 800a1d8:	e7ce      	b.n	800a178 <__gethex+0xc4>
 800a1da:	4631      	mov	r1, r6
 800a1dc:	e7de      	b.n	800a19c <__gethex+0xe8>
 800a1de:	eba6 0309 	sub.w	r3, r6, r9
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	2b07      	cmp	r3, #7
 800a1e8:	dc0a      	bgt.n	800a200 <__gethex+0x14c>
 800a1ea:	9801      	ldr	r0, [sp, #4]
 800a1ec:	f7fd fdc0 	bl	8007d70 <_Balloc>
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	b940      	cbnz	r0, 800a206 <__gethex+0x152>
 800a1f4:	4b5c      	ldr	r3, [pc, #368]	@ (800a368 <__gethex+0x2b4>)
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	21e4      	movs	r1, #228	@ 0xe4
 800a1fa:	485c      	ldr	r0, [pc, #368]	@ (800a36c <__gethex+0x2b8>)
 800a1fc:	f7ff fec0 	bl	8009f80 <__assert_func>
 800a200:	3101      	adds	r1, #1
 800a202:	105b      	asrs	r3, r3, #1
 800a204:	e7ef      	b.n	800a1e6 <__gethex+0x132>
 800a206:	f100 0a14 	add.w	sl, r0, #20
 800a20a:	2300      	movs	r3, #0
 800a20c:	4655      	mov	r5, sl
 800a20e:	469b      	mov	fp, r3
 800a210:	45b1      	cmp	r9, r6
 800a212:	d337      	bcc.n	800a284 <__gethex+0x1d0>
 800a214:	f845 bb04 	str.w	fp, [r5], #4
 800a218:	eba5 050a 	sub.w	r5, r5, sl
 800a21c:	10ad      	asrs	r5, r5, #2
 800a21e:	6125      	str	r5, [r4, #16]
 800a220:	4658      	mov	r0, fp
 800a222:	f7fd fe97 	bl	8007f54 <__hi0bits>
 800a226:	016d      	lsls	r5, r5, #5
 800a228:	f8d8 6000 	ldr.w	r6, [r8]
 800a22c:	1a2d      	subs	r5, r5, r0
 800a22e:	42b5      	cmp	r5, r6
 800a230:	dd54      	ble.n	800a2dc <__gethex+0x228>
 800a232:	1bad      	subs	r5, r5, r6
 800a234:	4629      	mov	r1, r5
 800a236:	4620      	mov	r0, r4
 800a238:	f7fe fa2b 	bl	8008692 <__any_on>
 800a23c:	4681      	mov	r9, r0
 800a23e:	b178      	cbz	r0, 800a260 <__gethex+0x1ac>
 800a240:	1e6b      	subs	r3, r5, #1
 800a242:	1159      	asrs	r1, r3, #5
 800a244:	f003 021f 	and.w	r2, r3, #31
 800a248:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a24c:	f04f 0901 	mov.w	r9, #1
 800a250:	fa09 f202 	lsl.w	r2, r9, r2
 800a254:	420a      	tst	r2, r1
 800a256:	d003      	beq.n	800a260 <__gethex+0x1ac>
 800a258:	454b      	cmp	r3, r9
 800a25a:	dc36      	bgt.n	800a2ca <__gethex+0x216>
 800a25c:	f04f 0902 	mov.w	r9, #2
 800a260:	4629      	mov	r1, r5
 800a262:	4620      	mov	r0, r4
 800a264:	f7ff febe 	bl	8009fe4 <rshift>
 800a268:	442f      	add	r7, r5
 800a26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a26e:	42bb      	cmp	r3, r7
 800a270:	da42      	bge.n	800a2f8 <__gethex+0x244>
 800a272:	9801      	ldr	r0, [sp, #4]
 800a274:	4621      	mov	r1, r4
 800a276:	f7fd fdbb 	bl	8007df0 <_Bfree>
 800a27a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a27c:	2300      	movs	r3, #0
 800a27e:	6013      	str	r3, [r2, #0]
 800a280:	25a3      	movs	r5, #163	@ 0xa3
 800a282:	e793      	b.n	800a1ac <__gethex+0xf8>
 800a284:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a288:	2a2e      	cmp	r2, #46	@ 0x2e
 800a28a:	d012      	beq.n	800a2b2 <__gethex+0x1fe>
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d104      	bne.n	800a29a <__gethex+0x1e6>
 800a290:	f845 bb04 	str.w	fp, [r5], #4
 800a294:	f04f 0b00 	mov.w	fp, #0
 800a298:	465b      	mov	r3, fp
 800a29a:	7830      	ldrb	r0, [r6, #0]
 800a29c:	9303      	str	r3, [sp, #12]
 800a29e:	f7ff fef3 	bl	800a088 <__hexdig_fun>
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	f000 000f 	and.w	r0, r0, #15
 800a2a8:	4098      	lsls	r0, r3
 800a2aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	e7ae      	b.n	800a210 <__gethex+0x15c>
 800a2b2:	45b1      	cmp	r9, r6
 800a2b4:	d8ea      	bhi.n	800a28c <__gethex+0x1d8>
 800a2b6:	492b      	ldr	r1, [pc, #172]	@ (800a364 <__gethex+0x2b0>)
 800a2b8:	9303      	str	r3, [sp, #12]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7fc fd7a 	bl	8006db6 <strncmp>
 800a2c2:	9b03      	ldr	r3, [sp, #12]
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d1e1      	bne.n	800a28c <__gethex+0x1d8>
 800a2c8:	e7a2      	b.n	800a210 <__gethex+0x15c>
 800a2ca:	1ea9      	subs	r1, r5, #2
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f7fe f9e0 	bl	8008692 <__any_on>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d0c2      	beq.n	800a25c <__gethex+0x1a8>
 800a2d6:	f04f 0903 	mov.w	r9, #3
 800a2da:	e7c1      	b.n	800a260 <__gethex+0x1ac>
 800a2dc:	da09      	bge.n	800a2f2 <__gethex+0x23e>
 800a2de:	1b75      	subs	r5, r6, r5
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	9801      	ldr	r0, [sp, #4]
 800a2e4:	462a      	mov	r2, r5
 800a2e6:	f7fd ff9b 	bl	8008220 <__lshift>
 800a2ea:	1b7f      	subs	r7, r7, r5
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	f100 0a14 	add.w	sl, r0, #20
 800a2f2:	f04f 0900 	mov.w	r9, #0
 800a2f6:	e7b8      	b.n	800a26a <__gethex+0x1b6>
 800a2f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a2fc:	42bd      	cmp	r5, r7
 800a2fe:	dd6f      	ble.n	800a3e0 <__gethex+0x32c>
 800a300:	1bed      	subs	r5, r5, r7
 800a302:	42ae      	cmp	r6, r5
 800a304:	dc34      	bgt.n	800a370 <__gethex+0x2bc>
 800a306:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d022      	beq.n	800a354 <__gethex+0x2a0>
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d024      	beq.n	800a35c <__gethex+0x2a8>
 800a312:	2b01      	cmp	r3, #1
 800a314:	d115      	bne.n	800a342 <__gethex+0x28e>
 800a316:	42ae      	cmp	r6, r5
 800a318:	d113      	bne.n	800a342 <__gethex+0x28e>
 800a31a:	2e01      	cmp	r6, #1
 800a31c:	d10b      	bne.n	800a336 <__gethex+0x282>
 800a31e:	9a02      	ldr	r2, [sp, #8]
 800a320:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	2301      	movs	r3, #1
 800a328:	6123      	str	r3, [r4, #16]
 800a32a:	f8ca 3000 	str.w	r3, [sl]
 800a32e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a330:	2562      	movs	r5, #98	@ 0x62
 800a332:	601c      	str	r4, [r3, #0]
 800a334:	e73a      	b.n	800a1ac <__gethex+0xf8>
 800a336:	1e71      	subs	r1, r6, #1
 800a338:	4620      	mov	r0, r4
 800a33a:	f7fe f9aa 	bl	8008692 <__any_on>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d1ed      	bne.n	800a31e <__gethex+0x26a>
 800a342:	9801      	ldr	r0, [sp, #4]
 800a344:	4621      	mov	r1, r4
 800a346:	f7fd fd53 	bl	8007df0 <_Bfree>
 800a34a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a34c:	2300      	movs	r3, #0
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	2550      	movs	r5, #80	@ 0x50
 800a352:	e72b      	b.n	800a1ac <__gethex+0xf8>
 800a354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1f3      	bne.n	800a342 <__gethex+0x28e>
 800a35a:	e7e0      	b.n	800a31e <__gethex+0x26a>
 800a35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1dd      	bne.n	800a31e <__gethex+0x26a>
 800a362:	e7ee      	b.n	800a342 <__gethex+0x28e>
 800a364:	0800c4d8 	.word	0x0800c4d8
 800a368:	0800c36b 	.word	0x0800c36b
 800a36c:	0800c6a1 	.word	0x0800c6a1
 800a370:	1e6f      	subs	r7, r5, #1
 800a372:	f1b9 0f00 	cmp.w	r9, #0
 800a376:	d130      	bne.n	800a3da <__gethex+0x326>
 800a378:	b127      	cbz	r7, 800a384 <__gethex+0x2d0>
 800a37a:	4639      	mov	r1, r7
 800a37c:	4620      	mov	r0, r4
 800a37e:	f7fe f988 	bl	8008692 <__any_on>
 800a382:	4681      	mov	r9, r0
 800a384:	117a      	asrs	r2, r7, #5
 800a386:	2301      	movs	r3, #1
 800a388:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a38c:	f007 071f 	and.w	r7, r7, #31
 800a390:	40bb      	lsls	r3, r7
 800a392:	4213      	tst	r3, r2
 800a394:	4629      	mov	r1, r5
 800a396:	4620      	mov	r0, r4
 800a398:	bf18      	it	ne
 800a39a:	f049 0902 	orrne.w	r9, r9, #2
 800a39e:	f7ff fe21 	bl	8009fe4 <rshift>
 800a3a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a3a6:	1b76      	subs	r6, r6, r5
 800a3a8:	2502      	movs	r5, #2
 800a3aa:	f1b9 0f00 	cmp.w	r9, #0
 800a3ae:	d047      	beq.n	800a440 <__gethex+0x38c>
 800a3b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d015      	beq.n	800a3e4 <__gethex+0x330>
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d017      	beq.n	800a3ec <__gethex+0x338>
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d109      	bne.n	800a3d4 <__gethex+0x320>
 800a3c0:	f019 0f02 	tst.w	r9, #2
 800a3c4:	d006      	beq.n	800a3d4 <__gethex+0x320>
 800a3c6:	f8da 3000 	ldr.w	r3, [sl]
 800a3ca:	ea49 0903 	orr.w	r9, r9, r3
 800a3ce:	f019 0f01 	tst.w	r9, #1
 800a3d2:	d10e      	bne.n	800a3f2 <__gethex+0x33e>
 800a3d4:	f045 0510 	orr.w	r5, r5, #16
 800a3d8:	e032      	b.n	800a440 <__gethex+0x38c>
 800a3da:	f04f 0901 	mov.w	r9, #1
 800a3de:	e7d1      	b.n	800a384 <__gethex+0x2d0>
 800a3e0:	2501      	movs	r5, #1
 800a3e2:	e7e2      	b.n	800a3aa <__gethex+0x2f6>
 800a3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3e6:	f1c3 0301 	rsb	r3, r3, #1
 800a3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0f0      	beq.n	800a3d4 <__gethex+0x320>
 800a3f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3f6:	f104 0314 	add.w	r3, r4, #20
 800a3fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a3fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a402:	f04f 0c00 	mov.w	ip, #0
 800a406:	4618      	mov	r0, r3
 800a408:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a410:	d01b      	beq.n	800a44a <__gethex+0x396>
 800a412:	3201      	adds	r2, #1
 800a414:	6002      	str	r2, [r0, #0]
 800a416:	2d02      	cmp	r5, #2
 800a418:	f104 0314 	add.w	r3, r4, #20
 800a41c:	d13c      	bne.n	800a498 <__gethex+0x3e4>
 800a41e:	f8d8 2000 	ldr.w	r2, [r8]
 800a422:	3a01      	subs	r2, #1
 800a424:	42b2      	cmp	r2, r6
 800a426:	d109      	bne.n	800a43c <__gethex+0x388>
 800a428:	1171      	asrs	r1, r6, #5
 800a42a:	2201      	movs	r2, #1
 800a42c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a430:	f006 061f 	and.w	r6, r6, #31
 800a434:	fa02 f606 	lsl.w	r6, r2, r6
 800a438:	421e      	tst	r6, r3
 800a43a:	d13a      	bne.n	800a4b2 <__gethex+0x3fe>
 800a43c:	f045 0520 	orr.w	r5, r5, #32
 800a440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a442:	601c      	str	r4, [r3, #0]
 800a444:	9b02      	ldr	r3, [sp, #8]
 800a446:	601f      	str	r7, [r3, #0]
 800a448:	e6b0      	b.n	800a1ac <__gethex+0xf8>
 800a44a:	4299      	cmp	r1, r3
 800a44c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a450:	d8d9      	bhi.n	800a406 <__gethex+0x352>
 800a452:	68a3      	ldr	r3, [r4, #8]
 800a454:	459b      	cmp	fp, r3
 800a456:	db17      	blt.n	800a488 <__gethex+0x3d4>
 800a458:	6861      	ldr	r1, [r4, #4]
 800a45a:	9801      	ldr	r0, [sp, #4]
 800a45c:	3101      	adds	r1, #1
 800a45e:	f7fd fc87 	bl	8007d70 <_Balloc>
 800a462:	4681      	mov	r9, r0
 800a464:	b918      	cbnz	r0, 800a46e <__gethex+0x3ba>
 800a466:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d0 <__gethex+0x41c>)
 800a468:	4602      	mov	r2, r0
 800a46a:	2184      	movs	r1, #132	@ 0x84
 800a46c:	e6c5      	b.n	800a1fa <__gethex+0x146>
 800a46e:	6922      	ldr	r2, [r4, #16]
 800a470:	3202      	adds	r2, #2
 800a472:	f104 010c 	add.w	r1, r4, #12
 800a476:	0092      	lsls	r2, r2, #2
 800a478:	300c      	adds	r0, #12
 800a47a:	f7ff fd6b 	bl	8009f54 <memcpy>
 800a47e:	4621      	mov	r1, r4
 800a480:	9801      	ldr	r0, [sp, #4]
 800a482:	f7fd fcb5 	bl	8007df0 <_Bfree>
 800a486:	464c      	mov	r4, r9
 800a488:	6923      	ldr	r3, [r4, #16]
 800a48a:	1c5a      	adds	r2, r3, #1
 800a48c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a490:	6122      	str	r2, [r4, #16]
 800a492:	2201      	movs	r2, #1
 800a494:	615a      	str	r2, [r3, #20]
 800a496:	e7be      	b.n	800a416 <__gethex+0x362>
 800a498:	6922      	ldr	r2, [r4, #16]
 800a49a:	455a      	cmp	r2, fp
 800a49c:	dd0b      	ble.n	800a4b6 <__gethex+0x402>
 800a49e:	2101      	movs	r1, #1
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f7ff fd9f 	bl	8009fe4 <rshift>
 800a4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4aa:	3701      	adds	r7, #1
 800a4ac:	42bb      	cmp	r3, r7
 800a4ae:	f6ff aee0 	blt.w	800a272 <__gethex+0x1be>
 800a4b2:	2501      	movs	r5, #1
 800a4b4:	e7c2      	b.n	800a43c <__gethex+0x388>
 800a4b6:	f016 061f 	ands.w	r6, r6, #31
 800a4ba:	d0fa      	beq.n	800a4b2 <__gethex+0x3fe>
 800a4bc:	4453      	add	r3, sl
 800a4be:	f1c6 0620 	rsb	r6, r6, #32
 800a4c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a4c6:	f7fd fd45 	bl	8007f54 <__hi0bits>
 800a4ca:	42b0      	cmp	r0, r6
 800a4cc:	dbe7      	blt.n	800a49e <__gethex+0x3ea>
 800a4ce:	e7f0      	b.n	800a4b2 <__gethex+0x3fe>
 800a4d0:	0800c36b 	.word	0x0800c36b

0800a4d4 <L_shift>:
 800a4d4:	f1c2 0208 	rsb	r2, r2, #8
 800a4d8:	0092      	lsls	r2, r2, #2
 800a4da:	b570      	push	{r4, r5, r6, lr}
 800a4dc:	f1c2 0620 	rsb	r6, r2, #32
 800a4e0:	6843      	ldr	r3, [r0, #4]
 800a4e2:	6804      	ldr	r4, [r0, #0]
 800a4e4:	fa03 f506 	lsl.w	r5, r3, r6
 800a4e8:	432c      	orrs	r4, r5
 800a4ea:	40d3      	lsrs	r3, r2
 800a4ec:	6004      	str	r4, [r0, #0]
 800a4ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4f2:	4288      	cmp	r0, r1
 800a4f4:	d3f4      	bcc.n	800a4e0 <L_shift+0xc>
 800a4f6:	bd70      	pop	{r4, r5, r6, pc}

0800a4f8 <__match>:
 800a4f8:	b530      	push	{r4, r5, lr}
 800a4fa:	6803      	ldr	r3, [r0, #0]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a502:	b914      	cbnz	r4, 800a50a <__match+0x12>
 800a504:	6003      	str	r3, [r0, #0]
 800a506:	2001      	movs	r0, #1
 800a508:	bd30      	pop	{r4, r5, pc}
 800a50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a50e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a512:	2d19      	cmp	r5, #25
 800a514:	bf98      	it	ls
 800a516:	3220      	addls	r2, #32
 800a518:	42a2      	cmp	r2, r4
 800a51a:	d0f0      	beq.n	800a4fe <__match+0x6>
 800a51c:	2000      	movs	r0, #0
 800a51e:	e7f3      	b.n	800a508 <__match+0x10>

0800a520 <__hexnan>:
 800a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a524:	680b      	ldr	r3, [r1, #0]
 800a526:	6801      	ldr	r1, [r0, #0]
 800a528:	115e      	asrs	r6, r3, #5
 800a52a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a52e:	f013 031f 	ands.w	r3, r3, #31
 800a532:	b087      	sub	sp, #28
 800a534:	bf18      	it	ne
 800a536:	3604      	addne	r6, #4
 800a538:	2500      	movs	r5, #0
 800a53a:	1f37      	subs	r7, r6, #4
 800a53c:	4682      	mov	sl, r0
 800a53e:	4690      	mov	r8, r2
 800a540:	9301      	str	r3, [sp, #4]
 800a542:	f846 5c04 	str.w	r5, [r6, #-4]
 800a546:	46b9      	mov	r9, r7
 800a548:	463c      	mov	r4, r7
 800a54a:	9502      	str	r5, [sp, #8]
 800a54c:	46ab      	mov	fp, r5
 800a54e:	784a      	ldrb	r2, [r1, #1]
 800a550:	1c4b      	adds	r3, r1, #1
 800a552:	9303      	str	r3, [sp, #12]
 800a554:	b342      	cbz	r2, 800a5a8 <__hexnan+0x88>
 800a556:	4610      	mov	r0, r2
 800a558:	9105      	str	r1, [sp, #20]
 800a55a:	9204      	str	r2, [sp, #16]
 800a55c:	f7ff fd94 	bl	800a088 <__hexdig_fun>
 800a560:	2800      	cmp	r0, #0
 800a562:	d151      	bne.n	800a608 <__hexnan+0xe8>
 800a564:	9a04      	ldr	r2, [sp, #16]
 800a566:	9905      	ldr	r1, [sp, #20]
 800a568:	2a20      	cmp	r2, #32
 800a56a:	d818      	bhi.n	800a59e <__hexnan+0x7e>
 800a56c:	9b02      	ldr	r3, [sp, #8]
 800a56e:	459b      	cmp	fp, r3
 800a570:	dd13      	ble.n	800a59a <__hexnan+0x7a>
 800a572:	454c      	cmp	r4, r9
 800a574:	d206      	bcs.n	800a584 <__hexnan+0x64>
 800a576:	2d07      	cmp	r5, #7
 800a578:	dc04      	bgt.n	800a584 <__hexnan+0x64>
 800a57a:	462a      	mov	r2, r5
 800a57c:	4649      	mov	r1, r9
 800a57e:	4620      	mov	r0, r4
 800a580:	f7ff ffa8 	bl	800a4d4 <L_shift>
 800a584:	4544      	cmp	r4, r8
 800a586:	d952      	bls.n	800a62e <__hexnan+0x10e>
 800a588:	2300      	movs	r3, #0
 800a58a:	f1a4 0904 	sub.w	r9, r4, #4
 800a58e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a592:	f8cd b008 	str.w	fp, [sp, #8]
 800a596:	464c      	mov	r4, r9
 800a598:	461d      	mov	r5, r3
 800a59a:	9903      	ldr	r1, [sp, #12]
 800a59c:	e7d7      	b.n	800a54e <__hexnan+0x2e>
 800a59e:	2a29      	cmp	r2, #41	@ 0x29
 800a5a0:	d157      	bne.n	800a652 <__hexnan+0x132>
 800a5a2:	3102      	adds	r1, #2
 800a5a4:	f8ca 1000 	str.w	r1, [sl]
 800a5a8:	f1bb 0f00 	cmp.w	fp, #0
 800a5ac:	d051      	beq.n	800a652 <__hexnan+0x132>
 800a5ae:	454c      	cmp	r4, r9
 800a5b0:	d206      	bcs.n	800a5c0 <__hexnan+0xa0>
 800a5b2:	2d07      	cmp	r5, #7
 800a5b4:	dc04      	bgt.n	800a5c0 <__hexnan+0xa0>
 800a5b6:	462a      	mov	r2, r5
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f7ff ff8a 	bl	800a4d4 <L_shift>
 800a5c0:	4544      	cmp	r4, r8
 800a5c2:	d936      	bls.n	800a632 <__hexnan+0x112>
 800a5c4:	f1a8 0204 	sub.w	r2, r8, #4
 800a5c8:	4623      	mov	r3, r4
 800a5ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5d2:	429f      	cmp	r7, r3
 800a5d4:	d2f9      	bcs.n	800a5ca <__hexnan+0xaa>
 800a5d6:	1b3b      	subs	r3, r7, r4
 800a5d8:	f023 0303 	bic.w	r3, r3, #3
 800a5dc:	3304      	adds	r3, #4
 800a5de:	3401      	adds	r4, #1
 800a5e0:	3e03      	subs	r6, #3
 800a5e2:	42b4      	cmp	r4, r6
 800a5e4:	bf88      	it	hi
 800a5e6:	2304      	movhi	r3, #4
 800a5e8:	4443      	add	r3, r8
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f843 2b04 	str.w	r2, [r3], #4
 800a5f0:	429f      	cmp	r7, r3
 800a5f2:	d2fb      	bcs.n	800a5ec <__hexnan+0xcc>
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	b91b      	cbnz	r3, 800a600 <__hexnan+0xe0>
 800a5f8:	4547      	cmp	r7, r8
 800a5fa:	d128      	bne.n	800a64e <__hexnan+0x12e>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	2005      	movs	r0, #5
 800a602:	b007      	add	sp, #28
 800a604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a608:	3501      	adds	r5, #1
 800a60a:	2d08      	cmp	r5, #8
 800a60c:	f10b 0b01 	add.w	fp, fp, #1
 800a610:	dd06      	ble.n	800a620 <__hexnan+0x100>
 800a612:	4544      	cmp	r4, r8
 800a614:	d9c1      	bls.n	800a59a <__hexnan+0x7a>
 800a616:	2300      	movs	r3, #0
 800a618:	f844 3c04 	str.w	r3, [r4, #-4]
 800a61c:	2501      	movs	r5, #1
 800a61e:	3c04      	subs	r4, #4
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	f000 000f 	and.w	r0, r0, #15
 800a626:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a62a:	6020      	str	r0, [r4, #0]
 800a62c:	e7b5      	b.n	800a59a <__hexnan+0x7a>
 800a62e:	2508      	movs	r5, #8
 800a630:	e7b3      	b.n	800a59a <__hexnan+0x7a>
 800a632:	9b01      	ldr	r3, [sp, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d0dd      	beq.n	800a5f4 <__hexnan+0xd4>
 800a638:	f1c3 0320 	rsb	r3, r3, #32
 800a63c:	f04f 32ff 	mov.w	r2, #4294967295
 800a640:	40da      	lsrs	r2, r3
 800a642:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a646:	4013      	ands	r3, r2
 800a648:	f846 3c04 	str.w	r3, [r6, #-4]
 800a64c:	e7d2      	b.n	800a5f4 <__hexnan+0xd4>
 800a64e:	3f04      	subs	r7, #4
 800a650:	e7d0      	b.n	800a5f4 <__hexnan+0xd4>
 800a652:	2004      	movs	r0, #4
 800a654:	e7d5      	b.n	800a602 <__hexnan+0xe2>

0800a656 <__ascii_mbtowc>:
 800a656:	b082      	sub	sp, #8
 800a658:	b901      	cbnz	r1, 800a65c <__ascii_mbtowc+0x6>
 800a65a:	a901      	add	r1, sp, #4
 800a65c:	b142      	cbz	r2, 800a670 <__ascii_mbtowc+0x1a>
 800a65e:	b14b      	cbz	r3, 800a674 <__ascii_mbtowc+0x1e>
 800a660:	7813      	ldrb	r3, [r2, #0]
 800a662:	600b      	str	r3, [r1, #0]
 800a664:	7812      	ldrb	r2, [r2, #0]
 800a666:	1e10      	subs	r0, r2, #0
 800a668:	bf18      	it	ne
 800a66a:	2001      	movne	r0, #1
 800a66c:	b002      	add	sp, #8
 800a66e:	4770      	bx	lr
 800a670:	4610      	mov	r0, r2
 800a672:	e7fb      	b.n	800a66c <__ascii_mbtowc+0x16>
 800a674:	f06f 0001 	mvn.w	r0, #1
 800a678:	e7f8      	b.n	800a66c <__ascii_mbtowc+0x16>

0800a67a <_realloc_r>:
 800a67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a67e:	4680      	mov	r8, r0
 800a680:	4615      	mov	r5, r2
 800a682:	460c      	mov	r4, r1
 800a684:	b921      	cbnz	r1, 800a690 <_realloc_r+0x16>
 800a686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a68a:	4611      	mov	r1, r2
 800a68c:	f7fd bae4 	b.w	8007c58 <_malloc_r>
 800a690:	b92a      	cbnz	r2, 800a69e <_realloc_r+0x24>
 800a692:	f7fd fa6d 	bl	8007b70 <_free_r>
 800a696:	2400      	movs	r4, #0
 800a698:	4620      	mov	r0, r4
 800a69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a69e:	f000 f8b2 	bl	800a806 <_malloc_usable_size_r>
 800a6a2:	4285      	cmp	r5, r0
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	d802      	bhi.n	800a6ae <_realloc_r+0x34>
 800a6a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a6ac:	d8f4      	bhi.n	800a698 <_realloc_r+0x1e>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	f7fd fad1 	bl	8007c58 <_malloc_r>
 800a6b6:	4607      	mov	r7, r0
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d0ec      	beq.n	800a696 <_realloc_r+0x1c>
 800a6bc:	42b5      	cmp	r5, r6
 800a6be:	462a      	mov	r2, r5
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	bf28      	it	cs
 800a6c4:	4632      	movcs	r2, r6
 800a6c6:	f7ff fc45 	bl	8009f54 <memcpy>
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4640      	mov	r0, r8
 800a6ce:	f7fd fa4f 	bl	8007b70 <_free_r>
 800a6d2:	463c      	mov	r4, r7
 800a6d4:	e7e0      	b.n	800a698 <_realloc_r+0x1e>
	...

0800a6d8 <_strtoul_l.constprop.0>:
 800a6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6dc:	4e34      	ldr	r6, [pc, #208]	@ (800a7b0 <_strtoul_l.constprop.0+0xd8>)
 800a6de:	4686      	mov	lr, r0
 800a6e0:	460d      	mov	r5, r1
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6e8:	5d37      	ldrb	r7, [r6, r4]
 800a6ea:	f017 0708 	ands.w	r7, r7, #8
 800a6ee:	d1f8      	bne.n	800a6e2 <_strtoul_l.constprop.0+0xa>
 800a6f0:	2c2d      	cmp	r4, #45	@ 0x2d
 800a6f2:	d12f      	bne.n	800a754 <_strtoul_l.constprop.0+0x7c>
 800a6f4:	782c      	ldrb	r4, [r5, #0]
 800a6f6:	2701      	movs	r7, #1
 800a6f8:	1c85      	adds	r5, r0, #2
 800a6fa:	f033 0010 	bics.w	r0, r3, #16
 800a6fe:	d109      	bne.n	800a714 <_strtoul_l.constprop.0+0x3c>
 800a700:	2c30      	cmp	r4, #48	@ 0x30
 800a702:	d12c      	bne.n	800a75e <_strtoul_l.constprop.0+0x86>
 800a704:	7828      	ldrb	r0, [r5, #0]
 800a706:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a70a:	2858      	cmp	r0, #88	@ 0x58
 800a70c:	d127      	bne.n	800a75e <_strtoul_l.constprop.0+0x86>
 800a70e:	786c      	ldrb	r4, [r5, #1]
 800a710:	2310      	movs	r3, #16
 800a712:	3502      	adds	r5, #2
 800a714:	f04f 38ff 	mov.w	r8, #4294967295
 800a718:	2600      	movs	r6, #0
 800a71a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a71e:	fb03 f908 	mul.w	r9, r3, r8
 800a722:	ea6f 0909 	mvn.w	r9, r9
 800a726:	4630      	mov	r0, r6
 800a728:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a72c:	f1bc 0f09 	cmp.w	ip, #9
 800a730:	d81c      	bhi.n	800a76c <_strtoul_l.constprop.0+0x94>
 800a732:	4664      	mov	r4, ip
 800a734:	42a3      	cmp	r3, r4
 800a736:	dd2a      	ble.n	800a78e <_strtoul_l.constprop.0+0xb6>
 800a738:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a73c:	d007      	beq.n	800a74e <_strtoul_l.constprop.0+0x76>
 800a73e:	4580      	cmp	r8, r0
 800a740:	d322      	bcc.n	800a788 <_strtoul_l.constprop.0+0xb0>
 800a742:	d101      	bne.n	800a748 <_strtoul_l.constprop.0+0x70>
 800a744:	45a1      	cmp	r9, r4
 800a746:	db1f      	blt.n	800a788 <_strtoul_l.constprop.0+0xb0>
 800a748:	fb00 4003 	mla	r0, r0, r3, r4
 800a74c:	2601      	movs	r6, #1
 800a74e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a752:	e7e9      	b.n	800a728 <_strtoul_l.constprop.0+0x50>
 800a754:	2c2b      	cmp	r4, #43	@ 0x2b
 800a756:	bf04      	itt	eq
 800a758:	782c      	ldrbeq	r4, [r5, #0]
 800a75a:	1c85      	addeq	r5, r0, #2
 800a75c:	e7cd      	b.n	800a6fa <_strtoul_l.constprop.0+0x22>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1d8      	bne.n	800a714 <_strtoul_l.constprop.0+0x3c>
 800a762:	2c30      	cmp	r4, #48	@ 0x30
 800a764:	bf0c      	ite	eq
 800a766:	2308      	moveq	r3, #8
 800a768:	230a      	movne	r3, #10
 800a76a:	e7d3      	b.n	800a714 <_strtoul_l.constprop.0+0x3c>
 800a76c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a770:	f1bc 0f19 	cmp.w	ip, #25
 800a774:	d801      	bhi.n	800a77a <_strtoul_l.constprop.0+0xa2>
 800a776:	3c37      	subs	r4, #55	@ 0x37
 800a778:	e7dc      	b.n	800a734 <_strtoul_l.constprop.0+0x5c>
 800a77a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a77e:	f1bc 0f19 	cmp.w	ip, #25
 800a782:	d804      	bhi.n	800a78e <_strtoul_l.constprop.0+0xb6>
 800a784:	3c57      	subs	r4, #87	@ 0x57
 800a786:	e7d5      	b.n	800a734 <_strtoul_l.constprop.0+0x5c>
 800a788:	f04f 36ff 	mov.w	r6, #4294967295
 800a78c:	e7df      	b.n	800a74e <_strtoul_l.constprop.0+0x76>
 800a78e:	1c73      	adds	r3, r6, #1
 800a790:	d106      	bne.n	800a7a0 <_strtoul_l.constprop.0+0xc8>
 800a792:	2322      	movs	r3, #34	@ 0x22
 800a794:	f8ce 3000 	str.w	r3, [lr]
 800a798:	4630      	mov	r0, r6
 800a79a:	b932      	cbnz	r2, 800a7aa <_strtoul_l.constprop.0+0xd2>
 800a79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7a0:	b107      	cbz	r7, 800a7a4 <_strtoul_l.constprop.0+0xcc>
 800a7a2:	4240      	negs	r0, r0
 800a7a4:	2a00      	cmp	r2, #0
 800a7a6:	d0f9      	beq.n	800a79c <_strtoul_l.constprop.0+0xc4>
 800a7a8:	b106      	cbz	r6, 800a7ac <_strtoul_l.constprop.0+0xd4>
 800a7aa:	1e69      	subs	r1, r5, #1
 800a7ac:	6011      	str	r1, [r2, #0]
 800a7ae:	e7f5      	b.n	800a79c <_strtoul_l.constprop.0+0xc4>
 800a7b0:	0800c531 	.word	0x0800c531

0800a7b4 <_strtoul_r>:
 800a7b4:	f7ff bf90 	b.w	800a6d8 <_strtoul_l.constprop.0>

0800a7b8 <__ascii_wctomb>:
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4608      	mov	r0, r1
 800a7bc:	b141      	cbz	r1, 800a7d0 <__ascii_wctomb+0x18>
 800a7be:	2aff      	cmp	r2, #255	@ 0xff
 800a7c0:	d904      	bls.n	800a7cc <__ascii_wctomb+0x14>
 800a7c2:	228a      	movs	r2, #138	@ 0x8a
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ca:	4770      	bx	lr
 800a7cc:	700a      	strb	r2, [r1, #0]
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	4770      	bx	lr
	...

0800a7d4 <fiprintf>:
 800a7d4:	b40e      	push	{r1, r2, r3}
 800a7d6:	b503      	push	{r0, r1, lr}
 800a7d8:	4601      	mov	r1, r0
 800a7da:	ab03      	add	r3, sp, #12
 800a7dc:	4805      	ldr	r0, [pc, #20]	@ (800a7f4 <fiprintf+0x20>)
 800a7de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7e2:	6800      	ldr	r0, [r0, #0]
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	f000 f83f 	bl	800a868 <_vfiprintf_r>
 800a7ea:	b002      	add	sp, #8
 800a7ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7f0:	b003      	add	sp, #12
 800a7f2:	4770      	bx	lr
 800a7f4:	20000064 	.word	0x20000064

0800a7f8 <abort>:
 800a7f8:	b508      	push	{r3, lr}
 800a7fa:	2006      	movs	r0, #6
 800a7fc:	f000 fa08 	bl	800ac10 <raise>
 800a800:	2001      	movs	r0, #1
 800a802:	f7f7 fb83 	bl	8001f0c <_exit>

0800a806 <_malloc_usable_size_r>:
 800a806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a80a:	1f18      	subs	r0, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	bfbc      	itt	lt
 800a810:	580b      	ldrlt	r3, [r1, r0]
 800a812:	18c0      	addlt	r0, r0, r3
 800a814:	4770      	bx	lr

0800a816 <__sfputc_r>:
 800a816:	6893      	ldr	r3, [r2, #8]
 800a818:	3b01      	subs	r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	b410      	push	{r4}
 800a81e:	6093      	str	r3, [r2, #8]
 800a820:	da08      	bge.n	800a834 <__sfputc_r+0x1e>
 800a822:	6994      	ldr	r4, [r2, #24]
 800a824:	42a3      	cmp	r3, r4
 800a826:	db01      	blt.n	800a82c <__sfputc_r+0x16>
 800a828:	290a      	cmp	r1, #10
 800a82a:	d103      	bne.n	800a834 <__sfputc_r+0x1e>
 800a82c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a830:	f000 b932 	b.w	800aa98 <__swbuf_r>
 800a834:	6813      	ldr	r3, [r2, #0]
 800a836:	1c58      	adds	r0, r3, #1
 800a838:	6010      	str	r0, [r2, #0]
 800a83a:	7019      	strb	r1, [r3, #0]
 800a83c:	4608      	mov	r0, r1
 800a83e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <__sfputs_r>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	4606      	mov	r6, r0
 800a848:	460f      	mov	r7, r1
 800a84a:	4614      	mov	r4, r2
 800a84c:	18d5      	adds	r5, r2, r3
 800a84e:	42ac      	cmp	r4, r5
 800a850:	d101      	bne.n	800a856 <__sfputs_r+0x12>
 800a852:	2000      	movs	r0, #0
 800a854:	e007      	b.n	800a866 <__sfputs_r+0x22>
 800a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85a:	463a      	mov	r2, r7
 800a85c:	4630      	mov	r0, r6
 800a85e:	f7ff ffda 	bl	800a816 <__sfputc_r>
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d1f3      	bne.n	800a84e <__sfputs_r+0xa>
 800a866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a868 <_vfiprintf_r>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	460d      	mov	r5, r1
 800a86e:	b09d      	sub	sp, #116	@ 0x74
 800a870:	4614      	mov	r4, r2
 800a872:	4698      	mov	r8, r3
 800a874:	4606      	mov	r6, r0
 800a876:	b118      	cbz	r0, 800a880 <_vfiprintf_r+0x18>
 800a878:	6a03      	ldr	r3, [r0, #32]
 800a87a:	b90b      	cbnz	r3, 800a880 <_vfiprintf_r+0x18>
 800a87c:	f7fc f9ce 	bl	8006c1c <__sinit>
 800a880:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a882:	07d9      	lsls	r1, r3, #31
 800a884:	d405      	bmi.n	800a892 <_vfiprintf_r+0x2a>
 800a886:	89ab      	ldrh	r3, [r5, #12]
 800a888:	059a      	lsls	r2, r3, #22
 800a88a:	d402      	bmi.n	800a892 <_vfiprintf_r+0x2a>
 800a88c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a88e:	f7fc fb1a 	bl	8006ec6 <__retarget_lock_acquire_recursive>
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	071b      	lsls	r3, r3, #28
 800a896:	d501      	bpl.n	800a89c <_vfiprintf_r+0x34>
 800a898:	692b      	ldr	r3, [r5, #16]
 800a89a:	b99b      	cbnz	r3, 800a8c4 <_vfiprintf_r+0x5c>
 800a89c:	4629      	mov	r1, r5
 800a89e:	4630      	mov	r0, r6
 800a8a0:	f000 f938 	bl	800ab14 <__swsetup_r>
 800a8a4:	b170      	cbz	r0, 800a8c4 <_vfiprintf_r+0x5c>
 800a8a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8a8:	07dc      	lsls	r4, r3, #31
 800a8aa:	d504      	bpl.n	800a8b6 <_vfiprintf_r+0x4e>
 800a8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b0:	b01d      	add	sp, #116	@ 0x74
 800a8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b6:	89ab      	ldrh	r3, [r5, #12]
 800a8b8:	0598      	lsls	r0, r3, #22
 800a8ba:	d4f7      	bmi.n	800a8ac <_vfiprintf_r+0x44>
 800a8bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8be:	f7fc fb03 	bl	8006ec8 <__retarget_lock_release_recursive>
 800a8c2:	e7f3      	b.n	800a8ac <_vfiprintf_r+0x44>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8c8:	2320      	movs	r3, #32
 800a8ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8d2:	2330      	movs	r3, #48	@ 0x30
 800a8d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa84 <_vfiprintf_r+0x21c>
 800a8d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8dc:	f04f 0901 	mov.w	r9, #1
 800a8e0:	4623      	mov	r3, r4
 800a8e2:	469a      	mov	sl, r3
 800a8e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8e8:	b10a      	cbz	r2, 800a8ee <_vfiprintf_r+0x86>
 800a8ea:	2a25      	cmp	r2, #37	@ 0x25
 800a8ec:	d1f9      	bne.n	800a8e2 <_vfiprintf_r+0x7a>
 800a8ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a8f2:	d00b      	beq.n	800a90c <_vfiprintf_r+0xa4>
 800a8f4:	465b      	mov	r3, fp
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f7ff ffa2 	bl	800a844 <__sfputs_r>
 800a900:	3001      	adds	r0, #1
 800a902:	f000 80a7 	beq.w	800aa54 <_vfiprintf_r+0x1ec>
 800a906:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a908:	445a      	add	r2, fp
 800a90a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a90c:	f89a 3000 	ldrb.w	r3, [sl]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f000 809f 	beq.w	800aa54 <_vfiprintf_r+0x1ec>
 800a916:	2300      	movs	r3, #0
 800a918:	f04f 32ff 	mov.w	r2, #4294967295
 800a91c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a920:	f10a 0a01 	add.w	sl, sl, #1
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	9307      	str	r3, [sp, #28]
 800a928:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a92c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a92e:	4654      	mov	r4, sl
 800a930:	2205      	movs	r2, #5
 800a932:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a936:	4853      	ldr	r0, [pc, #332]	@ (800aa84 <_vfiprintf_r+0x21c>)
 800a938:	f7f5 fc52 	bl	80001e0 <memchr>
 800a93c:	9a04      	ldr	r2, [sp, #16]
 800a93e:	b9d8      	cbnz	r0, 800a978 <_vfiprintf_r+0x110>
 800a940:	06d1      	lsls	r1, r2, #27
 800a942:	bf44      	itt	mi
 800a944:	2320      	movmi	r3, #32
 800a946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a94a:	0713      	lsls	r3, r2, #28
 800a94c:	bf44      	itt	mi
 800a94e:	232b      	movmi	r3, #43	@ 0x2b
 800a950:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a954:	f89a 3000 	ldrb.w	r3, [sl]
 800a958:	2b2a      	cmp	r3, #42	@ 0x2a
 800a95a:	d015      	beq.n	800a988 <_vfiprintf_r+0x120>
 800a95c:	9a07      	ldr	r2, [sp, #28]
 800a95e:	4654      	mov	r4, sl
 800a960:	2000      	movs	r0, #0
 800a962:	f04f 0c0a 	mov.w	ip, #10
 800a966:	4621      	mov	r1, r4
 800a968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a96c:	3b30      	subs	r3, #48	@ 0x30
 800a96e:	2b09      	cmp	r3, #9
 800a970:	d94b      	bls.n	800aa0a <_vfiprintf_r+0x1a2>
 800a972:	b1b0      	cbz	r0, 800a9a2 <_vfiprintf_r+0x13a>
 800a974:	9207      	str	r2, [sp, #28]
 800a976:	e014      	b.n	800a9a2 <_vfiprintf_r+0x13a>
 800a978:	eba0 0308 	sub.w	r3, r0, r8
 800a97c:	fa09 f303 	lsl.w	r3, r9, r3
 800a980:	4313      	orrs	r3, r2
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	46a2      	mov	sl, r4
 800a986:	e7d2      	b.n	800a92e <_vfiprintf_r+0xc6>
 800a988:	9b03      	ldr	r3, [sp, #12]
 800a98a:	1d19      	adds	r1, r3, #4
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	9103      	str	r1, [sp, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	bfbb      	ittet	lt
 800a994:	425b      	neglt	r3, r3
 800a996:	f042 0202 	orrlt.w	r2, r2, #2
 800a99a:	9307      	strge	r3, [sp, #28]
 800a99c:	9307      	strlt	r3, [sp, #28]
 800a99e:	bfb8      	it	lt
 800a9a0:	9204      	strlt	r2, [sp, #16]
 800a9a2:	7823      	ldrb	r3, [r4, #0]
 800a9a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9a6:	d10a      	bne.n	800a9be <_vfiprintf_r+0x156>
 800a9a8:	7863      	ldrb	r3, [r4, #1]
 800a9aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9ac:	d132      	bne.n	800aa14 <_vfiprintf_r+0x1ac>
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	1d1a      	adds	r2, r3, #4
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	9203      	str	r2, [sp, #12]
 800a9b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9ba:	3402      	adds	r4, #2
 800a9bc:	9305      	str	r3, [sp, #20]
 800a9be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa94 <_vfiprintf_r+0x22c>
 800a9c2:	7821      	ldrb	r1, [r4, #0]
 800a9c4:	2203      	movs	r2, #3
 800a9c6:	4650      	mov	r0, sl
 800a9c8:	f7f5 fc0a 	bl	80001e0 <memchr>
 800a9cc:	b138      	cbz	r0, 800a9de <_vfiprintf_r+0x176>
 800a9ce:	9b04      	ldr	r3, [sp, #16]
 800a9d0:	eba0 000a 	sub.w	r0, r0, sl
 800a9d4:	2240      	movs	r2, #64	@ 0x40
 800a9d6:	4082      	lsls	r2, r0
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	3401      	adds	r4, #1
 800a9dc:	9304      	str	r3, [sp, #16]
 800a9de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e2:	4829      	ldr	r0, [pc, #164]	@ (800aa88 <_vfiprintf_r+0x220>)
 800a9e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9e8:	2206      	movs	r2, #6
 800a9ea:	f7f5 fbf9 	bl	80001e0 <memchr>
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d03f      	beq.n	800aa72 <_vfiprintf_r+0x20a>
 800a9f2:	4b26      	ldr	r3, [pc, #152]	@ (800aa8c <_vfiprintf_r+0x224>)
 800a9f4:	bb1b      	cbnz	r3, 800aa3e <_vfiprintf_r+0x1d6>
 800a9f6:	9b03      	ldr	r3, [sp, #12]
 800a9f8:	3307      	adds	r3, #7
 800a9fa:	f023 0307 	bic.w	r3, r3, #7
 800a9fe:	3308      	adds	r3, #8
 800aa00:	9303      	str	r3, [sp, #12]
 800aa02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa04:	443b      	add	r3, r7
 800aa06:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa08:	e76a      	b.n	800a8e0 <_vfiprintf_r+0x78>
 800aa0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa0e:	460c      	mov	r4, r1
 800aa10:	2001      	movs	r0, #1
 800aa12:	e7a8      	b.n	800a966 <_vfiprintf_r+0xfe>
 800aa14:	2300      	movs	r3, #0
 800aa16:	3401      	adds	r4, #1
 800aa18:	9305      	str	r3, [sp, #20]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	f04f 0c0a 	mov.w	ip, #10
 800aa20:	4620      	mov	r0, r4
 800aa22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa26:	3a30      	subs	r2, #48	@ 0x30
 800aa28:	2a09      	cmp	r2, #9
 800aa2a:	d903      	bls.n	800aa34 <_vfiprintf_r+0x1cc>
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d0c6      	beq.n	800a9be <_vfiprintf_r+0x156>
 800aa30:	9105      	str	r1, [sp, #20]
 800aa32:	e7c4      	b.n	800a9be <_vfiprintf_r+0x156>
 800aa34:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa38:	4604      	mov	r4, r0
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e7f0      	b.n	800aa20 <_vfiprintf_r+0x1b8>
 800aa3e:	ab03      	add	r3, sp, #12
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	462a      	mov	r2, r5
 800aa44:	4b12      	ldr	r3, [pc, #72]	@ (800aa90 <_vfiprintf_r+0x228>)
 800aa46:	a904      	add	r1, sp, #16
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f7fb fa8f 	bl	8005f6c <_printf_float>
 800aa4e:	4607      	mov	r7, r0
 800aa50:	1c78      	adds	r0, r7, #1
 800aa52:	d1d6      	bne.n	800aa02 <_vfiprintf_r+0x19a>
 800aa54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa56:	07d9      	lsls	r1, r3, #31
 800aa58:	d405      	bmi.n	800aa66 <_vfiprintf_r+0x1fe>
 800aa5a:	89ab      	ldrh	r3, [r5, #12]
 800aa5c:	059a      	lsls	r2, r3, #22
 800aa5e:	d402      	bmi.n	800aa66 <_vfiprintf_r+0x1fe>
 800aa60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa62:	f7fc fa31 	bl	8006ec8 <__retarget_lock_release_recursive>
 800aa66:	89ab      	ldrh	r3, [r5, #12]
 800aa68:	065b      	lsls	r3, r3, #25
 800aa6a:	f53f af1f 	bmi.w	800a8ac <_vfiprintf_r+0x44>
 800aa6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa70:	e71e      	b.n	800a8b0 <_vfiprintf_r+0x48>
 800aa72:	ab03      	add	r3, sp, #12
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	462a      	mov	r2, r5
 800aa78:	4b05      	ldr	r3, [pc, #20]	@ (800aa90 <_vfiprintf_r+0x228>)
 800aa7a:	a904      	add	r1, sp, #16
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	f7fb fd0d 	bl	800649c <_printf_i>
 800aa82:	e7e4      	b.n	800aa4e <_vfiprintf_r+0x1e6>
 800aa84:	0800c631 	.word	0x0800c631
 800aa88:	0800c63b 	.word	0x0800c63b
 800aa8c:	08005f6d 	.word	0x08005f6d
 800aa90:	0800a845 	.word	0x0800a845
 800aa94:	0800c637 	.word	0x0800c637

0800aa98 <__swbuf_r>:
 800aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9a:	460e      	mov	r6, r1
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	b118      	cbz	r0, 800aaaa <__swbuf_r+0x12>
 800aaa2:	6a03      	ldr	r3, [r0, #32]
 800aaa4:	b90b      	cbnz	r3, 800aaaa <__swbuf_r+0x12>
 800aaa6:	f7fc f8b9 	bl	8006c1c <__sinit>
 800aaaa:	69a3      	ldr	r3, [r4, #24]
 800aaac:	60a3      	str	r3, [r4, #8]
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	071a      	lsls	r2, r3, #28
 800aab2:	d501      	bpl.n	800aab8 <__swbuf_r+0x20>
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	b943      	cbnz	r3, 800aaca <__swbuf_r+0x32>
 800aab8:	4621      	mov	r1, r4
 800aaba:	4628      	mov	r0, r5
 800aabc:	f000 f82a 	bl	800ab14 <__swsetup_r>
 800aac0:	b118      	cbz	r0, 800aaca <__swbuf_r+0x32>
 800aac2:	f04f 37ff 	mov.w	r7, #4294967295
 800aac6:	4638      	mov	r0, r7
 800aac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	6922      	ldr	r2, [r4, #16]
 800aace:	1a98      	subs	r0, r3, r2
 800aad0:	6963      	ldr	r3, [r4, #20]
 800aad2:	b2f6      	uxtb	r6, r6
 800aad4:	4283      	cmp	r3, r0
 800aad6:	4637      	mov	r7, r6
 800aad8:	dc05      	bgt.n	800aae6 <__swbuf_r+0x4e>
 800aada:	4621      	mov	r1, r4
 800aadc:	4628      	mov	r0, r5
 800aade:	f7ff f973 	bl	8009dc8 <_fflush_r>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d1ed      	bne.n	800aac2 <__swbuf_r+0x2a>
 800aae6:	68a3      	ldr	r3, [r4, #8]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	60a3      	str	r3, [r4, #8]
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	1c5a      	adds	r2, r3, #1
 800aaf0:	6022      	str	r2, [r4, #0]
 800aaf2:	701e      	strb	r6, [r3, #0]
 800aaf4:	6962      	ldr	r2, [r4, #20]
 800aaf6:	1c43      	adds	r3, r0, #1
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d004      	beq.n	800ab06 <__swbuf_r+0x6e>
 800aafc:	89a3      	ldrh	r3, [r4, #12]
 800aafe:	07db      	lsls	r3, r3, #31
 800ab00:	d5e1      	bpl.n	800aac6 <__swbuf_r+0x2e>
 800ab02:	2e0a      	cmp	r6, #10
 800ab04:	d1df      	bne.n	800aac6 <__swbuf_r+0x2e>
 800ab06:	4621      	mov	r1, r4
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f7ff f95d 	bl	8009dc8 <_fflush_r>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d0d9      	beq.n	800aac6 <__swbuf_r+0x2e>
 800ab12:	e7d6      	b.n	800aac2 <__swbuf_r+0x2a>

0800ab14 <__swsetup_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4b29      	ldr	r3, [pc, #164]	@ (800abbc <__swsetup_r+0xa8>)
 800ab18:	4605      	mov	r5, r0
 800ab1a:	6818      	ldr	r0, [r3, #0]
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	b118      	cbz	r0, 800ab28 <__swsetup_r+0x14>
 800ab20:	6a03      	ldr	r3, [r0, #32]
 800ab22:	b90b      	cbnz	r3, 800ab28 <__swsetup_r+0x14>
 800ab24:	f7fc f87a 	bl	8006c1c <__sinit>
 800ab28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2c:	0719      	lsls	r1, r3, #28
 800ab2e:	d422      	bmi.n	800ab76 <__swsetup_r+0x62>
 800ab30:	06da      	lsls	r2, r3, #27
 800ab32:	d407      	bmi.n	800ab44 <__swsetup_r+0x30>
 800ab34:	2209      	movs	r2, #9
 800ab36:	602a      	str	r2, [r5, #0]
 800ab38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab3c:	81a3      	strh	r3, [r4, #12]
 800ab3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab42:	e033      	b.n	800abac <__swsetup_r+0x98>
 800ab44:	0758      	lsls	r0, r3, #29
 800ab46:	d512      	bpl.n	800ab6e <__swsetup_r+0x5a>
 800ab48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab4a:	b141      	cbz	r1, 800ab5e <__swsetup_r+0x4a>
 800ab4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab50:	4299      	cmp	r1, r3
 800ab52:	d002      	beq.n	800ab5a <__swsetup_r+0x46>
 800ab54:	4628      	mov	r0, r5
 800ab56:	f7fd f80b 	bl	8007b70 <_free_r>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab5e:	89a3      	ldrh	r3, [r4, #12]
 800ab60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab64:	81a3      	strh	r3, [r4, #12]
 800ab66:	2300      	movs	r3, #0
 800ab68:	6063      	str	r3, [r4, #4]
 800ab6a:	6923      	ldr	r3, [r4, #16]
 800ab6c:	6023      	str	r3, [r4, #0]
 800ab6e:	89a3      	ldrh	r3, [r4, #12]
 800ab70:	f043 0308 	orr.w	r3, r3, #8
 800ab74:	81a3      	strh	r3, [r4, #12]
 800ab76:	6923      	ldr	r3, [r4, #16]
 800ab78:	b94b      	cbnz	r3, 800ab8e <__swsetup_r+0x7a>
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab84:	d003      	beq.n	800ab8e <__swsetup_r+0x7a>
 800ab86:	4621      	mov	r1, r4
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f000 f883 	bl	800ac94 <__smakebuf_r>
 800ab8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab92:	f013 0201 	ands.w	r2, r3, #1
 800ab96:	d00a      	beq.n	800abae <__swsetup_r+0x9a>
 800ab98:	2200      	movs	r2, #0
 800ab9a:	60a2      	str	r2, [r4, #8]
 800ab9c:	6962      	ldr	r2, [r4, #20]
 800ab9e:	4252      	negs	r2, r2
 800aba0:	61a2      	str	r2, [r4, #24]
 800aba2:	6922      	ldr	r2, [r4, #16]
 800aba4:	b942      	cbnz	r2, 800abb8 <__swsetup_r+0xa4>
 800aba6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abaa:	d1c5      	bne.n	800ab38 <__swsetup_r+0x24>
 800abac:	bd38      	pop	{r3, r4, r5, pc}
 800abae:	0799      	lsls	r1, r3, #30
 800abb0:	bf58      	it	pl
 800abb2:	6962      	ldrpl	r2, [r4, #20]
 800abb4:	60a2      	str	r2, [r4, #8]
 800abb6:	e7f4      	b.n	800aba2 <__swsetup_r+0x8e>
 800abb8:	2000      	movs	r0, #0
 800abba:	e7f7      	b.n	800abac <__swsetup_r+0x98>
 800abbc:	20000064 	.word	0x20000064

0800abc0 <_raise_r>:
 800abc0:	291f      	cmp	r1, #31
 800abc2:	b538      	push	{r3, r4, r5, lr}
 800abc4:	4605      	mov	r5, r0
 800abc6:	460c      	mov	r4, r1
 800abc8:	d904      	bls.n	800abd4 <_raise_r+0x14>
 800abca:	2316      	movs	r3, #22
 800abcc:	6003      	str	r3, [r0, #0]
 800abce:	f04f 30ff 	mov.w	r0, #4294967295
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800abd6:	b112      	cbz	r2, 800abde <_raise_r+0x1e>
 800abd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abdc:	b94b      	cbnz	r3, 800abf2 <_raise_r+0x32>
 800abde:	4628      	mov	r0, r5
 800abe0:	f000 f830 	bl	800ac44 <_getpid_r>
 800abe4:	4622      	mov	r2, r4
 800abe6:	4601      	mov	r1, r0
 800abe8:	4628      	mov	r0, r5
 800abea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abee:	f000 b817 	b.w	800ac20 <_kill_r>
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d00a      	beq.n	800ac0c <_raise_r+0x4c>
 800abf6:	1c59      	adds	r1, r3, #1
 800abf8:	d103      	bne.n	800ac02 <_raise_r+0x42>
 800abfa:	2316      	movs	r3, #22
 800abfc:	6003      	str	r3, [r0, #0]
 800abfe:	2001      	movs	r0, #1
 800ac00:	e7e7      	b.n	800abd2 <_raise_r+0x12>
 800ac02:	2100      	movs	r1, #0
 800ac04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac08:	4620      	mov	r0, r4
 800ac0a:	4798      	blx	r3
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e7e0      	b.n	800abd2 <_raise_r+0x12>

0800ac10 <raise>:
 800ac10:	4b02      	ldr	r3, [pc, #8]	@ (800ac1c <raise+0xc>)
 800ac12:	4601      	mov	r1, r0
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	f7ff bfd3 	b.w	800abc0 <_raise_r>
 800ac1a:	bf00      	nop
 800ac1c:	20000064 	.word	0x20000064

0800ac20 <_kill_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4d07      	ldr	r5, [pc, #28]	@ (800ac40 <_kill_r+0x20>)
 800ac24:	2300      	movs	r3, #0
 800ac26:	4604      	mov	r4, r0
 800ac28:	4608      	mov	r0, r1
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	f7f7 f95d 	bl	8001eec <_kill>
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	d102      	bne.n	800ac3c <_kill_r+0x1c>
 800ac36:	682b      	ldr	r3, [r5, #0]
 800ac38:	b103      	cbz	r3, 800ac3c <_kill_r+0x1c>
 800ac3a:	6023      	str	r3, [r4, #0]
 800ac3c:	bd38      	pop	{r3, r4, r5, pc}
 800ac3e:	bf00      	nop
 800ac40:	20000620 	.word	0x20000620

0800ac44 <_getpid_r>:
 800ac44:	f7f7 b94a 	b.w	8001edc <_getpid>

0800ac48 <__swhatbuf_r>:
 800ac48:	b570      	push	{r4, r5, r6, lr}
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac50:	2900      	cmp	r1, #0
 800ac52:	b096      	sub	sp, #88	@ 0x58
 800ac54:	4615      	mov	r5, r2
 800ac56:	461e      	mov	r6, r3
 800ac58:	da0d      	bge.n	800ac76 <__swhatbuf_r+0x2e>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac60:	f04f 0100 	mov.w	r1, #0
 800ac64:	bf14      	ite	ne
 800ac66:	2340      	movne	r3, #64	@ 0x40
 800ac68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	6031      	str	r1, [r6, #0]
 800ac70:	602b      	str	r3, [r5, #0]
 800ac72:	b016      	add	sp, #88	@ 0x58
 800ac74:	bd70      	pop	{r4, r5, r6, pc}
 800ac76:	466a      	mov	r2, sp
 800ac78:	f000 f848 	bl	800ad0c <_fstat_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	dbec      	blt.n	800ac5a <__swhatbuf_r+0x12>
 800ac80:	9901      	ldr	r1, [sp, #4]
 800ac82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac8a:	4259      	negs	r1, r3
 800ac8c:	4159      	adcs	r1, r3
 800ac8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac92:	e7eb      	b.n	800ac6c <__swhatbuf_r+0x24>

0800ac94 <__smakebuf_r>:
 800ac94:	898b      	ldrh	r3, [r1, #12]
 800ac96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac98:	079d      	lsls	r5, r3, #30
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	d507      	bpl.n	800acb0 <__smakebuf_r+0x1c>
 800aca0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	6123      	str	r3, [r4, #16]
 800aca8:	2301      	movs	r3, #1
 800acaa:	6163      	str	r3, [r4, #20]
 800acac:	b003      	add	sp, #12
 800acae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb0:	ab01      	add	r3, sp, #4
 800acb2:	466a      	mov	r2, sp
 800acb4:	f7ff ffc8 	bl	800ac48 <__swhatbuf_r>
 800acb8:	9f00      	ldr	r7, [sp, #0]
 800acba:	4605      	mov	r5, r0
 800acbc:	4639      	mov	r1, r7
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7fc ffca 	bl	8007c58 <_malloc_r>
 800acc4:	b948      	cbnz	r0, 800acda <__smakebuf_r+0x46>
 800acc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acca:	059a      	lsls	r2, r3, #22
 800accc:	d4ee      	bmi.n	800acac <__smakebuf_r+0x18>
 800acce:	f023 0303 	bic.w	r3, r3, #3
 800acd2:	f043 0302 	orr.w	r3, r3, #2
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	e7e2      	b.n	800aca0 <__smakebuf_r+0xc>
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	6020      	str	r0, [r4, #0]
 800acde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	9b01      	ldr	r3, [sp, #4]
 800ace6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acea:	b15b      	cbz	r3, 800ad04 <__smakebuf_r+0x70>
 800acec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acf0:	4630      	mov	r0, r6
 800acf2:	f000 f81d 	bl	800ad30 <_isatty_r>
 800acf6:	b128      	cbz	r0, 800ad04 <__smakebuf_r+0x70>
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	f023 0303 	bic.w	r3, r3, #3
 800acfe:	f043 0301 	orr.w	r3, r3, #1
 800ad02:	81a3      	strh	r3, [r4, #12]
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	431d      	orrs	r5, r3
 800ad08:	81a5      	strh	r5, [r4, #12]
 800ad0a:	e7cf      	b.n	800acac <__smakebuf_r+0x18>

0800ad0c <_fstat_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d07      	ldr	r5, [pc, #28]	@ (800ad2c <_fstat_r+0x20>)
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	4611      	mov	r1, r2
 800ad18:	602b      	str	r3, [r5, #0]
 800ad1a:	f7f7 f947 	bl	8001fac <_fstat>
 800ad1e:	1c43      	adds	r3, r0, #1
 800ad20:	d102      	bne.n	800ad28 <_fstat_r+0x1c>
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	b103      	cbz	r3, 800ad28 <_fstat_r+0x1c>
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	bd38      	pop	{r3, r4, r5, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20000620 	.word	0x20000620

0800ad30 <_isatty_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d06      	ldr	r5, [pc, #24]	@ (800ad4c <_isatty_r+0x1c>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7f7 f946 	bl	8001fcc <_isatty>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d102      	bne.n	800ad4a <_isatty_r+0x1a>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	b103      	cbz	r3, 800ad4a <_isatty_r+0x1a>
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	20000620 	.word	0x20000620

0800ad50 <acos>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	ed2d 8b02 	vpush	{d8}
 800ad56:	ec55 4b10 	vmov	r4, r5, d0
 800ad5a:	f000 fa0d 	bl	800b178 <__ieee754_acos>
 800ad5e:	4622      	mov	r2, r4
 800ad60:	462b      	mov	r3, r5
 800ad62:	4620      	mov	r0, r4
 800ad64:	4629      	mov	r1, r5
 800ad66:	eeb0 8a40 	vmov.f32	s16, s0
 800ad6a:	eef0 8a60 	vmov.f32	s17, s1
 800ad6e:	f7f5 fee5 	bl	8000b3c <__aeabi_dcmpun>
 800ad72:	b9a8      	cbnz	r0, 800ada0 <acos+0x50>
 800ad74:	ec45 4b10 	vmov	d0, r4, r5
 800ad78:	f000 f8ba 	bl	800aef0 <fabs>
 800ad7c:	4b0c      	ldr	r3, [pc, #48]	@ (800adb0 <acos+0x60>)
 800ad7e:	ec51 0b10 	vmov	r0, r1, d0
 800ad82:	2200      	movs	r2, #0
 800ad84:	f7f5 fed0 	bl	8000b28 <__aeabi_dcmpgt>
 800ad88:	b150      	cbz	r0, 800ada0 <acos+0x50>
 800ad8a:	f7fc f871 	bl	8006e70 <__errno>
 800ad8e:	ecbd 8b02 	vpop	{d8}
 800ad92:	2321      	movs	r3, #33	@ 0x21
 800ad94:	6003      	str	r3, [r0, #0]
 800ad96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad9a:	4806      	ldr	r0, [pc, #24]	@ (800adb4 <acos+0x64>)
 800ad9c:	f7ff b8e8 	b.w	8009f70 <nan>
 800ada0:	eeb0 0a48 	vmov.f32	s0, s16
 800ada4:	eef0 0a68 	vmov.f32	s1, s17
 800ada8:	ecbd 8b02 	vpop	{d8}
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	bf00      	nop
 800adb0:	3ff00000 	.word	0x3ff00000
 800adb4:	0800c6a0 	.word	0x0800c6a0

0800adb8 <pow>:
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	ed2d 8b02 	vpush	{d8}
 800adbe:	eeb0 8a40 	vmov.f32	s16, s0
 800adc2:	eef0 8a60 	vmov.f32	s17, s1
 800adc6:	ec55 4b11 	vmov	r4, r5, d1
 800adca:	f000 fc31 	bl	800b630 <__ieee754_pow>
 800adce:	4622      	mov	r2, r4
 800add0:	462b      	mov	r3, r5
 800add2:	4620      	mov	r0, r4
 800add4:	4629      	mov	r1, r5
 800add6:	ec57 6b10 	vmov	r6, r7, d0
 800adda:	f7f5 feaf 	bl	8000b3c <__aeabi_dcmpun>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d13b      	bne.n	800ae5a <pow+0xa2>
 800ade2:	ec51 0b18 	vmov	r0, r1, d8
 800ade6:	2200      	movs	r2, #0
 800ade8:	2300      	movs	r3, #0
 800adea:	f7f5 fe75 	bl	8000ad8 <__aeabi_dcmpeq>
 800adee:	b1b8      	cbz	r0, 800ae20 <pow+0x68>
 800adf0:	2200      	movs	r2, #0
 800adf2:	2300      	movs	r3, #0
 800adf4:	4620      	mov	r0, r4
 800adf6:	4629      	mov	r1, r5
 800adf8:	f7f5 fe6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d146      	bne.n	800ae8e <pow+0xd6>
 800ae00:	ec45 4b10 	vmov	d0, r4, r5
 800ae04:	f000 f87c 	bl	800af00 <finite>
 800ae08:	b338      	cbz	r0, 800ae5a <pow+0xa2>
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4620      	mov	r0, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7f5 fe6b 	bl	8000aec <__aeabi_dcmplt>
 800ae16:	b300      	cbz	r0, 800ae5a <pow+0xa2>
 800ae18:	f7fc f82a 	bl	8006e70 <__errno>
 800ae1c:	2322      	movs	r3, #34	@ 0x22
 800ae1e:	e01b      	b.n	800ae58 <pow+0xa0>
 800ae20:	ec47 6b10 	vmov	d0, r6, r7
 800ae24:	f000 f86c 	bl	800af00 <finite>
 800ae28:	b9e0      	cbnz	r0, 800ae64 <pow+0xac>
 800ae2a:	eeb0 0a48 	vmov.f32	s0, s16
 800ae2e:	eef0 0a68 	vmov.f32	s1, s17
 800ae32:	f000 f865 	bl	800af00 <finite>
 800ae36:	b1a8      	cbz	r0, 800ae64 <pow+0xac>
 800ae38:	ec45 4b10 	vmov	d0, r4, r5
 800ae3c:	f000 f860 	bl	800af00 <finite>
 800ae40:	b180      	cbz	r0, 800ae64 <pow+0xac>
 800ae42:	4632      	mov	r2, r6
 800ae44:	463b      	mov	r3, r7
 800ae46:	4630      	mov	r0, r6
 800ae48:	4639      	mov	r1, r7
 800ae4a:	f7f5 fe77 	bl	8000b3c <__aeabi_dcmpun>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d0e2      	beq.n	800ae18 <pow+0x60>
 800ae52:	f7fc f80d 	bl	8006e70 <__errno>
 800ae56:	2321      	movs	r3, #33	@ 0x21
 800ae58:	6003      	str	r3, [r0, #0]
 800ae5a:	ecbd 8b02 	vpop	{d8}
 800ae5e:	ec47 6b10 	vmov	d0, r6, r7
 800ae62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae64:	2200      	movs	r2, #0
 800ae66:	2300      	movs	r3, #0
 800ae68:	4630      	mov	r0, r6
 800ae6a:	4639      	mov	r1, r7
 800ae6c:	f7f5 fe34 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d0f2      	beq.n	800ae5a <pow+0xa2>
 800ae74:	eeb0 0a48 	vmov.f32	s0, s16
 800ae78:	eef0 0a68 	vmov.f32	s1, s17
 800ae7c:	f000 f840 	bl	800af00 <finite>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d0ea      	beq.n	800ae5a <pow+0xa2>
 800ae84:	ec45 4b10 	vmov	d0, r4, r5
 800ae88:	f000 f83a 	bl	800af00 <finite>
 800ae8c:	e7c3      	b.n	800ae16 <pow+0x5e>
 800ae8e:	4f01      	ldr	r7, [pc, #4]	@ (800ae94 <pow+0xdc>)
 800ae90:	2600      	movs	r6, #0
 800ae92:	e7e2      	b.n	800ae5a <pow+0xa2>
 800ae94:	3ff00000 	.word	0x3ff00000

0800ae98 <sqrt>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	ed2d 8b02 	vpush	{d8}
 800ae9e:	ec55 4b10 	vmov	r4, r5, d0
 800aea2:	f000 f88f 	bl	800afc4 <__ieee754_sqrt>
 800aea6:	4622      	mov	r2, r4
 800aea8:	462b      	mov	r3, r5
 800aeaa:	4620      	mov	r0, r4
 800aeac:	4629      	mov	r1, r5
 800aeae:	eeb0 8a40 	vmov.f32	s16, s0
 800aeb2:	eef0 8a60 	vmov.f32	s17, s1
 800aeb6:	f7f5 fe41 	bl	8000b3c <__aeabi_dcmpun>
 800aeba:	b990      	cbnz	r0, 800aee2 <sqrt+0x4a>
 800aebc:	2200      	movs	r2, #0
 800aebe:	2300      	movs	r3, #0
 800aec0:	4620      	mov	r0, r4
 800aec2:	4629      	mov	r1, r5
 800aec4:	f7f5 fe12 	bl	8000aec <__aeabi_dcmplt>
 800aec8:	b158      	cbz	r0, 800aee2 <sqrt+0x4a>
 800aeca:	f7fb ffd1 	bl	8006e70 <__errno>
 800aece:	2321      	movs	r3, #33	@ 0x21
 800aed0:	6003      	str	r3, [r0, #0]
 800aed2:	2200      	movs	r2, #0
 800aed4:	2300      	movs	r3, #0
 800aed6:	4610      	mov	r0, r2
 800aed8:	4619      	mov	r1, r3
 800aeda:	f7f5 fcbf 	bl	800085c <__aeabi_ddiv>
 800aede:	ec41 0b18 	vmov	d8, r0, r1
 800aee2:	eeb0 0a48 	vmov.f32	s0, s16
 800aee6:	eef0 0a68 	vmov.f32	s1, s17
 800aeea:	ecbd 8b02 	vpop	{d8}
 800aeee:	bd38      	pop	{r3, r4, r5, pc}

0800aef0 <fabs>:
 800aef0:	ec51 0b10 	vmov	r0, r1, d0
 800aef4:	4602      	mov	r2, r0
 800aef6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aefa:	ec43 2b10 	vmov	d0, r2, r3
 800aefe:	4770      	bx	lr

0800af00 <finite>:
 800af00:	b082      	sub	sp, #8
 800af02:	ed8d 0b00 	vstr	d0, [sp]
 800af06:	9801      	ldr	r0, [sp, #4]
 800af08:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800af0c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800af10:	0fc0      	lsrs	r0, r0, #31
 800af12:	b002      	add	sp, #8
 800af14:	4770      	bx	lr

0800af16 <fmaxf>:
 800af16:	b508      	push	{r3, lr}
 800af18:	ed2d 8b02 	vpush	{d8}
 800af1c:	eeb0 8a40 	vmov.f32	s16, s0
 800af20:	eef0 8a60 	vmov.f32	s17, s1
 800af24:	f000 f832 	bl	800af8c <__fpclassifyf>
 800af28:	b930      	cbnz	r0, 800af38 <fmaxf+0x22>
 800af2a:	eeb0 8a68 	vmov.f32	s16, s17
 800af2e:	eeb0 0a48 	vmov.f32	s0, s16
 800af32:	ecbd 8b02 	vpop	{d8}
 800af36:	bd08      	pop	{r3, pc}
 800af38:	eeb0 0a68 	vmov.f32	s0, s17
 800af3c:	f000 f826 	bl	800af8c <__fpclassifyf>
 800af40:	2800      	cmp	r0, #0
 800af42:	d0f4      	beq.n	800af2e <fmaxf+0x18>
 800af44:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800af48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af4c:	dded      	ble.n	800af2a <fmaxf+0x14>
 800af4e:	e7ee      	b.n	800af2e <fmaxf+0x18>

0800af50 <fminf>:
 800af50:	b508      	push	{r3, lr}
 800af52:	ed2d 8b02 	vpush	{d8}
 800af56:	eeb0 8a40 	vmov.f32	s16, s0
 800af5a:	eef0 8a60 	vmov.f32	s17, s1
 800af5e:	f000 f815 	bl	800af8c <__fpclassifyf>
 800af62:	b930      	cbnz	r0, 800af72 <fminf+0x22>
 800af64:	eeb0 8a68 	vmov.f32	s16, s17
 800af68:	eeb0 0a48 	vmov.f32	s0, s16
 800af6c:	ecbd 8b02 	vpop	{d8}
 800af70:	bd08      	pop	{r3, pc}
 800af72:	eeb0 0a68 	vmov.f32	s0, s17
 800af76:	f000 f809 	bl	800af8c <__fpclassifyf>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d0f4      	beq.n	800af68 <fminf+0x18>
 800af7e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800af82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af86:	d5ed      	bpl.n	800af64 <fminf+0x14>
 800af88:	e7ee      	b.n	800af68 <fminf+0x18>
	...

0800af8c <__fpclassifyf>:
 800af8c:	ee10 3a10 	vmov	r3, s0
 800af90:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800af94:	d00d      	beq.n	800afb2 <__fpclassifyf+0x26>
 800af96:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800af9a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800af9e:	d30a      	bcc.n	800afb6 <__fpclassifyf+0x2a>
 800afa0:	4b07      	ldr	r3, [pc, #28]	@ (800afc0 <__fpclassifyf+0x34>)
 800afa2:	1e42      	subs	r2, r0, #1
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d908      	bls.n	800afba <__fpclassifyf+0x2e>
 800afa8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800afac:	4258      	negs	r0, r3
 800afae:	4158      	adcs	r0, r3
 800afb0:	4770      	bx	lr
 800afb2:	2002      	movs	r0, #2
 800afb4:	4770      	bx	lr
 800afb6:	2004      	movs	r0, #4
 800afb8:	4770      	bx	lr
 800afba:	2003      	movs	r0, #3
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	007ffffe 	.word	0x007ffffe

0800afc4 <__ieee754_sqrt>:
 800afc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	4a68      	ldr	r2, [pc, #416]	@ (800b16c <__ieee754_sqrt+0x1a8>)
 800afca:	ec55 4b10 	vmov	r4, r5, d0
 800afce:	43aa      	bics	r2, r5
 800afd0:	462b      	mov	r3, r5
 800afd2:	4621      	mov	r1, r4
 800afd4:	d110      	bne.n	800aff8 <__ieee754_sqrt+0x34>
 800afd6:	4622      	mov	r2, r4
 800afd8:	4620      	mov	r0, r4
 800afda:	4629      	mov	r1, r5
 800afdc:	f7f5 fb14 	bl	8000608 <__aeabi_dmul>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4620      	mov	r0, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	f7f5 f958 	bl	800029c <__adddf3>
 800afec:	4604      	mov	r4, r0
 800afee:	460d      	mov	r5, r1
 800aff0:	ec45 4b10 	vmov	d0, r4, r5
 800aff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff8:	2d00      	cmp	r5, #0
 800affa:	dc0e      	bgt.n	800b01a <__ieee754_sqrt+0x56>
 800affc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b000:	4322      	orrs	r2, r4
 800b002:	d0f5      	beq.n	800aff0 <__ieee754_sqrt+0x2c>
 800b004:	b19d      	cbz	r5, 800b02e <__ieee754_sqrt+0x6a>
 800b006:	4622      	mov	r2, r4
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	f7f5 f944 	bl	8000298 <__aeabi_dsub>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	f7f5 fc22 	bl	800085c <__aeabi_ddiv>
 800b018:	e7e8      	b.n	800afec <__ieee754_sqrt+0x28>
 800b01a:	152a      	asrs	r2, r5, #20
 800b01c:	d115      	bne.n	800b04a <__ieee754_sqrt+0x86>
 800b01e:	2000      	movs	r0, #0
 800b020:	e009      	b.n	800b036 <__ieee754_sqrt+0x72>
 800b022:	0acb      	lsrs	r3, r1, #11
 800b024:	3a15      	subs	r2, #21
 800b026:	0549      	lsls	r1, r1, #21
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d0fa      	beq.n	800b022 <__ieee754_sqrt+0x5e>
 800b02c:	e7f7      	b.n	800b01e <__ieee754_sqrt+0x5a>
 800b02e:	462a      	mov	r2, r5
 800b030:	e7fa      	b.n	800b028 <__ieee754_sqrt+0x64>
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	3001      	adds	r0, #1
 800b036:	02dc      	lsls	r4, r3, #11
 800b038:	d5fb      	bpl.n	800b032 <__ieee754_sqrt+0x6e>
 800b03a:	1e44      	subs	r4, r0, #1
 800b03c:	1b12      	subs	r2, r2, r4
 800b03e:	f1c0 0420 	rsb	r4, r0, #32
 800b042:	fa21 f404 	lsr.w	r4, r1, r4
 800b046:	4323      	orrs	r3, r4
 800b048:	4081      	lsls	r1, r0
 800b04a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b04e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b056:	07d2      	lsls	r2, r2, #31
 800b058:	bf5c      	itt	pl
 800b05a:	005b      	lslpl	r3, r3, #1
 800b05c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b060:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b064:	bf58      	it	pl
 800b066:	0049      	lslpl	r1, r1, #1
 800b068:	2600      	movs	r6, #0
 800b06a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b06e:	106d      	asrs	r5, r5, #1
 800b070:	0049      	lsls	r1, r1, #1
 800b072:	2016      	movs	r0, #22
 800b074:	4632      	mov	r2, r6
 800b076:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b07a:	1917      	adds	r7, r2, r4
 800b07c:	429f      	cmp	r7, r3
 800b07e:	bfde      	ittt	le
 800b080:	193a      	addle	r2, r7, r4
 800b082:	1bdb      	suble	r3, r3, r7
 800b084:	1936      	addle	r6, r6, r4
 800b086:	0fcf      	lsrs	r7, r1, #31
 800b088:	3801      	subs	r0, #1
 800b08a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b08e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b092:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b096:	d1f0      	bne.n	800b07a <__ieee754_sqrt+0xb6>
 800b098:	4604      	mov	r4, r0
 800b09a:	2720      	movs	r7, #32
 800b09c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	eb00 0e0c 	add.w	lr, r0, ip
 800b0a6:	db02      	blt.n	800b0ae <__ieee754_sqrt+0xea>
 800b0a8:	d113      	bne.n	800b0d2 <__ieee754_sqrt+0x10e>
 800b0aa:	458e      	cmp	lr, r1
 800b0ac:	d811      	bhi.n	800b0d2 <__ieee754_sqrt+0x10e>
 800b0ae:	f1be 0f00 	cmp.w	lr, #0
 800b0b2:	eb0e 000c 	add.w	r0, lr, ip
 800b0b6:	da42      	bge.n	800b13e <__ieee754_sqrt+0x17a>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	db40      	blt.n	800b13e <__ieee754_sqrt+0x17a>
 800b0bc:	f102 0801 	add.w	r8, r2, #1
 800b0c0:	1a9b      	subs	r3, r3, r2
 800b0c2:	458e      	cmp	lr, r1
 800b0c4:	bf88      	it	hi
 800b0c6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b0ca:	eba1 010e 	sub.w	r1, r1, lr
 800b0ce:	4464      	add	r4, ip
 800b0d0:	4642      	mov	r2, r8
 800b0d2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b0d6:	3f01      	subs	r7, #1
 800b0d8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b0dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b0e0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b0e4:	d1dc      	bne.n	800b0a0 <__ieee754_sqrt+0xdc>
 800b0e6:	4319      	orrs	r1, r3
 800b0e8:	d01b      	beq.n	800b122 <__ieee754_sqrt+0x15e>
 800b0ea:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b170 <__ieee754_sqrt+0x1ac>
 800b0ee:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b174 <__ieee754_sqrt+0x1b0>
 800b0f2:	e9da 0100 	ldrd	r0, r1, [sl]
 800b0f6:	e9db 2300 	ldrd	r2, r3, [fp]
 800b0fa:	f7f5 f8cd 	bl	8000298 <__aeabi_dsub>
 800b0fe:	e9da 8900 	ldrd	r8, r9, [sl]
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	4640      	mov	r0, r8
 800b108:	4649      	mov	r1, r9
 800b10a:	f7f5 fcf9 	bl	8000b00 <__aeabi_dcmple>
 800b10e:	b140      	cbz	r0, 800b122 <__ieee754_sqrt+0x15e>
 800b110:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b114:	e9da 0100 	ldrd	r0, r1, [sl]
 800b118:	e9db 2300 	ldrd	r2, r3, [fp]
 800b11c:	d111      	bne.n	800b142 <__ieee754_sqrt+0x17e>
 800b11e:	3601      	adds	r6, #1
 800b120:	463c      	mov	r4, r7
 800b122:	1072      	asrs	r2, r6, #1
 800b124:	0863      	lsrs	r3, r4, #1
 800b126:	07f1      	lsls	r1, r6, #31
 800b128:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b12c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b130:	bf48      	it	mi
 800b132:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b136:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b13a:	4618      	mov	r0, r3
 800b13c:	e756      	b.n	800afec <__ieee754_sqrt+0x28>
 800b13e:	4690      	mov	r8, r2
 800b140:	e7be      	b.n	800b0c0 <__ieee754_sqrt+0xfc>
 800b142:	f7f5 f8ab 	bl	800029c <__adddf3>
 800b146:	e9da 8900 	ldrd	r8, r9, [sl]
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4640      	mov	r0, r8
 800b150:	4649      	mov	r1, r9
 800b152:	f7f5 fccb 	bl	8000aec <__aeabi_dcmplt>
 800b156:	b120      	cbz	r0, 800b162 <__ieee754_sqrt+0x19e>
 800b158:	1ca0      	adds	r0, r4, #2
 800b15a:	bf08      	it	eq
 800b15c:	3601      	addeq	r6, #1
 800b15e:	3402      	adds	r4, #2
 800b160:	e7df      	b.n	800b122 <__ieee754_sqrt+0x15e>
 800b162:	1c63      	adds	r3, r4, #1
 800b164:	f023 0401 	bic.w	r4, r3, #1
 800b168:	e7db      	b.n	800b122 <__ieee754_sqrt+0x15e>
 800b16a:	bf00      	nop
 800b16c:	7ff00000 	.word	0x7ff00000
 800b170:	20000228 	.word	0x20000228
 800b174:	20000220 	.word	0x20000220

0800b178 <__ieee754_acos>:
 800b178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	ec55 4b10 	vmov	r4, r5, d0
 800b180:	49b7      	ldr	r1, [pc, #732]	@ (800b460 <__ieee754_acos+0x2e8>)
 800b182:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b186:	428b      	cmp	r3, r1
 800b188:	d919      	bls.n	800b1be <__ieee754_acos+0x46>
 800b18a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800b18e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b192:	4323      	orrs	r3, r4
 800b194:	d106      	bne.n	800b1a4 <__ieee754_acos+0x2c>
 800b196:	2d00      	cmp	r5, #0
 800b198:	f340 8210 	ble.w	800b5bc <__ieee754_acos+0x444>
 800b19c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800b3f0 <__ieee754_acos+0x278>
 800b1a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a4:	4622      	mov	r2, r4
 800b1a6:	462b      	mov	r3, r5
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	f7f5 f874 	bl	8000298 <__aeabi_dsub>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	f7f5 fb52 	bl	800085c <__aeabi_ddiv>
 800b1b8:	ec41 0b10 	vmov	d0, r0, r1
 800b1bc:	e7f0      	b.n	800b1a0 <__ieee754_acos+0x28>
 800b1be:	49a9      	ldr	r1, [pc, #676]	@ (800b464 <__ieee754_acos+0x2ec>)
 800b1c0:	428b      	cmp	r3, r1
 800b1c2:	f200 8085 	bhi.w	800b2d0 <__ieee754_acos+0x158>
 800b1c6:	4aa8      	ldr	r2, [pc, #672]	@ (800b468 <__ieee754_acos+0x2f0>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	f240 81fa 	bls.w	800b5c2 <__ieee754_acos+0x44a>
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	462b      	mov	r3, r5
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	f7f5 fa17 	bl	8000608 <__aeabi_dmul>
 800b1da:	a387      	add	r3, pc, #540	@ (adr r3, 800b3f8 <__ieee754_acos+0x280>)
 800b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	460f      	mov	r7, r1
 800b1e4:	f7f5 fa10 	bl	8000608 <__aeabi_dmul>
 800b1e8:	a385      	add	r3, pc, #532	@ (adr r3, 800b400 <__ieee754_acos+0x288>)
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	f7f5 f855 	bl	800029c <__adddf3>
 800b1f2:	4632      	mov	r2, r6
 800b1f4:	463b      	mov	r3, r7
 800b1f6:	f7f5 fa07 	bl	8000608 <__aeabi_dmul>
 800b1fa:	a383      	add	r3, pc, #524	@ (adr r3, 800b408 <__ieee754_acos+0x290>)
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	f7f5 f84a 	bl	8000298 <__aeabi_dsub>
 800b204:	4632      	mov	r2, r6
 800b206:	463b      	mov	r3, r7
 800b208:	f7f5 f9fe 	bl	8000608 <__aeabi_dmul>
 800b20c:	a380      	add	r3, pc, #512	@ (adr r3, 800b410 <__ieee754_acos+0x298>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f5 f843 	bl	800029c <__adddf3>
 800b216:	4632      	mov	r2, r6
 800b218:	463b      	mov	r3, r7
 800b21a:	f7f5 f9f5 	bl	8000608 <__aeabi_dmul>
 800b21e:	a37e      	add	r3, pc, #504	@ (adr r3, 800b418 <__ieee754_acos+0x2a0>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f838 	bl	8000298 <__aeabi_dsub>
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	f7f5 f9ec 	bl	8000608 <__aeabi_dmul>
 800b230:	a37b      	add	r3, pc, #492	@ (adr r3, 800b420 <__ieee754_acos+0x2a8>)
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	f7f5 f831 	bl	800029c <__adddf3>
 800b23a:	4632      	mov	r2, r6
 800b23c:	463b      	mov	r3, r7
 800b23e:	f7f5 f9e3 	bl	8000608 <__aeabi_dmul>
 800b242:	a379      	add	r3, pc, #484	@ (adr r3, 800b428 <__ieee754_acos+0x2b0>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	4680      	mov	r8, r0
 800b24a:	4689      	mov	r9, r1
 800b24c:	4630      	mov	r0, r6
 800b24e:	4639      	mov	r1, r7
 800b250:	f7f5 f9da 	bl	8000608 <__aeabi_dmul>
 800b254:	a376      	add	r3, pc, #472	@ (adr r3, 800b430 <__ieee754_acos+0x2b8>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	f7f5 f81d 	bl	8000298 <__aeabi_dsub>
 800b25e:	4632      	mov	r2, r6
 800b260:	463b      	mov	r3, r7
 800b262:	f7f5 f9d1 	bl	8000608 <__aeabi_dmul>
 800b266:	a374      	add	r3, pc, #464	@ (adr r3, 800b438 <__ieee754_acos+0x2c0>)
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f5 f816 	bl	800029c <__adddf3>
 800b270:	4632      	mov	r2, r6
 800b272:	463b      	mov	r3, r7
 800b274:	f7f5 f9c8 	bl	8000608 <__aeabi_dmul>
 800b278:	a371      	add	r3, pc, #452	@ (adr r3, 800b440 <__ieee754_acos+0x2c8>)
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	f7f5 f80b 	bl	8000298 <__aeabi_dsub>
 800b282:	4632      	mov	r2, r6
 800b284:	463b      	mov	r3, r7
 800b286:	f7f5 f9bf 	bl	8000608 <__aeabi_dmul>
 800b28a:	4b78      	ldr	r3, [pc, #480]	@ (800b46c <__ieee754_acos+0x2f4>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	f7f5 f805 	bl	800029c <__adddf3>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4640      	mov	r0, r8
 800b298:	4649      	mov	r1, r9
 800b29a:	f7f5 fadf 	bl	800085c <__aeabi_ddiv>
 800b29e:	4622      	mov	r2, r4
 800b2a0:	462b      	mov	r3, r5
 800b2a2:	f7f5 f9b1 	bl	8000608 <__aeabi_dmul>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	a167      	add	r1, pc, #412	@ (adr r1, 800b448 <__ieee754_acos+0x2d0>)
 800b2ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2b0:	f7f4 fff2 	bl	8000298 <__aeabi_dsub>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	f7f4 ffec 	bl	8000298 <__aeabi_dsub>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	a162      	add	r1, pc, #392	@ (adr r1, 800b450 <__ieee754_acos+0x2d8>)
 800b2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2ca:	f7f4 ffe5 	bl	8000298 <__aeabi_dsub>
 800b2ce:	e773      	b.n	800b1b8 <__ieee754_acos+0x40>
 800b2d0:	2d00      	cmp	r5, #0
 800b2d2:	f280 80cf 	bge.w	800b474 <__ieee754_acos+0x2fc>
 800b2d6:	4b65      	ldr	r3, [pc, #404]	@ (800b46c <__ieee754_acos+0x2f4>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	4620      	mov	r0, r4
 800b2dc:	4629      	mov	r1, r5
 800b2de:	f7f4 ffdd 	bl	800029c <__adddf3>
 800b2e2:	4b63      	ldr	r3, [pc, #396]	@ (800b470 <__ieee754_acos+0x2f8>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f7f5 f98f 	bl	8000608 <__aeabi_dmul>
 800b2ea:	a343      	add	r3, pc, #268	@ (adr r3, 800b3f8 <__ieee754_acos+0x280>)
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	f7f5 f988 	bl	8000608 <__aeabi_dmul>
 800b2f8:	a341      	add	r3, pc, #260	@ (adr r3, 800b400 <__ieee754_acos+0x288>)
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f7f4 ffcd 	bl	800029c <__adddf3>
 800b302:	4622      	mov	r2, r4
 800b304:	462b      	mov	r3, r5
 800b306:	f7f5 f97f 	bl	8000608 <__aeabi_dmul>
 800b30a:	a33f      	add	r3, pc, #252	@ (adr r3, 800b408 <__ieee754_acos+0x290>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f7f4 ffc2 	bl	8000298 <__aeabi_dsub>
 800b314:	4622      	mov	r2, r4
 800b316:	462b      	mov	r3, r5
 800b318:	f7f5 f976 	bl	8000608 <__aeabi_dmul>
 800b31c:	a33c      	add	r3, pc, #240	@ (adr r3, 800b410 <__ieee754_acos+0x298>)
 800b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b322:	f7f4 ffbb 	bl	800029c <__adddf3>
 800b326:	4622      	mov	r2, r4
 800b328:	462b      	mov	r3, r5
 800b32a:	f7f5 f96d 	bl	8000608 <__aeabi_dmul>
 800b32e:	a33a      	add	r3, pc, #232	@ (adr r3, 800b418 <__ieee754_acos+0x2a0>)
 800b330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b334:	f7f4 ffb0 	bl	8000298 <__aeabi_dsub>
 800b338:	4622      	mov	r2, r4
 800b33a:	462b      	mov	r3, r5
 800b33c:	f7f5 f964 	bl	8000608 <__aeabi_dmul>
 800b340:	a337      	add	r3, pc, #220	@ (adr r3, 800b420 <__ieee754_acos+0x2a8>)
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	f7f4 ffa9 	bl	800029c <__adddf3>
 800b34a:	4622      	mov	r2, r4
 800b34c:	462b      	mov	r3, r5
 800b34e:	f7f5 f95b 	bl	8000608 <__aeabi_dmul>
 800b352:	a335      	add	r3, pc, #212	@ (adr r3, 800b428 <__ieee754_acos+0x2b0>)
 800b354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b358:	4606      	mov	r6, r0
 800b35a:	460f      	mov	r7, r1
 800b35c:	4620      	mov	r0, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	f7f5 f952 	bl	8000608 <__aeabi_dmul>
 800b364:	a332      	add	r3, pc, #200	@ (adr r3, 800b430 <__ieee754_acos+0x2b8>)
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	f7f4 ff95 	bl	8000298 <__aeabi_dsub>
 800b36e:	4622      	mov	r2, r4
 800b370:	462b      	mov	r3, r5
 800b372:	f7f5 f949 	bl	8000608 <__aeabi_dmul>
 800b376:	a330      	add	r3, pc, #192	@ (adr r3, 800b438 <__ieee754_acos+0x2c0>)
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f7f4 ff8e 	bl	800029c <__adddf3>
 800b380:	4622      	mov	r2, r4
 800b382:	462b      	mov	r3, r5
 800b384:	f7f5 f940 	bl	8000608 <__aeabi_dmul>
 800b388:	a32d      	add	r3, pc, #180	@ (adr r3, 800b440 <__ieee754_acos+0x2c8>)
 800b38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38e:	f7f4 ff83 	bl	8000298 <__aeabi_dsub>
 800b392:	4622      	mov	r2, r4
 800b394:	462b      	mov	r3, r5
 800b396:	f7f5 f937 	bl	8000608 <__aeabi_dmul>
 800b39a:	4b34      	ldr	r3, [pc, #208]	@ (800b46c <__ieee754_acos+0x2f4>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	f7f4 ff7d 	bl	800029c <__adddf3>
 800b3a2:	ec45 4b10 	vmov	d0, r4, r5
 800b3a6:	4680      	mov	r8, r0
 800b3a8:	4689      	mov	r9, r1
 800b3aa:	f7ff fe0b 	bl	800afc4 <__ieee754_sqrt>
 800b3ae:	ec55 4b10 	vmov	r4, r5, d0
 800b3b2:	4642      	mov	r2, r8
 800b3b4:	464b      	mov	r3, r9
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	4639      	mov	r1, r7
 800b3ba:	f7f5 fa4f 	bl	800085c <__aeabi_ddiv>
 800b3be:	4622      	mov	r2, r4
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	f7f5 f921 	bl	8000608 <__aeabi_dmul>
 800b3c6:	a320      	add	r3, pc, #128	@ (adr r3, 800b448 <__ieee754_acos+0x2d0>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f7f4 ff64 	bl	8000298 <__aeabi_dsub>
 800b3d0:	4622      	mov	r2, r4
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	f7f4 ff62 	bl	800029c <__adddf3>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	f7f4 ff5e 	bl	800029c <__adddf3>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	a11c      	add	r1, pc, #112	@ (adr r1, 800b458 <__ieee754_acos+0x2e0>)
 800b3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ea:	e76e      	b.n	800b2ca <__ieee754_acos+0x152>
 800b3ec:	f3af 8000 	nop.w
	...
 800b3f8:	0dfdf709 	.word	0x0dfdf709
 800b3fc:	3f023de1 	.word	0x3f023de1
 800b400:	7501b288 	.word	0x7501b288
 800b404:	3f49efe0 	.word	0x3f49efe0
 800b408:	b5688f3b 	.word	0xb5688f3b
 800b40c:	3fa48228 	.word	0x3fa48228
 800b410:	0e884455 	.word	0x0e884455
 800b414:	3fc9c155 	.word	0x3fc9c155
 800b418:	03eb6f7d 	.word	0x03eb6f7d
 800b41c:	3fd4d612 	.word	0x3fd4d612
 800b420:	55555555 	.word	0x55555555
 800b424:	3fc55555 	.word	0x3fc55555
 800b428:	b12e9282 	.word	0xb12e9282
 800b42c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b430:	1b8d0159 	.word	0x1b8d0159
 800b434:	3fe6066c 	.word	0x3fe6066c
 800b438:	9c598ac8 	.word	0x9c598ac8
 800b43c:	40002ae5 	.word	0x40002ae5
 800b440:	1c8a2d4b 	.word	0x1c8a2d4b
 800b444:	40033a27 	.word	0x40033a27
 800b448:	33145c07 	.word	0x33145c07
 800b44c:	3c91a626 	.word	0x3c91a626
 800b450:	54442d18 	.word	0x54442d18
 800b454:	3ff921fb 	.word	0x3ff921fb
 800b458:	54442d18 	.word	0x54442d18
 800b45c:	400921fb 	.word	0x400921fb
 800b460:	3fefffff 	.word	0x3fefffff
 800b464:	3fdfffff 	.word	0x3fdfffff
 800b468:	3c600000 	.word	0x3c600000
 800b46c:	3ff00000 	.word	0x3ff00000
 800b470:	3fe00000 	.word	0x3fe00000
 800b474:	4622      	mov	r2, r4
 800b476:	462b      	mov	r3, r5
 800b478:	496b      	ldr	r1, [pc, #428]	@ (800b628 <__ieee754_acos+0x4b0>)
 800b47a:	2000      	movs	r0, #0
 800b47c:	f7f4 ff0c 	bl	8000298 <__aeabi_dsub>
 800b480:	4b6a      	ldr	r3, [pc, #424]	@ (800b62c <__ieee754_acos+0x4b4>)
 800b482:	2200      	movs	r2, #0
 800b484:	f7f5 f8c0 	bl	8000608 <__aeabi_dmul>
 800b488:	4604      	mov	r4, r0
 800b48a:	460d      	mov	r5, r1
 800b48c:	ec45 4b10 	vmov	d0, r4, r5
 800b490:	f7ff fd98 	bl	800afc4 <__ieee754_sqrt>
 800b494:	a34c      	add	r3, pc, #304	@ (adr r3, 800b5c8 <__ieee754_acos+0x450>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	4620      	mov	r0, r4
 800b49c:	4629      	mov	r1, r5
 800b49e:	ec59 8b10 	vmov	r8, r9, d0
 800b4a2:	f7f5 f8b1 	bl	8000608 <__aeabi_dmul>
 800b4a6:	a34a      	add	r3, pc, #296	@ (adr r3, 800b5d0 <__ieee754_acos+0x458>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f7f4 fef6 	bl	800029c <__adddf3>
 800b4b0:	4622      	mov	r2, r4
 800b4b2:	462b      	mov	r3, r5
 800b4b4:	f7f5 f8a8 	bl	8000608 <__aeabi_dmul>
 800b4b8:	a347      	add	r3, pc, #284	@ (adr r3, 800b5d8 <__ieee754_acos+0x460>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f4 feeb 	bl	8000298 <__aeabi_dsub>
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	462b      	mov	r3, r5
 800b4c6:	f7f5 f89f 	bl	8000608 <__aeabi_dmul>
 800b4ca:	a345      	add	r3, pc, #276	@ (adr r3, 800b5e0 <__ieee754_acos+0x468>)
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f7f4 fee4 	bl	800029c <__adddf3>
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	f7f5 f896 	bl	8000608 <__aeabi_dmul>
 800b4dc:	a342      	add	r3, pc, #264	@ (adr r3, 800b5e8 <__ieee754_acos+0x470>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f4 fed9 	bl	8000298 <__aeabi_dsub>
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	f7f5 f88d 	bl	8000608 <__aeabi_dmul>
 800b4ee:	a340      	add	r3, pc, #256	@ (adr r3, 800b5f0 <__ieee754_acos+0x478>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	f7f4 fed2 	bl	800029c <__adddf3>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	f7f5 f884 	bl	8000608 <__aeabi_dmul>
 800b500:	a33d      	add	r3, pc, #244	@ (adr r3, 800b5f8 <__ieee754_acos+0x480>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	4682      	mov	sl, r0
 800b508:	468b      	mov	fp, r1
 800b50a:	4620      	mov	r0, r4
 800b50c:	4629      	mov	r1, r5
 800b50e:	f7f5 f87b 	bl	8000608 <__aeabi_dmul>
 800b512:	a33b      	add	r3, pc, #236	@ (adr r3, 800b600 <__ieee754_acos+0x488>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	f7f4 febe 	bl	8000298 <__aeabi_dsub>
 800b51c:	4622      	mov	r2, r4
 800b51e:	462b      	mov	r3, r5
 800b520:	f7f5 f872 	bl	8000608 <__aeabi_dmul>
 800b524:	a338      	add	r3, pc, #224	@ (adr r3, 800b608 <__ieee754_acos+0x490>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f7f4 feb7 	bl	800029c <__adddf3>
 800b52e:	4622      	mov	r2, r4
 800b530:	462b      	mov	r3, r5
 800b532:	f7f5 f869 	bl	8000608 <__aeabi_dmul>
 800b536:	a336      	add	r3, pc, #216	@ (adr r3, 800b610 <__ieee754_acos+0x498>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f4 feac 	bl	8000298 <__aeabi_dsub>
 800b540:	4622      	mov	r2, r4
 800b542:	462b      	mov	r3, r5
 800b544:	f7f5 f860 	bl	8000608 <__aeabi_dmul>
 800b548:	4b37      	ldr	r3, [pc, #220]	@ (800b628 <__ieee754_acos+0x4b0>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	f7f4 fea6 	bl	800029c <__adddf3>
 800b550:	4602      	mov	r2, r0
 800b552:	460b      	mov	r3, r1
 800b554:	4650      	mov	r0, sl
 800b556:	4659      	mov	r1, fp
 800b558:	f7f5 f980 	bl	800085c <__aeabi_ddiv>
 800b55c:	4642      	mov	r2, r8
 800b55e:	464b      	mov	r3, r9
 800b560:	f7f5 f852 	bl	8000608 <__aeabi_dmul>
 800b564:	2600      	movs	r6, #0
 800b566:	4682      	mov	sl, r0
 800b568:	468b      	mov	fp, r1
 800b56a:	4632      	mov	r2, r6
 800b56c:	464b      	mov	r3, r9
 800b56e:	4630      	mov	r0, r6
 800b570:	4649      	mov	r1, r9
 800b572:	f7f5 f849 	bl	8000608 <__aeabi_dmul>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4620      	mov	r0, r4
 800b57c:	4629      	mov	r1, r5
 800b57e:	f7f4 fe8b 	bl	8000298 <__aeabi_dsub>
 800b582:	4632      	mov	r2, r6
 800b584:	4604      	mov	r4, r0
 800b586:	460d      	mov	r5, r1
 800b588:	464b      	mov	r3, r9
 800b58a:	4640      	mov	r0, r8
 800b58c:	4649      	mov	r1, r9
 800b58e:	f7f4 fe85 	bl	800029c <__adddf3>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	4620      	mov	r0, r4
 800b598:	4629      	mov	r1, r5
 800b59a:	f7f5 f95f 	bl	800085c <__aeabi_ddiv>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4650      	mov	r0, sl
 800b5a4:	4659      	mov	r1, fp
 800b5a6:	f7f4 fe79 	bl	800029c <__adddf3>
 800b5aa:	4632      	mov	r2, r6
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	f7f4 fe75 	bl	800029c <__adddf3>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	f7f4 fe71 	bl	800029c <__adddf3>
 800b5ba:	e5fd      	b.n	800b1b8 <__ieee754_acos+0x40>
 800b5bc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b618 <__ieee754_acos+0x4a0>
 800b5c0:	e5ee      	b.n	800b1a0 <__ieee754_acos+0x28>
 800b5c2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b620 <__ieee754_acos+0x4a8>
 800b5c6:	e5eb      	b.n	800b1a0 <__ieee754_acos+0x28>
 800b5c8:	0dfdf709 	.word	0x0dfdf709
 800b5cc:	3f023de1 	.word	0x3f023de1
 800b5d0:	7501b288 	.word	0x7501b288
 800b5d4:	3f49efe0 	.word	0x3f49efe0
 800b5d8:	b5688f3b 	.word	0xb5688f3b
 800b5dc:	3fa48228 	.word	0x3fa48228
 800b5e0:	0e884455 	.word	0x0e884455
 800b5e4:	3fc9c155 	.word	0x3fc9c155
 800b5e8:	03eb6f7d 	.word	0x03eb6f7d
 800b5ec:	3fd4d612 	.word	0x3fd4d612
 800b5f0:	55555555 	.word	0x55555555
 800b5f4:	3fc55555 	.word	0x3fc55555
 800b5f8:	b12e9282 	.word	0xb12e9282
 800b5fc:	3fb3b8c5 	.word	0x3fb3b8c5
 800b600:	1b8d0159 	.word	0x1b8d0159
 800b604:	3fe6066c 	.word	0x3fe6066c
 800b608:	9c598ac8 	.word	0x9c598ac8
 800b60c:	40002ae5 	.word	0x40002ae5
 800b610:	1c8a2d4b 	.word	0x1c8a2d4b
 800b614:	40033a27 	.word	0x40033a27
 800b618:	54442d18 	.word	0x54442d18
 800b61c:	400921fb 	.word	0x400921fb
 800b620:	54442d18 	.word	0x54442d18
 800b624:	3ff921fb 	.word	0x3ff921fb
 800b628:	3ff00000 	.word	0x3ff00000
 800b62c:	3fe00000 	.word	0x3fe00000

0800b630 <__ieee754_pow>:
 800b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	b091      	sub	sp, #68	@ 0x44
 800b636:	ed8d 1b00 	vstr	d1, [sp]
 800b63a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b63e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b642:	ea5a 0001 	orrs.w	r0, sl, r1
 800b646:	ec57 6b10 	vmov	r6, r7, d0
 800b64a:	d113      	bne.n	800b674 <__ieee754_pow+0x44>
 800b64c:	19b3      	adds	r3, r6, r6
 800b64e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b652:	4152      	adcs	r2, r2
 800b654:	4298      	cmp	r0, r3
 800b656:	4b98      	ldr	r3, [pc, #608]	@ (800b8b8 <__ieee754_pow+0x288>)
 800b658:	4193      	sbcs	r3, r2
 800b65a:	f080 84ea 	bcs.w	800c032 <__ieee754_pow+0xa02>
 800b65e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b662:	4630      	mov	r0, r6
 800b664:	4639      	mov	r1, r7
 800b666:	f7f4 fe19 	bl	800029c <__adddf3>
 800b66a:	ec41 0b10 	vmov	d0, r0, r1
 800b66e:	b011      	add	sp, #68	@ 0x44
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	4a91      	ldr	r2, [pc, #580]	@ (800b8bc <__ieee754_pow+0x28c>)
 800b676:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b67a:	4590      	cmp	r8, r2
 800b67c:	463d      	mov	r5, r7
 800b67e:	4633      	mov	r3, r6
 800b680:	d806      	bhi.n	800b690 <__ieee754_pow+0x60>
 800b682:	d101      	bne.n	800b688 <__ieee754_pow+0x58>
 800b684:	2e00      	cmp	r6, #0
 800b686:	d1ea      	bne.n	800b65e <__ieee754_pow+0x2e>
 800b688:	4592      	cmp	sl, r2
 800b68a:	d801      	bhi.n	800b690 <__ieee754_pow+0x60>
 800b68c:	d10e      	bne.n	800b6ac <__ieee754_pow+0x7c>
 800b68e:	b169      	cbz	r1, 800b6ac <__ieee754_pow+0x7c>
 800b690:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b694:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b698:	431d      	orrs	r5, r3
 800b69a:	d1e0      	bne.n	800b65e <__ieee754_pow+0x2e>
 800b69c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b6a0:	18db      	adds	r3, r3, r3
 800b6a2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b6a6:	4152      	adcs	r2, r2
 800b6a8:	429d      	cmp	r5, r3
 800b6aa:	e7d4      	b.n	800b656 <__ieee754_pow+0x26>
 800b6ac:	2d00      	cmp	r5, #0
 800b6ae:	46c3      	mov	fp, r8
 800b6b0:	da3a      	bge.n	800b728 <__ieee754_pow+0xf8>
 800b6b2:	4a83      	ldr	r2, [pc, #524]	@ (800b8c0 <__ieee754_pow+0x290>)
 800b6b4:	4592      	cmp	sl, r2
 800b6b6:	d84d      	bhi.n	800b754 <__ieee754_pow+0x124>
 800b6b8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b6bc:	4592      	cmp	sl, r2
 800b6be:	f240 84c7 	bls.w	800c050 <__ieee754_pow+0xa20>
 800b6c2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b6c6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b6ca:	2a14      	cmp	r2, #20
 800b6cc:	dd0f      	ble.n	800b6ee <__ieee754_pow+0xbe>
 800b6ce:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b6d2:	fa21 f402 	lsr.w	r4, r1, r2
 800b6d6:	fa04 f202 	lsl.w	r2, r4, r2
 800b6da:	428a      	cmp	r2, r1
 800b6dc:	f040 84b8 	bne.w	800c050 <__ieee754_pow+0xa20>
 800b6e0:	f004 0401 	and.w	r4, r4, #1
 800b6e4:	f1c4 0402 	rsb	r4, r4, #2
 800b6e8:	2900      	cmp	r1, #0
 800b6ea:	d158      	bne.n	800b79e <__ieee754_pow+0x16e>
 800b6ec:	e00e      	b.n	800b70c <__ieee754_pow+0xdc>
 800b6ee:	2900      	cmp	r1, #0
 800b6f0:	d154      	bne.n	800b79c <__ieee754_pow+0x16c>
 800b6f2:	f1c2 0214 	rsb	r2, r2, #20
 800b6f6:	fa4a f402 	asr.w	r4, sl, r2
 800b6fa:	fa04 f202 	lsl.w	r2, r4, r2
 800b6fe:	4552      	cmp	r2, sl
 800b700:	f040 84a3 	bne.w	800c04a <__ieee754_pow+0xa1a>
 800b704:	f004 0401 	and.w	r4, r4, #1
 800b708:	f1c4 0402 	rsb	r4, r4, #2
 800b70c:	4a6d      	ldr	r2, [pc, #436]	@ (800b8c4 <__ieee754_pow+0x294>)
 800b70e:	4592      	cmp	sl, r2
 800b710:	d12e      	bne.n	800b770 <__ieee754_pow+0x140>
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	f280 8494 	bge.w	800c042 <__ieee754_pow+0xa12>
 800b71a:	496a      	ldr	r1, [pc, #424]	@ (800b8c4 <__ieee754_pow+0x294>)
 800b71c:	4632      	mov	r2, r6
 800b71e:	463b      	mov	r3, r7
 800b720:	2000      	movs	r0, #0
 800b722:	f7f5 f89b 	bl	800085c <__aeabi_ddiv>
 800b726:	e7a0      	b.n	800b66a <__ieee754_pow+0x3a>
 800b728:	2400      	movs	r4, #0
 800b72a:	bbc1      	cbnz	r1, 800b79e <__ieee754_pow+0x16e>
 800b72c:	4a63      	ldr	r2, [pc, #396]	@ (800b8bc <__ieee754_pow+0x28c>)
 800b72e:	4592      	cmp	sl, r2
 800b730:	d1ec      	bne.n	800b70c <__ieee754_pow+0xdc>
 800b732:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b736:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b73a:	431a      	orrs	r2, r3
 800b73c:	f000 8479 	beq.w	800c032 <__ieee754_pow+0xa02>
 800b740:	4b61      	ldr	r3, [pc, #388]	@ (800b8c8 <__ieee754_pow+0x298>)
 800b742:	4598      	cmp	r8, r3
 800b744:	d908      	bls.n	800b758 <__ieee754_pow+0x128>
 800b746:	f1b9 0f00 	cmp.w	r9, #0
 800b74a:	f2c0 8476 	blt.w	800c03a <__ieee754_pow+0xa0a>
 800b74e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b752:	e78a      	b.n	800b66a <__ieee754_pow+0x3a>
 800b754:	2402      	movs	r4, #2
 800b756:	e7e8      	b.n	800b72a <__ieee754_pow+0xfa>
 800b758:	f1b9 0f00 	cmp.w	r9, #0
 800b75c:	f04f 0000 	mov.w	r0, #0
 800b760:	f04f 0100 	mov.w	r1, #0
 800b764:	da81      	bge.n	800b66a <__ieee754_pow+0x3a>
 800b766:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b76a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b76e:	e77c      	b.n	800b66a <__ieee754_pow+0x3a>
 800b770:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b774:	d106      	bne.n	800b784 <__ieee754_pow+0x154>
 800b776:	4632      	mov	r2, r6
 800b778:	463b      	mov	r3, r7
 800b77a:	4630      	mov	r0, r6
 800b77c:	4639      	mov	r1, r7
 800b77e:	f7f4 ff43 	bl	8000608 <__aeabi_dmul>
 800b782:	e772      	b.n	800b66a <__ieee754_pow+0x3a>
 800b784:	4a51      	ldr	r2, [pc, #324]	@ (800b8cc <__ieee754_pow+0x29c>)
 800b786:	4591      	cmp	r9, r2
 800b788:	d109      	bne.n	800b79e <__ieee754_pow+0x16e>
 800b78a:	2d00      	cmp	r5, #0
 800b78c:	db07      	blt.n	800b79e <__ieee754_pow+0x16e>
 800b78e:	ec47 6b10 	vmov	d0, r6, r7
 800b792:	b011      	add	sp, #68	@ 0x44
 800b794:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b798:	f7ff bc14 	b.w	800afc4 <__ieee754_sqrt>
 800b79c:	2400      	movs	r4, #0
 800b79e:	ec47 6b10 	vmov	d0, r6, r7
 800b7a2:	9302      	str	r3, [sp, #8]
 800b7a4:	f7ff fba4 	bl	800aef0 <fabs>
 800b7a8:	9b02      	ldr	r3, [sp, #8]
 800b7aa:	ec51 0b10 	vmov	r0, r1, d0
 800b7ae:	bb53      	cbnz	r3, 800b806 <__ieee754_pow+0x1d6>
 800b7b0:	4b44      	ldr	r3, [pc, #272]	@ (800b8c4 <__ieee754_pow+0x294>)
 800b7b2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d002      	beq.n	800b7c0 <__ieee754_pow+0x190>
 800b7ba:	f1b8 0f00 	cmp.w	r8, #0
 800b7be:	d122      	bne.n	800b806 <__ieee754_pow+0x1d6>
 800b7c0:	f1b9 0f00 	cmp.w	r9, #0
 800b7c4:	da05      	bge.n	800b7d2 <__ieee754_pow+0x1a2>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	493d      	ldr	r1, [pc, #244]	@ (800b8c4 <__ieee754_pow+0x294>)
 800b7ce:	f7f5 f845 	bl	800085c <__aeabi_ddiv>
 800b7d2:	2d00      	cmp	r5, #0
 800b7d4:	f6bf af49 	bge.w	800b66a <__ieee754_pow+0x3a>
 800b7d8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b7dc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b7e0:	ea58 0804 	orrs.w	r8, r8, r4
 800b7e4:	d108      	bne.n	800b7f8 <__ieee754_pow+0x1c8>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4610      	mov	r0, r2
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	f7f4 fd53 	bl	8000298 <__aeabi_dsub>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	e794      	b.n	800b722 <__ieee754_pow+0xf2>
 800b7f8:	2c01      	cmp	r4, #1
 800b7fa:	f47f af36 	bne.w	800b66a <__ieee754_pow+0x3a>
 800b7fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b802:	4619      	mov	r1, r3
 800b804:	e731      	b.n	800b66a <__ieee754_pow+0x3a>
 800b806:	0feb      	lsrs	r3, r5, #31
 800b808:	3b01      	subs	r3, #1
 800b80a:	ea53 0204 	orrs.w	r2, r3, r4
 800b80e:	d102      	bne.n	800b816 <__ieee754_pow+0x1e6>
 800b810:	4632      	mov	r2, r6
 800b812:	463b      	mov	r3, r7
 800b814:	e7e9      	b.n	800b7ea <__ieee754_pow+0x1ba>
 800b816:	3c01      	subs	r4, #1
 800b818:	431c      	orrs	r4, r3
 800b81a:	d016      	beq.n	800b84a <__ieee754_pow+0x21a>
 800b81c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b8a8 <__ieee754_pow+0x278>
 800b820:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b824:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b828:	f240 8112 	bls.w	800ba50 <__ieee754_pow+0x420>
 800b82c:	4b28      	ldr	r3, [pc, #160]	@ (800b8d0 <__ieee754_pow+0x2a0>)
 800b82e:	459a      	cmp	sl, r3
 800b830:	4b25      	ldr	r3, [pc, #148]	@ (800b8c8 <__ieee754_pow+0x298>)
 800b832:	d916      	bls.n	800b862 <__ieee754_pow+0x232>
 800b834:	4598      	cmp	r8, r3
 800b836:	d80b      	bhi.n	800b850 <__ieee754_pow+0x220>
 800b838:	f1b9 0f00 	cmp.w	r9, #0
 800b83c:	da0b      	bge.n	800b856 <__ieee754_pow+0x226>
 800b83e:	2000      	movs	r0, #0
 800b840:	b011      	add	sp, #68	@ 0x44
 800b842:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b846:	f000 bceb 	b.w	800c220 <__math_oflow>
 800b84a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b8b0 <__ieee754_pow+0x280>
 800b84e:	e7e7      	b.n	800b820 <__ieee754_pow+0x1f0>
 800b850:	f1b9 0f00 	cmp.w	r9, #0
 800b854:	dcf3      	bgt.n	800b83e <__ieee754_pow+0x20e>
 800b856:	2000      	movs	r0, #0
 800b858:	b011      	add	sp, #68	@ 0x44
 800b85a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85e:	f000 bcd7 	b.w	800c210 <__math_uflow>
 800b862:	4598      	cmp	r8, r3
 800b864:	d20c      	bcs.n	800b880 <__ieee754_pow+0x250>
 800b866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b86a:	2200      	movs	r2, #0
 800b86c:	2300      	movs	r3, #0
 800b86e:	f7f5 f93d 	bl	8000aec <__aeabi_dcmplt>
 800b872:	3800      	subs	r0, #0
 800b874:	bf18      	it	ne
 800b876:	2001      	movne	r0, #1
 800b878:	f1b9 0f00 	cmp.w	r9, #0
 800b87c:	daec      	bge.n	800b858 <__ieee754_pow+0x228>
 800b87e:	e7df      	b.n	800b840 <__ieee754_pow+0x210>
 800b880:	4b10      	ldr	r3, [pc, #64]	@ (800b8c4 <__ieee754_pow+0x294>)
 800b882:	4598      	cmp	r8, r3
 800b884:	f04f 0200 	mov.w	r2, #0
 800b888:	d924      	bls.n	800b8d4 <__ieee754_pow+0x2a4>
 800b88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b88e:	2300      	movs	r3, #0
 800b890:	f7f5 f92c 	bl	8000aec <__aeabi_dcmplt>
 800b894:	3800      	subs	r0, #0
 800b896:	bf18      	it	ne
 800b898:	2001      	movne	r0, #1
 800b89a:	f1b9 0f00 	cmp.w	r9, #0
 800b89e:	dccf      	bgt.n	800b840 <__ieee754_pow+0x210>
 800b8a0:	e7da      	b.n	800b858 <__ieee754_pow+0x228>
 800b8a2:	bf00      	nop
 800b8a4:	f3af 8000 	nop.w
 800b8a8:	00000000 	.word	0x00000000
 800b8ac:	3ff00000 	.word	0x3ff00000
 800b8b0:	00000000 	.word	0x00000000
 800b8b4:	bff00000 	.word	0xbff00000
 800b8b8:	fff00000 	.word	0xfff00000
 800b8bc:	7ff00000 	.word	0x7ff00000
 800b8c0:	433fffff 	.word	0x433fffff
 800b8c4:	3ff00000 	.word	0x3ff00000
 800b8c8:	3fefffff 	.word	0x3fefffff
 800b8cc:	3fe00000 	.word	0x3fe00000
 800b8d0:	43f00000 	.word	0x43f00000
 800b8d4:	4b5a      	ldr	r3, [pc, #360]	@ (800ba40 <__ieee754_pow+0x410>)
 800b8d6:	f7f4 fcdf 	bl	8000298 <__aeabi_dsub>
 800b8da:	a351      	add	r3, pc, #324	@ (adr r3, 800ba20 <__ieee754_pow+0x3f0>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	460d      	mov	r5, r1
 800b8e4:	f7f4 fe90 	bl	8000608 <__aeabi_dmul>
 800b8e8:	a34f      	add	r3, pc, #316	@ (adr r3, 800ba28 <__ieee754_pow+0x3f8>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	460f      	mov	r7, r1
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	f7f4 fe87 	bl	8000608 <__aeabi_dmul>
 800b8fa:	4b52      	ldr	r3, [pc, #328]	@ (800ba44 <__ieee754_pow+0x414>)
 800b8fc:	4682      	mov	sl, r0
 800b8fe:	468b      	mov	fp, r1
 800b900:	2200      	movs	r2, #0
 800b902:	4620      	mov	r0, r4
 800b904:	4629      	mov	r1, r5
 800b906:	f7f4 fe7f 	bl	8000608 <__aeabi_dmul>
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	a148      	add	r1, pc, #288	@ (adr r1, 800ba30 <__ieee754_pow+0x400>)
 800b910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b914:	f7f4 fcc0 	bl	8000298 <__aeabi_dsub>
 800b918:	4622      	mov	r2, r4
 800b91a:	462b      	mov	r3, r5
 800b91c:	f7f4 fe74 	bl	8000608 <__aeabi_dmul>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	2000      	movs	r0, #0
 800b926:	4948      	ldr	r1, [pc, #288]	@ (800ba48 <__ieee754_pow+0x418>)
 800b928:	f7f4 fcb6 	bl	8000298 <__aeabi_dsub>
 800b92c:	4622      	mov	r2, r4
 800b92e:	4680      	mov	r8, r0
 800b930:	4689      	mov	r9, r1
 800b932:	462b      	mov	r3, r5
 800b934:	4620      	mov	r0, r4
 800b936:	4629      	mov	r1, r5
 800b938:	f7f4 fe66 	bl	8000608 <__aeabi_dmul>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	4640      	mov	r0, r8
 800b942:	4649      	mov	r1, r9
 800b944:	f7f4 fe60 	bl	8000608 <__aeabi_dmul>
 800b948:	a33b      	add	r3, pc, #236	@ (adr r3, 800ba38 <__ieee754_pow+0x408>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 fe5b 	bl	8000608 <__aeabi_dmul>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4650      	mov	r0, sl
 800b958:	4659      	mov	r1, fp
 800b95a:	f7f4 fc9d 	bl	8000298 <__aeabi_dsub>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	4680      	mov	r8, r0
 800b964:	4689      	mov	r9, r1
 800b966:	4630      	mov	r0, r6
 800b968:	4639      	mov	r1, r7
 800b96a:	f7f4 fc97 	bl	800029c <__adddf3>
 800b96e:	2400      	movs	r4, #0
 800b970:	4632      	mov	r2, r6
 800b972:	463b      	mov	r3, r7
 800b974:	4620      	mov	r0, r4
 800b976:	460d      	mov	r5, r1
 800b978:	f7f4 fc8e 	bl	8000298 <__aeabi_dsub>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4640      	mov	r0, r8
 800b982:	4649      	mov	r1, r9
 800b984:	f7f4 fc88 	bl	8000298 <__aeabi_dsub>
 800b988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b98c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b990:	2300      	movs	r3, #0
 800b992:	9304      	str	r3, [sp, #16]
 800b994:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b998:	4606      	mov	r6, r0
 800b99a:	460f      	mov	r7, r1
 800b99c:	4652      	mov	r2, sl
 800b99e:	465b      	mov	r3, fp
 800b9a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9a4:	f7f4 fc78 	bl	8000298 <__aeabi_dsub>
 800b9a8:	4622      	mov	r2, r4
 800b9aa:	462b      	mov	r3, r5
 800b9ac:	f7f4 fe2c 	bl	8000608 <__aeabi_dmul>
 800b9b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	4689      	mov	r9, r1
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	f7f4 fe24 	bl	8000608 <__aeabi_dmul>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	f7f4 fc68 	bl	800029c <__adddf3>
 800b9cc:	4652      	mov	r2, sl
 800b9ce:	465b      	mov	r3, fp
 800b9d0:	4606      	mov	r6, r0
 800b9d2:	460f      	mov	r7, r1
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	f7f4 fe16 	bl	8000608 <__aeabi_dmul>
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4602      	mov	r2, r0
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	4689      	mov	r9, r1
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	f7f4 fc58 	bl	800029c <__adddf3>
 800b9ec:	4b17      	ldr	r3, [pc, #92]	@ (800ba4c <__ieee754_pow+0x41c>)
 800b9ee:	4299      	cmp	r1, r3
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	468a      	mov	sl, r1
 800b9f6:	468b      	mov	fp, r1
 800b9f8:	f340 82ef 	ble.w	800bfda <__ieee754_pow+0x9aa>
 800b9fc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ba00:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ba04:	4303      	orrs	r3, r0
 800ba06:	f000 81e8 	beq.w	800bdda <__ieee754_pow+0x7aa>
 800ba0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2300      	movs	r3, #0
 800ba12:	f7f5 f86b 	bl	8000aec <__aeabi_dcmplt>
 800ba16:	3800      	subs	r0, #0
 800ba18:	bf18      	it	ne
 800ba1a:	2001      	movne	r0, #1
 800ba1c:	e710      	b.n	800b840 <__ieee754_pow+0x210>
 800ba1e:	bf00      	nop
 800ba20:	60000000 	.word	0x60000000
 800ba24:	3ff71547 	.word	0x3ff71547
 800ba28:	f85ddf44 	.word	0xf85ddf44
 800ba2c:	3e54ae0b 	.word	0x3e54ae0b
 800ba30:	55555555 	.word	0x55555555
 800ba34:	3fd55555 	.word	0x3fd55555
 800ba38:	652b82fe 	.word	0x652b82fe
 800ba3c:	3ff71547 	.word	0x3ff71547
 800ba40:	3ff00000 	.word	0x3ff00000
 800ba44:	3fd00000 	.word	0x3fd00000
 800ba48:	3fe00000 	.word	0x3fe00000
 800ba4c:	408fffff 	.word	0x408fffff
 800ba50:	4bd5      	ldr	r3, [pc, #852]	@ (800bda8 <__ieee754_pow+0x778>)
 800ba52:	402b      	ands	r3, r5
 800ba54:	2200      	movs	r2, #0
 800ba56:	b92b      	cbnz	r3, 800ba64 <__ieee754_pow+0x434>
 800ba58:	4bd4      	ldr	r3, [pc, #848]	@ (800bdac <__ieee754_pow+0x77c>)
 800ba5a:	f7f4 fdd5 	bl	8000608 <__aeabi_dmul>
 800ba5e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ba62:	468b      	mov	fp, r1
 800ba64:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ba68:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ba6c:	4413      	add	r3, r2
 800ba6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba70:	4bcf      	ldr	r3, [pc, #828]	@ (800bdb0 <__ieee754_pow+0x780>)
 800ba72:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ba76:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ba7a:	459b      	cmp	fp, r3
 800ba7c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ba80:	dd08      	ble.n	800ba94 <__ieee754_pow+0x464>
 800ba82:	4bcc      	ldr	r3, [pc, #816]	@ (800bdb4 <__ieee754_pow+0x784>)
 800ba84:	459b      	cmp	fp, r3
 800ba86:	f340 81a5 	ble.w	800bdd4 <__ieee754_pow+0x7a4>
 800ba8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba90:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ba94:	f04f 0a00 	mov.w	sl, #0
 800ba98:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ba9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba9e:	4bc6      	ldr	r3, [pc, #792]	@ (800bdb8 <__ieee754_pow+0x788>)
 800baa0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800baa4:	ed93 7b00 	vldr	d7, [r3]
 800baa8:	4629      	mov	r1, r5
 800baaa:	ec53 2b17 	vmov	r2, r3, d7
 800baae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bab2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bab6:	f7f4 fbef 	bl	8000298 <__aeabi_dsub>
 800baba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800babe:	4606      	mov	r6, r0
 800bac0:	460f      	mov	r7, r1
 800bac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bac6:	f7f4 fbe9 	bl	800029c <__adddf3>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	2000      	movs	r0, #0
 800bad0:	49ba      	ldr	r1, [pc, #744]	@ (800bdbc <__ieee754_pow+0x78c>)
 800bad2:	f7f4 fec3 	bl	800085c <__aeabi_ddiv>
 800bad6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4630      	mov	r0, r6
 800bae0:	4639      	mov	r1, r7
 800bae2:	f7f4 fd91 	bl	8000608 <__aeabi_dmul>
 800bae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800baee:	106d      	asrs	r5, r5, #1
 800baf0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800baf4:	f04f 0b00 	mov.w	fp, #0
 800baf8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bafc:	4661      	mov	r1, ip
 800bafe:	2200      	movs	r2, #0
 800bb00:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bb04:	4658      	mov	r0, fp
 800bb06:	46e1      	mov	r9, ip
 800bb08:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bb0c:	4614      	mov	r4, r2
 800bb0e:	461d      	mov	r5, r3
 800bb10:	f7f4 fd7a 	bl	8000608 <__aeabi_dmul>
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4630      	mov	r0, r6
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	f7f4 fbbc 	bl	8000298 <__aeabi_dsub>
 800bb20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb24:	4606      	mov	r6, r0
 800bb26:	460f      	mov	r7, r1
 800bb28:	4620      	mov	r0, r4
 800bb2a:	4629      	mov	r1, r5
 800bb2c:	f7f4 fbb4 	bl	8000298 <__aeabi_dsub>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb38:	f7f4 fbae 	bl	8000298 <__aeabi_dsub>
 800bb3c:	465a      	mov	r2, fp
 800bb3e:	464b      	mov	r3, r9
 800bb40:	f7f4 fd62 	bl	8000608 <__aeabi_dmul>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4630      	mov	r0, r6
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	f7f4 fba4 	bl	8000298 <__aeabi_dsub>
 800bb50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bb54:	f7f4 fd58 	bl	8000608 <__aeabi_dmul>
 800bb58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb60:	4610      	mov	r0, r2
 800bb62:	4619      	mov	r1, r3
 800bb64:	f7f4 fd50 	bl	8000608 <__aeabi_dmul>
 800bb68:	a37d      	add	r3, pc, #500	@ (adr r3, 800bd60 <__ieee754_pow+0x730>)
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	4604      	mov	r4, r0
 800bb70:	460d      	mov	r5, r1
 800bb72:	f7f4 fd49 	bl	8000608 <__aeabi_dmul>
 800bb76:	a37c      	add	r3, pc, #496	@ (adr r3, 800bd68 <__ieee754_pow+0x738>)
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	f7f4 fb8e 	bl	800029c <__adddf3>
 800bb80:	4622      	mov	r2, r4
 800bb82:	462b      	mov	r3, r5
 800bb84:	f7f4 fd40 	bl	8000608 <__aeabi_dmul>
 800bb88:	a379      	add	r3, pc, #484	@ (adr r3, 800bd70 <__ieee754_pow+0x740>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f7f4 fb85 	bl	800029c <__adddf3>
 800bb92:	4622      	mov	r2, r4
 800bb94:	462b      	mov	r3, r5
 800bb96:	f7f4 fd37 	bl	8000608 <__aeabi_dmul>
 800bb9a:	a377      	add	r3, pc, #476	@ (adr r3, 800bd78 <__ieee754_pow+0x748>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	f7f4 fb7c 	bl	800029c <__adddf3>
 800bba4:	4622      	mov	r2, r4
 800bba6:	462b      	mov	r3, r5
 800bba8:	f7f4 fd2e 	bl	8000608 <__aeabi_dmul>
 800bbac:	a374      	add	r3, pc, #464	@ (adr r3, 800bd80 <__ieee754_pow+0x750>)
 800bbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb2:	f7f4 fb73 	bl	800029c <__adddf3>
 800bbb6:	4622      	mov	r2, r4
 800bbb8:	462b      	mov	r3, r5
 800bbba:	f7f4 fd25 	bl	8000608 <__aeabi_dmul>
 800bbbe:	a372      	add	r3, pc, #456	@ (adr r3, 800bd88 <__ieee754_pow+0x758>)
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	f7f4 fb6a 	bl	800029c <__adddf3>
 800bbc8:	4622      	mov	r2, r4
 800bbca:	4606      	mov	r6, r0
 800bbcc:	460f      	mov	r7, r1
 800bbce:	462b      	mov	r3, r5
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	f7f4 fd18 	bl	8000608 <__aeabi_dmul>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4630      	mov	r0, r6
 800bbde:	4639      	mov	r1, r7
 800bbe0:	f7f4 fd12 	bl	8000608 <__aeabi_dmul>
 800bbe4:	465a      	mov	r2, fp
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	460d      	mov	r5, r1
 800bbea:	464b      	mov	r3, r9
 800bbec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbf0:	f7f4 fb54 	bl	800029c <__adddf3>
 800bbf4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bbf8:	f7f4 fd06 	bl	8000608 <__aeabi_dmul>
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	462b      	mov	r3, r5
 800bc00:	f7f4 fb4c 	bl	800029c <__adddf3>
 800bc04:	465a      	mov	r2, fp
 800bc06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	4658      	mov	r0, fp
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f7f4 fcfa 	bl	8000608 <__aeabi_dmul>
 800bc14:	4b6a      	ldr	r3, [pc, #424]	@ (800bdc0 <__ieee754_pow+0x790>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	4606      	mov	r6, r0
 800bc1a:	460f      	mov	r7, r1
 800bc1c:	f7f4 fb3e 	bl	800029c <__adddf3>
 800bc20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc24:	f7f4 fb3a 	bl	800029c <__adddf3>
 800bc28:	46d8      	mov	r8, fp
 800bc2a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800bc2e:	460d      	mov	r5, r1
 800bc30:	465a      	mov	r2, fp
 800bc32:	460b      	mov	r3, r1
 800bc34:	4640      	mov	r0, r8
 800bc36:	4649      	mov	r1, r9
 800bc38:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800bc3c:	f7f4 fce4 	bl	8000608 <__aeabi_dmul>
 800bc40:	465c      	mov	r4, fp
 800bc42:	4680      	mov	r8, r0
 800bc44:	4689      	mov	r9, r1
 800bc46:	4b5e      	ldr	r3, [pc, #376]	@ (800bdc0 <__ieee754_pow+0x790>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	f7f4 fb23 	bl	8000298 <__aeabi_dsub>
 800bc52:	4632      	mov	r2, r6
 800bc54:	463b      	mov	r3, r7
 800bc56:	f7f4 fb1f 	bl	8000298 <__aeabi_dsub>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc62:	f7f4 fb19 	bl	8000298 <__aeabi_dsub>
 800bc66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc6a:	f7f4 fccd 	bl	8000608 <__aeabi_dmul>
 800bc6e:	4622      	mov	r2, r4
 800bc70:	4606      	mov	r6, r0
 800bc72:	460f      	mov	r7, r1
 800bc74:	462b      	mov	r3, r5
 800bc76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc7a:	f7f4 fcc5 	bl	8000608 <__aeabi_dmul>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	4630      	mov	r0, r6
 800bc84:	4639      	mov	r1, r7
 800bc86:	f7f4 fb09 	bl	800029c <__adddf3>
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460f      	mov	r7, r1
 800bc8e:	4602      	mov	r2, r0
 800bc90:	460b      	mov	r3, r1
 800bc92:	4640      	mov	r0, r8
 800bc94:	4649      	mov	r1, r9
 800bc96:	f7f4 fb01 	bl	800029c <__adddf3>
 800bc9a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800bc9e:	a33c      	add	r3, pc, #240	@ (adr r3, 800bd90 <__ieee754_pow+0x760>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	4658      	mov	r0, fp
 800bca6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800bcaa:	460d      	mov	r5, r1
 800bcac:	f7f4 fcac 	bl	8000608 <__aeabi_dmul>
 800bcb0:	465c      	mov	r4, fp
 800bcb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcb6:	4642      	mov	r2, r8
 800bcb8:	464b      	mov	r3, r9
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f7f4 faeb 	bl	8000298 <__aeabi_dsub>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	4639      	mov	r1, r7
 800bcca:	f7f4 fae5 	bl	8000298 <__aeabi_dsub>
 800bcce:	a332      	add	r3, pc, #200	@ (adr r3, 800bd98 <__ieee754_pow+0x768>)
 800bcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd4:	f7f4 fc98 	bl	8000608 <__aeabi_dmul>
 800bcd8:	a331      	add	r3, pc, #196	@ (adr r3, 800bda0 <__ieee754_pow+0x770>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	4606      	mov	r6, r0
 800bce0:	460f      	mov	r7, r1
 800bce2:	4620      	mov	r0, r4
 800bce4:	4629      	mov	r1, r5
 800bce6:	f7f4 fc8f 	bl	8000608 <__aeabi_dmul>
 800bcea:	4602      	mov	r2, r0
 800bcec:	460b      	mov	r3, r1
 800bcee:	4630      	mov	r0, r6
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	f7f4 fad3 	bl	800029c <__adddf3>
 800bcf6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bcf8:	4b32      	ldr	r3, [pc, #200]	@ (800bdc4 <__ieee754_pow+0x794>)
 800bcfa:	4413      	add	r3, r2
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f7f4 facc 	bl	800029c <__adddf3>
 800bd04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bd0a:	f7f4 fc13 	bl	8000534 <__aeabi_i2d>
 800bd0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd10:	4b2d      	ldr	r3, [pc, #180]	@ (800bdc8 <__ieee754_pow+0x798>)
 800bd12:	4413      	add	r3, r2
 800bd14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd18:	4606      	mov	r6, r0
 800bd1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd1e:	460f      	mov	r7, r1
 800bd20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd24:	f7f4 faba 	bl	800029c <__adddf3>
 800bd28:	4642      	mov	r2, r8
 800bd2a:	464b      	mov	r3, r9
 800bd2c:	f7f4 fab6 	bl	800029c <__adddf3>
 800bd30:	4632      	mov	r2, r6
 800bd32:	463b      	mov	r3, r7
 800bd34:	f7f4 fab2 	bl	800029c <__adddf3>
 800bd38:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800bd3c:	4632      	mov	r2, r6
 800bd3e:	463b      	mov	r3, r7
 800bd40:	4658      	mov	r0, fp
 800bd42:	460d      	mov	r5, r1
 800bd44:	f7f4 faa8 	bl	8000298 <__aeabi_dsub>
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	f7f4 faa4 	bl	8000298 <__aeabi_dsub>
 800bd50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd54:	f7f4 faa0 	bl	8000298 <__aeabi_dsub>
 800bd58:	465c      	mov	r4, fp
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	e036      	b.n	800bdcc <__ieee754_pow+0x79c>
 800bd5e:	bf00      	nop
 800bd60:	4a454eef 	.word	0x4a454eef
 800bd64:	3fca7e28 	.word	0x3fca7e28
 800bd68:	93c9db65 	.word	0x93c9db65
 800bd6c:	3fcd864a 	.word	0x3fcd864a
 800bd70:	a91d4101 	.word	0xa91d4101
 800bd74:	3fd17460 	.word	0x3fd17460
 800bd78:	518f264d 	.word	0x518f264d
 800bd7c:	3fd55555 	.word	0x3fd55555
 800bd80:	db6fabff 	.word	0xdb6fabff
 800bd84:	3fdb6db6 	.word	0x3fdb6db6
 800bd88:	33333303 	.word	0x33333303
 800bd8c:	3fe33333 	.word	0x3fe33333
 800bd90:	e0000000 	.word	0xe0000000
 800bd94:	3feec709 	.word	0x3feec709
 800bd98:	dc3a03fd 	.word	0xdc3a03fd
 800bd9c:	3feec709 	.word	0x3feec709
 800bda0:	145b01f5 	.word	0x145b01f5
 800bda4:	be3e2fe0 	.word	0xbe3e2fe0
 800bda8:	7ff00000 	.word	0x7ff00000
 800bdac:	43400000 	.word	0x43400000
 800bdb0:	0003988e 	.word	0x0003988e
 800bdb4:	000bb679 	.word	0x000bb679
 800bdb8:	0800c728 	.word	0x0800c728
 800bdbc:	3ff00000 	.word	0x3ff00000
 800bdc0:	40080000 	.word	0x40080000
 800bdc4:	0800c708 	.word	0x0800c708
 800bdc8:	0800c718 	.word	0x0800c718
 800bdcc:	460b      	mov	r3, r1
 800bdce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdd2:	e5d7      	b.n	800b984 <__ieee754_pow+0x354>
 800bdd4:	f04f 0a01 	mov.w	sl, #1
 800bdd8:	e65e      	b.n	800ba98 <__ieee754_pow+0x468>
 800bdda:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c0ac <__ieee754_pow+0xa7c>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	f7f4 fa5a 	bl	800029c <__adddf3>
 800bde8:	4642      	mov	r2, r8
 800bdea:	e9cd 0100 	strd	r0, r1, [sp]
 800bdee:	464b      	mov	r3, r9
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f7f4 fa50 	bl	8000298 <__aeabi_dsub>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be00:	f7f4 fe92 	bl	8000b28 <__aeabi_dcmpgt>
 800be04:	2800      	cmp	r0, #0
 800be06:	f47f ae00 	bne.w	800ba0a <__ieee754_pow+0x3da>
 800be0a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800be0e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800be12:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800be16:	fa43 fa0a 	asr.w	sl, r3, sl
 800be1a:	44da      	add	sl, fp
 800be1c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800be20:	489d      	ldr	r0, [pc, #628]	@ (800c098 <__ieee754_pow+0xa68>)
 800be22:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800be26:	4108      	asrs	r0, r1
 800be28:	ea00 030a 	and.w	r3, r0, sl
 800be2c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800be30:	f1c1 0114 	rsb	r1, r1, #20
 800be34:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800be38:	fa4a fa01 	asr.w	sl, sl, r1
 800be3c:	f1bb 0f00 	cmp.w	fp, #0
 800be40:	4640      	mov	r0, r8
 800be42:	4649      	mov	r1, r9
 800be44:	f04f 0200 	mov.w	r2, #0
 800be48:	bfb8      	it	lt
 800be4a:	f1ca 0a00 	rsblt	sl, sl, #0
 800be4e:	f7f4 fa23 	bl	8000298 <__aeabi_dsub>
 800be52:	4680      	mov	r8, r0
 800be54:	4689      	mov	r9, r1
 800be56:	4632      	mov	r2, r6
 800be58:	463b      	mov	r3, r7
 800be5a:	4640      	mov	r0, r8
 800be5c:	4649      	mov	r1, r9
 800be5e:	f7f4 fa1d 	bl	800029c <__adddf3>
 800be62:	2400      	movs	r4, #0
 800be64:	a37c      	add	r3, pc, #496	@ (adr r3, 800c058 <__ieee754_pow+0xa28>)
 800be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6a:	4620      	mov	r0, r4
 800be6c:	460d      	mov	r5, r1
 800be6e:	f7f4 fbcb 	bl	8000608 <__aeabi_dmul>
 800be72:	4642      	mov	r2, r8
 800be74:	e9cd 0100 	strd	r0, r1, [sp]
 800be78:	464b      	mov	r3, r9
 800be7a:	4620      	mov	r0, r4
 800be7c:	4629      	mov	r1, r5
 800be7e:	f7f4 fa0b 	bl	8000298 <__aeabi_dsub>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	f7f4 fa05 	bl	8000298 <__aeabi_dsub>
 800be8e:	a374      	add	r3, pc, #464	@ (adr r3, 800c060 <__ieee754_pow+0xa30>)
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	f7f4 fbb8 	bl	8000608 <__aeabi_dmul>
 800be98:	a373      	add	r3, pc, #460	@ (adr r3, 800c068 <__ieee754_pow+0xa38>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	4680      	mov	r8, r0
 800bea0:	4689      	mov	r9, r1
 800bea2:	4620      	mov	r0, r4
 800bea4:	4629      	mov	r1, r5
 800bea6:	f7f4 fbaf 	bl	8000608 <__aeabi_dmul>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	4640      	mov	r0, r8
 800beb0:	4649      	mov	r1, r9
 800beb2:	f7f4 f9f3 	bl	800029c <__adddf3>
 800beb6:	4604      	mov	r4, r0
 800beb8:	460d      	mov	r5, r1
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bec2:	f7f4 f9eb 	bl	800029c <__adddf3>
 800bec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beca:	4680      	mov	r8, r0
 800becc:	4689      	mov	r9, r1
 800bece:	f7f4 f9e3 	bl	8000298 <__aeabi_dsub>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	4620      	mov	r0, r4
 800bed8:	4629      	mov	r1, r5
 800beda:	f7f4 f9dd 	bl	8000298 <__aeabi_dsub>
 800bede:	4642      	mov	r2, r8
 800bee0:	4606      	mov	r6, r0
 800bee2:	460f      	mov	r7, r1
 800bee4:	464b      	mov	r3, r9
 800bee6:	4640      	mov	r0, r8
 800bee8:	4649      	mov	r1, r9
 800beea:	f7f4 fb8d 	bl	8000608 <__aeabi_dmul>
 800beee:	a360      	add	r3, pc, #384	@ (adr r3, 800c070 <__ieee754_pow+0xa40>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	4604      	mov	r4, r0
 800bef6:	460d      	mov	r5, r1
 800bef8:	f7f4 fb86 	bl	8000608 <__aeabi_dmul>
 800befc:	a35e      	add	r3, pc, #376	@ (adr r3, 800c078 <__ieee754_pow+0xa48>)
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	f7f4 f9c9 	bl	8000298 <__aeabi_dsub>
 800bf06:	4622      	mov	r2, r4
 800bf08:	462b      	mov	r3, r5
 800bf0a:	f7f4 fb7d 	bl	8000608 <__aeabi_dmul>
 800bf0e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c080 <__ieee754_pow+0xa50>)
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	f7f4 f9c2 	bl	800029c <__adddf3>
 800bf18:	4622      	mov	r2, r4
 800bf1a:	462b      	mov	r3, r5
 800bf1c:	f7f4 fb74 	bl	8000608 <__aeabi_dmul>
 800bf20:	a359      	add	r3, pc, #356	@ (adr r3, 800c088 <__ieee754_pow+0xa58>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 f9b7 	bl	8000298 <__aeabi_dsub>
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	462b      	mov	r3, r5
 800bf2e:	f7f4 fb6b 	bl	8000608 <__aeabi_dmul>
 800bf32:	a357      	add	r3, pc, #348	@ (adr r3, 800c090 <__ieee754_pow+0xa60>)
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f7f4 f9b0 	bl	800029c <__adddf3>
 800bf3c:	4622      	mov	r2, r4
 800bf3e:	462b      	mov	r3, r5
 800bf40:	f7f4 fb62 	bl	8000608 <__aeabi_dmul>
 800bf44:	4602      	mov	r2, r0
 800bf46:	460b      	mov	r3, r1
 800bf48:	4640      	mov	r0, r8
 800bf4a:	4649      	mov	r1, r9
 800bf4c:	f7f4 f9a4 	bl	8000298 <__aeabi_dsub>
 800bf50:	4604      	mov	r4, r0
 800bf52:	460d      	mov	r5, r1
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	f7f4 fb54 	bl	8000608 <__aeabi_dmul>
 800bf60:	2200      	movs	r2, #0
 800bf62:	e9cd 0100 	strd	r0, r1, [sp]
 800bf66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	f7f4 f993 	bl	8000298 <__aeabi_dsub>
 800bf72:	4602      	mov	r2, r0
 800bf74:	460b      	mov	r3, r1
 800bf76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf7a:	f7f4 fc6f 	bl	800085c <__aeabi_ddiv>
 800bf7e:	4632      	mov	r2, r6
 800bf80:	4604      	mov	r4, r0
 800bf82:	460d      	mov	r5, r1
 800bf84:	463b      	mov	r3, r7
 800bf86:	4640      	mov	r0, r8
 800bf88:	4649      	mov	r1, r9
 800bf8a:	f7f4 fb3d 	bl	8000608 <__aeabi_dmul>
 800bf8e:	4632      	mov	r2, r6
 800bf90:	463b      	mov	r3, r7
 800bf92:	f7f4 f983 	bl	800029c <__adddf3>
 800bf96:	4602      	mov	r2, r0
 800bf98:	460b      	mov	r3, r1
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 f97b 	bl	8000298 <__aeabi_dsub>
 800bfa2:	4642      	mov	r2, r8
 800bfa4:	464b      	mov	r3, r9
 800bfa6:	f7f4 f977 	bl	8000298 <__aeabi_dsub>
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4602      	mov	r2, r0
 800bfae:	493b      	ldr	r1, [pc, #236]	@ (800c09c <__ieee754_pow+0xa6c>)
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	f7f4 f971 	bl	8000298 <__aeabi_dsub>
 800bfb6:	ec41 0b10 	vmov	d0, r0, r1
 800bfba:	ee10 3a90 	vmov	r3, s1
 800bfbe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bfc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfc6:	da30      	bge.n	800c02a <__ieee754_pow+0x9fa>
 800bfc8:	4650      	mov	r0, sl
 800bfca:	f000 f875 	bl	800c0b8 <scalbn>
 800bfce:	ec51 0b10 	vmov	r0, r1, d0
 800bfd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfd6:	f7ff bbd2 	b.w	800b77e <__ieee754_pow+0x14e>
 800bfda:	4c31      	ldr	r4, [pc, #196]	@ (800c0a0 <__ieee754_pow+0xa70>)
 800bfdc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bfe0:	42a3      	cmp	r3, r4
 800bfe2:	d91a      	bls.n	800c01a <__ieee754_pow+0x9ea>
 800bfe4:	4b2f      	ldr	r3, [pc, #188]	@ (800c0a4 <__ieee754_pow+0xa74>)
 800bfe6:	440b      	add	r3, r1
 800bfe8:	4303      	orrs	r3, r0
 800bfea:	d009      	beq.n	800c000 <__ieee754_pow+0x9d0>
 800bfec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bff0:	2200      	movs	r2, #0
 800bff2:	2300      	movs	r3, #0
 800bff4:	f7f4 fd7a 	bl	8000aec <__aeabi_dcmplt>
 800bff8:	3800      	subs	r0, #0
 800bffa:	bf18      	it	ne
 800bffc:	2001      	movne	r0, #1
 800bffe:	e42b      	b.n	800b858 <__ieee754_pow+0x228>
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	f7f4 f948 	bl	8000298 <__aeabi_dsub>
 800c008:	4632      	mov	r2, r6
 800c00a:	463b      	mov	r3, r7
 800c00c:	f7f4 fd82 	bl	8000b14 <__aeabi_dcmpge>
 800c010:	2800      	cmp	r0, #0
 800c012:	d1eb      	bne.n	800bfec <__ieee754_pow+0x9bc>
 800c014:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c0b4 <__ieee754_pow+0xa84>
 800c018:	e6f7      	b.n	800be0a <__ieee754_pow+0x7da>
 800c01a:	469a      	mov	sl, r3
 800c01c:	4b22      	ldr	r3, [pc, #136]	@ (800c0a8 <__ieee754_pow+0xa78>)
 800c01e:	459a      	cmp	sl, r3
 800c020:	f63f aef3 	bhi.w	800be0a <__ieee754_pow+0x7da>
 800c024:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c028:	e715      	b.n	800be56 <__ieee754_pow+0x826>
 800c02a:	ec51 0b10 	vmov	r0, r1, d0
 800c02e:	4619      	mov	r1, r3
 800c030:	e7cf      	b.n	800bfd2 <__ieee754_pow+0x9a2>
 800c032:	491a      	ldr	r1, [pc, #104]	@ (800c09c <__ieee754_pow+0xa6c>)
 800c034:	2000      	movs	r0, #0
 800c036:	f7ff bb18 	b.w	800b66a <__ieee754_pow+0x3a>
 800c03a:	2000      	movs	r0, #0
 800c03c:	2100      	movs	r1, #0
 800c03e:	f7ff bb14 	b.w	800b66a <__ieee754_pow+0x3a>
 800c042:	4630      	mov	r0, r6
 800c044:	4639      	mov	r1, r7
 800c046:	f7ff bb10 	b.w	800b66a <__ieee754_pow+0x3a>
 800c04a:	460c      	mov	r4, r1
 800c04c:	f7ff bb5e 	b.w	800b70c <__ieee754_pow+0xdc>
 800c050:	2400      	movs	r4, #0
 800c052:	f7ff bb49 	b.w	800b6e8 <__ieee754_pow+0xb8>
 800c056:	bf00      	nop
 800c058:	00000000 	.word	0x00000000
 800c05c:	3fe62e43 	.word	0x3fe62e43
 800c060:	fefa39ef 	.word	0xfefa39ef
 800c064:	3fe62e42 	.word	0x3fe62e42
 800c068:	0ca86c39 	.word	0x0ca86c39
 800c06c:	be205c61 	.word	0xbe205c61
 800c070:	72bea4d0 	.word	0x72bea4d0
 800c074:	3e663769 	.word	0x3e663769
 800c078:	c5d26bf1 	.word	0xc5d26bf1
 800c07c:	3ebbbd41 	.word	0x3ebbbd41
 800c080:	af25de2c 	.word	0xaf25de2c
 800c084:	3f11566a 	.word	0x3f11566a
 800c088:	16bebd93 	.word	0x16bebd93
 800c08c:	3f66c16c 	.word	0x3f66c16c
 800c090:	5555553e 	.word	0x5555553e
 800c094:	3fc55555 	.word	0x3fc55555
 800c098:	fff00000 	.word	0xfff00000
 800c09c:	3ff00000 	.word	0x3ff00000
 800c0a0:	4090cbff 	.word	0x4090cbff
 800c0a4:	3f6f3400 	.word	0x3f6f3400
 800c0a8:	3fe00000 	.word	0x3fe00000
 800c0ac:	652b82fe 	.word	0x652b82fe
 800c0b0:	3c971547 	.word	0x3c971547
 800c0b4:	4090cc00 	.word	0x4090cc00

0800c0b8 <scalbn>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	ec55 4b10 	vmov	r4, r5, d0
 800c0be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	462b      	mov	r3, r5
 800c0c6:	b991      	cbnz	r1, 800c0ee <scalbn+0x36>
 800c0c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c0cc:	4323      	orrs	r3, r4
 800c0ce:	d03d      	beq.n	800c14c <scalbn+0x94>
 800c0d0:	4b35      	ldr	r3, [pc, #212]	@ (800c1a8 <scalbn+0xf0>)
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f7f4 fa96 	bl	8000608 <__aeabi_dmul>
 800c0dc:	4b33      	ldr	r3, [pc, #204]	@ (800c1ac <scalbn+0xf4>)
 800c0de:	429e      	cmp	r6, r3
 800c0e0:	4604      	mov	r4, r0
 800c0e2:	460d      	mov	r5, r1
 800c0e4:	da0f      	bge.n	800c106 <scalbn+0x4e>
 800c0e6:	a328      	add	r3, pc, #160	@ (adr r3, 800c188 <scalbn+0xd0>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	e01e      	b.n	800c12c <scalbn+0x74>
 800c0ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c0f2:	4291      	cmp	r1, r2
 800c0f4:	d10b      	bne.n	800c10e <scalbn+0x56>
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	f7f4 f8ce 	bl	800029c <__adddf3>
 800c100:	4604      	mov	r4, r0
 800c102:	460d      	mov	r5, r1
 800c104:	e022      	b.n	800c14c <scalbn+0x94>
 800c106:	460b      	mov	r3, r1
 800c108:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c10c:	3936      	subs	r1, #54	@ 0x36
 800c10e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c112:	4296      	cmp	r6, r2
 800c114:	dd0d      	ble.n	800c132 <scalbn+0x7a>
 800c116:	2d00      	cmp	r5, #0
 800c118:	a11d      	add	r1, pc, #116	@ (adr r1, 800c190 <scalbn+0xd8>)
 800c11a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c11e:	da02      	bge.n	800c126 <scalbn+0x6e>
 800c120:	a11d      	add	r1, pc, #116	@ (adr r1, 800c198 <scalbn+0xe0>)
 800c122:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c126:	a31a      	add	r3, pc, #104	@ (adr r3, 800c190 <scalbn+0xd8>)
 800c128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12c:	f7f4 fa6c 	bl	8000608 <__aeabi_dmul>
 800c130:	e7e6      	b.n	800c100 <scalbn+0x48>
 800c132:	1872      	adds	r2, r6, r1
 800c134:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c138:	428a      	cmp	r2, r1
 800c13a:	dcec      	bgt.n	800c116 <scalbn+0x5e>
 800c13c:	2a00      	cmp	r2, #0
 800c13e:	dd08      	ble.n	800c152 <scalbn+0x9a>
 800c140:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c144:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c148:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c14c:	ec45 4b10 	vmov	d0, r4, r5
 800c150:	bd70      	pop	{r4, r5, r6, pc}
 800c152:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c156:	da08      	bge.n	800c16a <scalbn+0xb2>
 800c158:	2d00      	cmp	r5, #0
 800c15a:	a10b      	add	r1, pc, #44	@ (adr r1, 800c188 <scalbn+0xd0>)
 800c15c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c160:	dac1      	bge.n	800c0e6 <scalbn+0x2e>
 800c162:	a10f      	add	r1, pc, #60	@ (adr r1, 800c1a0 <scalbn+0xe8>)
 800c164:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c168:	e7bd      	b.n	800c0e6 <scalbn+0x2e>
 800c16a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c16e:	3236      	adds	r2, #54	@ 0x36
 800c170:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c174:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c178:	4620      	mov	r0, r4
 800c17a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1b0 <scalbn+0xf8>)
 800c17c:	4629      	mov	r1, r5
 800c17e:	2200      	movs	r2, #0
 800c180:	e7d4      	b.n	800c12c <scalbn+0x74>
 800c182:	bf00      	nop
 800c184:	f3af 8000 	nop.w
 800c188:	c2f8f359 	.word	0xc2f8f359
 800c18c:	01a56e1f 	.word	0x01a56e1f
 800c190:	8800759c 	.word	0x8800759c
 800c194:	7e37e43c 	.word	0x7e37e43c
 800c198:	8800759c 	.word	0x8800759c
 800c19c:	fe37e43c 	.word	0xfe37e43c
 800c1a0:	c2f8f359 	.word	0xc2f8f359
 800c1a4:	81a56e1f 	.word	0x81a56e1f
 800c1a8:	43500000 	.word	0x43500000
 800c1ac:	ffff3cb0 	.word	0xffff3cb0
 800c1b0:	3c900000 	.word	0x3c900000

0800c1b4 <with_errno>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	ed2d 8b02 	vpush	{d8}
 800c1ba:	eeb0 8a40 	vmov.f32	s16, s0
 800c1be:	eef0 8a60 	vmov.f32	s17, s1
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	f7fa fe54 	bl	8006e70 <__errno>
 800c1c8:	eeb0 0a48 	vmov.f32	s0, s16
 800c1cc:	eef0 0a68 	vmov.f32	s1, s17
 800c1d0:	ecbd 8b02 	vpop	{d8}
 800c1d4:	6004      	str	r4, [r0, #0]
 800c1d6:	bd10      	pop	{r4, pc}

0800c1d8 <xflow>:
 800c1d8:	4603      	mov	r3, r0
 800c1da:	b507      	push	{r0, r1, r2, lr}
 800c1dc:	ec51 0b10 	vmov	r0, r1, d0
 800c1e0:	b183      	cbz	r3, 800c204 <xflow+0x2c>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c1e8:	e9cd 2300 	strd	r2, r3, [sp]
 800c1ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1f0:	f7f4 fa0a 	bl	8000608 <__aeabi_dmul>
 800c1f4:	ec41 0b10 	vmov	d0, r0, r1
 800c1f8:	2022      	movs	r0, #34	@ 0x22
 800c1fa:	b003      	add	sp, #12
 800c1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c200:	f7ff bfd8 	b.w	800c1b4 <with_errno>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	e7ee      	b.n	800c1e8 <xflow+0x10>
 800c20a:	0000      	movs	r0, r0
 800c20c:	0000      	movs	r0, r0
	...

0800c210 <__math_uflow>:
 800c210:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c218 <__math_uflow+0x8>
 800c214:	f7ff bfe0 	b.w	800c1d8 <xflow>
 800c218:	00000000 	.word	0x00000000
 800c21c:	10000000 	.word	0x10000000

0800c220 <__math_oflow>:
 800c220:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c228 <__math_oflow+0x8>
 800c224:	f7ff bfd8 	b.w	800c1d8 <xflow>
 800c228:	00000000 	.word	0x00000000
 800c22c:	70000000 	.word	0x70000000

0800c230 <_init>:
 800c230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c232:	bf00      	nop
 800c234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c236:	bc08      	pop	{r3}
 800c238:	469e      	mov	lr, r3
 800c23a:	4770      	bx	lr

0800c23c <_fini>:
 800c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23e:	bf00      	nop
 800c240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c242:	bc08      	pop	{r3}
 800c244:	469e      	mov	lr, r3
 800c246:	4770      	bx	lr
