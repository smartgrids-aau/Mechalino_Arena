
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800ac78  0800ac78  0000bc78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b164  0800b164  0000d1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b164  0800b164  0000c164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b16c  0800b16c  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b16c  0800b16c  0000c16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b170  0800b170  0000c170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b174  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200001f8  0800b36c  0000d1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  0800b36c  0000d5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b6e  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c1f  00000000  00000000  0001fd96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000229b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9f  00000000  00000000  00023b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aba  00000000  00000000  000248af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169a9  00000000  00000000  0003e369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f183  00000000  00000000  00054d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000f3e95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060cc  00000000  00000000  000f3f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000f9fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac5c 	.word	0x0800ac5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800ac5c 	.word	0x0800ac5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_ADC1_Init+0xa0>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001016:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001024:	2201      	movs	r2, #1
 8001026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <MX_ADC1_Init+0xa4>)
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001058:	f001 f9de 	bl	8002418 <HAL_ADC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001062:	f000 fd3b 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001078:	f001 fa12 	bl	80024a0 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001082:	f000 fd2b 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000214 	.word	0x20000214
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f001 fd8b 	bl	8002c24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b0:	4815      	ldr	r0, [pc, #84]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011b2:	f001 febb 	bl	8002f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011b6:	2200      	movs	r2, #0
 80011b8:	213b      	movs	r1, #59	@ 0x3b
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011bc:	f001 feb6 	bl	8002f2c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011da:	f001 fd23 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011de:	233b      	movs	r3, #59	@ 0x3b
 80011e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011f6:	f001 fd15 	bl	8002c24 <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020400 	.word	0x40020400

08001210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f001 fe87 	bl	8002f60 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 fc40 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000025c 	.word	0x2000025c
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f001 fcac 	bl	8002c24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_UART_RxCpltCallback>:
void assert_failed(uint8_t *file, uint32_t line);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_UART_RxCpltCallback+0x5c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d120      	bne.n	8001350 <HAL_UART_RxCpltCallback+0x54>
		if (UART1_rxBuffer[0] == '\n') { // Assuming commands are newline terminated
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d10c      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x34>
			rx_buffer[rx_index] = '\0'; // Null terminate the string
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]
			rx_complete = 1; // Set flag for command complete
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_RxCpltCallback+0x6c>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
			rx_index = 0; // Reset index
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e00a      	b.n	8001346 <HAL_UART_RxCpltCallback+0x4a>
		} else {
			rx_buffer[rx_index++] = UART1_rxBuffer[0]; // Store character in buffer
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800133a:	7011      	strb	r1, [r2, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 8001344:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1); // Listen for next character
 8001346:	2201      	movs	r2, #1
 8001348:	4904      	ldr	r1, [pc, #16]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 800134a:	4808      	ldr	r0, [pc, #32]	@ (800136c <HAL_UART_RxCpltCallback+0x70>)
 800134c:	f003 fc52 	bl	8004bf4 <HAL_UART_Receive_IT>
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	2000031c 	.word	0x2000031c
 8001360:	20000314 	.word	0x20000314
 8001364:	200002b0 	.word	0x200002b0
 8001368:	20000318 	.word	0x20000318
 800136c:	2000041c 	.word	0x2000041c

08001370 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a4a      	ldr	r2, [pc, #296]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800137e:	4293      	cmp	r3, r2
 8001380:	f040 808d 	bne.w	800149e <HAL_TIM_PeriodElapsedCallback+0x12e>
		if (timer_count > 0) {
 8001384:	4b49      	ldr	r3, [pc, #292]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8087 	beq.w	800149e <HAL_TIM_PeriodElapsedCallback+0x12e>
			timer_count--;
 8001390:	4b46      	ldr	r3, [pc, #280]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b44      	ldr	r3, [pc, #272]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800139c:	801a      	strh	r2, [r3, #0]

			// Update left servo PWM
			if (servo_left.current_pwm != servo_left.target_pwm) {
 800139e:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d030      	beq.n	800140c <HAL_TIM_PeriodElapsedCallback+0x9c>
				if (servo_left.current_pwm < servo_left.target_pwm) {
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	4b40      	ldr	r3, [pc, #256]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d212      	bcs.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x6c>
					servo_left.current_pwm += increment_speed;
 80013b6:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b3c      	ldr	r3, [pc, #240]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a3b      	ldr	r2, [pc, #236]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013c4:	6093      	str	r3, [r2, #8]
					if (servo_left.current_pwm > servo_left.target_pwm) {
 80013c6:	4b3a      	ldr	r3, [pc, #232]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d916      	bls.n	8001400 <HAL_TIM_PeriodElapsedCallback+0x90>
						servo_left.current_pwm = servo_left.target_pwm;
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	4a36      	ldr	r2, [pc, #216]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013d8:	6093      	str	r3, [r2, #8]
 80013da:	e011      	b.n	8001400 <HAL_TIM_PeriodElapsedCallback+0x90>
					}
				} else {
					servo_left.current_pwm -= increment_speed;
 80013dc:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b33      	ldr	r3, [pc, #204]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	4a31      	ldr	r2, [pc, #196]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013ea:	6093      	str	r3, [r2, #8]
					if (servo_left.current_pwm < servo_left.target_pwm) {
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d203      	bcs.n	8001400 <HAL_TIM_PeriodElapsedCallback+0x90>
						servo_left.current_pwm = servo_left.target_pwm;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4a2c      	ldr	r2, [pc, #176]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013fe:	6093      	str	r3, [r2, #8]
					}
				}
				set_servo_pwm(&servo_left, servo_left.current_pwm);
 8001400:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4619      	mov	r1, r3
 8001406:	482a      	ldr	r0, [pc, #168]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001408:	f000 f8ca 	bl	80015a0 <set_servo_pwm>
			}

			// Update right servo PWM
			if (servo_right.current_pwm != servo_right.target_pwm) {
 800140c:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d030      	beq.n	800147a <HAL_TIM_PeriodElapsedCallback+0x10a>
				if (servo_right.current_pwm < servo_right.target_pwm) {
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d212      	bcs.n	800144a <HAL_TIM_PeriodElapsedCallback+0xda>
					servo_right.current_pwm += increment_speed;
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4413      	add	r3, r2
 8001430:	4a21      	ldr	r2, [pc, #132]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001432:	6093      	str	r3, [r2, #8]
					if (servo_right.current_pwm > servo_right.target_pwm) {
 8001434:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d916      	bls.n	800146e <HAL_TIM_PeriodElapsedCallback+0xfe>
						servo_right.current_pwm = servo_right.target_pwm;
 8001440:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001446:	6093      	str	r3, [r2, #8]
 8001448:	e011      	b.n	800146e <HAL_TIM_PeriodElapsedCallback+0xfe>
					}
				} else {
					servo_right.current_pwm -= increment_speed;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001458:	6093      	str	r3, [r2, #8]
					if (servo_right.current_pwm < servo_right.target_pwm) {
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	429a      	cmp	r2, r3
 8001464:	d203      	bcs.n	800146e <HAL_TIM_PeriodElapsedCallback+0xfe>
						servo_right.current_pwm = servo_right.target_pwm;
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	4a13      	ldr	r2, [pc, #76]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800146c:	6093      	str	r3, [r2, #8]
					}
				}
				set_servo_pwm(&servo_right, servo_right.current_pwm);
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	4619      	mov	r1, r3
 8001474:	4810      	ldr	r0, [pc, #64]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001476:	f000 f893 	bl	80015a0 <set_servo_pwm>
			}

			// Stop servos when duration expires
			if (timer_count == 0) {
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10c      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0x12e>
				set_servo_pwm(&servo_left, SERVO_STOP); // Stop left servo
 8001484:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001488:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800148a:	f000 f889 	bl	80015a0 <set_servo_pwm>
				set_servo_pwm(&servo_right, SERVO_STOP); // Stop right servo
 800148e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001492:	4809      	ldr	r0, [pc, #36]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001494:	f000 f884 	bl	80015a0 <set_servo_pwm>
				HAL_TIM_Base_Stop_IT(htim); // Stop the timer
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f002 fbd5 	bl	8003c48 <HAL_TIM_Base_Stop_IT>
			}
		}
	}
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40000400 	.word	0x40000400
 80014ac:	2000031e 	.word	0x2000031e
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000020 	.word	0x20000020
 80014b8:	20000010 	.word	0x20000010

080014bc <execute_command>:

void execute_command(const char *cmd) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	6078      	str	r0, [r7, #4]
	if (strncmp(cmd, "STOP", 4) == 0) {
 80014c4:	2204      	movs	r2, #4
 80014c6:	492a      	ldr	r1, [pc, #168]	@ (8001570 <execute_command+0xb4>)
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f005 fa7c 	bl	80069c6 <strncmp>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d107      	bne.n	80014e4 <execute_command+0x28>
		start_pwm_update(SERVO_STOP, SERVO_STOP, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80014da:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014de:	f000 f891 	bl	8001604 <start_pwm_update>
		navigate_to_target();
		//printf("Target Location: X=%.4f, Y=%.4f, Yaw=%.4f",target_x, target_y, target_yaw);
	} else {
		//printf("Unknown command: %s\n", cmd);
	}
}
 80014e2:	e040      	b.n	8001566 <execute_command+0xaa>
	} else if (strncmp(cmd, "START_SPINNING", 14) == 0) {
 80014e4:	220e      	movs	r2, #14
 80014e6:	4923      	ldr	r1, [pc, #140]	@ (8001574 <execute_command+0xb8>)
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f005 fa6c 	bl	80069c6 <strncmp>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d108      	bne.n	8001506 <execute_command+0x4a>
		start_pwm_update(FORWARD_MAX, FORWARD_MAX, 50000); // Example to spin in place
 80014f4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80014f8:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 80014fc:	f241 30ec 	movw	r0, #5100	@ 0x13ec
 8001500:	f000 f880 	bl	8001604 <start_pwm_update>
}
 8001504:	e02f      	b.n	8001566 <execute_command+0xaa>
	} else if (strncmp(cmd, "LOCATION_UPDATE", 15) == 0) {
 8001506:	220f      	movs	r2, #15
 8001508:	491b      	ldr	r1, [pc, #108]	@ (8001578 <execute_command+0xbc>)
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f005 fa5b 	bl	80069c6 <strncmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d110      	bne.n	8001538 <execute_command+0x7c>
		sscanf(cmd + 16, "%f;%f;%f", &current_x, &current_y, &current_yaw);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f103 0010 	add.w	r0, r3, #16
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <execute_command+0xc0>)
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <execute_command+0xc4>)
 8001522:	4a18      	ldr	r2, [pc, #96]	@ (8001584 <execute_command+0xc8>)
 8001524:	4918      	ldr	r1, [pc, #96]	@ (8001588 <execute_command+0xcc>)
 8001526:	f005 f9d7 	bl	80068d8 <siscanf>
		if (target_set) {
 800152a:	4b18      	ldr	r3, [pc, #96]	@ (800158c <execute_command+0xd0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d019      	beq.n	8001566 <execute_command+0xaa>
			adjust_rotation(); // Adjust rotation based on the latest location only if a target is set
 8001532:	f000 f959 	bl	80017e8 <adjust_rotation>
}
 8001536:	e016      	b.n	8001566 <execute_command+0xaa>
	} else if (strncmp(cmd, "TARGET_UPDATE", 13) == 0) {
 8001538:	220d      	movs	r2, #13
 800153a:	4915      	ldr	r1, [pc, #84]	@ (8001590 <execute_command+0xd4>)
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f005 fa42 	bl	80069c6 <strncmp>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10e      	bne.n	8001566 <execute_command+0xaa>
		sscanf(cmd + 14, "%f;%f;%f", &target_x, &target_y, &target_yaw);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f103 000e 	add.w	r0, r3, #14
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <execute_command+0xd8>)
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <execute_command+0xdc>)
 8001554:	4a11      	ldr	r2, [pc, #68]	@ (800159c <execute_command+0xe0>)
 8001556:	490c      	ldr	r1, [pc, #48]	@ (8001588 <execute_command+0xcc>)
 8001558:	f005 f9be 	bl	80068d8 <siscanf>
		target_set = 1; // Set the target flag
 800155c:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <execute_command+0xd0>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]
		navigate_to_target();
 8001562:	f000 f871 	bl	8001648 <navigate_to_target>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	0800ac78 	.word	0x0800ac78
 8001574:	0800ac80 	.word	0x0800ac80
 8001578:	0800ac90 	.word	0x0800ac90
 800157c:	20000328 	.word	0x20000328
 8001580:	20000324 	.word	0x20000324
 8001584:	20000320 	.word	0x20000320
 8001588:	0800aca0 	.word	0x0800aca0
 800158c:	2000033c 	.word	0x2000033c
 8001590:	0800acac 	.word	0x0800acac
 8001594:	20000334 	.word	0x20000334
 8001598:	20000330 	.word	0x20000330
 800159c:	2000032c 	.word	0x2000032c

080015a0 <set_servo_pwm>:

void set_servo_pwm(Servo *servo, uint32_t pulse) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	servo->current_pwm = pulse;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <set_servo_pwm+0x24>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015c2:	e018      	b.n	80015f6 <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d105      	bne.n	80015d8 <set_servo_pwm+0x38>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015d6:	e00e      	b.n	80015f6 <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d105      	bne.n	80015ec <set_servo_pwm+0x4c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80015ea:	e004      	b.n	80015f6 <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <start_pwm_update>:

void start_pwm_update(uint32_t left_target, uint32_t right_target,
		uint32_t duration_ms) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	servo_left.target_pwm = left_target;
 8001610:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <start_pwm_update+0x30>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	60d3      	str	r3, [r2, #12]
	servo_right.target_pwm = right_target;
 8001616:	4a08      	ldr	r2, [pc, #32]	@ (8001638 <start_pwm_update+0x34>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
	timer_count = duration_ms;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <start_pwm_update+0x38>)
 8001622:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3); // Start the timer with interrupt
 8001624:	4806      	ldr	r0, [pc, #24]	@ (8001640 <start_pwm_update+0x3c>)
 8001626:	f002 faad 	bl	8003b84 <HAL_TIM_Base_Start_IT>
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000000 	.word	0x20000000
 8001638:	20000010 	.word	0x20000010
 800163c:	2000031e 	.word	0x2000031e
 8001640:	200003d4 	.word	0x200003d4
 8001644:	00000000 	.word	0x00000000

08001648 <navigate_to_target>:

void navigate_to_target(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
	// Calculate the angle to the target
	float dx = target_x - current_x;
 800164e:	4b5c      	ldr	r3, [pc, #368]	@ (80017c0 <navigate_to_target+0x178>)
 8001650:	ed93 7a00 	vldr	s14, [r3]
 8001654:	4b5b      	ldr	r3, [pc, #364]	@ (80017c4 <navigate_to_target+0x17c>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165e:	edc7 7a01 	vstr	s15, [r7, #4]
	float dy = target_y - current_y;
 8001662:	4b59      	ldr	r3, [pc, #356]	@ (80017c8 <navigate_to_target+0x180>)
 8001664:	ed93 7a00 	vldr	s14, [r3]
 8001668:	4b58      	ldr	r3, [pc, #352]	@ (80017cc <navigate_to_target+0x184>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001672:	edc7 7a00 	vstr	s15, [r7]
	float target_angle = atan2f(dy, dx) * 180.0f / M_PI; // Convert to degrees
 8001676:	edd7 0a01 	vldr	s1, [r7, #4]
 800167a:	ed97 0a00 	vldr	s0, [r7]
 800167e:	f009 f96f 	bl	800a960 <atan2f>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80017d0 <navigate_to_target+0x188>
 800168a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168e:	ee17 0a90 	vmov	r0, s15
 8001692:	f7fe ff61 	bl	8000558 <__aeabi_f2d>
 8001696:	a348      	add	r3, pc, #288	@ (adr r3, 80017b8 <navigate_to_target+0x170>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7ff f8de 	bl	800085c <__aeabi_ddiv>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff faa6 	bl	8000bf8 <__aeabi_d2f>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]

	// Ensure target_angle is in the range -180 to 180
	if (target_angle > 180.0f) {
 80016b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80017d0 <navigate_to_target+0x188>
 80016b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c0:	dd08      	ble.n	80016d4 <navigate_to_target+0x8c>
		target_angle -= 360.0f;
 80016c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80016c6:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80017d4 <navigate_to_target+0x18c>
 80016ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ce:	edc7 7a03 	vstr	s15, [r7, #12]
 80016d2:	e010      	b.n	80016f6 <navigate_to_target+0xae>
	} else if (target_angle < -180.0f) {
 80016d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80017d8 <navigate_to_target+0x190>
 80016dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d507      	bpl.n	80016f6 <navigate_to_target+0xae>
		target_angle += 360.0f;
 80016e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ea:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80017d4 <navigate_to_target+0x18c>
 80016ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016f2:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Calculate the angle difference
	float angle_difference = target_angle - current_yaw;
 80016f6:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <navigate_to_target+0x194>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001704:	edc7 7a02 	vstr	s15, [r7, #8]

	// Normalize angle difference to be within -180 to 180 degrees
	if (angle_difference > 180.0f) {
 8001708:	edd7 7a02 	vldr	s15, [r7, #8]
 800170c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80017d0 <navigate_to_target+0x188>
 8001710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	dd08      	ble.n	800172c <navigate_to_target+0xe4>
		angle_difference -= 360.0f;
 800171a:	edd7 7a02 	vldr	s15, [r7, #8]
 800171e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80017d4 <navigate_to_target+0x18c>
 8001722:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001726:	edc7 7a02 	vstr	s15, [r7, #8]
 800172a:	e010      	b.n	800174e <navigate_to_target+0x106>
	} else if (angle_difference < -180.0f) {
 800172c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001730:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80017d8 <navigate_to_target+0x190>
 8001734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	d507      	bpl.n	800174e <navigate_to_target+0x106>
		angle_difference += 360.0f;
 800173e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001742:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80017d4 <navigate_to_target+0x18c>
 8001746:	ee77 7a87 	vadd.f32	s15, s15, s14
 800174a:	edc7 7a02 	vstr	s15, [r7, #8]
	}

	// Calculate rotation time based on angle difference
	calculated_rotation_time = fabsf(angle_difference)
 800174e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001752:	eeb0 7ae7 	vabs.f32	s14, s15
			/ 360.0f* ROTATION_TIME_360;
 8001756:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80017d4 <navigate_to_target+0x18c>
 800175a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80017e0 <navigate_to_target+0x198>
 8001762:	ee67 7a87 	vmul.f32	s15, s15, s14
	calculated_rotation_time = fabsf(angle_difference)
 8001766:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <navigate_to_target+0x19c>)
 8001768:	edc3 7a00 	vstr	s15, [r3]

	// Rotate the robot in place
	if (angle_difference > 0) {
 800176c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001770:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001778:	dd0d      	ble.n	8001796 <navigate_to_target+0x14e>
		start_pwm_update(FORWARD_SLOW, FORWARD_SLOW,
 800177a:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <navigate_to_target+0x19c>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001784:	ee17 2a90 	vmov	r2, s15
 8001788:	f640 411c 	movw	r1, #3100	@ 0xc1c
 800178c:	f640 401c 	movw	r0, #3100	@ 0xc1c
 8001790:	f7ff ff38 	bl	8001604 <start_pwm_update>
		start_pwm_update(BACKWARD_SLOW, BACKWARD_SLOW,
				(uint32_t) calculated_rotation_time); // Rotate counterclockwise
	}

	// After rotation, wait for the next location update to adjust further
}
 8001794:	e00c      	b.n	80017b0 <navigate_to_target+0x168>
		start_pwm_update(BACKWARD_SLOW, BACKWARD_SLOW,
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <navigate_to_target+0x19c>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a0:	ee17 2a90 	vmov	r2, s15
 80017a4:	f44f 612f 	mov.w	r1, #2800	@ 0xaf0
 80017a8:	f44f 602f 	mov.w	r0, #2800	@ 0xaf0
 80017ac:	f7ff ff2a 	bl	8001604 <start_pwm_update>
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	54442d18 	.word	0x54442d18
 80017bc:	400921fb 	.word	0x400921fb
 80017c0:	2000032c 	.word	0x2000032c
 80017c4:	20000320 	.word	0x20000320
 80017c8:	20000330 	.word	0x20000330
 80017cc:	20000324 	.word	0x20000324
 80017d0:	43340000 	.word	0x43340000
 80017d4:	43b40000 	.word	0x43b40000
 80017d8:	c3340000 	.word	0xc3340000
 80017dc:	20000328 	.word	0x20000328
 80017e0:	45480000 	.word	0x45480000
 80017e4:	20000338 	.word	0x20000338

080017e8 <adjust_rotation>:

void adjust_rotation(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
	// This function will be called upon receiving a LOCATION_UPDATE
	// It checks if further rotation is needed or if the robot can move forward

	// Calculate the angle to the target again
	float dx = target_x - current_x;
 80017ee:	4b50      	ldr	r3, [pc, #320]	@ (8001930 <adjust_rotation+0x148>)
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001934 <adjust_rotation+0x14c>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fe:	edc7 7a01 	vstr	s15, [r7, #4]
	float dy = target_y - current_y;
 8001802:	4b4d      	ldr	r3, [pc, #308]	@ (8001938 <adjust_rotation+0x150>)
 8001804:	ed93 7a00 	vldr	s14, [r3]
 8001808:	4b4c      	ldr	r3, [pc, #304]	@ (800193c <adjust_rotation+0x154>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001812:	edc7 7a00 	vstr	s15, [r7]
	float target_angle = atan2f(dy, dx) * 180.0f / M_PI; // Convert to degrees
 8001816:	edd7 0a01 	vldr	s1, [r7, #4]
 800181a:	ed97 0a00 	vldr	s0, [r7]
 800181e:	f009 f89f 	bl	800a960 <atan2f>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
 8001826:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001940 <adjust_rotation+0x158>
 800182a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182e:	ee17 0a90 	vmov	r0, s15
 8001832:	f7fe fe91 	bl	8000558 <__aeabi_f2d>
 8001836:	a33c      	add	r3, pc, #240	@ (adr r3, 8001928 <adjust_rotation+0x140>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7ff f80e 	bl	800085c <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f9d6 	bl	8000bf8 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]

	if (target_angle > 180.0f) {
 8001850:	edd7 7a03 	vldr	s15, [r7, #12]
 8001854:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001940 <adjust_rotation+0x158>
 8001858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	dd08      	ble.n	8001874 <adjust_rotation+0x8c>
		target_angle -= 360.0f;
 8001862:	edd7 7a03 	vldr	s15, [r7, #12]
 8001866:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001944 <adjust_rotation+0x15c>
 800186a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800186e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001872:	e010      	b.n	8001896 <adjust_rotation+0xae>
	} else if (target_angle < -180.0f) {
 8001874:	edd7 7a03 	vldr	s15, [r7, #12]
 8001878:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001948 <adjust_rotation+0x160>
 800187c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001884:	d507      	bpl.n	8001896 <adjust_rotation+0xae>
		target_angle += 360.0f;
 8001886:	edd7 7a03 	vldr	s15, [r7, #12]
 800188a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001944 <adjust_rotation+0x15c>
 800188e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001892:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	float angle_difference = target_angle - current_yaw;
 8001896:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <adjust_rotation+0x164>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ed97 7a03 	vldr	s14, [r7, #12]
 80018a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a4:	edc7 7a02 	vstr	s15, [r7, #8]

	if (angle_difference > 180.0f) {
 80018a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ac:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001940 <adjust_rotation+0x158>
 80018b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	dd08      	ble.n	80018cc <adjust_rotation+0xe4>
		angle_difference -= 360.0f;
 80018ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80018be:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001944 <adjust_rotation+0x15c>
 80018c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018c6:	edc7 7a02 	vstr	s15, [r7, #8]
 80018ca:	e010      	b.n	80018ee <adjust_rotation+0x106>
	} else if (angle_difference < -180.0f) {
 80018cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001948 <adjust_rotation+0x160>
 80018d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	d507      	bpl.n	80018ee <adjust_rotation+0x106>
		angle_difference += 360.0f;
 80018de:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001944 <adjust_rotation+0x15c>
 80018e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ea:	edc7 7a02 	vstr	s15, [r7, #8]
	}

	// If the robot is aligned with the target, move forward
	if (fabsf(angle_difference) <= ANGLE_THRESHOLD) {
 80018ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80018f2:	eef0 7ae7 	vabs.f32	s15, s15
 80018f6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80018fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001902:	d808      	bhi.n	8001916 <adjust_rotation+0x12e>
		start_pwm_update(FORWARD_SLOW, BACKWARD_SLOW, 500); // Move forward
 8001904:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001908:	f44f 612f 	mov.w	r1, #2800	@ 0xaf0
 800190c:	f640 401c 	movw	r0, #3100	@ 0xc1c
 8001910:	f7ff fe78 	bl	8001604 <start_pwm_update>
	} else {
		// Otherwise, adjust rotation
		navigate_to_target();
	}
}
 8001914:	e001      	b.n	800191a <adjust_rotation+0x132>
		navigate_to_target();
 8001916:	f7ff fe97 	bl	8001648 <navigate_to_target>
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	f3af 8000 	nop.w
 8001928:	54442d18 	.word	0x54442d18
 800192c:	400921fb 	.word	0x400921fb
 8001930:	2000032c 	.word	0x2000032c
 8001934:	20000320 	.word	0x20000320
 8001938:	20000330 	.word	0x20000330
 800193c:	20000324 	.word	0x20000324
 8001940:	43340000 	.word	0x43340000
 8001944:	43b40000 	.word	0x43b40000
 8001948:	c3340000 	.word	0xc3340000
 800194c:	20000328 	.word	0x20000328

08001950 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001954:	f000 fcca 	bl	80022ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001958:	f000 f854 	bl	8001a04 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800195c:	f7ff fbe2 	bl	8001124 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001960:	f000 fa08 	bl	8001d74 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001964:	f000 faa6 	bl	8001eb4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001968:	f000 fc1c 	bl	80021a4 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 800196c:	f7ff fc50 	bl	8001210 <MX_I2C1_Init>
	MX_ADC1_Init();
 8001970:	f7ff fb40 	bl	8000ff4 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001974:	f000 fb14 	bl	8001fa0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800197e:	4819      	ldr	r0, [pc, #100]	@ (80019e4 <main+0x94>)
 8001980:	f001 fad4 	bl	8002f2c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001984:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001988:	f000 fd22 	bl	80023d0 <HAL_Delay>
	 }
	 Gz_mean /= CALIB;
	 Ax_mean /= CALIB;
	 Ay_mean /= CALIB;*/

	HAL_TIM_PWM_Init(&htim1);
 800198c:	4816      	ldr	r0, [pc, #88]	@ (80019e8 <main+0x98>)
 800198e:	f002 f98a 	bl	8003ca6 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8001992:	4816      	ldr	r0, [pc, #88]	@ (80019ec <main+0x9c>)
 8001994:	f002 f987 	bl	8003ca6 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001998:	2100      	movs	r1, #0
 800199a:	4813      	ldr	r0, [pc, #76]	@ (80019e8 <main+0x98>)
 800199c:	f002 f9dc 	bl	8003d58 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80019a0:	2108      	movs	r1, #8
 80019a2:	4812      	ldr	r0, [pc, #72]	@ (80019ec <main+0x9c>)
 80019a4:	f002 f9d8 	bl	8003d58 <HAL_TIM_PWM_Start>
	TIM1->CR1 = 0x01;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <main+0xa0>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
	TIM2->CR1 = 0x01;
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer)); // interrupt based
 80019b6:	2201      	movs	r2, #1
 80019b8:	490e      	ldr	r1, [pc, #56]	@ (80019f4 <main+0xa4>)
 80019ba:	480f      	ldr	r0, [pc, #60]	@ (80019f8 <main+0xa8>)
 80019bc:	f003 f91a 	bl	8004bf4 <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019c6:	4807      	ldr	r0, [pc, #28]	@ (80019e4 <main+0x94>)
 80019c8:	f001 fab0 	bl	8002f2c <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (rx_complete) {
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <main+0xac>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0fb      	beq.n	80019cc <main+0x7c>
			execute_command(rx_buffer); // Process the command
 80019d4:	480a      	ldr	r0, [pc, #40]	@ (8001a00 <main+0xb0>)
 80019d6:	f7ff fd71 	bl	80014bc <execute_command>
			rx_complete = 0; // Reset the completion flag
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <main+0xac>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
		if (rx_complete) {
 80019e0:	e7f4      	b.n	80019cc <main+0x7c>
 80019e2:	bf00      	nop
 80019e4:	40020800 	.word	0x40020800
 80019e8:	20000344 	.word	0x20000344
 80019ec:	2000038c 	.word	0x2000038c
 80019f0:	40010000 	.word	0x40010000
 80019f4:	2000031c 	.word	0x2000031c
 80019f8:	2000041c 	.word	0x2000041c
 80019fc:	20000318 	.word	0x20000318
 8001a00:	200002b0 	.word	0x200002b0

08001a04 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b094      	sub	sp, #80	@ 0x50
 8001a08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001a0a:	f107 0320 	add.w	r3, r7, #32
 8001a0e:	2230      	movs	r2, #48	@ 0x30
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f004 ffcf 	bl	80069b6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <SystemClock_Config+0xd0>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	4a28      	ldr	r2, [pc, #160]	@ (8001ad4 <SystemClock_Config+0xd0>)
 8001a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a38:	4b26      	ldr	r3, [pc, #152]	@ (8001ad4 <SystemClock_Config+0xd0>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a44:	2300      	movs	r3, #0
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <SystemClock_Config+0xd4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a50:	4a21      	ldr	r2, [pc, #132]	@ (8001ad8 <SystemClock_Config+0xd4>)
 8001a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <SystemClock_Config+0xd4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 20;
 8001a78:	2314      	movs	r3, #20
 8001a7a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 128;
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a80:	2302      	movs	r3, #2
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a84:	2304      	movs	r3, #4
 8001a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 fbab 	bl	80031e8 <HAL_RCC_OscConfig>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <SystemClock_Config+0x98>
		Error_Handler();
 8001a98:	f000 f820 	bl	8001adc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aac:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 fe0d 	bl	80036d8 <HAL_RCC_ClockConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0xc4>
		Error_Handler();
 8001ac4:	f000 f80a 	bl	8001adc <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001ac8:	f001 feec 	bl	80038a4 <HAL_RCC_EnableCSS>
}
 8001acc:	bf00      	nop
 8001ace:	3750      	adds	r7, #80	@ 0x50
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40007000 	.word	0x40007000

08001adc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <Error_Handler+0x8>

08001ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <HAL_MspInit+0x4c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b34 <HAL_MspInit+0x4c>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001afe:	4b0d      	ldr	r3, [pc, #52]	@ (8001b34 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_MspInit+0x4c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	4a08      	ldr	r2, [pc, #32]	@ (8001b34 <HAL_MspInit+0x4c>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001b3c:	f001 ffb8 	bl	8003ab0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <NMI_Handler+0x8>

08001b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <MemManage_Handler+0x4>

08001b54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <BusFault_Handler+0x4>

08001b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <UsageFault_Handler+0x4>

08001b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b92:	f000 fbfd 	bl	8002390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ba0:	4802      	ldr	r0, [pc, #8]	@ (8001bac <TIM3_IRQHandler+0x10>)
 8001ba2:	f002 f989 	bl	8003eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200003d4 	.word	0x200003d4

08001bb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <USART1_IRQHandler+0x10>)
 8001bb6:	f003 f843 	bl	8004c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000041c 	.word	0x2000041c

08001bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_kill>:

int _kill(int pid, int sig)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bde:	f004 ff4f 	bl	8006a80 <__errno>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2216      	movs	r2, #22
 8001be6:	601a      	str	r2, [r3, #0]
  return -1;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_exit>:

void _exit (int status)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ffe7 	bl	8001bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c06:	bf00      	nop
 8001c08:	e7fd      	b.n	8001c06 <_exit+0x12>

08001c0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e00a      	b.n	8001c32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c1c:	f3af 8000 	nop.w
 8001c20:	4601      	mov	r1, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	60ba      	str	r2, [r7, #8]
 8001c28:	b2ca      	uxtb	r2, r1
 8001c2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	dbf0      	blt.n	8001c1c <_read+0x12>
  }

  return len;
 8001c3a:	687b      	ldr	r3, [r7, #4]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e009      	b.n	8001c6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	60ba      	str	r2, [r7, #8]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbf1      	blt.n	8001c56 <_write+0x12>
  }
  return len;
 8001c72:	687b      	ldr	r3, [r7, #4]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_close>:

int _close(int file)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ca4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_isatty>:

int _isatty(int file)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	@ (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	@ (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f004 feb4 	bl	8006a80 <__errno>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <_sbrk+0x64>)
 8001d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20010000 	.word	0x20010000
 8001d44:	00000400 	.word	0x00000400
 8001d48:	20000340 	.word	0x20000340
 8001d4c:	200005b8 	.word	0x200005b8

08001d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <SystemInit+0x20>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <SystemInit+0x20>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b096      	sub	sp, #88	@ 0x58
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2220      	movs	r2, #32
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f004 fe02 	bl	80069b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001db2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001db4:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb0 <MX_TIM1_Init+0x13c>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8001db8:	4b3c      	ldr	r3, [pc, #240]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001dba:	2227      	movs	r2, #39	@ 0x27
 8001dbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001dc4:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001dc6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001dca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dd2:	4b36      	ldr	r3, [pc, #216]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dde:	4833      	ldr	r0, [pc, #204]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001de0:	f001 fe81 	bl	8003ae6 <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001dea:	f7ff fe77 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001df4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001df8:	4619      	mov	r1, r3
 8001dfa:	482c      	ldr	r0, [pc, #176]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001dfc:	f002 fa0e 	bl	800421c <HAL_TIM_ConfigClockSource>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e06:	f7ff fe69 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e0a:	4828      	ldr	r0, [pc, #160]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001e0c:	f001 ff4b 	bl	8003ca6 <HAL_TIM_PWM_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e16:	f7ff fe61 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e26:	4619      	mov	r1, r3
 8001e28:	4820      	ldr	r0, [pc, #128]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001e2a:	f002 fdbf 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e34:	f7ff fe52 	bl	8001adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e38:	2360      	movs	r3, #96	@ 0x60
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e44:	2300      	movs	r3, #0
 8001e46:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e58:	2200      	movs	r2, #0
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4813      	ldr	r0, [pc, #76]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001e5e:	f002 f91b 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e68:	f7ff fe38 	bl	8001adc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4807      	ldr	r0, [pc, #28]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001e90:	f002 fdfa 	bl	8004a88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001e9a:	f7ff fe1f 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e9e:	4803      	ldr	r0, [pc, #12]	@ (8001eac <MX_TIM1_Init+0x138>)
 8001ea0:	f000 f91e 	bl	80020e0 <HAL_TIM_MspPostInit>

}
 8001ea4:	bf00      	nop
 8001ea6:	3758      	adds	r7, #88	@ 0x58
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000344 	.word	0x20000344
 8001eb0:	40010000 	.word	0x40010000

08001eb4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08e      	sub	sp, #56	@ 0x38
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec8:	f107 0320 	add.w	r3, r7, #32
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001ee6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8001eec:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001eee:	2227      	movs	r2, #39	@ 0x27
 8001ef0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001ef8:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001efa:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001efe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f0c:	4823      	ldr	r0, [pc, #140]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001f0e:	f001 fdea 	bl	8003ae6 <HAL_TIM_Base_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f18:	f7ff fde0 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f26:	4619      	mov	r1, r3
 8001f28:	481c      	ldr	r0, [pc, #112]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001f2a:	f002 f977 	bl	800421c <HAL_TIM_ConfigClockSource>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f34:	f7ff fdd2 	bl	8001adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f38:	4818      	ldr	r0, [pc, #96]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001f3a:	f001 feb4 	bl	8003ca6 <HAL_TIM_PWM_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f44:	f7ff fdca 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	4619      	mov	r1, r3
 8001f56:	4811      	ldr	r0, [pc, #68]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001f58:	f002 fd28 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f62:	f7ff fdbb 	bl	8001adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f66:	2360      	movs	r3, #96	@ 0x60
 8001f68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2208      	movs	r2, #8
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4807      	ldr	r0, [pc, #28]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001f7e:	f002 f88b 	bl	8004098 <HAL_TIM_PWM_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f88:	f7ff fda8 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f8c:	4803      	ldr	r0, [pc, #12]	@ (8001f9c <MX_TIM2_Init+0xe8>)
 8001f8e:	f000 f8a7 	bl	80020e0 <HAL_TIM_MspPostInit>

}
 8001f92:	bf00      	nop
 8001f94:	3738      	adds	r7, #56	@ 0x38
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000038c 	.word	0x2000038c

08001fa0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
//
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <MX_TIM3_Init+0x98>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fd0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001fd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fe2:	4814      	ldr	r0, [pc, #80]	@ (8002034 <MX_TIM3_Init+0x94>)
 8001fe4:	f001 fd7f 	bl	8003ae6 <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001fee:	f7ff fd75 	bl	8001adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	480d      	ldr	r0, [pc, #52]	@ (8002034 <MX_TIM3_Init+0x94>)
 8002000:	f002 f90c 	bl	800421c <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800200a:	f7ff fd67 	bl	8001adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002016:	463b      	mov	r3, r7
 8002018:	4619      	mov	r1, r3
 800201a:	4806      	ldr	r0, [pc, #24]	@ (8002034 <MX_TIM3_Init+0x94>)
 800201c:	f002 fcc6 	bl	80049ac <HAL_TIMEx_MasterConfigSynchronization>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002026:	f7ff fd59 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//
  /* USER CODE END TIM3_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200003d4 	.word	0x200003d4
 8002038:	40000400 	.word	0x40000400

0800203c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a22      	ldr	r2, [pc, #136]	@ (80020d4 <HAL_TIM_Base_MspInit+0x98>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d10e      	bne.n	800206c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	4b21      	ldr	r3, [pc, #132]	@ (80020d8 <HAL_TIM_Base_MspInit+0x9c>)
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	4a20      	ldr	r2, [pc, #128]	@ (80020d8 <HAL_TIM_Base_MspInit+0x9c>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6453      	str	r3, [r2, #68]	@ 0x44
 800205e:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <HAL_TIM_Base_MspInit+0x9c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800206a:	e02e      	b.n	80020ca <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002074:	d10e      	bne.n	8002094 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_TIM_Base_MspInit+0x9c>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <HAL_TIM_Base_MspInit+0x9c>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6413      	str	r3, [r2, #64]	@ 0x40
 8002086:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <HAL_TIM_Base_MspInit+0x9c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
}
 8002092:	e01a      	b.n	80020ca <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_TIM_Base_MspInit+0xa0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d115      	bne.n	80020ca <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <HAL_TIM_Base_MspInit+0x9c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	4a0c      	ldr	r2, [pc, #48]	@ (80020d8 <HAL_TIM_Base_MspInit+0x9c>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <HAL_TIM_Base_MspInit+0x9c>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	201d      	movs	r0, #29
 80020c0:	f000 fce7 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020c4:	201d      	movs	r0, #29
 80020c6:	f000 fd00 	bl	8002aca <HAL_NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40000400 	.word	0x40000400

080020e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a25      	ldr	r2, [pc, #148]	@ (8002194 <HAL_TIM_MspPostInit+0xb4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d11f      	bne.n	8002142 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <HAL_TIM_MspPostInit+0xb8>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	4a23      	ldr	r2, [pc, #140]	@ (8002198 <HAL_TIM_MspPostInit+0xb8>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6313      	str	r3, [r2, #48]	@ 0x30
 8002112:	4b21      	ldr	r3, [pc, #132]	@ (8002198 <HAL_TIM_MspPostInit+0xb8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800211e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002124:	2302      	movs	r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002130:	2301      	movs	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4619      	mov	r1, r3
 800213a:	4818      	ldr	r0, [pc, #96]	@ (800219c <HAL_TIM_MspPostInit+0xbc>)
 800213c:	f000 fd72 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002140:	e023      	b.n	800218a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214a:	d11e      	bne.n	800218a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <HAL_TIM_MspPostInit+0xb8>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	4a10      	ldr	r2, [pc, #64]	@ (8002198 <HAL_TIM_MspPostInit+0xb8>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	6313      	str	r3, [r2, #48]	@ 0x30
 800215c:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <HAL_TIM_MspPostInit+0xb8>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800216c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800217a:	2301      	movs	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4806      	ldr	r0, [pc, #24]	@ (80021a0 <HAL_TIM_MspPostInit+0xc0>)
 8002186:	f000 fd4d 	bl	8002c24 <HAL_GPIO_Init>
}
 800218a:	bf00      	nop
 800218c:	3728      	adds	r7, #40	@ 0x28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40010000 	.word	0x40010000
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000
 80021a0:	40020400 	.word	0x40020400

080021a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a8:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <MX_USART1_UART_Init+0x4c>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <MX_USART1_UART_Init+0x50>)
 80021ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <MX_USART1_UART_Init+0x4c>)
 80021b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80021b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <MX_USART1_UART_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	@ (80021f0 <MX_USART1_UART_Init+0x4c>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <MX_USART1_UART_Init+0x4c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <MX_USART1_UART_Init+0x4c>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <MX_USART1_UART_Init+0x4c>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <MX_USART1_UART_Init+0x4c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021da:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <MX_USART1_UART_Init+0x4c>)
 80021dc:	f002 fcba 	bl	8004b54 <HAL_UART_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021e6:	f7ff fc79 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000041c 	.word	0x2000041c
 80021f4:	40011000 	.word	0x40011000

080021f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	@ 0x28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1d      	ldr	r2, [pc, #116]	@ (800228c <HAL_UART_MspInit+0x94>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d134      	bne.n	8002284 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <HAL_UART_MspInit+0x98>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	4a1b      	ldr	r2, [pc, #108]	@ (8002290 <HAL_UART_MspInit+0x98>)
 8002224:	f043 0310 	orr.w	r3, r3, #16
 8002228:	6453      	str	r3, [r2, #68]	@ 0x44
 800222a:	4b19      	ldr	r3, [pc, #100]	@ (8002290 <HAL_UART_MspInit+0x98>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_UART_MspInit+0x98>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a14      	ldr	r2, [pc, #80]	@ (8002290 <HAL_UART_MspInit+0x98>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_UART_MspInit+0x98>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002252:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002264:	2307      	movs	r3, #7
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	4809      	ldr	r0, [pc, #36]	@ (8002294 <HAL_UART_MspInit+0x9c>)
 8002270:	f000 fcd8 	bl	8002c24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	2025      	movs	r0, #37	@ 0x25
 800227a:	f000 fc0a 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800227e:	2025      	movs	r0, #37	@ 0x25
 8002280:	f000 fc23 	bl	8002aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	@ 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40011000 	.word	0x40011000
 8002290:	40023800 	.word	0x40023800
 8002294:	40020000 	.word	0x40020000

08002298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800229c:	480d      	ldr	r0, [pc, #52]	@ (80022d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800229e:	490e      	ldr	r1, [pc, #56]	@ (80022d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a0:	4a0e      	ldr	r2, [pc, #56]	@ (80022dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a4:	e002      	b.n	80022ac <LoopCopyDataInit>

080022a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022aa:	3304      	adds	r3, #4

080022ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b0:	d3f9      	bcc.n	80022a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b2:	4a0b      	ldr	r2, [pc, #44]	@ (80022e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b4:	4c0b      	ldr	r4, [pc, #44]	@ (80022e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b8:	e001      	b.n	80022be <LoopFillZerobss>

080022ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022bc:	3204      	adds	r2, #4

080022be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c0:	d3fb      	bcc.n	80022ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022c2:	f7ff fd45 	bl	8001d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c6:	f004 fbe1 	bl	8006a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ca:	f7ff fb41 	bl	8001950 <main>
  bx  lr    
 80022ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80022dc:	0800b174 	.word	0x0800b174
  ldr r2, =_sbss
 80022e0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80022e4:	200005b4 	.word	0x200005b4

080022e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f0:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_Init+0x40>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <HAL_Init+0x40>)
 8002302:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a07      	ldr	r2, [pc, #28]	@ (800232c <HAL_Init+0x40>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f000 fbb1 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231a:	200f      	movs	r0, #15
 800231c:	f000 f808 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002320:	f7ff fbe2 	bl	8001ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00

08002330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002338:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_InitTick+0x54>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <HAL_InitTick+0x58>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002346:	fbb3 f3f1 	udiv	r3, r3, r1
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fbc9 	bl	8002ae6 <HAL_SYSTICK_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e00e      	b.n	800237c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b0f      	cmp	r3, #15
 8002362:	d80a      	bhi.n	800237a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002364:	2200      	movs	r2, #0
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	f000 fb91 	bl	8002a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002370:	4a06      	ldr	r2, [pc, #24]	@ (800238c <HAL_InitTick+0x5c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	e000      	b.n	800237c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000024 	.word	0x20000024
 8002388:	2000002c 	.word	0x2000002c
 800238c:	20000028 	.word	0x20000028

08002390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002394:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_IncTick+0x20>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_IncTick+0x24>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <HAL_IncTick+0x24>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	2000002c 	.word	0x2000002c
 80023b4:	20000464 	.word	0x20000464

080023b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return uwTick;
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <HAL_GetTick+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000464 	.word	0x20000464

080023d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023d8:	f7ff ffee 	bl	80023b8 <HAL_GetTick>
 80023dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d005      	beq.n	80023f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_Delay+0x44>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4413      	add	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023f6:	bf00      	nop
 80023f8:	f7ff ffde 	bl	80023b8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d8f7      	bhi.n	80023f8 <HAL_Delay+0x28>
  {
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000002c 	.word	0x2000002c

08002418 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e033      	b.n	8002496 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fe30 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d118      	bne.n	8002488 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800245e:	f023 0302 	bic.w	r3, r3, #2
 8002462:	f043 0202 	orr.w	r2, r3, #2
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f93a 	bl	80026e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	f043 0201 	orr.w	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
 8002486:	e001      	b.n	800248c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x1c>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e105      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x228>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	d925      	bls.n	8002518 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68d9      	ldr	r1, [r3, #12]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	4613      	mov	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4413      	add	r3, r2
 80024e0:	3b1e      	subs	r3, #30
 80024e2:	2207      	movs	r2, #7
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43da      	mvns	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	400a      	ands	r2, r1
 80024f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68d9      	ldr	r1, [r3, #12]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	4618      	mov	r0, r3
 8002504:	4603      	mov	r3, r0
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4403      	add	r3, r0
 800250a:	3b1e      	subs	r3, #30
 800250c:	409a      	lsls	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	e022      	b.n	800255e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6919      	ldr	r1, [r3, #16]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	2207      	movs	r2, #7
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	400a      	ands	r2, r1
 800253a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6919      	ldr	r1, [r3, #16]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	4603      	mov	r3, r0
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4403      	add	r3, r0
 8002554:	409a      	lsls	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b06      	cmp	r3, #6
 8002564:	d824      	bhi.n	80025b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	3b05      	subs	r3, #5
 8002578:	221f      	movs	r2, #31
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43da      	mvns	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	400a      	ands	r2, r1
 8002586:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	4618      	mov	r0, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	3b05      	subs	r3, #5
 80025a2:	fa00 f203 	lsl.w	r2, r0, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80025ae:	e04c      	b.n	800264a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d824      	bhi.n	8002602 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	3b23      	subs	r3, #35	@ 0x23
 80025ca:	221f      	movs	r2, #31
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43da      	mvns	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	400a      	ands	r2, r1
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3b23      	subs	r3, #35	@ 0x23
 80025f4:	fa00 f203 	lsl.w	r2, r0, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002600:	e023      	b.n	800264a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3b41      	subs	r3, #65	@ 0x41
 8002614:	221f      	movs	r2, #31
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	43da      	mvns	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	400a      	ands	r2, r1
 8002622:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	4618      	mov	r0, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	3b41      	subs	r3, #65	@ 0x41
 800263e:	fa00 f203 	lsl.w	r2, r0, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800264a:	4b22      	ldr	r3, [pc, #136]	@ (80026d4 <HAL_ADC_ConfigChannel+0x234>)
 800264c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a21      	ldr	r2, [pc, #132]	@ (80026d8 <HAL_ADC_ConfigChannel+0x238>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d109      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1cc>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b12      	cmp	r3, #18
 800265e:	d105      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <HAL_ADC_ConfigChannel+0x238>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d123      	bne.n	80026be <HAL_ADC_ConfigChannel+0x21e>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b10      	cmp	r3, #16
 800267c:	d003      	beq.n	8002686 <HAL_ADC_ConfigChannel+0x1e6>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b11      	cmp	r3, #17
 8002684:	d11b      	bne.n	80026be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b10      	cmp	r3, #16
 8002698:	d111      	bne.n	80026be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <HAL_ADC_ConfigChannel+0x23c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a10      	ldr	r2, [pc, #64]	@ (80026e0 <HAL_ADC_ConfigChannel+0x240>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	0c9a      	lsrs	r2, r3, #18
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f9      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40012300 	.word	0x40012300
 80026d8:	40012000 	.word	0x40012000
 80026dc:	20000024 	.word	0x20000024
 80026e0:	431bde83 	.word	0x431bde83

080026e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ec:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <ADC_Init+0x1f0>)
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	021a      	lsls	r2, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800273c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6899      	ldr	r1, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002776:	4a58      	ldr	r2, [pc, #352]	@ (80028d8 <ADC_Init+0x1f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800278a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6899      	ldr	r1, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6899      	ldr	r1, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e00f      	b.n	80027e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0202 	bic.w	r2, r2, #2
 80027f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6899      	ldr	r1, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
 80027fc:	005a      	lsls	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800281e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800282e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	3b01      	subs	r3, #1
 800283c:	035a      	lsls	r2, r3, #13
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e007      	b.n	8002858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002856:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	3b01      	subs	r3, #1
 8002874:	051a      	lsls	r2, r3, #20
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800288c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800289a:	025a      	lsls	r2, r3, #9
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6899      	ldr	r1, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	029a      	lsls	r2, r3, #10
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40012300 	.word	0x40012300
 80028d8:	0f000001 	.word	0x0f000001

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4907      	ldr	r1, [pc, #28]	@ (8002978 <__NVIC_EnableIRQ+0x38>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	e000e100 	.word	0xe000e100

0800297c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	6039      	str	r1, [r7, #0]
 8002986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	db0a      	blt.n	80029a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	b2da      	uxtb	r2, r3
 8002994:	490c      	ldr	r1, [pc, #48]	@ (80029c8 <__NVIC_SetPriority+0x4c>)
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	0112      	lsls	r2, r2, #4
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	440b      	add	r3, r1
 80029a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a4:	e00a      	b.n	80029bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	4908      	ldr	r1, [pc, #32]	@ (80029cc <__NVIC_SetPriority+0x50>)
 80029ac:	79fb      	ldrb	r3, [r7, #7]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	3b04      	subs	r3, #4
 80029b4:	0112      	lsls	r2, r2, #4
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	440b      	add	r3, r1
 80029ba:	761a      	strb	r2, [r3, #24]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000e100 	.word	0xe000e100
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	@ 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	bf28      	it	cs
 80029ee:	2304      	movcs	r3, #4
 80029f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3304      	adds	r3, #4
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d902      	bls.n	8002a00 <NVIC_EncodePriority+0x30>
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3b03      	subs	r3, #3
 80029fe:	e000      	b.n	8002a02 <NVIC_EncodePriority+0x32>
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	401a      	ands	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	43d9      	mvns	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	4313      	orrs	r3, r2
         );
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	@ 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a48:	d301      	bcc.n	8002a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <SysTick_Config+0x40>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a56:	210f      	movs	r1, #15
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f7ff ff8e 	bl	800297c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <SysTick_Config+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	@ (8002a78 <SysTick_Config+0x40>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff29 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff3e 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff8e 	bl	80029d0 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5d 	bl	800297c <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff31 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffa2 	bl	8002a38 <SysTick_Config>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b0c:	f7ff fc54 	bl	80023b8 <HAL_GetTick>
 8002b10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d008      	beq.n	8002b30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2280      	movs	r2, #128	@ 0x80
 8002b22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e052      	b.n	8002bd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0216 	bic.w	r2, r2, #22
 8002b3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d103      	bne.n	8002b60 <HAL_DMA_Abort+0x62>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0208 	bic.w	r2, r2, #8
 8002b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b80:	e013      	b.n	8002baa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b82:	f7ff fc19 	bl	80023b8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b05      	cmp	r3, #5
 8002b8e:	d90c      	bls.n	8002baa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2220      	movs	r2, #32
 8002b94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e015      	b.n	8002bd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e4      	bne.n	8002b82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbc:	223f      	movs	r2, #63	@ 0x3f
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2280      	movs	r2, #128	@ 0x80
 8002bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e00c      	b.n	8002c16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2205      	movs	r2, #5
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0201 	bic.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b089      	sub	sp, #36	@ 0x24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	e159      	b.n	8002ef4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	f040 8148 	bne.w	8002eee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d005      	beq.n	8002c76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d130      	bne.n	8002cd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	2203      	movs	r2, #3
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cac:	2201      	movs	r2, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 0201 	and.w	r2, r3, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d017      	beq.n	8002d14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d123      	bne.n	8002d68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	08da      	lsrs	r2, r3, #3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3208      	adds	r2, #8
 8002d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	220f      	movs	r2, #15
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3208      	adds	r2, #8
 8002d62:	69b9      	ldr	r1, [r7, #24]
 8002d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 0203 	and.w	r2, r3, #3
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a2 	beq.w	8002eee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b57      	ldr	r3, [pc, #348]	@ (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	4a56      	ldr	r2, [pc, #344]	@ (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dba:	4b54      	ldr	r3, [pc, #336]	@ (8002f0c <HAL_GPIO_Init+0x2e8>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dc6:	4a52      	ldr	r2, [pc, #328]	@ (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	089b      	lsrs	r3, r3, #2
 8002dcc:	3302      	adds	r3, #2
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a49      	ldr	r2, [pc, #292]	@ (8002f14 <HAL_GPIO_Init+0x2f0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d019      	beq.n	8002e26 <HAL_GPIO_Init+0x202>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a48      	ldr	r2, [pc, #288]	@ (8002f18 <HAL_GPIO_Init+0x2f4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_GPIO_Init+0x1fe>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a47      	ldr	r2, [pc, #284]	@ (8002f1c <HAL_GPIO_Init+0x2f8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00d      	beq.n	8002e1e <HAL_GPIO_Init+0x1fa>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a46      	ldr	r2, [pc, #280]	@ (8002f20 <HAL_GPIO_Init+0x2fc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d007      	beq.n	8002e1a <HAL_GPIO_Init+0x1f6>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a45      	ldr	r2, [pc, #276]	@ (8002f24 <HAL_GPIO_Init+0x300>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_GPIO_Init+0x1f2>
 8002e12:	2304      	movs	r3, #4
 8002e14:	e008      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e16:	2307      	movs	r3, #7
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e004      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_GPIO_Init+0x204>
 8002e26:	2300      	movs	r3, #0
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	f002 0203 	and.w	r2, r2, #3
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4093      	lsls	r3, r2
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e38:	4935      	ldr	r1, [pc, #212]	@ (8002f10 <HAL_GPIO_Init+0x2ec>)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e46:	4b38      	ldr	r3, [pc, #224]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4013      	ands	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e70:	4b2d      	ldr	r3, [pc, #180]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e94:	4a24      	ldr	r2, [pc, #144]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e9a:	4b23      	ldr	r3, [pc, #140]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f28 <HAL_GPIO_Init+0x304>)
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b0f      	cmp	r3, #15
 8002ef8:	f67f aea2 	bls.w	8002c40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3724      	adds	r7, #36	@ 0x24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40013800 	.word	0x40013800
 8002f14:	40020000 	.word	0x40020000
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40013c00 	.word	0x40013c00

08002f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f48:	e003      	b.n	8002f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	041a      	lsls	r2, r3, #16
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	619a      	str	r2, [r3, #24]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e12b      	b.n	80031ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fe f970 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	@ 0x24
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fc4:	f000 fd4c 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8002fc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a81      	ldr	r2, [pc, #516]	@ (80031d4 <HAL_I2C_Init+0x274>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d807      	bhi.n	8002fe4 <HAL_I2C_Init+0x84>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4a80      	ldr	r2, [pc, #512]	@ (80031d8 <HAL_I2C_Init+0x278>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	bf94      	ite	ls
 8002fdc:	2301      	movls	r3, #1
 8002fde:	2300      	movhi	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e006      	b.n	8002ff2 <HAL_I2C_Init+0x92>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4a7d      	ldr	r2, [pc, #500]	@ (80031dc <HAL_I2C_Init+0x27c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	bf94      	ite	ls
 8002fec:	2301      	movls	r3, #1
 8002fee:	2300      	movhi	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0e7      	b.n	80031ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a78      	ldr	r2, [pc, #480]	@ (80031e0 <HAL_I2C_Init+0x280>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	0c9b      	lsrs	r3, r3, #18
 8003004:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a6a      	ldr	r2, [pc, #424]	@ (80031d4 <HAL_I2C_Init+0x274>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d802      	bhi.n	8003034 <HAL_I2C_Init+0xd4>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	3301      	adds	r3, #1
 8003032:	e009      	b.n	8003048 <HAL_I2C_Init+0xe8>
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	4a69      	ldr	r2, [pc, #420]	@ (80031e4 <HAL_I2C_Init+0x284>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	3301      	adds	r3, #1
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	430b      	orrs	r3, r1
 800304e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800305a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	495c      	ldr	r1, [pc, #368]	@ (80031d4 <HAL_I2C_Init+0x274>)
 8003064:	428b      	cmp	r3, r1
 8003066:	d819      	bhi.n	800309c <HAL_I2C_Init+0x13c>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e59      	subs	r1, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fbb1 f3f3 	udiv	r3, r1, r3
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800307c:	400b      	ands	r3, r1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_I2C_Init+0x138>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003090:	3301      	adds	r3, #1
 8003092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003096:	e051      	b.n	800313c <HAL_I2C_Init+0x1dc>
 8003098:	2304      	movs	r3, #4
 800309a:	e04f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d111      	bne.n	80030c8 <HAL_I2C_Init+0x168>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1e58      	subs	r0, r3, #1
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6859      	ldr	r1, [r3, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	440b      	add	r3, r1
 80030b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b6:	3301      	adds	r3, #1
 80030b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e012      	b.n	80030ee <HAL_I2C_Init+0x18e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Init+0x196>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e022      	b.n	800313c <HAL_I2C_Init+0x1dc>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <HAL_I2C_Init+0x1bc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e58      	subs	r0, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	440b      	add	r3, r1
 800310c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003116:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800311a:	e00f      	b.n	800313c <HAL_I2C_Init+0x1dc>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	0099      	lsls	r1, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	6809      	ldr	r1, [r1, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800316a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6911      	ldr	r1, [r2, #16]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	430b      	orrs	r3, r1
 800317e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	000186a0 	.word	0x000186a0
 80031d8:	001e847f 	.word	0x001e847f
 80031dc:	003d08ff 	.word	0x003d08ff
 80031e0:	431bde83 	.word	0x431bde83
 80031e4:	10624dd3 	.word	0x10624dd3

080031e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e267      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d075      	beq.n	80032f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003206:	4b88      	ldr	r3, [pc, #544]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b04      	cmp	r3, #4
 8003210:	d00c      	beq.n	800322c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003212:	4b85      	ldr	r3, [pc, #532]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800321a:	2b08      	cmp	r3, #8
 800321c:	d112      	bne.n	8003244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321e:	4b82      	ldr	r3, [pc, #520]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003226:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800322a:	d10b      	bne.n	8003244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	4b7e      	ldr	r3, [pc, #504]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d05b      	beq.n	80032f0 <HAL_RCC_OscConfig+0x108>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d157      	bne.n	80032f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e242      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800324c:	d106      	bne.n	800325c <HAL_RCC_OscConfig+0x74>
 800324e:	4b76      	ldr	r3, [pc, #472]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a75      	ldr	r2, [pc, #468]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e01d      	b.n	8003298 <HAL_RCC_OscConfig+0xb0>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003264:	d10c      	bne.n	8003280 <HAL_RCC_OscConfig+0x98>
 8003266:	4b70      	ldr	r3, [pc, #448]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6f      	ldr	r2, [pc, #444]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 800326c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b6d      	ldr	r3, [pc, #436]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a6c      	ldr	r2, [pc, #432]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003278:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e00b      	b.n	8003298 <HAL_RCC_OscConfig+0xb0>
 8003280:	4b69      	ldr	r3, [pc, #420]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a68      	ldr	r2, [pc, #416]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	4b66      	ldr	r3, [pc, #408]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a65      	ldr	r2, [pc, #404]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d013      	beq.n	80032c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7ff f88a 	bl	80023b8 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7ff f886 	bl	80023b8 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	@ 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e207      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f0      	beq.n	80032a8 <HAL_RCC_OscConfig+0xc0>
 80032c6:	e014      	b.n	80032f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7ff f876 	bl	80023b8 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d0:	f7ff f872 	bl	80023b8 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	@ 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1f3      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e2:	4b51      	ldr	r3, [pc, #324]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0xe8>
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d063      	beq.n	80033c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330a:	4b47      	ldr	r3, [pc, #284]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003312:	2b08      	cmp	r3, #8
 8003314:	d11c      	bne.n	8003350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003316:	4b44      	ldr	r3, [pc, #272]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d116      	bne.n	8003350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	4b41      	ldr	r3, [pc, #260]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <HAL_RCC_OscConfig+0x152>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d001      	beq.n	800333a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e1c7      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333a:	4b3b      	ldr	r3, [pc, #236]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4937      	ldr	r1, [pc, #220]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334e:	e03a      	b.n	80033c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003358:	4b34      	ldr	r3, [pc, #208]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7ff f82b 	bl	80023b8 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003366:	f7ff f827 	bl	80023b8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e1a8      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003378:	4b2b      	ldr	r3, [pc, #172]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003384:	4b28      	ldr	r3, [pc, #160]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4925      	ldr	r1, [pc, #148]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
 8003398:	e015      	b.n	80033c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800339a:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_RCC_OscConfig+0x244>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7ff f80a 	bl	80023b8 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a8:	f7ff f806 	bl	80023b8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e187      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d036      	beq.n	8003440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d016      	beq.n	8003408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <HAL_RCC_OscConfig+0x248>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe ffea 	bl	80023b8 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fe ffe6 	bl	80023b8 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e167      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <HAL_RCC_OscConfig+0x240>)
 80033fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0x200>
 8003406:	e01b      	b.n	8003440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003408:	4b09      	ldr	r3, [pc, #36]	@ (8003430 <HAL_RCC_OscConfig+0x248>)
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800340e:	f7fe ffd3 	bl	80023b8 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003414:	e00e      	b.n	8003434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003416:	f7fe ffcf 	bl	80023b8 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d907      	bls.n	8003434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e150      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
 8003428:	40023800 	.word	0x40023800
 800342c:	42470000 	.word	0x42470000
 8003430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	4b88      	ldr	r3, [pc, #544]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ea      	bne.n	8003416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8097 	beq.w	800357c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003452:	4b81      	ldr	r3, [pc, #516]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10f      	bne.n	800347e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	4b7d      	ldr	r3, [pc, #500]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	4a7c      	ldr	r2, [pc, #496]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	@ 0x40
 800346e:	4b7a      	ldr	r3, [pc, #488]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	4b77      	ldr	r3, [pc, #476]	@ (800365c <HAL_RCC_OscConfig+0x474>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d118      	bne.n	80034bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800348a:	4b74      	ldr	r3, [pc, #464]	@ (800365c <HAL_RCC_OscConfig+0x474>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a73      	ldr	r2, [pc, #460]	@ (800365c <HAL_RCC_OscConfig+0x474>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003496:	f7fe ff8f 	bl	80023b8 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349e:	f7fe ff8b 	bl	80023b8 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e10c      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b0:	4b6a      	ldr	r3, [pc, #424]	@ (800365c <HAL_RCC_OscConfig+0x474>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x2ea>
 80034c4:	4b64      	ldr	r3, [pc, #400]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	4a63      	ldr	r2, [pc, #396]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d0:	e01c      	b.n	800350c <HAL_RCC_OscConfig+0x324>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x30c>
 80034da:	4b5f      	ldr	r3, [pc, #380]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034de:	4a5e      	ldr	r2, [pc, #376]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ea:	4a5b      	ldr	r2, [pc, #364]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0x324>
 80034f4:	4b58      	ldr	r3, [pc, #352]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f8:	4a57      	ldr	r2, [pc, #348]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003500:	4b55      	ldr	r3, [pc, #340]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003504:	4a54      	ldr	r2, [pc, #336]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003506:	f023 0304 	bic.w	r3, r3, #4
 800350a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d015      	beq.n	8003540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003514:	f7fe ff50 	bl	80023b8 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fe ff4c 	bl	80023b8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0cb      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	4b49      	ldr	r3, [pc, #292]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0ee      	beq.n	800351c <HAL_RCC_OscConfig+0x334>
 800353e:	e014      	b.n	800356a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003540:	f7fe ff3a 	bl	80023b8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7fe ff36 	bl	80023b8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e0b5      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355e:	4b3e      	ldr	r3, [pc, #248]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ee      	bne.n	8003548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800356a:	7dfb      	ldrb	r3, [r7, #23]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d105      	bne.n	800357c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003570:	4b39      	ldr	r3, [pc, #228]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	4a38      	ldr	r2, [pc, #224]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800357a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80a1 	beq.w	80036c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003586:	4b34      	ldr	r3, [pc, #208]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b08      	cmp	r3, #8
 8003590:	d05c      	beq.n	800364c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d141      	bne.n	800361e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359a:	4b31      	ldr	r3, [pc, #196]	@ (8003660 <HAL_RCC_OscConfig+0x478>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe ff0a 	bl	80023b8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a8:	f7fe ff06 	bl	80023b8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e087      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ba:	4b27      	ldr	r3, [pc, #156]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69da      	ldr	r2, [r3, #28]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	019b      	lsls	r3, r3, #6
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	3b01      	subs	r3, #1
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	491b      	ldr	r1, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <HAL_RCC_OscConfig+0x478>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f6:	f7fe fedf 	bl	80023b8 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe fedb 	bl	80023b8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e05c      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003610:	4b11      	ldr	r3, [pc, #68]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x416>
 800361c:	e054      	b.n	80036c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361e:	4b10      	ldr	r3, [pc, #64]	@ (8003660 <HAL_RCC_OscConfig+0x478>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fe fec8 	bl	80023b8 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362c:	f7fe fec4 	bl	80023b8 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e045      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_RCC_OscConfig+0x470>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x444>
 800364a:	e03d      	b.n	80036c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d107      	bne.n	8003664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e038      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
 8003658:	40023800 	.word	0x40023800
 800365c:	40007000 	.word	0x40007000
 8003660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <HAL_RCC_OscConfig+0x4ec>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d028      	beq.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d121      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d11a      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003694:	4013      	ands	r3, r2
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800369a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800369c:	4293      	cmp	r3, r2
 800369e:	d111      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	085b      	lsrs	r3, r3, #1
 80036ac:	3b01      	subs	r3, #1
 80036ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800

080036d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0cc      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ec:	4b68      	ldr	r3, [pc, #416]	@ (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d90c      	bls.n	8003714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b65      	ldr	r3, [pc, #404]	@ (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b63      	ldr	r3, [pc, #396]	@ (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0b8      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d020      	beq.n	8003762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800372c:	4b59      	ldr	r3, [pc, #356]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a58      	ldr	r2, [pc, #352]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003744:	4b53      	ldr	r3, [pc, #332]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a52      	ldr	r2, [pc, #328]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800374e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003750:	4b50      	ldr	r3, [pc, #320]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	494d      	ldr	r1, [pc, #308]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d044      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b47      	ldr	r3, [pc, #284]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d119      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e07f      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d003      	beq.n	8003796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003792:	2b03      	cmp	r3, #3
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003796:	4b3f      	ldr	r3, [pc, #252]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e06f      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e067      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037b6:	4b37      	ldr	r3, [pc, #220]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4934      	ldr	r1, [pc, #208]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c8:	f7fe fdf6 	bl	80023b8 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fe fdf2 	bl	80023b8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e04f      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 020c 	and.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1eb      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f8:	4b25      	ldr	r3, [pc, #148]	@ (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d20c      	bcs.n	8003820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003806:	4b22      	ldr	r3, [pc, #136]	@ (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b20      	ldr	r3, [pc, #128]	@ (8003890 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e032      	b.n	8003886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800382c:	4b19      	ldr	r3, [pc, #100]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4916      	ldr	r1, [pc, #88]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0308 	and.w	r3, r3, #8
 8003846:	2b00      	cmp	r3, #0
 8003848:	d009      	beq.n	800385e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800384a:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	490e      	ldr	r1, [pc, #56]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800385e:	f000 f82d 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8003862:	4602      	mov	r2, r0
 8003864:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	091b      	lsrs	r3, r3, #4
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	490a      	ldr	r1, [pc, #40]	@ (8003898 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	5ccb      	ldrb	r3, [r1, r3]
 8003872:	fa22 f303 	lsr.w	r3, r2, r3
 8003876:	4a09      	ldr	r2, [pc, #36]	@ (800389c <HAL_RCC_ClockConfig+0x1c4>)
 8003878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800387a:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fe fd56 	bl	8002330 <HAL_InitTick>

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023c00 	.word	0x40023c00
 8003894:	40023800 	.word	0x40023800
 8003898:	0800acc8 	.word	0x0800acc8
 800389c:	20000024 	.word	0x20000024
 80038a0:	20000028 	.word	0x20000028

080038a4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80038a8:	4b03      	ldr	r3, [pc, #12]	@ (80038b8 <HAL_RCC_EnableCSS+0x14>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	4247004c 	.word	0x4247004c

080038bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c0:	b090      	sub	sp, #64	@ 0x40
 80038c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038c8:	2300      	movs	r3, #0
 80038ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038cc:	2300      	movs	r3, #0
 80038ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d4:	4b59      	ldr	r3, [pc, #356]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d00d      	beq.n	80038fc <HAL_RCC_GetSysClockFreq+0x40>
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	f200 80a1 	bhi.w	8003a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ee:	e09b      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f0:	4b53      	ldr	r3, [pc, #332]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80038f2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80038f4:	e09b      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038f6:	4b53      	ldr	r3, [pc, #332]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038fa:	e098      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038fc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003904:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003906:	4b4d      	ldr	r3, [pc, #308]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d028      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003912:	4b4a      	ldr	r3, [pc, #296]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	099b      	lsrs	r3, r3, #6
 8003918:	2200      	movs	r2, #0
 800391a:	623b      	str	r3, [r7, #32]
 800391c:	627a      	str	r2, [r7, #36]	@ 0x24
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003924:	2100      	movs	r1, #0
 8003926:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003928:	fb03 f201 	mul.w	r2, r3, r1
 800392c:	2300      	movs	r3, #0
 800392e:	fb00 f303 	mul.w	r3, r0, r3
 8003932:	4413      	add	r3, r2
 8003934:	4a43      	ldr	r2, [pc, #268]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8003936:	fba0 1202 	umull	r1, r2, r0, r2
 800393a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800393c:	460a      	mov	r2, r1
 800393e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003942:	4413      	add	r3, r2
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003948:	2200      	movs	r2, #0
 800394a:	61bb      	str	r3, [r7, #24]
 800394c:	61fa      	str	r2, [r7, #28]
 800394e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003956:	f7fd f99f 	bl	8000c98 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4613      	mov	r3, r2
 8003960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003962:	e053      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003964:	4b35      	ldr	r3, [pc, #212]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	099b      	lsrs	r3, r3, #6
 800396a:	2200      	movs	r2, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	617a      	str	r2, [r7, #20]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003976:	f04f 0b00 	mov.w	fp, #0
 800397a:	4652      	mov	r2, sl
 800397c:	465b      	mov	r3, fp
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	0159      	lsls	r1, r3, #5
 8003988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398c:	0150      	lsls	r0, r2, #5
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	ebb2 080a 	subs.w	r8, r2, sl
 8003996:	eb63 090b 	sbc.w	r9, r3, fp
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039ae:	ebb2 0408 	subs.w	r4, r2, r8
 80039b2:	eb63 0509 	sbc.w	r5, r3, r9
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	00eb      	lsls	r3, r5, #3
 80039c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039c4:	00e2      	lsls	r2, r4, #3
 80039c6:	4614      	mov	r4, r2
 80039c8:	461d      	mov	r5, r3
 80039ca:	eb14 030a 	adds.w	r3, r4, sl
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	eb45 030b 	adc.w	r3, r5, fp
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039e2:	4629      	mov	r1, r5
 80039e4:	028b      	lsls	r3, r1, #10
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ec:	4621      	mov	r1, r4
 80039ee:	028a      	lsls	r2, r1, #10
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f6:	2200      	movs	r2, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	60fa      	str	r2, [r7, #12]
 80039fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a00:	f7fd f94a 	bl	8000c98 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	3301      	adds	r3, #1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3740      	adds	r7, #64	@ 0x40
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	017d7840 	.word	0x017d7840

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	@ (8003a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000024 	.word	0x20000024

08003a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a64:	f7ff fff0 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0a9b      	lsrs	r3, r3, #10
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	@ (8003a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	0800acd8 	.word	0x0800acd8

08003a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a8c:	f7ff ffdc 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0b5b      	lsrs	r3, r3, #13
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	@ (8003aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0800acd8 	.word	0x0800acd8

08003ab0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003ab4:	4b06      	ldr	r3, [pc, #24]	@ (8003ad0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abc:	2b80      	cmp	r3, #128	@ 0x80
 8003abe:	d104      	bne.n	8003aca <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003ac0:	f000 f80a 	bl	8003ad8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003ac6:	2280      	movs	r2, #128	@ 0x80
 8003ac8:	701a      	strb	r2, [r3, #0]
  }
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	4002380e 	.word	0x4002380e

08003ad8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e041      	b.n	8003b7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fe fa95 	bl	800203c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	4619      	mov	r1, r3
 8003b24:	4610      	mov	r0, r2
 8003b26:	f000 fc69 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d001      	beq.n	8003b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e044      	b.n	8003c26 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c34 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc6:	d013      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8003c38 <HAL_TIM_Base_Start_IT+0xb4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a19      	ldr	r2, [pc, #100]	@ (8003c3c <HAL_TIM_Base_Start_IT+0xb8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <HAL_TIM_Base_Start_IT+0xbc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_TIM_Base_Start_IT+0x6c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a16      	ldr	r2, [pc, #88]	@ (8003c44 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d111      	bne.n	8003c14 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d010      	beq.n	8003c24 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c12:	e007      	b.n	8003c24 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40010000 	.word	0x40010000
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800
 8003c40:	40000c00 	.word	0x40000c00
 8003c44:	40014000 	.word	0x40014000

08003c48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a1a      	ldr	r2, [r3, #32]
 8003c66:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10f      	bne.n	8003c90 <HAL_TIM_Base_Stop_IT+0x48>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a1a      	ldr	r2, [r3, #32]
 8003c76:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_TIM_Base_Stop_IT+0x48>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e041      	b.n	8003d3c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d106      	bne.n	8003cd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f839 	bl	8003d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f000 fb89 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_TIM_PWM_Start+0x24>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e022      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x6a>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d109      	bne.n	8003d96 <HAL_TIM_PWM_Start+0x3e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	bf14      	ite	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	2300      	moveq	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	e015      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x6a>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d109      	bne.n	8003db0 <HAL_TIM_PWM_Start+0x58>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e008      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x6a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e068      	b.n	8003e9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Start+0x82>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd8:	e013      	b.n	8003e02 <HAL_TIM_PWM_Start+0xaa>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_PWM_Start+0x92>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003de8:	e00b      	b.n	8003e02 <HAL_TIM_PWM_Start+0xaa>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_PWM_Start+0xa2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003df8:	e003      	b.n	8003e02 <HAL_TIM_PWM_Start+0xaa>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2201      	movs	r2, #1
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fda8 	bl	8004960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a23      	ldr	r2, [pc, #140]	@ (8003ea4 <HAL_TIM_PWM_Start+0x14c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d107      	bne.n	8003e2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <HAL_TIM_PWM_Start+0x14c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d018      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e3c:	d013      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <HAL_TIM_PWM_Start+0x150>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00e      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a17      	ldr	r2, [pc, #92]	@ (8003eac <HAL_TIM_PWM_Start+0x154>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d009      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a16      	ldr	r2, [pc, #88]	@ (8003eb0 <HAL_TIM_PWM_Start+0x158>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <HAL_TIM_PWM_Start+0x15c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d111      	bne.n	8003e8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b06      	cmp	r3, #6
 8003e76:	d010      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e88:	e007      	b.n	8003e9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40014000 	.word	0x40014000

08003eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d020      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01b      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0202 	mvn.w	r2, #2
 8003eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa5b 	bl	80043be <HAL_TIM_IC_CaptureCallback>
 8003f08:	e005      	b.n	8003f16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fa4d 	bl	80043aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fa5e 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d020      	beq.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01b      	beq.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0204 	mvn.w	r2, #4
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa35 	bl	80043be <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa27 	bl	80043aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fa38 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d020      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0208 	mvn.w	r2, #8
 8003f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2204      	movs	r2, #4
 8003f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa0f 	bl	80043be <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e005      	b.n	8003fae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fa01 	bl	80043aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fa12 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d020      	beq.n	8004000 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01b      	beq.n	8004000 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0210 	mvn.w	r2, #16
 8003fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f9e9 	bl	80043be <HAL_TIM_IC_CaptureCallback>
 8003fec:	e005      	b.n	8003ffa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f9db 	bl	80043aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f9ec 	bl	80043d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00c      	beq.n	8004024 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0201 	mvn.w	r2, #1
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fd f9a6 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fd7c 	bl	8004b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9bd 	bl	80043e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0220 	mvn.w	r2, #32
 8004088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fd4e 	bl	8004b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0ae      	b.n	8004214 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b0c      	cmp	r3, #12
 80040c2:	f200 809f 	bhi.w	8004204 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040c6:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	08004101 	.word	0x08004101
 80040d0:	08004205 	.word	0x08004205
 80040d4:	08004205 	.word	0x08004205
 80040d8:	08004205 	.word	0x08004205
 80040dc:	08004141 	.word	0x08004141
 80040e0:	08004205 	.word	0x08004205
 80040e4:	08004205 	.word	0x08004205
 80040e8:	08004205 	.word	0x08004205
 80040ec:	08004183 	.word	0x08004183
 80040f0:	08004205 	.word	0x08004205
 80040f4:	08004205 	.word	0x08004205
 80040f8:	08004205 	.word	0x08004205
 80040fc:	080041c3 	.word	0x080041c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fa04 	bl	8004514 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0208 	orr.w	r2, r2, #8
 800411a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0204 	bic.w	r2, r2, #4
 800412a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6999      	ldr	r1, [r3, #24]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	619a      	str	r2, [r3, #24]
      break;
 800413e:	e064      	b.n	800420a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fa4a 	bl	80045e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800415a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800416a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6999      	ldr	r1, [r3, #24]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	021a      	lsls	r2, r3, #8
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	619a      	str	r2, [r3, #24]
      break;
 8004180:	e043      	b.n	800420a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68b9      	ldr	r1, [r7, #8]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fa95 	bl	80046b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69da      	ldr	r2, [r3, #28]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0208 	orr.w	r2, r2, #8
 800419c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0204 	bic.w	r2, r2, #4
 80041ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69d9      	ldr	r1, [r3, #28]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	61da      	str	r2, [r3, #28]
      break;
 80041c0:	e023      	b.n	800420a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fadf 	bl	800478c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69d9      	ldr	r1, [r3, #28]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	021a      	lsls	r2, r3, #8
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	61da      	str	r2, [r3, #28]
      break;
 8004202:	e002      	b.n	800420a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004212:	7dfb      	ldrb	r3, [r7, #23]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_TIM_ConfigClockSource+0x1c>
 8004234:	2302      	movs	r3, #2
 8004236:	e0b4      	b.n	80043a2 <HAL_TIM_ConfigClockSource+0x186>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800425e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004270:	d03e      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0xd4>
 8004272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004276:	f200 8087 	bhi.w	8004388 <HAL_TIM_ConfigClockSource+0x16c>
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427e:	f000 8086 	beq.w	800438e <HAL_TIM_ConfigClockSource+0x172>
 8004282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004286:	d87f      	bhi.n	8004388 <HAL_TIM_ConfigClockSource+0x16c>
 8004288:	2b70      	cmp	r3, #112	@ 0x70
 800428a:	d01a      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0xa6>
 800428c:	2b70      	cmp	r3, #112	@ 0x70
 800428e:	d87b      	bhi.n	8004388 <HAL_TIM_ConfigClockSource+0x16c>
 8004290:	2b60      	cmp	r3, #96	@ 0x60
 8004292:	d050      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0x11a>
 8004294:	2b60      	cmp	r3, #96	@ 0x60
 8004296:	d877      	bhi.n	8004388 <HAL_TIM_ConfigClockSource+0x16c>
 8004298:	2b50      	cmp	r3, #80	@ 0x50
 800429a:	d03c      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0xfa>
 800429c:	2b50      	cmp	r3, #80	@ 0x50
 800429e:	d873      	bhi.n	8004388 <HAL_TIM_ConfigClockSource+0x16c>
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d058      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0x13a>
 80042a4:	2b40      	cmp	r3, #64	@ 0x40
 80042a6:	d86f      	bhi.n	8004388 <HAL_TIM_ConfigClockSource+0x16c>
 80042a8:	2b30      	cmp	r3, #48	@ 0x30
 80042aa:	d064      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x15a>
 80042ac:	2b30      	cmp	r3, #48	@ 0x30
 80042ae:	d86b      	bhi.n	8004388 <HAL_TIM_ConfigClockSource+0x16c>
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d060      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x15a>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d867      	bhi.n	8004388 <HAL_TIM_ConfigClockSource+0x16c>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d05c      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x15a>
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d05a      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	e062      	b.n	8004388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042d2:	f000 fb25 	bl	8004920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	609a      	str	r2, [r3, #8]
      break;
 80042ee:	e04f      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004300:	f000 fb0e 	bl	8004920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004312:	609a      	str	r2, [r3, #8]
      break;
 8004314:	e03c      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004322:	461a      	mov	r2, r3
 8004324:	f000 fa82 	bl	800482c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2150      	movs	r1, #80	@ 0x50
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fadb 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004334:	e02c      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004342:	461a      	mov	r2, r3
 8004344:	f000 faa1 	bl	800488a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2160      	movs	r1, #96	@ 0x60
 800434e:	4618      	mov	r0, r3
 8004350:	f000 facb 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004354:	e01c      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	461a      	mov	r2, r3
 8004364:	f000 fa62 	bl	800482c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2140      	movs	r1, #64	@ 0x40
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fabb 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004374:	e00c      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f000 fab2 	bl	80048ea <TIM_ITRx_SetConfig>
      break;
 8004386:	e003      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
      break;
 800438c:	e000      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800438e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3a      	ldr	r2, [pc, #232]	@ (80044f8 <TIM_Base_SetConfig+0xfc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00f      	beq.n	8004434 <TIM_Base_SetConfig+0x38>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441a:	d00b      	beq.n	8004434 <TIM_Base_SetConfig+0x38>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a37      	ldr	r2, [pc, #220]	@ (80044fc <TIM_Base_SetConfig+0x100>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d007      	beq.n	8004434 <TIM_Base_SetConfig+0x38>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a36      	ldr	r2, [pc, #216]	@ (8004500 <TIM_Base_SetConfig+0x104>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_Base_SetConfig+0x38>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a35      	ldr	r2, [pc, #212]	@ (8004504 <TIM_Base_SetConfig+0x108>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d108      	bne.n	8004446 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800443a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2b      	ldr	r2, [pc, #172]	@ (80044f8 <TIM_Base_SetConfig+0xfc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01b      	beq.n	8004486 <TIM_Base_SetConfig+0x8a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004454:	d017      	beq.n	8004486 <TIM_Base_SetConfig+0x8a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a28      	ldr	r2, [pc, #160]	@ (80044fc <TIM_Base_SetConfig+0x100>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <TIM_Base_SetConfig+0x8a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a27      	ldr	r2, [pc, #156]	@ (8004500 <TIM_Base_SetConfig+0x104>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00f      	beq.n	8004486 <TIM_Base_SetConfig+0x8a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a26      	ldr	r2, [pc, #152]	@ (8004504 <TIM_Base_SetConfig+0x108>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_Base_SetConfig+0x8a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a25      	ldr	r2, [pc, #148]	@ (8004508 <TIM_Base_SetConfig+0x10c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_Base_SetConfig+0x8a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a24      	ldr	r2, [pc, #144]	@ (800450c <TIM_Base_SetConfig+0x110>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_Base_SetConfig+0x8a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a23      	ldr	r2, [pc, #140]	@ (8004510 <TIM_Base_SetConfig+0x114>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800448c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a0e      	ldr	r2, [pc, #56]	@ (80044f8 <TIM_Base_SetConfig+0xfc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d103      	bne.n	80044cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d105      	bne.n	80044ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	611a      	str	r2, [r3, #16]
  }
}
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40010000 	.word	0x40010000
 80044fc:	40000400 	.word	0x40000400
 8004500:	40000800 	.word	0x40000800
 8004504:	40000c00 	.word	0x40000c00
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800

08004514 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f023 0201 	bic.w	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f023 0302 	bic.w	r3, r3, #2
 800455c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a1c      	ldr	r2, [pc, #112]	@ (80045dc <TIM_OC1_SetConfig+0xc8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d10c      	bne.n	800458a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 0308 	bic.w	r3, r3, #8
 8004576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a13      	ldr	r2, [pc, #76]	@ (80045dc <TIM_OC1_SetConfig+0xc8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d111      	bne.n	80045b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	621a      	str	r2, [r3, #32]
}
 80045d0:	bf00      	nop
 80045d2:	371c      	adds	r7, #28
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	40010000 	.word	0x40010000

080045e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f023 0210 	bic.w	r2, r3, #16
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f023 0320 	bic.w	r3, r3, #32
 800462a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a1e      	ldr	r2, [pc, #120]	@ (80046b4 <TIM_OC2_SetConfig+0xd4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10d      	bne.n	800465c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800465a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a15      	ldr	r2, [pc, #84]	@ (80046b4 <TIM_OC2_SetConfig+0xd4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d113      	bne.n	800468c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800466a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000

080046b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <TIM_OC3_SetConfig+0xd0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d10d      	bne.n	8004732 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800471c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a14      	ldr	r2, [pc, #80]	@ (8004788 <TIM_OC3_SetConfig+0xd0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d113      	bne.n	8004762 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	621a      	str	r2, [r3, #32]
}
 800477c:	bf00      	nop
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	40010000 	.word	0x40010000

0800478c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	031b      	lsls	r3, r3, #12
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a10      	ldr	r2, [pc, #64]	@ (8004828 <TIM_OC4_SetConfig+0x9c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d109      	bne.n	8004800 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	019b      	lsls	r3, r3, #6
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000

0800482c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	f023 0201 	bic.w	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f023 030a 	bic.w	r3, r3, #10
 8004868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	621a      	str	r2, [r3, #32]
}
 800487e:	bf00      	nop
 8004880:	371c      	adds	r7, #28
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800488a:	b480      	push	{r7}
 800488c:	b087      	sub	sp, #28
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f023 0210 	bic.w	r2, r3, #16
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	031b      	lsls	r3, r3, #12
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	621a      	str	r2, [r3, #32]
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004902:	683a      	ldr	r2, [r7, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	f043 0307 	orr.w	r3, r3, #7
 800490c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800493a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	021a      	lsls	r2, r3, #8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	431a      	orrs	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	609a      	str	r2, [r3, #8]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2201      	movs	r2, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1a      	ldr	r2, [r3, #32]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	43db      	mvns	r3, r3
 8004982:	401a      	ands	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6a1a      	ldr	r2, [r3, #32]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	fa01 f303 	lsl.w	r3, r1, r3
 8004998:	431a      	orrs	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e050      	b.n	8004a66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1c      	ldr	r2, [pc, #112]	@ (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d018      	beq.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a10:	d013      	beq.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a18      	ldr	r2, [pc, #96]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00e      	beq.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a16      	ldr	r2, [pc, #88]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d009      	beq.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a15      	ldr	r2, [pc, #84]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a13      	ldr	r2, [pc, #76]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d10c      	bne.n	8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40010000 	.word	0x40010000
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	40000c00 	.word	0x40000c00
 8004a84:	40014000 	.word	0x40014000

08004a88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e03d      	b.n	8004b20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e042      	b.n	8004bec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fd fb3c 	bl	80021f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	@ 0x24
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fcdb 	bl	8005554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d112      	bne.n	8004c34 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_UART_Receive_IT+0x26>
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e00b      	b.n	8004c36 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 faba 	bl	80051a4 <UART_Start_Receive_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	e000      	b.n	8004c36 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b0ba      	sub	sp, #232	@ 0xe8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x66>
 8004c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fb99 	bl	80053d6 <UART_Receive_IT>
      return;
 8004ca4:	e25b      	b.n	800515e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80de 	beq.w	8004e6c <HAL_UART_IRQHandler+0x22c>
 8004cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cc0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 80d1 	beq.w	8004e6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <HAL_UART_IRQHandler+0xae>
 8004cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	f043 0201 	orr.w	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <HAL_UART_IRQHandler+0xd2>
 8004cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0a:	f043 0202 	orr.w	r2, r3, #2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_UART_IRQHandler+0xf6>
 8004d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	f043 0204 	orr.w	r2, r3, #4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d011      	beq.n	8004d66 <HAL_UART_IRQHandler+0x126>
 8004d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5e:	f043 0208 	orr.w	r2, r3, #8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 81f2 	beq.w	8005154 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_UART_IRQHandler+0x14e>
 8004d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fb24 	bl	80053d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b40      	cmp	r3, #64	@ 0x40
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <HAL_UART_IRQHandler+0x17a>
 8004db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d04f      	beq.n	8004e5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fa2c 	bl	8005218 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dca:	2b40      	cmp	r3, #64	@ 0x40
 8004dcc:	d141      	bne.n	8004e52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3314      	adds	r3, #20
 8004dd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1d9      	bne.n	8004dce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d013      	beq.n	8004e4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e26:	4a7e      	ldr	r2, [pc, #504]	@ (8005020 <HAL_UART_IRQHandler+0x3e0>)
 8004e28:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fd fed5 	bl	8002bde <HAL_DMA_Abort_IT>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e44:	4610      	mov	r0, r2
 8004e46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	e00e      	b.n	8004e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f994 	bl	8005178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e50:	e00a      	b.n	8004e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f990 	bl	8005178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e58:	e006      	b.n	8004e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f98c 	bl	8005178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e66:	e175      	b.n	8005154 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e68:	bf00      	nop
    return;
 8004e6a:	e173      	b.n	8005154 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	f040 814f 	bne.w	8005114 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8148 	beq.w	8005114 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8141 	beq.w	8005114 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb2:	2b40      	cmp	r3, #64	@ 0x40
 8004eb4:	f040 80b6 	bne.w	8005024 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ec4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8145 	beq.w	8005158 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	f080 813e 	bcs.w	8005158 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ee2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eee:	f000 8088 	beq.w	8005002 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1d9      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e1      	bne.n	8004f3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3314      	adds	r3, #20
 8004f80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fa4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e3      	bne.n	8004f7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fd2:	f023 0310 	bic.w	r3, r3, #16
 8004fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fe4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fe6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e3      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fd fd7e 	bl	8002afe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005010:	b29b      	uxth	r3, r3
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	b29b      	uxth	r3, r3
 8005016:	4619      	mov	r1, r3
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f8b7 	bl	800518c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800501e:	e09b      	b.n	8005158 <HAL_UART_IRQHandler+0x518>
 8005020:	080052df 	.word	0x080052df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800502c:	b29b      	uxth	r3, r3
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 808e 	beq.w	800515c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8089 	beq.w	800515c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	330c      	adds	r3, #12
 8005050:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	e853 3f00 	ldrex	r3, [r3]
 8005058:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800505a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005060:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800506e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005070:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005074:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800507c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e3      	bne.n	800504a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3314      	adds	r3, #20
 8005088:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	623b      	str	r3, [r7, #32]
   return(result);
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3314      	adds	r3, #20
 80050a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e3      	bne.n	8005082 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	330c      	adds	r3, #12
 80050ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0310 	bic.w	r3, r3, #16
 80050de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	330c      	adds	r3, #12
 80050e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050ec:	61fa      	str	r2, [r7, #28]
 80050ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	617b      	str	r3, [r7, #20]
   return(result);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e3      	bne.n	80050c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f83d 	bl	800518c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005112:	e023      	b.n	800515c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511c:	2b00      	cmp	r3, #0
 800511e:	d009      	beq.n	8005134 <HAL_UART_IRQHandler+0x4f4>
 8005120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f8ea 	bl	8005306 <UART_Transmit_IT>
    return;
 8005132:	e014      	b.n	800515e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00e      	beq.n	800515e <HAL_UART_IRQHandler+0x51e>
 8005140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f92a 	bl	80053a6 <UART_EndTransmit_IT>
    return;
 8005152:	e004      	b.n	800515e <HAL_UART_IRQHandler+0x51e>
    return;
 8005154:	bf00      	nop
 8005156:	e002      	b.n	800515e <HAL_UART_IRQHandler+0x51e>
      return;
 8005158:	bf00      	nop
 800515a:	e000      	b.n	800515e <HAL_UART_IRQHandler+0x51e>
      return;
 800515c:	bf00      	nop
  }
}
 800515e:	37e8      	adds	r7, #232	@ 0xe8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	88fa      	ldrh	r2, [r7, #6]
 80051c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2222      	movs	r2, #34	@ 0x22
 80051ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0201 	orr.w	r2, r2, #1
 80051f8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0220 	orr.w	r2, r2, #32
 8005208:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b095      	sub	sp, #84	@ 0x54
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005240:	643a      	str	r2, [r7, #64]	@ 0x40
 8005242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005246:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800524e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3314      	adds	r3, #20
 800525a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	61fb      	str	r3, [r7, #28]
   return(result);
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3314      	adds	r3, #20
 8005272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005276:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800527a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e5      	bne.n	8005254 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528c:	2b01      	cmp	r3, #1
 800528e:	d119      	bne.n	80052c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052b0:	61ba      	str	r2, [r7, #24]
 80052b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6979      	ldr	r1, [r7, #20]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	613b      	str	r3, [r7, #16]
   return(result);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052d2:	bf00      	nop
 80052d4:	3754      	adds	r7, #84	@ 0x54
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7ff ff3d 	bl	8005178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b21      	cmp	r3, #33	@ 0x21
 8005318:	d13e      	bne.n	8005398 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005322:	d114      	bne.n	800534e <UART_Transmit_IT+0x48>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d110      	bne.n	800534e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005340:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	1c9a      	adds	r2, r3, #2
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	621a      	str	r2, [r3, #32]
 800534c:	e008      	b.n	8005360 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	1c59      	adds	r1, r3, #1
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6211      	str	r1, [r2, #32]
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29b      	uxth	r3, r3
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4619      	mov	r1, r3
 800536e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10f      	bne.n	8005394 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005382:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005392:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e000      	b.n	800539a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005398:	2302      	movs	r3, #2
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff fecc 	bl	8005164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b08c      	sub	sp, #48	@ 0x30
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b22      	cmp	r3, #34	@ 0x22
 80053e8:	f040 80ae 	bne.w	8005548 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f4:	d117      	bne.n	8005426 <UART_Receive_IT+0x50>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d113      	bne.n	8005426 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005414:	b29a      	uxth	r2, r3
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	1c9a      	adds	r2, r3, #2
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	629a      	str	r2, [r3, #40]	@ 0x28
 8005424:	e026      	b.n	8005474 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005438:	d007      	beq.n	800544a <UART_Receive_IT+0x74>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <UART_Receive_IT+0x82>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e008      	b.n	800546a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005464:	b2da      	uxtb	r2, r3
 8005466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005468:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29b      	uxth	r3, r3
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4619      	mov	r1, r3
 8005482:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005484:	2b00      	cmp	r3, #0
 8005486:	d15d      	bne.n	8005544 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0220 	bic.w	r2, r2, #32
 8005496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	695a      	ldr	r2, [r3, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0201 	bic.w	r2, r2, #1
 80054b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d135      	bne.n	800553a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	330c      	adds	r3, #12
 80054da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	e853 3f00 	ldrex	r3, [r3]
 80054e2:	613b      	str	r3, [r7, #16]
   return(result);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f023 0310 	bic.w	r3, r3, #16
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f4:	623a      	str	r2, [r7, #32]
 80054f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f8:	69f9      	ldr	r1, [r7, #28]
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	e841 2300 	strex	r3, r2, [r1]
 8005500:	61bb      	str	r3, [r7, #24]
   return(result);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1e5      	bne.n	80054d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b10      	cmp	r3, #16
 8005514:	d10a      	bne.n	800552c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005530:	4619      	mov	r1, r3
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fe2a 	bl	800518c <HAL_UARTEx_RxEventCallback>
 8005538:	e002      	b.n	8005540 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fb fede 	bl	80012fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	e002      	b.n	800554a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005548:	2302      	movs	r3, #2
  }
}
 800554a:	4618      	mov	r0, r3
 800554c:	3730      	adds	r7, #48	@ 0x30
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005558:	b0c0      	sub	sp, #256	@ 0x100
 800555a:	af00      	add	r7, sp, #0
 800555c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	68d9      	ldr	r1, [r3, #12]
 8005572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	ea40 0301 	orr.w	r3, r0, r1
 800557c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	431a      	orrs	r2, r3
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	431a      	orrs	r2, r3
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055ac:	f021 010c 	bic.w	r1, r1, #12
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ba:	430b      	orrs	r3, r1
 80055bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ce:	6999      	ldr	r1, [r3, #24]
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	ea40 0301 	orr.w	r3, r0, r1
 80055da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005820 <UART_SetConfig+0x2cc>)
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d005      	beq.n	80055f4 <UART_SetConfig+0xa0>
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005824 <UART_SetConfig+0x2d0>)
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d104      	bne.n	80055fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055f4:	f7fe fa48 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 80055f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055fc:	e003      	b.n	8005606 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055fe:	f7fe fa2f 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8005602:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005610:	f040 810c 	bne.w	800582c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005618:	2200      	movs	r2, #0
 800561a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800561e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005622:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005626:	4622      	mov	r2, r4
 8005628:	462b      	mov	r3, r5
 800562a:	1891      	adds	r1, r2, r2
 800562c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800562e:	415b      	adcs	r3, r3
 8005630:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005632:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005636:	4621      	mov	r1, r4
 8005638:	eb12 0801 	adds.w	r8, r2, r1
 800563c:	4629      	mov	r1, r5
 800563e:	eb43 0901 	adc.w	r9, r3, r1
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800564e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005656:	4690      	mov	r8, r2
 8005658:	4699      	mov	r9, r3
 800565a:	4623      	mov	r3, r4
 800565c:	eb18 0303 	adds.w	r3, r8, r3
 8005660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005664:	462b      	mov	r3, r5
 8005666:	eb49 0303 	adc.w	r3, r9, r3
 800566a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800567a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800567e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005682:	460b      	mov	r3, r1
 8005684:	18db      	adds	r3, r3, r3
 8005686:	653b      	str	r3, [r7, #80]	@ 0x50
 8005688:	4613      	mov	r3, r2
 800568a:	eb42 0303 	adc.w	r3, r2, r3
 800568e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005690:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005694:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005698:	f7fb fafe 	bl	8000c98 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4b61      	ldr	r3, [pc, #388]	@ (8005828 <UART_SetConfig+0x2d4>)
 80056a2:	fba3 2302 	umull	r2, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	011c      	lsls	r4, r3, #4
 80056aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056bc:	4642      	mov	r2, r8
 80056be:	464b      	mov	r3, r9
 80056c0:	1891      	adds	r1, r2, r2
 80056c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056c4:	415b      	adcs	r3, r3
 80056c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056cc:	4641      	mov	r1, r8
 80056ce:	eb12 0a01 	adds.w	sl, r2, r1
 80056d2:	4649      	mov	r1, r9
 80056d4:	eb43 0b01 	adc.w	fp, r3, r1
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ec:	4692      	mov	sl, r2
 80056ee:	469b      	mov	fp, r3
 80056f0:	4643      	mov	r3, r8
 80056f2:	eb1a 0303 	adds.w	r3, sl, r3
 80056f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056fa:	464b      	mov	r3, r9
 80056fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005700:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005710:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005714:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005718:	460b      	mov	r3, r1
 800571a:	18db      	adds	r3, r3, r3
 800571c:	643b      	str	r3, [r7, #64]	@ 0x40
 800571e:	4613      	mov	r3, r2
 8005720:	eb42 0303 	adc.w	r3, r2, r3
 8005724:	647b      	str	r3, [r7, #68]	@ 0x44
 8005726:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800572a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800572e:	f7fb fab3 	bl	8000c98 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4611      	mov	r1, r2
 8005738:	4b3b      	ldr	r3, [pc, #236]	@ (8005828 <UART_SetConfig+0x2d4>)
 800573a:	fba3 2301 	umull	r2, r3, r3, r1
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2264      	movs	r2, #100	@ 0x64
 8005742:	fb02 f303 	mul.w	r3, r2, r3
 8005746:	1acb      	subs	r3, r1, r3
 8005748:	00db      	lsls	r3, r3, #3
 800574a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800574e:	4b36      	ldr	r3, [pc, #216]	@ (8005828 <UART_SetConfig+0x2d4>)
 8005750:	fba3 2302 	umull	r2, r3, r3, r2
 8005754:	095b      	lsrs	r3, r3, #5
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800575c:	441c      	add	r4, r3
 800575e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005768:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800576c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	1891      	adds	r1, r2, r2
 8005776:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005778:	415b      	adcs	r3, r3
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800577c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005780:	4641      	mov	r1, r8
 8005782:	1851      	adds	r1, r2, r1
 8005784:	6339      	str	r1, [r7, #48]	@ 0x30
 8005786:	4649      	mov	r1, r9
 8005788:	414b      	adcs	r3, r1
 800578a:	637b      	str	r3, [r7, #52]	@ 0x34
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005798:	4659      	mov	r1, fp
 800579a:	00cb      	lsls	r3, r1, #3
 800579c:	4651      	mov	r1, sl
 800579e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a2:	4651      	mov	r1, sl
 80057a4:	00ca      	lsls	r2, r1, #3
 80057a6:	4610      	mov	r0, r2
 80057a8:	4619      	mov	r1, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	4642      	mov	r2, r8
 80057ae:	189b      	adds	r3, r3, r2
 80057b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057b4:	464b      	mov	r3, r9
 80057b6:	460a      	mov	r2, r1
 80057b8:	eb42 0303 	adc.w	r3, r2, r3
 80057bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057d4:	460b      	mov	r3, r1
 80057d6:	18db      	adds	r3, r3, r3
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057da:	4613      	mov	r3, r2
 80057dc:	eb42 0303 	adc.w	r3, r2, r3
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057ea:	f7fb fa55 	bl	8000c98 <__aeabi_uldivmod>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005828 <UART_SetConfig+0x2d4>)
 80057f4:	fba3 1302 	umull	r1, r3, r3, r2
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	2164      	movs	r1, #100	@ 0x64
 80057fc:	fb01 f303 	mul.w	r3, r1, r3
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	3332      	adds	r3, #50	@ 0x32
 8005806:	4a08      	ldr	r2, [pc, #32]	@ (8005828 <UART_SetConfig+0x2d4>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	f003 0207 	and.w	r2, r3, #7
 8005812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4422      	add	r2, r4
 800581a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800581c:	e106      	b.n	8005a2c <UART_SetConfig+0x4d8>
 800581e:	bf00      	nop
 8005820:	40011000 	.word	0x40011000
 8005824:	40011400 	.word	0x40011400
 8005828:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800582c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005836:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800583a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800583e:	4642      	mov	r2, r8
 8005840:	464b      	mov	r3, r9
 8005842:	1891      	adds	r1, r2, r2
 8005844:	6239      	str	r1, [r7, #32]
 8005846:	415b      	adcs	r3, r3
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
 800584a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800584e:	4641      	mov	r1, r8
 8005850:	1854      	adds	r4, r2, r1
 8005852:	4649      	mov	r1, r9
 8005854:	eb43 0501 	adc.w	r5, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	00eb      	lsls	r3, r5, #3
 8005862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005866:	00e2      	lsls	r2, r4, #3
 8005868:	4614      	mov	r4, r2
 800586a:	461d      	mov	r5, r3
 800586c:	4643      	mov	r3, r8
 800586e:	18e3      	adds	r3, r4, r3
 8005870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005874:	464b      	mov	r3, r9
 8005876:	eb45 0303 	adc.w	r3, r5, r3
 800587a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800588a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800589a:	4629      	mov	r1, r5
 800589c:	008b      	lsls	r3, r1, #2
 800589e:	4621      	mov	r1, r4
 80058a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a4:	4621      	mov	r1, r4
 80058a6:	008a      	lsls	r2, r1, #2
 80058a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058ac:	f7fb f9f4 	bl	8000c98 <__aeabi_uldivmod>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4b60      	ldr	r3, [pc, #384]	@ (8005a38 <UART_SetConfig+0x4e4>)
 80058b6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	011c      	lsls	r4, r3, #4
 80058be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058d0:	4642      	mov	r2, r8
 80058d2:	464b      	mov	r3, r9
 80058d4:	1891      	adds	r1, r2, r2
 80058d6:	61b9      	str	r1, [r7, #24]
 80058d8:	415b      	adcs	r3, r3
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e0:	4641      	mov	r1, r8
 80058e2:	1851      	adds	r1, r2, r1
 80058e4:	6139      	str	r1, [r7, #16]
 80058e6:	4649      	mov	r1, r9
 80058e8:	414b      	adcs	r3, r1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058f8:	4659      	mov	r1, fp
 80058fa:	00cb      	lsls	r3, r1, #3
 80058fc:	4651      	mov	r1, sl
 80058fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005902:	4651      	mov	r1, sl
 8005904:	00ca      	lsls	r2, r1, #3
 8005906:	4610      	mov	r0, r2
 8005908:	4619      	mov	r1, r3
 800590a:	4603      	mov	r3, r0
 800590c:	4642      	mov	r2, r8
 800590e:	189b      	adds	r3, r3, r2
 8005910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005914:	464b      	mov	r3, r9
 8005916:	460a      	mov	r2, r1
 8005918:	eb42 0303 	adc.w	r3, r2, r3
 800591c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	67bb      	str	r3, [r7, #120]	@ 0x78
 800592a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005938:	4649      	mov	r1, r9
 800593a:	008b      	lsls	r3, r1, #2
 800593c:	4641      	mov	r1, r8
 800593e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005942:	4641      	mov	r1, r8
 8005944:	008a      	lsls	r2, r1, #2
 8005946:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800594a:	f7fb f9a5 	bl	8000c98 <__aeabi_uldivmod>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	4611      	mov	r1, r2
 8005954:	4b38      	ldr	r3, [pc, #224]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005956:	fba3 2301 	umull	r2, r3, r3, r1
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	2264      	movs	r2, #100	@ 0x64
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	3332      	adds	r3, #50	@ 0x32
 8005968:	4a33      	ldr	r2, [pc, #204]	@ (8005a38 <UART_SetConfig+0x4e4>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005974:	441c      	add	r4, r3
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597a:	2200      	movs	r2, #0
 800597c:	673b      	str	r3, [r7, #112]	@ 0x70
 800597e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005980:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	1891      	adds	r1, r2, r2
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	415b      	adcs	r3, r3
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005994:	4641      	mov	r1, r8
 8005996:	1851      	adds	r1, r2, r1
 8005998:	6039      	str	r1, [r7, #0]
 800599a:	4649      	mov	r1, r9
 800599c:	414b      	adcs	r3, r1
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059ac:	4659      	mov	r1, fp
 80059ae:	00cb      	lsls	r3, r1, #3
 80059b0:	4651      	mov	r1, sl
 80059b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059b6:	4651      	mov	r1, sl
 80059b8:	00ca      	lsls	r2, r1, #3
 80059ba:	4610      	mov	r0, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	4603      	mov	r3, r0
 80059c0:	4642      	mov	r2, r8
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059c6:	464b      	mov	r3, r9
 80059c8:	460a      	mov	r2, r1
 80059ca:	eb42 0303 	adc.w	r3, r2, r3
 80059ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80059da:	667a      	str	r2, [r7, #100]	@ 0x64
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059e8:	4649      	mov	r1, r9
 80059ea:	008b      	lsls	r3, r1, #2
 80059ec:	4641      	mov	r1, r8
 80059ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f2:	4641      	mov	r1, r8
 80059f4:	008a      	lsls	r2, r1, #2
 80059f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059fa:	f7fb f94d 	bl	8000c98 <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4b0d      	ldr	r3, [pc, #52]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005a04:	fba3 1302 	umull	r1, r3, r3, r2
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	2164      	movs	r1, #100	@ 0x64
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	3332      	adds	r3, #50	@ 0x32
 8005a16:	4a08      	ldr	r2, [pc, #32]	@ (8005a38 <UART_SetConfig+0x4e4>)
 8005a18:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	f003 020f 	and.w	r2, r3, #15
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4422      	add	r2, r4
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a32:	46bd      	mov	sp, r7
 8005a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a38:	51eb851f 	.word	0x51eb851f

08005a3c <__cvt>:
 8005a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a40:	ec57 6b10 	vmov	r6, r7, d0
 8005a44:	2f00      	cmp	r7, #0
 8005a46:	460c      	mov	r4, r1
 8005a48:	4619      	mov	r1, r3
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	bfbb      	ittet	lt
 8005a4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a52:	461f      	movlt	r7, r3
 8005a54:	2300      	movge	r3, #0
 8005a56:	232d      	movlt	r3, #45	@ 0x2d
 8005a58:	700b      	strb	r3, [r1, #0]
 8005a5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a60:	4691      	mov	r9, r2
 8005a62:	f023 0820 	bic.w	r8, r3, #32
 8005a66:	bfbc      	itt	lt
 8005a68:	4632      	movlt	r2, r6
 8005a6a:	4616      	movlt	r6, r2
 8005a6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a70:	d005      	beq.n	8005a7e <__cvt+0x42>
 8005a72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005a76:	d100      	bne.n	8005a7a <__cvt+0x3e>
 8005a78:	3401      	adds	r4, #1
 8005a7a:	2102      	movs	r1, #2
 8005a7c:	e000      	b.n	8005a80 <__cvt+0x44>
 8005a7e:	2103      	movs	r1, #3
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	ab02      	add	r3, sp, #8
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	ec47 6b10 	vmov	d0, r6, r7
 8005a8c:	4653      	mov	r3, sl
 8005a8e:	4622      	mov	r2, r4
 8005a90:	f001 f8b2 	bl	8006bf8 <_dtoa_r>
 8005a94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005a98:	4605      	mov	r5, r0
 8005a9a:	d119      	bne.n	8005ad0 <__cvt+0x94>
 8005a9c:	f019 0f01 	tst.w	r9, #1
 8005aa0:	d00e      	beq.n	8005ac0 <__cvt+0x84>
 8005aa2:	eb00 0904 	add.w	r9, r0, r4
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4630      	mov	r0, r6
 8005aac:	4639      	mov	r1, r7
 8005aae:	f7fb f813 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ab2:	b108      	cbz	r0, 8005ab8 <__cvt+0x7c>
 8005ab4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ab8:	2230      	movs	r2, #48	@ 0x30
 8005aba:	9b03      	ldr	r3, [sp, #12]
 8005abc:	454b      	cmp	r3, r9
 8005abe:	d31e      	bcc.n	8005afe <__cvt+0xc2>
 8005ac0:	9b03      	ldr	r3, [sp, #12]
 8005ac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ac4:	1b5b      	subs	r3, r3, r5
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	b004      	add	sp, #16
 8005acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ad4:	eb00 0904 	add.w	r9, r0, r4
 8005ad8:	d1e5      	bne.n	8005aa6 <__cvt+0x6a>
 8005ada:	7803      	ldrb	r3, [r0, #0]
 8005adc:	2b30      	cmp	r3, #48	@ 0x30
 8005ade:	d10a      	bne.n	8005af6 <__cvt+0xba>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	f7fa fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aec:	b918      	cbnz	r0, 8005af6 <__cvt+0xba>
 8005aee:	f1c4 0401 	rsb	r4, r4, #1
 8005af2:	f8ca 4000 	str.w	r4, [sl]
 8005af6:	f8da 3000 	ldr.w	r3, [sl]
 8005afa:	4499      	add	r9, r3
 8005afc:	e7d3      	b.n	8005aa6 <__cvt+0x6a>
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	9103      	str	r1, [sp, #12]
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	e7d9      	b.n	8005aba <__cvt+0x7e>

08005b06 <__exponent>:
 8005b06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	bfba      	itte	lt
 8005b0c:	4249      	neglt	r1, r1
 8005b0e:	232d      	movlt	r3, #45	@ 0x2d
 8005b10:	232b      	movge	r3, #43	@ 0x2b
 8005b12:	2909      	cmp	r1, #9
 8005b14:	7002      	strb	r2, [r0, #0]
 8005b16:	7043      	strb	r3, [r0, #1]
 8005b18:	dd29      	ble.n	8005b6e <__exponent+0x68>
 8005b1a:	f10d 0307 	add.w	r3, sp, #7
 8005b1e:	461d      	mov	r5, r3
 8005b20:	270a      	movs	r7, #10
 8005b22:	461a      	mov	r2, r3
 8005b24:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b28:	fb07 1416 	mls	r4, r7, r6, r1
 8005b2c:	3430      	adds	r4, #48	@ 0x30
 8005b2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b32:	460c      	mov	r4, r1
 8005b34:	2c63      	cmp	r4, #99	@ 0x63
 8005b36:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	dcf1      	bgt.n	8005b22 <__exponent+0x1c>
 8005b3e:	3130      	adds	r1, #48	@ 0x30
 8005b40:	1e94      	subs	r4, r2, #2
 8005b42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b46:	1c41      	adds	r1, r0, #1
 8005b48:	4623      	mov	r3, r4
 8005b4a:	42ab      	cmp	r3, r5
 8005b4c:	d30a      	bcc.n	8005b64 <__exponent+0x5e>
 8005b4e:	f10d 0309 	add.w	r3, sp, #9
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	42ac      	cmp	r4, r5
 8005b56:	bf88      	it	hi
 8005b58:	2300      	movhi	r3, #0
 8005b5a:	3302      	adds	r3, #2
 8005b5c:	4403      	add	r3, r0
 8005b5e:	1a18      	subs	r0, r3, r0
 8005b60:	b003      	add	sp, #12
 8005b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005b68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005b6c:	e7ed      	b.n	8005b4a <__exponent+0x44>
 8005b6e:	2330      	movs	r3, #48	@ 0x30
 8005b70:	3130      	adds	r1, #48	@ 0x30
 8005b72:	7083      	strb	r3, [r0, #2]
 8005b74:	70c1      	strb	r1, [r0, #3]
 8005b76:	1d03      	adds	r3, r0, #4
 8005b78:	e7f1      	b.n	8005b5e <__exponent+0x58>
	...

08005b7c <_printf_float>:
 8005b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b80:	b08d      	sub	sp, #52	@ 0x34
 8005b82:	460c      	mov	r4, r1
 8005b84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005b88:	4616      	mov	r6, r2
 8005b8a:	461f      	mov	r7, r3
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	f000 ff2d 	bl	80069ec <_localeconv_r>
 8005b92:	6803      	ldr	r3, [r0, #0]
 8005b94:	9304      	str	r3, [sp, #16]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fa fb72 	bl	8000280 <strlen>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba4:	9005      	str	r0, [sp, #20]
 8005ba6:	3307      	adds	r3, #7
 8005ba8:	f023 0307 	bic.w	r3, r3, #7
 8005bac:	f103 0208 	add.w	r2, r3, #8
 8005bb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bb4:	f8d4 b000 	ldr.w	fp, [r4]
 8005bb8:	f8c8 2000 	str.w	r2, [r8]
 8005bbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bc4:	9307      	str	r3, [sp, #28]
 8005bc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bd2:	4b9c      	ldr	r3, [pc, #624]	@ (8005e44 <_printf_float+0x2c8>)
 8005bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd8:	f7fa ffb0 	bl	8000b3c <__aeabi_dcmpun>
 8005bdc:	bb70      	cbnz	r0, 8005c3c <_printf_float+0xc0>
 8005bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005be2:	4b98      	ldr	r3, [pc, #608]	@ (8005e44 <_printf_float+0x2c8>)
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	f7fa ff8a 	bl	8000b00 <__aeabi_dcmple>
 8005bec:	bb30      	cbnz	r0, 8005c3c <_printf_float+0xc0>
 8005bee:	2200      	movs	r2, #0
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	f7fa ff79 	bl	8000aec <__aeabi_dcmplt>
 8005bfa:	b110      	cbz	r0, 8005c02 <_printf_float+0x86>
 8005bfc:	232d      	movs	r3, #45	@ 0x2d
 8005bfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c02:	4a91      	ldr	r2, [pc, #580]	@ (8005e48 <_printf_float+0x2cc>)
 8005c04:	4b91      	ldr	r3, [pc, #580]	@ (8005e4c <_printf_float+0x2d0>)
 8005c06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c0a:	bf94      	ite	ls
 8005c0c:	4690      	movls	r8, r2
 8005c0e:	4698      	movhi	r8, r3
 8005c10:	2303      	movs	r3, #3
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	f02b 0304 	bic.w	r3, fp, #4
 8005c18:	6023      	str	r3, [r4, #0]
 8005c1a:	f04f 0900 	mov.w	r9, #0
 8005c1e:	9700      	str	r7, [sp, #0]
 8005c20:	4633      	mov	r3, r6
 8005c22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c24:	4621      	mov	r1, r4
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f9d2 	bl	8005fd0 <_printf_common>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f040 808d 	bne.w	8005d4c <_printf_float+0x1d0>
 8005c32:	f04f 30ff 	mov.w	r0, #4294967295
 8005c36:	b00d      	add	sp, #52	@ 0x34
 8005c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	4640      	mov	r0, r8
 8005c42:	4649      	mov	r1, r9
 8005c44:	f7fa ff7a 	bl	8000b3c <__aeabi_dcmpun>
 8005c48:	b140      	cbz	r0, 8005c5c <_printf_float+0xe0>
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfbc      	itt	lt
 8005c50:	232d      	movlt	r3, #45	@ 0x2d
 8005c52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c56:	4a7e      	ldr	r2, [pc, #504]	@ (8005e50 <_printf_float+0x2d4>)
 8005c58:	4b7e      	ldr	r3, [pc, #504]	@ (8005e54 <_printf_float+0x2d8>)
 8005c5a:	e7d4      	b.n	8005c06 <_printf_float+0x8a>
 8005c5c:	6863      	ldr	r3, [r4, #4]
 8005c5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c62:	9206      	str	r2, [sp, #24]
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	d13b      	bne.n	8005ce0 <_printf_float+0x164>
 8005c68:	2306      	movs	r3, #6
 8005c6a:	6063      	str	r3, [r4, #4]
 8005c6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005c70:	2300      	movs	r3, #0
 8005c72:	6022      	str	r2, [r4, #0]
 8005c74:	9303      	str	r3, [sp, #12]
 8005c76:	ab0a      	add	r3, sp, #40	@ 0x28
 8005c78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005c7c:	ab09      	add	r3, sp, #36	@ 0x24
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	6861      	ldr	r1, [r4, #4]
 8005c82:	ec49 8b10 	vmov	d0, r8, r9
 8005c86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7ff fed6 	bl	8005a3c <__cvt>
 8005c90:	9b06      	ldr	r3, [sp, #24]
 8005c92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c94:	2b47      	cmp	r3, #71	@ 0x47
 8005c96:	4680      	mov	r8, r0
 8005c98:	d129      	bne.n	8005cee <_printf_float+0x172>
 8005c9a:	1cc8      	adds	r0, r1, #3
 8005c9c:	db02      	blt.n	8005ca4 <_printf_float+0x128>
 8005c9e:	6863      	ldr	r3, [r4, #4]
 8005ca0:	4299      	cmp	r1, r3
 8005ca2:	dd41      	ble.n	8005d28 <_printf_float+0x1ac>
 8005ca4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ca8:	fa5f fa8a 	uxtb.w	sl, sl
 8005cac:	3901      	subs	r1, #1
 8005cae:	4652      	mov	r2, sl
 8005cb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cb6:	f7ff ff26 	bl	8005b06 <__exponent>
 8005cba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cbc:	1813      	adds	r3, r2, r0
 8005cbe:	2a01      	cmp	r2, #1
 8005cc0:	4681      	mov	r9, r0
 8005cc2:	6123      	str	r3, [r4, #16]
 8005cc4:	dc02      	bgt.n	8005ccc <_printf_float+0x150>
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	07d2      	lsls	r2, r2, #31
 8005cca:	d501      	bpl.n	8005cd0 <_printf_float+0x154>
 8005ccc:	3301      	adds	r3, #1
 8005cce:	6123      	str	r3, [r4, #16]
 8005cd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0a2      	beq.n	8005c1e <_printf_float+0xa2>
 8005cd8:	232d      	movs	r3, #45	@ 0x2d
 8005cda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cde:	e79e      	b.n	8005c1e <_printf_float+0xa2>
 8005ce0:	9a06      	ldr	r2, [sp, #24]
 8005ce2:	2a47      	cmp	r2, #71	@ 0x47
 8005ce4:	d1c2      	bne.n	8005c6c <_printf_float+0xf0>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1c0      	bne.n	8005c6c <_printf_float+0xf0>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e7bd      	b.n	8005c6a <_printf_float+0xee>
 8005cee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005cf2:	d9db      	bls.n	8005cac <_printf_float+0x130>
 8005cf4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005cf8:	d118      	bne.n	8005d2c <_printf_float+0x1b0>
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	dd0b      	ble.n	8005d18 <_printf_float+0x19c>
 8005d00:	6121      	str	r1, [r4, #16]
 8005d02:	b913      	cbnz	r3, 8005d0a <_printf_float+0x18e>
 8005d04:	6822      	ldr	r2, [r4, #0]
 8005d06:	07d0      	lsls	r0, r2, #31
 8005d08:	d502      	bpl.n	8005d10 <_printf_float+0x194>
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	440b      	add	r3, r1
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	e7db      	b.n	8005cd0 <_printf_float+0x154>
 8005d18:	b913      	cbnz	r3, 8005d20 <_printf_float+0x1a4>
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	07d2      	lsls	r2, r2, #31
 8005d1e:	d501      	bpl.n	8005d24 <_printf_float+0x1a8>
 8005d20:	3302      	adds	r3, #2
 8005d22:	e7f4      	b.n	8005d0e <_printf_float+0x192>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e7f2      	b.n	8005d0e <_printf_float+0x192>
 8005d28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d2e:	4299      	cmp	r1, r3
 8005d30:	db05      	blt.n	8005d3e <_printf_float+0x1c2>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	6121      	str	r1, [r4, #16]
 8005d36:	07d8      	lsls	r0, r3, #31
 8005d38:	d5ea      	bpl.n	8005d10 <_printf_float+0x194>
 8005d3a:	1c4b      	adds	r3, r1, #1
 8005d3c:	e7e7      	b.n	8005d0e <_printf_float+0x192>
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	bfd4      	ite	le
 8005d42:	f1c1 0202 	rsble	r2, r1, #2
 8005d46:	2201      	movgt	r2, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	e7e0      	b.n	8005d0e <_printf_float+0x192>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	055a      	lsls	r2, r3, #21
 8005d50:	d407      	bmi.n	8005d62 <_printf_float+0x1e6>
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	4642      	mov	r2, r8
 8005d56:	4631      	mov	r1, r6
 8005d58:	4628      	mov	r0, r5
 8005d5a:	47b8      	blx	r7
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d12b      	bne.n	8005db8 <_printf_float+0x23c>
 8005d60:	e767      	b.n	8005c32 <_printf_float+0xb6>
 8005d62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d66:	f240 80dd 	bls.w	8005f24 <_printf_float+0x3a8>
 8005d6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2300      	movs	r3, #0
 8005d72:	f7fa feb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d76:	2800      	cmp	r0, #0
 8005d78:	d033      	beq.n	8005de2 <_printf_float+0x266>
 8005d7a:	4a37      	ldr	r2, [pc, #220]	@ (8005e58 <_printf_float+0x2dc>)
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f af54 	beq.w	8005c32 <_printf_float+0xb6>
 8005d8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005d8e:	4543      	cmp	r3, r8
 8005d90:	db02      	blt.n	8005d98 <_printf_float+0x21c>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	07d8      	lsls	r0, r3, #31
 8005d96:	d50f      	bpl.n	8005db8 <_printf_float+0x23c>
 8005d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b8      	blx	r7
 8005da2:	3001      	adds	r0, #1
 8005da4:	f43f af45 	beq.w	8005c32 <_printf_float+0xb6>
 8005da8:	f04f 0900 	mov.w	r9, #0
 8005dac:	f108 38ff 	add.w	r8, r8, #4294967295
 8005db0:	f104 0a1a 	add.w	sl, r4, #26
 8005db4:	45c8      	cmp	r8, r9
 8005db6:	dc09      	bgt.n	8005dcc <_printf_float+0x250>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	079b      	lsls	r3, r3, #30
 8005dbc:	f100 8103 	bmi.w	8005fc6 <_printf_float+0x44a>
 8005dc0:	68e0      	ldr	r0, [r4, #12]
 8005dc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dc4:	4298      	cmp	r0, r3
 8005dc6:	bfb8      	it	lt
 8005dc8:	4618      	movlt	r0, r3
 8005dca:	e734      	b.n	8005c36 <_printf_float+0xba>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	4652      	mov	r2, sl
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	47b8      	blx	r7
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f43f af2b 	beq.w	8005c32 <_printf_float+0xb6>
 8005ddc:	f109 0901 	add.w	r9, r9, #1
 8005de0:	e7e8      	b.n	8005db4 <_printf_float+0x238>
 8005de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dc39      	bgt.n	8005e5c <_printf_float+0x2e0>
 8005de8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e58 <_printf_float+0x2dc>)
 8005dea:	2301      	movs	r3, #1
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	f43f af1d 	beq.w	8005c32 <_printf_float+0xb6>
 8005df8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005dfc:	ea59 0303 	orrs.w	r3, r9, r3
 8005e00:	d102      	bne.n	8005e08 <_printf_float+0x28c>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	07d9      	lsls	r1, r3, #31
 8005e06:	d5d7      	bpl.n	8005db8 <_printf_float+0x23c>
 8005e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4628      	mov	r0, r5
 8005e10:	47b8      	blx	r7
 8005e12:	3001      	adds	r0, #1
 8005e14:	f43f af0d 	beq.w	8005c32 <_printf_float+0xb6>
 8005e18:	f04f 0a00 	mov.w	sl, #0
 8005e1c:	f104 0b1a 	add.w	fp, r4, #26
 8005e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e22:	425b      	negs	r3, r3
 8005e24:	4553      	cmp	r3, sl
 8005e26:	dc01      	bgt.n	8005e2c <_printf_float+0x2b0>
 8005e28:	464b      	mov	r3, r9
 8005e2a:	e793      	b.n	8005d54 <_printf_float+0x1d8>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	465a      	mov	r2, fp
 8005e30:	4631      	mov	r1, r6
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	f43f aefb 	beq.w	8005c32 <_printf_float+0xb6>
 8005e3c:	f10a 0a01 	add.w	sl, sl, #1
 8005e40:	e7ee      	b.n	8005e20 <_printf_float+0x2a4>
 8005e42:	bf00      	nop
 8005e44:	7fefffff 	.word	0x7fefffff
 8005e48:	0800ace0 	.word	0x0800ace0
 8005e4c:	0800ace4 	.word	0x0800ace4
 8005e50:	0800ace8 	.word	0x0800ace8
 8005e54:	0800acec 	.word	0x0800acec
 8005e58:	0800b080 	.word	0x0800b080
 8005e5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e62:	4553      	cmp	r3, sl
 8005e64:	bfa8      	it	ge
 8005e66:	4653      	movge	r3, sl
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	4699      	mov	r9, r3
 8005e6c:	dc36      	bgt.n	8005edc <_printf_float+0x360>
 8005e6e:	f04f 0b00 	mov.w	fp, #0
 8005e72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e76:	f104 021a 	add.w	r2, r4, #26
 8005e7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e7c:	9306      	str	r3, [sp, #24]
 8005e7e:	eba3 0309 	sub.w	r3, r3, r9
 8005e82:	455b      	cmp	r3, fp
 8005e84:	dc31      	bgt.n	8005eea <_printf_float+0x36e>
 8005e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e88:	459a      	cmp	sl, r3
 8005e8a:	dc3a      	bgt.n	8005f02 <_printf_float+0x386>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	07da      	lsls	r2, r3, #31
 8005e90:	d437      	bmi.n	8005f02 <_printf_float+0x386>
 8005e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e94:	ebaa 0903 	sub.w	r9, sl, r3
 8005e98:	9b06      	ldr	r3, [sp, #24]
 8005e9a:	ebaa 0303 	sub.w	r3, sl, r3
 8005e9e:	4599      	cmp	r9, r3
 8005ea0:	bfa8      	it	ge
 8005ea2:	4699      	movge	r9, r3
 8005ea4:	f1b9 0f00 	cmp.w	r9, #0
 8005ea8:	dc33      	bgt.n	8005f12 <_printf_float+0x396>
 8005eaa:	f04f 0800 	mov.w	r8, #0
 8005eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eb2:	f104 0b1a 	add.w	fp, r4, #26
 8005eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eb8:	ebaa 0303 	sub.w	r3, sl, r3
 8005ebc:	eba3 0309 	sub.w	r3, r3, r9
 8005ec0:	4543      	cmp	r3, r8
 8005ec2:	f77f af79 	ble.w	8005db8 <_printf_float+0x23c>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	465a      	mov	r2, fp
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4628      	mov	r0, r5
 8005ece:	47b8      	blx	r7
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f43f aeae 	beq.w	8005c32 <_printf_float+0xb6>
 8005ed6:	f108 0801 	add.w	r8, r8, #1
 8005eda:	e7ec      	b.n	8005eb6 <_printf_float+0x33a>
 8005edc:	4642      	mov	r2, r8
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d1c2      	bne.n	8005e6e <_printf_float+0x2f2>
 8005ee8:	e6a3      	b.n	8005c32 <_printf_float+0xb6>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	9206      	str	r2, [sp, #24]
 8005ef2:	47b8      	blx	r7
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	f43f ae9c 	beq.w	8005c32 <_printf_float+0xb6>
 8005efa:	9a06      	ldr	r2, [sp, #24]
 8005efc:	f10b 0b01 	add.w	fp, fp, #1
 8005f00:	e7bb      	b.n	8005e7a <_printf_float+0x2fe>
 8005f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f06:	4631      	mov	r1, r6
 8005f08:	4628      	mov	r0, r5
 8005f0a:	47b8      	blx	r7
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d1c0      	bne.n	8005e92 <_printf_float+0x316>
 8005f10:	e68f      	b.n	8005c32 <_printf_float+0xb6>
 8005f12:	9a06      	ldr	r2, [sp, #24]
 8005f14:	464b      	mov	r3, r9
 8005f16:	4442      	add	r2, r8
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	47b8      	blx	r7
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d1c3      	bne.n	8005eaa <_printf_float+0x32e>
 8005f22:	e686      	b.n	8005c32 <_printf_float+0xb6>
 8005f24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f28:	f1ba 0f01 	cmp.w	sl, #1
 8005f2c:	dc01      	bgt.n	8005f32 <_printf_float+0x3b6>
 8005f2e:	07db      	lsls	r3, r3, #31
 8005f30:	d536      	bpl.n	8005fa0 <_printf_float+0x424>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4642      	mov	r2, r8
 8005f36:	4631      	mov	r1, r6
 8005f38:	4628      	mov	r0, r5
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	f43f ae78 	beq.w	8005c32 <_printf_float+0xb6>
 8005f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f46:	4631      	mov	r1, r6
 8005f48:	4628      	mov	r0, r5
 8005f4a:	47b8      	blx	r7
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	f43f ae70 	beq.w	8005c32 <_printf_float+0xb6>
 8005f52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f56:	2200      	movs	r2, #0
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f5e:	f7fa fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f62:	b9c0      	cbnz	r0, 8005f96 <_printf_float+0x41a>
 8005f64:	4653      	mov	r3, sl
 8005f66:	f108 0201 	add.w	r2, r8, #1
 8005f6a:	4631      	mov	r1, r6
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	47b8      	blx	r7
 8005f70:	3001      	adds	r0, #1
 8005f72:	d10c      	bne.n	8005f8e <_printf_float+0x412>
 8005f74:	e65d      	b.n	8005c32 <_printf_float+0xb6>
 8005f76:	2301      	movs	r3, #1
 8005f78:	465a      	mov	r2, fp
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	f43f ae56 	beq.w	8005c32 <_printf_float+0xb6>
 8005f86:	f108 0801 	add.w	r8, r8, #1
 8005f8a:	45d0      	cmp	r8, sl
 8005f8c:	dbf3      	blt.n	8005f76 <_printf_float+0x3fa>
 8005f8e:	464b      	mov	r3, r9
 8005f90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005f94:	e6df      	b.n	8005d56 <_printf_float+0x1da>
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	f104 0b1a 	add.w	fp, r4, #26
 8005f9e:	e7f4      	b.n	8005f8a <_printf_float+0x40e>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	e7e1      	b.n	8005f6a <_printf_float+0x3ee>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	464a      	mov	r2, r9
 8005faa:	4631      	mov	r1, r6
 8005fac:	4628      	mov	r0, r5
 8005fae:	47b8      	blx	r7
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	f43f ae3e 	beq.w	8005c32 <_printf_float+0xb6>
 8005fb6:	f108 0801 	add.w	r8, r8, #1
 8005fba:	68e3      	ldr	r3, [r4, #12]
 8005fbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fbe:	1a5b      	subs	r3, r3, r1
 8005fc0:	4543      	cmp	r3, r8
 8005fc2:	dcf0      	bgt.n	8005fa6 <_printf_float+0x42a>
 8005fc4:	e6fc      	b.n	8005dc0 <_printf_float+0x244>
 8005fc6:	f04f 0800 	mov.w	r8, #0
 8005fca:	f104 0919 	add.w	r9, r4, #25
 8005fce:	e7f4      	b.n	8005fba <_printf_float+0x43e>

08005fd0 <_printf_common>:
 8005fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	4698      	mov	r8, r3
 8005fd8:	688a      	ldr	r2, [r1, #8]
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	bfb8      	it	lt
 8005fe4:	4613      	movlt	r3, r2
 8005fe6:	6033      	str	r3, [r6, #0]
 8005fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fec:	4607      	mov	r7, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	b10a      	cbz	r2, 8005ff6 <_printf_common+0x26>
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	0699      	lsls	r1, r3, #26
 8005ffa:	bf42      	ittt	mi
 8005ffc:	6833      	ldrmi	r3, [r6, #0]
 8005ffe:	3302      	addmi	r3, #2
 8006000:	6033      	strmi	r3, [r6, #0]
 8006002:	6825      	ldr	r5, [r4, #0]
 8006004:	f015 0506 	ands.w	r5, r5, #6
 8006008:	d106      	bne.n	8006018 <_printf_common+0x48>
 800600a:	f104 0a19 	add.w	sl, r4, #25
 800600e:	68e3      	ldr	r3, [r4, #12]
 8006010:	6832      	ldr	r2, [r6, #0]
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	42ab      	cmp	r3, r5
 8006016:	dc26      	bgt.n	8006066 <_printf_common+0x96>
 8006018:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800601c:	6822      	ldr	r2, [r4, #0]
 800601e:	3b00      	subs	r3, #0
 8006020:	bf18      	it	ne
 8006022:	2301      	movne	r3, #1
 8006024:	0692      	lsls	r2, r2, #26
 8006026:	d42b      	bmi.n	8006080 <_printf_common+0xb0>
 8006028:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800602c:	4641      	mov	r1, r8
 800602e:	4638      	mov	r0, r7
 8006030:	47c8      	blx	r9
 8006032:	3001      	adds	r0, #1
 8006034:	d01e      	beq.n	8006074 <_printf_common+0xa4>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	6922      	ldr	r2, [r4, #16]
 800603a:	f003 0306 	and.w	r3, r3, #6
 800603e:	2b04      	cmp	r3, #4
 8006040:	bf02      	ittt	eq
 8006042:	68e5      	ldreq	r5, [r4, #12]
 8006044:	6833      	ldreq	r3, [r6, #0]
 8006046:	1aed      	subeq	r5, r5, r3
 8006048:	68a3      	ldr	r3, [r4, #8]
 800604a:	bf0c      	ite	eq
 800604c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006050:	2500      	movne	r5, #0
 8006052:	4293      	cmp	r3, r2
 8006054:	bfc4      	itt	gt
 8006056:	1a9b      	subgt	r3, r3, r2
 8006058:	18ed      	addgt	r5, r5, r3
 800605a:	2600      	movs	r6, #0
 800605c:	341a      	adds	r4, #26
 800605e:	42b5      	cmp	r5, r6
 8006060:	d11a      	bne.n	8006098 <_printf_common+0xc8>
 8006062:	2000      	movs	r0, #0
 8006064:	e008      	b.n	8006078 <_printf_common+0xa8>
 8006066:	2301      	movs	r3, #1
 8006068:	4652      	mov	r2, sl
 800606a:	4641      	mov	r1, r8
 800606c:	4638      	mov	r0, r7
 800606e:	47c8      	blx	r9
 8006070:	3001      	adds	r0, #1
 8006072:	d103      	bne.n	800607c <_printf_common+0xac>
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607c:	3501      	adds	r5, #1
 800607e:	e7c6      	b.n	800600e <_printf_common+0x3e>
 8006080:	18e1      	adds	r1, r4, r3
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	2030      	movs	r0, #48	@ 0x30
 8006086:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800608a:	4422      	add	r2, r4
 800608c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006090:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006094:	3302      	adds	r3, #2
 8006096:	e7c7      	b.n	8006028 <_printf_common+0x58>
 8006098:	2301      	movs	r3, #1
 800609a:	4622      	mov	r2, r4
 800609c:	4641      	mov	r1, r8
 800609e:	4638      	mov	r0, r7
 80060a0:	47c8      	blx	r9
 80060a2:	3001      	adds	r0, #1
 80060a4:	d0e6      	beq.n	8006074 <_printf_common+0xa4>
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7d9      	b.n	800605e <_printf_common+0x8e>
	...

080060ac <_printf_i>:
 80060ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	7e0f      	ldrb	r7, [r1, #24]
 80060b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060b4:	2f78      	cmp	r7, #120	@ 0x78
 80060b6:	4691      	mov	r9, r2
 80060b8:	4680      	mov	r8, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	469a      	mov	sl, r3
 80060be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060c2:	d807      	bhi.n	80060d4 <_printf_i+0x28>
 80060c4:	2f62      	cmp	r7, #98	@ 0x62
 80060c6:	d80a      	bhi.n	80060de <_printf_i+0x32>
 80060c8:	2f00      	cmp	r7, #0
 80060ca:	f000 80d2 	beq.w	8006272 <_printf_i+0x1c6>
 80060ce:	2f58      	cmp	r7, #88	@ 0x58
 80060d0:	f000 80b9 	beq.w	8006246 <_printf_i+0x19a>
 80060d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060dc:	e03a      	b.n	8006154 <_printf_i+0xa8>
 80060de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060e2:	2b15      	cmp	r3, #21
 80060e4:	d8f6      	bhi.n	80060d4 <_printf_i+0x28>
 80060e6:	a101      	add	r1, pc, #4	@ (adr r1, 80060ec <_printf_i+0x40>)
 80060e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060ec:	08006145 	.word	0x08006145
 80060f0:	08006159 	.word	0x08006159
 80060f4:	080060d5 	.word	0x080060d5
 80060f8:	080060d5 	.word	0x080060d5
 80060fc:	080060d5 	.word	0x080060d5
 8006100:	080060d5 	.word	0x080060d5
 8006104:	08006159 	.word	0x08006159
 8006108:	080060d5 	.word	0x080060d5
 800610c:	080060d5 	.word	0x080060d5
 8006110:	080060d5 	.word	0x080060d5
 8006114:	080060d5 	.word	0x080060d5
 8006118:	08006259 	.word	0x08006259
 800611c:	08006183 	.word	0x08006183
 8006120:	08006213 	.word	0x08006213
 8006124:	080060d5 	.word	0x080060d5
 8006128:	080060d5 	.word	0x080060d5
 800612c:	0800627b 	.word	0x0800627b
 8006130:	080060d5 	.word	0x080060d5
 8006134:	08006183 	.word	0x08006183
 8006138:	080060d5 	.word	0x080060d5
 800613c:	080060d5 	.word	0x080060d5
 8006140:	0800621b 	.word	0x0800621b
 8006144:	6833      	ldr	r3, [r6, #0]
 8006146:	1d1a      	adds	r2, r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6032      	str	r2, [r6, #0]
 800614c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006150:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006154:	2301      	movs	r3, #1
 8006156:	e09d      	b.n	8006294 <_printf_i+0x1e8>
 8006158:	6833      	ldr	r3, [r6, #0]
 800615a:	6820      	ldr	r0, [r4, #0]
 800615c:	1d19      	adds	r1, r3, #4
 800615e:	6031      	str	r1, [r6, #0]
 8006160:	0606      	lsls	r6, r0, #24
 8006162:	d501      	bpl.n	8006168 <_printf_i+0xbc>
 8006164:	681d      	ldr	r5, [r3, #0]
 8006166:	e003      	b.n	8006170 <_printf_i+0xc4>
 8006168:	0645      	lsls	r5, r0, #25
 800616a:	d5fb      	bpl.n	8006164 <_printf_i+0xb8>
 800616c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006170:	2d00      	cmp	r5, #0
 8006172:	da03      	bge.n	800617c <_printf_i+0xd0>
 8006174:	232d      	movs	r3, #45	@ 0x2d
 8006176:	426d      	negs	r5, r5
 8006178:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800617c:	4859      	ldr	r0, [pc, #356]	@ (80062e4 <_printf_i+0x238>)
 800617e:	230a      	movs	r3, #10
 8006180:	e011      	b.n	80061a6 <_printf_i+0xfa>
 8006182:	6821      	ldr	r1, [r4, #0]
 8006184:	6833      	ldr	r3, [r6, #0]
 8006186:	0608      	lsls	r0, r1, #24
 8006188:	f853 5b04 	ldr.w	r5, [r3], #4
 800618c:	d402      	bmi.n	8006194 <_printf_i+0xe8>
 800618e:	0649      	lsls	r1, r1, #25
 8006190:	bf48      	it	mi
 8006192:	b2ad      	uxthmi	r5, r5
 8006194:	2f6f      	cmp	r7, #111	@ 0x6f
 8006196:	4853      	ldr	r0, [pc, #332]	@ (80062e4 <_printf_i+0x238>)
 8006198:	6033      	str	r3, [r6, #0]
 800619a:	bf14      	ite	ne
 800619c:	230a      	movne	r3, #10
 800619e:	2308      	moveq	r3, #8
 80061a0:	2100      	movs	r1, #0
 80061a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061a6:	6866      	ldr	r6, [r4, #4]
 80061a8:	60a6      	str	r6, [r4, #8]
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	bfa2      	ittt	ge
 80061ae:	6821      	ldrge	r1, [r4, #0]
 80061b0:	f021 0104 	bicge.w	r1, r1, #4
 80061b4:	6021      	strge	r1, [r4, #0]
 80061b6:	b90d      	cbnz	r5, 80061bc <_printf_i+0x110>
 80061b8:	2e00      	cmp	r6, #0
 80061ba:	d04b      	beq.n	8006254 <_printf_i+0x1a8>
 80061bc:	4616      	mov	r6, r2
 80061be:	fbb5 f1f3 	udiv	r1, r5, r3
 80061c2:	fb03 5711 	mls	r7, r3, r1, r5
 80061c6:	5dc7      	ldrb	r7, [r0, r7]
 80061c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061cc:	462f      	mov	r7, r5
 80061ce:	42bb      	cmp	r3, r7
 80061d0:	460d      	mov	r5, r1
 80061d2:	d9f4      	bls.n	80061be <_printf_i+0x112>
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d10b      	bne.n	80061f0 <_printf_i+0x144>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	07df      	lsls	r7, r3, #31
 80061dc:	d508      	bpl.n	80061f0 <_printf_i+0x144>
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	6861      	ldr	r1, [r4, #4]
 80061e2:	4299      	cmp	r1, r3
 80061e4:	bfde      	ittt	le
 80061e6:	2330      	movle	r3, #48	@ 0x30
 80061e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061f0:	1b92      	subs	r2, r2, r6
 80061f2:	6122      	str	r2, [r4, #16]
 80061f4:	f8cd a000 	str.w	sl, [sp]
 80061f8:	464b      	mov	r3, r9
 80061fa:	aa03      	add	r2, sp, #12
 80061fc:	4621      	mov	r1, r4
 80061fe:	4640      	mov	r0, r8
 8006200:	f7ff fee6 	bl	8005fd0 <_printf_common>
 8006204:	3001      	adds	r0, #1
 8006206:	d14a      	bne.n	800629e <_printf_i+0x1f2>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	b004      	add	sp, #16
 800620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	f043 0320 	orr.w	r3, r3, #32
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	4833      	ldr	r0, [pc, #204]	@ (80062e8 <_printf_i+0x23c>)
 800621c:	2778      	movs	r7, #120	@ 0x78
 800621e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	6831      	ldr	r1, [r6, #0]
 8006226:	061f      	lsls	r7, r3, #24
 8006228:	f851 5b04 	ldr.w	r5, [r1], #4
 800622c:	d402      	bmi.n	8006234 <_printf_i+0x188>
 800622e:	065f      	lsls	r7, r3, #25
 8006230:	bf48      	it	mi
 8006232:	b2ad      	uxthmi	r5, r5
 8006234:	6031      	str	r1, [r6, #0]
 8006236:	07d9      	lsls	r1, r3, #31
 8006238:	bf44      	itt	mi
 800623a:	f043 0320 	orrmi.w	r3, r3, #32
 800623e:	6023      	strmi	r3, [r4, #0]
 8006240:	b11d      	cbz	r5, 800624a <_printf_i+0x19e>
 8006242:	2310      	movs	r3, #16
 8006244:	e7ac      	b.n	80061a0 <_printf_i+0xf4>
 8006246:	4827      	ldr	r0, [pc, #156]	@ (80062e4 <_printf_i+0x238>)
 8006248:	e7e9      	b.n	800621e <_printf_i+0x172>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f023 0320 	bic.w	r3, r3, #32
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	e7f6      	b.n	8006242 <_printf_i+0x196>
 8006254:	4616      	mov	r6, r2
 8006256:	e7bd      	b.n	80061d4 <_printf_i+0x128>
 8006258:	6833      	ldr	r3, [r6, #0]
 800625a:	6825      	ldr	r5, [r4, #0]
 800625c:	6961      	ldr	r1, [r4, #20]
 800625e:	1d18      	adds	r0, r3, #4
 8006260:	6030      	str	r0, [r6, #0]
 8006262:	062e      	lsls	r6, r5, #24
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	d501      	bpl.n	800626c <_printf_i+0x1c0>
 8006268:	6019      	str	r1, [r3, #0]
 800626a:	e002      	b.n	8006272 <_printf_i+0x1c6>
 800626c:	0668      	lsls	r0, r5, #25
 800626e:	d5fb      	bpl.n	8006268 <_printf_i+0x1bc>
 8006270:	8019      	strh	r1, [r3, #0]
 8006272:	2300      	movs	r3, #0
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	4616      	mov	r6, r2
 8006278:	e7bc      	b.n	80061f4 <_printf_i+0x148>
 800627a:	6833      	ldr	r3, [r6, #0]
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	6032      	str	r2, [r6, #0]
 8006280:	681e      	ldr	r6, [r3, #0]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	2100      	movs	r1, #0
 8006286:	4630      	mov	r0, r6
 8006288:	f7f9 ffaa 	bl	80001e0 <memchr>
 800628c:	b108      	cbz	r0, 8006292 <_printf_i+0x1e6>
 800628e:	1b80      	subs	r0, r0, r6
 8006290:	6060      	str	r0, [r4, #4]
 8006292:	6863      	ldr	r3, [r4, #4]
 8006294:	6123      	str	r3, [r4, #16]
 8006296:	2300      	movs	r3, #0
 8006298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629c:	e7aa      	b.n	80061f4 <_printf_i+0x148>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	4632      	mov	r2, r6
 80062a2:	4649      	mov	r1, r9
 80062a4:	4640      	mov	r0, r8
 80062a6:	47d0      	blx	sl
 80062a8:	3001      	adds	r0, #1
 80062aa:	d0ad      	beq.n	8006208 <_printf_i+0x15c>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	d413      	bmi.n	80062da <_printf_i+0x22e>
 80062b2:	68e0      	ldr	r0, [r4, #12]
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	4298      	cmp	r0, r3
 80062b8:	bfb8      	it	lt
 80062ba:	4618      	movlt	r0, r3
 80062bc:	e7a6      	b.n	800620c <_printf_i+0x160>
 80062be:	2301      	movs	r3, #1
 80062c0:	4632      	mov	r2, r6
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	47d0      	blx	sl
 80062c8:	3001      	adds	r0, #1
 80062ca:	d09d      	beq.n	8006208 <_printf_i+0x15c>
 80062cc:	3501      	adds	r5, #1
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	9903      	ldr	r1, [sp, #12]
 80062d2:	1a5b      	subs	r3, r3, r1
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	dcf2      	bgt.n	80062be <_printf_i+0x212>
 80062d8:	e7eb      	b.n	80062b2 <_printf_i+0x206>
 80062da:	2500      	movs	r5, #0
 80062dc:	f104 0619 	add.w	r6, r4, #25
 80062e0:	e7f5      	b.n	80062ce <_printf_i+0x222>
 80062e2:	bf00      	nop
 80062e4:	0800acf0 	.word	0x0800acf0
 80062e8:	0800ad01 	.word	0x0800ad01

080062ec <_scanf_float>:
 80062ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f0:	b087      	sub	sp, #28
 80062f2:	4617      	mov	r7, r2
 80062f4:	9303      	str	r3, [sp, #12]
 80062f6:	688b      	ldr	r3, [r1, #8]
 80062f8:	1e5a      	subs	r2, r3, #1
 80062fa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80062fe:	bf81      	itttt	hi
 8006300:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006304:	eb03 0b05 	addhi.w	fp, r3, r5
 8006308:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800630c:	608b      	strhi	r3, [r1, #8]
 800630e:	680b      	ldr	r3, [r1, #0]
 8006310:	460a      	mov	r2, r1
 8006312:	f04f 0500 	mov.w	r5, #0
 8006316:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800631a:	f842 3b1c 	str.w	r3, [r2], #28
 800631e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006322:	4680      	mov	r8, r0
 8006324:	460c      	mov	r4, r1
 8006326:	bf98      	it	ls
 8006328:	f04f 0b00 	movls.w	fp, #0
 800632c:	9201      	str	r2, [sp, #4]
 800632e:	4616      	mov	r6, r2
 8006330:	46aa      	mov	sl, r5
 8006332:	46a9      	mov	r9, r5
 8006334:	9502      	str	r5, [sp, #8]
 8006336:	68a2      	ldr	r2, [r4, #8]
 8006338:	b152      	cbz	r2, 8006350 <_scanf_float+0x64>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006340:	d864      	bhi.n	800640c <_scanf_float+0x120>
 8006342:	2b40      	cmp	r3, #64	@ 0x40
 8006344:	d83c      	bhi.n	80063c0 <_scanf_float+0xd4>
 8006346:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800634a:	b2c8      	uxtb	r0, r1
 800634c:	280e      	cmp	r0, #14
 800634e:	d93a      	bls.n	80063c6 <_scanf_float+0xda>
 8006350:	f1b9 0f00 	cmp.w	r9, #0
 8006354:	d003      	beq.n	800635e <_scanf_float+0x72>
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006362:	f1ba 0f01 	cmp.w	sl, #1
 8006366:	f200 8117 	bhi.w	8006598 <_scanf_float+0x2ac>
 800636a:	9b01      	ldr	r3, [sp, #4]
 800636c:	429e      	cmp	r6, r3
 800636e:	f200 8108 	bhi.w	8006582 <_scanf_float+0x296>
 8006372:	2001      	movs	r0, #1
 8006374:	b007      	add	sp, #28
 8006376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800637e:	2a0d      	cmp	r2, #13
 8006380:	d8e6      	bhi.n	8006350 <_scanf_float+0x64>
 8006382:	a101      	add	r1, pc, #4	@ (adr r1, 8006388 <_scanf_float+0x9c>)
 8006384:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006388:	080064cf 	.word	0x080064cf
 800638c:	08006351 	.word	0x08006351
 8006390:	08006351 	.word	0x08006351
 8006394:	08006351 	.word	0x08006351
 8006398:	0800652f 	.word	0x0800652f
 800639c:	08006507 	.word	0x08006507
 80063a0:	08006351 	.word	0x08006351
 80063a4:	08006351 	.word	0x08006351
 80063a8:	080064dd 	.word	0x080064dd
 80063ac:	08006351 	.word	0x08006351
 80063b0:	08006351 	.word	0x08006351
 80063b4:	08006351 	.word	0x08006351
 80063b8:	08006351 	.word	0x08006351
 80063bc:	08006495 	.word	0x08006495
 80063c0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80063c4:	e7db      	b.n	800637e <_scanf_float+0x92>
 80063c6:	290e      	cmp	r1, #14
 80063c8:	d8c2      	bhi.n	8006350 <_scanf_float+0x64>
 80063ca:	a001      	add	r0, pc, #4	@ (adr r0, 80063d0 <_scanf_float+0xe4>)
 80063cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80063d0:	08006485 	.word	0x08006485
 80063d4:	08006351 	.word	0x08006351
 80063d8:	08006485 	.word	0x08006485
 80063dc:	0800651b 	.word	0x0800651b
 80063e0:	08006351 	.word	0x08006351
 80063e4:	0800642d 	.word	0x0800642d
 80063e8:	0800646b 	.word	0x0800646b
 80063ec:	0800646b 	.word	0x0800646b
 80063f0:	0800646b 	.word	0x0800646b
 80063f4:	0800646b 	.word	0x0800646b
 80063f8:	0800646b 	.word	0x0800646b
 80063fc:	0800646b 	.word	0x0800646b
 8006400:	0800646b 	.word	0x0800646b
 8006404:	0800646b 	.word	0x0800646b
 8006408:	0800646b 	.word	0x0800646b
 800640c:	2b6e      	cmp	r3, #110	@ 0x6e
 800640e:	d809      	bhi.n	8006424 <_scanf_float+0x138>
 8006410:	2b60      	cmp	r3, #96	@ 0x60
 8006412:	d8b2      	bhi.n	800637a <_scanf_float+0x8e>
 8006414:	2b54      	cmp	r3, #84	@ 0x54
 8006416:	d07b      	beq.n	8006510 <_scanf_float+0x224>
 8006418:	2b59      	cmp	r3, #89	@ 0x59
 800641a:	d199      	bne.n	8006350 <_scanf_float+0x64>
 800641c:	2d07      	cmp	r5, #7
 800641e:	d197      	bne.n	8006350 <_scanf_float+0x64>
 8006420:	2508      	movs	r5, #8
 8006422:	e02c      	b.n	800647e <_scanf_float+0x192>
 8006424:	2b74      	cmp	r3, #116	@ 0x74
 8006426:	d073      	beq.n	8006510 <_scanf_float+0x224>
 8006428:	2b79      	cmp	r3, #121	@ 0x79
 800642a:	e7f6      	b.n	800641a <_scanf_float+0x12e>
 800642c:	6821      	ldr	r1, [r4, #0]
 800642e:	05c8      	lsls	r0, r1, #23
 8006430:	d51b      	bpl.n	800646a <_scanf_float+0x17e>
 8006432:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006436:	6021      	str	r1, [r4, #0]
 8006438:	f109 0901 	add.w	r9, r9, #1
 800643c:	f1bb 0f00 	cmp.w	fp, #0
 8006440:	d003      	beq.n	800644a <_scanf_float+0x15e>
 8006442:	3201      	adds	r2, #1
 8006444:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006448:	60a2      	str	r2, [r4, #8]
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	3b01      	subs	r3, #1
 800644e:	60a3      	str	r3, [r4, #8]
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	3301      	adds	r3, #1
 8006454:	6123      	str	r3, [r4, #16]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3b01      	subs	r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	607b      	str	r3, [r7, #4]
 800645e:	f340 8087 	ble.w	8006570 <_scanf_float+0x284>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	3301      	adds	r3, #1
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	e765      	b.n	8006336 <_scanf_float+0x4a>
 800646a:	eb1a 0105 	adds.w	r1, sl, r5
 800646e:	f47f af6f 	bne.w	8006350 <_scanf_float+0x64>
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006478:	6022      	str	r2, [r4, #0]
 800647a:	460d      	mov	r5, r1
 800647c:	468a      	mov	sl, r1
 800647e:	f806 3b01 	strb.w	r3, [r6], #1
 8006482:	e7e2      	b.n	800644a <_scanf_float+0x15e>
 8006484:	6822      	ldr	r2, [r4, #0]
 8006486:	0610      	lsls	r0, r2, #24
 8006488:	f57f af62 	bpl.w	8006350 <_scanf_float+0x64>
 800648c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006490:	6022      	str	r2, [r4, #0]
 8006492:	e7f4      	b.n	800647e <_scanf_float+0x192>
 8006494:	f1ba 0f00 	cmp.w	sl, #0
 8006498:	d10e      	bne.n	80064b8 <_scanf_float+0x1cc>
 800649a:	f1b9 0f00 	cmp.w	r9, #0
 800649e:	d10e      	bne.n	80064be <_scanf_float+0x1d2>
 80064a0:	6822      	ldr	r2, [r4, #0]
 80064a2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80064a6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80064aa:	d108      	bne.n	80064be <_scanf_float+0x1d2>
 80064ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80064b0:	6022      	str	r2, [r4, #0]
 80064b2:	f04f 0a01 	mov.w	sl, #1
 80064b6:	e7e2      	b.n	800647e <_scanf_float+0x192>
 80064b8:	f1ba 0f02 	cmp.w	sl, #2
 80064bc:	d055      	beq.n	800656a <_scanf_float+0x27e>
 80064be:	2d01      	cmp	r5, #1
 80064c0:	d002      	beq.n	80064c8 <_scanf_float+0x1dc>
 80064c2:	2d04      	cmp	r5, #4
 80064c4:	f47f af44 	bne.w	8006350 <_scanf_float+0x64>
 80064c8:	3501      	adds	r5, #1
 80064ca:	b2ed      	uxtb	r5, r5
 80064cc:	e7d7      	b.n	800647e <_scanf_float+0x192>
 80064ce:	f1ba 0f01 	cmp.w	sl, #1
 80064d2:	f47f af3d 	bne.w	8006350 <_scanf_float+0x64>
 80064d6:	f04f 0a02 	mov.w	sl, #2
 80064da:	e7d0      	b.n	800647e <_scanf_float+0x192>
 80064dc:	b97d      	cbnz	r5, 80064fe <_scanf_float+0x212>
 80064de:	f1b9 0f00 	cmp.w	r9, #0
 80064e2:	f47f af38 	bne.w	8006356 <_scanf_float+0x6a>
 80064e6:	6822      	ldr	r2, [r4, #0]
 80064e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80064ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80064f0:	f040 8108 	bne.w	8006704 <_scanf_float+0x418>
 80064f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80064f8:	6022      	str	r2, [r4, #0]
 80064fa:	2501      	movs	r5, #1
 80064fc:	e7bf      	b.n	800647e <_scanf_float+0x192>
 80064fe:	2d03      	cmp	r5, #3
 8006500:	d0e2      	beq.n	80064c8 <_scanf_float+0x1dc>
 8006502:	2d05      	cmp	r5, #5
 8006504:	e7de      	b.n	80064c4 <_scanf_float+0x1d8>
 8006506:	2d02      	cmp	r5, #2
 8006508:	f47f af22 	bne.w	8006350 <_scanf_float+0x64>
 800650c:	2503      	movs	r5, #3
 800650e:	e7b6      	b.n	800647e <_scanf_float+0x192>
 8006510:	2d06      	cmp	r5, #6
 8006512:	f47f af1d 	bne.w	8006350 <_scanf_float+0x64>
 8006516:	2507      	movs	r5, #7
 8006518:	e7b1      	b.n	800647e <_scanf_float+0x192>
 800651a:	6822      	ldr	r2, [r4, #0]
 800651c:	0591      	lsls	r1, r2, #22
 800651e:	f57f af17 	bpl.w	8006350 <_scanf_float+0x64>
 8006522:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006526:	6022      	str	r2, [r4, #0]
 8006528:	f8cd 9008 	str.w	r9, [sp, #8]
 800652c:	e7a7      	b.n	800647e <_scanf_float+0x192>
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006534:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006538:	d006      	beq.n	8006548 <_scanf_float+0x25c>
 800653a:	0550      	lsls	r0, r2, #21
 800653c:	f57f af08 	bpl.w	8006350 <_scanf_float+0x64>
 8006540:	f1b9 0f00 	cmp.w	r9, #0
 8006544:	f000 80de 	beq.w	8006704 <_scanf_float+0x418>
 8006548:	0591      	lsls	r1, r2, #22
 800654a:	bf58      	it	pl
 800654c:	9902      	ldrpl	r1, [sp, #8]
 800654e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006552:	bf58      	it	pl
 8006554:	eba9 0101 	subpl.w	r1, r9, r1
 8006558:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800655c:	bf58      	it	pl
 800655e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006562:	6022      	str	r2, [r4, #0]
 8006564:	f04f 0900 	mov.w	r9, #0
 8006568:	e789      	b.n	800647e <_scanf_float+0x192>
 800656a:	f04f 0a03 	mov.w	sl, #3
 800656e:	e786      	b.n	800647e <_scanf_float+0x192>
 8006570:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006574:	4639      	mov	r1, r7
 8006576:	4640      	mov	r0, r8
 8006578:	4798      	blx	r3
 800657a:	2800      	cmp	r0, #0
 800657c:	f43f aedb 	beq.w	8006336 <_scanf_float+0x4a>
 8006580:	e6e6      	b.n	8006350 <_scanf_float+0x64>
 8006582:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006586:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800658a:	463a      	mov	r2, r7
 800658c:	4640      	mov	r0, r8
 800658e:	4798      	blx	r3
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	3b01      	subs	r3, #1
 8006594:	6123      	str	r3, [r4, #16]
 8006596:	e6e8      	b.n	800636a <_scanf_float+0x7e>
 8006598:	1e6b      	subs	r3, r5, #1
 800659a:	2b06      	cmp	r3, #6
 800659c:	d824      	bhi.n	80065e8 <_scanf_float+0x2fc>
 800659e:	2d02      	cmp	r5, #2
 80065a0:	d836      	bhi.n	8006610 <_scanf_float+0x324>
 80065a2:	9b01      	ldr	r3, [sp, #4]
 80065a4:	429e      	cmp	r6, r3
 80065a6:	f67f aee4 	bls.w	8006372 <_scanf_float+0x86>
 80065aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065b2:	463a      	mov	r2, r7
 80065b4:	4640      	mov	r0, r8
 80065b6:	4798      	blx	r3
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	6123      	str	r3, [r4, #16]
 80065be:	e7f0      	b.n	80065a2 <_scanf_float+0x2b6>
 80065c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065c4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80065c8:	463a      	mov	r2, r7
 80065ca:	4640      	mov	r0, r8
 80065cc:	4798      	blx	r3
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065d8:	fa5f fa8a 	uxtb.w	sl, sl
 80065dc:	f1ba 0f02 	cmp.w	sl, #2
 80065e0:	d1ee      	bne.n	80065c0 <_scanf_float+0x2d4>
 80065e2:	3d03      	subs	r5, #3
 80065e4:	b2ed      	uxtb	r5, r5
 80065e6:	1b76      	subs	r6, r6, r5
 80065e8:	6823      	ldr	r3, [r4, #0]
 80065ea:	05da      	lsls	r2, r3, #23
 80065ec:	d530      	bpl.n	8006650 <_scanf_float+0x364>
 80065ee:	055b      	lsls	r3, r3, #21
 80065f0:	d511      	bpl.n	8006616 <_scanf_float+0x32a>
 80065f2:	9b01      	ldr	r3, [sp, #4]
 80065f4:	429e      	cmp	r6, r3
 80065f6:	f67f aebc 	bls.w	8006372 <_scanf_float+0x86>
 80065fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006602:	463a      	mov	r2, r7
 8006604:	4640      	mov	r0, r8
 8006606:	4798      	blx	r3
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	3b01      	subs	r3, #1
 800660c:	6123      	str	r3, [r4, #16]
 800660e:	e7f0      	b.n	80065f2 <_scanf_float+0x306>
 8006610:	46aa      	mov	sl, r5
 8006612:	46b3      	mov	fp, r6
 8006614:	e7de      	b.n	80065d4 <_scanf_float+0x2e8>
 8006616:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	2965      	cmp	r1, #101	@ 0x65
 800661e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006622:	f106 35ff 	add.w	r5, r6, #4294967295
 8006626:	6123      	str	r3, [r4, #16]
 8006628:	d00c      	beq.n	8006644 <_scanf_float+0x358>
 800662a:	2945      	cmp	r1, #69	@ 0x45
 800662c:	d00a      	beq.n	8006644 <_scanf_float+0x358>
 800662e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006632:	463a      	mov	r2, r7
 8006634:	4640      	mov	r0, r8
 8006636:	4798      	blx	r3
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800663e:	3b01      	subs	r3, #1
 8006640:	1eb5      	subs	r5, r6, #2
 8006642:	6123      	str	r3, [r4, #16]
 8006644:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006648:	463a      	mov	r2, r7
 800664a:	4640      	mov	r0, r8
 800664c:	4798      	blx	r3
 800664e:	462e      	mov	r6, r5
 8006650:	6822      	ldr	r2, [r4, #0]
 8006652:	f012 0210 	ands.w	r2, r2, #16
 8006656:	d001      	beq.n	800665c <_scanf_float+0x370>
 8006658:	2000      	movs	r0, #0
 800665a:	e68b      	b.n	8006374 <_scanf_float+0x88>
 800665c:	7032      	strb	r2, [r6, #0]
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006668:	d11c      	bne.n	80066a4 <_scanf_float+0x3b8>
 800666a:	9b02      	ldr	r3, [sp, #8]
 800666c:	454b      	cmp	r3, r9
 800666e:	eba3 0209 	sub.w	r2, r3, r9
 8006672:	d123      	bne.n	80066bc <_scanf_float+0x3d0>
 8006674:	9901      	ldr	r1, [sp, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	4640      	mov	r0, r8
 800667a:	f002 fc35 	bl	8008ee8 <_strtod_r>
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	6821      	ldr	r1, [r4, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f011 0f02 	tst.w	r1, #2
 8006688:	ec57 6b10 	vmov	r6, r7, d0
 800668c:	f103 0204 	add.w	r2, r3, #4
 8006690:	d01f      	beq.n	80066d2 <_scanf_float+0x3e6>
 8006692:	9903      	ldr	r1, [sp, #12]
 8006694:	600a      	str	r2, [r1, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	e9c3 6700 	strd	r6, r7, [r3]
 800669c:	68e3      	ldr	r3, [r4, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60e3      	str	r3, [r4, #12]
 80066a2:	e7d9      	b.n	8006658 <_scanf_float+0x36c>
 80066a4:	9b04      	ldr	r3, [sp, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0e4      	beq.n	8006674 <_scanf_float+0x388>
 80066aa:	9905      	ldr	r1, [sp, #20]
 80066ac:	230a      	movs	r3, #10
 80066ae:	3101      	adds	r1, #1
 80066b0:	4640      	mov	r0, r8
 80066b2:	f002 fc99 	bl	8008fe8 <_strtol_r>
 80066b6:	9b04      	ldr	r3, [sp, #16]
 80066b8:	9e05      	ldr	r6, [sp, #20]
 80066ba:	1ac2      	subs	r2, r0, r3
 80066bc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80066c0:	429e      	cmp	r6, r3
 80066c2:	bf28      	it	cs
 80066c4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80066c8:	4910      	ldr	r1, [pc, #64]	@ (800670c <_scanf_float+0x420>)
 80066ca:	4630      	mov	r0, r6
 80066cc:	f000 f8e4 	bl	8006898 <siprintf>
 80066d0:	e7d0      	b.n	8006674 <_scanf_float+0x388>
 80066d2:	f011 0f04 	tst.w	r1, #4
 80066d6:	9903      	ldr	r1, [sp, #12]
 80066d8:	600a      	str	r2, [r1, #0]
 80066da:	d1dc      	bne.n	8006696 <_scanf_float+0x3aa>
 80066dc:	681d      	ldr	r5, [r3, #0]
 80066de:	4632      	mov	r2, r6
 80066e0:	463b      	mov	r3, r7
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7fa fa29 	bl	8000b3c <__aeabi_dcmpun>
 80066ea:	b128      	cbz	r0, 80066f8 <_scanf_float+0x40c>
 80066ec:	4808      	ldr	r0, [pc, #32]	@ (8006710 <_scanf_float+0x424>)
 80066ee:	f000 f9f5 	bl	8006adc <nanf>
 80066f2:	ed85 0a00 	vstr	s0, [r5]
 80066f6:	e7d1      	b.n	800669c <_scanf_float+0x3b0>
 80066f8:	4630      	mov	r0, r6
 80066fa:	4639      	mov	r1, r7
 80066fc:	f7fa fa7c 	bl	8000bf8 <__aeabi_d2f>
 8006700:	6028      	str	r0, [r5, #0]
 8006702:	e7cb      	b.n	800669c <_scanf_float+0x3b0>
 8006704:	f04f 0900 	mov.w	r9, #0
 8006708:	e629      	b.n	800635e <_scanf_float+0x72>
 800670a:	bf00      	nop
 800670c:	0800ad12 	.word	0x0800ad12
 8006710:	0800b0c8 	.word	0x0800b0c8

08006714 <std>:
 8006714:	2300      	movs	r3, #0
 8006716:	b510      	push	{r4, lr}
 8006718:	4604      	mov	r4, r0
 800671a:	e9c0 3300 	strd	r3, r3, [r0]
 800671e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006722:	6083      	str	r3, [r0, #8]
 8006724:	8181      	strh	r1, [r0, #12]
 8006726:	6643      	str	r3, [r0, #100]	@ 0x64
 8006728:	81c2      	strh	r2, [r0, #14]
 800672a:	6183      	str	r3, [r0, #24]
 800672c:	4619      	mov	r1, r3
 800672e:	2208      	movs	r2, #8
 8006730:	305c      	adds	r0, #92	@ 0x5c
 8006732:	f000 f940 	bl	80069b6 <memset>
 8006736:	4b0d      	ldr	r3, [pc, #52]	@ (800676c <std+0x58>)
 8006738:	6263      	str	r3, [r4, #36]	@ 0x24
 800673a:	4b0d      	ldr	r3, [pc, #52]	@ (8006770 <std+0x5c>)
 800673c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800673e:	4b0d      	ldr	r3, [pc, #52]	@ (8006774 <std+0x60>)
 8006740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006742:	4b0d      	ldr	r3, [pc, #52]	@ (8006778 <std+0x64>)
 8006744:	6323      	str	r3, [r4, #48]	@ 0x30
 8006746:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <std+0x68>)
 8006748:	6224      	str	r4, [r4, #32]
 800674a:	429c      	cmp	r4, r3
 800674c:	d006      	beq.n	800675c <std+0x48>
 800674e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006752:	4294      	cmp	r4, r2
 8006754:	d002      	beq.n	800675c <std+0x48>
 8006756:	33d0      	adds	r3, #208	@ 0xd0
 8006758:	429c      	cmp	r4, r3
 800675a:	d105      	bne.n	8006768 <std+0x54>
 800675c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	f000 b9b6 	b.w	8006ad4 <__retarget_lock_init_recursive>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	bf00      	nop
 800676c:	0800692d 	.word	0x0800692d
 8006770:	08006953 	.word	0x08006953
 8006774:	0800698b 	.word	0x0800698b
 8006778:	080069af 	.word	0x080069af
 800677c:	20000468 	.word	0x20000468

08006780 <stdio_exit_handler>:
 8006780:	4a02      	ldr	r2, [pc, #8]	@ (800678c <stdio_exit_handler+0xc>)
 8006782:	4903      	ldr	r1, [pc, #12]	@ (8006790 <stdio_exit_handler+0x10>)
 8006784:	4803      	ldr	r0, [pc, #12]	@ (8006794 <stdio_exit_handler+0x14>)
 8006786:	f000 b869 	b.w	800685c <_fwalk_sglue>
 800678a:	bf00      	nop
 800678c:	20000030 	.word	0x20000030
 8006790:	080099d9 	.word	0x080099d9
 8006794:	20000040 	.word	0x20000040

08006798 <cleanup_stdio>:
 8006798:	6841      	ldr	r1, [r0, #4]
 800679a:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <cleanup_stdio+0x34>)
 800679c:	4299      	cmp	r1, r3
 800679e:	b510      	push	{r4, lr}
 80067a0:	4604      	mov	r4, r0
 80067a2:	d001      	beq.n	80067a8 <cleanup_stdio+0x10>
 80067a4:	f003 f918 	bl	80099d8 <_fflush_r>
 80067a8:	68a1      	ldr	r1, [r4, #8]
 80067aa:	4b09      	ldr	r3, [pc, #36]	@ (80067d0 <cleanup_stdio+0x38>)
 80067ac:	4299      	cmp	r1, r3
 80067ae:	d002      	beq.n	80067b6 <cleanup_stdio+0x1e>
 80067b0:	4620      	mov	r0, r4
 80067b2:	f003 f911 	bl	80099d8 <_fflush_r>
 80067b6:	68e1      	ldr	r1, [r4, #12]
 80067b8:	4b06      	ldr	r3, [pc, #24]	@ (80067d4 <cleanup_stdio+0x3c>)
 80067ba:	4299      	cmp	r1, r3
 80067bc:	d004      	beq.n	80067c8 <cleanup_stdio+0x30>
 80067be:	4620      	mov	r0, r4
 80067c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c4:	f003 b908 	b.w	80099d8 <_fflush_r>
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	bf00      	nop
 80067cc:	20000468 	.word	0x20000468
 80067d0:	200004d0 	.word	0x200004d0
 80067d4:	20000538 	.word	0x20000538

080067d8 <global_stdio_init.part.0>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <global_stdio_init.part.0+0x30>)
 80067dc:	4c0b      	ldr	r4, [pc, #44]	@ (800680c <global_stdio_init.part.0+0x34>)
 80067de:	4a0c      	ldr	r2, [pc, #48]	@ (8006810 <global_stdio_init.part.0+0x38>)
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	4620      	mov	r0, r4
 80067e4:	2200      	movs	r2, #0
 80067e6:	2104      	movs	r1, #4
 80067e8:	f7ff ff94 	bl	8006714 <std>
 80067ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067f0:	2201      	movs	r2, #1
 80067f2:	2109      	movs	r1, #9
 80067f4:	f7ff ff8e 	bl	8006714 <std>
 80067f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067fc:	2202      	movs	r2, #2
 80067fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006802:	2112      	movs	r1, #18
 8006804:	f7ff bf86 	b.w	8006714 <std>
 8006808:	200005a0 	.word	0x200005a0
 800680c:	20000468 	.word	0x20000468
 8006810:	08006781 	.word	0x08006781

08006814 <__sfp_lock_acquire>:
 8006814:	4801      	ldr	r0, [pc, #4]	@ (800681c <__sfp_lock_acquire+0x8>)
 8006816:	f000 b95e 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 800681a:	bf00      	nop
 800681c:	200005a9 	.word	0x200005a9

08006820 <__sfp_lock_release>:
 8006820:	4801      	ldr	r0, [pc, #4]	@ (8006828 <__sfp_lock_release+0x8>)
 8006822:	f000 b959 	b.w	8006ad8 <__retarget_lock_release_recursive>
 8006826:	bf00      	nop
 8006828:	200005a9 	.word	0x200005a9

0800682c <__sinit>:
 800682c:	b510      	push	{r4, lr}
 800682e:	4604      	mov	r4, r0
 8006830:	f7ff fff0 	bl	8006814 <__sfp_lock_acquire>
 8006834:	6a23      	ldr	r3, [r4, #32]
 8006836:	b11b      	cbz	r3, 8006840 <__sinit+0x14>
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	f7ff bff0 	b.w	8006820 <__sfp_lock_release>
 8006840:	4b04      	ldr	r3, [pc, #16]	@ (8006854 <__sinit+0x28>)
 8006842:	6223      	str	r3, [r4, #32]
 8006844:	4b04      	ldr	r3, [pc, #16]	@ (8006858 <__sinit+0x2c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f5      	bne.n	8006838 <__sinit+0xc>
 800684c:	f7ff ffc4 	bl	80067d8 <global_stdio_init.part.0>
 8006850:	e7f2      	b.n	8006838 <__sinit+0xc>
 8006852:	bf00      	nop
 8006854:	08006799 	.word	0x08006799
 8006858:	200005a0 	.word	0x200005a0

0800685c <_fwalk_sglue>:
 800685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006860:	4607      	mov	r7, r0
 8006862:	4688      	mov	r8, r1
 8006864:	4614      	mov	r4, r2
 8006866:	2600      	movs	r6, #0
 8006868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800686c:	f1b9 0901 	subs.w	r9, r9, #1
 8006870:	d505      	bpl.n	800687e <_fwalk_sglue+0x22>
 8006872:	6824      	ldr	r4, [r4, #0]
 8006874:	2c00      	cmp	r4, #0
 8006876:	d1f7      	bne.n	8006868 <_fwalk_sglue+0xc>
 8006878:	4630      	mov	r0, r6
 800687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687e:	89ab      	ldrh	r3, [r5, #12]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d907      	bls.n	8006894 <_fwalk_sglue+0x38>
 8006884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006888:	3301      	adds	r3, #1
 800688a:	d003      	beq.n	8006894 <_fwalk_sglue+0x38>
 800688c:	4629      	mov	r1, r5
 800688e:	4638      	mov	r0, r7
 8006890:	47c0      	blx	r8
 8006892:	4306      	orrs	r6, r0
 8006894:	3568      	adds	r5, #104	@ 0x68
 8006896:	e7e9      	b.n	800686c <_fwalk_sglue+0x10>

08006898 <siprintf>:
 8006898:	b40e      	push	{r1, r2, r3}
 800689a:	b500      	push	{lr}
 800689c:	b09c      	sub	sp, #112	@ 0x70
 800689e:	ab1d      	add	r3, sp, #116	@ 0x74
 80068a0:	9002      	str	r0, [sp, #8]
 80068a2:	9006      	str	r0, [sp, #24]
 80068a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068a8:	4809      	ldr	r0, [pc, #36]	@ (80068d0 <siprintf+0x38>)
 80068aa:	9107      	str	r1, [sp, #28]
 80068ac:	9104      	str	r1, [sp, #16]
 80068ae:	4909      	ldr	r1, [pc, #36]	@ (80068d4 <siprintf+0x3c>)
 80068b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b4:	9105      	str	r1, [sp, #20]
 80068b6:	6800      	ldr	r0, [r0, #0]
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	a902      	add	r1, sp, #8
 80068bc:	f002 fbf2 	bl	80090a4 <_svfiprintf_r>
 80068c0:	9b02      	ldr	r3, [sp, #8]
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	b01c      	add	sp, #112	@ 0x70
 80068c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80068cc:	b003      	add	sp, #12
 80068ce:	4770      	bx	lr
 80068d0:	2000003c 	.word	0x2000003c
 80068d4:	ffff0208 	.word	0xffff0208

080068d8 <siscanf>:
 80068d8:	b40e      	push	{r1, r2, r3}
 80068da:	b530      	push	{r4, r5, lr}
 80068dc:	b09c      	sub	sp, #112	@ 0x70
 80068de:	ac1f      	add	r4, sp, #124	@ 0x7c
 80068e0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80068e4:	f854 5b04 	ldr.w	r5, [r4], #4
 80068e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80068ec:	9002      	str	r0, [sp, #8]
 80068ee:	9006      	str	r0, [sp, #24]
 80068f0:	f7f9 fcc6 	bl	8000280 <strlen>
 80068f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <siscanf+0x4c>)
 80068f6:	9003      	str	r0, [sp, #12]
 80068f8:	9007      	str	r0, [sp, #28]
 80068fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068fc:	480a      	ldr	r0, [pc, #40]	@ (8006928 <siscanf+0x50>)
 80068fe:	9401      	str	r4, [sp, #4]
 8006900:	2300      	movs	r3, #0
 8006902:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006904:	9314      	str	r3, [sp, #80]	@ 0x50
 8006906:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800690a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800690e:	462a      	mov	r2, r5
 8006910:	4623      	mov	r3, r4
 8006912:	a902      	add	r1, sp, #8
 8006914:	6800      	ldr	r0, [r0, #0]
 8006916:	f002 fd19 	bl	800934c <__ssvfiscanf_r>
 800691a:	b01c      	add	sp, #112	@ 0x70
 800691c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006920:	b003      	add	sp, #12
 8006922:	4770      	bx	lr
 8006924:	0800694f 	.word	0x0800694f
 8006928:	2000003c 	.word	0x2000003c

0800692c <__sread>:
 800692c:	b510      	push	{r4, lr}
 800692e:	460c      	mov	r4, r1
 8006930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006934:	f000 f880 	bl	8006a38 <_read_r>
 8006938:	2800      	cmp	r0, #0
 800693a:	bfab      	itete	ge
 800693c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800693e:	89a3      	ldrhlt	r3, [r4, #12]
 8006940:	181b      	addge	r3, r3, r0
 8006942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006946:	bfac      	ite	ge
 8006948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800694a:	81a3      	strhlt	r3, [r4, #12]
 800694c:	bd10      	pop	{r4, pc}

0800694e <__seofread>:
 800694e:	2000      	movs	r0, #0
 8006950:	4770      	bx	lr

08006952 <__swrite>:
 8006952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006956:	461f      	mov	r7, r3
 8006958:	898b      	ldrh	r3, [r1, #12]
 800695a:	05db      	lsls	r3, r3, #23
 800695c:	4605      	mov	r5, r0
 800695e:	460c      	mov	r4, r1
 8006960:	4616      	mov	r6, r2
 8006962:	d505      	bpl.n	8006970 <__swrite+0x1e>
 8006964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006968:	2302      	movs	r3, #2
 800696a:	2200      	movs	r2, #0
 800696c:	f000 f852 	bl	8006a14 <_lseek_r>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800697a:	81a3      	strh	r3, [r4, #12]
 800697c:	4632      	mov	r2, r6
 800697e:	463b      	mov	r3, r7
 8006980:	4628      	mov	r0, r5
 8006982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006986:	f000 b869 	b.w	8006a5c <_write_r>

0800698a <__sseek>:
 800698a:	b510      	push	{r4, lr}
 800698c:	460c      	mov	r4, r1
 800698e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006992:	f000 f83f 	bl	8006a14 <_lseek_r>
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	bf15      	itete	ne
 800699c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800699e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069a6:	81a3      	strheq	r3, [r4, #12]
 80069a8:	bf18      	it	ne
 80069aa:	81a3      	strhne	r3, [r4, #12]
 80069ac:	bd10      	pop	{r4, pc}

080069ae <__sclose>:
 80069ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b2:	f000 b81f 	b.w	80069f4 <_close_r>

080069b6 <memset>:
 80069b6:	4402      	add	r2, r0
 80069b8:	4603      	mov	r3, r0
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d100      	bne.n	80069c0 <memset+0xa>
 80069be:	4770      	bx	lr
 80069c0:	f803 1b01 	strb.w	r1, [r3], #1
 80069c4:	e7f9      	b.n	80069ba <memset+0x4>

080069c6 <strncmp>:
 80069c6:	b510      	push	{r4, lr}
 80069c8:	b16a      	cbz	r2, 80069e6 <strncmp+0x20>
 80069ca:	3901      	subs	r1, #1
 80069cc:	1884      	adds	r4, r0, r2
 80069ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d103      	bne.n	80069e2 <strncmp+0x1c>
 80069da:	42a0      	cmp	r0, r4
 80069dc:	d001      	beq.n	80069e2 <strncmp+0x1c>
 80069de:	2a00      	cmp	r2, #0
 80069e0:	d1f5      	bne.n	80069ce <strncmp+0x8>
 80069e2:	1ad0      	subs	r0, r2, r3
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	4610      	mov	r0, r2
 80069e8:	e7fc      	b.n	80069e4 <strncmp+0x1e>
	...

080069ec <_localeconv_r>:
 80069ec:	4800      	ldr	r0, [pc, #0]	@ (80069f0 <_localeconv_r+0x4>)
 80069ee:	4770      	bx	lr
 80069f0:	2000017c 	.word	0x2000017c

080069f4 <_close_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d06      	ldr	r5, [pc, #24]	@ (8006a10 <_close_r+0x1c>)
 80069f8:	2300      	movs	r3, #0
 80069fa:	4604      	mov	r4, r0
 80069fc:	4608      	mov	r0, r1
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	f7fb f93c 	bl	8001c7c <_close>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_close_r+0x1a>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_close_r+0x1a>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	200005a4 	.word	0x200005a4

08006a14 <_lseek_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	4d07      	ldr	r5, [pc, #28]	@ (8006a34 <_lseek_r+0x20>)
 8006a18:	4604      	mov	r4, r0
 8006a1a:	4608      	mov	r0, r1
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	2200      	movs	r2, #0
 8006a20:	602a      	str	r2, [r5, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	f7fb f951 	bl	8001cca <_lseek>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d102      	bne.n	8006a32 <_lseek_r+0x1e>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b103      	cbz	r3, 8006a32 <_lseek_r+0x1e>
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	200005a4 	.word	0x200005a4

08006a38 <_read_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4d07      	ldr	r5, [pc, #28]	@ (8006a58 <_read_r+0x20>)
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	4608      	mov	r0, r1
 8006a40:	4611      	mov	r1, r2
 8006a42:	2200      	movs	r2, #0
 8006a44:	602a      	str	r2, [r5, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	f7fb f8df 	bl	8001c0a <_read>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d102      	bne.n	8006a56 <_read_r+0x1e>
 8006a50:	682b      	ldr	r3, [r5, #0]
 8006a52:	b103      	cbz	r3, 8006a56 <_read_r+0x1e>
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	bd38      	pop	{r3, r4, r5, pc}
 8006a58:	200005a4 	.word	0x200005a4

08006a5c <_write_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4d07      	ldr	r5, [pc, #28]	@ (8006a7c <_write_r+0x20>)
 8006a60:	4604      	mov	r4, r0
 8006a62:	4608      	mov	r0, r1
 8006a64:	4611      	mov	r1, r2
 8006a66:	2200      	movs	r2, #0
 8006a68:	602a      	str	r2, [r5, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f7fb f8ea 	bl	8001c44 <_write>
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d102      	bne.n	8006a7a <_write_r+0x1e>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	b103      	cbz	r3, 8006a7a <_write_r+0x1e>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
 8006a7c:	200005a4 	.word	0x200005a4

08006a80 <__errno>:
 8006a80:	4b01      	ldr	r3, [pc, #4]	@ (8006a88 <__errno+0x8>)
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	2000003c 	.word	0x2000003c

08006a8c <__libc_init_array>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006ac4 <__libc_init_array+0x38>)
 8006a90:	4c0d      	ldr	r4, [pc, #52]	@ (8006ac8 <__libc_init_array+0x3c>)
 8006a92:	1b64      	subs	r4, r4, r5
 8006a94:	10a4      	asrs	r4, r4, #2
 8006a96:	2600      	movs	r6, #0
 8006a98:	42a6      	cmp	r6, r4
 8006a9a:	d109      	bne.n	8006ab0 <__libc_init_array+0x24>
 8006a9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006acc <__libc_init_array+0x40>)
 8006a9e:	4c0c      	ldr	r4, [pc, #48]	@ (8006ad0 <__libc_init_array+0x44>)
 8006aa0:	f004 f8dc 	bl	800ac5c <_init>
 8006aa4:	1b64      	subs	r4, r4, r5
 8006aa6:	10a4      	asrs	r4, r4, #2
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	42a6      	cmp	r6, r4
 8006aac:	d105      	bne.n	8006aba <__libc_init_array+0x2e>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab4:	4798      	blx	r3
 8006ab6:	3601      	adds	r6, #1
 8006ab8:	e7ee      	b.n	8006a98 <__libc_init_array+0xc>
 8006aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006abe:	4798      	blx	r3
 8006ac0:	3601      	adds	r6, #1
 8006ac2:	e7f2      	b.n	8006aaa <__libc_init_array+0x1e>
 8006ac4:	0800b16c 	.word	0x0800b16c
 8006ac8:	0800b16c 	.word	0x0800b16c
 8006acc:	0800b16c 	.word	0x0800b16c
 8006ad0:	0800b170 	.word	0x0800b170

08006ad4 <__retarget_lock_init_recursive>:
 8006ad4:	4770      	bx	lr

08006ad6 <__retarget_lock_acquire_recursive>:
 8006ad6:	4770      	bx	lr

08006ad8 <__retarget_lock_release_recursive>:
 8006ad8:	4770      	bx	lr
	...

08006adc <nanf>:
 8006adc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006ae4 <nanf+0x8>
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	7fc00000 	.word	0x7fc00000

08006ae8 <quorem>:
 8006ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	6903      	ldr	r3, [r0, #16]
 8006aee:	690c      	ldr	r4, [r1, #16]
 8006af0:	42a3      	cmp	r3, r4
 8006af2:	4607      	mov	r7, r0
 8006af4:	db7e      	blt.n	8006bf4 <quorem+0x10c>
 8006af6:	3c01      	subs	r4, #1
 8006af8:	f101 0814 	add.w	r8, r1, #20
 8006afc:	00a3      	lsls	r3, r4, #2
 8006afe:	f100 0514 	add.w	r5, r0, #20
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b12:	3301      	adds	r3, #1
 8006b14:	429a      	cmp	r2, r3
 8006b16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b1e:	d32e      	bcc.n	8006b7e <quorem+0x96>
 8006b20:	f04f 0a00 	mov.w	sl, #0
 8006b24:	46c4      	mov	ip, r8
 8006b26:	46ae      	mov	lr, r5
 8006b28:	46d3      	mov	fp, sl
 8006b2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b2e:	b298      	uxth	r0, r3
 8006b30:	fb06 a000 	mla	r0, r6, r0, sl
 8006b34:	0c02      	lsrs	r2, r0, #16
 8006b36:	0c1b      	lsrs	r3, r3, #16
 8006b38:	fb06 2303 	mla	r3, r6, r3, r2
 8006b3c:	f8de 2000 	ldr.w	r2, [lr]
 8006b40:	b280      	uxth	r0, r0
 8006b42:	b292      	uxth	r2, r2
 8006b44:	1a12      	subs	r2, r2, r0
 8006b46:	445a      	add	r2, fp
 8006b48:	f8de 0000 	ldr.w	r0, [lr]
 8006b4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b5a:	b292      	uxth	r2, r2
 8006b5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b60:	45e1      	cmp	r9, ip
 8006b62:	f84e 2b04 	str.w	r2, [lr], #4
 8006b66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b6a:	d2de      	bcs.n	8006b2a <quorem+0x42>
 8006b6c:	9b00      	ldr	r3, [sp, #0]
 8006b6e:	58eb      	ldr	r3, [r5, r3]
 8006b70:	b92b      	cbnz	r3, 8006b7e <quorem+0x96>
 8006b72:	9b01      	ldr	r3, [sp, #4]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	429d      	cmp	r5, r3
 8006b78:	461a      	mov	r2, r3
 8006b7a:	d32f      	bcc.n	8006bdc <quorem+0xf4>
 8006b7c:	613c      	str	r4, [r7, #16]
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f001 f9c2 	bl	8007f08 <__mcmp>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	db25      	blt.n	8006bd4 <quorem+0xec>
 8006b88:	4629      	mov	r1, r5
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b90:	f8d1 c000 	ldr.w	ip, [r1]
 8006b94:	fa1f fe82 	uxth.w	lr, r2
 8006b98:	fa1f f38c 	uxth.w	r3, ip
 8006b9c:	eba3 030e 	sub.w	r3, r3, lr
 8006ba0:	4403      	add	r3, r0
 8006ba2:	0c12      	lsrs	r2, r2, #16
 8006ba4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ba8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bb2:	45c1      	cmp	r9, r8
 8006bb4:	f841 3b04 	str.w	r3, [r1], #4
 8006bb8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bbc:	d2e6      	bcs.n	8006b8c <quorem+0xa4>
 8006bbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bc6:	b922      	cbnz	r2, 8006bd2 <quorem+0xea>
 8006bc8:	3b04      	subs	r3, #4
 8006bca:	429d      	cmp	r5, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	d30b      	bcc.n	8006be8 <quorem+0x100>
 8006bd0:	613c      	str	r4, [r7, #16]
 8006bd2:	3601      	adds	r6, #1
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	b003      	add	sp, #12
 8006bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bdc:	6812      	ldr	r2, [r2, #0]
 8006bde:	3b04      	subs	r3, #4
 8006be0:	2a00      	cmp	r2, #0
 8006be2:	d1cb      	bne.n	8006b7c <quorem+0x94>
 8006be4:	3c01      	subs	r4, #1
 8006be6:	e7c6      	b.n	8006b76 <quorem+0x8e>
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	3b04      	subs	r3, #4
 8006bec:	2a00      	cmp	r2, #0
 8006bee:	d1ef      	bne.n	8006bd0 <quorem+0xe8>
 8006bf0:	3c01      	subs	r4, #1
 8006bf2:	e7ea      	b.n	8006bca <quorem+0xe2>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	e7ee      	b.n	8006bd6 <quorem+0xee>

08006bf8 <_dtoa_r>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	69c7      	ldr	r7, [r0, #28]
 8006bfe:	b099      	sub	sp, #100	@ 0x64
 8006c00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c04:	ec55 4b10 	vmov	r4, r5, d0
 8006c08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006c0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c0c:	4683      	mov	fp, r0
 8006c0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c12:	b97f      	cbnz	r7, 8006c34 <_dtoa_r+0x3c>
 8006c14:	2010      	movs	r0, #16
 8006c16:	f000 fdfd 	bl	8007814 <malloc>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c20:	b920      	cbnz	r0, 8006c2c <_dtoa_r+0x34>
 8006c22:	4ba7      	ldr	r3, [pc, #668]	@ (8006ec0 <_dtoa_r+0x2c8>)
 8006c24:	21ef      	movs	r1, #239	@ 0xef
 8006c26:	48a7      	ldr	r0, [pc, #668]	@ (8006ec4 <_dtoa_r+0x2cc>)
 8006c28:	f002 ffb2 	bl	8009b90 <__assert_func>
 8006c2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c30:	6007      	str	r7, [r0, #0]
 8006c32:	60c7      	str	r7, [r0, #12]
 8006c34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c38:	6819      	ldr	r1, [r3, #0]
 8006c3a:	b159      	cbz	r1, 8006c54 <_dtoa_r+0x5c>
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	604a      	str	r2, [r1, #4]
 8006c40:	2301      	movs	r3, #1
 8006c42:	4093      	lsls	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
 8006c46:	4658      	mov	r0, fp
 8006c48:	f000 feda 	bl	8007a00 <_Bfree>
 8006c4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	1e2b      	subs	r3, r5, #0
 8006c56:	bfb9      	ittee	lt
 8006c58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c5c:	9303      	strlt	r3, [sp, #12]
 8006c5e:	2300      	movge	r3, #0
 8006c60:	6033      	strge	r3, [r6, #0]
 8006c62:	9f03      	ldr	r7, [sp, #12]
 8006c64:	4b98      	ldr	r3, [pc, #608]	@ (8006ec8 <_dtoa_r+0x2d0>)
 8006c66:	bfbc      	itt	lt
 8006c68:	2201      	movlt	r2, #1
 8006c6a:	6032      	strlt	r2, [r6, #0]
 8006c6c:	43bb      	bics	r3, r7
 8006c6e:	d112      	bne.n	8006c96 <_dtoa_r+0x9e>
 8006c70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c7c:	4323      	orrs	r3, r4
 8006c7e:	f000 854d 	beq.w	800771c <_dtoa_r+0xb24>
 8006c82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006edc <_dtoa_r+0x2e4>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 854f 	beq.w	800772c <_dtoa_r+0xb34>
 8006c8e:	f10a 0303 	add.w	r3, sl, #3
 8006c92:	f000 bd49 	b.w	8007728 <_dtoa_r+0xb30>
 8006c96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	ec51 0b17 	vmov	r0, r1, d7
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ca6:	f7f9 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8006caa:	4680      	mov	r8, r0
 8006cac:	b158      	cbz	r0, 8006cc6 <_dtoa_r+0xce>
 8006cae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cb6:	b113      	cbz	r3, 8006cbe <_dtoa_r+0xc6>
 8006cb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006cba:	4b84      	ldr	r3, [pc, #528]	@ (8006ecc <_dtoa_r+0x2d4>)
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ee0 <_dtoa_r+0x2e8>
 8006cc2:	f000 bd33 	b.w	800772c <_dtoa_r+0xb34>
 8006cc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006cca:	aa16      	add	r2, sp, #88	@ 0x58
 8006ccc:	a917      	add	r1, sp, #92	@ 0x5c
 8006cce:	4658      	mov	r0, fp
 8006cd0:	f001 fa3a 	bl	8008148 <__d2b>
 8006cd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006cd8:	4681      	mov	r9, r0
 8006cda:	2e00      	cmp	r6, #0
 8006cdc:	d077      	beq.n	8006dce <_dtoa_r+0x1d6>
 8006cde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ce0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006cf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006cf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4b74      	ldr	r3, [pc, #464]	@ (8006ed0 <_dtoa_r+0x2d8>)
 8006cfe:	f7f9 facb 	bl	8000298 <__aeabi_dsub>
 8006d02:	a369      	add	r3, pc, #420	@ (adr r3, 8006ea8 <_dtoa_r+0x2b0>)
 8006d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d08:	f7f9 fc7e 	bl	8000608 <__aeabi_dmul>
 8006d0c:	a368      	add	r3, pc, #416	@ (adr r3, 8006eb0 <_dtoa_r+0x2b8>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fac3 	bl	800029c <__adddf3>
 8006d16:	4604      	mov	r4, r0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	f7f9 fc0a 	bl	8000534 <__aeabi_i2d>
 8006d20:	a365      	add	r3, pc, #404	@ (adr r3, 8006eb8 <_dtoa_r+0x2c0>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f7f9 fc6f 	bl	8000608 <__aeabi_dmul>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 fab3 	bl	800029c <__adddf3>
 8006d36:	4604      	mov	r4, r0
 8006d38:	460d      	mov	r5, r1
 8006d3a:	f7f9 ff15 	bl	8000b68 <__aeabi_d2iz>
 8006d3e:	2200      	movs	r2, #0
 8006d40:	4607      	mov	r7, r0
 8006d42:	2300      	movs	r3, #0
 8006d44:	4620      	mov	r0, r4
 8006d46:	4629      	mov	r1, r5
 8006d48:	f7f9 fed0 	bl	8000aec <__aeabi_dcmplt>
 8006d4c:	b140      	cbz	r0, 8006d60 <_dtoa_r+0x168>
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f7f9 fbf0 	bl	8000534 <__aeabi_i2d>
 8006d54:	4622      	mov	r2, r4
 8006d56:	462b      	mov	r3, r5
 8006d58:	f7f9 febe 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d5c:	b900      	cbnz	r0, 8006d60 <_dtoa_r+0x168>
 8006d5e:	3f01      	subs	r7, #1
 8006d60:	2f16      	cmp	r7, #22
 8006d62:	d851      	bhi.n	8006e08 <_dtoa_r+0x210>
 8006d64:	4b5b      	ldr	r3, [pc, #364]	@ (8006ed4 <_dtoa_r+0x2dc>)
 8006d66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d72:	f7f9 febb 	bl	8000aec <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d048      	beq.n	8006e0c <_dtoa_r+0x214>
 8006d7a:	3f01      	subs	r7, #1
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d82:	1b9b      	subs	r3, r3, r6
 8006d84:	1e5a      	subs	r2, r3, #1
 8006d86:	bf44      	itt	mi
 8006d88:	f1c3 0801 	rsbmi	r8, r3, #1
 8006d8c:	2300      	movmi	r3, #0
 8006d8e:	9208      	str	r2, [sp, #32]
 8006d90:	bf54      	ite	pl
 8006d92:	f04f 0800 	movpl.w	r8, #0
 8006d96:	9308      	strmi	r3, [sp, #32]
 8006d98:	2f00      	cmp	r7, #0
 8006d9a:	db39      	blt.n	8006e10 <_dtoa_r+0x218>
 8006d9c:	9b08      	ldr	r3, [sp, #32]
 8006d9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006da0:	443b      	add	r3, r7
 8006da2:	9308      	str	r3, [sp, #32]
 8006da4:	2300      	movs	r3, #0
 8006da6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006daa:	2b09      	cmp	r3, #9
 8006dac:	d864      	bhi.n	8006e78 <_dtoa_r+0x280>
 8006dae:	2b05      	cmp	r3, #5
 8006db0:	bfc4      	itt	gt
 8006db2:	3b04      	subgt	r3, #4
 8006db4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db8:	f1a3 0302 	sub.w	r3, r3, #2
 8006dbc:	bfcc      	ite	gt
 8006dbe:	2400      	movgt	r4, #0
 8006dc0:	2401      	movle	r4, #1
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d863      	bhi.n	8006e8e <_dtoa_r+0x296>
 8006dc6:	e8df f003 	tbb	[pc, r3]
 8006dca:	372a      	.short	0x372a
 8006dcc:	5535      	.short	0x5535
 8006dce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006dd2:	441e      	add	r6, r3
 8006dd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	bfc1      	itttt	gt
 8006ddc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006de0:	409f      	lslgt	r7, r3
 8006de2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006de6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006dea:	bfd6      	itet	le
 8006dec:	f1c3 0320 	rsble	r3, r3, #32
 8006df0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006df4:	fa04 f003 	lslle.w	r0, r4, r3
 8006df8:	f7f9 fb8c 	bl	8000514 <__aeabi_ui2d>
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e02:	3e01      	subs	r6, #1
 8006e04:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e06:	e777      	b.n	8006cf8 <_dtoa_r+0x100>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e7b8      	b.n	8006d7e <_dtoa_r+0x186>
 8006e0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e0e:	e7b7      	b.n	8006d80 <_dtoa_r+0x188>
 8006e10:	427b      	negs	r3, r7
 8006e12:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e14:	2300      	movs	r3, #0
 8006e16:	eba8 0807 	sub.w	r8, r8, r7
 8006e1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e1c:	e7c4      	b.n	8006da8 <_dtoa_r+0x1b0>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	dc35      	bgt.n	8006e94 <_dtoa_r+0x29c>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	9300      	str	r3, [sp, #0]
 8006e2c:	9307      	str	r3, [sp, #28]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e32:	e00b      	b.n	8006e4c <_dtoa_r+0x254>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e7f3      	b.n	8006e20 <_dtoa_r+0x228>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e3e:	18fb      	adds	r3, r7, r3
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	3301      	adds	r3, #1
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	9307      	str	r3, [sp, #28]
 8006e48:	bfb8      	it	lt
 8006e4a:	2301      	movlt	r3, #1
 8006e4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e50:	2100      	movs	r1, #0
 8006e52:	2204      	movs	r2, #4
 8006e54:	f102 0514 	add.w	r5, r2, #20
 8006e58:	429d      	cmp	r5, r3
 8006e5a:	d91f      	bls.n	8006e9c <_dtoa_r+0x2a4>
 8006e5c:	6041      	str	r1, [r0, #4]
 8006e5e:	4658      	mov	r0, fp
 8006e60:	f000 fd8e 	bl	8007980 <_Balloc>
 8006e64:	4682      	mov	sl, r0
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d13c      	bne.n	8006ee4 <_dtoa_r+0x2ec>
 8006e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed8 <_dtoa_r+0x2e0>)
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e72:	e6d8      	b.n	8006c26 <_dtoa_r+0x2e>
 8006e74:	2301      	movs	r3, #1
 8006e76:	e7e0      	b.n	8006e3a <_dtoa_r+0x242>
 8006e78:	2401      	movs	r4, #1
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	9307      	str	r3, [sp, #28]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2312      	movs	r3, #18
 8006e8c:	e7d0      	b.n	8006e30 <_dtoa_r+0x238>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e92:	e7f5      	b.n	8006e80 <_dtoa_r+0x288>
 8006e94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	9307      	str	r3, [sp, #28]
 8006e9a:	e7d7      	b.n	8006e4c <_dtoa_r+0x254>
 8006e9c:	3101      	adds	r1, #1
 8006e9e:	0052      	lsls	r2, r2, #1
 8006ea0:	e7d8      	b.n	8006e54 <_dtoa_r+0x25c>
 8006ea2:	bf00      	nop
 8006ea4:	f3af 8000 	nop.w
 8006ea8:	636f4361 	.word	0x636f4361
 8006eac:	3fd287a7 	.word	0x3fd287a7
 8006eb0:	8b60c8b3 	.word	0x8b60c8b3
 8006eb4:	3fc68a28 	.word	0x3fc68a28
 8006eb8:	509f79fb 	.word	0x509f79fb
 8006ebc:	3fd34413 	.word	0x3fd34413
 8006ec0:	0800ad24 	.word	0x0800ad24
 8006ec4:	0800ad3b 	.word	0x0800ad3b
 8006ec8:	7ff00000 	.word	0x7ff00000
 8006ecc:	0800b081 	.word	0x0800b081
 8006ed0:	3ff80000 	.word	0x3ff80000
 8006ed4:	0800ae38 	.word	0x0800ae38
 8006ed8:	0800ad93 	.word	0x0800ad93
 8006edc:	0800ad20 	.word	0x0800ad20
 8006ee0:	0800b080 	.word	0x0800b080
 8006ee4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ee8:	6018      	str	r0, [r3, #0]
 8006eea:	9b07      	ldr	r3, [sp, #28]
 8006eec:	2b0e      	cmp	r3, #14
 8006eee:	f200 80a4 	bhi.w	800703a <_dtoa_r+0x442>
 8006ef2:	2c00      	cmp	r4, #0
 8006ef4:	f000 80a1 	beq.w	800703a <_dtoa_r+0x442>
 8006ef8:	2f00      	cmp	r7, #0
 8006efa:	dd33      	ble.n	8006f64 <_dtoa_r+0x36c>
 8006efc:	4bad      	ldr	r3, [pc, #692]	@ (80071b4 <_dtoa_r+0x5bc>)
 8006efe:	f007 020f 	and.w	r2, r7, #15
 8006f02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f06:	ed93 7b00 	vldr	d7, [r3]
 8006f0a:	05f8      	lsls	r0, r7, #23
 8006f0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f14:	d516      	bpl.n	8006f44 <_dtoa_r+0x34c>
 8006f16:	4ba8      	ldr	r3, [pc, #672]	@ (80071b8 <_dtoa_r+0x5c0>)
 8006f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f20:	f7f9 fc9c 	bl	800085c <__aeabi_ddiv>
 8006f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f28:	f004 040f 	and.w	r4, r4, #15
 8006f2c:	2603      	movs	r6, #3
 8006f2e:	4da2      	ldr	r5, [pc, #648]	@ (80071b8 <_dtoa_r+0x5c0>)
 8006f30:	b954      	cbnz	r4, 8006f48 <_dtoa_r+0x350>
 8006f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f3a:	f7f9 fc8f 	bl	800085c <__aeabi_ddiv>
 8006f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f42:	e028      	b.n	8006f96 <_dtoa_r+0x39e>
 8006f44:	2602      	movs	r6, #2
 8006f46:	e7f2      	b.n	8006f2e <_dtoa_r+0x336>
 8006f48:	07e1      	lsls	r1, r4, #31
 8006f4a:	d508      	bpl.n	8006f5e <_dtoa_r+0x366>
 8006f4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f54:	f7f9 fb58 	bl	8000608 <__aeabi_dmul>
 8006f58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f5c:	3601      	adds	r6, #1
 8006f5e:	1064      	asrs	r4, r4, #1
 8006f60:	3508      	adds	r5, #8
 8006f62:	e7e5      	b.n	8006f30 <_dtoa_r+0x338>
 8006f64:	f000 80d2 	beq.w	800710c <_dtoa_r+0x514>
 8006f68:	427c      	negs	r4, r7
 8006f6a:	4b92      	ldr	r3, [pc, #584]	@ (80071b4 <_dtoa_r+0x5bc>)
 8006f6c:	4d92      	ldr	r5, [pc, #584]	@ (80071b8 <_dtoa_r+0x5c0>)
 8006f6e:	f004 020f 	and.w	r2, r4, #15
 8006f72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f7e:	f7f9 fb43 	bl	8000608 <__aeabi_dmul>
 8006f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f86:	1124      	asrs	r4, r4, #4
 8006f88:	2300      	movs	r3, #0
 8006f8a:	2602      	movs	r6, #2
 8006f8c:	2c00      	cmp	r4, #0
 8006f8e:	f040 80b2 	bne.w	80070f6 <_dtoa_r+0x4fe>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1d3      	bne.n	8006f3e <_dtoa_r+0x346>
 8006f96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80b7 	beq.w	8007110 <_dtoa_r+0x518>
 8006fa2:	4b86      	ldr	r3, [pc, #536]	@ (80071bc <_dtoa_r+0x5c4>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 fd9f 	bl	8000aec <__aeabi_dcmplt>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	f000 80ae 	beq.w	8007110 <_dtoa_r+0x518>
 8006fb4:	9b07      	ldr	r3, [sp, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80aa 	beq.w	8007110 <_dtoa_r+0x518>
 8006fbc:	9b00      	ldr	r3, [sp, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	dd37      	ble.n	8007032 <_dtoa_r+0x43a>
 8006fc2:	1e7b      	subs	r3, r7, #1
 8006fc4:	9304      	str	r3, [sp, #16]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	4b7d      	ldr	r3, [pc, #500]	@ (80071c0 <_dtoa_r+0x5c8>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f7f9 fb1b 	bl	8000608 <__aeabi_dmul>
 8006fd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd6:	9c00      	ldr	r4, [sp, #0]
 8006fd8:	3601      	adds	r6, #1
 8006fda:	4630      	mov	r0, r6
 8006fdc:	f7f9 faaa 	bl	8000534 <__aeabi_i2d>
 8006fe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fe4:	f7f9 fb10 	bl	8000608 <__aeabi_dmul>
 8006fe8:	4b76      	ldr	r3, [pc, #472]	@ (80071c4 <_dtoa_r+0x5cc>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	f7f9 f956 	bl	800029c <__adddf3>
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ff6:	2c00      	cmp	r4, #0
 8006ff8:	f040 808d 	bne.w	8007116 <_dtoa_r+0x51e>
 8006ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007000:	4b71      	ldr	r3, [pc, #452]	@ (80071c8 <_dtoa_r+0x5d0>)
 8007002:	2200      	movs	r2, #0
 8007004:	f7f9 f948 	bl	8000298 <__aeabi_dsub>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007010:	462a      	mov	r2, r5
 8007012:	4633      	mov	r3, r6
 8007014:	f7f9 fd88 	bl	8000b28 <__aeabi_dcmpgt>
 8007018:	2800      	cmp	r0, #0
 800701a:	f040 828b 	bne.w	8007534 <_dtoa_r+0x93c>
 800701e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007022:	462a      	mov	r2, r5
 8007024:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007028:	f7f9 fd60 	bl	8000aec <__aeabi_dcmplt>
 800702c:	2800      	cmp	r0, #0
 800702e:	f040 8128 	bne.w	8007282 <_dtoa_r+0x68a>
 8007032:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007036:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800703a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800703c:	2b00      	cmp	r3, #0
 800703e:	f2c0 815a 	blt.w	80072f6 <_dtoa_r+0x6fe>
 8007042:	2f0e      	cmp	r7, #14
 8007044:	f300 8157 	bgt.w	80072f6 <_dtoa_r+0x6fe>
 8007048:	4b5a      	ldr	r3, [pc, #360]	@ (80071b4 <_dtoa_r+0x5bc>)
 800704a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800704e:	ed93 7b00 	vldr	d7, [r3]
 8007052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	ed8d 7b00 	vstr	d7, [sp]
 800705a:	da03      	bge.n	8007064 <_dtoa_r+0x46c>
 800705c:	9b07      	ldr	r3, [sp, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f340 8101 	ble.w	8007266 <_dtoa_r+0x66e>
 8007064:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007068:	4656      	mov	r6, sl
 800706a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800706e:	4620      	mov	r0, r4
 8007070:	4629      	mov	r1, r5
 8007072:	f7f9 fbf3 	bl	800085c <__aeabi_ddiv>
 8007076:	f7f9 fd77 	bl	8000b68 <__aeabi_d2iz>
 800707a:	4680      	mov	r8, r0
 800707c:	f7f9 fa5a 	bl	8000534 <__aeabi_i2d>
 8007080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007084:	f7f9 fac0 	bl	8000608 <__aeabi_dmul>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4620      	mov	r0, r4
 800708e:	4629      	mov	r1, r5
 8007090:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007094:	f7f9 f900 	bl	8000298 <__aeabi_dsub>
 8007098:	f806 4b01 	strb.w	r4, [r6], #1
 800709c:	9d07      	ldr	r5, [sp, #28]
 800709e:	eba6 040a 	sub.w	r4, r6, sl
 80070a2:	42a5      	cmp	r5, r4
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	f040 8117 	bne.w	80072da <_dtoa_r+0x6e2>
 80070ac:	f7f9 f8f6 	bl	800029c <__adddf3>
 80070b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070b4:	4604      	mov	r4, r0
 80070b6:	460d      	mov	r5, r1
 80070b8:	f7f9 fd36 	bl	8000b28 <__aeabi_dcmpgt>
 80070bc:	2800      	cmp	r0, #0
 80070be:	f040 80f9 	bne.w	80072b4 <_dtoa_r+0x6bc>
 80070c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 fd05 	bl	8000ad8 <__aeabi_dcmpeq>
 80070ce:	b118      	cbz	r0, 80070d8 <_dtoa_r+0x4e0>
 80070d0:	f018 0f01 	tst.w	r8, #1
 80070d4:	f040 80ee 	bne.w	80072b4 <_dtoa_r+0x6bc>
 80070d8:	4649      	mov	r1, r9
 80070da:	4658      	mov	r0, fp
 80070dc:	f000 fc90 	bl	8007a00 <_Bfree>
 80070e0:	2300      	movs	r3, #0
 80070e2:	7033      	strb	r3, [r6, #0]
 80070e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070e6:	3701      	adds	r7, #1
 80070e8:	601f      	str	r7, [r3, #0]
 80070ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f000 831d 	beq.w	800772c <_dtoa_r+0xb34>
 80070f2:	601e      	str	r6, [r3, #0]
 80070f4:	e31a      	b.n	800772c <_dtoa_r+0xb34>
 80070f6:	07e2      	lsls	r2, r4, #31
 80070f8:	d505      	bpl.n	8007106 <_dtoa_r+0x50e>
 80070fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070fe:	f7f9 fa83 	bl	8000608 <__aeabi_dmul>
 8007102:	3601      	adds	r6, #1
 8007104:	2301      	movs	r3, #1
 8007106:	1064      	asrs	r4, r4, #1
 8007108:	3508      	adds	r5, #8
 800710a:	e73f      	b.n	8006f8c <_dtoa_r+0x394>
 800710c:	2602      	movs	r6, #2
 800710e:	e742      	b.n	8006f96 <_dtoa_r+0x39e>
 8007110:	9c07      	ldr	r4, [sp, #28]
 8007112:	9704      	str	r7, [sp, #16]
 8007114:	e761      	b.n	8006fda <_dtoa_r+0x3e2>
 8007116:	4b27      	ldr	r3, [pc, #156]	@ (80071b4 <_dtoa_r+0x5bc>)
 8007118:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800711a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800711e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007122:	4454      	add	r4, sl
 8007124:	2900      	cmp	r1, #0
 8007126:	d053      	beq.n	80071d0 <_dtoa_r+0x5d8>
 8007128:	4928      	ldr	r1, [pc, #160]	@ (80071cc <_dtoa_r+0x5d4>)
 800712a:	2000      	movs	r0, #0
 800712c:	f7f9 fb96 	bl	800085c <__aeabi_ddiv>
 8007130:	4633      	mov	r3, r6
 8007132:	462a      	mov	r2, r5
 8007134:	f7f9 f8b0 	bl	8000298 <__aeabi_dsub>
 8007138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800713c:	4656      	mov	r6, sl
 800713e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007142:	f7f9 fd11 	bl	8000b68 <__aeabi_d2iz>
 8007146:	4605      	mov	r5, r0
 8007148:	f7f9 f9f4 	bl	8000534 <__aeabi_i2d>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007154:	f7f9 f8a0 	bl	8000298 <__aeabi_dsub>
 8007158:	3530      	adds	r5, #48	@ 0x30
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007162:	f806 5b01 	strb.w	r5, [r6], #1
 8007166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800716a:	f7f9 fcbf 	bl	8000aec <__aeabi_dcmplt>
 800716e:	2800      	cmp	r0, #0
 8007170:	d171      	bne.n	8007256 <_dtoa_r+0x65e>
 8007172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007176:	4911      	ldr	r1, [pc, #68]	@ (80071bc <_dtoa_r+0x5c4>)
 8007178:	2000      	movs	r0, #0
 800717a:	f7f9 f88d 	bl	8000298 <__aeabi_dsub>
 800717e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007182:	f7f9 fcb3 	bl	8000aec <__aeabi_dcmplt>
 8007186:	2800      	cmp	r0, #0
 8007188:	f040 8095 	bne.w	80072b6 <_dtoa_r+0x6be>
 800718c:	42a6      	cmp	r6, r4
 800718e:	f43f af50 	beq.w	8007032 <_dtoa_r+0x43a>
 8007192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007196:	4b0a      	ldr	r3, [pc, #40]	@ (80071c0 <_dtoa_r+0x5c8>)
 8007198:	2200      	movs	r2, #0
 800719a:	f7f9 fa35 	bl	8000608 <__aeabi_dmul>
 800719e:	4b08      	ldr	r3, [pc, #32]	@ (80071c0 <_dtoa_r+0x5c8>)
 80071a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071a4:	2200      	movs	r2, #0
 80071a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071aa:	f7f9 fa2d 	bl	8000608 <__aeabi_dmul>
 80071ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b2:	e7c4      	b.n	800713e <_dtoa_r+0x546>
 80071b4:	0800ae38 	.word	0x0800ae38
 80071b8:	0800ae10 	.word	0x0800ae10
 80071bc:	3ff00000 	.word	0x3ff00000
 80071c0:	40240000 	.word	0x40240000
 80071c4:	401c0000 	.word	0x401c0000
 80071c8:	40140000 	.word	0x40140000
 80071cc:	3fe00000 	.word	0x3fe00000
 80071d0:	4631      	mov	r1, r6
 80071d2:	4628      	mov	r0, r5
 80071d4:	f7f9 fa18 	bl	8000608 <__aeabi_dmul>
 80071d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80071de:	4656      	mov	r6, sl
 80071e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071e4:	f7f9 fcc0 	bl	8000b68 <__aeabi_d2iz>
 80071e8:	4605      	mov	r5, r0
 80071ea:	f7f9 f9a3 	bl	8000534 <__aeabi_i2d>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f6:	f7f9 f84f 	bl	8000298 <__aeabi_dsub>
 80071fa:	3530      	adds	r5, #48	@ 0x30
 80071fc:	f806 5b01 	strb.w	r5, [r6], #1
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	42a6      	cmp	r6, r4
 8007206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	d124      	bne.n	800725a <_dtoa_r+0x662>
 8007210:	4bac      	ldr	r3, [pc, #688]	@ (80074c4 <_dtoa_r+0x8cc>)
 8007212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007216:	f7f9 f841 	bl	800029c <__adddf3>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007222:	f7f9 fc81 	bl	8000b28 <__aeabi_dcmpgt>
 8007226:	2800      	cmp	r0, #0
 8007228:	d145      	bne.n	80072b6 <_dtoa_r+0x6be>
 800722a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800722e:	49a5      	ldr	r1, [pc, #660]	@ (80074c4 <_dtoa_r+0x8cc>)
 8007230:	2000      	movs	r0, #0
 8007232:	f7f9 f831 	bl	8000298 <__aeabi_dsub>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723e:	f7f9 fc55 	bl	8000aec <__aeabi_dcmplt>
 8007242:	2800      	cmp	r0, #0
 8007244:	f43f aef5 	beq.w	8007032 <_dtoa_r+0x43a>
 8007248:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800724a:	1e73      	subs	r3, r6, #1
 800724c:	9315      	str	r3, [sp, #84]	@ 0x54
 800724e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007252:	2b30      	cmp	r3, #48	@ 0x30
 8007254:	d0f8      	beq.n	8007248 <_dtoa_r+0x650>
 8007256:	9f04      	ldr	r7, [sp, #16]
 8007258:	e73e      	b.n	80070d8 <_dtoa_r+0x4e0>
 800725a:	4b9b      	ldr	r3, [pc, #620]	@ (80074c8 <_dtoa_r+0x8d0>)
 800725c:	f7f9 f9d4 	bl	8000608 <__aeabi_dmul>
 8007260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007264:	e7bc      	b.n	80071e0 <_dtoa_r+0x5e8>
 8007266:	d10c      	bne.n	8007282 <_dtoa_r+0x68a>
 8007268:	4b98      	ldr	r3, [pc, #608]	@ (80074cc <_dtoa_r+0x8d4>)
 800726a:	2200      	movs	r2, #0
 800726c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007270:	f7f9 f9ca 	bl	8000608 <__aeabi_dmul>
 8007274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007278:	f7f9 fc4c 	bl	8000b14 <__aeabi_dcmpge>
 800727c:	2800      	cmp	r0, #0
 800727e:	f000 8157 	beq.w	8007530 <_dtoa_r+0x938>
 8007282:	2400      	movs	r4, #0
 8007284:	4625      	mov	r5, r4
 8007286:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007288:	43db      	mvns	r3, r3
 800728a:	9304      	str	r3, [sp, #16]
 800728c:	4656      	mov	r6, sl
 800728e:	2700      	movs	r7, #0
 8007290:	4621      	mov	r1, r4
 8007292:	4658      	mov	r0, fp
 8007294:	f000 fbb4 	bl	8007a00 <_Bfree>
 8007298:	2d00      	cmp	r5, #0
 800729a:	d0dc      	beq.n	8007256 <_dtoa_r+0x65e>
 800729c:	b12f      	cbz	r7, 80072aa <_dtoa_r+0x6b2>
 800729e:	42af      	cmp	r7, r5
 80072a0:	d003      	beq.n	80072aa <_dtoa_r+0x6b2>
 80072a2:	4639      	mov	r1, r7
 80072a4:	4658      	mov	r0, fp
 80072a6:	f000 fbab 	bl	8007a00 <_Bfree>
 80072aa:	4629      	mov	r1, r5
 80072ac:	4658      	mov	r0, fp
 80072ae:	f000 fba7 	bl	8007a00 <_Bfree>
 80072b2:	e7d0      	b.n	8007256 <_dtoa_r+0x65e>
 80072b4:	9704      	str	r7, [sp, #16]
 80072b6:	4633      	mov	r3, r6
 80072b8:	461e      	mov	r6, r3
 80072ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072be:	2a39      	cmp	r2, #57	@ 0x39
 80072c0:	d107      	bne.n	80072d2 <_dtoa_r+0x6da>
 80072c2:	459a      	cmp	sl, r3
 80072c4:	d1f8      	bne.n	80072b8 <_dtoa_r+0x6c0>
 80072c6:	9a04      	ldr	r2, [sp, #16]
 80072c8:	3201      	adds	r2, #1
 80072ca:	9204      	str	r2, [sp, #16]
 80072cc:	2230      	movs	r2, #48	@ 0x30
 80072ce:	f88a 2000 	strb.w	r2, [sl]
 80072d2:	781a      	ldrb	r2, [r3, #0]
 80072d4:	3201      	adds	r2, #1
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	e7bd      	b.n	8007256 <_dtoa_r+0x65e>
 80072da:	4b7b      	ldr	r3, [pc, #492]	@ (80074c8 <_dtoa_r+0x8d0>)
 80072dc:	2200      	movs	r2, #0
 80072de:	f7f9 f993 	bl	8000608 <__aeabi_dmul>
 80072e2:	2200      	movs	r2, #0
 80072e4:	2300      	movs	r3, #0
 80072e6:	4604      	mov	r4, r0
 80072e8:	460d      	mov	r5, r1
 80072ea:	f7f9 fbf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	f43f aebb 	beq.w	800706a <_dtoa_r+0x472>
 80072f4:	e6f0      	b.n	80070d8 <_dtoa_r+0x4e0>
 80072f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80072f8:	2a00      	cmp	r2, #0
 80072fa:	f000 80db 	beq.w	80074b4 <_dtoa_r+0x8bc>
 80072fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007300:	2a01      	cmp	r2, #1
 8007302:	f300 80bf 	bgt.w	8007484 <_dtoa_r+0x88c>
 8007306:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007308:	2a00      	cmp	r2, #0
 800730a:	f000 80b7 	beq.w	800747c <_dtoa_r+0x884>
 800730e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007312:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007314:	4646      	mov	r6, r8
 8007316:	9a08      	ldr	r2, [sp, #32]
 8007318:	2101      	movs	r1, #1
 800731a:	441a      	add	r2, r3
 800731c:	4658      	mov	r0, fp
 800731e:	4498      	add	r8, r3
 8007320:	9208      	str	r2, [sp, #32]
 8007322:	f000 fc6b 	bl	8007bfc <__i2b>
 8007326:	4605      	mov	r5, r0
 8007328:	b15e      	cbz	r6, 8007342 <_dtoa_r+0x74a>
 800732a:	9b08      	ldr	r3, [sp, #32]
 800732c:	2b00      	cmp	r3, #0
 800732e:	dd08      	ble.n	8007342 <_dtoa_r+0x74a>
 8007330:	42b3      	cmp	r3, r6
 8007332:	9a08      	ldr	r2, [sp, #32]
 8007334:	bfa8      	it	ge
 8007336:	4633      	movge	r3, r6
 8007338:	eba8 0803 	sub.w	r8, r8, r3
 800733c:	1af6      	subs	r6, r6, r3
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	9308      	str	r3, [sp, #32]
 8007342:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007344:	b1f3      	cbz	r3, 8007384 <_dtoa_r+0x78c>
 8007346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 80b7 	beq.w	80074bc <_dtoa_r+0x8c4>
 800734e:	b18c      	cbz	r4, 8007374 <_dtoa_r+0x77c>
 8007350:	4629      	mov	r1, r5
 8007352:	4622      	mov	r2, r4
 8007354:	4658      	mov	r0, fp
 8007356:	f000 fd11 	bl	8007d7c <__pow5mult>
 800735a:	464a      	mov	r2, r9
 800735c:	4601      	mov	r1, r0
 800735e:	4605      	mov	r5, r0
 8007360:	4658      	mov	r0, fp
 8007362:	f000 fc61 	bl	8007c28 <__multiply>
 8007366:	4649      	mov	r1, r9
 8007368:	9004      	str	r0, [sp, #16]
 800736a:	4658      	mov	r0, fp
 800736c:	f000 fb48 	bl	8007a00 <_Bfree>
 8007370:	9b04      	ldr	r3, [sp, #16]
 8007372:	4699      	mov	r9, r3
 8007374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007376:	1b1a      	subs	r2, r3, r4
 8007378:	d004      	beq.n	8007384 <_dtoa_r+0x78c>
 800737a:	4649      	mov	r1, r9
 800737c:	4658      	mov	r0, fp
 800737e:	f000 fcfd 	bl	8007d7c <__pow5mult>
 8007382:	4681      	mov	r9, r0
 8007384:	2101      	movs	r1, #1
 8007386:	4658      	mov	r0, fp
 8007388:	f000 fc38 	bl	8007bfc <__i2b>
 800738c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800738e:	4604      	mov	r4, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 81cf 	beq.w	8007734 <_dtoa_r+0xb3c>
 8007396:	461a      	mov	r2, r3
 8007398:	4601      	mov	r1, r0
 800739a:	4658      	mov	r0, fp
 800739c:	f000 fcee 	bl	8007d7c <__pow5mult>
 80073a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	4604      	mov	r4, r0
 80073a6:	f300 8095 	bgt.w	80074d4 <_dtoa_r+0x8dc>
 80073aa:	9b02      	ldr	r3, [sp, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f040 8087 	bne.w	80074c0 <_dtoa_r+0x8c8>
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f040 8089 	bne.w	80074d0 <_dtoa_r+0x8d8>
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073c4:	0d1b      	lsrs	r3, r3, #20
 80073c6:	051b      	lsls	r3, r3, #20
 80073c8:	b12b      	cbz	r3, 80073d6 <_dtoa_r+0x7de>
 80073ca:	9b08      	ldr	r3, [sp, #32]
 80073cc:	3301      	adds	r3, #1
 80073ce:	9308      	str	r3, [sp, #32]
 80073d0:	f108 0801 	add.w	r8, r8, #1
 80073d4:	2301      	movs	r3, #1
 80073d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 81b0 	beq.w	8007740 <_dtoa_r+0xb48>
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073e6:	6918      	ldr	r0, [r3, #16]
 80073e8:	f000 fbbc 	bl	8007b64 <__hi0bits>
 80073ec:	f1c0 0020 	rsb	r0, r0, #32
 80073f0:	9b08      	ldr	r3, [sp, #32]
 80073f2:	4418      	add	r0, r3
 80073f4:	f010 001f 	ands.w	r0, r0, #31
 80073f8:	d077      	beq.n	80074ea <_dtoa_r+0x8f2>
 80073fa:	f1c0 0320 	rsb	r3, r0, #32
 80073fe:	2b04      	cmp	r3, #4
 8007400:	dd6b      	ble.n	80074da <_dtoa_r+0x8e2>
 8007402:	9b08      	ldr	r3, [sp, #32]
 8007404:	f1c0 001c 	rsb	r0, r0, #28
 8007408:	4403      	add	r3, r0
 800740a:	4480      	add	r8, r0
 800740c:	4406      	add	r6, r0
 800740e:	9308      	str	r3, [sp, #32]
 8007410:	f1b8 0f00 	cmp.w	r8, #0
 8007414:	dd05      	ble.n	8007422 <_dtoa_r+0x82a>
 8007416:	4649      	mov	r1, r9
 8007418:	4642      	mov	r2, r8
 800741a:	4658      	mov	r0, fp
 800741c:	f000 fd08 	bl	8007e30 <__lshift>
 8007420:	4681      	mov	r9, r0
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	2b00      	cmp	r3, #0
 8007426:	dd05      	ble.n	8007434 <_dtoa_r+0x83c>
 8007428:	4621      	mov	r1, r4
 800742a:	461a      	mov	r2, r3
 800742c:	4658      	mov	r0, fp
 800742e:	f000 fcff 	bl	8007e30 <__lshift>
 8007432:	4604      	mov	r4, r0
 8007434:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007436:	2b00      	cmp	r3, #0
 8007438:	d059      	beq.n	80074ee <_dtoa_r+0x8f6>
 800743a:	4621      	mov	r1, r4
 800743c:	4648      	mov	r0, r9
 800743e:	f000 fd63 	bl	8007f08 <__mcmp>
 8007442:	2800      	cmp	r0, #0
 8007444:	da53      	bge.n	80074ee <_dtoa_r+0x8f6>
 8007446:	1e7b      	subs	r3, r7, #1
 8007448:	9304      	str	r3, [sp, #16]
 800744a:	4649      	mov	r1, r9
 800744c:	2300      	movs	r3, #0
 800744e:	220a      	movs	r2, #10
 8007450:	4658      	mov	r0, fp
 8007452:	f000 faf7 	bl	8007a44 <__multadd>
 8007456:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007458:	4681      	mov	r9, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 8172 	beq.w	8007744 <_dtoa_r+0xb4c>
 8007460:	2300      	movs	r3, #0
 8007462:	4629      	mov	r1, r5
 8007464:	220a      	movs	r2, #10
 8007466:	4658      	mov	r0, fp
 8007468:	f000 faec 	bl	8007a44 <__multadd>
 800746c:	9b00      	ldr	r3, [sp, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	4605      	mov	r5, r0
 8007472:	dc67      	bgt.n	8007544 <_dtoa_r+0x94c>
 8007474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007476:	2b02      	cmp	r3, #2
 8007478:	dc41      	bgt.n	80074fe <_dtoa_r+0x906>
 800747a:	e063      	b.n	8007544 <_dtoa_r+0x94c>
 800747c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800747e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007482:	e746      	b.n	8007312 <_dtoa_r+0x71a>
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	1e5c      	subs	r4, r3, #1
 8007488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800748a:	42a3      	cmp	r3, r4
 800748c:	bfbf      	itttt	lt
 800748e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007490:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007492:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007494:	1ae3      	sublt	r3, r4, r3
 8007496:	bfb4      	ite	lt
 8007498:	18d2      	addlt	r2, r2, r3
 800749a:	1b1c      	subge	r4, r3, r4
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	bfbc      	itt	lt
 80074a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80074a2:	2400      	movlt	r4, #0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bfb5      	itete	lt
 80074a8:	eba8 0603 	sublt.w	r6, r8, r3
 80074ac:	9b07      	ldrge	r3, [sp, #28]
 80074ae:	2300      	movlt	r3, #0
 80074b0:	4646      	movge	r6, r8
 80074b2:	e730      	b.n	8007316 <_dtoa_r+0x71e>
 80074b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80074b8:	4646      	mov	r6, r8
 80074ba:	e735      	b.n	8007328 <_dtoa_r+0x730>
 80074bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074be:	e75c      	b.n	800737a <_dtoa_r+0x782>
 80074c0:	2300      	movs	r3, #0
 80074c2:	e788      	b.n	80073d6 <_dtoa_r+0x7de>
 80074c4:	3fe00000 	.word	0x3fe00000
 80074c8:	40240000 	.word	0x40240000
 80074cc:	40140000 	.word	0x40140000
 80074d0:	9b02      	ldr	r3, [sp, #8]
 80074d2:	e780      	b.n	80073d6 <_dtoa_r+0x7de>
 80074d4:	2300      	movs	r3, #0
 80074d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074d8:	e782      	b.n	80073e0 <_dtoa_r+0x7e8>
 80074da:	d099      	beq.n	8007410 <_dtoa_r+0x818>
 80074dc:	9a08      	ldr	r2, [sp, #32]
 80074de:	331c      	adds	r3, #28
 80074e0:	441a      	add	r2, r3
 80074e2:	4498      	add	r8, r3
 80074e4:	441e      	add	r6, r3
 80074e6:	9208      	str	r2, [sp, #32]
 80074e8:	e792      	b.n	8007410 <_dtoa_r+0x818>
 80074ea:	4603      	mov	r3, r0
 80074ec:	e7f6      	b.n	80074dc <_dtoa_r+0x8e4>
 80074ee:	9b07      	ldr	r3, [sp, #28]
 80074f0:	9704      	str	r7, [sp, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dc20      	bgt.n	8007538 <_dtoa_r+0x940>
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	dd1e      	ble.n	800753c <_dtoa_r+0x944>
 80074fe:	9b00      	ldr	r3, [sp, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f47f aec0 	bne.w	8007286 <_dtoa_r+0x68e>
 8007506:	4621      	mov	r1, r4
 8007508:	2205      	movs	r2, #5
 800750a:	4658      	mov	r0, fp
 800750c:	f000 fa9a 	bl	8007a44 <__multadd>
 8007510:	4601      	mov	r1, r0
 8007512:	4604      	mov	r4, r0
 8007514:	4648      	mov	r0, r9
 8007516:	f000 fcf7 	bl	8007f08 <__mcmp>
 800751a:	2800      	cmp	r0, #0
 800751c:	f77f aeb3 	ble.w	8007286 <_dtoa_r+0x68e>
 8007520:	4656      	mov	r6, sl
 8007522:	2331      	movs	r3, #49	@ 0x31
 8007524:	f806 3b01 	strb.w	r3, [r6], #1
 8007528:	9b04      	ldr	r3, [sp, #16]
 800752a:	3301      	adds	r3, #1
 800752c:	9304      	str	r3, [sp, #16]
 800752e:	e6ae      	b.n	800728e <_dtoa_r+0x696>
 8007530:	9c07      	ldr	r4, [sp, #28]
 8007532:	9704      	str	r7, [sp, #16]
 8007534:	4625      	mov	r5, r4
 8007536:	e7f3      	b.n	8007520 <_dtoa_r+0x928>
 8007538:	9b07      	ldr	r3, [sp, #28]
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 8104 	beq.w	800774c <_dtoa_r+0xb54>
 8007544:	2e00      	cmp	r6, #0
 8007546:	dd05      	ble.n	8007554 <_dtoa_r+0x95c>
 8007548:	4629      	mov	r1, r5
 800754a:	4632      	mov	r2, r6
 800754c:	4658      	mov	r0, fp
 800754e:	f000 fc6f 	bl	8007e30 <__lshift>
 8007552:	4605      	mov	r5, r0
 8007554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d05a      	beq.n	8007610 <_dtoa_r+0xa18>
 800755a:	6869      	ldr	r1, [r5, #4]
 800755c:	4658      	mov	r0, fp
 800755e:	f000 fa0f 	bl	8007980 <_Balloc>
 8007562:	4606      	mov	r6, r0
 8007564:	b928      	cbnz	r0, 8007572 <_dtoa_r+0x97a>
 8007566:	4b84      	ldr	r3, [pc, #528]	@ (8007778 <_dtoa_r+0xb80>)
 8007568:	4602      	mov	r2, r0
 800756a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800756e:	f7ff bb5a 	b.w	8006c26 <_dtoa_r+0x2e>
 8007572:	692a      	ldr	r2, [r5, #16]
 8007574:	3202      	adds	r2, #2
 8007576:	0092      	lsls	r2, r2, #2
 8007578:	f105 010c 	add.w	r1, r5, #12
 800757c:	300c      	adds	r0, #12
 800757e:	f002 faf1 	bl	8009b64 <memcpy>
 8007582:	2201      	movs	r2, #1
 8007584:	4631      	mov	r1, r6
 8007586:	4658      	mov	r0, fp
 8007588:	f000 fc52 	bl	8007e30 <__lshift>
 800758c:	f10a 0301 	add.w	r3, sl, #1
 8007590:	9307      	str	r3, [sp, #28]
 8007592:	9b00      	ldr	r3, [sp, #0]
 8007594:	4453      	add	r3, sl
 8007596:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007598:	9b02      	ldr	r3, [sp, #8]
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	462f      	mov	r7, r5
 80075a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80075a2:	4605      	mov	r5, r0
 80075a4:	9b07      	ldr	r3, [sp, #28]
 80075a6:	4621      	mov	r1, r4
 80075a8:	3b01      	subs	r3, #1
 80075aa:	4648      	mov	r0, r9
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	f7ff fa9b 	bl	8006ae8 <quorem>
 80075b2:	4639      	mov	r1, r7
 80075b4:	9002      	str	r0, [sp, #8]
 80075b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075ba:	4648      	mov	r0, r9
 80075bc:	f000 fca4 	bl	8007f08 <__mcmp>
 80075c0:	462a      	mov	r2, r5
 80075c2:	9008      	str	r0, [sp, #32]
 80075c4:	4621      	mov	r1, r4
 80075c6:	4658      	mov	r0, fp
 80075c8:	f000 fcba 	bl	8007f40 <__mdiff>
 80075cc:	68c2      	ldr	r2, [r0, #12]
 80075ce:	4606      	mov	r6, r0
 80075d0:	bb02      	cbnz	r2, 8007614 <_dtoa_r+0xa1c>
 80075d2:	4601      	mov	r1, r0
 80075d4:	4648      	mov	r0, r9
 80075d6:	f000 fc97 	bl	8007f08 <__mcmp>
 80075da:	4602      	mov	r2, r0
 80075dc:	4631      	mov	r1, r6
 80075de:	4658      	mov	r0, fp
 80075e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80075e2:	f000 fa0d 	bl	8007a00 <_Bfree>
 80075e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075ea:	9e07      	ldr	r6, [sp, #28]
 80075ec:	ea43 0102 	orr.w	r1, r3, r2
 80075f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075f2:	4319      	orrs	r1, r3
 80075f4:	d110      	bne.n	8007618 <_dtoa_r+0xa20>
 80075f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80075fa:	d029      	beq.n	8007650 <_dtoa_r+0xa58>
 80075fc:	9b08      	ldr	r3, [sp, #32]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	dd02      	ble.n	8007608 <_dtoa_r+0xa10>
 8007602:	9b02      	ldr	r3, [sp, #8]
 8007604:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007608:	9b00      	ldr	r3, [sp, #0]
 800760a:	f883 8000 	strb.w	r8, [r3]
 800760e:	e63f      	b.n	8007290 <_dtoa_r+0x698>
 8007610:	4628      	mov	r0, r5
 8007612:	e7bb      	b.n	800758c <_dtoa_r+0x994>
 8007614:	2201      	movs	r2, #1
 8007616:	e7e1      	b.n	80075dc <_dtoa_r+0x9e4>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	2b00      	cmp	r3, #0
 800761c:	db04      	blt.n	8007628 <_dtoa_r+0xa30>
 800761e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007620:	430b      	orrs	r3, r1
 8007622:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007624:	430b      	orrs	r3, r1
 8007626:	d120      	bne.n	800766a <_dtoa_r+0xa72>
 8007628:	2a00      	cmp	r2, #0
 800762a:	dded      	ble.n	8007608 <_dtoa_r+0xa10>
 800762c:	4649      	mov	r1, r9
 800762e:	2201      	movs	r2, #1
 8007630:	4658      	mov	r0, fp
 8007632:	f000 fbfd 	bl	8007e30 <__lshift>
 8007636:	4621      	mov	r1, r4
 8007638:	4681      	mov	r9, r0
 800763a:	f000 fc65 	bl	8007f08 <__mcmp>
 800763e:	2800      	cmp	r0, #0
 8007640:	dc03      	bgt.n	800764a <_dtoa_r+0xa52>
 8007642:	d1e1      	bne.n	8007608 <_dtoa_r+0xa10>
 8007644:	f018 0f01 	tst.w	r8, #1
 8007648:	d0de      	beq.n	8007608 <_dtoa_r+0xa10>
 800764a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800764e:	d1d8      	bne.n	8007602 <_dtoa_r+0xa0a>
 8007650:	9a00      	ldr	r2, [sp, #0]
 8007652:	2339      	movs	r3, #57	@ 0x39
 8007654:	7013      	strb	r3, [r2, #0]
 8007656:	4633      	mov	r3, r6
 8007658:	461e      	mov	r6, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007660:	2a39      	cmp	r2, #57	@ 0x39
 8007662:	d052      	beq.n	800770a <_dtoa_r+0xb12>
 8007664:	3201      	adds	r2, #1
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	e612      	b.n	8007290 <_dtoa_r+0x698>
 800766a:	2a00      	cmp	r2, #0
 800766c:	dd07      	ble.n	800767e <_dtoa_r+0xa86>
 800766e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007672:	d0ed      	beq.n	8007650 <_dtoa_r+0xa58>
 8007674:	9a00      	ldr	r2, [sp, #0]
 8007676:	f108 0301 	add.w	r3, r8, #1
 800767a:	7013      	strb	r3, [r2, #0]
 800767c:	e608      	b.n	8007290 <_dtoa_r+0x698>
 800767e:	9b07      	ldr	r3, [sp, #28]
 8007680:	9a07      	ldr	r2, [sp, #28]
 8007682:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007688:	4293      	cmp	r3, r2
 800768a:	d028      	beq.n	80076de <_dtoa_r+0xae6>
 800768c:	4649      	mov	r1, r9
 800768e:	2300      	movs	r3, #0
 8007690:	220a      	movs	r2, #10
 8007692:	4658      	mov	r0, fp
 8007694:	f000 f9d6 	bl	8007a44 <__multadd>
 8007698:	42af      	cmp	r7, r5
 800769a:	4681      	mov	r9, r0
 800769c:	f04f 0300 	mov.w	r3, #0
 80076a0:	f04f 020a 	mov.w	r2, #10
 80076a4:	4639      	mov	r1, r7
 80076a6:	4658      	mov	r0, fp
 80076a8:	d107      	bne.n	80076ba <_dtoa_r+0xac2>
 80076aa:	f000 f9cb 	bl	8007a44 <__multadd>
 80076ae:	4607      	mov	r7, r0
 80076b0:	4605      	mov	r5, r0
 80076b2:	9b07      	ldr	r3, [sp, #28]
 80076b4:	3301      	adds	r3, #1
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	e774      	b.n	80075a4 <_dtoa_r+0x9ac>
 80076ba:	f000 f9c3 	bl	8007a44 <__multadd>
 80076be:	4629      	mov	r1, r5
 80076c0:	4607      	mov	r7, r0
 80076c2:	2300      	movs	r3, #0
 80076c4:	220a      	movs	r2, #10
 80076c6:	4658      	mov	r0, fp
 80076c8:	f000 f9bc 	bl	8007a44 <__multadd>
 80076cc:	4605      	mov	r5, r0
 80076ce:	e7f0      	b.n	80076b2 <_dtoa_r+0xaba>
 80076d0:	9b00      	ldr	r3, [sp, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bfcc      	ite	gt
 80076d6:	461e      	movgt	r6, r3
 80076d8:	2601      	movle	r6, #1
 80076da:	4456      	add	r6, sl
 80076dc:	2700      	movs	r7, #0
 80076de:	4649      	mov	r1, r9
 80076e0:	2201      	movs	r2, #1
 80076e2:	4658      	mov	r0, fp
 80076e4:	f000 fba4 	bl	8007e30 <__lshift>
 80076e8:	4621      	mov	r1, r4
 80076ea:	4681      	mov	r9, r0
 80076ec:	f000 fc0c 	bl	8007f08 <__mcmp>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	dcb0      	bgt.n	8007656 <_dtoa_r+0xa5e>
 80076f4:	d102      	bne.n	80076fc <_dtoa_r+0xb04>
 80076f6:	f018 0f01 	tst.w	r8, #1
 80076fa:	d1ac      	bne.n	8007656 <_dtoa_r+0xa5e>
 80076fc:	4633      	mov	r3, r6
 80076fe:	461e      	mov	r6, r3
 8007700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007704:	2a30      	cmp	r2, #48	@ 0x30
 8007706:	d0fa      	beq.n	80076fe <_dtoa_r+0xb06>
 8007708:	e5c2      	b.n	8007290 <_dtoa_r+0x698>
 800770a:	459a      	cmp	sl, r3
 800770c:	d1a4      	bne.n	8007658 <_dtoa_r+0xa60>
 800770e:	9b04      	ldr	r3, [sp, #16]
 8007710:	3301      	adds	r3, #1
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	2331      	movs	r3, #49	@ 0x31
 8007716:	f88a 3000 	strb.w	r3, [sl]
 800771a:	e5b9      	b.n	8007290 <_dtoa_r+0x698>
 800771c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800771e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800777c <_dtoa_r+0xb84>
 8007722:	b11b      	cbz	r3, 800772c <_dtoa_r+0xb34>
 8007724:	f10a 0308 	add.w	r3, sl, #8
 8007728:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	4650      	mov	r0, sl
 800772e:	b019      	add	sp, #100	@ 0x64
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007736:	2b01      	cmp	r3, #1
 8007738:	f77f ae37 	ble.w	80073aa <_dtoa_r+0x7b2>
 800773c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800773e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007740:	2001      	movs	r0, #1
 8007742:	e655      	b.n	80073f0 <_dtoa_r+0x7f8>
 8007744:	9b00      	ldr	r3, [sp, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	f77f aed6 	ble.w	80074f8 <_dtoa_r+0x900>
 800774c:	4656      	mov	r6, sl
 800774e:	4621      	mov	r1, r4
 8007750:	4648      	mov	r0, r9
 8007752:	f7ff f9c9 	bl	8006ae8 <quorem>
 8007756:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800775a:	f806 8b01 	strb.w	r8, [r6], #1
 800775e:	9b00      	ldr	r3, [sp, #0]
 8007760:	eba6 020a 	sub.w	r2, r6, sl
 8007764:	4293      	cmp	r3, r2
 8007766:	ddb3      	ble.n	80076d0 <_dtoa_r+0xad8>
 8007768:	4649      	mov	r1, r9
 800776a:	2300      	movs	r3, #0
 800776c:	220a      	movs	r2, #10
 800776e:	4658      	mov	r0, fp
 8007770:	f000 f968 	bl	8007a44 <__multadd>
 8007774:	4681      	mov	r9, r0
 8007776:	e7ea      	b.n	800774e <_dtoa_r+0xb56>
 8007778:	0800ad93 	.word	0x0800ad93
 800777c:	0800ad17 	.word	0x0800ad17

08007780 <_free_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4605      	mov	r5, r0
 8007784:	2900      	cmp	r1, #0
 8007786:	d041      	beq.n	800780c <_free_r+0x8c>
 8007788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800778c:	1f0c      	subs	r4, r1, #4
 800778e:	2b00      	cmp	r3, #0
 8007790:	bfb8      	it	lt
 8007792:	18e4      	addlt	r4, r4, r3
 8007794:	f000 f8e8 	bl	8007968 <__malloc_lock>
 8007798:	4a1d      	ldr	r2, [pc, #116]	@ (8007810 <_free_r+0x90>)
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	b933      	cbnz	r3, 80077ac <_free_r+0x2c>
 800779e:	6063      	str	r3, [r4, #4]
 80077a0:	6014      	str	r4, [r2, #0]
 80077a2:	4628      	mov	r0, r5
 80077a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077a8:	f000 b8e4 	b.w	8007974 <__malloc_unlock>
 80077ac:	42a3      	cmp	r3, r4
 80077ae:	d908      	bls.n	80077c2 <_free_r+0x42>
 80077b0:	6820      	ldr	r0, [r4, #0]
 80077b2:	1821      	adds	r1, r4, r0
 80077b4:	428b      	cmp	r3, r1
 80077b6:	bf01      	itttt	eq
 80077b8:	6819      	ldreq	r1, [r3, #0]
 80077ba:	685b      	ldreq	r3, [r3, #4]
 80077bc:	1809      	addeq	r1, r1, r0
 80077be:	6021      	streq	r1, [r4, #0]
 80077c0:	e7ed      	b.n	800779e <_free_r+0x1e>
 80077c2:	461a      	mov	r2, r3
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	b10b      	cbz	r3, 80077cc <_free_r+0x4c>
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d9fa      	bls.n	80077c2 <_free_r+0x42>
 80077cc:	6811      	ldr	r1, [r2, #0]
 80077ce:	1850      	adds	r0, r2, r1
 80077d0:	42a0      	cmp	r0, r4
 80077d2:	d10b      	bne.n	80077ec <_free_r+0x6c>
 80077d4:	6820      	ldr	r0, [r4, #0]
 80077d6:	4401      	add	r1, r0
 80077d8:	1850      	adds	r0, r2, r1
 80077da:	4283      	cmp	r3, r0
 80077dc:	6011      	str	r1, [r2, #0]
 80077de:	d1e0      	bne.n	80077a2 <_free_r+0x22>
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	6053      	str	r3, [r2, #4]
 80077e6:	4408      	add	r0, r1
 80077e8:	6010      	str	r0, [r2, #0]
 80077ea:	e7da      	b.n	80077a2 <_free_r+0x22>
 80077ec:	d902      	bls.n	80077f4 <_free_r+0x74>
 80077ee:	230c      	movs	r3, #12
 80077f0:	602b      	str	r3, [r5, #0]
 80077f2:	e7d6      	b.n	80077a2 <_free_r+0x22>
 80077f4:	6820      	ldr	r0, [r4, #0]
 80077f6:	1821      	adds	r1, r4, r0
 80077f8:	428b      	cmp	r3, r1
 80077fa:	bf04      	itt	eq
 80077fc:	6819      	ldreq	r1, [r3, #0]
 80077fe:	685b      	ldreq	r3, [r3, #4]
 8007800:	6063      	str	r3, [r4, #4]
 8007802:	bf04      	itt	eq
 8007804:	1809      	addeq	r1, r1, r0
 8007806:	6021      	streq	r1, [r4, #0]
 8007808:	6054      	str	r4, [r2, #4]
 800780a:	e7ca      	b.n	80077a2 <_free_r+0x22>
 800780c:	bd38      	pop	{r3, r4, r5, pc}
 800780e:	bf00      	nop
 8007810:	200005b0 	.word	0x200005b0

08007814 <malloc>:
 8007814:	4b02      	ldr	r3, [pc, #8]	@ (8007820 <malloc+0xc>)
 8007816:	4601      	mov	r1, r0
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	f000 b825 	b.w	8007868 <_malloc_r>
 800781e:	bf00      	nop
 8007820:	2000003c 	.word	0x2000003c

08007824 <sbrk_aligned>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	4e0f      	ldr	r6, [pc, #60]	@ (8007864 <sbrk_aligned+0x40>)
 8007828:	460c      	mov	r4, r1
 800782a:	6831      	ldr	r1, [r6, #0]
 800782c:	4605      	mov	r5, r0
 800782e:	b911      	cbnz	r1, 8007836 <sbrk_aligned+0x12>
 8007830:	f002 f988 	bl	8009b44 <_sbrk_r>
 8007834:	6030      	str	r0, [r6, #0]
 8007836:	4621      	mov	r1, r4
 8007838:	4628      	mov	r0, r5
 800783a:	f002 f983 	bl	8009b44 <_sbrk_r>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d103      	bne.n	800784a <sbrk_aligned+0x26>
 8007842:	f04f 34ff 	mov.w	r4, #4294967295
 8007846:	4620      	mov	r0, r4
 8007848:	bd70      	pop	{r4, r5, r6, pc}
 800784a:	1cc4      	adds	r4, r0, #3
 800784c:	f024 0403 	bic.w	r4, r4, #3
 8007850:	42a0      	cmp	r0, r4
 8007852:	d0f8      	beq.n	8007846 <sbrk_aligned+0x22>
 8007854:	1a21      	subs	r1, r4, r0
 8007856:	4628      	mov	r0, r5
 8007858:	f002 f974 	bl	8009b44 <_sbrk_r>
 800785c:	3001      	adds	r0, #1
 800785e:	d1f2      	bne.n	8007846 <sbrk_aligned+0x22>
 8007860:	e7ef      	b.n	8007842 <sbrk_aligned+0x1e>
 8007862:	bf00      	nop
 8007864:	200005ac 	.word	0x200005ac

08007868 <_malloc_r>:
 8007868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800786c:	1ccd      	adds	r5, r1, #3
 800786e:	f025 0503 	bic.w	r5, r5, #3
 8007872:	3508      	adds	r5, #8
 8007874:	2d0c      	cmp	r5, #12
 8007876:	bf38      	it	cc
 8007878:	250c      	movcc	r5, #12
 800787a:	2d00      	cmp	r5, #0
 800787c:	4606      	mov	r6, r0
 800787e:	db01      	blt.n	8007884 <_malloc_r+0x1c>
 8007880:	42a9      	cmp	r1, r5
 8007882:	d904      	bls.n	800788e <_malloc_r+0x26>
 8007884:	230c      	movs	r3, #12
 8007886:	6033      	str	r3, [r6, #0]
 8007888:	2000      	movs	r0, #0
 800788a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800788e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007964 <_malloc_r+0xfc>
 8007892:	f000 f869 	bl	8007968 <__malloc_lock>
 8007896:	f8d8 3000 	ldr.w	r3, [r8]
 800789a:	461c      	mov	r4, r3
 800789c:	bb44      	cbnz	r4, 80078f0 <_malloc_r+0x88>
 800789e:	4629      	mov	r1, r5
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7ff ffbf 	bl	8007824 <sbrk_aligned>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	4604      	mov	r4, r0
 80078aa:	d158      	bne.n	800795e <_malloc_r+0xf6>
 80078ac:	f8d8 4000 	ldr.w	r4, [r8]
 80078b0:	4627      	mov	r7, r4
 80078b2:	2f00      	cmp	r7, #0
 80078b4:	d143      	bne.n	800793e <_malloc_r+0xd6>
 80078b6:	2c00      	cmp	r4, #0
 80078b8:	d04b      	beq.n	8007952 <_malloc_r+0xea>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	4639      	mov	r1, r7
 80078be:	4630      	mov	r0, r6
 80078c0:	eb04 0903 	add.w	r9, r4, r3
 80078c4:	f002 f93e 	bl	8009b44 <_sbrk_r>
 80078c8:	4581      	cmp	r9, r0
 80078ca:	d142      	bne.n	8007952 <_malloc_r+0xea>
 80078cc:	6821      	ldr	r1, [r4, #0]
 80078ce:	1a6d      	subs	r5, r5, r1
 80078d0:	4629      	mov	r1, r5
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7ff ffa6 	bl	8007824 <sbrk_aligned>
 80078d8:	3001      	adds	r0, #1
 80078da:	d03a      	beq.n	8007952 <_malloc_r+0xea>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	442b      	add	r3, r5
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	f8d8 3000 	ldr.w	r3, [r8]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	bb62      	cbnz	r2, 8007944 <_malloc_r+0xdc>
 80078ea:	f8c8 7000 	str.w	r7, [r8]
 80078ee:	e00f      	b.n	8007910 <_malloc_r+0xa8>
 80078f0:	6822      	ldr	r2, [r4, #0]
 80078f2:	1b52      	subs	r2, r2, r5
 80078f4:	d420      	bmi.n	8007938 <_malloc_r+0xd0>
 80078f6:	2a0b      	cmp	r2, #11
 80078f8:	d917      	bls.n	800792a <_malloc_r+0xc2>
 80078fa:	1961      	adds	r1, r4, r5
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	6025      	str	r5, [r4, #0]
 8007900:	bf18      	it	ne
 8007902:	6059      	strne	r1, [r3, #4]
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	bf08      	it	eq
 8007908:	f8c8 1000 	streq.w	r1, [r8]
 800790c:	5162      	str	r2, [r4, r5]
 800790e:	604b      	str	r3, [r1, #4]
 8007910:	4630      	mov	r0, r6
 8007912:	f000 f82f 	bl	8007974 <__malloc_unlock>
 8007916:	f104 000b 	add.w	r0, r4, #11
 800791a:	1d23      	adds	r3, r4, #4
 800791c:	f020 0007 	bic.w	r0, r0, #7
 8007920:	1ac2      	subs	r2, r0, r3
 8007922:	bf1c      	itt	ne
 8007924:	1a1b      	subne	r3, r3, r0
 8007926:	50a3      	strne	r3, [r4, r2]
 8007928:	e7af      	b.n	800788a <_malloc_r+0x22>
 800792a:	6862      	ldr	r2, [r4, #4]
 800792c:	42a3      	cmp	r3, r4
 800792e:	bf0c      	ite	eq
 8007930:	f8c8 2000 	streq.w	r2, [r8]
 8007934:	605a      	strne	r2, [r3, #4]
 8007936:	e7eb      	b.n	8007910 <_malloc_r+0xa8>
 8007938:	4623      	mov	r3, r4
 800793a:	6864      	ldr	r4, [r4, #4]
 800793c:	e7ae      	b.n	800789c <_malloc_r+0x34>
 800793e:	463c      	mov	r4, r7
 8007940:	687f      	ldr	r7, [r7, #4]
 8007942:	e7b6      	b.n	80078b2 <_malloc_r+0x4a>
 8007944:	461a      	mov	r2, r3
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	42a3      	cmp	r3, r4
 800794a:	d1fb      	bne.n	8007944 <_malloc_r+0xdc>
 800794c:	2300      	movs	r3, #0
 800794e:	6053      	str	r3, [r2, #4]
 8007950:	e7de      	b.n	8007910 <_malloc_r+0xa8>
 8007952:	230c      	movs	r3, #12
 8007954:	6033      	str	r3, [r6, #0]
 8007956:	4630      	mov	r0, r6
 8007958:	f000 f80c 	bl	8007974 <__malloc_unlock>
 800795c:	e794      	b.n	8007888 <_malloc_r+0x20>
 800795e:	6005      	str	r5, [r0, #0]
 8007960:	e7d6      	b.n	8007910 <_malloc_r+0xa8>
 8007962:	bf00      	nop
 8007964:	200005b0 	.word	0x200005b0

08007968 <__malloc_lock>:
 8007968:	4801      	ldr	r0, [pc, #4]	@ (8007970 <__malloc_lock+0x8>)
 800796a:	f7ff b8b4 	b.w	8006ad6 <__retarget_lock_acquire_recursive>
 800796e:	bf00      	nop
 8007970:	200005a8 	.word	0x200005a8

08007974 <__malloc_unlock>:
 8007974:	4801      	ldr	r0, [pc, #4]	@ (800797c <__malloc_unlock+0x8>)
 8007976:	f7ff b8af 	b.w	8006ad8 <__retarget_lock_release_recursive>
 800797a:	bf00      	nop
 800797c:	200005a8 	.word	0x200005a8

08007980 <_Balloc>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	69c6      	ldr	r6, [r0, #28]
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	b976      	cbnz	r6, 80079a8 <_Balloc+0x28>
 800798a:	2010      	movs	r0, #16
 800798c:	f7ff ff42 	bl	8007814 <malloc>
 8007990:	4602      	mov	r2, r0
 8007992:	61e0      	str	r0, [r4, #28]
 8007994:	b920      	cbnz	r0, 80079a0 <_Balloc+0x20>
 8007996:	4b18      	ldr	r3, [pc, #96]	@ (80079f8 <_Balloc+0x78>)
 8007998:	4818      	ldr	r0, [pc, #96]	@ (80079fc <_Balloc+0x7c>)
 800799a:	216b      	movs	r1, #107	@ 0x6b
 800799c:	f002 f8f8 	bl	8009b90 <__assert_func>
 80079a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079a4:	6006      	str	r6, [r0, #0]
 80079a6:	60c6      	str	r6, [r0, #12]
 80079a8:	69e6      	ldr	r6, [r4, #28]
 80079aa:	68f3      	ldr	r3, [r6, #12]
 80079ac:	b183      	cbz	r3, 80079d0 <_Balloc+0x50>
 80079ae:	69e3      	ldr	r3, [r4, #28]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079b6:	b9b8      	cbnz	r0, 80079e8 <_Balloc+0x68>
 80079b8:	2101      	movs	r1, #1
 80079ba:	fa01 f605 	lsl.w	r6, r1, r5
 80079be:	1d72      	adds	r2, r6, #5
 80079c0:	0092      	lsls	r2, r2, #2
 80079c2:	4620      	mov	r0, r4
 80079c4:	f002 f902 	bl	8009bcc <_calloc_r>
 80079c8:	b160      	cbz	r0, 80079e4 <_Balloc+0x64>
 80079ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079ce:	e00e      	b.n	80079ee <_Balloc+0x6e>
 80079d0:	2221      	movs	r2, #33	@ 0x21
 80079d2:	2104      	movs	r1, #4
 80079d4:	4620      	mov	r0, r4
 80079d6:	f002 f8f9 	bl	8009bcc <_calloc_r>
 80079da:	69e3      	ldr	r3, [r4, #28]
 80079dc:	60f0      	str	r0, [r6, #12]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e4      	bne.n	80079ae <_Balloc+0x2e>
 80079e4:	2000      	movs	r0, #0
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	6802      	ldr	r2, [r0, #0]
 80079ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079ee:	2300      	movs	r3, #0
 80079f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079f4:	e7f7      	b.n	80079e6 <_Balloc+0x66>
 80079f6:	bf00      	nop
 80079f8:	0800ad24 	.word	0x0800ad24
 80079fc:	0800ada4 	.word	0x0800ada4

08007a00 <_Bfree>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	69c6      	ldr	r6, [r0, #28]
 8007a04:	4605      	mov	r5, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	b976      	cbnz	r6, 8007a28 <_Bfree+0x28>
 8007a0a:	2010      	movs	r0, #16
 8007a0c:	f7ff ff02 	bl	8007814 <malloc>
 8007a10:	4602      	mov	r2, r0
 8007a12:	61e8      	str	r0, [r5, #28]
 8007a14:	b920      	cbnz	r0, 8007a20 <_Bfree+0x20>
 8007a16:	4b09      	ldr	r3, [pc, #36]	@ (8007a3c <_Bfree+0x3c>)
 8007a18:	4809      	ldr	r0, [pc, #36]	@ (8007a40 <_Bfree+0x40>)
 8007a1a:	218f      	movs	r1, #143	@ 0x8f
 8007a1c:	f002 f8b8 	bl	8009b90 <__assert_func>
 8007a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a24:	6006      	str	r6, [r0, #0]
 8007a26:	60c6      	str	r6, [r0, #12]
 8007a28:	b13c      	cbz	r4, 8007a3a <_Bfree+0x3a>
 8007a2a:	69eb      	ldr	r3, [r5, #28]
 8007a2c:	6862      	ldr	r2, [r4, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a34:	6021      	str	r1, [r4, #0]
 8007a36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	0800ad24 	.word	0x0800ad24
 8007a40:	0800ada4 	.word	0x0800ada4

08007a44 <__multadd>:
 8007a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a48:	690d      	ldr	r5, [r1, #16]
 8007a4a:	4607      	mov	r7, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	461e      	mov	r6, r3
 8007a50:	f101 0c14 	add.w	ip, r1, #20
 8007a54:	2000      	movs	r0, #0
 8007a56:	f8dc 3000 	ldr.w	r3, [ip]
 8007a5a:	b299      	uxth	r1, r3
 8007a5c:	fb02 6101 	mla	r1, r2, r1, r6
 8007a60:	0c1e      	lsrs	r6, r3, #16
 8007a62:	0c0b      	lsrs	r3, r1, #16
 8007a64:	fb02 3306 	mla	r3, r2, r6, r3
 8007a68:	b289      	uxth	r1, r1
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a70:	4285      	cmp	r5, r0
 8007a72:	f84c 1b04 	str.w	r1, [ip], #4
 8007a76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a7a:	dcec      	bgt.n	8007a56 <__multadd+0x12>
 8007a7c:	b30e      	cbz	r6, 8007ac2 <__multadd+0x7e>
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	42ab      	cmp	r3, r5
 8007a82:	dc19      	bgt.n	8007ab8 <__multadd+0x74>
 8007a84:	6861      	ldr	r1, [r4, #4]
 8007a86:	4638      	mov	r0, r7
 8007a88:	3101      	adds	r1, #1
 8007a8a:	f7ff ff79 	bl	8007980 <_Balloc>
 8007a8e:	4680      	mov	r8, r0
 8007a90:	b928      	cbnz	r0, 8007a9e <__multadd+0x5a>
 8007a92:	4602      	mov	r2, r0
 8007a94:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac8 <__multadd+0x84>)
 8007a96:	480d      	ldr	r0, [pc, #52]	@ (8007acc <__multadd+0x88>)
 8007a98:	21ba      	movs	r1, #186	@ 0xba
 8007a9a:	f002 f879 	bl	8009b90 <__assert_func>
 8007a9e:	6922      	ldr	r2, [r4, #16]
 8007aa0:	3202      	adds	r2, #2
 8007aa2:	f104 010c 	add.w	r1, r4, #12
 8007aa6:	0092      	lsls	r2, r2, #2
 8007aa8:	300c      	adds	r0, #12
 8007aaa:	f002 f85b 	bl	8009b64 <memcpy>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7ff ffa5 	bl	8007a00 <_Bfree>
 8007ab6:	4644      	mov	r4, r8
 8007ab8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007abc:	3501      	adds	r5, #1
 8007abe:	615e      	str	r6, [r3, #20]
 8007ac0:	6125      	str	r5, [r4, #16]
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ac8:	0800ad93 	.word	0x0800ad93
 8007acc:	0800ada4 	.word	0x0800ada4

08007ad0 <__s2b>:
 8007ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	4615      	mov	r5, r2
 8007ad8:	461f      	mov	r7, r3
 8007ada:	2209      	movs	r2, #9
 8007adc:	3308      	adds	r3, #8
 8007ade:	4606      	mov	r6, r0
 8007ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	db09      	blt.n	8007b00 <__s2b+0x30>
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7ff ff47 	bl	8007980 <_Balloc>
 8007af2:	b940      	cbnz	r0, 8007b06 <__s2b+0x36>
 8007af4:	4602      	mov	r2, r0
 8007af6:	4b19      	ldr	r3, [pc, #100]	@ (8007b5c <__s2b+0x8c>)
 8007af8:	4819      	ldr	r0, [pc, #100]	@ (8007b60 <__s2b+0x90>)
 8007afa:	21d3      	movs	r1, #211	@ 0xd3
 8007afc:	f002 f848 	bl	8009b90 <__assert_func>
 8007b00:	0052      	lsls	r2, r2, #1
 8007b02:	3101      	adds	r1, #1
 8007b04:	e7f0      	b.n	8007ae8 <__s2b+0x18>
 8007b06:	9b08      	ldr	r3, [sp, #32]
 8007b08:	6143      	str	r3, [r0, #20]
 8007b0a:	2d09      	cmp	r5, #9
 8007b0c:	f04f 0301 	mov.w	r3, #1
 8007b10:	6103      	str	r3, [r0, #16]
 8007b12:	dd16      	ble.n	8007b42 <__s2b+0x72>
 8007b14:	f104 0909 	add.w	r9, r4, #9
 8007b18:	46c8      	mov	r8, r9
 8007b1a:	442c      	add	r4, r5
 8007b1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b20:	4601      	mov	r1, r0
 8007b22:	3b30      	subs	r3, #48	@ 0x30
 8007b24:	220a      	movs	r2, #10
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff ff8c 	bl	8007a44 <__multadd>
 8007b2c:	45a0      	cmp	r8, r4
 8007b2e:	d1f5      	bne.n	8007b1c <__s2b+0x4c>
 8007b30:	f1a5 0408 	sub.w	r4, r5, #8
 8007b34:	444c      	add	r4, r9
 8007b36:	1b2d      	subs	r5, r5, r4
 8007b38:	1963      	adds	r3, r4, r5
 8007b3a:	42bb      	cmp	r3, r7
 8007b3c:	db04      	blt.n	8007b48 <__s2b+0x78>
 8007b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b42:	340a      	adds	r4, #10
 8007b44:	2509      	movs	r5, #9
 8007b46:	e7f6      	b.n	8007b36 <__s2b+0x66>
 8007b48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b4c:	4601      	mov	r1, r0
 8007b4e:	3b30      	subs	r3, #48	@ 0x30
 8007b50:	220a      	movs	r2, #10
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ff76 	bl	8007a44 <__multadd>
 8007b58:	e7ee      	b.n	8007b38 <__s2b+0x68>
 8007b5a:	bf00      	nop
 8007b5c:	0800ad93 	.word	0x0800ad93
 8007b60:	0800ada4 	.word	0x0800ada4

08007b64 <__hi0bits>:
 8007b64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b68:	4603      	mov	r3, r0
 8007b6a:	bf36      	itet	cc
 8007b6c:	0403      	lslcc	r3, r0, #16
 8007b6e:	2000      	movcs	r0, #0
 8007b70:	2010      	movcc	r0, #16
 8007b72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b76:	bf3c      	itt	cc
 8007b78:	021b      	lslcc	r3, r3, #8
 8007b7a:	3008      	addcc	r0, #8
 8007b7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b80:	bf3c      	itt	cc
 8007b82:	011b      	lslcc	r3, r3, #4
 8007b84:	3004      	addcc	r0, #4
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b8a:	bf3c      	itt	cc
 8007b8c:	009b      	lslcc	r3, r3, #2
 8007b8e:	3002      	addcc	r0, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	db05      	blt.n	8007ba0 <__hi0bits+0x3c>
 8007b94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b98:	f100 0001 	add.w	r0, r0, #1
 8007b9c:	bf08      	it	eq
 8007b9e:	2020      	moveq	r0, #32
 8007ba0:	4770      	bx	lr

08007ba2 <__lo0bits>:
 8007ba2:	6803      	ldr	r3, [r0, #0]
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	f013 0007 	ands.w	r0, r3, #7
 8007baa:	d00b      	beq.n	8007bc4 <__lo0bits+0x22>
 8007bac:	07d9      	lsls	r1, r3, #31
 8007bae:	d421      	bmi.n	8007bf4 <__lo0bits+0x52>
 8007bb0:	0798      	lsls	r0, r3, #30
 8007bb2:	bf49      	itett	mi
 8007bb4:	085b      	lsrmi	r3, r3, #1
 8007bb6:	089b      	lsrpl	r3, r3, #2
 8007bb8:	2001      	movmi	r0, #1
 8007bba:	6013      	strmi	r3, [r2, #0]
 8007bbc:	bf5c      	itt	pl
 8007bbe:	6013      	strpl	r3, [r2, #0]
 8007bc0:	2002      	movpl	r0, #2
 8007bc2:	4770      	bx	lr
 8007bc4:	b299      	uxth	r1, r3
 8007bc6:	b909      	cbnz	r1, 8007bcc <__lo0bits+0x2a>
 8007bc8:	0c1b      	lsrs	r3, r3, #16
 8007bca:	2010      	movs	r0, #16
 8007bcc:	b2d9      	uxtb	r1, r3
 8007bce:	b909      	cbnz	r1, 8007bd4 <__lo0bits+0x32>
 8007bd0:	3008      	adds	r0, #8
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	0719      	lsls	r1, r3, #28
 8007bd6:	bf04      	itt	eq
 8007bd8:	091b      	lsreq	r3, r3, #4
 8007bda:	3004      	addeq	r0, #4
 8007bdc:	0799      	lsls	r1, r3, #30
 8007bde:	bf04      	itt	eq
 8007be0:	089b      	lsreq	r3, r3, #2
 8007be2:	3002      	addeq	r0, #2
 8007be4:	07d9      	lsls	r1, r3, #31
 8007be6:	d403      	bmi.n	8007bf0 <__lo0bits+0x4e>
 8007be8:	085b      	lsrs	r3, r3, #1
 8007bea:	f100 0001 	add.w	r0, r0, #1
 8007bee:	d003      	beq.n	8007bf8 <__lo0bits+0x56>
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	4770      	bx	lr
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	4770      	bx	lr
 8007bf8:	2020      	movs	r0, #32
 8007bfa:	4770      	bx	lr

08007bfc <__i2b>:
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	460c      	mov	r4, r1
 8007c00:	2101      	movs	r1, #1
 8007c02:	f7ff febd 	bl	8007980 <_Balloc>
 8007c06:	4602      	mov	r2, r0
 8007c08:	b928      	cbnz	r0, 8007c16 <__i2b+0x1a>
 8007c0a:	4b05      	ldr	r3, [pc, #20]	@ (8007c20 <__i2b+0x24>)
 8007c0c:	4805      	ldr	r0, [pc, #20]	@ (8007c24 <__i2b+0x28>)
 8007c0e:	f240 1145 	movw	r1, #325	@ 0x145
 8007c12:	f001 ffbd 	bl	8009b90 <__assert_func>
 8007c16:	2301      	movs	r3, #1
 8007c18:	6144      	str	r4, [r0, #20]
 8007c1a:	6103      	str	r3, [r0, #16]
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	0800ad93 	.word	0x0800ad93
 8007c24:	0800ada4 	.word	0x0800ada4

08007c28 <__multiply>:
 8007c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	4614      	mov	r4, r2
 8007c2e:	690a      	ldr	r2, [r1, #16]
 8007c30:	6923      	ldr	r3, [r4, #16]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	bfa8      	it	ge
 8007c36:	4623      	movge	r3, r4
 8007c38:	460f      	mov	r7, r1
 8007c3a:	bfa4      	itt	ge
 8007c3c:	460c      	movge	r4, r1
 8007c3e:	461f      	movge	r7, r3
 8007c40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c48:	68a3      	ldr	r3, [r4, #8]
 8007c4a:	6861      	ldr	r1, [r4, #4]
 8007c4c:	eb0a 0609 	add.w	r6, sl, r9
 8007c50:	42b3      	cmp	r3, r6
 8007c52:	b085      	sub	sp, #20
 8007c54:	bfb8      	it	lt
 8007c56:	3101      	addlt	r1, #1
 8007c58:	f7ff fe92 	bl	8007980 <_Balloc>
 8007c5c:	b930      	cbnz	r0, 8007c6c <__multiply+0x44>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4b44      	ldr	r3, [pc, #272]	@ (8007d74 <__multiply+0x14c>)
 8007c62:	4845      	ldr	r0, [pc, #276]	@ (8007d78 <__multiply+0x150>)
 8007c64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c68:	f001 ff92 	bl	8009b90 <__assert_func>
 8007c6c:	f100 0514 	add.w	r5, r0, #20
 8007c70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c74:	462b      	mov	r3, r5
 8007c76:	2200      	movs	r2, #0
 8007c78:	4543      	cmp	r3, r8
 8007c7a:	d321      	bcc.n	8007cc0 <__multiply+0x98>
 8007c7c:	f107 0114 	add.w	r1, r7, #20
 8007c80:	f104 0214 	add.w	r2, r4, #20
 8007c84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c8c:	9302      	str	r3, [sp, #8]
 8007c8e:	1b13      	subs	r3, r2, r4
 8007c90:	3b15      	subs	r3, #21
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	3304      	adds	r3, #4
 8007c98:	f104 0715 	add.w	r7, r4, #21
 8007c9c:	42ba      	cmp	r2, r7
 8007c9e:	bf38      	it	cc
 8007ca0:	2304      	movcc	r3, #4
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	9103      	str	r1, [sp, #12]
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	d80c      	bhi.n	8007cc6 <__multiply+0x9e>
 8007cac:	2e00      	cmp	r6, #0
 8007cae:	dd03      	ble.n	8007cb8 <__multiply+0x90>
 8007cb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d05b      	beq.n	8007d70 <__multiply+0x148>
 8007cb8:	6106      	str	r6, [r0, #16]
 8007cba:	b005      	add	sp, #20
 8007cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cc0:	f843 2b04 	str.w	r2, [r3], #4
 8007cc4:	e7d8      	b.n	8007c78 <__multiply+0x50>
 8007cc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cca:	f1ba 0f00 	cmp.w	sl, #0
 8007cce:	d024      	beq.n	8007d1a <__multiply+0xf2>
 8007cd0:	f104 0e14 	add.w	lr, r4, #20
 8007cd4:	46a9      	mov	r9, r5
 8007cd6:	f04f 0c00 	mov.w	ip, #0
 8007cda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007cde:	f8d9 3000 	ldr.w	r3, [r9]
 8007ce2:	fa1f fb87 	uxth.w	fp, r7
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007cec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007cf0:	f8d9 7000 	ldr.w	r7, [r9]
 8007cf4:	4463      	add	r3, ip
 8007cf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cfa:	fb0a c70b 	mla	r7, sl, fp, ip
 8007cfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d08:	4572      	cmp	r2, lr
 8007d0a:	f849 3b04 	str.w	r3, [r9], #4
 8007d0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d12:	d8e2      	bhi.n	8007cda <__multiply+0xb2>
 8007d14:	9b01      	ldr	r3, [sp, #4]
 8007d16:	f845 c003 	str.w	ip, [r5, r3]
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d20:	3104      	adds	r1, #4
 8007d22:	f1b9 0f00 	cmp.w	r9, #0
 8007d26:	d021      	beq.n	8007d6c <__multiply+0x144>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	f104 0c14 	add.w	ip, r4, #20
 8007d2e:	46ae      	mov	lr, r5
 8007d30:	f04f 0a00 	mov.w	sl, #0
 8007d34:	f8bc b000 	ldrh.w	fp, [ip]
 8007d38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d3c:	fb09 770b 	mla	r7, r9, fp, r7
 8007d40:	4457      	add	r7, sl
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d48:	f84e 3b04 	str.w	r3, [lr], #4
 8007d4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d54:	f8be 3000 	ldrh.w	r3, [lr]
 8007d58:	fb09 330a 	mla	r3, r9, sl, r3
 8007d5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d60:	4562      	cmp	r2, ip
 8007d62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d66:	d8e5      	bhi.n	8007d34 <__multiply+0x10c>
 8007d68:	9f01      	ldr	r7, [sp, #4]
 8007d6a:	51eb      	str	r3, [r5, r7]
 8007d6c:	3504      	adds	r5, #4
 8007d6e:	e799      	b.n	8007ca4 <__multiply+0x7c>
 8007d70:	3e01      	subs	r6, #1
 8007d72:	e79b      	b.n	8007cac <__multiply+0x84>
 8007d74:	0800ad93 	.word	0x0800ad93
 8007d78:	0800ada4 	.word	0x0800ada4

08007d7c <__pow5mult>:
 8007d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d80:	4615      	mov	r5, r2
 8007d82:	f012 0203 	ands.w	r2, r2, #3
 8007d86:	4607      	mov	r7, r0
 8007d88:	460e      	mov	r6, r1
 8007d8a:	d007      	beq.n	8007d9c <__pow5mult+0x20>
 8007d8c:	4c25      	ldr	r4, [pc, #148]	@ (8007e24 <__pow5mult+0xa8>)
 8007d8e:	3a01      	subs	r2, #1
 8007d90:	2300      	movs	r3, #0
 8007d92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d96:	f7ff fe55 	bl	8007a44 <__multadd>
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	10ad      	asrs	r5, r5, #2
 8007d9e:	d03d      	beq.n	8007e1c <__pow5mult+0xa0>
 8007da0:	69fc      	ldr	r4, [r7, #28]
 8007da2:	b97c      	cbnz	r4, 8007dc4 <__pow5mult+0x48>
 8007da4:	2010      	movs	r0, #16
 8007da6:	f7ff fd35 	bl	8007814 <malloc>
 8007daa:	4602      	mov	r2, r0
 8007dac:	61f8      	str	r0, [r7, #28]
 8007dae:	b928      	cbnz	r0, 8007dbc <__pow5mult+0x40>
 8007db0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e28 <__pow5mult+0xac>)
 8007db2:	481e      	ldr	r0, [pc, #120]	@ (8007e2c <__pow5mult+0xb0>)
 8007db4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007db8:	f001 feea 	bl	8009b90 <__assert_func>
 8007dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dc0:	6004      	str	r4, [r0, #0]
 8007dc2:	60c4      	str	r4, [r0, #12]
 8007dc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dcc:	b94c      	cbnz	r4, 8007de2 <__pow5mult+0x66>
 8007dce:	f240 2171 	movw	r1, #625	@ 0x271
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f7ff ff12 	bl	8007bfc <__i2b>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dde:	4604      	mov	r4, r0
 8007de0:	6003      	str	r3, [r0, #0]
 8007de2:	f04f 0900 	mov.w	r9, #0
 8007de6:	07eb      	lsls	r3, r5, #31
 8007de8:	d50a      	bpl.n	8007e00 <__pow5mult+0x84>
 8007dea:	4631      	mov	r1, r6
 8007dec:	4622      	mov	r2, r4
 8007dee:	4638      	mov	r0, r7
 8007df0:	f7ff ff1a 	bl	8007c28 <__multiply>
 8007df4:	4631      	mov	r1, r6
 8007df6:	4680      	mov	r8, r0
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7ff fe01 	bl	8007a00 <_Bfree>
 8007dfe:	4646      	mov	r6, r8
 8007e00:	106d      	asrs	r5, r5, #1
 8007e02:	d00b      	beq.n	8007e1c <__pow5mult+0xa0>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	b938      	cbnz	r0, 8007e18 <__pow5mult+0x9c>
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff ff0b 	bl	8007c28 <__multiply>
 8007e12:	6020      	str	r0, [r4, #0]
 8007e14:	f8c0 9000 	str.w	r9, [r0]
 8007e18:	4604      	mov	r4, r0
 8007e1a:	e7e4      	b.n	8007de6 <__pow5mult+0x6a>
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e22:	bf00      	nop
 8007e24:	0800ae00 	.word	0x0800ae00
 8007e28:	0800ad24 	.word	0x0800ad24
 8007e2c:	0800ada4 	.word	0x0800ada4

08007e30 <__lshift>:
 8007e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e34:	460c      	mov	r4, r1
 8007e36:	6849      	ldr	r1, [r1, #4]
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e3e:	68a3      	ldr	r3, [r4, #8]
 8007e40:	4607      	mov	r7, r0
 8007e42:	4691      	mov	r9, r2
 8007e44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e48:	f108 0601 	add.w	r6, r8, #1
 8007e4c:	42b3      	cmp	r3, r6
 8007e4e:	db0b      	blt.n	8007e68 <__lshift+0x38>
 8007e50:	4638      	mov	r0, r7
 8007e52:	f7ff fd95 	bl	8007980 <_Balloc>
 8007e56:	4605      	mov	r5, r0
 8007e58:	b948      	cbnz	r0, 8007e6e <__lshift+0x3e>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	4b28      	ldr	r3, [pc, #160]	@ (8007f00 <__lshift+0xd0>)
 8007e5e:	4829      	ldr	r0, [pc, #164]	@ (8007f04 <__lshift+0xd4>)
 8007e60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e64:	f001 fe94 	bl	8009b90 <__assert_func>
 8007e68:	3101      	adds	r1, #1
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	e7ee      	b.n	8007e4c <__lshift+0x1c>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f100 0114 	add.w	r1, r0, #20
 8007e74:	f100 0210 	add.w	r2, r0, #16
 8007e78:	4618      	mov	r0, r3
 8007e7a:	4553      	cmp	r3, sl
 8007e7c:	db33      	blt.n	8007ee6 <__lshift+0xb6>
 8007e7e:	6920      	ldr	r0, [r4, #16]
 8007e80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e84:	f104 0314 	add.w	r3, r4, #20
 8007e88:	f019 091f 	ands.w	r9, r9, #31
 8007e8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e94:	d02b      	beq.n	8007eee <__lshift+0xbe>
 8007e96:	f1c9 0e20 	rsb	lr, r9, #32
 8007e9a:	468a      	mov	sl, r1
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	fa00 f009 	lsl.w	r0, r0, r9
 8007ea4:	4310      	orrs	r0, r2
 8007ea6:	f84a 0b04 	str.w	r0, [sl], #4
 8007eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eae:	459c      	cmp	ip, r3
 8007eb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007eb4:	d8f3      	bhi.n	8007e9e <__lshift+0x6e>
 8007eb6:	ebac 0304 	sub.w	r3, ip, r4
 8007eba:	3b15      	subs	r3, #21
 8007ebc:	f023 0303 	bic.w	r3, r3, #3
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	f104 0015 	add.w	r0, r4, #21
 8007ec6:	4584      	cmp	ip, r0
 8007ec8:	bf38      	it	cc
 8007eca:	2304      	movcc	r3, #4
 8007ecc:	50ca      	str	r2, [r1, r3]
 8007ece:	b10a      	cbz	r2, 8007ed4 <__lshift+0xa4>
 8007ed0:	f108 0602 	add.w	r6, r8, #2
 8007ed4:	3e01      	subs	r6, #1
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	612e      	str	r6, [r5, #16]
 8007eda:	4621      	mov	r1, r4
 8007edc:	f7ff fd90 	bl	8007a00 <_Bfree>
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eea:	3301      	adds	r3, #1
 8007eec:	e7c5      	b.n	8007e7a <__lshift+0x4a>
 8007eee:	3904      	subs	r1, #4
 8007ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ef8:	459c      	cmp	ip, r3
 8007efa:	d8f9      	bhi.n	8007ef0 <__lshift+0xc0>
 8007efc:	e7ea      	b.n	8007ed4 <__lshift+0xa4>
 8007efe:	bf00      	nop
 8007f00:	0800ad93 	.word	0x0800ad93
 8007f04:	0800ada4 	.word	0x0800ada4

08007f08 <__mcmp>:
 8007f08:	690a      	ldr	r2, [r1, #16]
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	6900      	ldr	r0, [r0, #16]
 8007f0e:	1a80      	subs	r0, r0, r2
 8007f10:	b530      	push	{r4, r5, lr}
 8007f12:	d10e      	bne.n	8007f32 <__mcmp+0x2a>
 8007f14:	3314      	adds	r3, #20
 8007f16:	3114      	adds	r1, #20
 8007f18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f28:	4295      	cmp	r5, r2
 8007f2a:	d003      	beq.n	8007f34 <__mcmp+0x2c>
 8007f2c:	d205      	bcs.n	8007f3a <__mcmp+0x32>
 8007f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f32:	bd30      	pop	{r4, r5, pc}
 8007f34:	42a3      	cmp	r3, r4
 8007f36:	d3f3      	bcc.n	8007f20 <__mcmp+0x18>
 8007f38:	e7fb      	b.n	8007f32 <__mcmp+0x2a>
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	e7f9      	b.n	8007f32 <__mcmp+0x2a>
	...

08007f40 <__mdiff>:
 8007f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	4689      	mov	r9, r1
 8007f46:	4606      	mov	r6, r0
 8007f48:	4611      	mov	r1, r2
 8007f4a:	4648      	mov	r0, r9
 8007f4c:	4614      	mov	r4, r2
 8007f4e:	f7ff ffdb 	bl	8007f08 <__mcmp>
 8007f52:	1e05      	subs	r5, r0, #0
 8007f54:	d112      	bne.n	8007f7c <__mdiff+0x3c>
 8007f56:	4629      	mov	r1, r5
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff fd11 	bl	8007980 <_Balloc>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	b928      	cbnz	r0, 8007f6e <__mdiff+0x2e>
 8007f62:	4b3f      	ldr	r3, [pc, #252]	@ (8008060 <__mdiff+0x120>)
 8007f64:	f240 2137 	movw	r1, #567	@ 0x237
 8007f68:	483e      	ldr	r0, [pc, #248]	@ (8008064 <__mdiff+0x124>)
 8007f6a:	f001 fe11 	bl	8009b90 <__assert_func>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f74:	4610      	mov	r0, r2
 8007f76:	b003      	add	sp, #12
 8007f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7c:	bfbc      	itt	lt
 8007f7e:	464b      	movlt	r3, r9
 8007f80:	46a1      	movlt	r9, r4
 8007f82:	4630      	mov	r0, r6
 8007f84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f88:	bfba      	itte	lt
 8007f8a:	461c      	movlt	r4, r3
 8007f8c:	2501      	movlt	r5, #1
 8007f8e:	2500      	movge	r5, #0
 8007f90:	f7ff fcf6 	bl	8007980 <_Balloc>
 8007f94:	4602      	mov	r2, r0
 8007f96:	b918      	cbnz	r0, 8007fa0 <__mdiff+0x60>
 8007f98:	4b31      	ldr	r3, [pc, #196]	@ (8008060 <__mdiff+0x120>)
 8007f9a:	f240 2145 	movw	r1, #581	@ 0x245
 8007f9e:	e7e3      	b.n	8007f68 <__mdiff+0x28>
 8007fa0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007fa4:	6926      	ldr	r6, [r4, #16]
 8007fa6:	60c5      	str	r5, [r0, #12]
 8007fa8:	f109 0310 	add.w	r3, r9, #16
 8007fac:	f109 0514 	add.w	r5, r9, #20
 8007fb0:	f104 0e14 	add.w	lr, r4, #20
 8007fb4:	f100 0b14 	add.w	fp, r0, #20
 8007fb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007fc0:	9301      	str	r3, [sp, #4]
 8007fc2:	46d9      	mov	r9, fp
 8007fc4:	f04f 0c00 	mov.w	ip, #0
 8007fc8:	9b01      	ldr	r3, [sp, #4]
 8007fca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007fce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	fa1f f38a 	uxth.w	r3, sl
 8007fd8:	4619      	mov	r1, r3
 8007fda:	b283      	uxth	r3, r0
 8007fdc:	1acb      	subs	r3, r1, r3
 8007fde:	0c00      	lsrs	r0, r0, #16
 8007fe0:	4463      	add	r3, ip
 8007fe2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007fe6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ff0:	4576      	cmp	r6, lr
 8007ff2:	f849 3b04 	str.w	r3, [r9], #4
 8007ff6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ffa:	d8e5      	bhi.n	8007fc8 <__mdiff+0x88>
 8007ffc:	1b33      	subs	r3, r6, r4
 8007ffe:	3b15      	subs	r3, #21
 8008000:	f023 0303 	bic.w	r3, r3, #3
 8008004:	3415      	adds	r4, #21
 8008006:	3304      	adds	r3, #4
 8008008:	42a6      	cmp	r6, r4
 800800a:	bf38      	it	cc
 800800c:	2304      	movcc	r3, #4
 800800e:	441d      	add	r5, r3
 8008010:	445b      	add	r3, fp
 8008012:	461e      	mov	r6, r3
 8008014:	462c      	mov	r4, r5
 8008016:	4544      	cmp	r4, r8
 8008018:	d30e      	bcc.n	8008038 <__mdiff+0xf8>
 800801a:	f108 0103 	add.w	r1, r8, #3
 800801e:	1b49      	subs	r1, r1, r5
 8008020:	f021 0103 	bic.w	r1, r1, #3
 8008024:	3d03      	subs	r5, #3
 8008026:	45a8      	cmp	r8, r5
 8008028:	bf38      	it	cc
 800802a:	2100      	movcc	r1, #0
 800802c:	440b      	add	r3, r1
 800802e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008032:	b191      	cbz	r1, 800805a <__mdiff+0x11a>
 8008034:	6117      	str	r7, [r2, #16]
 8008036:	e79d      	b.n	8007f74 <__mdiff+0x34>
 8008038:	f854 1b04 	ldr.w	r1, [r4], #4
 800803c:	46e6      	mov	lr, ip
 800803e:	0c08      	lsrs	r0, r1, #16
 8008040:	fa1c fc81 	uxtah	ip, ip, r1
 8008044:	4471      	add	r1, lr
 8008046:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800804a:	b289      	uxth	r1, r1
 800804c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008050:	f846 1b04 	str.w	r1, [r6], #4
 8008054:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008058:	e7dd      	b.n	8008016 <__mdiff+0xd6>
 800805a:	3f01      	subs	r7, #1
 800805c:	e7e7      	b.n	800802e <__mdiff+0xee>
 800805e:	bf00      	nop
 8008060:	0800ad93 	.word	0x0800ad93
 8008064:	0800ada4 	.word	0x0800ada4

08008068 <__ulp>:
 8008068:	b082      	sub	sp, #8
 800806a:	ed8d 0b00 	vstr	d0, [sp]
 800806e:	9a01      	ldr	r2, [sp, #4]
 8008070:	4b0f      	ldr	r3, [pc, #60]	@ (80080b0 <__ulp+0x48>)
 8008072:	4013      	ands	r3, r2
 8008074:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008078:	2b00      	cmp	r3, #0
 800807a:	dc08      	bgt.n	800808e <__ulp+0x26>
 800807c:	425b      	negs	r3, r3
 800807e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008082:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008086:	da04      	bge.n	8008092 <__ulp+0x2a>
 8008088:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800808c:	4113      	asrs	r3, r2
 800808e:	2200      	movs	r2, #0
 8008090:	e008      	b.n	80080a4 <__ulp+0x3c>
 8008092:	f1a2 0314 	sub.w	r3, r2, #20
 8008096:	2b1e      	cmp	r3, #30
 8008098:	bfda      	itte	le
 800809a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800809e:	40da      	lsrle	r2, r3
 80080a0:	2201      	movgt	r2, #1
 80080a2:	2300      	movs	r3, #0
 80080a4:	4619      	mov	r1, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	ec41 0b10 	vmov	d0, r0, r1
 80080ac:	b002      	add	sp, #8
 80080ae:	4770      	bx	lr
 80080b0:	7ff00000 	.word	0x7ff00000

080080b4 <__b2d>:
 80080b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b8:	6906      	ldr	r6, [r0, #16]
 80080ba:	f100 0814 	add.w	r8, r0, #20
 80080be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80080c2:	1f37      	subs	r7, r6, #4
 80080c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80080c8:	4610      	mov	r0, r2
 80080ca:	f7ff fd4b 	bl	8007b64 <__hi0bits>
 80080ce:	f1c0 0320 	rsb	r3, r0, #32
 80080d2:	280a      	cmp	r0, #10
 80080d4:	600b      	str	r3, [r1, #0]
 80080d6:	491b      	ldr	r1, [pc, #108]	@ (8008144 <__b2d+0x90>)
 80080d8:	dc15      	bgt.n	8008106 <__b2d+0x52>
 80080da:	f1c0 0c0b 	rsb	ip, r0, #11
 80080de:	fa22 f30c 	lsr.w	r3, r2, ip
 80080e2:	45b8      	cmp	r8, r7
 80080e4:	ea43 0501 	orr.w	r5, r3, r1
 80080e8:	bf34      	ite	cc
 80080ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80080ee:	2300      	movcs	r3, #0
 80080f0:	3015      	adds	r0, #21
 80080f2:	fa02 f000 	lsl.w	r0, r2, r0
 80080f6:	fa23 f30c 	lsr.w	r3, r3, ip
 80080fa:	4303      	orrs	r3, r0
 80080fc:	461c      	mov	r4, r3
 80080fe:	ec45 4b10 	vmov	d0, r4, r5
 8008102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008106:	45b8      	cmp	r8, r7
 8008108:	bf3a      	itte	cc
 800810a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800810e:	f1a6 0708 	subcc.w	r7, r6, #8
 8008112:	2300      	movcs	r3, #0
 8008114:	380b      	subs	r0, #11
 8008116:	d012      	beq.n	800813e <__b2d+0x8a>
 8008118:	f1c0 0120 	rsb	r1, r0, #32
 800811c:	fa23 f401 	lsr.w	r4, r3, r1
 8008120:	4082      	lsls	r2, r0
 8008122:	4322      	orrs	r2, r4
 8008124:	4547      	cmp	r7, r8
 8008126:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800812a:	bf8c      	ite	hi
 800812c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008130:	2200      	movls	r2, #0
 8008132:	4083      	lsls	r3, r0
 8008134:	40ca      	lsrs	r2, r1
 8008136:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800813a:	4313      	orrs	r3, r2
 800813c:	e7de      	b.n	80080fc <__b2d+0x48>
 800813e:	ea42 0501 	orr.w	r5, r2, r1
 8008142:	e7db      	b.n	80080fc <__b2d+0x48>
 8008144:	3ff00000 	.word	0x3ff00000

08008148 <__d2b>:
 8008148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800814c:	460f      	mov	r7, r1
 800814e:	2101      	movs	r1, #1
 8008150:	ec59 8b10 	vmov	r8, r9, d0
 8008154:	4616      	mov	r6, r2
 8008156:	f7ff fc13 	bl	8007980 <_Balloc>
 800815a:	4604      	mov	r4, r0
 800815c:	b930      	cbnz	r0, 800816c <__d2b+0x24>
 800815e:	4602      	mov	r2, r0
 8008160:	4b23      	ldr	r3, [pc, #140]	@ (80081f0 <__d2b+0xa8>)
 8008162:	4824      	ldr	r0, [pc, #144]	@ (80081f4 <__d2b+0xac>)
 8008164:	f240 310f 	movw	r1, #783	@ 0x30f
 8008168:	f001 fd12 	bl	8009b90 <__assert_func>
 800816c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008174:	b10d      	cbz	r5, 800817a <__d2b+0x32>
 8008176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	f1b8 0300 	subs.w	r3, r8, #0
 8008180:	d023      	beq.n	80081ca <__d2b+0x82>
 8008182:	4668      	mov	r0, sp
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	f7ff fd0c 	bl	8007ba2 <__lo0bits>
 800818a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800818e:	b1d0      	cbz	r0, 80081c6 <__d2b+0x7e>
 8008190:	f1c0 0320 	rsb	r3, r0, #32
 8008194:	fa02 f303 	lsl.w	r3, r2, r3
 8008198:	430b      	orrs	r3, r1
 800819a:	40c2      	lsrs	r2, r0
 800819c:	6163      	str	r3, [r4, #20]
 800819e:	9201      	str	r2, [sp, #4]
 80081a0:	9b01      	ldr	r3, [sp, #4]
 80081a2:	61a3      	str	r3, [r4, #24]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bf0c      	ite	eq
 80081a8:	2201      	moveq	r2, #1
 80081aa:	2202      	movne	r2, #2
 80081ac:	6122      	str	r2, [r4, #16]
 80081ae:	b1a5      	cbz	r5, 80081da <__d2b+0x92>
 80081b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80081b4:	4405      	add	r5, r0
 80081b6:	603d      	str	r5, [r7, #0]
 80081b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80081bc:	6030      	str	r0, [r6, #0]
 80081be:	4620      	mov	r0, r4
 80081c0:	b003      	add	sp, #12
 80081c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081c6:	6161      	str	r1, [r4, #20]
 80081c8:	e7ea      	b.n	80081a0 <__d2b+0x58>
 80081ca:	a801      	add	r0, sp, #4
 80081cc:	f7ff fce9 	bl	8007ba2 <__lo0bits>
 80081d0:	9b01      	ldr	r3, [sp, #4]
 80081d2:	6163      	str	r3, [r4, #20]
 80081d4:	3020      	adds	r0, #32
 80081d6:	2201      	movs	r2, #1
 80081d8:	e7e8      	b.n	80081ac <__d2b+0x64>
 80081da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081e2:	6038      	str	r0, [r7, #0]
 80081e4:	6918      	ldr	r0, [r3, #16]
 80081e6:	f7ff fcbd 	bl	8007b64 <__hi0bits>
 80081ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081ee:	e7e5      	b.n	80081bc <__d2b+0x74>
 80081f0:	0800ad93 	.word	0x0800ad93
 80081f4:	0800ada4 	.word	0x0800ada4

080081f8 <__ratio>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	b085      	sub	sp, #20
 80081fe:	e9cd 1000 	strd	r1, r0, [sp]
 8008202:	a902      	add	r1, sp, #8
 8008204:	f7ff ff56 	bl	80080b4 <__b2d>
 8008208:	9800      	ldr	r0, [sp, #0]
 800820a:	a903      	add	r1, sp, #12
 800820c:	ec55 4b10 	vmov	r4, r5, d0
 8008210:	f7ff ff50 	bl	80080b4 <__b2d>
 8008214:	9b01      	ldr	r3, [sp, #4]
 8008216:	6919      	ldr	r1, [r3, #16]
 8008218:	9b00      	ldr	r3, [sp, #0]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	1ac9      	subs	r1, r1, r3
 800821e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008222:	1a9b      	subs	r3, r3, r2
 8008224:	ec5b ab10 	vmov	sl, fp, d0
 8008228:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800822c:	2b00      	cmp	r3, #0
 800822e:	bfce      	itee	gt
 8008230:	462a      	movgt	r2, r5
 8008232:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008236:	465a      	movle	r2, fp
 8008238:	462f      	mov	r7, r5
 800823a:	46d9      	mov	r9, fp
 800823c:	bfcc      	ite	gt
 800823e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008242:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008246:	464b      	mov	r3, r9
 8008248:	4652      	mov	r2, sl
 800824a:	4620      	mov	r0, r4
 800824c:	4639      	mov	r1, r7
 800824e:	f7f8 fb05 	bl	800085c <__aeabi_ddiv>
 8008252:	ec41 0b10 	vmov	d0, r0, r1
 8008256:	b005      	add	sp, #20
 8008258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800825c <__copybits>:
 800825c:	3901      	subs	r1, #1
 800825e:	b570      	push	{r4, r5, r6, lr}
 8008260:	1149      	asrs	r1, r1, #5
 8008262:	6914      	ldr	r4, [r2, #16]
 8008264:	3101      	adds	r1, #1
 8008266:	f102 0314 	add.w	r3, r2, #20
 800826a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800826e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008272:	1f05      	subs	r5, r0, #4
 8008274:	42a3      	cmp	r3, r4
 8008276:	d30c      	bcc.n	8008292 <__copybits+0x36>
 8008278:	1aa3      	subs	r3, r4, r2
 800827a:	3b11      	subs	r3, #17
 800827c:	f023 0303 	bic.w	r3, r3, #3
 8008280:	3211      	adds	r2, #17
 8008282:	42a2      	cmp	r2, r4
 8008284:	bf88      	it	hi
 8008286:	2300      	movhi	r3, #0
 8008288:	4418      	add	r0, r3
 800828a:	2300      	movs	r3, #0
 800828c:	4288      	cmp	r0, r1
 800828e:	d305      	bcc.n	800829c <__copybits+0x40>
 8008290:	bd70      	pop	{r4, r5, r6, pc}
 8008292:	f853 6b04 	ldr.w	r6, [r3], #4
 8008296:	f845 6f04 	str.w	r6, [r5, #4]!
 800829a:	e7eb      	b.n	8008274 <__copybits+0x18>
 800829c:	f840 3b04 	str.w	r3, [r0], #4
 80082a0:	e7f4      	b.n	800828c <__copybits+0x30>

080082a2 <__any_on>:
 80082a2:	f100 0214 	add.w	r2, r0, #20
 80082a6:	6900      	ldr	r0, [r0, #16]
 80082a8:	114b      	asrs	r3, r1, #5
 80082aa:	4298      	cmp	r0, r3
 80082ac:	b510      	push	{r4, lr}
 80082ae:	db11      	blt.n	80082d4 <__any_on+0x32>
 80082b0:	dd0a      	ble.n	80082c8 <__any_on+0x26>
 80082b2:	f011 011f 	ands.w	r1, r1, #31
 80082b6:	d007      	beq.n	80082c8 <__any_on+0x26>
 80082b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80082bc:	fa24 f001 	lsr.w	r0, r4, r1
 80082c0:	fa00 f101 	lsl.w	r1, r0, r1
 80082c4:	428c      	cmp	r4, r1
 80082c6:	d10b      	bne.n	80082e0 <__any_on+0x3e>
 80082c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d803      	bhi.n	80082d8 <__any_on+0x36>
 80082d0:	2000      	movs	r0, #0
 80082d2:	bd10      	pop	{r4, pc}
 80082d4:	4603      	mov	r3, r0
 80082d6:	e7f7      	b.n	80082c8 <__any_on+0x26>
 80082d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082dc:	2900      	cmp	r1, #0
 80082de:	d0f5      	beq.n	80082cc <__any_on+0x2a>
 80082e0:	2001      	movs	r0, #1
 80082e2:	e7f6      	b.n	80082d2 <__any_on+0x30>

080082e4 <sulp>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	4604      	mov	r4, r0
 80082e8:	460d      	mov	r5, r1
 80082ea:	ec45 4b10 	vmov	d0, r4, r5
 80082ee:	4616      	mov	r6, r2
 80082f0:	f7ff feba 	bl	8008068 <__ulp>
 80082f4:	ec51 0b10 	vmov	r0, r1, d0
 80082f8:	b17e      	cbz	r6, 800831a <sulp+0x36>
 80082fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80082fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008302:	2b00      	cmp	r3, #0
 8008304:	dd09      	ble.n	800831a <sulp+0x36>
 8008306:	051b      	lsls	r3, r3, #20
 8008308:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800830c:	2400      	movs	r4, #0
 800830e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008312:	4622      	mov	r2, r4
 8008314:	462b      	mov	r3, r5
 8008316:	f7f8 f977 	bl	8000608 <__aeabi_dmul>
 800831a:	ec41 0b10 	vmov	d0, r0, r1
 800831e:	bd70      	pop	{r4, r5, r6, pc}

08008320 <_strtod_l>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	b09f      	sub	sp, #124	@ 0x7c
 8008326:	460c      	mov	r4, r1
 8008328:	9217      	str	r2, [sp, #92]	@ 0x5c
 800832a:	2200      	movs	r2, #0
 800832c:	921a      	str	r2, [sp, #104]	@ 0x68
 800832e:	9005      	str	r0, [sp, #20]
 8008330:	f04f 0a00 	mov.w	sl, #0
 8008334:	f04f 0b00 	mov.w	fp, #0
 8008338:	460a      	mov	r2, r1
 800833a:	9219      	str	r2, [sp, #100]	@ 0x64
 800833c:	7811      	ldrb	r1, [r2, #0]
 800833e:	292b      	cmp	r1, #43	@ 0x2b
 8008340:	d04a      	beq.n	80083d8 <_strtod_l+0xb8>
 8008342:	d838      	bhi.n	80083b6 <_strtod_l+0x96>
 8008344:	290d      	cmp	r1, #13
 8008346:	d832      	bhi.n	80083ae <_strtod_l+0x8e>
 8008348:	2908      	cmp	r1, #8
 800834a:	d832      	bhi.n	80083b2 <_strtod_l+0x92>
 800834c:	2900      	cmp	r1, #0
 800834e:	d03b      	beq.n	80083c8 <_strtod_l+0xa8>
 8008350:	2200      	movs	r2, #0
 8008352:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008354:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008356:	782a      	ldrb	r2, [r5, #0]
 8008358:	2a30      	cmp	r2, #48	@ 0x30
 800835a:	f040 80b3 	bne.w	80084c4 <_strtod_l+0x1a4>
 800835e:	786a      	ldrb	r2, [r5, #1]
 8008360:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008364:	2a58      	cmp	r2, #88	@ 0x58
 8008366:	d16e      	bne.n	8008446 <_strtod_l+0x126>
 8008368:	9302      	str	r3, [sp, #8]
 800836a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	4a8e      	ldr	r2, [pc, #568]	@ (80085ac <_strtod_l+0x28c>)
 8008374:	9805      	ldr	r0, [sp, #20]
 8008376:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008378:	a919      	add	r1, sp, #100	@ 0x64
 800837a:	f001 fca3 	bl	8009cc4 <__gethex>
 800837e:	f010 060f 	ands.w	r6, r0, #15
 8008382:	4604      	mov	r4, r0
 8008384:	d005      	beq.n	8008392 <_strtod_l+0x72>
 8008386:	2e06      	cmp	r6, #6
 8008388:	d128      	bne.n	80083dc <_strtod_l+0xbc>
 800838a:	3501      	adds	r5, #1
 800838c:	2300      	movs	r3, #0
 800838e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008392:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008394:	2b00      	cmp	r3, #0
 8008396:	f040 858e 	bne.w	8008eb6 <_strtod_l+0xb96>
 800839a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800839c:	b1cb      	cbz	r3, 80083d2 <_strtod_l+0xb2>
 800839e:	4652      	mov	r2, sl
 80083a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80083a4:	ec43 2b10 	vmov	d0, r2, r3
 80083a8:	b01f      	add	sp, #124	@ 0x7c
 80083aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ae:	2920      	cmp	r1, #32
 80083b0:	d1ce      	bne.n	8008350 <_strtod_l+0x30>
 80083b2:	3201      	adds	r2, #1
 80083b4:	e7c1      	b.n	800833a <_strtod_l+0x1a>
 80083b6:	292d      	cmp	r1, #45	@ 0x2d
 80083b8:	d1ca      	bne.n	8008350 <_strtod_l+0x30>
 80083ba:	2101      	movs	r1, #1
 80083bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80083be:	1c51      	adds	r1, r2, #1
 80083c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80083c2:	7852      	ldrb	r2, [r2, #1]
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	d1c5      	bne.n	8008354 <_strtod_l+0x34>
 80083c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80083ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f040 8570 	bne.w	8008eb2 <_strtod_l+0xb92>
 80083d2:	4652      	mov	r2, sl
 80083d4:	465b      	mov	r3, fp
 80083d6:	e7e5      	b.n	80083a4 <_strtod_l+0x84>
 80083d8:	2100      	movs	r1, #0
 80083da:	e7ef      	b.n	80083bc <_strtod_l+0x9c>
 80083dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80083de:	b13a      	cbz	r2, 80083f0 <_strtod_l+0xd0>
 80083e0:	2135      	movs	r1, #53	@ 0x35
 80083e2:	a81c      	add	r0, sp, #112	@ 0x70
 80083e4:	f7ff ff3a 	bl	800825c <__copybits>
 80083e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083ea:	9805      	ldr	r0, [sp, #20]
 80083ec:	f7ff fb08 	bl	8007a00 <_Bfree>
 80083f0:	3e01      	subs	r6, #1
 80083f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80083f4:	2e04      	cmp	r6, #4
 80083f6:	d806      	bhi.n	8008406 <_strtod_l+0xe6>
 80083f8:	e8df f006 	tbb	[pc, r6]
 80083fc:	201d0314 	.word	0x201d0314
 8008400:	14          	.byte	0x14
 8008401:	00          	.byte	0x00
 8008402:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008406:	05e1      	lsls	r1, r4, #23
 8008408:	bf48      	it	mi
 800840a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800840e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008412:	0d1b      	lsrs	r3, r3, #20
 8008414:	051b      	lsls	r3, r3, #20
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1bb      	bne.n	8008392 <_strtod_l+0x72>
 800841a:	f7fe fb31 	bl	8006a80 <__errno>
 800841e:	2322      	movs	r3, #34	@ 0x22
 8008420:	6003      	str	r3, [r0, #0]
 8008422:	e7b6      	b.n	8008392 <_strtod_l+0x72>
 8008424:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008428:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800842c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008430:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008434:	e7e7      	b.n	8008406 <_strtod_l+0xe6>
 8008436:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80085b4 <_strtod_l+0x294>
 800843a:	e7e4      	b.n	8008406 <_strtod_l+0xe6>
 800843c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008440:	f04f 3aff 	mov.w	sl, #4294967295
 8008444:	e7df      	b.n	8008406 <_strtod_l+0xe6>
 8008446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008448:	1c5a      	adds	r2, r3, #1
 800844a:	9219      	str	r2, [sp, #100]	@ 0x64
 800844c:	785b      	ldrb	r3, [r3, #1]
 800844e:	2b30      	cmp	r3, #48	@ 0x30
 8008450:	d0f9      	beq.n	8008446 <_strtod_l+0x126>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d09d      	beq.n	8008392 <_strtod_l+0x72>
 8008456:	2301      	movs	r3, #1
 8008458:	9309      	str	r3, [sp, #36]	@ 0x24
 800845a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800845c:	930c      	str	r3, [sp, #48]	@ 0x30
 800845e:	2300      	movs	r3, #0
 8008460:	9308      	str	r3, [sp, #32]
 8008462:	930a      	str	r3, [sp, #40]	@ 0x28
 8008464:	461f      	mov	r7, r3
 8008466:	220a      	movs	r2, #10
 8008468:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800846a:	7805      	ldrb	r5, [r0, #0]
 800846c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008470:	b2d9      	uxtb	r1, r3
 8008472:	2909      	cmp	r1, #9
 8008474:	d928      	bls.n	80084c8 <_strtod_l+0x1a8>
 8008476:	494e      	ldr	r1, [pc, #312]	@ (80085b0 <_strtod_l+0x290>)
 8008478:	2201      	movs	r2, #1
 800847a:	f7fe faa4 	bl	80069c6 <strncmp>
 800847e:	2800      	cmp	r0, #0
 8008480:	d032      	beq.n	80084e8 <_strtod_l+0x1c8>
 8008482:	2000      	movs	r0, #0
 8008484:	462a      	mov	r2, r5
 8008486:	4681      	mov	r9, r0
 8008488:	463d      	mov	r5, r7
 800848a:	4603      	mov	r3, r0
 800848c:	2a65      	cmp	r2, #101	@ 0x65
 800848e:	d001      	beq.n	8008494 <_strtod_l+0x174>
 8008490:	2a45      	cmp	r2, #69	@ 0x45
 8008492:	d114      	bne.n	80084be <_strtod_l+0x19e>
 8008494:	b91d      	cbnz	r5, 800849e <_strtod_l+0x17e>
 8008496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008498:	4302      	orrs	r2, r0
 800849a:	d095      	beq.n	80083c8 <_strtod_l+0xa8>
 800849c:	2500      	movs	r5, #0
 800849e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80084a0:	1c62      	adds	r2, r4, #1
 80084a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80084a4:	7862      	ldrb	r2, [r4, #1]
 80084a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80084a8:	d077      	beq.n	800859a <_strtod_l+0x27a>
 80084aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80084ac:	d07b      	beq.n	80085a6 <_strtod_l+0x286>
 80084ae:	f04f 0c00 	mov.w	ip, #0
 80084b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80084b6:	2909      	cmp	r1, #9
 80084b8:	f240 8082 	bls.w	80085c0 <_strtod_l+0x2a0>
 80084bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80084be:	f04f 0800 	mov.w	r8, #0
 80084c2:	e0a2      	b.n	800860a <_strtod_l+0x2ea>
 80084c4:	2300      	movs	r3, #0
 80084c6:	e7c7      	b.n	8008458 <_strtod_l+0x138>
 80084c8:	2f08      	cmp	r7, #8
 80084ca:	bfd5      	itete	le
 80084cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80084ce:	9908      	ldrgt	r1, [sp, #32]
 80084d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80084d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80084d8:	f100 0001 	add.w	r0, r0, #1
 80084dc:	bfd4      	ite	le
 80084de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80084e0:	9308      	strgt	r3, [sp, #32]
 80084e2:	3701      	adds	r7, #1
 80084e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80084e6:	e7bf      	b.n	8008468 <_strtod_l+0x148>
 80084e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084ea:	1c5a      	adds	r2, r3, #1
 80084ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80084ee:	785a      	ldrb	r2, [r3, #1]
 80084f0:	b37f      	cbz	r7, 8008552 <_strtod_l+0x232>
 80084f2:	4681      	mov	r9, r0
 80084f4:	463d      	mov	r5, r7
 80084f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80084fa:	2b09      	cmp	r3, #9
 80084fc:	d912      	bls.n	8008524 <_strtod_l+0x204>
 80084fe:	2301      	movs	r3, #1
 8008500:	e7c4      	b.n	800848c <_strtod_l+0x16c>
 8008502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008504:	1c5a      	adds	r2, r3, #1
 8008506:	9219      	str	r2, [sp, #100]	@ 0x64
 8008508:	785a      	ldrb	r2, [r3, #1]
 800850a:	3001      	adds	r0, #1
 800850c:	2a30      	cmp	r2, #48	@ 0x30
 800850e:	d0f8      	beq.n	8008502 <_strtod_l+0x1e2>
 8008510:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008514:	2b08      	cmp	r3, #8
 8008516:	f200 84d3 	bhi.w	8008ec0 <_strtod_l+0xba0>
 800851a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800851c:	930c      	str	r3, [sp, #48]	@ 0x30
 800851e:	4681      	mov	r9, r0
 8008520:	2000      	movs	r0, #0
 8008522:	4605      	mov	r5, r0
 8008524:	3a30      	subs	r2, #48	@ 0x30
 8008526:	f100 0301 	add.w	r3, r0, #1
 800852a:	d02a      	beq.n	8008582 <_strtod_l+0x262>
 800852c:	4499      	add	r9, r3
 800852e:	eb00 0c05 	add.w	ip, r0, r5
 8008532:	462b      	mov	r3, r5
 8008534:	210a      	movs	r1, #10
 8008536:	4563      	cmp	r3, ip
 8008538:	d10d      	bne.n	8008556 <_strtod_l+0x236>
 800853a:	1c69      	adds	r1, r5, #1
 800853c:	4401      	add	r1, r0
 800853e:	4428      	add	r0, r5
 8008540:	2808      	cmp	r0, #8
 8008542:	dc16      	bgt.n	8008572 <_strtod_l+0x252>
 8008544:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008546:	230a      	movs	r3, #10
 8008548:	fb03 2300 	mla	r3, r3, r0, r2
 800854c:	930a      	str	r3, [sp, #40]	@ 0x28
 800854e:	2300      	movs	r3, #0
 8008550:	e018      	b.n	8008584 <_strtod_l+0x264>
 8008552:	4638      	mov	r0, r7
 8008554:	e7da      	b.n	800850c <_strtod_l+0x1ec>
 8008556:	2b08      	cmp	r3, #8
 8008558:	f103 0301 	add.w	r3, r3, #1
 800855c:	dc03      	bgt.n	8008566 <_strtod_l+0x246>
 800855e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008560:	434e      	muls	r6, r1
 8008562:	960a      	str	r6, [sp, #40]	@ 0x28
 8008564:	e7e7      	b.n	8008536 <_strtod_l+0x216>
 8008566:	2b10      	cmp	r3, #16
 8008568:	bfde      	ittt	le
 800856a:	9e08      	ldrle	r6, [sp, #32]
 800856c:	434e      	mulle	r6, r1
 800856e:	9608      	strle	r6, [sp, #32]
 8008570:	e7e1      	b.n	8008536 <_strtod_l+0x216>
 8008572:	280f      	cmp	r0, #15
 8008574:	dceb      	bgt.n	800854e <_strtod_l+0x22e>
 8008576:	9808      	ldr	r0, [sp, #32]
 8008578:	230a      	movs	r3, #10
 800857a:	fb03 2300 	mla	r3, r3, r0, r2
 800857e:	9308      	str	r3, [sp, #32]
 8008580:	e7e5      	b.n	800854e <_strtod_l+0x22e>
 8008582:	4629      	mov	r1, r5
 8008584:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008586:	1c50      	adds	r0, r2, #1
 8008588:	9019      	str	r0, [sp, #100]	@ 0x64
 800858a:	7852      	ldrb	r2, [r2, #1]
 800858c:	4618      	mov	r0, r3
 800858e:	460d      	mov	r5, r1
 8008590:	e7b1      	b.n	80084f6 <_strtod_l+0x1d6>
 8008592:	f04f 0900 	mov.w	r9, #0
 8008596:	2301      	movs	r3, #1
 8008598:	e77d      	b.n	8008496 <_strtod_l+0x176>
 800859a:	f04f 0c00 	mov.w	ip, #0
 800859e:	1ca2      	adds	r2, r4, #2
 80085a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80085a2:	78a2      	ldrb	r2, [r4, #2]
 80085a4:	e785      	b.n	80084b2 <_strtod_l+0x192>
 80085a6:	f04f 0c01 	mov.w	ip, #1
 80085aa:	e7f8      	b.n	800859e <_strtod_l+0x27e>
 80085ac:	0800af18 	.word	0x0800af18
 80085b0:	0800af00 	.word	0x0800af00
 80085b4:	7ff00000 	.word	0x7ff00000
 80085b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085ba:	1c51      	adds	r1, r2, #1
 80085bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80085be:	7852      	ldrb	r2, [r2, #1]
 80085c0:	2a30      	cmp	r2, #48	@ 0x30
 80085c2:	d0f9      	beq.n	80085b8 <_strtod_l+0x298>
 80085c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80085c8:	2908      	cmp	r1, #8
 80085ca:	f63f af78 	bhi.w	80084be <_strtod_l+0x19e>
 80085ce:	3a30      	subs	r2, #48	@ 0x30
 80085d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80085d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80085d6:	f04f 080a 	mov.w	r8, #10
 80085da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085dc:	1c56      	adds	r6, r2, #1
 80085de:	9619      	str	r6, [sp, #100]	@ 0x64
 80085e0:	7852      	ldrb	r2, [r2, #1]
 80085e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80085e6:	f1be 0f09 	cmp.w	lr, #9
 80085ea:	d939      	bls.n	8008660 <_strtod_l+0x340>
 80085ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80085ee:	1a76      	subs	r6, r6, r1
 80085f0:	2e08      	cmp	r6, #8
 80085f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80085f6:	dc03      	bgt.n	8008600 <_strtod_l+0x2e0>
 80085f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80085fa:	4588      	cmp	r8, r1
 80085fc:	bfa8      	it	ge
 80085fe:	4688      	movge	r8, r1
 8008600:	f1bc 0f00 	cmp.w	ip, #0
 8008604:	d001      	beq.n	800860a <_strtod_l+0x2ea>
 8008606:	f1c8 0800 	rsb	r8, r8, #0
 800860a:	2d00      	cmp	r5, #0
 800860c:	d14e      	bne.n	80086ac <_strtod_l+0x38c>
 800860e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008610:	4308      	orrs	r0, r1
 8008612:	f47f aebe 	bne.w	8008392 <_strtod_l+0x72>
 8008616:	2b00      	cmp	r3, #0
 8008618:	f47f aed6 	bne.w	80083c8 <_strtod_l+0xa8>
 800861c:	2a69      	cmp	r2, #105	@ 0x69
 800861e:	d028      	beq.n	8008672 <_strtod_l+0x352>
 8008620:	dc25      	bgt.n	800866e <_strtod_l+0x34e>
 8008622:	2a49      	cmp	r2, #73	@ 0x49
 8008624:	d025      	beq.n	8008672 <_strtod_l+0x352>
 8008626:	2a4e      	cmp	r2, #78	@ 0x4e
 8008628:	f47f aece 	bne.w	80083c8 <_strtod_l+0xa8>
 800862c:	499b      	ldr	r1, [pc, #620]	@ (800889c <_strtod_l+0x57c>)
 800862e:	a819      	add	r0, sp, #100	@ 0x64
 8008630:	f001 fd6a 	bl	800a108 <__match>
 8008634:	2800      	cmp	r0, #0
 8008636:	f43f aec7 	beq.w	80083c8 <_strtod_l+0xa8>
 800863a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b28      	cmp	r3, #40	@ 0x28
 8008640:	d12e      	bne.n	80086a0 <_strtod_l+0x380>
 8008642:	4997      	ldr	r1, [pc, #604]	@ (80088a0 <_strtod_l+0x580>)
 8008644:	aa1c      	add	r2, sp, #112	@ 0x70
 8008646:	a819      	add	r0, sp, #100	@ 0x64
 8008648:	f001 fd72 	bl	800a130 <__hexnan>
 800864c:	2805      	cmp	r0, #5
 800864e:	d127      	bne.n	80086a0 <_strtod_l+0x380>
 8008650:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008652:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008656:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800865a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800865e:	e698      	b.n	8008392 <_strtod_l+0x72>
 8008660:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008662:	fb08 2101 	mla	r1, r8, r1, r2
 8008666:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800866a:	920e      	str	r2, [sp, #56]	@ 0x38
 800866c:	e7b5      	b.n	80085da <_strtod_l+0x2ba>
 800866e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008670:	e7da      	b.n	8008628 <_strtod_l+0x308>
 8008672:	498c      	ldr	r1, [pc, #560]	@ (80088a4 <_strtod_l+0x584>)
 8008674:	a819      	add	r0, sp, #100	@ 0x64
 8008676:	f001 fd47 	bl	800a108 <__match>
 800867a:	2800      	cmp	r0, #0
 800867c:	f43f aea4 	beq.w	80083c8 <_strtod_l+0xa8>
 8008680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008682:	4989      	ldr	r1, [pc, #548]	@ (80088a8 <_strtod_l+0x588>)
 8008684:	3b01      	subs	r3, #1
 8008686:	a819      	add	r0, sp, #100	@ 0x64
 8008688:	9319      	str	r3, [sp, #100]	@ 0x64
 800868a:	f001 fd3d 	bl	800a108 <__match>
 800868e:	b910      	cbnz	r0, 8008696 <_strtod_l+0x376>
 8008690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008692:	3301      	adds	r3, #1
 8008694:	9319      	str	r3, [sp, #100]	@ 0x64
 8008696:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80088b8 <_strtod_l+0x598>
 800869a:	f04f 0a00 	mov.w	sl, #0
 800869e:	e678      	b.n	8008392 <_strtod_l+0x72>
 80086a0:	4882      	ldr	r0, [pc, #520]	@ (80088ac <_strtod_l+0x58c>)
 80086a2:	f001 fa6d 	bl	8009b80 <nan>
 80086a6:	ec5b ab10 	vmov	sl, fp, d0
 80086aa:	e672      	b.n	8008392 <_strtod_l+0x72>
 80086ac:	eba8 0309 	sub.w	r3, r8, r9
 80086b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80086b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086b4:	2f00      	cmp	r7, #0
 80086b6:	bf08      	it	eq
 80086b8:	462f      	moveq	r7, r5
 80086ba:	2d10      	cmp	r5, #16
 80086bc:	462c      	mov	r4, r5
 80086be:	bfa8      	it	ge
 80086c0:	2410      	movge	r4, #16
 80086c2:	f7f7 ff27 	bl	8000514 <__aeabi_ui2d>
 80086c6:	2d09      	cmp	r5, #9
 80086c8:	4682      	mov	sl, r0
 80086ca:	468b      	mov	fp, r1
 80086cc:	dc13      	bgt.n	80086f6 <_strtod_l+0x3d6>
 80086ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f43f ae5e 	beq.w	8008392 <_strtod_l+0x72>
 80086d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d8:	dd78      	ble.n	80087cc <_strtod_l+0x4ac>
 80086da:	2b16      	cmp	r3, #22
 80086dc:	dc5f      	bgt.n	800879e <_strtod_l+0x47e>
 80086de:	4974      	ldr	r1, [pc, #464]	@ (80088b0 <_strtod_l+0x590>)
 80086e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086e8:	4652      	mov	r2, sl
 80086ea:	465b      	mov	r3, fp
 80086ec:	f7f7 ff8c 	bl	8000608 <__aeabi_dmul>
 80086f0:	4682      	mov	sl, r0
 80086f2:	468b      	mov	fp, r1
 80086f4:	e64d      	b.n	8008392 <_strtod_l+0x72>
 80086f6:	4b6e      	ldr	r3, [pc, #440]	@ (80088b0 <_strtod_l+0x590>)
 80086f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008700:	f7f7 ff82 	bl	8000608 <__aeabi_dmul>
 8008704:	4682      	mov	sl, r0
 8008706:	9808      	ldr	r0, [sp, #32]
 8008708:	468b      	mov	fp, r1
 800870a:	f7f7 ff03 	bl	8000514 <__aeabi_ui2d>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4650      	mov	r0, sl
 8008714:	4659      	mov	r1, fp
 8008716:	f7f7 fdc1 	bl	800029c <__adddf3>
 800871a:	2d0f      	cmp	r5, #15
 800871c:	4682      	mov	sl, r0
 800871e:	468b      	mov	fp, r1
 8008720:	ddd5      	ble.n	80086ce <_strtod_l+0x3ae>
 8008722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008724:	1b2c      	subs	r4, r5, r4
 8008726:	441c      	add	r4, r3
 8008728:	2c00      	cmp	r4, #0
 800872a:	f340 8096 	ble.w	800885a <_strtod_l+0x53a>
 800872e:	f014 030f 	ands.w	r3, r4, #15
 8008732:	d00a      	beq.n	800874a <_strtod_l+0x42a>
 8008734:	495e      	ldr	r1, [pc, #376]	@ (80088b0 <_strtod_l+0x590>)
 8008736:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800873a:	4652      	mov	r2, sl
 800873c:	465b      	mov	r3, fp
 800873e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008742:	f7f7 ff61 	bl	8000608 <__aeabi_dmul>
 8008746:	4682      	mov	sl, r0
 8008748:	468b      	mov	fp, r1
 800874a:	f034 040f 	bics.w	r4, r4, #15
 800874e:	d073      	beq.n	8008838 <_strtod_l+0x518>
 8008750:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008754:	dd48      	ble.n	80087e8 <_strtod_l+0x4c8>
 8008756:	2400      	movs	r4, #0
 8008758:	46a0      	mov	r8, r4
 800875a:	940a      	str	r4, [sp, #40]	@ 0x28
 800875c:	46a1      	mov	r9, r4
 800875e:	9a05      	ldr	r2, [sp, #20]
 8008760:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80088b8 <_strtod_l+0x598>
 8008764:	2322      	movs	r3, #34	@ 0x22
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	f04f 0a00 	mov.w	sl, #0
 800876c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800876e:	2b00      	cmp	r3, #0
 8008770:	f43f ae0f 	beq.w	8008392 <_strtod_l+0x72>
 8008774:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008776:	9805      	ldr	r0, [sp, #20]
 8008778:	f7ff f942 	bl	8007a00 <_Bfree>
 800877c:	9805      	ldr	r0, [sp, #20]
 800877e:	4649      	mov	r1, r9
 8008780:	f7ff f93e 	bl	8007a00 <_Bfree>
 8008784:	9805      	ldr	r0, [sp, #20]
 8008786:	4641      	mov	r1, r8
 8008788:	f7ff f93a 	bl	8007a00 <_Bfree>
 800878c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800878e:	9805      	ldr	r0, [sp, #20]
 8008790:	f7ff f936 	bl	8007a00 <_Bfree>
 8008794:	9805      	ldr	r0, [sp, #20]
 8008796:	4621      	mov	r1, r4
 8008798:	f7ff f932 	bl	8007a00 <_Bfree>
 800879c:	e5f9      	b.n	8008392 <_strtod_l+0x72>
 800879e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80087a4:	4293      	cmp	r3, r2
 80087a6:	dbbc      	blt.n	8008722 <_strtod_l+0x402>
 80087a8:	4c41      	ldr	r4, [pc, #260]	@ (80088b0 <_strtod_l+0x590>)
 80087aa:	f1c5 050f 	rsb	r5, r5, #15
 80087ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80087b2:	4652      	mov	r2, sl
 80087b4:	465b      	mov	r3, fp
 80087b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ba:	f7f7 ff25 	bl	8000608 <__aeabi_dmul>
 80087be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c0:	1b5d      	subs	r5, r3, r5
 80087c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80087c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80087ca:	e78f      	b.n	80086ec <_strtod_l+0x3cc>
 80087cc:	3316      	adds	r3, #22
 80087ce:	dba8      	blt.n	8008722 <_strtod_l+0x402>
 80087d0:	4b37      	ldr	r3, [pc, #220]	@ (80088b0 <_strtod_l+0x590>)
 80087d2:	eba9 0808 	sub.w	r8, r9, r8
 80087d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80087da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80087de:	4650      	mov	r0, sl
 80087e0:	4659      	mov	r1, fp
 80087e2:	f7f8 f83b 	bl	800085c <__aeabi_ddiv>
 80087e6:	e783      	b.n	80086f0 <_strtod_l+0x3d0>
 80087e8:	4b32      	ldr	r3, [pc, #200]	@ (80088b4 <_strtod_l+0x594>)
 80087ea:	9308      	str	r3, [sp, #32]
 80087ec:	2300      	movs	r3, #0
 80087ee:	1124      	asrs	r4, r4, #4
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	461e      	mov	r6, r3
 80087f6:	2c01      	cmp	r4, #1
 80087f8:	dc21      	bgt.n	800883e <_strtod_l+0x51e>
 80087fa:	b10b      	cbz	r3, 8008800 <_strtod_l+0x4e0>
 80087fc:	4682      	mov	sl, r0
 80087fe:	468b      	mov	fp, r1
 8008800:	492c      	ldr	r1, [pc, #176]	@ (80088b4 <_strtod_l+0x594>)
 8008802:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008806:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800880a:	4652      	mov	r2, sl
 800880c:	465b      	mov	r3, fp
 800880e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008812:	f7f7 fef9 	bl	8000608 <__aeabi_dmul>
 8008816:	4b28      	ldr	r3, [pc, #160]	@ (80088b8 <_strtod_l+0x598>)
 8008818:	460a      	mov	r2, r1
 800881a:	400b      	ands	r3, r1
 800881c:	4927      	ldr	r1, [pc, #156]	@ (80088bc <_strtod_l+0x59c>)
 800881e:	428b      	cmp	r3, r1
 8008820:	4682      	mov	sl, r0
 8008822:	d898      	bhi.n	8008756 <_strtod_l+0x436>
 8008824:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008828:	428b      	cmp	r3, r1
 800882a:	bf86      	itte	hi
 800882c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80088c0 <_strtod_l+0x5a0>
 8008830:	f04f 3aff 	movhi.w	sl, #4294967295
 8008834:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008838:	2300      	movs	r3, #0
 800883a:	9308      	str	r3, [sp, #32]
 800883c:	e07a      	b.n	8008934 <_strtod_l+0x614>
 800883e:	07e2      	lsls	r2, r4, #31
 8008840:	d505      	bpl.n	800884e <_strtod_l+0x52e>
 8008842:	9b08      	ldr	r3, [sp, #32]
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	2301      	movs	r3, #1
 800884e:	9a08      	ldr	r2, [sp, #32]
 8008850:	3208      	adds	r2, #8
 8008852:	3601      	adds	r6, #1
 8008854:	1064      	asrs	r4, r4, #1
 8008856:	9208      	str	r2, [sp, #32]
 8008858:	e7cd      	b.n	80087f6 <_strtod_l+0x4d6>
 800885a:	d0ed      	beq.n	8008838 <_strtod_l+0x518>
 800885c:	4264      	negs	r4, r4
 800885e:	f014 020f 	ands.w	r2, r4, #15
 8008862:	d00a      	beq.n	800887a <_strtod_l+0x55a>
 8008864:	4b12      	ldr	r3, [pc, #72]	@ (80088b0 <_strtod_l+0x590>)
 8008866:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800886a:	4650      	mov	r0, sl
 800886c:	4659      	mov	r1, fp
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	f7f7 fff3 	bl	800085c <__aeabi_ddiv>
 8008876:	4682      	mov	sl, r0
 8008878:	468b      	mov	fp, r1
 800887a:	1124      	asrs	r4, r4, #4
 800887c:	d0dc      	beq.n	8008838 <_strtod_l+0x518>
 800887e:	2c1f      	cmp	r4, #31
 8008880:	dd20      	ble.n	80088c4 <_strtod_l+0x5a4>
 8008882:	2400      	movs	r4, #0
 8008884:	46a0      	mov	r8, r4
 8008886:	940a      	str	r4, [sp, #40]	@ 0x28
 8008888:	46a1      	mov	r9, r4
 800888a:	9a05      	ldr	r2, [sp, #20]
 800888c:	2322      	movs	r3, #34	@ 0x22
 800888e:	f04f 0a00 	mov.w	sl, #0
 8008892:	f04f 0b00 	mov.w	fp, #0
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	e768      	b.n	800876c <_strtod_l+0x44c>
 800889a:	bf00      	nop
 800889c:	0800aced 	.word	0x0800aced
 80088a0:	0800af04 	.word	0x0800af04
 80088a4:	0800ace5 	.word	0x0800ace5
 80088a8:	0800ad1a 	.word	0x0800ad1a
 80088ac:	0800b0c8 	.word	0x0800b0c8
 80088b0:	0800ae38 	.word	0x0800ae38
 80088b4:	0800ae10 	.word	0x0800ae10
 80088b8:	7ff00000 	.word	0x7ff00000
 80088bc:	7ca00000 	.word	0x7ca00000
 80088c0:	7fefffff 	.word	0x7fefffff
 80088c4:	f014 0310 	ands.w	r3, r4, #16
 80088c8:	bf18      	it	ne
 80088ca:	236a      	movne	r3, #106	@ 0x6a
 80088cc:	4ea9      	ldr	r6, [pc, #676]	@ (8008b74 <_strtod_l+0x854>)
 80088ce:	9308      	str	r3, [sp, #32]
 80088d0:	4650      	mov	r0, sl
 80088d2:	4659      	mov	r1, fp
 80088d4:	2300      	movs	r3, #0
 80088d6:	07e2      	lsls	r2, r4, #31
 80088d8:	d504      	bpl.n	80088e4 <_strtod_l+0x5c4>
 80088da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088de:	f7f7 fe93 	bl	8000608 <__aeabi_dmul>
 80088e2:	2301      	movs	r3, #1
 80088e4:	1064      	asrs	r4, r4, #1
 80088e6:	f106 0608 	add.w	r6, r6, #8
 80088ea:	d1f4      	bne.n	80088d6 <_strtod_l+0x5b6>
 80088ec:	b10b      	cbz	r3, 80088f2 <_strtod_l+0x5d2>
 80088ee:	4682      	mov	sl, r0
 80088f0:	468b      	mov	fp, r1
 80088f2:	9b08      	ldr	r3, [sp, #32]
 80088f4:	b1b3      	cbz	r3, 8008924 <_strtod_l+0x604>
 80088f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80088fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80088fe:	2b00      	cmp	r3, #0
 8008900:	4659      	mov	r1, fp
 8008902:	dd0f      	ble.n	8008924 <_strtod_l+0x604>
 8008904:	2b1f      	cmp	r3, #31
 8008906:	dd55      	ble.n	80089b4 <_strtod_l+0x694>
 8008908:	2b34      	cmp	r3, #52	@ 0x34
 800890a:	bfde      	ittt	le
 800890c:	f04f 33ff 	movle.w	r3, #4294967295
 8008910:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008914:	4093      	lslle	r3, r2
 8008916:	f04f 0a00 	mov.w	sl, #0
 800891a:	bfcc      	ite	gt
 800891c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008920:	ea03 0b01 	andle.w	fp, r3, r1
 8008924:	2200      	movs	r2, #0
 8008926:	2300      	movs	r3, #0
 8008928:	4650      	mov	r0, sl
 800892a:	4659      	mov	r1, fp
 800892c:	f7f8 f8d4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008930:	2800      	cmp	r0, #0
 8008932:	d1a6      	bne.n	8008882 <_strtod_l+0x562>
 8008934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800893a:	9805      	ldr	r0, [sp, #20]
 800893c:	462b      	mov	r3, r5
 800893e:	463a      	mov	r2, r7
 8008940:	f7ff f8c6 	bl	8007ad0 <__s2b>
 8008944:	900a      	str	r0, [sp, #40]	@ 0x28
 8008946:	2800      	cmp	r0, #0
 8008948:	f43f af05 	beq.w	8008756 <_strtod_l+0x436>
 800894c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800894e:	2a00      	cmp	r2, #0
 8008950:	eba9 0308 	sub.w	r3, r9, r8
 8008954:	bfa8      	it	ge
 8008956:	2300      	movge	r3, #0
 8008958:	9312      	str	r3, [sp, #72]	@ 0x48
 800895a:	2400      	movs	r4, #0
 800895c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008960:	9316      	str	r3, [sp, #88]	@ 0x58
 8008962:	46a0      	mov	r8, r4
 8008964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008966:	9805      	ldr	r0, [sp, #20]
 8008968:	6859      	ldr	r1, [r3, #4]
 800896a:	f7ff f809 	bl	8007980 <_Balloc>
 800896e:	4681      	mov	r9, r0
 8008970:	2800      	cmp	r0, #0
 8008972:	f43f aef4 	beq.w	800875e <_strtod_l+0x43e>
 8008976:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008978:	691a      	ldr	r2, [r3, #16]
 800897a:	3202      	adds	r2, #2
 800897c:	f103 010c 	add.w	r1, r3, #12
 8008980:	0092      	lsls	r2, r2, #2
 8008982:	300c      	adds	r0, #12
 8008984:	f001 f8ee 	bl	8009b64 <memcpy>
 8008988:	ec4b ab10 	vmov	d0, sl, fp
 800898c:	9805      	ldr	r0, [sp, #20]
 800898e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008990:	a91b      	add	r1, sp, #108	@ 0x6c
 8008992:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008996:	f7ff fbd7 	bl	8008148 <__d2b>
 800899a:	901a      	str	r0, [sp, #104]	@ 0x68
 800899c:	2800      	cmp	r0, #0
 800899e:	f43f aede 	beq.w	800875e <_strtod_l+0x43e>
 80089a2:	9805      	ldr	r0, [sp, #20]
 80089a4:	2101      	movs	r1, #1
 80089a6:	f7ff f929 	bl	8007bfc <__i2b>
 80089aa:	4680      	mov	r8, r0
 80089ac:	b948      	cbnz	r0, 80089c2 <_strtod_l+0x6a2>
 80089ae:	f04f 0800 	mov.w	r8, #0
 80089b2:	e6d4      	b.n	800875e <_strtod_l+0x43e>
 80089b4:	f04f 32ff 	mov.w	r2, #4294967295
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	ea03 0a0a 	and.w	sl, r3, sl
 80089c0:	e7b0      	b.n	8008924 <_strtod_l+0x604>
 80089c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80089c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80089c6:	2d00      	cmp	r5, #0
 80089c8:	bfab      	itete	ge
 80089ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80089cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80089ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80089d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80089d2:	bfac      	ite	ge
 80089d4:	18ef      	addge	r7, r5, r3
 80089d6:	1b5e      	sublt	r6, r3, r5
 80089d8:	9b08      	ldr	r3, [sp, #32]
 80089da:	1aed      	subs	r5, r5, r3
 80089dc:	4415      	add	r5, r2
 80089de:	4b66      	ldr	r3, [pc, #408]	@ (8008b78 <_strtod_l+0x858>)
 80089e0:	3d01      	subs	r5, #1
 80089e2:	429d      	cmp	r5, r3
 80089e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80089e8:	da50      	bge.n	8008a8c <_strtod_l+0x76c>
 80089ea:	1b5b      	subs	r3, r3, r5
 80089ec:	2b1f      	cmp	r3, #31
 80089ee:	eba2 0203 	sub.w	r2, r2, r3
 80089f2:	f04f 0101 	mov.w	r1, #1
 80089f6:	dc3d      	bgt.n	8008a74 <_strtod_l+0x754>
 80089f8:	fa01 f303 	lsl.w	r3, r1, r3
 80089fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089fe:	2300      	movs	r3, #0
 8008a00:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a02:	18bd      	adds	r5, r7, r2
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	42af      	cmp	r7, r5
 8008a08:	4416      	add	r6, r2
 8008a0a:	441e      	add	r6, r3
 8008a0c:	463b      	mov	r3, r7
 8008a0e:	bfa8      	it	ge
 8008a10:	462b      	movge	r3, r5
 8008a12:	42b3      	cmp	r3, r6
 8008a14:	bfa8      	it	ge
 8008a16:	4633      	movge	r3, r6
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfc2      	ittt	gt
 8008a1c:	1aed      	subgt	r5, r5, r3
 8008a1e:	1af6      	subgt	r6, r6, r3
 8008a20:	1aff      	subgt	r7, r7, r3
 8008a22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dd16      	ble.n	8008a56 <_strtod_l+0x736>
 8008a28:	4641      	mov	r1, r8
 8008a2a:	9805      	ldr	r0, [sp, #20]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f7ff f9a5 	bl	8007d7c <__pow5mult>
 8008a32:	4680      	mov	r8, r0
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d0ba      	beq.n	80089ae <_strtod_l+0x68e>
 8008a38:	4601      	mov	r1, r0
 8008a3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a3c:	9805      	ldr	r0, [sp, #20]
 8008a3e:	f7ff f8f3 	bl	8007c28 <__multiply>
 8008a42:	900e      	str	r0, [sp, #56]	@ 0x38
 8008a44:	2800      	cmp	r0, #0
 8008a46:	f43f ae8a 	beq.w	800875e <_strtod_l+0x43e>
 8008a4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a4c:	9805      	ldr	r0, [sp, #20]
 8008a4e:	f7fe ffd7 	bl	8007a00 <_Bfree>
 8008a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a54:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	dc1d      	bgt.n	8008a96 <_strtod_l+0x776>
 8008a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	dd23      	ble.n	8008aa8 <_strtod_l+0x788>
 8008a60:	4649      	mov	r1, r9
 8008a62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008a64:	9805      	ldr	r0, [sp, #20]
 8008a66:	f7ff f989 	bl	8007d7c <__pow5mult>
 8008a6a:	4681      	mov	r9, r0
 8008a6c:	b9e0      	cbnz	r0, 8008aa8 <_strtod_l+0x788>
 8008a6e:	f04f 0900 	mov.w	r9, #0
 8008a72:	e674      	b.n	800875e <_strtod_l+0x43e>
 8008a74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008a78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008a7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008a80:	35e2      	adds	r5, #226	@ 0xe2
 8008a82:	fa01 f305 	lsl.w	r3, r1, r5
 8008a86:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a88:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008a8a:	e7ba      	b.n	8008a02 <_strtod_l+0x6e2>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a90:	2301      	movs	r3, #1
 8008a92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a94:	e7b5      	b.n	8008a02 <_strtod_l+0x6e2>
 8008a96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a98:	9805      	ldr	r0, [sp, #20]
 8008a9a:	462a      	mov	r2, r5
 8008a9c:	f7ff f9c8 	bl	8007e30 <__lshift>
 8008aa0:	901a      	str	r0, [sp, #104]	@ 0x68
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	d1d9      	bne.n	8008a5a <_strtod_l+0x73a>
 8008aa6:	e65a      	b.n	800875e <_strtod_l+0x43e>
 8008aa8:	2e00      	cmp	r6, #0
 8008aaa:	dd07      	ble.n	8008abc <_strtod_l+0x79c>
 8008aac:	4649      	mov	r1, r9
 8008aae:	9805      	ldr	r0, [sp, #20]
 8008ab0:	4632      	mov	r2, r6
 8008ab2:	f7ff f9bd 	bl	8007e30 <__lshift>
 8008ab6:	4681      	mov	r9, r0
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	d0d8      	beq.n	8008a6e <_strtod_l+0x74e>
 8008abc:	2f00      	cmp	r7, #0
 8008abe:	dd08      	ble.n	8008ad2 <_strtod_l+0x7b2>
 8008ac0:	4641      	mov	r1, r8
 8008ac2:	9805      	ldr	r0, [sp, #20]
 8008ac4:	463a      	mov	r2, r7
 8008ac6:	f7ff f9b3 	bl	8007e30 <__lshift>
 8008aca:	4680      	mov	r8, r0
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f43f ae46 	beq.w	800875e <_strtod_l+0x43e>
 8008ad2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ad4:	9805      	ldr	r0, [sp, #20]
 8008ad6:	464a      	mov	r2, r9
 8008ad8:	f7ff fa32 	bl	8007f40 <__mdiff>
 8008adc:	4604      	mov	r4, r0
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	f43f ae3d 	beq.w	800875e <_strtod_l+0x43e>
 8008ae4:	68c3      	ldr	r3, [r0, #12]
 8008ae6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60c3      	str	r3, [r0, #12]
 8008aec:	4641      	mov	r1, r8
 8008aee:	f7ff fa0b 	bl	8007f08 <__mcmp>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	da46      	bge.n	8008b84 <_strtod_l+0x864>
 8008af6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008af8:	ea53 030a 	orrs.w	r3, r3, sl
 8008afc:	d16c      	bne.n	8008bd8 <_strtod_l+0x8b8>
 8008afe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d168      	bne.n	8008bd8 <_strtod_l+0x8b8>
 8008b06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b0a:	0d1b      	lsrs	r3, r3, #20
 8008b0c:	051b      	lsls	r3, r3, #20
 8008b0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008b12:	d961      	bls.n	8008bd8 <_strtod_l+0x8b8>
 8008b14:	6963      	ldr	r3, [r4, #20]
 8008b16:	b913      	cbnz	r3, 8008b1e <_strtod_l+0x7fe>
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	dd5c      	ble.n	8008bd8 <_strtod_l+0x8b8>
 8008b1e:	4621      	mov	r1, r4
 8008b20:	2201      	movs	r2, #1
 8008b22:	9805      	ldr	r0, [sp, #20]
 8008b24:	f7ff f984 	bl	8007e30 <__lshift>
 8008b28:	4641      	mov	r1, r8
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	f7ff f9ec 	bl	8007f08 <__mcmp>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	dd51      	ble.n	8008bd8 <_strtod_l+0x8b8>
 8008b34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b38:	9a08      	ldr	r2, [sp, #32]
 8008b3a:	0d1b      	lsrs	r3, r3, #20
 8008b3c:	051b      	lsls	r3, r3, #20
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	d06b      	beq.n	8008c1a <_strtod_l+0x8fa>
 8008b42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008b46:	d868      	bhi.n	8008c1a <_strtod_l+0x8fa>
 8008b48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008b4c:	f67f ae9d 	bls.w	800888a <_strtod_l+0x56a>
 8008b50:	4b0a      	ldr	r3, [pc, #40]	@ (8008b7c <_strtod_l+0x85c>)
 8008b52:	4650      	mov	r0, sl
 8008b54:	4659      	mov	r1, fp
 8008b56:	2200      	movs	r2, #0
 8008b58:	f7f7 fd56 	bl	8000608 <__aeabi_dmul>
 8008b5c:	4b08      	ldr	r3, [pc, #32]	@ (8008b80 <_strtod_l+0x860>)
 8008b5e:	400b      	ands	r3, r1
 8008b60:	4682      	mov	sl, r0
 8008b62:	468b      	mov	fp, r1
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f47f ae05 	bne.w	8008774 <_strtod_l+0x454>
 8008b6a:	9a05      	ldr	r2, [sp, #20]
 8008b6c:	2322      	movs	r3, #34	@ 0x22
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	e600      	b.n	8008774 <_strtod_l+0x454>
 8008b72:	bf00      	nop
 8008b74:	0800af30 	.word	0x0800af30
 8008b78:	fffffc02 	.word	0xfffffc02
 8008b7c:	39500000 	.word	0x39500000
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b88:	d165      	bne.n	8008c56 <_strtod_l+0x936>
 8008b8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b90:	b35a      	cbz	r2, 8008bea <_strtod_l+0x8ca>
 8008b92:	4a9f      	ldr	r2, [pc, #636]	@ (8008e10 <_strtod_l+0xaf0>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d12b      	bne.n	8008bf0 <_strtod_l+0x8d0>
 8008b98:	9b08      	ldr	r3, [sp, #32]
 8008b9a:	4651      	mov	r1, sl
 8008b9c:	b303      	cbz	r3, 8008be0 <_strtod_l+0x8c0>
 8008b9e:	4b9d      	ldr	r3, [pc, #628]	@ (8008e14 <_strtod_l+0xaf4>)
 8008ba0:	465a      	mov	r2, fp
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bac:	d81b      	bhi.n	8008be6 <_strtod_l+0x8c6>
 8008bae:	0d1b      	lsrs	r3, r3, #20
 8008bb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	4299      	cmp	r1, r3
 8008bba:	d119      	bne.n	8008bf0 <_strtod_l+0x8d0>
 8008bbc:	4b96      	ldr	r3, [pc, #600]	@ (8008e18 <_strtod_l+0xaf8>)
 8008bbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d102      	bne.n	8008bca <_strtod_l+0x8aa>
 8008bc4:	3101      	adds	r1, #1
 8008bc6:	f43f adca 	beq.w	800875e <_strtod_l+0x43e>
 8008bca:	4b92      	ldr	r3, [pc, #584]	@ (8008e14 <_strtod_l+0xaf4>)
 8008bcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bce:	401a      	ands	r2, r3
 8008bd0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008bd4:	f04f 0a00 	mov.w	sl, #0
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1b8      	bne.n	8008b50 <_strtod_l+0x830>
 8008bde:	e5c9      	b.n	8008774 <_strtod_l+0x454>
 8008be0:	f04f 33ff 	mov.w	r3, #4294967295
 8008be4:	e7e8      	b.n	8008bb8 <_strtod_l+0x898>
 8008be6:	4613      	mov	r3, r2
 8008be8:	e7e6      	b.n	8008bb8 <_strtod_l+0x898>
 8008bea:	ea53 030a 	orrs.w	r3, r3, sl
 8008bee:	d0a1      	beq.n	8008b34 <_strtod_l+0x814>
 8008bf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bf2:	b1db      	cbz	r3, 8008c2c <_strtod_l+0x90c>
 8008bf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bf6:	4213      	tst	r3, r2
 8008bf8:	d0ee      	beq.n	8008bd8 <_strtod_l+0x8b8>
 8008bfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bfc:	9a08      	ldr	r2, [sp, #32]
 8008bfe:	4650      	mov	r0, sl
 8008c00:	4659      	mov	r1, fp
 8008c02:	b1bb      	cbz	r3, 8008c34 <_strtod_l+0x914>
 8008c04:	f7ff fb6e 	bl	80082e4 <sulp>
 8008c08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c0c:	ec53 2b10 	vmov	r2, r3, d0
 8008c10:	f7f7 fb44 	bl	800029c <__adddf3>
 8008c14:	4682      	mov	sl, r0
 8008c16:	468b      	mov	fp, r1
 8008c18:	e7de      	b.n	8008bd8 <_strtod_l+0x8b8>
 8008c1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008c1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008c22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008c26:	f04f 3aff 	mov.w	sl, #4294967295
 8008c2a:	e7d5      	b.n	8008bd8 <_strtod_l+0x8b8>
 8008c2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c2e:	ea13 0f0a 	tst.w	r3, sl
 8008c32:	e7e1      	b.n	8008bf8 <_strtod_l+0x8d8>
 8008c34:	f7ff fb56 	bl	80082e4 <sulp>
 8008c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c3c:	ec53 2b10 	vmov	r2, r3, d0
 8008c40:	f7f7 fb2a 	bl	8000298 <__aeabi_dsub>
 8008c44:	2200      	movs	r2, #0
 8008c46:	2300      	movs	r3, #0
 8008c48:	4682      	mov	sl, r0
 8008c4a:	468b      	mov	fp, r1
 8008c4c:	f7f7 ff44 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d0c1      	beq.n	8008bd8 <_strtod_l+0x8b8>
 8008c54:	e619      	b.n	800888a <_strtod_l+0x56a>
 8008c56:	4641      	mov	r1, r8
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f7ff facd 	bl	80081f8 <__ratio>
 8008c5e:	ec57 6b10 	vmov	r6, r7, d0
 8008c62:	2200      	movs	r2, #0
 8008c64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f7 ff48 	bl	8000b00 <__aeabi_dcmple>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	d06f      	beq.n	8008d54 <_strtod_l+0xa34>
 8008c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d17a      	bne.n	8008d70 <_strtod_l+0xa50>
 8008c7a:	f1ba 0f00 	cmp.w	sl, #0
 8008c7e:	d158      	bne.n	8008d32 <_strtod_l+0xa12>
 8008c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d15a      	bne.n	8008d40 <_strtod_l+0xa20>
 8008c8a:	4b64      	ldr	r3, [pc, #400]	@ (8008e1c <_strtod_l+0xafc>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 ff2b 	bl	8000aec <__aeabi_dcmplt>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d159      	bne.n	8008d4e <_strtod_l+0xa2e>
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	4b60      	ldr	r3, [pc, #384]	@ (8008e20 <_strtod_l+0xb00>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f7f7 fcb1 	bl	8000608 <__aeabi_dmul>
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460f      	mov	r7, r1
 8008caa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008cae:	9606      	str	r6, [sp, #24]
 8008cb0:	9307      	str	r3, [sp, #28]
 8008cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cb6:	4d57      	ldr	r5, [pc, #348]	@ (8008e14 <_strtod_l+0xaf4>)
 8008cb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cbe:	401d      	ands	r5, r3
 8008cc0:	4b58      	ldr	r3, [pc, #352]	@ (8008e24 <_strtod_l+0xb04>)
 8008cc2:	429d      	cmp	r5, r3
 8008cc4:	f040 80b2 	bne.w	8008e2c <_strtod_l+0xb0c>
 8008cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008cce:	ec4b ab10 	vmov	d0, sl, fp
 8008cd2:	f7ff f9c9 	bl	8008068 <__ulp>
 8008cd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cda:	ec51 0b10 	vmov	r0, r1, d0
 8008cde:	f7f7 fc93 	bl	8000608 <__aeabi_dmul>
 8008ce2:	4652      	mov	r2, sl
 8008ce4:	465b      	mov	r3, fp
 8008ce6:	f7f7 fad9 	bl	800029c <__adddf3>
 8008cea:	460b      	mov	r3, r1
 8008cec:	4949      	ldr	r1, [pc, #292]	@ (8008e14 <_strtod_l+0xaf4>)
 8008cee:	4a4e      	ldr	r2, [pc, #312]	@ (8008e28 <_strtod_l+0xb08>)
 8008cf0:	4019      	ands	r1, r3
 8008cf2:	4291      	cmp	r1, r2
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	d942      	bls.n	8008d7e <_strtod_l+0xa5e>
 8008cf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cfa:	4b47      	ldr	r3, [pc, #284]	@ (8008e18 <_strtod_l+0xaf8>)
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d103      	bne.n	8008d08 <_strtod_l+0x9e8>
 8008d00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d02:	3301      	adds	r3, #1
 8008d04:	f43f ad2b 	beq.w	800875e <_strtod_l+0x43e>
 8008d08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008e18 <_strtod_l+0xaf8>
 8008d0c:	f04f 3aff 	mov.w	sl, #4294967295
 8008d10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d12:	9805      	ldr	r0, [sp, #20]
 8008d14:	f7fe fe74 	bl	8007a00 <_Bfree>
 8008d18:	9805      	ldr	r0, [sp, #20]
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	f7fe fe70 	bl	8007a00 <_Bfree>
 8008d20:	9805      	ldr	r0, [sp, #20]
 8008d22:	4641      	mov	r1, r8
 8008d24:	f7fe fe6c 	bl	8007a00 <_Bfree>
 8008d28:	9805      	ldr	r0, [sp, #20]
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	f7fe fe68 	bl	8007a00 <_Bfree>
 8008d30:	e618      	b.n	8008964 <_strtod_l+0x644>
 8008d32:	f1ba 0f01 	cmp.w	sl, #1
 8008d36:	d103      	bne.n	8008d40 <_strtod_l+0xa20>
 8008d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f43f ada5 	beq.w	800888a <_strtod_l+0x56a>
 8008d40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008df0 <_strtod_l+0xad0>
 8008d44:	4f35      	ldr	r7, [pc, #212]	@ (8008e1c <_strtod_l+0xafc>)
 8008d46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	e7b1      	b.n	8008cb2 <_strtod_l+0x992>
 8008d4e:	4f34      	ldr	r7, [pc, #208]	@ (8008e20 <_strtod_l+0xb00>)
 8008d50:	2600      	movs	r6, #0
 8008d52:	e7aa      	b.n	8008caa <_strtod_l+0x98a>
 8008d54:	4b32      	ldr	r3, [pc, #200]	@ (8008e20 <_strtod_l+0xb00>)
 8008d56:	4630      	mov	r0, r6
 8008d58:	4639      	mov	r1, r7
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f7f7 fc54 	bl	8000608 <__aeabi_dmul>
 8008d60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d62:	4606      	mov	r6, r0
 8008d64:	460f      	mov	r7, r1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d09f      	beq.n	8008caa <_strtod_l+0x98a>
 8008d6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d6e:	e7a0      	b.n	8008cb2 <_strtod_l+0x992>
 8008d70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008df8 <_strtod_l+0xad8>
 8008d74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d78:	ec57 6b17 	vmov	r6, r7, d7
 8008d7c:	e799      	b.n	8008cb2 <_strtod_l+0x992>
 8008d7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008d82:	9b08      	ldr	r3, [sp, #32]
 8008d84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1c1      	bne.n	8008d10 <_strtod_l+0x9f0>
 8008d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d90:	0d1b      	lsrs	r3, r3, #20
 8008d92:	051b      	lsls	r3, r3, #20
 8008d94:	429d      	cmp	r5, r3
 8008d96:	d1bb      	bne.n	8008d10 <_strtod_l+0x9f0>
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 ff94 	bl	8000cc8 <__aeabi_d2lz>
 8008da0:	f7f7 fc04 	bl	80005ac <__aeabi_l2d>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4630      	mov	r0, r6
 8008daa:	4639      	mov	r1, r7
 8008dac:	f7f7 fa74 	bl	8000298 <__aeabi_dsub>
 8008db0:	460b      	mov	r3, r1
 8008db2:	4602      	mov	r2, r0
 8008db4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008db8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dbe:	ea46 060a 	orr.w	r6, r6, sl
 8008dc2:	431e      	orrs	r6, r3
 8008dc4:	d06f      	beq.n	8008ea6 <_strtod_l+0xb86>
 8008dc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e00 <_strtod_l+0xae0>)
 8008dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dcc:	f7f7 fe8e 	bl	8000aec <__aeabi_dcmplt>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	f47f accf 	bne.w	8008774 <_strtod_l+0x454>
 8008dd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008e08 <_strtod_l+0xae8>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008de0:	f7f7 fea2 	bl	8000b28 <__aeabi_dcmpgt>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d093      	beq.n	8008d10 <_strtod_l+0x9f0>
 8008de8:	e4c4      	b.n	8008774 <_strtod_l+0x454>
 8008dea:	bf00      	nop
 8008dec:	f3af 8000 	nop.w
 8008df0:	00000000 	.word	0x00000000
 8008df4:	bff00000 	.word	0xbff00000
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	3ff00000 	.word	0x3ff00000
 8008e00:	94a03595 	.word	0x94a03595
 8008e04:	3fdfffff 	.word	0x3fdfffff
 8008e08:	35afe535 	.word	0x35afe535
 8008e0c:	3fe00000 	.word	0x3fe00000
 8008e10:	000fffff 	.word	0x000fffff
 8008e14:	7ff00000 	.word	0x7ff00000
 8008e18:	7fefffff 	.word	0x7fefffff
 8008e1c:	3ff00000 	.word	0x3ff00000
 8008e20:	3fe00000 	.word	0x3fe00000
 8008e24:	7fe00000 	.word	0x7fe00000
 8008e28:	7c9fffff 	.word	0x7c9fffff
 8008e2c:	9b08      	ldr	r3, [sp, #32]
 8008e2e:	b323      	cbz	r3, 8008e7a <_strtod_l+0xb5a>
 8008e30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008e34:	d821      	bhi.n	8008e7a <_strtod_l+0xb5a>
 8008e36:	a328      	add	r3, pc, #160	@ (adr r3, 8008ed8 <_strtod_l+0xbb8>)
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 fe5e 	bl	8000b00 <__aeabi_dcmple>
 8008e44:	b1a0      	cbz	r0, 8008e70 <_strtod_l+0xb50>
 8008e46:	4639      	mov	r1, r7
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7f7 feb5 	bl	8000bb8 <__aeabi_d2uiz>
 8008e4e:	2801      	cmp	r0, #1
 8008e50:	bf38      	it	cc
 8008e52:	2001      	movcc	r0, #1
 8008e54:	f7f7 fb5e 	bl	8000514 <__aeabi_ui2d>
 8008e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	460f      	mov	r7, r1
 8008e5e:	b9fb      	cbnz	r3, 8008ea0 <_strtod_l+0xb80>
 8008e60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e64:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e66:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008e6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008e70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008e76:	1b5b      	subs	r3, r3, r5
 8008e78:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008e82:	f7ff f8f1 	bl	8008068 <__ulp>
 8008e86:	4650      	mov	r0, sl
 8008e88:	ec53 2b10 	vmov	r2, r3, d0
 8008e8c:	4659      	mov	r1, fp
 8008e8e:	f7f7 fbbb 	bl	8000608 <__aeabi_dmul>
 8008e92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e96:	f7f7 fa01 	bl	800029c <__adddf3>
 8008e9a:	4682      	mov	sl, r0
 8008e9c:	468b      	mov	fp, r1
 8008e9e:	e770      	b.n	8008d82 <_strtod_l+0xa62>
 8008ea0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008ea4:	e7e0      	b.n	8008e68 <_strtod_l+0xb48>
 8008ea6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ee0 <_strtod_l+0xbc0>)
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f7f7 fe1e 	bl	8000aec <__aeabi_dcmplt>
 8008eb0:	e798      	b.n	8008de4 <_strtod_l+0xac4>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008eb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008eba:	6013      	str	r3, [r2, #0]
 8008ebc:	f7ff ba6d 	b.w	800839a <_strtod_l+0x7a>
 8008ec0:	2a65      	cmp	r2, #101	@ 0x65
 8008ec2:	f43f ab66 	beq.w	8008592 <_strtod_l+0x272>
 8008ec6:	2a45      	cmp	r2, #69	@ 0x45
 8008ec8:	f43f ab63 	beq.w	8008592 <_strtod_l+0x272>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f7ff bb9e 	b.w	800860e <_strtod_l+0x2ee>
 8008ed2:	bf00      	nop
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	ffc00000 	.word	0xffc00000
 8008edc:	41dfffff 	.word	0x41dfffff
 8008ee0:	94a03595 	.word	0x94a03595
 8008ee4:	3fcfffff 	.word	0x3fcfffff

08008ee8 <_strtod_r>:
 8008ee8:	4b01      	ldr	r3, [pc, #4]	@ (8008ef0 <_strtod_r+0x8>)
 8008eea:	f7ff ba19 	b.w	8008320 <_strtod_l>
 8008eee:	bf00      	nop
 8008ef0:	2000008c 	.word	0x2000008c

08008ef4 <_strtol_l.constprop.0>:
 8008ef4:	2b24      	cmp	r3, #36	@ 0x24
 8008ef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008efa:	4686      	mov	lr, r0
 8008efc:	4690      	mov	r8, r2
 8008efe:	d801      	bhi.n	8008f04 <_strtol_l.constprop.0+0x10>
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d106      	bne.n	8008f12 <_strtol_l.constprop.0+0x1e>
 8008f04:	f7fd fdbc 	bl	8006a80 <__errno>
 8008f08:	2316      	movs	r3, #22
 8008f0a:	6003      	str	r3, [r0, #0]
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f12:	4834      	ldr	r0, [pc, #208]	@ (8008fe4 <_strtol_l.constprop.0+0xf0>)
 8008f14:	460d      	mov	r5, r1
 8008f16:	462a      	mov	r2, r5
 8008f18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f1c:	5d06      	ldrb	r6, [r0, r4]
 8008f1e:	f016 0608 	ands.w	r6, r6, #8
 8008f22:	d1f8      	bne.n	8008f16 <_strtol_l.constprop.0+0x22>
 8008f24:	2c2d      	cmp	r4, #45	@ 0x2d
 8008f26:	d12d      	bne.n	8008f84 <_strtol_l.constprop.0+0x90>
 8008f28:	782c      	ldrb	r4, [r5, #0]
 8008f2a:	2601      	movs	r6, #1
 8008f2c:	1c95      	adds	r5, r2, #2
 8008f2e:	f033 0210 	bics.w	r2, r3, #16
 8008f32:	d109      	bne.n	8008f48 <_strtol_l.constprop.0+0x54>
 8008f34:	2c30      	cmp	r4, #48	@ 0x30
 8008f36:	d12a      	bne.n	8008f8e <_strtol_l.constprop.0+0x9a>
 8008f38:	782a      	ldrb	r2, [r5, #0]
 8008f3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008f3e:	2a58      	cmp	r2, #88	@ 0x58
 8008f40:	d125      	bne.n	8008f8e <_strtol_l.constprop.0+0x9a>
 8008f42:	786c      	ldrb	r4, [r5, #1]
 8008f44:	2310      	movs	r3, #16
 8008f46:	3502      	adds	r5, #2
 8008f48:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008f4c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008f50:	2200      	movs	r2, #0
 8008f52:	fbbc f9f3 	udiv	r9, ip, r3
 8008f56:	4610      	mov	r0, r2
 8008f58:	fb03 ca19 	mls	sl, r3, r9, ip
 8008f5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008f60:	2f09      	cmp	r7, #9
 8008f62:	d81b      	bhi.n	8008f9c <_strtol_l.constprop.0+0xa8>
 8008f64:	463c      	mov	r4, r7
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	dd27      	ble.n	8008fba <_strtol_l.constprop.0+0xc6>
 8008f6a:	1c57      	adds	r7, r2, #1
 8008f6c:	d007      	beq.n	8008f7e <_strtol_l.constprop.0+0x8a>
 8008f6e:	4581      	cmp	r9, r0
 8008f70:	d320      	bcc.n	8008fb4 <_strtol_l.constprop.0+0xc0>
 8008f72:	d101      	bne.n	8008f78 <_strtol_l.constprop.0+0x84>
 8008f74:	45a2      	cmp	sl, r4
 8008f76:	db1d      	blt.n	8008fb4 <_strtol_l.constprop.0+0xc0>
 8008f78:	fb00 4003 	mla	r0, r0, r3, r4
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f82:	e7eb      	b.n	8008f5c <_strtol_l.constprop.0+0x68>
 8008f84:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f86:	bf04      	itt	eq
 8008f88:	782c      	ldrbeq	r4, [r5, #0]
 8008f8a:	1c95      	addeq	r5, r2, #2
 8008f8c:	e7cf      	b.n	8008f2e <_strtol_l.constprop.0+0x3a>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1da      	bne.n	8008f48 <_strtol_l.constprop.0+0x54>
 8008f92:	2c30      	cmp	r4, #48	@ 0x30
 8008f94:	bf0c      	ite	eq
 8008f96:	2308      	moveq	r3, #8
 8008f98:	230a      	movne	r3, #10
 8008f9a:	e7d5      	b.n	8008f48 <_strtol_l.constprop.0+0x54>
 8008f9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008fa0:	2f19      	cmp	r7, #25
 8008fa2:	d801      	bhi.n	8008fa8 <_strtol_l.constprop.0+0xb4>
 8008fa4:	3c37      	subs	r4, #55	@ 0x37
 8008fa6:	e7de      	b.n	8008f66 <_strtol_l.constprop.0+0x72>
 8008fa8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008fac:	2f19      	cmp	r7, #25
 8008fae:	d804      	bhi.n	8008fba <_strtol_l.constprop.0+0xc6>
 8008fb0:	3c57      	subs	r4, #87	@ 0x57
 8008fb2:	e7d8      	b.n	8008f66 <_strtol_l.constprop.0+0x72>
 8008fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb8:	e7e1      	b.n	8008f7e <_strtol_l.constprop.0+0x8a>
 8008fba:	1c53      	adds	r3, r2, #1
 8008fbc:	d108      	bne.n	8008fd0 <_strtol_l.constprop.0+0xdc>
 8008fbe:	2322      	movs	r3, #34	@ 0x22
 8008fc0:	f8ce 3000 	str.w	r3, [lr]
 8008fc4:	4660      	mov	r0, ip
 8008fc6:	f1b8 0f00 	cmp.w	r8, #0
 8008fca:	d0a0      	beq.n	8008f0e <_strtol_l.constprop.0+0x1a>
 8008fcc:	1e69      	subs	r1, r5, #1
 8008fce:	e006      	b.n	8008fde <_strtol_l.constprop.0+0xea>
 8008fd0:	b106      	cbz	r6, 8008fd4 <_strtol_l.constprop.0+0xe0>
 8008fd2:	4240      	negs	r0, r0
 8008fd4:	f1b8 0f00 	cmp.w	r8, #0
 8008fd8:	d099      	beq.n	8008f0e <_strtol_l.constprop.0+0x1a>
 8008fda:	2a00      	cmp	r2, #0
 8008fdc:	d1f6      	bne.n	8008fcc <_strtol_l.constprop.0+0xd8>
 8008fde:	f8c8 1000 	str.w	r1, [r8]
 8008fe2:	e794      	b.n	8008f0e <_strtol_l.constprop.0+0x1a>
 8008fe4:	0800af59 	.word	0x0800af59

08008fe8 <_strtol_r>:
 8008fe8:	f7ff bf84 	b.w	8008ef4 <_strtol_l.constprop.0>

08008fec <__ssputs_r>:
 8008fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff0:	688e      	ldr	r6, [r1, #8]
 8008ff2:	461f      	mov	r7, r3
 8008ff4:	42be      	cmp	r6, r7
 8008ff6:	680b      	ldr	r3, [r1, #0]
 8008ff8:	4682      	mov	sl, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	4690      	mov	r8, r2
 8008ffe:	d82d      	bhi.n	800905c <__ssputs_r+0x70>
 8009000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009004:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009008:	d026      	beq.n	8009058 <__ssputs_r+0x6c>
 800900a:	6965      	ldr	r5, [r4, #20]
 800900c:	6909      	ldr	r1, [r1, #16]
 800900e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009012:	eba3 0901 	sub.w	r9, r3, r1
 8009016:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800901a:	1c7b      	adds	r3, r7, #1
 800901c:	444b      	add	r3, r9
 800901e:	106d      	asrs	r5, r5, #1
 8009020:	429d      	cmp	r5, r3
 8009022:	bf38      	it	cc
 8009024:	461d      	movcc	r5, r3
 8009026:	0553      	lsls	r3, r2, #21
 8009028:	d527      	bpl.n	800907a <__ssputs_r+0x8e>
 800902a:	4629      	mov	r1, r5
 800902c:	f7fe fc1c 	bl	8007868 <_malloc_r>
 8009030:	4606      	mov	r6, r0
 8009032:	b360      	cbz	r0, 800908e <__ssputs_r+0xa2>
 8009034:	6921      	ldr	r1, [r4, #16]
 8009036:	464a      	mov	r2, r9
 8009038:	f000 fd94 	bl	8009b64 <memcpy>
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009046:	81a3      	strh	r3, [r4, #12]
 8009048:	6126      	str	r6, [r4, #16]
 800904a:	6165      	str	r5, [r4, #20]
 800904c:	444e      	add	r6, r9
 800904e:	eba5 0509 	sub.w	r5, r5, r9
 8009052:	6026      	str	r6, [r4, #0]
 8009054:	60a5      	str	r5, [r4, #8]
 8009056:	463e      	mov	r6, r7
 8009058:	42be      	cmp	r6, r7
 800905a:	d900      	bls.n	800905e <__ssputs_r+0x72>
 800905c:	463e      	mov	r6, r7
 800905e:	6820      	ldr	r0, [r4, #0]
 8009060:	4632      	mov	r2, r6
 8009062:	4641      	mov	r1, r8
 8009064:	f000 fd53 	bl	8009b0e <memmove>
 8009068:	68a3      	ldr	r3, [r4, #8]
 800906a:	1b9b      	subs	r3, r3, r6
 800906c:	60a3      	str	r3, [r4, #8]
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	4433      	add	r3, r6
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	2000      	movs	r0, #0
 8009076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907a:	462a      	mov	r2, r5
 800907c:	f001 f905 	bl	800a28a <_realloc_r>
 8009080:	4606      	mov	r6, r0
 8009082:	2800      	cmp	r0, #0
 8009084:	d1e0      	bne.n	8009048 <__ssputs_r+0x5c>
 8009086:	6921      	ldr	r1, [r4, #16]
 8009088:	4650      	mov	r0, sl
 800908a:	f7fe fb79 	bl	8007780 <_free_r>
 800908e:	230c      	movs	r3, #12
 8009090:	f8ca 3000 	str.w	r3, [sl]
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800909a:	81a3      	strh	r3, [r4, #12]
 800909c:	f04f 30ff 	mov.w	r0, #4294967295
 80090a0:	e7e9      	b.n	8009076 <__ssputs_r+0x8a>
	...

080090a4 <_svfiprintf_r>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	4698      	mov	r8, r3
 80090aa:	898b      	ldrh	r3, [r1, #12]
 80090ac:	061b      	lsls	r3, r3, #24
 80090ae:	b09d      	sub	sp, #116	@ 0x74
 80090b0:	4607      	mov	r7, r0
 80090b2:	460d      	mov	r5, r1
 80090b4:	4614      	mov	r4, r2
 80090b6:	d510      	bpl.n	80090da <_svfiprintf_r+0x36>
 80090b8:	690b      	ldr	r3, [r1, #16]
 80090ba:	b973      	cbnz	r3, 80090da <_svfiprintf_r+0x36>
 80090bc:	2140      	movs	r1, #64	@ 0x40
 80090be:	f7fe fbd3 	bl	8007868 <_malloc_r>
 80090c2:	6028      	str	r0, [r5, #0]
 80090c4:	6128      	str	r0, [r5, #16]
 80090c6:	b930      	cbnz	r0, 80090d6 <_svfiprintf_r+0x32>
 80090c8:	230c      	movs	r3, #12
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295
 80090d0:	b01d      	add	sp, #116	@ 0x74
 80090d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d6:	2340      	movs	r3, #64	@ 0x40
 80090d8:	616b      	str	r3, [r5, #20]
 80090da:	2300      	movs	r3, #0
 80090dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80090de:	2320      	movs	r3, #32
 80090e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80090e8:	2330      	movs	r3, #48	@ 0x30
 80090ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009288 <_svfiprintf_r+0x1e4>
 80090ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090f2:	f04f 0901 	mov.w	r9, #1
 80090f6:	4623      	mov	r3, r4
 80090f8:	469a      	mov	sl, r3
 80090fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090fe:	b10a      	cbz	r2, 8009104 <_svfiprintf_r+0x60>
 8009100:	2a25      	cmp	r2, #37	@ 0x25
 8009102:	d1f9      	bne.n	80090f8 <_svfiprintf_r+0x54>
 8009104:	ebba 0b04 	subs.w	fp, sl, r4
 8009108:	d00b      	beq.n	8009122 <_svfiprintf_r+0x7e>
 800910a:	465b      	mov	r3, fp
 800910c:	4622      	mov	r2, r4
 800910e:	4629      	mov	r1, r5
 8009110:	4638      	mov	r0, r7
 8009112:	f7ff ff6b 	bl	8008fec <__ssputs_r>
 8009116:	3001      	adds	r0, #1
 8009118:	f000 80a7 	beq.w	800926a <_svfiprintf_r+0x1c6>
 800911c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800911e:	445a      	add	r2, fp
 8009120:	9209      	str	r2, [sp, #36]	@ 0x24
 8009122:	f89a 3000 	ldrb.w	r3, [sl]
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 809f 	beq.w	800926a <_svfiprintf_r+0x1c6>
 800912c:	2300      	movs	r3, #0
 800912e:	f04f 32ff 	mov.w	r2, #4294967295
 8009132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009136:	f10a 0a01 	add.w	sl, sl, #1
 800913a:	9304      	str	r3, [sp, #16]
 800913c:	9307      	str	r3, [sp, #28]
 800913e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009142:	931a      	str	r3, [sp, #104]	@ 0x68
 8009144:	4654      	mov	r4, sl
 8009146:	2205      	movs	r2, #5
 8009148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800914c:	484e      	ldr	r0, [pc, #312]	@ (8009288 <_svfiprintf_r+0x1e4>)
 800914e:	f7f7 f847 	bl	80001e0 <memchr>
 8009152:	9a04      	ldr	r2, [sp, #16]
 8009154:	b9d8      	cbnz	r0, 800918e <_svfiprintf_r+0xea>
 8009156:	06d0      	lsls	r0, r2, #27
 8009158:	bf44      	itt	mi
 800915a:	2320      	movmi	r3, #32
 800915c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009160:	0711      	lsls	r1, r2, #28
 8009162:	bf44      	itt	mi
 8009164:	232b      	movmi	r3, #43	@ 0x2b
 8009166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800916a:	f89a 3000 	ldrb.w	r3, [sl]
 800916e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009170:	d015      	beq.n	800919e <_svfiprintf_r+0xfa>
 8009172:	9a07      	ldr	r2, [sp, #28]
 8009174:	4654      	mov	r4, sl
 8009176:	2000      	movs	r0, #0
 8009178:	f04f 0c0a 	mov.w	ip, #10
 800917c:	4621      	mov	r1, r4
 800917e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009182:	3b30      	subs	r3, #48	@ 0x30
 8009184:	2b09      	cmp	r3, #9
 8009186:	d94b      	bls.n	8009220 <_svfiprintf_r+0x17c>
 8009188:	b1b0      	cbz	r0, 80091b8 <_svfiprintf_r+0x114>
 800918a:	9207      	str	r2, [sp, #28]
 800918c:	e014      	b.n	80091b8 <_svfiprintf_r+0x114>
 800918e:	eba0 0308 	sub.w	r3, r0, r8
 8009192:	fa09 f303 	lsl.w	r3, r9, r3
 8009196:	4313      	orrs	r3, r2
 8009198:	9304      	str	r3, [sp, #16]
 800919a:	46a2      	mov	sl, r4
 800919c:	e7d2      	b.n	8009144 <_svfiprintf_r+0xa0>
 800919e:	9b03      	ldr	r3, [sp, #12]
 80091a0:	1d19      	adds	r1, r3, #4
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	9103      	str	r1, [sp, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	bfbb      	ittet	lt
 80091aa:	425b      	neglt	r3, r3
 80091ac:	f042 0202 	orrlt.w	r2, r2, #2
 80091b0:	9307      	strge	r3, [sp, #28]
 80091b2:	9307      	strlt	r3, [sp, #28]
 80091b4:	bfb8      	it	lt
 80091b6:	9204      	strlt	r2, [sp, #16]
 80091b8:	7823      	ldrb	r3, [r4, #0]
 80091ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80091bc:	d10a      	bne.n	80091d4 <_svfiprintf_r+0x130>
 80091be:	7863      	ldrb	r3, [r4, #1]
 80091c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80091c2:	d132      	bne.n	800922a <_svfiprintf_r+0x186>
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	1d1a      	adds	r2, r3, #4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	9203      	str	r2, [sp, #12]
 80091cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091d0:	3402      	adds	r4, #2
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009298 <_svfiprintf_r+0x1f4>
 80091d8:	7821      	ldrb	r1, [r4, #0]
 80091da:	2203      	movs	r2, #3
 80091dc:	4650      	mov	r0, sl
 80091de:	f7f6 ffff 	bl	80001e0 <memchr>
 80091e2:	b138      	cbz	r0, 80091f4 <_svfiprintf_r+0x150>
 80091e4:	9b04      	ldr	r3, [sp, #16]
 80091e6:	eba0 000a 	sub.w	r0, r0, sl
 80091ea:	2240      	movs	r2, #64	@ 0x40
 80091ec:	4082      	lsls	r2, r0
 80091ee:	4313      	orrs	r3, r2
 80091f0:	3401      	adds	r4, #1
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f8:	4824      	ldr	r0, [pc, #144]	@ (800928c <_svfiprintf_r+0x1e8>)
 80091fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091fe:	2206      	movs	r2, #6
 8009200:	f7f6 ffee 	bl	80001e0 <memchr>
 8009204:	2800      	cmp	r0, #0
 8009206:	d036      	beq.n	8009276 <_svfiprintf_r+0x1d2>
 8009208:	4b21      	ldr	r3, [pc, #132]	@ (8009290 <_svfiprintf_r+0x1ec>)
 800920a:	bb1b      	cbnz	r3, 8009254 <_svfiprintf_r+0x1b0>
 800920c:	9b03      	ldr	r3, [sp, #12]
 800920e:	3307      	adds	r3, #7
 8009210:	f023 0307 	bic.w	r3, r3, #7
 8009214:	3308      	adds	r3, #8
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921a:	4433      	add	r3, r6
 800921c:	9309      	str	r3, [sp, #36]	@ 0x24
 800921e:	e76a      	b.n	80090f6 <_svfiprintf_r+0x52>
 8009220:	fb0c 3202 	mla	r2, ip, r2, r3
 8009224:	460c      	mov	r4, r1
 8009226:	2001      	movs	r0, #1
 8009228:	e7a8      	b.n	800917c <_svfiprintf_r+0xd8>
 800922a:	2300      	movs	r3, #0
 800922c:	3401      	adds	r4, #1
 800922e:	9305      	str	r3, [sp, #20]
 8009230:	4619      	mov	r1, r3
 8009232:	f04f 0c0a 	mov.w	ip, #10
 8009236:	4620      	mov	r0, r4
 8009238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800923c:	3a30      	subs	r2, #48	@ 0x30
 800923e:	2a09      	cmp	r2, #9
 8009240:	d903      	bls.n	800924a <_svfiprintf_r+0x1a6>
 8009242:	2b00      	cmp	r3, #0
 8009244:	d0c6      	beq.n	80091d4 <_svfiprintf_r+0x130>
 8009246:	9105      	str	r1, [sp, #20]
 8009248:	e7c4      	b.n	80091d4 <_svfiprintf_r+0x130>
 800924a:	fb0c 2101 	mla	r1, ip, r1, r2
 800924e:	4604      	mov	r4, r0
 8009250:	2301      	movs	r3, #1
 8009252:	e7f0      	b.n	8009236 <_svfiprintf_r+0x192>
 8009254:	ab03      	add	r3, sp, #12
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	462a      	mov	r2, r5
 800925a:	4b0e      	ldr	r3, [pc, #56]	@ (8009294 <_svfiprintf_r+0x1f0>)
 800925c:	a904      	add	r1, sp, #16
 800925e:	4638      	mov	r0, r7
 8009260:	f7fc fc8c 	bl	8005b7c <_printf_float>
 8009264:	1c42      	adds	r2, r0, #1
 8009266:	4606      	mov	r6, r0
 8009268:	d1d6      	bne.n	8009218 <_svfiprintf_r+0x174>
 800926a:	89ab      	ldrh	r3, [r5, #12]
 800926c:	065b      	lsls	r3, r3, #25
 800926e:	f53f af2d 	bmi.w	80090cc <_svfiprintf_r+0x28>
 8009272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009274:	e72c      	b.n	80090d0 <_svfiprintf_r+0x2c>
 8009276:	ab03      	add	r3, sp, #12
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	462a      	mov	r2, r5
 800927c:	4b05      	ldr	r3, [pc, #20]	@ (8009294 <_svfiprintf_r+0x1f0>)
 800927e:	a904      	add	r1, sp, #16
 8009280:	4638      	mov	r0, r7
 8009282:	f7fc ff13 	bl	80060ac <_printf_i>
 8009286:	e7ed      	b.n	8009264 <_svfiprintf_r+0x1c0>
 8009288:	0800b059 	.word	0x0800b059
 800928c:	0800b063 	.word	0x0800b063
 8009290:	08005b7d 	.word	0x08005b7d
 8009294:	08008fed 	.word	0x08008fed
 8009298:	0800b05f 	.word	0x0800b05f

0800929c <_sungetc_r>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	1c4b      	adds	r3, r1, #1
 80092a0:	4614      	mov	r4, r2
 80092a2:	d103      	bne.n	80092ac <_sungetc_r+0x10>
 80092a4:	f04f 35ff 	mov.w	r5, #4294967295
 80092a8:	4628      	mov	r0, r5
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	8993      	ldrh	r3, [r2, #12]
 80092ae:	f023 0320 	bic.w	r3, r3, #32
 80092b2:	8193      	strh	r3, [r2, #12]
 80092b4:	6853      	ldr	r3, [r2, #4]
 80092b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80092b8:	b2cd      	uxtb	r5, r1
 80092ba:	b18a      	cbz	r2, 80092e0 <_sungetc_r+0x44>
 80092bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80092be:	429a      	cmp	r2, r3
 80092c0:	dd08      	ble.n	80092d4 <_sungetc_r+0x38>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	1e5a      	subs	r2, r3, #1
 80092c6:	6022      	str	r2, [r4, #0]
 80092c8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80092cc:	6863      	ldr	r3, [r4, #4]
 80092ce:	3301      	adds	r3, #1
 80092d0:	6063      	str	r3, [r4, #4]
 80092d2:	e7e9      	b.n	80092a8 <_sungetc_r+0xc>
 80092d4:	4621      	mov	r1, r4
 80092d6:	f000 fbe0 	bl	8009a9a <__submore>
 80092da:	2800      	cmp	r0, #0
 80092dc:	d0f1      	beq.n	80092c2 <_sungetc_r+0x26>
 80092de:	e7e1      	b.n	80092a4 <_sungetc_r+0x8>
 80092e0:	6921      	ldr	r1, [r4, #16]
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	b141      	cbz	r1, 80092f8 <_sungetc_r+0x5c>
 80092e6:	4291      	cmp	r1, r2
 80092e8:	d206      	bcs.n	80092f8 <_sungetc_r+0x5c>
 80092ea:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80092ee:	42a9      	cmp	r1, r5
 80092f0:	d102      	bne.n	80092f8 <_sungetc_r+0x5c>
 80092f2:	3a01      	subs	r2, #1
 80092f4:	6022      	str	r2, [r4, #0]
 80092f6:	e7ea      	b.n	80092ce <_sungetc_r+0x32>
 80092f8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80092fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009300:	6363      	str	r3, [r4, #52]	@ 0x34
 8009302:	2303      	movs	r3, #3
 8009304:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009306:	4623      	mov	r3, r4
 8009308:	f803 5f46 	strb.w	r5, [r3, #70]!
 800930c:	6023      	str	r3, [r4, #0]
 800930e:	2301      	movs	r3, #1
 8009310:	e7de      	b.n	80092d0 <_sungetc_r+0x34>

08009312 <__ssrefill_r>:
 8009312:	b510      	push	{r4, lr}
 8009314:	460c      	mov	r4, r1
 8009316:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009318:	b169      	cbz	r1, 8009336 <__ssrefill_r+0x24>
 800931a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800931e:	4299      	cmp	r1, r3
 8009320:	d001      	beq.n	8009326 <__ssrefill_r+0x14>
 8009322:	f7fe fa2d 	bl	8007780 <_free_r>
 8009326:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009328:	6063      	str	r3, [r4, #4]
 800932a:	2000      	movs	r0, #0
 800932c:	6360      	str	r0, [r4, #52]	@ 0x34
 800932e:	b113      	cbz	r3, 8009336 <__ssrefill_r+0x24>
 8009330:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009332:	6023      	str	r3, [r4, #0]
 8009334:	bd10      	pop	{r4, pc}
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	2300      	movs	r3, #0
 800933c:	6063      	str	r3, [r4, #4]
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	f043 0320 	orr.w	r3, r3, #32
 8009344:	81a3      	strh	r3, [r4, #12]
 8009346:	f04f 30ff 	mov.w	r0, #4294967295
 800934a:	e7f3      	b.n	8009334 <__ssrefill_r+0x22>

0800934c <__ssvfiscanf_r>:
 800934c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009350:	460c      	mov	r4, r1
 8009352:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009356:	2100      	movs	r1, #0
 8009358:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800935c:	49a5      	ldr	r1, [pc, #660]	@ (80095f4 <__ssvfiscanf_r+0x2a8>)
 800935e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009360:	f10d 0804 	add.w	r8, sp, #4
 8009364:	49a4      	ldr	r1, [pc, #656]	@ (80095f8 <__ssvfiscanf_r+0x2ac>)
 8009366:	4fa5      	ldr	r7, [pc, #660]	@ (80095fc <__ssvfiscanf_r+0x2b0>)
 8009368:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800936c:	4606      	mov	r6, r0
 800936e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009370:	9300      	str	r3, [sp, #0]
 8009372:	7813      	ldrb	r3, [r2, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 8158 	beq.w	800962a <__ssvfiscanf_r+0x2de>
 800937a:	5cf9      	ldrb	r1, [r7, r3]
 800937c:	f011 0108 	ands.w	r1, r1, #8
 8009380:	f102 0501 	add.w	r5, r2, #1
 8009384:	d019      	beq.n	80093ba <__ssvfiscanf_r+0x6e>
 8009386:	6863      	ldr	r3, [r4, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	dd0f      	ble.n	80093ac <__ssvfiscanf_r+0x60>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	781a      	ldrb	r2, [r3, #0]
 8009390:	5cba      	ldrb	r2, [r7, r2]
 8009392:	0712      	lsls	r2, r2, #28
 8009394:	d401      	bmi.n	800939a <__ssvfiscanf_r+0x4e>
 8009396:	462a      	mov	r2, r5
 8009398:	e7eb      	b.n	8009372 <__ssvfiscanf_r+0x26>
 800939a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800939c:	3201      	adds	r2, #1
 800939e:	9245      	str	r2, [sp, #276]	@ 0x114
 80093a0:	6862      	ldr	r2, [r4, #4]
 80093a2:	3301      	adds	r3, #1
 80093a4:	3a01      	subs	r2, #1
 80093a6:	6062      	str	r2, [r4, #4]
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	e7ec      	b.n	8009386 <__ssvfiscanf_r+0x3a>
 80093ac:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80093ae:	4621      	mov	r1, r4
 80093b0:	4630      	mov	r0, r6
 80093b2:	4798      	blx	r3
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d0e9      	beq.n	800938c <__ssvfiscanf_r+0x40>
 80093b8:	e7ed      	b.n	8009396 <__ssvfiscanf_r+0x4a>
 80093ba:	2b25      	cmp	r3, #37	@ 0x25
 80093bc:	d012      	beq.n	80093e4 <__ssvfiscanf_r+0x98>
 80093be:	4699      	mov	r9, r3
 80093c0:	6863      	ldr	r3, [r4, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f340 8093 	ble.w	80094ee <__ssvfiscanf_r+0x1a2>
 80093c8:	6822      	ldr	r2, [r4, #0]
 80093ca:	7813      	ldrb	r3, [r2, #0]
 80093cc:	454b      	cmp	r3, r9
 80093ce:	f040 812c 	bne.w	800962a <__ssvfiscanf_r+0x2de>
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	3b01      	subs	r3, #1
 80093d6:	6063      	str	r3, [r4, #4]
 80093d8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80093da:	3201      	adds	r2, #1
 80093dc:	3301      	adds	r3, #1
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	9345      	str	r3, [sp, #276]	@ 0x114
 80093e2:	e7d8      	b.n	8009396 <__ssvfiscanf_r+0x4a>
 80093e4:	9141      	str	r1, [sp, #260]	@ 0x104
 80093e6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80093e8:	7853      	ldrb	r3, [r2, #1]
 80093ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80093ec:	bf02      	ittt	eq
 80093ee:	2310      	moveq	r3, #16
 80093f0:	1c95      	addeq	r5, r2, #2
 80093f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80093f4:	220a      	movs	r2, #10
 80093f6:	46a9      	mov	r9, r5
 80093f8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80093fc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009400:	2b09      	cmp	r3, #9
 8009402:	d91e      	bls.n	8009442 <__ssvfiscanf_r+0xf6>
 8009404:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009600 <__ssvfiscanf_r+0x2b4>
 8009408:	2203      	movs	r2, #3
 800940a:	4650      	mov	r0, sl
 800940c:	f7f6 fee8 	bl	80001e0 <memchr>
 8009410:	b138      	cbz	r0, 8009422 <__ssvfiscanf_r+0xd6>
 8009412:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009414:	eba0 000a 	sub.w	r0, r0, sl
 8009418:	2301      	movs	r3, #1
 800941a:	4083      	lsls	r3, r0
 800941c:	4313      	orrs	r3, r2
 800941e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009420:	464d      	mov	r5, r9
 8009422:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009426:	2b78      	cmp	r3, #120	@ 0x78
 8009428:	d806      	bhi.n	8009438 <__ssvfiscanf_r+0xec>
 800942a:	2b57      	cmp	r3, #87	@ 0x57
 800942c:	d810      	bhi.n	8009450 <__ssvfiscanf_r+0x104>
 800942e:	2b25      	cmp	r3, #37	@ 0x25
 8009430:	d0c5      	beq.n	80093be <__ssvfiscanf_r+0x72>
 8009432:	d857      	bhi.n	80094e4 <__ssvfiscanf_r+0x198>
 8009434:	2b00      	cmp	r3, #0
 8009436:	d065      	beq.n	8009504 <__ssvfiscanf_r+0x1b8>
 8009438:	2303      	movs	r3, #3
 800943a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800943c:	230a      	movs	r3, #10
 800943e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009440:	e078      	b.n	8009534 <__ssvfiscanf_r+0x1e8>
 8009442:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009444:	fb02 1103 	mla	r1, r2, r3, r1
 8009448:	3930      	subs	r1, #48	@ 0x30
 800944a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800944c:	464d      	mov	r5, r9
 800944e:	e7d2      	b.n	80093f6 <__ssvfiscanf_r+0xaa>
 8009450:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009454:	2a20      	cmp	r2, #32
 8009456:	d8ef      	bhi.n	8009438 <__ssvfiscanf_r+0xec>
 8009458:	a101      	add	r1, pc, #4	@ (adr r1, 8009460 <__ssvfiscanf_r+0x114>)
 800945a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800945e:	bf00      	nop
 8009460:	08009513 	.word	0x08009513
 8009464:	08009439 	.word	0x08009439
 8009468:	08009439 	.word	0x08009439
 800946c:	0800956d 	.word	0x0800956d
 8009470:	08009439 	.word	0x08009439
 8009474:	08009439 	.word	0x08009439
 8009478:	08009439 	.word	0x08009439
 800947c:	08009439 	.word	0x08009439
 8009480:	08009439 	.word	0x08009439
 8009484:	08009439 	.word	0x08009439
 8009488:	08009439 	.word	0x08009439
 800948c:	08009583 	.word	0x08009583
 8009490:	08009569 	.word	0x08009569
 8009494:	080094eb 	.word	0x080094eb
 8009498:	080094eb 	.word	0x080094eb
 800949c:	080094eb 	.word	0x080094eb
 80094a0:	08009439 	.word	0x08009439
 80094a4:	08009525 	.word	0x08009525
 80094a8:	08009439 	.word	0x08009439
 80094ac:	08009439 	.word	0x08009439
 80094b0:	08009439 	.word	0x08009439
 80094b4:	08009439 	.word	0x08009439
 80094b8:	08009593 	.word	0x08009593
 80094bc:	0800952d 	.word	0x0800952d
 80094c0:	0800950b 	.word	0x0800950b
 80094c4:	08009439 	.word	0x08009439
 80094c8:	08009439 	.word	0x08009439
 80094cc:	0800958f 	.word	0x0800958f
 80094d0:	08009439 	.word	0x08009439
 80094d4:	08009569 	.word	0x08009569
 80094d8:	08009439 	.word	0x08009439
 80094dc:	08009439 	.word	0x08009439
 80094e0:	08009513 	.word	0x08009513
 80094e4:	3b45      	subs	r3, #69	@ 0x45
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d8a6      	bhi.n	8009438 <__ssvfiscanf_r+0xec>
 80094ea:	2305      	movs	r3, #5
 80094ec:	e021      	b.n	8009532 <__ssvfiscanf_r+0x1e6>
 80094ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80094f0:	4621      	mov	r1, r4
 80094f2:	4630      	mov	r0, r6
 80094f4:	4798      	blx	r3
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f43f af66 	beq.w	80093c8 <__ssvfiscanf_r+0x7c>
 80094fc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80094fe:	2800      	cmp	r0, #0
 8009500:	f040 808b 	bne.w	800961a <__ssvfiscanf_r+0x2ce>
 8009504:	f04f 30ff 	mov.w	r0, #4294967295
 8009508:	e08b      	b.n	8009622 <__ssvfiscanf_r+0x2d6>
 800950a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800950c:	f042 0220 	orr.w	r2, r2, #32
 8009510:	9241      	str	r2, [sp, #260]	@ 0x104
 8009512:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009518:	9241      	str	r2, [sp, #260]	@ 0x104
 800951a:	2210      	movs	r2, #16
 800951c:	2b6e      	cmp	r3, #110	@ 0x6e
 800951e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009520:	d902      	bls.n	8009528 <__ssvfiscanf_r+0x1dc>
 8009522:	e005      	b.n	8009530 <__ssvfiscanf_r+0x1e4>
 8009524:	2300      	movs	r3, #0
 8009526:	9342      	str	r3, [sp, #264]	@ 0x108
 8009528:	2303      	movs	r3, #3
 800952a:	e002      	b.n	8009532 <__ssvfiscanf_r+0x1e6>
 800952c:	2308      	movs	r3, #8
 800952e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009530:	2304      	movs	r3, #4
 8009532:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009534:	6863      	ldr	r3, [r4, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	dd39      	ble.n	80095ae <__ssvfiscanf_r+0x262>
 800953a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800953c:	0659      	lsls	r1, r3, #25
 800953e:	d404      	bmi.n	800954a <__ssvfiscanf_r+0x1fe>
 8009540:	6823      	ldr	r3, [r4, #0]
 8009542:	781a      	ldrb	r2, [r3, #0]
 8009544:	5cba      	ldrb	r2, [r7, r2]
 8009546:	0712      	lsls	r2, r2, #28
 8009548:	d438      	bmi.n	80095bc <__ssvfiscanf_r+0x270>
 800954a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800954c:	2b02      	cmp	r3, #2
 800954e:	dc47      	bgt.n	80095e0 <__ssvfiscanf_r+0x294>
 8009550:	466b      	mov	r3, sp
 8009552:	4622      	mov	r2, r4
 8009554:	a941      	add	r1, sp, #260	@ 0x104
 8009556:	4630      	mov	r0, r6
 8009558:	f000 f86c 	bl	8009634 <_scanf_chars>
 800955c:	2801      	cmp	r0, #1
 800955e:	d064      	beq.n	800962a <__ssvfiscanf_r+0x2de>
 8009560:	2802      	cmp	r0, #2
 8009562:	f47f af18 	bne.w	8009396 <__ssvfiscanf_r+0x4a>
 8009566:	e7c9      	b.n	80094fc <__ssvfiscanf_r+0x1b0>
 8009568:	220a      	movs	r2, #10
 800956a:	e7d7      	b.n	800951c <__ssvfiscanf_r+0x1d0>
 800956c:	4629      	mov	r1, r5
 800956e:	4640      	mov	r0, r8
 8009570:	f000 fa5a 	bl	8009a28 <__sccl>
 8009574:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800957a:	9341      	str	r3, [sp, #260]	@ 0x104
 800957c:	4605      	mov	r5, r0
 800957e:	2301      	movs	r3, #1
 8009580:	e7d7      	b.n	8009532 <__ssvfiscanf_r+0x1e6>
 8009582:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009588:	9341      	str	r3, [sp, #260]	@ 0x104
 800958a:	2300      	movs	r3, #0
 800958c:	e7d1      	b.n	8009532 <__ssvfiscanf_r+0x1e6>
 800958e:	2302      	movs	r3, #2
 8009590:	e7cf      	b.n	8009532 <__ssvfiscanf_r+0x1e6>
 8009592:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009594:	06c3      	lsls	r3, r0, #27
 8009596:	f53f aefe 	bmi.w	8009396 <__ssvfiscanf_r+0x4a>
 800959a:	9b00      	ldr	r3, [sp, #0]
 800959c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800959e:	1d19      	adds	r1, r3, #4
 80095a0:	9100      	str	r1, [sp, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	07c0      	lsls	r0, r0, #31
 80095a6:	bf4c      	ite	mi
 80095a8:	801a      	strhmi	r2, [r3, #0]
 80095aa:	601a      	strpl	r2, [r3, #0]
 80095ac:	e6f3      	b.n	8009396 <__ssvfiscanf_r+0x4a>
 80095ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80095b0:	4621      	mov	r1, r4
 80095b2:	4630      	mov	r0, r6
 80095b4:	4798      	blx	r3
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d0bf      	beq.n	800953a <__ssvfiscanf_r+0x1ee>
 80095ba:	e79f      	b.n	80094fc <__ssvfiscanf_r+0x1b0>
 80095bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80095be:	3201      	adds	r2, #1
 80095c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80095c2:	6862      	ldr	r2, [r4, #4]
 80095c4:	3a01      	subs	r2, #1
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	6062      	str	r2, [r4, #4]
 80095ca:	dd02      	ble.n	80095d2 <__ssvfiscanf_r+0x286>
 80095cc:	3301      	adds	r3, #1
 80095ce:	6023      	str	r3, [r4, #0]
 80095d0:	e7b6      	b.n	8009540 <__ssvfiscanf_r+0x1f4>
 80095d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80095d4:	4621      	mov	r1, r4
 80095d6:	4630      	mov	r0, r6
 80095d8:	4798      	blx	r3
 80095da:	2800      	cmp	r0, #0
 80095dc:	d0b0      	beq.n	8009540 <__ssvfiscanf_r+0x1f4>
 80095de:	e78d      	b.n	80094fc <__ssvfiscanf_r+0x1b0>
 80095e0:	2b04      	cmp	r3, #4
 80095e2:	dc0f      	bgt.n	8009604 <__ssvfiscanf_r+0x2b8>
 80095e4:	466b      	mov	r3, sp
 80095e6:	4622      	mov	r2, r4
 80095e8:	a941      	add	r1, sp, #260	@ 0x104
 80095ea:	4630      	mov	r0, r6
 80095ec:	f000 f87c 	bl	80096e8 <_scanf_i>
 80095f0:	e7b4      	b.n	800955c <__ssvfiscanf_r+0x210>
 80095f2:	bf00      	nop
 80095f4:	0800929d 	.word	0x0800929d
 80095f8:	08009313 	.word	0x08009313
 80095fc:	0800af59 	.word	0x0800af59
 8009600:	0800b05f 	.word	0x0800b05f
 8009604:	4b0a      	ldr	r3, [pc, #40]	@ (8009630 <__ssvfiscanf_r+0x2e4>)
 8009606:	2b00      	cmp	r3, #0
 8009608:	f43f aec5 	beq.w	8009396 <__ssvfiscanf_r+0x4a>
 800960c:	466b      	mov	r3, sp
 800960e:	4622      	mov	r2, r4
 8009610:	a941      	add	r1, sp, #260	@ 0x104
 8009612:	4630      	mov	r0, r6
 8009614:	f7fc fe6a 	bl	80062ec <_scanf_float>
 8009618:	e7a0      	b.n	800955c <__ssvfiscanf_r+0x210>
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	065b      	lsls	r3, r3, #25
 800961e:	f53f af71 	bmi.w	8009504 <__ssvfiscanf_r+0x1b8>
 8009622:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800962c:	e7f9      	b.n	8009622 <__ssvfiscanf_r+0x2d6>
 800962e:	bf00      	nop
 8009630:	080062ed 	.word	0x080062ed

08009634 <_scanf_chars>:
 8009634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009638:	4615      	mov	r5, r2
 800963a:	688a      	ldr	r2, [r1, #8]
 800963c:	4680      	mov	r8, r0
 800963e:	460c      	mov	r4, r1
 8009640:	b932      	cbnz	r2, 8009650 <_scanf_chars+0x1c>
 8009642:	698a      	ldr	r2, [r1, #24]
 8009644:	2a00      	cmp	r2, #0
 8009646:	bf14      	ite	ne
 8009648:	f04f 32ff 	movne.w	r2, #4294967295
 800964c:	2201      	moveq	r2, #1
 800964e:	608a      	str	r2, [r1, #8]
 8009650:	6822      	ldr	r2, [r4, #0]
 8009652:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80096e4 <_scanf_chars+0xb0>
 8009656:	06d1      	lsls	r1, r2, #27
 8009658:	bf5f      	itttt	pl
 800965a:	681a      	ldrpl	r2, [r3, #0]
 800965c:	1d11      	addpl	r1, r2, #4
 800965e:	6019      	strpl	r1, [r3, #0]
 8009660:	6816      	ldrpl	r6, [r2, #0]
 8009662:	2700      	movs	r7, #0
 8009664:	69a0      	ldr	r0, [r4, #24]
 8009666:	b188      	cbz	r0, 800968c <_scanf_chars+0x58>
 8009668:	2801      	cmp	r0, #1
 800966a:	d107      	bne.n	800967c <_scanf_chars+0x48>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	781a      	ldrb	r2, [r3, #0]
 8009670:	6963      	ldr	r3, [r4, #20]
 8009672:	5c9b      	ldrb	r3, [r3, r2]
 8009674:	b953      	cbnz	r3, 800968c <_scanf_chars+0x58>
 8009676:	2f00      	cmp	r7, #0
 8009678:	d031      	beq.n	80096de <_scanf_chars+0xaa>
 800967a:	e022      	b.n	80096c2 <_scanf_chars+0x8e>
 800967c:	2802      	cmp	r0, #2
 800967e:	d120      	bne.n	80096c2 <_scanf_chars+0x8e>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009688:	071b      	lsls	r3, r3, #28
 800968a:	d41a      	bmi.n	80096c2 <_scanf_chars+0x8e>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	06da      	lsls	r2, r3, #27
 8009690:	bf5e      	ittt	pl
 8009692:	682b      	ldrpl	r3, [r5, #0]
 8009694:	781b      	ldrbpl	r3, [r3, #0]
 8009696:	f806 3b01 	strbpl.w	r3, [r6], #1
 800969a:	682a      	ldr	r2, [r5, #0]
 800969c:	686b      	ldr	r3, [r5, #4]
 800969e:	3201      	adds	r2, #1
 80096a0:	602a      	str	r2, [r5, #0]
 80096a2:	68a2      	ldr	r2, [r4, #8]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	3a01      	subs	r2, #1
 80096a8:	606b      	str	r3, [r5, #4]
 80096aa:	3701      	adds	r7, #1
 80096ac:	60a2      	str	r2, [r4, #8]
 80096ae:	b142      	cbz	r2, 80096c2 <_scanf_chars+0x8e>
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dcd7      	bgt.n	8009664 <_scanf_chars+0x30>
 80096b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80096b8:	4629      	mov	r1, r5
 80096ba:	4640      	mov	r0, r8
 80096bc:	4798      	blx	r3
 80096be:	2800      	cmp	r0, #0
 80096c0:	d0d0      	beq.n	8009664 <_scanf_chars+0x30>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	f013 0310 	ands.w	r3, r3, #16
 80096c8:	d105      	bne.n	80096d6 <_scanf_chars+0xa2>
 80096ca:	68e2      	ldr	r2, [r4, #12]
 80096cc:	3201      	adds	r2, #1
 80096ce:	60e2      	str	r2, [r4, #12]
 80096d0:	69a2      	ldr	r2, [r4, #24]
 80096d2:	b102      	cbz	r2, 80096d6 <_scanf_chars+0xa2>
 80096d4:	7033      	strb	r3, [r6, #0]
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	443b      	add	r3, r7
 80096da:	6123      	str	r3, [r4, #16]
 80096dc:	2000      	movs	r0, #0
 80096de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096e2:	bf00      	nop
 80096e4:	0800af59 	.word	0x0800af59

080096e8 <_scanf_i>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	4698      	mov	r8, r3
 80096ee:	4b74      	ldr	r3, [pc, #464]	@ (80098c0 <_scanf_i+0x1d8>)
 80096f0:	460c      	mov	r4, r1
 80096f2:	4682      	mov	sl, r0
 80096f4:	4616      	mov	r6, r2
 80096f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096fa:	b087      	sub	sp, #28
 80096fc:	ab03      	add	r3, sp, #12
 80096fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009702:	4b70      	ldr	r3, [pc, #448]	@ (80098c4 <_scanf_i+0x1dc>)
 8009704:	69a1      	ldr	r1, [r4, #24]
 8009706:	4a70      	ldr	r2, [pc, #448]	@ (80098c8 <_scanf_i+0x1e0>)
 8009708:	2903      	cmp	r1, #3
 800970a:	bf08      	it	eq
 800970c:	461a      	moveq	r2, r3
 800970e:	68a3      	ldr	r3, [r4, #8]
 8009710:	9201      	str	r2, [sp, #4]
 8009712:	1e5a      	subs	r2, r3, #1
 8009714:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009718:	bf88      	it	hi
 800971a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800971e:	4627      	mov	r7, r4
 8009720:	bf82      	ittt	hi
 8009722:	eb03 0905 	addhi.w	r9, r3, r5
 8009726:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800972a:	60a3      	strhi	r3, [r4, #8]
 800972c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009730:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009734:	bf98      	it	ls
 8009736:	f04f 0900 	movls.w	r9, #0
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	463d      	mov	r5, r7
 800973e:	f04f 0b00 	mov.w	fp, #0
 8009742:	6831      	ldr	r1, [r6, #0]
 8009744:	ab03      	add	r3, sp, #12
 8009746:	7809      	ldrb	r1, [r1, #0]
 8009748:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800974c:	2202      	movs	r2, #2
 800974e:	f7f6 fd47 	bl	80001e0 <memchr>
 8009752:	b328      	cbz	r0, 80097a0 <_scanf_i+0xb8>
 8009754:	f1bb 0f01 	cmp.w	fp, #1
 8009758:	d159      	bne.n	800980e <_scanf_i+0x126>
 800975a:	6862      	ldr	r2, [r4, #4]
 800975c:	b92a      	cbnz	r2, 800976a <_scanf_i+0x82>
 800975e:	6822      	ldr	r2, [r4, #0]
 8009760:	2108      	movs	r1, #8
 8009762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009766:	6061      	str	r1, [r4, #4]
 8009768:	6022      	str	r2, [r4, #0]
 800976a:	6822      	ldr	r2, [r4, #0]
 800976c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009770:	6022      	str	r2, [r4, #0]
 8009772:	68a2      	ldr	r2, [r4, #8]
 8009774:	1e51      	subs	r1, r2, #1
 8009776:	60a1      	str	r1, [r4, #8]
 8009778:	b192      	cbz	r2, 80097a0 <_scanf_i+0xb8>
 800977a:	6832      	ldr	r2, [r6, #0]
 800977c:	1c51      	adds	r1, r2, #1
 800977e:	6031      	str	r1, [r6, #0]
 8009780:	7812      	ldrb	r2, [r2, #0]
 8009782:	f805 2b01 	strb.w	r2, [r5], #1
 8009786:	6872      	ldr	r2, [r6, #4]
 8009788:	3a01      	subs	r2, #1
 800978a:	2a00      	cmp	r2, #0
 800978c:	6072      	str	r2, [r6, #4]
 800978e:	dc07      	bgt.n	80097a0 <_scanf_i+0xb8>
 8009790:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009794:	4631      	mov	r1, r6
 8009796:	4650      	mov	r0, sl
 8009798:	4790      	blx	r2
 800979a:	2800      	cmp	r0, #0
 800979c:	f040 8085 	bne.w	80098aa <_scanf_i+0x1c2>
 80097a0:	f10b 0b01 	add.w	fp, fp, #1
 80097a4:	f1bb 0f03 	cmp.w	fp, #3
 80097a8:	d1cb      	bne.n	8009742 <_scanf_i+0x5a>
 80097aa:	6863      	ldr	r3, [r4, #4]
 80097ac:	b90b      	cbnz	r3, 80097b2 <_scanf_i+0xca>
 80097ae:	230a      	movs	r3, #10
 80097b0:	6063      	str	r3, [r4, #4]
 80097b2:	6863      	ldr	r3, [r4, #4]
 80097b4:	4945      	ldr	r1, [pc, #276]	@ (80098cc <_scanf_i+0x1e4>)
 80097b6:	6960      	ldr	r0, [r4, #20]
 80097b8:	1ac9      	subs	r1, r1, r3
 80097ba:	f000 f935 	bl	8009a28 <__sccl>
 80097be:	f04f 0b00 	mov.w	fp, #0
 80097c2:	68a3      	ldr	r3, [r4, #8]
 80097c4:	6822      	ldr	r2, [r4, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d03d      	beq.n	8009846 <_scanf_i+0x15e>
 80097ca:	6831      	ldr	r1, [r6, #0]
 80097cc:	6960      	ldr	r0, [r4, #20]
 80097ce:	f891 c000 	ldrb.w	ip, [r1]
 80097d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80097d6:	2800      	cmp	r0, #0
 80097d8:	d035      	beq.n	8009846 <_scanf_i+0x15e>
 80097da:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80097de:	d124      	bne.n	800982a <_scanf_i+0x142>
 80097e0:	0510      	lsls	r0, r2, #20
 80097e2:	d522      	bpl.n	800982a <_scanf_i+0x142>
 80097e4:	f10b 0b01 	add.w	fp, fp, #1
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	d003      	beq.n	80097f6 <_scanf_i+0x10e>
 80097ee:	3301      	adds	r3, #1
 80097f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80097f4:	60a3      	str	r3, [r4, #8]
 80097f6:	6873      	ldr	r3, [r6, #4]
 80097f8:	3b01      	subs	r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	6073      	str	r3, [r6, #4]
 80097fe:	dd1b      	ble.n	8009838 <_scanf_i+0x150>
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	3301      	adds	r3, #1
 8009804:	6033      	str	r3, [r6, #0]
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	3b01      	subs	r3, #1
 800980a:	60a3      	str	r3, [r4, #8]
 800980c:	e7d9      	b.n	80097c2 <_scanf_i+0xda>
 800980e:	f1bb 0f02 	cmp.w	fp, #2
 8009812:	d1ae      	bne.n	8009772 <_scanf_i+0x8a>
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800981a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800981e:	d1bf      	bne.n	80097a0 <_scanf_i+0xb8>
 8009820:	2110      	movs	r1, #16
 8009822:	6061      	str	r1, [r4, #4]
 8009824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009828:	e7a2      	b.n	8009770 <_scanf_i+0x88>
 800982a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800982e:	6022      	str	r2, [r4, #0]
 8009830:	780b      	ldrb	r3, [r1, #0]
 8009832:	f805 3b01 	strb.w	r3, [r5], #1
 8009836:	e7de      	b.n	80097f6 <_scanf_i+0x10e>
 8009838:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800983c:	4631      	mov	r1, r6
 800983e:	4650      	mov	r0, sl
 8009840:	4798      	blx	r3
 8009842:	2800      	cmp	r0, #0
 8009844:	d0df      	beq.n	8009806 <_scanf_i+0x11e>
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	05d9      	lsls	r1, r3, #23
 800984a:	d50d      	bpl.n	8009868 <_scanf_i+0x180>
 800984c:	42bd      	cmp	r5, r7
 800984e:	d909      	bls.n	8009864 <_scanf_i+0x17c>
 8009850:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009854:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009858:	4632      	mov	r2, r6
 800985a:	4650      	mov	r0, sl
 800985c:	4798      	blx	r3
 800985e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009862:	464d      	mov	r5, r9
 8009864:	42bd      	cmp	r5, r7
 8009866:	d028      	beq.n	80098ba <_scanf_i+0x1d2>
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	f012 0210 	ands.w	r2, r2, #16
 800986e:	d113      	bne.n	8009898 <_scanf_i+0x1b0>
 8009870:	702a      	strb	r2, [r5, #0]
 8009872:	6863      	ldr	r3, [r4, #4]
 8009874:	9e01      	ldr	r6, [sp, #4]
 8009876:	4639      	mov	r1, r7
 8009878:	4650      	mov	r0, sl
 800987a:	47b0      	blx	r6
 800987c:	f8d8 3000 	ldr.w	r3, [r8]
 8009880:	6821      	ldr	r1, [r4, #0]
 8009882:	1d1a      	adds	r2, r3, #4
 8009884:	f8c8 2000 	str.w	r2, [r8]
 8009888:	f011 0f20 	tst.w	r1, #32
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	d00f      	beq.n	80098b0 <_scanf_i+0x1c8>
 8009890:	6018      	str	r0, [r3, #0]
 8009892:	68e3      	ldr	r3, [r4, #12]
 8009894:	3301      	adds	r3, #1
 8009896:	60e3      	str	r3, [r4, #12]
 8009898:	6923      	ldr	r3, [r4, #16]
 800989a:	1bed      	subs	r5, r5, r7
 800989c:	445d      	add	r5, fp
 800989e:	442b      	add	r3, r5
 80098a0:	6123      	str	r3, [r4, #16]
 80098a2:	2000      	movs	r0, #0
 80098a4:	b007      	add	sp, #28
 80098a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098aa:	f04f 0b00 	mov.w	fp, #0
 80098ae:	e7ca      	b.n	8009846 <_scanf_i+0x15e>
 80098b0:	07ca      	lsls	r2, r1, #31
 80098b2:	bf4c      	ite	mi
 80098b4:	8018      	strhmi	r0, [r3, #0]
 80098b6:	6018      	strpl	r0, [r3, #0]
 80098b8:	e7eb      	b.n	8009892 <_scanf_i+0x1aa>
 80098ba:	2001      	movs	r0, #1
 80098bc:	e7f2      	b.n	80098a4 <_scanf_i+0x1bc>
 80098be:	bf00      	nop
 80098c0:	0800acbc 	.word	0x0800acbc
 80098c4:	08008fe9 	.word	0x08008fe9
 80098c8:	0800a3c5 	.word	0x0800a3c5
 80098cc:	0800b07a 	.word	0x0800b07a

080098d0 <__sflush_r>:
 80098d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d8:	0716      	lsls	r6, r2, #28
 80098da:	4605      	mov	r5, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	d454      	bmi.n	800998a <__sflush_r+0xba>
 80098e0:	684b      	ldr	r3, [r1, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dc02      	bgt.n	80098ec <__sflush_r+0x1c>
 80098e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	dd48      	ble.n	800997e <__sflush_r+0xae>
 80098ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098ee:	2e00      	cmp	r6, #0
 80098f0:	d045      	beq.n	800997e <__sflush_r+0xae>
 80098f2:	2300      	movs	r3, #0
 80098f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098f8:	682f      	ldr	r7, [r5, #0]
 80098fa:	6a21      	ldr	r1, [r4, #32]
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	d030      	beq.n	8009962 <__sflush_r+0x92>
 8009900:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	0759      	lsls	r1, r3, #29
 8009906:	d505      	bpl.n	8009914 <__sflush_r+0x44>
 8009908:	6863      	ldr	r3, [r4, #4]
 800990a:	1ad2      	subs	r2, r2, r3
 800990c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800990e:	b10b      	cbz	r3, 8009914 <__sflush_r+0x44>
 8009910:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009912:	1ad2      	subs	r2, r2, r3
 8009914:	2300      	movs	r3, #0
 8009916:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009918:	6a21      	ldr	r1, [r4, #32]
 800991a:	4628      	mov	r0, r5
 800991c:	47b0      	blx	r6
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	d106      	bne.n	8009932 <__sflush_r+0x62>
 8009924:	6829      	ldr	r1, [r5, #0]
 8009926:	291d      	cmp	r1, #29
 8009928:	d82b      	bhi.n	8009982 <__sflush_r+0xb2>
 800992a:	4a2a      	ldr	r2, [pc, #168]	@ (80099d4 <__sflush_r+0x104>)
 800992c:	410a      	asrs	r2, r1
 800992e:	07d6      	lsls	r6, r2, #31
 8009930:	d427      	bmi.n	8009982 <__sflush_r+0xb2>
 8009932:	2200      	movs	r2, #0
 8009934:	6062      	str	r2, [r4, #4]
 8009936:	04d9      	lsls	r1, r3, #19
 8009938:	6922      	ldr	r2, [r4, #16]
 800993a:	6022      	str	r2, [r4, #0]
 800993c:	d504      	bpl.n	8009948 <__sflush_r+0x78>
 800993e:	1c42      	adds	r2, r0, #1
 8009940:	d101      	bne.n	8009946 <__sflush_r+0x76>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	b903      	cbnz	r3, 8009948 <__sflush_r+0x78>
 8009946:	6560      	str	r0, [r4, #84]	@ 0x54
 8009948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800994a:	602f      	str	r7, [r5, #0]
 800994c:	b1b9      	cbz	r1, 800997e <__sflush_r+0xae>
 800994e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009952:	4299      	cmp	r1, r3
 8009954:	d002      	beq.n	800995c <__sflush_r+0x8c>
 8009956:	4628      	mov	r0, r5
 8009958:	f7fd ff12 	bl	8007780 <_free_r>
 800995c:	2300      	movs	r3, #0
 800995e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009960:	e00d      	b.n	800997e <__sflush_r+0xae>
 8009962:	2301      	movs	r3, #1
 8009964:	4628      	mov	r0, r5
 8009966:	47b0      	blx	r6
 8009968:	4602      	mov	r2, r0
 800996a:	1c50      	adds	r0, r2, #1
 800996c:	d1c9      	bne.n	8009902 <__sflush_r+0x32>
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d0c6      	beq.n	8009902 <__sflush_r+0x32>
 8009974:	2b1d      	cmp	r3, #29
 8009976:	d001      	beq.n	800997c <__sflush_r+0xac>
 8009978:	2b16      	cmp	r3, #22
 800997a:	d11e      	bne.n	80099ba <__sflush_r+0xea>
 800997c:	602f      	str	r7, [r5, #0]
 800997e:	2000      	movs	r0, #0
 8009980:	e022      	b.n	80099c8 <__sflush_r+0xf8>
 8009982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009986:	b21b      	sxth	r3, r3
 8009988:	e01b      	b.n	80099c2 <__sflush_r+0xf2>
 800998a:	690f      	ldr	r7, [r1, #16]
 800998c:	2f00      	cmp	r7, #0
 800998e:	d0f6      	beq.n	800997e <__sflush_r+0xae>
 8009990:	0793      	lsls	r3, r2, #30
 8009992:	680e      	ldr	r6, [r1, #0]
 8009994:	bf08      	it	eq
 8009996:	694b      	ldreq	r3, [r1, #20]
 8009998:	600f      	str	r7, [r1, #0]
 800999a:	bf18      	it	ne
 800999c:	2300      	movne	r3, #0
 800999e:	eba6 0807 	sub.w	r8, r6, r7
 80099a2:	608b      	str	r3, [r1, #8]
 80099a4:	f1b8 0f00 	cmp.w	r8, #0
 80099a8:	dde9      	ble.n	800997e <__sflush_r+0xae>
 80099aa:	6a21      	ldr	r1, [r4, #32]
 80099ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099ae:	4643      	mov	r3, r8
 80099b0:	463a      	mov	r2, r7
 80099b2:	4628      	mov	r0, r5
 80099b4:	47b0      	blx	r6
 80099b6:	2800      	cmp	r0, #0
 80099b8:	dc08      	bgt.n	80099cc <__sflush_r+0xfc>
 80099ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	f04f 30ff 	mov.w	r0, #4294967295
 80099c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099cc:	4407      	add	r7, r0
 80099ce:	eba8 0800 	sub.w	r8, r8, r0
 80099d2:	e7e7      	b.n	80099a4 <__sflush_r+0xd4>
 80099d4:	dfbffffe 	.word	0xdfbffffe

080099d8 <_fflush_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	690b      	ldr	r3, [r1, #16]
 80099dc:	4605      	mov	r5, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	b913      	cbnz	r3, 80099e8 <_fflush_r+0x10>
 80099e2:	2500      	movs	r5, #0
 80099e4:	4628      	mov	r0, r5
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	b118      	cbz	r0, 80099f2 <_fflush_r+0x1a>
 80099ea:	6a03      	ldr	r3, [r0, #32]
 80099ec:	b90b      	cbnz	r3, 80099f2 <_fflush_r+0x1a>
 80099ee:	f7fc ff1d 	bl	800682c <__sinit>
 80099f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d0f3      	beq.n	80099e2 <_fflush_r+0xa>
 80099fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099fc:	07d0      	lsls	r0, r2, #31
 80099fe:	d404      	bmi.n	8009a0a <_fflush_r+0x32>
 8009a00:	0599      	lsls	r1, r3, #22
 8009a02:	d402      	bmi.n	8009a0a <_fflush_r+0x32>
 8009a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a06:	f7fd f866 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	f7ff ff5f 	bl	80098d0 <__sflush_r>
 8009a12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a14:	07da      	lsls	r2, r3, #31
 8009a16:	4605      	mov	r5, r0
 8009a18:	d4e4      	bmi.n	80099e4 <_fflush_r+0xc>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	059b      	lsls	r3, r3, #22
 8009a1e:	d4e1      	bmi.n	80099e4 <_fflush_r+0xc>
 8009a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a22:	f7fd f859 	bl	8006ad8 <__retarget_lock_release_recursive>
 8009a26:	e7dd      	b.n	80099e4 <_fflush_r+0xc>

08009a28 <__sccl>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	780b      	ldrb	r3, [r1, #0]
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	2b5e      	cmp	r3, #94	@ 0x5e
 8009a30:	bf0b      	itete	eq
 8009a32:	784b      	ldrbeq	r3, [r1, #1]
 8009a34:	1c4a      	addne	r2, r1, #1
 8009a36:	1c8a      	addeq	r2, r1, #2
 8009a38:	2100      	movne	r1, #0
 8009a3a:	bf08      	it	eq
 8009a3c:	2101      	moveq	r1, #1
 8009a3e:	3801      	subs	r0, #1
 8009a40:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009a44:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009a48:	42a8      	cmp	r0, r5
 8009a4a:	d1fb      	bne.n	8009a44 <__sccl+0x1c>
 8009a4c:	b90b      	cbnz	r3, 8009a52 <__sccl+0x2a>
 8009a4e:	1e50      	subs	r0, r2, #1
 8009a50:	bd70      	pop	{r4, r5, r6, pc}
 8009a52:	f081 0101 	eor.w	r1, r1, #1
 8009a56:	54e1      	strb	r1, [r4, r3]
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009a60:	2d2d      	cmp	r5, #45	@ 0x2d
 8009a62:	d005      	beq.n	8009a70 <__sccl+0x48>
 8009a64:	2d5d      	cmp	r5, #93	@ 0x5d
 8009a66:	d016      	beq.n	8009a96 <__sccl+0x6e>
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	d0f1      	beq.n	8009a50 <__sccl+0x28>
 8009a6c:	462b      	mov	r3, r5
 8009a6e:	e7f2      	b.n	8009a56 <__sccl+0x2e>
 8009a70:	7846      	ldrb	r6, [r0, #1]
 8009a72:	2e5d      	cmp	r6, #93	@ 0x5d
 8009a74:	d0fa      	beq.n	8009a6c <__sccl+0x44>
 8009a76:	42b3      	cmp	r3, r6
 8009a78:	dcf8      	bgt.n	8009a6c <__sccl+0x44>
 8009a7a:	3002      	adds	r0, #2
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	3201      	adds	r2, #1
 8009a80:	4296      	cmp	r6, r2
 8009a82:	54a1      	strb	r1, [r4, r2]
 8009a84:	dcfb      	bgt.n	8009a7e <__sccl+0x56>
 8009a86:	1af2      	subs	r2, r6, r3
 8009a88:	3a01      	subs	r2, #1
 8009a8a:	1c5d      	adds	r5, r3, #1
 8009a8c:	42b3      	cmp	r3, r6
 8009a8e:	bfa8      	it	ge
 8009a90:	2200      	movge	r2, #0
 8009a92:	18ab      	adds	r3, r5, r2
 8009a94:	e7e1      	b.n	8009a5a <__sccl+0x32>
 8009a96:	4610      	mov	r0, r2
 8009a98:	e7da      	b.n	8009a50 <__sccl+0x28>

08009a9a <__submore>:
 8009a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009aa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009aa6:	4299      	cmp	r1, r3
 8009aa8:	d11d      	bne.n	8009ae6 <__submore+0x4c>
 8009aaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009aae:	f7fd fedb 	bl	8007868 <_malloc_r>
 8009ab2:	b918      	cbnz	r0, 8009abc <__submore+0x22>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ac0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009ac2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009ac6:	6360      	str	r0, [r4, #52]	@ 0x34
 8009ac8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009acc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009ad0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009ad4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009ad8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009adc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009ae0:	6020      	str	r0, [r4, #0]
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e7e8      	b.n	8009ab8 <__submore+0x1e>
 8009ae6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009ae8:	0077      	lsls	r7, r6, #1
 8009aea:	463a      	mov	r2, r7
 8009aec:	f000 fbcd 	bl	800a28a <_realloc_r>
 8009af0:	4605      	mov	r5, r0
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d0de      	beq.n	8009ab4 <__submore+0x1a>
 8009af6:	eb00 0806 	add.w	r8, r0, r6
 8009afa:	4601      	mov	r1, r0
 8009afc:	4632      	mov	r2, r6
 8009afe:	4640      	mov	r0, r8
 8009b00:	f000 f830 	bl	8009b64 <memcpy>
 8009b04:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009b08:	f8c4 8000 	str.w	r8, [r4]
 8009b0c:	e7e9      	b.n	8009ae2 <__submore+0x48>

08009b0e <memmove>:
 8009b0e:	4288      	cmp	r0, r1
 8009b10:	b510      	push	{r4, lr}
 8009b12:	eb01 0402 	add.w	r4, r1, r2
 8009b16:	d902      	bls.n	8009b1e <memmove+0x10>
 8009b18:	4284      	cmp	r4, r0
 8009b1a:	4623      	mov	r3, r4
 8009b1c:	d807      	bhi.n	8009b2e <memmove+0x20>
 8009b1e:	1e43      	subs	r3, r0, #1
 8009b20:	42a1      	cmp	r1, r4
 8009b22:	d008      	beq.n	8009b36 <memmove+0x28>
 8009b24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b28:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b2c:	e7f8      	b.n	8009b20 <memmove+0x12>
 8009b2e:	4402      	add	r2, r0
 8009b30:	4601      	mov	r1, r0
 8009b32:	428a      	cmp	r2, r1
 8009b34:	d100      	bne.n	8009b38 <memmove+0x2a>
 8009b36:	bd10      	pop	{r4, pc}
 8009b38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b3c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b40:	e7f7      	b.n	8009b32 <memmove+0x24>
	...

08009b44 <_sbrk_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d06      	ldr	r5, [pc, #24]	@ (8009b60 <_sbrk_r+0x1c>)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	602b      	str	r3, [r5, #0]
 8009b50:	f7f8 f8c8 	bl	8001ce4 <_sbrk>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_sbrk_r+0x1a>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_sbrk_r+0x1a>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	200005a4 	.word	0x200005a4

08009b64 <memcpy>:
 8009b64:	440a      	add	r2, r1
 8009b66:	4291      	cmp	r1, r2
 8009b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b6c:	d100      	bne.n	8009b70 <memcpy+0xc>
 8009b6e:	4770      	bx	lr
 8009b70:	b510      	push	{r4, lr}
 8009b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b7a:	4291      	cmp	r1, r2
 8009b7c:	d1f9      	bne.n	8009b72 <memcpy+0xe>
 8009b7e:	bd10      	pop	{r4, pc}

08009b80 <nan>:
 8009b80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b88 <nan+0x8>
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	00000000 	.word	0x00000000
 8009b8c:	7ff80000 	.word	0x7ff80000

08009b90 <__assert_func>:
 8009b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b92:	4614      	mov	r4, r2
 8009b94:	461a      	mov	r2, r3
 8009b96:	4b09      	ldr	r3, [pc, #36]	@ (8009bbc <__assert_func+0x2c>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	68d8      	ldr	r0, [r3, #12]
 8009b9e:	b954      	cbnz	r4, 8009bb6 <__assert_func+0x26>
 8009ba0:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <__assert_func+0x30>)
 8009ba2:	461c      	mov	r4, r3
 8009ba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ba8:	9100      	str	r1, [sp, #0]
 8009baa:	462b      	mov	r3, r5
 8009bac:	4905      	ldr	r1, [pc, #20]	@ (8009bc4 <__assert_func+0x34>)
 8009bae:	f000 fc19 	bl	800a3e4 <fiprintf>
 8009bb2:	f000 fc29 	bl	800a408 <abort>
 8009bb6:	4b04      	ldr	r3, [pc, #16]	@ (8009bc8 <__assert_func+0x38>)
 8009bb8:	e7f4      	b.n	8009ba4 <__assert_func+0x14>
 8009bba:	bf00      	nop
 8009bbc:	2000003c 	.word	0x2000003c
 8009bc0:	0800b0c8 	.word	0x0800b0c8
 8009bc4:	0800b09a 	.word	0x0800b09a
 8009bc8:	0800b08d 	.word	0x0800b08d

08009bcc <_calloc_r>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	fba1 5402 	umull	r5, r4, r1, r2
 8009bd2:	b93c      	cbnz	r4, 8009be4 <_calloc_r+0x18>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	f7fd fe47 	bl	8007868 <_malloc_r>
 8009bda:	4606      	mov	r6, r0
 8009bdc:	b928      	cbnz	r0, 8009bea <_calloc_r+0x1e>
 8009bde:	2600      	movs	r6, #0
 8009be0:	4630      	mov	r0, r6
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	220c      	movs	r2, #12
 8009be6:	6002      	str	r2, [r0, #0]
 8009be8:	e7f9      	b.n	8009bde <_calloc_r+0x12>
 8009bea:	462a      	mov	r2, r5
 8009bec:	4621      	mov	r1, r4
 8009bee:	f7fc fee2 	bl	80069b6 <memset>
 8009bf2:	e7f5      	b.n	8009be0 <_calloc_r+0x14>

08009bf4 <rshift>:
 8009bf4:	6903      	ldr	r3, [r0, #16]
 8009bf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c02:	f100 0414 	add.w	r4, r0, #20
 8009c06:	dd45      	ble.n	8009c94 <rshift+0xa0>
 8009c08:	f011 011f 	ands.w	r1, r1, #31
 8009c0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c14:	d10c      	bne.n	8009c30 <rshift+0x3c>
 8009c16:	f100 0710 	add.w	r7, r0, #16
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	42b1      	cmp	r1, r6
 8009c1e:	d334      	bcc.n	8009c8a <rshift+0x96>
 8009c20:	1a9b      	subs	r3, r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	1eea      	subs	r2, r5, #3
 8009c26:	4296      	cmp	r6, r2
 8009c28:	bf38      	it	cc
 8009c2a:	2300      	movcc	r3, #0
 8009c2c:	4423      	add	r3, r4
 8009c2e:	e015      	b.n	8009c5c <rshift+0x68>
 8009c30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c34:	f1c1 0820 	rsb	r8, r1, #32
 8009c38:	40cf      	lsrs	r7, r1
 8009c3a:	f105 0e04 	add.w	lr, r5, #4
 8009c3e:	46a1      	mov	r9, r4
 8009c40:	4576      	cmp	r6, lr
 8009c42:	46f4      	mov	ip, lr
 8009c44:	d815      	bhi.n	8009c72 <rshift+0x7e>
 8009c46:	1a9a      	subs	r2, r3, r2
 8009c48:	0092      	lsls	r2, r2, #2
 8009c4a:	3a04      	subs	r2, #4
 8009c4c:	3501      	adds	r5, #1
 8009c4e:	42ae      	cmp	r6, r5
 8009c50:	bf38      	it	cc
 8009c52:	2200      	movcc	r2, #0
 8009c54:	18a3      	adds	r3, r4, r2
 8009c56:	50a7      	str	r7, [r4, r2]
 8009c58:	b107      	cbz	r7, 8009c5c <rshift+0x68>
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	1b1a      	subs	r2, r3, r4
 8009c5e:	42a3      	cmp	r3, r4
 8009c60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c64:	bf08      	it	eq
 8009c66:	2300      	moveq	r3, #0
 8009c68:	6102      	str	r2, [r0, #16]
 8009c6a:	bf08      	it	eq
 8009c6c:	6143      	streq	r3, [r0, #20]
 8009c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c72:	f8dc c000 	ldr.w	ip, [ip]
 8009c76:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c7a:	ea4c 0707 	orr.w	r7, ip, r7
 8009c7e:	f849 7b04 	str.w	r7, [r9], #4
 8009c82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c86:	40cf      	lsrs	r7, r1
 8009c88:	e7da      	b.n	8009c40 <rshift+0x4c>
 8009c8a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c8e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c92:	e7c3      	b.n	8009c1c <rshift+0x28>
 8009c94:	4623      	mov	r3, r4
 8009c96:	e7e1      	b.n	8009c5c <rshift+0x68>

08009c98 <__hexdig_fun>:
 8009c98:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	d802      	bhi.n	8009ca6 <__hexdig_fun+0xe>
 8009ca0:	3820      	subs	r0, #32
 8009ca2:	b2c0      	uxtb	r0, r0
 8009ca4:	4770      	bx	lr
 8009ca6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	d801      	bhi.n	8009cb2 <__hexdig_fun+0x1a>
 8009cae:	3847      	subs	r0, #71	@ 0x47
 8009cb0:	e7f7      	b.n	8009ca2 <__hexdig_fun+0xa>
 8009cb2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009cb6:	2b05      	cmp	r3, #5
 8009cb8:	d801      	bhi.n	8009cbe <__hexdig_fun+0x26>
 8009cba:	3827      	subs	r0, #39	@ 0x27
 8009cbc:	e7f1      	b.n	8009ca2 <__hexdig_fun+0xa>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	4770      	bx	lr
	...

08009cc4 <__gethex>:
 8009cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	468a      	mov	sl, r1
 8009ccc:	9302      	str	r3, [sp, #8]
 8009cce:	680b      	ldr	r3, [r1, #0]
 8009cd0:	9001      	str	r0, [sp, #4]
 8009cd2:	4690      	mov	r8, r2
 8009cd4:	1c9c      	adds	r4, r3, #2
 8009cd6:	46a1      	mov	r9, r4
 8009cd8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009cdc:	2830      	cmp	r0, #48	@ 0x30
 8009cde:	d0fa      	beq.n	8009cd6 <__gethex+0x12>
 8009ce0:	eba9 0303 	sub.w	r3, r9, r3
 8009ce4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ce8:	f7ff ffd6 	bl	8009c98 <__hexdig_fun>
 8009cec:	4605      	mov	r5, r0
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d168      	bne.n	8009dc4 <__gethex+0x100>
 8009cf2:	49a0      	ldr	r1, [pc, #640]	@ (8009f74 <__gethex+0x2b0>)
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	4648      	mov	r0, r9
 8009cf8:	f7fc fe65 	bl	80069c6 <strncmp>
 8009cfc:	4607      	mov	r7, r0
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d167      	bne.n	8009dd2 <__gethex+0x10e>
 8009d02:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009d06:	4626      	mov	r6, r4
 8009d08:	f7ff ffc6 	bl	8009c98 <__hexdig_fun>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d062      	beq.n	8009dd6 <__gethex+0x112>
 8009d10:	4623      	mov	r3, r4
 8009d12:	7818      	ldrb	r0, [r3, #0]
 8009d14:	2830      	cmp	r0, #48	@ 0x30
 8009d16:	4699      	mov	r9, r3
 8009d18:	f103 0301 	add.w	r3, r3, #1
 8009d1c:	d0f9      	beq.n	8009d12 <__gethex+0x4e>
 8009d1e:	f7ff ffbb 	bl	8009c98 <__hexdig_fun>
 8009d22:	fab0 f580 	clz	r5, r0
 8009d26:	096d      	lsrs	r5, r5, #5
 8009d28:	f04f 0b01 	mov.w	fp, #1
 8009d2c:	464a      	mov	r2, r9
 8009d2e:	4616      	mov	r6, r2
 8009d30:	3201      	adds	r2, #1
 8009d32:	7830      	ldrb	r0, [r6, #0]
 8009d34:	f7ff ffb0 	bl	8009c98 <__hexdig_fun>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	d1f8      	bne.n	8009d2e <__gethex+0x6a>
 8009d3c:	498d      	ldr	r1, [pc, #564]	@ (8009f74 <__gethex+0x2b0>)
 8009d3e:	2201      	movs	r2, #1
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7fc fe40 	bl	80069c6 <strncmp>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d13f      	bne.n	8009dca <__gethex+0x106>
 8009d4a:	b944      	cbnz	r4, 8009d5e <__gethex+0x9a>
 8009d4c:	1c74      	adds	r4, r6, #1
 8009d4e:	4622      	mov	r2, r4
 8009d50:	4616      	mov	r6, r2
 8009d52:	3201      	adds	r2, #1
 8009d54:	7830      	ldrb	r0, [r6, #0]
 8009d56:	f7ff ff9f 	bl	8009c98 <__hexdig_fun>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d1f8      	bne.n	8009d50 <__gethex+0x8c>
 8009d5e:	1ba4      	subs	r4, r4, r6
 8009d60:	00a7      	lsls	r7, r4, #2
 8009d62:	7833      	ldrb	r3, [r6, #0]
 8009d64:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009d68:	2b50      	cmp	r3, #80	@ 0x50
 8009d6a:	d13e      	bne.n	8009dea <__gethex+0x126>
 8009d6c:	7873      	ldrb	r3, [r6, #1]
 8009d6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009d70:	d033      	beq.n	8009dda <__gethex+0x116>
 8009d72:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d74:	d034      	beq.n	8009de0 <__gethex+0x11c>
 8009d76:	1c71      	adds	r1, r6, #1
 8009d78:	2400      	movs	r4, #0
 8009d7a:	7808      	ldrb	r0, [r1, #0]
 8009d7c:	f7ff ff8c 	bl	8009c98 <__hexdig_fun>
 8009d80:	1e43      	subs	r3, r0, #1
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b18      	cmp	r3, #24
 8009d86:	d830      	bhi.n	8009dea <__gethex+0x126>
 8009d88:	f1a0 0210 	sub.w	r2, r0, #16
 8009d8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d90:	f7ff ff82 	bl	8009c98 <__hexdig_fun>
 8009d94:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d98:	fa5f fc8c 	uxtb.w	ip, ip
 8009d9c:	f1bc 0f18 	cmp.w	ip, #24
 8009da0:	f04f 030a 	mov.w	r3, #10
 8009da4:	d91e      	bls.n	8009de4 <__gethex+0x120>
 8009da6:	b104      	cbz	r4, 8009daa <__gethex+0xe6>
 8009da8:	4252      	negs	r2, r2
 8009daa:	4417      	add	r7, r2
 8009dac:	f8ca 1000 	str.w	r1, [sl]
 8009db0:	b1ed      	cbz	r5, 8009dee <__gethex+0x12a>
 8009db2:	f1bb 0f00 	cmp.w	fp, #0
 8009db6:	bf0c      	ite	eq
 8009db8:	2506      	moveq	r5, #6
 8009dba:	2500      	movne	r5, #0
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	b005      	add	sp, #20
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	2500      	movs	r5, #0
 8009dc6:	462c      	mov	r4, r5
 8009dc8:	e7b0      	b.n	8009d2c <__gethex+0x68>
 8009dca:	2c00      	cmp	r4, #0
 8009dcc:	d1c7      	bne.n	8009d5e <__gethex+0x9a>
 8009dce:	4627      	mov	r7, r4
 8009dd0:	e7c7      	b.n	8009d62 <__gethex+0x9e>
 8009dd2:	464e      	mov	r6, r9
 8009dd4:	462f      	mov	r7, r5
 8009dd6:	2501      	movs	r5, #1
 8009dd8:	e7c3      	b.n	8009d62 <__gethex+0x9e>
 8009dda:	2400      	movs	r4, #0
 8009ddc:	1cb1      	adds	r1, r6, #2
 8009dde:	e7cc      	b.n	8009d7a <__gethex+0xb6>
 8009de0:	2401      	movs	r4, #1
 8009de2:	e7fb      	b.n	8009ddc <__gethex+0x118>
 8009de4:	fb03 0002 	mla	r0, r3, r2, r0
 8009de8:	e7ce      	b.n	8009d88 <__gethex+0xc4>
 8009dea:	4631      	mov	r1, r6
 8009dec:	e7de      	b.n	8009dac <__gethex+0xe8>
 8009dee:	eba6 0309 	sub.w	r3, r6, r9
 8009df2:	3b01      	subs	r3, #1
 8009df4:	4629      	mov	r1, r5
 8009df6:	2b07      	cmp	r3, #7
 8009df8:	dc0a      	bgt.n	8009e10 <__gethex+0x14c>
 8009dfa:	9801      	ldr	r0, [sp, #4]
 8009dfc:	f7fd fdc0 	bl	8007980 <_Balloc>
 8009e00:	4604      	mov	r4, r0
 8009e02:	b940      	cbnz	r0, 8009e16 <__gethex+0x152>
 8009e04:	4b5c      	ldr	r3, [pc, #368]	@ (8009f78 <__gethex+0x2b4>)
 8009e06:	4602      	mov	r2, r0
 8009e08:	21e4      	movs	r1, #228	@ 0xe4
 8009e0a:	485c      	ldr	r0, [pc, #368]	@ (8009f7c <__gethex+0x2b8>)
 8009e0c:	f7ff fec0 	bl	8009b90 <__assert_func>
 8009e10:	3101      	adds	r1, #1
 8009e12:	105b      	asrs	r3, r3, #1
 8009e14:	e7ef      	b.n	8009df6 <__gethex+0x132>
 8009e16:	f100 0a14 	add.w	sl, r0, #20
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4655      	mov	r5, sl
 8009e1e:	469b      	mov	fp, r3
 8009e20:	45b1      	cmp	r9, r6
 8009e22:	d337      	bcc.n	8009e94 <__gethex+0x1d0>
 8009e24:	f845 bb04 	str.w	fp, [r5], #4
 8009e28:	eba5 050a 	sub.w	r5, r5, sl
 8009e2c:	10ad      	asrs	r5, r5, #2
 8009e2e:	6125      	str	r5, [r4, #16]
 8009e30:	4658      	mov	r0, fp
 8009e32:	f7fd fe97 	bl	8007b64 <__hi0bits>
 8009e36:	016d      	lsls	r5, r5, #5
 8009e38:	f8d8 6000 	ldr.w	r6, [r8]
 8009e3c:	1a2d      	subs	r5, r5, r0
 8009e3e:	42b5      	cmp	r5, r6
 8009e40:	dd54      	ble.n	8009eec <__gethex+0x228>
 8009e42:	1bad      	subs	r5, r5, r6
 8009e44:	4629      	mov	r1, r5
 8009e46:	4620      	mov	r0, r4
 8009e48:	f7fe fa2b 	bl	80082a2 <__any_on>
 8009e4c:	4681      	mov	r9, r0
 8009e4e:	b178      	cbz	r0, 8009e70 <__gethex+0x1ac>
 8009e50:	1e6b      	subs	r3, r5, #1
 8009e52:	1159      	asrs	r1, r3, #5
 8009e54:	f003 021f 	and.w	r2, r3, #31
 8009e58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e5c:	f04f 0901 	mov.w	r9, #1
 8009e60:	fa09 f202 	lsl.w	r2, r9, r2
 8009e64:	420a      	tst	r2, r1
 8009e66:	d003      	beq.n	8009e70 <__gethex+0x1ac>
 8009e68:	454b      	cmp	r3, r9
 8009e6a:	dc36      	bgt.n	8009eda <__gethex+0x216>
 8009e6c:	f04f 0902 	mov.w	r9, #2
 8009e70:	4629      	mov	r1, r5
 8009e72:	4620      	mov	r0, r4
 8009e74:	f7ff febe 	bl	8009bf4 <rshift>
 8009e78:	442f      	add	r7, r5
 8009e7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e7e:	42bb      	cmp	r3, r7
 8009e80:	da42      	bge.n	8009f08 <__gethex+0x244>
 8009e82:	9801      	ldr	r0, [sp, #4]
 8009e84:	4621      	mov	r1, r4
 8009e86:	f7fd fdbb 	bl	8007a00 <_Bfree>
 8009e8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	25a3      	movs	r5, #163	@ 0xa3
 8009e92:	e793      	b.n	8009dbc <__gethex+0xf8>
 8009e94:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e98:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e9a:	d012      	beq.n	8009ec2 <__gethex+0x1fe>
 8009e9c:	2b20      	cmp	r3, #32
 8009e9e:	d104      	bne.n	8009eaa <__gethex+0x1e6>
 8009ea0:	f845 bb04 	str.w	fp, [r5], #4
 8009ea4:	f04f 0b00 	mov.w	fp, #0
 8009ea8:	465b      	mov	r3, fp
 8009eaa:	7830      	ldrb	r0, [r6, #0]
 8009eac:	9303      	str	r3, [sp, #12]
 8009eae:	f7ff fef3 	bl	8009c98 <__hexdig_fun>
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	f000 000f 	and.w	r0, r0, #15
 8009eb8:	4098      	lsls	r0, r3
 8009eba:	ea4b 0b00 	orr.w	fp, fp, r0
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	e7ae      	b.n	8009e20 <__gethex+0x15c>
 8009ec2:	45b1      	cmp	r9, r6
 8009ec4:	d8ea      	bhi.n	8009e9c <__gethex+0x1d8>
 8009ec6:	492b      	ldr	r1, [pc, #172]	@ (8009f74 <__gethex+0x2b0>)
 8009ec8:	9303      	str	r3, [sp, #12]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f7fc fd7a 	bl	80069c6 <strncmp>
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d1e1      	bne.n	8009e9c <__gethex+0x1d8>
 8009ed8:	e7a2      	b.n	8009e20 <__gethex+0x15c>
 8009eda:	1ea9      	subs	r1, r5, #2
 8009edc:	4620      	mov	r0, r4
 8009ede:	f7fe f9e0 	bl	80082a2 <__any_on>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	d0c2      	beq.n	8009e6c <__gethex+0x1a8>
 8009ee6:	f04f 0903 	mov.w	r9, #3
 8009eea:	e7c1      	b.n	8009e70 <__gethex+0x1ac>
 8009eec:	da09      	bge.n	8009f02 <__gethex+0x23e>
 8009eee:	1b75      	subs	r5, r6, r5
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	9801      	ldr	r0, [sp, #4]
 8009ef4:	462a      	mov	r2, r5
 8009ef6:	f7fd ff9b 	bl	8007e30 <__lshift>
 8009efa:	1b7f      	subs	r7, r7, r5
 8009efc:	4604      	mov	r4, r0
 8009efe:	f100 0a14 	add.w	sl, r0, #20
 8009f02:	f04f 0900 	mov.w	r9, #0
 8009f06:	e7b8      	b.n	8009e7a <__gethex+0x1b6>
 8009f08:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f0c:	42bd      	cmp	r5, r7
 8009f0e:	dd6f      	ble.n	8009ff0 <__gethex+0x32c>
 8009f10:	1bed      	subs	r5, r5, r7
 8009f12:	42ae      	cmp	r6, r5
 8009f14:	dc34      	bgt.n	8009f80 <__gethex+0x2bc>
 8009f16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d022      	beq.n	8009f64 <__gethex+0x2a0>
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d024      	beq.n	8009f6c <__gethex+0x2a8>
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d115      	bne.n	8009f52 <__gethex+0x28e>
 8009f26:	42ae      	cmp	r6, r5
 8009f28:	d113      	bne.n	8009f52 <__gethex+0x28e>
 8009f2a:	2e01      	cmp	r6, #1
 8009f2c:	d10b      	bne.n	8009f46 <__gethex+0x282>
 8009f2e:	9a02      	ldr	r2, [sp, #8]
 8009f30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	2301      	movs	r3, #1
 8009f38:	6123      	str	r3, [r4, #16]
 8009f3a:	f8ca 3000 	str.w	r3, [sl]
 8009f3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f40:	2562      	movs	r5, #98	@ 0x62
 8009f42:	601c      	str	r4, [r3, #0]
 8009f44:	e73a      	b.n	8009dbc <__gethex+0xf8>
 8009f46:	1e71      	subs	r1, r6, #1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7fe f9aa 	bl	80082a2 <__any_on>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d1ed      	bne.n	8009f2e <__gethex+0x26a>
 8009f52:	9801      	ldr	r0, [sp, #4]
 8009f54:	4621      	mov	r1, r4
 8009f56:	f7fd fd53 	bl	8007a00 <_Bfree>
 8009f5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	2550      	movs	r5, #80	@ 0x50
 8009f62:	e72b      	b.n	8009dbc <__gethex+0xf8>
 8009f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1f3      	bne.n	8009f52 <__gethex+0x28e>
 8009f6a:	e7e0      	b.n	8009f2e <__gethex+0x26a>
 8009f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1dd      	bne.n	8009f2e <__gethex+0x26a>
 8009f72:	e7ee      	b.n	8009f52 <__gethex+0x28e>
 8009f74:	0800af00 	.word	0x0800af00
 8009f78:	0800ad93 	.word	0x0800ad93
 8009f7c:	0800b0c9 	.word	0x0800b0c9
 8009f80:	1e6f      	subs	r7, r5, #1
 8009f82:	f1b9 0f00 	cmp.w	r9, #0
 8009f86:	d130      	bne.n	8009fea <__gethex+0x326>
 8009f88:	b127      	cbz	r7, 8009f94 <__gethex+0x2d0>
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f7fe f988 	bl	80082a2 <__any_on>
 8009f92:	4681      	mov	r9, r0
 8009f94:	117a      	asrs	r2, r7, #5
 8009f96:	2301      	movs	r3, #1
 8009f98:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f9c:	f007 071f 	and.w	r7, r7, #31
 8009fa0:	40bb      	lsls	r3, r7
 8009fa2:	4213      	tst	r3, r2
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	bf18      	it	ne
 8009faa:	f049 0902 	orrne.w	r9, r9, #2
 8009fae:	f7ff fe21 	bl	8009bf4 <rshift>
 8009fb2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009fb6:	1b76      	subs	r6, r6, r5
 8009fb8:	2502      	movs	r5, #2
 8009fba:	f1b9 0f00 	cmp.w	r9, #0
 8009fbe:	d047      	beq.n	800a050 <__gethex+0x38c>
 8009fc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d015      	beq.n	8009ff4 <__gethex+0x330>
 8009fc8:	2b03      	cmp	r3, #3
 8009fca:	d017      	beq.n	8009ffc <__gethex+0x338>
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d109      	bne.n	8009fe4 <__gethex+0x320>
 8009fd0:	f019 0f02 	tst.w	r9, #2
 8009fd4:	d006      	beq.n	8009fe4 <__gethex+0x320>
 8009fd6:	f8da 3000 	ldr.w	r3, [sl]
 8009fda:	ea49 0903 	orr.w	r9, r9, r3
 8009fde:	f019 0f01 	tst.w	r9, #1
 8009fe2:	d10e      	bne.n	800a002 <__gethex+0x33e>
 8009fe4:	f045 0510 	orr.w	r5, r5, #16
 8009fe8:	e032      	b.n	800a050 <__gethex+0x38c>
 8009fea:	f04f 0901 	mov.w	r9, #1
 8009fee:	e7d1      	b.n	8009f94 <__gethex+0x2d0>
 8009ff0:	2501      	movs	r5, #1
 8009ff2:	e7e2      	b.n	8009fba <__gethex+0x2f6>
 8009ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff6:	f1c3 0301 	rsb	r3, r3, #1
 8009ffa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0f0      	beq.n	8009fe4 <__gethex+0x320>
 800a002:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a006:	f104 0314 	add.w	r3, r4, #20
 800a00a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a00e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a012:	f04f 0c00 	mov.w	ip, #0
 800a016:	4618      	mov	r0, r3
 800a018:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a020:	d01b      	beq.n	800a05a <__gethex+0x396>
 800a022:	3201      	adds	r2, #1
 800a024:	6002      	str	r2, [r0, #0]
 800a026:	2d02      	cmp	r5, #2
 800a028:	f104 0314 	add.w	r3, r4, #20
 800a02c:	d13c      	bne.n	800a0a8 <__gethex+0x3e4>
 800a02e:	f8d8 2000 	ldr.w	r2, [r8]
 800a032:	3a01      	subs	r2, #1
 800a034:	42b2      	cmp	r2, r6
 800a036:	d109      	bne.n	800a04c <__gethex+0x388>
 800a038:	1171      	asrs	r1, r6, #5
 800a03a:	2201      	movs	r2, #1
 800a03c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a040:	f006 061f 	and.w	r6, r6, #31
 800a044:	fa02 f606 	lsl.w	r6, r2, r6
 800a048:	421e      	tst	r6, r3
 800a04a:	d13a      	bne.n	800a0c2 <__gethex+0x3fe>
 800a04c:	f045 0520 	orr.w	r5, r5, #32
 800a050:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a052:	601c      	str	r4, [r3, #0]
 800a054:	9b02      	ldr	r3, [sp, #8]
 800a056:	601f      	str	r7, [r3, #0]
 800a058:	e6b0      	b.n	8009dbc <__gethex+0xf8>
 800a05a:	4299      	cmp	r1, r3
 800a05c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a060:	d8d9      	bhi.n	800a016 <__gethex+0x352>
 800a062:	68a3      	ldr	r3, [r4, #8]
 800a064:	459b      	cmp	fp, r3
 800a066:	db17      	blt.n	800a098 <__gethex+0x3d4>
 800a068:	6861      	ldr	r1, [r4, #4]
 800a06a:	9801      	ldr	r0, [sp, #4]
 800a06c:	3101      	adds	r1, #1
 800a06e:	f7fd fc87 	bl	8007980 <_Balloc>
 800a072:	4681      	mov	r9, r0
 800a074:	b918      	cbnz	r0, 800a07e <__gethex+0x3ba>
 800a076:	4b1a      	ldr	r3, [pc, #104]	@ (800a0e0 <__gethex+0x41c>)
 800a078:	4602      	mov	r2, r0
 800a07a:	2184      	movs	r1, #132	@ 0x84
 800a07c:	e6c5      	b.n	8009e0a <__gethex+0x146>
 800a07e:	6922      	ldr	r2, [r4, #16]
 800a080:	3202      	adds	r2, #2
 800a082:	f104 010c 	add.w	r1, r4, #12
 800a086:	0092      	lsls	r2, r2, #2
 800a088:	300c      	adds	r0, #12
 800a08a:	f7ff fd6b 	bl	8009b64 <memcpy>
 800a08e:	4621      	mov	r1, r4
 800a090:	9801      	ldr	r0, [sp, #4]
 800a092:	f7fd fcb5 	bl	8007a00 <_Bfree>
 800a096:	464c      	mov	r4, r9
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0a0:	6122      	str	r2, [r4, #16]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	615a      	str	r2, [r3, #20]
 800a0a6:	e7be      	b.n	800a026 <__gethex+0x362>
 800a0a8:	6922      	ldr	r2, [r4, #16]
 800a0aa:	455a      	cmp	r2, fp
 800a0ac:	dd0b      	ble.n	800a0c6 <__gethex+0x402>
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f7ff fd9f 	bl	8009bf4 <rshift>
 800a0b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ba:	3701      	adds	r7, #1
 800a0bc:	42bb      	cmp	r3, r7
 800a0be:	f6ff aee0 	blt.w	8009e82 <__gethex+0x1be>
 800a0c2:	2501      	movs	r5, #1
 800a0c4:	e7c2      	b.n	800a04c <__gethex+0x388>
 800a0c6:	f016 061f 	ands.w	r6, r6, #31
 800a0ca:	d0fa      	beq.n	800a0c2 <__gethex+0x3fe>
 800a0cc:	4453      	add	r3, sl
 800a0ce:	f1c6 0620 	rsb	r6, r6, #32
 800a0d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a0d6:	f7fd fd45 	bl	8007b64 <__hi0bits>
 800a0da:	42b0      	cmp	r0, r6
 800a0dc:	dbe7      	blt.n	800a0ae <__gethex+0x3ea>
 800a0de:	e7f0      	b.n	800a0c2 <__gethex+0x3fe>
 800a0e0:	0800ad93 	.word	0x0800ad93

0800a0e4 <L_shift>:
 800a0e4:	f1c2 0208 	rsb	r2, r2, #8
 800a0e8:	0092      	lsls	r2, r2, #2
 800a0ea:	b570      	push	{r4, r5, r6, lr}
 800a0ec:	f1c2 0620 	rsb	r6, r2, #32
 800a0f0:	6843      	ldr	r3, [r0, #4]
 800a0f2:	6804      	ldr	r4, [r0, #0]
 800a0f4:	fa03 f506 	lsl.w	r5, r3, r6
 800a0f8:	432c      	orrs	r4, r5
 800a0fa:	40d3      	lsrs	r3, r2
 800a0fc:	6004      	str	r4, [r0, #0]
 800a0fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800a102:	4288      	cmp	r0, r1
 800a104:	d3f4      	bcc.n	800a0f0 <L_shift+0xc>
 800a106:	bd70      	pop	{r4, r5, r6, pc}

0800a108 <__match>:
 800a108:	b530      	push	{r4, r5, lr}
 800a10a:	6803      	ldr	r3, [r0, #0]
 800a10c:	3301      	adds	r3, #1
 800a10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a112:	b914      	cbnz	r4, 800a11a <__match+0x12>
 800a114:	6003      	str	r3, [r0, #0]
 800a116:	2001      	movs	r0, #1
 800a118:	bd30      	pop	{r4, r5, pc}
 800a11a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a11e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a122:	2d19      	cmp	r5, #25
 800a124:	bf98      	it	ls
 800a126:	3220      	addls	r2, #32
 800a128:	42a2      	cmp	r2, r4
 800a12a:	d0f0      	beq.n	800a10e <__match+0x6>
 800a12c:	2000      	movs	r0, #0
 800a12e:	e7f3      	b.n	800a118 <__match+0x10>

0800a130 <__hexnan>:
 800a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	680b      	ldr	r3, [r1, #0]
 800a136:	6801      	ldr	r1, [r0, #0]
 800a138:	115e      	asrs	r6, r3, #5
 800a13a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a13e:	f013 031f 	ands.w	r3, r3, #31
 800a142:	b087      	sub	sp, #28
 800a144:	bf18      	it	ne
 800a146:	3604      	addne	r6, #4
 800a148:	2500      	movs	r5, #0
 800a14a:	1f37      	subs	r7, r6, #4
 800a14c:	4682      	mov	sl, r0
 800a14e:	4690      	mov	r8, r2
 800a150:	9301      	str	r3, [sp, #4]
 800a152:	f846 5c04 	str.w	r5, [r6, #-4]
 800a156:	46b9      	mov	r9, r7
 800a158:	463c      	mov	r4, r7
 800a15a:	9502      	str	r5, [sp, #8]
 800a15c:	46ab      	mov	fp, r5
 800a15e:	784a      	ldrb	r2, [r1, #1]
 800a160:	1c4b      	adds	r3, r1, #1
 800a162:	9303      	str	r3, [sp, #12]
 800a164:	b342      	cbz	r2, 800a1b8 <__hexnan+0x88>
 800a166:	4610      	mov	r0, r2
 800a168:	9105      	str	r1, [sp, #20]
 800a16a:	9204      	str	r2, [sp, #16]
 800a16c:	f7ff fd94 	bl	8009c98 <__hexdig_fun>
 800a170:	2800      	cmp	r0, #0
 800a172:	d151      	bne.n	800a218 <__hexnan+0xe8>
 800a174:	9a04      	ldr	r2, [sp, #16]
 800a176:	9905      	ldr	r1, [sp, #20]
 800a178:	2a20      	cmp	r2, #32
 800a17a:	d818      	bhi.n	800a1ae <__hexnan+0x7e>
 800a17c:	9b02      	ldr	r3, [sp, #8]
 800a17e:	459b      	cmp	fp, r3
 800a180:	dd13      	ble.n	800a1aa <__hexnan+0x7a>
 800a182:	454c      	cmp	r4, r9
 800a184:	d206      	bcs.n	800a194 <__hexnan+0x64>
 800a186:	2d07      	cmp	r5, #7
 800a188:	dc04      	bgt.n	800a194 <__hexnan+0x64>
 800a18a:	462a      	mov	r2, r5
 800a18c:	4649      	mov	r1, r9
 800a18e:	4620      	mov	r0, r4
 800a190:	f7ff ffa8 	bl	800a0e4 <L_shift>
 800a194:	4544      	cmp	r4, r8
 800a196:	d952      	bls.n	800a23e <__hexnan+0x10e>
 800a198:	2300      	movs	r3, #0
 800a19a:	f1a4 0904 	sub.w	r9, r4, #4
 800a19e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1a2:	f8cd b008 	str.w	fp, [sp, #8]
 800a1a6:	464c      	mov	r4, r9
 800a1a8:	461d      	mov	r5, r3
 800a1aa:	9903      	ldr	r1, [sp, #12]
 800a1ac:	e7d7      	b.n	800a15e <__hexnan+0x2e>
 800a1ae:	2a29      	cmp	r2, #41	@ 0x29
 800a1b0:	d157      	bne.n	800a262 <__hexnan+0x132>
 800a1b2:	3102      	adds	r1, #2
 800a1b4:	f8ca 1000 	str.w	r1, [sl]
 800a1b8:	f1bb 0f00 	cmp.w	fp, #0
 800a1bc:	d051      	beq.n	800a262 <__hexnan+0x132>
 800a1be:	454c      	cmp	r4, r9
 800a1c0:	d206      	bcs.n	800a1d0 <__hexnan+0xa0>
 800a1c2:	2d07      	cmp	r5, #7
 800a1c4:	dc04      	bgt.n	800a1d0 <__hexnan+0xa0>
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f7ff ff8a 	bl	800a0e4 <L_shift>
 800a1d0:	4544      	cmp	r4, r8
 800a1d2:	d936      	bls.n	800a242 <__hexnan+0x112>
 800a1d4:	f1a8 0204 	sub.w	r2, r8, #4
 800a1d8:	4623      	mov	r3, r4
 800a1da:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1de:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1e2:	429f      	cmp	r7, r3
 800a1e4:	d2f9      	bcs.n	800a1da <__hexnan+0xaa>
 800a1e6:	1b3b      	subs	r3, r7, r4
 800a1e8:	f023 0303 	bic.w	r3, r3, #3
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	3401      	adds	r4, #1
 800a1f0:	3e03      	subs	r6, #3
 800a1f2:	42b4      	cmp	r4, r6
 800a1f4:	bf88      	it	hi
 800a1f6:	2304      	movhi	r3, #4
 800a1f8:	4443      	add	r3, r8
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f843 2b04 	str.w	r2, [r3], #4
 800a200:	429f      	cmp	r7, r3
 800a202:	d2fb      	bcs.n	800a1fc <__hexnan+0xcc>
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	b91b      	cbnz	r3, 800a210 <__hexnan+0xe0>
 800a208:	4547      	cmp	r7, r8
 800a20a:	d128      	bne.n	800a25e <__hexnan+0x12e>
 800a20c:	2301      	movs	r3, #1
 800a20e:	603b      	str	r3, [r7, #0]
 800a210:	2005      	movs	r0, #5
 800a212:	b007      	add	sp, #28
 800a214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a218:	3501      	adds	r5, #1
 800a21a:	2d08      	cmp	r5, #8
 800a21c:	f10b 0b01 	add.w	fp, fp, #1
 800a220:	dd06      	ble.n	800a230 <__hexnan+0x100>
 800a222:	4544      	cmp	r4, r8
 800a224:	d9c1      	bls.n	800a1aa <__hexnan+0x7a>
 800a226:	2300      	movs	r3, #0
 800a228:	f844 3c04 	str.w	r3, [r4, #-4]
 800a22c:	2501      	movs	r5, #1
 800a22e:	3c04      	subs	r4, #4
 800a230:	6822      	ldr	r2, [r4, #0]
 800a232:	f000 000f 	and.w	r0, r0, #15
 800a236:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a23a:	6020      	str	r0, [r4, #0]
 800a23c:	e7b5      	b.n	800a1aa <__hexnan+0x7a>
 800a23e:	2508      	movs	r5, #8
 800a240:	e7b3      	b.n	800a1aa <__hexnan+0x7a>
 800a242:	9b01      	ldr	r3, [sp, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0dd      	beq.n	800a204 <__hexnan+0xd4>
 800a248:	f1c3 0320 	rsb	r3, r3, #32
 800a24c:	f04f 32ff 	mov.w	r2, #4294967295
 800a250:	40da      	lsrs	r2, r3
 800a252:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a256:	4013      	ands	r3, r2
 800a258:	f846 3c04 	str.w	r3, [r6, #-4]
 800a25c:	e7d2      	b.n	800a204 <__hexnan+0xd4>
 800a25e:	3f04      	subs	r7, #4
 800a260:	e7d0      	b.n	800a204 <__hexnan+0xd4>
 800a262:	2004      	movs	r0, #4
 800a264:	e7d5      	b.n	800a212 <__hexnan+0xe2>

0800a266 <__ascii_mbtowc>:
 800a266:	b082      	sub	sp, #8
 800a268:	b901      	cbnz	r1, 800a26c <__ascii_mbtowc+0x6>
 800a26a:	a901      	add	r1, sp, #4
 800a26c:	b142      	cbz	r2, 800a280 <__ascii_mbtowc+0x1a>
 800a26e:	b14b      	cbz	r3, 800a284 <__ascii_mbtowc+0x1e>
 800a270:	7813      	ldrb	r3, [r2, #0]
 800a272:	600b      	str	r3, [r1, #0]
 800a274:	7812      	ldrb	r2, [r2, #0]
 800a276:	1e10      	subs	r0, r2, #0
 800a278:	bf18      	it	ne
 800a27a:	2001      	movne	r0, #1
 800a27c:	b002      	add	sp, #8
 800a27e:	4770      	bx	lr
 800a280:	4610      	mov	r0, r2
 800a282:	e7fb      	b.n	800a27c <__ascii_mbtowc+0x16>
 800a284:	f06f 0001 	mvn.w	r0, #1
 800a288:	e7f8      	b.n	800a27c <__ascii_mbtowc+0x16>

0800a28a <_realloc_r>:
 800a28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a28e:	4680      	mov	r8, r0
 800a290:	4615      	mov	r5, r2
 800a292:	460c      	mov	r4, r1
 800a294:	b921      	cbnz	r1, 800a2a0 <_realloc_r+0x16>
 800a296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a29a:	4611      	mov	r1, r2
 800a29c:	f7fd bae4 	b.w	8007868 <_malloc_r>
 800a2a0:	b92a      	cbnz	r2, 800a2ae <_realloc_r+0x24>
 800a2a2:	f7fd fa6d 	bl	8007780 <_free_r>
 800a2a6:	2400      	movs	r4, #0
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ae:	f000 f8b2 	bl	800a416 <_malloc_usable_size_r>
 800a2b2:	4285      	cmp	r5, r0
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	d802      	bhi.n	800a2be <_realloc_r+0x34>
 800a2b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a2bc:	d8f4      	bhi.n	800a2a8 <_realloc_r+0x1e>
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	f7fd fad1 	bl	8007868 <_malloc_r>
 800a2c6:	4607      	mov	r7, r0
 800a2c8:	2800      	cmp	r0, #0
 800a2ca:	d0ec      	beq.n	800a2a6 <_realloc_r+0x1c>
 800a2cc:	42b5      	cmp	r5, r6
 800a2ce:	462a      	mov	r2, r5
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	bf28      	it	cs
 800a2d4:	4632      	movcs	r2, r6
 800a2d6:	f7ff fc45 	bl	8009b64 <memcpy>
 800a2da:	4621      	mov	r1, r4
 800a2dc:	4640      	mov	r0, r8
 800a2de:	f7fd fa4f 	bl	8007780 <_free_r>
 800a2e2:	463c      	mov	r4, r7
 800a2e4:	e7e0      	b.n	800a2a8 <_realloc_r+0x1e>
	...

0800a2e8 <_strtoul_l.constprop.0>:
 800a2e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2ec:	4e34      	ldr	r6, [pc, #208]	@ (800a3c0 <_strtoul_l.constprop.0+0xd8>)
 800a2ee:	4686      	mov	lr, r0
 800a2f0:	460d      	mov	r5, r1
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2f8:	5d37      	ldrb	r7, [r6, r4]
 800a2fa:	f017 0708 	ands.w	r7, r7, #8
 800a2fe:	d1f8      	bne.n	800a2f2 <_strtoul_l.constprop.0+0xa>
 800a300:	2c2d      	cmp	r4, #45	@ 0x2d
 800a302:	d12f      	bne.n	800a364 <_strtoul_l.constprop.0+0x7c>
 800a304:	782c      	ldrb	r4, [r5, #0]
 800a306:	2701      	movs	r7, #1
 800a308:	1c85      	adds	r5, r0, #2
 800a30a:	f033 0010 	bics.w	r0, r3, #16
 800a30e:	d109      	bne.n	800a324 <_strtoul_l.constprop.0+0x3c>
 800a310:	2c30      	cmp	r4, #48	@ 0x30
 800a312:	d12c      	bne.n	800a36e <_strtoul_l.constprop.0+0x86>
 800a314:	7828      	ldrb	r0, [r5, #0]
 800a316:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a31a:	2858      	cmp	r0, #88	@ 0x58
 800a31c:	d127      	bne.n	800a36e <_strtoul_l.constprop.0+0x86>
 800a31e:	786c      	ldrb	r4, [r5, #1]
 800a320:	2310      	movs	r3, #16
 800a322:	3502      	adds	r5, #2
 800a324:	f04f 38ff 	mov.w	r8, #4294967295
 800a328:	2600      	movs	r6, #0
 800a32a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a32e:	fb03 f908 	mul.w	r9, r3, r8
 800a332:	ea6f 0909 	mvn.w	r9, r9
 800a336:	4630      	mov	r0, r6
 800a338:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a33c:	f1bc 0f09 	cmp.w	ip, #9
 800a340:	d81c      	bhi.n	800a37c <_strtoul_l.constprop.0+0x94>
 800a342:	4664      	mov	r4, ip
 800a344:	42a3      	cmp	r3, r4
 800a346:	dd2a      	ble.n	800a39e <_strtoul_l.constprop.0+0xb6>
 800a348:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a34c:	d007      	beq.n	800a35e <_strtoul_l.constprop.0+0x76>
 800a34e:	4580      	cmp	r8, r0
 800a350:	d322      	bcc.n	800a398 <_strtoul_l.constprop.0+0xb0>
 800a352:	d101      	bne.n	800a358 <_strtoul_l.constprop.0+0x70>
 800a354:	45a1      	cmp	r9, r4
 800a356:	db1f      	blt.n	800a398 <_strtoul_l.constprop.0+0xb0>
 800a358:	fb00 4003 	mla	r0, r0, r3, r4
 800a35c:	2601      	movs	r6, #1
 800a35e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a362:	e7e9      	b.n	800a338 <_strtoul_l.constprop.0+0x50>
 800a364:	2c2b      	cmp	r4, #43	@ 0x2b
 800a366:	bf04      	itt	eq
 800a368:	782c      	ldrbeq	r4, [r5, #0]
 800a36a:	1c85      	addeq	r5, r0, #2
 800a36c:	e7cd      	b.n	800a30a <_strtoul_l.constprop.0+0x22>
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1d8      	bne.n	800a324 <_strtoul_l.constprop.0+0x3c>
 800a372:	2c30      	cmp	r4, #48	@ 0x30
 800a374:	bf0c      	ite	eq
 800a376:	2308      	moveq	r3, #8
 800a378:	230a      	movne	r3, #10
 800a37a:	e7d3      	b.n	800a324 <_strtoul_l.constprop.0+0x3c>
 800a37c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a380:	f1bc 0f19 	cmp.w	ip, #25
 800a384:	d801      	bhi.n	800a38a <_strtoul_l.constprop.0+0xa2>
 800a386:	3c37      	subs	r4, #55	@ 0x37
 800a388:	e7dc      	b.n	800a344 <_strtoul_l.constprop.0+0x5c>
 800a38a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a38e:	f1bc 0f19 	cmp.w	ip, #25
 800a392:	d804      	bhi.n	800a39e <_strtoul_l.constprop.0+0xb6>
 800a394:	3c57      	subs	r4, #87	@ 0x57
 800a396:	e7d5      	b.n	800a344 <_strtoul_l.constprop.0+0x5c>
 800a398:	f04f 36ff 	mov.w	r6, #4294967295
 800a39c:	e7df      	b.n	800a35e <_strtoul_l.constprop.0+0x76>
 800a39e:	1c73      	adds	r3, r6, #1
 800a3a0:	d106      	bne.n	800a3b0 <_strtoul_l.constprop.0+0xc8>
 800a3a2:	2322      	movs	r3, #34	@ 0x22
 800a3a4:	f8ce 3000 	str.w	r3, [lr]
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	b932      	cbnz	r2, 800a3ba <_strtoul_l.constprop.0+0xd2>
 800a3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3b0:	b107      	cbz	r7, 800a3b4 <_strtoul_l.constprop.0+0xcc>
 800a3b2:	4240      	negs	r0, r0
 800a3b4:	2a00      	cmp	r2, #0
 800a3b6:	d0f9      	beq.n	800a3ac <_strtoul_l.constprop.0+0xc4>
 800a3b8:	b106      	cbz	r6, 800a3bc <_strtoul_l.constprop.0+0xd4>
 800a3ba:	1e69      	subs	r1, r5, #1
 800a3bc:	6011      	str	r1, [r2, #0]
 800a3be:	e7f5      	b.n	800a3ac <_strtoul_l.constprop.0+0xc4>
 800a3c0:	0800af59 	.word	0x0800af59

0800a3c4 <_strtoul_r>:
 800a3c4:	f7ff bf90 	b.w	800a2e8 <_strtoul_l.constprop.0>

0800a3c8 <__ascii_wctomb>:
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	b141      	cbz	r1, 800a3e0 <__ascii_wctomb+0x18>
 800a3ce:	2aff      	cmp	r2, #255	@ 0xff
 800a3d0:	d904      	bls.n	800a3dc <__ascii_wctomb+0x14>
 800a3d2:	228a      	movs	r2, #138	@ 0x8a
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	4770      	bx	lr
 800a3dc:	700a      	strb	r2, [r1, #0]
 800a3de:	2001      	movs	r0, #1
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <fiprintf>:
 800a3e4:	b40e      	push	{r1, r2, r3}
 800a3e6:	b503      	push	{r0, r1, lr}
 800a3e8:	4601      	mov	r1, r0
 800a3ea:	ab03      	add	r3, sp, #12
 800a3ec:	4805      	ldr	r0, [pc, #20]	@ (800a404 <fiprintf+0x20>)
 800a3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f2:	6800      	ldr	r0, [r0, #0]
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	f000 f83f 	bl	800a478 <_vfiprintf_r>
 800a3fa:	b002      	add	sp, #8
 800a3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a400:	b003      	add	sp, #12
 800a402:	4770      	bx	lr
 800a404:	2000003c 	.word	0x2000003c

0800a408 <abort>:
 800a408:	b508      	push	{r3, lr}
 800a40a:	2006      	movs	r0, #6
 800a40c:	f000 fa08 	bl	800a820 <raise>
 800a410:	2001      	movs	r0, #1
 800a412:	f7f7 fbef 	bl	8001bf4 <_exit>

0800a416 <_malloc_usable_size_r>:
 800a416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a41a:	1f18      	subs	r0, r3, #4
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	bfbc      	itt	lt
 800a420:	580b      	ldrlt	r3, [r1, r0]
 800a422:	18c0      	addlt	r0, r0, r3
 800a424:	4770      	bx	lr

0800a426 <__sfputc_r>:
 800a426:	6893      	ldr	r3, [r2, #8]
 800a428:	3b01      	subs	r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	b410      	push	{r4}
 800a42e:	6093      	str	r3, [r2, #8]
 800a430:	da08      	bge.n	800a444 <__sfputc_r+0x1e>
 800a432:	6994      	ldr	r4, [r2, #24]
 800a434:	42a3      	cmp	r3, r4
 800a436:	db01      	blt.n	800a43c <__sfputc_r+0x16>
 800a438:	290a      	cmp	r1, #10
 800a43a:	d103      	bne.n	800a444 <__sfputc_r+0x1e>
 800a43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a440:	f000 b932 	b.w	800a6a8 <__swbuf_r>
 800a444:	6813      	ldr	r3, [r2, #0]
 800a446:	1c58      	adds	r0, r3, #1
 800a448:	6010      	str	r0, [r2, #0]
 800a44a:	7019      	strb	r1, [r3, #0]
 800a44c:	4608      	mov	r0, r1
 800a44e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <__sfputs_r>:
 800a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a456:	4606      	mov	r6, r0
 800a458:	460f      	mov	r7, r1
 800a45a:	4614      	mov	r4, r2
 800a45c:	18d5      	adds	r5, r2, r3
 800a45e:	42ac      	cmp	r4, r5
 800a460:	d101      	bne.n	800a466 <__sfputs_r+0x12>
 800a462:	2000      	movs	r0, #0
 800a464:	e007      	b.n	800a476 <__sfputs_r+0x22>
 800a466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46a:	463a      	mov	r2, r7
 800a46c:	4630      	mov	r0, r6
 800a46e:	f7ff ffda 	bl	800a426 <__sfputc_r>
 800a472:	1c43      	adds	r3, r0, #1
 800a474:	d1f3      	bne.n	800a45e <__sfputs_r+0xa>
 800a476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a478 <_vfiprintf_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	460d      	mov	r5, r1
 800a47e:	b09d      	sub	sp, #116	@ 0x74
 800a480:	4614      	mov	r4, r2
 800a482:	4698      	mov	r8, r3
 800a484:	4606      	mov	r6, r0
 800a486:	b118      	cbz	r0, 800a490 <_vfiprintf_r+0x18>
 800a488:	6a03      	ldr	r3, [r0, #32]
 800a48a:	b90b      	cbnz	r3, 800a490 <_vfiprintf_r+0x18>
 800a48c:	f7fc f9ce 	bl	800682c <__sinit>
 800a490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a492:	07d9      	lsls	r1, r3, #31
 800a494:	d405      	bmi.n	800a4a2 <_vfiprintf_r+0x2a>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	059a      	lsls	r2, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_vfiprintf_r+0x2a>
 800a49c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a49e:	f7fc fb1a 	bl	8006ad6 <__retarget_lock_acquire_recursive>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	071b      	lsls	r3, r3, #28
 800a4a6:	d501      	bpl.n	800a4ac <_vfiprintf_r+0x34>
 800a4a8:	692b      	ldr	r3, [r5, #16]
 800a4aa:	b99b      	cbnz	r3, 800a4d4 <_vfiprintf_r+0x5c>
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f000 f938 	bl	800a724 <__swsetup_r>
 800a4b4:	b170      	cbz	r0, 800a4d4 <_vfiprintf_r+0x5c>
 800a4b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4b8:	07dc      	lsls	r4, r3, #31
 800a4ba:	d504      	bpl.n	800a4c6 <_vfiprintf_r+0x4e>
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c0:	b01d      	add	sp, #116	@ 0x74
 800a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	0598      	lsls	r0, r3, #22
 800a4ca:	d4f7      	bmi.n	800a4bc <_vfiprintf_r+0x44>
 800a4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4ce:	f7fc fb03 	bl	8006ad8 <__retarget_lock_release_recursive>
 800a4d2:	e7f3      	b.n	800a4bc <_vfiprintf_r+0x44>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4d8:	2320      	movs	r3, #32
 800a4da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a4de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4e2:	2330      	movs	r3, #48	@ 0x30
 800a4e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a694 <_vfiprintf_r+0x21c>
 800a4e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a4ec:	f04f 0901 	mov.w	r9, #1
 800a4f0:	4623      	mov	r3, r4
 800a4f2:	469a      	mov	sl, r3
 800a4f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4f8:	b10a      	cbz	r2, 800a4fe <_vfiprintf_r+0x86>
 800a4fa:	2a25      	cmp	r2, #37	@ 0x25
 800a4fc:	d1f9      	bne.n	800a4f2 <_vfiprintf_r+0x7a>
 800a4fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a502:	d00b      	beq.n	800a51c <_vfiprintf_r+0xa4>
 800a504:	465b      	mov	r3, fp
 800a506:	4622      	mov	r2, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7ff ffa2 	bl	800a454 <__sfputs_r>
 800a510:	3001      	adds	r0, #1
 800a512:	f000 80a7 	beq.w	800a664 <_vfiprintf_r+0x1ec>
 800a516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a518:	445a      	add	r2, fp
 800a51a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a51c:	f89a 3000 	ldrb.w	r3, [sl]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 809f 	beq.w	800a664 <_vfiprintf_r+0x1ec>
 800a526:	2300      	movs	r3, #0
 800a528:	f04f 32ff 	mov.w	r2, #4294967295
 800a52c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a530:	f10a 0a01 	add.w	sl, sl, #1
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	9307      	str	r3, [sp, #28]
 800a538:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a53c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a53e:	4654      	mov	r4, sl
 800a540:	2205      	movs	r2, #5
 800a542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a546:	4853      	ldr	r0, [pc, #332]	@ (800a694 <_vfiprintf_r+0x21c>)
 800a548:	f7f5 fe4a 	bl	80001e0 <memchr>
 800a54c:	9a04      	ldr	r2, [sp, #16]
 800a54e:	b9d8      	cbnz	r0, 800a588 <_vfiprintf_r+0x110>
 800a550:	06d1      	lsls	r1, r2, #27
 800a552:	bf44      	itt	mi
 800a554:	2320      	movmi	r3, #32
 800a556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a55a:	0713      	lsls	r3, r2, #28
 800a55c:	bf44      	itt	mi
 800a55e:	232b      	movmi	r3, #43	@ 0x2b
 800a560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a564:	f89a 3000 	ldrb.w	r3, [sl]
 800a568:	2b2a      	cmp	r3, #42	@ 0x2a
 800a56a:	d015      	beq.n	800a598 <_vfiprintf_r+0x120>
 800a56c:	9a07      	ldr	r2, [sp, #28]
 800a56e:	4654      	mov	r4, sl
 800a570:	2000      	movs	r0, #0
 800a572:	f04f 0c0a 	mov.w	ip, #10
 800a576:	4621      	mov	r1, r4
 800a578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a57c:	3b30      	subs	r3, #48	@ 0x30
 800a57e:	2b09      	cmp	r3, #9
 800a580:	d94b      	bls.n	800a61a <_vfiprintf_r+0x1a2>
 800a582:	b1b0      	cbz	r0, 800a5b2 <_vfiprintf_r+0x13a>
 800a584:	9207      	str	r2, [sp, #28]
 800a586:	e014      	b.n	800a5b2 <_vfiprintf_r+0x13a>
 800a588:	eba0 0308 	sub.w	r3, r0, r8
 800a58c:	fa09 f303 	lsl.w	r3, r9, r3
 800a590:	4313      	orrs	r3, r2
 800a592:	9304      	str	r3, [sp, #16]
 800a594:	46a2      	mov	sl, r4
 800a596:	e7d2      	b.n	800a53e <_vfiprintf_r+0xc6>
 800a598:	9b03      	ldr	r3, [sp, #12]
 800a59a:	1d19      	adds	r1, r3, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	9103      	str	r1, [sp, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bfbb      	ittet	lt
 800a5a4:	425b      	neglt	r3, r3
 800a5a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a5aa:	9307      	strge	r3, [sp, #28]
 800a5ac:	9307      	strlt	r3, [sp, #28]
 800a5ae:	bfb8      	it	lt
 800a5b0:	9204      	strlt	r2, [sp, #16]
 800a5b2:	7823      	ldrb	r3, [r4, #0]
 800a5b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5b6:	d10a      	bne.n	800a5ce <_vfiprintf_r+0x156>
 800a5b8:	7863      	ldrb	r3, [r4, #1]
 800a5ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5bc:	d132      	bne.n	800a624 <_vfiprintf_r+0x1ac>
 800a5be:	9b03      	ldr	r3, [sp, #12]
 800a5c0:	1d1a      	adds	r2, r3, #4
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	9203      	str	r2, [sp, #12]
 800a5c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5ca:	3402      	adds	r4, #2
 800a5cc:	9305      	str	r3, [sp, #20]
 800a5ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6a4 <_vfiprintf_r+0x22c>
 800a5d2:	7821      	ldrb	r1, [r4, #0]
 800a5d4:	2203      	movs	r2, #3
 800a5d6:	4650      	mov	r0, sl
 800a5d8:	f7f5 fe02 	bl	80001e0 <memchr>
 800a5dc:	b138      	cbz	r0, 800a5ee <_vfiprintf_r+0x176>
 800a5de:	9b04      	ldr	r3, [sp, #16]
 800a5e0:	eba0 000a 	sub.w	r0, r0, sl
 800a5e4:	2240      	movs	r2, #64	@ 0x40
 800a5e6:	4082      	lsls	r2, r0
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	3401      	adds	r4, #1
 800a5ec:	9304      	str	r3, [sp, #16]
 800a5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f2:	4829      	ldr	r0, [pc, #164]	@ (800a698 <_vfiprintf_r+0x220>)
 800a5f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5f8:	2206      	movs	r2, #6
 800a5fa:	f7f5 fdf1 	bl	80001e0 <memchr>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d03f      	beq.n	800a682 <_vfiprintf_r+0x20a>
 800a602:	4b26      	ldr	r3, [pc, #152]	@ (800a69c <_vfiprintf_r+0x224>)
 800a604:	bb1b      	cbnz	r3, 800a64e <_vfiprintf_r+0x1d6>
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	3307      	adds	r3, #7
 800a60a:	f023 0307 	bic.w	r3, r3, #7
 800a60e:	3308      	adds	r3, #8
 800a610:	9303      	str	r3, [sp, #12]
 800a612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a614:	443b      	add	r3, r7
 800a616:	9309      	str	r3, [sp, #36]	@ 0x24
 800a618:	e76a      	b.n	800a4f0 <_vfiprintf_r+0x78>
 800a61a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a61e:	460c      	mov	r4, r1
 800a620:	2001      	movs	r0, #1
 800a622:	e7a8      	b.n	800a576 <_vfiprintf_r+0xfe>
 800a624:	2300      	movs	r3, #0
 800a626:	3401      	adds	r4, #1
 800a628:	9305      	str	r3, [sp, #20]
 800a62a:	4619      	mov	r1, r3
 800a62c:	f04f 0c0a 	mov.w	ip, #10
 800a630:	4620      	mov	r0, r4
 800a632:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a636:	3a30      	subs	r2, #48	@ 0x30
 800a638:	2a09      	cmp	r2, #9
 800a63a:	d903      	bls.n	800a644 <_vfiprintf_r+0x1cc>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d0c6      	beq.n	800a5ce <_vfiprintf_r+0x156>
 800a640:	9105      	str	r1, [sp, #20]
 800a642:	e7c4      	b.n	800a5ce <_vfiprintf_r+0x156>
 800a644:	fb0c 2101 	mla	r1, ip, r1, r2
 800a648:	4604      	mov	r4, r0
 800a64a:	2301      	movs	r3, #1
 800a64c:	e7f0      	b.n	800a630 <_vfiprintf_r+0x1b8>
 800a64e:	ab03      	add	r3, sp, #12
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	462a      	mov	r2, r5
 800a654:	4b12      	ldr	r3, [pc, #72]	@ (800a6a0 <_vfiprintf_r+0x228>)
 800a656:	a904      	add	r1, sp, #16
 800a658:	4630      	mov	r0, r6
 800a65a:	f7fb fa8f 	bl	8005b7c <_printf_float>
 800a65e:	4607      	mov	r7, r0
 800a660:	1c78      	adds	r0, r7, #1
 800a662:	d1d6      	bne.n	800a612 <_vfiprintf_r+0x19a>
 800a664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a666:	07d9      	lsls	r1, r3, #31
 800a668:	d405      	bmi.n	800a676 <_vfiprintf_r+0x1fe>
 800a66a:	89ab      	ldrh	r3, [r5, #12]
 800a66c:	059a      	lsls	r2, r3, #22
 800a66e:	d402      	bmi.n	800a676 <_vfiprintf_r+0x1fe>
 800a670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a672:	f7fc fa31 	bl	8006ad8 <__retarget_lock_release_recursive>
 800a676:	89ab      	ldrh	r3, [r5, #12]
 800a678:	065b      	lsls	r3, r3, #25
 800a67a:	f53f af1f 	bmi.w	800a4bc <_vfiprintf_r+0x44>
 800a67e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a680:	e71e      	b.n	800a4c0 <_vfiprintf_r+0x48>
 800a682:	ab03      	add	r3, sp, #12
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	462a      	mov	r2, r5
 800a688:	4b05      	ldr	r3, [pc, #20]	@ (800a6a0 <_vfiprintf_r+0x228>)
 800a68a:	a904      	add	r1, sp, #16
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7fb fd0d 	bl	80060ac <_printf_i>
 800a692:	e7e4      	b.n	800a65e <_vfiprintf_r+0x1e6>
 800a694:	0800b059 	.word	0x0800b059
 800a698:	0800b063 	.word	0x0800b063
 800a69c:	08005b7d 	.word	0x08005b7d
 800a6a0:	0800a455 	.word	0x0800a455
 800a6a4:	0800b05f 	.word	0x0800b05f

0800a6a8 <__swbuf_r>:
 800a6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6aa:	460e      	mov	r6, r1
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	b118      	cbz	r0, 800a6ba <__swbuf_r+0x12>
 800a6b2:	6a03      	ldr	r3, [r0, #32]
 800a6b4:	b90b      	cbnz	r3, 800a6ba <__swbuf_r+0x12>
 800a6b6:	f7fc f8b9 	bl	800682c <__sinit>
 800a6ba:	69a3      	ldr	r3, [r4, #24]
 800a6bc:	60a3      	str	r3, [r4, #8]
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	071a      	lsls	r2, r3, #28
 800a6c2:	d501      	bpl.n	800a6c8 <__swbuf_r+0x20>
 800a6c4:	6923      	ldr	r3, [r4, #16]
 800a6c6:	b943      	cbnz	r3, 800a6da <__swbuf_r+0x32>
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f000 f82a 	bl	800a724 <__swsetup_r>
 800a6d0:	b118      	cbz	r0, 800a6da <__swbuf_r+0x32>
 800a6d2:	f04f 37ff 	mov.w	r7, #4294967295
 800a6d6:	4638      	mov	r0, r7
 800a6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	6922      	ldr	r2, [r4, #16]
 800a6de:	1a98      	subs	r0, r3, r2
 800a6e0:	6963      	ldr	r3, [r4, #20]
 800a6e2:	b2f6      	uxtb	r6, r6
 800a6e4:	4283      	cmp	r3, r0
 800a6e6:	4637      	mov	r7, r6
 800a6e8:	dc05      	bgt.n	800a6f6 <__swbuf_r+0x4e>
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f7ff f973 	bl	80099d8 <_fflush_r>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d1ed      	bne.n	800a6d2 <__swbuf_r+0x2a>
 800a6f6:	68a3      	ldr	r3, [r4, #8]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	60a3      	str	r3, [r4, #8]
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	6022      	str	r2, [r4, #0]
 800a702:	701e      	strb	r6, [r3, #0]
 800a704:	6962      	ldr	r2, [r4, #20]
 800a706:	1c43      	adds	r3, r0, #1
 800a708:	429a      	cmp	r2, r3
 800a70a:	d004      	beq.n	800a716 <__swbuf_r+0x6e>
 800a70c:	89a3      	ldrh	r3, [r4, #12]
 800a70e:	07db      	lsls	r3, r3, #31
 800a710:	d5e1      	bpl.n	800a6d6 <__swbuf_r+0x2e>
 800a712:	2e0a      	cmp	r6, #10
 800a714:	d1df      	bne.n	800a6d6 <__swbuf_r+0x2e>
 800a716:	4621      	mov	r1, r4
 800a718:	4628      	mov	r0, r5
 800a71a:	f7ff f95d 	bl	80099d8 <_fflush_r>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d0d9      	beq.n	800a6d6 <__swbuf_r+0x2e>
 800a722:	e7d6      	b.n	800a6d2 <__swbuf_r+0x2a>

0800a724 <__swsetup_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4b29      	ldr	r3, [pc, #164]	@ (800a7cc <__swsetup_r+0xa8>)
 800a728:	4605      	mov	r5, r0
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	460c      	mov	r4, r1
 800a72e:	b118      	cbz	r0, 800a738 <__swsetup_r+0x14>
 800a730:	6a03      	ldr	r3, [r0, #32]
 800a732:	b90b      	cbnz	r3, 800a738 <__swsetup_r+0x14>
 800a734:	f7fc f87a 	bl	800682c <__sinit>
 800a738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a73c:	0719      	lsls	r1, r3, #28
 800a73e:	d422      	bmi.n	800a786 <__swsetup_r+0x62>
 800a740:	06da      	lsls	r2, r3, #27
 800a742:	d407      	bmi.n	800a754 <__swsetup_r+0x30>
 800a744:	2209      	movs	r2, #9
 800a746:	602a      	str	r2, [r5, #0]
 800a748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a74c:	81a3      	strh	r3, [r4, #12]
 800a74e:	f04f 30ff 	mov.w	r0, #4294967295
 800a752:	e033      	b.n	800a7bc <__swsetup_r+0x98>
 800a754:	0758      	lsls	r0, r3, #29
 800a756:	d512      	bpl.n	800a77e <__swsetup_r+0x5a>
 800a758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a75a:	b141      	cbz	r1, 800a76e <__swsetup_r+0x4a>
 800a75c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a760:	4299      	cmp	r1, r3
 800a762:	d002      	beq.n	800a76a <__swsetup_r+0x46>
 800a764:	4628      	mov	r0, r5
 800a766:	f7fd f80b 	bl	8007780 <_free_r>
 800a76a:	2300      	movs	r3, #0
 800a76c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a76e:	89a3      	ldrh	r3, [r4, #12]
 800a770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	2300      	movs	r3, #0
 800a778:	6063      	str	r3, [r4, #4]
 800a77a:	6923      	ldr	r3, [r4, #16]
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	f043 0308 	orr.w	r3, r3, #8
 800a784:	81a3      	strh	r3, [r4, #12]
 800a786:	6923      	ldr	r3, [r4, #16]
 800a788:	b94b      	cbnz	r3, 800a79e <__swsetup_r+0x7a>
 800a78a:	89a3      	ldrh	r3, [r4, #12]
 800a78c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a794:	d003      	beq.n	800a79e <__swsetup_r+0x7a>
 800a796:	4621      	mov	r1, r4
 800a798:	4628      	mov	r0, r5
 800a79a:	f000 f883 	bl	800a8a4 <__smakebuf_r>
 800a79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a2:	f013 0201 	ands.w	r2, r3, #1
 800a7a6:	d00a      	beq.n	800a7be <__swsetup_r+0x9a>
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	60a2      	str	r2, [r4, #8]
 800a7ac:	6962      	ldr	r2, [r4, #20]
 800a7ae:	4252      	negs	r2, r2
 800a7b0:	61a2      	str	r2, [r4, #24]
 800a7b2:	6922      	ldr	r2, [r4, #16]
 800a7b4:	b942      	cbnz	r2, 800a7c8 <__swsetup_r+0xa4>
 800a7b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7ba:	d1c5      	bne.n	800a748 <__swsetup_r+0x24>
 800a7bc:	bd38      	pop	{r3, r4, r5, pc}
 800a7be:	0799      	lsls	r1, r3, #30
 800a7c0:	bf58      	it	pl
 800a7c2:	6962      	ldrpl	r2, [r4, #20]
 800a7c4:	60a2      	str	r2, [r4, #8]
 800a7c6:	e7f4      	b.n	800a7b2 <__swsetup_r+0x8e>
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	e7f7      	b.n	800a7bc <__swsetup_r+0x98>
 800a7cc:	2000003c 	.word	0x2000003c

0800a7d0 <_raise_r>:
 800a7d0:	291f      	cmp	r1, #31
 800a7d2:	b538      	push	{r3, r4, r5, lr}
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	d904      	bls.n	800a7e4 <_raise_r+0x14>
 800a7da:	2316      	movs	r3, #22
 800a7dc:	6003      	str	r3, [r0, #0]
 800a7de:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e2:	bd38      	pop	{r3, r4, r5, pc}
 800a7e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a7e6:	b112      	cbz	r2, 800a7ee <_raise_r+0x1e>
 800a7e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7ec:	b94b      	cbnz	r3, 800a802 <_raise_r+0x32>
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f000 f830 	bl	800a854 <_getpid_r>
 800a7f4:	4622      	mov	r2, r4
 800a7f6:	4601      	mov	r1, r0
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7fe:	f000 b817 	b.w	800a830 <_kill_r>
 800a802:	2b01      	cmp	r3, #1
 800a804:	d00a      	beq.n	800a81c <_raise_r+0x4c>
 800a806:	1c59      	adds	r1, r3, #1
 800a808:	d103      	bne.n	800a812 <_raise_r+0x42>
 800a80a:	2316      	movs	r3, #22
 800a80c:	6003      	str	r3, [r0, #0]
 800a80e:	2001      	movs	r0, #1
 800a810:	e7e7      	b.n	800a7e2 <_raise_r+0x12>
 800a812:	2100      	movs	r1, #0
 800a814:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a818:	4620      	mov	r0, r4
 800a81a:	4798      	blx	r3
 800a81c:	2000      	movs	r0, #0
 800a81e:	e7e0      	b.n	800a7e2 <_raise_r+0x12>

0800a820 <raise>:
 800a820:	4b02      	ldr	r3, [pc, #8]	@ (800a82c <raise+0xc>)
 800a822:	4601      	mov	r1, r0
 800a824:	6818      	ldr	r0, [r3, #0]
 800a826:	f7ff bfd3 	b.w	800a7d0 <_raise_r>
 800a82a:	bf00      	nop
 800a82c:	2000003c 	.word	0x2000003c

0800a830 <_kill_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4d07      	ldr	r5, [pc, #28]	@ (800a850 <_kill_r+0x20>)
 800a834:	2300      	movs	r3, #0
 800a836:	4604      	mov	r4, r0
 800a838:	4608      	mov	r0, r1
 800a83a:	4611      	mov	r1, r2
 800a83c:	602b      	str	r3, [r5, #0]
 800a83e:	f7f7 f9c9 	bl	8001bd4 <_kill>
 800a842:	1c43      	adds	r3, r0, #1
 800a844:	d102      	bne.n	800a84c <_kill_r+0x1c>
 800a846:	682b      	ldr	r3, [r5, #0]
 800a848:	b103      	cbz	r3, 800a84c <_kill_r+0x1c>
 800a84a:	6023      	str	r3, [r4, #0]
 800a84c:	bd38      	pop	{r3, r4, r5, pc}
 800a84e:	bf00      	nop
 800a850:	200005a4 	.word	0x200005a4

0800a854 <_getpid_r>:
 800a854:	f7f7 b9b6 	b.w	8001bc4 <_getpid>

0800a858 <__swhatbuf_r>:
 800a858:	b570      	push	{r4, r5, r6, lr}
 800a85a:	460c      	mov	r4, r1
 800a85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a860:	2900      	cmp	r1, #0
 800a862:	b096      	sub	sp, #88	@ 0x58
 800a864:	4615      	mov	r5, r2
 800a866:	461e      	mov	r6, r3
 800a868:	da0d      	bge.n	800a886 <__swhatbuf_r+0x2e>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a870:	f04f 0100 	mov.w	r1, #0
 800a874:	bf14      	ite	ne
 800a876:	2340      	movne	r3, #64	@ 0x40
 800a878:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a87c:	2000      	movs	r0, #0
 800a87e:	6031      	str	r1, [r6, #0]
 800a880:	602b      	str	r3, [r5, #0]
 800a882:	b016      	add	sp, #88	@ 0x58
 800a884:	bd70      	pop	{r4, r5, r6, pc}
 800a886:	466a      	mov	r2, sp
 800a888:	f000 f848 	bl	800a91c <_fstat_r>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	dbec      	blt.n	800a86a <__swhatbuf_r+0x12>
 800a890:	9901      	ldr	r1, [sp, #4]
 800a892:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a896:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a89a:	4259      	negs	r1, r3
 800a89c:	4159      	adcs	r1, r3
 800a89e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8a2:	e7eb      	b.n	800a87c <__swhatbuf_r+0x24>

0800a8a4 <__smakebuf_r>:
 800a8a4:	898b      	ldrh	r3, [r1, #12]
 800a8a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8a8:	079d      	lsls	r5, r3, #30
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	d507      	bpl.n	800a8c0 <__smakebuf_r+0x1c>
 800a8b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	6123      	str	r3, [r4, #16]
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	6163      	str	r3, [r4, #20]
 800a8bc:	b003      	add	sp, #12
 800a8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8c0:	ab01      	add	r3, sp, #4
 800a8c2:	466a      	mov	r2, sp
 800a8c4:	f7ff ffc8 	bl	800a858 <__swhatbuf_r>
 800a8c8:	9f00      	ldr	r7, [sp, #0]
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	4639      	mov	r1, r7
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f7fc ffca 	bl	8007868 <_malloc_r>
 800a8d4:	b948      	cbnz	r0, 800a8ea <__smakebuf_r+0x46>
 800a8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8da:	059a      	lsls	r2, r3, #22
 800a8dc:	d4ee      	bmi.n	800a8bc <__smakebuf_r+0x18>
 800a8de:	f023 0303 	bic.w	r3, r3, #3
 800a8e2:	f043 0302 	orr.w	r3, r3, #2
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	e7e2      	b.n	800a8b0 <__smakebuf_r+0xc>
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	6020      	str	r0, [r4, #0]
 800a8ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	9b01      	ldr	r3, [sp, #4]
 800a8f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8fa:	b15b      	cbz	r3, 800a914 <__smakebuf_r+0x70>
 800a8fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a900:	4630      	mov	r0, r6
 800a902:	f000 f81d 	bl	800a940 <_isatty_r>
 800a906:	b128      	cbz	r0, 800a914 <__smakebuf_r+0x70>
 800a908:	89a3      	ldrh	r3, [r4, #12]
 800a90a:	f023 0303 	bic.w	r3, r3, #3
 800a90e:	f043 0301 	orr.w	r3, r3, #1
 800a912:	81a3      	strh	r3, [r4, #12]
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	431d      	orrs	r5, r3
 800a918:	81a5      	strh	r5, [r4, #12]
 800a91a:	e7cf      	b.n	800a8bc <__smakebuf_r+0x18>

0800a91c <_fstat_r>:
 800a91c:	b538      	push	{r3, r4, r5, lr}
 800a91e:	4d07      	ldr	r5, [pc, #28]	@ (800a93c <_fstat_r+0x20>)
 800a920:	2300      	movs	r3, #0
 800a922:	4604      	mov	r4, r0
 800a924:	4608      	mov	r0, r1
 800a926:	4611      	mov	r1, r2
 800a928:	602b      	str	r3, [r5, #0]
 800a92a:	f7f7 f9b3 	bl	8001c94 <_fstat>
 800a92e:	1c43      	adds	r3, r0, #1
 800a930:	d102      	bne.n	800a938 <_fstat_r+0x1c>
 800a932:	682b      	ldr	r3, [r5, #0]
 800a934:	b103      	cbz	r3, 800a938 <_fstat_r+0x1c>
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	bd38      	pop	{r3, r4, r5, pc}
 800a93a:	bf00      	nop
 800a93c:	200005a4 	.word	0x200005a4

0800a940 <_isatty_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d06      	ldr	r5, [pc, #24]	@ (800a95c <_isatty_r+0x1c>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	f7f7 f9b2 	bl	8001cb4 <_isatty>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_isatty_r+0x1a>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_isatty_r+0x1a>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	200005a4 	.word	0x200005a4

0800a960 <atan2f>:
 800a960:	f000 b800 	b.w	800a964 <__ieee754_atan2f>

0800a964 <__ieee754_atan2f>:
 800a964:	ee10 2a90 	vmov	r2, s1
 800a968:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800a96c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a970:	b510      	push	{r4, lr}
 800a972:	eef0 7a40 	vmov.f32	s15, s0
 800a976:	d806      	bhi.n	800a986 <__ieee754_atan2f+0x22>
 800a978:	ee10 0a10 	vmov	r0, s0
 800a97c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a980:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a984:	d904      	bls.n	800a990 <__ieee754_atan2f+0x2c>
 800a986:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a98a:	eeb0 0a67 	vmov.f32	s0, s15
 800a98e:	bd10      	pop	{r4, pc}
 800a990:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800a994:	d103      	bne.n	800a99e <__ieee754_atan2f+0x3a>
 800a996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a99a:	f000 b883 	b.w	800aaa4 <atanf>
 800a99e:	1794      	asrs	r4, r2, #30
 800a9a0:	f004 0402 	and.w	r4, r4, #2
 800a9a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a9a8:	b943      	cbnz	r3, 800a9bc <__ieee754_atan2f+0x58>
 800a9aa:	2c02      	cmp	r4, #2
 800a9ac:	d05e      	beq.n	800aa6c <__ieee754_atan2f+0x108>
 800a9ae:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800aa80 <__ieee754_atan2f+0x11c>
 800a9b2:	2c03      	cmp	r4, #3
 800a9b4:	bf08      	it	eq
 800a9b6:	eef0 7a47 	vmoveq.f32	s15, s14
 800a9ba:	e7e6      	b.n	800a98a <__ieee754_atan2f+0x26>
 800a9bc:	b941      	cbnz	r1, 800a9d0 <__ieee754_atan2f+0x6c>
 800a9be:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800aa84 <__ieee754_atan2f+0x120>
 800a9c2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800aa88 <__ieee754_atan2f+0x124>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	bfb8      	it	lt
 800a9ca:	eef0 7a47 	vmovlt.f32	s15, s14
 800a9ce:	e7dc      	b.n	800a98a <__ieee754_atan2f+0x26>
 800a9d0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a9d4:	d110      	bne.n	800a9f8 <__ieee754_atan2f+0x94>
 800a9d6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a9da:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9de:	d107      	bne.n	800a9f0 <__ieee754_atan2f+0x8c>
 800a9e0:	2c02      	cmp	r4, #2
 800a9e2:	d846      	bhi.n	800aa72 <__ieee754_atan2f+0x10e>
 800a9e4:	4b29      	ldr	r3, [pc, #164]	@ (800aa8c <__ieee754_atan2f+0x128>)
 800a9e6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a9ea:	edd3 7a00 	vldr	s15, [r3]
 800a9ee:	e7cc      	b.n	800a98a <__ieee754_atan2f+0x26>
 800a9f0:	2c02      	cmp	r4, #2
 800a9f2:	d841      	bhi.n	800aa78 <__ieee754_atan2f+0x114>
 800a9f4:	4b26      	ldr	r3, [pc, #152]	@ (800aa90 <__ieee754_atan2f+0x12c>)
 800a9f6:	e7f6      	b.n	800a9e6 <__ieee754_atan2f+0x82>
 800a9f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a9fc:	d0df      	beq.n	800a9be <__ieee754_atan2f+0x5a>
 800a9fe:	1a5b      	subs	r3, r3, r1
 800aa00:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800aa04:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800aa08:	da1a      	bge.n	800aa40 <__ieee754_atan2f+0xdc>
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	da01      	bge.n	800aa12 <__ieee754_atan2f+0xae>
 800aa0e:	313c      	adds	r1, #60	@ 0x3c
 800aa10:	db19      	blt.n	800aa46 <__ieee754_atan2f+0xe2>
 800aa12:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800aa16:	f000 f919 	bl	800ac4c <fabsf>
 800aa1a:	f000 f843 	bl	800aaa4 <atanf>
 800aa1e:	eef0 7a40 	vmov.f32	s15, s0
 800aa22:	2c01      	cmp	r4, #1
 800aa24:	d012      	beq.n	800aa4c <__ieee754_atan2f+0xe8>
 800aa26:	2c02      	cmp	r4, #2
 800aa28:	d017      	beq.n	800aa5a <__ieee754_atan2f+0xf6>
 800aa2a:	2c00      	cmp	r4, #0
 800aa2c:	d0ad      	beq.n	800a98a <__ieee754_atan2f+0x26>
 800aa2e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800aa94 <__ieee754_atan2f+0x130>
 800aa32:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa36:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800aa98 <__ieee754_atan2f+0x134>
 800aa3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aa3e:	e7a4      	b.n	800a98a <__ieee754_atan2f+0x26>
 800aa40:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800aa84 <__ieee754_atan2f+0x120>
 800aa44:	e7ed      	b.n	800aa22 <__ieee754_atan2f+0xbe>
 800aa46:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800aa9c <__ieee754_atan2f+0x138>
 800aa4a:	e7ea      	b.n	800aa22 <__ieee754_atan2f+0xbe>
 800aa4c:	ee17 3a90 	vmov	r3, s15
 800aa50:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	e797      	b.n	800a98a <__ieee754_atan2f+0x26>
 800aa5a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800aa94 <__ieee754_atan2f+0x130>
 800aa5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa62:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800aa98 <__ieee754_atan2f+0x134>
 800aa66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa6a:	e78e      	b.n	800a98a <__ieee754_atan2f+0x26>
 800aa6c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800aa98 <__ieee754_atan2f+0x134>
 800aa70:	e78b      	b.n	800a98a <__ieee754_atan2f+0x26>
 800aa72:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800aaa0 <__ieee754_atan2f+0x13c>
 800aa76:	e788      	b.n	800a98a <__ieee754_atan2f+0x26>
 800aa78:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800aa9c <__ieee754_atan2f+0x138>
 800aa7c:	e785      	b.n	800a98a <__ieee754_atan2f+0x26>
 800aa7e:	bf00      	nop
 800aa80:	c0490fdb 	.word	0xc0490fdb
 800aa84:	3fc90fdb 	.word	0x3fc90fdb
 800aa88:	bfc90fdb 	.word	0xbfc90fdb
 800aa8c:	0800b138 	.word	0x0800b138
 800aa90:	0800b12c 	.word	0x0800b12c
 800aa94:	33bbbd2e 	.word	0x33bbbd2e
 800aa98:	40490fdb 	.word	0x40490fdb
 800aa9c:	00000000 	.word	0x00000000
 800aaa0:	3f490fdb 	.word	0x3f490fdb

0800aaa4 <atanf>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	ee10 5a10 	vmov	r5, s0
 800aaaa:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800aaae:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800aab2:	eef0 7a40 	vmov.f32	s15, s0
 800aab6:	d310      	bcc.n	800aada <atanf+0x36>
 800aab8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800aabc:	d904      	bls.n	800aac8 <atanf+0x24>
 800aabe:	ee70 7a00 	vadd.f32	s15, s0, s0
 800aac2:	eeb0 0a67 	vmov.f32	s0, s15
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800ac00 <atanf+0x15c>
 800aacc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800ac04 <atanf+0x160>
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	bfc8      	it	gt
 800aad4:	eef0 7a47 	vmovgt.f32	s15, s14
 800aad8:	e7f3      	b.n	800aac2 <atanf+0x1e>
 800aada:	4b4b      	ldr	r3, [pc, #300]	@ (800ac08 <atanf+0x164>)
 800aadc:	429c      	cmp	r4, r3
 800aade:	d810      	bhi.n	800ab02 <atanf+0x5e>
 800aae0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800aae4:	d20a      	bcs.n	800aafc <atanf+0x58>
 800aae6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800ac0c <atanf+0x168>
 800aaea:	ee30 7a07 	vadd.f32	s14, s0, s14
 800aaee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaf2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800aaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafa:	dce2      	bgt.n	800aac2 <atanf+0x1e>
 800aafc:	f04f 33ff 	mov.w	r3, #4294967295
 800ab00:	e013      	b.n	800ab2a <atanf+0x86>
 800ab02:	f000 f8a3 	bl	800ac4c <fabsf>
 800ab06:	4b42      	ldr	r3, [pc, #264]	@ (800ac10 <atanf+0x16c>)
 800ab08:	429c      	cmp	r4, r3
 800ab0a:	d84f      	bhi.n	800abac <atanf+0x108>
 800ab0c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ab10:	429c      	cmp	r4, r3
 800ab12:	d841      	bhi.n	800ab98 <atanf+0xf4>
 800ab14:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ab18:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ab1c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ab20:	2300      	movs	r3, #0
 800ab22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ab30:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ac14 <atanf+0x170>
 800ab34:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800ac18 <atanf+0x174>
 800ab38:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800ac1c <atanf+0x178>
 800ab3c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ab40:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ab44:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800ac20 <atanf+0x17c>
 800ab48:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab4c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ac24 <atanf+0x180>
 800ab50:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab54:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800ac28 <atanf+0x184>
 800ab58:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab5c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ac2c <atanf+0x188>
 800ab60:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab64:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800ac30 <atanf+0x18c>
 800ab68:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ab6c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800ac34 <atanf+0x190>
 800ab70:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ab74:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800ac38 <atanf+0x194>
 800ab78:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ab7c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800ac3c <atanf+0x198>
 800ab80:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ab84:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ab88:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ab8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab90:	d121      	bne.n	800abd6 <atanf+0x132>
 800ab92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab96:	e794      	b.n	800aac2 <atanf+0x1e>
 800ab98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ab9c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800aba0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aba4:	2301      	movs	r3, #1
 800aba6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800abaa:	e7be      	b.n	800ab2a <atanf+0x86>
 800abac:	4b24      	ldr	r3, [pc, #144]	@ (800ac40 <atanf+0x19c>)
 800abae:	429c      	cmp	r4, r3
 800abb0:	d80b      	bhi.n	800abca <atanf+0x126>
 800abb2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800abb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abba:	eea0 7a27 	vfma.f32	s14, s0, s15
 800abbe:	2302      	movs	r3, #2
 800abc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800abc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc8:	e7af      	b.n	800ab2a <atanf+0x86>
 800abca:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800abce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800abd2:	2303      	movs	r3, #3
 800abd4:	e7a9      	b.n	800ab2a <atanf+0x86>
 800abd6:	4a1b      	ldr	r2, [pc, #108]	@ (800ac44 <atanf+0x1a0>)
 800abd8:	491b      	ldr	r1, [pc, #108]	@ (800ac48 <atanf+0x1a4>)
 800abda:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800abde:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800abe2:	edd3 6a00 	vldr	s13, [r3]
 800abe6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800abea:	2d00      	cmp	r5, #0
 800abec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800abf0:	edd2 7a00 	vldr	s15, [r2]
 800abf4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abf8:	bfb8      	it	lt
 800abfa:	eef1 7a67 	vneglt.f32	s15, s15
 800abfe:	e760      	b.n	800aac2 <atanf+0x1e>
 800ac00:	bfc90fdb 	.word	0xbfc90fdb
 800ac04:	3fc90fdb 	.word	0x3fc90fdb
 800ac08:	3edfffff 	.word	0x3edfffff
 800ac0c:	7149f2ca 	.word	0x7149f2ca
 800ac10:	3f97ffff 	.word	0x3f97ffff
 800ac14:	3c8569d7 	.word	0x3c8569d7
 800ac18:	3d4bda59 	.word	0x3d4bda59
 800ac1c:	bd6ef16b 	.word	0xbd6ef16b
 800ac20:	3d886b35 	.word	0x3d886b35
 800ac24:	3dba2e6e 	.word	0x3dba2e6e
 800ac28:	3e124925 	.word	0x3e124925
 800ac2c:	3eaaaaab 	.word	0x3eaaaaab
 800ac30:	bd15a221 	.word	0xbd15a221
 800ac34:	bd9d8795 	.word	0xbd9d8795
 800ac38:	bde38e38 	.word	0xbde38e38
 800ac3c:	be4ccccd 	.word	0xbe4ccccd
 800ac40:	401bffff 	.word	0x401bffff
 800ac44:	0800b154 	.word	0x0800b154
 800ac48:	0800b144 	.word	0x0800b144

0800ac4c <fabsf>:
 800ac4c:	ee10 3a10 	vmov	r3, s0
 800ac50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac54:	ee00 3a10 	vmov	s0, r3
 800ac58:	4770      	bx	lr
	...

0800ac5c <_init>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	bf00      	nop
 800ac60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac62:	bc08      	pop	{r3}
 800ac64:	469e      	mov	lr, r3
 800ac66:	4770      	bx	lr

0800ac68 <_fini>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr
