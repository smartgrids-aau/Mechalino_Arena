
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800a770  0800a770  0000b770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac2c  0800ac2c  0000c1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac2c  0800ac2c  0000bc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac34  0800ac34  0000c1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac34  0800ac34  0000bc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac38  0800ac38  0000bc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800ac3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001f8  0800ae34  0000c1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  0800ae34  0000c594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a5b  00000000  00000000  0000c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0e  00000000  00000000  0001ec83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00021898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d91  00000000  00000000  000229e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aa8  00000000  00000000  00023771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016967  00000000  00000000  0003d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f0a3  00000000  00000000  00053b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2c23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006090  00000000  00000000  000f2c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000f8cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a758 	.word	0x0800a758

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800a758 	.word	0x0800a758

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_ADC1_Init+0xa0>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001016:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001024:	2201      	movs	r2, #1
 8001026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <MX_ADC1_Init+0xa4>)
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001058:	f001 f866 	bl	8002128 <HAL_ADC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001062:	f000 fbc3 	bl	80017ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001078:	f001 f89a 	bl	80021b0 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001082:	f000 fbb3 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000214 	.word	0x20000214
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f001 fc13 	bl	8002934 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b0:	4815      	ldr	r0, [pc, #84]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011b2:	f001 fd43 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011b6:	2200      	movs	r2, #0
 80011b8:	213b      	movs	r1, #59	@ 0x3b
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011bc:	f001 fd3e 	bl	8002c3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011da:	f001 fbab 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011de:	233b      	movs	r3, #59	@ 0x3b
 80011e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011f6:	f001 fb9d 	bl	8002934 <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020400 	.word	0x40020400

08001210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f001 fd0f 	bl	8002c70 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 fac8 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000025c 	.word	0x2000025c
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f001 fb34 	bl	8002934 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_UART_RxCpltCallback>:
void assert_failed(uint8_t *file, uint32_t line);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_UART_RxCpltCallback+0x5c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d120      	bne.n	8001350 <HAL_UART_RxCpltCallback+0x54>
		if (UART1_rxBuffer[0] == '\n') { // Assuming commands are newline terminated
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d10c      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x34>
			rx_buffer[rx_index] = '\0'; // Null terminate the string
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]
			rx_complete = 1; // Set flag for command complete
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_RxCpltCallback+0x6c>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
			rx_index = 0; // Reset index
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e00a      	b.n	8001346 <HAL_UART_RxCpltCallback+0x4a>
		} else {
			rx_buffer[rx_index++] = UART1_rxBuffer[0]; // Store character in buffer
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800133a:	7011      	strb	r1, [r2, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 8001344:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1); // Listen for next character
 8001346:	2201      	movs	r2, #1
 8001348:	4904      	ldr	r1, [pc, #16]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 800134a:	4808      	ldr	r0, [pc, #32]	@ (800136c <HAL_UART_RxCpltCallback+0x70>)
 800134c:	f003 fada 	bl	8004904 <HAL_UART_Receive_IT>
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	2000031c 	.word	0x2000031c
 8001360:	20000314 	.word	0x20000314
 8001364:	200002b0 	.word	0x200002b0
 8001368:	20000318 	.word	0x20000318
 800136c:	200003fc 	.word	0x200003fc

08001370 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a4a      	ldr	r2, [pc, #296]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800137e:	4293      	cmp	r3, r2
 8001380:	f040 808d 	bne.w	800149e <HAL_TIM_PeriodElapsedCallback+0x12e>
        if (timer_count > 0) {
 8001384:	4b49      	ldr	r3, [pc, #292]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	b29b      	uxth	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8087 	beq.w	800149e <HAL_TIM_PeriodElapsedCallback+0x12e>
        	timer_count--;
 8001390:	4b46      	ldr	r3, [pc, #280]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b44      	ldr	r3, [pc, #272]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800139c:	801a      	strh	r2, [r3, #0]

            // Update left servo PWM
            if (servo_left.current_pwm != servo_left.target_pwm) {
 800139e:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b43      	ldr	r3, [pc, #268]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d030      	beq.n	800140c <HAL_TIM_PeriodElapsedCallback+0x9c>
                if (servo_left.current_pwm < servo_left.target_pwm) {
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	4b40      	ldr	r3, [pc, #256]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d212      	bcs.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x6c>
                    servo_left.current_pwm += increment_speed;
 80013b6:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b3c      	ldr	r3, [pc, #240]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a3b      	ldr	r2, [pc, #236]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013c4:	6093      	str	r3, [r2, #8]
                    if (servo_left.current_pwm > servo_left.target_pwm) {
 80013c6:	4b3a      	ldr	r3, [pc, #232]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d916      	bls.n	8001400 <HAL_TIM_PeriodElapsedCallback+0x90>
                        servo_left.current_pwm = servo_left.target_pwm;
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	4a36      	ldr	r2, [pc, #216]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013d8:	6093      	str	r3, [r2, #8]
 80013da:	e011      	b.n	8001400 <HAL_TIM_PeriodElapsedCallback+0x90>
                    }
                } else {
                    servo_left.current_pwm -= increment_speed;
 80013dc:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b33      	ldr	r3, [pc, #204]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	4a31      	ldr	r2, [pc, #196]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013ea:	6093      	str	r3, [r2, #8]
                    if (servo_left.current_pwm < servo_left.target_pwm) {
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d203      	bcs.n	8001400 <HAL_TIM_PeriodElapsedCallback+0x90>
                        servo_left.current_pwm = servo_left.target_pwm;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	4a2c      	ldr	r2, [pc, #176]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80013fe:	6093      	str	r3, [r2, #8]
                    }
                }
                set_servo_pwm(&servo_left, servo_left.current_pwm);
 8001400:	4b2b      	ldr	r3, [pc, #172]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4619      	mov	r1, r3
 8001406:	482a      	ldr	r0, [pc, #168]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001408:	f000 f8d8 	bl	80015bc <set_servo_pwm>
            }

            // Update right servo PWM
            if (servo_right.current_pwm != servo_right.target_pwm) {
 800140c:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d030      	beq.n	800147a <HAL_TIM_PeriodElapsedCallback+0x10a>
                if (servo_right.current_pwm < servo_right.target_pwm) {
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d212      	bcs.n	800144a <HAL_TIM_PeriodElapsedCallback+0xda>
                    servo_right.current_pwm += increment_speed;
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4413      	add	r3, r2
 8001430:	4a21      	ldr	r2, [pc, #132]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001432:	6093      	str	r3, [r2, #8]
                    if (servo_right.current_pwm > servo_right.target_pwm) {
 8001434:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d916      	bls.n	800146e <HAL_TIM_PeriodElapsedCallback+0xfe>
                        servo_right.current_pwm = servo_right.target_pwm;
 8001440:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001446:	6093      	str	r3, [r2, #8]
 8001448:	e011      	b.n	800146e <HAL_TIM_PeriodElapsedCallback+0xfe>
                    }
                } else {
                    servo_right.current_pwm -= increment_speed;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001458:	6093      	str	r3, [r2, #8]
                    if (servo_right.current_pwm < servo_right.target_pwm) {
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	429a      	cmp	r2, r3
 8001464:	d203      	bcs.n	800146e <HAL_TIM_PeriodElapsedCallback+0xfe>
                        servo_right.current_pwm = servo_right.target_pwm;
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	4a13      	ldr	r2, [pc, #76]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800146c:	6093      	str	r3, [r2, #8]
                    }
                }
                set_servo_pwm(&servo_right, servo_right.current_pwm);
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	4619      	mov	r1, r3
 8001474:	4810      	ldr	r0, [pc, #64]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001476:	f000 f8a1 	bl	80015bc <set_servo_pwm>
            }

            // Stop servos when duration expires
            if (timer_count == 0) {
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10c      	bne.n	800149e <HAL_TIM_PeriodElapsedCallback+0x12e>
                set_servo_pwm(&servo_left, SERVO_STOP); // Stop left servo
 8001484:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001488:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800148a:	f000 f897 	bl	80015bc <set_servo_pwm>
                set_servo_pwm(&servo_right, SERVO_STOP); // Stop right servo
 800148e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001492:	4809      	ldr	r0, [pc, #36]	@ (80014b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001494:	f000 f892 	bl	80015bc <set_servo_pwm>
                HAL_TIM_Base_Stop_IT(htim); // Stop the timer
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f002 fa5d 	bl	8003958 <HAL_TIM_Base_Stop_IT>
            }
        }
    }
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40000400 	.word	0x40000400
 80014ac:	2000031e 	.word	0x2000031e
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000020 	.word	0x20000020
 80014b8:	20000010 	.word	0x20000010

080014bc <execute_command>:


void execute_command(const char *cmd) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	6078      	str	r0, [r7, #4]
	switch (cmd[0]) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b53      	cmp	r3, #83	@ 0x53
 80014ca:	d05c      	beq.n	8001586 <execute_command+0xca>
 80014cc:	2b53      	cmp	r3, #83	@ 0x53
 80014ce:	dc62      	bgt.n	8001596 <execute_command+0xda>
 80014d0:	2b4d      	cmp	r3, #77	@ 0x4d
 80014d2:	d002      	beq.n	80014da <execute_command+0x1e>
 80014d4:	2b52      	cmp	r3, #82	@ 0x52
 80014d6:	d065      	beq.n	80015a4 <execute_command+0xe8>
 80014d8:	e05d      	b.n	8001596 <execute_command+0xda>
	case 'M': { // Move command with flexible parameters
		uint16_t arg1, arg2, arg3 = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	81fb      	strh	r3, [r7, #14]
		int count = sscanf(cmd + 1, "%" SCNu16 " %" SCNu16 " %" SCNu16, &arg1,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1c58      	adds	r0, r3, #1
 80014e2:	f107 0110 	add.w	r1, r7, #16
 80014e6:	f107 0212 	add.w	r2, r7, #18
 80014ea:	f107 030e 	add.w	r3, r7, #14
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	460b      	mov	r3, r1
 80014f2:	492f      	ldr	r1, [pc, #188]	@ (80015b0 <execute_command+0xf4>)
 80014f4:	f005 f8e8 	bl	80066c8 <siscanf>
 80014f8:	6178      	str	r0, [r7, #20]
				&arg2, &arg3);

		if (count == 2) {
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d116      	bne.n	800152e <execute_command+0x72>
			// Only speed and duration provided
			arg1 = (arg1 >= BACKWARD_MAX && arg1 <= FORWARD_MAX) ? arg1 : SERVO_STOP;
 8001500:	8a7b      	ldrh	r3, [r7, #18]
 8001502:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001506:	d306      	bcc.n	8001516 <execute_command+0x5a>
 8001508:	8a7b      	ldrh	r3, [r7, #18]
 800150a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800150e:	4293      	cmp	r3, r2
 8001510:	d801      	bhi.n	8001516 <execute_command+0x5a>
 8001512:	8a7b      	ldrh	r3, [r7, #18]
 8001514:	e001      	b.n	800151a <execute_command+0x5e>
 8001516:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800151a:	827b      	strh	r3, [r7, #18]
			start_pwm_update(arg1, arg1, arg2);
 800151c:	8a7b      	ldrh	r3, [r7, #18]
 800151e:	4618      	mov	r0, r3
 8001520:	8a7b      	ldrh	r3, [r7, #18]
 8001522:	4619      	mov	r1, r3
 8001524:	8a3b      	ldrh	r3, [r7, #16]
 8001526:	461a      	mov	r2, r3
 8001528:	f000 f87a 	bl	8001620 <start_pwm_update>
			start_pwm_update(arg1, arg2, arg3);
		} else {
			// Handle error: insufficient or incorrect parameters
			printf("Invalid parameters for MOVE command.\n");
		}
		break;
 800152c:	e03b      	b.n	80015a6 <execute_command+0xea>
		} else if (count == 3) {
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d124      	bne.n	800157e <execute_command+0xc2>
			arg1 = (arg1 >= BACKWARD_MAX && arg1 <= FORWARD_MAX) ? arg1 : SERVO_STOP;
 8001534:	8a7b      	ldrh	r3, [r7, #18]
 8001536:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800153a:	d306      	bcc.n	800154a <execute_command+0x8e>
 800153c:	8a7b      	ldrh	r3, [r7, #18]
 800153e:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8001542:	4293      	cmp	r3, r2
 8001544:	d801      	bhi.n	800154a <execute_command+0x8e>
 8001546:	8a7b      	ldrh	r3, [r7, #18]
 8001548:	e001      	b.n	800154e <execute_command+0x92>
 800154a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800154e:	827b      	strh	r3, [r7, #18]
			arg2 = (arg2 >= BACKWARD_MAX && arg2 <= FORWARD_MAX) ? arg2 : SERVO_STOP;
 8001550:	8a3b      	ldrh	r3, [r7, #16]
 8001552:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001556:	d306      	bcc.n	8001566 <execute_command+0xaa>
 8001558:	8a3b      	ldrh	r3, [r7, #16]
 800155a:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800155e:	4293      	cmp	r3, r2
 8001560:	d801      	bhi.n	8001566 <execute_command+0xaa>
 8001562:	8a3b      	ldrh	r3, [r7, #16]
 8001564:	e001      	b.n	800156a <execute_command+0xae>
 8001566:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800156a:	823b      	strh	r3, [r7, #16]
			start_pwm_update(arg1, arg2, arg3);
 800156c:	8a7b      	ldrh	r3, [r7, #18]
 800156e:	4618      	mov	r0, r3
 8001570:	8a3b      	ldrh	r3, [r7, #16]
 8001572:	4619      	mov	r1, r3
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	461a      	mov	r2, r3
 8001578:	f000 f852 	bl	8001620 <start_pwm_update>
		break;
 800157c:	e013      	b.n	80015a6 <execute_command+0xea>
			printf("Invalid parameters for MOVE command.\n");
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <execute_command+0xf8>)
 8001580:	f005 f87a 	bl	8006678 <puts>
		break;
 8001584:	e00f      	b.n	80015a6 <execute_command+0xea>
	case 'R': { // Rotate command
		break;
	}
	case 'S': // Stop command
		// stop();
		start_pwm_update(SERVO_STOP, SERVO_STOP, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800158c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001590:	f000 f846 	bl	8001620 <start_pwm_update>
		// move();
		break;
 8001594:	e007      	b.n	80015a6 <execute_command+0xea>
	default:
		// Handle invalid command
		printf("Unknown command: %c\n", cmd[0]);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	4619      	mov	r1, r3
 800159c:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <execute_command+0xfc>)
 800159e:	f005 f803 	bl	80065a8 <iprintf>
		break;
 80015a2:	e000      	b.n	80015a6 <execute_command+0xea>
		break;
 80015a4:	bf00      	nop
	}
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	0800a770 	.word	0x0800a770
 80015b4:	0800a77c 	.word	0x0800a77c
 80015b8:	0800a7a4 	.word	0x0800a7a4

080015bc <set_servo_pwm>:

void set_servo_pwm(Servo *servo, uint32_t pulse) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
    servo->current_pwm = pulse;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	609a      	str	r2, [r3, #8]
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d105      	bne.n	80015e0 <set_servo_pwm+0x24>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80015de:	e018      	b.n	8001612 <set_servo_pwm+0x56>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d105      	bne.n	80015f4 <set_servo_pwm+0x38>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80015f2:	e00e      	b.n	8001612 <set_servo_pwm+0x56>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d105      	bne.n	8001608 <set_servo_pwm+0x4c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001606:	e004      	b.n	8001612 <set_servo_pwm+0x56>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <start_pwm_update>:


void start_pwm_update(uint32_t left_target, uint32_t right_target, uint32_t duration_ms) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
    servo_left.target_pwm = left_target;
 800162c:	4a08      	ldr	r2, [pc, #32]	@ (8001650 <start_pwm_update+0x30>)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	60d3      	str	r3, [r2, #12]
    servo_right.target_pwm = right_target;
 8001632:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <start_pwm_update+0x34>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
    timer_count = duration_ms;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <start_pwm_update+0x38>)
 800163e:	801a      	strh	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim3); // Start the timer with interrupt
 8001640:	4806      	ldr	r0, [pc, #24]	@ (800165c <start_pwm_update+0x3c>)
 8001642:	f002 f927 	bl	8003894 <HAL_TIM_Base_Start_IT>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000000 	.word	0x20000000
 8001654:	20000010 	.word	0x20000010
 8001658:	2000031e 	.word	0x2000031e
 800165c:	200003b4 	.word	0x200003b4

08001660 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001664:	f000 fcca 	bl	8001ffc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001668:	f000 f854 	bl	8001714 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800166c:	f7ff fd5a 	bl	8001124 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001670:	f000 fa08 	bl	8001a84 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001674:	f000 faa6 	bl	8001bc4 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001678:	f000 fc1c 	bl	8001eb4 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 800167c:	f7ff fdc8 	bl	8001210 <MX_I2C1_Init>
	MX_ADC1_Init();
 8001680:	f7ff fcb8 	bl	8000ff4 <MX_ADC1_Init>
	MX_TIM3_Init();
 8001684:	f000 fb14 	bl	8001cb0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168e:	4819      	ldr	r0, [pc, #100]	@ (80016f4 <main+0x94>)
 8001690:	f001 fad4 	bl	8002c3c <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001694:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001698:	f000 fd22 	bl	80020e0 <HAL_Delay>
	 }
	 Gz_mean /= CALIB;
	 Ax_mean /= CALIB;
	 Ay_mean /= CALIB;*/

	HAL_TIM_PWM_Init(&htim1);
 800169c:	4816      	ldr	r0, [pc, #88]	@ (80016f8 <main+0x98>)
 800169e:	f002 f98a 	bl	80039b6 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 80016a2:	4816      	ldr	r0, [pc, #88]	@ (80016fc <main+0x9c>)
 80016a4:	f002 f987 	bl	80039b6 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016a8:	2100      	movs	r1, #0
 80016aa:	4813      	ldr	r0, [pc, #76]	@ (80016f8 <main+0x98>)
 80016ac:	f002 f9dc 	bl	8003a68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80016b0:	2108      	movs	r1, #8
 80016b2:	4812      	ldr	r0, [pc, #72]	@ (80016fc <main+0x9c>)
 80016b4:	f002 f9d8 	bl	8003a68 <HAL_TIM_PWM_Start>
	TIM1->CR1 = 0x01;
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <main+0xa0>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
	TIM2->CR1 = 0x01;
 80016be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer)); // interrupt based
 80016c6:	2201      	movs	r2, #1
 80016c8:	490e      	ldr	r1, [pc, #56]	@ (8001704 <main+0xa4>)
 80016ca:	480f      	ldr	r0, [pc, #60]	@ (8001708 <main+0xa8>)
 80016cc:	f003 f91a 	bl	8004904 <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d6:	4807      	ldr	r0, [pc, #28]	@ (80016f4 <main+0x94>)
 80016d8:	f001 fab0 	bl	8002c3c <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (rx_complete) {
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <main+0xac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0fb      	beq.n	80016dc <main+0x7c>
			execute_command(rx_buffer); // Process the command
 80016e4:	480a      	ldr	r0, [pc, #40]	@ (8001710 <main+0xb0>)
 80016e6:	f7ff fee9 	bl	80014bc <execute_command>
			rx_complete = 0; // Reset the completion flag
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <main+0xac>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
		if (rx_complete) {
 80016f0:	e7f4      	b.n	80016dc <main+0x7c>
 80016f2:	bf00      	nop
 80016f4:	40020800 	.word	0x40020800
 80016f8:	20000324 	.word	0x20000324
 80016fc:	2000036c 	.word	0x2000036c
 8001700:	40010000 	.word	0x40010000
 8001704:	2000031c 	.word	0x2000031c
 8001708:	200003fc 	.word	0x200003fc
 800170c:	20000318 	.word	0x20000318
 8001710:	200002b0 	.word	0x200002b0

08001714 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b094      	sub	sp, #80	@ 0x50
 8001718:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	2230      	movs	r2, #48	@ 0x30
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f005 f8d4 	bl	80068d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60bb      	str	r3, [r7, #8]
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <SystemClock_Config+0xd0>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a28      	ldr	r2, [pc, #160]	@ (80017e4 <SystemClock_Config+0xd0>)
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
 8001748:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <SystemClock_Config+0xd0>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	4b23      	ldr	r3, [pc, #140]	@ (80017e8 <SystemClock_Config+0xd4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001760:	4a21      	ldr	r2, [pc, #132]	@ (80017e8 <SystemClock_Config+0xd4>)
 8001762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <SystemClock_Config+0xd4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001774:	2301      	movs	r3, #1
 8001776:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001778:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800177e:	2302      	movs	r3, #2
 8001780:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001782:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001786:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 20;
 8001788:	2314      	movs	r3, #20
 800178a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 128;
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001790:	2302      	movs	r3, #2
 8001792:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001794:	2304      	movs	r3, #4
 8001796:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001798:	f107 0320 	add.w	r3, r7, #32
 800179c:	4618      	mov	r0, r3
 800179e:	f001 fbab 	bl	8002ef8 <HAL_RCC_OscConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0x98>
		Error_Handler();
 80017a8:	f000 f820 	bl	80017ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017ac:	230f      	movs	r3, #15
 80017ae:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b0:	2302      	movs	r3, #2
 80017b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2102      	movs	r1, #2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 fe0d 	bl	80033e8 <HAL_RCC_ClockConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <SystemClock_Config+0xc4>
		Error_Handler();
 80017d4:	f000 f80a 	bl	80017ec <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80017d8:	f001 feec 	bl	80035b4 <HAL_RCC_EnableCSS>
}
 80017dc:	bf00      	nop
 80017de:	3750      	adds	r7, #80	@ 0x50
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000

080017ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <Error_Handler+0x8>

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <HAL_MspInit+0x4c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a0f      	ldr	r2, [pc, #60]	@ (8001844 <HAL_MspInit+0x4c>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <HAL_MspInit+0x4c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001822:	4a08      	ldr	r2, [pc, #32]	@ (8001844 <HAL_MspInit+0x4c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	@ 0x40
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_MspInit+0x4c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800184c:	f001 ffb8 	bl	80037c0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <NMI_Handler+0x8>

08001854 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <MemManage_Handler+0x4>

08001864 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <UsageFault_Handler+0x4>

08001874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a2:	f000 fbfd 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80018b0:	4802      	ldr	r0, [pc, #8]	@ (80018bc <TIM3_IRQHandler+0x10>)
 80018b2:	f002 f989 	bl	8003bc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200003b4 	.word	0x200003b4

080018c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018c4:	4802      	ldr	r0, [pc, #8]	@ (80018d0 <USART1_IRQHandler+0x10>)
 80018c6:	f003 f843 	bl	8004950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200003fc 	.word	0x200003fc

080018d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_kill>:

int _kill(int pid, int sig)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ee:	f005 f841 	bl	8006974 <__errno>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2216      	movs	r2, #22
 80018f6:	601a      	str	r2, [r3, #0]
  return -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_exit>:

void _exit (int status)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ffe7 	bl	80018e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001916:	bf00      	nop
 8001918:	e7fd      	b.n	8001916 <_exit+0x12>

0800191a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e00a      	b.n	8001942 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192c:	f3af 8000 	nop.w
 8001930:	4601      	mov	r1, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbf0      	blt.n	800192c <_read+0x12>
  }

  return len;
 800194a:	687b      	ldr	r3, [r7, #4]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e009      	b.n	800197a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbf1      	blt.n	8001966 <_write+0x12>
  }
  return len;
 8001982:	687b      	ldr	r3, [r7, #4]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_close>:

int _close(int file)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b4:	605a      	str	r2, [r3, #4]
  return 0;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_isatty>:

int _isatty(int file)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f004 ffa6 	bl	8006974 <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20010000 	.word	0x20010000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	20000320 	.word	0x20000320
 8001a5c:	20000598 	.word	0x20000598

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b096      	sub	sp, #88	@ 0x58
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	615a      	str	r2, [r3, #20]
 8001ab4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 ff07 	bl	80068d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8001bc0 <MX_TIM1_Init+0x13c>)
 8001ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8001ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001aca:	2227      	movs	r2, #39	@ 0x27
 8001acc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b3b      	ldr	r3, [pc, #236]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8001ad4:	4b39      	ldr	r3, [pc, #228]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001ad6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001ada:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001adc:	4b37      	ldr	r3, [pc, #220]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ae2:	4b36      	ldr	r3, [pc, #216]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae8:	4b34      	ldr	r3, [pc, #208]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aee:	4833      	ldr	r0, [pc, #204]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001af0:	f001 fe81 	bl	80037f6 <HAL_TIM_Base_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001afa:	f7ff fe77 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b04:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b08:	4619      	mov	r1, r3
 8001b0a:	482c      	ldr	r0, [pc, #176]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001b0c:	f002 fa0e 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b16:	f7ff fe69 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b1a:	4828      	ldr	r0, [pc, #160]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001b1c:	f001 ff4b 	bl	80039b6 <HAL_TIM_PWM_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b26:	f7ff fe61 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b36:	4619      	mov	r1, r3
 8001b38:	4820      	ldr	r0, [pc, #128]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001b3a:	f002 fdbf 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b44:	f7ff fe52 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b48:	2360      	movs	r3, #96	@ 0x60
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4813      	ldr	r0, [pc, #76]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001b6e:	f002 f91b 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001b78:	f7ff fe38 	bl	80017ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4807      	ldr	r0, [pc, #28]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001ba0:	f002 fdfa 	bl	8004798 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001baa:	f7ff fe1f 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bae:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <MX_TIM1_Init+0x138>)
 8001bb0:	f000 f91e 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 8001bb4:	bf00      	nop
 8001bb6:	3758      	adds	r7, #88	@ 0x58
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000324 	.word	0x20000324
 8001bc0:	40010000 	.word	0x40010000

08001bc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	@ 0x38
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	f107 0320 	add.w	r3, r7, #32
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	615a      	str	r2, [r3, #20]
 8001bf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001bfe:	2227      	movs	r2, #39	@ 0x27
 8001c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8001c08:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c0a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001c0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c1c:	4823      	ldr	r0, [pc, #140]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c1e:	f001 fdea 	bl	80037f6 <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c28:	f7ff fde0 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c36:	4619      	mov	r1, r3
 8001c38:	481c      	ldr	r0, [pc, #112]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c3a:	f002 f977 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c44:	f7ff fdd2 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c48:	4818      	ldr	r0, [pc, #96]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c4a:	f001 feb4 	bl	80039b6 <HAL_TIM_PWM_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c54:	f7ff fdca 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	4619      	mov	r1, r3
 8001c66:	4811      	ldr	r0, [pc, #68]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c68:	f002 fd28 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c72:	f7ff fdbb 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c76:	2360      	movs	r3, #96	@ 0x60
 8001c78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2208      	movs	r2, #8
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c8e:	f002 f88b 	bl	8003da8 <HAL_TIM_PWM_ConfigChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c98:	f7ff fda8 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c9c:	4803      	ldr	r0, [pc, #12]	@ (8001cac <MX_TIM2_Init+0xe8>)
 8001c9e:	f000 f8a7 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 8001ca2:	bf00      	nop
 8001ca4:	3738      	adds	r7, #56	@ 0x38
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000036c 	.word	0x2000036c

08001cb0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
//
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
//
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d44 <MX_TIM3_Init+0x94>)
 8001cce:	4a1e      	ldr	r2, [pc, #120]	@ (8001d48 <MX_TIM3_Init+0x98>)
 8001cd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d44 <MX_TIM3_Init+0x94>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <MX_TIM3_Init+0x94>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 8001cde:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <MX_TIM3_Init+0x94>)
 8001ce0:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001ce4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <MX_TIM3_Init+0x94>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cec:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <MX_TIM3_Init+0x94>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cf2:	4814      	ldr	r0, [pc, #80]	@ (8001d44 <MX_TIM3_Init+0x94>)
 8001cf4:	f001 fd7f 	bl	80037f6 <HAL_TIM_Base_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cfe:	f7ff fd75 	bl	80017ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	480d      	ldr	r0, [pc, #52]	@ (8001d44 <MX_TIM3_Init+0x94>)
 8001d10:	f002 f90c 	bl	8003f2c <HAL_TIM_ConfigClockSource>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d1a:	f7ff fd67 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d26:	463b      	mov	r3, r7
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4806      	ldr	r0, [pc, #24]	@ (8001d44 <MX_TIM3_Init+0x94>)
 8001d2c:	f002 fcc6 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d36:	f7ff fd59 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
//
  /* USER CODE END TIM3_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200003b4 	.word	0x200003b4
 8001d48:	40000400 	.word	0x40000400

08001d4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a22      	ldr	r2, [pc, #136]	@ (8001de4 <HAL_TIM_Base_MspInit+0x98>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10e      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d66:	4a20      	ldr	r2, [pc, #128]	@ (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d7a:	e02e      	b.n	8001dda <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d84:	d10e      	bne.n	8001da4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	4a16      	ldr	r2, [pc, #88]	@ (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d96:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
}
 8001da2:	e01a      	b.n	8001dda <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a10      	ldr	r2, [pc, #64]	@ (8001dec <HAL_TIM_Base_MspInit+0xa0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d115      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a0c      	ldr	r2, [pc, #48]	@ (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_TIM_Base_MspInit+0x9c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	201d      	movs	r0, #29
 8001dd0:	f000 fce7 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dd4:	201d      	movs	r0, #29
 8001dd6:	f000 fd00 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40010000 	.word	0x40010000
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40000400 	.word	0x40000400

08001df0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a25      	ldr	r2, [pc, #148]	@ (8001ea4 <HAL_TIM_MspPostInit+0xb4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d11f      	bne.n	8001e52 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb8>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb8>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b21      	ldr	r3, [pc, #132]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb8>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4818      	ldr	r0, [pc, #96]	@ (8001eac <HAL_TIM_MspPostInit+0xbc>)
 8001e4c:	f000 fd72 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e50:	e023      	b.n	8001e9a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e5a:	d11e      	bne.n	8001e9a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb8>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb8>)
 8001e66:	f043 0302 	orr.w	r3, r3, #2
 8001e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb8>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4806      	ldr	r0, [pc, #24]	@ (8001eb0 <HAL_TIM_MspPostInit+0xc0>)
 8001e96:	f000 fd4d 	bl	8002934 <HAL_GPIO_Init>
}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	@ 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <MX_USART1_UART_Init+0x50>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eec:	f002 fcba 	bl	8004864 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ef6:	f7ff fc79 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200003fc 	.word	0x200003fc
 8001f04:	40011000 	.word	0x40011000

08001f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1d      	ldr	r2, [pc, #116]	@ (8001f9c <HAL_UART_MspInit+0x94>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d134      	bne.n	8001f94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa0 <HAL_UART_MspInit+0x98>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa0 <HAL_UART_MspInit+0x98>)
 8001f34:	f043 0310 	orr.w	r3, r3, #16
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <HAL_UART_MspInit+0x98>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_UART_MspInit+0x98>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a14      	ldr	r2, [pc, #80]	@ (8001fa0 <HAL_UART_MspInit+0x98>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <HAL_UART_MspInit+0x98>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f74:	2307      	movs	r3, #7
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4809      	ldr	r0, [pc, #36]	@ (8001fa4 <HAL_UART_MspInit+0x9c>)
 8001f80:	f000 fcd8 	bl	8002934 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2025      	movs	r0, #37	@ 0x25
 8001f8a:	f000 fc0a 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f8e:	2025      	movs	r0, #37	@ 0x25
 8001f90:	f000 fc23 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	@ 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40011000 	.word	0x40011000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000

08001fa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fa8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fe0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fac:	480d      	ldr	r0, [pc, #52]	@ (8001fe4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fae:	490e      	ldr	r1, [pc, #56]	@ (8001fe8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8001fec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb4:	e002      	b.n	8001fbc <LoopCopyDataInit>

08001fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fba:	3304      	adds	r3, #4

08001fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc0:	d3f9      	bcc.n	8001fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc4:	4c0b      	ldr	r4, [pc, #44]	@ (8001ff4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc8:	e001      	b.n	8001fce <LoopFillZerobss>

08001fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fcc:	3204      	adds	r2, #4

08001fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd0:	d3fb      	bcc.n	8001fca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fd2:	f7ff fd45 	bl	8001a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd6:	f004 fcd3 	bl	8006980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fda:	f7ff fb41 	bl	8001660 <main>
  bx  lr    
 8001fde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fe0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001fec:	0800ac3c 	.word	0x0800ac3c
  ldr r2, =_sbss
 8001ff0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001ff4:	20000594 	.word	0x20000594

08001ff8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff8:	e7fe      	b.n	8001ff8 <ADC_IRQHandler>
	...

08001ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002000:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	@ (800203c <HAL_Init+0x40>)
 8002006:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800200a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800200c:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <HAL_Init+0x40>)
 8002012:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002016:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a07      	ldr	r2, [pc, #28]	@ (800203c <HAL_Init+0x40>)
 800201e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002022:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 fbb1 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202a:	200f      	movs	r0, #15
 800202c:	f000 f808 	bl	8002040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002030:	f7ff fbe2 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_InitTick+0x54>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_InitTick+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fbc9 	bl	80027f6 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f000 fb91 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	@ (800209c <HAL_InitTick+0x5c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000024 	.word	0x20000024
 8002098:	2000002c 	.word	0x2000002c
 800209c:	20000028 	.word	0x20000028

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	2000002c 	.word	0x2000002c
 80020c4:	20000444 	.word	0x20000444

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000444 	.word	0x20000444

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000002c 	.word	0x2000002c

08002128 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e033      	b.n	80021a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7fe ffa8 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	d118      	bne.n	8002198 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800216e:	f023 0302 	bic.w	r3, r3, #2
 8002172:	f043 0202 	orr.w	r2, r3, #2
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f93a 	bl	80023f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40
 8002196:	e001      	b.n	800219c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x1c>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e105      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x228>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b09      	cmp	r3, #9
 80021da:	d925      	bls.n	8002228 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68d9      	ldr	r1, [r3, #12]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	3b1e      	subs	r3, #30
 80021f2:	2207      	movs	r2, #7
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43da      	mvns	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	400a      	ands	r2, r1
 8002200:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68d9      	ldr	r1, [r3, #12]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	4618      	mov	r0, r3
 8002214:	4603      	mov	r3, r0
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4403      	add	r3, r0
 800221a:	3b1e      	subs	r3, #30
 800221c:	409a      	lsls	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	e022      	b.n	800226e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6919      	ldr	r1, [r3, #16]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	2207      	movs	r2, #7
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	400a      	ands	r2, r1
 800224a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6919      	ldr	r1, [r3, #16]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	4618      	mov	r0, r3
 800225e:	4603      	mov	r3, r0
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4403      	add	r3, r0
 8002264:	409a      	lsls	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d824      	bhi.n	80022c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	3b05      	subs	r3, #5
 8002288:	221f      	movs	r2, #31
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	400a      	ands	r2, r1
 8002296:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	3b05      	subs	r3, #5
 80022b2:	fa00 f203 	lsl.w	r2, r0, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80022be:	e04c      	b.n	800235a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b0c      	cmp	r3, #12
 80022c6:	d824      	bhi.n	8002312 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	3b23      	subs	r3, #35	@ 0x23
 80022da:	221f      	movs	r2, #31
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43da      	mvns	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	400a      	ands	r2, r1
 80022e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3b23      	subs	r3, #35	@ 0x23
 8002304:	fa00 f203 	lsl.w	r2, r0, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002310:	e023      	b.n	800235a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	3b41      	subs	r3, #65	@ 0x41
 8002324:	221f      	movs	r2, #31
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	400a      	ands	r2, r1
 8002332:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	3b41      	subs	r3, #65	@ 0x41
 800234e:	fa00 f203 	lsl.w	r2, r0, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <HAL_ADC_ConfigChannel+0x234>)
 800235c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a21      	ldr	r2, [pc, #132]	@ (80023e8 <HAL_ADC_ConfigChannel+0x238>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d109      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1cc>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b12      	cmp	r3, #18
 800236e:	d105      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a19      	ldr	r2, [pc, #100]	@ (80023e8 <HAL_ADC_ConfigChannel+0x238>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d123      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x21e>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b10      	cmp	r3, #16
 800238c:	d003      	beq.n	8002396 <HAL_ADC_ConfigChannel+0x1e6>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b11      	cmp	r3, #17
 8002394:	d11b      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b10      	cmp	r3, #16
 80023a8:	d111      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <HAL_ADC_ConfigChannel+0x23c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a10      	ldr	r2, [pc, #64]	@ (80023f0 <HAL_ADC_ConfigChannel+0x240>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	0c9a      	lsrs	r2, r3, #18
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023c0:	e002      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f9      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40012300 	.word	0x40012300
 80023e8:	40012000 	.word	0x40012000
 80023ec:	20000024 	.word	0x20000024
 80023f0:	431bde83 	.word	0x431bde83

080023f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fc:	4b79      	ldr	r3, [pc, #484]	@ (80025e4 <ADC_Init+0x1f0>)
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	431a      	orrs	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002428:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800244c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	4a58      	ldr	r2, [pc, #352]	@ (80025e8 <ADC_Init+0x1f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800249a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e00f      	b.n	80024f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0202 	bic.w	r2, r2, #2
 8002500:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e1b      	ldrb	r3, [r3, #24]
 800250c:	005a      	lsls	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800252e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800253e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	3b01      	subs	r3, #1
 800254c:	035a      	lsls	r2, r3, #13
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	e007      	b.n	8002568 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002566:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	3b01      	subs	r3, #1
 8002584:	051a      	lsls	r2, r3, #20
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800259c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025aa:	025a      	lsls	r2, r3, #9
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	029a      	lsls	r2, r3, #10
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40012300 	.word	0x40012300
 80025e8:	0f000001 	.word	0x0f000001

080025ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002608:	4013      	ands	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002614:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800261e:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <__NVIC_SetPriorityGrouping+0x44>)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <__NVIC_GetPriorityGrouping+0x18>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	f003 0307 	and.w	r3, r3, #7
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	2b00      	cmp	r3, #0
 8002660:	db0b      	blt.n	800267a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	f003 021f 	and.w	r2, r3, #31
 8002668:	4907      	ldr	r1, [pc, #28]	@ (8002688 <__NVIC_EnableIRQ+0x38>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2001      	movs	r0, #1
 8002672:	fa00 f202 	lsl.w	r2, r0, r2
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	e000e100 	.word	0xe000e100

0800268c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	db0a      	blt.n	80026b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	490c      	ldr	r1, [pc, #48]	@ (80026d8 <__NVIC_SetPriority+0x4c>)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	0112      	lsls	r2, r2, #4
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b4:	e00a      	b.n	80026cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	4908      	ldr	r1, [pc, #32]	@ (80026dc <__NVIC_SetPriority+0x50>)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	3b04      	subs	r3, #4
 80026c4:	0112      	lsls	r2, r2, #4
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	440b      	add	r3, r1
 80026ca:	761a      	strb	r2, [r3, #24]
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	@ 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f1c3 0307 	rsb	r3, r3, #7
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	bf28      	it	cs
 80026fe:	2304      	movcs	r3, #4
 8002700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3304      	adds	r3, #4
 8002706:	2b06      	cmp	r3, #6
 8002708:	d902      	bls.n	8002710 <NVIC_EncodePriority+0x30>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3b03      	subs	r3, #3
 800270e:	e000      	b.n	8002712 <NVIC_EncodePriority+0x32>
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 32ff 	mov.w	r2, #4294967295
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43da      	mvns	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	401a      	ands	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002728:	f04f 31ff 	mov.w	r1, #4294967295
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	43d9      	mvns	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	4313      	orrs	r3, r2
         );
}
 800273a:	4618      	mov	r0, r3
 800273c:	3724      	adds	r7, #36	@ 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	@ (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f7ff ff8e 	bl	800268c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	@ (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff29 	bl	80025ec <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff3e 	bl	8002634 <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff8e 	bl	80026e0 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5d 	bl	800268c <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff31 	bl	8002650 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff fc54 	bl	80020c8 <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d008      	beq.n	8002840 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2280      	movs	r2, #128	@ 0x80
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e052      	b.n	80028e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0216 	bic.w	r2, r2, #22
 800284e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695a      	ldr	r2, [r3, #20]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800285e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <HAL_DMA_Abort+0x62>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0208 	bic.w	r2, r2, #8
 800287e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002890:	e013      	b.n	80028ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002892:	f7ff fc19 	bl	80020c8 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b05      	cmp	r3, #5
 800289e:	d90c      	bls.n	80028ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2220      	movs	r2, #32
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2203      	movs	r2, #3
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e015      	b.n	80028e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1e4      	bne.n	8002892 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028cc:	223f      	movs	r2, #63	@ 0x3f
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e00c      	b.n	8002926 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2205      	movs	r2, #5
 8002910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	@ 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e159      	b.n	8002c04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	f040 8148 	bne.w	8002bfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d005      	beq.n	8002986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	2b02      	cmp	r3, #2
 8002984:	d130      	bne.n	80029e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0201 	and.w	r2, r3, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d017      	beq.n	8002a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d123      	bne.n	8002a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	08da      	lsrs	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3208      	adds	r2, #8
 8002a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	220f      	movs	r2, #15
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a2 	beq.w	8002bfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b57      	ldr	r3, [pc, #348]	@ (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	4a56      	ldr	r2, [pc, #344]	@ (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aca:	4b54      	ldr	r3, [pc, #336]	@ (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad6:	4a52      	ldr	r2, [pc, #328]	@ (8002c20 <HAL_GPIO_Init+0x2ec>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a49      	ldr	r2, [pc, #292]	@ (8002c24 <HAL_GPIO_Init+0x2f0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_GPIO_Init+0x202>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a48      	ldr	r2, [pc, #288]	@ (8002c28 <HAL_GPIO_Init+0x2f4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0x1fe>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a47      	ldr	r2, [pc, #284]	@ (8002c2c <HAL_GPIO_Init+0x2f8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a46      	ldr	r2, [pc, #280]	@ (8002c30 <HAL_GPIO_Init+0x2fc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x1f6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a45      	ldr	r2, [pc, #276]	@ (8002c34 <HAL_GPIO_Init+0x300>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_Init+0x1f2>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e008      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e004      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b36:	2300      	movs	r3, #0
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f002 0203 	and.w	r2, r2, #3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4093      	lsls	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b48:	4935      	ldr	r1, [pc, #212]	@ (8002c20 <HAL_GPIO_Init+0x2ec>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b56:	4b38      	ldr	r3, [pc, #224]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b80:	4b2d      	ldr	r3, [pc, #180]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba4:	4a24      	ldr	r2, [pc, #144]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002baa:	4b23      	ldr	r3, [pc, #140]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bce:	4a1a      	ldr	r2, [pc, #104]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd4:	4b18      	ldr	r3, [pc, #96]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8002c38 <HAL_GPIO_Init+0x304>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	f67f aea2 	bls.w	8002950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3724      	adds	r7, #36	@ 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40013c00 	.word	0x40013c00

08002c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c58:	e003      	b.n	8002c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e12b      	b.n	8002eda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe fae8 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2224      	movs	r2, #36	@ 0x24
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cd4:	f000 fd4c 	bl	8003770 <HAL_RCC_GetPCLK1Freq>
 8002cd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	4a81      	ldr	r2, [pc, #516]	@ (8002ee4 <HAL_I2C_Init+0x274>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d807      	bhi.n	8002cf4 <HAL_I2C_Init+0x84>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a80      	ldr	r2, [pc, #512]	@ (8002ee8 <HAL_I2C_Init+0x278>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bf94      	ite	ls
 8002cec:	2301      	movls	r3, #1
 8002cee:	2300      	movhi	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e006      	b.n	8002d02 <HAL_I2C_Init+0x92>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a7d      	ldr	r2, [pc, #500]	@ (8002eec <HAL_I2C_Init+0x27c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	bf94      	ite	ls
 8002cfc:	2301      	movls	r3, #1
 8002cfe:	2300      	movhi	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0e7      	b.n	8002eda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a78      	ldr	r2, [pc, #480]	@ (8002ef0 <HAL_I2C_Init+0x280>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0c9b      	lsrs	r3, r3, #18
 8002d14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a6a      	ldr	r2, [pc, #424]	@ (8002ee4 <HAL_I2C_Init+0x274>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d802      	bhi.n	8002d44 <HAL_I2C_Init+0xd4>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	3301      	adds	r3, #1
 8002d42:	e009      	b.n	8002d58 <HAL_I2C_Init+0xe8>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	4a69      	ldr	r2, [pc, #420]	@ (8002ef4 <HAL_I2C_Init+0x284>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	099b      	lsrs	r3, r3, #6
 8002d56:	3301      	adds	r3, #1
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	495c      	ldr	r1, [pc, #368]	@ (8002ee4 <HAL_I2C_Init+0x274>)
 8002d74:	428b      	cmp	r3, r1
 8002d76:	d819      	bhi.n	8002dac <HAL_I2C_Init+0x13c>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	1e59      	subs	r1, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d86:	1c59      	adds	r1, r3, #1
 8002d88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d8c:	400b      	ands	r3, r1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_I2C_Init+0x138>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1e59      	subs	r1, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da6:	e051      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002da8:	2304      	movs	r3, #4
 8002daa:	e04f      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d111      	bne.n	8002dd8 <HAL_I2C_Init+0x168>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	1e58      	subs	r0, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	440b      	add	r3, r1
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e012      	b.n	8002dfe <HAL_I2C_Init+0x18e>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1e58      	subs	r0, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6859      	ldr	r1, [r3, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	0099      	lsls	r1, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Init+0x196>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e022      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10e      	bne.n	8002e2c <HAL_I2C_Init+0x1bc>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1e58      	subs	r0, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	440b      	add	r3, r1
 8002e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e2a:	e00f      	b.n	8002e4c <HAL_I2C_Init+0x1dc>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e58      	subs	r0, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	0099      	lsls	r1, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e42:	3301      	adds	r3, #1
 8002e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	6809      	ldr	r1, [r1, #0]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6911      	ldr	r1, [r2, #16]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68d2      	ldr	r2, [r2, #12]
 8002e86:	4311      	orrs	r1, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	000186a0 	.word	0x000186a0
 8002ee8:	001e847f 	.word	0x001e847f
 8002eec:	003d08ff 	.word	0x003d08ff
 8002ef0:	431bde83 	.word	0x431bde83
 8002ef4:	10624dd3 	.word	0x10624dd3

08002ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e267      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d075      	beq.n	8003002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f16:	4b88      	ldr	r3, [pc, #544]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d00c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b85      	ldr	r3, [pc, #532]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d112      	bne.n	8002f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b82      	ldr	r3, [pc, #520]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3a:	d10b      	bne.n	8002f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05b      	beq.n	8003000 <HAL_RCC_OscConfig+0x108>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d157      	bne.n	8003000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e242      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCC_OscConfig+0x74>
 8002f5e:	4b76      	ldr	r3, [pc, #472]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a75      	ldr	r2, [pc, #468]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xb0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x98>
 8002f76:	4b70      	ldr	r3, [pc, #448]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a6f      	ldr	r2, [pc, #444]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b6d      	ldr	r3, [pc, #436]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6c      	ldr	r2, [pc, #432]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xb0>
 8002f90:	4b69      	ldr	r3, [pc, #420]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a68      	ldr	r2, [pc, #416]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b66      	ldr	r3, [pc, #408]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a65      	ldr	r2, [pc, #404]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7ff f88a 	bl	80020c8 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7ff f886 	bl	80020c8 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	@ 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e207      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b5b      	ldr	r3, [pc, #364]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xc0>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7ff f876 	bl	80020c8 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7ff f872 	bl	80020c8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	@ 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1f3      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b51      	ldr	r3, [pc, #324]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xe8>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d063      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300e:	4b4a      	ldr	r3, [pc, #296]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301a:	4b47      	ldr	r3, [pc, #284]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003022:	2b08      	cmp	r3, #8
 8003024:	d11c      	bne.n	8003060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003026:	4b44      	ldr	r3, [pc, #272]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	4b41      	ldr	r3, [pc, #260]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RCC_OscConfig+0x152>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1c7      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4937      	ldr	r1, [pc, #220]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	e03a      	b.n	80030d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003068:	4b34      	ldr	r3, [pc, #208]	@ (800313c <HAL_RCC_OscConfig+0x244>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7ff f82b 	bl	80020c8 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003076:	f7ff f827 	bl	80020c8 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1a8      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	4b2b      	ldr	r3, [pc, #172]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b28      	ldr	r3, [pc, #160]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4925      	ldr	r1, [pc, #148]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
 80030a8:	e015      	b.n	80030d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_RCC_OscConfig+0x244>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7ff f80a 	bl	80020c8 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b8:	f7ff f806 	bl	80020c8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e187      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d036      	beq.n	8003150 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b15      	ldr	r3, [pc, #84]	@ (8003140 <HAL_RCC_OscConfig+0x248>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fe ffea 	bl	80020c8 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f8:	f7fe ffe6 	bl	80020c8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e167      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_RCC_OscConfig+0x240>)
 800310c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x200>
 8003116:	e01b      	b.n	8003150 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003118:	4b09      	ldr	r3, [pc, #36]	@ (8003140 <HAL_RCC_OscConfig+0x248>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7fe ffd3 	bl	80020c8 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	e00e      	b.n	8003144 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003126:	f7fe ffcf 	bl	80020c8 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d907      	bls.n	8003144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e150      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
 8003138:	40023800 	.word	0x40023800
 800313c:	42470000 	.word	0x42470000
 8003140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b88      	ldr	r3, [pc, #544]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ea      	bne.n	8003126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8097 	beq.w	800328c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b81      	ldr	r3, [pc, #516]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	4b7d      	ldr	r3, [pc, #500]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	4a7c      	ldr	r2, [pc, #496]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800317c:	6413      	str	r3, [r2, #64]	@ 0x40
 800317e:	4b7a      	ldr	r3, [pc, #488]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b77      	ldr	r3, [pc, #476]	@ (800336c <HAL_RCC_OscConfig+0x474>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b74      	ldr	r3, [pc, #464]	@ (800336c <HAL_RCC_OscConfig+0x474>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a73      	ldr	r2, [pc, #460]	@ (800336c <HAL_RCC_OscConfig+0x474>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7fe ff8f 	bl	80020c8 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7fe ff8b 	bl	80020c8 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e10c      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b6a      	ldr	r3, [pc, #424]	@ (800336c <HAL_RCC_OscConfig+0x474>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x2ea>
 80031d4:	4b64      	ldr	r3, [pc, #400]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d8:	4a63      	ldr	r2, [pc, #396]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e0:	e01c      	b.n	800321c <HAL_RCC_OscConfig+0x324>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x30c>
 80031ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6713      	str	r3, [r2, #112]	@ 0x70
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0x324>
 8003204:	4b58      	ldr	r3, [pc, #352]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003208:	4a57      	ldr	r2, [pc, #348]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003210:	4b55      	ldr	r3, [pc, #340]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003214:	4a54      	ldr	r2, [pc, #336]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003216:	f023 0304 	bic.w	r3, r3, #4
 800321a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fe ff50 	bl	80020c8 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fe ff4c 	bl	80020c8 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0cb      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	4b49      	ldr	r3, [pc, #292]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ee      	beq.n	800322c <HAL_RCC_OscConfig+0x334>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7fe ff3a 	bl	80020c8 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003256:	e00a      	b.n	800326e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fe ff36 	bl	80020c8 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e0b5      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326e:	4b3e      	ldr	r3, [pc, #248]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ee      	bne.n	8003258 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003280:	4b39      	ldr	r3, [pc, #228]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	4a38      	ldr	r2, [pc, #224]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003286:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800328a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80a1 	beq.w	80033d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003296:	4b34      	ldr	r3, [pc, #208]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d05c      	beq.n	800335c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d141      	bne.n	800332e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <HAL_RCC_OscConfig+0x478>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fe ff0a 	bl	80020c8 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fe ff06 	bl	80020c8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e087      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	4b27      	ldr	r3, [pc, #156]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e4:	019b      	lsls	r3, r3, #6
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	3b01      	subs	r3, #1
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	491b      	ldr	r1, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003300:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <HAL_RCC_OscConfig+0x478>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fe fedf 	bl	80020c8 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330e:	f7fe fedb 	bl	80020c8 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e05c      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003320:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x416>
 800332c:	e054      	b.n	80033d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <HAL_RCC_OscConfig+0x478>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fe fec8 	bl	80020c8 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe fec4 	bl	80020c8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e045      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCC_OscConfig+0x470>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x444>
 800335a:	e03d      	b.n	80033d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e038      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
 8003368:	40023800 	.word	0x40023800
 800336c:	40007000 	.word	0x40007000
 8003370:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003374:	4b1b      	ldr	r3, [pc, #108]	@ (80033e4 <HAL_RCC_OscConfig+0x4ec>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d028      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d121      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d11a      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033a4:	4013      	ands	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d111      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	3b01      	subs	r3, #1
 80033be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800

080033e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0cc      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b68      	ldr	r3, [pc, #416]	@ (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d90c      	bls.n	8003424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b65      	ldr	r3, [pc, #404]	@ (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b63      	ldr	r3, [pc, #396]	@ (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0b8      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800343c:	4b59      	ldr	r3, [pc, #356]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a58      	ldr	r2, [pc, #352]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003454:	4b53      	ldr	r3, [pc, #332]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a52      	ldr	r2, [pc, #328]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800345e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003460:	4b50      	ldr	r3, [pc, #320]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	494d      	ldr	r1, [pc, #308]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d044      	beq.n	8003508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b47      	ldr	r3, [pc, #284]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d119      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e07f      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4b3f      	ldr	r3, [pc, #252]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e06f      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	4b3b      	ldr	r3, [pc, #236]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e067      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c6:	4b37      	ldr	r3, [pc, #220]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4934      	ldr	r1, [pc, #208]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d8:	f7fe fdf6 	bl	80020c8 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fe fdf2 	bl	80020c8 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e04f      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	4b2b      	ldr	r3, [pc, #172]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 020c 	and.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d1eb      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003508:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d20c      	bcs.n	8003530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b22      	ldr	r3, [pc, #136]	@ (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b20      	ldr	r3, [pc, #128]	@ (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e032      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800353c:	4b19      	ldr	r3, [pc, #100]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4916      	ldr	r1, [pc, #88]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355a:	4b12      	ldr	r3, [pc, #72]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	490e      	ldr	r1, [pc, #56]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800356e:	f000 f82d 	bl	80035cc <HAL_RCC_GetSysClockFreq>
 8003572:	4602      	mov	r2, r0
 8003574:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	490a      	ldr	r1, [pc, #40]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	5ccb      	ldrb	r3, [r1, r3]
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	4a09      	ldr	r2, [pc, #36]	@ (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800358a:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fd56 	bl	8002040 <HAL_InitTick>

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023c00 	.word	0x40023c00
 80035a4:	40023800 	.word	0x40023800
 80035a8:	0800a7c8 	.word	0x0800a7c8
 80035ac:	20000024 	.word	0x20000024
 80035b0:	20000028 	.word	0x20000028

080035b4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80035b8:	4b03      	ldr	r3, [pc, #12]	@ (80035c8 <HAL_RCC_EnableCSS+0x14>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	4247004c 	.word	0x4247004c

080035cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d0:	b090      	sub	sp, #64	@ 0x40
 80035d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80035d8:	2300      	movs	r3, #0
 80035da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035dc:	2300      	movs	r3, #0
 80035de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e4:	4b59      	ldr	r3, [pc, #356]	@ (800374c <HAL_RCC_GetSysClockFreq+0x180>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d00d      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x40>
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	f200 80a1 	bhi.w	8003738 <HAL_RCC_GetSysClockFreq+0x16c>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x34>
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d003      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0x3a>
 80035fe:	e09b      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b53      	ldr	r3, [pc, #332]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x184>)
 8003602:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003604:	e09b      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003606:	4b53      	ldr	r3, [pc, #332]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x188>)
 8003608:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800360a:	e098      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800360c:	4b4f      	ldr	r3, [pc, #316]	@ (800374c <HAL_RCC_GetSysClockFreq+0x180>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003614:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003616:	4b4d      	ldr	r3, [pc, #308]	@ (800374c <HAL_RCC_GetSysClockFreq+0x180>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d028      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003622:	4b4a      	ldr	r3, [pc, #296]	@ (800374c <HAL_RCC_GetSysClockFreq+0x180>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	2200      	movs	r2, #0
 800362a:	623b      	str	r3, [r7, #32]
 800362c:	627a      	str	r2, [r7, #36]	@ 0x24
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003634:	2100      	movs	r1, #0
 8003636:	4b47      	ldr	r3, [pc, #284]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x188>)
 8003638:	fb03 f201 	mul.w	r2, r3, r1
 800363c:	2300      	movs	r3, #0
 800363e:	fb00 f303 	mul.w	r3, r0, r3
 8003642:	4413      	add	r3, r2
 8003644:	4a43      	ldr	r2, [pc, #268]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x188>)
 8003646:	fba0 1202 	umull	r1, r2, r0, r2
 800364a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800364c:	460a      	mov	r2, r1
 800364e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003652:	4413      	add	r3, r2
 8003654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	2200      	movs	r2, #0
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	61fa      	str	r2, [r7, #28]
 800365e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003662:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003666:	f7fd fb17 	bl	8000c98 <__aeabi_uldivmod>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4613      	mov	r3, r2
 8003670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003672:	e053      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003674:	4b35      	ldr	r3, [pc, #212]	@ (800374c <HAL_RCC_GetSysClockFreq+0x180>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	2200      	movs	r2, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	617a      	str	r2, [r7, #20]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003686:	f04f 0b00 	mov.w	fp, #0
 800368a:	4652      	mov	r2, sl
 800368c:	465b      	mov	r3, fp
 800368e:	f04f 0000 	mov.w	r0, #0
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	0159      	lsls	r1, r3, #5
 8003698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369c:	0150      	lsls	r0, r2, #5
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	ebb2 080a 	subs.w	r8, r2, sl
 80036a6:	eb63 090b 	sbc.w	r9, r3, fp
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036be:	ebb2 0408 	subs.w	r4, r2, r8
 80036c2:	eb63 0509 	sbc.w	r5, r3, r9
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	00eb      	lsls	r3, r5, #3
 80036d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036d4:	00e2      	lsls	r2, r4, #3
 80036d6:	4614      	mov	r4, r2
 80036d8:	461d      	mov	r5, r3
 80036da:	eb14 030a 	adds.w	r3, r4, sl
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	eb45 030b 	adc.w	r3, r5, fp
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036f2:	4629      	mov	r1, r5
 80036f4:	028b      	lsls	r3, r1, #10
 80036f6:	4621      	mov	r1, r4
 80036f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036fc:	4621      	mov	r1, r4
 80036fe:	028a      	lsls	r2, r1, #10
 8003700:	4610      	mov	r0, r2
 8003702:	4619      	mov	r1, r3
 8003704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003706:	2200      	movs	r2, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	60fa      	str	r2, [r7, #12]
 800370c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003710:	f7fd fac2 	bl	8000c98 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4613      	mov	r3, r2
 800371a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800371c:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <HAL_RCC_GetSysClockFreq+0x180>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	3301      	adds	r3, #1
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800372c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800372e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003736:	e002      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x184>)
 800373a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800373c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003740:	4618      	mov	r0, r3
 8003742:	3740      	adds	r7, #64	@ 0x40
 8003744:	46bd      	mov	sp, r7
 8003746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	00f42400 	.word	0x00f42400
 8003754:	017d7840 	.word	0x017d7840

08003758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800375c:	4b03      	ldr	r3, [pc, #12]	@ (800376c <HAL_RCC_GetHCLKFreq+0x14>)
 800375e:	681b      	ldr	r3, [r3, #0]
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000024 	.word	0x20000024

08003770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003774:	f7ff fff0 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	0a9b      	lsrs	r3, r3, #10
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4903      	ldr	r1, [pc, #12]	@ (8003794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40023800 	.word	0x40023800
 8003794:	0800a7d8 	.word	0x0800a7d8

08003798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800379c:	f7ff ffdc 	bl	8003758 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0b5b      	lsrs	r3, r3, #13
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	@ (80037bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	0800a7d8 	.word	0x0800a7d8

080037c0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80037c4:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037cc:	2b80      	cmp	r3, #128	@ 0x80
 80037ce:	d104      	bne.n	80037da <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80037d0:	f000 f80a 	bl	80037e8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80037d4:	4b03      	ldr	r3, [pc, #12]	@ (80037e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80037d6:	2280      	movs	r2, #128	@ 0x80
 80037d8:	701a      	strb	r2, [r3, #0]
  }
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	4002380e 	.word	0x4002380e

080037e8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e041      	b.n	800388c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d106      	bne.n	8003822 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fe fa95 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f000 fc69 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d001      	beq.n	80038ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e044      	b.n	8003936 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003944 <HAL_TIM_Base_Start_IT+0xb0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d018      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x6c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d6:	d013      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x6c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003948 <HAL_TIM_Base_Start_IT+0xb4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x6c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a19      	ldr	r2, [pc, #100]	@ (800394c <HAL_TIM_Base_Start_IT+0xb8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d009      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x6c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a17      	ldr	r2, [pc, #92]	@ (8003950 <HAL_TIM_Base_Start_IT+0xbc>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x6c>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a16      	ldr	r2, [pc, #88]	@ (8003954 <HAL_TIM_Base_Start_IT+0xc0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d111      	bne.n	8003924 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b06      	cmp	r3, #6
 8003910:	d010      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003922:	e007      	b.n	8003934 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40010000 	.word	0x40010000
 8003948:	40000400 	.word	0x40000400
 800394c:	40000800 	.word	0x40000800
 8003950:	40000c00 	.word	0x40000c00
 8003954:	40014000 	.word	0x40014000

08003958 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6a1a      	ldr	r2, [r3, #32]
 8003976:	f241 1311 	movw	r3, #4369	@ 0x1111
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10f      	bne.n	80039a0 <HAL_TIM_Base_Stop_IT+0x48>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	f240 4344 	movw	r3, #1092	@ 0x444
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d107      	bne.n	80039a0 <HAL_TIM_Base_Stop_IT+0x48>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e041      	b.n	8003a4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f839 	bl	8003a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4610      	mov	r0, r2
 80039f6:	f000 fb89 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <HAL_TIM_PWM_Start+0x24>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e022      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x6a>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d109      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0x3e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e015      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x6a>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d109      	bne.n	8003ac0 <HAL_TIM_PWM_Start+0x58>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e008      	b.n	8003ad2 <HAL_TIM_PWM_Start+0x6a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e068      	b.n	8003bac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d104      	bne.n	8003aea <HAL_TIM_PWM_Start+0x82>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae8:	e013      	b.n	8003b12 <HAL_TIM_PWM_Start+0xaa>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d104      	bne.n	8003afa <HAL_TIM_PWM_Start+0x92>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af8:	e00b      	b.n	8003b12 <HAL_TIM_PWM_Start+0xaa>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d104      	bne.n	8003b0a <HAL_TIM_PWM_Start+0xa2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2202      	movs	r2, #2
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b08:	e003      	b.n	8003b12 <HAL_TIM_PWM_Start+0xaa>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	6839      	ldr	r1, [r7, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fda8 	bl	8004670 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a23      	ldr	r2, [pc, #140]	@ (8003bb4 <HAL_TIM_PWM_Start+0x14c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d107      	bne.n	8003b3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb4 <HAL_TIM_PWM_Start+0x14c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d018      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x10e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b4c:	d013      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x10e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a19      	ldr	r2, [pc, #100]	@ (8003bb8 <HAL_TIM_PWM_Start+0x150>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00e      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x10e>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <HAL_TIM_PWM_Start+0x154>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d009      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x10e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a16      	ldr	r2, [pc, #88]	@ (8003bc0 <HAL_TIM_PWM_Start+0x158>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_TIM_PWM_Start+0x10e>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a14      	ldr	r2, [pc, #80]	@ (8003bc4 <HAL_TIM_PWM_Start+0x15c>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d111      	bne.n	8003b9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b06      	cmp	r3, #6
 8003b86:	d010      	beq.n	8003baa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b98:	e007      	b.n	8003baa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40014000 	.word	0x40014000

08003bc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d020      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0202 	mvn.w	r2, #2
 8003bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fa5b 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa4d 	bl	80040ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fa5e 	bl	80040e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d020      	beq.n	8003c78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01b      	beq.n	8003c78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0204 	mvn.w	r2, #4
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fa35 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa27 	bl	80040ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 fa38 	bl	80040e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d020      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01b      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0208 	mvn.w	r2, #8
 8003c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2204      	movs	r2, #4
 8003c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fa0f 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa01 	bl	80040ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fa12 	bl	80040e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d020      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d01b      	beq.n	8003d10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0210 	mvn.w	r2, #16
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9e9 	bl	80040ce <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9db 	bl	80040ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f9ec 	bl	80040e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00c      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d007      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f06f 0201 	mvn.w	r2, #1
 8003d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fb1e 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fd7c 	bl	8004850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00c      	beq.n	8003d7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9bd 	bl	80040f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00c      	beq.n	8003da0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d007      	beq.n	8003da0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0220 	mvn.w	r2, #32
 8003d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fd4e 	bl	800483c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0ae      	b.n	8003f24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	f200 809f 	bhi.w	8003f14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003e11 	.word	0x08003e11
 8003de0:	08003f15 	.word	0x08003f15
 8003de4:	08003f15 	.word	0x08003f15
 8003de8:	08003f15 	.word	0x08003f15
 8003dec:	08003e51 	.word	0x08003e51
 8003df0:	08003f15 	.word	0x08003f15
 8003df4:	08003f15 	.word	0x08003f15
 8003df8:	08003f15 	.word	0x08003f15
 8003dfc:	08003e93 	.word	0x08003e93
 8003e00:	08003f15 	.word	0x08003f15
 8003e04:	08003f15 	.word	0x08003f15
 8003e08:	08003f15 	.word	0x08003f15
 8003e0c:	08003ed3 	.word	0x08003ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fa04 	bl	8004224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0208 	orr.w	r2, r2, #8
 8003e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0204 	bic.w	r2, r2, #4
 8003e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6999      	ldr	r1, [r3, #24]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	619a      	str	r2, [r3, #24]
      break;
 8003e4e:	e064      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fa4a 	bl	80042f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6999      	ldr	r1, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	021a      	lsls	r2, r3, #8
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	619a      	str	r2, [r3, #24]
      break;
 8003e90:	e043      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fa95 	bl	80043c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0208 	orr.w	r2, r2, #8
 8003eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69da      	ldr	r2, [r3, #28]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0204 	bic.w	r2, r2, #4
 8003ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69d9      	ldr	r1, [r3, #28]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	61da      	str	r2, [r3, #28]
      break;
 8003ed0:	e023      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fadf 	bl	800449c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69d9      	ldr	r1, [r3, #28]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	021a      	lsls	r2, r3, #8
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	61da      	str	r2, [r3, #28]
      break;
 8003f12:	e002      	b.n	8003f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	75fb      	strb	r3, [r7, #23]
      break;
 8003f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_TIM_ConfigClockSource+0x1c>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e0b4      	b.n	80040b2 <HAL_TIM_ConfigClockSource+0x186>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f80:	d03e      	beq.n	8004000 <HAL_TIM_ConfigClockSource+0xd4>
 8003f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f86:	f200 8087 	bhi.w	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f8e:	f000 8086 	beq.w	800409e <HAL_TIM_ConfigClockSource+0x172>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f96:	d87f      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003f98:	2b70      	cmp	r3, #112	@ 0x70
 8003f9a:	d01a      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8003f9c:	2b70      	cmp	r3, #112	@ 0x70
 8003f9e:	d87b      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa0:	2b60      	cmp	r3, #96	@ 0x60
 8003fa2:	d050      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0x11a>
 8003fa4:	2b60      	cmp	r3, #96	@ 0x60
 8003fa6:	d877      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa8:	2b50      	cmp	r3, #80	@ 0x50
 8003faa:	d03c      	beq.n	8004026 <HAL_TIM_ConfigClockSource+0xfa>
 8003fac:	2b50      	cmp	r3, #80	@ 0x50
 8003fae:	d873      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb0:	2b40      	cmp	r3, #64	@ 0x40
 8003fb2:	d058      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x13a>
 8003fb4:	2b40      	cmp	r3, #64	@ 0x40
 8003fb6:	d86f      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb8:	2b30      	cmp	r3, #48	@ 0x30
 8003fba:	d064      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x15a>
 8003fbc:	2b30      	cmp	r3, #48	@ 0x30
 8003fbe:	d86b      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d060      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x15a>
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d867      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d05c      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x15a>
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d05a      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x15a>
 8003fd0:	e062      	b.n	8004098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fe2:	f000 fb25 	bl	8004630 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	609a      	str	r2, [r3, #8]
      break;
 8003ffe:	e04f      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004010:	f000 fb0e 	bl	8004630 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004022:	609a      	str	r2, [r3, #8]
      break;
 8004024:	e03c      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004032:	461a      	mov	r2, r3
 8004034:	f000 fa82 	bl	800453c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2150      	movs	r1, #80	@ 0x50
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fadb 	bl	80045fa <TIM_ITRx_SetConfig>
      break;
 8004044:	e02c      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004052:	461a      	mov	r2, r3
 8004054:	f000 faa1 	bl	800459a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2160      	movs	r1, #96	@ 0x60
 800405e:	4618      	mov	r0, r3
 8004060:	f000 facb 	bl	80045fa <TIM_ITRx_SetConfig>
      break;
 8004064:	e01c      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004072:	461a      	mov	r2, r3
 8004074:	f000 fa62 	bl	800453c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2140      	movs	r1, #64	@ 0x40
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fabb 	bl	80045fa <TIM_ITRx_SetConfig>
      break;
 8004084:	e00c      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f000 fab2 	bl	80045fa <TIM_ITRx_SetConfig>
      break;
 8004096:	e003      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      break;
 800409c:	e000      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800409e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3a      	ldr	r2, [pc, #232]	@ (8004208 <TIM_Base_SetConfig+0xfc>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00f      	beq.n	8004144 <TIM_Base_SetConfig+0x38>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412a:	d00b      	beq.n	8004144 <TIM_Base_SetConfig+0x38>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a37      	ldr	r2, [pc, #220]	@ (800420c <TIM_Base_SetConfig+0x100>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <TIM_Base_SetConfig+0x38>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a36      	ldr	r2, [pc, #216]	@ (8004210 <TIM_Base_SetConfig+0x104>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0x38>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a35      	ldr	r2, [pc, #212]	@ (8004214 <TIM_Base_SetConfig+0x108>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d108      	bne.n	8004156 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2b      	ldr	r2, [pc, #172]	@ (8004208 <TIM_Base_SetConfig+0xfc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01b      	beq.n	8004196 <TIM_Base_SetConfig+0x8a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004164:	d017      	beq.n	8004196 <TIM_Base_SetConfig+0x8a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a28      	ldr	r2, [pc, #160]	@ (800420c <TIM_Base_SetConfig+0x100>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <TIM_Base_SetConfig+0x8a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a27      	ldr	r2, [pc, #156]	@ (8004210 <TIM_Base_SetConfig+0x104>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_Base_SetConfig+0x8a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a26      	ldr	r2, [pc, #152]	@ (8004214 <TIM_Base_SetConfig+0x108>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_Base_SetConfig+0x8a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a25      	ldr	r2, [pc, #148]	@ (8004218 <TIM_Base_SetConfig+0x10c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_Base_SetConfig+0x8a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a24      	ldr	r2, [pc, #144]	@ (800421c <TIM_Base_SetConfig+0x110>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0x8a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a23      	ldr	r2, [pc, #140]	@ (8004220 <TIM_Base_SetConfig+0x114>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800419c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004208 <TIM_Base_SetConfig+0xfc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d103      	bne.n	80041dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d105      	bne.n	80041fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f023 0201 	bic.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	611a      	str	r2, [r3, #16]
  }
}
 80041fa:	bf00      	nop
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40010000 	.word	0x40010000
 800420c:	40000400 	.word	0x40000400
 8004210:	40000800 	.word	0x40000800
 8004214:	40000c00 	.word	0x40000c00
 8004218:	40014000 	.word	0x40014000
 800421c:	40014400 	.word	0x40014400
 8004220:	40014800 	.word	0x40014800

08004224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 0201 	bic.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0303 	bic.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f023 0302 	bic.w	r3, r3, #2
 800426c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ec <TIM_OC1_SetConfig+0xc8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10c      	bne.n	800429a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0308 	bic.w	r3, r3, #8
 8004286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a13      	ldr	r2, [pc, #76]	@ (80042ec <TIM_OC1_SetConfig+0xc8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d111      	bne.n	80042c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	621a      	str	r2, [r3, #32]
}
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	40010000 	.word	0x40010000

080042f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f023 0210 	bic.w	r2, r3, #16
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f023 0320 	bic.w	r3, r3, #32
 800433a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a1e      	ldr	r2, [pc, #120]	@ (80043c4 <TIM_OC2_SetConfig+0xd4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10d      	bne.n	800436c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800436a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <TIM_OC2_SetConfig+0xd4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d113      	bne.n	800439c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800437a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40010000 	.word	0x40010000

080043c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1d      	ldr	r2, [pc, #116]	@ (8004498 <TIM_OC3_SetConfig+0xd0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10d      	bne.n	8004442 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800442c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a14      	ldr	r2, [pc, #80]	@ (8004498 <TIM_OC3_SetConfig+0xd0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d113      	bne.n	8004472 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	621a      	str	r2, [r3, #32]
}
 800448c:	bf00      	nop
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40010000 	.word	0x40010000

0800449c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a10      	ldr	r2, [pc, #64]	@ (8004538 <TIM_OC4_SetConfig+0x9c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d109      	bne.n	8004510 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000

0800453c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f023 0201 	bic.w	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f023 030a 	bic.w	r3, r3, #10
 8004578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	621a      	str	r2, [r3, #32]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800459a:	b480      	push	{r7}
 800459c:	b087      	sub	sp, #28
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f023 0210 	bic.w	r2, r3, #16
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	031b      	lsls	r3, r3, #12
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	f043 0307 	orr.w	r3, r3, #7
 800461c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	609a      	str	r2, [r3, #8]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800464a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	021a      	lsls	r2, r3, #8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	431a      	orrs	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4313      	orrs	r3, r2
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2201      	movs	r2, #1
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1a      	ldr	r2, [r3, #32]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e050      	b.n	8004776 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1c      	ldr	r2, [pc, #112]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d018      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004720:	d013      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a18      	ldr	r2, [pc, #96]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a16      	ldr	r2, [pc, #88]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a15      	ldr	r2, [pc, #84]	@ (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a13      	ldr	r2, [pc, #76]	@ (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10c      	bne.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	4313      	orrs	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40010000 	.word	0x40010000
 8004788:	40000400 	.word	0x40000400
 800478c:	40000800 	.word	0x40000800
 8004790:	40000c00 	.word	0x40000c00
 8004794:	40014000 	.word	0x40014000

08004798 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e03d      	b.n	8004830 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e042      	b.n	80048fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd fb3c 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2224      	movs	r2, #36	@ 0x24
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fcdb 	bl	8005264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b20      	cmp	r3, #32
 800491c:	d112      	bne.n	8004944 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <HAL_UART_Receive_IT+0x26>
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e00b      	b.n	8004946 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	461a      	mov	r2, r3
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 faba 	bl	8004eb4 <UART_Start_Receive_IT>
 8004940:	4603      	mov	r3, r0
 8004942:	e000      	b.n	8004946 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004944:	2302      	movs	r3, #2
  }
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b0ba      	sub	sp, #232	@ 0xe8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004976:	2300      	movs	r3, #0
 8004978:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800497c:	2300      	movs	r3, #0
 800497e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800498e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10f      	bne.n	80049b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <HAL_UART_IRQHandler+0x66>
 80049a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fb99 	bl	80050e6 <UART_Receive_IT>
      return;
 80049b4:	e25b      	b.n	8004e6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 80de 	beq.w	8004b7c <HAL_UART_IRQHandler+0x22c>
 80049c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80d1 	beq.w	8004b7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <HAL_UART_IRQHandler+0xae>
 80049e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f6:	f043 0201 	orr.w	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <HAL_UART_IRQHandler+0xd2>
 8004a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1a:	f043 0202 	orr.w	r2, r3, #2
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_UART_IRQHandler+0xf6>
 8004a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3e:	f043 0204 	orr.w	r2, r3, #4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d011      	beq.n	8004a76 <HAL_UART_IRQHandler+0x126>
 8004a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d105      	bne.n	8004a6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d005      	beq.n	8004a76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6e:	f043 0208 	orr.w	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 81f2 	beq.w	8004e64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_UART_IRQHandler+0x14e>
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb24 	bl	80050e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa8:	2b40      	cmp	r3, #64	@ 0x40
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <HAL_UART_IRQHandler+0x17a>
 8004ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d04f      	beq.n	8004b6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fa2c 	bl	8004f28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b40      	cmp	r3, #64	@ 0x40
 8004adc:	d141      	bne.n	8004b62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3314      	adds	r3, #20
 8004ae4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004af8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3314      	adds	r3, #20
 8004b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1d9      	bne.n	8004ade <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d013      	beq.n	8004b5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b36:	4a7e      	ldr	r2, [pc, #504]	@ (8004d30 <HAL_UART_IRQHandler+0x3e0>)
 8004b38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fd fed5 	bl	80028ee <HAL_DMA_Abort_IT>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d016      	beq.n	8004b78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b54:	4610      	mov	r0, r2
 8004b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b58:	e00e      	b.n	8004b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f994 	bl	8004e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b60:	e00a      	b.n	8004b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f990 	bl	8004e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e006      	b.n	8004b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f98c 	bl	8004e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b76:	e175      	b.n	8004e64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	bf00      	nop
    return;
 8004b7a:	e173      	b.n	8004e64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	f040 814f 	bne.w	8004e24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8148 	beq.w	8004e24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8141 	beq.w	8004e24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc2:	2b40      	cmp	r3, #64	@ 0x40
 8004bc4:	f040 80b6 	bne.w	8004d34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004bd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8145 	beq.w	8004e68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004be6:	429a      	cmp	r2, r3
 8004be8:	f080 813e 	bcs.w	8004e68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bf2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bfe:	f000 8088 	beq.w	8004d12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c10:	e853 3f00 	ldrex	r3, [r3]
 8004c14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c3e:	e841 2300 	strex	r3, r2, [r1]
 8004c42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1d9      	bne.n	8004c02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3314      	adds	r3, #20
 8004c54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e1      	bne.n	8004c4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3314      	adds	r3, #20
 8004c90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e3      	bne.n	8004c8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ce2:	f023 0310 	bic.w	r3, r3, #16
 8004ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004cf4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004cf6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e3      	bne.n	8004cd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fd fd7e 	bl	800280e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f8b7 	bl	8004e9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d2e:	e09b      	b.n	8004e68 <HAL_UART_IRQHandler+0x518>
 8004d30:	08004fef 	.word	0x08004fef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 808e 	beq.w	8004e6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8089 	beq.w	8004e6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	330c      	adds	r3, #12
 8004d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	330c      	adds	r3, #12
 8004d7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e3      	bne.n	8004d5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	3314      	adds	r3, #20
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	623b      	str	r3, [r7, #32]
   return(result);
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3314      	adds	r3, #20
 8004db2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004db6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e3      	bne.n	8004d92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0310 	bic.w	r3, r3, #16
 8004dee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004dfc:	61fa      	str	r2, [r7, #28]
 8004dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	69b9      	ldr	r1, [r7, #24]
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	617b      	str	r3, [r7, #20]
   return(result);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e3      	bne.n	8004dd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f83d 	bl	8004e9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e22:	e023      	b.n	8004e6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_UART_IRQHandler+0x4f4>
 8004e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f8ea 	bl	8005016 <UART_Transmit_IT>
    return;
 8004e42:	e014      	b.n	8004e6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00e      	beq.n	8004e6e <HAL_UART_IRQHandler+0x51e>
 8004e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f92a 	bl	80050b6 <UART_EndTransmit_IT>
    return;
 8004e62:	e004      	b.n	8004e6e <HAL_UART_IRQHandler+0x51e>
    return;
 8004e64:	bf00      	nop
 8004e66:	e002      	b.n	8004e6e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e68:	bf00      	nop
 8004e6a:	e000      	b.n	8004e6e <HAL_UART_IRQHandler+0x51e>
      return;
 8004e6c:	bf00      	nop
  }
}
 8004e6e:	37e8      	adds	r7, #232	@ 0xe8
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2222      	movs	r2, #34	@ 0x22
 8004ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68da      	ldr	r2, [r3, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ef8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695a      	ldr	r2, [r3, #20]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 0220 	orr.w	r2, r2, #32
 8004f18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b095      	sub	sp, #84	@ 0x54
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	330c      	adds	r3, #12
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	330c      	adds	r3, #12
 8004f4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f50:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e5      	bne.n	8004f30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3314      	adds	r3, #20
 8004f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3314      	adds	r3, #20
 8004f82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d119      	bne.n	8004fd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f023 0310 	bic.w	r3, r3, #16
 8004fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fc0:	61ba      	str	r2, [r7, #24]
 8004fc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6979      	ldr	r1, [r7, #20]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004fe2:	bf00      	nop
 8004fe4:	3754      	adds	r7, #84	@ 0x54
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f7ff ff3d 	bl	8004e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800500e:	bf00      	nop
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b21      	cmp	r3, #33	@ 0x21
 8005028:	d13e      	bne.n	80050a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005032:	d114      	bne.n	800505e <UART_Transmit_IT+0x48>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d110      	bne.n	800505e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005050:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	1c9a      	adds	r2, r3, #2
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	621a      	str	r2, [r3, #32]
 800505c:	e008      	b.n	8005070 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	1c59      	adds	r1, r3, #1
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6211      	str	r1, [r2, #32]
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29b      	uxth	r3, r3
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4619      	mov	r1, r3
 800507e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10f      	bne.n	80050a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005092:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	e000      	b.n	80050aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
  }
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fecc 	bl	8004e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b08c      	sub	sp, #48	@ 0x30
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b22      	cmp	r3, #34	@ 0x22
 80050f8:	f040 80ae 	bne.w	8005258 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005104:	d117      	bne.n	8005136 <UART_Receive_IT+0x50>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d113      	bne.n	8005136 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005124:	b29a      	uxth	r2, r3
 8005126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005128:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	1c9a      	adds	r2, r3, #2
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	629a      	str	r2, [r3, #40]	@ 0x28
 8005134:	e026      	b.n	8005184 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005148:	d007      	beq.n	800515a <UART_Receive_IT+0x74>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <UART_Receive_IT+0x82>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	b2da      	uxtb	r2, r3
 8005162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	e008      	b.n	800517a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005174:	b2da      	uxtb	r2, r3
 8005176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005178:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29b      	uxth	r3, r3
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4619      	mov	r1, r3
 8005192:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005194:	2b00      	cmp	r3, #0
 8005196:	d15d      	bne.n	8005254 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0220 	bic.w	r2, r2, #32
 80051a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d135      	bne.n	800524a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	613b      	str	r3, [r7, #16]
   return(result);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 0310 	bic.w	r3, r3, #16
 80051fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005204:	623a      	str	r2, [r7, #32]
 8005206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	69f9      	ldr	r1, [r7, #28]
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	61bb      	str	r3, [r7, #24]
   return(result);
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b10      	cmp	r3, #16
 8005224:	d10a      	bne.n	800523c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	60fb      	str	r3, [r7, #12]
 800523a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff fe2a 	bl	8004e9c <HAL_UARTEx_RxEventCallback>
 8005248:	e002      	b.n	8005250 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc f856 	bl	80012fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005250:	2300      	movs	r3, #0
 8005252:	e002      	b.n	800525a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	e000      	b.n	800525a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3730      	adds	r7, #48	@ 0x30
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005268:	b0c0      	sub	sp, #256	@ 0x100
 800526a:	af00      	add	r7, sp, #0
 800526c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005280:	68d9      	ldr	r1, [r3, #12]
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	ea40 0301 	orr.w	r3, r0, r1
 800528c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800528e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	431a      	orrs	r2, r3
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80052bc:	f021 010c 	bic.w	r1, r1, #12
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80052ca:	430b      	orrs	r3, r1
 80052cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052de:	6999      	ldr	r1, [r3, #24]
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	ea40 0301 	orr.w	r3, r0, r1
 80052ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005530 <UART_SetConfig+0x2cc>)
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d005      	beq.n	8005304 <UART_SetConfig+0xa0>
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005534 <UART_SetConfig+0x2d0>)
 8005300:	429a      	cmp	r2, r3
 8005302:	d104      	bne.n	800530e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005304:	f7fe fa48 	bl	8003798 <HAL_RCC_GetPCLK2Freq>
 8005308:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800530c:	e003      	b.n	8005316 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800530e:	f7fe fa2f 	bl	8003770 <HAL_RCC_GetPCLK1Freq>
 8005312:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005320:	f040 810c 	bne.w	800553c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005328:	2200      	movs	r2, #0
 800532a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800532e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005336:	4622      	mov	r2, r4
 8005338:	462b      	mov	r3, r5
 800533a:	1891      	adds	r1, r2, r2
 800533c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800533e:	415b      	adcs	r3, r3
 8005340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005346:	4621      	mov	r1, r4
 8005348:	eb12 0801 	adds.w	r8, r2, r1
 800534c:	4629      	mov	r1, r5
 800534e:	eb43 0901 	adc.w	r9, r3, r1
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800535e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005366:	4690      	mov	r8, r2
 8005368:	4699      	mov	r9, r3
 800536a:	4623      	mov	r3, r4
 800536c:	eb18 0303 	adds.w	r3, r8, r3
 8005370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005374:	462b      	mov	r3, r5
 8005376:	eb49 0303 	adc.w	r3, r9, r3
 800537a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800537e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800538a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800538e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005392:	460b      	mov	r3, r1
 8005394:	18db      	adds	r3, r3, r3
 8005396:	653b      	str	r3, [r7, #80]	@ 0x50
 8005398:	4613      	mov	r3, r2
 800539a:	eb42 0303 	adc.w	r3, r2, r3
 800539e:	657b      	str	r3, [r7, #84]	@ 0x54
 80053a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80053a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80053a8:	f7fb fc76 	bl	8000c98 <__aeabi_uldivmod>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4b61      	ldr	r3, [pc, #388]	@ (8005538 <UART_SetConfig+0x2d4>)
 80053b2:	fba3 2302 	umull	r2, r3, r3, r2
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	011c      	lsls	r4, r3, #4
 80053ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80053c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80053cc:	4642      	mov	r2, r8
 80053ce:	464b      	mov	r3, r9
 80053d0:	1891      	adds	r1, r2, r2
 80053d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053d4:	415b      	adcs	r3, r3
 80053d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053dc:	4641      	mov	r1, r8
 80053de:	eb12 0a01 	adds.w	sl, r2, r1
 80053e2:	4649      	mov	r1, r9
 80053e4:	eb43 0b01 	adc.w	fp, r3, r1
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053fc:	4692      	mov	sl, r2
 80053fe:	469b      	mov	fp, r3
 8005400:	4643      	mov	r3, r8
 8005402:	eb1a 0303 	adds.w	r3, sl, r3
 8005406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800540a:	464b      	mov	r3, r9
 800540c:	eb4b 0303 	adc.w	r3, fp, r3
 8005410:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005420:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005428:	460b      	mov	r3, r1
 800542a:	18db      	adds	r3, r3, r3
 800542c:	643b      	str	r3, [r7, #64]	@ 0x40
 800542e:	4613      	mov	r3, r2
 8005430:	eb42 0303 	adc.w	r3, r2, r3
 8005434:	647b      	str	r3, [r7, #68]	@ 0x44
 8005436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800543a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800543e:	f7fb fc2b 	bl	8000c98 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4611      	mov	r1, r2
 8005448:	4b3b      	ldr	r3, [pc, #236]	@ (8005538 <UART_SetConfig+0x2d4>)
 800544a:	fba3 2301 	umull	r2, r3, r3, r1
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	2264      	movs	r2, #100	@ 0x64
 8005452:	fb02 f303 	mul.w	r3, r2, r3
 8005456:	1acb      	subs	r3, r1, r3
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800545e:	4b36      	ldr	r3, [pc, #216]	@ (8005538 <UART_SetConfig+0x2d4>)
 8005460:	fba3 2302 	umull	r2, r3, r3, r2
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800546c:	441c      	add	r4, r3
 800546e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005478:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800547c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	1891      	adds	r1, r2, r2
 8005486:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005488:	415b      	adcs	r3, r3
 800548a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800548c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005490:	4641      	mov	r1, r8
 8005492:	1851      	adds	r1, r2, r1
 8005494:	6339      	str	r1, [r7, #48]	@ 0x30
 8005496:	4649      	mov	r1, r9
 8005498:	414b      	adcs	r3, r1
 800549a:	637b      	str	r3, [r7, #52]	@ 0x34
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	f04f 0300 	mov.w	r3, #0
 80054a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80054a8:	4659      	mov	r1, fp
 80054aa:	00cb      	lsls	r3, r1, #3
 80054ac:	4651      	mov	r1, sl
 80054ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054b2:	4651      	mov	r1, sl
 80054b4:	00ca      	lsls	r2, r1, #3
 80054b6:	4610      	mov	r0, r2
 80054b8:	4619      	mov	r1, r3
 80054ba:	4603      	mov	r3, r0
 80054bc:	4642      	mov	r2, r8
 80054be:	189b      	adds	r3, r3, r2
 80054c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054c4:	464b      	mov	r3, r9
 80054c6:	460a      	mov	r2, r1
 80054c8:	eb42 0303 	adc.w	r3, r2, r3
 80054cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054e4:	460b      	mov	r3, r1
 80054e6:	18db      	adds	r3, r3, r3
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ea:	4613      	mov	r3, r2
 80054ec:	eb42 0303 	adc.w	r3, r2, r3
 80054f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054fa:	f7fb fbcd 	bl	8000c98 <__aeabi_uldivmod>
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <UART_SetConfig+0x2d4>)
 8005504:	fba3 1302 	umull	r1, r3, r3, r2
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	2164      	movs	r1, #100	@ 0x64
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	3332      	adds	r3, #50	@ 0x32
 8005516:	4a08      	ldr	r2, [pc, #32]	@ (8005538 <UART_SetConfig+0x2d4>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	f003 0207 	and.w	r2, r3, #7
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4422      	add	r2, r4
 800552a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800552c:	e106      	b.n	800573c <UART_SetConfig+0x4d8>
 800552e:	bf00      	nop
 8005530:	40011000 	.word	0x40011000
 8005534:	40011400 	.word	0x40011400
 8005538:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800553c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005540:	2200      	movs	r2, #0
 8005542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005546:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800554a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800554e:	4642      	mov	r2, r8
 8005550:	464b      	mov	r3, r9
 8005552:	1891      	adds	r1, r2, r2
 8005554:	6239      	str	r1, [r7, #32]
 8005556:	415b      	adcs	r3, r3
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
 800555a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800555e:	4641      	mov	r1, r8
 8005560:	1854      	adds	r4, r2, r1
 8005562:	4649      	mov	r1, r9
 8005564:	eb43 0501 	adc.w	r5, r3, r1
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	00eb      	lsls	r3, r5, #3
 8005572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005576:	00e2      	lsls	r2, r4, #3
 8005578:	4614      	mov	r4, r2
 800557a:	461d      	mov	r5, r3
 800557c:	4643      	mov	r3, r8
 800557e:	18e3      	adds	r3, r4, r3
 8005580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005584:	464b      	mov	r3, r9
 8005586:	eb45 0303 	adc.w	r3, r5, r3
 800558a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800558e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800559a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80055aa:	4629      	mov	r1, r5
 80055ac:	008b      	lsls	r3, r1, #2
 80055ae:	4621      	mov	r1, r4
 80055b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055b4:	4621      	mov	r1, r4
 80055b6:	008a      	lsls	r2, r1, #2
 80055b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80055bc:	f7fb fb6c 	bl	8000c98 <__aeabi_uldivmod>
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	4b60      	ldr	r3, [pc, #384]	@ (8005748 <UART_SetConfig+0x4e4>)
 80055c6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	011c      	lsls	r4, r3, #4
 80055ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d2:	2200      	movs	r2, #0
 80055d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055e0:	4642      	mov	r2, r8
 80055e2:	464b      	mov	r3, r9
 80055e4:	1891      	adds	r1, r2, r2
 80055e6:	61b9      	str	r1, [r7, #24]
 80055e8:	415b      	adcs	r3, r3
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f0:	4641      	mov	r1, r8
 80055f2:	1851      	adds	r1, r2, r1
 80055f4:	6139      	str	r1, [r7, #16]
 80055f6:	4649      	mov	r1, r9
 80055f8:	414b      	adcs	r3, r1
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005608:	4659      	mov	r1, fp
 800560a:	00cb      	lsls	r3, r1, #3
 800560c:	4651      	mov	r1, sl
 800560e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005612:	4651      	mov	r1, sl
 8005614:	00ca      	lsls	r2, r1, #3
 8005616:	4610      	mov	r0, r2
 8005618:	4619      	mov	r1, r3
 800561a:	4603      	mov	r3, r0
 800561c:	4642      	mov	r2, r8
 800561e:	189b      	adds	r3, r3, r2
 8005620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005624:	464b      	mov	r3, r9
 8005626:	460a      	mov	r2, r1
 8005628:	eb42 0303 	adc.w	r3, r2, r3
 800562c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	67bb      	str	r3, [r7, #120]	@ 0x78
 800563a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005648:	4649      	mov	r1, r9
 800564a:	008b      	lsls	r3, r1, #2
 800564c:	4641      	mov	r1, r8
 800564e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005652:	4641      	mov	r1, r8
 8005654:	008a      	lsls	r2, r1, #2
 8005656:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800565a:	f7fb fb1d 	bl	8000c98 <__aeabi_uldivmod>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4611      	mov	r1, r2
 8005664:	4b38      	ldr	r3, [pc, #224]	@ (8005748 <UART_SetConfig+0x4e4>)
 8005666:	fba3 2301 	umull	r2, r3, r3, r1
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	2264      	movs	r2, #100	@ 0x64
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	1acb      	subs	r3, r1, r3
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	3332      	adds	r3, #50	@ 0x32
 8005678:	4a33      	ldr	r2, [pc, #204]	@ (8005748 <UART_SetConfig+0x4e4>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005684:	441c      	add	r4, r3
 8005686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800568a:	2200      	movs	r2, #0
 800568c:	673b      	str	r3, [r7, #112]	@ 0x70
 800568e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005690:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005694:	4642      	mov	r2, r8
 8005696:	464b      	mov	r3, r9
 8005698:	1891      	adds	r1, r2, r2
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	415b      	adcs	r3, r3
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056a4:	4641      	mov	r1, r8
 80056a6:	1851      	adds	r1, r2, r1
 80056a8:	6039      	str	r1, [r7, #0]
 80056aa:	4649      	mov	r1, r9
 80056ac:	414b      	adcs	r3, r1
 80056ae:	607b      	str	r3, [r7, #4]
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056bc:	4659      	mov	r1, fp
 80056be:	00cb      	lsls	r3, r1, #3
 80056c0:	4651      	mov	r1, sl
 80056c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056c6:	4651      	mov	r1, sl
 80056c8:	00ca      	lsls	r2, r1, #3
 80056ca:	4610      	mov	r0, r2
 80056cc:	4619      	mov	r1, r3
 80056ce:	4603      	mov	r3, r0
 80056d0:	4642      	mov	r2, r8
 80056d2:	189b      	adds	r3, r3, r2
 80056d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056d6:	464b      	mov	r3, r9
 80056d8:	460a      	mov	r2, r1
 80056da:	eb42 0303 	adc.w	r3, r2, r3
 80056de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80056ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056f8:	4649      	mov	r1, r9
 80056fa:	008b      	lsls	r3, r1, #2
 80056fc:	4641      	mov	r1, r8
 80056fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005702:	4641      	mov	r1, r8
 8005704:	008a      	lsls	r2, r1, #2
 8005706:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800570a:	f7fb fac5 	bl	8000c98 <__aeabi_uldivmod>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4b0d      	ldr	r3, [pc, #52]	@ (8005748 <UART_SetConfig+0x4e4>)
 8005714:	fba3 1302 	umull	r1, r3, r3, r2
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	2164      	movs	r1, #100	@ 0x64
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	3332      	adds	r3, #50	@ 0x32
 8005726:	4a08      	ldr	r2, [pc, #32]	@ (8005748 <UART_SetConfig+0x4e4>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	f003 020f 	and.w	r2, r3, #15
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4422      	add	r2, r4
 800573a:	609a      	str	r2, [r3, #8]
}
 800573c:	bf00      	nop
 800573e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005742:	46bd      	mov	sp, r7
 8005744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005748:	51eb851f 	.word	0x51eb851f

0800574c <__cvt>:
 800574c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	ec57 6b10 	vmov	r6, r7, d0
 8005754:	2f00      	cmp	r7, #0
 8005756:	460c      	mov	r4, r1
 8005758:	4619      	mov	r1, r3
 800575a:	463b      	mov	r3, r7
 800575c:	bfbb      	ittet	lt
 800575e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005762:	461f      	movlt	r7, r3
 8005764:	2300      	movge	r3, #0
 8005766:	232d      	movlt	r3, #45	@ 0x2d
 8005768:	700b      	strb	r3, [r1, #0]
 800576a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800576c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005770:	4691      	mov	r9, r2
 8005772:	f023 0820 	bic.w	r8, r3, #32
 8005776:	bfbc      	itt	lt
 8005778:	4632      	movlt	r2, r6
 800577a:	4616      	movlt	r6, r2
 800577c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005780:	d005      	beq.n	800578e <__cvt+0x42>
 8005782:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005786:	d100      	bne.n	800578a <__cvt+0x3e>
 8005788:	3401      	adds	r4, #1
 800578a:	2102      	movs	r1, #2
 800578c:	e000      	b.n	8005790 <__cvt+0x44>
 800578e:	2103      	movs	r1, #3
 8005790:	ab03      	add	r3, sp, #12
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	ab02      	add	r3, sp, #8
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	ec47 6b10 	vmov	d0, r6, r7
 800579c:	4653      	mov	r3, sl
 800579e:	4622      	mov	r2, r4
 80057a0:	f001 f9a6 	bl	8006af0 <_dtoa_r>
 80057a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057a8:	4605      	mov	r5, r0
 80057aa:	d119      	bne.n	80057e0 <__cvt+0x94>
 80057ac:	f019 0f01 	tst.w	r9, #1
 80057b0:	d00e      	beq.n	80057d0 <__cvt+0x84>
 80057b2:	eb00 0904 	add.w	r9, r0, r4
 80057b6:	2200      	movs	r2, #0
 80057b8:	2300      	movs	r3, #0
 80057ba:	4630      	mov	r0, r6
 80057bc:	4639      	mov	r1, r7
 80057be:	f7fb f98b 	bl	8000ad8 <__aeabi_dcmpeq>
 80057c2:	b108      	cbz	r0, 80057c8 <__cvt+0x7c>
 80057c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80057c8:	2230      	movs	r2, #48	@ 0x30
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	454b      	cmp	r3, r9
 80057ce:	d31e      	bcc.n	800580e <__cvt+0xc2>
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057d4:	1b5b      	subs	r3, r3, r5
 80057d6:	4628      	mov	r0, r5
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	b004      	add	sp, #16
 80057dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057e4:	eb00 0904 	add.w	r9, r0, r4
 80057e8:	d1e5      	bne.n	80057b6 <__cvt+0x6a>
 80057ea:	7803      	ldrb	r3, [r0, #0]
 80057ec:	2b30      	cmp	r3, #48	@ 0x30
 80057ee:	d10a      	bne.n	8005806 <__cvt+0xba>
 80057f0:	2200      	movs	r2, #0
 80057f2:	2300      	movs	r3, #0
 80057f4:	4630      	mov	r0, r6
 80057f6:	4639      	mov	r1, r7
 80057f8:	f7fb f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 80057fc:	b918      	cbnz	r0, 8005806 <__cvt+0xba>
 80057fe:	f1c4 0401 	rsb	r4, r4, #1
 8005802:	f8ca 4000 	str.w	r4, [sl]
 8005806:	f8da 3000 	ldr.w	r3, [sl]
 800580a:	4499      	add	r9, r3
 800580c:	e7d3      	b.n	80057b6 <__cvt+0x6a>
 800580e:	1c59      	adds	r1, r3, #1
 8005810:	9103      	str	r1, [sp, #12]
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	e7d9      	b.n	80057ca <__cvt+0x7e>

08005816 <__exponent>:
 8005816:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005818:	2900      	cmp	r1, #0
 800581a:	bfba      	itte	lt
 800581c:	4249      	neglt	r1, r1
 800581e:	232d      	movlt	r3, #45	@ 0x2d
 8005820:	232b      	movge	r3, #43	@ 0x2b
 8005822:	2909      	cmp	r1, #9
 8005824:	7002      	strb	r2, [r0, #0]
 8005826:	7043      	strb	r3, [r0, #1]
 8005828:	dd29      	ble.n	800587e <__exponent+0x68>
 800582a:	f10d 0307 	add.w	r3, sp, #7
 800582e:	461d      	mov	r5, r3
 8005830:	270a      	movs	r7, #10
 8005832:	461a      	mov	r2, r3
 8005834:	fbb1 f6f7 	udiv	r6, r1, r7
 8005838:	fb07 1416 	mls	r4, r7, r6, r1
 800583c:	3430      	adds	r4, #48	@ 0x30
 800583e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005842:	460c      	mov	r4, r1
 8005844:	2c63      	cmp	r4, #99	@ 0x63
 8005846:	f103 33ff 	add.w	r3, r3, #4294967295
 800584a:	4631      	mov	r1, r6
 800584c:	dcf1      	bgt.n	8005832 <__exponent+0x1c>
 800584e:	3130      	adds	r1, #48	@ 0x30
 8005850:	1e94      	subs	r4, r2, #2
 8005852:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005856:	1c41      	adds	r1, r0, #1
 8005858:	4623      	mov	r3, r4
 800585a:	42ab      	cmp	r3, r5
 800585c:	d30a      	bcc.n	8005874 <__exponent+0x5e>
 800585e:	f10d 0309 	add.w	r3, sp, #9
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	42ac      	cmp	r4, r5
 8005866:	bf88      	it	hi
 8005868:	2300      	movhi	r3, #0
 800586a:	3302      	adds	r3, #2
 800586c:	4403      	add	r3, r0
 800586e:	1a18      	subs	r0, r3, r0
 8005870:	b003      	add	sp, #12
 8005872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005874:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005878:	f801 6f01 	strb.w	r6, [r1, #1]!
 800587c:	e7ed      	b.n	800585a <__exponent+0x44>
 800587e:	2330      	movs	r3, #48	@ 0x30
 8005880:	3130      	adds	r1, #48	@ 0x30
 8005882:	7083      	strb	r3, [r0, #2]
 8005884:	70c1      	strb	r1, [r0, #3]
 8005886:	1d03      	adds	r3, r0, #4
 8005888:	e7f1      	b.n	800586e <__exponent+0x58>
	...

0800588c <_printf_float>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	b08d      	sub	sp, #52	@ 0x34
 8005892:	460c      	mov	r4, r1
 8005894:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005898:	4616      	mov	r6, r2
 800589a:	461f      	mov	r7, r3
 800589c:	4605      	mov	r5, r0
 800589e:	f001 f81f 	bl	80068e0 <_localeconv_r>
 80058a2:	6803      	ldr	r3, [r0, #0]
 80058a4:	9304      	str	r3, [sp, #16]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fa fcea 	bl	8000280 <strlen>
 80058ac:	2300      	movs	r3, #0
 80058ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80058b0:	f8d8 3000 	ldr.w	r3, [r8]
 80058b4:	9005      	str	r0, [sp, #20]
 80058b6:	3307      	adds	r3, #7
 80058b8:	f023 0307 	bic.w	r3, r3, #7
 80058bc:	f103 0208 	add.w	r2, r3, #8
 80058c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058c4:	f8d4 b000 	ldr.w	fp, [r4]
 80058c8:	f8c8 2000 	str.w	r2, [r8]
 80058cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058d4:	9307      	str	r3, [sp, #28]
 80058d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80058da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058e2:	4b9c      	ldr	r3, [pc, #624]	@ (8005b54 <_printf_float+0x2c8>)
 80058e4:	f04f 32ff 	mov.w	r2, #4294967295
 80058e8:	f7fb f928 	bl	8000b3c <__aeabi_dcmpun>
 80058ec:	bb70      	cbnz	r0, 800594c <_printf_float+0xc0>
 80058ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058f2:	4b98      	ldr	r3, [pc, #608]	@ (8005b54 <_printf_float+0x2c8>)
 80058f4:	f04f 32ff 	mov.w	r2, #4294967295
 80058f8:	f7fb f902 	bl	8000b00 <__aeabi_dcmple>
 80058fc:	bb30      	cbnz	r0, 800594c <_printf_float+0xc0>
 80058fe:	2200      	movs	r2, #0
 8005900:	2300      	movs	r3, #0
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fb f8f1 	bl	8000aec <__aeabi_dcmplt>
 800590a:	b110      	cbz	r0, 8005912 <_printf_float+0x86>
 800590c:	232d      	movs	r3, #45	@ 0x2d
 800590e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005912:	4a91      	ldr	r2, [pc, #580]	@ (8005b58 <_printf_float+0x2cc>)
 8005914:	4b91      	ldr	r3, [pc, #580]	@ (8005b5c <_printf_float+0x2d0>)
 8005916:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800591a:	bf94      	ite	ls
 800591c:	4690      	movls	r8, r2
 800591e:	4698      	movhi	r8, r3
 8005920:	2303      	movs	r3, #3
 8005922:	6123      	str	r3, [r4, #16]
 8005924:	f02b 0304 	bic.w	r3, fp, #4
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	f04f 0900 	mov.w	r9, #0
 800592e:	9700      	str	r7, [sp, #0]
 8005930:	4633      	mov	r3, r6
 8005932:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005934:	4621      	mov	r1, r4
 8005936:	4628      	mov	r0, r5
 8005938:	f000 f9d2 	bl	8005ce0 <_printf_common>
 800593c:	3001      	adds	r0, #1
 800593e:	f040 808d 	bne.w	8005a5c <_printf_float+0x1d0>
 8005942:	f04f 30ff 	mov.w	r0, #4294967295
 8005946:	b00d      	add	sp, #52	@ 0x34
 8005948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594c:	4642      	mov	r2, r8
 800594e:	464b      	mov	r3, r9
 8005950:	4640      	mov	r0, r8
 8005952:	4649      	mov	r1, r9
 8005954:	f7fb f8f2 	bl	8000b3c <__aeabi_dcmpun>
 8005958:	b140      	cbz	r0, 800596c <_printf_float+0xe0>
 800595a:	464b      	mov	r3, r9
 800595c:	2b00      	cmp	r3, #0
 800595e:	bfbc      	itt	lt
 8005960:	232d      	movlt	r3, #45	@ 0x2d
 8005962:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005966:	4a7e      	ldr	r2, [pc, #504]	@ (8005b60 <_printf_float+0x2d4>)
 8005968:	4b7e      	ldr	r3, [pc, #504]	@ (8005b64 <_printf_float+0x2d8>)
 800596a:	e7d4      	b.n	8005916 <_printf_float+0x8a>
 800596c:	6863      	ldr	r3, [r4, #4]
 800596e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005972:	9206      	str	r2, [sp, #24]
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	d13b      	bne.n	80059f0 <_printf_float+0x164>
 8005978:	2306      	movs	r3, #6
 800597a:	6063      	str	r3, [r4, #4]
 800597c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005980:	2300      	movs	r3, #0
 8005982:	6022      	str	r2, [r4, #0]
 8005984:	9303      	str	r3, [sp, #12]
 8005986:	ab0a      	add	r3, sp, #40	@ 0x28
 8005988:	e9cd a301 	strd	sl, r3, [sp, #4]
 800598c:	ab09      	add	r3, sp, #36	@ 0x24
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	6861      	ldr	r1, [r4, #4]
 8005992:	ec49 8b10 	vmov	d0, r8, r9
 8005996:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800599a:	4628      	mov	r0, r5
 800599c:	f7ff fed6 	bl	800574c <__cvt>
 80059a0:	9b06      	ldr	r3, [sp, #24]
 80059a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059a4:	2b47      	cmp	r3, #71	@ 0x47
 80059a6:	4680      	mov	r8, r0
 80059a8:	d129      	bne.n	80059fe <_printf_float+0x172>
 80059aa:	1cc8      	adds	r0, r1, #3
 80059ac:	db02      	blt.n	80059b4 <_printf_float+0x128>
 80059ae:	6863      	ldr	r3, [r4, #4]
 80059b0:	4299      	cmp	r1, r3
 80059b2:	dd41      	ble.n	8005a38 <_printf_float+0x1ac>
 80059b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80059b8:	fa5f fa8a 	uxtb.w	sl, sl
 80059bc:	3901      	subs	r1, #1
 80059be:	4652      	mov	r2, sl
 80059c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80059c6:	f7ff ff26 	bl	8005816 <__exponent>
 80059ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059cc:	1813      	adds	r3, r2, r0
 80059ce:	2a01      	cmp	r2, #1
 80059d0:	4681      	mov	r9, r0
 80059d2:	6123      	str	r3, [r4, #16]
 80059d4:	dc02      	bgt.n	80059dc <_printf_float+0x150>
 80059d6:	6822      	ldr	r2, [r4, #0]
 80059d8:	07d2      	lsls	r2, r2, #31
 80059da:	d501      	bpl.n	80059e0 <_printf_float+0x154>
 80059dc:	3301      	adds	r3, #1
 80059de:	6123      	str	r3, [r4, #16]
 80059e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0a2      	beq.n	800592e <_printf_float+0xa2>
 80059e8:	232d      	movs	r3, #45	@ 0x2d
 80059ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ee:	e79e      	b.n	800592e <_printf_float+0xa2>
 80059f0:	9a06      	ldr	r2, [sp, #24]
 80059f2:	2a47      	cmp	r2, #71	@ 0x47
 80059f4:	d1c2      	bne.n	800597c <_printf_float+0xf0>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1c0      	bne.n	800597c <_printf_float+0xf0>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e7bd      	b.n	800597a <_printf_float+0xee>
 80059fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a02:	d9db      	bls.n	80059bc <_printf_float+0x130>
 8005a04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a08:	d118      	bne.n	8005a3c <_printf_float+0x1b0>
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	dd0b      	ble.n	8005a28 <_printf_float+0x19c>
 8005a10:	6121      	str	r1, [r4, #16]
 8005a12:	b913      	cbnz	r3, 8005a1a <_printf_float+0x18e>
 8005a14:	6822      	ldr	r2, [r4, #0]
 8005a16:	07d0      	lsls	r0, r2, #31
 8005a18:	d502      	bpl.n	8005a20 <_printf_float+0x194>
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	440b      	add	r3, r1
 8005a1e:	6123      	str	r3, [r4, #16]
 8005a20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a22:	f04f 0900 	mov.w	r9, #0
 8005a26:	e7db      	b.n	80059e0 <_printf_float+0x154>
 8005a28:	b913      	cbnz	r3, 8005a30 <_printf_float+0x1a4>
 8005a2a:	6822      	ldr	r2, [r4, #0]
 8005a2c:	07d2      	lsls	r2, r2, #31
 8005a2e:	d501      	bpl.n	8005a34 <_printf_float+0x1a8>
 8005a30:	3302      	adds	r3, #2
 8005a32:	e7f4      	b.n	8005a1e <_printf_float+0x192>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e7f2      	b.n	8005a1e <_printf_float+0x192>
 8005a38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	db05      	blt.n	8005a4e <_printf_float+0x1c2>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	6121      	str	r1, [r4, #16]
 8005a46:	07d8      	lsls	r0, r3, #31
 8005a48:	d5ea      	bpl.n	8005a20 <_printf_float+0x194>
 8005a4a:	1c4b      	adds	r3, r1, #1
 8005a4c:	e7e7      	b.n	8005a1e <_printf_float+0x192>
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	bfd4      	ite	le
 8005a52:	f1c1 0202 	rsble	r2, r1, #2
 8005a56:	2201      	movgt	r2, #1
 8005a58:	4413      	add	r3, r2
 8005a5a:	e7e0      	b.n	8005a1e <_printf_float+0x192>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	055a      	lsls	r2, r3, #21
 8005a60:	d407      	bmi.n	8005a72 <_printf_float+0x1e6>
 8005a62:	6923      	ldr	r3, [r4, #16]
 8005a64:	4642      	mov	r2, r8
 8005a66:	4631      	mov	r1, r6
 8005a68:	4628      	mov	r0, r5
 8005a6a:	47b8      	blx	r7
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d12b      	bne.n	8005ac8 <_printf_float+0x23c>
 8005a70:	e767      	b.n	8005942 <_printf_float+0xb6>
 8005a72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a76:	f240 80dd 	bls.w	8005c34 <_printf_float+0x3a8>
 8005a7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2300      	movs	r3, #0
 8005a82:	f7fb f829 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d033      	beq.n	8005af2 <_printf_float+0x266>
 8005a8a:	4a37      	ldr	r2, [pc, #220]	@ (8005b68 <_printf_float+0x2dc>)
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4628      	mov	r0, r5
 8005a92:	47b8      	blx	r7
 8005a94:	3001      	adds	r0, #1
 8005a96:	f43f af54 	beq.w	8005942 <_printf_float+0xb6>
 8005a9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a9e:	4543      	cmp	r3, r8
 8005aa0:	db02      	blt.n	8005aa8 <_printf_float+0x21c>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	07d8      	lsls	r0, r3, #31
 8005aa6:	d50f      	bpl.n	8005ac8 <_printf_float+0x23c>
 8005aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aac:	4631      	mov	r1, r6
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	f43f af45 	beq.w	8005942 <_printf_float+0xb6>
 8005ab8:	f04f 0900 	mov.w	r9, #0
 8005abc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ac0:	f104 0a1a 	add.w	sl, r4, #26
 8005ac4:	45c8      	cmp	r8, r9
 8005ac6:	dc09      	bgt.n	8005adc <_printf_float+0x250>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	079b      	lsls	r3, r3, #30
 8005acc:	f100 8103 	bmi.w	8005cd6 <_printf_float+0x44a>
 8005ad0:	68e0      	ldr	r0, [r4, #12]
 8005ad2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ad4:	4298      	cmp	r0, r3
 8005ad6:	bfb8      	it	lt
 8005ad8:	4618      	movlt	r0, r3
 8005ada:	e734      	b.n	8005946 <_printf_float+0xba>
 8005adc:	2301      	movs	r3, #1
 8005ade:	4652      	mov	r2, sl
 8005ae0:	4631      	mov	r1, r6
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	47b8      	blx	r7
 8005ae6:	3001      	adds	r0, #1
 8005ae8:	f43f af2b 	beq.w	8005942 <_printf_float+0xb6>
 8005aec:	f109 0901 	add.w	r9, r9, #1
 8005af0:	e7e8      	b.n	8005ac4 <_printf_float+0x238>
 8005af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	dc39      	bgt.n	8005b6c <_printf_float+0x2e0>
 8005af8:	4a1b      	ldr	r2, [pc, #108]	@ (8005b68 <_printf_float+0x2dc>)
 8005afa:	2301      	movs	r3, #1
 8005afc:	4631      	mov	r1, r6
 8005afe:	4628      	mov	r0, r5
 8005b00:	47b8      	blx	r7
 8005b02:	3001      	adds	r0, #1
 8005b04:	f43f af1d 	beq.w	8005942 <_printf_float+0xb6>
 8005b08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b0c:	ea59 0303 	orrs.w	r3, r9, r3
 8005b10:	d102      	bne.n	8005b18 <_printf_float+0x28c>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	07d9      	lsls	r1, r3, #31
 8005b16:	d5d7      	bpl.n	8005ac8 <_printf_float+0x23c>
 8005b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b8      	blx	r7
 8005b22:	3001      	adds	r0, #1
 8005b24:	f43f af0d 	beq.w	8005942 <_printf_float+0xb6>
 8005b28:	f04f 0a00 	mov.w	sl, #0
 8005b2c:	f104 0b1a 	add.w	fp, r4, #26
 8005b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b32:	425b      	negs	r3, r3
 8005b34:	4553      	cmp	r3, sl
 8005b36:	dc01      	bgt.n	8005b3c <_printf_float+0x2b0>
 8005b38:	464b      	mov	r3, r9
 8005b3a:	e793      	b.n	8005a64 <_printf_float+0x1d8>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	465a      	mov	r2, fp
 8005b40:	4631      	mov	r1, r6
 8005b42:	4628      	mov	r0, r5
 8005b44:	47b8      	blx	r7
 8005b46:	3001      	adds	r0, #1
 8005b48:	f43f aefb 	beq.w	8005942 <_printf_float+0xb6>
 8005b4c:	f10a 0a01 	add.w	sl, sl, #1
 8005b50:	e7ee      	b.n	8005b30 <_printf_float+0x2a4>
 8005b52:	bf00      	nop
 8005b54:	7fefffff 	.word	0x7fefffff
 8005b58:	0800a7e0 	.word	0x0800a7e0
 8005b5c:	0800a7e4 	.word	0x0800a7e4
 8005b60:	0800a7e8 	.word	0x0800a7e8
 8005b64:	0800a7ec 	.word	0x0800a7ec
 8005b68:	0800ab80 	.word	0x0800ab80
 8005b6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b72:	4553      	cmp	r3, sl
 8005b74:	bfa8      	it	ge
 8005b76:	4653      	movge	r3, sl
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	4699      	mov	r9, r3
 8005b7c:	dc36      	bgt.n	8005bec <_printf_float+0x360>
 8005b7e:	f04f 0b00 	mov.w	fp, #0
 8005b82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b86:	f104 021a 	add.w	r2, r4, #26
 8005b8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b8c:	9306      	str	r3, [sp, #24]
 8005b8e:	eba3 0309 	sub.w	r3, r3, r9
 8005b92:	455b      	cmp	r3, fp
 8005b94:	dc31      	bgt.n	8005bfa <_printf_float+0x36e>
 8005b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b98:	459a      	cmp	sl, r3
 8005b9a:	dc3a      	bgt.n	8005c12 <_printf_float+0x386>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	07da      	lsls	r2, r3, #31
 8005ba0:	d437      	bmi.n	8005c12 <_printf_float+0x386>
 8005ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba4:	ebaa 0903 	sub.w	r9, sl, r3
 8005ba8:	9b06      	ldr	r3, [sp, #24]
 8005baa:	ebaa 0303 	sub.w	r3, sl, r3
 8005bae:	4599      	cmp	r9, r3
 8005bb0:	bfa8      	it	ge
 8005bb2:	4699      	movge	r9, r3
 8005bb4:	f1b9 0f00 	cmp.w	r9, #0
 8005bb8:	dc33      	bgt.n	8005c22 <_printf_float+0x396>
 8005bba:	f04f 0800 	mov.w	r8, #0
 8005bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bc2:	f104 0b1a 	add.w	fp, r4, #26
 8005bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bc8:	ebaa 0303 	sub.w	r3, sl, r3
 8005bcc:	eba3 0309 	sub.w	r3, r3, r9
 8005bd0:	4543      	cmp	r3, r8
 8005bd2:	f77f af79 	ble.w	8005ac8 <_printf_float+0x23c>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	465a      	mov	r2, fp
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	47b8      	blx	r7
 8005be0:	3001      	adds	r0, #1
 8005be2:	f43f aeae 	beq.w	8005942 <_printf_float+0xb6>
 8005be6:	f108 0801 	add.w	r8, r8, #1
 8005bea:	e7ec      	b.n	8005bc6 <_printf_float+0x33a>
 8005bec:	4642      	mov	r2, r8
 8005bee:	4631      	mov	r1, r6
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b8      	blx	r7
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d1c2      	bne.n	8005b7e <_printf_float+0x2f2>
 8005bf8:	e6a3      	b.n	8005942 <_printf_float+0xb6>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	9206      	str	r2, [sp, #24]
 8005c02:	47b8      	blx	r7
 8005c04:	3001      	adds	r0, #1
 8005c06:	f43f ae9c 	beq.w	8005942 <_printf_float+0xb6>
 8005c0a:	9a06      	ldr	r2, [sp, #24]
 8005c0c:	f10b 0b01 	add.w	fp, fp, #1
 8005c10:	e7bb      	b.n	8005b8a <_printf_float+0x2fe>
 8005c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c16:	4631      	mov	r1, r6
 8005c18:	4628      	mov	r0, r5
 8005c1a:	47b8      	blx	r7
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d1c0      	bne.n	8005ba2 <_printf_float+0x316>
 8005c20:	e68f      	b.n	8005942 <_printf_float+0xb6>
 8005c22:	9a06      	ldr	r2, [sp, #24]
 8005c24:	464b      	mov	r3, r9
 8005c26:	4442      	add	r2, r8
 8005c28:	4631      	mov	r1, r6
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	47b8      	blx	r7
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d1c3      	bne.n	8005bba <_printf_float+0x32e>
 8005c32:	e686      	b.n	8005942 <_printf_float+0xb6>
 8005c34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c38:	f1ba 0f01 	cmp.w	sl, #1
 8005c3c:	dc01      	bgt.n	8005c42 <_printf_float+0x3b6>
 8005c3e:	07db      	lsls	r3, r3, #31
 8005c40:	d536      	bpl.n	8005cb0 <_printf_float+0x424>
 8005c42:	2301      	movs	r3, #1
 8005c44:	4642      	mov	r2, r8
 8005c46:	4631      	mov	r1, r6
 8005c48:	4628      	mov	r0, r5
 8005c4a:	47b8      	blx	r7
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	f43f ae78 	beq.w	8005942 <_printf_float+0xb6>
 8005c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	f43f ae70 	beq.w	8005942 <_printf_float+0xb6>
 8005c62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c66:	2200      	movs	r2, #0
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c6e:	f7fa ff33 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c72:	b9c0      	cbnz	r0, 8005ca6 <_printf_float+0x41a>
 8005c74:	4653      	mov	r3, sl
 8005c76:	f108 0201 	add.w	r2, r8, #1
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	d10c      	bne.n	8005c9e <_printf_float+0x412>
 8005c84:	e65d      	b.n	8005942 <_printf_float+0xb6>
 8005c86:	2301      	movs	r3, #1
 8005c88:	465a      	mov	r2, fp
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	47b8      	blx	r7
 8005c90:	3001      	adds	r0, #1
 8005c92:	f43f ae56 	beq.w	8005942 <_printf_float+0xb6>
 8005c96:	f108 0801 	add.w	r8, r8, #1
 8005c9a:	45d0      	cmp	r8, sl
 8005c9c:	dbf3      	blt.n	8005c86 <_printf_float+0x3fa>
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ca4:	e6df      	b.n	8005a66 <_printf_float+0x1da>
 8005ca6:	f04f 0800 	mov.w	r8, #0
 8005caa:	f104 0b1a 	add.w	fp, r4, #26
 8005cae:	e7f4      	b.n	8005c9a <_printf_float+0x40e>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	4642      	mov	r2, r8
 8005cb4:	e7e1      	b.n	8005c7a <_printf_float+0x3ee>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	464a      	mov	r2, r9
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	f43f ae3e 	beq.w	8005942 <_printf_float+0xb6>
 8005cc6:	f108 0801 	add.w	r8, r8, #1
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cce:	1a5b      	subs	r3, r3, r1
 8005cd0:	4543      	cmp	r3, r8
 8005cd2:	dcf0      	bgt.n	8005cb6 <_printf_float+0x42a>
 8005cd4:	e6fc      	b.n	8005ad0 <_printf_float+0x244>
 8005cd6:	f04f 0800 	mov.w	r8, #0
 8005cda:	f104 0919 	add.w	r9, r4, #25
 8005cde:	e7f4      	b.n	8005cca <_printf_float+0x43e>

08005ce0 <_printf_common>:
 8005ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	4616      	mov	r6, r2
 8005ce6:	4698      	mov	r8, r3
 8005ce8:	688a      	ldr	r2, [r1, #8]
 8005cea:	690b      	ldr	r3, [r1, #16]
 8005cec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	bfb8      	it	lt
 8005cf4:	4613      	movlt	r3, r2
 8005cf6:	6033      	str	r3, [r6, #0]
 8005cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	460c      	mov	r4, r1
 8005d00:	b10a      	cbz	r2, 8005d06 <_printf_common+0x26>
 8005d02:	3301      	adds	r3, #1
 8005d04:	6033      	str	r3, [r6, #0]
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	0699      	lsls	r1, r3, #26
 8005d0a:	bf42      	ittt	mi
 8005d0c:	6833      	ldrmi	r3, [r6, #0]
 8005d0e:	3302      	addmi	r3, #2
 8005d10:	6033      	strmi	r3, [r6, #0]
 8005d12:	6825      	ldr	r5, [r4, #0]
 8005d14:	f015 0506 	ands.w	r5, r5, #6
 8005d18:	d106      	bne.n	8005d28 <_printf_common+0x48>
 8005d1a:	f104 0a19 	add.w	sl, r4, #25
 8005d1e:	68e3      	ldr	r3, [r4, #12]
 8005d20:	6832      	ldr	r2, [r6, #0]
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	42ab      	cmp	r3, r5
 8005d26:	dc26      	bgt.n	8005d76 <_printf_common+0x96>
 8005d28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d2c:	6822      	ldr	r2, [r4, #0]
 8005d2e:	3b00      	subs	r3, #0
 8005d30:	bf18      	it	ne
 8005d32:	2301      	movne	r3, #1
 8005d34:	0692      	lsls	r2, r2, #26
 8005d36:	d42b      	bmi.n	8005d90 <_printf_common+0xb0>
 8005d38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c8      	blx	r9
 8005d42:	3001      	adds	r0, #1
 8005d44:	d01e      	beq.n	8005d84 <_printf_common+0xa4>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	6922      	ldr	r2, [r4, #16]
 8005d4a:	f003 0306 	and.w	r3, r3, #6
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	bf02      	ittt	eq
 8005d52:	68e5      	ldreq	r5, [r4, #12]
 8005d54:	6833      	ldreq	r3, [r6, #0]
 8005d56:	1aed      	subeq	r5, r5, r3
 8005d58:	68a3      	ldr	r3, [r4, #8]
 8005d5a:	bf0c      	ite	eq
 8005d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d60:	2500      	movne	r5, #0
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bfc4      	itt	gt
 8005d66:	1a9b      	subgt	r3, r3, r2
 8005d68:	18ed      	addgt	r5, r5, r3
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	341a      	adds	r4, #26
 8005d6e:	42b5      	cmp	r5, r6
 8005d70:	d11a      	bne.n	8005da8 <_printf_common+0xc8>
 8005d72:	2000      	movs	r0, #0
 8005d74:	e008      	b.n	8005d88 <_printf_common+0xa8>
 8005d76:	2301      	movs	r3, #1
 8005d78:	4652      	mov	r2, sl
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	47c8      	blx	r9
 8005d80:	3001      	adds	r0, #1
 8005d82:	d103      	bne.n	8005d8c <_printf_common+0xac>
 8005d84:	f04f 30ff 	mov.w	r0, #4294967295
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	e7c6      	b.n	8005d1e <_printf_common+0x3e>
 8005d90:	18e1      	adds	r1, r4, r3
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	2030      	movs	r0, #48	@ 0x30
 8005d96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d9a:	4422      	add	r2, r4
 8005d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005da0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005da4:	3302      	adds	r3, #2
 8005da6:	e7c7      	b.n	8005d38 <_printf_common+0x58>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4622      	mov	r2, r4
 8005dac:	4641      	mov	r1, r8
 8005dae:	4638      	mov	r0, r7
 8005db0:	47c8      	blx	r9
 8005db2:	3001      	adds	r0, #1
 8005db4:	d0e6      	beq.n	8005d84 <_printf_common+0xa4>
 8005db6:	3601      	adds	r6, #1
 8005db8:	e7d9      	b.n	8005d6e <_printf_common+0x8e>
	...

08005dbc <_printf_i>:
 8005dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc0:	7e0f      	ldrb	r7, [r1, #24]
 8005dc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dc4:	2f78      	cmp	r7, #120	@ 0x78
 8005dc6:	4691      	mov	r9, r2
 8005dc8:	4680      	mov	r8, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	469a      	mov	sl, r3
 8005dce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dd2:	d807      	bhi.n	8005de4 <_printf_i+0x28>
 8005dd4:	2f62      	cmp	r7, #98	@ 0x62
 8005dd6:	d80a      	bhi.n	8005dee <_printf_i+0x32>
 8005dd8:	2f00      	cmp	r7, #0
 8005dda:	f000 80d2 	beq.w	8005f82 <_printf_i+0x1c6>
 8005dde:	2f58      	cmp	r7, #88	@ 0x58
 8005de0:	f000 80b9 	beq.w	8005f56 <_printf_i+0x19a>
 8005de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005de8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005dec:	e03a      	b.n	8005e64 <_printf_i+0xa8>
 8005dee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005df2:	2b15      	cmp	r3, #21
 8005df4:	d8f6      	bhi.n	8005de4 <_printf_i+0x28>
 8005df6:	a101      	add	r1, pc, #4	@ (adr r1, 8005dfc <_printf_i+0x40>)
 8005df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005dfc:	08005e55 	.word	0x08005e55
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005de5 	.word	0x08005de5
 8005e08:	08005de5 	.word	0x08005de5
 8005e0c:	08005de5 	.word	0x08005de5
 8005e10:	08005de5 	.word	0x08005de5
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005de5 	.word	0x08005de5
 8005e1c:	08005de5 	.word	0x08005de5
 8005e20:	08005de5 	.word	0x08005de5
 8005e24:	08005de5 	.word	0x08005de5
 8005e28:	08005f69 	.word	0x08005f69
 8005e2c:	08005e93 	.word	0x08005e93
 8005e30:	08005f23 	.word	0x08005f23
 8005e34:	08005de5 	.word	0x08005de5
 8005e38:	08005de5 	.word	0x08005de5
 8005e3c:	08005f8b 	.word	0x08005f8b
 8005e40:	08005de5 	.word	0x08005de5
 8005e44:	08005e93 	.word	0x08005e93
 8005e48:	08005de5 	.word	0x08005de5
 8005e4c:	08005de5 	.word	0x08005de5
 8005e50:	08005f2b 	.word	0x08005f2b
 8005e54:	6833      	ldr	r3, [r6, #0]
 8005e56:	1d1a      	adds	r2, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6032      	str	r2, [r6, #0]
 8005e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e64:	2301      	movs	r3, #1
 8005e66:	e09d      	b.n	8005fa4 <_printf_i+0x1e8>
 8005e68:	6833      	ldr	r3, [r6, #0]
 8005e6a:	6820      	ldr	r0, [r4, #0]
 8005e6c:	1d19      	adds	r1, r3, #4
 8005e6e:	6031      	str	r1, [r6, #0]
 8005e70:	0606      	lsls	r6, r0, #24
 8005e72:	d501      	bpl.n	8005e78 <_printf_i+0xbc>
 8005e74:	681d      	ldr	r5, [r3, #0]
 8005e76:	e003      	b.n	8005e80 <_printf_i+0xc4>
 8005e78:	0645      	lsls	r5, r0, #25
 8005e7a:	d5fb      	bpl.n	8005e74 <_printf_i+0xb8>
 8005e7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e80:	2d00      	cmp	r5, #0
 8005e82:	da03      	bge.n	8005e8c <_printf_i+0xd0>
 8005e84:	232d      	movs	r3, #45	@ 0x2d
 8005e86:	426d      	negs	r5, r5
 8005e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e8c:	4859      	ldr	r0, [pc, #356]	@ (8005ff4 <_printf_i+0x238>)
 8005e8e:	230a      	movs	r3, #10
 8005e90:	e011      	b.n	8005eb6 <_printf_i+0xfa>
 8005e92:	6821      	ldr	r1, [r4, #0]
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	0608      	lsls	r0, r1, #24
 8005e98:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e9c:	d402      	bmi.n	8005ea4 <_printf_i+0xe8>
 8005e9e:	0649      	lsls	r1, r1, #25
 8005ea0:	bf48      	it	mi
 8005ea2:	b2ad      	uxthmi	r5, r5
 8005ea4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ea6:	4853      	ldr	r0, [pc, #332]	@ (8005ff4 <_printf_i+0x238>)
 8005ea8:	6033      	str	r3, [r6, #0]
 8005eaa:	bf14      	ite	ne
 8005eac:	230a      	movne	r3, #10
 8005eae:	2308      	moveq	r3, #8
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eb6:	6866      	ldr	r6, [r4, #4]
 8005eb8:	60a6      	str	r6, [r4, #8]
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	bfa2      	ittt	ge
 8005ebe:	6821      	ldrge	r1, [r4, #0]
 8005ec0:	f021 0104 	bicge.w	r1, r1, #4
 8005ec4:	6021      	strge	r1, [r4, #0]
 8005ec6:	b90d      	cbnz	r5, 8005ecc <_printf_i+0x110>
 8005ec8:	2e00      	cmp	r6, #0
 8005eca:	d04b      	beq.n	8005f64 <_printf_i+0x1a8>
 8005ecc:	4616      	mov	r6, r2
 8005ece:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ed2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ed6:	5dc7      	ldrb	r7, [r0, r7]
 8005ed8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005edc:	462f      	mov	r7, r5
 8005ede:	42bb      	cmp	r3, r7
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	d9f4      	bls.n	8005ece <_printf_i+0x112>
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d10b      	bne.n	8005f00 <_printf_i+0x144>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	07df      	lsls	r7, r3, #31
 8005eec:	d508      	bpl.n	8005f00 <_printf_i+0x144>
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	6861      	ldr	r1, [r4, #4]
 8005ef2:	4299      	cmp	r1, r3
 8005ef4:	bfde      	ittt	le
 8005ef6:	2330      	movle	r3, #48	@ 0x30
 8005ef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005efc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f00:	1b92      	subs	r2, r2, r6
 8005f02:	6122      	str	r2, [r4, #16]
 8005f04:	f8cd a000 	str.w	sl, [sp]
 8005f08:	464b      	mov	r3, r9
 8005f0a:	aa03      	add	r2, sp, #12
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4640      	mov	r0, r8
 8005f10:	f7ff fee6 	bl	8005ce0 <_printf_common>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d14a      	bne.n	8005fae <_printf_i+0x1f2>
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	b004      	add	sp, #16
 8005f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	f043 0320 	orr.w	r3, r3, #32
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	4833      	ldr	r0, [pc, #204]	@ (8005ff8 <_printf_i+0x23c>)
 8005f2c:	2778      	movs	r7, #120	@ 0x78
 8005f2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	6831      	ldr	r1, [r6, #0]
 8005f36:	061f      	lsls	r7, r3, #24
 8005f38:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f3c:	d402      	bmi.n	8005f44 <_printf_i+0x188>
 8005f3e:	065f      	lsls	r7, r3, #25
 8005f40:	bf48      	it	mi
 8005f42:	b2ad      	uxthmi	r5, r5
 8005f44:	6031      	str	r1, [r6, #0]
 8005f46:	07d9      	lsls	r1, r3, #31
 8005f48:	bf44      	itt	mi
 8005f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f4e:	6023      	strmi	r3, [r4, #0]
 8005f50:	b11d      	cbz	r5, 8005f5a <_printf_i+0x19e>
 8005f52:	2310      	movs	r3, #16
 8005f54:	e7ac      	b.n	8005eb0 <_printf_i+0xf4>
 8005f56:	4827      	ldr	r0, [pc, #156]	@ (8005ff4 <_printf_i+0x238>)
 8005f58:	e7e9      	b.n	8005f2e <_printf_i+0x172>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	f023 0320 	bic.w	r3, r3, #32
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	e7f6      	b.n	8005f52 <_printf_i+0x196>
 8005f64:	4616      	mov	r6, r2
 8005f66:	e7bd      	b.n	8005ee4 <_printf_i+0x128>
 8005f68:	6833      	ldr	r3, [r6, #0]
 8005f6a:	6825      	ldr	r5, [r4, #0]
 8005f6c:	6961      	ldr	r1, [r4, #20]
 8005f6e:	1d18      	adds	r0, r3, #4
 8005f70:	6030      	str	r0, [r6, #0]
 8005f72:	062e      	lsls	r6, r5, #24
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	d501      	bpl.n	8005f7c <_printf_i+0x1c0>
 8005f78:	6019      	str	r1, [r3, #0]
 8005f7a:	e002      	b.n	8005f82 <_printf_i+0x1c6>
 8005f7c:	0668      	lsls	r0, r5, #25
 8005f7e:	d5fb      	bpl.n	8005f78 <_printf_i+0x1bc>
 8005f80:	8019      	strh	r1, [r3, #0]
 8005f82:	2300      	movs	r3, #0
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	4616      	mov	r6, r2
 8005f88:	e7bc      	b.n	8005f04 <_printf_i+0x148>
 8005f8a:	6833      	ldr	r3, [r6, #0]
 8005f8c:	1d1a      	adds	r2, r3, #4
 8005f8e:	6032      	str	r2, [r6, #0]
 8005f90:	681e      	ldr	r6, [r3, #0]
 8005f92:	6862      	ldr	r2, [r4, #4]
 8005f94:	2100      	movs	r1, #0
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7fa f922 	bl	80001e0 <memchr>
 8005f9c:	b108      	cbz	r0, 8005fa2 <_printf_i+0x1e6>
 8005f9e:	1b80      	subs	r0, r0, r6
 8005fa0:	6060      	str	r0, [r4, #4]
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fac:	e7aa      	b.n	8005f04 <_printf_i+0x148>
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	47d0      	blx	sl
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d0ad      	beq.n	8005f18 <_printf_i+0x15c>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	079b      	lsls	r3, r3, #30
 8005fc0:	d413      	bmi.n	8005fea <_printf_i+0x22e>
 8005fc2:	68e0      	ldr	r0, [r4, #12]
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	4298      	cmp	r0, r3
 8005fc8:	bfb8      	it	lt
 8005fca:	4618      	movlt	r0, r3
 8005fcc:	e7a6      	b.n	8005f1c <_printf_i+0x160>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4632      	mov	r2, r6
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	47d0      	blx	sl
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d09d      	beq.n	8005f18 <_printf_i+0x15c>
 8005fdc:	3501      	adds	r5, #1
 8005fde:	68e3      	ldr	r3, [r4, #12]
 8005fe0:	9903      	ldr	r1, [sp, #12]
 8005fe2:	1a5b      	subs	r3, r3, r1
 8005fe4:	42ab      	cmp	r3, r5
 8005fe6:	dcf2      	bgt.n	8005fce <_printf_i+0x212>
 8005fe8:	e7eb      	b.n	8005fc2 <_printf_i+0x206>
 8005fea:	2500      	movs	r5, #0
 8005fec:	f104 0619 	add.w	r6, r4, #25
 8005ff0:	e7f5      	b.n	8005fde <_printf_i+0x222>
 8005ff2:	bf00      	nop
 8005ff4:	0800a7f0 	.word	0x0800a7f0
 8005ff8:	0800a801 	.word	0x0800a801

08005ffc <_scanf_float>:
 8005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006000:	b087      	sub	sp, #28
 8006002:	4617      	mov	r7, r2
 8006004:	9303      	str	r3, [sp, #12]
 8006006:	688b      	ldr	r3, [r1, #8]
 8006008:	1e5a      	subs	r2, r3, #1
 800600a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800600e:	bf81      	itttt	hi
 8006010:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006014:	eb03 0b05 	addhi.w	fp, r3, r5
 8006018:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800601c:	608b      	strhi	r3, [r1, #8]
 800601e:	680b      	ldr	r3, [r1, #0]
 8006020:	460a      	mov	r2, r1
 8006022:	f04f 0500 	mov.w	r5, #0
 8006026:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800602a:	f842 3b1c 	str.w	r3, [r2], #28
 800602e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006032:	4680      	mov	r8, r0
 8006034:	460c      	mov	r4, r1
 8006036:	bf98      	it	ls
 8006038:	f04f 0b00 	movls.w	fp, #0
 800603c:	9201      	str	r2, [sp, #4]
 800603e:	4616      	mov	r6, r2
 8006040:	46aa      	mov	sl, r5
 8006042:	46a9      	mov	r9, r5
 8006044:	9502      	str	r5, [sp, #8]
 8006046:	68a2      	ldr	r2, [r4, #8]
 8006048:	b152      	cbz	r2, 8006060 <_scanf_float+0x64>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006050:	d864      	bhi.n	800611c <_scanf_float+0x120>
 8006052:	2b40      	cmp	r3, #64	@ 0x40
 8006054:	d83c      	bhi.n	80060d0 <_scanf_float+0xd4>
 8006056:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800605a:	b2c8      	uxtb	r0, r1
 800605c:	280e      	cmp	r0, #14
 800605e:	d93a      	bls.n	80060d6 <_scanf_float+0xda>
 8006060:	f1b9 0f00 	cmp.w	r9, #0
 8006064:	d003      	beq.n	800606e <_scanf_float+0x72>
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006072:	f1ba 0f01 	cmp.w	sl, #1
 8006076:	f200 8117 	bhi.w	80062a8 <_scanf_float+0x2ac>
 800607a:	9b01      	ldr	r3, [sp, #4]
 800607c:	429e      	cmp	r6, r3
 800607e:	f200 8108 	bhi.w	8006292 <_scanf_float+0x296>
 8006082:	2001      	movs	r0, #1
 8006084:	b007      	add	sp, #28
 8006086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800608e:	2a0d      	cmp	r2, #13
 8006090:	d8e6      	bhi.n	8006060 <_scanf_float+0x64>
 8006092:	a101      	add	r1, pc, #4	@ (adr r1, 8006098 <_scanf_float+0x9c>)
 8006094:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006098:	080061df 	.word	0x080061df
 800609c:	08006061 	.word	0x08006061
 80060a0:	08006061 	.word	0x08006061
 80060a4:	08006061 	.word	0x08006061
 80060a8:	0800623f 	.word	0x0800623f
 80060ac:	08006217 	.word	0x08006217
 80060b0:	08006061 	.word	0x08006061
 80060b4:	08006061 	.word	0x08006061
 80060b8:	080061ed 	.word	0x080061ed
 80060bc:	08006061 	.word	0x08006061
 80060c0:	08006061 	.word	0x08006061
 80060c4:	08006061 	.word	0x08006061
 80060c8:	08006061 	.word	0x08006061
 80060cc:	080061a5 	.word	0x080061a5
 80060d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80060d4:	e7db      	b.n	800608e <_scanf_float+0x92>
 80060d6:	290e      	cmp	r1, #14
 80060d8:	d8c2      	bhi.n	8006060 <_scanf_float+0x64>
 80060da:	a001      	add	r0, pc, #4	@ (adr r0, 80060e0 <_scanf_float+0xe4>)
 80060dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80060e0:	08006195 	.word	0x08006195
 80060e4:	08006061 	.word	0x08006061
 80060e8:	08006195 	.word	0x08006195
 80060ec:	0800622b 	.word	0x0800622b
 80060f0:	08006061 	.word	0x08006061
 80060f4:	0800613d 	.word	0x0800613d
 80060f8:	0800617b 	.word	0x0800617b
 80060fc:	0800617b 	.word	0x0800617b
 8006100:	0800617b 	.word	0x0800617b
 8006104:	0800617b 	.word	0x0800617b
 8006108:	0800617b 	.word	0x0800617b
 800610c:	0800617b 	.word	0x0800617b
 8006110:	0800617b 	.word	0x0800617b
 8006114:	0800617b 	.word	0x0800617b
 8006118:	0800617b 	.word	0x0800617b
 800611c:	2b6e      	cmp	r3, #110	@ 0x6e
 800611e:	d809      	bhi.n	8006134 <_scanf_float+0x138>
 8006120:	2b60      	cmp	r3, #96	@ 0x60
 8006122:	d8b2      	bhi.n	800608a <_scanf_float+0x8e>
 8006124:	2b54      	cmp	r3, #84	@ 0x54
 8006126:	d07b      	beq.n	8006220 <_scanf_float+0x224>
 8006128:	2b59      	cmp	r3, #89	@ 0x59
 800612a:	d199      	bne.n	8006060 <_scanf_float+0x64>
 800612c:	2d07      	cmp	r5, #7
 800612e:	d197      	bne.n	8006060 <_scanf_float+0x64>
 8006130:	2508      	movs	r5, #8
 8006132:	e02c      	b.n	800618e <_scanf_float+0x192>
 8006134:	2b74      	cmp	r3, #116	@ 0x74
 8006136:	d073      	beq.n	8006220 <_scanf_float+0x224>
 8006138:	2b79      	cmp	r3, #121	@ 0x79
 800613a:	e7f6      	b.n	800612a <_scanf_float+0x12e>
 800613c:	6821      	ldr	r1, [r4, #0]
 800613e:	05c8      	lsls	r0, r1, #23
 8006140:	d51b      	bpl.n	800617a <_scanf_float+0x17e>
 8006142:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006146:	6021      	str	r1, [r4, #0]
 8006148:	f109 0901 	add.w	r9, r9, #1
 800614c:	f1bb 0f00 	cmp.w	fp, #0
 8006150:	d003      	beq.n	800615a <_scanf_float+0x15e>
 8006152:	3201      	adds	r2, #1
 8006154:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006158:	60a2      	str	r2, [r4, #8]
 800615a:	68a3      	ldr	r3, [r4, #8]
 800615c:	3b01      	subs	r3, #1
 800615e:	60a3      	str	r3, [r4, #8]
 8006160:	6923      	ldr	r3, [r4, #16]
 8006162:	3301      	adds	r3, #1
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3b01      	subs	r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	607b      	str	r3, [r7, #4]
 800616e:	f340 8087 	ble.w	8006280 <_scanf_float+0x284>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	603b      	str	r3, [r7, #0]
 8006178:	e765      	b.n	8006046 <_scanf_float+0x4a>
 800617a:	eb1a 0105 	adds.w	r1, sl, r5
 800617e:	f47f af6f 	bne.w	8006060 <_scanf_float+0x64>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006188:	6022      	str	r2, [r4, #0]
 800618a:	460d      	mov	r5, r1
 800618c:	468a      	mov	sl, r1
 800618e:	f806 3b01 	strb.w	r3, [r6], #1
 8006192:	e7e2      	b.n	800615a <_scanf_float+0x15e>
 8006194:	6822      	ldr	r2, [r4, #0]
 8006196:	0610      	lsls	r0, r2, #24
 8006198:	f57f af62 	bpl.w	8006060 <_scanf_float+0x64>
 800619c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061a0:	6022      	str	r2, [r4, #0]
 80061a2:	e7f4      	b.n	800618e <_scanf_float+0x192>
 80061a4:	f1ba 0f00 	cmp.w	sl, #0
 80061a8:	d10e      	bne.n	80061c8 <_scanf_float+0x1cc>
 80061aa:	f1b9 0f00 	cmp.w	r9, #0
 80061ae:	d10e      	bne.n	80061ce <_scanf_float+0x1d2>
 80061b0:	6822      	ldr	r2, [r4, #0]
 80061b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80061b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80061ba:	d108      	bne.n	80061ce <_scanf_float+0x1d2>
 80061bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061c0:	6022      	str	r2, [r4, #0]
 80061c2:	f04f 0a01 	mov.w	sl, #1
 80061c6:	e7e2      	b.n	800618e <_scanf_float+0x192>
 80061c8:	f1ba 0f02 	cmp.w	sl, #2
 80061cc:	d055      	beq.n	800627a <_scanf_float+0x27e>
 80061ce:	2d01      	cmp	r5, #1
 80061d0:	d002      	beq.n	80061d8 <_scanf_float+0x1dc>
 80061d2:	2d04      	cmp	r5, #4
 80061d4:	f47f af44 	bne.w	8006060 <_scanf_float+0x64>
 80061d8:	3501      	adds	r5, #1
 80061da:	b2ed      	uxtb	r5, r5
 80061dc:	e7d7      	b.n	800618e <_scanf_float+0x192>
 80061de:	f1ba 0f01 	cmp.w	sl, #1
 80061e2:	f47f af3d 	bne.w	8006060 <_scanf_float+0x64>
 80061e6:	f04f 0a02 	mov.w	sl, #2
 80061ea:	e7d0      	b.n	800618e <_scanf_float+0x192>
 80061ec:	b97d      	cbnz	r5, 800620e <_scanf_float+0x212>
 80061ee:	f1b9 0f00 	cmp.w	r9, #0
 80061f2:	f47f af38 	bne.w	8006066 <_scanf_float+0x6a>
 80061f6:	6822      	ldr	r2, [r4, #0]
 80061f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80061fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006200:	f040 8108 	bne.w	8006414 <_scanf_float+0x418>
 8006204:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006208:	6022      	str	r2, [r4, #0]
 800620a:	2501      	movs	r5, #1
 800620c:	e7bf      	b.n	800618e <_scanf_float+0x192>
 800620e:	2d03      	cmp	r5, #3
 8006210:	d0e2      	beq.n	80061d8 <_scanf_float+0x1dc>
 8006212:	2d05      	cmp	r5, #5
 8006214:	e7de      	b.n	80061d4 <_scanf_float+0x1d8>
 8006216:	2d02      	cmp	r5, #2
 8006218:	f47f af22 	bne.w	8006060 <_scanf_float+0x64>
 800621c:	2503      	movs	r5, #3
 800621e:	e7b6      	b.n	800618e <_scanf_float+0x192>
 8006220:	2d06      	cmp	r5, #6
 8006222:	f47f af1d 	bne.w	8006060 <_scanf_float+0x64>
 8006226:	2507      	movs	r5, #7
 8006228:	e7b1      	b.n	800618e <_scanf_float+0x192>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	0591      	lsls	r1, r2, #22
 800622e:	f57f af17 	bpl.w	8006060 <_scanf_float+0x64>
 8006232:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006236:	6022      	str	r2, [r4, #0]
 8006238:	f8cd 9008 	str.w	r9, [sp, #8]
 800623c:	e7a7      	b.n	800618e <_scanf_float+0x192>
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006244:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006248:	d006      	beq.n	8006258 <_scanf_float+0x25c>
 800624a:	0550      	lsls	r0, r2, #21
 800624c:	f57f af08 	bpl.w	8006060 <_scanf_float+0x64>
 8006250:	f1b9 0f00 	cmp.w	r9, #0
 8006254:	f000 80de 	beq.w	8006414 <_scanf_float+0x418>
 8006258:	0591      	lsls	r1, r2, #22
 800625a:	bf58      	it	pl
 800625c:	9902      	ldrpl	r1, [sp, #8]
 800625e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006262:	bf58      	it	pl
 8006264:	eba9 0101 	subpl.w	r1, r9, r1
 8006268:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800626c:	bf58      	it	pl
 800626e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	f04f 0900 	mov.w	r9, #0
 8006278:	e789      	b.n	800618e <_scanf_float+0x192>
 800627a:	f04f 0a03 	mov.w	sl, #3
 800627e:	e786      	b.n	800618e <_scanf_float+0x192>
 8006280:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006284:	4639      	mov	r1, r7
 8006286:	4640      	mov	r0, r8
 8006288:	4798      	blx	r3
 800628a:	2800      	cmp	r0, #0
 800628c:	f43f aedb 	beq.w	8006046 <_scanf_float+0x4a>
 8006290:	e6e6      	b.n	8006060 <_scanf_float+0x64>
 8006292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800629a:	463a      	mov	r2, r7
 800629c:	4640      	mov	r0, r8
 800629e:	4798      	blx	r3
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	6123      	str	r3, [r4, #16]
 80062a6:	e6e8      	b.n	800607a <_scanf_float+0x7e>
 80062a8:	1e6b      	subs	r3, r5, #1
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d824      	bhi.n	80062f8 <_scanf_float+0x2fc>
 80062ae:	2d02      	cmp	r5, #2
 80062b0:	d836      	bhi.n	8006320 <_scanf_float+0x324>
 80062b2:	9b01      	ldr	r3, [sp, #4]
 80062b4:	429e      	cmp	r6, r3
 80062b6:	f67f aee4 	bls.w	8006082 <_scanf_float+0x86>
 80062ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062c2:	463a      	mov	r2, r7
 80062c4:	4640      	mov	r0, r8
 80062c6:	4798      	blx	r3
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	e7f0      	b.n	80062b2 <_scanf_float+0x2b6>
 80062d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80062d8:	463a      	mov	r2, r7
 80062da:	4640      	mov	r0, r8
 80062dc:	4798      	blx	r3
 80062de:	6923      	ldr	r3, [r4, #16]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	6123      	str	r3, [r4, #16]
 80062e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062e8:	fa5f fa8a 	uxtb.w	sl, sl
 80062ec:	f1ba 0f02 	cmp.w	sl, #2
 80062f0:	d1ee      	bne.n	80062d0 <_scanf_float+0x2d4>
 80062f2:	3d03      	subs	r5, #3
 80062f4:	b2ed      	uxtb	r5, r5
 80062f6:	1b76      	subs	r6, r6, r5
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	05da      	lsls	r2, r3, #23
 80062fc:	d530      	bpl.n	8006360 <_scanf_float+0x364>
 80062fe:	055b      	lsls	r3, r3, #21
 8006300:	d511      	bpl.n	8006326 <_scanf_float+0x32a>
 8006302:	9b01      	ldr	r3, [sp, #4]
 8006304:	429e      	cmp	r6, r3
 8006306:	f67f aebc 	bls.w	8006082 <_scanf_float+0x86>
 800630a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800630e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006312:	463a      	mov	r2, r7
 8006314:	4640      	mov	r0, r8
 8006316:	4798      	blx	r3
 8006318:	6923      	ldr	r3, [r4, #16]
 800631a:	3b01      	subs	r3, #1
 800631c:	6123      	str	r3, [r4, #16]
 800631e:	e7f0      	b.n	8006302 <_scanf_float+0x306>
 8006320:	46aa      	mov	sl, r5
 8006322:	46b3      	mov	fp, r6
 8006324:	e7de      	b.n	80062e4 <_scanf_float+0x2e8>
 8006326:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	2965      	cmp	r1, #101	@ 0x65
 800632e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006332:	f106 35ff 	add.w	r5, r6, #4294967295
 8006336:	6123      	str	r3, [r4, #16]
 8006338:	d00c      	beq.n	8006354 <_scanf_float+0x358>
 800633a:	2945      	cmp	r1, #69	@ 0x45
 800633c:	d00a      	beq.n	8006354 <_scanf_float+0x358>
 800633e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006342:	463a      	mov	r2, r7
 8006344:	4640      	mov	r0, r8
 8006346:	4798      	blx	r3
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800634e:	3b01      	subs	r3, #1
 8006350:	1eb5      	subs	r5, r6, #2
 8006352:	6123      	str	r3, [r4, #16]
 8006354:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006358:	463a      	mov	r2, r7
 800635a:	4640      	mov	r0, r8
 800635c:	4798      	blx	r3
 800635e:	462e      	mov	r6, r5
 8006360:	6822      	ldr	r2, [r4, #0]
 8006362:	f012 0210 	ands.w	r2, r2, #16
 8006366:	d001      	beq.n	800636c <_scanf_float+0x370>
 8006368:	2000      	movs	r0, #0
 800636a:	e68b      	b.n	8006084 <_scanf_float+0x88>
 800636c:	7032      	strb	r2, [r6, #0]
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006378:	d11c      	bne.n	80063b4 <_scanf_float+0x3b8>
 800637a:	9b02      	ldr	r3, [sp, #8]
 800637c:	454b      	cmp	r3, r9
 800637e:	eba3 0209 	sub.w	r2, r3, r9
 8006382:	d123      	bne.n	80063cc <_scanf_float+0x3d0>
 8006384:	9901      	ldr	r1, [sp, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	4640      	mov	r0, r8
 800638a:	f002 fd29 	bl	8008de0 <_strtod_r>
 800638e:	9b03      	ldr	r3, [sp, #12]
 8006390:	6821      	ldr	r1, [r4, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f011 0f02 	tst.w	r1, #2
 8006398:	ec57 6b10 	vmov	r6, r7, d0
 800639c:	f103 0204 	add.w	r2, r3, #4
 80063a0:	d01f      	beq.n	80063e2 <_scanf_float+0x3e6>
 80063a2:	9903      	ldr	r1, [sp, #12]
 80063a4:	600a      	str	r2, [r1, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	e9c3 6700 	strd	r6, r7, [r3]
 80063ac:	68e3      	ldr	r3, [r4, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60e3      	str	r3, [r4, #12]
 80063b2:	e7d9      	b.n	8006368 <_scanf_float+0x36c>
 80063b4:	9b04      	ldr	r3, [sp, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0e4      	beq.n	8006384 <_scanf_float+0x388>
 80063ba:	9905      	ldr	r1, [sp, #20]
 80063bc:	230a      	movs	r3, #10
 80063be:	3101      	adds	r1, #1
 80063c0:	4640      	mov	r0, r8
 80063c2:	f002 fd8d 	bl	8008ee0 <_strtol_r>
 80063c6:	9b04      	ldr	r3, [sp, #16]
 80063c8:	9e05      	ldr	r6, [sp, #20]
 80063ca:	1ac2      	subs	r2, r0, r3
 80063cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80063d0:	429e      	cmp	r6, r3
 80063d2:	bf28      	it	cs
 80063d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80063d8:	4910      	ldr	r1, [pc, #64]	@ (800641c <_scanf_float+0x420>)
 80063da:	4630      	mov	r0, r6
 80063dc:	f000 f954 	bl	8006688 <siprintf>
 80063e0:	e7d0      	b.n	8006384 <_scanf_float+0x388>
 80063e2:	f011 0f04 	tst.w	r1, #4
 80063e6:	9903      	ldr	r1, [sp, #12]
 80063e8:	600a      	str	r2, [r1, #0]
 80063ea:	d1dc      	bne.n	80063a6 <_scanf_float+0x3aa>
 80063ec:	681d      	ldr	r5, [r3, #0]
 80063ee:	4632      	mov	r2, r6
 80063f0:	463b      	mov	r3, r7
 80063f2:	4630      	mov	r0, r6
 80063f4:	4639      	mov	r1, r7
 80063f6:	f7fa fba1 	bl	8000b3c <__aeabi_dcmpun>
 80063fa:	b128      	cbz	r0, 8006408 <_scanf_float+0x40c>
 80063fc:	4808      	ldr	r0, [pc, #32]	@ (8006420 <_scanf_float+0x424>)
 80063fe:	f000 fae7 	bl	80069d0 <nanf>
 8006402:	ed85 0a00 	vstr	s0, [r5]
 8006406:	e7d1      	b.n	80063ac <_scanf_float+0x3b0>
 8006408:	4630      	mov	r0, r6
 800640a:	4639      	mov	r1, r7
 800640c:	f7fa fbf4 	bl	8000bf8 <__aeabi_d2f>
 8006410:	6028      	str	r0, [r5, #0]
 8006412:	e7cb      	b.n	80063ac <_scanf_float+0x3b0>
 8006414:	f04f 0900 	mov.w	r9, #0
 8006418:	e629      	b.n	800606e <_scanf_float+0x72>
 800641a:	bf00      	nop
 800641c:	0800a812 	.word	0x0800a812
 8006420:	0800abc8 	.word	0x0800abc8

08006424 <std>:
 8006424:	2300      	movs	r3, #0
 8006426:	b510      	push	{r4, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	e9c0 3300 	strd	r3, r3, [r0]
 800642e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006432:	6083      	str	r3, [r0, #8]
 8006434:	8181      	strh	r1, [r0, #12]
 8006436:	6643      	str	r3, [r0, #100]	@ 0x64
 8006438:	81c2      	strh	r2, [r0, #14]
 800643a:	6183      	str	r3, [r0, #24]
 800643c:	4619      	mov	r1, r3
 800643e:	2208      	movs	r2, #8
 8006440:	305c      	adds	r0, #92	@ 0x5c
 8006442:	f000 fa45 	bl	80068d0 <memset>
 8006446:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <std+0x58>)
 8006448:	6263      	str	r3, [r4, #36]	@ 0x24
 800644a:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <std+0x5c>)
 800644c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800644e:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <std+0x60>)
 8006450:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006452:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <std+0x64>)
 8006454:	6323      	str	r3, [r4, #48]	@ 0x30
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <std+0x68>)
 8006458:	6224      	str	r4, [r4, #32]
 800645a:	429c      	cmp	r4, r3
 800645c:	d006      	beq.n	800646c <std+0x48>
 800645e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006462:	4294      	cmp	r4, r2
 8006464:	d002      	beq.n	800646c <std+0x48>
 8006466:	33d0      	adds	r3, #208	@ 0xd0
 8006468:	429c      	cmp	r4, r3
 800646a:	d105      	bne.n	8006478 <std+0x54>
 800646c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	f000 baa8 	b.w	80069c8 <__retarget_lock_init_recursive>
 8006478:	bd10      	pop	{r4, pc}
 800647a:	bf00      	nop
 800647c:	0800671d 	.word	0x0800671d
 8006480:	08006743 	.word	0x08006743
 8006484:	0800677b 	.word	0x0800677b
 8006488:	0800679f 	.word	0x0800679f
 800648c:	20000448 	.word	0x20000448

08006490 <stdio_exit_handler>:
 8006490:	4a02      	ldr	r2, [pc, #8]	@ (800649c <stdio_exit_handler+0xc>)
 8006492:	4903      	ldr	r1, [pc, #12]	@ (80064a0 <stdio_exit_handler+0x10>)
 8006494:	4803      	ldr	r0, [pc, #12]	@ (80064a4 <stdio_exit_handler+0x14>)
 8006496:	f000 b869 	b.w	800656c <_fwalk_sglue>
 800649a:	bf00      	nop
 800649c:	20000030 	.word	0x20000030
 80064a0:	08009b55 	.word	0x08009b55
 80064a4:	20000040 	.word	0x20000040

080064a8 <cleanup_stdio>:
 80064a8:	6841      	ldr	r1, [r0, #4]
 80064aa:	4b0c      	ldr	r3, [pc, #48]	@ (80064dc <cleanup_stdio+0x34>)
 80064ac:	4299      	cmp	r1, r3
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
 80064b2:	d001      	beq.n	80064b8 <cleanup_stdio+0x10>
 80064b4:	f003 fb4e 	bl	8009b54 <_fflush_r>
 80064b8:	68a1      	ldr	r1, [r4, #8]
 80064ba:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <cleanup_stdio+0x38>)
 80064bc:	4299      	cmp	r1, r3
 80064be:	d002      	beq.n	80064c6 <cleanup_stdio+0x1e>
 80064c0:	4620      	mov	r0, r4
 80064c2:	f003 fb47 	bl	8009b54 <_fflush_r>
 80064c6:	68e1      	ldr	r1, [r4, #12]
 80064c8:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <cleanup_stdio+0x3c>)
 80064ca:	4299      	cmp	r1, r3
 80064cc:	d004      	beq.n	80064d8 <cleanup_stdio+0x30>
 80064ce:	4620      	mov	r0, r4
 80064d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d4:	f003 bb3e 	b.w	8009b54 <_fflush_r>
 80064d8:	bd10      	pop	{r4, pc}
 80064da:	bf00      	nop
 80064dc:	20000448 	.word	0x20000448
 80064e0:	200004b0 	.word	0x200004b0
 80064e4:	20000518 	.word	0x20000518

080064e8 <global_stdio_init.part.0>:
 80064e8:	b510      	push	{r4, lr}
 80064ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <global_stdio_init.part.0+0x30>)
 80064ec:	4c0b      	ldr	r4, [pc, #44]	@ (800651c <global_stdio_init.part.0+0x34>)
 80064ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006520 <global_stdio_init.part.0+0x38>)
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	4620      	mov	r0, r4
 80064f4:	2200      	movs	r2, #0
 80064f6:	2104      	movs	r1, #4
 80064f8:	f7ff ff94 	bl	8006424 <std>
 80064fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006500:	2201      	movs	r2, #1
 8006502:	2109      	movs	r1, #9
 8006504:	f7ff ff8e 	bl	8006424 <std>
 8006508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800650c:	2202      	movs	r2, #2
 800650e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006512:	2112      	movs	r1, #18
 8006514:	f7ff bf86 	b.w	8006424 <std>
 8006518:	20000580 	.word	0x20000580
 800651c:	20000448 	.word	0x20000448
 8006520:	08006491 	.word	0x08006491

08006524 <__sfp_lock_acquire>:
 8006524:	4801      	ldr	r0, [pc, #4]	@ (800652c <__sfp_lock_acquire+0x8>)
 8006526:	f000 ba50 	b.w	80069ca <__retarget_lock_acquire_recursive>
 800652a:	bf00      	nop
 800652c:	20000589 	.word	0x20000589

08006530 <__sfp_lock_release>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__sfp_lock_release+0x8>)
 8006532:	f000 ba4b 	b.w	80069cc <__retarget_lock_release_recursive>
 8006536:	bf00      	nop
 8006538:	20000589 	.word	0x20000589

0800653c <__sinit>:
 800653c:	b510      	push	{r4, lr}
 800653e:	4604      	mov	r4, r0
 8006540:	f7ff fff0 	bl	8006524 <__sfp_lock_acquire>
 8006544:	6a23      	ldr	r3, [r4, #32]
 8006546:	b11b      	cbz	r3, 8006550 <__sinit+0x14>
 8006548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800654c:	f7ff bff0 	b.w	8006530 <__sfp_lock_release>
 8006550:	4b04      	ldr	r3, [pc, #16]	@ (8006564 <__sinit+0x28>)
 8006552:	6223      	str	r3, [r4, #32]
 8006554:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <__sinit+0x2c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f5      	bne.n	8006548 <__sinit+0xc>
 800655c:	f7ff ffc4 	bl	80064e8 <global_stdio_init.part.0>
 8006560:	e7f2      	b.n	8006548 <__sinit+0xc>
 8006562:	bf00      	nop
 8006564:	080064a9 	.word	0x080064a9
 8006568:	20000580 	.word	0x20000580

0800656c <_fwalk_sglue>:
 800656c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006570:	4607      	mov	r7, r0
 8006572:	4688      	mov	r8, r1
 8006574:	4614      	mov	r4, r2
 8006576:	2600      	movs	r6, #0
 8006578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800657c:	f1b9 0901 	subs.w	r9, r9, #1
 8006580:	d505      	bpl.n	800658e <_fwalk_sglue+0x22>
 8006582:	6824      	ldr	r4, [r4, #0]
 8006584:	2c00      	cmp	r4, #0
 8006586:	d1f7      	bne.n	8006578 <_fwalk_sglue+0xc>
 8006588:	4630      	mov	r0, r6
 800658a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d907      	bls.n	80065a4 <_fwalk_sglue+0x38>
 8006594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006598:	3301      	adds	r3, #1
 800659a:	d003      	beq.n	80065a4 <_fwalk_sglue+0x38>
 800659c:	4629      	mov	r1, r5
 800659e:	4638      	mov	r0, r7
 80065a0:	47c0      	blx	r8
 80065a2:	4306      	orrs	r6, r0
 80065a4:	3568      	adds	r5, #104	@ 0x68
 80065a6:	e7e9      	b.n	800657c <_fwalk_sglue+0x10>

080065a8 <iprintf>:
 80065a8:	b40f      	push	{r0, r1, r2, r3}
 80065aa:	b507      	push	{r0, r1, r2, lr}
 80065ac:	4906      	ldr	r1, [pc, #24]	@ (80065c8 <iprintf+0x20>)
 80065ae:	ab04      	add	r3, sp, #16
 80065b0:	6808      	ldr	r0, [r1, #0]
 80065b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b6:	6881      	ldr	r1, [r0, #8]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	f002 ffe1 	bl	8009580 <_vfiprintf_r>
 80065be:	b003      	add	sp, #12
 80065c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c4:	b004      	add	sp, #16
 80065c6:	4770      	bx	lr
 80065c8:	2000003c 	.word	0x2000003c

080065cc <_puts_r>:
 80065cc:	6a03      	ldr	r3, [r0, #32]
 80065ce:	b570      	push	{r4, r5, r6, lr}
 80065d0:	6884      	ldr	r4, [r0, #8]
 80065d2:	4605      	mov	r5, r0
 80065d4:	460e      	mov	r6, r1
 80065d6:	b90b      	cbnz	r3, 80065dc <_puts_r+0x10>
 80065d8:	f7ff ffb0 	bl	800653c <__sinit>
 80065dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065de:	07db      	lsls	r3, r3, #31
 80065e0:	d405      	bmi.n	80065ee <_puts_r+0x22>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	0598      	lsls	r0, r3, #22
 80065e6:	d402      	bmi.n	80065ee <_puts_r+0x22>
 80065e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ea:	f000 f9ee 	bl	80069ca <__retarget_lock_acquire_recursive>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	0719      	lsls	r1, r3, #28
 80065f2:	d502      	bpl.n	80065fa <_puts_r+0x2e>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d135      	bne.n	8006666 <_puts_r+0x9a>
 80065fa:	4621      	mov	r1, r4
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 f911 	bl	8006824 <__swsetup_r>
 8006602:	b380      	cbz	r0, 8006666 <_puts_r+0x9a>
 8006604:	f04f 35ff 	mov.w	r5, #4294967295
 8006608:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800660a:	07da      	lsls	r2, r3, #31
 800660c:	d405      	bmi.n	800661a <_puts_r+0x4e>
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	059b      	lsls	r3, r3, #22
 8006612:	d402      	bmi.n	800661a <_puts_r+0x4e>
 8006614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006616:	f000 f9d9 	bl	80069cc <__retarget_lock_release_recursive>
 800661a:	4628      	mov	r0, r5
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	2b00      	cmp	r3, #0
 8006620:	da04      	bge.n	800662c <_puts_r+0x60>
 8006622:	69a2      	ldr	r2, [r4, #24]
 8006624:	429a      	cmp	r2, r3
 8006626:	dc17      	bgt.n	8006658 <_puts_r+0x8c>
 8006628:	290a      	cmp	r1, #10
 800662a:	d015      	beq.n	8006658 <_puts_r+0x8c>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	1c5a      	adds	r2, r3, #1
 8006630:	6022      	str	r2, [r4, #0]
 8006632:	7019      	strb	r1, [r3, #0]
 8006634:	68a3      	ldr	r3, [r4, #8]
 8006636:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800663a:	3b01      	subs	r3, #1
 800663c:	60a3      	str	r3, [r4, #8]
 800663e:	2900      	cmp	r1, #0
 8006640:	d1ed      	bne.n	800661e <_puts_r+0x52>
 8006642:	2b00      	cmp	r3, #0
 8006644:	da11      	bge.n	800666a <_puts_r+0x9e>
 8006646:	4622      	mov	r2, r4
 8006648:	210a      	movs	r1, #10
 800664a:	4628      	mov	r0, r5
 800664c:	f000 f8ab 	bl	80067a6 <__swbuf_r>
 8006650:	3001      	adds	r0, #1
 8006652:	d0d7      	beq.n	8006604 <_puts_r+0x38>
 8006654:	250a      	movs	r5, #10
 8006656:	e7d7      	b.n	8006608 <_puts_r+0x3c>
 8006658:	4622      	mov	r2, r4
 800665a:	4628      	mov	r0, r5
 800665c:	f000 f8a3 	bl	80067a6 <__swbuf_r>
 8006660:	3001      	adds	r0, #1
 8006662:	d1e7      	bne.n	8006634 <_puts_r+0x68>
 8006664:	e7ce      	b.n	8006604 <_puts_r+0x38>
 8006666:	3e01      	subs	r6, #1
 8006668:	e7e4      	b.n	8006634 <_puts_r+0x68>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	6022      	str	r2, [r4, #0]
 8006670:	220a      	movs	r2, #10
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	e7ee      	b.n	8006654 <_puts_r+0x88>
	...

08006678 <puts>:
 8006678:	4b02      	ldr	r3, [pc, #8]	@ (8006684 <puts+0xc>)
 800667a:	4601      	mov	r1, r0
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f7ff bfa5 	b.w	80065cc <_puts_r>
 8006682:	bf00      	nop
 8006684:	2000003c 	.word	0x2000003c

08006688 <siprintf>:
 8006688:	b40e      	push	{r1, r2, r3}
 800668a:	b500      	push	{lr}
 800668c:	b09c      	sub	sp, #112	@ 0x70
 800668e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006690:	9002      	str	r0, [sp, #8]
 8006692:	9006      	str	r0, [sp, #24]
 8006694:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006698:	4809      	ldr	r0, [pc, #36]	@ (80066c0 <siprintf+0x38>)
 800669a:	9107      	str	r1, [sp, #28]
 800669c:	9104      	str	r1, [sp, #16]
 800669e:	4909      	ldr	r1, [pc, #36]	@ (80066c4 <siprintf+0x3c>)
 80066a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80066a4:	9105      	str	r1, [sp, #20]
 80066a6:	6800      	ldr	r0, [r0, #0]
 80066a8:	9301      	str	r3, [sp, #4]
 80066aa:	a902      	add	r1, sp, #8
 80066ac:	f002 fc76 	bl	8008f9c <_svfiprintf_r>
 80066b0:	9b02      	ldr	r3, [sp, #8]
 80066b2:	2200      	movs	r2, #0
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	b01c      	add	sp, #112	@ 0x70
 80066b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066bc:	b003      	add	sp, #12
 80066be:	4770      	bx	lr
 80066c0:	2000003c 	.word	0x2000003c
 80066c4:	ffff0208 	.word	0xffff0208

080066c8 <siscanf>:
 80066c8:	b40e      	push	{r1, r2, r3}
 80066ca:	b530      	push	{r4, r5, lr}
 80066cc:	b09c      	sub	sp, #112	@ 0x70
 80066ce:	ac1f      	add	r4, sp, #124	@ 0x7c
 80066d0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80066d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80066d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80066dc:	9002      	str	r0, [sp, #8]
 80066de:	9006      	str	r0, [sp, #24]
 80066e0:	f7f9 fdce 	bl	8000280 <strlen>
 80066e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <siscanf+0x4c>)
 80066e6:	9003      	str	r0, [sp, #12]
 80066e8:	9007      	str	r0, [sp, #28]
 80066ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066ec:	480a      	ldr	r0, [pc, #40]	@ (8006718 <siscanf+0x50>)
 80066ee:	9401      	str	r4, [sp, #4]
 80066f0:	2300      	movs	r3, #0
 80066f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80066f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80066fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80066fe:	462a      	mov	r2, r5
 8006700:	4623      	mov	r3, r4
 8006702:	a902      	add	r1, sp, #8
 8006704:	6800      	ldr	r0, [r0, #0]
 8006706:	f002 fd9d 	bl	8009244 <__ssvfiscanf_r>
 800670a:	b01c      	add	sp, #112	@ 0x70
 800670c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006710:	b003      	add	sp, #12
 8006712:	4770      	bx	lr
 8006714:	0800673f 	.word	0x0800673f
 8006718:	2000003c 	.word	0x2000003c

0800671c <__sread>:
 800671c:	b510      	push	{r4, lr}
 800671e:	460c      	mov	r4, r1
 8006720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006724:	f000 f902 	bl	800692c <_read_r>
 8006728:	2800      	cmp	r0, #0
 800672a:	bfab      	itete	ge
 800672c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800672e:	89a3      	ldrhlt	r3, [r4, #12]
 8006730:	181b      	addge	r3, r3, r0
 8006732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006736:	bfac      	ite	ge
 8006738:	6563      	strge	r3, [r4, #84]	@ 0x54
 800673a:	81a3      	strhlt	r3, [r4, #12]
 800673c:	bd10      	pop	{r4, pc}

0800673e <__seofread>:
 800673e:	2000      	movs	r0, #0
 8006740:	4770      	bx	lr

08006742 <__swrite>:
 8006742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006746:	461f      	mov	r7, r3
 8006748:	898b      	ldrh	r3, [r1, #12]
 800674a:	05db      	lsls	r3, r3, #23
 800674c:	4605      	mov	r5, r0
 800674e:	460c      	mov	r4, r1
 8006750:	4616      	mov	r6, r2
 8006752:	d505      	bpl.n	8006760 <__swrite+0x1e>
 8006754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006758:	2302      	movs	r3, #2
 800675a:	2200      	movs	r2, #0
 800675c:	f000 f8d4 	bl	8006908 <_lseek_r>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800676a:	81a3      	strh	r3, [r4, #12]
 800676c:	4632      	mov	r2, r6
 800676e:	463b      	mov	r3, r7
 8006770:	4628      	mov	r0, r5
 8006772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006776:	f000 b8eb 	b.w	8006950 <_write_r>

0800677a <__sseek>:
 800677a:	b510      	push	{r4, lr}
 800677c:	460c      	mov	r4, r1
 800677e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006782:	f000 f8c1 	bl	8006908 <_lseek_r>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	bf15      	itete	ne
 800678c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800678e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006792:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006796:	81a3      	strheq	r3, [r4, #12]
 8006798:	bf18      	it	ne
 800679a:	81a3      	strhne	r3, [r4, #12]
 800679c:	bd10      	pop	{r4, pc}

0800679e <__sclose>:
 800679e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a2:	f000 b8a1 	b.w	80068e8 <_close_r>

080067a6 <__swbuf_r>:
 80067a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a8:	460e      	mov	r6, r1
 80067aa:	4614      	mov	r4, r2
 80067ac:	4605      	mov	r5, r0
 80067ae:	b118      	cbz	r0, 80067b8 <__swbuf_r+0x12>
 80067b0:	6a03      	ldr	r3, [r0, #32]
 80067b2:	b90b      	cbnz	r3, 80067b8 <__swbuf_r+0x12>
 80067b4:	f7ff fec2 	bl	800653c <__sinit>
 80067b8:	69a3      	ldr	r3, [r4, #24]
 80067ba:	60a3      	str	r3, [r4, #8]
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	071a      	lsls	r2, r3, #28
 80067c0:	d501      	bpl.n	80067c6 <__swbuf_r+0x20>
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	b943      	cbnz	r3, 80067d8 <__swbuf_r+0x32>
 80067c6:	4621      	mov	r1, r4
 80067c8:	4628      	mov	r0, r5
 80067ca:	f000 f82b 	bl	8006824 <__swsetup_r>
 80067ce:	b118      	cbz	r0, 80067d8 <__swbuf_r+0x32>
 80067d0:	f04f 37ff 	mov.w	r7, #4294967295
 80067d4:	4638      	mov	r0, r7
 80067d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	6922      	ldr	r2, [r4, #16]
 80067dc:	1a98      	subs	r0, r3, r2
 80067de:	6963      	ldr	r3, [r4, #20]
 80067e0:	b2f6      	uxtb	r6, r6
 80067e2:	4283      	cmp	r3, r0
 80067e4:	4637      	mov	r7, r6
 80067e6:	dc05      	bgt.n	80067f4 <__swbuf_r+0x4e>
 80067e8:	4621      	mov	r1, r4
 80067ea:	4628      	mov	r0, r5
 80067ec:	f003 f9b2 	bl	8009b54 <_fflush_r>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d1ed      	bne.n	80067d0 <__swbuf_r+0x2a>
 80067f4:	68a3      	ldr	r3, [r4, #8]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	60a3      	str	r3, [r4, #8]
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	701e      	strb	r6, [r3, #0]
 8006802:	6962      	ldr	r2, [r4, #20]
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	429a      	cmp	r2, r3
 8006808:	d004      	beq.n	8006814 <__swbuf_r+0x6e>
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	07db      	lsls	r3, r3, #31
 800680e:	d5e1      	bpl.n	80067d4 <__swbuf_r+0x2e>
 8006810:	2e0a      	cmp	r6, #10
 8006812:	d1df      	bne.n	80067d4 <__swbuf_r+0x2e>
 8006814:	4621      	mov	r1, r4
 8006816:	4628      	mov	r0, r5
 8006818:	f003 f99c 	bl	8009b54 <_fflush_r>
 800681c:	2800      	cmp	r0, #0
 800681e:	d0d9      	beq.n	80067d4 <__swbuf_r+0x2e>
 8006820:	e7d6      	b.n	80067d0 <__swbuf_r+0x2a>
	...

08006824 <__swsetup_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4b29      	ldr	r3, [pc, #164]	@ (80068cc <__swsetup_r+0xa8>)
 8006828:	4605      	mov	r5, r0
 800682a:	6818      	ldr	r0, [r3, #0]
 800682c:	460c      	mov	r4, r1
 800682e:	b118      	cbz	r0, 8006838 <__swsetup_r+0x14>
 8006830:	6a03      	ldr	r3, [r0, #32]
 8006832:	b90b      	cbnz	r3, 8006838 <__swsetup_r+0x14>
 8006834:	f7ff fe82 	bl	800653c <__sinit>
 8006838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683c:	0719      	lsls	r1, r3, #28
 800683e:	d422      	bmi.n	8006886 <__swsetup_r+0x62>
 8006840:	06da      	lsls	r2, r3, #27
 8006842:	d407      	bmi.n	8006854 <__swsetup_r+0x30>
 8006844:	2209      	movs	r2, #9
 8006846:	602a      	str	r2, [r5, #0]
 8006848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	f04f 30ff 	mov.w	r0, #4294967295
 8006852:	e033      	b.n	80068bc <__swsetup_r+0x98>
 8006854:	0758      	lsls	r0, r3, #29
 8006856:	d512      	bpl.n	800687e <__swsetup_r+0x5a>
 8006858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800685a:	b141      	cbz	r1, 800686e <__swsetup_r+0x4a>
 800685c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006860:	4299      	cmp	r1, r3
 8006862:	d002      	beq.n	800686a <__swsetup_r+0x46>
 8006864:	4628      	mov	r0, r5
 8006866:	f000 ff07 	bl	8007678 <_free_r>
 800686a:	2300      	movs	r3, #0
 800686c:	6363      	str	r3, [r4, #52]	@ 0x34
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	2300      	movs	r3, #0
 8006878:	6063      	str	r3, [r4, #4]
 800687a:	6923      	ldr	r3, [r4, #16]
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	f043 0308 	orr.w	r3, r3, #8
 8006884:	81a3      	strh	r3, [r4, #12]
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	b94b      	cbnz	r3, 800689e <__swsetup_r+0x7a>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006894:	d003      	beq.n	800689e <__swsetup_r+0x7a>
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f003 f9a9 	bl	8009bf0 <__smakebuf_r>
 800689e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a2:	f013 0201 	ands.w	r2, r3, #1
 80068a6:	d00a      	beq.n	80068be <__swsetup_r+0x9a>
 80068a8:	2200      	movs	r2, #0
 80068aa:	60a2      	str	r2, [r4, #8]
 80068ac:	6962      	ldr	r2, [r4, #20]
 80068ae:	4252      	negs	r2, r2
 80068b0:	61a2      	str	r2, [r4, #24]
 80068b2:	6922      	ldr	r2, [r4, #16]
 80068b4:	b942      	cbnz	r2, 80068c8 <__swsetup_r+0xa4>
 80068b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068ba:	d1c5      	bne.n	8006848 <__swsetup_r+0x24>
 80068bc:	bd38      	pop	{r3, r4, r5, pc}
 80068be:	0799      	lsls	r1, r3, #30
 80068c0:	bf58      	it	pl
 80068c2:	6962      	ldrpl	r2, [r4, #20]
 80068c4:	60a2      	str	r2, [r4, #8]
 80068c6:	e7f4      	b.n	80068b2 <__swsetup_r+0x8e>
 80068c8:	2000      	movs	r0, #0
 80068ca:	e7f7      	b.n	80068bc <__swsetup_r+0x98>
 80068cc:	2000003c 	.word	0x2000003c

080068d0 <memset>:
 80068d0:	4402      	add	r2, r0
 80068d2:	4603      	mov	r3, r0
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d100      	bne.n	80068da <memset+0xa>
 80068d8:	4770      	bx	lr
 80068da:	f803 1b01 	strb.w	r1, [r3], #1
 80068de:	e7f9      	b.n	80068d4 <memset+0x4>

080068e0 <_localeconv_r>:
 80068e0:	4800      	ldr	r0, [pc, #0]	@ (80068e4 <_localeconv_r+0x4>)
 80068e2:	4770      	bx	lr
 80068e4:	2000017c 	.word	0x2000017c

080068e8 <_close_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4d06      	ldr	r5, [pc, #24]	@ (8006904 <_close_r+0x1c>)
 80068ec:	2300      	movs	r3, #0
 80068ee:	4604      	mov	r4, r0
 80068f0:	4608      	mov	r0, r1
 80068f2:	602b      	str	r3, [r5, #0]
 80068f4:	f7fb f84a 	bl	800198c <_close>
 80068f8:	1c43      	adds	r3, r0, #1
 80068fa:	d102      	bne.n	8006902 <_close_r+0x1a>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	b103      	cbz	r3, 8006902 <_close_r+0x1a>
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	bd38      	pop	{r3, r4, r5, pc}
 8006904:	20000584 	.word	0x20000584

08006908 <_lseek_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d07      	ldr	r5, [pc, #28]	@ (8006928 <_lseek_r+0x20>)
 800690c:	4604      	mov	r4, r0
 800690e:	4608      	mov	r0, r1
 8006910:	4611      	mov	r1, r2
 8006912:	2200      	movs	r2, #0
 8006914:	602a      	str	r2, [r5, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	f7fb f85f 	bl	80019da <_lseek>
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	d102      	bne.n	8006926 <_lseek_r+0x1e>
 8006920:	682b      	ldr	r3, [r5, #0]
 8006922:	b103      	cbz	r3, 8006926 <_lseek_r+0x1e>
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	bd38      	pop	{r3, r4, r5, pc}
 8006928:	20000584 	.word	0x20000584

0800692c <_read_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4d07      	ldr	r5, [pc, #28]	@ (800694c <_read_r+0x20>)
 8006930:	4604      	mov	r4, r0
 8006932:	4608      	mov	r0, r1
 8006934:	4611      	mov	r1, r2
 8006936:	2200      	movs	r2, #0
 8006938:	602a      	str	r2, [r5, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	f7fa ffed 	bl	800191a <_read>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_read_r+0x1e>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_read_r+0x1e>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	20000584 	.word	0x20000584

08006950 <_write_r>:
 8006950:	b538      	push	{r3, r4, r5, lr}
 8006952:	4d07      	ldr	r5, [pc, #28]	@ (8006970 <_write_r+0x20>)
 8006954:	4604      	mov	r4, r0
 8006956:	4608      	mov	r0, r1
 8006958:	4611      	mov	r1, r2
 800695a:	2200      	movs	r2, #0
 800695c:	602a      	str	r2, [r5, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	f7fa fff8 	bl	8001954 <_write>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_write_r+0x1e>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_write_r+0x1e>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000584 	.word	0x20000584

08006974 <__errno>:
 8006974:	4b01      	ldr	r3, [pc, #4]	@ (800697c <__errno+0x8>)
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	2000003c 	.word	0x2000003c

08006980 <__libc_init_array>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	4d0d      	ldr	r5, [pc, #52]	@ (80069b8 <__libc_init_array+0x38>)
 8006984:	4c0d      	ldr	r4, [pc, #52]	@ (80069bc <__libc_init_array+0x3c>)
 8006986:	1b64      	subs	r4, r4, r5
 8006988:	10a4      	asrs	r4, r4, #2
 800698a:	2600      	movs	r6, #0
 800698c:	42a6      	cmp	r6, r4
 800698e:	d109      	bne.n	80069a4 <__libc_init_array+0x24>
 8006990:	4d0b      	ldr	r5, [pc, #44]	@ (80069c0 <__libc_init_array+0x40>)
 8006992:	4c0c      	ldr	r4, [pc, #48]	@ (80069c4 <__libc_init_array+0x44>)
 8006994:	f003 fee0 	bl	800a758 <_init>
 8006998:	1b64      	subs	r4, r4, r5
 800699a:	10a4      	asrs	r4, r4, #2
 800699c:	2600      	movs	r6, #0
 800699e:	42a6      	cmp	r6, r4
 80069a0:	d105      	bne.n	80069ae <__libc_init_array+0x2e>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a8:	4798      	blx	r3
 80069aa:	3601      	adds	r6, #1
 80069ac:	e7ee      	b.n	800698c <__libc_init_array+0xc>
 80069ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b2:	4798      	blx	r3
 80069b4:	3601      	adds	r6, #1
 80069b6:	e7f2      	b.n	800699e <__libc_init_array+0x1e>
 80069b8:	0800ac34 	.word	0x0800ac34
 80069bc:	0800ac34 	.word	0x0800ac34
 80069c0:	0800ac34 	.word	0x0800ac34
 80069c4:	0800ac38 	.word	0x0800ac38

080069c8 <__retarget_lock_init_recursive>:
 80069c8:	4770      	bx	lr

080069ca <__retarget_lock_acquire_recursive>:
 80069ca:	4770      	bx	lr

080069cc <__retarget_lock_release_recursive>:
 80069cc:	4770      	bx	lr
	...

080069d0 <nanf>:
 80069d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80069d8 <nanf+0x8>
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	7fc00000 	.word	0x7fc00000

080069dc <quorem>:
 80069dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	6903      	ldr	r3, [r0, #16]
 80069e2:	690c      	ldr	r4, [r1, #16]
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	4607      	mov	r7, r0
 80069e8:	db7e      	blt.n	8006ae8 <quorem+0x10c>
 80069ea:	3c01      	subs	r4, #1
 80069ec:	f101 0814 	add.w	r8, r1, #20
 80069f0:	00a3      	lsls	r3, r4, #2
 80069f2:	f100 0514 	add.w	r5, r0, #20
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a06:	3301      	adds	r3, #1
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a12:	d32e      	bcc.n	8006a72 <quorem+0x96>
 8006a14:	f04f 0a00 	mov.w	sl, #0
 8006a18:	46c4      	mov	ip, r8
 8006a1a:	46ae      	mov	lr, r5
 8006a1c:	46d3      	mov	fp, sl
 8006a1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a22:	b298      	uxth	r0, r3
 8006a24:	fb06 a000 	mla	r0, r6, r0, sl
 8006a28:	0c02      	lsrs	r2, r0, #16
 8006a2a:	0c1b      	lsrs	r3, r3, #16
 8006a2c:	fb06 2303 	mla	r3, r6, r3, r2
 8006a30:	f8de 2000 	ldr.w	r2, [lr]
 8006a34:	b280      	uxth	r0, r0
 8006a36:	b292      	uxth	r2, r2
 8006a38:	1a12      	subs	r2, r2, r0
 8006a3a:	445a      	add	r2, fp
 8006a3c:	f8de 0000 	ldr.w	r0, [lr]
 8006a40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a4e:	b292      	uxth	r2, r2
 8006a50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a54:	45e1      	cmp	r9, ip
 8006a56:	f84e 2b04 	str.w	r2, [lr], #4
 8006a5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a5e:	d2de      	bcs.n	8006a1e <quorem+0x42>
 8006a60:	9b00      	ldr	r3, [sp, #0]
 8006a62:	58eb      	ldr	r3, [r5, r3]
 8006a64:	b92b      	cbnz	r3, 8006a72 <quorem+0x96>
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	3b04      	subs	r3, #4
 8006a6a:	429d      	cmp	r5, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	d32f      	bcc.n	8006ad0 <quorem+0xf4>
 8006a70:	613c      	str	r4, [r7, #16]
 8006a72:	4638      	mov	r0, r7
 8006a74:	f001 f9c4 	bl	8007e00 <__mcmp>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	db25      	blt.n	8006ac8 <quorem+0xec>
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	2000      	movs	r0, #0
 8006a80:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a84:	f8d1 c000 	ldr.w	ip, [r1]
 8006a88:	fa1f fe82 	uxth.w	lr, r2
 8006a8c:	fa1f f38c 	uxth.w	r3, ip
 8006a90:	eba3 030e 	sub.w	r3, r3, lr
 8006a94:	4403      	add	r3, r0
 8006a96:	0c12      	lsrs	r2, r2, #16
 8006a98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa6:	45c1      	cmp	r9, r8
 8006aa8:	f841 3b04 	str.w	r3, [r1], #4
 8006aac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ab0:	d2e6      	bcs.n	8006a80 <quorem+0xa4>
 8006ab2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aba:	b922      	cbnz	r2, 8006ac6 <quorem+0xea>
 8006abc:	3b04      	subs	r3, #4
 8006abe:	429d      	cmp	r5, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	d30b      	bcc.n	8006adc <quorem+0x100>
 8006ac4:	613c      	str	r4, [r7, #16]
 8006ac6:	3601      	adds	r6, #1
 8006ac8:	4630      	mov	r0, r6
 8006aca:	b003      	add	sp, #12
 8006acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	3b04      	subs	r3, #4
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	d1cb      	bne.n	8006a70 <quorem+0x94>
 8006ad8:	3c01      	subs	r4, #1
 8006ada:	e7c6      	b.n	8006a6a <quorem+0x8e>
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	d1ef      	bne.n	8006ac4 <quorem+0xe8>
 8006ae4:	3c01      	subs	r4, #1
 8006ae6:	e7ea      	b.n	8006abe <quorem+0xe2>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e7ee      	b.n	8006aca <quorem+0xee>
 8006aec:	0000      	movs	r0, r0
	...

08006af0 <_dtoa_r>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	69c7      	ldr	r7, [r0, #28]
 8006af6:	b099      	sub	sp, #100	@ 0x64
 8006af8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006afc:	ec55 4b10 	vmov	r4, r5, d0
 8006b00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006b02:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b04:	4683      	mov	fp, r0
 8006b06:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b0a:	b97f      	cbnz	r7, 8006b2c <_dtoa_r+0x3c>
 8006b0c:	2010      	movs	r0, #16
 8006b0e:	f000 fdfd 	bl	800770c <malloc>
 8006b12:	4602      	mov	r2, r0
 8006b14:	f8cb 001c 	str.w	r0, [fp, #28]
 8006b18:	b920      	cbnz	r0, 8006b24 <_dtoa_r+0x34>
 8006b1a:	4ba7      	ldr	r3, [pc, #668]	@ (8006db8 <_dtoa_r+0x2c8>)
 8006b1c:	21ef      	movs	r1, #239	@ 0xef
 8006b1e:	48a7      	ldr	r0, [pc, #668]	@ (8006dbc <_dtoa_r+0x2cc>)
 8006b20:	f003 f98a 	bl	8009e38 <__assert_func>
 8006b24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b28:	6007      	str	r7, [r0, #0]
 8006b2a:	60c7      	str	r7, [r0, #12]
 8006b2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b30:	6819      	ldr	r1, [r3, #0]
 8006b32:	b159      	cbz	r1, 8006b4c <_dtoa_r+0x5c>
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	604a      	str	r2, [r1, #4]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4093      	lsls	r3, r2
 8006b3c:	608b      	str	r3, [r1, #8]
 8006b3e:	4658      	mov	r0, fp
 8006b40:	f000 feda 	bl	80078f8 <_Bfree>
 8006b44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	1e2b      	subs	r3, r5, #0
 8006b4e:	bfb9      	ittee	lt
 8006b50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b54:	9303      	strlt	r3, [sp, #12]
 8006b56:	2300      	movge	r3, #0
 8006b58:	6033      	strge	r3, [r6, #0]
 8006b5a:	9f03      	ldr	r7, [sp, #12]
 8006b5c:	4b98      	ldr	r3, [pc, #608]	@ (8006dc0 <_dtoa_r+0x2d0>)
 8006b5e:	bfbc      	itt	lt
 8006b60:	2201      	movlt	r2, #1
 8006b62:	6032      	strlt	r2, [r6, #0]
 8006b64:	43bb      	bics	r3, r7
 8006b66:	d112      	bne.n	8006b8e <_dtoa_r+0x9e>
 8006b68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006b6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b74:	4323      	orrs	r3, r4
 8006b76:	f000 854d 	beq.w	8007614 <_dtoa_r+0xb24>
 8006b7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006dd4 <_dtoa_r+0x2e4>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 854f 	beq.w	8007624 <_dtoa_r+0xb34>
 8006b86:	f10a 0303 	add.w	r3, sl, #3
 8006b8a:	f000 bd49 	b.w	8007620 <_dtoa_r+0xb30>
 8006b8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	ec51 0b17 	vmov	r0, r1, d7
 8006b98:	2300      	movs	r3, #0
 8006b9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006b9e:	f7f9 ff9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	b158      	cbz	r0, 8006bbe <_dtoa_r+0xce>
 8006ba6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ba8:	2301      	movs	r3, #1
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006bae:	b113      	cbz	r3, 8006bb6 <_dtoa_r+0xc6>
 8006bb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006bb2:	4b84      	ldr	r3, [pc, #528]	@ (8006dc4 <_dtoa_r+0x2d4>)
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006dd8 <_dtoa_r+0x2e8>
 8006bba:	f000 bd33 	b.w	8007624 <_dtoa_r+0xb34>
 8006bbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006bc2:	aa16      	add	r2, sp, #88	@ 0x58
 8006bc4:	a917      	add	r1, sp, #92	@ 0x5c
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	f001 fa3a 	bl	8008040 <__d2b>
 8006bcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006bd0:	4681      	mov	r9, r0
 8006bd2:	2e00      	cmp	r6, #0
 8006bd4:	d077      	beq.n	8006cc6 <_dtoa_r+0x1d6>
 8006bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006be4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006be8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006bec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4b74      	ldr	r3, [pc, #464]	@ (8006dc8 <_dtoa_r+0x2d8>)
 8006bf6:	f7f9 fb4f 	bl	8000298 <__aeabi_dsub>
 8006bfa:	a369      	add	r3, pc, #420	@ (adr r3, 8006da0 <_dtoa_r+0x2b0>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fd02 	bl	8000608 <__aeabi_dmul>
 8006c04:	a368      	add	r3, pc, #416	@ (adr r3, 8006da8 <_dtoa_r+0x2b8>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f7f9 fb47 	bl	800029c <__adddf3>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4630      	mov	r0, r6
 8006c12:	460d      	mov	r5, r1
 8006c14:	f7f9 fc8e 	bl	8000534 <__aeabi_i2d>
 8006c18:	a365      	add	r3, pc, #404	@ (adr r3, 8006db0 <_dtoa_r+0x2c0>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f7f9 fcf3 	bl	8000608 <__aeabi_dmul>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 fb37 	bl	800029c <__adddf3>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	460d      	mov	r5, r1
 8006c32:	f7f9 ff99 	bl	8000b68 <__aeabi_d2iz>
 8006c36:	2200      	movs	r2, #0
 8006c38:	4607      	mov	r7, r0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 ff54 	bl	8000aec <__aeabi_dcmplt>
 8006c44:	b140      	cbz	r0, 8006c58 <_dtoa_r+0x168>
 8006c46:	4638      	mov	r0, r7
 8006c48:	f7f9 fc74 	bl	8000534 <__aeabi_i2d>
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	462b      	mov	r3, r5
 8006c50:	f7f9 ff42 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c54:	b900      	cbnz	r0, 8006c58 <_dtoa_r+0x168>
 8006c56:	3f01      	subs	r7, #1
 8006c58:	2f16      	cmp	r7, #22
 8006c5a:	d851      	bhi.n	8006d00 <_dtoa_r+0x210>
 8006c5c:	4b5b      	ldr	r3, [pc, #364]	@ (8006dcc <_dtoa_r+0x2dc>)
 8006c5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c6a:	f7f9 ff3f 	bl	8000aec <__aeabi_dcmplt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d048      	beq.n	8006d04 <_dtoa_r+0x214>
 8006c72:	3f01      	subs	r7, #1
 8006c74:	2300      	movs	r3, #0
 8006c76:	9312      	str	r3, [sp, #72]	@ 0x48
 8006c78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c7a:	1b9b      	subs	r3, r3, r6
 8006c7c:	1e5a      	subs	r2, r3, #1
 8006c7e:	bf44      	itt	mi
 8006c80:	f1c3 0801 	rsbmi	r8, r3, #1
 8006c84:	2300      	movmi	r3, #0
 8006c86:	9208      	str	r2, [sp, #32]
 8006c88:	bf54      	ite	pl
 8006c8a:	f04f 0800 	movpl.w	r8, #0
 8006c8e:	9308      	strmi	r3, [sp, #32]
 8006c90:	2f00      	cmp	r7, #0
 8006c92:	db39      	blt.n	8006d08 <_dtoa_r+0x218>
 8006c94:	9b08      	ldr	r3, [sp, #32]
 8006c96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006c98:	443b      	add	r3, r7
 8006c9a:	9308      	str	r3, [sp, #32]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca2:	2b09      	cmp	r3, #9
 8006ca4:	d864      	bhi.n	8006d70 <_dtoa_r+0x280>
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	bfc4      	itt	gt
 8006caa:	3b04      	subgt	r3, #4
 8006cac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb0:	f1a3 0302 	sub.w	r3, r3, #2
 8006cb4:	bfcc      	ite	gt
 8006cb6:	2400      	movgt	r4, #0
 8006cb8:	2401      	movle	r4, #1
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d863      	bhi.n	8006d86 <_dtoa_r+0x296>
 8006cbe:	e8df f003 	tbb	[pc, r3]
 8006cc2:	372a      	.short	0x372a
 8006cc4:	5535      	.short	0x5535
 8006cc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006cca:	441e      	add	r6, r3
 8006ccc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	bfc1      	itttt	gt
 8006cd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006cd8:	409f      	lslgt	r7, r3
 8006cda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006cde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ce2:	bfd6      	itet	le
 8006ce4:	f1c3 0320 	rsble	r3, r3, #32
 8006ce8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006cec:	fa04 f003 	lslle.w	r0, r4, r3
 8006cf0:	f7f9 fc10 	bl	8000514 <__aeabi_ui2d>
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006cfa:	3e01      	subs	r6, #1
 8006cfc:	9214      	str	r2, [sp, #80]	@ 0x50
 8006cfe:	e777      	b.n	8006bf0 <_dtoa_r+0x100>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e7b8      	b.n	8006c76 <_dtoa_r+0x186>
 8006d04:	9012      	str	r0, [sp, #72]	@ 0x48
 8006d06:	e7b7      	b.n	8006c78 <_dtoa_r+0x188>
 8006d08:	427b      	negs	r3, r7
 8006d0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	eba8 0807 	sub.w	r8, r8, r7
 8006d12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d14:	e7c4      	b.n	8006ca0 <_dtoa_r+0x1b0>
 8006d16:	2300      	movs	r3, #0
 8006d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dc35      	bgt.n	8006d8c <_dtoa_r+0x29c>
 8006d20:	2301      	movs	r3, #1
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	9307      	str	r3, [sp, #28]
 8006d26:	461a      	mov	r2, r3
 8006d28:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d2a:	e00b      	b.n	8006d44 <_dtoa_r+0x254>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e7f3      	b.n	8006d18 <_dtoa_r+0x228>
 8006d30:	2300      	movs	r3, #0
 8006d32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d36:	18fb      	adds	r3, r7, r3
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	9307      	str	r3, [sp, #28]
 8006d40:	bfb8      	it	lt
 8006d42:	2301      	movlt	r3, #1
 8006d44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006d48:	2100      	movs	r1, #0
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	f102 0514 	add.w	r5, r2, #20
 8006d50:	429d      	cmp	r5, r3
 8006d52:	d91f      	bls.n	8006d94 <_dtoa_r+0x2a4>
 8006d54:	6041      	str	r1, [r0, #4]
 8006d56:	4658      	mov	r0, fp
 8006d58:	f000 fd8e 	bl	8007878 <_Balloc>
 8006d5c:	4682      	mov	sl, r0
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d13c      	bne.n	8006ddc <_dtoa_r+0x2ec>
 8006d62:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd0 <_dtoa_r+0x2e0>)
 8006d64:	4602      	mov	r2, r0
 8006d66:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d6a:	e6d8      	b.n	8006b1e <_dtoa_r+0x2e>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e7e0      	b.n	8006d32 <_dtoa_r+0x242>
 8006d70:	2401      	movs	r4, #1
 8006d72:	2300      	movs	r3, #0
 8006d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	9307      	str	r3, [sp, #28]
 8006d80:	2200      	movs	r2, #0
 8006d82:	2312      	movs	r3, #18
 8006d84:	e7d0      	b.n	8006d28 <_dtoa_r+0x238>
 8006d86:	2301      	movs	r3, #1
 8006d88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d8a:	e7f5      	b.n	8006d78 <_dtoa_r+0x288>
 8006d8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	9307      	str	r3, [sp, #28]
 8006d92:	e7d7      	b.n	8006d44 <_dtoa_r+0x254>
 8006d94:	3101      	adds	r1, #1
 8006d96:	0052      	lsls	r2, r2, #1
 8006d98:	e7d8      	b.n	8006d4c <_dtoa_r+0x25c>
 8006d9a:	bf00      	nop
 8006d9c:	f3af 8000 	nop.w
 8006da0:	636f4361 	.word	0x636f4361
 8006da4:	3fd287a7 	.word	0x3fd287a7
 8006da8:	8b60c8b3 	.word	0x8b60c8b3
 8006dac:	3fc68a28 	.word	0x3fc68a28
 8006db0:	509f79fb 	.word	0x509f79fb
 8006db4:	3fd34413 	.word	0x3fd34413
 8006db8:	0800a824 	.word	0x0800a824
 8006dbc:	0800a83b 	.word	0x0800a83b
 8006dc0:	7ff00000 	.word	0x7ff00000
 8006dc4:	0800ab81 	.word	0x0800ab81
 8006dc8:	3ff80000 	.word	0x3ff80000
 8006dcc:	0800a938 	.word	0x0800a938
 8006dd0:	0800a893 	.word	0x0800a893
 8006dd4:	0800a820 	.word	0x0800a820
 8006dd8:	0800ab80 	.word	0x0800ab80
 8006ddc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006de0:	6018      	str	r0, [r3, #0]
 8006de2:	9b07      	ldr	r3, [sp, #28]
 8006de4:	2b0e      	cmp	r3, #14
 8006de6:	f200 80a4 	bhi.w	8006f32 <_dtoa_r+0x442>
 8006dea:	2c00      	cmp	r4, #0
 8006dec:	f000 80a1 	beq.w	8006f32 <_dtoa_r+0x442>
 8006df0:	2f00      	cmp	r7, #0
 8006df2:	dd33      	ble.n	8006e5c <_dtoa_r+0x36c>
 8006df4:	4bad      	ldr	r3, [pc, #692]	@ (80070ac <_dtoa_r+0x5bc>)
 8006df6:	f007 020f 	and.w	r2, r7, #15
 8006dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dfe:	ed93 7b00 	vldr	d7, [r3]
 8006e02:	05f8      	lsls	r0, r7, #23
 8006e04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e0c:	d516      	bpl.n	8006e3c <_dtoa_r+0x34c>
 8006e0e:	4ba8      	ldr	r3, [pc, #672]	@ (80070b0 <_dtoa_r+0x5c0>)
 8006e10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e18:	f7f9 fd20 	bl	800085c <__aeabi_ddiv>
 8006e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e20:	f004 040f 	and.w	r4, r4, #15
 8006e24:	2603      	movs	r6, #3
 8006e26:	4da2      	ldr	r5, [pc, #648]	@ (80070b0 <_dtoa_r+0x5c0>)
 8006e28:	b954      	cbnz	r4, 8006e40 <_dtoa_r+0x350>
 8006e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e32:	f7f9 fd13 	bl	800085c <__aeabi_ddiv>
 8006e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e3a:	e028      	b.n	8006e8e <_dtoa_r+0x39e>
 8006e3c:	2602      	movs	r6, #2
 8006e3e:	e7f2      	b.n	8006e26 <_dtoa_r+0x336>
 8006e40:	07e1      	lsls	r1, r4, #31
 8006e42:	d508      	bpl.n	8006e56 <_dtoa_r+0x366>
 8006e44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e4c:	f7f9 fbdc 	bl	8000608 <__aeabi_dmul>
 8006e50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e54:	3601      	adds	r6, #1
 8006e56:	1064      	asrs	r4, r4, #1
 8006e58:	3508      	adds	r5, #8
 8006e5a:	e7e5      	b.n	8006e28 <_dtoa_r+0x338>
 8006e5c:	f000 80d2 	beq.w	8007004 <_dtoa_r+0x514>
 8006e60:	427c      	negs	r4, r7
 8006e62:	4b92      	ldr	r3, [pc, #584]	@ (80070ac <_dtoa_r+0x5bc>)
 8006e64:	4d92      	ldr	r5, [pc, #584]	@ (80070b0 <_dtoa_r+0x5c0>)
 8006e66:	f004 020f 	and.w	r2, r4, #15
 8006e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e76:	f7f9 fbc7 	bl	8000608 <__aeabi_dmul>
 8006e7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e7e:	1124      	asrs	r4, r4, #4
 8006e80:	2300      	movs	r3, #0
 8006e82:	2602      	movs	r6, #2
 8006e84:	2c00      	cmp	r4, #0
 8006e86:	f040 80b2 	bne.w	8006fee <_dtoa_r+0x4fe>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1d3      	bne.n	8006e36 <_dtoa_r+0x346>
 8006e8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80b7 	beq.w	8007008 <_dtoa_r+0x518>
 8006e9a:	4b86      	ldr	r3, [pc, #536]	@ (80070b4 <_dtoa_r+0x5c4>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4620      	mov	r0, r4
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	f7f9 fe23 	bl	8000aec <__aeabi_dcmplt>
 8006ea6:	2800      	cmp	r0, #0
 8006ea8:	f000 80ae 	beq.w	8007008 <_dtoa_r+0x518>
 8006eac:	9b07      	ldr	r3, [sp, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80aa 	beq.w	8007008 <_dtoa_r+0x518>
 8006eb4:	9b00      	ldr	r3, [sp, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	dd37      	ble.n	8006f2a <_dtoa_r+0x43a>
 8006eba:	1e7b      	subs	r3, r7, #1
 8006ebc:	9304      	str	r3, [sp, #16]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80070b8 <_dtoa_r+0x5c8>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	f7f9 fb9f 	bl	8000608 <__aeabi_dmul>
 8006eca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ece:	9c00      	ldr	r4, [sp, #0]
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	f7f9 fb2e 	bl	8000534 <__aeabi_i2d>
 8006ed8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006edc:	f7f9 fb94 	bl	8000608 <__aeabi_dmul>
 8006ee0:	4b76      	ldr	r3, [pc, #472]	@ (80070bc <_dtoa_r+0x5cc>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f7f9 f9da 	bl	800029c <__adddf3>
 8006ee8:	4605      	mov	r5, r0
 8006eea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006eee:	2c00      	cmp	r4, #0
 8006ef0:	f040 808d 	bne.w	800700e <_dtoa_r+0x51e>
 8006ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef8:	4b71      	ldr	r3, [pc, #452]	@ (80070c0 <_dtoa_r+0x5d0>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	f7f9 f9cc 	bl	8000298 <__aeabi_dsub>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f08:	462a      	mov	r2, r5
 8006f0a:	4633      	mov	r3, r6
 8006f0c:	f7f9 fe0c 	bl	8000b28 <__aeabi_dcmpgt>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	f040 828b 	bne.w	800742c <_dtoa_r+0x93c>
 8006f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f1a:	462a      	mov	r2, r5
 8006f1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f20:	f7f9 fde4 	bl	8000aec <__aeabi_dcmplt>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	f040 8128 	bne.w	800717a <_dtoa_r+0x68a>
 8006f2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006f2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006f32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f2c0 815a 	blt.w	80071ee <_dtoa_r+0x6fe>
 8006f3a:	2f0e      	cmp	r7, #14
 8006f3c:	f300 8157 	bgt.w	80071ee <_dtoa_r+0x6fe>
 8006f40:	4b5a      	ldr	r3, [pc, #360]	@ (80070ac <_dtoa_r+0x5bc>)
 8006f42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f46:	ed93 7b00 	vldr	d7, [r3]
 8006f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	ed8d 7b00 	vstr	d7, [sp]
 8006f52:	da03      	bge.n	8006f5c <_dtoa_r+0x46c>
 8006f54:	9b07      	ldr	r3, [sp, #28]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f340 8101 	ble.w	800715e <_dtoa_r+0x66e>
 8006f5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006f60:	4656      	mov	r6, sl
 8006f62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7f9 fc77 	bl	800085c <__aeabi_ddiv>
 8006f6e:	f7f9 fdfb 	bl	8000b68 <__aeabi_d2iz>
 8006f72:	4680      	mov	r8, r0
 8006f74:	f7f9 fade 	bl	8000534 <__aeabi_i2d>
 8006f78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f7c:	f7f9 fb44 	bl	8000608 <__aeabi_dmul>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4620      	mov	r0, r4
 8006f86:	4629      	mov	r1, r5
 8006f88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f8c:	f7f9 f984 	bl	8000298 <__aeabi_dsub>
 8006f90:	f806 4b01 	strb.w	r4, [r6], #1
 8006f94:	9d07      	ldr	r5, [sp, #28]
 8006f96:	eba6 040a 	sub.w	r4, r6, sl
 8006f9a:	42a5      	cmp	r5, r4
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	f040 8117 	bne.w	80071d2 <_dtoa_r+0x6e2>
 8006fa4:	f7f9 f97a 	bl	800029c <__adddf3>
 8006fa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fac:	4604      	mov	r4, r0
 8006fae:	460d      	mov	r5, r1
 8006fb0:	f7f9 fdba 	bl	8000b28 <__aeabi_dcmpgt>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f040 80f9 	bne.w	80071ac <_dtoa_r+0x6bc>
 8006fba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 fd89 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fc6:	b118      	cbz	r0, 8006fd0 <_dtoa_r+0x4e0>
 8006fc8:	f018 0f01 	tst.w	r8, #1
 8006fcc:	f040 80ee 	bne.w	80071ac <_dtoa_r+0x6bc>
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	4658      	mov	r0, fp
 8006fd4:	f000 fc90 	bl	80078f8 <_Bfree>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	7033      	strb	r3, [r6, #0]
 8006fdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006fde:	3701      	adds	r7, #1
 8006fe0:	601f      	str	r7, [r3, #0]
 8006fe2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 831d 	beq.w	8007624 <_dtoa_r+0xb34>
 8006fea:	601e      	str	r6, [r3, #0]
 8006fec:	e31a      	b.n	8007624 <_dtoa_r+0xb34>
 8006fee:	07e2      	lsls	r2, r4, #31
 8006ff0:	d505      	bpl.n	8006ffe <_dtoa_r+0x50e>
 8006ff2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ff6:	f7f9 fb07 	bl	8000608 <__aeabi_dmul>
 8006ffa:	3601      	adds	r6, #1
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	1064      	asrs	r4, r4, #1
 8007000:	3508      	adds	r5, #8
 8007002:	e73f      	b.n	8006e84 <_dtoa_r+0x394>
 8007004:	2602      	movs	r6, #2
 8007006:	e742      	b.n	8006e8e <_dtoa_r+0x39e>
 8007008:	9c07      	ldr	r4, [sp, #28]
 800700a:	9704      	str	r7, [sp, #16]
 800700c:	e761      	b.n	8006ed2 <_dtoa_r+0x3e2>
 800700e:	4b27      	ldr	r3, [pc, #156]	@ (80070ac <_dtoa_r+0x5bc>)
 8007010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007012:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007016:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800701a:	4454      	add	r4, sl
 800701c:	2900      	cmp	r1, #0
 800701e:	d053      	beq.n	80070c8 <_dtoa_r+0x5d8>
 8007020:	4928      	ldr	r1, [pc, #160]	@ (80070c4 <_dtoa_r+0x5d4>)
 8007022:	2000      	movs	r0, #0
 8007024:	f7f9 fc1a 	bl	800085c <__aeabi_ddiv>
 8007028:	4633      	mov	r3, r6
 800702a:	462a      	mov	r2, r5
 800702c:	f7f9 f934 	bl	8000298 <__aeabi_dsub>
 8007030:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007034:	4656      	mov	r6, sl
 8007036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800703a:	f7f9 fd95 	bl	8000b68 <__aeabi_d2iz>
 800703e:	4605      	mov	r5, r0
 8007040:	f7f9 fa78 	bl	8000534 <__aeabi_i2d>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704c:	f7f9 f924 	bl	8000298 <__aeabi_dsub>
 8007050:	3530      	adds	r5, #48	@ 0x30
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800705a:	f806 5b01 	strb.w	r5, [r6], #1
 800705e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007062:	f7f9 fd43 	bl	8000aec <__aeabi_dcmplt>
 8007066:	2800      	cmp	r0, #0
 8007068:	d171      	bne.n	800714e <_dtoa_r+0x65e>
 800706a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800706e:	4911      	ldr	r1, [pc, #68]	@ (80070b4 <_dtoa_r+0x5c4>)
 8007070:	2000      	movs	r0, #0
 8007072:	f7f9 f911 	bl	8000298 <__aeabi_dsub>
 8007076:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800707a:	f7f9 fd37 	bl	8000aec <__aeabi_dcmplt>
 800707e:	2800      	cmp	r0, #0
 8007080:	f040 8095 	bne.w	80071ae <_dtoa_r+0x6be>
 8007084:	42a6      	cmp	r6, r4
 8007086:	f43f af50 	beq.w	8006f2a <_dtoa_r+0x43a>
 800708a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800708e:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <_dtoa_r+0x5c8>)
 8007090:	2200      	movs	r2, #0
 8007092:	f7f9 fab9 	bl	8000608 <__aeabi_dmul>
 8007096:	4b08      	ldr	r3, [pc, #32]	@ (80070b8 <_dtoa_r+0x5c8>)
 8007098:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800709c:	2200      	movs	r2, #0
 800709e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a2:	f7f9 fab1 	bl	8000608 <__aeabi_dmul>
 80070a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070aa:	e7c4      	b.n	8007036 <_dtoa_r+0x546>
 80070ac:	0800a938 	.word	0x0800a938
 80070b0:	0800a910 	.word	0x0800a910
 80070b4:	3ff00000 	.word	0x3ff00000
 80070b8:	40240000 	.word	0x40240000
 80070bc:	401c0000 	.word	0x401c0000
 80070c0:	40140000 	.word	0x40140000
 80070c4:	3fe00000 	.word	0x3fe00000
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	f7f9 fa9c 	bl	8000608 <__aeabi_dmul>
 80070d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80070d6:	4656      	mov	r6, sl
 80070d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070dc:	f7f9 fd44 	bl	8000b68 <__aeabi_d2iz>
 80070e0:	4605      	mov	r5, r0
 80070e2:	f7f9 fa27 	bl	8000534 <__aeabi_i2d>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ee:	f7f9 f8d3 	bl	8000298 <__aeabi_dsub>
 80070f2:	3530      	adds	r5, #48	@ 0x30
 80070f4:	f806 5b01 	strb.w	r5, [r6], #1
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	42a6      	cmp	r6, r4
 80070fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	d124      	bne.n	8007152 <_dtoa_r+0x662>
 8007108:	4bac      	ldr	r3, [pc, #688]	@ (80073bc <_dtoa_r+0x8cc>)
 800710a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800710e:	f7f9 f8c5 	bl	800029c <__adddf3>
 8007112:	4602      	mov	r2, r0
 8007114:	460b      	mov	r3, r1
 8007116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800711a:	f7f9 fd05 	bl	8000b28 <__aeabi_dcmpgt>
 800711e:	2800      	cmp	r0, #0
 8007120:	d145      	bne.n	80071ae <_dtoa_r+0x6be>
 8007122:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007126:	49a5      	ldr	r1, [pc, #660]	@ (80073bc <_dtoa_r+0x8cc>)
 8007128:	2000      	movs	r0, #0
 800712a:	f7f9 f8b5 	bl	8000298 <__aeabi_dsub>
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007136:	f7f9 fcd9 	bl	8000aec <__aeabi_dcmplt>
 800713a:	2800      	cmp	r0, #0
 800713c:	f43f aef5 	beq.w	8006f2a <_dtoa_r+0x43a>
 8007140:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007142:	1e73      	subs	r3, r6, #1
 8007144:	9315      	str	r3, [sp, #84]	@ 0x54
 8007146:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800714a:	2b30      	cmp	r3, #48	@ 0x30
 800714c:	d0f8      	beq.n	8007140 <_dtoa_r+0x650>
 800714e:	9f04      	ldr	r7, [sp, #16]
 8007150:	e73e      	b.n	8006fd0 <_dtoa_r+0x4e0>
 8007152:	4b9b      	ldr	r3, [pc, #620]	@ (80073c0 <_dtoa_r+0x8d0>)
 8007154:	f7f9 fa58 	bl	8000608 <__aeabi_dmul>
 8007158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800715c:	e7bc      	b.n	80070d8 <_dtoa_r+0x5e8>
 800715e:	d10c      	bne.n	800717a <_dtoa_r+0x68a>
 8007160:	4b98      	ldr	r3, [pc, #608]	@ (80073c4 <_dtoa_r+0x8d4>)
 8007162:	2200      	movs	r2, #0
 8007164:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007168:	f7f9 fa4e 	bl	8000608 <__aeabi_dmul>
 800716c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007170:	f7f9 fcd0 	bl	8000b14 <__aeabi_dcmpge>
 8007174:	2800      	cmp	r0, #0
 8007176:	f000 8157 	beq.w	8007428 <_dtoa_r+0x938>
 800717a:	2400      	movs	r4, #0
 800717c:	4625      	mov	r5, r4
 800717e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007180:	43db      	mvns	r3, r3
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	4656      	mov	r6, sl
 8007186:	2700      	movs	r7, #0
 8007188:	4621      	mov	r1, r4
 800718a:	4658      	mov	r0, fp
 800718c:	f000 fbb4 	bl	80078f8 <_Bfree>
 8007190:	2d00      	cmp	r5, #0
 8007192:	d0dc      	beq.n	800714e <_dtoa_r+0x65e>
 8007194:	b12f      	cbz	r7, 80071a2 <_dtoa_r+0x6b2>
 8007196:	42af      	cmp	r7, r5
 8007198:	d003      	beq.n	80071a2 <_dtoa_r+0x6b2>
 800719a:	4639      	mov	r1, r7
 800719c:	4658      	mov	r0, fp
 800719e:	f000 fbab 	bl	80078f8 <_Bfree>
 80071a2:	4629      	mov	r1, r5
 80071a4:	4658      	mov	r0, fp
 80071a6:	f000 fba7 	bl	80078f8 <_Bfree>
 80071aa:	e7d0      	b.n	800714e <_dtoa_r+0x65e>
 80071ac:	9704      	str	r7, [sp, #16]
 80071ae:	4633      	mov	r3, r6
 80071b0:	461e      	mov	r6, r3
 80071b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071b6:	2a39      	cmp	r2, #57	@ 0x39
 80071b8:	d107      	bne.n	80071ca <_dtoa_r+0x6da>
 80071ba:	459a      	cmp	sl, r3
 80071bc:	d1f8      	bne.n	80071b0 <_dtoa_r+0x6c0>
 80071be:	9a04      	ldr	r2, [sp, #16]
 80071c0:	3201      	adds	r2, #1
 80071c2:	9204      	str	r2, [sp, #16]
 80071c4:	2230      	movs	r2, #48	@ 0x30
 80071c6:	f88a 2000 	strb.w	r2, [sl]
 80071ca:	781a      	ldrb	r2, [r3, #0]
 80071cc:	3201      	adds	r2, #1
 80071ce:	701a      	strb	r2, [r3, #0]
 80071d0:	e7bd      	b.n	800714e <_dtoa_r+0x65e>
 80071d2:	4b7b      	ldr	r3, [pc, #492]	@ (80073c0 <_dtoa_r+0x8d0>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	f7f9 fa17 	bl	8000608 <__aeabi_dmul>
 80071da:	2200      	movs	r2, #0
 80071dc:	2300      	movs	r3, #0
 80071de:	4604      	mov	r4, r0
 80071e0:	460d      	mov	r5, r1
 80071e2:	f7f9 fc79 	bl	8000ad8 <__aeabi_dcmpeq>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f43f aebb 	beq.w	8006f62 <_dtoa_r+0x472>
 80071ec:	e6f0      	b.n	8006fd0 <_dtoa_r+0x4e0>
 80071ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	f000 80db 	beq.w	80073ac <_dtoa_r+0x8bc>
 80071f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071f8:	2a01      	cmp	r2, #1
 80071fa:	f300 80bf 	bgt.w	800737c <_dtoa_r+0x88c>
 80071fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007200:	2a00      	cmp	r2, #0
 8007202:	f000 80b7 	beq.w	8007374 <_dtoa_r+0x884>
 8007206:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800720a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800720c:	4646      	mov	r6, r8
 800720e:	9a08      	ldr	r2, [sp, #32]
 8007210:	2101      	movs	r1, #1
 8007212:	441a      	add	r2, r3
 8007214:	4658      	mov	r0, fp
 8007216:	4498      	add	r8, r3
 8007218:	9208      	str	r2, [sp, #32]
 800721a:	f000 fc6b 	bl	8007af4 <__i2b>
 800721e:	4605      	mov	r5, r0
 8007220:	b15e      	cbz	r6, 800723a <_dtoa_r+0x74a>
 8007222:	9b08      	ldr	r3, [sp, #32]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dd08      	ble.n	800723a <_dtoa_r+0x74a>
 8007228:	42b3      	cmp	r3, r6
 800722a:	9a08      	ldr	r2, [sp, #32]
 800722c:	bfa8      	it	ge
 800722e:	4633      	movge	r3, r6
 8007230:	eba8 0803 	sub.w	r8, r8, r3
 8007234:	1af6      	subs	r6, r6, r3
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	9308      	str	r3, [sp, #32]
 800723a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800723c:	b1f3      	cbz	r3, 800727c <_dtoa_r+0x78c>
 800723e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80b7 	beq.w	80073b4 <_dtoa_r+0x8c4>
 8007246:	b18c      	cbz	r4, 800726c <_dtoa_r+0x77c>
 8007248:	4629      	mov	r1, r5
 800724a:	4622      	mov	r2, r4
 800724c:	4658      	mov	r0, fp
 800724e:	f000 fd11 	bl	8007c74 <__pow5mult>
 8007252:	464a      	mov	r2, r9
 8007254:	4601      	mov	r1, r0
 8007256:	4605      	mov	r5, r0
 8007258:	4658      	mov	r0, fp
 800725a:	f000 fc61 	bl	8007b20 <__multiply>
 800725e:	4649      	mov	r1, r9
 8007260:	9004      	str	r0, [sp, #16]
 8007262:	4658      	mov	r0, fp
 8007264:	f000 fb48 	bl	80078f8 <_Bfree>
 8007268:	9b04      	ldr	r3, [sp, #16]
 800726a:	4699      	mov	r9, r3
 800726c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800726e:	1b1a      	subs	r2, r3, r4
 8007270:	d004      	beq.n	800727c <_dtoa_r+0x78c>
 8007272:	4649      	mov	r1, r9
 8007274:	4658      	mov	r0, fp
 8007276:	f000 fcfd 	bl	8007c74 <__pow5mult>
 800727a:	4681      	mov	r9, r0
 800727c:	2101      	movs	r1, #1
 800727e:	4658      	mov	r0, fp
 8007280:	f000 fc38 	bl	8007af4 <__i2b>
 8007284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007286:	4604      	mov	r4, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 81cf 	beq.w	800762c <_dtoa_r+0xb3c>
 800728e:	461a      	mov	r2, r3
 8007290:	4601      	mov	r1, r0
 8007292:	4658      	mov	r0, fp
 8007294:	f000 fcee 	bl	8007c74 <__pow5mult>
 8007298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800729a:	2b01      	cmp	r3, #1
 800729c:	4604      	mov	r4, r0
 800729e:	f300 8095 	bgt.w	80073cc <_dtoa_r+0x8dc>
 80072a2:	9b02      	ldr	r3, [sp, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f040 8087 	bne.w	80073b8 <_dtoa_r+0x8c8>
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f040 8089 	bne.w	80073c8 <_dtoa_r+0x8d8>
 80072b6:	9b03      	ldr	r3, [sp, #12]
 80072b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072bc:	0d1b      	lsrs	r3, r3, #20
 80072be:	051b      	lsls	r3, r3, #20
 80072c0:	b12b      	cbz	r3, 80072ce <_dtoa_r+0x7de>
 80072c2:	9b08      	ldr	r3, [sp, #32]
 80072c4:	3301      	adds	r3, #1
 80072c6:	9308      	str	r3, [sp, #32]
 80072c8:	f108 0801 	add.w	r8, r8, #1
 80072cc:	2301      	movs	r3, #1
 80072ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80072d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 81b0 	beq.w	8007638 <_dtoa_r+0xb48>
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072de:	6918      	ldr	r0, [r3, #16]
 80072e0:	f000 fbbc 	bl	8007a5c <__hi0bits>
 80072e4:	f1c0 0020 	rsb	r0, r0, #32
 80072e8:	9b08      	ldr	r3, [sp, #32]
 80072ea:	4418      	add	r0, r3
 80072ec:	f010 001f 	ands.w	r0, r0, #31
 80072f0:	d077      	beq.n	80073e2 <_dtoa_r+0x8f2>
 80072f2:	f1c0 0320 	rsb	r3, r0, #32
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	dd6b      	ble.n	80073d2 <_dtoa_r+0x8e2>
 80072fa:	9b08      	ldr	r3, [sp, #32]
 80072fc:	f1c0 001c 	rsb	r0, r0, #28
 8007300:	4403      	add	r3, r0
 8007302:	4480      	add	r8, r0
 8007304:	4406      	add	r6, r0
 8007306:	9308      	str	r3, [sp, #32]
 8007308:	f1b8 0f00 	cmp.w	r8, #0
 800730c:	dd05      	ble.n	800731a <_dtoa_r+0x82a>
 800730e:	4649      	mov	r1, r9
 8007310:	4642      	mov	r2, r8
 8007312:	4658      	mov	r0, fp
 8007314:	f000 fd08 	bl	8007d28 <__lshift>
 8007318:	4681      	mov	r9, r0
 800731a:	9b08      	ldr	r3, [sp, #32]
 800731c:	2b00      	cmp	r3, #0
 800731e:	dd05      	ble.n	800732c <_dtoa_r+0x83c>
 8007320:	4621      	mov	r1, r4
 8007322:	461a      	mov	r2, r3
 8007324:	4658      	mov	r0, fp
 8007326:	f000 fcff 	bl	8007d28 <__lshift>
 800732a:	4604      	mov	r4, r0
 800732c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800732e:	2b00      	cmp	r3, #0
 8007330:	d059      	beq.n	80073e6 <_dtoa_r+0x8f6>
 8007332:	4621      	mov	r1, r4
 8007334:	4648      	mov	r0, r9
 8007336:	f000 fd63 	bl	8007e00 <__mcmp>
 800733a:	2800      	cmp	r0, #0
 800733c:	da53      	bge.n	80073e6 <_dtoa_r+0x8f6>
 800733e:	1e7b      	subs	r3, r7, #1
 8007340:	9304      	str	r3, [sp, #16]
 8007342:	4649      	mov	r1, r9
 8007344:	2300      	movs	r3, #0
 8007346:	220a      	movs	r2, #10
 8007348:	4658      	mov	r0, fp
 800734a:	f000 faf7 	bl	800793c <__multadd>
 800734e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007350:	4681      	mov	r9, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8172 	beq.w	800763c <_dtoa_r+0xb4c>
 8007358:	2300      	movs	r3, #0
 800735a:	4629      	mov	r1, r5
 800735c:	220a      	movs	r2, #10
 800735e:	4658      	mov	r0, fp
 8007360:	f000 faec 	bl	800793c <__multadd>
 8007364:	9b00      	ldr	r3, [sp, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	4605      	mov	r5, r0
 800736a:	dc67      	bgt.n	800743c <_dtoa_r+0x94c>
 800736c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800736e:	2b02      	cmp	r3, #2
 8007370:	dc41      	bgt.n	80073f6 <_dtoa_r+0x906>
 8007372:	e063      	b.n	800743c <_dtoa_r+0x94c>
 8007374:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007376:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800737a:	e746      	b.n	800720a <_dtoa_r+0x71a>
 800737c:	9b07      	ldr	r3, [sp, #28]
 800737e:	1e5c      	subs	r4, r3, #1
 8007380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007382:	42a3      	cmp	r3, r4
 8007384:	bfbf      	itttt	lt
 8007386:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007388:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800738a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800738c:	1ae3      	sublt	r3, r4, r3
 800738e:	bfb4      	ite	lt
 8007390:	18d2      	addlt	r2, r2, r3
 8007392:	1b1c      	subge	r4, r3, r4
 8007394:	9b07      	ldr	r3, [sp, #28]
 8007396:	bfbc      	itt	lt
 8007398:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800739a:	2400      	movlt	r4, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfb5      	itete	lt
 80073a0:	eba8 0603 	sublt.w	r6, r8, r3
 80073a4:	9b07      	ldrge	r3, [sp, #28]
 80073a6:	2300      	movlt	r3, #0
 80073a8:	4646      	movge	r6, r8
 80073aa:	e730      	b.n	800720e <_dtoa_r+0x71e>
 80073ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80073b0:	4646      	mov	r6, r8
 80073b2:	e735      	b.n	8007220 <_dtoa_r+0x730>
 80073b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073b6:	e75c      	b.n	8007272 <_dtoa_r+0x782>
 80073b8:	2300      	movs	r3, #0
 80073ba:	e788      	b.n	80072ce <_dtoa_r+0x7de>
 80073bc:	3fe00000 	.word	0x3fe00000
 80073c0:	40240000 	.word	0x40240000
 80073c4:	40140000 	.word	0x40140000
 80073c8:	9b02      	ldr	r3, [sp, #8]
 80073ca:	e780      	b.n	80072ce <_dtoa_r+0x7de>
 80073cc:	2300      	movs	r3, #0
 80073ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80073d0:	e782      	b.n	80072d8 <_dtoa_r+0x7e8>
 80073d2:	d099      	beq.n	8007308 <_dtoa_r+0x818>
 80073d4:	9a08      	ldr	r2, [sp, #32]
 80073d6:	331c      	adds	r3, #28
 80073d8:	441a      	add	r2, r3
 80073da:	4498      	add	r8, r3
 80073dc:	441e      	add	r6, r3
 80073de:	9208      	str	r2, [sp, #32]
 80073e0:	e792      	b.n	8007308 <_dtoa_r+0x818>
 80073e2:	4603      	mov	r3, r0
 80073e4:	e7f6      	b.n	80073d4 <_dtoa_r+0x8e4>
 80073e6:	9b07      	ldr	r3, [sp, #28]
 80073e8:	9704      	str	r7, [sp, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dc20      	bgt.n	8007430 <_dtoa_r+0x940>
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	dd1e      	ble.n	8007434 <_dtoa_r+0x944>
 80073f6:	9b00      	ldr	r3, [sp, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f47f aec0 	bne.w	800717e <_dtoa_r+0x68e>
 80073fe:	4621      	mov	r1, r4
 8007400:	2205      	movs	r2, #5
 8007402:	4658      	mov	r0, fp
 8007404:	f000 fa9a 	bl	800793c <__multadd>
 8007408:	4601      	mov	r1, r0
 800740a:	4604      	mov	r4, r0
 800740c:	4648      	mov	r0, r9
 800740e:	f000 fcf7 	bl	8007e00 <__mcmp>
 8007412:	2800      	cmp	r0, #0
 8007414:	f77f aeb3 	ble.w	800717e <_dtoa_r+0x68e>
 8007418:	4656      	mov	r6, sl
 800741a:	2331      	movs	r3, #49	@ 0x31
 800741c:	f806 3b01 	strb.w	r3, [r6], #1
 8007420:	9b04      	ldr	r3, [sp, #16]
 8007422:	3301      	adds	r3, #1
 8007424:	9304      	str	r3, [sp, #16]
 8007426:	e6ae      	b.n	8007186 <_dtoa_r+0x696>
 8007428:	9c07      	ldr	r4, [sp, #28]
 800742a:	9704      	str	r7, [sp, #16]
 800742c:	4625      	mov	r5, r4
 800742e:	e7f3      	b.n	8007418 <_dtoa_r+0x928>
 8007430:	9b07      	ldr	r3, [sp, #28]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8104 	beq.w	8007644 <_dtoa_r+0xb54>
 800743c:	2e00      	cmp	r6, #0
 800743e:	dd05      	ble.n	800744c <_dtoa_r+0x95c>
 8007440:	4629      	mov	r1, r5
 8007442:	4632      	mov	r2, r6
 8007444:	4658      	mov	r0, fp
 8007446:	f000 fc6f 	bl	8007d28 <__lshift>
 800744a:	4605      	mov	r5, r0
 800744c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800744e:	2b00      	cmp	r3, #0
 8007450:	d05a      	beq.n	8007508 <_dtoa_r+0xa18>
 8007452:	6869      	ldr	r1, [r5, #4]
 8007454:	4658      	mov	r0, fp
 8007456:	f000 fa0f 	bl	8007878 <_Balloc>
 800745a:	4606      	mov	r6, r0
 800745c:	b928      	cbnz	r0, 800746a <_dtoa_r+0x97a>
 800745e:	4b84      	ldr	r3, [pc, #528]	@ (8007670 <_dtoa_r+0xb80>)
 8007460:	4602      	mov	r2, r0
 8007462:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007466:	f7ff bb5a 	b.w	8006b1e <_dtoa_r+0x2e>
 800746a:	692a      	ldr	r2, [r5, #16]
 800746c:	3202      	adds	r2, #2
 800746e:	0092      	lsls	r2, r2, #2
 8007470:	f105 010c 	add.w	r1, r5, #12
 8007474:	300c      	adds	r0, #12
 8007476:	f002 fcc9 	bl	8009e0c <memcpy>
 800747a:	2201      	movs	r2, #1
 800747c:	4631      	mov	r1, r6
 800747e:	4658      	mov	r0, fp
 8007480:	f000 fc52 	bl	8007d28 <__lshift>
 8007484:	f10a 0301 	add.w	r3, sl, #1
 8007488:	9307      	str	r3, [sp, #28]
 800748a:	9b00      	ldr	r3, [sp, #0]
 800748c:	4453      	add	r3, sl
 800748e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007490:	9b02      	ldr	r3, [sp, #8]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	462f      	mov	r7, r5
 8007498:	930a      	str	r3, [sp, #40]	@ 0x28
 800749a:	4605      	mov	r5, r0
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	4621      	mov	r1, r4
 80074a0:	3b01      	subs	r3, #1
 80074a2:	4648      	mov	r0, r9
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	f7ff fa99 	bl	80069dc <quorem>
 80074aa:	4639      	mov	r1, r7
 80074ac:	9002      	str	r0, [sp, #8]
 80074ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80074b2:	4648      	mov	r0, r9
 80074b4:	f000 fca4 	bl	8007e00 <__mcmp>
 80074b8:	462a      	mov	r2, r5
 80074ba:	9008      	str	r0, [sp, #32]
 80074bc:	4621      	mov	r1, r4
 80074be:	4658      	mov	r0, fp
 80074c0:	f000 fcba 	bl	8007e38 <__mdiff>
 80074c4:	68c2      	ldr	r2, [r0, #12]
 80074c6:	4606      	mov	r6, r0
 80074c8:	bb02      	cbnz	r2, 800750c <_dtoa_r+0xa1c>
 80074ca:	4601      	mov	r1, r0
 80074cc:	4648      	mov	r0, r9
 80074ce:	f000 fc97 	bl	8007e00 <__mcmp>
 80074d2:	4602      	mov	r2, r0
 80074d4:	4631      	mov	r1, r6
 80074d6:	4658      	mov	r0, fp
 80074d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80074da:	f000 fa0d 	bl	80078f8 <_Bfree>
 80074de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074e2:	9e07      	ldr	r6, [sp, #28]
 80074e4:	ea43 0102 	orr.w	r1, r3, r2
 80074e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ea:	4319      	orrs	r1, r3
 80074ec:	d110      	bne.n	8007510 <_dtoa_r+0xa20>
 80074ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80074f2:	d029      	beq.n	8007548 <_dtoa_r+0xa58>
 80074f4:	9b08      	ldr	r3, [sp, #32]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	dd02      	ble.n	8007500 <_dtoa_r+0xa10>
 80074fa:	9b02      	ldr	r3, [sp, #8]
 80074fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007500:	9b00      	ldr	r3, [sp, #0]
 8007502:	f883 8000 	strb.w	r8, [r3]
 8007506:	e63f      	b.n	8007188 <_dtoa_r+0x698>
 8007508:	4628      	mov	r0, r5
 800750a:	e7bb      	b.n	8007484 <_dtoa_r+0x994>
 800750c:	2201      	movs	r2, #1
 800750e:	e7e1      	b.n	80074d4 <_dtoa_r+0x9e4>
 8007510:	9b08      	ldr	r3, [sp, #32]
 8007512:	2b00      	cmp	r3, #0
 8007514:	db04      	blt.n	8007520 <_dtoa_r+0xa30>
 8007516:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007518:	430b      	orrs	r3, r1
 800751a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800751c:	430b      	orrs	r3, r1
 800751e:	d120      	bne.n	8007562 <_dtoa_r+0xa72>
 8007520:	2a00      	cmp	r2, #0
 8007522:	dded      	ble.n	8007500 <_dtoa_r+0xa10>
 8007524:	4649      	mov	r1, r9
 8007526:	2201      	movs	r2, #1
 8007528:	4658      	mov	r0, fp
 800752a:	f000 fbfd 	bl	8007d28 <__lshift>
 800752e:	4621      	mov	r1, r4
 8007530:	4681      	mov	r9, r0
 8007532:	f000 fc65 	bl	8007e00 <__mcmp>
 8007536:	2800      	cmp	r0, #0
 8007538:	dc03      	bgt.n	8007542 <_dtoa_r+0xa52>
 800753a:	d1e1      	bne.n	8007500 <_dtoa_r+0xa10>
 800753c:	f018 0f01 	tst.w	r8, #1
 8007540:	d0de      	beq.n	8007500 <_dtoa_r+0xa10>
 8007542:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007546:	d1d8      	bne.n	80074fa <_dtoa_r+0xa0a>
 8007548:	9a00      	ldr	r2, [sp, #0]
 800754a:	2339      	movs	r3, #57	@ 0x39
 800754c:	7013      	strb	r3, [r2, #0]
 800754e:	4633      	mov	r3, r6
 8007550:	461e      	mov	r6, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007558:	2a39      	cmp	r2, #57	@ 0x39
 800755a:	d052      	beq.n	8007602 <_dtoa_r+0xb12>
 800755c:	3201      	adds	r2, #1
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e612      	b.n	8007188 <_dtoa_r+0x698>
 8007562:	2a00      	cmp	r2, #0
 8007564:	dd07      	ble.n	8007576 <_dtoa_r+0xa86>
 8007566:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800756a:	d0ed      	beq.n	8007548 <_dtoa_r+0xa58>
 800756c:	9a00      	ldr	r2, [sp, #0]
 800756e:	f108 0301 	add.w	r3, r8, #1
 8007572:	7013      	strb	r3, [r2, #0]
 8007574:	e608      	b.n	8007188 <_dtoa_r+0x698>
 8007576:	9b07      	ldr	r3, [sp, #28]
 8007578:	9a07      	ldr	r2, [sp, #28]
 800757a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800757e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007580:	4293      	cmp	r3, r2
 8007582:	d028      	beq.n	80075d6 <_dtoa_r+0xae6>
 8007584:	4649      	mov	r1, r9
 8007586:	2300      	movs	r3, #0
 8007588:	220a      	movs	r2, #10
 800758a:	4658      	mov	r0, fp
 800758c:	f000 f9d6 	bl	800793c <__multadd>
 8007590:	42af      	cmp	r7, r5
 8007592:	4681      	mov	r9, r0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	f04f 020a 	mov.w	r2, #10
 800759c:	4639      	mov	r1, r7
 800759e:	4658      	mov	r0, fp
 80075a0:	d107      	bne.n	80075b2 <_dtoa_r+0xac2>
 80075a2:	f000 f9cb 	bl	800793c <__multadd>
 80075a6:	4607      	mov	r7, r0
 80075a8:	4605      	mov	r5, r0
 80075aa:	9b07      	ldr	r3, [sp, #28]
 80075ac:	3301      	adds	r3, #1
 80075ae:	9307      	str	r3, [sp, #28]
 80075b0:	e774      	b.n	800749c <_dtoa_r+0x9ac>
 80075b2:	f000 f9c3 	bl	800793c <__multadd>
 80075b6:	4629      	mov	r1, r5
 80075b8:	4607      	mov	r7, r0
 80075ba:	2300      	movs	r3, #0
 80075bc:	220a      	movs	r2, #10
 80075be:	4658      	mov	r0, fp
 80075c0:	f000 f9bc 	bl	800793c <__multadd>
 80075c4:	4605      	mov	r5, r0
 80075c6:	e7f0      	b.n	80075aa <_dtoa_r+0xaba>
 80075c8:	9b00      	ldr	r3, [sp, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bfcc      	ite	gt
 80075ce:	461e      	movgt	r6, r3
 80075d0:	2601      	movle	r6, #1
 80075d2:	4456      	add	r6, sl
 80075d4:	2700      	movs	r7, #0
 80075d6:	4649      	mov	r1, r9
 80075d8:	2201      	movs	r2, #1
 80075da:	4658      	mov	r0, fp
 80075dc:	f000 fba4 	bl	8007d28 <__lshift>
 80075e0:	4621      	mov	r1, r4
 80075e2:	4681      	mov	r9, r0
 80075e4:	f000 fc0c 	bl	8007e00 <__mcmp>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	dcb0      	bgt.n	800754e <_dtoa_r+0xa5e>
 80075ec:	d102      	bne.n	80075f4 <_dtoa_r+0xb04>
 80075ee:	f018 0f01 	tst.w	r8, #1
 80075f2:	d1ac      	bne.n	800754e <_dtoa_r+0xa5e>
 80075f4:	4633      	mov	r3, r6
 80075f6:	461e      	mov	r6, r3
 80075f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075fc:	2a30      	cmp	r2, #48	@ 0x30
 80075fe:	d0fa      	beq.n	80075f6 <_dtoa_r+0xb06>
 8007600:	e5c2      	b.n	8007188 <_dtoa_r+0x698>
 8007602:	459a      	cmp	sl, r3
 8007604:	d1a4      	bne.n	8007550 <_dtoa_r+0xa60>
 8007606:	9b04      	ldr	r3, [sp, #16]
 8007608:	3301      	adds	r3, #1
 800760a:	9304      	str	r3, [sp, #16]
 800760c:	2331      	movs	r3, #49	@ 0x31
 800760e:	f88a 3000 	strb.w	r3, [sl]
 8007612:	e5b9      	b.n	8007188 <_dtoa_r+0x698>
 8007614:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007616:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007674 <_dtoa_r+0xb84>
 800761a:	b11b      	cbz	r3, 8007624 <_dtoa_r+0xb34>
 800761c:	f10a 0308 	add.w	r3, sl, #8
 8007620:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	4650      	mov	r0, sl
 8007626:	b019      	add	sp, #100	@ 0x64
 8007628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762e:	2b01      	cmp	r3, #1
 8007630:	f77f ae37 	ble.w	80072a2 <_dtoa_r+0x7b2>
 8007634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007636:	930a      	str	r3, [sp, #40]	@ 0x28
 8007638:	2001      	movs	r0, #1
 800763a:	e655      	b.n	80072e8 <_dtoa_r+0x7f8>
 800763c:	9b00      	ldr	r3, [sp, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	f77f aed6 	ble.w	80073f0 <_dtoa_r+0x900>
 8007644:	4656      	mov	r6, sl
 8007646:	4621      	mov	r1, r4
 8007648:	4648      	mov	r0, r9
 800764a:	f7ff f9c7 	bl	80069dc <quorem>
 800764e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007652:	f806 8b01 	strb.w	r8, [r6], #1
 8007656:	9b00      	ldr	r3, [sp, #0]
 8007658:	eba6 020a 	sub.w	r2, r6, sl
 800765c:	4293      	cmp	r3, r2
 800765e:	ddb3      	ble.n	80075c8 <_dtoa_r+0xad8>
 8007660:	4649      	mov	r1, r9
 8007662:	2300      	movs	r3, #0
 8007664:	220a      	movs	r2, #10
 8007666:	4658      	mov	r0, fp
 8007668:	f000 f968 	bl	800793c <__multadd>
 800766c:	4681      	mov	r9, r0
 800766e:	e7ea      	b.n	8007646 <_dtoa_r+0xb56>
 8007670:	0800a893 	.word	0x0800a893
 8007674:	0800a817 	.word	0x0800a817

08007678 <_free_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	4605      	mov	r5, r0
 800767c:	2900      	cmp	r1, #0
 800767e:	d041      	beq.n	8007704 <_free_r+0x8c>
 8007680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007684:	1f0c      	subs	r4, r1, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	bfb8      	it	lt
 800768a:	18e4      	addlt	r4, r4, r3
 800768c:	f000 f8e8 	bl	8007860 <__malloc_lock>
 8007690:	4a1d      	ldr	r2, [pc, #116]	@ (8007708 <_free_r+0x90>)
 8007692:	6813      	ldr	r3, [r2, #0]
 8007694:	b933      	cbnz	r3, 80076a4 <_free_r+0x2c>
 8007696:	6063      	str	r3, [r4, #4]
 8007698:	6014      	str	r4, [r2, #0]
 800769a:	4628      	mov	r0, r5
 800769c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076a0:	f000 b8e4 	b.w	800786c <__malloc_unlock>
 80076a4:	42a3      	cmp	r3, r4
 80076a6:	d908      	bls.n	80076ba <_free_r+0x42>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	1821      	adds	r1, r4, r0
 80076ac:	428b      	cmp	r3, r1
 80076ae:	bf01      	itttt	eq
 80076b0:	6819      	ldreq	r1, [r3, #0]
 80076b2:	685b      	ldreq	r3, [r3, #4]
 80076b4:	1809      	addeq	r1, r1, r0
 80076b6:	6021      	streq	r1, [r4, #0]
 80076b8:	e7ed      	b.n	8007696 <_free_r+0x1e>
 80076ba:	461a      	mov	r2, r3
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	b10b      	cbz	r3, 80076c4 <_free_r+0x4c>
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	d9fa      	bls.n	80076ba <_free_r+0x42>
 80076c4:	6811      	ldr	r1, [r2, #0]
 80076c6:	1850      	adds	r0, r2, r1
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d10b      	bne.n	80076e4 <_free_r+0x6c>
 80076cc:	6820      	ldr	r0, [r4, #0]
 80076ce:	4401      	add	r1, r0
 80076d0:	1850      	adds	r0, r2, r1
 80076d2:	4283      	cmp	r3, r0
 80076d4:	6011      	str	r1, [r2, #0]
 80076d6:	d1e0      	bne.n	800769a <_free_r+0x22>
 80076d8:	6818      	ldr	r0, [r3, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	6053      	str	r3, [r2, #4]
 80076de:	4408      	add	r0, r1
 80076e0:	6010      	str	r0, [r2, #0]
 80076e2:	e7da      	b.n	800769a <_free_r+0x22>
 80076e4:	d902      	bls.n	80076ec <_free_r+0x74>
 80076e6:	230c      	movs	r3, #12
 80076e8:	602b      	str	r3, [r5, #0]
 80076ea:	e7d6      	b.n	800769a <_free_r+0x22>
 80076ec:	6820      	ldr	r0, [r4, #0]
 80076ee:	1821      	adds	r1, r4, r0
 80076f0:	428b      	cmp	r3, r1
 80076f2:	bf04      	itt	eq
 80076f4:	6819      	ldreq	r1, [r3, #0]
 80076f6:	685b      	ldreq	r3, [r3, #4]
 80076f8:	6063      	str	r3, [r4, #4]
 80076fa:	bf04      	itt	eq
 80076fc:	1809      	addeq	r1, r1, r0
 80076fe:	6021      	streq	r1, [r4, #0]
 8007700:	6054      	str	r4, [r2, #4]
 8007702:	e7ca      	b.n	800769a <_free_r+0x22>
 8007704:	bd38      	pop	{r3, r4, r5, pc}
 8007706:	bf00      	nop
 8007708:	20000590 	.word	0x20000590

0800770c <malloc>:
 800770c:	4b02      	ldr	r3, [pc, #8]	@ (8007718 <malloc+0xc>)
 800770e:	4601      	mov	r1, r0
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	f000 b825 	b.w	8007760 <_malloc_r>
 8007716:	bf00      	nop
 8007718:	2000003c 	.word	0x2000003c

0800771c <sbrk_aligned>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	4e0f      	ldr	r6, [pc, #60]	@ (800775c <sbrk_aligned+0x40>)
 8007720:	460c      	mov	r4, r1
 8007722:	6831      	ldr	r1, [r6, #0]
 8007724:	4605      	mov	r5, r0
 8007726:	b911      	cbnz	r1, 800772e <sbrk_aligned+0x12>
 8007728:	f002 fb60 	bl	8009dec <_sbrk_r>
 800772c:	6030      	str	r0, [r6, #0]
 800772e:	4621      	mov	r1, r4
 8007730:	4628      	mov	r0, r5
 8007732:	f002 fb5b 	bl	8009dec <_sbrk_r>
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	d103      	bne.n	8007742 <sbrk_aligned+0x26>
 800773a:	f04f 34ff 	mov.w	r4, #4294967295
 800773e:	4620      	mov	r0, r4
 8007740:	bd70      	pop	{r4, r5, r6, pc}
 8007742:	1cc4      	adds	r4, r0, #3
 8007744:	f024 0403 	bic.w	r4, r4, #3
 8007748:	42a0      	cmp	r0, r4
 800774a:	d0f8      	beq.n	800773e <sbrk_aligned+0x22>
 800774c:	1a21      	subs	r1, r4, r0
 800774e:	4628      	mov	r0, r5
 8007750:	f002 fb4c 	bl	8009dec <_sbrk_r>
 8007754:	3001      	adds	r0, #1
 8007756:	d1f2      	bne.n	800773e <sbrk_aligned+0x22>
 8007758:	e7ef      	b.n	800773a <sbrk_aligned+0x1e>
 800775a:	bf00      	nop
 800775c:	2000058c 	.word	0x2000058c

08007760 <_malloc_r>:
 8007760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007764:	1ccd      	adds	r5, r1, #3
 8007766:	f025 0503 	bic.w	r5, r5, #3
 800776a:	3508      	adds	r5, #8
 800776c:	2d0c      	cmp	r5, #12
 800776e:	bf38      	it	cc
 8007770:	250c      	movcc	r5, #12
 8007772:	2d00      	cmp	r5, #0
 8007774:	4606      	mov	r6, r0
 8007776:	db01      	blt.n	800777c <_malloc_r+0x1c>
 8007778:	42a9      	cmp	r1, r5
 800777a:	d904      	bls.n	8007786 <_malloc_r+0x26>
 800777c:	230c      	movs	r3, #12
 800777e:	6033      	str	r3, [r6, #0]
 8007780:	2000      	movs	r0, #0
 8007782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007786:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800785c <_malloc_r+0xfc>
 800778a:	f000 f869 	bl	8007860 <__malloc_lock>
 800778e:	f8d8 3000 	ldr.w	r3, [r8]
 8007792:	461c      	mov	r4, r3
 8007794:	bb44      	cbnz	r4, 80077e8 <_malloc_r+0x88>
 8007796:	4629      	mov	r1, r5
 8007798:	4630      	mov	r0, r6
 800779a:	f7ff ffbf 	bl	800771c <sbrk_aligned>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	4604      	mov	r4, r0
 80077a2:	d158      	bne.n	8007856 <_malloc_r+0xf6>
 80077a4:	f8d8 4000 	ldr.w	r4, [r8]
 80077a8:	4627      	mov	r7, r4
 80077aa:	2f00      	cmp	r7, #0
 80077ac:	d143      	bne.n	8007836 <_malloc_r+0xd6>
 80077ae:	2c00      	cmp	r4, #0
 80077b0:	d04b      	beq.n	800784a <_malloc_r+0xea>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	4639      	mov	r1, r7
 80077b6:	4630      	mov	r0, r6
 80077b8:	eb04 0903 	add.w	r9, r4, r3
 80077bc:	f002 fb16 	bl	8009dec <_sbrk_r>
 80077c0:	4581      	cmp	r9, r0
 80077c2:	d142      	bne.n	800784a <_malloc_r+0xea>
 80077c4:	6821      	ldr	r1, [r4, #0]
 80077c6:	1a6d      	subs	r5, r5, r1
 80077c8:	4629      	mov	r1, r5
 80077ca:	4630      	mov	r0, r6
 80077cc:	f7ff ffa6 	bl	800771c <sbrk_aligned>
 80077d0:	3001      	adds	r0, #1
 80077d2:	d03a      	beq.n	800784a <_malloc_r+0xea>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	442b      	add	r3, r5
 80077d8:	6023      	str	r3, [r4, #0]
 80077da:	f8d8 3000 	ldr.w	r3, [r8]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	bb62      	cbnz	r2, 800783c <_malloc_r+0xdc>
 80077e2:	f8c8 7000 	str.w	r7, [r8]
 80077e6:	e00f      	b.n	8007808 <_malloc_r+0xa8>
 80077e8:	6822      	ldr	r2, [r4, #0]
 80077ea:	1b52      	subs	r2, r2, r5
 80077ec:	d420      	bmi.n	8007830 <_malloc_r+0xd0>
 80077ee:	2a0b      	cmp	r2, #11
 80077f0:	d917      	bls.n	8007822 <_malloc_r+0xc2>
 80077f2:	1961      	adds	r1, r4, r5
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	6025      	str	r5, [r4, #0]
 80077f8:	bf18      	it	ne
 80077fa:	6059      	strne	r1, [r3, #4]
 80077fc:	6863      	ldr	r3, [r4, #4]
 80077fe:	bf08      	it	eq
 8007800:	f8c8 1000 	streq.w	r1, [r8]
 8007804:	5162      	str	r2, [r4, r5]
 8007806:	604b      	str	r3, [r1, #4]
 8007808:	4630      	mov	r0, r6
 800780a:	f000 f82f 	bl	800786c <__malloc_unlock>
 800780e:	f104 000b 	add.w	r0, r4, #11
 8007812:	1d23      	adds	r3, r4, #4
 8007814:	f020 0007 	bic.w	r0, r0, #7
 8007818:	1ac2      	subs	r2, r0, r3
 800781a:	bf1c      	itt	ne
 800781c:	1a1b      	subne	r3, r3, r0
 800781e:	50a3      	strne	r3, [r4, r2]
 8007820:	e7af      	b.n	8007782 <_malloc_r+0x22>
 8007822:	6862      	ldr	r2, [r4, #4]
 8007824:	42a3      	cmp	r3, r4
 8007826:	bf0c      	ite	eq
 8007828:	f8c8 2000 	streq.w	r2, [r8]
 800782c:	605a      	strne	r2, [r3, #4]
 800782e:	e7eb      	b.n	8007808 <_malloc_r+0xa8>
 8007830:	4623      	mov	r3, r4
 8007832:	6864      	ldr	r4, [r4, #4]
 8007834:	e7ae      	b.n	8007794 <_malloc_r+0x34>
 8007836:	463c      	mov	r4, r7
 8007838:	687f      	ldr	r7, [r7, #4]
 800783a:	e7b6      	b.n	80077aa <_malloc_r+0x4a>
 800783c:	461a      	mov	r2, r3
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	42a3      	cmp	r3, r4
 8007842:	d1fb      	bne.n	800783c <_malloc_r+0xdc>
 8007844:	2300      	movs	r3, #0
 8007846:	6053      	str	r3, [r2, #4]
 8007848:	e7de      	b.n	8007808 <_malloc_r+0xa8>
 800784a:	230c      	movs	r3, #12
 800784c:	6033      	str	r3, [r6, #0]
 800784e:	4630      	mov	r0, r6
 8007850:	f000 f80c 	bl	800786c <__malloc_unlock>
 8007854:	e794      	b.n	8007780 <_malloc_r+0x20>
 8007856:	6005      	str	r5, [r0, #0]
 8007858:	e7d6      	b.n	8007808 <_malloc_r+0xa8>
 800785a:	bf00      	nop
 800785c:	20000590 	.word	0x20000590

08007860 <__malloc_lock>:
 8007860:	4801      	ldr	r0, [pc, #4]	@ (8007868 <__malloc_lock+0x8>)
 8007862:	f7ff b8b2 	b.w	80069ca <__retarget_lock_acquire_recursive>
 8007866:	bf00      	nop
 8007868:	20000588 	.word	0x20000588

0800786c <__malloc_unlock>:
 800786c:	4801      	ldr	r0, [pc, #4]	@ (8007874 <__malloc_unlock+0x8>)
 800786e:	f7ff b8ad 	b.w	80069cc <__retarget_lock_release_recursive>
 8007872:	bf00      	nop
 8007874:	20000588 	.word	0x20000588

08007878 <_Balloc>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	69c6      	ldr	r6, [r0, #28]
 800787c:	4604      	mov	r4, r0
 800787e:	460d      	mov	r5, r1
 8007880:	b976      	cbnz	r6, 80078a0 <_Balloc+0x28>
 8007882:	2010      	movs	r0, #16
 8007884:	f7ff ff42 	bl	800770c <malloc>
 8007888:	4602      	mov	r2, r0
 800788a:	61e0      	str	r0, [r4, #28]
 800788c:	b920      	cbnz	r0, 8007898 <_Balloc+0x20>
 800788e:	4b18      	ldr	r3, [pc, #96]	@ (80078f0 <_Balloc+0x78>)
 8007890:	4818      	ldr	r0, [pc, #96]	@ (80078f4 <_Balloc+0x7c>)
 8007892:	216b      	movs	r1, #107	@ 0x6b
 8007894:	f002 fad0 	bl	8009e38 <__assert_func>
 8007898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800789c:	6006      	str	r6, [r0, #0]
 800789e:	60c6      	str	r6, [r0, #12]
 80078a0:	69e6      	ldr	r6, [r4, #28]
 80078a2:	68f3      	ldr	r3, [r6, #12]
 80078a4:	b183      	cbz	r3, 80078c8 <_Balloc+0x50>
 80078a6:	69e3      	ldr	r3, [r4, #28]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078ae:	b9b8      	cbnz	r0, 80078e0 <_Balloc+0x68>
 80078b0:	2101      	movs	r1, #1
 80078b2:	fa01 f605 	lsl.w	r6, r1, r5
 80078b6:	1d72      	adds	r2, r6, #5
 80078b8:	0092      	lsls	r2, r2, #2
 80078ba:	4620      	mov	r0, r4
 80078bc:	f002 fada 	bl	8009e74 <_calloc_r>
 80078c0:	b160      	cbz	r0, 80078dc <_Balloc+0x64>
 80078c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078c6:	e00e      	b.n	80078e6 <_Balloc+0x6e>
 80078c8:	2221      	movs	r2, #33	@ 0x21
 80078ca:	2104      	movs	r1, #4
 80078cc:	4620      	mov	r0, r4
 80078ce:	f002 fad1 	bl	8009e74 <_calloc_r>
 80078d2:	69e3      	ldr	r3, [r4, #28]
 80078d4:	60f0      	str	r0, [r6, #12]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e4      	bne.n	80078a6 <_Balloc+0x2e>
 80078dc:	2000      	movs	r0, #0
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	6802      	ldr	r2, [r0, #0]
 80078e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078e6:	2300      	movs	r3, #0
 80078e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078ec:	e7f7      	b.n	80078de <_Balloc+0x66>
 80078ee:	bf00      	nop
 80078f0:	0800a824 	.word	0x0800a824
 80078f4:	0800a8a4 	.word	0x0800a8a4

080078f8 <_Bfree>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	69c6      	ldr	r6, [r0, #28]
 80078fc:	4605      	mov	r5, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	b976      	cbnz	r6, 8007920 <_Bfree+0x28>
 8007902:	2010      	movs	r0, #16
 8007904:	f7ff ff02 	bl	800770c <malloc>
 8007908:	4602      	mov	r2, r0
 800790a:	61e8      	str	r0, [r5, #28]
 800790c:	b920      	cbnz	r0, 8007918 <_Bfree+0x20>
 800790e:	4b09      	ldr	r3, [pc, #36]	@ (8007934 <_Bfree+0x3c>)
 8007910:	4809      	ldr	r0, [pc, #36]	@ (8007938 <_Bfree+0x40>)
 8007912:	218f      	movs	r1, #143	@ 0x8f
 8007914:	f002 fa90 	bl	8009e38 <__assert_func>
 8007918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800791c:	6006      	str	r6, [r0, #0]
 800791e:	60c6      	str	r6, [r0, #12]
 8007920:	b13c      	cbz	r4, 8007932 <_Bfree+0x3a>
 8007922:	69eb      	ldr	r3, [r5, #28]
 8007924:	6862      	ldr	r2, [r4, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800792c:	6021      	str	r1, [r4, #0]
 800792e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	0800a824 	.word	0x0800a824
 8007938:	0800a8a4 	.word	0x0800a8a4

0800793c <__multadd>:
 800793c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007940:	690d      	ldr	r5, [r1, #16]
 8007942:	4607      	mov	r7, r0
 8007944:	460c      	mov	r4, r1
 8007946:	461e      	mov	r6, r3
 8007948:	f101 0c14 	add.w	ip, r1, #20
 800794c:	2000      	movs	r0, #0
 800794e:	f8dc 3000 	ldr.w	r3, [ip]
 8007952:	b299      	uxth	r1, r3
 8007954:	fb02 6101 	mla	r1, r2, r1, r6
 8007958:	0c1e      	lsrs	r6, r3, #16
 800795a:	0c0b      	lsrs	r3, r1, #16
 800795c:	fb02 3306 	mla	r3, r2, r6, r3
 8007960:	b289      	uxth	r1, r1
 8007962:	3001      	adds	r0, #1
 8007964:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007968:	4285      	cmp	r5, r0
 800796a:	f84c 1b04 	str.w	r1, [ip], #4
 800796e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007972:	dcec      	bgt.n	800794e <__multadd+0x12>
 8007974:	b30e      	cbz	r6, 80079ba <__multadd+0x7e>
 8007976:	68a3      	ldr	r3, [r4, #8]
 8007978:	42ab      	cmp	r3, r5
 800797a:	dc19      	bgt.n	80079b0 <__multadd+0x74>
 800797c:	6861      	ldr	r1, [r4, #4]
 800797e:	4638      	mov	r0, r7
 8007980:	3101      	adds	r1, #1
 8007982:	f7ff ff79 	bl	8007878 <_Balloc>
 8007986:	4680      	mov	r8, r0
 8007988:	b928      	cbnz	r0, 8007996 <__multadd+0x5a>
 800798a:	4602      	mov	r2, r0
 800798c:	4b0c      	ldr	r3, [pc, #48]	@ (80079c0 <__multadd+0x84>)
 800798e:	480d      	ldr	r0, [pc, #52]	@ (80079c4 <__multadd+0x88>)
 8007990:	21ba      	movs	r1, #186	@ 0xba
 8007992:	f002 fa51 	bl	8009e38 <__assert_func>
 8007996:	6922      	ldr	r2, [r4, #16]
 8007998:	3202      	adds	r2, #2
 800799a:	f104 010c 	add.w	r1, r4, #12
 800799e:	0092      	lsls	r2, r2, #2
 80079a0:	300c      	adds	r0, #12
 80079a2:	f002 fa33 	bl	8009e0c <memcpy>
 80079a6:	4621      	mov	r1, r4
 80079a8:	4638      	mov	r0, r7
 80079aa:	f7ff ffa5 	bl	80078f8 <_Bfree>
 80079ae:	4644      	mov	r4, r8
 80079b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079b4:	3501      	adds	r5, #1
 80079b6:	615e      	str	r6, [r3, #20]
 80079b8:	6125      	str	r5, [r4, #16]
 80079ba:	4620      	mov	r0, r4
 80079bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c0:	0800a893 	.word	0x0800a893
 80079c4:	0800a8a4 	.word	0x0800a8a4

080079c8 <__s2b>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	460c      	mov	r4, r1
 80079ce:	4615      	mov	r5, r2
 80079d0:	461f      	mov	r7, r3
 80079d2:	2209      	movs	r2, #9
 80079d4:	3308      	adds	r3, #8
 80079d6:	4606      	mov	r6, r0
 80079d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80079dc:	2100      	movs	r1, #0
 80079de:	2201      	movs	r2, #1
 80079e0:	429a      	cmp	r2, r3
 80079e2:	db09      	blt.n	80079f8 <__s2b+0x30>
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7ff ff47 	bl	8007878 <_Balloc>
 80079ea:	b940      	cbnz	r0, 80079fe <__s2b+0x36>
 80079ec:	4602      	mov	r2, r0
 80079ee:	4b19      	ldr	r3, [pc, #100]	@ (8007a54 <__s2b+0x8c>)
 80079f0:	4819      	ldr	r0, [pc, #100]	@ (8007a58 <__s2b+0x90>)
 80079f2:	21d3      	movs	r1, #211	@ 0xd3
 80079f4:	f002 fa20 	bl	8009e38 <__assert_func>
 80079f8:	0052      	lsls	r2, r2, #1
 80079fa:	3101      	adds	r1, #1
 80079fc:	e7f0      	b.n	80079e0 <__s2b+0x18>
 80079fe:	9b08      	ldr	r3, [sp, #32]
 8007a00:	6143      	str	r3, [r0, #20]
 8007a02:	2d09      	cmp	r5, #9
 8007a04:	f04f 0301 	mov.w	r3, #1
 8007a08:	6103      	str	r3, [r0, #16]
 8007a0a:	dd16      	ble.n	8007a3a <__s2b+0x72>
 8007a0c:	f104 0909 	add.w	r9, r4, #9
 8007a10:	46c8      	mov	r8, r9
 8007a12:	442c      	add	r4, r5
 8007a14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a18:	4601      	mov	r1, r0
 8007a1a:	3b30      	subs	r3, #48	@ 0x30
 8007a1c:	220a      	movs	r2, #10
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7ff ff8c 	bl	800793c <__multadd>
 8007a24:	45a0      	cmp	r8, r4
 8007a26:	d1f5      	bne.n	8007a14 <__s2b+0x4c>
 8007a28:	f1a5 0408 	sub.w	r4, r5, #8
 8007a2c:	444c      	add	r4, r9
 8007a2e:	1b2d      	subs	r5, r5, r4
 8007a30:	1963      	adds	r3, r4, r5
 8007a32:	42bb      	cmp	r3, r7
 8007a34:	db04      	blt.n	8007a40 <__s2b+0x78>
 8007a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3a:	340a      	adds	r4, #10
 8007a3c:	2509      	movs	r5, #9
 8007a3e:	e7f6      	b.n	8007a2e <__s2b+0x66>
 8007a40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007a44:	4601      	mov	r1, r0
 8007a46:	3b30      	subs	r3, #48	@ 0x30
 8007a48:	220a      	movs	r2, #10
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f7ff ff76 	bl	800793c <__multadd>
 8007a50:	e7ee      	b.n	8007a30 <__s2b+0x68>
 8007a52:	bf00      	nop
 8007a54:	0800a893 	.word	0x0800a893
 8007a58:	0800a8a4 	.word	0x0800a8a4

08007a5c <__hi0bits>:
 8007a5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a60:	4603      	mov	r3, r0
 8007a62:	bf36      	itet	cc
 8007a64:	0403      	lslcc	r3, r0, #16
 8007a66:	2000      	movcs	r0, #0
 8007a68:	2010      	movcc	r0, #16
 8007a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a6e:	bf3c      	itt	cc
 8007a70:	021b      	lslcc	r3, r3, #8
 8007a72:	3008      	addcc	r0, #8
 8007a74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a78:	bf3c      	itt	cc
 8007a7a:	011b      	lslcc	r3, r3, #4
 8007a7c:	3004      	addcc	r0, #4
 8007a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a82:	bf3c      	itt	cc
 8007a84:	009b      	lslcc	r3, r3, #2
 8007a86:	3002      	addcc	r0, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	db05      	blt.n	8007a98 <__hi0bits+0x3c>
 8007a8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a90:	f100 0001 	add.w	r0, r0, #1
 8007a94:	bf08      	it	eq
 8007a96:	2020      	moveq	r0, #32
 8007a98:	4770      	bx	lr

08007a9a <__lo0bits>:
 8007a9a:	6803      	ldr	r3, [r0, #0]
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	f013 0007 	ands.w	r0, r3, #7
 8007aa2:	d00b      	beq.n	8007abc <__lo0bits+0x22>
 8007aa4:	07d9      	lsls	r1, r3, #31
 8007aa6:	d421      	bmi.n	8007aec <__lo0bits+0x52>
 8007aa8:	0798      	lsls	r0, r3, #30
 8007aaa:	bf49      	itett	mi
 8007aac:	085b      	lsrmi	r3, r3, #1
 8007aae:	089b      	lsrpl	r3, r3, #2
 8007ab0:	2001      	movmi	r0, #1
 8007ab2:	6013      	strmi	r3, [r2, #0]
 8007ab4:	bf5c      	itt	pl
 8007ab6:	6013      	strpl	r3, [r2, #0]
 8007ab8:	2002      	movpl	r0, #2
 8007aba:	4770      	bx	lr
 8007abc:	b299      	uxth	r1, r3
 8007abe:	b909      	cbnz	r1, 8007ac4 <__lo0bits+0x2a>
 8007ac0:	0c1b      	lsrs	r3, r3, #16
 8007ac2:	2010      	movs	r0, #16
 8007ac4:	b2d9      	uxtb	r1, r3
 8007ac6:	b909      	cbnz	r1, 8007acc <__lo0bits+0x32>
 8007ac8:	3008      	adds	r0, #8
 8007aca:	0a1b      	lsrs	r3, r3, #8
 8007acc:	0719      	lsls	r1, r3, #28
 8007ace:	bf04      	itt	eq
 8007ad0:	091b      	lsreq	r3, r3, #4
 8007ad2:	3004      	addeq	r0, #4
 8007ad4:	0799      	lsls	r1, r3, #30
 8007ad6:	bf04      	itt	eq
 8007ad8:	089b      	lsreq	r3, r3, #2
 8007ada:	3002      	addeq	r0, #2
 8007adc:	07d9      	lsls	r1, r3, #31
 8007ade:	d403      	bmi.n	8007ae8 <__lo0bits+0x4e>
 8007ae0:	085b      	lsrs	r3, r3, #1
 8007ae2:	f100 0001 	add.w	r0, r0, #1
 8007ae6:	d003      	beq.n	8007af0 <__lo0bits+0x56>
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	4770      	bx	lr
 8007aec:	2000      	movs	r0, #0
 8007aee:	4770      	bx	lr
 8007af0:	2020      	movs	r0, #32
 8007af2:	4770      	bx	lr

08007af4 <__i2b>:
 8007af4:	b510      	push	{r4, lr}
 8007af6:	460c      	mov	r4, r1
 8007af8:	2101      	movs	r1, #1
 8007afa:	f7ff febd 	bl	8007878 <_Balloc>
 8007afe:	4602      	mov	r2, r0
 8007b00:	b928      	cbnz	r0, 8007b0e <__i2b+0x1a>
 8007b02:	4b05      	ldr	r3, [pc, #20]	@ (8007b18 <__i2b+0x24>)
 8007b04:	4805      	ldr	r0, [pc, #20]	@ (8007b1c <__i2b+0x28>)
 8007b06:	f240 1145 	movw	r1, #325	@ 0x145
 8007b0a:	f002 f995 	bl	8009e38 <__assert_func>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	6144      	str	r4, [r0, #20]
 8007b12:	6103      	str	r3, [r0, #16]
 8007b14:	bd10      	pop	{r4, pc}
 8007b16:	bf00      	nop
 8007b18:	0800a893 	.word	0x0800a893
 8007b1c:	0800a8a4 	.word	0x0800a8a4

08007b20 <__multiply>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	4614      	mov	r4, r2
 8007b26:	690a      	ldr	r2, [r1, #16]
 8007b28:	6923      	ldr	r3, [r4, #16]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	bfa8      	it	ge
 8007b2e:	4623      	movge	r3, r4
 8007b30:	460f      	mov	r7, r1
 8007b32:	bfa4      	itt	ge
 8007b34:	460c      	movge	r4, r1
 8007b36:	461f      	movge	r7, r3
 8007b38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007b3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007b40:	68a3      	ldr	r3, [r4, #8]
 8007b42:	6861      	ldr	r1, [r4, #4]
 8007b44:	eb0a 0609 	add.w	r6, sl, r9
 8007b48:	42b3      	cmp	r3, r6
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	bfb8      	it	lt
 8007b4e:	3101      	addlt	r1, #1
 8007b50:	f7ff fe92 	bl	8007878 <_Balloc>
 8007b54:	b930      	cbnz	r0, 8007b64 <__multiply+0x44>
 8007b56:	4602      	mov	r2, r0
 8007b58:	4b44      	ldr	r3, [pc, #272]	@ (8007c6c <__multiply+0x14c>)
 8007b5a:	4845      	ldr	r0, [pc, #276]	@ (8007c70 <__multiply+0x150>)
 8007b5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b60:	f002 f96a 	bl	8009e38 <__assert_func>
 8007b64:	f100 0514 	add.w	r5, r0, #20
 8007b68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4543      	cmp	r3, r8
 8007b72:	d321      	bcc.n	8007bb8 <__multiply+0x98>
 8007b74:	f107 0114 	add.w	r1, r7, #20
 8007b78:	f104 0214 	add.w	r2, r4, #20
 8007b7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b84:	9302      	str	r3, [sp, #8]
 8007b86:	1b13      	subs	r3, r2, r4
 8007b88:	3b15      	subs	r3, #21
 8007b8a:	f023 0303 	bic.w	r3, r3, #3
 8007b8e:	3304      	adds	r3, #4
 8007b90:	f104 0715 	add.w	r7, r4, #21
 8007b94:	42ba      	cmp	r2, r7
 8007b96:	bf38      	it	cc
 8007b98:	2304      	movcc	r3, #4
 8007b9a:	9301      	str	r3, [sp, #4]
 8007b9c:	9b02      	ldr	r3, [sp, #8]
 8007b9e:	9103      	str	r1, [sp, #12]
 8007ba0:	428b      	cmp	r3, r1
 8007ba2:	d80c      	bhi.n	8007bbe <__multiply+0x9e>
 8007ba4:	2e00      	cmp	r6, #0
 8007ba6:	dd03      	ble.n	8007bb0 <__multiply+0x90>
 8007ba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d05b      	beq.n	8007c68 <__multiply+0x148>
 8007bb0:	6106      	str	r6, [r0, #16]
 8007bb2:	b005      	add	sp, #20
 8007bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb8:	f843 2b04 	str.w	r2, [r3], #4
 8007bbc:	e7d8      	b.n	8007b70 <__multiply+0x50>
 8007bbe:	f8b1 a000 	ldrh.w	sl, [r1]
 8007bc2:	f1ba 0f00 	cmp.w	sl, #0
 8007bc6:	d024      	beq.n	8007c12 <__multiply+0xf2>
 8007bc8:	f104 0e14 	add.w	lr, r4, #20
 8007bcc:	46a9      	mov	r9, r5
 8007bce:	f04f 0c00 	mov.w	ip, #0
 8007bd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007bd6:	f8d9 3000 	ldr.w	r3, [r9]
 8007bda:	fa1f fb87 	uxth.w	fp, r7
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007be4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007be8:	f8d9 7000 	ldr.w	r7, [r9]
 8007bec:	4463      	add	r3, ip
 8007bee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007bf2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007bf6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c00:	4572      	cmp	r2, lr
 8007c02:	f849 3b04 	str.w	r3, [r9], #4
 8007c06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c0a:	d8e2      	bhi.n	8007bd2 <__multiply+0xb2>
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	f845 c003 	str.w	ip, [r5, r3]
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007c18:	3104      	adds	r1, #4
 8007c1a:	f1b9 0f00 	cmp.w	r9, #0
 8007c1e:	d021      	beq.n	8007c64 <__multiply+0x144>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	f104 0c14 	add.w	ip, r4, #20
 8007c26:	46ae      	mov	lr, r5
 8007c28:	f04f 0a00 	mov.w	sl, #0
 8007c2c:	f8bc b000 	ldrh.w	fp, [ip]
 8007c30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007c34:	fb09 770b 	mla	r7, r9, fp, r7
 8007c38:	4457      	add	r7, sl
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007c40:	f84e 3b04 	str.w	r3, [lr], #4
 8007c44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c4c:	f8be 3000 	ldrh.w	r3, [lr]
 8007c50:	fb09 330a 	mla	r3, r9, sl, r3
 8007c54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007c58:	4562      	cmp	r2, ip
 8007c5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c5e:	d8e5      	bhi.n	8007c2c <__multiply+0x10c>
 8007c60:	9f01      	ldr	r7, [sp, #4]
 8007c62:	51eb      	str	r3, [r5, r7]
 8007c64:	3504      	adds	r5, #4
 8007c66:	e799      	b.n	8007b9c <__multiply+0x7c>
 8007c68:	3e01      	subs	r6, #1
 8007c6a:	e79b      	b.n	8007ba4 <__multiply+0x84>
 8007c6c:	0800a893 	.word	0x0800a893
 8007c70:	0800a8a4 	.word	0x0800a8a4

08007c74 <__pow5mult>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	4615      	mov	r5, r2
 8007c7a:	f012 0203 	ands.w	r2, r2, #3
 8007c7e:	4607      	mov	r7, r0
 8007c80:	460e      	mov	r6, r1
 8007c82:	d007      	beq.n	8007c94 <__pow5mult+0x20>
 8007c84:	4c25      	ldr	r4, [pc, #148]	@ (8007d1c <__pow5mult+0xa8>)
 8007c86:	3a01      	subs	r2, #1
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c8e:	f7ff fe55 	bl	800793c <__multadd>
 8007c92:	4606      	mov	r6, r0
 8007c94:	10ad      	asrs	r5, r5, #2
 8007c96:	d03d      	beq.n	8007d14 <__pow5mult+0xa0>
 8007c98:	69fc      	ldr	r4, [r7, #28]
 8007c9a:	b97c      	cbnz	r4, 8007cbc <__pow5mult+0x48>
 8007c9c:	2010      	movs	r0, #16
 8007c9e:	f7ff fd35 	bl	800770c <malloc>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	61f8      	str	r0, [r7, #28]
 8007ca6:	b928      	cbnz	r0, 8007cb4 <__pow5mult+0x40>
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8007d20 <__pow5mult+0xac>)
 8007caa:	481e      	ldr	r0, [pc, #120]	@ (8007d24 <__pow5mult+0xb0>)
 8007cac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007cb0:	f002 f8c2 	bl	8009e38 <__assert_func>
 8007cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cb8:	6004      	str	r4, [r0, #0]
 8007cba:	60c4      	str	r4, [r0, #12]
 8007cbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cc4:	b94c      	cbnz	r4, 8007cda <__pow5mult+0x66>
 8007cc6:	f240 2171 	movw	r1, #625	@ 0x271
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f7ff ff12 	bl	8007af4 <__i2b>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	6003      	str	r3, [r0, #0]
 8007cda:	f04f 0900 	mov.w	r9, #0
 8007cde:	07eb      	lsls	r3, r5, #31
 8007ce0:	d50a      	bpl.n	8007cf8 <__pow5mult+0x84>
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ff1a 	bl	8007b20 <__multiply>
 8007cec:	4631      	mov	r1, r6
 8007cee:	4680      	mov	r8, r0
 8007cf0:	4638      	mov	r0, r7
 8007cf2:	f7ff fe01 	bl	80078f8 <_Bfree>
 8007cf6:	4646      	mov	r6, r8
 8007cf8:	106d      	asrs	r5, r5, #1
 8007cfa:	d00b      	beq.n	8007d14 <__pow5mult+0xa0>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	b938      	cbnz	r0, 8007d10 <__pow5mult+0x9c>
 8007d00:	4622      	mov	r2, r4
 8007d02:	4621      	mov	r1, r4
 8007d04:	4638      	mov	r0, r7
 8007d06:	f7ff ff0b 	bl	8007b20 <__multiply>
 8007d0a:	6020      	str	r0, [r4, #0]
 8007d0c:	f8c0 9000 	str.w	r9, [r0]
 8007d10:	4604      	mov	r4, r0
 8007d12:	e7e4      	b.n	8007cde <__pow5mult+0x6a>
 8007d14:	4630      	mov	r0, r6
 8007d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1a:	bf00      	nop
 8007d1c:	0800a900 	.word	0x0800a900
 8007d20:	0800a824 	.word	0x0800a824
 8007d24:	0800a8a4 	.word	0x0800a8a4

08007d28 <__lshift>:
 8007d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	6849      	ldr	r1, [r1, #4]
 8007d30:	6923      	ldr	r3, [r4, #16]
 8007d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	4607      	mov	r7, r0
 8007d3a:	4691      	mov	r9, r2
 8007d3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d40:	f108 0601 	add.w	r6, r8, #1
 8007d44:	42b3      	cmp	r3, r6
 8007d46:	db0b      	blt.n	8007d60 <__lshift+0x38>
 8007d48:	4638      	mov	r0, r7
 8007d4a:	f7ff fd95 	bl	8007878 <_Balloc>
 8007d4e:	4605      	mov	r5, r0
 8007d50:	b948      	cbnz	r0, 8007d66 <__lshift+0x3e>
 8007d52:	4602      	mov	r2, r0
 8007d54:	4b28      	ldr	r3, [pc, #160]	@ (8007df8 <__lshift+0xd0>)
 8007d56:	4829      	ldr	r0, [pc, #164]	@ (8007dfc <__lshift+0xd4>)
 8007d58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d5c:	f002 f86c 	bl	8009e38 <__assert_func>
 8007d60:	3101      	adds	r1, #1
 8007d62:	005b      	lsls	r3, r3, #1
 8007d64:	e7ee      	b.n	8007d44 <__lshift+0x1c>
 8007d66:	2300      	movs	r3, #0
 8007d68:	f100 0114 	add.w	r1, r0, #20
 8007d6c:	f100 0210 	add.w	r2, r0, #16
 8007d70:	4618      	mov	r0, r3
 8007d72:	4553      	cmp	r3, sl
 8007d74:	db33      	blt.n	8007dde <__lshift+0xb6>
 8007d76:	6920      	ldr	r0, [r4, #16]
 8007d78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d7c:	f104 0314 	add.w	r3, r4, #20
 8007d80:	f019 091f 	ands.w	r9, r9, #31
 8007d84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d8c:	d02b      	beq.n	8007de6 <__lshift+0xbe>
 8007d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d92:	468a      	mov	sl, r1
 8007d94:	2200      	movs	r2, #0
 8007d96:	6818      	ldr	r0, [r3, #0]
 8007d98:	fa00 f009 	lsl.w	r0, r0, r9
 8007d9c:	4310      	orrs	r0, r2
 8007d9e:	f84a 0b04 	str.w	r0, [sl], #4
 8007da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da6:	459c      	cmp	ip, r3
 8007da8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007dac:	d8f3      	bhi.n	8007d96 <__lshift+0x6e>
 8007dae:	ebac 0304 	sub.w	r3, ip, r4
 8007db2:	3b15      	subs	r3, #21
 8007db4:	f023 0303 	bic.w	r3, r3, #3
 8007db8:	3304      	adds	r3, #4
 8007dba:	f104 0015 	add.w	r0, r4, #21
 8007dbe:	4584      	cmp	ip, r0
 8007dc0:	bf38      	it	cc
 8007dc2:	2304      	movcc	r3, #4
 8007dc4:	50ca      	str	r2, [r1, r3]
 8007dc6:	b10a      	cbz	r2, 8007dcc <__lshift+0xa4>
 8007dc8:	f108 0602 	add.w	r6, r8, #2
 8007dcc:	3e01      	subs	r6, #1
 8007dce:	4638      	mov	r0, r7
 8007dd0:	612e      	str	r6, [r5, #16]
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	f7ff fd90 	bl	80078f8 <_Bfree>
 8007dd8:	4628      	mov	r0, r5
 8007dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8007de2:	3301      	adds	r3, #1
 8007de4:	e7c5      	b.n	8007d72 <__lshift+0x4a>
 8007de6:	3904      	subs	r1, #4
 8007de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8007df0:	459c      	cmp	ip, r3
 8007df2:	d8f9      	bhi.n	8007de8 <__lshift+0xc0>
 8007df4:	e7ea      	b.n	8007dcc <__lshift+0xa4>
 8007df6:	bf00      	nop
 8007df8:	0800a893 	.word	0x0800a893
 8007dfc:	0800a8a4 	.word	0x0800a8a4

08007e00 <__mcmp>:
 8007e00:	690a      	ldr	r2, [r1, #16]
 8007e02:	4603      	mov	r3, r0
 8007e04:	6900      	ldr	r0, [r0, #16]
 8007e06:	1a80      	subs	r0, r0, r2
 8007e08:	b530      	push	{r4, r5, lr}
 8007e0a:	d10e      	bne.n	8007e2a <__mcmp+0x2a>
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	3114      	adds	r1, #20
 8007e10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e20:	4295      	cmp	r5, r2
 8007e22:	d003      	beq.n	8007e2c <__mcmp+0x2c>
 8007e24:	d205      	bcs.n	8007e32 <__mcmp+0x32>
 8007e26:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2a:	bd30      	pop	{r4, r5, pc}
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	d3f3      	bcc.n	8007e18 <__mcmp+0x18>
 8007e30:	e7fb      	b.n	8007e2a <__mcmp+0x2a>
 8007e32:	2001      	movs	r0, #1
 8007e34:	e7f9      	b.n	8007e2a <__mcmp+0x2a>
	...

08007e38 <__mdiff>:
 8007e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	4689      	mov	r9, r1
 8007e3e:	4606      	mov	r6, r0
 8007e40:	4611      	mov	r1, r2
 8007e42:	4648      	mov	r0, r9
 8007e44:	4614      	mov	r4, r2
 8007e46:	f7ff ffdb 	bl	8007e00 <__mcmp>
 8007e4a:	1e05      	subs	r5, r0, #0
 8007e4c:	d112      	bne.n	8007e74 <__mdiff+0x3c>
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff fd11 	bl	8007878 <_Balloc>
 8007e56:	4602      	mov	r2, r0
 8007e58:	b928      	cbnz	r0, 8007e66 <__mdiff+0x2e>
 8007e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f58 <__mdiff+0x120>)
 8007e5c:	f240 2137 	movw	r1, #567	@ 0x237
 8007e60:	483e      	ldr	r0, [pc, #248]	@ (8007f5c <__mdiff+0x124>)
 8007e62:	f001 ffe9 	bl	8009e38 <__assert_func>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	b003      	add	sp, #12
 8007e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e74:	bfbc      	itt	lt
 8007e76:	464b      	movlt	r3, r9
 8007e78:	46a1      	movlt	r9, r4
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e80:	bfba      	itte	lt
 8007e82:	461c      	movlt	r4, r3
 8007e84:	2501      	movlt	r5, #1
 8007e86:	2500      	movge	r5, #0
 8007e88:	f7ff fcf6 	bl	8007878 <_Balloc>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	b918      	cbnz	r0, 8007e98 <__mdiff+0x60>
 8007e90:	4b31      	ldr	r3, [pc, #196]	@ (8007f58 <__mdiff+0x120>)
 8007e92:	f240 2145 	movw	r1, #581	@ 0x245
 8007e96:	e7e3      	b.n	8007e60 <__mdiff+0x28>
 8007e98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e9c:	6926      	ldr	r6, [r4, #16]
 8007e9e:	60c5      	str	r5, [r0, #12]
 8007ea0:	f109 0310 	add.w	r3, r9, #16
 8007ea4:	f109 0514 	add.w	r5, r9, #20
 8007ea8:	f104 0e14 	add.w	lr, r4, #20
 8007eac:	f100 0b14 	add.w	fp, r0, #20
 8007eb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007eb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007eb8:	9301      	str	r3, [sp, #4]
 8007eba:	46d9      	mov	r9, fp
 8007ebc:	f04f 0c00 	mov.w	ip, #0
 8007ec0:	9b01      	ldr	r3, [sp, #4]
 8007ec2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007ec6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	fa1f f38a 	uxth.w	r3, sl
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	b283      	uxth	r3, r0
 8007ed4:	1acb      	subs	r3, r1, r3
 8007ed6:	0c00      	lsrs	r0, r0, #16
 8007ed8:	4463      	add	r3, ip
 8007eda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007ede:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ee8:	4576      	cmp	r6, lr
 8007eea:	f849 3b04 	str.w	r3, [r9], #4
 8007eee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ef2:	d8e5      	bhi.n	8007ec0 <__mdiff+0x88>
 8007ef4:	1b33      	subs	r3, r6, r4
 8007ef6:	3b15      	subs	r3, #21
 8007ef8:	f023 0303 	bic.w	r3, r3, #3
 8007efc:	3415      	adds	r4, #21
 8007efe:	3304      	adds	r3, #4
 8007f00:	42a6      	cmp	r6, r4
 8007f02:	bf38      	it	cc
 8007f04:	2304      	movcc	r3, #4
 8007f06:	441d      	add	r5, r3
 8007f08:	445b      	add	r3, fp
 8007f0a:	461e      	mov	r6, r3
 8007f0c:	462c      	mov	r4, r5
 8007f0e:	4544      	cmp	r4, r8
 8007f10:	d30e      	bcc.n	8007f30 <__mdiff+0xf8>
 8007f12:	f108 0103 	add.w	r1, r8, #3
 8007f16:	1b49      	subs	r1, r1, r5
 8007f18:	f021 0103 	bic.w	r1, r1, #3
 8007f1c:	3d03      	subs	r5, #3
 8007f1e:	45a8      	cmp	r8, r5
 8007f20:	bf38      	it	cc
 8007f22:	2100      	movcc	r1, #0
 8007f24:	440b      	add	r3, r1
 8007f26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f2a:	b191      	cbz	r1, 8007f52 <__mdiff+0x11a>
 8007f2c:	6117      	str	r7, [r2, #16]
 8007f2e:	e79d      	b.n	8007e6c <__mdiff+0x34>
 8007f30:	f854 1b04 	ldr.w	r1, [r4], #4
 8007f34:	46e6      	mov	lr, ip
 8007f36:	0c08      	lsrs	r0, r1, #16
 8007f38:	fa1c fc81 	uxtah	ip, ip, r1
 8007f3c:	4471      	add	r1, lr
 8007f3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007f42:	b289      	uxth	r1, r1
 8007f44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007f48:	f846 1b04 	str.w	r1, [r6], #4
 8007f4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f50:	e7dd      	b.n	8007f0e <__mdiff+0xd6>
 8007f52:	3f01      	subs	r7, #1
 8007f54:	e7e7      	b.n	8007f26 <__mdiff+0xee>
 8007f56:	bf00      	nop
 8007f58:	0800a893 	.word	0x0800a893
 8007f5c:	0800a8a4 	.word	0x0800a8a4

08007f60 <__ulp>:
 8007f60:	b082      	sub	sp, #8
 8007f62:	ed8d 0b00 	vstr	d0, [sp]
 8007f66:	9a01      	ldr	r2, [sp, #4]
 8007f68:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa8 <__ulp+0x48>)
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	dc08      	bgt.n	8007f86 <__ulp+0x26>
 8007f74:	425b      	negs	r3, r3
 8007f76:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007f7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007f7e:	da04      	bge.n	8007f8a <__ulp+0x2a>
 8007f80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007f84:	4113      	asrs	r3, r2
 8007f86:	2200      	movs	r2, #0
 8007f88:	e008      	b.n	8007f9c <__ulp+0x3c>
 8007f8a:	f1a2 0314 	sub.w	r3, r2, #20
 8007f8e:	2b1e      	cmp	r3, #30
 8007f90:	bfda      	itte	le
 8007f92:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007f96:	40da      	lsrle	r2, r3
 8007f98:	2201      	movgt	r2, #1
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	ec41 0b10 	vmov	d0, r0, r1
 8007fa4:	b002      	add	sp, #8
 8007fa6:	4770      	bx	lr
 8007fa8:	7ff00000 	.word	0x7ff00000

08007fac <__b2d>:
 8007fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb0:	6906      	ldr	r6, [r0, #16]
 8007fb2:	f100 0814 	add.w	r8, r0, #20
 8007fb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007fba:	1f37      	subs	r7, r6, #4
 8007fbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	f7ff fd4b 	bl	8007a5c <__hi0bits>
 8007fc6:	f1c0 0320 	rsb	r3, r0, #32
 8007fca:	280a      	cmp	r0, #10
 8007fcc:	600b      	str	r3, [r1, #0]
 8007fce:	491b      	ldr	r1, [pc, #108]	@ (800803c <__b2d+0x90>)
 8007fd0:	dc15      	bgt.n	8007ffe <__b2d+0x52>
 8007fd2:	f1c0 0c0b 	rsb	ip, r0, #11
 8007fd6:	fa22 f30c 	lsr.w	r3, r2, ip
 8007fda:	45b8      	cmp	r8, r7
 8007fdc:	ea43 0501 	orr.w	r5, r3, r1
 8007fe0:	bf34      	ite	cc
 8007fe2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007fe6:	2300      	movcs	r3, #0
 8007fe8:	3015      	adds	r0, #21
 8007fea:	fa02 f000 	lsl.w	r0, r2, r0
 8007fee:	fa23 f30c 	lsr.w	r3, r3, ip
 8007ff2:	4303      	orrs	r3, r0
 8007ff4:	461c      	mov	r4, r3
 8007ff6:	ec45 4b10 	vmov	d0, r4, r5
 8007ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ffe:	45b8      	cmp	r8, r7
 8008000:	bf3a      	itte	cc
 8008002:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008006:	f1a6 0708 	subcc.w	r7, r6, #8
 800800a:	2300      	movcs	r3, #0
 800800c:	380b      	subs	r0, #11
 800800e:	d012      	beq.n	8008036 <__b2d+0x8a>
 8008010:	f1c0 0120 	rsb	r1, r0, #32
 8008014:	fa23 f401 	lsr.w	r4, r3, r1
 8008018:	4082      	lsls	r2, r0
 800801a:	4322      	orrs	r2, r4
 800801c:	4547      	cmp	r7, r8
 800801e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008022:	bf8c      	ite	hi
 8008024:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008028:	2200      	movls	r2, #0
 800802a:	4083      	lsls	r3, r0
 800802c:	40ca      	lsrs	r2, r1
 800802e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008032:	4313      	orrs	r3, r2
 8008034:	e7de      	b.n	8007ff4 <__b2d+0x48>
 8008036:	ea42 0501 	orr.w	r5, r2, r1
 800803a:	e7db      	b.n	8007ff4 <__b2d+0x48>
 800803c:	3ff00000 	.word	0x3ff00000

08008040 <__d2b>:
 8008040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008044:	460f      	mov	r7, r1
 8008046:	2101      	movs	r1, #1
 8008048:	ec59 8b10 	vmov	r8, r9, d0
 800804c:	4616      	mov	r6, r2
 800804e:	f7ff fc13 	bl	8007878 <_Balloc>
 8008052:	4604      	mov	r4, r0
 8008054:	b930      	cbnz	r0, 8008064 <__d2b+0x24>
 8008056:	4602      	mov	r2, r0
 8008058:	4b23      	ldr	r3, [pc, #140]	@ (80080e8 <__d2b+0xa8>)
 800805a:	4824      	ldr	r0, [pc, #144]	@ (80080ec <__d2b+0xac>)
 800805c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008060:	f001 feea 	bl	8009e38 <__assert_func>
 8008064:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800806c:	b10d      	cbz	r5, 8008072 <__d2b+0x32>
 800806e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f1b8 0300 	subs.w	r3, r8, #0
 8008078:	d023      	beq.n	80080c2 <__d2b+0x82>
 800807a:	4668      	mov	r0, sp
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	f7ff fd0c 	bl	8007a9a <__lo0bits>
 8008082:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008086:	b1d0      	cbz	r0, 80080be <__d2b+0x7e>
 8008088:	f1c0 0320 	rsb	r3, r0, #32
 800808c:	fa02 f303 	lsl.w	r3, r2, r3
 8008090:	430b      	orrs	r3, r1
 8008092:	40c2      	lsrs	r2, r0
 8008094:	6163      	str	r3, [r4, #20]
 8008096:	9201      	str	r2, [sp, #4]
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	61a3      	str	r3, [r4, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	bf0c      	ite	eq
 80080a0:	2201      	moveq	r2, #1
 80080a2:	2202      	movne	r2, #2
 80080a4:	6122      	str	r2, [r4, #16]
 80080a6:	b1a5      	cbz	r5, 80080d2 <__d2b+0x92>
 80080a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80080ac:	4405      	add	r5, r0
 80080ae:	603d      	str	r5, [r7, #0]
 80080b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80080b4:	6030      	str	r0, [r6, #0]
 80080b6:	4620      	mov	r0, r4
 80080b8:	b003      	add	sp, #12
 80080ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080be:	6161      	str	r1, [r4, #20]
 80080c0:	e7ea      	b.n	8008098 <__d2b+0x58>
 80080c2:	a801      	add	r0, sp, #4
 80080c4:	f7ff fce9 	bl	8007a9a <__lo0bits>
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	6163      	str	r3, [r4, #20]
 80080cc:	3020      	adds	r0, #32
 80080ce:	2201      	movs	r2, #1
 80080d0:	e7e8      	b.n	80080a4 <__d2b+0x64>
 80080d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080da:	6038      	str	r0, [r7, #0]
 80080dc:	6918      	ldr	r0, [r3, #16]
 80080de:	f7ff fcbd 	bl	8007a5c <__hi0bits>
 80080e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080e6:	e7e5      	b.n	80080b4 <__d2b+0x74>
 80080e8:	0800a893 	.word	0x0800a893
 80080ec:	0800a8a4 	.word	0x0800a8a4

080080f0 <__ratio>:
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	b085      	sub	sp, #20
 80080f6:	e9cd 1000 	strd	r1, r0, [sp]
 80080fa:	a902      	add	r1, sp, #8
 80080fc:	f7ff ff56 	bl	8007fac <__b2d>
 8008100:	9800      	ldr	r0, [sp, #0]
 8008102:	a903      	add	r1, sp, #12
 8008104:	ec55 4b10 	vmov	r4, r5, d0
 8008108:	f7ff ff50 	bl	8007fac <__b2d>
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	6919      	ldr	r1, [r3, #16]
 8008110:	9b00      	ldr	r3, [sp, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	1ac9      	subs	r1, r1, r3
 8008116:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800811a:	1a9b      	subs	r3, r3, r2
 800811c:	ec5b ab10 	vmov	sl, fp, d0
 8008120:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008124:	2b00      	cmp	r3, #0
 8008126:	bfce      	itee	gt
 8008128:	462a      	movgt	r2, r5
 800812a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800812e:	465a      	movle	r2, fp
 8008130:	462f      	mov	r7, r5
 8008132:	46d9      	mov	r9, fp
 8008134:	bfcc      	ite	gt
 8008136:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800813a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800813e:	464b      	mov	r3, r9
 8008140:	4652      	mov	r2, sl
 8008142:	4620      	mov	r0, r4
 8008144:	4639      	mov	r1, r7
 8008146:	f7f8 fb89 	bl	800085c <__aeabi_ddiv>
 800814a:	ec41 0b10 	vmov	d0, r0, r1
 800814e:	b005      	add	sp, #20
 8008150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008154 <__copybits>:
 8008154:	3901      	subs	r1, #1
 8008156:	b570      	push	{r4, r5, r6, lr}
 8008158:	1149      	asrs	r1, r1, #5
 800815a:	6914      	ldr	r4, [r2, #16]
 800815c:	3101      	adds	r1, #1
 800815e:	f102 0314 	add.w	r3, r2, #20
 8008162:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800816a:	1f05      	subs	r5, r0, #4
 800816c:	42a3      	cmp	r3, r4
 800816e:	d30c      	bcc.n	800818a <__copybits+0x36>
 8008170:	1aa3      	subs	r3, r4, r2
 8008172:	3b11      	subs	r3, #17
 8008174:	f023 0303 	bic.w	r3, r3, #3
 8008178:	3211      	adds	r2, #17
 800817a:	42a2      	cmp	r2, r4
 800817c:	bf88      	it	hi
 800817e:	2300      	movhi	r3, #0
 8008180:	4418      	add	r0, r3
 8008182:	2300      	movs	r3, #0
 8008184:	4288      	cmp	r0, r1
 8008186:	d305      	bcc.n	8008194 <__copybits+0x40>
 8008188:	bd70      	pop	{r4, r5, r6, pc}
 800818a:	f853 6b04 	ldr.w	r6, [r3], #4
 800818e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008192:	e7eb      	b.n	800816c <__copybits+0x18>
 8008194:	f840 3b04 	str.w	r3, [r0], #4
 8008198:	e7f4      	b.n	8008184 <__copybits+0x30>

0800819a <__any_on>:
 800819a:	f100 0214 	add.w	r2, r0, #20
 800819e:	6900      	ldr	r0, [r0, #16]
 80081a0:	114b      	asrs	r3, r1, #5
 80081a2:	4298      	cmp	r0, r3
 80081a4:	b510      	push	{r4, lr}
 80081a6:	db11      	blt.n	80081cc <__any_on+0x32>
 80081a8:	dd0a      	ble.n	80081c0 <__any_on+0x26>
 80081aa:	f011 011f 	ands.w	r1, r1, #31
 80081ae:	d007      	beq.n	80081c0 <__any_on+0x26>
 80081b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80081b4:	fa24 f001 	lsr.w	r0, r4, r1
 80081b8:	fa00 f101 	lsl.w	r1, r0, r1
 80081bc:	428c      	cmp	r4, r1
 80081be:	d10b      	bne.n	80081d8 <__any_on+0x3e>
 80081c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d803      	bhi.n	80081d0 <__any_on+0x36>
 80081c8:	2000      	movs	r0, #0
 80081ca:	bd10      	pop	{r4, pc}
 80081cc:	4603      	mov	r3, r0
 80081ce:	e7f7      	b.n	80081c0 <__any_on+0x26>
 80081d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d0f5      	beq.n	80081c4 <__any_on+0x2a>
 80081d8:	2001      	movs	r0, #1
 80081da:	e7f6      	b.n	80081ca <__any_on+0x30>

080081dc <sulp>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	4604      	mov	r4, r0
 80081e0:	460d      	mov	r5, r1
 80081e2:	ec45 4b10 	vmov	d0, r4, r5
 80081e6:	4616      	mov	r6, r2
 80081e8:	f7ff feba 	bl	8007f60 <__ulp>
 80081ec:	ec51 0b10 	vmov	r0, r1, d0
 80081f0:	b17e      	cbz	r6, 8008212 <sulp+0x36>
 80081f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dd09      	ble.n	8008212 <sulp+0x36>
 80081fe:	051b      	lsls	r3, r3, #20
 8008200:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008204:	2400      	movs	r4, #0
 8008206:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800820a:	4622      	mov	r2, r4
 800820c:	462b      	mov	r3, r5
 800820e:	f7f8 f9fb 	bl	8000608 <__aeabi_dmul>
 8008212:	ec41 0b10 	vmov	d0, r0, r1
 8008216:	bd70      	pop	{r4, r5, r6, pc}

08008218 <_strtod_l>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	b09f      	sub	sp, #124	@ 0x7c
 800821e:	460c      	mov	r4, r1
 8008220:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008222:	2200      	movs	r2, #0
 8008224:	921a      	str	r2, [sp, #104]	@ 0x68
 8008226:	9005      	str	r0, [sp, #20]
 8008228:	f04f 0a00 	mov.w	sl, #0
 800822c:	f04f 0b00 	mov.w	fp, #0
 8008230:	460a      	mov	r2, r1
 8008232:	9219      	str	r2, [sp, #100]	@ 0x64
 8008234:	7811      	ldrb	r1, [r2, #0]
 8008236:	292b      	cmp	r1, #43	@ 0x2b
 8008238:	d04a      	beq.n	80082d0 <_strtod_l+0xb8>
 800823a:	d838      	bhi.n	80082ae <_strtod_l+0x96>
 800823c:	290d      	cmp	r1, #13
 800823e:	d832      	bhi.n	80082a6 <_strtod_l+0x8e>
 8008240:	2908      	cmp	r1, #8
 8008242:	d832      	bhi.n	80082aa <_strtod_l+0x92>
 8008244:	2900      	cmp	r1, #0
 8008246:	d03b      	beq.n	80082c0 <_strtod_l+0xa8>
 8008248:	2200      	movs	r2, #0
 800824a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800824c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800824e:	782a      	ldrb	r2, [r5, #0]
 8008250:	2a30      	cmp	r2, #48	@ 0x30
 8008252:	f040 80b3 	bne.w	80083bc <_strtod_l+0x1a4>
 8008256:	786a      	ldrb	r2, [r5, #1]
 8008258:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800825c:	2a58      	cmp	r2, #88	@ 0x58
 800825e:	d16e      	bne.n	800833e <_strtod_l+0x126>
 8008260:	9302      	str	r3, [sp, #8]
 8008262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	ab1a      	add	r3, sp, #104	@ 0x68
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	4a8e      	ldr	r2, [pc, #568]	@ (80084a4 <_strtod_l+0x28c>)
 800826c:	9805      	ldr	r0, [sp, #20]
 800826e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008270:	a919      	add	r1, sp, #100	@ 0x64
 8008272:	f001 fe7b 	bl	8009f6c <__gethex>
 8008276:	f010 060f 	ands.w	r6, r0, #15
 800827a:	4604      	mov	r4, r0
 800827c:	d005      	beq.n	800828a <_strtod_l+0x72>
 800827e:	2e06      	cmp	r6, #6
 8008280:	d128      	bne.n	80082d4 <_strtod_l+0xbc>
 8008282:	3501      	adds	r5, #1
 8008284:	2300      	movs	r3, #0
 8008286:	9519      	str	r5, [sp, #100]	@ 0x64
 8008288:	930b      	str	r3, [sp, #44]	@ 0x2c
 800828a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 858e 	bne.w	8008dae <_strtod_l+0xb96>
 8008292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008294:	b1cb      	cbz	r3, 80082ca <_strtod_l+0xb2>
 8008296:	4652      	mov	r2, sl
 8008298:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800829c:	ec43 2b10 	vmov	d0, r2, r3
 80082a0:	b01f      	add	sp, #124	@ 0x7c
 80082a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a6:	2920      	cmp	r1, #32
 80082a8:	d1ce      	bne.n	8008248 <_strtod_l+0x30>
 80082aa:	3201      	adds	r2, #1
 80082ac:	e7c1      	b.n	8008232 <_strtod_l+0x1a>
 80082ae:	292d      	cmp	r1, #45	@ 0x2d
 80082b0:	d1ca      	bne.n	8008248 <_strtod_l+0x30>
 80082b2:	2101      	movs	r1, #1
 80082b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80082b6:	1c51      	adds	r1, r2, #1
 80082b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80082ba:	7852      	ldrb	r2, [r2, #1]
 80082bc:	2a00      	cmp	r2, #0
 80082be:	d1c5      	bne.n	800824c <_strtod_l+0x34>
 80082c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80082c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f040 8570 	bne.w	8008daa <_strtod_l+0xb92>
 80082ca:	4652      	mov	r2, sl
 80082cc:	465b      	mov	r3, fp
 80082ce:	e7e5      	b.n	800829c <_strtod_l+0x84>
 80082d0:	2100      	movs	r1, #0
 80082d2:	e7ef      	b.n	80082b4 <_strtod_l+0x9c>
 80082d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082d6:	b13a      	cbz	r2, 80082e8 <_strtod_l+0xd0>
 80082d8:	2135      	movs	r1, #53	@ 0x35
 80082da:	a81c      	add	r0, sp, #112	@ 0x70
 80082dc:	f7ff ff3a 	bl	8008154 <__copybits>
 80082e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082e2:	9805      	ldr	r0, [sp, #20]
 80082e4:	f7ff fb08 	bl	80078f8 <_Bfree>
 80082e8:	3e01      	subs	r6, #1
 80082ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80082ec:	2e04      	cmp	r6, #4
 80082ee:	d806      	bhi.n	80082fe <_strtod_l+0xe6>
 80082f0:	e8df f006 	tbb	[pc, r6]
 80082f4:	201d0314 	.word	0x201d0314
 80082f8:	14          	.byte	0x14
 80082f9:	00          	.byte	0x00
 80082fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082fe:	05e1      	lsls	r1, r4, #23
 8008300:	bf48      	it	mi
 8008302:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800830a:	0d1b      	lsrs	r3, r3, #20
 800830c:	051b      	lsls	r3, r3, #20
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1bb      	bne.n	800828a <_strtod_l+0x72>
 8008312:	f7fe fb2f 	bl	8006974 <__errno>
 8008316:	2322      	movs	r3, #34	@ 0x22
 8008318:	6003      	str	r3, [r0, #0]
 800831a:	e7b6      	b.n	800828a <_strtod_l+0x72>
 800831c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008320:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008324:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008328:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800832c:	e7e7      	b.n	80082fe <_strtod_l+0xe6>
 800832e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80084ac <_strtod_l+0x294>
 8008332:	e7e4      	b.n	80082fe <_strtod_l+0xe6>
 8008334:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008338:	f04f 3aff 	mov.w	sl, #4294967295
 800833c:	e7df      	b.n	80082fe <_strtod_l+0xe6>
 800833e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	9219      	str	r2, [sp, #100]	@ 0x64
 8008344:	785b      	ldrb	r3, [r3, #1]
 8008346:	2b30      	cmp	r3, #48	@ 0x30
 8008348:	d0f9      	beq.n	800833e <_strtod_l+0x126>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d09d      	beq.n	800828a <_strtod_l+0x72>
 800834e:	2301      	movs	r3, #1
 8008350:	9309      	str	r3, [sp, #36]	@ 0x24
 8008352:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008354:	930c      	str	r3, [sp, #48]	@ 0x30
 8008356:	2300      	movs	r3, #0
 8008358:	9308      	str	r3, [sp, #32]
 800835a:	930a      	str	r3, [sp, #40]	@ 0x28
 800835c:	461f      	mov	r7, r3
 800835e:	220a      	movs	r2, #10
 8008360:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008362:	7805      	ldrb	r5, [r0, #0]
 8008364:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008368:	b2d9      	uxtb	r1, r3
 800836a:	2909      	cmp	r1, #9
 800836c:	d928      	bls.n	80083c0 <_strtod_l+0x1a8>
 800836e:	494e      	ldr	r1, [pc, #312]	@ (80084a8 <_strtod_l+0x290>)
 8008370:	2201      	movs	r2, #1
 8008372:	f001 fd06 	bl	8009d82 <strncmp>
 8008376:	2800      	cmp	r0, #0
 8008378:	d032      	beq.n	80083e0 <_strtod_l+0x1c8>
 800837a:	2000      	movs	r0, #0
 800837c:	462a      	mov	r2, r5
 800837e:	4681      	mov	r9, r0
 8008380:	463d      	mov	r5, r7
 8008382:	4603      	mov	r3, r0
 8008384:	2a65      	cmp	r2, #101	@ 0x65
 8008386:	d001      	beq.n	800838c <_strtod_l+0x174>
 8008388:	2a45      	cmp	r2, #69	@ 0x45
 800838a:	d114      	bne.n	80083b6 <_strtod_l+0x19e>
 800838c:	b91d      	cbnz	r5, 8008396 <_strtod_l+0x17e>
 800838e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008390:	4302      	orrs	r2, r0
 8008392:	d095      	beq.n	80082c0 <_strtod_l+0xa8>
 8008394:	2500      	movs	r5, #0
 8008396:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008398:	1c62      	adds	r2, r4, #1
 800839a:	9219      	str	r2, [sp, #100]	@ 0x64
 800839c:	7862      	ldrb	r2, [r4, #1]
 800839e:	2a2b      	cmp	r2, #43	@ 0x2b
 80083a0:	d077      	beq.n	8008492 <_strtod_l+0x27a>
 80083a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80083a4:	d07b      	beq.n	800849e <_strtod_l+0x286>
 80083a6:	f04f 0c00 	mov.w	ip, #0
 80083aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80083ae:	2909      	cmp	r1, #9
 80083b0:	f240 8082 	bls.w	80084b8 <_strtod_l+0x2a0>
 80083b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80083b6:	f04f 0800 	mov.w	r8, #0
 80083ba:	e0a2      	b.n	8008502 <_strtod_l+0x2ea>
 80083bc:	2300      	movs	r3, #0
 80083be:	e7c7      	b.n	8008350 <_strtod_l+0x138>
 80083c0:	2f08      	cmp	r7, #8
 80083c2:	bfd5      	itete	le
 80083c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80083c6:	9908      	ldrgt	r1, [sp, #32]
 80083c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80083cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80083d0:	f100 0001 	add.w	r0, r0, #1
 80083d4:	bfd4      	ite	le
 80083d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80083d8:	9308      	strgt	r3, [sp, #32]
 80083da:	3701      	adds	r7, #1
 80083dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80083de:	e7bf      	b.n	8008360 <_strtod_l+0x148>
 80083e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80083e6:	785a      	ldrb	r2, [r3, #1]
 80083e8:	b37f      	cbz	r7, 800844a <_strtod_l+0x232>
 80083ea:	4681      	mov	r9, r0
 80083ec:	463d      	mov	r5, r7
 80083ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80083f2:	2b09      	cmp	r3, #9
 80083f4:	d912      	bls.n	800841c <_strtod_l+0x204>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e7c4      	b.n	8008384 <_strtod_l+0x16c>
 80083fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8008400:	785a      	ldrb	r2, [r3, #1]
 8008402:	3001      	adds	r0, #1
 8008404:	2a30      	cmp	r2, #48	@ 0x30
 8008406:	d0f8      	beq.n	80083fa <_strtod_l+0x1e2>
 8008408:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800840c:	2b08      	cmp	r3, #8
 800840e:	f200 84d3 	bhi.w	8008db8 <_strtod_l+0xba0>
 8008412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008414:	930c      	str	r3, [sp, #48]	@ 0x30
 8008416:	4681      	mov	r9, r0
 8008418:	2000      	movs	r0, #0
 800841a:	4605      	mov	r5, r0
 800841c:	3a30      	subs	r2, #48	@ 0x30
 800841e:	f100 0301 	add.w	r3, r0, #1
 8008422:	d02a      	beq.n	800847a <_strtod_l+0x262>
 8008424:	4499      	add	r9, r3
 8008426:	eb00 0c05 	add.w	ip, r0, r5
 800842a:	462b      	mov	r3, r5
 800842c:	210a      	movs	r1, #10
 800842e:	4563      	cmp	r3, ip
 8008430:	d10d      	bne.n	800844e <_strtod_l+0x236>
 8008432:	1c69      	adds	r1, r5, #1
 8008434:	4401      	add	r1, r0
 8008436:	4428      	add	r0, r5
 8008438:	2808      	cmp	r0, #8
 800843a:	dc16      	bgt.n	800846a <_strtod_l+0x252>
 800843c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800843e:	230a      	movs	r3, #10
 8008440:	fb03 2300 	mla	r3, r3, r0, r2
 8008444:	930a      	str	r3, [sp, #40]	@ 0x28
 8008446:	2300      	movs	r3, #0
 8008448:	e018      	b.n	800847c <_strtod_l+0x264>
 800844a:	4638      	mov	r0, r7
 800844c:	e7da      	b.n	8008404 <_strtod_l+0x1ec>
 800844e:	2b08      	cmp	r3, #8
 8008450:	f103 0301 	add.w	r3, r3, #1
 8008454:	dc03      	bgt.n	800845e <_strtod_l+0x246>
 8008456:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008458:	434e      	muls	r6, r1
 800845a:	960a      	str	r6, [sp, #40]	@ 0x28
 800845c:	e7e7      	b.n	800842e <_strtod_l+0x216>
 800845e:	2b10      	cmp	r3, #16
 8008460:	bfde      	ittt	le
 8008462:	9e08      	ldrle	r6, [sp, #32]
 8008464:	434e      	mulle	r6, r1
 8008466:	9608      	strle	r6, [sp, #32]
 8008468:	e7e1      	b.n	800842e <_strtod_l+0x216>
 800846a:	280f      	cmp	r0, #15
 800846c:	dceb      	bgt.n	8008446 <_strtod_l+0x22e>
 800846e:	9808      	ldr	r0, [sp, #32]
 8008470:	230a      	movs	r3, #10
 8008472:	fb03 2300 	mla	r3, r3, r0, r2
 8008476:	9308      	str	r3, [sp, #32]
 8008478:	e7e5      	b.n	8008446 <_strtod_l+0x22e>
 800847a:	4629      	mov	r1, r5
 800847c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800847e:	1c50      	adds	r0, r2, #1
 8008480:	9019      	str	r0, [sp, #100]	@ 0x64
 8008482:	7852      	ldrb	r2, [r2, #1]
 8008484:	4618      	mov	r0, r3
 8008486:	460d      	mov	r5, r1
 8008488:	e7b1      	b.n	80083ee <_strtod_l+0x1d6>
 800848a:	f04f 0900 	mov.w	r9, #0
 800848e:	2301      	movs	r3, #1
 8008490:	e77d      	b.n	800838e <_strtod_l+0x176>
 8008492:	f04f 0c00 	mov.w	ip, #0
 8008496:	1ca2      	adds	r2, r4, #2
 8008498:	9219      	str	r2, [sp, #100]	@ 0x64
 800849a:	78a2      	ldrb	r2, [r4, #2]
 800849c:	e785      	b.n	80083aa <_strtod_l+0x192>
 800849e:	f04f 0c01 	mov.w	ip, #1
 80084a2:	e7f8      	b.n	8008496 <_strtod_l+0x27e>
 80084a4:	0800aa18 	.word	0x0800aa18
 80084a8:	0800aa00 	.word	0x0800aa00
 80084ac:	7ff00000 	.word	0x7ff00000
 80084b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084b2:	1c51      	adds	r1, r2, #1
 80084b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80084b6:	7852      	ldrb	r2, [r2, #1]
 80084b8:	2a30      	cmp	r2, #48	@ 0x30
 80084ba:	d0f9      	beq.n	80084b0 <_strtod_l+0x298>
 80084bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80084c0:	2908      	cmp	r1, #8
 80084c2:	f63f af78 	bhi.w	80083b6 <_strtod_l+0x19e>
 80084c6:	3a30      	subs	r2, #48	@ 0x30
 80084c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80084ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80084ce:	f04f 080a 	mov.w	r8, #10
 80084d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084d4:	1c56      	adds	r6, r2, #1
 80084d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80084d8:	7852      	ldrb	r2, [r2, #1]
 80084da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80084de:	f1be 0f09 	cmp.w	lr, #9
 80084e2:	d939      	bls.n	8008558 <_strtod_l+0x340>
 80084e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80084e6:	1a76      	subs	r6, r6, r1
 80084e8:	2e08      	cmp	r6, #8
 80084ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80084ee:	dc03      	bgt.n	80084f8 <_strtod_l+0x2e0>
 80084f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80084f2:	4588      	cmp	r8, r1
 80084f4:	bfa8      	it	ge
 80084f6:	4688      	movge	r8, r1
 80084f8:	f1bc 0f00 	cmp.w	ip, #0
 80084fc:	d001      	beq.n	8008502 <_strtod_l+0x2ea>
 80084fe:	f1c8 0800 	rsb	r8, r8, #0
 8008502:	2d00      	cmp	r5, #0
 8008504:	d14e      	bne.n	80085a4 <_strtod_l+0x38c>
 8008506:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008508:	4308      	orrs	r0, r1
 800850a:	f47f aebe 	bne.w	800828a <_strtod_l+0x72>
 800850e:	2b00      	cmp	r3, #0
 8008510:	f47f aed6 	bne.w	80082c0 <_strtod_l+0xa8>
 8008514:	2a69      	cmp	r2, #105	@ 0x69
 8008516:	d028      	beq.n	800856a <_strtod_l+0x352>
 8008518:	dc25      	bgt.n	8008566 <_strtod_l+0x34e>
 800851a:	2a49      	cmp	r2, #73	@ 0x49
 800851c:	d025      	beq.n	800856a <_strtod_l+0x352>
 800851e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008520:	f47f aece 	bne.w	80082c0 <_strtod_l+0xa8>
 8008524:	499b      	ldr	r1, [pc, #620]	@ (8008794 <_strtod_l+0x57c>)
 8008526:	a819      	add	r0, sp, #100	@ 0x64
 8008528:	f001 ff42 	bl	800a3b0 <__match>
 800852c:	2800      	cmp	r0, #0
 800852e:	f43f aec7 	beq.w	80082c0 <_strtod_l+0xa8>
 8008532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b28      	cmp	r3, #40	@ 0x28
 8008538:	d12e      	bne.n	8008598 <_strtod_l+0x380>
 800853a:	4997      	ldr	r1, [pc, #604]	@ (8008798 <_strtod_l+0x580>)
 800853c:	aa1c      	add	r2, sp, #112	@ 0x70
 800853e:	a819      	add	r0, sp, #100	@ 0x64
 8008540:	f001 ff4a 	bl	800a3d8 <__hexnan>
 8008544:	2805      	cmp	r0, #5
 8008546:	d127      	bne.n	8008598 <_strtod_l+0x380>
 8008548:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800854a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800854e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008552:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008556:	e698      	b.n	800828a <_strtod_l+0x72>
 8008558:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800855a:	fb08 2101 	mla	r1, r8, r1, r2
 800855e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008562:	920e      	str	r2, [sp, #56]	@ 0x38
 8008564:	e7b5      	b.n	80084d2 <_strtod_l+0x2ba>
 8008566:	2a6e      	cmp	r2, #110	@ 0x6e
 8008568:	e7da      	b.n	8008520 <_strtod_l+0x308>
 800856a:	498c      	ldr	r1, [pc, #560]	@ (800879c <_strtod_l+0x584>)
 800856c:	a819      	add	r0, sp, #100	@ 0x64
 800856e:	f001 ff1f 	bl	800a3b0 <__match>
 8008572:	2800      	cmp	r0, #0
 8008574:	f43f aea4 	beq.w	80082c0 <_strtod_l+0xa8>
 8008578:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800857a:	4989      	ldr	r1, [pc, #548]	@ (80087a0 <_strtod_l+0x588>)
 800857c:	3b01      	subs	r3, #1
 800857e:	a819      	add	r0, sp, #100	@ 0x64
 8008580:	9319      	str	r3, [sp, #100]	@ 0x64
 8008582:	f001 ff15 	bl	800a3b0 <__match>
 8008586:	b910      	cbnz	r0, 800858e <_strtod_l+0x376>
 8008588:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800858a:	3301      	adds	r3, #1
 800858c:	9319      	str	r3, [sp, #100]	@ 0x64
 800858e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80087b0 <_strtod_l+0x598>
 8008592:	f04f 0a00 	mov.w	sl, #0
 8008596:	e678      	b.n	800828a <_strtod_l+0x72>
 8008598:	4882      	ldr	r0, [pc, #520]	@ (80087a4 <_strtod_l+0x58c>)
 800859a:	f001 fc45 	bl	8009e28 <nan>
 800859e:	ec5b ab10 	vmov	sl, fp, d0
 80085a2:	e672      	b.n	800828a <_strtod_l+0x72>
 80085a4:	eba8 0309 	sub.w	r3, r8, r9
 80085a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80085aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ac:	2f00      	cmp	r7, #0
 80085ae:	bf08      	it	eq
 80085b0:	462f      	moveq	r7, r5
 80085b2:	2d10      	cmp	r5, #16
 80085b4:	462c      	mov	r4, r5
 80085b6:	bfa8      	it	ge
 80085b8:	2410      	movge	r4, #16
 80085ba:	f7f7 ffab 	bl	8000514 <__aeabi_ui2d>
 80085be:	2d09      	cmp	r5, #9
 80085c0:	4682      	mov	sl, r0
 80085c2:	468b      	mov	fp, r1
 80085c4:	dc13      	bgt.n	80085ee <_strtod_l+0x3d6>
 80085c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f43f ae5e 	beq.w	800828a <_strtod_l+0x72>
 80085ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d0:	dd78      	ble.n	80086c4 <_strtod_l+0x4ac>
 80085d2:	2b16      	cmp	r3, #22
 80085d4:	dc5f      	bgt.n	8008696 <_strtod_l+0x47e>
 80085d6:	4974      	ldr	r1, [pc, #464]	@ (80087a8 <_strtod_l+0x590>)
 80085d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085e0:	4652      	mov	r2, sl
 80085e2:	465b      	mov	r3, fp
 80085e4:	f7f8 f810 	bl	8000608 <__aeabi_dmul>
 80085e8:	4682      	mov	sl, r0
 80085ea:	468b      	mov	fp, r1
 80085ec:	e64d      	b.n	800828a <_strtod_l+0x72>
 80085ee:	4b6e      	ldr	r3, [pc, #440]	@ (80087a8 <_strtod_l+0x590>)
 80085f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085f8:	f7f8 f806 	bl	8000608 <__aeabi_dmul>
 80085fc:	4682      	mov	sl, r0
 80085fe:	9808      	ldr	r0, [sp, #32]
 8008600:	468b      	mov	fp, r1
 8008602:	f7f7 ff87 	bl	8000514 <__aeabi_ui2d>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	4650      	mov	r0, sl
 800860c:	4659      	mov	r1, fp
 800860e:	f7f7 fe45 	bl	800029c <__adddf3>
 8008612:	2d0f      	cmp	r5, #15
 8008614:	4682      	mov	sl, r0
 8008616:	468b      	mov	fp, r1
 8008618:	ddd5      	ble.n	80085c6 <_strtod_l+0x3ae>
 800861a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861c:	1b2c      	subs	r4, r5, r4
 800861e:	441c      	add	r4, r3
 8008620:	2c00      	cmp	r4, #0
 8008622:	f340 8096 	ble.w	8008752 <_strtod_l+0x53a>
 8008626:	f014 030f 	ands.w	r3, r4, #15
 800862a:	d00a      	beq.n	8008642 <_strtod_l+0x42a>
 800862c:	495e      	ldr	r1, [pc, #376]	@ (80087a8 <_strtod_l+0x590>)
 800862e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800863a:	f7f7 ffe5 	bl	8000608 <__aeabi_dmul>
 800863e:	4682      	mov	sl, r0
 8008640:	468b      	mov	fp, r1
 8008642:	f034 040f 	bics.w	r4, r4, #15
 8008646:	d073      	beq.n	8008730 <_strtod_l+0x518>
 8008648:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800864c:	dd48      	ble.n	80086e0 <_strtod_l+0x4c8>
 800864e:	2400      	movs	r4, #0
 8008650:	46a0      	mov	r8, r4
 8008652:	940a      	str	r4, [sp, #40]	@ 0x28
 8008654:	46a1      	mov	r9, r4
 8008656:	9a05      	ldr	r2, [sp, #20]
 8008658:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80087b0 <_strtod_l+0x598>
 800865c:	2322      	movs	r3, #34	@ 0x22
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	f04f 0a00 	mov.w	sl, #0
 8008664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008666:	2b00      	cmp	r3, #0
 8008668:	f43f ae0f 	beq.w	800828a <_strtod_l+0x72>
 800866c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800866e:	9805      	ldr	r0, [sp, #20]
 8008670:	f7ff f942 	bl	80078f8 <_Bfree>
 8008674:	9805      	ldr	r0, [sp, #20]
 8008676:	4649      	mov	r1, r9
 8008678:	f7ff f93e 	bl	80078f8 <_Bfree>
 800867c:	9805      	ldr	r0, [sp, #20]
 800867e:	4641      	mov	r1, r8
 8008680:	f7ff f93a 	bl	80078f8 <_Bfree>
 8008684:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008686:	9805      	ldr	r0, [sp, #20]
 8008688:	f7ff f936 	bl	80078f8 <_Bfree>
 800868c:	9805      	ldr	r0, [sp, #20]
 800868e:	4621      	mov	r1, r4
 8008690:	f7ff f932 	bl	80078f8 <_Bfree>
 8008694:	e5f9      	b.n	800828a <_strtod_l+0x72>
 8008696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008698:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800869c:	4293      	cmp	r3, r2
 800869e:	dbbc      	blt.n	800861a <_strtod_l+0x402>
 80086a0:	4c41      	ldr	r4, [pc, #260]	@ (80087a8 <_strtod_l+0x590>)
 80086a2:	f1c5 050f 	rsb	r5, r5, #15
 80086a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80086aa:	4652      	mov	r2, sl
 80086ac:	465b      	mov	r3, fp
 80086ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086b2:	f7f7 ffa9 	bl	8000608 <__aeabi_dmul>
 80086b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b8:	1b5d      	subs	r5, r3, r5
 80086ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80086be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80086c2:	e78f      	b.n	80085e4 <_strtod_l+0x3cc>
 80086c4:	3316      	adds	r3, #22
 80086c6:	dba8      	blt.n	800861a <_strtod_l+0x402>
 80086c8:	4b37      	ldr	r3, [pc, #220]	@ (80087a8 <_strtod_l+0x590>)
 80086ca:	eba9 0808 	sub.w	r8, r9, r8
 80086ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80086d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80086d6:	4650      	mov	r0, sl
 80086d8:	4659      	mov	r1, fp
 80086da:	f7f8 f8bf 	bl	800085c <__aeabi_ddiv>
 80086de:	e783      	b.n	80085e8 <_strtod_l+0x3d0>
 80086e0:	4b32      	ldr	r3, [pc, #200]	@ (80087ac <_strtod_l+0x594>)
 80086e2:	9308      	str	r3, [sp, #32]
 80086e4:	2300      	movs	r3, #0
 80086e6:	1124      	asrs	r4, r4, #4
 80086e8:	4650      	mov	r0, sl
 80086ea:	4659      	mov	r1, fp
 80086ec:	461e      	mov	r6, r3
 80086ee:	2c01      	cmp	r4, #1
 80086f0:	dc21      	bgt.n	8008736 <_strtod_l+0x51e>
 80086f2:	b10b      	cbz	r3, 80086f8 <_strtod_l+0x4e0>
 80086f4:	4682      	mov	sl, r0
 80086f6:	468b      	mov	fp, r1
 80086f8:	492c      	ldr	r1, [pc, #176]	@ (80087ac <_strtod_l+0x594>)
 80086fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008702:	4652      	mov	r2, sl
 8008704:	465b      	mov	r3, fp
 8008706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800870a:	f7f7 ff7d 	bl	8000608 <__aeabi_dmul>
 800870e:	4b28      	ldr	r3, [pc, #160]	@ (80087b0 <_strtod_l+0x598>)
 8008710:	460a      	mov	r2, r1
 8008712:	400b      	ands	r3, r1
 8008714:	4927      	ldr	r1, [pc, #156]	@ (80087b4 <_strtod_l+0x59c>)
 8008716:	428b      	cmp	r3, r1
 8008718:	4682      	mov	sl, r0
 800871a:	d898      	bhi.n	800864e <_strtod_l+0x436>
 800871c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008720:	428b      	cmp	r3, r1
 8008722:	bf86      	itte	hi
 8008724:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80087b8 <_strtod_l+0x5a0>
 8008728:	f04f 3aff 	movhi.w	sl, #4294967295
 800872c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008730:	2300      	movs	r3, #0
 8008732:	9308      	str	r3, [sp, #32]
 8008734:	e07a      	b.n	800882c <_strtod_l+0x614>
 8008736:	07e2      	lsls	r2, r4, #31
 8008738:	d505      	bpl.n	8008746 <_strtod_l+0x52e>
 800873a:	9b08      	ldr	r3, [sp, #32]
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f7 ff62 	bl	8000608 <__aeabi_dmul>
 8008744:	2301      	movs	r3, #1
 8008746:	9a08      	ldr	r2, [sp, #32]
 8008748:	3208      	adds	r2, #8
 800874a:	3601      	adds	r6, #1
 800874c:	1064      	asrs	r4, r4, #1
 800874e:	9208      	str	r2, [sp, #32]
 8008750:	e7cd      	b.n	80086ee <_strtod_l+0x4d6>
 8008752:	d0ed      	beq.n	8008730 <_strtod_l+0x518>
 8008754:	4264      	negs	r4, r4
 8008756:	f014 020f 	ands.w	r2, r4, #15
 800875a:	d00a      	beq.n	8008772 <_strtod_l+0x55a>
 800875c:	4b12      	ldr	r3, [pc, #72]	@ (80087a8 <_strtod_l+0x590>)
 800875e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008762:	4650      	mov	r0, sl
 8008764:	4659      	mov	r1, fp
 8008766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876a:	f7f8 f877 	bl	800085c <__aeabi_ddiv>
 800876e:	4682      	mov	sl, r0
 8008770:	468b      	mov	fp, r1
 8008772:	1124      	asrs	r4, r4, #4
 8008774:	d0dc      	beq.n	8008730 <_strtod_l+0x518>
 8008776:	2c1f      	cmp	r4, #31
 8008778:	dd20      	ble.n	80087bc <_strtod_l+0x5a4>
 800877a:	2400      	movs	r4, #0
 800877c:	46a0      	mov	r8, r4
 800877e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008780:	46a1      	mov	r9, r4
 8008782:	9a05      	ldr	r2, [sp, #20]
 8008784:	2322      	movs	r3, #34	@ 0x22
 8008786:	f04f 0a00 	mov.w	sl, #0
 800878a:	f04f 0b00 	mov.w	fp, #0
 800878e:	6013      	str	r3, [r2, #0]
 8008790:	e768      	b.n	8008664 <_strtod_l+0x44c>
 8008792:	bf00      	nop
 8008794:	0800a7ed 	.word	0x0800a7ed
 8008798:	0800aa04 	.word	0x0800aa04
 800879c:	0800a7e5 	.word	0x0800a7e5
 80087a0:	0800a81a 	.word	0x0800a81a
 80087a4:	0800abc8 	.word	0x0800abc8
 80087a8:	0800a938 	.word	0x0800a938
 80087ac:	0800a910 	.word	0x0800a910
 80087b0:	7ff00000 	.word	0x7ff00000
 80087b4:	7ca00000 	.word	0x7ca00000
 80087b8:	7fefffff 	.word	0x7fefffff
 80087bc:	f014 0310 	ands.w	r3, r4, #16
 80087c0:	bf18      	it	ne
 80087c2:	236a      	movne	r3, #106	@ 0x6a
 80087c4:	4ea9      	ldr	r6, [pc, #676]	@ (8008a6c <_strtod_l+0x854>)
 80087c6:	9308      	str	r3, [sp, #32]
 80087c8:	4650      	mov	r0, sl
 80087ca:	4659      	mov	r1, fp
 80087cc:	2300      	movs	r3, #0
 80087ce:	07e2      	lsls	r2, r4, #31
 80087d0:	d504      	bpl.n	80087dc <_strtod_l+0x5c4>
 80087d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087d6:	f7f7 ff17 	bl	8000608 <__aeabi_dmul>
 80087da:	2301      	movs	r3, #1
 80087dc:	1064      	asrs	r4, r4, #1
 80087de:	f106 0608 	add.w	r6, r6, #8
 80087e2:	d1f4      	bne.n	80087ce <_strtod_l+0x5b6>
 80087e4:	b10b      	cbz	r3, 80087ea <_strtod_l+0x5d2>
 80087e6:	4682      	mov	sl, r0
 80087e8:	468b      	mov	fp, r1
 80087ea:	9b08      	ldr	r3, [sp, #32]
 80087ec:	b1b3      	cbz	r3, 800881c <_strtod_l+0x604>
 80087ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80087f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	4659      	mov	r1, fp
 80087fa:	dd0f      	ble.n	800881c <_strtod_l+0x604>
 80087fc:	2b1f      	cmp	r3, #31
 80087fe:	dd55      	ble.n	80088ac <_strtod_l+0x694>
 8008800:	2b34      	cmp	r3, #52	@ 0x34
 8008802:	bfde      	ittt	le
 8008804:	f04f 33ff 	movle.w	r3, #4294967295
 8008808:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800880c:	4093      	lslle	r3, r2
 800880e:	f04f 0a00 	mov.w	sl, #0
 8008812:	bfcc      	ite	gt
 8008814:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008818:	ea03 0b01 	andle.w	fp, r3, r1
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	4650      	mov	r0, sl
 8008822:	4659      	mov	r1, fp
 8008824:	f7f8 f958 	bl	8000ad8 <__aeabi_dcmpeq>
 8008828:	2800      	cmp	r0, #0
 800882a:	d1a6      	bne.n	800877a <_strtod_l+0x562>
 800882c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008832:	9805      	ldr	r0, [sp, #20]
 8008834:	462b      	mov	r3, r5
 8008836:	463a      	mov	r2, r7
 8008838:	f7ff f8c6 	bl	80079c8 <__s2b>
 800883c:	900a      	str	r0, [sp, #40]	@ 0x28
 800883e:	2800      	cmp	r0, #0
 8008840:	f43f af05 	beq.w	800864e <_strtod_l+0x436>
 8008844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008846:	2a00      	cmp	r2, #0
 8008848:	eba9 0308 	sub.w	r3, r9, r8
 800884c:	bfa8      	it	ge
 800884e:	2300      	movge	r3, #0
 8008850:	9312      	str	r3, [sp, #72]	@ 0x48
 8008852:	2400      	movs	r4, #0
 8008854:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008858:	9316      	str	r3, [sp, #88]	@ 0x58
 800885a:	46a0      	mov	r8, r4
 800885c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800885e:	9805      	ldr	r0, [sp, #20]
 8008860:	6859      	ldr	r1, [r3, #4]
 8008862:	f7ff f809 	bl	8007878 <_Balloc>
 8008866:	4681      	mov	r9, r0
 8008868:	2800      	cmp	r0, #0
 800886a:	f43f aef4 	beq.w	8008656 <_strtod_l+0x43e>
 800886e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	3202      	adds	r2, #2
 8008874:	f103 010c 	add.w	r1, r3, #12
 8008878:	0092      	lsls	r2, r2, #2
 800887a:	300c      	adds	r0, #12
 800887c:	f001 fac6 	bl	8009e0c <memcpy>
 8008880:	ec4b ab10 	vmov	d0, sl, fp
 8008884:	9805      	ldr	r0, [sp, #20]
 8008886:	aa1c      	add	r2, sp, #112	@ 0x70
 8008888:	a91b      	add	r1, sp, #108	@ 0x6c
 800888a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800888e:	f7ff fbd7 	bl	8008040 <__d2b>
 8008892:	901a      	str	r0, [sp, #104]	@ 0x68
 8008894:	2800      	cmp	r0, #0
 8008896:	f43f aede 	beq.w	8008656 <_strtod_l+0x43e>
 800889a:	9805      	ldr	r0, [sp, #20]
 800889c:	2101      	movs	r1, #1
 800889e:	f7ff f929 	bl	8007af4 <__i2b>
 80088a2:	4680      	mov	r8, r0
 80088a4:	b948      	cbnz	r0, 80088ba <_strtod_l+0x6a2>
 80088a6:	f04f 0800 	mov.w	r8, #0
 80088aa:	e6d4      	b.n	8008656 <_strtod_l+0x43e>
 80088ac:	f04f 32ff 	mov.w	r2, #4294967295
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	ea03 0a0a 	and.w	sl, r3, sl
 80088b8:	e7b0      	b.n	800881c <_strtod_l+0x604>
 80088ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80088bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80088be:	2d00      	cmp	r5, #0
 80088c0:	bfab      	itete	ge
 80088c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80088c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80088c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80088c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80088ca:	bfac      	ite	ge
 80088cc:	18ef      	addge	r7, r5, r3
 80088ce:	1b5e      	sublt	r6, r3, r5
 80088d0:	9b08      	ldr	r3, [sp, #32]
 80088d2:	1aed      	subs	r5, r5, r3
 80088d4:	4415      	add	r5, r2
 80088d6:	4b66      	ldr	r3, [pc, #408]	@ (8008a70 <_strtod_l+0x858>)
 80088d8:	3d01      	subs	r5, #1
 80088da:	429d      	cmp	r5, r3
 80088dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80088e0:	da50      	bge.n	8008984 <_strtod_l+0x76c>
 80088e2:	1b5b      	subs	r3, r3, r5
 80088e4:	2b1f      	cmp	r3, #31
 80088e6:	eba2 0203 	sub.w	r2, r2, r3
 80088ea:	f04f 0101 	mov.w	r1, #1
 80088ee:	dc3d      	bgt.n	800896c <_strtod_l+0x754>
 80088f0:	fa01 f303 	lsl.w	r3, r1, r3
 80088f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088f6:	2300      	movs	r3, #0
 80088f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80088fa:	18bd      	adds	r5, r7, r2
 80088fc:	9b08      	ldr	r3, [sp, #32]
 80088fe:	42af      	cmp	r7, r5
 8008900:	4416      	add	r6, r2
 8008902:	441e      	add	r6, r3
 8008904:	463b      	mov	r3, r7
 8008906:	bfa8      	it	ge
 8008908:	462b      	movge	r3, r5
 800890a:	42b3      	cmp	r3, r6
 800890c:	bfa8      	it	ge
 800890e:	4633      	movge	r3, r6
 8008910:	2b00      	cmp	r3, #0
 8008912:	bfc2      	ittt	gt
 8008914:	1aed      	subgt	r5, r5, r3
 8008916:	1af6      	subgt	r6, r6, r3
 8008918:	1aff      	subgt	r7, r7, r3
 800891a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800891c:	2b00      	cmp	r3, #0
 800891e:	dd16      	ble.n	800894e <_strtod_l+0x736>
 8008920:	4641      	mov	r1, r8
 8008922:	9805      	ldr	r0, [sp, #20]
 8008924:	461a      	mov	r2, r3
 8008926:	f7ff f9a5 	bl	8007c74 <__pow5mult>
 800892a:	4680      	mov	r8, r0
 800892c:	2800      	cmp	r0, #0
 800892e:	d0ba      	beq.n	80088a6 <_strtod_l+0x68e>
 8008930:	4601      	mov	r1, r0
 8008932:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008934:	9805      	ldr	r0, [sp, #20]
 8008936:	f7ff f8f3 	bl	8007b20 <__multiply>
 800893a:	900e      	str	r0, [sp, #56]	@ 0x38
 800893c:	2800      	cmp	r0, #0
 800893e:	f43f ae8a 	beq.w	8008656 <_strtod_l+0x43e>
 8008942:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008944:	9805      	ldr	r0, [sp, #20]
 8008946:	f7fe ffd7 	bl	80078f8 <_Bfree>
 800894a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800894c:	931a      	str	r3, [sp, #104]	@ 0x68
 800894e:	2d00      	cmp	r5, #0
 8008950:	dc1d      	bgt.n	800898e <_strtod_l+0x776>
 8008952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008954:	2b00      	cmp	r3, #0
 8008956:	dd23      	ble.n	80089a0 <_strtod_l+0x788>
 8008958:	4649      	mov	r1, r9
 800895a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800895c:	9805      	ldr	r0, [sp, #20]
 800895e:	f7ff f989 	bl	8007c74 <__pow5mult>
 8008962:	4681      	mov	r9, r0
 8008964:	b9e0      	cbnz	r0, 80089a0 <_strtod_l+0x788>
 8008966:	f04f 0900 	mov.w	r9, #0
 800896a:	e674      	b.n	8008656 <_strtod_l+0x43e>
 800896c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008970:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008974:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008978:	35e2      	adds	r5, #226	@ 0xe2
 800897a:	fa01 f305 	lsl.w	r3, r1, r5
 800897e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008980:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008982:	e7ba      	b.n	80088fa <_strtod_l+0x6e2>
 8008984:	2300      	movs	r3, #0
 8008986:	9310      	str	r3, [sp, #64]	@ 0x40
 8008988:	2301      	movs	r3, #1
 800898a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800898c:	e7b5      	b.n	80088fa <_strtod_l+0x6e2>
 800898e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008990:	9805      	ldr	r0, [sp, #20]
 8008992:	462a      	mov	r2, r5
 8008994:	f7ff f9c8 	bl	8007d28 <__lshift>
 8008998:	901a      	str	r0, [sp, #104]	@ 0x68
 800899a:	2800      	cmp	r0, #0
 800899c:	d1d9      	bne.n	8008952 <_strtod_l+0x73a>
 800899e:	e65a      	b.n	8008656 <_strtod_l+0x43e>
 80089a0:	2e00      	cmp	r6, #0
 80089a2:	dd07      	ble.n	80089b4 <_strtod_l+0x79c>
 80089a4:	4649      	mov	r1, r9
 80089a6:	9805      	ldr	r0, [sp, #20]
 80089a8:	4632      	mov	r2, r6
 80089aa:	f7ff f9bd 	bl	8007d28 <__lshift>
 80089ae:	4681      	mov	r9, r0
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0d8      	beq.n	8008966 <_strtod_l+0x74e>
 80089b4:	2f00      	cmp	r7, #0
 80089b6:	dd08      	ble.n	80089ca <_strtod_l+0x7b2>
 80089b8:	4641      	mov	r1, r8
 80089ba:	9805      	ldr	r0, [sp, #20]
 80089bc:	463a      	mov	r2, r7
 80089be:	f7ff f9b3 	bl	8007d28 <__lshift>
 80089c2:	4680      	mov	r8, r0
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f43f ae46 	beq.w	8008656 <_strtod_l+0x43e>
 80089ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089cc:	9805      	ldr	r0, [sp, #20]
 80089ce:	464a      	mov	r2, r9
 80089d0:	f7ff fa32 	bl	8007e38 <__mdiff>
 80089d4:	4604      	mov	r4, r0
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f43f ae3d 	beq.w	8008656 <_strtod_l+0x43e>
 80089dc:	68c3      	ldr	r3, [r0, #12]
 80089de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089e0:	2300      	movs	r3, #0
 80089e2:	60c3      	str	r3, [r0, #12]
 80089e4:	4641      	mov	r1, r8
 80089e6:	f7ff fa0b 	bl	8007e00 <__mcmp>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	da46      	bge.n	8008a7c <_strtod_l+0x864>
 80089ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089f0:	ea53 030a 	orrs.w	r3, r3, sl
 80089f4:	d16c      	bne.n	8008ad0 <_strtod_l+0x8b8>
 80089f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d168      	bne.n	8008ad0 <_strtod_l+0x8b8>
 80089fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a02:	0d1b      	lsrs	r3, r3, #20
 8008a04:	051b      	lsls	r3, r3, #20
 8008a06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a0a:	d961      	bls.n	8008ad0 <_strtod_l+0x8b8>
 8008a0c:	6963      	ldr	r3, [r4, #20]
 8008a0e:	b913      	cbnz	r3, 8008a16 <_strtod_l+0x7fe>
 8008a10:	6923      	ldr	r3, [r4, #16]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	dd5c      	ble.n	8008ad0 <_strtod_l+0x8b8>
 8008a16:	4621      	mov	r1, r4
 8008a18:	2201      	movs	r2, #1
 8008a1a:	9805      	ldr	r0, [sp, #20]
 8008a1c:	f7ff f984 	bl	8007d28 <__lshift>
 8008a20:	4641      	mov	r1, r8
 8008a22:	4604      	mov	r4, r0
 8008a24:	f7ff f9ec 	bl	8007e00 <__mcmp>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	dd51      	ble.n	8008ad0 <_strtod_l+0x8b8>
 8008a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a30:	9a08      	ldr	r2, [sp, #32]
 8008a32:	0d1b      	lsrs	r3, r3, #20
 8008a34:	051b      	lsls	r3, r3, #20
 8008a36:	2a00      	cmp	r2, #0
 8008a38:	d06b      	beq.n	8008b12 <_strtod_l+0x8fa>
 8008a3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a3e:	d868      	bhi.n	8008b12 <_strtod_l+0x8fa>
 8008a40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008a44:	f67f ae9d 	bls.w	8008782 <_strtod_l+0x56a>
 8008a48:	4b0a      	ldr	r3, [pc, #40]	@ (8008a74 <_strtod_l+0x85c>)
 8008a4a:	4650      	mov	r0, sl
 8008a4c:	4659      	mov	r1, fp
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f7f7 fdda 	bl	8000608 <__aeabi_dmul>
 8008a54:	4b08      	ldr	r3, [pc, #32]	@ (8008a78 <_strtod_l+0x860>)
 8008a56:	400b      	ands	r3, r1
 8008a58:	4682      	mov	sl, r0
 8008a5a:	468b      	mov	fp, r1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f47f ae05 	bne.w	800866c <_strtod_l+0x454>
 8008a62:	9a05      	ldr	r2, [sp, #20]
 8008a64:	2322      	movs	r3, #34	@ 0x22
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	e600      	b.n	800866c <_strtod_l+0x454>
 8008a6a:	bf00      	nop
 8008a6c:	0800aa30 	.word	0x0800aa30
 8008a70:	fffffc02 	.word	0xfffffc02
 8008a74:	39500000 	.word	0x39500000
 8008a78:	7ff00000 	.word	0x7ff00000
 8008a7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008a80:	d165      	bne.n	8008b4e <_strtod_l+0x936>
 8008a82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a88:	b35a      	cbz	r2, 8008ae2 <_strtod_l+0x8ca>
 8008a8a:	4a9f      	ldr	r2, [pc, #636]	@ (8008d08 <_strtod_l+0xaf0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d12b      	bne.n	8008ae8 <_strtod_l+0x8d0>
 8008a90:	9b08      	ldr	r3, [sp, #32]
 8008a92:	4651      	mov	r1, sl
 8008a94:	b303      	cbz	r3, 8008ad8 <_strtod_l+0x8c0>
 8008a96:	4b9d      	ldr	r3, [pc, #628]	@ (8008d0c <_strtod_l+0xaf4>)
 8008a98:	465a      	mov	r2, fp
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa4:	d81b      	bhi.n	8008ade <_strtod_l+0x8c6>
 8008aa6:	0d1b      	lsrs	r3, r3, #20
 8008aa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008aac:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	d119      	bne.n	8008ae8 <_strtod_l+0x8d0>
 8008ab4:	4b96      	ldr	r3, [pc, #600]	@ (8008d10 <_strtod_l+0xaf8>)
 8008ab6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d102      	bne.n	8008ac2 <_strtod_l+0x8aa>
 8008abc:	3101      	adds	r1, #1
 8008abe:	f43f adca 	beq.w	8008656 <_strtod_l+0x43e>
 8008ac2:	4b92      	ldr	r3, [pc, #584]	@ (8008d0c <_strtod_l+0xaf4>)
 8008ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ac6:	401a      	ands	r2, r3
 8008ac8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008acc:	f04f 0a00 	mov.w	sl, #0
 8008ad0:	9b08      	ldr	r3, [sp, #32]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1b8      	bne.n	8008a48 <_strtod_l+0x830>
 8008ad6:	e5c9      	b.n	800866c <_strtod_l+0x454>
 8008ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8008adc:	e7e8      	b.n	8008ab0 <_strtod_l+0x898>
 8008ade:	4613      	mov	r3, r2
 8008ae0:	e7e6      	b.n	8008ab0 <_strtod_l+0x898>
 8008ae2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ae6:	d0a1      	beq.n	8008a2c <_strtod_l+0x814>
 8008ae8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008aea:	b1db      	cbz	r3, 8008b24 <_strtod_l+0x90c>
 8008aec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008aee:	4213      	tst	r3, r2
 8008af0:	d0ee      	beq.n	8008ad0 <_strtod_l+0x8b8>
 8008af2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008af4:	9a08      	ldr	r2, [sp, #32]
 8008af6:	4650      	mov	r0, sl
 8008af8:	4659      	mov	r1, fp
 8008afa:	b1bb      	cbz	r3, 8008b2c <_strtod_l+0x914>
 8008afc:	f7ff fb6e 	bl	80081dc <sulp>
 8008b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b04:	ec53 2b10 	vmov	r2, r3, d0
 8008b08:	f7f7 fbc8 	bl	800029c <__adddf3>
 8008b0c:	4682      	mov	sl, r0
 8008b0e:	468b      	mov	fp, r1
 8008b10:	e7de      	b.n	8008ad0 <_strtod_l+0x8b8>
 8008b12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008b16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008b1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008b1e:	f04f 3aff 	mov.w	sl, #4294967295
 8008b22:	e7d5      	b.n	8008ad0 <_strtod_l+0x8b8>
 8008b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b26:	ea13 0f0a 	tst.w	r3, sl
 8008b2a:	e7e1      	b.n	8008af0 <_strtod_l+0x8d8>
 8008b2c:	f7ff fb56 	bl	80081dc <sulp>
 8008b30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b34:	ec53 2b10 	vmov	r2, r3, d0
 8008b38:	f7f7 fbae 	bl	8000298 <__aeabi_dsub>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4682      	mov	sl, r0
 8008b42:	468b      	mov	fp, r1
 8008b44:	f7f7 ffc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d0c1      	beq.n	8008ad0 <_strtod_l+0x8b8>
 8008b4c:	e619      	b.n	8008782 <_strtod_l+0x56a>
 8008b4e:	4641      	mov	r1, r8
 8008b50:	4620      	mov	r0, r4
 8008b52:	f7ff facd 	bl	80080f0 <__ratio>
 8008b56:	ec57 6b10 	vmov	r6, r7, d0
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b60:	4630      	mov	r0, r6
 8008b62:	4639      	mov	r1, r7
 8008b64:	f7f7 ffcc 	bl	8000b00 <__aeabi_dcmple>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d06f      	beq.n	8008c4c <_strtod_l+0xa34>
 8008b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d17a      	bne.n	8008c68 <_strtod_l+0xa50>
 8008b72:	f1ba 0f00 	cmp.w	sl, #0
 8008b76:	d158      	bne.n	8008c2a <_strtod_l+0xa12>
 8008b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d15a      	bne.n	8008c38 <_strtod_l+0xa20>
 8008b82:	4b64      	ldr	r3, [pc, #400]	@ (8008d14 <_strtod_l+0xafc>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	4630      	mov	r0, r6
 8008b88:	4639      	mov	r1, r7
 8008b8a:	f7f7 ffaf 	bl	8000aec <__aeabi_dcmplt>
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	d159      	bne.n	8008c46 <_strtod_l+0xa2e>
 8008b92:	4630      	mov	r0, r6
 8008b94:	4639      	mov	r1, r7
 8008b96:	4b60      	ldr	r3, [pc, #384]	@ (8008d18 <_strtod_l+0xb00>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f7f7 fd35 	bl	8000608 <__aeabi_dmul>
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	460f      	mov	r7, r1
 8008ba2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008ba6:	9606      	str	r6, [sp, #24]
 8008ba8:	9307      	str	r3, [sp, #28]
 8008baa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bae:	4d57      	ldr	r5, [pc, #348]	@ (8008d0c <_strtod_l+0xaf4>)
 8008bb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008bb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bb6:	401d      	ands	r5, r3
 8008bb8:	4b58      	ldr	r3, [pc, #352]	@ (8008d1c <_strtod_l+0xb04>)
 8008bba:	429d      	cmp	r5, r3
 8008bbc:	f040 80b2 	bne.w	8008d24 <_strtod_l+0xb0c>
 8008bc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008bc6:	ec4b ab10 	vmov	d0, sl, fp
 8008bca:	f7ff f9c9 	bl	8007f60 <__ulp>
 8008bce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bd2:	ec51 0b10 	vmov	r0, r1, d0
 8008bd6:	f7f7 fd17 	bl	8000608 <__aeabi_dmul>
 8008bda:	4652      	mov	r2, sl
 8008bdc:	465b      	mov	r3, fp
 8008bde:	f7f7 fb5d 	bl	800029c <__adddf3>
 8008be2:	460b      	mov	r3, r1
 8008be4:	4949      	ldr	r1, [pc, #292]	@ (8008d0c <_strtod_l+0xaf4>)
 8008be6:	4a4e      	ldr	r2, [pc, #312]	@ (8008d20 <_strtod_l+0xb08>)
 8008be8:	4019      	ands	r1, r3
 8008bea:	4291      	cmp	r1, r2
 8008bec:	4682      	mov	sl, r0
 8008bee:	d942      	bls.n	8008c76 <_strtod_l+0xa5e>
 8008bf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bf2:	4b47      	ldr	r3, [pc, #284]	@ (8008d10 <_strtod_l+0xaf8>)
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d103      	bne.n	8008c00 <_strtod_l+0x9e8>
 8008bf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	f43f ad2b 	beq.w	8008656 <_strtod_l+0x43e>
 8008c00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008d10 <_strtod_l+0xaf8>
 8008c04:	f04f 3aff 	mov.w	sl, #4294967295
 8008c08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c0a:	9805      	ldr	r0, [sp, #20]
 8008c0c:	f7fe fe74 	bl	80078f8 <_Bfree>
 8008c10:	9805      	ldr	r0, [sp, #20]
 8008c12:	4649      	mov	r1, r9
 8008c14:	f7fe fe70 	bl	80078f8 <_Bfree>
 8008c18:	9805      	ldr	r0, [sp, #20]
 8008c1a:	4641      	mov	r1, r8
 8008c1c:	f7fe fe6c 	bl	80078f8 <_Bfree>
 8008c20:	9805      	ldr	r0, [sp, #20]
 8008c22:	4621      	mov	r1, r4
 8008c24:	f7fe fe68 	bl	80078f8 <_Bfree>
 8008c28:	e618      	b.n	800885c <_strtod_l+0x644>
 8008c2a:	f1ba 0f01 	cmp.w	sl, #1
 8008c2e:	d103      	bne.n	8008c38 <_strtod_l+0xa20>
 8008c30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f43f ada5 	beq.w	8008782 <_strtod_l+0x56a>
 8008c38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008ce8 <_strtod_l+0xad0>
 8008c3c:	4f35      	ldr	r7, [pc, #212]	@ (8008d14 <_strtod_l+0xafc>)
 8008c3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c42:	2600      	movs	r6, #0
 8008c44:	e7b1      	b.n	8008baa <_strtod_l+0x992>
 8008c46:	4f34      	ldr	r7, [pc, #208]	@ (8008d18 <_strtod_l+0xb00>)
 8008c48:	2600      	movs	r6, #0
 8008c4a:	e7aa      	b.n	8008ba2 <_strtod_l+0x98a>
 8008c4c:	4b32      	ldr	r3, [pc, #200]	@ (8008d18 <_strtod_l+0xb00>)
 8008c4e:	4630      	mov	r0, r6
 8008c50:	4639      	mov	r1, r7
 8008c52:	2200      	movs	r2, #0
 8008c54:	f7f7 fcd8 	bl	8000608 <__aeabi_dmul>
 8008c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	460f      	mov	r7, r1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d09f      	beq.n	8008ba2 <_strtod_l+0x98a>
 8008c62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c66:	e7a0      	b.n	8008baa <_strtod_l+0x992>
 8008c68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008cf0 <_strtod_l+0xad8>
 8008c6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c70:	ec57 6b17 	vmov	r6, r7, d7
 8008c74:	e799      	b.n	8008baa <_strtod_l+0x992>
 8008c76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c7a:	9b08      	ldr	r3, [sp, #32]
 8008c7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1c1      	bne.n	8008c08 <_strtod_l+0x9f0>
 8008c84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c88:	0d1b      	lsrs	r3, r3, #20
 8008c8a:	051b      	lsls	r3, r3, #20
 8008c8c:	429d      	cmp	r5, r3
 8008c8e:	d1bb      	bne.n	8008c08 <_strtod_l+0x9f0>
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f8 f818 	bl	8000cc8 <__aeabi_d2lz>
 8008c98:	f7f7 fc88 	bl	80005ac <__aeabi_l2d>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	4639      	mov	r1, r7
 8008ca4:	f7f7 faf8 	bl	8000298 <__aeabi_dsub>
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4602      	mov	r2, r0
 8008cac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008cb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008cb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cb6:	ea46 060a 	orr.w	r6, r6, sl
 8008cba:	431e      	orrs	r6, r3
 8008cbc:	d06f      	beq.n	8008d9e <_strtod_l+0xb86>
 8008cbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008cf8 <_strtod_l+0xae0>)
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	f7f7 ff12 	bl	8000aec <__aeabi_dcmplt>
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	f47f accf 	bne.w	800866c <_strtod_l+0x454>
 8008cce:	a30c      	add	r3, pc, #48	@ (adr r3, 8008d00 <_strtod_l+0xae8>)
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cd8:	f7f7 ff26 	bl	8000b28 <__aeabi_dcmpgt>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d093      	beq.n	8008c08 <_strtod_l+0x9f0>
 8008ce0:	e4c4      	b.n	800866c <_strtod_l+0x454>
 8008ce2:	bf00      	nop
 8008ce4:	f3af 8000 	nop.w
 8008ce8:	00000000 	.word	0x00000000
 8008cec:	bff00000 	.word	0xbff00000
 8008cf0:	00000000 	.word	0x00000000
 8008cf4:	3ff00000 	.word	0x3ff00000
 8008cf8:	94a03595 	.word	0x94a03595
 8008cfc:	3fdfffff 	.word	0x3fdfffff
 8008d00:	35afe535 	.word	0x35afe535
 8008d04:	3fe00000 	.word	0x3fe00000
 8008d08:	000fffff 	.word	0x000fffff
 8008d0c:	7ff00000 	.word	0x7ff00000
 8008d10:	7fefffff 	.word	0x7fefffff
 8008d14:	3ff00000 	.word	0x3ff00000
 8008d18:	3fe00000 	.word	0x3fe00000
 8008d1c:	7fe00000 	.word	0x7fe00000
 8008d20:	7c9fffff 	.word	0x7c9fffff
 8008d24:	9b08      	ldr	r3, [sp, #32]
 8008d26:	b323      	cbz	r3, 8008d72 <_strtod_l+0xb5a>
 8008d28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008d2c:	d821      	bhi.n	8008d72 <_strtod_l+0xb5a>
 8008d2e:	a328      	add	r3, pc, #160	@ (adr r3, 8008dd0 <_strtod_l+0xbb8>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	4630      	mov	r0, r6
 8008d36:	4639      	mov	r1, r7
 8008d38:	f7f7 fee2 	bl	8000b00 <__aeabi_dcmple>
 8008d3c:	b1a0      	cbz	r0, 8008d68 <_strtod_l+0xb50>
 8008d3e:	4639      	mov	r1, r7
 8008d40:	4630      	mov	r0, r6
 8008d42:	f7f7 ff39 	bl	8000bb8 <__aeabi_d2uiz>
 8008d46:	2801      	cmp	r0, #1
 8008d48:	bf38      	it	cc
 8008d4a:	2001      	movcc	r0, #1
 8008d4c:	f7f7 fbe2 	bl	8000514 <__aeabi_ui2d>
 8008d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d52:	4606      	mov	r6, r0
 8008d54:	460f      	mov	r7, r1
 8008d56:	b9fb      	cbnz	r3, 8008d98 <_strtod_l+0xb80>
 8008d58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008d64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d6e:	1b5b      	subs	r3, r3, r5
 8008d70:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d7a:	f7ff f8f1 	bl	8007f60 <__ulp>
 8008d7e:	4650      	mov	r0, sl
 8008d80:	ec53 2b10 	vmov	r2, r3, d0
 8008d84:	4659      	mov	r1, fp
 8008d86:	f7f7 fc3f 	bl	8000608 <__aeabi_dmul>
 8008d8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d8e:	f7f7 fa85 	bl	800029c <__adddf3>
 8008d92:	4682      	mov	sl, r0
 8008d94:	468b      	mov	fp, r1
 8008d96:	e770      	b.n	8008c7a <_strtod_l+0xa62>
 8008d98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d9c:	e7e0      	b.n	8008d60 <_strtod_l+0xb48>
 8008d9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008dd8 <_strtod_l+0xbc0>)
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f7f7 fea2 	bl	8000aec <__aeabi_dcmplt>
 8008da8:	e798      	b.n	8008cdc <_strtod_l+0xac4>
 8008daa:	2300      	movs	r3, #0
 8008dac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	f7ff ba6d 	b.w	8008292 <_strtod_l+0x7a>
 8008db8:	2a65      	cmp	r2, #101	@ 0x65
 8008dba:	f43f ab66 	beq.w	800848a <_strtod_l+0x272>
 8008dbe:	2a45      	cmp	r2, #69	@ 0x45
 8008dc0:	f43f ab63 	beq.w	800848a <_strtod_l+0x272>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f7ff bb9e 	b.w	8008506 <_strtod_l+0x2ee>
 8008dca:	bf00      	nop
 8008dcc:	f3af 8000 	nop.w
 8008dd0:	ffc00000 	.word	0xffc00000
 8008dd4:	41dfffff 	.word	0x41dfffff
 8008dd8:	94a03595 	.word	0x94a03595
 8008ddc:	3fcfffff 	.word	0x3fcfffff

08008de0 <_strtod_r>:
 8008de0:	4b01      	ldr	r3, [pc, #4]	@ (8008de8 <_strtod_r+0x8>)
 8008de2:	f7ff ba19 	b.w	8008218 <_strtod_l>
 8008de6:	bf00      	nop
 8008de8:	2000008c 	.word	0x2000008c

08008dec <_strtol_l.constprop.0>:
 8008dec:	2b24      	cmp	r3, #36	@ 0x24
 8008dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df2:	4686      	mov	lr, r0
 8008df4:	4690      	mov	r8, r2
 8008df6:	d801      	bhi.n	8008dfc <_strtol_l.constprop.0+0x10>
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d106      	bne.n	8008e0a <_strtol_l.constprop.0+0x1e>
 8008dfc:	f7fd fdba 	bl	8006974 <__errno>
 8008e00:	2316      	movs	r3, #22
 8008e02:	6003      	str	r3, [r0, #0]
 8008e04:	2000      	movs	r0, #0
 8008e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0a:	4834      	ldr	r0, [pc, #208]	@ (8008edc <_strtol_l.constprop.0+0xf0>)
 8008e0c:	460d      	mov	r5, r1
 8008e0e:	462a      	mov	r2, r5
 8008e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e14:	5d06      	ldrb	r6, [r0, r4]
 8008e16:	f016 0608 	ands.w	r6, r6, #8
 8008e1a:	d1f8      	bne.n	8008e0e <_strtol_l.constprop.0+0x22>
 8008e1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008e1e:	d12d      	bne.n	8008e7c <_strtol_l.constprop.0+0x90>
 8008e20:	782c      	ldrb	r4, [r5, #0]
 8008e22:	2601      	movs	r6, #1
 8008e24:	1c95      	adds	r5, r2, #2
 8008e26:	f033 0210 	bics.w	r2, r3, #16
 8008e2a:	d109      	bne.n	8008e40 <_strtol_l.constprop.0+0x54>
 8008e2c:	2c30      	cmp	r4, #48	@ 0x30
 8008e2e:	d12a      	bne.n	8008e86 <_strtol_l.constprop.0+0x9a>
 8008e30:	782a      	ldrb	r2, [r5, #0]
 8008e32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008e36:	2a58      	cmp	r2, #88	@ 0x58
 8008e38:	d125      	bne.n	8008e86 <_strtol_l.constprop.0+0x9a>
 8008e3a:	786c      	ldrb	r4, [r5, #1]
 8008e3c:	2310      	movs	r3, #16
 8008e3e:	3502      	adds	r5, #2
 8008e40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008e44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e48:	2200      	movs	r2, #0
 8008e4a:	fbbc f9f3 	udiv	r9, ip, r3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	fb03 ca19 	mls	sl, r3, r9, ip
 8008e54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008e58:	2f09      	cmp	r7, #9
 8008e5a:	d81b      	bhi.n	8008e94 <_strtol_l.constprop.0+0xa8>
 8008e5c:	463c      	mov	r4, r7
 8008e5e:	42a3      	cmp	r3, r4
 8008e60:	dd27      	ble.n	8008eb2 <_strtol_l.constprop.0+0xc6>
 8008e62:	1c57      	adds	r7, r2, #1
 8008e64:	d007      	beq.n	8008e76 <_strtol_l.constprop.0+0x8a>
 8008e66:	4581      	cmp	r9, r0
 8008e68:	d320      	bcc.n	8008eac <_strtol_l.constprop.0+0xc0>
 8008e6a:	d101      	bne.n	8008e70 <_strtol_l.constprop.0+0x84>
 8008e6c:	45a2      	cmp	sl, r4
 8008e6e:	db1d      	blt.n	8008eac <_strtol_l.constprop.0+0xc0>
 8008e70:	fb00 4003 	mla	r0, r0, r3, r4
 8008e74:	2201      	movs	r2, #1
 8008e76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e7a:	e7eb      	b.n	8008e54 <_strtol_l.constprop.0+0x68>
 8008e7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8008e7e:	bf04      	itt	eq
 8008e80:	782c      	ldrbeq	r4, [r5, #0]
 8008e82:	1c95      	addeq	r5, r2, #2
 8008e84:	e7cf      	b.n	8008e26 <_strtol_l.constprop.0+0x3a>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1da      	bne.n	8008e40 <_strtol_l.constprop.0+0x54>
 8008e8a:	2c30      	cmp	r4, #48	@ 0x30
 8008e8c:	bf0c      	ite	eq
 8008e8e:	2308      	moveq	r3, #8
 8008e90:	230a      	movne	r3, #10
 8008e92:	e7d5      	b.n	8008e40 <_strtol_l.constprop.0+0x54>
 8008e94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008e98:	2f19      	cmp	r7, #25
 8008e9a:	d801      	bhi.n	8008ea0 <_strtol_l.constprop.0+0xb4>
 8008e9c:	3c37      	subs	r4, #55	@ 0x37
 8008e9e:	e7de      	b.n	8008e5e <_strtol_l.constprop.0+0x72>
 8008ea0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008ea4:	2f19      	cmp	r7, #25
 8008ea6:	d804      	bhi.n	8008eb2 <_strtol_l.constprop.0+0xc6>
 8008ea8:	3c57      	subs	r4, #87	@ 0x57
 8008eaa:	e7d8      	b.n	8008e5e <_strtol_l.constprop.0+0x72>
 8008eac:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb0:	e7e1      	b.n	8008e76 <_strtol_l.constprop.0+0x8a>
 8008eb2:	1c53      	adds	r3, r2, #1
 8008eb4:	d108      	bne.n	8008ec8 <_strtol_l.constprop.0+0xdc>
 8008eb6:	2322      	movs	r3, #34	@ 0x22
 8008eb8:	f8ce 3000 	str.w	r3, [lr]
 8008ebc:	4660      	mov	r0, ip
 8008ebe:	f1b8 0f00 	cmp.w	r8, #0
 8008ec2:	d0a0      	beq.n	8008e06 <_strtol_l.constprop.0+0x1a>
 8008ec4:	1e69      	subs	r1, r5, #1
 8008ec6:	e006      	b.n	8008ed6 <_strtol_l.constprop.0+0xea>
 8008ec8:	b106      	cbz	r6, 8008ecc <_strtol_l.constprop.0+0xe0>
 8008eca:	4240      	negs	r0, r0
 8008ecc:	f1b8 0f00 	cmp.w	r8, #0
 8008ed0:	d099      	beq.n	8008e06 <_strtol_l.constprop.0+0x1a>
 8008ed2:	2a00      	cmp	r2, #0
 8008ed4:	d1f6      	bne.n	8008ec4 <_strtol_l.constprop.0+0xd8>
 8008ed6:	f8c8 1000 	str.w	r1, [r8]
 8008eda:	e794      	b.n	8008e06 <_strtol_l.constprop.0+0x1a>
 8008edc:	0800aa59 	.word	0x0800aa59

08008ee0 <_strtol_r>:
 8008ee0:	f7ff bf84 	b.w	8008dec <_strtol_l.constprop.0>

08008ee4 <__ssputs_r>:
 8008ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee8:	688e      	ldr	r6, [r1, #8]
 8008eea:	461f      	mov	r7, r3
 8008eec:	42be      	cmp	r6, r7
 8008eee:	680b      	ldr	r3, [r1, #0]
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	4690      	mov	r8, r2
 8008ef6:	d82d      	bhi.n	8008f54 <__ssputs_r+0x70>
 8008ef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008efc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f00:	d026      	beq.n	8008f50 <__ssputs_r+0x6c>
 8008f02:	6965      	ldr	r5, [r4, #20]
 8008f04:	6909      	ldr	r1, [r1, #16]
 8008f06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f0a:	eba3 0901 	sub.w	r9, r3, r1
 8008f0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f12:	1c7b      	adds	r3, r7, #1
 8008f14:	444b      	add	r3, r9
 8008f16:	106d      	asrs	r5, r5, #1
 8008f18:	429d      	cmp	r5, r3
 8008f1a:	bf38      	it	cc
 8008f1c:	461d      	movcc	r5, r3
 8008f1e:	0553      	lsls	r3, r2, #21
 8008f20:	d527      	bpl.n	8008f72 <__ssputs_r+0x8e>
 8008f22:	4629      	mov	r1, r5
 8008f24:	f7fe fc1c 	bl	8007760 <_malloc_r>
 8008f28:	4606      	mov	r6, r0
 8008f2a:	b360      	cbz	r0, 8008f86 <__ssputs_r+0xa2>
 8008f2c:	6921      	ldr	r1, [r4, #16]
 8008f2e:	464a      	mov	r2, r9
 8008f30:	f000 ff6c 	bl	8009e0c <memcpy>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	6126      	str	r6, [r4, #16]
 8008f42:	6165      	str	r5, [r4, #20]
 8008f44:	444e      	add	r6, r9
 8008f46:	eba5 0509 	sub.w	r5, r5, r9
 8008f4a:	6026      	str	r6, [r4, #0]
 8008f4c:	60a5      	str	r5, [r4, #8]
 8008f4e:	463e      	mov	r6, r7
 8008f50:	42be      	cmp	r6, r7
 8008f52:	d900      	bls.n	8008f56 <__ssputs_r+0x72>
 8008f54:	463e      	mov	r6, r7
 8008f56:	6820      	ldr	r0, [r4, #0]
 8008f58:	4632      	mov	r2, r6
 8008f5a:	4641      	mov	r1, r8
 8008f5c:	f000 fef7 	bl	8009d4e <memmove>
 8008f60:	68a3      	ldr	r3, [r4, #8]
 8008f62:	1b9b      	subs	r3, r3, r6
 8008f64:	60a3      	str	r3, [r4, #8]
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	4433      	add	r3, r6
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f72:	462a      	mov	r2, r5
 8008f74:	f001 fadd 	bl	800a532 <_realloc_r>
 8008f78:	4606      	mov	r6, r0
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d1e0      	bne.n	8008f40 <__ssputs_r+0x5c>
 8008f7e:	6921      	ldr	r1, [r4, #16]
 8008f80:	4650      	mov	r0, sl
 8008f82:	f7fe fb79 	bl	8007678 <_free_r>
 8008f86:	230c      	movs	r3, #12
 8008f88:	f8ca 3000 	str.w	r3, [sl]
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	f04f 30ff 	mov.w	r0, #4294967295
 8008f98:	e7e9      	b.n	8008f6e <__ssputs_r+0x8a>
	...

08008f9c <_svfiprintf_r>:
 8008f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa0:	4698      	mov	r8, r3
 8008fa2:	898b      	ldrh	r3, [r1, #12]
 8008fa4:	061b      	lsls	r3, r3, #24
 8008fa6:	b09d      	sub	sp, #116	@ 0x74
 8008fa8:	4607      	mov	r7, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	4614      	mov	r4, r2
 8008fae:	d510      	bpl.n	8008fd2 <_svfiprintf_r+0x36>
 8008fb0:	690b      	ldr	r3, [r1, #16]
 8008fb2:	b973      	cbnz	r3, 8008fd2 <_svfiprintf_r+0x36>
 8008fb4:	2140      	movs	r1, #64	@ 0x40
 8008fb6:	f7fe fbd3 	bl	8007760 <_malloc_r>
 8008fba:	6028      	str	r0, [r5, #0]
 8008fbc:	6128      	str	r0, [r5, #16]
 8008fbe:	b930      	cbnz	r0, 8008fce <_svfiprintf_r+0x32>
 8008fc0:	230c      	movs	r3, #12
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	b01d      	add	sp, #116	@ 0x74
 8008fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fce:	2340      	movs	r3, #64	@ 0x40
 8008fd0:	616b      	str	r3, [r5, #20]
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd6:	2320      	movs	r3, #32
 8008fd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe0:	2330      	movs	r3, #48	@ 0x30
 8008fe2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009180 <_svfiprintf_r+0x1e4>
 8008fe6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fea:	f04f 0901 	mov.w	r9, #1
 8008fee:	4623      	mov	r3, r4
 8008ff0:	469a      	mov	sl, r3
 8008ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ff6:	b10a      	cbz	r2, 8008ffc <_svfiprintf_r+0x60>
 8008ff8:	2a25      	cmp	r2, #37	@ 0x25
 8008ffa:	d1f9      	bne.n	8008ff0 <_svfiprintf_r+0x54>
 8008ffc:	ebba 0b04 	subs.w	fp, sl, r4
 8009000:	d00b      	beq.n	800901a <_svfiprintf_r+0x7e>
 8009002:	465b      	mov	r3, fp
 8009004:	4622      	mov	r2, r4
 8009006:	4629      	mov	r1, r5
 8009008:	4638      	mov	r0, r7
 800900a:	f7ff ff6b 	bl	8008ee4 <__ssputs_r>
 800900e:	3001      	adds	r0, #1
 8009010:	f000 80a7 	beq.w	8009162 <_svfiprintf_r+0x1c6>
 8009014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009016:	445a      	add	r2, fp
 8009018:	9209      	str	r2, [sp, #36]	@ 0x24
 800901a:	f89a 3000 	ldrb.w	r3, [sl]
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 809f 	beq.w	8009162 <_svfiprintf_r+0x1c6>
 8009024:	2300      	movs	r3, #0
 8009026:	f04f 32ff 	mov.w	r2, #4294967295
 800902a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800902e:	f10a 0a01 	add.w	sl, sl, #1
 8009032:	9304      	str	r3, [sp, #16]
 8009034:	9307      	str	r3, [sp, #28]
 8009036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800903a:	931a      	str	r3, [sp, #104]	@ 0x68
 800903c:	4654      	mov	r4, sl
 800903e:	2205      	movs	r2, #5
 8009040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009044:	484e      	ldr	r0, [pc, #312]	@ (8009180 <_svfiprintf_r+0x1e4>)
 8009046:	f7f7 f8cb 	bl	80001e0 <memchr>
 800904a:	9a04      	ldr	r2, [sp, #16]
 800904c:	b9d8      	cbnz	r0, 8009086 <_svfiprintf_r+0xea>
 800904e:	06d0      	lsls	r0, r2, #27
 8009050:	bf44      	itt	mi
 8009052:	2320      	movmi	r3, #32
 8009054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009058:	0711      	lsls	r1, r2, #28
 800905a:	bf44      	itt	mi
 800905c:	232b      	movmi	r3, #43	@ 0x2b
 800905e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009062:	f89a 3000 	ldrb.w	r3, [sl]
 8009066:	2b2a      	cmp	r3, #42	@ 0x2a
 8009068:	d015      	beq.n	8009096 <_svfiprintf_r+0xfa>
 800906a:	9a07      	ldr	r2, [sp, #28]
 800906c:	4654      	mov	r4, sl
 800906e:	2000      	movs	r0, #0
 8009070:	f04f 0c0a 	mov.w	ip, #10
 8009074:	4621      	mov	r1, r4
 8009076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800907a:	3b30      	subs	r3, #48	@ 0x30
 800907c:	2b09      	cmp	r3, #9
 800907e:	d94b      	bls.n	8009118 <_svfiprintf_r+0x17c>
 8009080:	b1b0      	cbz	r0, 80090b0 <_svfiprintf_r+0x114>
 8009082:	9207      	str	r2, [sp, #28]
 8009084:	e014      	b.n	80090b0 <_svfiprintf_r+0x114>
 8009086:	eba0 0308 	sub.w	r3, r0, r8
 800908a:	fa09 f303 	lsl.w	r3, r9, r3
 800908e:	4313      	orrs	r3, r2
 8009090:	9304      	str	r3, [sp, #16]
 8009092:	46a2      	mov	sl, r4
 8009094:	e7d2      	b.n	800903c <_svfiprintf_r+0xa0>
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	1d19      	adds	r1, r3, #4
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	9103      	str	r1, [sp, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	bfbb      	ittet	lt
 80090a2:	425b      	neglt	r3, r3
 80090a4:	f042 0202 	orrlt.w	r2, r2, #2
 80090a8:	9307      	strge	r3, [sp, #28]
 80090aa:	9307      	strlt	r3, [sp, #28]
 80090ac:	bfb8      	it	lt
 80090ae:	9204      	strlt	r2, [sp, #16]
 80090b0:	7823      	ldrb	r3, [r4, #0]
 80090b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80090b4:	d10a      	bne.n	80090cc <_svfiprintf_r+0x130>
 80090b6:	7863      	ldrb	r3, [r4, #1]
 80090b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ba:	d132      	bne.n	8009122 <_svfiprintf_r+0x186>
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	1d1a      	adds	r2, r3, #4
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	9203      	str	r2, [sp, #12]
 80090c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090c8:	3402      	adds	r4, #2
 80090ca:	9305      	str	r3, [sp, #20]
 80090cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009190 <_svfiprintf_r+0x1f4>
 80090d0:	7821      	ldrb	r1, [r4, #0]
 80090d2:	2203      	movs	r2, #3
 80090d4:	4650      	mov	r0, sl
 80090d6:	f7f7 f883 	bl	80001e0 <memchr>
 80090da:	b138      	cbz	r0, 80090ec <_svfiprintf_r+0x150>
 80090dc:	9b04      	ldr	r3, [sp, #16]
 80090de:	eba0 000a 	sub.w	r0, r0, sl
 80090e2:	2240      	movs	r2, #64	@ 0x40
 80090e4:	4082      	lsls	r2, r0
 80090e6:	4313      	orrs	r3, r2
 80090e8:	3401      	adds	r4, #1
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f0:	4824      	ldr	r0, [pc, #144]	@ (8009184 <_svfiprintf_r+0x1e8>)
 80090f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090f6:	2206      	movs	r2, #6
 80090f8:	f7f7 f872 	bl	80001e0 <memchr>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d036      	beq.n	800916e <_svfiprintf_r+0x1d2>
 8009100:	4b21      	ldr	r3, [pc, #132]	@ (8009188 <_svfiprintf_r+0x1ec>)
 8009102:	bb1b      	cbnz	r3, 800914c <_svfiprintf_r+0x1b0>
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	3307      	adds	r3, #7
 8009108:	f023 0307 	bic.w	r3, r3, #7
 800910c:	3308      	adds	r3, #8
 800910e:	9303      	str	r3, [sp, #12]
 8009110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009112:	4433      	add	r3, r6
 8009114:	9309      	str	r3, [sp, #36]	@ 0x24
 8009116:	e76a      	b.n	8008fee <_svfiprintf_r+0x52>
 8009118:	fb0c 3202 	mla	r2, ip, r2, r3
 800911c:	460c      	mov	r4, r1
 800911e:	2001      	movs	r0, #1
 8009120:	e7a8      	b.n	8009074 <_svfiprintf_r+0xd8>
 8009122:	2300      	movs	r3, #0
 8009124:	3401      	adds	r4, #1
 8009126:	9305      	str	r3, [sp, #20]
 8009128:	4619      	mov	r1, r3
 800912a:	f04f 0c0a 	mov.w	ip, #10
 800912e:	4620      	mov	r0, r4
 8009130:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009134:	3a30      	subs	r2, #48	@ 0x30
 8009136:	2a09      	cmp	r2, #9
 8009138:	d903      	bls.n	8009142 <_svfiprintf_r+0x1a6>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0c6      	beq.n	80090cc <_svfiprintf_r+0x130>
 800913e:	9105      	str	r1, [sp, #20]
 8009140:	e7c4      	b.n	80090cc <_svfiprintf_r+0x130>
 8009142:	fb0c 2101 	mla	r1, ip, r1, r2
 8009146:	4604      	mov	r4, r0
 8009148:	2301      	movs	r3, #1
 800914a:	e7f0      	b.n	800912e <_svfiprintf_r+0x192>
 800914c:	ab03      	add	r3, sp, #12
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	462a      	mov	r2, r5
 8009152:	4b0e      	ldr	r3, [pc, #56]	@ (800918c <_svfiprintf_r+0x1f0>)
 8009154:	a904      	add	r1, sp, #16
 8009156:	4638      	mov	r0, r7
 8009158:	f7fc fb98 	bl	800588c <_printf_float>
 800915c:	1c42      	adds	r2, r0, #1
 800915e:	4606      	mov	r6, r0
 8009160:	d1d6      	bne.n	8009110 <_svfiprintf_r+0x174>
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	065b      	lsls	r3, r3, #25
 8009166:	f53f af2d 	bmi.w	8008fc4 <_svfiprintf_r+0x28>
 800916a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800916c:	e72c      	b.n	8008fc8 <_svfiprintf_r+0x2c>
 800916e:	ab03      	add	r3, sp, #12
 8009170:	9300      	str	r3, [sp, #0]
 8009172:	462a      	mov	r2, r5
 8009174:	4b05      	ldr	r3, [pc, #20]	@ (800918c <_svfiprintf_r+0x1f0>)
 8009176:	a904      	add	r1, sp, #16
 8009178:	4638      	mov	r0, r7
 800917a:	f7fc fe1f 	bl	8005dbc <_printf_i>
 800917e:	e7ed      	b.n	800915c <_svfiprintf_r+0x1c0>
 8009180:	0800ab59 	.word	0x0800ab59
 8009184:	0800ab63 	.word	0x0800ab63
 8009188:	0800588d 	.word	0x0800588d
 800918c:	08008ee5 	.word	0x08008ee5
 8009190:	0800ab5f 	.word	0x0800ab5f

08009194 <_sungetc_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	1c4b      	adds	r3, r1, #1
 8009198:	4614      	mov	r4, r2
 800919a:	d103      	bne.n	80091a4 <_sungetc_r+0x10>
 800919c:	f04f 35ff 	mov.w	r5, #4294967295
 80091a0:	4628      	mov	r0, r5
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	8993      	ldrh	r3, [r2, #12]
 80091a6:	f023 0320 	bic.w	r3, r3, #32
 80091aa:	8193      	strh	r3, [r2, #12]
 80091ac:	6853      	ldr	r3, [r2, #4]
 80091ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80091b0:	b2cd      	uxtb	r5, r1
 80091b2:	b18a      	cbz	r2, 80091d8 <_sungetc_r+0x44>
 80091b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80091b6:	429a      	cmp	r2, r3
 80091b8:	dd08      	ble.n	80091cc <_sungetc_r+0x38>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	1e5a      	subs	r2, r3, #1
 80091be:	6022      	str	r2, [r4, #0]
 80091c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80091c4:	6863      	ldr	r3, [r4, #4]
 80091c6:	3301      	adds	r3, #1
 80091c8:	6063      	str	r3, [r4, #4]
 80091ca:	e7e9      	b.n	80091a0 <_sungetc_r+0xc>
 80091cc:	4621      	mov	r1, r4
 80091ce:	f000 fd84 	bl	8009cda <__submore>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d0f1      	beq.n	80091ba <_sungetc_r+0x26>
 80091d6:	e7e1      	b.n	800919c <_sungetc_r+0x8>
 80091d8:	6921      	ldr	r1, [r4, #16]
 80091da:	6822      	ldr	r2, [r4, #0]
 80091dc:	b141      	cbz	r1, 80091f0 <_sungetc_r+0x5c>
 80091de:	4291      	cmp	r1, r2
 80091e0:	d206      	bcs.n	80091f0 <_sungetc_r+0x5c>
 80091e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80091e6:	42a9      	cmp	r1, r5
 80091e8:	d102      	bne.n	80091f0 <_sungetc_r+0x5c>
 80091ea:	3a01      	subs	r2, #1
 80091ec:	6022      	str	r2, [r4, #0]
 80091ee:	e7ea      	b.n	80091c6 <_sungetc_r+0x32>
 80091f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80091f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80091fa:	2303      	movs	r3, #3
 80091fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80091fe:	4623      	mov	r3, r4
 8009200:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	2301      	movs	r3, #1
 8009208:	e7de      	b.n	80091c8 <_sungetc_r+0x34>

0800920a <__ssrefill_r>:
 800920a:	b510      	push	{r4, lr}
 800920c:	460c      	mov	r4, r1
 800920e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009210:	b169      	cbz	r1, 800922e <__ssrefill_r+0x24>
 8009212:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009216:	4299      	cmp	r1, r3
 8009218:	d001      	beq.n	800921e <__ssrefill_r+0x14>
 800921a:	f7fe fa2d 	bl	8007678 <_free_r>
 800921e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009220:	6063      	str	r3, [r4, #4]
 8009222:	2000      	movs	r0, #0
 8009224:	6360      	str	r0, [r4, #52]	@ 0x34
 8009226:	b113      	cbz	r3, 800922e <__ssrefill_r+0x24>
 8009228:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800922a:	6023      	str	r3, [r4, #0]
 800922c:	bd10      	pop	{r4, pc}
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	2300      	movs	r3, #0
 8009234:	6063      	str	r3, [r4, #4]
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	f043 0320 	orr.w	r3, r3, #32
 800923c:	81a3      	strh	r3, [r4, #12]
 800923e:	f04f 30ff 	mov.w	r0, #4294967295
 8009242:	e7f3      	b.n	800922c <__ssrefill_r+0x22>

08009244 <__ssvfiscanf_r>:
 8009244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009248:	460c      	mov	r4, r1
 800924a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800924e:	2100      	movs	r1, #0
 8009250:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009254:	49a5      	ldr	r1, [pc, #660]	@ (80094ec <__ssvfiscanf_r+0x2a8>)
 8009256:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009258:	f10d 0804 	add.w	r8, sp, #4
 800925c:	49a4      	ldr	r1, [pc, #656]	@ (80094f0 <__ssvfiscanf_r+0x2ac>)
 800925e:	4fa5      	ldr	r7, [pc, #660]	@ (80094f4 <__ssvfiscanf_r+0x2b0>)
 8009260:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009264:	4606      	mov	r6, r0
 8009266:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	7813      	ldrb	r3, [r2, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	f000 8158 	beq.w	8009522 <__ssvfiscanf_r+0x2de>
 8009272:	5cf9      	ldrb	r1, [r7, r3]
 8009274:	f011 0108 	ands.w	r1, r1, #8
 8009278:	f102 0501 	add.w	r5, r2, #1
 800927c:	d019      	beq.n	80092b2 <__ssvfiscanf_r+0x6e>
 800927e:	6863      	ldr	r3, [r4, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	dd0f      	ble.n	80092a4 <__ssvfiscanf_r+0x60>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	5cba      	ldrb	r2, [r7, r2]
 800928a:	0712      	lsls	r2, r2, #28
 800928c:	d401      	bmi.n	8009292 <__ssvfiscanf_r+0x4e>
 800928e:	462a      	mov	r2, r5
 8009290:	e7eb      	b.n	800926a <__ssvfiscanf_r+0x26>
 8009292:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009294:	3201      	adds	r2, #1
 8009296:	9245      	str	r2, [sp, #276]	@ 0x114
 8009298:	6862      	ldr	r2, [r4, #4]
 800929a:	3301      	adds	r3, #1
 800929c:	3a01      	subs	r2, #1
 800929e:	6062      	str	r2, [r4, #4]
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	e7ec      	b.n	800927e <__ssvfiscanf_r+0x3a>
 80092a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80092a6:	4621      	mov	r1, r4
 80092a8:	4630      	mov	r0, r6
 80092aa:	4798      	blx	r3
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d0e9      	beq.n	8009284 <__ssvfiscanf_r+0x40>
 80092b0:	e7ed      	b.n	800928e <__ssvfiscanf_r+0x4a>
 80092b2:	2b25      	cmp	r3, #37	@ 0x25
 80092b4:	d012      	beq.n	80092dc <__ssvfiscanf_r+0x98>
 80092b6:	4699      	mov	r9, r3
 80092b8:	6863      	ldr	r3, [r4, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f340 8093 	ble.w	80093e6 <__ssvfiscanf_r+0x1a2>
 80092c0:	6822      	ldr	r2, [r4, #0]
 80092c2:	7813      	ldrb	r3, [r2, #0]
 80092c4:	454b      	cmp	r3, r9
 80092c6:	f040 812c 	bne.w	8009522 <__ssvfiscanf_r+0x2de>
 80092ca:	6863      	ldr	r3, [r4, #4]
 80092cc:	3b01      	subs	r3, #1
 80092ce:	6063      	str	r3, [r4, #4]
 80092d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80092d2:	3201      	adds	r2, #1
 80092d4:	3301      	adds	r3, #1
 80092d6:	6022      	str	r2, [r4, #0]
 80092d8:	9345      	str	r3, [sp, #276]	@ 0x114
 80092da:	e7d8      	b.n	800928e <__ssvfiscanf_r+0x4a>
 80092dc:	9141      	str	r1, [sp, #260]	@ 0x104
 80092de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80092e0:	7853      	ldrb	r3, [r2, #1]
 80092e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80092e4:	bf02      	ittt	eq
 80092e6:	2310      	moveq	r3, #16
 80092e8:	1c95      	addeq	r5, r2, #2
 80092ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 80092ec:	220a      	movs	r2, #10
 80092ee:	46a9      	mov	r9, r5
 80092f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80092f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80092f8:	2b09      	cmp	r3, #9
 80092fa:	d91e      	bls.n	800933a <__ssvfiscanf_r+0xf6>
 80092fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80094f8 <__ssvfiscanf_r+0x2b4>
 8009300:	2203      	movs	r2, #3
 8009302:	4650      	mov	r0, sl
 8009304:	f7f6 ff6c 	bl	80001e0 <memchr>
 8009308:	b138      	cbz	r0, 800931a <__ssvfiscanf_r+0xd6>
 800930a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800930c:	eba0 000a 	sub.w	r0, r0, sl
 8009310:	2301      	movs	r3, #1
 8009312:	4083      	lsls	r3, r0
 8009314:	4313      	orrs	r3, r2
 8009316:	9341      	str	r3, [sp, #260]	@ 0x104
 8009318:	464d      	mov	r5, r9
 800931a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800931e:	2b78      	cmp	r3, #120	@ 0x78
 8009320:	d806      	bhi.n	8009330 <__ssvfiscanf_r+0xec>
 8009322:	2b57      	cmp	r3, #87	@ 0x57
 8009324:	d810      	bhi.n	8009348 <__ssvfiscanf_r+0x104>
 8009326:	2b25      	cmp	r3, #37	@ 0x25
 8009328:	d0c5      	beq.n	80092b6 <__ssvfiscanf_r+0x72>
 800932a:	d857      	bhi.n	80093dc <__ssvfiscanf_r+0x198>
 800932c:	2b00      	cmp	r3, #0
 800932e:	d065      	beq.n	80093fc <__ssvfiscanf_r+0x1b8>
 8009330:	2303      	movs	r3, #3
 8009332:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009334:	230a      	movs	r3, #10
 8009336:	9342      	str	r3, [sp, #264]	@ 0x108
 8009338:	e078      	b.n	800942c <__ssvfiscanf_r+0x1e8>
 800933a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800933c:	fb02 1103 	mla	r1, r2, r3, r1
 8009340:	3930      	subs	r1, #48	@ 0x30
 8009342:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009344:	464d      	mov	r5, r9
 8009346:	e7d2      	b.n	80092ee <__ssvfiscanf_r+0xaa>
 8009348:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800934c:	2a20      	cmp	r2, #32
 800934e:	d8ef      	bhi.n	8009330 <__ssvfiscanf_r+0xec>
 8009350:	a101      	add	r1, pc, #4	@ (adr r1, 8009358 <__ssvfiscanf_r+0x114>)
 8009352:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009356:	bf00      	nop
 8009358:	0800940b 	.word	0x0800940b
 800935c:	08009331 	.word	0x08009331
 8009360:	08009331 	.word	0x08009331
 8009364:	08009465 	.word	0x08009465
 8009368:	08009331 	.word	0x08009331
 800936c:	08009331 	.word	0x08009331
 8009370:	08009331 	.word	0x08009331
 8009374:	08009331 	.word	0x08009331
 8009378:	08009331 	.word	0x08009331
 800937c:	08009331 	.word	0x08009331
 8009380:	08009331 	.word	0x08009331
 8009384:	0800947b 	.word	0x0800947b
 8009388:	08009461 	.word	0x08009461
 800938c:	080093e3 	.word	0x080093e3
 8009390:	080093e3 	.word	0x080093e3
 8009394:	080093e3 	.word	0x080093e3
 8009398:	08009331 	.word	0x08009331
 800939c:	0800941d 	.word	0x0800941d
 80093a0:	08009331 	.word	0x08009331
 80093a4:	08009331 	.word	0x08009331
 80093a8:	08009331 	.word	0x08009331
 80093ac:	08009331 	.word	0x08009331
 80093b0:	0800948b 	.word	0x0800948b
 80093b4:	08009425 	.word	0x08009425
 80093b8:	08009403 	.word	0x08009403
 80093bc:	08009331 	.word	0x08009331
 80093c0:	08009331 	.word	0x08009331
 80093c4:	08009487 	.word	0x08009487
 80093c8:	08009331 	.word	0x08009331
 80093cc:	08009461 	.word	0x08009461
 80093d0:	08009331 	.word	0x08009331
 80093d4:	08009331 	.word	0x08009331
 80093d8:	0800940b 	.word	0x0800940b
 80093dc:	3b45      	subs	r3, #69	@ 0x45
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d8a6      	bhi.n	8009330 <__ssvfiscanf_r+0xec>
 80093e2:	2305      	movs	r3, #5
 80093e4:	e021      	b.n	800942a <__ssvfiscanf_r+0x1e6>
 80093e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80093e8:	4621      	mov	r1, r4
 80093ea:	4630      	mov	r0, r6
 80093ec:	4798      	blx	r3
 80093ee:	2800      	cmp	r0, #0
 80093f0:	f43f af66 	beq.w	80092c0 <__ssvfiscanf_r+0x7c>
 80093f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f040 808b 	bne.w	8009512 <__ssvfiscanf_r+0x2ce>
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	e08b      	b.n	800951a <__ssvfiscanf_r+0x2d6>
 8009402:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009404:	f042 0220 	orr.w	r2, r2, #32
 8009408:	9241      	str	r2, [sp, #260]	@ 0x104
 800940a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800940c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009410:	9241      	str	r2, [sp, #260]	@ 0x104
 8009412:	2210      	movs	r2, #16
 8009414:	2b6e      	cmp	r3, #110	@ 0x6e
 8009416:	9242      	str	r2, [sp, #264]	@ 0x108
 8009418:	d902      	bls.n	8009420 <__ssvfiscanf_r+0x1dc>
 800941a:	e005      	b.n	8009428 <__ssvfiscanf_r+0x1e4>
 800941c:	2300      	movs	r3, #0
 800941e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009420:	2303      	movs	r3, #3
 8009422:	e002      	b.n	800942a <__ssvfiscanf_r+0x1e6>
 8009424:	2308      	movs	r3, #8
 8009426:	9342      	str	r3, [sp, #264]	@ 0x108
 8009428:	2304      	movs	r3, #4
 800942a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800942c:	6863      	ldr	r3, [r4, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	dd39      	ble.n	80094a6 <__ssvfiscanf_r+0x262>
 8009432:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009434:	0659      	lsls	r1, r3, #25
 8009436:	d404      	bmi.n	8009442 <__ssvfiscanf_r+0x1fe>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	781a      	ldrb	r2, [r3, #0]
 800943c:	5cba      	ldrb	r2, [r7, r2]
 800943e:	0712      	lsls	r2, r2, #28
 8009440:	d438      	bmi.n	80094b4 <__ssvfiscanf_r+0x270>
 8009442:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009444:	2b02      	cmp	r3, #2
 8009446:	dc47      	bgt.n	80094d8 <__ssvfiscanf_r+0x294>
 8009448:	466b      	mov	r3, sp
 800944a:	4622      	mov	r2, r4
 800944c:	a941      	add	r1, sp, #260	@ 0x104
 800944e:	4630      	mov	r0, r6
 8009450:	f000 f9ae 	bl	80097b0 <_scanf_chars>
 8009454:	2801      	cmp	r0, #1
 8009456:	d064      	beq.n	8009522 <__ssvfiscanf_r+0x2de>
 8009458:	2802      	cmp	r0, #2
 800945a:	f47f af18 	bne.w	800928e <__ssvfiscanf_r+0x4a>
 800945e:	e7c9      	b.n	80093f4 <__ssvfiscanf_r+0x1b0>
 8009460:	220a      	movs	r2, #10
 8009462:	e7d7      	b.n	8009414 <__ssvfiscanf_r+0x1d0>
 8009464:	4629      	mov	r1, r5
 8009466:	4640      	mov	r0, r8
 8009468:	f000 fbfe 	bl	8009c68 <__sccl>
 800946c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800946e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009472:	9341      	str	r3, [sp, #260]	@ 0x104
 8009474:	4605      	mov	r5, r0
 8009476:	2301      	movs	r3, #1
 8009478:	e7d7      	b.n	800942a <__ssvfiscanf_r+0x1e6>
 800947a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800947c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009480:	9341      	str	r3, [sp, #260]	@ 0x104
 8009482:	2300      	movs	r3, #0
 8009484:	e7d1      	b.n	800942a <__ssvfiscanf_r+0x1e6>
 8009486:	2302      	movs	r3, #2
 8009488:	e7cf      	b.n	800942a <__ssvfiscanf_r+0x1e6>
 800948a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800948c:	06c3      	lsls	r3, r0, #27
 800948e:	f53f aefe 	bmi.w	800928e <__ssvfiscanf_r+0x4a>
 8009492:	9b00      	ldr	r3, [sp, #0]
 8009494:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009496:	1d19      	adds	r1, r3, #4
 8009498:	9100      	str	r1, [sp, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	07c0      	lsls	r0, r0, #31
 800949e:	bf4c      	ite	mi
 80094a0:	801a      	strhmi	r2, [r3, #0]
 80094a2:	601a      	strpl	r2, [r3, #0]
 80094a4:	e6f3      	b.n	800928e <__ssvfiscanf_r+0x4a>
 80094a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80094a8:	4621      	mov	r1, r4
 80094aa:	4630      	mov	r0, r6
 80094ac:	4798      	blx	r3
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d0bf      	beq.n	8009432 <__ssvfiscanf_r+0x1ee>
 80094b2:	e79f      	b.n	80093f4 <__ssvfiscanf_r+0x1b0>
 80094b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80094b6:	3201      	adds	r2, #1
 80094b8:	9245      	str	r2, [sp, #276]	@ 0x114
 80094ba:	6862      	ldr	r2, [r4, #4]
 80094bc:	3a01      	subs	r2, #1
 80094be:	2a00      	cmp	r2, #0
 80094c0:	6062      	str	r2, [r4, #4]
 80094c2:	dd02      	ble.n	80094ca <__ssvfiscanf_r+0x286>
 80094c4:	3301      	adds	r3, #1
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	e7b6      	b.n	8009438 <__ssvfiscanf_r+0x1f4>
 80094ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80094cc:	4621      	mov	r1, r4
 80094ce:	4630      	mov	r0, r6
 80094d0:	4798      	blx	r3
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d0b0      	beq.n	8009438 <__ssvfiscanf_r+0x1f4>
 80094d6:	e78d      	b.n	80093f4 <__ssvfiscanf_r+0x1b0>
 80094d8:	2b04      	cmp	r3, #4
 80094da:	dc0f      	bgt.n	80094fc <__ssvfiscanf_r+0x2b8>
 80094dc:	466b      	mov	r3, sp
 80094de:	4622      	mov	r2, r4
 80094e0:	a941      	add	r1, sp, #260	@ 0x104
 80094e2:	4630      	mov	r0, r6
 80094e4:	f000 f9be 	bl	8009864 <_scanf_i>
 80094e8:	e7b4      	b.n	8009454 <__ssvfiscanf_r+0x210>
 80094ea:	bf00      	nop
 80094ec:	08009195 	.word	0x08009195
 80094f0:	0800920b 	.word	0x0800920b
 80094f4:	0800aa59 	.word	0x0800aa59
 80094f8:	0800ab5f 	.word	0x0800ab5f
 80094fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009528 <__ssvfiscanf_r+0x2e4>)
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f43f aec5 	beq.w	800928e <__ssvfiscanf_r+0x4a>
 8009504:	466b      	mov	r3, sp
 8009506:	4622      	mov	r2, r4
 8009508:	a941      	add	r1, sp, #260	@ 0x104
 800950a:	4630      	mov	r0, r6
 800950c:	f7fc fd76 	bl	8005ffc <_scanf_float>
 8009510:	e7a0      	b.n	8009454 <__ssvfiscanf_r+0x210>
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	065b      	lsls	r3, r3, #25
 8009516:	f53f af71 	bmi.w	80093fc <__ssvfiscanf_r+0x1b8>
 800951a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800951e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009522:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009524:	e7f9      	b.n	800951a <__ssvfiscanf_r+0x2d6>
 8009526:	bf00      	nop
 8009528:	08005ffd 	.word	0x08005ffd

0800952c <__sfputc_r>:
 800952c:	6893      	ldr	r3, [r2, #8]
 800952e:	3b01      	subs	r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	b410      	push	{r4}
 8009534:	6093      	str	r3, [r2, #8]
 8009536:	da08      	bge.n	800954a <__sfputc_r+0x1e>
 8009538:	6994      	ldr	r4, [r2, #24]
 800953a:	42a3      	cmp	r3, r4
 800953c:	db01      	blt.n	8009542 <__sfputc_r+0x16>
 800953e:	290a      	cmp	r1, #10
 8009540:	d103      	bne.n	800954a <__sfputc_r+0x1e>
 8009542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009546:	f7fd b92e 	b.w	80067a6 <__swbuf_r>
 800954a:	6813      	ldr	r3, [r2, #0]
 800954c:	1c58      	adds	r0, r3, #1
 800954e:	6010      	str	r0, [r2, #0]
 8009550:	7019      	strb	r1, [r3, #0]
 8009552:	4608      	mov	r0, r1
 8009554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009558:	4770      	bx	lr

0800955a <__sfputs_r>:
 800955a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955c:	4606      	mov	r6, r0
 800955e:	460f      	mov	r7, r1
 8009560:	4614      	mov	r4, r2
 8009562:	18d5      	adds	r5, r2, r3
 8009564:	42ac      	cmp	r4, r5
 8009566:	d101      	bne.n	800956c <__sfputs_r+0x12>
 8009568:	2000      	movs	r0, #0
 800956a:	e007      	b.n	800957c <__sfputs_r+0x22>
 800956c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009570:	463a      	mov	r2, r7
 8009572:	4630      	mov	r0, r6
 8009574:	f7ff ffda 	bl	800952c <__sfputc_r>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d1f3      	bne.n	8009564 <__sfputs_r+0xa>
 800957c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009580 <_vfiprintf_r>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	460d      	mov	r5, r1
 8009586:	b09d      	sub	sp, #116	@ 0x74
 8009588:	4614      	mov	r4, r2
 800958a:	4698      	mov	r8, r3
 800958c:	4606      	mov	r6, r0
 800958e:	b118      	cbz	r0, 8009598 <_vfiprintf_r+0x18>
 8009590:	6a03      	ldr	r3, [r0, #32]
 8009592:	b90b      	cbnz	r3, 8009598 <_vfiprintf_r+0x18>
 8009594:	f7fc ffd2 	bl	800653c <__sinit>
 8009598:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800959a:	07d9      	lsls	r1, r3, #31
 800959c:	d405      	bmi.n	80095aa <_vfiprintf_r+0x2a>
 800959e:	89ab      	ldrh	r3, [r5, #12]
 80095a0:	059a      	lsls	r2, r3, #22
 80095a2:	d402      	bmi.n	80095aa <_vfiprintf_r+0x2a>
 80095a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095a6:	f7fd fa10 	bl	80069ca <__retarget_lock_acquire_recursive>
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	071b      	lsls	r3, r3, #28
 80095ae:	d501      	bpl.n	80095b4 <_vfiprintf_r+0x34>
 80095b0:	692b      	ldr	r3, [r5, #16]
 80095b2:	b99b      	cbnz	r3, 80095dc <_vfiprintf_r+0x5c>
 80095b4:	4629      	mov	r1, r5
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7fd f934 	bl	8006824 <__swsetup_r>
 80095bc:	b170      	cbz	r0, 80095dc <_vfiprintf_r+0x5c>
 80095be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095c0:	07dc      	lsls	r4, r3, #31
 80095c2:	d504      	bpl.n	80095ce <_vfiprintf_r+0x4e>
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	b01d      	add	sp, #116	@ 0x74
 80095ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ce:	89ab      	ldrh	r3, [r5, #12]
 80095d0:	0598      	lsls	r0, r3, #22
 80095d2:	d4f7      	bmi.n	80095c4 <_vfiprintf_r+0x44>
 80095d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095d6:	f7fd f9f9 	bl	80069cc <__retarget_lock_release_recursive>
 80095da:	e7f3      	b.n	80095c4 <_vfiprintf_r+0x44>
 80095dc:	2300      	movs	r3, #0
 80095de:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e0:	2320      	movs	r3, #32
 80095e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ea:	2330      	movs	r3, #48	@ 0x30
 80095ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800979c <_vfiprintf_r+0x21c>
 80095f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095f4:	f04f 0901 	mov.w	r9, #1
 80095f8:	4623      	mov	r3, r4
 80095fa:	469a      	mov	sl, r3
 80095fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009600:	b10a      	cbz	r2, 8009606 <_vfiprintf_r+0x86>
 8009602:	2a25      	cmp	r2, #37	@ 0x25
 8009604:	d1f9      	bne.n	80095fa <_vfiprintf_r+0x7a>
 8009606:	ebba 0b04 	subs.w	fp, sl, r4
 800960a:	d00b      	beq.n	8009624 <_vfiprintf_r+0xa4>
 800960c:	465b      	mov	r3, fp
 800960e:	4622      	mov	r2, r4
 8009610:	4629      	mov	r1, r5
 8009612:	4630      	mov	r0, r6
 8009614:	f7ff ffa1 	bl	800955a <__sfputs_r>
 8009618:	3001      	adds	r0, #1
 800961a:	f000 80a7 	beq.w	800976c <_vfiprintf_r+0x1ec>
 800961e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009620:	445a      	add	r2, fp
 8009622:	9209      	str	r2, [sp, #36]	@ 0x24
 8009624:	f89a 3000 	ldrb.w	r3, [sl]
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 809f 	beq.w	800976c <_vfiprintf_r+0x1ec>
 800962e:	2300      	movs	r3, #0
 8009630:	f04f 32ff 	mov.w	r2, #4294967295
 8009634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009638:	f10a 0a01 	add.w	sl, sl, #1
 800963c:	9304      	str	r3, [sp, #16]
 800963e:	9307      	str	r3, [sp, #28]
 8009640:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009644:	931a      	str	r3, [sp, #104]	@ 0x68
 8009646:	4654      	mov	r4, sl
 8009648:	2205      	movs	r2, #5
 800964a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800964e:	4853      	ldr	r0, [pc, #332]	@ (800979c <_vfiprintf_r+0x21c>)
 8009650:	f7f6 fdc6 	bl	80001e0 <memchr>
 8009654:	9a04      	ldr	r2, [sp, #16]
 8009656:	b9d8      	cbnz	r0, 8009690 <_vfiprintf_r+0x110>
 8009658:	06d1      	lsls	r1, r2, #27
 800965a:	bf44      	itt	mi
 800965c:	2320      	movmi	r3, #32
 800965e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009662:	0713      	lsls	r3, r2, #28
 8009664:	bf44      	itt	mi
 8009666:	232b      	movmi	r3, #43	@ 0x2b
 8009668:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800966c:	f89a 3000 	ldrb.w	r3, [sl]
 8009670:	2b2a      	cmp	r3, #42	@ 0x2a
 8009672:	d015      	beq.n	80096a0 <_vfiprintf_r+0x120>
 8009674:	9a07      	ldr	r2, [sp, #28]
 8009676:	4654      	mov	r4, sl
 8009678:	2000      	movs	r0, #0
 800967a:	f04f 0c0a 	mov.w	ip, #10
 800967e:	4621      	mov	r1, r4
 8009680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009684:	3b30      	subs	r3, #48	@ 0x30
 8009686:	2b09      	cmp	r3, #9
 8009688:	d94b      	bls.n	8009722 <_vfiprintf_r+0x1a2>
 800968a:	b1b0      	cbz	r0, 80096ba <_vfiprintf_r+0x13a>
 800968c:	9207      	str	r2, [sp, #28]
 800968e:	e014      	b.n	80096ba <_vfiprintf_r+0x13a>
 8009690:	eba0 0308 	sub.w	r3, r0, r8
 8009694:	fa09 f303 	lsl.w	r3, r9, r3
 8009698:	4313      	orrs	r3, r2
 800969a:	9304      	str	r3, [sp, #16]
 800969c:	46a2      	mov	sl, r4
 800969e:	e7d2      	b.n	8009646 <_vfiprintf_r+0xc6>
 80096a0:	9b03      	ldr	r3, [sp, #12]
 80096a2:	1d19      	adds	r1, r3, #4
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	9103      	str	r1, [sp, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	bfbb      	ittet	lt
 80096ac:	425b      	neglt	r3, r3
 80096ae:	f042 0202 	orrlt.w	r2, r2, #2
 80096b2:	9307      	strge	r3, [sp, #28]
 80096b4:	9307      	strlt	r3, [sp, #28]
 80096b6:	bfb8      	it	lt
 80096b8:	9204      	strlt	r2, [sp, #16]
 80096ba:	7823      	ldrb	r3, [r4, #0]
 80096bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80096be:	d10a      	bne.n	80096d6 <_vfiprintf_r+0x156>
 80096c0:	7863      	ldrb	r3, [r4, #1]
 80096c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80096c4:	d132      	bne.n	800972c <_vfiprintf_r+0x1ac>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	1d1a      	adds	r2, r3, #4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	9203      	str	r2, [sp, #12]
 80096ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096d2:	3402      	adds	r4, #2
 80096d4:	9305      	str	r3, [sp, #20]
 80096d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097ac <_vfiprintf_r+0x22c>
 80096da:	7821      	ldrb	r1, [r4, #0]
 80096dc:	2203      	movs	r2, #3
 80096de:	4650      	mov	r0, sl
 80096e0:	f7f6 fd7e 	bl	80001e0 <memchr>
 80096e4:	b138      	cbz	r0, 80096f6 <_vfiprintf_r+0x176>
 80096e6:	9b04      	ldr	r3, [sp, #16]
 80096e8:	eba0 000a 	sub.w	r0, r0, sl
 80096ec:	2240      	movs	r2, #64	@ 0x40
 80096ee:	4082      	lsls	r2, r0
 80096f0:	4313      	orrs	r3, r2
 80096f2:	3401      	adds	r4, #1
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fa:	4829      	ldr	r0, [pc, #164]	@ (80097a0 <_vfiprintf_r+0x220>)
 80096fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009700:	2206      	movs	r2, #6
 8009702:	f7f6 fd6d 	bl	80001e0 <memchr>
 8009706:	2800      	cmp	r0, #0
 8009708:	d03f      	beq.n	800978a <_vfiprintf_r+0x20a>
 800970a:	4b26      	ldr	r3, [pc, #152]	@ (80097a4 <_vfiprintf_r+0x224>)
 800970c:	bb1b      	cbnz	r3, 8009756 <_vfiprintf_r+0x1d6>
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	3307      	adds	r3, #7
 8009712:	f023 0307 	bic.w	r3, r3, #7
 8009716:	3308      	adds	r3, #8
 8009718:	9303      	str	r3, [sp, #12]
 800971a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800971c:	443b      	add	r3, r7
 800971e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009720:	e76a      	b.n	80095f8 <_vfiprintf_r+0x78>
 8009722:	fb0c 3202 	mla	r2, ip, r2, r3
 8009726:	460c      	mov	r4, r1
 8009728:	2001      	movs	r0, #1
 800972a:	e7a8      	b.n	800967e <_vfiprintf_r+0xfe>
 800972c:	2300      	movs	r3, #0
 800972e:	3401      	adds	r4, #1
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	4619      	mov	r1, r3
 8009734:	f04f 0c0a 	mov.w	ip, #10
 8009738:	4620      	mov	r0, r4
 800973a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800973e:	3a30      	subs	r2, #48	@ 0x30
 8009740:	2a09      	cmp	r2, #9
 8009742:	d903      	bls.n	800974c <_vfiprintf_r+0x1cc>
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0c6      	beq.n	80096d6 <_vfiprintf_r+0x156>
 8009748:	9105      	str	r1, [sp, #20]
 800974a:	e7c4      	b.n	80096d6 <_vfiprintf_r+0x156>
 800974c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009750:	4604      	mov	r4, r0
 8009752:	2301      	movs	r3, #1
 8009754:	e7f0      	b.n	8009738 <_vfiprintf_r+0x1b8>
 8009756:	ab03      	add	r3, sp, #12
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	462a      	mov	r2, r5
 800975c:	4b12      	ldr	r3, [pc, #72]	@ (80097a8 <_vfiprintf_r+0x228>)
 800975e:	a904      	add	r1, sp, #16
 8009760:	4630      	mov	r0, r6
 8009762:	f7fc f893 	bl	800588c <_printf_float>
 8009766:	4607      	mov	r7, r0
 8009768:	1c78      	adds	r0, r7, #1
 800976a:	d1d6      	bne.n	800971a <_vfiprintf_r+0x19a>
 800976c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800976e:	07d9      	lsls	r1, r3, #31
 8009770:	d405      	bmi.n	800977e <_vfiprintf_r+0x1fe>
 8009772:	89ab      	ldrh	r3, [r5, #12]
 8009774:	059a      	lsls	r2, r3, #22
 8009776:	d402      	bmi.n	800977e <_vfiprintf_r+0x1fe>
 8009778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800977a:	f7fd f927 	bl	80069cc <__retarget_lock_release_recursive>
 800977e:	89ab      	ldrh	r3, [r5, #12]
 8009780:	065b      	lsls	r3, r3, #25
 8009782:	f53f af1f 	bmi.w	80095c4 <_vfiprintf_r+0x44>
 8009786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009788:	e71e      	b.n	80095c8 <_vfiprintf_r+0x48>
 800978a:	ab03      	add	r3, sp, #12
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	462a      	mov	r2, r5
 8009790:	4b05      	ldr	r3, [pc, #20]	@ (80097a8 <_vfiprintf_r+0x228>)
 8009792:	a904      	add	r1, sp, #16
 8009794:	4630      	mov	r0, r6
 8009796:	f7fc fb11 	bl	8005dbc <_printf_i>
 800979a:	e7e4      	b.n	8009766 <_vfiprintf_r+0x1e6>
 800979c:	0800ab59 	.word	0x0800ab59
 80097a0:	0800ab63 	.word	0x0800ab63
 80097a4:	0800588d 	.word	0x0800588d
 80097a8:	0800955b 	.word	0x0800955b
 80097ac:	0800ab5f 	.word	0x0800ab5f

080097b0 <_scanf_chars>:
 80097b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b4:	4615      	mov	r5, r2
 80097b6:	688a      	ldr	r2, [r1, #8]
 80097b8:	4680      	mov	r8, r0
 80097ba:	460c      	mov	r4, r1
 80097bc:	b932      	cbnz	r2, 80097cc <_scanf_chars+0x1c>
 80097be:	698a      	ldr	r2, [r1, #24]
 80097c0:	2a00      	cmp	r2, #0
 80097c2:	bf14      	ite	ne
 80097c4:	f04f 32ff 	movne.w	r2, #4294967295
 80097c8:	2201      	moveq	r2, #1
 80097ca:	608a      	str	r2, [r1, #8]
 80097cc:	6822      	ldr	r2, [r4, #0]
 80097ce:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009860 <_scanf_chars+0xb0>
 80097d2:	06d1      	lsls	r1, r2, #27
 80097d4:	bf5f      	itttt	pl
 80097d6:	681a      	ldrpl	r2, [r3, #0]
 80097d8:	1d11      	addpl	r1, r2, #4
 80097da:	6019      	strpl	r1, [r3, #0]
 80097dc:	6816      	ldrpl	r6, [r2, #0]
 80097de:	2700      	movs	r7, #0
 80097e0:	69a0      	ldr	r0, [r4, #24]
 80097e2:	b188      	cbz	r0, 8009808 <_scanf_chars+0x58>
 80097e4:	2801      	cmp	r0, #1
 80097e6:	d107      	bne.n	80097f8 <_scanf_chars+0x48>
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	781a      	ldrb	r2, [r3, #0]
 80097ec:	6963      	ldr	r3, [r4, #20]
 80097ee:	5c9b      	ldrb	r3, [r3, r2]
 80097f0:	b953      	cbnz	r3, 8009808 <_scanf_chars+0x58>
 80097f2:	2f00      	cmp	r7, #0
 80097f4:	d031      	beq.n	800985a <_scanf_chars+0xaa>
 80097f6:	e022      	b.n	800983e <_scanf_chars+0x8e>
 80097f8:	2802      	cmp	r0, #2
 80097fa:	d120      	bne.n	800983e <_scanf_chars+0x8e>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009804:	071b      	lsls	r3, r3, #28
 8009806:	d41a      	bmi.n	800983e <_scanf_chars+0x8e>
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	06da      	lsls	r2, r3, #27
 800980c:	bf5e      	ittt	pl
 800980e:	682b      	ldrpl	r3, [r5, #0]
 8009810:	781b      	ldrbpl	r3, [r3, #0]
 8009812:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009816:	682a      	ldr	r2, [r5, #0]
 8009818:	686b      	ldr	r3, [r5, #4]
 800981a:	3201      	adds	r2, #1
 800981c:	602a      	str	r2, [r5, #0]
 800981e:	68a2      	ldr	r2, [r4, #8]
 8009820:	3b01      	subs	r3, #1
 8009822:	3a01      	subs	r2, #1
 8009824:	606b      	str	r3, [r5, #4]
 8009826:	3701      	adds	r7, #1
 8009828:	60a2      	str	r2, [r4, #8]
 800982a:	b142      	cbz	r2, 800983e <_scanf_chars+0x8e>
 800982c:	2b00      	cmp	r3, #0
 800982e:	dcd7      	bgt.n	80097e0 <_scanf_chars+0x30>
 8009830:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009834:	4629      	mov	r1, r5
 8009836:	4640      	mov	r0, r8
 8009838:	4798      	blx	r3
 800983a:	2800      	cmp	r0, #0
 800983c:	d0d0      	beq.n	80097e0 <_scanf_chars+0x30>
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	f013 0310 	ands.w	r3, r3, #16
 8009844:	d105      	bne.n	8009852 <_scanf_chars+0xa2>
 8009846:	68e2      	ldr	r2, [r4, #12]
 8009848:	3201      	adds	r2, #1
 800984a:	60e2      	str	r2, [r4, #12]
 800984c:	69a2      	ldr	r2, [r4, #24]
 800984e:	b102      	cbz	r2, 8009852 <_scanf_chars+0xa2>
 8009850:	7033      	strb	r3, [r6, #0]
 8009852:	6923      	ldr	r3, [r4, #16]
 8009854:	443b      	add	r3, r7
 8009856:	6123      	str	r3, [r4, #16]
 8009858:	2000      	movs	r0, #0
 800985a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800985e:	bf00      	nop
 8009860:	0800aa59 	.word	0x0800aa59

08009864 <_scanf_i>:
 8009864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009868:	4698      	mov	r8, r3
 800986a:	4b74      	ldr	r3, [pc, #464]	@ (8009a3c <_scanf_i+0x1d8>)
 800986c:	460c      	mov	r4, r1
 800986e:	4682      	mov	sl, r0
 8009870:	4616      	mov	r6, r2
 8009872:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009876:	b087      	sub	sp, #28
 8009878:	ab03      	add	r3, sp, #12
 800987a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800987e:	4b70      	ldr	r3, [pc, #448]	@ (8009a40 <_scanf_i+0x1dc>)
 8009880:	69a1      	ldr	r1, [r4, #24]
 8009882:	4a70      	ldr	r2, [pc, #448]	@ (8009a44 <_scanf_i+0x1e0>)
 8009884:	2903      	cmp	r1, #3
 8009886:	bf08      	it	eq
 8009888:	461a      	moveq	r2, r3
 800988a:	68a3      	ldr	r3, [r4, #8]
 800988c:	9201      	str	r2, [sp, #4]
 800988e:	1e5a      	subs	r2, r3, #1
 8009890:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009894:	bf88      	it	hi
 8009896:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800989a:	4627      	mov	r7, r4
 800989c:	bf82      	ittt	hi
 800989e:	eb03 0905 	addhi.w	r9, r3, r5
 80098a2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80098a6:	60a3      	strhi	r3, [r4, #8]
 80098a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80098ac:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80098b0:	bf98      	it	ls
 80098b2:	f04f 0900 	movls.w	r9, #0
 80098b6:	6023      	str	r3, [r4, #0]
 80098b8:	463d      	mov	r5, r7
 80098ba:	f04f 0b00 	mov.w	fp, #0
 80098be:	6831      	ldr	r1, [r6, #0]
 80098c0:	ab03      	add	r3, sp, #12
 80098c2:	7809      	ldrb	r1, [r1, #0]
 80098c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80098c8:	2202      	movs	r2, #2
 80098ca:	f7f6 fc89 	bl	80001e0 <memchr>
 80098ce:	b328      	cbz	r0, 800991c <_scanf_i+0xb8>
 80098d0:	f1bb 0f01 	cmp.w	fp, #1
 80098d4:	d159      	bne.n	800998a <_scanf_i+0x126>
 80098d6:	6862      	ldr	r2, [r4, #4]
 80098d8:	b92a      	cbnz	r2, 80098e6 <_scanf_i+0x82>
 80098da:	6822      	ldr	r2, [r4, #0]
 80098dc:	2108      	movs	r1, #8
 80098de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098e2:	6061      	str	r1, [r4, #4]
 80098e4:	6022      	str	r2, [r4, #0]
 80098e6:	6822      	ldr	r2, [r4, #0]
 80098e8:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80098ec:	6022      	str	r2, [r4, #0]
 80098ee:	68a2      	ldr	r2, [r4, #8]
 80098f0:	1e51      	subs	r1, r2, #1
 80098f2:	60a1      	str	r1, [r4, #8]
 80098f4:	b192      	cbz	r2, 800991c <_scanf_i+0xb8>
 80098f6:	6832      	ldr	r2, [r6, #0]
 80098f8:	1c51      	adds	r1, r2, #1
 80098fa:	6031      	str	r1, [r6, #0]
 80098fc:	7812      	ldrb	r2, [r2, #0]
 80098fe:	f805 2b01 	strb.w	r2, [r5], #1
 8009902:	6872      	ldr	r2, [r6, #4]
 8009904:	3a01      	subs	r2, #1
 8009906:	2a00      	cmp	r2, #0
 8009908:	6072      	str	r2, [r6, #4]
 800990a:	dc07      	bgt.n	800991c <_scanf_i+0xb8>
 800990c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009910:	4631      	mov	r1, r6
 8009912:	4650      	mov	r0, sl
 8009914:	4790      	blx	r2
 8009916:	2800      	cmp	r0, #0
 8009918:	f040 8085 	bne.w	8009a26 <_scanf_i+0x1c2>
 800991c:	f10b 0b01 	add.w	fp, fp, #1
 8009920:	f1bb 0f03 	cmp.w	fp, #3
 8009924:	d1cb      	bne.n	80098be <_scanf_i+0x5a>
 8009926:	6863      	ldr	r3, [r4, #4]
 8009928:	b90b      	cbnz	r3, 800992e <_scanf_i+0xca>
 800992a:	230a      	movs	r3, #10
 800992c:	6063      	str	r3, [r4, #4]
 800992e:	6863      	ldr	r3, [r4, #4]
 8009930:	4945      	ldr	r1, [pc, #276]	@ (8009a48 <_scanf_i+0x1e4>)
 8009932:	6960      	ldr	r0, [r4, #20]
 8009934:	1ac9      	subs	r1, r1, r3
 8009936:	f000 f997 	bl	8009c68 <__sccl>
 800993a:	f04f 0b00 	mov.w	fp, #0
 800993e:	68a3      	ldr	r3, [r4, #8]
 8009940:	6822      	ldr	r2, [r4, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d03d      	beq.n	80099c2 <_scanf_i+0x15e>
 8009946:	6831      	ldr	r1, [r6, #0]
 8009948:	6960      	ldr	r0, [r4, #20]
 800994a:	f891 c000 	ldrb.w	ip, [r1]
 800994e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009952:	2800      	cmp	r0, #0
 8009954:	d035      	beq.n	80099c2 <_scanf_i+0x15e>
 8009956:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800995a:	d124      	bne.n	80099a6 <_scanf_i+0x142>
 800995c:	0510      	lsls	r0, r2, #20
 800995e:	d522      	bpl.n	80099a6 <_scanf_i+0x142>
 8009960:	f10b 0b01 	add.w	fp, fp, #1
 8009964:	f1b9 0f00 	cmp.w	r9, #0
 8009968:	d003      	beq.n	8009972 <_scanf_i+0x10e>
 800996a:	3301      	adds	r3, #1
 800996c:	f109 39ff 	add.w	r9, r9, #4294967295
 8009970:	60a3      	str	r3, [r4, #8]
 8009972:	6873      	ldr	r3, [r6, #4]
 8009974:	3b01      	subs	r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	6073      	str	r3, [r6, #4]
 800997a:	dd1b      	ble.n	80099b4 <_scanf_i+0x150>
 800997c:	6833      	ldr	r3, [r6, #0]
 800997e:	3301      	adds	r3, #1
 8009980:	6033      	str	r3, [r6, #0]
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	3b01      	subs	r3, #1
 8009986:	60a3      	str	r3, [r4, #8]
 8009988:	e7d9      	b.n	800993e <_scanf_i+0xda>
 800998a:	f1bb 0f02 	cmp.w	fp, #2
 800998e:	d1ae      	bne.n	80098ee <_scanf_i+0x8a>
 8009990:	6822      	ldr	r2, [r4, #0]
 8009992:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009996:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800999a:	d1bf      	bne.n	800991c <_scanf_i+0xb8>
 800999c:	2110      	movs	r1, #16
 800999e:	6061      	str	r1, [r4, #4]
 80099a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099a4:	e7a2      	b.n	80098ec <_scanf_i+0x88>
 80099a6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80099aa:	6022      	str	r2, [r4, #0]
 80099ac:	780b      	ldrb	r3, [r1, #0]
 80099ae:	f805 3b01 	strb.w	r3, [r5], #1
 80099b2:	e7de      	b.n	8009972 <_scanf_i+0x10e>
 80099b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80099b8:	4631      	mov	r1, r6
 80099ba:	4650      	mov	r0, sl
 80099bc:	4798      	blx	r3
 80099be:	2800      	cmp	r0, #0
 80099c0:	d0df      	beq.n	8009982 <_scanf_i+0x11e>
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	05d9      	lsls	r1, r3, #23
 80099c6:	d50d      	bpl.n	80099e4 <_scanf_i+0x180>
 80099c8:	42bd      	cmp	r5, r7
 80099ca:	d909      	bls.n	80099e0 <_scanf_i+0x17c>
 80099cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80099d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099d4:	4632      	mov	r2, r6
 80099d6:	4650      	mov	r0, sl
 80099d8:	4798      	blx	r3
 80099da:	f105 39ff 	add.w	r9, r5, #4294967295
 80099de:	464d      	mov	r5, r9
 80099e0:	42bd      	cmp	r5, r7
 80099e2:	d028      	beq.n	8009a36 <_scanf_i+0x1d2>
 80099e4:	6822      	ldr	r2, [r4, #0]
 80099e6:	f012 0210 	ands.w	r2, r2, #16
 80099ea:	d113      	bne.n	8009a14 <_scanf_i+0x1b0>
 80099ec:	702a      	strb	r2, [r5, #0]
 80099ee:	6863      	ldr	r3, [r4, #4]
 80099f0:	9e01      	ldr	r6, [sp, #4]
 80099f2:	4639      	mov	r1, r7
 80099f4:	4650      	mov	r0, sl
 80099f6:	47b0      	blx	r6
 80099f8:	f8d8 3000 	ldr.w	r3, [r8]
 80099fc:	6821      	ldr	r1, [r4, #0]
 80099fe:	1d1a      	adds	r2, r3, #4
 8009a00:	f8c8 2000 	str.w	r2, [r8]
 8009a04:	f011 0f20 	tst.w	r1, #32
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	d00f      	beq.n	8009a2c <_scanf_i+0x1c8>
 8009a0c:	6018      	str	r0, [r3, #0]
 8009a0e:	68e3      	ldr	r3, [r4, #12]
 8009a10:	3301      	adds	r3, #1
 8009a12:	60e3      	str	r3, [r4, #12]
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	1bed      	subs	r5, r5, r7
 8009a18:	445d      	add	r5, fp
 8009a1a:	442b      	add	r3, r5
 8009a1c:	6123      	str	r3, [r4, #16]
 8009a1e:	2000      	movs	r0, #0
 8009a20:	b007      	add	sp, #28
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a26:	f04f 0b00 	mov.w	fp, #0
 8009a2a:	e7ca      	b.n	80099c2 <_scanf_i+0x15e>
 8009a2c:	07ca      	lsls	r2, r1, #31
 8009a2e:	bf4c      	ite	mi
 8009a30:	8018      	strhmi	r0, [r3, #0]
 8009a32:	6018      	strpl	r0, [r3, #0]
 8009a34:	e7eb      	b.n	8009a0e <_scanf_i+0x1aa>
 8009a36:	2001      	movs	r0, #1
 8009a38:	e7f2      	b.n	8009a20 <_scanf_i+0x1bc>
 8009a3a:	bf00      	nop
 8009a3c:	0800a7bc 	.word	0x0800a7bc
 8009a40:	08008ee1 	.word	0x08008ee1
 8009a44:	0800a66d 	.word	0x0800a66d
 8009a48:	0800ab7a 	.word	0x0800ab7a

08009a4c <__sflush_r>:
 8009a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a54:	0716      	lsls	r6, r2, #28
 8009a56:	4605      	mov	r5, r0
 8009a58:	460c      	mov	r4, r1
 8009a5a:	d454      	bmi.n	8009b06 <__sflush_r+0xba>
 8009a5c:	684b      	ldr	r3, [r1, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dc02      	bgt.n	8009a68 <__sflush_r+0x1c>
 8009a62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	dd48      	ble.n	8009afa <__sflush_r+0xae>
 8009a68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a6a:	2e00      	cmp	r6, #0
 8009a6c:	d045      	beq.n	8009afa <__sflush_r+0xae>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a74:	682f      	ldr	r7, [r5, #0]
 8009a76:	6a21      	ldr	r1, [r4, #32]
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	d030      	beq.n	8009ade <__sflush_r+0x92>
 8009a7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	0759      	lsls	r1, r3, #29
 8009a82:	d505      	bpl.n	8009a90 <__sflush_r+0x44>
 8009a84:	6863      	ldr	r3, [r4, #4]
 8009a86:	1ad2      	subs	r2, r2, r3
 8009a88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a8a:	b10b      	cbz	r3, 8009a90 <__sflush_r+0x44>
 8009a8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	2300      	movs	r3, #0
 8009a92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a94:	6a21      	ldr	r1, [r4, #32]
 8009a96:	4628      	mov	r0, r5
 8009a98:	47b0      	blx	r6
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	d106      	bne.n	8009aae <__sflush_r+0x62>
 8009aa0:	6829      	ldr	r1, [r5, #0]
 8009aa2:	291d      	cmp	r1, #29
 8009aa4:	d82b      	bhi.n	8009afe <__sflush_r+0xb2>
 8009aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8009b50 <__sflush_r+0x104>)
 8009aa8:	410a      	asrs	r2, r1
 8009aaa:	07d6      	lsls	r6, r2, #31
 8009aac:	d427      	bmi.n	8009afe <__sflush_r+0xb2>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	6062      	str	r2, [r4, #4]
 8009ab2:	04d9      	lsls	r1, r3, #19
 8009ab4:	6922      	ldr	r2, [r4, #16]
 8009ab6:	6022      	str	r2, [r4, #0]
 8009ab8:	d504      	bpl.n	8009ac4 <__sflush_r+0x78>
 8009aba:	1c42      	adds	r2, r0, #1
 8009abc:	d101      	bne.n	8009ac2 <__sflush_r+0x76>
 8009abe:	682b      	ldr	r3, [r5, #0]
 8009ac0:	b903      	cbnz	r3, 8009ac4 <__sflush_r+0x78>
 8009ac2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009ac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ac6:	602f      	str	r7, [r5, #0]
 8009ac8:	b1b9      	cbz	r1, 8009afa <__sflush_r+0xae>
 8009aca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ace:	4299      	cmp	r1, r3
 8009ad0:	d002      	beq.n	8009ad8 <__sflush_r+0x8c>
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f7fd fdd0 	bl	8007678 <_free_r>
 8009ad8:	2300      	movs	r3, #0
 8009ada:	6363      	str	r3, [r4, #52]	@ 0x34
 8009adc:	e00d      	b.n	8009afa <__sflush_r+0xae>
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	47b0      	blx	r6
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	1c50      	adds	r0, r2, #1
 8009ae8:	d1c9      	bne.n	8009a7e <__sflush_r+0x32>
 8009aea:	682b      	ldr	r3, [r5, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0c6      	beq.n	8009a7e <__sflush_r+0x32>
 8009af0:	2b1d      	cmp	r3, #29
 8009af2:	d001      	beq.n	8009af8 <__sflush_r+0xac>
 8009af4:	2b16      	cmp	r3, #22
 8009af6:	d11e      	bne.n	8009b36 <__sflush_r+0xea>
 8009af8:	602f      	str	r7, [r5, #0]
 8009afa:	2000      	movs	r0, #0
 8009afc:	e022      	b.n	8009b44 <__sflush_r+0xf8>
 8009afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b02:	b21b      	sxth	r3, r3
 8009b04:	e01b      	b.n	8009b3e <__sflush_r+0xf2>
 8009b06:	690f      	ldr	r7, [r1, #16]
 8009b08:	2f00      	cmp	r7, #0
 8009b0a:	d0f6      	beq.n	8009afa <__sflush_r+0xae>
 8009b0c:	0793      	lsls	r3, r2, #30
 8009b0e:	680e      	ldr	r6, [r1, #0]
 8009b10:	bf08      	it	eq
 8009b12:	694b      	ldreq	r3, [r1, #20]
 8009b14:	600f      	str	r7, [r1, #0]
 8009b16:	bf18      	it	ne
 8009b18:	2300      	movne	r3, #0
 8009b1a:	eba6 0807 	sub.w	r8, r6, r7
 8009b1e:	608b      	str	r3, [r1, #8]
 8009b20:	f1b8 0f00 	cmp.w	r8, #0
 8009b24:	dde9      	ble.n	8009afa <__sflush_r+0xae>
 8009b26:	6a21      	ldr	r1, [r4, #32]
 8009b28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b2a:	4643      	mov	r3, r8
 8009b2c:	463a      	mov	r2, r7
 8009b2e:	4628      	mov	r0, r5
 8009b30:	47b0      	blx	r6
 8009b32:	2800      	cmp	r0, #0
 8009b34:	dc08      	bgt.n	8009b48 <__sflush_r+0xfc>
 8009b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b3e:	81a3      	strh	r3, [r4, #12]
 8009b40:	f04f 30ff 	mov.w	r0, #4294967295
 8009b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b48:	4407      	add	r7, r0
 8009b4a:	eba8 0800 	sub.w	r8, r8, r0
 8009b4e:	e7e7      	b.n	8009b20 <__sflush_r+0xd4>
 8009b50:	dfbffffe 	.word	0xdfbffffe

08009b54 <_fflush_r>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	690b      	ldr	r3, [r1, #16]
 8009b58:	4605      	mov	r5, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	b913      	cbnz	r3, 8009b64 <_fflush_r+0x10>
 8009b5e:	2500      	movs	r5, #0
 8009b60:	4628      	mov	r0, r5
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	b118      	cbz	r0, 8009b6e <_fflush_r+0x1a>
 8009b66:	6a03      	ldr	r3, [r0, #32]
 8009b68:	b90b      	cbnz	r3, 8009b6e <_fflush_r+0x1a>
 8009b6a:	f7fc fce7 	bl	800653c <__sinit>
 8009b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f3      	beq.n	8009b5e <_fflush_r+0xa>
 8009b76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b78:	07d0      	lsls	r0, r2, #31
 8009b7a:	d404      	bmi.n	8009b86 <_fflush_r+0x32>
 8009b7c:	0599      	lsls	r1, r3, #22
 8009b7e:	d402      	bmi.n	8009b86 <_fflush_r+0x32>
 8009b80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b82:	f7fc ff22 	bl	80069ca <__retarget_lock_acquire_recursive>
 8009b86:	4628      	mov	r0, r5
 8009b88:	4621      	mov	r1, r4
 8009b8a:	f7ff ff5f 	bl	8009a4c <__sflush_r>
 8009b8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b90:	07da      	lsls	r2, r3, #31
 8009b92:	4605      	mov	r5, r0
 8009b94:	d4e4      	bmi.n	8009b60 <_fflush_r+0xc>
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	059b      	lsls	r3, r3, #22
 8009b9a:	d4e1      	bmi.n	8009b60 <_fflush_r+0xc>
 8009b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b9e:	f7fc ff15 	bl	80069cc <__retarget_lock_release_recursive>
 8009ba2:	e7dd      	b.n	8009b60 <_fflush_r+0xc>

08009ba4 <__swhatbuf_r>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	460c      	mov	r4, r1
 8009ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bac:	2900      	cmp	r1, #0
 8009bae:	b096      	sub	sp, #88	@ 0x58
 8009bb0:	4615      	mov	r5, r2
 8009bb2:	461e      	mov	r6, r3
 8009bb4:	da0d      	bge.n	8009bd2 <__swhatbuf_r+0x2e>
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009bbc:	f04f 0100 	mov.w	r1, #0
 8009bc0:	bf14      	ite	ne
 8009bc2:	2340      	movne	r3, #64	@ 0x40
 8009bc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009bc8:	2000      	movs	r0, #0
 8009bca:	6031      	str	r1, [r6, #0]
 8009bcc:	602b      	str	r3, [r5, #0]
 8009bce:	b016      	add	sp, #88	@ 0x58
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
 8009bd2:	466a      	mov	r2, sp
 8009bd4:	f000 f8e8 	bl	8009da8 <_fstat_r>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	dbec      	blt.n	8009bb6 <__swhatbuf_r+0x12>
 8009bdc:	9901      	ldr	r1, [sp, #4]
 8009bde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009be2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009be6:	4259      	negs	r1, r3
 8009be8:	4159      	adcs	r1, r3
 8009bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bee:	e7eb      	b.n	8009bc8 <__swhatbuf_r+0x24>

08009bf0 <__smakebuf_r>:
 8009bf0:	898b      	ldrh	r3, [r1, #12]
 8009bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bf4:	079d      	lsls	r5, r3, #30
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	d507      	bpl.n	8009c0c <__smakebuf_r+0x1c>
 8009bfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	6123      	str	r3, [r4, #16]
 8009c04:	2301      	movs	r3, #1
 8009c06:	6163      	str	r3, [r4, #20]
 8009c08:	b003      	add	sp, #12
 8009c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c0c:	ab01      	add	r3, sp, #4
 8009c0e:	466a      	mov	r2, sp
 8009c10:	f7ff ffc8 	bl	8009ba4 <__swhatbuf_r>
 8009c14:	9f00      	ldr	r7, [sp, #0]
 8009c16:	4605      	mov	r5, r0
 8009c18:	4639      	mov	r1, r7
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f7fd fda0 	bl	8007760 <_malloc_r>
 8009c20:	b948      	cbnz	r0, 8009c36 <__smakebuf_r+0x46>
 8009c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c26:	059a      	lsls	r2, r3, #22
 8009c28:	d4ee      	bmi.n	8009c08 <__smakebuf_r+0x18>
 8009c2a:	f023 0303 	bic.w	r3, r3, #3
 8009c2e:	f043 0302 	orr.w	r3, r3, #2
 8009c32:	81a3      	strh	r3, [r4, #12]
 8009c34:	e7e2      	b.n	8009bfc <__smakebuf_r+0xc>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	6020      	str	r0, [r4, #0]
 8009c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c3e:	81a3      	strh	r3, [r4, #12]
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c46:	b15b      	cbz	r3, 8009c60 <__smakebuf_r+0x70>
 8009c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f000 f8bd 	bl	8009dcc <_isatty_r>
 8009c52:	b128      	cbz	r0, 8009c60 <__smakebuf_r+0x70>
 8009c54:	89a3      	ldrh	r3, [r4, #12]
 8009c56:	f023 0303 	bic.w	r3, r3, #3
 8009c5a:	f043 0301 	orr.w	r3, r3, #1
 8009c5e:	81a3      	strh	r3, [r4, #12]
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	431d      	orrs	r5, r3
 8009c64:	81a5      	strh	r5, [r4, #12]
 8009c66:	e7cf      	b.n	8009c08 <__smakebuf_r+0x18>

08009c68 <__sccl>:
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	780b      	ldrb	r3, [r1, #0]
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	2b5e      	cmp	r3, #94	@ 0x5e
 8009c70:	bf0b      	itete	eq
 8009c72:	784b      	ldrbeq	r3, [r1, #1]
 8009c74:	1c4a      	addne	r2, r1, #1
 8009c76:	1c8a      	addeq	r2, r1, #2
 8009c78:	2100      	movne	r1, #0
 8009c7a:	bf08      	it	eq
 8009c7c:	2101      	moveq	r1, #1
 8009c7e:	3801      	subs	r0, #1
 8009c80:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009c84:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009c88:	42a8      	cmp	r0, r5
 8009c8a:	d1fb      	bne.n	8009c84 <__sccl+0x1c>
 8009c8c:	b90b      	cbnz	r3, 8009c92 <__sccl+0x2a>
 8009c8e:	1e50      	subs	r0, r2, #1
 8009c90:	bd70      	pop	{r4, r5, r6, pc}
 8009c92:	f081 0101 	eor.w	r1, r1, #1
 8009c96:	54e1      	strb	r1, [r4, r3]
 8009c98:	4610      	mov	r0, r2
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ca0:	2d2d      	cmp	r5, #45	@ 0x2d
 8009ca2:	d005      	beq.n	8009cb0 <__sccl+0x48>
 8009ca4:	2d5d      	cmp	r5, #93	@ 0x5d
 8009ca6:	d016      	beq.n	8009cd6 <__sccl+0x6e>
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	d0f1      	beq.n	8009c90 <__sccl+0x28>
 8009cac:	462b      	mov	r3, r5
 8009cae:	e7f2      	b.n	8009c96 <__sccl+0x2e>
 8009cb0:	7846      	ldrb	r6, [r0, #1]
 8009cb2:	2e5d      	cmp	r6, #93	@ 0x5d
 8009cb4:	d0fa      	beq.n	8009cac <__sccl+0x44>
 8009cb6:	42b3      	cmp	r3, r6
 8009cb8:	dcf8      	bgt.n	8009cac <__sccl+0x44>
 8009cba:	3002      	adds	r0, #2
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	3201      	adds	r2, #1
 8009cc0:	4296      	cmp	r6, r2
 8009cc2:	54a1      	strb	r1, [r4, r2]
 8009cc4:	dcfb      	bgt.n	8009cbe <__sccl+0x56>
 8009cc6:	1af2      	subs	r2, r6, r3
 8009cc8:	3a01      	subs	r2, #1
 8009cca:	1c5d      	adds	r5, r3, #1
 8009ccc:	42b3      	cmp	r3, r6
 8009cce:	bfa8      	it	ge
 8009cd0:	2200      	movge	r2, #0
 8009cd2:	18ab      	adds	r3, r5, r2
 8009cd4:	e7e1      	b.n	8009c9a <__sccl+0x32>
 8009cd6:	4610      	mov	r0, r2
 8009cd8:	e7da      	b.n	8009c90 <__sccl+0x28>

08009cda <__submore>:
 8009cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cde:	460c      	mov	r4, r1
 8009ce0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	d11d      	bne.n	8009d26 <__submore+0x4c>
 8009cea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009cee:	f7fd fd37 	bl	8007760 <_malloc_r>
 8009cf2:	b918      	cbnz	r0, 8009cfc <__submore+0x22>
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d00:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009d02:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009d06:	6360      	str	r0, [r4, #52]	@ 0x34
 8009d08:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009d0c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009d10:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009d14:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009d18:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009d1c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009d20:	6020      	str	r0, [r4, #0]
 8009d22:	2000      	movs	r0, #0
 8009d24:	e7e8      	b.n	8009cf8 <__submore+0x1e>
 8009d26:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009d28:	0077      	lsls	r7, r6, #1
 8009d2a:	463a      	mov	r2, r7
 8009d2c:	f000 fc01 	bl	800a532 <_realloc_r>
 8009d30:	4605      	mov	r5, r0
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d0de      	beq.n	8009cf4 <__submore+0x1a>
 8009d36:	eb00 0806 	add.w	r8, r0, r6
 8009d3a:	4601      	mov	r1, r0
 8009d3c:	4632      	mov	r2, r6
 8009d3e:	4640      	mov	r0, r8
 8009d40:	f000 f864 	bl	8009e0c <memcpy>
 8009d44:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009d48:	f8c4 8000 	str.w	r8, [r4]
 8009d4c:	e7e9      	b.n	8009d22 <__submore+0x48>

08009d4e <memmove>:
 8009d4e:	4288      	cmp	r0, r1
 8009d50:	b510      	push	{r4, lr}
 8009d52:	eb01 0402 	add.w	r4, r1, r2
 8009d56:	d902      	bls.n	8009d5e <memmove+0x10>
 8009d58:	4284      	cmp	r4, r0
 8009d5a:	4623      	mov	r3, r4
 8009d5c:	d807      	bhi.n	8009d6e <memmove+0x20>
 8009d5e:	1e43      	subs	r3, r0, #1
 8009d60:	42a1      	cmp	r1, r4
 8009d62:	d008      	beq.n	8009d76 <memmove+0x28>
 8009d64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d68:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d6c:	e7f8      	b.n	8009d60 <memmove+0x12>
 8009d6e:	4402      	add	r2, r0
 8009d70:	4601      	mov	r1, r0
 8009d72:	428a      	cmp	r2, r1
 8009d74:	d100      	bne.n	8009d78 <memmove+0x2a>
 8009d76:	bd10      	pop	{r4, pc}
 8009d78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d80:	e7f7      	b.n	8009d72 <memmove+0x24>

08009d82 <strncmp>:
 8009d82:	b510      	push	{r4, lr}
 8009d84:	b16a      	cbz	r2, 8009da2 <strncmp+0x20>
 8009d86:	3901      	subs	r1, #1
 8009d88:	1884      	adds	r4, r0, r2
 8009d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d103      	bne.n	8009d9e <strncmp+0x1c>
 8009d96:	42a0      	cmp	r0, r4
 8009d98:	d001      	beq.n	8009d9e <strncmp+0x1c>
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	d1f5      	bne.n	8009d8a <strncmp+0x8>
 8009d9e:	1ad0      	subs	r0, r2, r3
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	4610      	mov	r0, r2
 8009da4:	e7fc      	b.n	8009da0 <strncmp+0x1e>
	...

08009da8 <_fstat_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d07      	ldr	r5, [pc, #28]	@ (8009dc8 <_fstat_r+0x20>)
 8009dac:	2300      	movs	r3, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	602b      	str	r3, [r5, #0]
 8009db6:	f7f7 fdf5 	bl	80019a4 <_fstat>
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	d102      	bne.n	8009dc4 <_fstat_r+0x1c>
 8009dbe:	682b      	ldr	r3, [r5, #0]
 8009dc0:	b103      	cbz	r3, 8009dc4 <_fstat_r+0x1c>
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	bd38      	pop	{r3, r4, r5, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000584 	.word	0x20000584

08009dcc <_isatty_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4d06      	ldr	r5, [pc, #24]	@ (8009de8 <_isatty_r+0x1c>)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	602b      	str	r3, [r5, #0]
 8009dd8:	f7f7 fdf4 	bl	80019c4 <_isatty>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_isatty_r+0x1a>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_isatty_r+0x1a>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	20000584 	.word	0x20000584

08009dec <_sbrk_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d06      	ldr	r5, [pc, #24]	@ (8009e08 <_sbrk_r+0x1c>)
 8009df0:	2300      	movs	r3, #0
 8009df2:	4604      	mov	r4, r0
 8009df4:	4608      	mov	r0, r1
 8009df6:	602b      	str	r3, [r5, #0]
 8009df8:	f7f7 fdfc 	bl	80019f4 <_sbrk>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_sbrk_r+0x1a>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_sbrk_r+0x1a>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	20000584 	.word	0x20000584

08009e0c <memcpy>:
 8009e0c:	440a      	add	r2, r1
 8009e0e:	4291      	cmp	r1, r2
 8009e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e14:	d100      	bne.n	8009e18 <memcpy+0xc>
 8009e16:	4770      	bx	lr
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e22:	4291      	cmp	r1, r2
 8009e24:	d1f9      	bne.n	8009e1a <memcpy+0xe>
 8009e26:	bd10      	pop	{r4, pc}

08009e28 <nan>:
 8009e28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e30 <nan+0x8>
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	00000000 	.word	0x00000000
 8009e34:	7ff80000 	.word	0x7ff80000

08009e38 <__assert_func>:
 8009e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e3a:	4614      	mov	r4, r2
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	4b09      	ldr	r3, [pc, #36]	@ (8009e64 <__assert_func+0x2c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4605      	mov	r5, r0
 8009e44:	68d8      	ldr	r0, [r3, #12]
 8009e46:	b954      	cbnz	r4, 8009e5e <__assert_func+0x26>
 8009e48:	4b07      	ldr	r3, [pc, #28]	@ (8009e68 <__assert_func+0x30>)
 8009e4a:	461c      	mov	r4, r3
 8009e4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e50:	9100      	str	r1, [sp, #0]
 8009e52:	462b      	mov	r3, r5
 8009e54:	4905      	ldr	r1, [pc, #20]	@ (8009e6c <__assert_func+0x34>)
 8009e56:	f000 fc19 	bl	800a68c <fiprintf>
 8009e5a:	f000 fc29 	bl	800a6b0 <abort>
 8009e5e:	4b04      	ldr	r3, [pc, #16]	@ (8009e70 <__assert_func+0x38>)
 8009e60:	e7f4      	b.n	8009e4c <__assert_func+0x14>
 8009e62:	bf00      	nop
 8009e64:	2000003c 	.word	0x2000003c
 8009e68:	0800abc8 	.word	0x0800abc8
 8009e6c:	0800ab9a 	.word	0x0800ab9a
 8009e70:	0800ab8d 	.word	0x0800ab8d

08009e74 <_calloc_r>:
 8009e74:	b570      	push	{r4, r5, r6, lr}
 8009e76:	fba1 5402 	umull	r5, r4, r1, r2
 8009e7a:	b93c      	cbnz	r4, 8009e8c <_calloc_r+0x18>
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	f7fd fc6f 	bl	8007760 <_malloc_r>
 8009e82:	4606      	mov	r6, r0
 8009e84:	b928      	cbnz	r0, 8009e92 <_calloc_r+0x1e>
 8009e86:	2600      	movs	r6, #0
 8009e88:	4630      	mov	r0, r6
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	220c      	movs	r2, #12
 8009e8e:	6002      	str	r2, [r0, #0]
 8009e90:	e7f9      	b.n	8009e86 <_calloc_r+0x12>
 8009e92:	462a      	mov	r2, r5
 8009e94:	4621      	mov	r1, r4
 8009e96:	f7fc fd1b 	bl	80068d0 <memset>
 8009e9a:	e7f5      	b.n	8009e88 <_calloc_r+0x14>

08009e9c <rshift>:
 8009e9c:	6903      	ldr	r3, [r0, #16]
 8009e9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009ea2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ea6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009eaa:	f100 0414 	add.w	r4, r0, #20
 8009eae:	dd45      	ble.n	8009f3c <rshift+0xa0>
 8009eb0:	f011 011f 	ands.w	r1, r1, #31
 8009eb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009eb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ebc:	d10c      	bne.n	8009ed8 <rshift+0x3c>
 8009ebe:	f100 0710 	add.w	r7, r0, #16
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	42b1      	cmp	r1, r6
 8009ec6:	d334      	bcc.n	8009f32 <rshift+0x96>
 8009ec8:	1a9b      	subs	r3, r3, r2
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	1eea      	subs	r2, r5, #3
 8009ece:	4296      	cmp	r6, r2
 8009ed0:	bf38      	it	cc
 8009ed2:	2300      	movcc	r3, #0
 8009ed4:	4423      	add	r3, r4
 8009ed6:	e015      	b.n	8009f04 <rshift+0x68>
 8009ed8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009edc:	f1c1 0820 	rsb	r8, r1, #32
 8009ee0:	40cf      	lsrs	r7, r1
 8009ee2:	f105 0e04 	add.w	lr, r5, #4
 8009ee6:	46a1      	mov	r9, r4
 8009ee8:	4576      	cmp	r6, lr
 8009eea:	46f4      	mov	ip, lr
 8009eec:	d815      	bhi.n	8009f1a <rshift+0x7e>
 8009eee:	1a9a      	subs	r2, r3, r2
 8009ef0:	0092      	lsls	r2, r2, #2
 8009ef2:	3a04      	subs	r2, #4
 8009ef4:	3501      	adds	r5, #1
 8009ef6:	42ae      	cmp	r6, r5
 8009ef8:	bf38      	it	cc
 8009efa:	2200      	movcc	r2, #0
 8009efc:	18a3      	adds	r3, r4, r2
 8009efe:	50a7      	str	r7, [r4, r2]
 8009f00:	b107      	cbz	r7, 8009f04 <rshift+0x68>
 8009f02:	3304      	adds	r3, #4
 8009f04:	1b1a      	subs	r2, r3, r4
 8009f06:	42a3      	cmp	r3, r4
 8009f08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f0c:	bf08      	it	eq
 8009f0e:	2300      	moveq	r3, #0
 8009f10:	6102      	str	r2, [r0, #16]
 8009f12:	bf08      	it	eq
 8009f14:	6143      	streq	r3, [r0, #20]
 8009f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f1a:	f8dc c000 	ldr.w	ip, [ip]
 8009f1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f22:	ea4c 0707 	orr.w	r7, ip, r7
 8009f26:	f849 7b04 	str.w	r7, [r9], #4
 8009f2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f2e:	40cf      	lsrs	r7, r1
 8009f30:	e7da      	b.n	8009ee8 <rshift+0x4c>
 8009f32:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f36:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f3a:	e7c3      	b.n	8009ec4 <rshift+0x28>
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	e7e1      	b.n	8009f04 <rshift+0x68>

08009f40 <__hexdig_fun>:
 8009f40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f44:	2b09      	cmp	r3, #9
 8009f46:	d802      	bhi.n	8009f4e <__hexdig_fun+0xe>
 8009f48:	3820      	subs	r0, #32
 8009f4a:	b2c0      	uxtb	r0, r0
 8009f4c:	4770      	bx	lr
 8009f4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f52:	2b05      	cmp	r3, #5
 8009f54:	d801      	bhi.n	8009f5a <__hexdig_fun+0x1a>
 8009f56:	3847      	subs	r0, #71	@ 0x47
 8009f58:	e7f7      	b.n	8009f4a <__hexdig_fun+0xa>
 8009f5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f5e:	2b05      	cmp	r3, #5
 8009f60:	d801      	bhi.n	8009f66 <__hexdig_fun+0x26>
 8009f62:	3827      	subs	r0, #39	@ 0x27
 8009f64:	e7f1      	b.n	8009f4a <__hexdig_fun+0xa>
 8009f66:	2000      	movs	r0, #0
 8009f68:	4770      	bx	lr
	...

08009f6c <__gethex>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	b085      	sub	sp, #20
 8009f72:	468a      	mov	sl, r1
 8009f74:	9302      	str	r3, [sp, #8]
 8009f76:	680b      	ldr	r3, [r1, #0]
 8009f78:	9001      	str	r0, [sp, #4]
 8009f7a:	4690      	mov	r8, r2
 8009f7c:	1c9c      	adds	r4, r3, #2
 8009f7e:	46a1      	mov	r9, r4
 8009f80:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f84:	2830      	cmp	r0, #48	@ 0x30
 8009f86:	d0fa      	beq.n	8009f7e <__gethex+0x12>
 8009f88:	eba9 0303 	sub.w	r3, r9, r3
 8009f8c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f90:	f7ff ffd6 	bl	8009f40 <__hexdig_fun>
 8009f94:	4605      	mov	r5, r0
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d168      	bne.n	800a06c <__gethex+0x100>
 8009f9a:	49a0      	ldr	r1, [pc, #640]	@ (800a21c <__gethex+0x2b0>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	4648      	mov	r0, r9
 8009fa0:	f7ff feef 	bl	8009d82 <strncmp>
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d167      	bne.n	800a07a <__gethex+0x10e>
 8009faa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009fae:	4626      	mov	r6, r4
 8009fb0:	f7ff ffc6 	bl	8009f40 <__hexdig_fun>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d062      	beq.n	800a07e <__gethex+0x112>
 8009fb8:	4623      	mov	r3, r4
 8009fba:	7818      	ldrb	r0, [r3, #0]
 8009fbc:	2830      	cmp	r0, #48	@ 0x30
 8009fbe:	4699      	mov	r9, r3
 8009fc0:	f103 0301 	add.w	r3, r3, #1
 8009fc4:	d0f9      	beq.n	8009fba <__gethex+0x4e>
 8009fc6:	f7ff ffbb 	bl	8009f40 <__hexdig_fun>
 8009fca:	fab0 f580 	clz	r5, r0
 8009fce:	096d      	lsrs	r5, r5, #5
 8009fd0:	f04f 0b01 	mov.w	fp, #1
 8009fd4:	464a      	mov	r2, r9
 8009fd6:	4616      	mov	r6, r2
 8009fd8:	3201      	adds	r2, #1
 8009fda:	7830      	ldrb	r0, [r6, #0]
 8009fdc:	f7ff ffb0 	bl	8009f40 <__hexdig_fun>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1f8      	bne.n	8009fd6 <__gethex+0x6a>
 8009fe4:	498d      	ldr	r1, [pc, #564]	@ (800a21c <__gethex+0x2b0>)
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f7ff feca 	bl	8009d82 <strncmp>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d13f      	bne.n	800a072 <__gethex+0x106>
 8009ff2:	b944      	cbnz	r4, 800a006 <__gethex+0x9a>
 8009ff4:	1c74      	adds	r4, r6, #1
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	4616      	mov	r6, r2
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	7830      	ldrb	r0, [r6, #0]
 8009ffe:	f7ff ff9f 	bl	8009f40 <__hexdig_fun>
 800a002:	2800      	cmp	r0, #0
 800a004:	d1f8      	bne.n	8009ff8 <__gethex+0x8c>
 800a006:	1ba4      	subs	r4, r4, r6
 800a008:	00a7      	lsls	r7, r4, #2
 800a00a:	7833      	ldrb	r3, [r6, #0]
 800a00c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a010:	2b50      	cmp	r3, #80	@ 0x50
 800a012:	d13e      	bne.n	800a092 <__gethex+0x126>
 800a014:	7873      	ldrb	r3, [r6, #1]
 800a016:	2b2b      	cmp	r3, #43	@ 0x2b
 800a018:	d033      	beq.n	800a082 <__gethex+0x116>
 800a01a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a01c:	d034      	beq.n	800a088 <__gethex+0x11c>
 800a01e:	1c71      	adds	r1, r6, #1
 800a020:	2400      	movs	r4, #0
 800a022:	7808      	ldrb	r0, [r1, #0]
 800a024:	f7ff ff8c 	bl	8009f40 <__hexdig_fun>
 800a028:	1e43      	subs	r3, r0, #1
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b18      	cmp	r3, #24
 800a02e:	d830      	bhi.n	800a092 <__gethex+0x126>
 800a030:	f1a0 0210 	sub.w	r2, r0, #16
 800a034:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a038:	f7ff ff82 	bl	8009f40 <__hexdig_fun>
 800a03c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a040:	fa5f fc8c 	uxtb.w	ip, ip
 800a044:	f1bc 0f18 	cmp.w	ip, #24
 800a048:	f04f 030a 	mov.w	r3, #10
 800a04c:	d91e      	bls.n	800a08c <__gethex+0x120>
 800a04e:	b104      	cbz	r4, 800a052 <__gethex+0xe6>
 800a050:	4252      	negs	r2, r2
 800a052:	4417      	add	r7, r2
 800a054:	f8ca 1000 	str.w	r1, [sl]
 800a058:	b1ed      	cbz	r5, 800a096 <__gethex+0x12a>
 800a05a:	f1bb 0f00 	cmp.w	fp, #0
 800a05e:	bf0c      	ite	eq
 800a060:	2506      	moveq	r5, #6
 800a062:	2500      	movne	r5, #0
 800a064:	4628      	mov	r0, r5
 800a066:	b005      	add	sp, #20
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	2500      	movs	r5, #0
 800a06e:	462c      	mov	r4, r5
 800a070:	e7b0      	b.n	8009fd4 <__gethex+0x68>
 800a072:	2c00      	cmp	r4, #0
 800a074:	d1c7      	bne.n	800a006 <__gethex+0x9a>
 800a076:	4627      	mov	r7, r4
 800a078:	e7c7      	b.n	800a00a <__gethex+0x9e>
 800a07a:	464e      	mov	r6, r9
 800a07c:	462f      	mov	r7, r5
 800a07e:	2501      	movs	r5, #1
 800a080:	e7c3      	b.n	800a00a <__gethex+0x9e>
 800a082:	2400      	movs	r4, #0
 800a084:	1cb1      	adds	r1, r6, #2
 800a086:	e7cc      	b.n	800a022 <__gethex+0xb6>
 800a088:	2401      	movs	r4, #1
 800a08a:	e7fb      	b.n	800a084 <__gethex+0x118>
 800a08c:	fb03 0002 	mla	r0, r3, r2, r0
 800a090:	e7ce      	b.n	800a030 <__gethex+0xc4>
 800a092:	4631      	mov	r1, r6
 800a094:	e7de      	b.n	800a054 <__gethex+0xe8>
 800a096:	eba6 0309 	sub.w	r3, r6, r9
 800a09a:	3b01      	subs	r3, #1
 800a09c:	4629      	mov	r1, r5
 800a09e:	2b07      	cmp	r3, #7
 800a0a0:	dc0a      	bgt.n	800a0b8 <__gethex+0x14c>
 800a0a2:	9801      	ldr	r0, [sp, #4]
 800a0a4:	f7fd fbe8 	bl	8007878 <_Balloc>
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	b940      	cbnz	r0, 800a0be <__gethex+0x152>
 800a0ac:	4b5c      	ldr	r3, [pc, #368]	@ (800a220 <__gethex+0x2b4>)
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	21e4      	movs	r1, #228	@ 0xe4
 800a0b2:	485c      	ldr	r0, [pc, #368]	@ (800a224 <__gethex+0x2b8>)
 800a0b4:	f7ff fec0 	bl	8009e38 <__assert_func>
 800a0b8:	3101      	adds	r1, #1
 800a0ba:	105b      	asrs	r3, r3, #1
 800a0bc:	e7ef      	b.n	800a09e <__gethex+0x132>
 800a0be:	f100 0a14 	add.w	sl, r0, #20
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	4655      	mov	r5, sl
 800a0c6:	469b      	mov	fp, r3
 800a0c8:	45b1      	cmp	r9, r6
 800a0ca:	d337      	bcc.n	800a13c <__gethex+0x1d0>
 800a0cc:	f845 bb04 	str.w	fp, [r5], #4
 800a0d0:	eba5 050a 	sub.w	r5, r5, sl
 800a0d4:	10ad      	asrs	r5, r5, #2
 800a0d6:	6125      	str	r5, [r4, #16]
 800a0d8:	4658      	mov	r0, fp
 800a0da:	f7fd fcbf 	bl	8007a5c <__hi0bits>
 800a0de:	016d      	lsls	r5, r5, #5
 800a0e0:	f8d8 6000 	ldr.w	r6, [r8]
 800a0e4:	1a2d      	subs	r5, r5, r0
 800a0e6:	42b5      	cmp	r5, r6
 800a0e8:	dd54      	ble.n	800a194 <__gethex+0x228>
 800a0ea:	1bad      	subs	r5, r5, r6
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f7fe f853 	bl	800819a <__any_on>
 800a0f4:	4681      	mov	r9, r0
 800a0f6:	b178      	cbz	r0, 800a118 <__gethex+0x1ac>
 800a0f8:	1e6b      	subs	r3, r5, #1
 800a0fa:	1159      	asrs	r1, r3, #5
 800a0fc:	f003 021f 	and.w	r2, r3, #31
 800a100:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a104:	f04f 0901 	mov.w	r9, #1
 800a108:	fa09 f202 	lsl.w	r2, r9, r2
 800a10c:	420a      	tst	r2, r1
 800a10e:	d003      	beq.n	800a118 <__gethex+0x1ac>
 800a110:	454b      	cmp	r3, r9
 800a112:	dc36      	bgt.n	800a182 <__gethex+0x216>
 800a114:	f04f 0902 	mov.w	r9, #2
 800a118:	4629      	mov	r1, r5
 800a11a:	4620      	mov	r0, r4
 800a11c:	f7ff febe 	bl	8009e9c <rshift>
 800a120:	442f      	add	r7, r5
 800a122:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a126:	42bb      	cmp	r3, r7
 800a128:	da42      	bge.n	800a1b0 <__gethex+0x244>
 800a12a:	9801      	ldr	r0, [sp, #4]
 800a12c:	4621      	mov	r1, r4
 800a12e:	f7fd fbe3 	bl	80078f8 <_Bfree>
 800a132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a134:	2300      	movs	r3, #0
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	25a3      	movs	r5, #163	@ 0xa3
 800a13a:	e793      	b.n	800a064 <__gethex+0xf8>
 800a13c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a140:	2a2e      	cmp	r2, #46	@ 0x2e
 800a142:	d012      	beq.n	800a16a <__gethex+0x1fe>
 800a144:	2b20      	cmp	r3, #32
 800a146:	d104      	bne.n	800a152 <__gethex+0x1e6>
 800a148:	f845 bb04 	str.w	fp, [r5], #4
 800a14c:	f04f 0b00 	mov.w	fp, #0
 800a150:	465b      	mov	r3, fp
 800a152:	7830      	ldrb	r0, [r6, #0]
 800a154:	9303      	str	r3, [sp, #12]
 800a156:	f7ff fef3 	bl	8009f40 <__hexdig_fun>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	f000 000f 	and.w	r0, r0, #15
 800a160:	4098      	lsls	r0, r3
 800a162:	ea4b 0b00 	orr.w	fp, fp, r0
 800a166:	3304      	adds	r3, #4
 800a168:	e7ae      	b.n	800a0c8 <__gethex+0x15c>
 800a16a:	45b1      	cmp	r9, r6
 800a16c:	d8ea      	bhi.n	800a144 <__gethex+0x1d8>
 800a16e:	492b      	ldr	r1, [pc, #172]	@ (800a21c <__gethex+0x2b0>)
 800a170:	9303      	str	r3, [sp, #12]
 800a172:	2201      	movs	r2, #1
 800a174:	4630      	mov	r0, r6
 800a176:	f7ff fe04 	bl	8009d82 <strncmp>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d1e1      	bne.n	800a144 <__gethex+0x1d8>
 800a180:	e7a2      	b.n	800a0c8 <__gethex+0x15c>
 800a182:	1ea9      	subs	r1, r5, #2
 800a184:	4620      	mov	r0, r4
 800a186:	f7fe f808 	bl	800819a <__any_on>
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d0c2      	beq.n	800a114 <__gethex+0x1a8>
 800a18e:	f04f 0903 	mov.w	r9, #3
 800a192:	e7c1      	b.n	800a118 <__gethex+0x1ac>
 800a194:	da09      	bge.n	800a1aa <__gethex+0x23e>
 800a196:	1b75      	subs	r5, r6, r5
 800a198:	4621      	mov	r1, r4
 800a19a:	9801      	ldr	r0, [sp, #4]
 800a19c:	462a      	mov	r2, r5
 800a19e:	f7fd fdc3 	bl	8007d28 <__lshift>
 800a1a2:	1b7f      	subs	r7, r7, r5
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	f100 0a14 	add.w	sl, r0, #20
 800a1aa:	f04f 0900 	mov.w	r9, #0
 800a1ae:	e7b8      	b.n	800a122 <__gethex+0x1b6>
 800a1b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1b4:	42bd      	cmp	r5, r7
 800a1b6:	dd6f      	ble.n	800a298 <__gethex+0x32c>
 800a1b8:	1bed      	subs	r5, r5, r7
 800a1ba:	42ae      	cmp	r6, r5
 800a1bc:	dc34      	bgt.n	800a228 <__gethex+0x2bc>
 800a1be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d022      	beq.n	800a20c <__gethex+0x2a0>
 800a1c6:	2b03      	cmp	r3, #3
 800a1c8:	d024      	beq.n	800a214 <__gethex+0x2a8>
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d115      	bne.n	800a1fa <__gethex+0x28e>
 800a1ce:	42ae      	cmp	r6, r5
 800a1d0:	d113      	bne.n	800a1fa <__gethex+0x28e>
 800a1d2:	2e01      	cmp	r6, #1
 800a1d4:	d10b      	bne.n	800a1ee <__gethex+0x282>
 800a1d6:	9a02      	ldr	r2, [sp, #8]
 800a1d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	2301      	movs	r3, #1
 800a1e0:	6123      	str	r3, [r4, #16]
 800a1e2:	f8ca 3000 	str.w	r3, [sl]
 800a1e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1e8:	2562      	movs	r5, #98	@ 0x62
 800a1ea:	601c      	str	r4, [r3, #0]
 800a1ec:	e73a      	b.n	800a064 <__gethex+0xf8>
 800a1ee:	1e71      	subs	r1, r6, #1
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f7fd ffd2 	bl	800819a <__any_on>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d1ed      	bne.n	800a1d6 <__gethex+0x26a>
 800a1fa:	9801      	ldr	r0, [sp, #4]
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	f7fd fb7b 	bl	80078f8 <_Bfree>
 800a202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a204:	2300      	movs	r3, #0
 800a206:	6013      	str	r3, [r2, #0]
 800a208:	2550      	movs	r5, #80	@ 0x50
 800a20a:	e72b      	b.n	800a064 <__gethex+0xf8>
 800a20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1f3      	bne.n	800a1fa <__gethex+0x28e>
 800a212:	e7e0      	b.n	800a1d6 <__gethex+0x26a>
 800a214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1dd      	bne.n	800a1d6 <__gethex+0x26a>
 800a21a:	e7ee      	b.n	800a1fa <__gethex+0x28e>
 800a21c:	0800aa00 	.word	0x0800aa00
 800a220:	0800a893 	.word	0x0800a893
 800a224:	0800abc9 	.word	0x0800abc9
 800a228:	1e6f      	subs	r7, r5, #1
 800a22a:	f1b9 0f00 	cmp.w	r9, #0
 800a22e:	d130      	bne.n	800a292 <__gethex+0x326>
 800a230:	b127      	cbz	r7, 800a23c <__gethex+0x2d0>
 800a232:	4639      	mov	r1, r7
 800a234:	4620      	mov	r0, r4
 800a236:	f7fd ffb0 	bl	800819a <__any_on>
 800a23a:	4681      	mov	r9, r0
 800a23c:	117a      	asrs	r2, r7, #5
 800a23e:	2301      	movs	r3, #1
 800a240:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a244:	f007 071f 	and.w	r7, r7, #31
 800a248:	40bb      	lsls	r3, r7
 800a24a:	4213      	tst	r3, r2
 800a24c:	4629      	mov	r1, r5
 800a24e:	4620      	mov	r0, r4
 800a250:	bf18      	it	ne
 800a252:	f049 0902 	orrne.w	r9, r9, #2
 800a256:	f7ff fe21 	bl	8009e9c <rshift>
 800a25a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a25e:	1b76      	subs	r6, r6, r5
 800a260:	2502      	movs	r5, #2
 800a262:	f1b9 0f00 	cmp.w	r9, #0
 800a266:	d047      	beq.n	800a2f8 <__gethex+0x38c>
 800a268:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d015      	beq.n	800a29c <__gethex+0x330>
 800a270:	2b03      	cmp	r3, #3
 800a272:	d017      	beq.n	800a2a4 <__gethex+0x338>
 800a274:	2b01      	cmp	r3, #1
 800a276:	d109      	bne.n	800a28c <__gethex+0x320>
 800a278:	f019 0f02 	tst.w	r9, #2
 800a27c:	d006      	beq.n	800a28c <__gethex+0x320>
 800a27e:	f8da 3000 	ldr.w	r3, [sl]
 800a282:	ea49 0903 	orr.w	r9, r9, r3
 800a286:	f019 0f01 	tst.w	r9, #1
 800a28a:	d10e      	bne.n	800a2aa <__gethex+0x33e>
 800a28c:	f045 0510 	orr.w	r5, r5, #16
 800a290:	e032      	b.n	800a2f8 <__gethex+0x38c>
 800a292:	f04f 0901 	mov.w	r9, #1
 800a296:	e7d1      	b.n	800a23c <__gethex+0x2d0>
 800a298:	2501      	movs	r5, #1
 800a29a:	e7e2      	b.n	800a262 <__gethex+0x2f6>
 800a29c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a29e:	f1c3 0301 	rsb	r3, r3, #1
 800a2a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0f0      	beq.n	800a28c <__gethex+0x320>
 800a2aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2ae:	f104 0314 	add.w	r3, r4, #20
 800a2b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2ba:	f04f 0c00 	mov.w	ip, #0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2c8:	d01b      	beq.n	800a302 <__gethex+0x396>
 800a2ca:	3201      	adds	r2, #1
 800a2cc:	6002      	str	r2, [r0, #0]
 800a2ce:	2d02      	cmp	r5, #2
 800a2d0:	f104 0314 	add.w	r3, r4, #20
 800a2d4:	d13c      	bne.n	800a350 <__gethex+0x3e4>
 800a2d6:	f8d8 2000 	ldr.w	r2, [r8]
 800a2da:	3a01      	subs	r2, #1
 800a2dc:	42b2      	cmp	r2, r6
 800a2de:	d109      	bne.n	800a2f4 <__gethex+0x388>
 800a2e0:	1171      	asrs	r1, r6, #5
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2e8:	f006 061f 	and.w	r6, r6, #31
 800a2ec:	fa02 f606 	lsl.w	r6, r2, r6
 800a2f0:	421e      	tst	r6, r3
 800a2f2:	d13a      	bne.n	800a36a <__gethex+0x3fe>
 800a2f4:	f045 0520 	orr.w	r5, r5, #32
 800a2f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2fa:	601c      	str	r4, [r3, #0]
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	601f      	str	r7, [r3, #0]
 800a300:	e6b0      	b.n	800a064 <__gethex+0xf8>
 800a302:	4299      	cmp	r1, r3
 800a304:	f843 cc04 	str.w	ip, [r3, #-4]
 800a308:	d8d9      	bhi.n	800a2be <__gethex+0x352>
 800a30a:	68a3      	ldr	r3, [r4, #8]
 800a30c:	459b      	cmp	fp, r3
 800a30e:	db17      	blt.n	800a340 <__gethex+0x3d4>
 800a310:	6861      	ldr	r1, [r4, #4]
 800a312:	9801      	ldr	r0, [sp, #4]
 800a314:	3101      	adds	r1, #1
 800a316:	f7fd faaf 	bl	8007878 <_Balloc>
 800a31a:	4681      	mov	r9, r0
 800a31c:	b918      	cbnz	r0, 800a326 <__gethex+0x3ba>
 800a31e:	4b1a      	ldr	r3, [pc, #104]	@ (800a388 <__gethex+0x41c>)
 800a320:	4602      	mov	r2, r0
 800a322:	2184      	movs	r1, #132	@ 0x84
 800a324:	e6c5      	b.n	800a0b2 <__gethex+0x146>
 800a326:	6922      	ldr	r2, [r4, #16]
 800a328:	3202      	adds	r2, #2
 800a32a:	f104 010c 	add.w	r1, r4, #12
 800a32e:	0092      	lsls	r2, r2, #2
 800a330:	300c      	adds	r0, #12
 800a332:	f7ff fd6b 	bl	8009e0c <memcpy>
 800a336:	4621      	mov	r1, r4
 800a338:	9801      	ldr	r0, [sp, #4]
 800a33a:	f7fd fadd 	bl	80078f8 <_Bfree>
 800a33e:	464c      	mov	r4, r9
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a348:	6122      	str	r2, [r4, #16]
 800a34a:	2201      	movs	r2, #1
 800a34c:	615a      	str	r2, [r3, #20]
 800a34e:	e7be      	b.n	800a2ce <__gethex+0x362>
 800a350:	6922      	ldr	r2, [r4, #16]
 800a352:	455a      	cmp	r2, fp
 800a354:	dd0b      	ble.n	800a36e <__gethex+0x402>
 800a356:	2101      	movs	r1, #1
 800a358:	4620      	mov	r0, r4
 800a35a:	f7ff fd9f 	bl	8009e9c <rshift>
 800a35e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a362:	3701      	adds	r7, #1
 800a364:	42bb      	cmp	r3, r7
 800a366:	f6ff aee0 	blt.w	800a12a <__gethex+0x1be>
 800a36a:	2501      	movs	r5, #1
 800a36c:	e7c2      	b.n	800a2f4 <__gethex+0x388>
 800a36e:	f016 061f 	ands.w	r6, r6, #31
 800a372:	d0fa      	beq.n	800a36a <__gethex+0x3fe>
 800a374:	4453      	add	r3, sl
 800a376:	f1c6 0620 	rsb	r6, r6, #32
 800a37a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a37e:	f7fd fb6d 	bl	8007a5c <__hi0bits>
 800a382:	42b0      	cmp	r0, r6
 800a384:	dbe7      	blt.n	800a356 <__gethex+0x3ea>
 800a386:	e7f0      	b.n	800a36a <__gethex+0x3fe>
 800a388:	0800a893 	.word	0x0800a893

0800a38c <L_shift>:
 800a38c:	f1c2 0208 	rsb	r2, r2, #8
 800a390:	0092      	lsls	r2, r2, #2
 800a392:	b570      	push	{r4, r5, r6, lr}
 800a394:	f1c2 0620 	rsb	r6, r2, #32
 800a398:	6843      	ldr	r3, [r0, #4]
 800a39a:	6804      	ldr	r4, [r0, #0]
 800a39c:	fa03 f506 	lsl.w	r5, r3, r6
 800a3a0:	432c      	orrs	r4, r5
 800a3a2:	40d3      	lsrs	r3, r2
 800a3a4:	6004      	str	r4, [r0, #0]
 800a3a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3aa:	4288      	cmp	r0, r1
 800a3ac:	d3f4      	bcc.n	800a398 <L_shift+0xc>
 800a3ae:	bd70      	pop	{r4, r5, r6, pc}

0800a3b0 <__match>:
 800a3b0:	b530      	push	{r4, r5, lr}
 800a3b2:	6803      	ldr	r3, [r0, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ba:	b914      	cbnz	r4, 800a3c2 <__match+0x12>
 800a3bc:	6003      	str	r3, [r0, #0]
 800a3be:	2001      	movs	r0, #1
 800a3c0:	bd30      	pop	{r4, r5, pc}
 800a3c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a3ca:	2d19      	cmp	r5, #25
 800a3cc:	bf98      	it	ls
 800a3ce:	3220      	addls	r2, #32
 800a3d0:	42a2      	cmp	r2, r4
 800a3d2:	d0f0      	beq.n	800a3b6 <__match+0x6>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	e7f3      	b.n	800a3c0 <__match+0x10>

0800a3d8 <__hexnan>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	680b      	ldr	r3, [r1, #0]
 800a3de:	6801      	ldr	r1, [r0, #0]
 800a3e0:	115e      	asrs	r6, r3, #5
 800a3e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3e6:	f013 031f 	ands.w	r3, r3, #31
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	bf18      	it	ne
 800a3ee:	3604      	addne	r6, #4
 800a3f0:	2500      	movs	r5, #0
 800a3f2:	1f37      	subs	r7, r6, #4
 800a3f4:	4682      	mov	sl, r0
 800a3f6:	4690      	mov	r8, r2
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800a3fe:	46b9      	mov	r9, r7
 800a400:	463c      	mov	r4, r7
 800a402:	9502      	str	r5, [sp, #8]
 800a404:	46ab      	mov	fp, r5
 800a406:	784a      	ldrb	r2, [r1, #1]
 800a408:	1c4b      	adds	r3, r1, #1
 800a40a:	9303      	str	r3, [sp, #12]
 800a40c:	b342      	cbz	r2, 800a460 <__hexnan+0x88>
 800a40e:	4610      	mov	r0, r2
 800a410:	9105      	str	r1, [sp, #20]
 800a412:	9204      	str	r2, [sp, #16]
 800a414:	f7ff fd94 	bl	8009f40 <__hexdig_fun>
 800a418:	2800      	cmp	r0, #0
 800a41a:	d151      	bne.n	800a4c0 <__hexnan+0xe8>
 800a41c:	9a04      	ldr	r2, [sp, #16]
 800a41e:	9905      	ldr	r1, [sp, #20]
 800a420:	2a20      	cmp	r2, #32
 800a422:	d818      	bhi.n	800a456 <__hexnan+0x7e>
 800a424:	9b02      	ldr	r3, [sp, #8]
 800a426:	459b      	cmp	fp, r3
 800a428:	dd13      	ble.n	800a452 <__hexnan+0x7a>
 800a42a:	454c      	cmp	r4, r9
 800a42c:	d206      	bcs.n	800a43c <__hexnan+0x64>
 800a42e:	2d07      	cmp	r5, #7
 800a430:	dc04      	bgt.n	800a43c <__hexnan+0x64>
 800a432:	462a      	mov	r2, r5
 800a434:	4649      	mov	r1, r9
 800a436:	4620      	mov	r0, r4
 800a438:	f7ff ffa8 	bl	800a38c <L_shift>
 800a43c:	4544      	cmp	r4, r8
 800a43e:	d952      	bls.n	800a4e6 <__hexnan+0x10e>
 800a440:	2300      	movs	r3, #0
 800a442:	f1a4 0904 	sub.w	r9, r4, #4
 800a446:	f844 3c04 	str.w	r3, [r4, #-4]
 800a44a:	f8cd b008 	str.w	fp, [sp, #8]
 800a44e:	464c      	mov	r4, r9
 800a450:	461d      	mov	r5, r3
 800a452:	9903      	ldr	r1, [sp, #12]
 800a454:	e7d7      	b.n	800a406 <__hexnan+0x2e>
 800a456:	2a29      	cmp	r2, #41	@ 0x29
 800a458:	d157      	bne.n	800a50a <__hexnan+0x132>
 800a45a:	3102      	adds	r1, #2
 800a45c:	f8ca 1000 	str.w	r1, [sl]
 800a460:	f1bb 0f00 	cmp.w	fp, #0
 800a464:	d051      	beq.n	800a50a <__hexnan+0x132>
 800a466:	454c      	cmp	r4, r9
 800a468:	d206      	bcs.n	800a478 <__hexnan+0xa0>
 800a46a:	2d07      	cmp	r5, #7
 800a46c:	dc04      	bgt.n	800a478 <__hexnan+0xa0>
 800a46e:	462a      	mov	r2, r5
 800a470:	4649      	mov	r1, r9
 800a472:	4620      	mov	r0, r4
 800a474:	f7ff ff8a 	bl	800a38c <L_shift>
 800a478:	4544      	cmp	r4, r8
 800a47a:	d936      	bls.n	800a4ea <__hexnan+0x112>
 800a47c:	f1a8 0204 	sub.w	r2, r8, #4
 800a480:	4623      	mov	r3, r4
 800a482:	f853 1b04 	ldr.w	r1, [r3], #4
 800a486:	f842 1f04 	str.w	r1, [r2, #4]!
 800a48a:	429f      	cmp	r7, r3
 800a48c:	d2f9      	bcs.n	800a482 <__hexnan+0xaa>
 800a48e:	1b3b      	subs	r3, r7, r4
 800a490:	f023 0303 	bic.w	r3, r3, #3
 800a494:	3304      	adds	r3, #4
 800a496:	3401      	adds	r4, #1
 800a498:	3e03      	subs	r6, #3
 800a49a:	42b4      	cmp	r4, r6
 800a49c:	bf88      	it	hi
 800a49e:	2304      	movhi	r3, #4
 800a4a0:	4443      	add	r3, r8
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f843 2b04 	str.w	r2, [r3], #4
 800a4a8:	429f      	cmp	r7, r3
 800a4aa:	d2fb      	bcs.n	800a4a4 <__hexnan+0xcc>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	b91b      	cbnz	r3, 800a4b8 <__hexnan+0xe0>
 800a4b0:	4547      	cmp	r7, r8
 800a4b2:	d128      	bne.n	800a506 <__hexnan+0x12e>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	603b      	str	r3, [r7, #0]
 800a4b8:	2005      	movs	r0, #5
 800a4ba:	b007      	add	sp, #28
 800a4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c0:	3501      	adds	r5, #1
 800a4c2:	2d08      	cmp	r5, #8
 800a4c4:	f10b 0b01 	add.w	fp, fp, #1
 800a4c8:	dd06      	ble.n	800a4d8 <__hexnan+0x100>
 800a4ca:	4544      	cmp	r4, r8
 800a4cc:	d9c1      	bls.n	800a452 <__hexnan+0x7a>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4d4:	2501      	movs	r5, #1
 800a4d6:	3c04      	subs	r4, #4
 800a4d8:	6822      	ldr	r2, [r4, #0]
 800a4da:	f000 000f 	and.w	r0, r0, #15
 800a4de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4e2:	6020      	str	r0, [r4, #0]
 800a4e4:	e7b5      	b.n	800a452 <__hexnan+0x7a>
 800a4e6:	2508      	movs	r5, #8
 800a4e8:	e7b3      	b.n	800a452 <__hexnan+0x7a>
 800a4ea:	9b01      	ldr	r3, [sp, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d0dd      	beq.n	800a4ac <__hexnan+0xd4>
 800a4f0:	f1c3 0320 	rsb	r3, r3, #32
 800a4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4f8:	40da      	lsrs	r2, r3
 800a4fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a4fe:	4013      	ands	r3, r2
 800a500:	f846 3c04 	str.w	r3, [r6, #-4]
 800a504:	e7d2      	b.n	800a4ac <__hexnan+0xd4>
 800a506:	3f04      	subs	r7, #4
 800a508:	e7d0      	b.n	800a4ac <__hexnan+0xd4>
 800a50a:	2004      	movs	r0, #4
 800a50c:	e7d5      	b.n	800a4ba <__hexnan+0xe2>

0800a50e <__ascii_mbtowc>:
 800a50e:	b082      	sub	sp, #8
 800a510:	b901      	cbnz	r1, 800a514 <__ascii_mbtowc+0x6>
 800a512:	a901      	add	r1, sp, #4
 800a514:	b142      	cbz	r2, 800a528 <__ascii_mbtowc+0x1a>
 800a516:	b14b      	cbz	r3, 800a52c <__ascii_mbtowc+0x1e>
 800a518:	7813      	ldrb	r3, [r2, #0]
 800a51a:	600b      	str	r3, [r1, #0]
 800a51c:	7812      	ldrb	r2, [r2, #0]
 800a51e:	1e10      	subs	r0, r2, #0
 800a520:	bf18      	it	ne
 800a522:	2001      	movne	r0, #1
 800a524:	b002      	add	sp, #8
 800a526:	4770      	bx	lr
 800a528:	4610      	mov	r0, r2
 800a52a:	e7fb      	b.n	800a524 <__ascii_mbtowc+0x16>
 800a52c:	f06f 0001 	mvn.w	r0, #1
 800a530:	e7f8      	b.n	800a524 <__ascii_mbtowc+0x16>

0800a532 <_realloc_r>:
 800a532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a536:	4680      	mov	r8, r0
 800a538:	4615      	mov	r5, r2
 800a53a:	460c      	mov	r4, r1
 800a53c:	b921      	cbnz	r1, 800a548 <_realloc_r+0x16>
 800a53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a542:	4611      	mov	r1, r2
 800a544:	f7fd b90c 	b.w	8007760 <_malloc_r>
 800a548:	b92a      	cbnz	r2, 800a556 <_realloc_r+0x24>
 800a54a:	f7fd f895 	bl	8007678 <_free_r>
 800a54e:	2400      	movs	r4, #0
 800a550:	4620      	mov	r0, r4
 800a552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a556:	f000 f8b2 	bl	800a6be <_malloc_usable_size_r>
 800a55a:	4285      	cmp	r5, r0
 800a55c:	4606      	mov	r6, r0
 800a55e:	d802      	bhi.n	800a566 <_realloc_r+0x34>
 800a560:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a564:	d8f4      	bhi.n	800a550 <_realloc_r+0x1e>
 800a566:	4629      	mov	r1, r5
 800a568:	4640      	mov	r0, r8
 800a56a:	f7fd f8f9 	bl	8007760 <_malloc_r>
 800a56e:	4607      	mov	r7, r0
 800a570:	2800      	cmp	r0, #0
 800a572:	d0ec      	beq.n	800a54e <_realloc_r+0x1c>
 800a574:	42b5      	cmp	r5, r6
 800a576:	462a      	mov	r2, r5
 800a578:	4621      	mov	r1, r4
 800a57a:	bf28      	it	cs
 800a57c:	4632      	movcs	r2, r6
 800a57e:	f7ff fc45 	bl	8009e0c <memcpy>
 800a582:	4621      	mov	r1, r4
 800a584:	4640      	mov	r0, r8
 800a586:	f7fd f877 	bl	8007678 <_free_r>
 800a58a:	463c      	mov	r4, r7
 800a58c:	e7e0      	b.n	800a550 <_realloc_r+0x1e>
	...

0800a590 <_strtoul_l.constprop.0>:
 800a590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a594:	4e34      	ldr	r6, [pc, #208]	@ (800a668 <_strtoul_l.constprop.0+0xd8>)
 800a596:	4686      	mov	lr, r0
 800a598:	460d      	mov	r5, r1
 800a59a:	4628      	mov	r0, r5
 800a59c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5a0:	5d37      	ldrb	r7, [r6, r4]
 800a5a2:	f017 0708 	ands.w	r7, r7, #8
 800a5a6:	d1f8      	bne.n	800a59a <_strtoul_l.constprop.0+0xa>
 800a5a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800a5aa:	d12f      	bne.n	800a60c <_strtoul_l.constprop.0+0x7c>
 800a5ac:	782c      	ldrb	r4, [r5, #0]
 800a5ae:	2701      	movs	r7, #1
 800a5b0:	1c85      	adds	r5, r0, #2
 800a5b2:	f033 0010 	bics.w	r0, r3, #16
 800a5b6:	d109      	bne.n	800a5cc <_strtoul_l.constprop.0+0x3c>
 800a5b8:	2c30      	cmp	r4, #48	@ 0x30
 800a5ba:	d12c      	bne.n	800a616 <_strtoul_l.constprop.0+0x86>
 800a5bc:	7828      	ldrb	r0, [r5, #0]
 800a5be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a5c2:	2858      	cmp	r0, #88	@ 0x58
 800a5c4:	d127      	bne.n	800a616 <_strtoul_l.constprop.0+0x86>
 800a5c6:	786c      	ldrb	r4, [r5, #1]
 800a5c8:	2310      	movs	r3, #16
 800a5ca:	3502      	adds	r5, #2
 800a5cc:	f04f 38ff 	mov.w	r8, #4294967295
 800a5d0:	2600      	movs	r6, #0
 800a5d2:	fbb8 f8f3 	udiv	r8, r8, r3
 800a5d6:	fb03 f908 	mul.w	r9, r3, r8
 800a5da:	ea6f 0909 	mvn.w	r9, r9
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a5e4:	f1bc 0f09 	cmp.w	ip, #9
 800a5e8:	d81c      	bhi.n	800a624 <_strtoul_l.constprop.0+0x94>
 800a5ea:	4664      	mov	r4, ip
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	dd2a      	ble.n	800a646 <_strtoul_l.constprop.0+0xb6>
 800a5f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a5f4:	d007      	beq.n	800a606 <_strtoul_l.constprop.0+0x76>
 800a5f6:	4580      	cmp	r8, r0
 800a5f8:	d322      	bcc.n	800a640 <_strtoul_l.constprop.0+0xb0>
 800a5fa:	d101      	bne.n	800a600 <_strtoul_l.constprop.0+0x70>
 800a5fc:	45a1      	cmp	r9, r4
 800a5fe:	db1f      	blt.n	800a640 <_strtoul_l.constprop.0+0xb0>
 800a600:	fb00 4003 	mla	r0, r0, r3, r4
 800a604:	2601      	movs	r6, #1
 800a606:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a60a:	e7e9      	b.n	800a5e0 <_strtoul_l.constprop.0+0x50>
 800a60c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a60e:	bf04      	itt	eq
 800a610:	782c      	ldrbeq	r4, [r5, #0]
 800a612:	1c85      	addeq	r5, r0, #2
 800a614:	e7cd      	b.n	800a5b2 <_strtoul_l.constprop.0+0x22>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1d8      	bne.n	800a5cc <_strtoul_l.constprop.0+0x3c>
 800a61a:	2c30      	cmp	r4, #48	@ 0x30
 800a61c:	bf0c      	ite	eq
 800a61e:	2308      	moveq	r3, #8
 800a620:	230a      	movne	r3, #10
 800a622:	e7d3      	b.n	800a5cc <_strtoul_l.constprop.0+0x3c>
 800a624:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a628:	f1bc 0f19 	cmp.w	ip, #25
 800a62c:	d801      	bhi.n	800a632 <_strtoul_l.constprop.0+0xa2>
 800a62e:	3c37      	subs	r4, #55	@ 0x37
 800a630:	e7dc      	b.n	800a5ec <_strtoul_l.constprop.0+0x5c>
 800a632:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a636:	f1bc 0f19 	cmp.w	ip, #25
 800a63a:	d804      	bhi.n	800a646 <_strtoul_l.constprop.0+0xb6>
 800a63c:	3c57      	subs	r4, #87	@ 0x57
 800a63e:	e7d5      	b.n	800a5ec <_strtoul_l.constprop.0+0x5c>
 800a640:	f04f 36ff 	mov.w	r6, #4294967295
 800a644:	e7df      	b.n	800a606 <_strtoul_l.constprop.0+0x76>
 800a646:	1c73      	adds	r3, r6, #1
 800a648:	d106      	bne.n	800a658 <_strtoul_l.constprop.0+0xc8>
 800a64a:	2322      	movs	r3, #34	@ 0x22
 800a64c:	f8ce 3000 	str.w	r3, [lr]
 800a650:	4630      	mov	r0, r6
 800a652:	b932      	cbnz	r2, 800a662 <_strtoul_l.constprop.0+0xd2>
 800a654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a658:	b107      	cbz	r7, 800a65c <_strtoul_l.constprop.0+0xcc>
 800a65a:	4240      	negs	r0, r0
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	d0f9      	beq.n	800a654 <_strtoul_l.constprop.0+0xc4>
 800a660:	b106      	cbz	r6, 800a664 <_strtoul_l.constprop.0+0xd4>
 800a662:	1e69      	subs	r1, r5, #1
 800a664:	6011      	str	r1, [r2, #0]
 800a666:	e7f5      	b.n	800a654 <_strtoul_l.constprop.0+0xc4>
 800a668:	0800aa59 	.word	0x0800aa59

0800a66c <_strtoul_r>:
 800a66c:	f7ff bf90 	b.w	800a590 <_strtoul_l.constprop.0>

0800a670 <__ascii_wctomb>:
 800a670:	4603      	mov	r3, r0
 800a672:	4608      	mov	r0, r1
 800a674:	b141      	cbz	r1, 800a688 <__ascii_wctomb+0x18>
 800a676:	2aff      	cmp	r2, #255	@ 0xff
 800a678:	d904      	bls.n	800a684 <__ascii_wctomb+0x14>
 800a67a:	228a      	movs	r2, #138	@ 0x8a
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	f04f 30ff 	mov.w	r0, #4294967295
 800a682:	4770      	bx	lr
 800a684:	700a      	strb	r2, [r1, #0]
 800a686:	2001      	movs	r0, #1
 800a688:	4770      	bx	lr
	...

0800a68c <fiprintf>:
 800a68c:	b40e      	push	{r1, r2, r3}
 800a68e:	b503      	push	{r0, r1, lr}
 800a690:	4601      	mov	r1, r0
 800a692:	ab03      	add	r3, sp, #12
 800a694:	4805      	ldr	r0, [pc, #20]	@ (800a6ac <fiprintf+0x20>)
 800a696:	f853 2b04 	ldr.w	r2, [r3], #4
 800a69a:	6800      	ldr	r0, [r0, #0]
 800a69c:	9301      	str	r3, [sp, #4]
 800a69e:	f7fe ff6f 	bl	8009580 <_vfiprintf_r>
 800a6a2:	b002      	add	sp, #8
 800a6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a8:	b003      	add	sp, #12
 800a6aa:	4770      	bx	lr
 800a6ac:	2000003c 	.word	0x2000003c

0800a6b0 <abort>:
 800a6b0:	b508      	push	{r3, lr}
 800a6b2:	2006      	movs	r0, #6
 800a6b4:	f000 f834 	bl	800a720 <raise>
 800a6b8:	2001      	movs	r0, #1
 800a6ba:	f7f7 f923 	bl	8001904 <_exit>

0800a6be <_malloc_usable_size_r>:
 800a6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6c2:	1f18      	subs	r0, r3, #4
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	bfbc      	itt	lt
 800a6c8:	580b      	ldrlt	r3, [r1, r0]
 800a6ca:	18c0      	addlt	r0, r0, r3
 800a6cc:	4770      	bx	lr

0800a6ce <_raise_r>:
 800a6ce:	291f      	cmp	r1, #31
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	d904      	bls.n	800a6e2 <_raise_r+0x14>
 800a6d8:	2316      	movs	r3, #22
 800a6da:	6003      	str	r3, [r0, #0]
 800a6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e0:	bd38      	pop	{r3, r4, r5, pc}
 800a6e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6e4:	b112      	cbz	r2, 800a6ec <_raise_r+0x1e>
 800a6e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6ea:	b94b      	cbnz	r3, 800a700 <_raise_r+0x32>
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f000 f831 	bl	800a754 <_getpid_r>
 800a6f2:	4622      	mov	r2, r4
 800a6f4:	4601      	mov	r1, r0
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6fc:	f000 b818 	b.w	800a730 <_kill_r>
 800a700:	2b01      	cmp	r3, #1
 800a702:	d00a      	beq.n	800a71a <_raise_r+0x4c>
 800a704:	1c59      	adds	r1, r3, #1
 800a706:	d103      	bne.n	800a710 <_raise_r+0x42>
 800a708:	2316      	movs	r3, #22
 800a70a:	6003      	str	r3, [r0, #0]
 800a70c:	2001      	movs	r0, #1
 800a70e:	e7e7      	b.n	800a6e0 <_raise_r+0x12>
 800a710:	2100      	movs	r1, #0
 800a712:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a716:	4620      	mov	r0, r4
 800a718:	4798      	blx	r3
 800a71a:	2000      	movs	r0, #0
 800a71c:	e7e0      	b.n	800a6e0 <_raise_r+0x12>
	...

0800a720 <raise>:
 800a720:	4b02      	ldr	r3, [pc, #8]	@ (800a72c <raise+0xc>)
 800a722:	4601      	mov	r1, r0
 800a724:	6818      	ldr	r0, [r3, #0]
 800a726:	f7ff bfd2 	b.w	800a6ce <_raise_r>
 800a72a:	bf00      	nop
 800a72c:	2000003c 	.word	0x2000003c

0800a730 <_kill_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4d07      	ldr	r5, [pc, #28]	@ (800a750 <_kill_r+0x20>)
 800a734:	2300      	movs	r3, #0
 800a736:	4604      	mov	r4, r0
 800a738:	4608      	mov	r0, r1
 800a73a:	4611      	mov	r1, r2
 800a73c:	602b      	str	r3, [r5, #0]
 800a73e:	f7f7 f8d1 	bl	80018e4 <_kill>
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d102      	bne.n	800a74c <_kill_r+0x1c>
 800a746:	682b      	ldr	r3, [r5, #0]
 800a748:	b103      	cbz	r3, 800a74c <_kill_r+0x1c>
 800a74a:	6023      	str	r3, [r4, #0]
 800a74c:	bd38      	pop	{r3, r4, r5, pc}
 800a74e:	bf00      	nop
 800a750:	20000584 	.word	0x20000584

0800a754 <_getpid_r>:
 800a754:	f7f7 b8be 	b.w	80018d4 <_getpid>

0800a758 <_init>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	bf00      	nop
 800a75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75e:	bc08      	pop	{r3}
 800a760:	469e      	mov	lr, r3
 800a762:	4770      	bx	lr

0800a764 <_fini>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	bf00      	nop
 800a768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76a:	bc08      	pop	{r3}
 800a76c:	469e      	mov	lr, r3
 800a76e:	4770      	bx	lr
