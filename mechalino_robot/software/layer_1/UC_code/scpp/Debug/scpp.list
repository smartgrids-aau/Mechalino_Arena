
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800b950  0800b950  0001b950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be10  0800be10  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800be10  0800be10  0001be10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be18  0800be18  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be18  0800be18  0001be18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be1c  0800be1c  0001be1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800be20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000290  0800c0b0  00020290  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800c0b0  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012102  00000000  00000000  00020303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f8  00000000  00000000  00032405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00034e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cdf  00000000  00000000  00035e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183c0  00000000  00000000  00036b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001557f  00000000  00000000  0004eeff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092231  00000000  00000000  0006447e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bd4  00000000  00000000  000f66b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000fc284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000290 	.word	0x20000290
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b934 	.word	0x0800b934

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000294 	.word	0x20000294
 80001dc:	0800b934 	.word	0x0800b934

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800103c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <MX_GPIO_Init+0xbc>)
 800108e:	f002 f9b1 	bl	80033f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_GPIO_Init+0xbc>)
 80010ac:	f002 f81e 	bl	80030ec <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020800 	.word	0x40020800

080010c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f002 f993 	bl	8003428 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 fe92 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200002ac 	.word	0x200002ac
 8001114:	40005400 	.word	0x40005400
 8001118:	00061a80 	.word	0x00061a80

0800111c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_I2C_MspInit+0x94>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d134      	bne.n	80011a8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800115a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116c:	2304      	movs	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <HAL_I2C_MspInit+0x9c>)
 8001178:	f001 ffb8 	bl	80030ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	201f      	movs	r0, #31
 800119e:	f001 fedc 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011a2:	201f      	movs	r0, #31
 80011a4:	f001 fef5 	bl	8002f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <motor>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void motor(int16_t MotL, int16_t MotR)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	460a      	mov	r2, r1
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	4613      	mov	r3, r2
 80011ca:	80bb      	strh	r3, [r7, #4]
	uint32_t cntL,cntR;
	MotL = MotL + 100;//put an offset (0 to 200)
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	3364      	adds	r3, #100	; 0x64
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	80fb      	strh	r3, [r7, #6]
	MotR = MotR + 100;//put an offset (0 to 200)
 80011d4:	88bb      	ldrh	r3, [r7, #4]
 80011d6:	3364      	adds	r3, #100	; 0x64
 80011d8:	b29b      	uxth	r3, r3
 80011da:	80bb      	strh	r3, [r7, #4]
	cntL = ((MotL*2000)/200) + 2000;//value of PWM start at 2000 and finish at 4000
 80011dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80011ec:	60fb      	str	r3, [r7, #12]
	cntR = ((MotR*2000)/200) + 2000;//value of PWM start at 2000 and finish at 4000
 80011ee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80011fe:	60bb      	str	r3, [r7, #8]
	TIM2->CCR3 = cntL;//put value on TIMERs registers
 8001200:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR1 = cntR;//put value on TIMERs registers
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <motor+0x60>)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40010000 	.word	0x40010000

08001220 <PID_init>:

void PID_init(PIDController *pid, float kp, float ki, float kd, float setpoint) {
 8001220:	b480      	push	{r7}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6178      	str	r0, [r7, #20]
 8001228:	ed87 0a04 	vstr	s0, [r7, #16]
 800122c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001230:	ed87 1a02 	vstr	s2, [r7, #8]
 8001234:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->kp = kp;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	60da      	str	r2, [r3, #12]
    pid->integral = 0;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
    total_Gz = 0;
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <PID_init+0x54>)
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	371c      	adds	r7, #28
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	200003a8 	.word	0x200003a8

08001278 <apply_speed>:
    pid->prev_error = error;
    return output;
}

void apply_speed()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
	// if current_speed = 0, stop!
	if (current_speed == 0)
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <apply_speed+0x1a4>)
 8001280:	f993 3000 	ldrsb.w	r3, [r3]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <apply_speed+0x24>
	{
		TIM1->CCR1 = MOTOR_STOP;
 8001288:	4b65      	ldr	r3, [pc, #404]	; (8001420 <apply_speed+0x1a8>)
 800128a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR3 = MOTOR_STOP;
 8001290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001294:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001298:	63da      	str	r2, [r3, #60]	; 0x3c
		return;
 800129a:	e0bc      	b.n	8001416 <apply_speed+0x19e>
	}
	else
	{
		// PID control
		MPU6050_Read_All(&hi2c1, &MPU6050);
 800129c:	4961      	ldr	r1, [pc, #388]	; (8001424 <apply_speed+0x1ac>)
 800129e:	4862      	ldr	r0, [pc, #392]	; (8001428 <apply_speed+0x1b0>)
 80012a0:	f000 fe22 	bl	8001ee8 <MPU6050_Read_All>
		current_Gz = MPU6050.Gz - Gz_mean;
 80012a4:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <apply_speed+0x1ac>)
 80012a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80012aa:	4b60      	ldr	r3, [pc, #384]	; (800142c <apply_speed+0x1b4>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7fe fff2 	bl	8000298 <__aeabi_dsub>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc9c 	bl	8000bf8 <__aeabi_d2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a5b      	ldr	r2, [pc, #364]	; (8001430 <apply_speed+0x1b8>)
 80012c4:	6013      	str	r3, [r2, #0]
		total_Gz += current_Gz * (LOOP_DELAY / 1000.0f);
 80012c6:	4b5a      	ldr	r3, [pc, #360]	; (8001430 <apply_speed+0x1b8>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001434 <apply_speed+0x1bc>
 80012d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012d4:	4b58      	ldr	r3, [pc, #352]	; (8001438 <apply_speed+0x1c0>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <apply_speed+0x1c0>)
 80012e0:	edc3 7a00 	vstr	s15, [r3]
		float control_signal = kp * total_Gz;
 80012e4:	4b55      	ldr	r3, [pc, #340]	; (800143c <apply_speed+0x1c4>)
 80012e6:	ed93 7a00 	vldr	s14, [r3]
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <apply_speed+0x1c0>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f4:	edc7 7a03 	vstr	s15, [r7, #12]
		if (current_speed>0) // forward
 80012f8:	4b48      	ldr	r3, [pc, #288]	; (800141c <apply_speed+0x1a4>)
 80012fa:	f993 3000 	ldrsb.w	r3, [r3]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dd45      	ble.n	800138e <apply_speed+0x116>
		{
			if (control_signal < 0) // turned right, must turn left
 8001302:	edd7 7a03 	vldr	s15, [r7, #12]
 8001306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130e:	d51d      	bpl.n	800134c <apply_speed+0xd4>
			{
				motor(current_speed+10+(int8_t)control_signal, -current_speed);
 8001310:	4b42      	ldr	r3, [pc, #264]	; (800141c <apply_speed+0x1a4>)
 8001312:	f993 3000 	ldrsb.w	r3, [r3]
 8001316:	b29a      	uxth	r2, r3
 8001318:	edd7 7a03 	vldr	s15, [r7, #12]
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	edc7 7a01 	vstr	s15, [r7, #4]
 8001324:	793b      	ldrb	r3, [r7, #4]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	b29b      	uxth	r3, r3
 800132a:	4413      	add	r3, r2
 800132c:	b29b      	uxth	r3, r3
 800132e:	330a      	adds	r3, #10
 8001330:	b29b      	uxth	r3, r3
 8001332:	b21b      	sxth	r3, r3
 8001334:	4a39      	ldr	r2, [pc, #228]	; (800141c <apply_speed+0x1a4>)
 8001336:	f992 2000 	ldrsb.w	r2, [r2]
 800133a:	b292      	uxth	r2, r2
 800133c:	4252      	negs	r2, r2
 800133e:	b292      	uxth	r2, r2
 8001340:	b212      	sxth	r2, r2
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff39 	bl	80011bc <motor>
 800134a:	e064      	b.n	8001416 <apply_speed+0x19e>
			}
			else if (control_signal > 0)
 800134c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001350:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001358:	dd5d      	ble.n	8001416 <apply_speed+0x19e>
			{
				motor(current_speed+10, -current_speed+(int8_t)control_signal);
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <apply_speed+0x1a4>)
 800135c:	f993 3000 	ldrsb.w	r3, [r3]
 8001360:	b29b      	uxth	r3, r3
 8001362:	330a      	adds	r3, #10
 8001364:	b29b      	uxth	r3, r3
 8001366:	b218      	sxth	r0, r3
 8001368:	edd7 7a03 	vldr	s15, [r7, #12]
 800136c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001370:	edc7 7a01 	vstr	s15, [r7, #4]
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	b25b      	sxtb	r3, r3
 8001378:	b21a      	sxth	r2, r3
 800137a:	4b28      	ldr	r3, [pc, #160]	; (800141c <apply_speed+0x1a4>)
 800137c:	f993 3000 	ldrsb.w	r3, [r3]
 8001380:	b21b      	sxth	r3, r3
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b21b      	sxth	r3, r3
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff ff18 	bl	80011bc <motor>
 800138c:	e043      	b.n	8001416 <apply_speed+0x19e>
			}
		}
		else
		{
			if (control_signal < 0) // turned right, must turn left
 800138e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	d51b      	bpl.n	80013d4 <apply_speed+0x15c>
			{
				motor(-current_speed-10, current_speed+(int8_t)control_signal);
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <apply_speed+0x1a4>)
 800139e:	f993 3000 	ldrsb.w	r3, [r3]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f06f 0309 	mvn.w	r3, #9
 80013a8:	1a9b      	subs	r3, r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b218      	sxth	r0, r3
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <apply_speed+0x1a4>)
 80013b0:	f993 3000 	ldrsb.w	r3, [r3]
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013be:	edc7 7a01 	vstr	s15, [r7, #4]
 80013c2:	793b      	ldrb	r3, [r7, #4]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fef5 	bl	80011bc <motor>
 80013d2:	e020      	b.n	8001416 <apply_speed+0x19e>
			}
			else if (control_signal > 0)
 80013d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	dd19      	ble.n	8001416 <apply_speed+0x19e>
			{
				motor(-current_speed-10+(int8_t)control_signal, current_speed);
 80013e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80013ee:	793b      	ldrb	r3, [r7, #4]
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <apply_speed+0x1a4>)
 80013f6:	f993 3000 	ldrsb.w	r3, [r3]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	3b0a      	subs	r3, #10
 8001402:	b29b      	uxth	r3, r3
 8001404:	b21b      	sxth	r3, r3
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <apply_speed+0x1a4>)
 8001408:	f992 2000 	ldrsb.w	r2, [r2]
 800140c:	b212      	sxth	r2, r2
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fed3 	bl	80011bc <motor>
			}
		}
	}
}
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200003b4 	.word	0x200003b4
 8001420:	40010000 	.word	0x40010000
 8001424:	20000300 	.word	0x20000300
 8001428:	200002ac 	.word	0x200002ac
 800142c:	20000360 	.word	0x20000360
 8001430:	200003a4 	.word	0x200003a4
 8001434:	3c23d70a 	.word	0x3c23d70a
 8001438:	200003a8 	.word	0x200003a8
 800143c:	20000000 	.word	0x20000000

08001440 <move>:

void move()
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	current_speed = 0;
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <move+0x17c>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
	motor(0,0);
 800144c:	2100      	movs	r1, #0
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff feb4 	bl	80011bc <motor>

	PID_init(&pid_m, kp, ki, kd, 0);
 8001454:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <move+0x180>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	4b5a      	ldr	r3, [pc, #360]	; (80015c4 <move+0x184>)
 800145c:	ed93 7a00 	vldr	s14, [r3]
 8001460:	4b59      	ldr	r3, [pc, #356]	; (80015c8 <move+0x188>)
 8001462:	edd3 6a00 	vldr	s13, [r3]
 8001466:	eddf 1a59 	vldr	s3, [pc, #356]	; 80015cc <move+0x18c>
 800146a:	eeb0 1a66 	vmov.f32	s2, s13
 800146e:	eef0 0a47 	vmov.f32	s1, s14
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	4856      	ldr	r0, [pc, #344]	; (80015d0 <move+0x190>)
 8001478:	f7ff fed2 	bl	8001220 <PID_init>
	int breakTime = (int)(fabs(speed / ACCELERATION))*LOOP_DELAY;
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <move+0x194>)
 800147e:	f993 3000 	ldrsb.w	r3, [r3]
 8001482:	4a55      	ldr	r2, [pc, #340]	; (80015d8 <move+0x198>)
 8001484:	fb82 1203 	smull	r1, r2, r2, r3
 8001488:	1092      	asrs	r2, r2, #2
 800148a:	17db      	asrs	r3, r3, #31
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	b25b      	sxtb	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f84f 	bl	8000534 <__aeabi_i2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4614      	mov	r4, r2
 800149c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80014a0:	4620      	mov	r0, r4
 80014a2:	4629      	mov	r1, r5
 80014a4:	f7ff fb60 	bl	8000b68 <__aeabi_d2iz>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
	movementTime = movementTime - breakTime;
 80014b4:	4b49      	ldr	r3, [pc, #292]	; (80015dc <move+0x19c>)
 80014b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	4b45      	ldr	r3, [pc, #276]	; (80015dc <move+0x19c>)
 80014c8:	801a      	strh	r2, [r3, #0]

	while(movementTime>0)
 80014ca:	e030      	b.n	800152e <move+0xee>
	{
		if (current_speed < speed)
 80014cc:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <move+0x17c>)
 80014ce:	f993 2000 	ldrsb.w	r2, [r3]
 80014d2:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <move+0x194>)
 80014d4:	f993 3000 	ldrsb.w	r3, [r3]
 80014d8:	429a      	cmp	r2, r3
 80014da:	da09      	bge.n	80014f0 <move+0xb0>
		{
			current_speed += ACCELERATION;
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <move+0x17c>)
 80014de:	f993 3000 	ldrsb.w	r3, [r3]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	330a      	adds	r3, #10
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	b25a      	sxtb	r2, r3
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <move+0x17c>)
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e010      	b.n	8001512 <move+0xd2>
		}
		else if (current_speed > speed)
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <move+0x17c>)
 80014f2:	f993 2000 	ldrsb.w	r2, [r3]
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <move+0x194>)
 80014f8:	f993 3000 	ldrsb.w	r3, [r3]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dd08      	ble.n	8001512 <move+0xd2>
		{
			current_speed -= ACCELERATION;
 8001500:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <move+0x17c>)
 8001502:	f993 3000 	ldrsb.w	r3, [r3]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	3b0a      	subs	r3, #10
 800150a:	b2db      	uxtb	r3, r3
 800150c:	b25a      	sxtb	r2, r3
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <move+0x17c>)
 8001510:	701a      	strb	r2, [r3, #0]
		}
		apply_speed();
 8001512:	f7ff feb1 	bl	8001278 <apply_speed>
		HAL_Delay(LOOP_DELAY);
 8001516:	200a      	movs	r0, #10
 8001518:	f001 fc20 	bl	8002d5c <HAL_Delay>
		movementTime -= LOOP_DELAY;
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <move+0x19c>)
 800151e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001522:	b29b      	uxth	r3, r3
 8001524:	3b0a      	subs	r3, #10
 8001526:	b29b      	uxth	r3, r3
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <move+0x19c>)
 800152c:	801a      	strh	r2, [r3, #0]
	while(movementTime>0)
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <move+0x19c>)
 8001530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001534:	2b00      	cmp	r3, #0
 8001536:	dcc9      	bgt.n	80014cc <move+0x8c>
	}
	while(current_speed>0)
 8001538:	e00d      	b.n	8001556 <move+0x116>
	{
		current_speed -= ACCELERATION;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <move+0x17c>)
 800153c:	f993 3000 	ldrsb.w	r3, [r3]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	3b0a      	subs	r3, #10
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b25a      	sxtb	r2, r3
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <move+0x17c>)
 800154a:	701a      	strb	r2, [r3, #0]
		apply_speed();
 800154c:	f7ff fe94 	bl	8001278 <apply_speed>
		HAL_Delay(LOOP_DELAY);
 8001550:	200a      	movs	r0, #10
 8001552:	f001 fc03 	bl	8002d5c <HAL_Delay>
	while(current_speed>0)
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <move+0x17c>)
 8001558:	f993 3000 	ldrsb.w	r3, [r3]
 800155c:	2b00      	cmp	r3, #0
 800155e:	dcec      	bgt.n	800153a <move+0xfa>
	}
	if (total_Gz < 0) // turned right, must turn left
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <move+0x1a0>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	d506      	bpl.n	800157e <move+0x13e>
	{
		motor(-30, -30);
 8001570:	f06f 011d 	mvn.w	r1, #29
 8001574:	f06f 001d 	mvn.w	r0, #29
 8001578:	f7ff fe20 	bl	80011bc <motor>
 800157c:	e00b      	b.n	8001596 <move+0x156>
	}
	else if (total_Gz > 0)
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <move+0x1a0>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	dd03      	ble.n	8001596 <move+0x156>
	{
		motor(30,30);
 800158e:	211e      	movs	r1, #30
 8001590:	201e      	movs	r0, #30
 8001592:	f7ff fe13 	bl	80011bc <motor>
	}
	HAL_Delay((int)(kp2));
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <move+0x1a4>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a0:	ee17 3a90 	vmov	r3, s15
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 fbd9 	bl	8002d5c <HAL_Delay>
	motor(0,0);
 80015aa:	2100      	movs	r1, #0
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fe05 	bl	80011bc <motor>

}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200003b4 	.word	0x200003b4
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000390 	.word	0x20000390
 80015c8:	20000394 	.word	0x20000394
 80015cc:	00000000 	.word	0x00000000
 80015d0:	20000378 	.word	0x20000378
 80015d4:	200003b0 	.word	0x200003b0
 80015d8:	66666667 	.word	0x66666667
 80015dc:	200003b2 	.word	0x200003b2
 80015e0:	200003a8 	.word	0x200003a8
 80015e4:	20000004 	.word	0x20000004

080015e8 <rotate>:

void rotate(float angle)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	ed87 0a01 	vstr	s0, [r7, #4]

	for(int interations = 0; interations < CALIB; interations++)
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e016      	b.n	8001626 <rotate+0x3e>
	{
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80015f8:	4980      	ldr	r1, [pc, #512]	; (80017fc <rotate+0x214>)
 80015fa:	4881      	ldr	r0, [pc, #516]	; (8001800 <rotate+0x218>)
 80015fc:	f000 fc74 	bl	8001ee8 <MPU6050_Read_All>
	  Gz_mean += MPU6050.Gz;
 8001600:	4b7e      	ldr	r3, [pc, #504]	; (80017fc <rotate+0x214>)
 8001602:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001606:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <rotate+0x21c>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe fe46 	bl	800029c <__adddf3>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	497b      	ldr	r1, [pc, #492]	; (8001804 <rotate+0x21c>)
 8001616:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(50);
 800161a:	2032      	movs	r0, #50	; 0x32
 800161c:	f001 fb9e 	bl	8002d5c <HAL_Delay>
	for(int interations = 0; interations < CALIB; interations++)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b31      	cmp	r3, #49	; 0x31
 800162a:	dde5      	ble.n	80015f8 <rotate+0x10>
	}
	Gz_mean /= CALIB;
 800162c:	4b75      	ldr	r3, [pc, #468]	; (8001804 <rotate+0x21c>)
 800162e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b74      	ldr	r3, [pc, #464]	; (8001808 <rotate+0x220>)
 8001638:	f7ff f910 	bl	800085c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4970      	ldr	r1, [pc, #448]	; (8001804 <rotate+0x21c>)
 8001642:	e9c1 2300 	strd	r2, r3, [r1]

	if (angle > 0)
 8001646:	edd7 7a01 	vldr	s15, [r7, #4]
 800164a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	dd09      	ble.n	8001668 <rotate+0x80>
		angle -= R_offset_error;
 8001654:	4b6d      	ldr	r3, [pc, #436]	; (800180c <rotate+0x224>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ed97 7a01 	vldr	s14, [r7, #4]
 800165e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001662:	edc7 7a01 	vstr	s15, [r7, #4]
 8001666:	e0b7      	b.n	80017d8 <rotate+0x1f0>
	else
		angle += R_offset_error;
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <rotate+0x224>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001676:	edc7 7a01 	vstr	s15, [r7, #4]


	while(abs(angle)>0.1)
 800167a:	e0ad      	b.n	80017d8 <rotate+0x1f0>
	{
		total_Gz = 0;
 800167c:	4b64      	ldr	r3, [pc, #400]	; (8001810 <rotate+0x228>)
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
		if (angle > 0)
 8001684:	edd7 7a01 	vldr	s15, [r7, #4]
 8001688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	dd08      	ble.n	80016a4 <rotate+0xbc>
		{
			mR = MOTOR_SLOW_1-150;
 8001692:	4b60      	ldr	r3, [pc, #384]	; (8001814 <rotate+0x22c>)
 8001694:	f640 225a 	movw	r2, #2650	; 0xa5a
 8001698:	801a      	strh	r2, [r3, #0]
			mL = MOTOR_SLOW_1+50;
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <rotate+0x230>)
 800169c:	f640 3222 	movw	r2, #2850	; 0xb22
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	e062      	b.n	800176a <rotate+0x182>
		}
		else
		{
			mR = MOTOR_SLOW_2+150;
 80016a4:	4b5b      	ldr	r3, [pc, #364]	; (8001814 <rotate+0x22c>)
 80016a6:	f640 42b2 	movw	r2, #3250	; 0xcb2
 80016aa:	801a      	strh	r2, [r3, #0]
			mL = MOTOR_SLOW_2-50;
 80016ac:	4b5a      	ldr	r3, [pc, #360]	; (8001818 <rotate+0x230>)
 80016ae:	f640 32ea 	movw	r2, #3050	; 0xbea
 80016b2:	801a      	strh	r2, [r3, #0]
		}
		while (fabs(total_Gz) - fabs(angle) < 0)
 80016b4:	e059      	b.n	800176a <rotate+0x182>
		{
			TIM1->CCR1 = mR;
 80016b6:	4b57      	ldr	r3, [pc, #348]	; (8001814 <rotate+0x22c>)
 80016b8:	881a      	ldrh	r2, [r3, #0]
 80016ba:	4b58      	ldr	r3, [pc, #352]	; (800181c <rotate+0x234>)
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR3 = mL;
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <rotate+0x230>)
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c6:	63da      	str	r2, [r3, #60]	; 0x3c
			if (angle>0)
 80016c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dd0c      	ble.n	80016f0 <rotate+0x108>
			{
				mR-=5;
 80016d6:	4b4f      	ldr	r3, [pc, #316]	; (8001814 <rotate+0x22c>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	3b05      	subs	r3, #5
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b4d      	ldr	r3, [pc, #308]	; (8001814 <rotate+0x22c>)
 80016e0:	801a      	strh	r2, [r3, #0]
				mL-=5;
 80016e2:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <rotate+0x230>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	3b05      	subs	r3, #5
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	4b4b      	ldr	r3, [pc, #300]	; (8001818 <rotate+0x230>)
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	e00b      	b.n	8001708 <rotate+0x120>
			}
			else
			{
				mR+=5;
 80016f0:	4b48      	ldr	r3, [pc, #288]	; (8001814 <rotate+0x22c>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	3305      	adds	r3, #5
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b46      	ldr	r3, [pc, #280]	; (8001814 <rotate+0x22c>)
 80016fa:	801a      	strh	r2, [r3, #0]
				mL+=5;
 80016fc:	4b46      	ldr	r3, [pc, #280]	; (8001818 <rotate+0x230>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	3305      	adds	r3, #5
 8001702:	b29a      	uxth	r2, r3
 8001704:	4b44      	ldr	r3, [pc, #272]	; (8001818 <rotate+0x230>)
 8001706:	801a      	strh	r2, [r3, #0]
			}
			HAL_Delay(Rdelay);
 8001708:	4b45      	ldr	r3, [pc, #276]	; (8001820 <rotate+0x238>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fb25 	bl	8002d5c <HAL_Delay>
			MPU6050_Read_All(&hi2c1, &MPU6050);
 8001712:	493a      	ldr	r1, [pc, #232]	; (80017fc <rotate+0x214>)
 8001714:	483a      	ldr	r0, [pc, #232]	; (8001800 <rotate+0x218>)
 8001716:	f000 fbe7 	bl	8001ee8 <MPU6050_Read_All>
			current_Gz = (MPU6050.Gz - Gz_mean);
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <rotate+0x214>)
 800171c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001720:	4b38      	ldr	r3, [pc, #224]	; (8001804 <rotate+0x21c>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe fdb7 	bl	8000298 <__aeabi_dsub>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f7ff fa61 	bl	8000bf8 <__aeabi_d2f>
 8001736:	4603      	mov	r3, r0
 8001738:	4a3a      	ldr	r2, [pc, #232]	; (8001824 <rotate+0x23c>)
 800173a:	6013      	str	r3, [r2, #0]
			total_Gz += current_Gz * (Rdelay / 1000.0f);
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <rotate+0x238>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001748:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001828 <rotate+0x240>
 800174c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001750:	4b34      	ldr	r3, [pc, #208]	; (8001824 <rotate+0x23c>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <rotate+0x228>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <rotate+0x228>)
 8001766:	edc3 7a00 	vstr	s15, [r3]
		while (fabs(total_Gz) - fabs(angle) < 0)
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <rotate+0x228>)
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	eef0 7ae7 	vabs.f32	s15, s15
 8001774:	ee17 0a90 	vmov	r0, s15
 8001778:	f7fe feee 	bl	8000558 <__aeabi_f2d>
 800177c:	4604      	mov	r4, r0
 800177e:	460d      	mov	r5, r1
 8001780:	edd7 7a01 	vldr	s15, [r7, #4]
 8001784:	eef0 7ae7 	vabs.f32	s15, s15
 8001788:	ee17 0a90 	vmov	r0, s15
 800178c:	f7fe fee4 	bl	8000558 <__aeabi_f2d>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7fe fd7e 	bl	8000298 <__aeabi_dsub>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	f7ff f99e 	bl	8000aec <__aeabi_dcmplt>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f47f af7f 	bne.w	80016b6 <rotate+0xce>
		}
		TIM1->CCR1 = 0;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <rotate+0x234>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR3 = 0;
 80017be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c2:	2200      	movs	r2, #0
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c
		angle = angle - total_Gz;
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <rotate+0x228>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80017d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d4:	edc7 7a01 	vstr	s15, [r7, #4]
	while(abs(angle)>0.1)
 80017d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 3a90 	vmov	r3, s15
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfb8      	it	lt
 80017e8:	425b      	neglt	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f73f af46 	bgt.w	800167c <rotate+0x94>
	}
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdb0      	pop	{r4, r5, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000300 	.word	0x20000300
 8001800:	200002ac 	.word	0x200002ac
 8001804:	20000360 	.word	0x20000360
 8001808:	40490000 	.word	0x40490000
 800180c:	200003a0 	.word	0x200003a0
 8001810:	200003a8 	.word	0x200003a8
 8001814:	200003ac 	.word	0x200003ac
 8001818:	200003ae 	.word	0x200003ae
 800181c:	40010000 	.word	0x40010000
 8001820:	2000000c 	.word	0x2000000c
 8001824:	200003a4 	.word	0x200003a4
 8001828:	447a0000 	.word	0x447a0000

0800182c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001832:	f001 fa21 	bl	8002c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001836:	f000 fa61 	bl	8001cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183a:	f7ff fbe1 	bl	8001000 <MX_GPIO_Init>
  MX_TIM1_Init();
 800183e:	f000 ffc9 	bl	80027d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001842:	f001 f867 	bl	8002914 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001846:	f001 f973 	bl	8002b30 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800184a:	f7ff fc39 	bl	80010c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001854:	486a      	ldr	r0, [pc, #424]	; (8001a00 <main+0x1d4>)
 8001856:	f001 fdcd 	bl	80033f4 <HAL_GPIO_WritePin>
  HAL_Delay(10000);
 800185a:	f242 7010 	movw	r0, #10000	; 0x2710
 800185e:	f001 fa7d 	bl	8002d5c <HAL_Delay>

  while (MPU6050_Init(&hi2c1) == 1); //Initialise the MPU6050
 8001862:	bf00      	nop
 8001864:	4867      	ldr	r0, [pc, #412]	; (8001a04 <main+0x1d8>)
 8001866:	f000 fae8 	bl	8001e3a <MPU6050_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b01      	cmp	r3, #1
 800186e:	d0f9      	beq.n	8001864 <main+0x38>
  // calibrate MPU6050
  for(int interations = 0; interations < CALIB; interations++)
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e030      	b.n	80018d8 <main+0xac>
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001876:	4964      	ldr	r1, [pc, #400]	; (8001a08 <main+0x1dc>)
 8001878:	4862      	ldr	r0, [pc, #392]	; (8001a04 <main+0x1d8>)
 800187a:	f000 fb35 	bl	8001ee8 <MPU6050_Read_All>
	  Gz_mean += MPU6050.Gz;
 800187e:	4b62      	ldr	r3, [pc, #392]	; (8001a08 <main+0x1dc>)
 8001880:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001884:	4b61      	ldr	r3, [pc, #388]	; (8001a0c <main+0x1e0>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7fe fd07 	bl	800029c <__adddf3>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	495e      	ldr	r1, [pc, #376]	; (8001a0c <main+0x1e0>)
 8001894:	e9c1 2300 	strd	r2, r3, [r1]
	  Ax_mean += MPU6050.Ax;
 8001898:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <main+0x1dc>)
 800189a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800189e:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <main+0x1e4>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fcfa 	bl	800029c <__adddf3>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4958      	ldr	r1, [pc, #352]	; (8001a10 <main+0x1e4>)
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
	  Ay_mean += MPU6050.Ay;
 80018b2:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <main+0x1dc>)
 80018b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80018b8:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <main+0x1e8>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fced 	bl	800029c <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4953      	ldr	r1, [pc, #332]	; (8001a14 <main+0x1e8>)
 80018c8:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(50);
 80018cc:	2032      	movs	r0, #50	; 0x32
 80018ce:	f001 fa45 	bl	8002d5c <HAL_Delay>
  for(int interations = 0; interations < CALIB; interations++)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b31      	cmp	r3, #49	; 0x31
 80018dc:	ddcb      	ble.n	8001876 <main+0x4a>
  }
  Gz_mean /= CALIB;
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <main+0x1e0>)
 80018e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b4b      	ldr	r3, [pc, #300]	; (8001a18 <main+0x1ec>)
 80018ea:	f7fe ffb7 	bl	800085c <__aeabi_ddiv>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4946      	ldr	r1, [pc, #280]	; (8001a0c <main+0x1e0>)
 80018f4:	e9c1 2300 	strd	r2, r3, [r1]
  Ax_mean /= CALIB;
 80018f8:	4b45      	ldr	r3, [pc, #276]	; (8001a10 <main+0x1e4>)
 80018fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b45      	ldr	r3, [pc, #276]	; (8001a18 <main+0x1ec>)
 8001904:	f7fe ffaa 	bl	800085c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4940      	ldr	r1, [pc, #256]	; (8001a10 <main+0x1e4>)
 800190e:	e9c1 2300 	strd	r2, r3, [r1]
  Ay_mean /= CALIB;
 8001912:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <main+0x1e8>)
 8001914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <main+0x1ec>)
 800191e:	f7fe ff9d 	bl	800085c <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	493b      	ldr	r1, [pc, #236]	; (8001a14 <main+0x1e8>)
 8001928:	e9c1 2300 	strd	r2, r3, [r1]

  HAL_TIM_PWM_Init(&htim1);
 800192c:	483b      	ldr	r0, [pc, #236]	; (8001a1c <main+0x1f0>)
 800192e:	f003 f9e2 	bl	8004cf6 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8001932:	483b      	ldr	r0, [pc, #236]	; (8001a20 <main+0x1f4>)
 8001934:	f003 f9df 	bl	8004cf6 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001938:	2100      	movs	r1, #0
 800193a:	4838      	ldr	r0, [pc, #224]	; (8001a1c <main+0x1f0>)
 800193c:	f003 fa34 	bl	8004da8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001940:	2108      	movs	r1, #8
 8001942:	4837      	ldr	r0, [pc, #220]	; (8001a20 <main+0x1f4>)
 8001944:	f003 fa30 	bl	8004da8 <HAL_TIM_PWM_Start>
  TIM1->CR1 = 0x01;
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <main+0x1f8>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]
  TIM2->CR1 = 0x01;
 800194e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001952:	2201      	movs	r2, #1
 8001954:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 8001956:	2201      	movs	r2, #1
 8001958:	4933      	ldr	r1, [pc, #204]	; (8001a28 <main+0x1fc>)
 800195a:	4834      	ldr	r0, [pc, #208]	; (8001a2c <main+0x200>)
 800195c:	f004 f8c9 	bl	8005af2 <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001966:	4826      	ldr	r0, [pc, #152]	; (8001a00 <main+0x1d4>)
 8001968:	f001 fd44 	bl	80033f4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// check if there is any new command
	if (USART_recive == 1)
 800196c:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <main+0x204>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	f040 8140 	bne.w	8001bf6 <main+0x3ca>
	{
	  char *delimiter = " ";
 8001976:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <main+0x208>)
 8001978:	60bb      	str	r3, [r7, #8]
	  char *saveptr;
	  char *token;
	  token = strtok_r(rx_buffer, delimiter, &saveptr);
 800197a:	463b      	mov	r3, r7
 800197c:	461a      	mov	r2, r3
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	482d      	ldr	r0, [pc, #180]	; (8001a38 <main+0x20c>)
 8001982:	f006 fed0 	bl	8008726 <strtok_r>
 8001986:	6078      	str	r0, [r7, #4]
	  if (token != NULL) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <main+0x16c>
		  command = token[0];
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <main+0x210>)
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	e002      	b.n	800199e <main+0x172>
	  }
	  else
	  {
		  command = COMMAND_NC; // failed to read the command, so drop it
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <main+0x210>)
 800199a:	224e      	movs	r2, #78	; 0x4e
 800199c:	701a      	strb	r2, [r3, #0]
	  }
	  // commands with 1 or 2 arguments
	  if (command == COMMAND_MOVE || command == COMMAND_ROTATE)
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <main+0x210>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b4d      	cmp	r3, #77	; 0x4d
 80019a4:	d003      	beq.n	80019ae <main+0x182>
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <main+0x210>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b52      	cmp	r3, #82	; 0x52
 80019ac:	d14f      	bne.n	8001a4e <main+0x222>
	  {
		  token = strtok_r(NULL, delimiter, &saveptr);
 80019ae:	463b      	mov	r3, r7
 80019b0:	461a      	mov	r2, r3
 80019b2:	68b9      	ldr	r1, [r7, #8]
 80019b4:	2000      	movs	r0, #0
 80019b6:	f006 feb6 	bl	8008726 <strtok_r>
 80019ba:	6078      	str	r0, [r7, #4]
		  if (token != NULL) {
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <main+0x1a4>
			  Arg1 = atoi(token);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f005 f831 	bl	8006a2a <atoi>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <main+0x214>)
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e002      	b.n	80019d6 <main+0x1aa>
		  }
		  else
		  {
			  command = COMMAND_NC; // failed to read arguments, so drop the command
 80019d0:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <main+0x210>)
 80019d2:	224e      	movs	r2, #78	; 0x4e
 80019d4:	701a      	strb	r2, [r3, #0]
		  }
		  // commands with a second argument
		  if (command == COMMAND_MOVE)
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <main+0x210>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b4d      	cmp	r3, #77	; 0x4d
 80019dc:	d137      	bne.n	8001a4e <main+0x222>
		  {
			  token = strtok_r(NULL, delimiter, &saveptr);
 80019de:	463b      	mov	r3, r7
 80019e0:	461a      	mov	r2, r3
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	2000      	movs	r0, #0
 80019e6:	f006 fe9e 	bl	8008726 <strtok_r>
 80019ea:	6078      	str	r0, [r7, #4]
			  if (token != NULL) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d02a      	beq.n	8001a48 <main+0x21c>
				  Arg2 = atoi(token);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f005 f819 	bl	8006a2a <atoi>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <main+0x218>)
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e026      	b.n	8001a4e <main+0x222>
 8001a00:	40020800 	.word	0x40020800
 8001a04:	200002ac 	.word	0x200002ac
 8001a08:	20000300 	.word	0x20000300
 8001a0c:	20000360 	.word	0x20000360
 8001a10:	20000368 	.word	0x20000368
 8001a14:	20000370 	.word	0x20000370
 8001a18:	40490000 	.word	0x40490000
 8001a1c:	200003ec 	.word	0x200003ec
 8001a20:	20000434 	.word	0x20000434
 8001a24:	40010000 	.word	0x40010000
 8001a28:	200003d8 	.word	0x200003d8
 8001a2c:	2000047c 	.word	0x2000047c
 8001a30:	200003d7 	.word	0x200003d7
 8001a34:	0800b950 	.word	0x0800b950
 8001a38:	200003b8 	.word	0x200003b8
 8001a3c:	20000010 	.word	0x20000010
 8001a40:	200003dc 	.word	0x200003dc
 8001a44:	200003e0 	.word	0x200003e0
			  }
			  else
			  {
				  command = COMMAND_NC; // failed to read arguments, so drop the command
 8001a48:	4b99      	ldr	r3, [pc, #612]	; (8001cb0 <main+0x484>)
 8001a4a:	224e      	movs	r2, #78	; 0x4e
 8001a4c:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  // TODO: remove later / for debugging
	  if (command == 'P')
 8001a4e:	4b98      	ldr	r3, [pc, #608]	; (8001cb0 <main+0x484>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b50      	cmp	r3, #80	; 0x50
 8001a54:	d14f      	bne.n	8001af6 <main+0x2ca>
	  {
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001a56:	463b      	mov	r3, r7
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f006 fe62 	bl	8008726 <strtok_r>
 8001a62:	6078      	str	r0, [r7, #4]
		  kp = atof(token);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f004 ffdd 	bl	8006a24 <atof>
 8001a6a:	ec53 2b10 	vmov	r2, r3, d0
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f8c1 	bl	8000bf8 <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a8e      	ldr	r2, [pc, #568]	; (8001cb4 <main+0x488>)
 8001a7a:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	2000      	movs	r0, #0
 8001a84:	f006 fe4f 	bl	8008726 <strtok_r>
 8001a88:	6078      	str	r0, [r7, #4]
		  ki = atof(token);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f004 ffca 	bl	8006a24 <atof>
 8001a90:	ec53 2b10 	vmov	r2, r3, d0
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7ff f8ae 	bl	8000bf8 <__aeabi_d2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a86      	ldr	r2, [pc, #536]	; (8001cb8 <main+0x48c>)
 8001aa0:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68b9      	ldr	r1, [r7, #8]
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f006 fe3c 	bl	8008726 <strtok_r>
 8001aae:	6078      	str	r0, [r7, #4]
		  kd = atof(token);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f004 ffb7 	bl	8006a24 <atof>
 8001ab6:	ec53 2b10 	vmov	r2, r3, d0
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f89b 	bl	8000bf8 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a7d      	ldr	r2, [pc, #500]	; (8001cbc <main+0x490>)
 8001ac6:	6013      	str	r3, [r2, #0]
		  PID_init(&pid_m, kp, ki, kd, 0);
 8001ac8:	4b7a      	ldr	r3, [pc, #488]	; (8001cb4 <main+0x488>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	4b7a      	ldr	r3, [pc, #488]	; (8001cb8 <main+0x48c>)
 8001ad0:	ed93 7a00 	vldr	s14, [r3]
 8001ad4:	4b79      	ldr	r3, [pc, #484]	; (8001cbc <main+0x490>)
 8001ad6:	edd3 6a00 	vldr	s13, [r3]
 8001ada:	eddf 1a79 	vldr	s3, [pc, #484]	; 8001cc0 <main+0x494>
 8001ade:	eeb0 1a66 	vmov.f32	s2, s13
 8001ae2:	eef0 0a47 	vmov.f32	s1, s14
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	4876      	ldr	r0, [pc, #472]	; (8001cc4 <main+0x498>)
 8001aec:	f7ff fb98 	bl	8001220 <PID_init>
		  command = COMMAND_NC;
 8001af0:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <main+0x484>)
 8001af2:	224e      	movs	r2, #78	; 0x4e
 8001af4:	701a      	strb	r2, [r3, #0]
	  }
	  if (command == 'X')
 8001af6:	4b6e      	ldr	r3, [pc, #440]	; (8001cb0 <main+0x484>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b58      	cmp	r3, #88	; 0x58
 8001afc:	d16e      	bne.n	8001bdc <main+0x3b0>
	  {
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001afe:	463b      	mov	r3, r7
 8001b00:	461a      	mov	r2, r3
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	2000      	movs	r0, #0
 8001b06:	f006 fe0e 	bl	8008726 <strtok_r>
 8001b0a:	6078      	str	r0, [r7, #4]
		  kp2 = atof(token);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f004 ff89 	bl	8006a24 <atof>
 8001b12:	ec53 2b10 	vmov	r2, r3, d0
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f86d 	bl	8000bf8 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <main+0x49c>)
 8001b22:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001b24:	463b      	mov	r3, r7
 8001b26:	461a      	mov	r2, r3
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f006 fdfb 	bl	8008726 <strtok_r>
 8001b30:	6078      	str	r0, [r7, #4]
		  ki2 = atof(token);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f004 ff76 	bl	8006a24 <atof>
 8001b38:	ec53 2b10 	vmov	r2, r3, d0
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff f85a 	bl	8000bf8 <__aeabi_d2f>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a61      	ldr	r2, [pc, #388]	; (8001ccc <main+0x4a0>)
 8001b48:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	2000      	movs	r0, #0
 8001b52:	f006 fde8 	bl	8008726 <strtok_r>
 8001b56:	6078      	str	r0, [r7, #4]
		  kd2 = atof(token);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f004 ff63 	bl	8006a24 <atof>
 8001b5e:	ec53 2b10 	vmov	r2, r3, d0
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff f847 	bl	8000bf8 <__aeabi_d2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <main+0x4a4>)
 8001b6e:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001b70:	463b      	mov	r3, r7
 8001b72:	461a      	mov	r2, r3
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	2000      	movs	r0, #0
 8001b78:	f006 fdd5 	bl	8008726 <strtok_r>
 8001b7c:	6078      	str	r0, [r7, #4]
		  GzMul = atof(token);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f004 ff50 	bl	8006a24 <atof>
 8001b84:	ec53 2b10 	vmov	r2, r3, d0
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff f834 	bl	8000bf8 <__aeabi_d2f>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <main+0x4a8>)
 8001b94:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001b96:	463b      	mov	r3, r7
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f006 fdc2 	bl	8008726 <strtok_r>
 8001ba2:	6078      	str	r0, [r7, #4]
		  R_offset_error = atof(token);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f004 ff3d 	bl	8006a24 <atof>
 8001baa:	ec53 2b10 	vmov	r2, r3, d0
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7ff f821 	bl	8000bf8 <__aeabi_d2f>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <main+0x4ac>)
 8001bba:	6013      	str	r3, [r2, #0]
		  token = strtok_r(NULL, delimiter, &saveptr);
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f006 fdaf 	bl	8008726 <strtok_r>
 8001bc8:	6078      	str	r0, [r7, #4]
		  Rdelay = atoi(token);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f004 ff2d 	bl	8006a2a <atoi>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a42      	ldr	r2, [pc, #264]	; (8001cdc <main+0x4b0>)
 8001bd4:	6013      	str	r3, [r2, #0]
		  command = COMMAND_NC;
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <main+0x484>)
 8001bd8:	224e      	movs	r2, #78	; 0x4e
 8001bda:	701a      	strb	r2, [r3, #0]
	  }
	  USART_recive = 0;
 8001bdc:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <main+0x4b4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
	  if (command == COMMAND_NC)
 8001be2:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <main+0x484>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b4e      	cmp	r3, #78	; 0x4e
 8001be8:	d105      	bne.n	8001bf6 <main+0x3ca>
		  HAL_UART_Transmit(&huart1, (uint8_t *)("DONE"), sizeof("DONE"), 100);
 8001bea:	2364      	movs	r3, #100	; 0x64
 8001bec:	2205      	movs	r2, #5
 8001bee:	493d      	ldr	r1, [pc, #244]	; (8001ce4 <main+0x4b8>)
 8001bf0:	483d      	ldr	r0, [pc, #244]	; (8001ce8 <main+0x4bc>)
 8001bf2:	f003 feec 	bl	80059ce <HAL_UART_Transmit>
	}
	// handle current command
	switch(command)
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <main+0x484>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	3b48      	subs	r3, #72	; 0x48
 8001bfc:	2b0a      	cmp	r3, #10
 8001bfe:	d854      	bhi.n	8001caa <main+0x47e>
 8001c00:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <main+0x3dc>)
 8001c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c06:	bf00      	nop
 8001c08:	08001c35 	.word	0x08001c35
 8001c0c:	08001cab 	.word	0x08001cab
 8001c10:	08001cab 	.word	0x08001cab
 8001c14:	08001cab 	.word	0x08001cab
 8001c18:	08001cab 	.word	0x08001cab
 8001c1c:	08001c57 	.word	0x08001c57
 8001c20:	08001cab 	.word	0x08001cab
 8001c24:	08001cab 	.word	0x08001cab
 8001c28:	08001cab 	.word	0x08001cab
 8001c2c:	08001cab 	.word	0x08001cab
 8001c30:	08001c83 	.word	0x08001c83
	case COMMAND_NC:
		// nothing to do
		break;
	case COMMAND_HALT:
		// stop both movement and rotation
		speed = 0;
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <main+0x4c0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
		move();
 8001c3a:	f7ff fc01 	bl	8001440 <move>
		apply_speed();
 8001c3e:	f7ff fb1b 	bl	8001278 <apply_speed>
		command = COMMAND_NC; // command done
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <main+0x484>)
 8001c44:	224e      	movs	r2, #78	; 0x4e
 8001c46:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)("DONE"), sizeof("DONE"), 100);
 8001c48:	2364      	movs	r3, #100	; 0x64
 8001c4a:	2205      	movs	r2, #5
 8001c4c:	4925      	ldr	r1, [pc, #148]	; (8001ce4 <main+0x4b8>)
 8001c4e:	4826      	ldr	r0, [pc, #152]	; (8001ce8 <main+0x4bc>)
 8001c50:	f003 febd 	bl	80059ce <HAL_UART_Transmit>
		break;
 8001c54:	e02a      	b.n	8001cac <main+0x480>
	case COMMAND_MOVE:
		// set speed
		speed = Arg1;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <main+0x4c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	b25a      	sxtb	r2, r3
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <main+0x4c0>)
 8001c5e:	701a      	strb	r2, [r3, #0]
		movementTime = Arg2;
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <main+0x4c8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <main+0x4cc>)
 8001c68:	801a      	strh	r2, [r3, #0]
		move();
 8001c6a:	f7ff fbe9 	bl	8001440 <move>
		command = COMMAND_NC; // command done
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <main+0x484>)
 8001c70:	224e      	movs	r2, #78	; 0x4e
 8001c72:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)("DONE"), sizeof("DONE"), 100);
 8001c74:	2364      	movs	r3, #100	; 0x64
 8001c76:	2205      	movs	r2, #5
 8001c78:	491a      	ldr	r1, [pc, #104]	; (8001ce4 <main+0x4b8>)
 8001c7a:	481b      	ldr	r0, [pc, #108]	; (8001ce8 <main+0x4bc>)
 8001c7c:	f003 fea7 	bl	80059ce <HAL_UART_Transmit>
		break;
 8001c80:	e014      	b.n	8001cac <main+0x480>
	case COMMAND_ROTATE:
		rotate(Arg1);
 8001c82:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <main+0x4c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c92:	f7ff fca9 	bl	80015e8 <rotate>
		command = COMMAND_NC; // command done
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <main+0x484>)
 8001c98:	224e      	movs	r2, #78	; 0x4e
 8001c9a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)("DONE"), sizeof("DONE"), 100);
 8001c9c:	2364      	movs	r3, #100	; 0x64
 8001c9e:	2205      	movs	r2, #5
 8001ca0:	4910      	ldr	r1, [pc, #64]	; (8001ce4 <main+0x4b8>)
 8001ca2:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <main+0x4bc>)
 8001ca4:	f003 fe93 	bl	80059ce <HAL_UART_Transmit>
		break;
 8001ca8:	e000      	b.n	8001cac <main+0x480>
	default:
		// TODO: implementation of other commands
		break;
 8001caa:	bf00      	nop
	if (USART_recive == 1)
 8001cac:	e65e      	b.n	800196c <main+0x140>
 8001cae:	bf00      	nop
 8001cb0:	20000010 	.word	0x20000010
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000390 	.word	0x20000390
 8001cbc:	20000394 	.word	0x20000394
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	20000378 	.word	0x20000378
 8001cc8:	20000004 	.word	0x20000004
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000398 	.word	0x20000398
 8001cd4:	2000039c 	.word	0x2000039c
 8001cd8:	200003a0 	.word	0x200003a0
 8001cdc:	2000000c 	.word	0x2000000c
 8001ce0:	200003d7 	.word	0x200003d7
 8001ce4:	0800b954 	.word	0x0800b954
 8001ce8:	2000047c 	.word	0x2000047c
 8001cec:	200003b0 	.word	0x200003b0
 8001cf0:	200003dc 	.word	0x200003dc
 8001cf4:	200003e0 	.word	0x200003e0
 8001cf8:	200003b2 	.word	0x200003b2

08001cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b094      	sub	sp, #80	; 0x50
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2230      	movs	r2, #48	; 0x30
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f006 fcc9 	bl	80086a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a27      	ldr	r2, [pc, #156]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <SystemClock_Config+0xd0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <SystemClock_Config+0xd0>)
 8001d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <SystemClock_Config+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d66:	2302      	movs	r3, #2
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8001d70:	2314      	movs	r3, #20
 8001d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d80:	f107 0320 	add.w	r3, r7, #32
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fb0f 	bl	80043a8 <HAL_RCC_OscConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d90:	f000 f84e 	bl	8001e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d94:	230f      	movs	r3, #15
 8001d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	2102      	movs	r1, #2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 fd71 	bl	8004898 <HAL_RCC_ClockConfig>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001dbc:	f000 f838 	bl	8001e30 <Error_Handler>
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3750      	adds	r7, #80	; 0x50
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000

08001dd0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);


  rx_buffer[rx_buffer_index++] = UART1_rxBuffer[0];
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_UART_RxCpltCallback+0x4c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	b2d1      	uxtb	r1, r2
 8001de0:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <HAL_UART_RxCpltCallback+0x4c>)
 8001de2:	7011      	strb	r1, [r2, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_UART_RxCpltCallback+0x50>)
 8001de8:	7819      	ldrb	r1, [r3, #0]
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_UART_RxCpltCallback+0x54>)
 8001dec:	5499      	strb	r1, [r3, r2]

  if ((UART1_rxBuffer[0] == '\r') || rx_buffer_index > 30) // end of data
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_UART_RxCpltCallback+0x50>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b0d      	cmp	r3, #13
 8001df4:	d003      	beq.n	8001dfe <HAL_UART_RxCpltCallback+0x2e>
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_UART_RxCpltCallback+0x4c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b1e      	cmp	r3, #30
 8001dfc:	d905      	bls.n	8001e0a <HAL_UART_RxCpltCallback+0x3a>
  {
	  rx_buffer_index = 0;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_UART_RxCpltCallback+0x4c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
	  USART_recive = 1;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_UART_RxCpltCallback+0x58>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4904      	ldr	r1, [pc, #16]	; (8001e20 <HAL_UART_RxCpltCallback+0x50>)
 8001e0e:	4807      	ldr	r0, [pc, #28]	; (8001e2c <HAL_UART_RxCpltCallback+0x5c>)
 8001e10:	f003 fe6f 	bl	8005af2 <HAL_UART_Receive_IT>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200003d6 	.word	0x200003d6
 8001e20:	200003d8 	.word	0x200003d8
 8001e24:	200003b8 	.word	0x200003b8
 8001e28:	200003d7 	.word	0x200003d7
 8001e2c:	2000047c 	.word	0x2000047c

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e34:	b672      	cpsid	i
}
 8001e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <Error_Handler+0x8>

08001e3a <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b088      	sub	sp, #32
 8001e3e:	af04      	add	r7, sp, #16
 8001e40:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001e42:	2364      	movs	r3, #100	; 0x64
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	2301      	movs	r3, #1
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	f107 030f 	add.w	r3, r7, #15
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2301      	movs	r3, #1
 8001e52:	2275      	movs	r2, #117	; 0x75
 8001e54:	21d0      	movs	r1, #208	; 0xd0
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f001 fd24 	bl	80038a4 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	2b68      	cmp	r3, #104	; 0x68
 8001e60:	d13d      	bne.n	8001ede <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001e66:	2364      	movs	r3, #100	; 0x64
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	f107 030e 	add.w	r3, r7, #14
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2301      	movs	r3, #1
 8001e76:	226b      	movs	r2, #107	; 0x6b
 8001e78:	21d0      	movs	r1, #208	; 0xd0
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f001 fc18 	bl	80036b0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001e80:	2307      	movs	r3, #7
 8001e82:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001e84:	2364      	movs	r3, #100	; 0x64
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	f107 030e 	add.w	r3, r7, #14
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2301      	movs	r3, #1
 8001e94:	2219      	movs	r2, #25
 8001e96:	21d0      	movs	r1, #208	; 0xd0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f001 fc09 	bl	80036b0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ea2:	2364      	movs	r3, #100	; 0x64
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	f107 030e 	add.w	r3, r7, #14
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	221c      	movs	r2, #28
 8001eb4:	21d0      	movs	r1, #208	; 0xd0
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f001 fbfa 	bl	80036b0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ec0:	2364      	movs	r3, #100	; 0x64
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	f107 030e 	add.w	r3, r7, #14
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	221b      	movs	r2, #27
 8001ed2:	21d0      	movs	r1, #208	; 0xd0
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f001 fbeb 	bl	80036b0 <HAL_I2C_Mem_Write>
        return 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e000      	b.n	8001ee0 <MPU6050_Init+0xa6>
    }
    return 1;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001eec:	b094      	sub	sp, #80	; 0x50
 8001eee:	af04      	add	r7, sp, #16
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001ef4:	2364      	movs	r3, #100	; 0x64
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	230e      	movs	r3, #14
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2301      	movs	r3, #1
 8001f04:	223b      	movs	r2, #59	; 0x3b
 8001f06:	21d0      	movs	r1, #208	; 0xd0
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f001 fccb 	bl	80038a4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001f0e:	7a3b      	ldrb	r3, [r7, #8]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	7a7b      	ldrb	r3, [r7, #9]
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001f20:	7abb      	ldrb	r3, [r7, #10]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001f32:	7b3b      	ldrb	r3, [r7, #12]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	7b7b      	ldrb	r3, [r7, #13]
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001f52:	7c3b      	ldrb	r3, [r7, #16]
 8001f54:	021b      	lsls	r3, r3, #8
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	7c7b      	ldrb	r3, [r7, #17]
 8001f5a:	b21b      	sxth	r3, r3
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001f64:	7cbb      	ldrb	r3, [r7, #18]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	7cfb      	ldrb	r3, [r7, #19]
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001f76:	7d3b      	ldrb	r3, [r7, #20]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	7d7b      	ldrb	r3, [r7, #21]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b21a      	sxth	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fad0 	bl	8000534 <__aeabi_i2d>
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	4bbd      	ldr	r3, [pc, #756]	; (8002290 <MPU6050_Read_All+0x3a8>)
 8001f9a:	f7fe fc5f 	bl	800085c <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fac0 	bl	8000534 <__aeabi_i2d>
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	4bb5      	ldr	r3, [pc, #724]	; (8002290 <MPU6050_Read_All+0x3a8>)
 8001fba:	f7fe fc4f 	bl	800085c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	6839      	ldr	r1, [r7, #0]
 8001fc4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fab0 	bl	8000534 <__aeabi_i2d>
 8001fd4:	a3a8      	add	r3, pc, #672	; (adr r3, 8002278 <MPU6050_Read_All+0x390>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fc3f 	bl	800085c <__aeabi_ddiv>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001fe8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff4:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002294 <MPU6050_Read_All+0x3ac>
 8001ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ffc:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002298 <MPU6050_Read_All+0x3b0>
 8002000:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa8f 	bl	8000534 <__aeabi_i2d>
 8002016:	a39a      	add	r3, pc, #616	; (adr r3, 8002280 <MPU6050_Read_All+0x398>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe fc1e 	bl	800085c <__aeabi_ddiv>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	6839      	ldr	r1, [r7, #0]
 8002026:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fa7f 	bl	8000534 <__aeabi_i2d>
 8002036:	a392      	add	r3, pc, #584	; (adr r3, 8002280 <MPU6050_Read_All+0x398>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fc0e 	bl	800085c <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa6f 	bl	8000534 <__aeabi_i2d>
 8002056:	a38a      	add	r3, pc, #552	; (adr r3, 8002280 <MPU6050_Read_All+0x398>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe fbfe 	bl	800085c <__aeabi_ddiv>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	6839      	ldr	r1, [r7, #0]
 8002066:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800206a:	f000 fe6b 	bl	8002d44 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	4b8a      	ldr	r3, [pc, #552]	; (800229c <MPU6050_Read_All+0x3b4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa4c 	bl	8000514 <__aeabi_ui2d>
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	4b87      	ldr	r3, [pc, #540]	; (80022a0 <MPU6050_Read_All+0x3b8>)
 8002082:	f7fe fbeb 	bl	800085c <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800208e:	f000 fe59 	bl	8002d44 <HAL_GetTick>
 8002092:	4603      	mov	r3, r0
 8002094:	4a81      	ldr	r2, [pc, #516]	; (800229c <MPU6050_Read_All+0x3b4>)
 8002096:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209e:	461a      	mov	r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a6:	fb03 f202 	mul.w	r2, r3, r2
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020b0:	4619      	mov	r1, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa38 	bl	8000534 <__aeabi_i2d>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	ec43 2b10 	vmov	d0, r2, r3
 80020cc:	f009 f8ba 	bl	800b244 <sqrt>
 80020d0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020e0:	f7fe fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d11f      	bne.n	800212a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fa1f 	bl	8000534 <__aeabi_i2d>
 80020f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020fa:	f7fe fbaf 	bl	800085c <__aeabi_ddiv>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	ec43 2b17 	vmov	d7, r2, r3
 8002106:	eeb0 0a47 	vmov.f32	s0, s14
 800210a:	eef0 0a67 	vmov.f32	s1, s15
 800210e:	f009 f8c7 	bl	800b2a0 <atan>
 8002112:	ec51 0b10 	vmov	r0, r1, d0
 8002116:	a35c      	add	r3, pc, #368	; (adr r3, 8002288 <MPU6050_Read_All+0x3a0>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe fa74 	bl	8000608 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002128:	e005      	b.n	8002136 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213c:	425b      	negs	r3, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f9f8 	bl	8000534 <__aeabi_i2d>
 8002144:	4682      	mov	sl, r0
 8002146:	468b      	mov	fp, r1
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f9f0 	bl	8000534 <__aeabi_i2d>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	ec43 2b11 	vmov	d1, r2, r3
 800215c:	ec4b ab10 	vmov	d0, sl, fp
 8002160:	f009 f86e 	bl	800b240 <atan2>
 8002164:	ec51 0b10 	vmov	r0, r1, d0
 8002168:	a347      	add	r3, pc, #284	; (adr r3, 8002288 <MPU6050_Read_All+0x3a0>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa4b 	bl	8000608 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	4b49      	ldr	r3, [pc, #292]	; (80022a4 <MPU6050_Read_All+0x3bc>)
 8002180:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002184:	f7fe fcb2 	bl	8000aec <__aeabi_dcmplt>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <MPU6050_Read_All+0x2bc>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b43      	ldr	r3, [pc, #268]	; (80022a8 <MPU6050_Read_All+0x3c0>)
 800219a:	f7fe fcc5 	bl	8000b28 <__aeabi_dcmpgt>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d114      	bne.n	80021ce <MPU6050_Read_All+0x2e6>
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b3f      	ldr	r3, [pc, #252]	; (80022a8 <MPU6050_Read_All+0x3c0>)
 80021aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021ae:	f7fe fcbb 	bl	8000b28 <__aeabi_dcmpgt>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d015      	beq.n	80021e4 <MPU6050_Read_All+0x2fc>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <MPU6050_Read_All+0x3bc>)
 80021c4:	f7fe fc92 	bl	8000aec <__aeabi_dcmplt>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80021ce:	4937      	ldr	r1, [pc, #220]	; (80022ac <MPU6050_Read_All+0x3c4>)
 80021d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80021e2:	e014      	b.n	800220e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80021ea:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80021ee:	eeb0 1a47 	vmov.f32	s2, s14
 80021f2:	eef0 1a67 	vmov.f32	s3, s15
 80021f6:	ed97 0b06 	vldr	d0, [r7, #24]
 80021fa:	482c      	ldr	r0, [pc, #176]	; (80022ac <MPU6050_Read_All+0x3c4>)
 80021fc:	f000 f85a 	bl	80022b4 <Kalman_getAngle>
 8002200:	eeb0 7a40 	vmov.f32	s14, s0
 8002204:	eef0 7a60 	vmov.f32	s15, s1
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002214:	4690      	mov	r8, r2
 8002216:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <MPU6050_Read_All+0x3c0>)
 8002220:	4640      	mov	r0, r8
 8002222:	4649      	mov	r1, r9
 8002224:	f7fe fc80 	bl	8000b28 <__aeabi_dcmpgt>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d008      	beq.n	8002240 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002234:	4614      	mov	r4, r2
 8002236:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002246:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800224a:	eeb0 1a47 	vmov.f32	s2, s14
 800224e:	eef0 1a67 	vmov.f32	s3, s15
 8002252:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8002256:	4816      	ldr	r0, [pc, #88]	; (80022b0 <MPU6050_Read_All+0x3c8>)
 8002258:	f000 f82c 	bl	80022b4 <Kalman_getAngle>
 800225c:	eeb0 7a40 	vmov.f32	s14, s0
 8002260:	eef0 7a60 	vmov.f32	s15, s1
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 800226a:	bf00      	nop
 800226c:	3740      	adds	r7, #64	; 0x40
 800226e:	46bd      	mov	sp, r7
 8002270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002274:	f3af 8000 	nop.w
 8002278:	00000000 	.word	0x00000000
 800227c:	40cc2900 	.word	0x40cc2900
 8002280:	00000000 	.word	0x00000000
 8002284:	40606000 	.word	0x40606000
 8002288:	1a63c1f8 	.word	0x1a63c1f8
 800228c:	404ca5dc 	.word	0x404ca5dc
 8002290:	40d00000 	.word	0x40d00000
 8002294:	43aa0000 	.word	0x43aa0000
 8002298:	42121eb8 	.word	0x42121eb8
 800229c:	200003e4 	.word	0x200003e4
 80022a0:	408f4000 	.word	0x408f4000
 80022a4:	c0568000 	.word	0xc0568000
 80022a8:	40568000 	.word	0x40568000
 80022ac:	20000060 	.word	0x20000060
 80022b0:	20000018 	.word	0x20000018

080022b4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80022b4:	b5b0      	push	{r4, r5, r7, lr}
 80022b6:	b096      	sub	sp, #88	; 0x58
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	61f8      	str	r0, [r7, #28]
 80022bc:	ed87 0b04 	vstr	d0, [r7, #16]
 80022c0:	ed87 1b02 	vstr	d1, [r7, #8]
 80022c4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80022ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022d2:	f7fd ffe1 	bl	8000298 <__aeabi_dsub>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80022e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80022e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ec:	f7fe f98c 	bl	8000608 <__aeabi_dmul>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4620      	mov	r0, r4
 80022f6:	4629      	mov	r1, r5
 80022f8:	f7fd ffd0 	bl	800029c <__adddf3>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	69f9      	ldr	r1, [r7, #28]
 8002302:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002316:	f7fe f977 	bl	8000608 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002328:	f7fd ffb6 	bl	8000298 <__aeabi_dsub>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800233a:	f7fd ffad 	bl	8000298 <__aeabi_dsub>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fd ffa6 	bl	800029c <__adddf3>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800235c:	f7fe f954 	bl	8000608 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4620      	mov	r0, r4
 8002366:	4629      	mov	r1, r5
 8002368:	f7fd ff98 	bl	800029c <__adddf3>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	69f9      	ldr	r1, [r7, #28]
 8002372:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002386:	f7fe f93f 	bl	8000608 <__aeabi_dmul>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4620      	mov	r0, r4
 8002390:	4629      	mov	r1, r5
 8002392:	f7fd ff81 	bl	8000298 <__aeabi_dsub>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	69f9      	ldr	r1, [r7, #28]
 800239c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023b0:	f7fe f92a 	bl	8000608 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fd ff6c 	bl	8000298 <__aeabi_dsub>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	69f9      	ldr	r1, [r7, #28]
 80023c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80023d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023da:	f7fe f915 	bl	8000608 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fd ff59 	bl	800029c <__adddf3>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	69f9      	ldr	r1, [r7, #28]
 80023f0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002400:	f7fd ff4c 	bl	800029c <__adddf3>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002412:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002416:	f7fe fa21 	bl	800085c <__aeabi_ddiv>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800242c:	f7fe fa16 	bl	800085c <__aeabi_ddiv>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800243e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002442:	f7fd ff29 	bl	8000298 <__aeabi_dsub>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002454:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002458:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800245c:	f7fe f8d4 	bl	8000608 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4620      	mov	r0, r4
 8002466:	4629      	mov	r1, r5
 8002468:	f7fd ff18 	bl	800029c <__adddf3>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	69f9      	ldr	r1, [r7, #28]
 8002472:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800247c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002480:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002484:	f7fe f8c0 	bl	8000608 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd ff04 	bl	800029c <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	69f9      	ldr	r1, [r7, #28]
 800249a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80024a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80024ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024c0:	f7fe f8a2 	bl	8000608 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4620      	mov	r0, r4
 80024ca:	4629      	mov	r1, r5
 80024cc:	f7fd fee4 	bl	8000298 <__aeabi_dsub>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	69f9      	ldr	r1, [r7, #28]
 80024d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024e8:	f7fe f88e 	bl	8000608 <__aeabi_dmul>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4620      	mov	r0, r4
 80024f2:	4629      	mov	r1, r5
 80024f4:	f7fd fed0 	bl	8000298 <__aeabi_dsub>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	69f9      	ldr	r1, [r7, #28]
 80024fe:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002508:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800250c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002510:	f7fe f87a 	bl	8000608 <__aeabi_dmul>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fd febc 	bl	8000298 <__aeabi_dsub>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	69f9      	ldr	r1, [r7, #28]
 8002526:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002530:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002534:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002538:	f7fe f866 	bl	8000608 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4620      	mov	r0, r4
 8002542:	4629      	mov	r1, r5
 8002544:	f7fd fea8 	bl	8000298 <__aeabi_dsub>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	69f9      	ldr	r1, [r7, #28]
 800254e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002558:	ec43 2b17 	vmov	d7, r2, r3
};
 800255c:	eeb0 0a47 	vmov.f32	s0, s14
 8002560:	eef0 0a67 	vmov.f32	s1, s15
 8002564:	3758      	adds	r7, #88	; 0x58
 8002566:	46bd      	mov	sp, r7
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800256c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_MspInit+0x4c>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <HAL_MspInit+0x4c>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_MspInit+0x4c>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_MspInit+0x4c>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <HAL_MspInit+0x4c>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_MspInit+0x4c>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002608:	f000 fb88 	bl	8002d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <USART1_IRQHandler+0x10>)
 8002616:	f003 fa9d 	bl	8005b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000047c 	.word	0x2000047c

08002624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_kill>:

int _kill(int pid, int sig)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800263e:	f006 f8bf 	bl	80087c0 <__errno>
 8002642:	4603      	mov	r3, r0
 8002644:	2216      	movs	r2, #22
 8002646:	601a      	str	r2, [r3, #0]
  return -1;
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_exit>:

void _exit (int status)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ffe7 	bl	8002634 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002666:	e7fe      	b.n	8002666 <_exit+0x12>

08002668 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e00a      	b.n	8002690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800267a:	f3af 8000 	nop.w
 800267e:	4601      	mov	r1, r0
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	60ba      	str	r2, [r7, #8]
 8002686:	b2ca      	uxtb	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3301      	adds	r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	dbf0      	blt.n	800267a <_read+0x12>
  }

  return len;
 8002698:	687b      	ldr	r3, [r7, #4]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	60b9      	str	r1, [r7, #8]
 80026ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e009      	b.n	80026c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	60ba      	str	r2, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	dbf1      	blt.n	80026b4 <_write+0x12>
  }
  return len;
 80026d0:	687b      	ldr	r3, [r7, #4]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <_close>:

int _close(int file)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002702:	605a      	str	r2, [r3, #4]
  return 0;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_isatty>:

int _isatty(int file)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
	...

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f006 f824 	bl	80087c0 <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20010000 	.word	0x20010000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	200003e8 	.word	0x200003e8
 80027ac:	20000610 	.word	0x20000610

080027b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <SystemInit+0x20>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <SystemInit+0x20>)
 80027bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b096      	sub	sp, #88	; 0x58
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	615a      	str	r2, [r3, #20]
 8002804:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	2220      	movs	r2, #32
 800280a:	2100      	movs	r1, #0
 800280c:	4618      	mov	r0, r3
 800280e:	f005 ff48 	bl	80086a2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002812:	4b3e      	ldr	r3, [pc, #248]	; (800290c <MX_TIM1_Init+0x138>)
 8002814:	4a3e      	ldr	r2, [pc, #248]	; (8002910 <MX_TIM1_Init+0x13c>)
 8002816:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8002818:	4b3c      	ldr	r3, [pc, #240]	; (800290c <MX_TIM1_Init+0x138>)
 800281a:	2227      	movs	r2, #39	; 0x27
 800281c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <MX_TIM1_Init+0x138>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <MX_TIM1_Init+0x138>)
 8002826:	f649 4240 	movw	r2, #40000	; 0x9c40
 800282a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800282c:	4b37      	ldr	r3, [pc, #220]	; (800290c <MX_TIM1_Init+0x138>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002832:	4b36      	ldr	r3, [pc, #216]	; (800290c <MX_TIM1_Init+0x138>)
 8002834:	2200      	movs	r2, #0
 8002836:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002838:	4b34      	ldr	r3, [pc, #208]	; (800290c <MX_TIM1_Init+0x138>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800283e:	4833      	ldr	r0, [pc, #204]	; (800290c <MX_TIM1_Init+0x138>)
 8002840:	f002 fa0a 	bl	8004c58 <HAL_TIM_Base_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800284a:	f7ff faf1 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800284e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002852:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002854:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002858:	4619      	mov	r1, r3
 800285a:	482c      	ldr	r0, [pc, #176]	; (800290c <MX_TIM1_Init+0x138>)
 800285c:	f002 fc16 	bl	800508c <HAL_TIM_ConfigClockSource>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002866:	f7ff fae3 	bl	8001e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800286a:	4828      	ldr	r0, [pc, #160]	; (800290c <MX_TIM1_Init+0x138>)
 800286c:	f002 fa43 	bl	8004cf6 <HAL_TIM_PWM_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002876:	f7ff fadb 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002882:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002886:	4619      	mov	r1, r3
 8002888:	4820      	ldr	r0, [pc, #128]	; (800290c <MX_TIM1_Init+0x138>)
 800288a:	f002 ff93 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002894:	f7ff facc 	bl	8001e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002898:	2360      	movs	r3, #96	; 0x60
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a0:	2300      	movs	r3, #0
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028a4:	2300      	movs	r3, #0
 80028a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	4813      	ldr	r0, [pc, #76]	; (800290c <MX_TIM1_Init+0x138>)
 80028be:	f002 fb23 	bl	8004f08 <HAL_TIM_PWM_ConfigChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80028c8:	f7ff fab2 	bl	8001e30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4807      	ldr	r0, [pc, #28]	; (800290c <MX_TIM1_Init+0x138>)
 80028f0:	f002 ffce 	bl	8005890 <HAL_TIMEx_ConfigBreakDeadTime>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80028fa:	f7ff fa99 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028fe:	4803      	ldr	r0, [pc, #12]	; (800290c <MX_TIM1_Init+0x138>)
 8002900:	f000 f8b4 	bl	8002a6c <HAL_TIM_MspPostInit>

}
 8002904:	bf00      	nop
 8002906:	3758      	adds	r7, #88	; 0x58
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	200003ec 	.word	0x200003ec
 8002910:	40010000 	.word	0x40010000

08002914 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08e      	sub	sp, #56	; 0x38
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002928:	f107 0320 	add.w	r3, r7, #32
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
 8002940:	615a      	str	r2, [r3, #20]
 8002942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002944:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <MX_TIM2_Init+0xe8>)
 8002946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800294a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 800294c:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <MX_TIM2_Init+0xe8>)
 800294e:	2227      	movs	r2, #39	; 0x27
 8002950:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002952:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <MX_TIM2_Init+0xe8>)
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <MX_TIM2_Init+0xe8>)
 800295a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800295e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002960:	4b26      	ldr	r3, [pc, #152]	; (80029fc <MX_TIM2_Init+0xe8>)
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002966:	4b25      	ldr	r3, [pc, #148]	; (80029fc <MX_TIM2_Init+0xe8>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800296c:	4823      	ldr	r0, [pc, #140]	; (80029fc <MX_TIM2_Init+0xe8>)
 800296e:	f002 f973 	bl	8004c58 <HAL_TIM_Base_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002978:	f7ff fa5a 	bl	8001e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800297c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002986:	4619      	mov	r1, r3
 8002988:	481c      	ldr	r0, [pc, #112]	; (80029fc <MX_TIM2_Init+0xe8>)
 800298a:	f002 fb7f 	bl	800508c <HAL_TIM_ConfigClockSource>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002994:	f7ff fa4c 	bl	8001e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002998:	4818      	ldr	r0, [pc, #96]	; (80029fc <MX_TIM2_Init+0xe8>)
 800299a:	f002 f9ac 	bl	8004cf6 <HAL_TIM_PWM_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80029a4:	f7ff fa44 	bl	8001e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ac:	2300      	movs	r3, #0
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029b0:	f107 0320 	add.w	r3, r7, #32
 80029b4:	4619      	mov	r1, r3
 80029b6:	4811      	ldr	r0, [pc, #68]	; (80029fc <MX_TIM2_Init+0xe8>)
 80029b8:	f002 fefc 	bl	80057b4 <HAL_TIMEx_MasterConfigSynchronization>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80029c2:	f7ff fa35 	bl	8001e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029c6:	2360      	movs	r3, #96	; 0x60
 80029c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	2208      	movs	r2, #8
 80029da:	4619      	mov	r1, r3
 80029dc:	4807      	ldr	r0, [pc, #28]	; (80029fc <MX_TIM2_Init+0xe8>)
 80029de:	f002 fa93 	bl	8004f08 <HAL_TIM_PWM_ConfigChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80029e8:	f7ff fa22 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80029ec:	4803      	ldr	r0, [pc, #12]	; (80029fc <MX_TIM2_Init+0xe8>)
 80029ee:	f000 f83d 	bl	8002a6c <HAL_TIM_MspPostInit>

}
 80029f2:	bf00      	nop
 80029f4:	3738      	adds	r7, #56	; 0x38
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000434 	.word	0x20000434

08002a00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <HAL_TIM_Base_MspInit+0x64>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10e      	bne.n	8002a30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_TIM_Base_MspInit+0x68>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_TIM_Base_MspInit+0x68>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_TIM_Base_MspInit+0x68>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a2e:	e012      	b.n	8002a56 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d10d      	bne.n	8002a56 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_TIM_Base_MspInit+0x68>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4a09      	ldr	r2, [pc, #36]	; (8002a68 <HAL_TIM_Base_MspInit+0x68>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <HAL_TIM_Base_MspInit+0x68>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40023800 	.word	0x40023800

08002a6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <HAL_TIM_MspPostInit+0xb4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d11f      	bne.n	8002ace <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002abc:	2301      	movs	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4818      	ldr	r0, [pc, #96]	; (8002b28 <HAL_TIM_MspPostInit+0xbc>)
 8002ac8:	f000 fb10 	bl	80030ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002acc:	e023      	b.n	8002b16 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d11e      	bne.n	8002b16 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_TIM_MspPostInit+0xb8>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b06:	2301      	movs	r3, #1
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4806      	ldr	r0, [pc, #24]	; (8002b2c <HAL_TIM_MspPostInit+0xc0>)
 8002b12:	f000 faeb 	bl	80030ec <HAL_GPIO_Init>
}
 8002b16:	bf00      	nop
 8002b18:	3728      	adds	r7, #40	; 0x28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400

08002b30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <MX_USART1_UART_Init+0x50>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b68:	f002 fee4 	bl	8005934 <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b72:	f7ff f95d 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000047c 	.word	0x2000047c
 8002b80:	40011000 	.word	0x40011000

08002b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0314 	add.w	r3, r7, #20
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_UART_MspInit+0x94>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d134      	bne.n	8002c10 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_UART_MspInit+0x98>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_UART_MspInit+0x98>)
 8002bb0:	f043 0310 	orr.w	r3, r3, #16
 8002bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_UART_MspInit+0x98>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]


    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_UART_MspInit+0x98>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a14      	ldr	r2, [pc, #80]	; (8002c1c <HAL_UART_MspInit+0x98>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_UART_MspInit+0x98>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bf0:	2307      	movs	r3, #7
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4809      	ldr	r0, [pc, #36]	; (8002c20 <HAL_UART_MspInit+0x9c>)
 8002bfc:	f000 fa76 	bl	80030ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2100      	movs	r1, #0
 8002c04:	2025      	movs	r0, #37	; 0x25
 8002c06:	f000 f9a8 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c0a:	2025      	movs	r0, #37	; 0x25
 8002c0c:	f000 f9c1 	bl	8002f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c10:	bf00      	nop
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40011000 	.word	0x40011000
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020000 	.word	0x40020000

08002c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c28:	480d      	ldr	r0, [pc, #52]	; (8002c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c2a:	490e      	ldr	r1, [pc, #56]	; (8002c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c30:	e002      	b.n	8002c38 <LoopCopyDataInit>

08002c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c36:	3304      	adds	r3, #4

08002c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c3c:	d3f9      	bcc.n	8002c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c40:	4c0b      	ldr	r4, [pc, #44]	; (8002c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c44:	e001      	b.n	8002c4a <LoopFillZerobss>

08002c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c48:	3204      	adds	r2, #4

08002c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c4c:	d3fb      	bcc.n	8002c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c4e:	f7ff fdaf 	bl	80027b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c52:	f005 fdbb 	bl	80087cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c56:	f7fe fde9 	bl	800182c <main>
  bx  lr    
 8002c5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c64:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002c68:	0800be20 	.word	0x0800be20
  ldr r2, =_sbss
 8002c6c:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002c70:	20000610 	.word	0x20000610

08002c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c74:	e7fe      	b.n	8002c74 <ADC_IRQHandler>
	...

08002c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_Init+0x40>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_Init+0x40>)
 8002c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_Init+0x40>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_Init+0x40>)
 8002c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_Init+0x40>)
 8002c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	f000 f94f 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ca6:	200f      	movs	r0, #15
 8002ca8:	f000 f808 	bl	8002cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cac:	f7ff fc5e 	bl	800256c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00

08002cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_InitTick+0x54>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x58>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f967 	bl	8002fae <HAL_SYSTICK_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00e      	b.n	8002d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d80a      	bhi.n	8002d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f000 f92f 	bl	8002f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_InitTick+0x5c>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200000a8 	.word	0x200000a8
 8002d14:	200000b0 	.word	0x200000b0
 8002d18:	200000ac 	.word	0x200000ac

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	200000b0 	.word	0x200000b0
 8002d40:	200004c0 	.word	0x200004c0

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	200004c0 	.word	0x200004c0

08002d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff ffee 	bl	8002d44 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d005      	beq.n	8002d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_Delay+0x44>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d82:	bf00      	nop
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d8f7      	bhi.n	8002d84 <HAL_Delay+0x28>
  {
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200000b0 	.word	0x200000b0

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60d3      	str	r3, [r2, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	; (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	; (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff29 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f6c:	f7ff ff3e 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f7ff ff8e 	bl	8002e98 <NVIC_EncodePriority>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff5d 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f8a:	bf00      	nop
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff31 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffa2 	bl	8002f00 <SysTick_Config>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fd4:	f7ff feb6 	bl	8002d44 <HAL_GetTick>
 8002fd8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d008      	beq.n	8002ff8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e052      	b.n	800309e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0216 	bic.w	r2, r2, #22
 8003006:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003016:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <HAL_DMA_Abort+0x62>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003024:	2b00      	cmp	r3, #0
 8003026:	d007      	beq.n	8003038 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0208 	bic.w	r2, r2, #8
 8003036:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003048:	e013      	b.n	8003072 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800304a:	f7ff fe7b 	bl	8002d44 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b05      	cmp	r3, #5
 8003056:	d90c      	bls.n	8003072 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2203      	movs	r2, #3
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e015      	b.n	800309e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e4      	bne.n	800304a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	223f      	movs	r2, #63	; 0x3f
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d004      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e00c      	b.n	80030de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2205      	movs	r2, #5
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e159      	b.n	80033bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003108:	2201      	movs	r2, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	f040 8148 	bne.w	80033b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d005      	beq.n	800313e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313a:	2b02      	cmp	r3, #2
 800313c:	d130      	bne.n	80031a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	2203      	movs	r2, #3
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 0201 	and.w	r2, r3, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d017      	beq.n	80031dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d123      	bne.n	8003230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	08da      	lsrs	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	3208      	adds	r2, #8
 800322a:	69b9      	ldr	r1, [r7, #24]
 800322c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0203 	and.w	r2, r3, #3
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80a2 	beq.w	80033b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b57      	ldr	r3, [pc, #348]	; (80033d4 <HAL_GPIO_Init+0x2e8>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a56      	ldr	r2, [pc, #344]	; (80033d4 <HAL_GPIO_Init+0x2e8>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b54      	ldr	r3, [pc, #336]	; (80033d4 <HAL_GPIO_Init+0x2e8>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328e:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_GPIO_Init+0x2ec>)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a49      	ldr	r2, [pc, #292]	; (80033dc <HAL_GPIO_Init+0x2f0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d019      	beq.n	80032ee <HAL_GPIO_Init+0x202>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a48      	ldr	r2, [pc, #288]	; (80033e0 <HAL_GPIO_Init+0x2f4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_GPIO_Init+0x1fe>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a47      	ldr	r2, [pc, #284]	; (80033e4 <HAL_GPIO_Init+0x2f8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00d      	beq.n	80032e6 <HAL_GPIO_Init+0x1fa>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a46      	ldr	r2, [pc, #280]	; (80033e8 <HAL_GPIO_Init+0x2fc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <HAL_GPIO_Init+0x1f6>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a45      	ldr	r2, [pc, #276]	; (80033ec <HAL_GPIO_Init+0x300>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_GPIO_Init+0x1f2>
 80032da:	2304      	movs	r3, #4
 80032dc:	e008      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032de:	2307      	movs	r3, #7
 80032e0:	e006      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032e2:	2303      	movs	r3, #3
 80032e4:	e004      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e002      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_GPIO_Init+0x204>
 80032ee:	2300      	movs	r3, #0
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	f002 0203 	and.w	r2, r2, #3
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4093      	lsls	r3, r2
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003300:	4935      	ldr	r1, [pc, #212]	; (80033d8 <HAL_GPIO_Init+0x2ec>)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <HAL_GPIO_Init+0x304>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003332:	4a2f      	ldr	r2, [pc, #188]	; (80033f0 <HAL_GPIO_Init+0x304>)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003338:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <HAL_GPIO_Init+0x304>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800335c:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <HAL_GPIO_Init+0x304>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003362:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <HAL_GPIO_Init+0x304>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003386:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <HAL_GPIO_Init+0x304>)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800338c:	4b18      	ldr	r3, [pc, #96]	; (80033f0 <HAL_GPIO_Init+0x304>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b0:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_GPIO_Init+0x304>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	f67f aea2 	bls.w	8003108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40020800 	.word	0x40020800
 80033e8:	40020c00 	.word	0x40020c00
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40013c00 	.word	0x40013c00

080033f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	807b      	strh	r3, [r7, #2]
 8003400:	4613      	mov	r3, r2
 8003402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003404:	787b      	ldrb	r3, [r7, #1]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340a:	887a      	ldrh	r2, [r7, #2]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003410:	e003      	b.n	800341a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	041a      	lsls	r2, r3, #16
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	619a      	str	r2, [r3, #24]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e12b      	b.n	8003692 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fe64 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2224      	movs	r2, #36	; 0x24
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0201 	bic.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800347a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800348a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800348c:	f001 fbbc 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8003490:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4a81      	ldr	r2, [pc, #516]	; (800369c <HAL_I2C_Init+0x274>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d807      	bhi.n	80034ac <HAL_I2C_Init+0x84>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a80      	ldr	r2, [pc, #512]	; (80036a0 <HAL_I2C_Init+0x278>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	bf94      	ite	ls
 80034a4:	2301      	movls	r3, #1
 80034a6:	2300      	movhi	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e006      	b.n	80034ba <HAL_I2C_Init+0x92>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a7d      	ldr	r2, [pc, #500]	; (80036a4 <HAL_I2C_Init+0x27c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	bf94      	ite	ls
 80034b4:	2301      	movls	r3, #1
 80034b6:	2300      	movhi	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e0e7      	b.n	8003692 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a78      	ldr	r2, [pc, #480]	; (80036a8 <HAL_I2C_Init+0x280>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0c9b      	lsrs	r3, r3, #18
 80034cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4a6a      	ldr	r2, [pc, #424]	; (800369c <HAL_I2C_Init+0x274>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d802      	bhi.n	80034fc <HAL_I2C_Init+0xd4>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	3301      	adds	r3, #1
 80034fa:	e009      	b.n	8003510 <HAL_I2C_Init+0xe8>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	4a69      	ldr	r2, [pc, #420]	; (80036ac <HAL_I2C_Init+0x284>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	099b      	lsrs	r3, r3, #6
 800350e:	3301      	adds	r3, #1
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	430b      	orrs	r3, r1
 8003516:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003522:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	495c      	ldr	r1, [pc, #368]	; (800369c <HAL_I2C_Init+0x274>)
 800352c:	428b      	cmp	r3, r1
 800352e:	d819      	bhi.n	8003564 <HAL_I2C_Init+0x13c>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e59      	subs	r1, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	fbb1 f3f3 	udiv	r3, r1, r3
 800353e:	1c59      	adds	r1, r3, #1
 8003540:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003544:	400b      	ands	r3, r1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <HAL_I2C_Init+0x138>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1e59      	subs	r1, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fbb1 f3f3 	udiv	r3, r1, r3
 8003558:	3301      	adds	r3, #1
 800355a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355e:	e051      	b.n	8003604 <HAL_I2C_Init+0x1dc>
 8003560:	2304      	movs	r3, #4
 8003562:	e04f      	b.n	8003604 <HAL_I2C_Init+0x1dc>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d111      	bne.n	8003590 <HAL_I2C_Init+0x168>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1e58      	subs	r0, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	460b      	mov	r3, r1
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	440b      	add	r3, r1
 800357a:	fbb0 f3f3 	udiv	r3, r0, r3
 800357e:	3301      	adds	r3, #1
 8003580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	e012      	b.n	80035b6 <HAL_I2C_Init+0x18e>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e58      	subs	r0, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	0099      	lsls	r1, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Init+0x196>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e022      	b.n	8003604 <HAL_I2C_Init+0x1dc>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10e      	bne.n	80035e4 <HAL_I2C_Init+0x1bc>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1e58      	subs	r0, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	440b      	add	r3, r1
 80035d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e2:	e00f      	b.n	8003604 <HAL_I2C_Init+0x1dc>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1e58      	subs	r0, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6859      	ldr	r1, [r3, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	0099      	lsls	r1, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	6809      	ldr	r1, [r1, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69da      	ldr	r2, [r3, #28]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6911      	ldr	r1, [r2, #16]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68d2      	ldr	r2, [r2, #12]
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	430b      	orrs	r3, r1
 8003646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2220      	movs	r2, #32
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	000186a0 	.word	0x000186a0
 80036a0:	001e847f 	.word	0x001e847f
 80036a4:	003d08ff 	.word	0x003d08ff
 80036a8:	431bde83 	.word	0x431bde83
 80036ac:	10624dd3 	.word	0x10624dd3

080036b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	817b      	strh	r3, [r7, #10]
 80036c2:	460b      	mov	r3, r1
 80036c4:	813b      	strh	r3, [r7, #8]
 80036c6:	4613      	mov	r3, r2
 80036c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ca:	f7ff fb3b 	bl	8002d44 <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b20      	cmp	r3, #32
 80036da:	f040 80d9 	bne.w	8003890 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	2319      	movs	r3, #25
 80036e4:	2201      	movs	r2, #1
 80036e6:	496d      	ldr	r1, [pc, #436]	; (800389c <HAL_I2C_Mem_Write+0x1ec>)
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fc7f 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
 80036f6:	e0cc      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d101      	bne.n	8003706 <HAL_I2C_Mem_Write+0x56>
 8003702:	2302      	movs	r3, #2
 8003704:	e0c5      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d007      	beq.n	800372c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800373a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2221      	movs	r2, #33	; 0x21
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2240      	movs	r2, #64	; 0x40
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800375c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a4d      	ldr	r2, [pc, #308]	; (80038a0 <HAL_I2C_Mem_Write+0x1f0>)
 800376c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800376e:	88f8      	ldrh	r0, [r7, #6]
 8003770:	893a      	ldrh	r2, [r7, #8]
 8003772:	8979      	ldrh	r1, [r7, #10]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	4603      	mov	r3, r0
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fab6 	bl	8003cf0 <I2C_RequestMemoryWrite>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d052      	beq.n	8003830 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e081      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fd00 	bl	8004198 <I2C_WaitOnTXEFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d107      	bne.n	80037b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06b      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	781a      	ldrb	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d11b      	bne.n	8003830 <HAL_I2C_Mem_Write+0x180>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d017      	beq.n	8003830 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1aa      	bne.n	800378e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fcec 	bl	800421a <I2C_WaitOnBTFFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	2b04      	cmp	r3, #4
 800384e:	d107      	bne.n	8003860 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e016      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	00100002 	.word	0x00100002
 80038a0:	ffff0000 	.word	0xffff0000

080038a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08c      	sub	sp, #48	; 0x30
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	4608      	mov	r0, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	461a      	mov	r2, r3
 80038b2:	4603      	mov	r3, r0
 80038b4:	817b      	strh	r3, [r7, #10]
 80038b6:	460b      	mov	r3, r1
 80038b8:	813b      	strh	r3, [r7, #8]
 80038ba:	4613      	mov	r3, r2
 80038bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038be:	f7ff fa41 	bl	8002d44 <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	f040 8208 	bne.w	8003ce2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	2319      	movs	r3, #25
 80038d8:	2201      	movs	r2, #1
 80038da:	497b      	ldr	r1, [pc, #492]	; (8003ac8 <HAL_I2C_Mem_Read+0x224>)
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fb85 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
 80038ea:	e1fb      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_I2C_Mem_Read+0x56>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e1f4      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x440>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d007      	beq.n	8003920 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800392e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2222      	movs	r2, #34	; 0x22
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a5b      	ldr	r2, [pc, #364]	; (8003acc <HAL_I2C_Mem_Read+0x228>)
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003962:	88f8      	ldrh	r0, [r7, #6]
 8003964:	893a      	ldrh	r2, [r7, #8]
 8003966:	8979      	ldrh	r1, [r7, #10]
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4603      	mov	r3, r0
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fa52 	bl	8003e1c <I2C_RequestMemoryRead>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e1b0      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	d113      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	623b      	str	r3, [r7, #32]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	623b      	str	r3, [r7, #32]
 800399e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e184      	b.n	8003cbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d11b      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	e164      	b.n	8003cbc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d11b      	bne.n	8003a32 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	e144      	b.n	8003cbc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a48:	e138      	b.n	8003cbc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	f200 80f1 	bhi.w	8003c36 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d123      	bne.n	8003aa4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fc1b 	bl	800429c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e139      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa2:	e10b      	b.n	8003cbc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d14e      	bne.n	8003b4a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4906      	ldr	r1, [pc, #24]	; (8003ad0 <HAL_I2C_Mem_Read+0x22c>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa98 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e10e      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x440>
 8003ac6:	bf00      	nop
 8003ac8:	00100002 	.word	0x00100002
 8003acc:	ffff0000 	.word	0xffff0000
 8003ad0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b48:	e0b8      	b.n	8003cbc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2200      	movs	r2, #0
 8003b52:	4966      	ldr	r1, [pc, #408]	; (8003cec <HAL_I2C_Mem_Read+0x448>)
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fa49 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e0bf      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2200      	movs	r2, #0
 8003bae:	494f      	ldr	r1, [pc, #316]	; (8003cec <HAL_I2C_Mem_Read+0x448>)
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fa1b 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e091      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c34:	e042      	b.n	8003cbc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fb2e 	bl	800429c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e04c      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d118      	bne.n	8003cbc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f aec2 	bne.w	8003a4a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3728      	adds	r7, #40	; 0x28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	00010004 	.word	0x00010004

08003cf0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f960 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d40:	d103      	bne.n	8003d4a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e05f      	b.n	8003e0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d4e:	897b      	ldrh	r3, [r7, #10]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	492d      	ldr	r1, [pc, #180]	; (8003e18 <I2C_RequestMemoryWrite+0x128>)
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f998 	bl	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e04c      	b.n	8003e0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8c:	6a39      	ldr	r1, [r7, #32]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fa02 	bl	8004198 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d107      	bne.n	8003db2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e02b      	b.n	8003e0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dbc:	893b      	ldrh	r3, [r7, #8]
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]
 8003dc6:	e021      	b.n	8003e0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc8:	893b      	ldrh	r3, [r7, #8]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	6a39      	ldr	r1, [r7, #32]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f9dc 	bl	8004198 <I2C_WaitOnTXEFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d107      	bne.n	8003dfe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e005      	b.n	8003e0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e02:	893b      	ldrh	r3, [r7, #8]
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	00010002 	.word	0x00010002

08003e1c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	817b      	strh	r3, [r7, #10]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	813b      	strh	r3, [r7, #8]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e44:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f8c2 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00d      	beq.n	8003e8a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7c:	d103      	bne.n	8003e86 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e0aa      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	6a3a      	ldr	r2, [r7, #32]
 8003e9e:	4952      	ldr	r1, [pc, #328]	; (8003fe8 <I2C_RequestMemoryRead+0x1cc>)
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f8fa 	bl	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e097      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	6a39      	ldr	r1, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f964 	bl	8004198 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d107      	bne.n	8003eee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e076      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d105      	bne.n	8003f04 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef8:	893b      	ldrh	r3, [r7, #8]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]
 8003f02:	e021      	b.n	8003f48 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f04:	893b      	ldrh	r3, [r7, #8]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f14:	6a39      	ldr	r1, [r7, #32]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f93e 	bl	8004198 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d107      	bne.n	8003f3a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e050      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f3e:	893b      	ldrh	r3, [r7, #8]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4a:	6a39      	ldr	r1, [r7, #32]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f923 	bl	8004198 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d107      	bne.n	8003f70 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e035      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f82:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f82b 	bl	8003fec <I2C_WaitOnFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00d      	beq.n	8003fb8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003faa:	d103      	bne.n	8003fb4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e013      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fb8:	897b      	ldrh	r3, [r7, #10]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	6a3a      	ldr	r2, [r7, #32]
 8003fcc:	4906      	ldr	r1, [pc, #24]	; (8003fe8 <I2C_RequestMemoryRead+0x1cc>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f863 	bl	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00010002 	.word	0x00010002

08003fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffc:	e025      	b.n	800404a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d021      	beq.n	800404a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7fe fe9d 	bl	8002d44 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d116      	bne.n	800404a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f043 0220 	orr.w	r2, r3, #32
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e023      	b.n	8004092 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10d      	bne.n	8004070 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	e00c      	b.n	800408a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	43da      	mvns	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4013      	ands	r3, r2
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	bf0c      	ite	eq
 8004082:	2301      	moveq	r3, #1
 8004084:	2300      	movne	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	429a      	cmp	r2, r3
 800408e:	d0b6      	beq.n	8003ffe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040a8:	e051      	b.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b8:	d123      	bne.n	8004102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f043 0204 	orr.w	r2, r3, #4
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e046      	b.n	8004190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d021      	beq.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410a:	f7fe fe1b 	bl	8002d44 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d302      	bcc.n	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d116      	bne.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e020      	b.n	8004190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	0c1b      	lsrs	r3, r3, #16
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10c      	bne.n	8004172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	43da      	mvns	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4013      	ands	r3, r2
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	e00b      	b.n	800418a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	43da      	mvns	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d18d      	bne.n	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041a4:	e02d      	b.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 f8ce 	bl	8004348 <I2C_IsAcknowledgeFailed>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e02d      	b.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d021      	beq.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041be:	f7fe fdc1 	bl	8002d44 <HAL_GetTick>
 80041c2:	4602      	mov	r2, r0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d302      	bcc.n	80041d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d116      	bne.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e007      	b.n	8004212 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b80      	cmp	r3, #128	; 0x80
 800420e:	d1ca      	bne.n	80041a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004226:	e02d      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f88d 	bl	8004348 <I2C_IsAcknowledgeFailed>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e02d      	b.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423e:	d021      	beq.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004240:	f7fe fd80 	bl	8002d44 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	429a      	cmp	r2, r3
 800424e:	d302      	bcc.n	8004256 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d116      	bne.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e007      	b.n	8004294 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b04      	cmp	r3, #4
 8004290:	d1ca      	bne.n	8004228 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042a8:	e042      	b.n	8004330 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b10      	cmp	r3, #16
 80042b6:	d119      	bne.n	80042ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0210 	mvn.w	r2, #16
 80042c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e029      	b.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ec:	f7fe fd2a 	bl	8002d44 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d302      	bcc.n	8004302 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d116      	bne.n	8004330 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e007      	b.n	8004340 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d1b5      	bne.n	80042aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435e:	d11b      	bne.n	8004398 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004368:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f043 0204 	orr.w	r2, r3, #4
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e267      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d075      	beq.n	80044b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c6:	4b88      	ldr	r3, [pc, #544]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d00c      	beq.n	80043ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b85      	ldr	r3, [pc, #532]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d112      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043de:	4b82      	ldr	r3, [pc, #520]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ea:	d10b      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	4b7e      	ldr	r3, [pc, #504]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05b      	beq.n	80044b0 <HAL_RCC_OscConfig+0x108>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d157      	bne.n	80044b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e242      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x74>
 800440e:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a75      	ldr	r2, [pc, #468]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x98>
 8004426:	4b70      	ldr	r3, [pc, #448]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6f      	ldr	r2, [pc, #444]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b6d      	ldr	r3, [pc, #436]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a6c      	ldr	r2, [pc, #432]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 8004440:	4b69      	ldr	r3, [pc, #420]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a68      	ldr	r2, [pc, #416]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b66      	ldr	r3, [pc, #408]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a65      	ldr	r2, [pc, #404]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fe fc70 	bl	8002d44 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7fe fc6c 	bl	8002d44 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e207      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xc0>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fe fc5c 	bl	8002d44 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004490:	f7fe fc58 	bl	8002d44 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1f3      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b51      	ldr	r3, [pc, #324]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0xe8>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d063      	beq.n	8004586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044be:	4b4a      	ldr	r3, [pc, #296]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b47      	ldr	r3, [pc, #284]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d6:	4b44      	ldr	r3, [pc, #272]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1c7      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4937      	ldr	r1, [pc, #220]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b34      	ldr	r3, [pc, #208]	; (80045ec <HAL_RCC_OscConfig+0x244>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fe fc11 	bl	8002d44 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004526:	f7fe fc0d 	bl	8002d44 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e1a8      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4925      	ldr	r1, [pc, #148]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCC_OscConfig+0x244>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fe fbf0 	bl	8002d44 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004568:	f7fe fbec 	bl	8002d44 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e187      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d036      	beq.n	8004600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_RCC_OscConfig+0x248>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fe fbd0 	bl	8002d44 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fe fbcc 	bl	8002d44 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e167      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80045bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x200>
 80045c6:	e01b      	b.n	8004600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_OscConfig+0x248>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fe fbb9 	bl	8002d44 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	e00e      	b.n	80045f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fe fbb5 	bl	8002d44 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d907      	bls.n	80045f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e150      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
 80045e8:	40023800 	.word	0x40023800
 80045ec:	42470000 	.word	0x42470000
 80045f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	4b88      	ldr	r3, [pc, #544]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1ea      	bne.n	80045d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8097 	beq.w	800473c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b81      	ldr	r3, [pc, #516]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b7d      	ldr	r3, [pc, #500]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	4a7c      	ldr	r2, [pc, #496]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462c:	6413      	str	r3, [r2, #64]	; 0x40
 800462e:	4b7a      	ldr	r3, [pc, #488]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463e:	4b77      	ldr	r3, [pc, #476]	; (800481c <HAL_RCC_OscConfig+0x474>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464a:	4b74      	ldr	r3, [pc, #464]	; (800481c <HAL_RCC_OscConfig+0x474>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a73      	ldr	r2, [pc, #460]	; (800481c <HAL_RCC_OscConfig+0x474>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004656:	f7fe fb75 	bl	8002d44 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fe fb71 	bl	8002d44 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e10c      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b6a      	ldr	r3, [pc, #424]	; (800481c <HAL_RCC_OscConfig+0x474>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x2ea>
 8004684:	4b64      	ldr	r3, [pc, #400]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	4a63      	ldr	r2, [pc, #396]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6713      	str	r3, [r2, #112]	; 0x70
 8004690:	e01c      	b.n	80046cc <HAL_RCC_OscConfig+0x324>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b05      	cmp	r3, #5
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x30c>
 800469a:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a5e      	ldr	r2, [pc, #376]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a5b      	ldr	r2, [pc, #364]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0x324>
 80046b4:	4b58      	ldr	r3, [pc, #352]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	4a57      	ldr	r2, [pc, #348]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6713      	str	r3, [r2, #112]	; 0x70
 80046c0:	4b55      	ldr	r3, [pc, #340]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a54      	ldr	r2, [pc, #336]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046c6:	f023 0304 	bic.w	r3, r3, #4
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d015      	beq.n	8004700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fe fb36 	bl	8002d44 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fe fb32 	bl	8002d44 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0cb      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	4b49      	ldr	r3, [pc, #292]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ee      	beq.n	80046dc <HAL_RCC_OscConfig+0x334>
 80046fe:	e014      	b.n	800472a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004700:	f7fe fb20 	bl	8002d44 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004706:	e00a      	b.n	800471e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fe fb1c 	bl	8002d44 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0b5      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471e:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ee      	bne.n	8004708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d105      	bne.n	800473c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004730:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	4a38      	ldr	r2, [pc, #224]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a1 	beq.w	8004888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004746:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b08      	cmp	r3, #8
 8004750:	d05c      	beq.n	800480c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d141      	bne.n	80047de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b31      	ldr	r3, [pc, #196]	; (8004820 <HAL_RCC_OscConfig+0x478>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fe faf0 	bl	8002d44 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004768:	f7fe faec 	bl	8002d44 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e087      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	4b27      	ldr	r3, [pc, #156]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	019b      	lsls	r3, r3, #6
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	3b01      	subs	r3, #1
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	061b      	lsls	r3, r3, #24
 80047aa:	491b      	ldr	r1, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b0:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_RCC_OscConfig+0x478>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fe fac5 	bl	8002d44 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047be:	f7fe fac1 	bl	8002d44 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e05c      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d0:	4b11      	ldr	r3, [pc, #68]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x416>
 80047dc:	e054      	b.n	8004888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b10      	ldr	r3, [pc, #64]	; (8004820 <HAL_RCC_OscConfig+0x478>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fe faae 	bl	8002d44 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fe faaa 	bl	8002d44 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e045      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x444>
 800480a:	e03d      	b.n	8004888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e038      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
 8004818:	40023800 	.word	0x40023800
 800481c:	40007000 	.word	0x40007000
 8004820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004824:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x4ec>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d028      	beq.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d121      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d11a      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004854:	4013      	ands	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800485a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800485c:	4293      	cmp	r3, r2
 800485e:	d111      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	3b01      	subs	r3, #1
 800486e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0cc      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b68      	ldr	r3, [pc, #416]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d90c      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b65      	ldr	r3, [pc, #404]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b63      	ldr	r3, [pc, #396]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b8      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b59      	ldr	r3, [pc, #356]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a58      	ldr	r2, [pc, #352]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004904:	4b53      	ldr	r3, [pc, #332]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a52      	ldr	r2, [pc, #328]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800490e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	494d      	ldr	r1, [pc, #308]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d044      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d119      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d003      	beq.n	8004956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004952:	2b03      	cmp	r3, #3
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b3f      	ldr	r3, [pc, #252]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e06f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e067      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004976:	4b37      	ldr	r3, [pc, #220]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4934      	ldr	r1, [pc, #208]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004988:	f7fe f9dc 	bl	8002d44 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004990:	f7fe f9d8 	bl	8002d44 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e04f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 020c 	and.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1eb      	bne.n	8004990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d20c      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e032      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4916      	ldr	r1, [pc, #88]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490e      	ldr	r1, [pc, #56]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a1e:	f000 f821 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490a      	ldr	r1, [pc, #40]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe f93c 	bl	8002cbc <HAL_InitTick>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023c00 	.word	0x40023c00
 8004a54:	40023800 	.word	0x40023800
 8004a58:	0800b95c 	.word	0x0800b95c
 8004a5c:	200000a8 	.word	0x200000a8
 8004a60:	200000ac 	.word	0x200000ac

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b090      	sub	sp, #64	; 0x40
 8004a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a70:	2300      	movs	r3, #0
 8004a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a74:	2300      	movs	r3, #0
 8004a76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7c:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d00d      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	f200 80a1 	bhi.w	8004bd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x34>
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a96:	e09b      	b.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a98:	4b53      	ldr	r3, [pc, #332]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a9c:	e09b      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9e:	4b53      	ldr	r3, [pc, #332]	; (8004bec <HAL_RCC_GetSysClockFreq+0x188>)
 8004aa0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004aa2:	e098      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa4:	4b4f      	ldr	r3, [pc, #316]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aae:	4b4d      	ldr	r3, [pc, #308]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d028      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b4a      	ldr	r3, [pc, #296]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	623b      	str	r3, [r7, #32]
 8004ac4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004acc:	2100      	movs	r1, #0
 8004ace:	4b47      	ldr	r3, [pc, #284]	; (8004bec <HAL_RCC_GetSysClockFreq+0x188>)
 8004ad0:	fb03 f201 	mul.w	r2, r3, r1
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	fb00 f303 	mul.w	r3, r0, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	4a43      	ldr	r2, [pc, #268]	; (8004bec <HAL_RCC_GetSysClockFreq+0x188>)
 8004ade:	fba0 1202 	umull	r1, r2, r0, r2
 8004ae2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae4:	460a      	mov	r2, r1
 8004ae6:	62ba      	str	r2, [r7, #40]	; 0x28
 8004ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aea:	4413      	add	r3, r2
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	2200      	movs	r2, #0
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	61fa      	str	r2, [r7, #28]
 8004af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004afa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004afe:	f7fc f8cb 	bl	8000c98 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4613      	mov	r3, r2
 8004b08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0a:	e053      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0c:	4b35      	ldr	r3, [pc, #212]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	099b      	lsrs	r3, r3, #6
 8004b12:	2200      	movs	r2, #0
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	617a      	str	r2, [r7, #20]
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b1e:	f04f 0b00 	mov.w	fp, #0
 8004b22:	4652      	mov	r2, sl
 8004b24:	465b      	mov	r3, fp
 8004b26:	f04f 0000 	mov.w	r0, #0
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	0159      	lsls	r1, r3, #5
 8004b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b34:	0150      	lsls	r0, r2, #5
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	ebb2 080a 	subs.w	r8, r2, sl
 8004b3e:	eb63 090b 	sbc.w	r9, r3, fp
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b56:	ebb2 0408 	subs.w	r4, r2, r8
 8004b5a:	eb63 0509 	sbc.w	r5, r3, r9
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	00eb      	lsls	r3, r5, #3
 8004b68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6c:	00e2      	lsls	r2, r4, #3
 8004b6e:	4614      	mov	r4, r2
 8004b70:	461d      	mov	r5, r3
 8004b72:	eb14 030a 	adds.w	r3, r4, sl
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	eb45 030b 	adc.w	r3, r5, fp
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	f04f 0200 	mov.w	r2, #0
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	028b      	lsls	r3, r1, #10
 8004b8e:	4621      	mov	r1, r4
 8004b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b94:	4621      	mov	r1, r4
 8004b96:	028a      	lsls	r2, r1, #10
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	60fa      	str	r2, [r7, #12]
 8004ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ba8:	f7fc f876 	bl	8000c98 <__aeabi_uldivmod>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3740      	adds	r7, #64	; 0x40
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	017d7840 	.word	0x017d7840

08004bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	200000a8 	.word	0x200000a8

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff0 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	0800b96c 	.word	0x0800b96c

08004c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c34:	f7ff ffdc 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0b5b      	lsrs	r3, r3, #13
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4903      	ldr	r1, [pc, #12]	; (8004c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	0800b96c 	.word	0x0800b96c

08004c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e041      	b.n	8004cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fd febe 	bl	8002a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4619      	mov	r1, r3
 8004c96:	4610      	mov	r0, r2
 8004c98:	f000 fac0 	bl	800521c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e041      	b.n	8004d8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f839 	bl	8004d94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2202      	movs	r2, #2
 8004d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f000 fa71 	bl	800521c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_TIM_PWM_Start+0x24>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e022      	b.n	8004e12 <HAL_TIM_PWM_Start+0x6a>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d109      	bne.n	8004de6 <HAL_TIM_PWM_Start+0x3e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	bf14      	ite	ne
 8004dde:	2301      	movne	r3, #1
 8004de0:	2300      	moveq	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	e015      	b.n	8004e12 <HAL_TIM_PWM_Start+0x6a>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d109      	bne.n	8004e00 <HAL_TIM_PWM_Start+0x58>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	bf14      	ite	ne
 8004df8:	2301      	movne	r3, #1
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	e008      	b.n	8004e12 <HAL_TIM_PWM_Start+0x6a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e068      	b.n	8004eec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_PWM_Start+0x82>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e28:	e013      	b.n	8004e52 <HAL_TIM_PWM_Start+0xaa>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0x92>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e38:	e00b      	b.n	8004e52 <HAL_TIM_PWM_Start+0xaa>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Start+0xa2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e48:	e003      	b.n	8004e52 <HAL_TIM_PWM_Start+0xaa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fc84 	bl	8005768 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a23      	ldr	r2, [pc, #140]	; (8004ef4 <HAL_TIM_PWM_Start+0x14c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d107      	bne.n	8004e7a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <HAL_TIM_PWM_Start+0x14c>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d018      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x10e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d013      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x10e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <HAL_TIM_PWM_Start+0x150>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x10e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a17      	ldr	r2, [pc, #92]	; (8004efc <HAL_TIM_PWM_Start+0x154>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d009      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x10e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <HAL_TIM_PWM_Start+0x158>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x10e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <HAL_TIM_PWM_Start+0x15c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d111      	bne.n	8004eda <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b06      	cmp	r3, #6
 8004ec6:	d010      	beq.n	8004eea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed8:	e007      	b.n	8004eea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40014000 	.word	0x40014000

08004f08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e0ae      	b.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b0c      	cmp	r3, #12
 8004f32:	f200 809f 	bhi.w	8005074 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f36:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3c:	08004f71 	.word	0x08004f71
 8004f40:	08005075 	.word	0x08005075
 8004f44:	08005075 	.word	0x08005075
 8004f48:	08005075 	.word	0x08005075
 8004f4c:	08004fb1 	.word	0x08004fb1
 8004f50:	08005075 	.word	0x08005075
 8004f54:	08005075 	.word	0x08005075
 8004f58:	08005075 	.word	0x08005075
 8004f5c:	08004ff3 	.word	0x08004ff3
 8004f60:	08005075 	.word	0x08005075
 8004f64:	08005075 	.word	0x08005075
 8004f68:	08005075 	.word	0x08005075
 8004f6c:	08005033 	.word	0x08005033
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f9d0 	bl	800531c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0208 	orr.w	r2, r2, #8
 8004f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0204 	bic.w	r2, r2, #4
 8004f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6999      	ldr	r1, [r3, #24]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	691a      	ldr	r2, [r3, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	619a      	str	r2, [r3, #24]
      break;
 8004fae:	e064      	b.n	800507a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68b9      	ldr	r1, [r7, #8]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fa16 	bl	80053e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6999      	ldr	r1, [r3, #24]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	021a      	lsls	r2, r3, #8
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	619a      	str	r2, [r3, #24]
      break;
 8004ff0:	e043      	b.n	800507a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68b9      	ldr	r1, [r7, #8]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fa61 	bl	80054c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f042 0208 	orr.w	r2, r2, #8
 800500c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0204 	bic.w	r2, r2, #4
 800501c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69d9      	ldr	r1, [r3, #28]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	61da      	str	r2, [r3, #28]
      break;
 8005030:	e023      	b.n	800507a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	4618      	mov	r0, r3
 800503a:	f000 faab 	bl	8005594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69da      	ldr	r2, [r3, #28]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800504c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800505c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69d9      	ldr	r1, [r3, #28]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	021a      	lsls	r2, r3, #8
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	61da      	str	r2, [r3, #28]
      break;
 8005072:	e002      	b.n	800507a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
      break;
 8005078:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005082:	7dfb      	ldrb	r3, [r7, #23]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_TIM_ConfigClockSource+0x1c>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e0b4      	b.n	8005212 <HAL_TIM_ConfigClockSource+0x186>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e0:	d03e      	beq.n	8005160 <HAL_TIM_ConfigClockSource+0xd4>
 80050e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e6:	f200 8087 	bhi.w	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	f000 8086 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x172>
 80050f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f6:	d87f      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 80050f8:	2b70      	cmp	r3, #112	; 0x70
 80050fa:	d01a      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0xa6>
 80050fc:	2b70      	cmp	r3, #112	; 0x70
 80050fe:	d87b      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005100:	2b60      	cmp	r3, #96	; 0x60
 8005102:	d050      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005104:	2b60      	cmp	r3, #96	; 0x60
 8005106:	d877      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005108:	2b50      	cmp	r3, #80	; 0x50
 800510a:	d03c      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0xfa>
 800510c:	2b50      	cmp	r3, #80	; 0x50
 800510e:	d873      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d058      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d86f      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005118:	2b30      	cmp	r3, #48	; 0x30
 800511a:	d064      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x15a>
 800511c:	2b30      	cmp	r3, #48	; 0x30
 800511e:	d86b      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005120:	2b20      	cmp	r3, #32
 8005122:	d060      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d867      	bhi.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d05c      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x15a>
 800512c:	2b10      	cmp	r3, #16
 800512e:	d05a      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	e062      	b.n	80051f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6899      	ldr	r1, [r3, #8]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f000 faf1 	bl	8005728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	609a      	str	r2, [r3, #8]
      break;
 800515e:	e04f      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	6899      	ldr	r1, [r3, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f000 fada 	bl	8005728 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005182:	609a      	str	r2, [r3, #8]
      break;
 8005184:	e03c      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	461a      	mov	r2, r3
 8005194:	f000 fa4e 	bl	8005634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2150      	movs	r1, #80	; 0x50
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 faa7 	bl	80056f2 <TIM_ITRx_SetConfig>
      break;
 80051a4:	e02c      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6859      	ldr	r1, [r3, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f000 fa6d 	bl	8005692 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2160      	movs	r1, #96	; 0x60
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa97 	bl	80056f2 <TIM_ITRx_SetConfig>
      break;
 80051c4:	e01c      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f000 fa2e 	bl	8005634 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2140      	movs	r1, #64	; 0x40
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fa87 	bl	80056f2 <TIM_ITRx_SetConfig>
      break;
 80051e4:	e00c      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4619      	mov	r1, r3
 80051f0:	4610      	mov	r0, r2
 80051f2:	f000 fa7e 	bl	80056f2 <TIM_ITRx_SetConfig>
      break;
 80051f6:	e003      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
      break;
 80051fc:	e000      	b.n	8005200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a34      	ldr	r2, [pc, #208]	; (8005300 <TIM_Base_SetConfig+0xe4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00f      	beq.n	8005254 <TIM_Base_SetConfig+0x38>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d00b      	beq.n	8005254 <TIM_Base_SetConfig+0x38>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a31      	ldr	r2, [pc, #196]	; (8005304 <TIM_Base_SetConfig+0xe8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d007      	beq.n	8005254 <TIM_Base_SetConfig+0x38>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a30      	ldr	r2, [pc, #192]	; (8005308 <TIM_Base_SetConfig+0xec>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_Base_SetConfig+0x38>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a2f      	ldr	r2, [pc, #188]	; (800530c <TIM_Base_SetConfig+0xf0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d108      	bne.n	8005266 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a25      	ldr	r2, [pc, #148]	; (8005300 <TIM_Base_SetConfig+0xe4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01b      	beq.n	80052a6 <TIM_Base_SetConfig+0x8a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005274:	d017      	beq.n	80052a6 <TIM_Base_SetConfig+0x8a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a22      	ldr	r2, [pc, #136]	; (8005304 <TIM_Base_SetConfig+0xe8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <TIM_Base_SetConfig+0x8a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a21      	ldr	r2, [pc, #132]	; (8005308 <TIM_Base_SetConfig+0xec>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00f      	beq.n	80052a6 <TIM_Base_SetConfig+0x8a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a20      	ldr	r2, [pc, #128]	; (800530c <TIM_Base_SetConfig+0xf0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00b      	beq.n	80052a6 <TIM_Base_SetConfig+0x8a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <TIM_Base_SetConfig+0xf4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d007      	beq.n	80052a6 <TIM_Base_SetConfig+0x8a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1e      	ldr	r2, [pc, #120]	; (8005314 <TIM_Base_SetConfig+0xf8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d003      	beq.n	80052a6 <TIM_Base_SetConfig+0x8a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <TIM_Base_SetConfig+0xfc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d108      	bne.n	80052b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a08      	ldr	r2, [pc, #32]	; (8005300 <TIM_Base_SetConfig+0xe4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d103      	bne.n	80052ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	615a      	str	r2, [r3, #20]
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40014000 	.word	0x40014000
 8005314:	40014400 	.word	0x40014400
 8005318:	40014800 	.word	0x40014800

0800531c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800531c:	b480      	push	{r7}
 800531e:	b087      	sub	sp, #28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0201 	bic.w	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f023 0302 	bic.w	r3, r3, #2
 8005364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <TIM_OC1_SetConfig+0xc8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10c      	bne.n	8005392 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0308 	bic.w	r3, r3, #8
 800537e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	4313      	orrs	r3, r2
 8005388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f023 0304 	bic.w	r3, r3, #4
 8005390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a13      	ldr	r2, [pc, #76]	; (80053e4 <TIM_OC1_SetConfig+0xc8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d111      	bne.n	80053be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	40010000 	.word	0x40010000

080053e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0210 	bic.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f023 0320 	bic.w	r3, r3, #32
 8005432:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1e      	ldr	r2, [pc, #120]	; (80054bc <TIM_OC2_SetConfig+0xd4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d10d      	bne.n	8005464 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800544e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a15      	ldr	r2, [pc, #84]	; (80054bc <TIM_OC2_SetConfig+0xd4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d113      	bne.n	8005494 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	40010000 	.word	0x40010000

080054c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1d      	ldr	r2, [pc, #116]	; (8005590 <TIM_OC3_SetConfig+0xd0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10d      	bne.n	800553a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a14      	ldr	r2, [pc, #80]	; (8005590 <TIM_OC3_SetConfig+0xd0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d113      	bne.n	800556a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40010000 	.word	0x40010000

08005594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	031b      	lsls	r3, r3, #12
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a10      	ldr	r2, [pc, #64]	; (8005630 <TIM_OC4_SetConfig+0x9c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d109      	bne.n	8005608 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	019b      	lsls	r3, r3, #6
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000

08005634 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0201 	bic.w	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800565e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f023 030a 	bic.w	r3, r3, #10
 8005670:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005692:	b480      	push	{r7}
 8005694:	b087      	sub	sp, #28
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f023 0210 	bic.w	r2, r3, #16
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	031b      	lsls	r3, r3, #12
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005708:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	f043 0307 	orr.w	r3, r3, #7
 8005714:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	609a      	str	r2, [r3, #8]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005742:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	431a      	orrs	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4313      	orrs	r3, r2
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	609a      	str	r2, [r3, #8]
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	2201      	movs	r2, #1
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1a      	ldr	r2, [r3, #32]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	43db      	mvns	r3, r3
 800578a:	401a      	ands	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a1a      	ldr	r2, [r3, #32]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	fa01 f303 	lsl.w	r3, r1, r3
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	621a      	str	r2, [r3, #32]
}
 80057a6:	bf00      	nop
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e050      	b.n	800586e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1c      	ldr	r2, [pc, #112]	; (800587c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d018      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d013      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a18      	ldr	r2, [pc, #96]	; (8005880 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00e      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a16      	ldr	r2, [pc, #88]	; (8005884 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a15      	ldr	r2, [pc, #84]	; (8005888 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a13      	ldr	r2, [pc, #76]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10c      	bne.n	800585c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	4313      	orrs	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40014000 	.word	0x40014000

08005890 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e03d      	b.n	8005928 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4313      	orrs	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e03f      	b.n	80059c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d106      	bne.n	8005960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fd f912 	bl	8002b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2224      	movs	r2, #36	; 0x24
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fddf 	bl	800653c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800598c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695a      	ldr	r2, [r3, #20]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800599c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b08a      	sub	sp, #40	; 0x28
 80059d2:	af02      	add	r7, sp, #8
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4613      	mov	r3, r2
 80059dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d17c      	bne.n	8005ae8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <HAL_UART_Transmit+0x2c>
 80059f4:	88fb      	ldrh	r3, [r7, #6]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e075      	b.n	8005aea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_UART_Transmit+0x3e>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e06e      	b.n	8005aea <HAL_UART_Transmit+0x11c>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2221      	movs	r2, #33	; 0x21
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a22:	f7fd f98f 	bl	8002d44 <HAL_GetTick>
 8005a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	88fa      	ldrh	r2, [r7, #6]
 8005a32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3c:	d108      	bne.n	8005a50 <HAL_UART_Transmit+0x82>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d104      	bne.n	8005a50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e003      	b.n	8005a58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a60:	e02a      	b.n	8005ab8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2180      	movs	r1, #128	; 0x80
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fb1f 	bl	80060b0 <UART_WaitOnFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e036      	b.n	8005aea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	3302      	adds	r3, #2
 8005a96:	61bb      	str	r3, [r7, #24]
 8005a98:	e007      	b.n	8005aaa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	781a      	ldrb	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1cf      	bne.n	8005a62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	2140      	movs	r1, #64	; 0x40
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 faef 	bl	80060b0 <UART_WaitOnFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e006      	b.n	8005aea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e000      	b.n	8005aea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ae8:	2302      	movs	r3, #2
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	4613      	mov	r3, r2
 8005afe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d11d      	bne.n	8005b48 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <HAL_UART_Receive_IT+0x26>
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e016      	b.n	8005b4a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_UART_Receive_IT+0x38>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e00f      	b.n	8005b4a <HAL_UART_Receive_IT+0x58>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fb24 	bl	800618c <UART_Start_Receive_IT>
 8005b44:	4603      	mov	r3, r0
 8005b46:	e000      	b.n	8005b4a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b48:	2302      	movs	r3, #2
  }
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b0ba      	sub	sp, #232	; 0xe8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10f      	bne.n	8005bba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <HAL_UART_IRQHandler+0x66>
 8005ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fc07 	bl	80063c6 <UART_Receive_IT>
      return;
 8005bb8:	e256      	b.n	8006068 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 80de 	beq.w	8005d80 <HAL_UART_IRQHandler+0x22c>
 8005bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d106      	bne.n	8005bde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80d1 	beq.w	8005d80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <HAL_UART_IRQHandler+0xae>
 8005bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f043 0201 	orr.w	r2, r3, #1
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_UART_IRQHandler+0xd2>
 8005c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f043 0202 	orr.w	r2, r3, #2
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <HAL_UART_IRQHandler+0xf6>
 8005c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	f043 0204 	orr.w	r2, r3, #4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d011      	beq.n	8005c7a <HAL_UART_IRQHandler+0x126>
 8005c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f043 0208 	orr.w	r2, r3, #8
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 81ed 	beq.w	800605e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x14e>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb92 	bl	80063c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b40      	cmp	r3, #64	; 0x40
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d103      	bne.n	8005cce <HAL_UART_IRQHandler+0x17a>
 8005cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d04f      	beq.n	8005d6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fa9a 	bl	8006208 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d141      	bne.n	8005d66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3314      	adds	r3, #20
 8005ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cf0:	e853 3f00 	ldrex	r3, [r3]
 8005cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1d9      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d013      	beq.n	8005d5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	4a7d      	ldr	r2, [pc, #500]	; (8005f30 <HAL_UART_IRQHandler+0x3dc>)
 8005d3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fd f9af 	bl	80030a6 <HAL_DMA_Abort_IT>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5c:	e00e      	b.n	8005d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f990 	bl	8006084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d64:	e00a      	b.n	8005d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f98c 	bl	8006084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d6c:	e006      	b.n	8005d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f988 	bl	8006084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d7a:	e170      	b.n	800605e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d7c:	bf00      	nop
    return;
 8005d7e:	e16e      	b.n	800605e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	f040 814a 	bne.w	800601e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 8143 	beq.w	800601e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 813c 	beq.w	800601e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005da6:	2300      	movs	r3, #0
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	f040 80b4 	bne.w	8005f34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 8140 	beq.w	8006062 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dea:	429a      	cmp	r2, r3
 8005dec:	f080 8139 	bcs.w	8006062 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005df6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e02:	f000 8088 	beq.w	8005f16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1d9      	bne.n	8005e06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3314      	adds	r3, #20
 8005e58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3314      	adds	r3, #20
 8005e72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e1      	bne.n	8005e52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3314      	adds	r3, #20
 8005e94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3314      	adds	r3, #20
 8005eae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005eb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005eb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005eb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e3      	bne.n	8005e8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee6:	f023 0310 	bic.w	r3, r3, #16
 8005eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	330c      	adds	r3, #12
 8005ef4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ef8:	65ba      	str	r2, [r7, #88]	; 0x58
 8005efa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005efe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e3      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fd f858 	bl	8002fc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8b6 	bl	8006098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f2c:	e099      	b.n	8006062 <HAL_UART_IRQHandler+0x50e>
 8005f2e:	bf00      	nop
 8005f30:	080062cf 	.word	0x080062cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 808b 	beq.w	8006066 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8086 	beq.w	8006066 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f7e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e3      	bne.n	8005f5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3314      	adds	r3, #20
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	f023 0301 	bic.w	r3, r3, #1
 8005fa8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fb6:	633a      	str	r2, [r7, #48]	; 0x30
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fbe:	e841 2300 	strex	r3, r2, [r1]
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1e3      	bne.n	8005f92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	330c      	adds	r3, #12
 8005fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0310 	bic.w	r3, r3, #16
 8005fee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ffc:	61fa      	str	r2, [r7, #28]
 8005ffe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	69b9      	ldr	r1, [r7, #24]
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	617b      	str	r3, [r7, #20]
   return(result);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e3      	bne.n	8005fd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006014:	4619      	mov	r1, r3
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f83e 	bl	8006098 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800601c:	e023      	b.n	8006066 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <HAL_UART_IRQHandler+0x4ea>
 800602a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f95d 	bl	80062f6 <UART_Transmit_IT>
    return;
 800603c:	e014      	b.n	8006068 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800603e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00e      	beq.n	8006068 <HAL_UART_IRQHandler+0x514>
 800604a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f99d 	bl	8006396 <UART_EndTransmit_IT>
    return;
 800605c:	e004      	b.n	8006068 <HAL_UART_IRQHandler+0x514>
    return;
 800605e:	bf00      	nop
 8006060:	e002      	b.n	8006068 <HAL_UART_IRQHandler+0x514>
      return;
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <HAL_UART_IRQHandler+0x514>
      return;
 8006066:	bf00      	nop
  }
}
 8006068:	37e8      	adds	r7, #232	; 0xe8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop

08006070 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b090      	sub	sp, #64	; 0x40
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c0:	e050      	b.n	8006164 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d04c      	beq.n	8006164 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80060d0:	f7fc fe38 	bl	8002d44 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060dc:	429a      	cmp	r2, r3
 80060de:	d241      	bcs.n	8006164 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	330c      	adds	r3, #12
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	330c      	adds	r3, #12
 80060fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006100:	637a      	str	r2, [r7, #52]	; 0x34
 8006102:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006104:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006108:	e841 2300 	strex	r3, r2, [r1]
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1e5      	bne.n	80060e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3314      	adds	r3, #20
 800611a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	613b      	str	r3, [r7, #16]
   return(result);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f023 0301 	bic.w	r3, r3, #1
 800612a:	63bb      	str	r3, [r7, #56]	; 0x38
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3314      	adds	r3, #20
 8006132:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006134:	623a      	str	r2, [r7, #32]
 8006136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	69f9      	ldr	r1, [r7, #28]
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	61bb      	str	r3, [r7, #24]
   return(result);
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e5      	bne.n	8006114 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e00f      	b.n	8006184 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	429a      	cmp	r2, r3
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	429a      	cmp	r2, r3
 8006180:	d09f      	beq.n	80060c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3740      	adds	r7, #64	; 0x40
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	88fa      	ldrh	r2, [r7, #6]
 80061a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	88fa      	ldrh	r2, [r7, #6]
 80061aa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2222      	movs	r2, #34	; 0x22
 80061b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d007      	beq.n	80061da <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061d8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0201 	orr.w	r2, r2, #1
 80061e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0220 	orr.w	r2, r2, #32
 80061f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b095      	sub	sp, #84	; 0x54
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006230:	643a      	str	r2, [r7, #64]	; 0x40
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006236:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e5      	bne.n	8006210 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3314      	adds	r3, #20
 800624a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	61fb      	str	r3, [r7, #28]
   return(result);
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	64bb      	str	r3, [r7, #72]	; 0x48
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3314      	adds	r3, #20
 8006262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006264:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800626a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e5      	bne.n	8006244 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	2b01      	cmp	r3, #1
 800627e:	d119      	bne.n	80062b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	330c      	adds	r3, #12
 8006286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f023 0310 	bic.w	r3, r3, #16
 8006296:	647b      	str	r3, [r7, #68]	; 0x44
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	330c      	adds	r3, #12
 800629e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062a0:	61ba      	str	r2, [r7, #24]
 80062a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6979      	ldr	r1, [r7, #20]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	613b      	str	r3, [r7, #16]
   return(result);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e5      	bne.n	8006280 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80062c2:	bf00      	nop
 80062c4:	3754      	adds	r7, #84	; 0x54
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff fecb 	bl	8006084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ee:	bf00      	nop
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b21      	cmp	r3, #33	; 0x21
 8006308:	d13e      	bne.n	8006388 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006312:	d114      	bne.n	800633e <UART_Transmit_IT+0x48>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d110      	bne.n	800633e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006330:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	1c9a      	adds	r2, r3, #2
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	621a      	str	r2, [r3, #32]
 800633c:	e008      	b.n	8006350 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	1c59      	adds	r1, r3, #1
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6211      	str	r1, [r2, #32]
 8006348:	781a      	ldrb	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29b      	uxth	r3, r3
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4619      	mov	r1, r3
 800635e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10f      	bne.n	8006384 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68da      	ldr	r2, [r3, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006372:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006382:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006388:	2302      	movs	r3, #2
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b082      	sub	sp, #8
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fe5a 	bl	8006070 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b08c      	sub	sp, #48	; 0x30
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b22      	cmp	r3, #34	; 0x22
 80063d8:	f040 80ab 	bne.w	8006532 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e4:	d117      	bne.n	8006416 <UART_Receive_IT+0x50>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d113      	bne.n	8006416 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006404:	b29a      	uxth	r2, r3
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640e:	1c9a      	adds	r2, r3, #2
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	629a      	str	r2, [r3, #40]	; 0x28
 8006414:	e026      	b.n	8006464 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800641c:	2300      	movs	r3, #0
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006428:	d007      	beq.n	800643a <UART_Receive_IT+0x74>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <UART_Receive_IT+0x82>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	e008      	b.n	800645a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006454:	b2da      	uxtb	r2, r3
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	4619      	mov	r1, r3
 8006472:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006474:	2b00      	cmp	r3, #0
 8006476:	d15a      	bne.n	800652e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0220 	bic.w	r2, r2, #32
 8006486:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006496:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0201 	bic.w	r2, r2, #1
 80064a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d135      	bne.n	8006524 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	613b      	str	r3, [r7, #16]
   return(result);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f023 0310 	bic.w	r3, r3, #16
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064de:	623a      	str	r2, [r7, #32]
 80064e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	69f9      	ldr	r1, [r7, #28]
 80064e4:	6a3a      	ldr	r2, [r7, #32]
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e5      	bne.n	80064be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d10a      	bne.n	8006516 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006500:	2300      	movs	r3, #0
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fdbb 	bl	8006098 <HAL_UARTEx_RxEventCallback>
 8006522:	e002      	b.n	800652a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fb fc53 	bl	8001dd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	e002      	b.n	8006534 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	e000      	b.n	8006534 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006532:	2302      	movs	r3, #2
  }
}
 8006534:	4618      	mov	r0, r3
 8006536:	3730      	adds	r7, #48	; 0x30
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800653c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006540:	b0c0      	sub	sp, #256	; 0x100
 8006542:	af00      	add	r7, sp, #0
 8006544:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006558:	68d9      	ldr	r1, [r3, #12]
 800655a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	ea40 0301 	orr.w	r3, r0, r1
 8006564:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	431a      	orrs	r2, r3
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	431a      	orrs	r2, r3
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006594:	f021 010c 	bic.w	r1, r1, #12
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065a2:	430b      	orrs	r3, r1
 80065a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b6:	6999      	ldr	r1, [r3, #24]
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	ea40 0301 	orr.w	r3, r0, r1
 80065c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4b8f      	ldr	r3, [pc, #572]	; (8006808 <UART_SetConfig+0x2cc>)
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d005      	beq.n	80065dc <UART_SetConfig+0xa0>
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4b8d      	ldr	r3, [pc, #564]	; (800680c <UART_SetConfig+0x2d0>)
 80065d8:	429a      	cmp	r2, r3
 80065da:	d104      	bne.n	80065e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065dc:	f7fe fb28 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 80065e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065e4:	e003      	b.n	80065ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065e6:	f7fe fb0f 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 80065ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f8:	f040 810c 	bne.w	8006814 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006600:	2200      	movs	r2, #0
 8006602:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006606:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800660a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800660e:	4622      	mov	r2, r4
 8006610:	462b      	mov	r3, r5
 8006612:	1891      	adds	r1, r2, r2
 8006614:	65b9      	str	r1, [r7, #88]	; 0x58
 8006616:	415b      	adcs	r3, r3
 8006618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800661a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800661e:	4621      	mov	r1, r4
 8006620:	eb12 0801 	adds.w	r8, r2, r1
 8006624:	4629      	mov	r1, r5
 8006626:	eb43 0901 	adc.w	r9, r3, r1
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800663a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800663e:	4690      	mov	r8, r2
 8006640:	4699      	mov	r9, r3
 8006642:	4623      	mov	r3, r4
 8006644:	eb18 0303 	adds.w	r3, r8, r3
 8006648:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800664c:	462b      	mov	r3, r5
 800664e:	eb49 0303 	adc.w	r3, r9, r3
 8006652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006662:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006666:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800666a:	460b      	mov	r3, r1
 800666c:	18db      	adds	r3, r3, r3
 800666e:	653b      	str	r3, [r7, #80]	; 0x50
 8006670:	4613      	mov	r3, r2
 8006672:	eb42 0303 	adc.w	r3, r2, r3
 8006676:	657b      	str	r3, [r7, #84]	; 0x54
 8006678:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800667c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006680:	f7fa fb0a 	bl	8000c98 <__aeabi_uldivmod>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4b61      	ldr	r3, [pc, #388]	; (8006810 <UART_SetConfig+0x2d4>)
 800668a:	fba3 2302 	umull	r2, r3, r3, r2
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	011c      	lsls	r4, r3, #4
 8006692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006696:	2200      	movs	r2, #0
 8006698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800669c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066a4:	4642      	mov	r2, r8
 80066a6:	464b      	mov	r3, r9
 80066a8:	1891      	adds	r1, r2, r2
 80066aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80066ac:	415b      	adcs	r3, r3
 80066ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80066b4:	4641      	mov	r1, r8
 80066b6:	eb12 0a01 	adds.w	sl, r2, r1
 80066ba:	4649      	mov	r1, r9
 80066bc:	eb43 0b01 	adc.w	fp, r3, r1
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066d4:	4692      	mov	sl, r2
 80066d6:	469b      	mov	fp, r3
 80066d8:	4643      	mov	r3, r8
 80066da:	eb1a 0303 	adds.w	r3, sl, r3
 80066de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066e2:	464b      	mov	r3, r9
 80066e4:	eb4b 0303 	adc.w	r3, fp, r3
 80066e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006700:	460b      	mov	r3, r1
 8006702:	18db      	adds	r3, r3, r3
 8006704:	643b      	str	r3, [r7, #64]	; 0x40
 8006706:	4613      	mov	r3, r2
 8006708:	eb42 0303 	adc.w	r3, r2, r3
 800670c:	647b      	str	r3, [r7, #68]	; 0x44
 800670e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006712:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006716:	f7fa fabf 	bl	8000c98 <__aeabi_uldivmod>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4611      	mov	r1, r2
 8006720:	4b3b      	ldr	r3, [pc, #236]	; (8006810 <UART_SetConfig+0x2d4>)
 8006722:	fba3 2301 	umull	r2, r3, r3, r1
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	2264      	movs	r2, #100	; 0x64
 800672a:	fb02 f303 	mul.w	r3, r2, r3
 800672e:	1acb      	subs	r3, r1, r3
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006736:	4b36      	ldr	r3, [pc, #216]	; (8006810 <UART_SetConfig+0x2d4>)
 8006738:	fba3 2302 	umull	r2, r3, r3, r2
 800673c:	095b      	lsrs	r3, r3, #5
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006744:	441c      	add	r4, r3
 8006746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800674a:	2200      	movs	r2, #0
 800674c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006750:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006754:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006758:	4642      	mov	r2, r8
 800675a:	464b      	mov	r3, r9
 800675c:	1891      	adds	r1, r2, r2
 800675e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006760:	415b      	adcs	r3, r3
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006764:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006768:	4641      	mov	r1, r8
 800676a:	1851      	adds	r1, r2, r1
 800676c:	6339      	str	r1, [r7, #48]	; 0x30
 800676e:	4649      	mov	r1, r9
 8006770:	414b      	adcs	r3, r1
 8006772:	637b      	str	r3, [r7, #52]	; 0x34
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006780:	4659      	mov	r1, fp
 8006782:	00cb      	lsls	r3, r1, #3
 8006784:	4651      	mov	r1, sl
 8006786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800678a:	4651      	mov	r1, sl
 800678c:	00ca      	lsls	r2, r1, #3
 800678e:	4610      	mov	r0, r2
 8006790:	4619      	mov	r1, r3
 8006792:	4603      	mov	r3, r0
 8006794:	4642      	mov	r2, r8
 8006796:	189b      	adds	r3, r3, r2
 8006798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800679c:	464b      	mov	r3, r9
 800679e:	460a      	mov	r2, r1
 80067a0:	eb42 0303 	adc.w	r3, r2, r3
 80067a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80067b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80067b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80067bc:	460b      	mov	r3, r1
 80067be:	18db      	adds	r3, r3, r3
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80067c2:	4613      	mov	r3, r2
 80067c4:	eb42 0303 	adc.w	r3, r2, r3
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80067d2:	f7fa fa61 	bl	8000c98 <__aeabi_uldivmod>
 80067d6:	4602      	mov	r2, r0
 80067d8:	460b      	mov	r3, r1
 80067da:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <UART_SetConfig+0x2d4>)
 80067dc:	fba3 1302 	umull	r1, r3, r3, r2
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	2164      	movs	r1, #100	; 0x64
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	3332      	adds	r3, #50	; 0x32
 80067ee:	4a08      	ldr	r2, [pc, #32]	; (8006810 <UART_SetConfig+0x2d4>)
 80067f0:	fba2 2303 	umull	r2, r3, r2, r3
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	f003 0207 	and.w	r2, r3, #7
 80067fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4422      	add	r2, r4
 8006802:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006804:	e106      	b.n	8006a14 <UART_SetConfig+0x4d8>
 8006806:	bf00      	nop
 8006808:	40011000 	.word	0x40011000
 800680c:	40011400 	.word	0x40011400
 8006810:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006818:	2200      	movs	r2, #0
 800681a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800681e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006822:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006826:	4642      	mov	r2, r8
 8006828:	464b      	mov	r3, r9
 800682a:	1891      	adds	r1, r2, r2
 800682c:	6239      	str	r1, [r7, #32]
 800682e:	415b      	adcs	r3, r3
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
 8006832:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006836:	4641      	mov	r1, r8
 8006838:	1854      	adds	r4, r2, r1
 800683a:	4649      	mov	r1, r9
 800683c:	eb43 0501 	adc.w	r5, r3, r1
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	f04f 0300 	mov.w	r3, #0
 8006848:	00eb      	lsls	r3, r5, #3
 800684a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800684e:	00e2      	lsls	r2, r4, #3
 8006850:	4614      	mov	r4, r2
 8006852:	461d      	mov	r5, r3
 8006854:	4643      	mov	r3, r8
 8006856:	18e3      	adds	r3, r4, r3
 8006858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800685c:	464b      	mov	r3, r9
 800685e:	eb45 0303 	adc.w	r3, r5, r3
 8006862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006872:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	f04f 0300 	mov.w	r3, #0
 800687e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006882:	4629      	mov	r1, r5
 8006884:	008b      	lsls	r3, r1, #2
 8006886:	4621      	mov	r1, r4
 8006888:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800688c:	4621      	mov	r1, r4
 800688e:	008a      	lsls	r2, r1, #2
 8006890:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006894:	f7fa fa00 	bl	8000c98 <__aeabi_uldivmod>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4b60      	ldr	r3, [pc, #384]	; (8006a20 <UART_SetConfig+0x4e4>)
 800689e:	fba3 2302 	umull	r2, r3, r3, r2
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	011c      	lsls	r4, r3, #4
 80068a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80068b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80068b8:	4642      	mov	r2, r8
 80068ba:	464b      	mov	r3, r9
 80068bc:	1891      	adds	r1, r2, r2
 80068be:	61b9      	str	r1, [r7, #24]
 80068c0:	415b      	adcs	r3, r3
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c8:	4641      	mov	r1, r8
 80068ca:	1851      	adds	r1, r2, r1
 80068cc:	6139      	str	r1, [r7, #16]
 80068ce:	4649      	mov	r1, r9
 80068d0:	414b      	adcs	r3, r1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	f04f 0200 	mov.w	r2, #0
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068e0:	4659      	mov	r1, fp
 80068e2:	00cb      	lsls	r3, r1, #3
 80068e4:	4651      	mov	r1, sl
 80068e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ea:	4651      	mov	r1, sl
 80068ec:	00ca      	lsls	r2, r1, #3
 80068ee:	4610      	mov	r0, r2
 80068f0:	4619      	mov	r1, r3
 80068f2:	4603      	mov	r3, r0
 80068f4:	4642      	mov	r2, r8
 80068f6:	189b      	adds	r3, r3, r2
 80068f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068fc:	464b      	mov	r3, r9
 80068fe:	460a      	mov	r2, r1
 8006900:	eb42 0303 	adc.w	r3, r2, r3
 8006904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	67bb      	str	r3, [r7, #120]	; 0x78
 8006912:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006920:	4649      	mov	r1, r9
 8006922:	008b      	lsls	r3, r1, #2
 8006924:	4641      	mov	r1, r8
 8006926:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800692a:	4641      	mov	r1, r8
 800692c:	008a      	lsls	r2, r1, #2
 800692e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006932:	f7fa f9b1 	bl	8000c98 <__aeabi_uldivmod>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4611      	mov	r1, r2
 800693c:	4b38      	ldr	r3, [pc, #224]	; (8006a20 <UART_SetConfig+0x4e4>)
 800693e:	fba3 2301 	umull	r2, r3, r3, r1
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	2264      	movs	r2, #100	; 0x64
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	1acb      	subs	r3, r1, r3
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	3332      	adds	r3, #50	; 0x32
 8006950:	4a33      	ldr	r2, [pc, #204]	; (8006a20 <UART_SetConfig+0x4e4>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800695c:	441c      	add	r4, r3
 800695e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006962:	2200      	movs	r2, #0
 8006964:	673b      	str	r3, [r7, #112]	; 0x70
 8006966:	677a      	str	r2, [r7, #116]	; 0x74
 8006968:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	1891      	adds	r1, r2, r2
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	415b      	adcs	r3, r3
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800697c:	4641      	mov	r1, r8
 800697e:	1851      	adds	r1, r2, r1
 8006980:	6039      	str	r1, [r7, #0]
 8006982:	4649      	mov	r1, r9
 8006984:	414b      	adcs	r3, r1
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006994:	4659      	mov	r1, fp
 8006996:	00cb      	lsls	r3, r1, #3
 8006998:	4651      	mov	r1, sl
 800699a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800699e:	4651      	mov	r1, sl
 80069a0:	00ca      	lsls	r2, r1, #3
 80069a2:	4610      	mov	r0, r2
 80069a4:	4619      	mov	r1, r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	4642      	mov	r2, r8
 80069aa:	189b      	adds	r3, r3, r2
 80069ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80069ae:	464b      	mov	r3, r9
 80069b0:	460a      	mov	r2, r1
 80069b2:	eb42 0303 	adc.w	r3, r2, r3
 80069b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	663b      	str	r3, [r7, #96]	; 0x60
 80069c2:	667a      	str	r2, [r7, #100]	; 0x64
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80069d0:	4649      	mov	r1, r9
 80069d2:	008b      	lsls	r3, r1, #2
 80069d4:	4641      	mov	r1, r8
 80069d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069da:	4641      	mov	r1, r8
 80069dc:	008a      	lsls	r2, r1, #2
 80069de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069e2:	f7fa f959 	bl	8000c98 <__aeabi_uldivmod>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <UART_SetConfig+0x4e4>)
 80069ec:	fba3 1302 	umull	r1, r3, r3, r2
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	2164      	movs	r1, #100	; 0x64
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	3332      	adds	r3, #50	; 0x32
 80069fe:	4a08      	ldr	r2, [pc, #32]	; (8006a20 <UART_SetConfig+0x4e4>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	095b      	lsrs	r3, r3, #5
 8006a06:	f003 020f 	and.w	r2, r3, #15
 8006a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4422      	add	r2, r4
 8006a12:	609a      	str	r2, [r3, #8]
}
 8006a14:	bf00      	nop
 8006a16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a20:	51eb851f 	.word	0x51eb851f

08006a24 <atof>:
 8006a24:	2100      	movs	r1, #0
 8006a26:	f000 be19 	b.w	800765c <strtod>

08006a2a <atoi>:
 8006a2a:	220a      	movs	r2, #10
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	f000 bea5 	b.w	800777c <strtol>

08006a32 <sulp>:
 8006a32:	b570      	push	{r4, r5, r6, lr}
 8006a34:	4604      	mov	r4, r0
 8006a36:	460d      	mov	r5, r1
 8006a38:	ec45 4b10 	vmov	d0, r4, r5
 8006a3c:	4616      	mov	r6, r2
 8006a3e:	f003 fd5b 	bl	800a4f8 <__ulp>
 8006a42:	ec51 0b10 	vmov	r0, r1, d0
 8006a46:	b17e      	cbz	r6, 8006a68 <sulp+0x36>
 8006a48:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	dd09      	ble.n	8006a68 <sulp+0x36>
 8006a54:	051b      	lsls	r3, r3, #20
 8006a56:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a5a:	2400      	movs	r4, #0
 8006a5c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a60:	4622      	mov	r2, r4
 8006a62:	462b      	mov	r3, r5
 8006a64:	f7f9 fdd0 	bl	8000608 <__aeabi_dmul>
 8006a68:	bd70      	pop	{r4, r5, r6, pc}
 8006a6a:	0000      	movs	r0, r0
 8006a6c:	0000      	movs	r0, r0
	...

08006a70 <_strtod_l>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	ed2d 8b02 	vpush	{d8}
 8006a78:	b09b      	sub	sp, #108	; 0x6c
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8006a7e:	2200      	movs	r2, #0
 8006a80:	9216      	str	r2, [sp, #88]	; 0x58
 8006a82:	460d      	mov	r5, r1
 8006a84:	f04f 0800 	mov.w	r8, #0
 8006a88:	f04f 0900 	mov.w	r9, #0
 8006a8c:	460a      	mov	r2, r1
 8006a8e:	9215      	str	r2, [sp, #84]	; 0x54
 8006a90:	7811      	ldrb	r1, [r2, #0]
 8006a92:	292b      	cmp	r1, #43	; 0x2b
 8006a94:	d04c      	beq.n	8006b30 <_strtod_l+0xc0>
 8006a96:	d83a      	bhi.n	8006b0e <_strtod_l+0x9e>
 8006a98:	290d      	cmp	r1, #13
 8006a9a:	d834      	bhi.n	8006b06 <_strtod_l+0x96>
 8006a9c:	2908      	cmp	r1, #8
 8006a9e:	d834      	bhi.n	8006b0a <_strtod_l+0x9a>
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	d03d      	beq.n	8006b20 <_strtod_l+0xb0>
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	920a      	str	r2, [sp, #40]	; 0x28
 8006aa8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006aaa:	7832      	ldrb	r2, [r6, #0]
 8006aac:	2a30      	cmp	r2, #48	; 0x30
 8006aae:	f040 80b4 	bne.w	8006c1a <_strtod_l+0x1aa>
 8006ab2:	7872      	ldrb	r2, [r6, #1]
 8006ab4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006ab8:	2a58      	cmp	r2, #88	; 0x58
 8006aba:	d170      	bne.n	8006b9e <_strtod_l+0x12e>
 8006abc:	9302      	str	r3, [sp, #8]
 8006abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	ab16      	add	r3, sp, #88	; 0x58
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	4a8e      	ldr	r2, [pc, #568]	; (8006d00 <_strtod_l+0x290>)
 8006ac8:	ab17      	add	r3, sp, #92	; 0x5c
 8006aca:	a915      	add	r1, sp, #84	; 0x54
 8006acc:	4620      	mov	r0, r4
 8006ace:	f002 fdf1 	bl	80096b4 <__gethex>
 8006ad2:	f010 070f 	ands.w	r7, r0, #15
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	d005      	beq.n	8006ae6 <_strtod_l+0x76>
 8006ada:	2f06      	cmp	r7, #6
 8006adc:	d12a      	bne.n	8006b34 <_strtod_l+0xc4>
 8006ade:	3601      	adds	r6, #1
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9615      	str	r6, [sp, #84]	; 0x54
 8006ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ae6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f040 857f 	bne.w	80075ec <_strtod_l+0xb7c>
 8006aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af0:	b1db      	cbz	r3, 8006b2a <_strtod_l+0xba>
 8006af2:	4642      	mov	r2, r8
 8006af4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006af8:	ec43 2b10 	vmov	d0, r2, r3
 8006afc:	b01b      	add	sp, #108	; 0x6c
 8006afe:	ecbd 8b02 	vpop	{d8}
 8006b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b06:	2920      	cmp	r1, #32
 8006b08:	d1cc      	bne.n	8006aa4 <_strtod_l+0x34>
 8006b0a:	3201      	adds	r2, #1
 8006b0c:	e7bf      	b.n	8006a8e <_strtod_l+0x1e>
 8006b0e:	292d      	cmp	r1, #45	; 0x2d
 8006b10:	d1c8      	bne.n	8006aa4 <_strtod_l+0x34>
 8006b12:	2101      	movs	r1, #1
 8006b14:	910a      	str	r1, [sp, #40]	; 0x28
 8006b16:	1c51      	adds	r1, r2, #1
 8006b18:	9115      	str	r1, [sp, #84]	; 0x54
 8006b1a:	7852      	ldrb	r2, [r2, #1]
 8006b1c:	2a00      	cmp	r2, #0
 8006b1e:	d1c3      	bne.n	8006aa8 <_strtod_l+0x38>
 8006b20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b22:	9515      	str	r5, [sp, #84]	; 0x54
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f040 855f 	bne.w	80075e8 <_strtod_l+0xb78>
 8006b2a:	4642      	mov	r2, r8
 8006b2c:	464b      	mov	r3, r9
 8006b2e:	e7e3      	b.n	8006af8 <_strtod_l+0x88>
 8006b30:	2100      	movs	r1, #0
 8006b32:	e7ef      	b.n	8006b14 <_strtod_l+0xa4>
 8006b34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006b36:	b13a      	cbz	r2, 8006b48 <_strtod_l+0xd8>
 8006b38:	2135      	movs	r1, #53	; 0x35
 8006b3a:	a818      	add	r0, sp, #96	; 0x60
 8006b3c:	f003 fdd9 	bl	800a6f2 <__copybits>
 8006b40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006b42:	4620      	mov	r0, r4
 8006b44:	f003 f9ac 	bl	8009ea0 <_Bfree>
 8006b48:	3f01      	subs	r7, #1
 8006b4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b4c:	2f04      	cmp	r7, #4
 8006b4e:	d806      	bhi.n	8006b5e <_strtod_l+0xee>
 8006b50:	e8df f007 	tbb	[pc, r7]
 8006b54:	201d0314 	.word	0x201d0314
 8006b58:	14          	.byte	0x14
 8006b59:	00          	.byte	0x00
 8006b5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006b5e:	05e9      	lsls	r1, r5, #23
 8006b60:	bf48      	it	mi
 8006b62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006b66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b6a:	0d1b      	lsrs	r3, r3, #20
 8006b6c:	051b      	lsls	r3, r3, #20
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1b9      	bne.n	8006ae6 <_strtod_l+0x76>
 8006b72:	f001 fe25 	bl	80087c0 <__errno>
 8006b76:	2322      	movs	r3, #34	; 0x22
 8006b78:	6003      	str	r3, [r0, #0]
 8006b7a:	e7b4      	b.n	8006ae6 <_strtod_l+0x76>
 8006b7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006b80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006b8c:	e7e7      	b.n	8006b5e <_strtod_l+0xee>
 8006b8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006d08 <_strtod_l+0x298>
 8006b92:	e7e4      	b.n	8006b5e <_strtod_l+0xee>
 8006b94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006b98:	f04f 38ff 	mov.w	r8, #4294967295
 8006b9c:	e7df      	b.n	8006b5e <_strtod_l+0xee>
 8006b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	9215      	str	r2, [sp, #84]	; 0x54
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	2b30      	cmp	r3, #48	; 0x30
 8006ba8:	d0f9      	beq.n	8006b9e <_strtod_l+0x12e>
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d09b      	beq.n	8006ae6 <_strtod_l+0x76>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f04f 0a00 	mov.w	sl, #0
 8006bb4:	9304      	str	r3, [sp, #16]
 8006bb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006bbe:	46d3      	mov	fp, sl
 8006bc0:	220a      	movs	r2, #10
 8006bc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006bc4:	7806      	ldrb	r6, [r0, #0]
 8006bc6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006bca:	b2d9      	uxtb	r1, r3
 8006bcc:	2909      	cmp	r1, #9
 8006bce:	d926      	bls.n	8006c1e <_strtod_l+0x1ae>
 8006bd0:	494c      	ldr	r1, [pc, #304]	; (8006d04 <_strtod_l+0x294>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f001 fd6d 	bl	80086b2 <strncmp>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d030      	beq.n	8006c3e <_strtod_l+0x1ce>
 8006bdc:	2000      	movs	r0, #0
 8006bde:	4632      	mov	r2, r6
 8006be0:	9005      	str	r0, [sp, #20]
 8006be2:	465e      	mov	r6, fp
 8006be4:	4603      	mov	r3, r0
 8006be6:	2a65      	cmp	r2, #101	; 0x65
 8006be8:	d001      	beq.n	8006bee <_strtod_l+0x17e>
 8006bea:	2a45      	cmp	r2, #69	; 0x45
 8006bec:	d113      	bne.n	8006c16 <_strtod_l+0x1a6>
 8006bee:	b91e      	cbnz	r6, 8006bf8 <_strtod_l+0x188>
 8006bf0:	9a04      	ldr	r2, [sp, #16]
 8006bf2:	4302      	orrs	r2, r0
 8006bf4:	d094      	beq.n	8006b20 <_strtod_l+0xb0>
 8006bf6:	2600      	movs	r6, #0
 8006bf8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006bfa:	1c6a      	adds	r2, r5, #1
 8006bfc:	9215      	str	r2, [sp, #84]	; 0x54
 8006bfe:	786a      	ldrb	r2, [r5, #1]
 8006c00:	2a2b      	cmp	r2, #43	; 0x2b
 8006c02:	d074      	beq.n	8006cee <_strtod_l+0x27e>
 8006c04:	2a2d      	cmp	r2, #45	; 0x2d
 8006c06:	d078      	beq.n	8006cfa <_strtod_l+0x28a>
 8006c08:	f04f 0c00 	mov.w	ip, #0
 8006c0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c10:	2909      	cmp	r1, #9
 8006c12:	d97f      	bls.n	8006d14 <_strtod_l+0x2a4>
 8006c14:	9515      	str	r5, [sp, #84]	; 0x54
 8006c16:	2700      	movs	r7, #0
 8006c18:	e09e      	b.n	8006d58 <_strtod_l+0x2e8>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e7c8      	b.n	8006bb0 <_strtod_l+0x140>
 8006c1e:	f1bb 0f08 	cmp.w	fp, #8
 8006c22:	bfd8      	it	le
 8006c24:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006c26:	f100 0001 	add.w	r0, r0, #1
 8006c2a:	bfda      	itte	le
 8006c2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c30:	9309      	strle	r3, [sp, #36]	; 0x24
 8006c32:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006c36:	f10b 0b01 	add.w	fp, fp, #1
 8006c3a:	9015      	str	r0, [sp, #84]	; 0x54
 8006c3c:	e7c1      	b.n	8006bc2 <_strtod_l+0x152>
 8006c3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	9215      	str	r2, [sp, #84]	; 0x54
 8006c44:	785a      	ldrb	r2, [r3, #1]
 8006c46:	f1bb 0f00 	cmp.w	fp, #0
 8006c4a:	d037      	beq.n	8006cbc <_strtod_l+0x24c>
 8006c4c:	9005      	str	r0, [sp, #20]
 8006c4e:	465e      	mov	r6, fp
 8006c50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c54:	2b09      	cmp	r3, #9
 8006c56:	d912      	bls.n	8006c7e <_strtod_l+0x20e>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e7c4      	b.n	8006be6 <_strtod_l+0x176>
 8006c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	9215      	str	r2, [sp, #84]	; 0x54
 8006c62:	785a      	ldrb	r2, [r3, #1]
 8006c64:	3001      	adds	r0, #1
 8006c66:	2a30      	cmp	r2, #48	; 0x30
 8006c68:	d0f8      	beq.n	8006c5c <_strtod_l+0x1ec>
 8006c6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	f200 84c1 	bhi.w	80075f6 <_strtod_l+0xb86>
 8006c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c76:	9005      	str	r0, [sp, #20]
 8006c78:	2000      	movs	r0, #0
 8006c7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	3a30      	subs	r2, #48	; 0x30
 8006c80:	f100 0301 	add.w	r3, r0, #1
 8006c84:	d014      	beq.n	8006cb0 <_strtod_l+0x240>
 8006c86:	9905      	ldr	r1, [sp, #20]
 8006c88:	4419      	add	r1, r3
 8006c8a:	9105      	str	r1, [sp, #20]
 8006c8c:	4633      	mov	r3, r6
 8006c8e:	eb00 0c06 	add.w	ip, r0, r6
 8006c92:	210a      	movs	r1, #10
 8006c94:	4563      	cmp	r3, ip
 8006c96:	d113      	bne.n	8006cc0 <_strtod_l+0x250>
 8006c98:	1833      	adds	r3, r6, r0
 8006c9a:	2b08      	cmp	r3, #8
 8006c9c:	f106 0601 	add.w	r6, r6, #1
 8006ca0:	4406      	add	r6, r0
 8006ca2:	dc1a      	bgt.n	8006cda <_strtod_l+0x26a>
 8006ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ca6:	230a      	movs	r3, #10
 8006ca8:	fb03 2301 	mla	r3, r3, r1, r2
 8006cac:	9309      	str	r3, [sp, #36]	; 0x24
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cb2:	1c51      	adds	r1, r2, #1
 8006cb4:	9115      	str	r1, [sp, #84]	; 0x54
 8006cb6:	7852      	ldrb	r2, [r2, #1]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	e7c9      	b.n	8006c50 <_strtod_l+0x1e0>
 8006cbc:	4658      	mov	r0, fp
 8006cbe:	e7d2      	b.n	8006c66 <_strtod_l+0x1f6>
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	f103 0301 	add.w	r3, r3, #1
 8006cc6:	dc03      	bgt.n	8006cd0 <_strtod_l+0x260>
 8006cc8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006cca:	434f      	muls	r7, r1
 8006ccc:	9709      	str	r7, [sp, #36]	; 0x24
 8006cce:	e7e1      	b.n	8006c94 <_strtod_l+0x224>
 8006cd0:	2b10      	cmp	r3, #16
 8006cd2:	bfd8      	it	le
 8006cd4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006cd8:	e7dc      	b.n	8006c94 <_strtod_l+0x224>
 8006cda:	2e10      	cmp	r6, #16
 8006cdc:	bfdc      	itt	le
 8006cde:	230a      	movle	r3, #10
 8006ce0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006ce4:	e7e3      	b.n	8006cae <_strtod_l+0x23e>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9305      	str	r3, [sp, #20]
 8006cea:	2301      	movs	r3, #1
 8006cec:	e780      	b.n	8006bf0 <_strtod_l+0x180>
 8006cee:	f04f 0c00 	mov.w	ip, #0
 8006cf2:	1caa      	adds	r2, r5, #2
 8006cf4:	9215      	str	r2, [sp, #84]	; 0x54
 8006cf6:	78aa      	ldrb	r2, [r5, #2]
 8006cf8:	e788      	b.n	8006c0c <_strtod_l+0x19c>
 8006cfa:	f04f 0c01 	mov.w	ip, #1
 8006cfe:	e7f8      	b.n	8006cf2 <_strtod_l+0x282>
 8006d00:	0800b978 	.word	0x0800b978
 8006d04:	0800b974 	.word	0x0800b974
 8006d08:	7ff00000 	.word	0x7ff00000
 8006d0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d0e:	1c51      	adds	r1, r2, #1
 8006d10:	9115      	str	r1, [sp, #84]	; 0x54
 8006d12:	7852      	ldrb	r2, [r2, #1]
 8006d14:	2a30      	cmp	r2, #48	; 0x30
 8006d16:	d0f9      	beq.n	8006d0c <_strtod_l+0x29c>
 8006d18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006d1c:	2908      	cmp	r1, #8
 8006d1e:	f63f af7a 	bhi.w	8006c16 <_strtod_l+0x1a6>
 8006d22:	3a30      	subs	r2, #48	; 0x30
 8006d24:	9208      	str	r2, [sp, #32]
 8006d26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d28:	920c      	str	r2, [sp, #48]	; 0x30
 8006d2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d2c:	1c57      	adds	r7, r2, #1
 8006d2e:	9715      	str	r7, [sp, #84]	; 0x54
 8006d30:	7852      	ldrb	r2, [r2, #1]
 8006d32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006d36:	f1be 0f09 	cmp.w	lr, #9
 8006d3a:	d938      	bls.n	8006dae <_strtod_l+0x33e>
 8006d3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d3e:	1a7f      	subs	r7, r7, r1
 8006d40:	2f08      	cmp	r7, #8
 8006d42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006d46:	dc03      	bgt.n	8006d50 <_strtod_l+0x2e0>
 8006d48:	9908      	ldr	r1, [sp, #32]
 8006d4a:	428f      	cmp	r7, r1
 8006d4c:	bfa8      	it	ge
 8006d4e:	460f      	movge	r7, r1
 8006d50:	f1bc 0f00 	cmp.w	ip, #0
 8006d54:	d000      	beq.n	8006d58 <_strtod_l+0x2e8>
 8006d56:	427f      	negs	r7, r7
 8006d58:	2e00      	cmp	r6, #0
 8006d5a:	d14f      	bne.n	8006dfc <_strtod_l+0x38c>
 8006d5c:	9904      	ldr	r1, [sp, #16]
 8006d5e:	4301      	orrs	r1, r0
 8006d60:	f47f aec1 	bne.w	8006ae6 <_strtod_l+0x76>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f47f aedb 	bne.w	8006b20 <_strtod_l+0xb0>
 8006d6a:	2a69      	cmp	r2, #105	; 0x69
 8006d6c:	d029      	beq.n	8006dc2 <_strtod_l+0x352>
 8006d6e:	dc26      	bgt.n	8006dbe <_strtod_l+0x34e>
 8006d70:	2a49      	cmp	r2, #73	; 0x49
 8006d72:	d026      	beq.n	8006dc2 <_strtod_l+0x352>
 8006d74:	2a4e      	cmp	r2, #78	; 0x4e
 8006d76:	f47f aed3 	bne.w	8006b20 <_strtod_l+0xb0>
 8006d7a:	499b      	ldr	r1, [pc, #620]	; (8006fe8 <_strtod_l+0x578>)
 8006d7c:	a815      	add	r0, sp, #84	; 0x54
 8006d7e:	f002 fed9 	bl	8009b34 <__match>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	f43f aecc 	beq.w	8006b20 <_strtod_l+0xb0>
 8006d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b28      	cmp	r3, #40	; 0x28
 8006d8e:	d12f      	bne.n	8006df0 <_strtod_l+0x380>
 8006d90:	4996      	ldr	r1, [pc, #600]	; (8006fec <_strtod_l+0x57c>)
 8006d92:	aa18      	add	r2, sp, #96	; 0x60
 8006d94:	a815      	add	r0, sp, #84	; 0x54
 8006d96:	f002 fee1 	bl	8009b5c <__hexnan>
 8006d9a:	2805      	cmp	r0, #5
 8006d9c:	d128      	bne.n	8006df0 <_strtod_l+0x380>
 8006d9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006da0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006da4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006da8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006dac:	e69b      	b.n	8006ae6 <_strtod_l+0x76>
 8006dae:	9f08      	ldr	r7, [sp, #32]
 8006db0:	210a      	movs	r1, #10
 8006db2:	fb01 2107 	mla	r1, r1, r7, r2
 8006db6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006dba:	9208      	str	r2, [sp, #32]
 8006dbc:	e7b5      	b.n	8006d2a <_strtod_l+0x2ba>
 8006dbe:	2a6e      	cmp	r2, #110	; 0x6e
 8006dc0:	e7d9      	b.n	8006d76 <_strtod_l+0x306>
 8006dc2:	498b      	ldr	r1, [pc, #556]	; (8006ff0 <_strtod_l+0x580>)
 8006dc4:	a815      	add	r0, sp, #84	; 0x54
 8006dc6:	f002 feb5 	bl	8009b34 <__match>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f43f aea8 	beq.w	8006b20 <_strtod_l+0xb0>
 8006dd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dd2:	4988      	ldr	r1, [pc, #544]	; (8006ff4 <_strtod_l+0x584>)
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	a815      	add	r0, sp, #84	; 0x54
 8006dd8:	9315      	str	r3, [sp, #84]	; 0x54
 8006dda:	f002 feab 	bl	8009b34 <__match>
 8006dde:	b910      	cbnz	r0, 8006de6 <_strtod_l+0x376>
 8006de0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006de2:	3301      	adds	r3, #1
 8006de4:	9315      	str	r3, [sp, #84]	; 0x54
 8006de6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007004 <_strtod_l+0x594>
 8006dea:	f04f 0800 	mov.w	r8, #0
 8006dee:	e67a      	b.n	8006ae6 <_strtod_l+0x76>
 8006df0:	4881      	ldr	r0, [pc, #516]	; (8006ff8 <_strtod_l+0x588>)
 8006df2:	f001 fd21 	bl	8008838 <nan>
 8006df6:	ec59 8b10 	vmov	r8, r9, d0
 8006dfa:	e674      	b.n	8006ae6 <_strtod_l+0x76>
 8006dfc:	9b05      	ldr	r3, [sp, #20]
 8006dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e00:	1afb      	subs	r3, r7, r3
 8006e02:	f1bb 0f00 	cmp.w	fp, #0
 8006e06:	bf08      	it	eq
 8006e08:	46b3      	moveq	fp, r6
 8006e0a:	2e10      	cmp	r6, #16
 8006e0c:	9308      	str	r3, [sp, #32]
 8006e0e:	4635      	mov	r5, r6
 8006e10:	bfa8      	it	ge
 8006e12:	2510      	movge	r5, #16
 8006e14:	f7f9 fb7e 	bl	8000514 <__aeabi_ui2d>
 8006e18:	2e09      	cmp	r6, #9
 8006e1a:	4680      	mov	r8, r0
 8006e1c:	4689      	mov	r9, r1
 8006e1e:	dd13      	ble.n	8006e48 <_strtod_l+0x3d8>
 8006e20:	4b76      	ldr	r3, [pc, #472]	; (8006ffc <_strtod_l+0x58c>)
 8006e22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006e26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006e2a:	f7f9 fbed 	bl	8000608 <__aeabi_dmul>
 8006e2e:	4680      	mov	r8, r0
 8006e30:	4650      	mov	r0, sl
 8006e32:	4689      	mov	r9, r1
 8006e34:	f7f9 fb6e 	bl	8000514 <__aeabi_ui2d>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	4649      	mov	r1, r9
 8006e40:	f7f9 fa2c 	bl	800029c <__adddf3>
 8006e44:	4680      	mov	r8, r0
 8006e46:	4689      	mov	r9, r1
 8006e48:	2e0f      	cmp	r6, #15
 8006e4a:	dc38      	bgt.n	8006ebe <_strtod_l+0x44e>
 8006e4c:	9b08      	ldr	r3, [sp, #32]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	f43f ae49 	beq.w	8006ae6 <_strtod_l+0x76>
 8006e54:	dd24      	ble.n	8006ea0 <_strtod_l+0x430>
 8006e56:	2b16      	cmp	r3, #22
 8006e58:	dc0b      	bgt.n	8006e72 <_strtod_l+0x402>
 8006e5a:	4968      	ldr	r1, [pc, #416]	; (8006ffc <_strtod_l+0x58c>)
 8006e5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	f7f9 fbce 	bl	8000608 <__aeabi_dmul>
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	4689      	mov	r9, r1
 8006e70:	e639      	b.n	8006ae6 <_strtod_l+0x76>
 8006e72:	9a08      	ldr	r2, [sp, #32]
 8006e74:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	db20      	blt.n	8006ebe <_strtod_l+0x44e>
 8006e7c:	4c5f      	ldr	r4, [pc, #380]	; (8006ffc <_strtod_l+0x58c>)
 8006e7e:	f1c6 060f 	rsb	r6, r6, #15
 8006e82:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006e86:	4642      	mov	r2, r8
 8006e88:	464b      	mov	r3, r9
 8006e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e8e:	f7f9 fbbb 	bl	8000608 <__aeabi_dmul>
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	1b9e      	subs	r6, r3, r6
 8006e96:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006e9a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e9e:	e7e3      	b.n	8006e68 <_strtod_l+0x3f8>
 8006ea0:	9b08      	ldr	r3, [sp, #32]
 8006ea2:	3316      	adds	r3, #22
 8006ea4:	db0b      	blt.n	8006ebe <_strtod_l+0x44e>
 8006ea6:	9b05      	ldr	r3, [sp, #20]
 8006ea8:	1bdf      	subs	r7, r3, r7
 8006eaa:	4b54      	ldr	r3, [pc, #336]	; (8006ffc <_strtod_l+0x58c>)
 8006eac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	f7f9 fcd0 	bl	800085c <__aeabi_ddiv>
 8006ebc:	e7d6      	b.n	8006e6c <_strtod_l+0x3fc>
 8006ebe:	9b08      	ldr	r3, [sp, #32]
 8006ec0:	1b75      	subs	r5, r6, r5
 8006ec2:	441d      	add	r5, r3
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	dd70      	ble.n	8006faa <_strtod_l+0x53a>
 8006ec8:	f015 030f 	ands.w	r3, r5, #15
 8006ecc:	d00a      	beq.n	8006ee4 <_strtod_l+0x474>
 8006ece:	494b      	ldr	r1, [pc, #300]	; (8006ffc <_strtod_l+0x58c>)
 8006ed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ed4:	4642      	mov	r2, r8
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006edc:	f7f9 fb94 	bl	8000608 <__aeabi_dmul>
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	4689      	mov	r9, r1
 8006ee4:	f035 050f 	bics.w	r5, r5, #15
 8006ee8:	d04d      	beq.n	8006f86 <_strtod_l+0x516>
 8006eea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006eee:	dd22      	ble.n	8006f36 <_strtod_l+0x4c6>
 8006ef0:	2500      	movs	r5, #0
 8006ef2:	46ab      	mov	fp, r5
 8006ef4:	9509      	str	r5, [sp, #36]	; 0x24
 8006ef6:	9505      	str	r5, [sp, #20]
 8006ef8:	2322      	movs	r3, #34	; 0x22
 8006efa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007004 <_strtod_l+0x594>
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	f04f 0800 	mov.w	r8, #0
 8006f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f43f aded 	beq.w	8006ae6 <_strtod_l+0x76>
 8006f0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f002 ffc6 	bl	8009ea0 <_Bfree>
 8006f14:	9905      	ldr	r1, [sp, #20]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f002 ffc2 	bl	8009ea0 <_Bfree>
 8006f1c:	4659      	mov	r1, fp
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f002 ffbe 	bl	8009ea0 <_Bfree>
 8006f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f26:	4620      	mov	r0, r4
 8006f28:	f002 ffba 	bl	8009ea0 <_Bfree>
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f002 ffb6 	bl	8009ea0 <_Bfree>
 8006f34:	e5d7      	b.n	8006ae6 <_strtod_l+0x76>
 8006f36:	4b32      	ldr	r3, [pc, #200]	; (8007000 <_strtod_l+0x590>)
 8006f38:	9304      	str	r3, [sp, #16]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	112d      	asrs	r5, r5, #4
 8006f3e:	4640      	mov	r0, r8
 8006f40:	4649      	mov	r1, r9
 8006f42:	469a      	mov	sl, r3
 8006f44:	2d01      	cmp	r5, #1
 8006f46:	dc21      	bgt.n	8006f8c <_strtod_l+0x51c>
 8006f48:	b10b      	cbz	r3, 8006f4e <_strtod_l+0x4de>
 8006f4a:	4680      	mov	r8, r0
 8006f4c:	4689      	mov	r9, r1
 8006f4e:	492c      	ldr	r1, [pc, #176]	; (8007000 <_strtod_l+0x590>)
 8006f50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006f54:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006f58:	4642      	mov	r2, r8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f60:	f7f9 fb52 	bl	8000608 <__aeabi_dmul>
 8006f64:	4b27      	ldr	r3, [pc, #156]	; (8007004 <_strtod_l+0x594>)
 8006f66:	460a      	mov	r2, r1
 8006f68:	400b      	ands	r3, r1
 8006f6a:	4927      	ldr	r1, [pc, #156]	; (8007008 <_strtod_l+0x598>)
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	4680      	mov	r8, r0
 8006f70:	d8be      	bhi.n	8006ef0 <_strtod_l+0x480>
 8006f72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f76:	428b      	cmp	r3, r1
 8006f78:	bf86      	itte	hi
 8006f7a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800700c <_strtod_l+0x59c>
 8006f7e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006f82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006f86:	2300      	movs	r3, #0
 8006f88:	9304      	str	r3, [sp, #16]
 8006f8a:	e07b      	b.n	8007084 <_strtod_l+0x614>
 8006f8c:	07ea      	lsls	r2, r5, #31
 8006f8e:	d505      	bpl.n	8006f9c <_strtod_l+0x52c>
 8006f90:	9b04      	ldr	r3, [sp, #16]
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 fb37 	bl	8000608 <__aeabi_dmul>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	9a04      	ldr	r2, [sp, #16]
 8006f9e:	3208      	adds	r2, #8
 8006fa0:	f10a 0a01 	add.w	sl, sl, #1
 8006fa4:	106d      	asrs	r5, r5, #1
 8006fa6:	9204      	str	r2, [sp, #16]
 8006fa8:	e7cc      	b.n	8006f44 <_strtod_l+0x4d4>
 8006faa:	d0ec      	beq.n	8006f86 <_strtod_l+0x516>
 8006fac:	426d      	negs	r5, r5
 8006fae:	f015 020f 	ands.w	r2, r5, #15
 8006fb2:	d00a      	beq.n	8006fca <_strtod_l+0x55a>
 8006fb4:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <_strtod_l+0x58c>)
 8006fb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4649      	mov	r1, r9
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 fc4b 	bl	800085c <__aeabi_ddiv>
 8006fc6:	4680      	mov	r8, r0
 8006fc8:	4689      	mov	r9, r1
 8006fca:	112d      	asrs	r5, r5, #4
 8006fcc:	d0db      	beq.n	8006f86 <_strtod_l+0x516>
 8006fce:	2d1f      	cmp	r5, #31
 8006fd0:	dd1e      	ble.n	8007010 <_strtod_l+0x5a0>
 8006fd2:	2500      	movs	r5, #0
 8006fd4:	46ab      	mov	fp, r5
 8006fd6:	9509      	str	r5, [sp, #36]	; 0x24
 8006fd8:	9505      	str	r5, [sp, #20]
 8006fda:	2322      	movs	r3, #34	; 0x22
 8006fdc:	f04f 0800 	mov.w	r8, #0
 8006fe0:	f04f 0900 	mov.w	r9, #0
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	e78d      	b.n	8006f04 <_strtod_l+0x494>
 8006fe8:	0800bad6 	.word	0x0800bad6
 8006fec:	0800b98c 	.word	0x0800b98c
 8006ff0:	0800bace 	.word	0x0800bace
 8006ff4:	0800bb0d 	.word	0x0800bb0d
 8006ff8:	0800bd98 	.word	0x0800bd98
 8006ffc:	0800bc78 	.word	0x0800bc78
 8007000:	0800bc50 	.word	0x0800bc50
 8007004:	7ff00000 	.word	0x7ff00000
 8007008:	7ca00000 	.word	0x7ca00000
 800700c:	7fefffff 	.word	0x7fefffff
 8007010:	f015 0310 	ands.w	r3, r5, #16
 8007014:	bf18      	it	ne
 8007016:	236a      	movne	r3, #106	; 0x6a
 8007018:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80073bc <_strtod_l+0x94c>
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	4640      	mov	r0, r8
 8007020:	4649      	mov	r1, r9
 8007022:	2300      	movs	r3, #0
 8007024:	07ea      	lsls	r2, r5, #31
 8007026:	d504      	bpl.n	8007032 <_strtod_l+0x5c2>
 8007028:	e9da 2300 	ldrd	r2, r3, [sl]
 800702c:	f7f9 faec 	bl	8000608 <__aeabi_dmul>
 8007030:	2301      	movs	r3, #1
 8007032:	106d      	asrs	r5, r5, #1
 8007034:	f10a 0a08 	add.w	sl, sl, #8
 8007038:	d1f4      	bne.n	8007024 <_strtod_l+0x5b4>
 800703a:	b10b      	cbz	r3, 8007040 <_strtod_l+0x5d0>
 800703c:	4680      	mov	r8, r0
 800703e:	4689      	mov	r9, r1
 8007040:	9b04      	ldr	r3, [sp, #16]
 8007042:	b1bb      	cbz	r3, 8007074 <_strtod_l+0x604>
 8007044:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007048:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800704c:	2b00      	cmp	r3, #0
 800704e:	4649      	mov	r1, r9
 8007050:	dd10      	ble.n	8007074 <_strtod_l+0x604>
 8007052:	2b1f      	cmp	r3, #31
 8007054:	f340 811e 	ble.w	8007294 <_strtod_l+0x824>
 8007058:	2b34      	cmp	r3, #52	; 0x34
 800705a:	bfde      	ittt	le
 800705c:	f04f 33ff 	movle.w	r3, #4294967295
 8007060:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007064:	4093      	lslle	r3, r2
 8007066:	f04f 0800 	mov.w	r8, #0
 800706a:	bfcc      	ite	gt
 800706c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007070:	ea03 0901 	andle.w	r9, r3, r1
 8007074:	2200      	movs	r2, #0
 8007076:	2300      	movs	r3, #0
 8007078:	4640      	mov	r0, r8
 800707a:	4649      	mov	r1, r9
 800707c:	f7f9 fd2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007080:	2800      	cmp	r0, #0
 8007082:	d1a6      	bne.n	8006fd2 <_strtod_l+0x562>
 8007084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800708a:	4633      	mov	r3, r6
 800708c:	465a      	mov	r2, fp
 800708e:	4620      	mov	r0, r4
 8007090:	f002 ff6e 	bl	8009f70 <__s2b>
 8007094:	9009      	str	r0, [sp, #36]	; 0x24
 8007096:	2800      	cmp	r0, #0
 8007098:	f43f af2a 	beq.w	8006ef0 <_strtod_l+0x480>
 800709c:	9a08      	ldr	r2, [sp, #32]
 800709e:	9b05      	ldr	r3, [sp, #20]
 80070a0:	2a00      	cmp	r2, #0
 80070a2:	eba3 0307 	sub.w	r3, r3, r7
 80070a6:	bfa8      	it	ge
 80070a8:	2300      	movge	r3, #0
 80070aa:	930c      	str	r3, [sp, #48]	; 0x30
 80070ac:	2500      	movs	r5, #0
 80070ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80070b2:	9312      	str	r3, [sp, #72]	; 0x48
 80070b4:	46ab      	mov	fp, r5
 80070b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b8:	4620      	mov	r0, r4
 80070ba:	6859      	ldr	r1, [r3, #4]
 80070bc:	f002 feb0 	bl	8009e20 <_Balloc>
 80070c0:	9005      	str	r0, [sp, #20]
 80070c2:	2800      	cmp	r0, #0
 80070c4:	f43f af18 	beq.w	8006ef8 <_strtod_l+0x488>
 80070c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	3202      	adds	r2, #2
 80070ce:	f103 010c 	add.w	r1, r3, #12
 80070d2:	0092      	lsls	r2, r2, #2
 80070d4:	300c      	adds	r0, #12
 80070d6:	f001 fb9f 	bl	8008818 <memcpy>
 80070da:	ec49 8b10 	vmov	d0, r8, r9
 80070de:	aa18      	add	r2, sp, #96	; 0x60
 80070e0:	a917      	add	r1, sp, #92	; 0x5c
 80070e2:	4620      	mov	r0, r4
 80070e4:	f003 fa78 	bl	800a5d8 <__d2b>
 80070e8:	ec49 8b18 	vmov	d8, r8, r9
 80070ec:	9016      	str	r0, [sp, #88]	; 0x58
 80070ee:	2800      	cmp	r0, #0
 80070f0:	f43f af02 	beq.w	8006ef8 <_strtod_l+0x488>
 80070f4:	2101      	movs	r1, #1
 80070f6:	4620      	mov	r0, r4
 80070f8:	f002 ffd2 	bl	800a0a0 <__i2b>
 80070fc:	4683      	mov	fp, r0
 80070fe:	2800      	cmp	r0, #0
 8007100:	f43f aefa 	beq.w	8006ef8 <_strtod_l+0x488>
 8007104:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007106:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007108:	2e00      	cmp	r6, #0
 800710a:	bfab      	itete	ge
 800710c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800710e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007110:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007112:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007116:	bfac      	ite	ge
 8007118:	eb06 0a03 	addge.w	sl, r6, r3
 800711c:	1b9f      	sublt	r7, r3, r6
 800711e:	9b04      	ldr	r3, [sp, #16]
 8007120:	1af6      	subs	r6, r6, r3
 8007122:	4416      	add	r6, r2
 8007124:	4ba0      	ldr	r3, [pc, #640]	; (80073a8 <_strtod_l+0x938>)
 8007126:	3e01      	subs	r6, #1
 8007128:	429e      	cmp	r6, r3
 800712a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800712e:	f280 80c4 	bge.w	80072ba <_strtod_l+0x84a>
 8007132:	1b9b      	subs	r3, r3, r6
 8007134:	2b1f      	cmp	r3, #31
 8007136:	eba2 0203 	sub.w	r2, r2, r3
 800713a:	f04f 0101 	mov.w	r1, #1
 800713e:	f300 80b0 	bgt.w	80072a2 <_strtod_l+0x832>
 8007142:	fa01 f303 	lsl.w	r3, r1, r3
 8007146:	930e      	str	r3, [sp, #56]	; 0x38
 8007148:	2300      	movs	r3, #0
 800714a:	930d      	str	r3, [sp, #52]	; 0x34
 800714c:	eb0a 0602 	add.w	r6, sl, r2
 8007150:	9b04      	ldr	r3, [sp, #16]
 8007152:	45b2      	cmp	sl, r6
 8007154:	4417      	add	r7, r2
 8007156:	441f      	add	r7, r3
 8007158:	4653      	mov	r3, sl
 800715a:	bfa8      	it	ge
 800715c:	4633      	movge	r3, r6
 800715e:	42bb      	cmp	r3, r7
 8007160:	bfa8      	it	ge
 8007162:	463b      	movge	r3, r7
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfc2      	ittt	gt
 8007168:	1af6      	subgt	r6, r6, r3
 800716a:	1aff      	subgt	r7, r7, r3
 800716c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007172:	2b00      	cmp	r3, #0
 8007174:	dd17      	ble.n	80071a6 <_strtod_l+0x736>
 8007176:	4659      	mov	r1, fp
 8007178:	461a      	mov	r2, r3
 800717a:	4620      	mov	r0, r4
 800717c:	f003 f850 	bl	800a220 <__pow5mult>
 8007180:	4683      	mov	fp, r0
 8007182:	2800      	cmp	r0, #0
 8007184:	f43f aeb8 	beq.w	8006ef8 <_strtod_l+0x488>
 8007188:	4601      	mov	r1, r0
 800718a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800718c:	4620      	mov	r0, r4
 800718e:	f002 ff9d 	bl	800a0cc <__multiply>
 8007192:	900b      	str	r0, [sp, #44]	; 0x2c
 8007194:	2800      	cmp	r0, #0
 8007196:	f43f aeaf 	beq.w	8006ef8 <_strtod_l+0x488>
 800719a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800719c:	4620      	mov	r0, r4
 800719e:	f002 fe7f 	bl	8009ea0 <_Bfree>
 80071a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a4:	9316      	str	r3, [sp, #88]	; 0x58
 80071a6:	2e00      	cmp	r6, #0
 80071a8:	f300 808c 	bgt.w	80072c4 <_strtod_l+0x854>
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	dd08      	ble.n	80071c4 <_strtod_l+0x754>
 80071b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071b4:	9905      	ldr	r1, [sp, #20]
 80071b6:	4620      	mov	r0, r4
 80071b8:	f003 f832 	bl	800a220 <__pow5mult>
 80071bc:	9005      	str	r0, [sp, #20]
 80071be:	2800      	cmp	r0, #0
 80071c0:	f43f ae9a 	beq.w	8006ef8 <_strtod_l+0x488>
 80071c4:	2f00      	cmp	r7, #0
 80071c6:	dd08      	ble.n	80071da <_strtod_l+0x76a>
 80071c8:	9905      	ldr	r1, [sp, #20]
 80071ca:	463a      	mov	r2, r7
 80071cc:	4620      	mov	r0, r4
 80071ce:	f003 f881 	bl	800a2d4 <__lshift>
 80071d2:	9005      	str	r0, [sp, #20]
 80071d4:	2800      	cmp	r0, #0
 80071d6:	f43f ae8f 	beq.w	8006ef8 <_strtod_l+0x488>
 80071da:	f1ba 0f00 	cmp.w	sl, #0
 80071de:	dd08      	ble.n	80071f2 <_strtod_l+0x782>
 80071e0:	4659      	mov	r1, fp
 80071e2:	4652      	mov	r2, sl
 80071e4:	4620      	mov	r0, r4
 80071e6:	f003 f875 	bl	800a2d4 <__lshift>
 80071ea:	4683      	mov	fp, r0
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f43f ae83 	beq.w	8006ef8 <_strtod_l+0x488>
 80071f2:	9a05      	ldr	r2, [sp, #20]
 80071f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80071f6:	4620      	mov	r0, r4
 80071f8:	f003 f8f4 	bl	800a3e4 <__mdiff>
 80071fc:	4605      	mov	r5, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f ae7a 	beq.w	8006ef8 <_strtod_l+0x488>
 8007204:	68c3      	ldr	r3, [r0, #12]
 8007206:	930b      	str	r3, [sp, #44]	; 0x2c
 8007208:	2300      	movs	r3, #0
 800720a:	60c3      	str	r3, [r0, #12]
 800720c:	4659      	mov	r1, fp
 800720e:	f003 f8cd 	bl	800a3ac <__mcmp>
 8007212:	2800      	cmp	r0, #0
 8007214:	da60      	bge.n	80072d8 <_strtod_l+0x868>
 8007216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007218:	ea53 0308 	orrs.w	r3, r3, r8
 800721c:	f040 8084 	bne.w	8007328 <_strtod_l+0x8b8>
 8007220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007224:	2b00      	cmp	r3, #0
 8007226:	d17f      	bne.n	8007328 <_strtod_l+0x8b8>
 8007228:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800722c:	0d1b      	lsrs	r3, r3, #20
 800722e:	051b      	lsls	r3, r3, #20
 8007230:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007234:	d978      	bls.n	8007328 <_strtod_l+0x8b8>
 8007236:	696b      	ldr	r3, [r5, #20]
 8007238:	b913      	cbnz	r3, 8007240 <_strtod_l+0x7d0>
 800723a:	692b      	ldr	r3, [r5, #16]
 800723c:	2b01      	cmp	r3, #1
 800723e:	dd73      	ble.n	8007328 <_strtod_l+0x8b8>
 8007240:	4629      	mov	r1, r5
 8007242:	2201      	movs	r2, #1
 8007244:	4620      	mov	r0, r4
 8007246:	f003 f845 	bl	800a2d4 <__lshift>
 800724a:	4659      	mov	r1, fp
 800724c:	4605      	mov	r5, r0
 800724e:	f003 f8ad 	bl	800a3ac <__mcmp>
 8007252:	2800      	cmp	r0, #0
 8007254:	dd68      	ble.n	8007328 <_strtod_l+0x8b8>
 8007256:	9904      	ldr	r1, [sp, #16]
 8007258:	4a54      	ldr	r2, [pc, #336]	; (80073ac <_strtod_l+0x93c>)
 800725a:	464b      	mov	r3, r9
 800725c:	2900      	cmp	r1, #0
 800725e:	f000 8084 	beq.w	800736a <_strtod_l+0x8fa>
 8007262:	ea02 0109 	and.w	r1, r2, r9
 8007266:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800726a:	dc7e      	bgt.n	800736a <_strtod_l+0x8fa>
 800726c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007270:	f77f aeb3 	ble.w	8006fda <_strtod_l+0x56a>
 8007274:	4b4e      	ldr	r3, [pc, #312]	; (80073b0 <_strtod_l+0x940>)
 8007276:	4640      	mov	r0, r8
 8007278:	4649      	mov	r1, r9
 800727a:	2200      	movs	r2, #0
 800727c:	f7f9 f9c4 	bl	8000608 <__aeabi_dmul>
 8007280:	4b4a      	ldr	r3, [pc, #296]	; (80073ac <_strtod_l+0x93c>)
 8007282:	400b      	ands	r3, r1
 8007284:	4680      	mov	r8, r0
 8007286:	4689      	mov	r9, r1
 8007288:	2b00      	cmp	r3, #0
 800728a:	f47f ae3f 	bne.w	8006f0c <_strtod_l+0x49c>
 800728e:	2322      	movs	r3, #34	; 0x22
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	e63b      	b.n	8006f0c <_strtod_l+0x49c>
 8007294:	f04f 32ff 	mov.w	r2, #4294967295
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	ea03 0808 	and.w	r8, r3, r8
 80072a0:	e6e8      	b.n	8007074 <_strtod_l+0x604>
 80072a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80072a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80072aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80072ae:	36e2      	adds	r6, #226	; 0xe2
 80072b0:	fa01 f306 	lsl.w	r3, r1, r6
 80072b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80072b8:	e748      	b.n	800714c <_strtod_l+0x6dc>
 80072ba:	2100      	movs	r1, #0
 80072bc:	2301      	movs	r3, #1
 80072be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80072c2:	e743      	b.n	800714c <_strtod_l+0x6dc>
 80072c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80072c6:	4632      	mov	r2, r6
 80072c8:	4620      	mov	r0, r4
 80072ca:	f003 f803 	bl	800a2d4 <__lshift>
 80072ce:	9016      	str	r0, [sp, #88]	; 0x58
 80072d0:	2800      	cmp	r0, #0
 80072d2:	f47f af6b 	bne.w	80071ac <_strtod_l+0x73c>
 80072d6:	e60f      	b.n	8006ef8 <_strtod_l+0x488>
 80072d8:	46ca      	mov	sl, r9
 80072da:	d171      	bne.n	80073c0 <_strtod_l+0x950>
 80072dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072e2:	b352      	cbz	r2, 800733a <_strtod_l+0x8ca>
 80072e4:	4a33      	ldr	r2, [pc, #204]	; (80073b4 <_strtod_l+0x944>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d12a      	bne.n	8007340 <_strtod_l+0x8d0>
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	4641      	mov	r1, r8
 80072ee:	b1fb      	cbz	r3, 8007330 <_strtod_l+0x8c0>
 80072f0:	4b2e      	ldr	r3, [pc, #184]	; (80073ac <_strtod_l+0x93c>)
 80072f2:	ea09 0303 	and.w	r3, r9, r3
 80072f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072fa:	f04f 32ff 	mov.w	r2, #4294967295
 80072fe:	d81a      	bhi.n	8007336 <_strtod_l+0x8c6>
 8007300:	0d1b      	lsrs	r3, r3, #20
 8007302:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	4299      	cmp	r1, r3
 800730c:	d118      	bne.n	8007340 <_strtod_l+0x8d0>
 800730e:	4b2a      	ldr	r3, [pc, #168]	; (80073b8 <_strtod_l+0x948>)
 8007310:	459a      	cmp	sl, r3
 8007312:	d102      	bne.n	800731a <_strtod_l+0x8aa>
 8007314:	3101      	adds	r1, #1
 8007316:	f43f adef 	beq.w	8006ef8 <_strtod_l+0x488>
 800731a:	4b24      	ldr	r3, [pc, #144]	; (80073ac <_strtod_l+0x93c>)
 800731c:	ea0a 0303 	and.w	r3, sl, r3
 8007320:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007324:	f04f 0800 	mov.w	r8, #0
 8007328:	9b04      	ldr	r3, [sp, #16]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1a2      	bne.n	8007274 <_strtod_l+0x804>
 800732e:	e5ed      	b.n	8006f0c <_strtod_l+0x49c>
 8007330:	f04f 33ff 	mov.w	r3, #4294967295
 8007334:	e7e9      	b.n	800730a <_strtod_l+0x89a>
 8007336:	4613      	mov	r3, r2
 8007338:	e7e7      	b.n	800730a <_strtod_l+0x89a>
 800733a:	ea53 0308 	orrs.w	r3, r3, r8
 800733e:	d08a      	beq.n	8007256 <_strtod_l+0x7e6>
 8007340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007342:	b1e3      	cbz	r3, 800737e <_strtod_l+0x90e>
 8007344:	ea13 0f0a 	tst.w	r3, sl
 8007348:	d0ee      	beq.n	8007328 <_strtod_l+0x8b8>
 800734a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800734c:	9a04      	ldr	r2, [sp, #16]
 800734e:	4640      	mov	r0, r8
 8007350:	4649      	mov	r1, r9
 8007352:	b1c3      	cbz	r3, 8007386 <_strtod_l+0x916>
 8007354:	f7ff fb6d 	bl	8006a32 <sulp>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	ec51 0b18 	vmov	r0, r1, d8
 8007360:	f7f8 ff9c 	bl	800029c <__adddf3>
 8007364:	4680      	mov	r8, r0
 8007366:	4689      	mov	r9, r1
 8007368:	e7de      	b.n	8007328 <_strtod_l+0x8b8>
 800736a:	4013      	ands	r3, r2
 800736c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007370:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007374:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007378:	f04f 38ff 	mov.w	r8, #4294967295
 800737c:	e7d4      	b.n	8007328 <_strtod_l+0x8b8>
 800737e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007380:	ea13 0f08 	tst.w	r3, r8
 8007384:	e7e0      	b.n	8007348 <_strtod_l+0x8d8>
 8007386:	f7ff fb54 	bl	8006a32 <sulp>
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	ec51 0b18 	vmov	r0, r1, d8
 8007392:	f7f8 ff81 	bl	8000298 <__aeabi_dsub>
 8007396:	2200      	movs	r2, #0
 8007398:	2300      	movs	r3, #0
 800739a:	4680      	mov	r8, r0
 800739c:	4689      	mov	r9, r1
 800739e:	f7f9 fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d0c0      	beq.n	8007328 <_strtod_l+0x8b8>
 80073a6:	e618      	b.n	8006fda <_strtod_l+0x56a>
 80073a8:	fffffc02 	.word	0xfffffc02
 80073ac:	7ff00000 	.word	0x7ff00000
 80073b0:	39500000 	.word	0x39500000
 80073b4:	000fffff 	.word	0x000fffff
 80073b8:	7fefffff 	.word	0x7fefffff
 80073bc:	0800b9a0 	.word	0x0800b9a0
 80073c0:	4659      	mov	r1, fp
 80073c2:	4628      	mov	r0, r5
 80073c4:	f003 f962 	bl	800a68c <__ratio>
 80073c8:	ec57 6b10 	vmov	r6, r7, d0
 80073cc:	ee10 0a10 	vmov	r0, s0
 80073d0:	2200      	movs	r2, #0
 80073d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073d6:	4639      	mov	r1, r7
 80073d8:	f7f9 fb92 	bl	8000b00 <__aeabi_dcmple>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d071      	beq.n	80074c4 <_strtod_l+0xa54>
 80073e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d17c      	bne.n	80074e0 <_strtod_l+0xa70>
 80073e6:	f1b8 0f00 	cmp.w	r8, #0
 80073ea:	d15a      	bne.n	80074a2 <_strtod_l+0xa32>
 80073ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d15d      	bne.n	80074b0 <_strtod_l+0xa40>
 80073f4:	4b90      	ldr	r3, [pc, #576]	; (8007638 <_strtod_l+0xbc8>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	4630      	mov	r0, r6
 80073fa:	4639      	mov	r1, r7
 80073fc:	f7f9 fb76 	bl	8000aec <__aeabi_dcmplt>
 8007400:	2800      	cmp	r0, #0
 8007402:	d15c      	bne.n	80074be <_strtod_l+0xa4e>
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	4b8c      	ldr	r3, [pc, #560]	; (800763c <_strtod_l+0xbcc>)
 800740a:	2200      	movs	r2, #0
 800740c:	f7f9 f8fc 	bl	8000608 <__aeabi_dmul>
 8007410:	4606      	mov	r6, r0
 8007412:	460f      	mov	r7, r1
 8007414:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007418:	9606      	str	r6, [sp, #24]
 800741a:	9307      	str	r3, [sp, #28]
 800741c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007420:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007424:	4b86      	ldr	r3, [pc, #536]	; (8007640 <_strtod_l+0xbd0>)
 8007426:	ea0a 0303 	and.w	r3, sl, r3
 800742a:	930d      	str	r3, [sp, #52]	; 0x34
 800742c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800742e:	4b85      	ldr	r3, [pc, #532]	; (8007644 <_strtod_l+0xbd4>)
 8007430:	429a      	cmp	r2, r3
 8007432:	f040 8090 	bne.w	8007556 <_strtod_l+0xae6>
 8007436:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800743a:	ec49 8b10 	vmov	d0, r8, r9
 800743e:	f003 f85b 	bl	800a4f8 <__ulp>
 8007442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007446:	ec51 0b10 	vmov	r0, r1, d0
 800744a:	f7f9 f8dd 	bl	8000608 <__aeabi_dmul>
 800744e:	4642      	mov	r2, r8
 8007450:	464b      	mov	r3, r9
 8007452:	f7f8 ff23 	bl	800029c <__adddf3>
 8007456:	460b      	mov	r3, r1
 8007458:	4979      	ldr	r1, [pc, #484]	; (8007640 <_strtod_l+0xbd0>)
 800745a:	4a7b      	ldr	r2, [pc, #492]	; (8007648 <_strtod_l+0xbd8>)
 800745c:	4019      	ands	r1, r3
 800745e:	4291      	cmp	r1, r2
 8007460:	4680      	mov	r8, r0
 8007462:	d944      	bls.n	80074ee <_strtod_l+0xa7e>
 8007464:	ee18 2a90 	vmov	r2, s17
 8007468:	4b78      	ldr	r3, [pc, #480]	; (800764c <_strtod_l+0xbdc>)
 800746a:	429a      	cmp	r2, r3
 800746c:	d104      	bne.n	8007478 <_strtod_l+0xa08>
 800746e:	ee18 3a10 	vmov	r3, s16
 8007472:	3301      	adds	r3, #1
 8007474:	f43f ad40 	beq.w	8006ef8 <_strtod_l+0x488>
 8007478:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800764c <_strtod_l+0xbdc>
 800747c:	f04f 38ff 	mov.w	r8, #4294967295
 8007480:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007482:	4620      	mov	r0, r4
 8007484:	f002 fd0c 	bl	8009ea0 <_Bfree>
 8007488:	9905      	ldr	r1, [sp, #20]
 800748a:	4620      	mov	r0, r4
 800748c:	f002 fd08 	bl	8009ea0 <_Bfree>
 8007490:	4659      	mov	r1, fp
 8007492:	4620      	mov	r0, r4
 8007494:	f002 fd04 	bl	8009ea0 <_Bfree>
 8007498:	4629      	mov	r1, r5
 800749a:	4620      	mov	r0, r4
 800749c:	f002 fd00 	bl	8009ea0 <_Bfree>
 80074a0:	e609      	b.n	80070b6 <_strtod_l+0x646>
 80074a2:	f1b8 0f01 	cmp.w	r8, #1
 80074a6:	d103      	bne.n	80074b0 <_strtod_l+0xa40>
 80074a8:	f1b9 0f00 	cmp.w	r9, #0
 80074ac:	f43f ad95 	beq.w	8006fda <_strtod_l+0x56a>
 80074b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007608 <_strtod_l+0xb98>
 80074b4:	4f60      	ldr	r7, [pc, #384]	; (8007638 <_strtod_l+0xbc8>)
 80074b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80074ba:	2600      	movs	r6, #0
 80074bc:	e7ae      	b.n	800741c <_strtod_l+0x9ac>
 80074be:	4f5f      	ldr	r7, [pc, #380]	; (800763c <_strtod_l+0xbcc>)
 80074c0:	2600      	movs	r6, #0
 80074c2:	e7a7      	b.n	8007414 <_strtod_l+0x9a4>
 80074c4:	4b5d      	ldr	r3, [pc, #372]	; (800763c <_strtod_l+0xbcc>)
 80074c6:	4630      	mov	r0, r6
 80074c8:	4639      	mov	r1, r7
 80074ca:	2200      	movs	r2, #0
 80074cc:	f7f9 f89c 	bl	8000608 <__aeabi_dmul>
 80074d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d2:	4606      	mov	r6, r0
 80074d4:	460f      	mov	r7, r1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d09c      	beq.n	8007414 <_strtod_l+0x9a4>
 80074da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80074de:	e79d      	b.n	800741c <_strtod_l+0x9ac>
 80074e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007610 <_strtod_l+0xba0>
 80074e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80074e8:	ec57 6b17 	vmov	r6, r7, d7
 80074ec:	e796      	b.n	800741c <_strtod_l+0x9ac>
 80074ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80074f2:	9b04      	ldr	r3, [sp, #16]
 80074f4:	46ca      	mov	sl, r9
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1c2      	bne.n	8007480 <_strtod_l+0xa10>
 80074fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007500:	0d1b      	lsrs	r3, r3, #20
 8007502:	051b      	lsls	r3, r3, #20
 8007504:	429a      	cmp	r2, r3
 8007506:	d1bb      	bne.n	8007480 <_strtod_l+0xa10>
 8007508:	4630      	mov	r0, r6
 800750a:	4639      	mov	r1, r7
 800750c:	f7f9 fbdc 	bl	8000cc8 <__aeabi_d2lz>
 8007510:	f7f9 f84c 	bl	80005ac <__aeabi_l2d>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4630      	mov	r0, r6
 800751a:	4639      	mov	r1, r7
 800751c:	f7f8 febc 	bl	8000298 <__aeabi_dsub>
 8007520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007522:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007526:	ea43 0308 	orr.w	r3, r3, r8
 800752a:	4313      	orrs	r3, r2
 800752c:	4606      	mov	r6, r0
 800752e:	460f      	mov	r7, r1
 8007530:	d054      	beq.n	80075dc <_strtod_l+0xb6c>
 8007532:	a339      	add	r3, pc, #228	; (adr r3, 8007618 <_strtod_l+0xba8>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	f7f9 fad8 	bl	8000aec <__aeabi_dcmplt>
 800753c:	2800      	cmp	r0, #0
 800753e:	f47f ace5 	bne.w	8006f0c <_strtod_l+0x49c>
 8007542:	a337      	add	r3, pc, #220	; (adr r3, 8007620 <_strtod_l+0xbb0>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	4630      	mov	r0, r6
 800754a:	4639      	mov	r1, r7
 800754c:	f7f9 faec 	bl	8000b28 <__aeabi_dcmpgt>
 8007550:	2800      	cmp	r0, #0
 8007552:	d095      	beq.n	8007480 <_strtod_l+0xa10>
 8007554:	e4da      	b.n	8006f0c <_strtod_l+0x49c>
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	b333      	cbz	r3, 80075a8 <_strtod_l+0xb38>
 800755a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800755c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007560:	d822      	bhi.n	80075a8 <_strtod_l+0xb38>
 8007562:	a331      	add	r3, pc, #196	; (adr r3, 8007628 <_strtod_l+0xbb8>)
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	4630      	mov	r0, r6
 800756a:	4639      	mov	r1, r7
 800756c:	f7f9 fac8 	bl	8000b00 <__aeabi_dcmple>
 8007570:	b1a0      	cbz	r0, 800759c <_strtod_l+0xb2c>
 8007572:	4639      	mov	r1, r7
 8007574:	4630      	mov	r0, r6
 8007576:	f7f9 fb1f 	bl	8000bb8 <__aeabi_d2uiz>
 800757a:	2801      	cmp	r0, #1
 800757c:	bf38      	it	cc
 800757e:	2001      	movcc	r0, #1
 8007580:	f7f8 ffc8 	bl	8000514 <__aeabi_ui2d>
 8007584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007586:	4606      	mov	r6, r0
 8007588:	460f      	mov	r7, r1
 800758a:	bb23      	cbnz	r3, 80075d6 <_strtod_l+0xb66>
 800758c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007590:	9010      	str	r0, [sp, #64]	; 0x40
 8007592:	9311      	str	r3, [sp, #68]	; 0x44
 8007594:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007598:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800759c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800759e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80075a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80075ac:	eeb0 0a48 	vmov.f32	s0, s16
 80075b0:	eef0 0a68 	vmov.f32	s1, s17
 80075b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80075b8:	f002 ff9e 	bl	800a4f8 <__ulp>
 80075bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80075c0:	ec53 2b10 	vmov	r2, r3, d0
 80075c4:	f7f9 f820 	bl	8000608 <__aeabi_dmul>
 80075c8:	ec53 2b18 	vmov	r2, r3, d8
 80075cc:	f7f8 fe66 	bl	800029c <__adddf3>
 80075d0:	4680      	mov	r8, r0
 80075d2:	4689      	mov	r9, r1
 80075d4:	e78d      	b.n	80074f2 <_strtod_l+0xa82>
 80075d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80075da:	e7db      	b.n	8007594 <_strtod_l+0xb24>
 80075dc:	a314      	add	r3, pc, #80	; (adr r3, 8007630 <_strtod_l+0xbc0>)
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7f9 fa83 	bl	8000aec <__aeabi_dcmplt>
 80075e6:	e7b3      	b.n	8007550 <_strtod_l+0xae0>
 80075e8:	2300      	movs	r3, #0
 80075ea:	930a      	str	r3, [sp, #40]	; 0x28
 80075ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	f7ff ba7c 	b.w	8006aee <_strtod_l+0x7e>
 80075f6:	2a65      	cmp	r2, #101	; 0x65
 80075f8:	f43f ab75 	beq.w	8006ce6 <_strtod_l+0x276>
 80075fc:	2a45      	cmp	r2, #69	; 0x45
 80075fe:	f43f ab72 	beq.w	8006ce6 <_strtod_l+0x276>
 8007602:	2301      	movs	r3, #1
 8007604:	f7ff bbaa 	b.w	8006d5c <_strtod_l+0x2ec>
 8007608:	00000000 	.word	0x00000000
 800760c:	bff00000 	.word	0xbff00000
 8007610:	00000000 	.word	0x00000000
 8007614:	3ff00000 	.word	0x3ff00000
 8007618:	94a03595 	.word	0x94a03595
 800761c:	3fdfffff 	.word	0x3fdfffff
 8007620:	35afe535 	.word	0x35afe535
 8007624:	3fe00000 	.word	0x3fe00000
 8007628:	ffc00000 	.word	0xffc00000
 800762c:	41dfffff 	.word	0x41dfffff
 8007630:	94a03595 	.word	0x94a03595
 8007634:	3fcfffff 	.word	0x3fcfffff
 8007638:	3ff00000 	.word	0x3ff00000
 800763c:	3fe00000 	.word	0x3fe00000
 8007640:	7ff00000 	.word	0x7ff00000
 8007644:	7fe00000 	.word	0x7fe00000
 8007648:	7c9fffff 	.word	0x7c9fffff
 800764c:	7fefffff 	.word	0x7fefffff

08007650 <_strtod_r>:
 8007650:	4b01      	ldr	r3, [pc, #4]	; (8007658 <_strtod_r+0x8>)
 8007652:	f7ff ba0d 	b.w	8006a70 <_strtod_l>
 8007656:	bf00      	nop
 8007658:	200000c0 	.word	0x200000c0

0800765c <strtod>:
 800765c:	460a      	mov	r2, r1
 800765e:	4601      	mov	r1, r0
 8007660:	4802      	ldr	r0, [pc, #8]	; (800766c <strtod+0x10>)
 8007662:	4b03      	ldr	r3, [pc, #12]	; (8007670 <strtod+0x14>)
 8007664:	6800      	ldr	r0, [r0, #0]
 8007666:	f7ff ba03 	b.w	8006a70 <_strtod_l>
 800766a:	bf00      	nop
 800766c:	20000278 	.word	0x20000278
 8007670:	200000c0 	.word	0x200000c0

08007674 <_strtol_l.constprop.0>:
 8007674:	2b01      	cmp	r3, #1
 8007676:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800767a:	d001      	beq.n	8007680 <_strtol_l.constprop.0+0xc>
 800767c:	2b24      	cmp	r3, #36	; 0x24
 800767e:	d906      	bls.n	800768e <_strtol_l.constprop.0+0x1a>
 8007680:	f001 f89e 	bl	80087c0 <__errno>
 8007684:	2316      	movs	r3, #22
 8007686:	6003      	str	r3, [r0, #0]
 8007688:	2000      	movs	r0, #0
 800768a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007774 <_strtol_l.constprop.0+0x100>
 8007692:	460d      	mov	r5, r1
 8007694:	462e      	mov	r6, r5
 8007696:	f815 4b01 	ldrb.w	r4, [r5], #1
 800769a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800769e:	f017 0708 	ands.w	r7, r7, #8
 80076a2:	d1f7      	bne.n	8007694 <_strtol_l.constprop.0+0x20>
 80076a4:	2c2d      	cmp	r4, #45	; 0x2d
 80076a6:	d132      	bne.n	800770e <_strtol_l.constprop.0+0x9a>
 80076a8:	782c      	ldrb	r4, [r5, #0]
 80076aa:	2701      	movs	r7, #1
 80076ac:	1cb5      	adds	r5, r6, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d05b      	beq.n	800776a <_strtol_l.constprop.0+0xf6>
 80076b2:	2b10      	cmp	r3, #16
 80076b4:	d109      	bne.n	80076ca <_strtol_l.constprop.0+0x56>
 80076b6:	2c30      	cmp	r4, #48	; 0x30
 80076b8:	d107      	bne.n	80076ca <_strtol_l.constprop.0+0x56>
 80076ba:	782c      	ldrb	r4, [r5, #0]
 80076bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80076c0:	2c58      	cmp	r4, #88	; 0x58
 80076c2:	d14d      	bne.n	8007760 <_strtol_l.constprop.0+0xec>
 80076c4:	786c      	ldrb	r4, [r5, #1]
 80076c6:	2310      	movs	r3, #16
 80076c8:	3502      	adds	r5, #2
 80076ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80076ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80076d2:	f04f 0e00 	mov.w	lr, #0
 80076d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80076da:	4676      	mov	r6, lr
 80076dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80076e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80076e4:	f1bc 0f09 	cmp.w	ip, #9
 80076e8:	d816      	bhi.n	8007718 <_strtol_l.constprop.0+0xa4>
 80076ea:	4664      	mov	r4, ip
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	dd24      	ble.n	800773a <_strtol_l.constprop.0+0xc6>
 80076f0:	f1be 3fff 	cmp.w	lr, #4294967295
 80076f4:	d008      	beq.n	8007708 <_strtol_l.constprop.0+0x94>
 80076f6:	45b1      	cmp	r9, r6
 80076f8:	d31c      	bcc.n	8007734 <_strtol_l.constprop.0+0xc0>
 80076fa:	d101      	bne.n	8007700 <_strtol_l.constprop.0+0x8c>
 80076fc:	45a2      	cmp	sl, r4
 80076fe:	db19      	blt.n	8007734 <_strtol_l.constprop.0+0xc0>
 8007700:	fb06 4603 	mla	r6, r6, r3, r4
 8007704:	f04f 0e01 	mov.w	lr, #1
 8007708:	f815 4b01 	ldrb.w	r4, [r5], #1
 800770c:	e7e8      	b.n	80076e0 <_strtol_l.constprop.0+0x6c>
 800770e:	2c2b      	cmp	r4, #43	; 0x2b
 8007710:	bf04      	itt	eq
 8007712:	782c      	ldrbeq	r4, [r5, #0]
 8007714:	1cb5      	addeq	r5, r6, #2
 8007716:	e7ca      	b.n	80076ae <_strtol_l.constprop.0+0x3a>
 8007718:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800771c:	f1bc 0f19 	cmp.w	ip, #25
 8007720:	d801      	bhi.n	8007726 <_strtol_l.constprop.0+0xb2>
 8007722:	3c37      	subs	r4, #55	; 0x37
 8007724:	e7e2      	b.n	80076ec <_strtol_l.constprop.0+0x78>
 8007726:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800772a:	f1bc 0f19 	cmp.w	ip, #25
 800772e:	d804      	bhi.n	800773a <_strtol_l.constprop.0+0xc6>
 8007730:	3c57      	subs	r4, #87	; 0x57
 8007732:	e7db      	b.n	80076ec <_strtol_l.constprop.0+0x78>
 8007734:	f04f 3eff 	mov.w	lr, #4294967295
 8007738:	e7e6      	b.n	8007708 <_strtol_l.constprop.0+0x94>
 800773a:	f1be 3fff 	cmp.w	lr, #4294967295
 800773e:	d105      	bne.n	800774c <_strtol_l.constprop.0+0xd8>
 8007740:	2322      	movs	r3, #34	; 0x22
 8007742:	6003      	str	r3, [r0, #0]
 8007744:	4646      	mov	r6, r8
 8007746:	b942      	cbnz	r2, 800775a <_strtol_l.constprop.0+0xe6>
 8007748:	4630      	mov	r0, r6
 800774a:	e79e      	b.n	800768a <_strtol_l.constprop.0+0x16>
 800774c:	b107      	cbz	r7, 8007750 <_strtol_l.constprop.0+0xdc>
 800774e:	4276      	negs	r6, r6
 8007750:	2a00      	cmp	r2, #0
 8007752:	d0f9      	beq.n	8007748 <_strtol_l.constprop.0+0xd4>
 8007754:	f1be 0f00 	cmp.w	lr, #0
 8007758:	d000      	beq.n	800775c <_strtol_l.constprop.0+0xe8>
 800775a:	1e69      	subs	r1, r5, #1
 800775c:	6011      	str	r1, [r2, #0]
 800775e:	e7f3      	b.n	8007748 <_strtol_l.constprop.0+0xd4>
 8007760:	2430      	movs	r4, #48	; 0x30
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1b1      	bne.n	80076ca <_strtol_l.constprop.0+0x56>
 8007766:	2308      	movs	r3, #8
 8007768:	e7af      	b.n	80076ca <_strtol_l.constprop.0+0x56>
 800776a:	2c30      	cmp	r4, #48	; 0x30
 800776c:	d0a5      	beq.n	80076ba <_strtol_l.constprop.0+0x46>
 800776e:	230a      	movs	r3, #10
 8007770:	e7ab      	b.n	80076ca <_strtol_l.constprop.0+0x56>
 8007772:	bf00      	nop
 8007774:	0800b9c9 	.word	0x0800b9c9

08007778 <_strtol_r>:
 8007778:	f7ff bf7c 	b.w	8007674 <_strtol_l.constprop.0>

0800777c <strtol>:
 800777c:	4613      	mov	r3, r2
 800777e:	460a      	mov	r2, r1
 8007780:	4601      	mov	r1, r0
 8007782:	4802      	ldr	r0, [pc, #8]	; (800778c <strtol+0x10>)
 8007784:	6800      	ldr	r0, [r0, #0]
 8007786:	f7ff bf75 	b.w	8007674 <_strtol_l.constprop.0>
 800778a:	bf00      	nop
 800778c:	20000278 	.word	0x20000278

08007790 <__cvt>:
 8007790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	ec55 4b10 	vmov	r4, r5, d0
 8007798:	2d00      	cmp	r5, #0
 800779a:	460e      	mov	r6, r1
 800779c:	4619      	mov	r1, r3
 800779e:	462b      	mov	r3, r5
 80077a0:	bfbb      	ittet	lt
 80077a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077a6:	461d      	movlt	r5, r3
 80077a8:	2300      	movge	r3, #0
 80077aa:	232d      	movlt	r3, #45	; 0x2d
 80077ac:	700b      	strb	r3, [r1, #0]
 80077ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077b4:	4691      	mov	r9, r2
 80077b6:	f023 0820 	bic.w	r8, r3, #32
 80077ba:	bfbc      	itt	lt
 80077bc:	4622      	movlt	r2, r4
 80077be:	4614      	movlt	r4, r2
 80077c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077c4:	d005      	beq.n	80077d2 <__cvt+0x42>
 80077c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077ca:	d100      	bne.n	80077ce <__cvt+0x3e>
 80077cc:	3601      	adds	r6, #1
 80077ce:	2102      	movs	r1, #2
 80077d0:	e000      	b.n	80077d4 <__cvt+0x44>
 80077d2:	2103      	movs	r1, #3
 80077d4:	ab03      	add	r3, sp, #12
 80077d6:	9301      	str	r3, [sp, #4]
 80077d8:	ab02      	add	r3, sp, #8
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	ec45 4b10 	vmov	d0, r4, r5
 80077e0:	4653      	mov	r3, sl
 80077e2:	4632      	mov	r2, r6
 80077e4:	f001 f8c0 	bl	8008968 <_dtoa_r>
 80077e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80077ec:	4607      	mov	r7, r0
 80077ee:	d102      	bne.n	80077f6 <__cvt+0x66>
 80077f0:	f019 0f01 	tst.w	r9, #1
 80077f4:	d022      	beq.n	800783c <__cvt+0xac>
 80077f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077fa:	eb07 0906 	add.w	r9, r7, r6
 80077fe:	d110      	bne.n	8007822 <__cvt+0x92>
 8007800:	783b      	ldrb	r3, [r7, #0]
 8007802:	2b30      	cmp	r3, #48	; 0x30
 8007804:	d10a      	bne.n	800781c <__cvt+0x8c>
 8007806:	2200      	movs	r2, #0
 8007808:	2300      	movs	r3, #0
 800780a:	4620      	mov	r0, r4
 800780c:	4629      	mov	r1, r5
 800780e:	f7f9 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 8007812:	b918      	cbnz	r0, 800781c <__cvt+0x8c>
 8007814:	f1c6 0601 	rsb	r6, r6, #1
 8007818:	f8ca 6000 	str.w	r6, [sl]
 800781c:	f8da 3000 	ldr.w	r3, [sl]
 8007820:	4499      	add	r9, r3
 8007822:	2200      	movs	r2, #0
 8007824:	2300      	movs	r3, #0
 8007826:	4620      	mov	r0, r4
 8007828:	4629      	mov	r1, r5
 800782a:	f7f9 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800782e:	b108      	cbz	r0, 8007834 <__cvt+0xa4>
 8007830:	f8cd 900c 	str.w	r9, [sp, #12]
 8007834:	2230      	movs	r2, #48	; 0x30
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	454b      	cmp	r3, r9
 800783a:	d307      	bcc.n	800784c <__cvt+0xbc>
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007840:	1bdb      	subs	r3, r3, r7
 8007842:	4638      	mov	r0, r7
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	b004      	add	sp, #16
 8007848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784c:	1c59      	adds	r1, r3, #1
 800784e:	9103      	str	r1, [sp, #12]
 8007850:	701a      	strb	r2, [r3, #0]
 8007852:	e7f0      	b.n	8007836 <__cvt+0xa6>

08007854 <__exponent>:
 8007854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007856:	4603      	mov	r3, r0
 8007858:	2900      	cmp	r1, #0
 800785a:	bfb8      	it	lt
 800785c:	4249      	neglt	r1, r1
 800785e:	f803 2b02 	strb.w	r2, [r3], #2
 8007862:	bfb4      	ite	lt
 8007864:	222d      	movlt	r2, #45	; 0x2d
 8007866:	222b      	movge	r2, #43	; 0x2b
 8007868:	2909      	cmp	r1, #9
 800786a:	7042      	strb	r2, [r0, #1]
 800786c:	dd2a      	ble.n	80078c4 <__exponent+0x70>
 800786e:	f10d 0207 	add.w	r2, sp, #7
 8007872:	4617      	mov	r7, r2
 8007874:	260a      	movs	r6, #10
 8007876:	4694      	mov	ip, r2
 8007878:	fb91 f5f6 	sdiv	r5, r1, r6
 800787c:	fb06 1415 	mls	r4, r6, r5, r1
 8007880:	3430      	adds	r4, #48	; 0x30
 8007882:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007886:	460c      	mov	r4, r1
 8007888:	2c63      	cmp	r4, #99	; 0x63
 800788a:	f102 32ff 	add.w	r2, r2, #4294967295
 800788e:	4629      	mov	r1, r5
 8007890:	dcf1      	bgt.n	8007876 <__exponent+0x22>
 8007892:	3130      	adds	r1, #48	; 0x30
 8007894:	f1ac 0402 	sub.w	r4, ip, #2
 8007898:	f802 1c01 	strb.w	r1, [r2, #-1]
 800789c:	1c41      	adds	r1, r0, #1
 800789e:	4622      	mov	r2, r4
 80078a0:	42ba      	cmp	r2, r7
 80078a2:	d30a      	bcc.n	80078ba <__exponent+0x66>
 80078a4:	f10d 0209 	add.w	r2, sp, #9
 80078a8:	eba2 020c 	sub.w	r2, r2, ip
 80078ac:	42bc      	cmp	r4, r7
 80078ae:	bf88      	it	hi
 80078b0:	2200      	movhi	r2, #0
 80078b2:	4413      	add	r3, r2
 80078b4:	1a18      	subs	r0, r3, r0
 80078b6:	b003      	add	sp, #12
 80078b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 80078be:	f801 5f01 	strb.w	r5, [r1, #1]!
 80078c2:	e7ed      	b.n	80078a0 <__exponent+0x4c>
 80078c4:	2330      	movs	r3, #48	; 0x30
 80078c6:	3130      	adds	r1, #48	; 0x30
 80078c8:	7083      	strb	r3, [r0, #2]
 80078ca:	70c1      	strb	r1, [r0, #3]
 80078cc:	1d03      	adds	r3, r0, #4
 80078ce:	e7f1      	b.n	80078b4 <__exponent+0x60>

080078d0 <_printf_float>:
 80078d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d4:	ed2d 8b02 	vpush	{d8}
 80078d8:	b08d      	sub	sp, #52	; 0x34
 80078da:	460c      	mov	r4, r1
 80078dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80078e0:	4616      	mov	r6, r2
 80078e2:	461f      	mov	r7, r3
 80078e4:	4605      	mov	r5, r0
 80078e6:	f000 ff21 	bl	800872c <_localeconv_r>
 80078ea:	f8d0 a000 	ldr.w	sl, [r0]
 80078ee:	4650      	mov	r0, sl
 80078f0:	f7f8 fcc6 	bl	8000280 <strlen>
 80078f4:	2300      	movs	r3, #0
 80078f6:	930a      	str	r3, [sp, #40]	; 0x28
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007900:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007904:	3307      	adds	r3, #7
 8007906:	f023 0307 	bic.w	r3, r3, #7
 800790a:	f103 0208 	add.w	r2, r3, #8
 800790e:	f8c8 2000 	str.w	r2, [r8]
 8007912:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007916:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800791a:	9307      	str	r3, [sp, #28]
 800791c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007920:	ee08 0a10 	vmov	s16, r0
 8007924:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800792c:	4b9e      	ldr	r3, [pc, #632]	; (8007ba8 <_printf_float+0x2d8>)
 800792e:	f04f 32ff 	mov.w	r2, #4294967295
 8007932:	f7f9 f903 	bl	8000b3c <__aeabi_dcmpun>
 8007936:	bb88      	cbnz	r0, 800799c <_printf_float+0xcc>
 8007938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800793c:	4b9a      	ldr	r3, [pc, #616]	; (8007ba8 <_printf_float+0x2d8>)
 800793e:	f04f 32ff 	mov.w	r2, #4294967295
 8007942:	f7f9 f8dd 	bl	8000b00 <__aeabi_dcmple>
 8007946:	bb48      	cbnz	r0, 800799c <_printf_float+0xcc>
 8007948:	2200      	movs	r2, #0
 800794a:	2300      	movs	r3, #0
 800794c:	4640      	mov	r0, r8
 800794e:	4649      	mov	r1, r9
 8007950:	f7f9 f8cc 	bl	8000aec <__aeabi_dcmplt>
 8007954:	b110      	cbz	r0, 800795c <_printf_float+0x8c>
 8007956:	232d      	movs	r3, #45	; 0x2d
 8007958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800795c:	4a93      	ldr	r2, [pc, #588]	; (8007bac <_printf_float+0x2dc>)
 800795e:	4b94      	ldr	r3, [pc, #592]	; (8007bb0 <_printf_float+0x2e0>)
 8007960:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007964:	bf94      	ite	ls
 8007966:	4690      	movls	r8, r2
 8007968:	4698      	movhi	r8, r3
 800796a:	2303      	movs	r3, #3
 800796c:	6123      	str	r3, [r4, #16]
 800796e:	9b05      	ldr	r3, [sp, #20]
 8007970:	f023 0304 	bic.w	r3, r3, #4
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	f04f 0900 	mov.w	r9, #0
 800797a:	9700      	str	r7, [sp, #0]
 800797c:	4633      	mov	r3, r6
 800797e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007980:	4621      	mov	r1, r4
 8007982:	4628      	mov	r0, r5
 8007984:	f000 f9da 	bl	8007d3c <_printf_common>
 8007988:	3001      	adds	r0, #1
 800798a:	f040 8090 	bne.w	8007aae <_printf_float+0x1de>
 800798e:	f04f 30ff 	mov.w	r0, #4294967295
 8007992:	b00d      	add	sp, #52	; 0x34
 8007994:	ecbd 8b02 	vpop	{d8}
 8007998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799c:	4642      	mov	r2, r8
 800799e:	464b      	mov	r3, r9
 80079a0:	4640      	mov	r0, r8
 80079a2:	4649      	mov	r1, r9
 80079a4:	f7f9 f8ca 	bl	8000b3c <__aeabi_dcmpun>
 80079a8:	b140      	cbz	r0, 80079bc <_printf_float+0xec>
 80079aa:	464b      	mov	r3, r9
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bfbc      	itt	lt
 80079b0:	232d      	movlt	r3, #45	; 0x2d
 80079b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079b6:	4a7f      	ldr	r2, [pc, #508]	; (8007bb4 <_printf_float+0x2e4>)
 80079b8:	4b7f      	ldr	r3, [pc, #508]	; (8007bb8 <_printf_float+0x2e8>)
 80079ba:	e7d1      	b.n	8007960 <_printf_float+0x90>
 80079bc:	6863      	ldr	r3, [r4, #4]
 80079be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079c2:	9206      	str	r2, [sp, #24]
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	d13f      	bne.n	8007a48 <_printf_float+0x178>
 80079c8:	2306      	movs	r3, #6
 80079ca:	6063      	str	r3, [r4, #4]
 80079cc:	9b05      	ldr	r3, [sp, #20]
 80079ce:	6861      	ldr	r1, [r4, #4]
 80079d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80079d4:	2300      	movs	r3, #0
 80079d6:	9303      	str	r3, [sp, #12]
 80079d8:	ab0a      	add	r3, sp, #40	; 0x28
 80079da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80079de:	ab09      	add	r3, sp, #36	; 0x24
 80079e0:	ec49 8b10 	vmov	d0, r8, r9
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	6022      	str	r2, [r4, #0]
 80079e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079ec:	4628      	mov	r0, r5
 80079ee:	f7ff fecf 	bl	8007790 <__cvt>
 80079f2:	9b06      	ldr	r3, [sp, #24]
 80079f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079f6:	2b47      	cmp	r3, #71	; 0x47
 80079f8:	4680      	mov	r8, r0
 80079fa:	d108      	bne.n	8007a0e <_printf_float+0x13e>
 80079fc:	1cc8      	adds	r0, r1, #3
 80079fe:	db02      	blt.n	8007a06 <_printf_float+0x136>
 8007a00:	6863      	ldr	r3, [r4, #4]
 8007a02:	4299      	cmp	r1, r3
 8007a04:	dd41      	ble.n	8007a8a <_printf_float+0x1ba>
 8007a06:	f1ab 0302 	sub.w	r3, fp, #2
 8007a0a:	fa5f fb83 	uxtb.w	fp, r3
 8007a0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a12:	d820      	bhi.n	8007a56 <_printf_float+0x186>
 8007a14:	3901      	subs	r1, #1
 8007a16:	465a      	mov	r2, fp
 8007a18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a1e:	f7ff ff19 	bl	8007854 <__exponent>
 8007a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a24:	1813      	adds	r3, r2, r0
 8007a26:	2a01      	cmp	r2, #1
 8007a28:	4681      	mov	r9, r0
 8007a2a:	6123      	str	r3, [r4, #16]
 8007a2c:	dc02      	bgt.n	8007a34 <_printf_float+0x164>
 8007a2e:	6822      	ldr	r2, [r4, #0]
 8007a30:	07d2      	lsls	r2, r2, #31
 8007a32:	d501      	bpl.n	8007a38 <_printf_float+0x168>
 8007a34:	3301      	adds	r3, #1
 8007a36:	6123      	str	r3, [r4, #16]
 8007a38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d09c      	beq.n	800797a <_printf_float+0xaa>
 8007a40:	232d      	movs	r3, #45	; 0x2d
 8007a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a46:	e798      	b.n	800797a <_printf_float+0xaa>
 8007a48:	9a06      	ldr	r2, [sp, #24]
 8007a4a:	2a47      	cmp	r2, #71	; 0x47
 8007a4c:	d1be      	bne.n	80079cc <_printf_float+0xfc>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1bc      	bne.n	80079cc <_printf_float+0xfc>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e7b9      	b.n	80079ca <_printf_float+0xfa>
 8007a56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a5a:	d118      	bne.n	8007a8e <_printf_float+0x1be>
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	6863      	ldr	r3, [r4, #4]
 8007a60:	dd0b      	ble.n	8007a7a <_printf_float+0x1aa>
 8007a62:	6121      	str	r1, [r4, #16]
 8007a64:	b913      	cbnz	r3, 8007a6c <_printf_float+0x19c>
 8007a66:	6822      	ldr	r2, [r4, #0]
 8007a68:	07d0      	lsls	r0, r2, #31
 8007a6a:	d502      	bpl.n	8007a72 <_printf_float+0x1a2>
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	440b      	add	r3, r1
 8007a70:	6123      	str	r3, [r4, #16]
 8007a72:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a74:	f04f 0900 	mov.w	r9, #0
 8007a78:	e7de      	b.n	8007a38 <_printf_float+0x168>
 8007a7a:	b913      	cbnz	r3, 8007a82 <_printf_float+0x1b2>
 8007a7c:	6822      	ldr	r2, [r4, #0]
 8007a7e:	07d2      	lsls	r2, r2, #31
 8007a80:	d501      	bpl.n	8007a86 <_printf_float+0x1b6>
 8007a82:	3302      	adds	r3, #2
 8007a84:	e7f4      	b.n	8007a70 <_printf_float+0x1a0>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e7f2      	b.n	8007a70 <_printf_float+0x1a0>
 8007a8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a90:	4299      	cmp	r1, r3
 8007a92:	db05      	blt.n	8007aa0 <_printf_float+0x1d0>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	6121      	str	r1, [r4, #16]
 8007a98:	07d8      	lsls	r0, r3, #31
 8007a9a:	d5ea      	bpl.n	8007a72 <_printf_float+0x1a2>
 8007a9c:	1c4b      	adds	r3, r1, #1
 8007a9e:	e7e7      	b.n	8007a70 <_printf_float+0x1a0>
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	bfd4      	ite	le
 8007aa4:	f1c1 0202 	rsble	r2, r1, #2
 8007aa8:	2201      	movgt	r2, #1
 8007aaa:	4413      	add	r3, r2
 8007aac:	e7e0      	b.n	8007a70 <_printf_float+0x1a0>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	055a      	lsls	r2, r3, #21
 8007ab2:	d407      	bmi.n	8007ac4 <_printf_float+0x1f4>
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	4642      	mov	r2, r8
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d12c      	bne.n	8007b1c <_printf_float+0x24c>
 8007ac2:	e764      	b.n	800798e <_printf_float+0xbe>
 8007ac4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ac8:	f240 80e0 	bls.w	8007c8c <_printf_float+0x3bc>
 8007acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f7f9 f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d034      	beq.n	8007b46 <_printf_float+0x276>
 8007adc:	4a37      	ldr	r2, [pc, #220]	; (8007bbc <_printf_float+0x2ec>)
 8007ade:	2301      	movs	r3, #1
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f43f af51 	beq.w	800798e <_printf_float+0xbe>
 8007aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007af0:	429a      	cmp	r2, r3
 8007af2:	db02      	blt.n	8007afa <_printf_float+0x22a>
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	07d8      	lsls	r0, r3, #31
 8007af8:	d510      	bpl.n	8007b1c <_printf_float+0x24c>
 8007afa:	ee18 3a10 	vmov	r3, s16
 8007afe:	4652      	mov	r2, sl
 8007b00:	4631      	mov	r1, r6
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b8      	blx	r7
 8007b06:	3001      	adds	r0, #1
 8007b08:	f43f af41 	beq.w	800798e <_printf_float+0xbe>
 8007b0c:	f04f 0800 	mov.w	r8, #0
 8007b10:	f104 091a 	add.w	r9, r4, #26
 8007b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b16:	3b01      	subs	r3, #1
 8007b18:	4543      	cmp	r3, r8
 8007b1a:	dc09      	bgt.n	8007b30 <_printf_float+0x260>
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	079b      	lsls	r3, r3, #30
 8007b20:	f100 8107 	bmi.w	8007d32 <_printf_float+0x462>
 8007b24:	68e0      	ldr	r0, [r4, #12]
 8007b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b28:	4298      	cmp	r0, r3
 8007b2a:	bfb8      	it	lt
 8007b2c:	4618      	movlt	r0, r3
 8007b2e:	e730      	b.n	8007992 <_printf_float+0xc2>
 8007b30:	2301      	movs	r3, #1
 8007b32:	464a      	mov	r2, r9
 8007b34:	4631      	mov	r1, r6
 8007b36:	4628      	mov	r0, r5
 8007b38:	47b8      	blx	r7
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	f43f af27 	beq.w	800798e <_printf_float+0xbe>
 8007b40:	f108 0801 	add.w	r8, r8, #1
 8007b44:	e7e6      	b.n	8007b14 <_printf_float+0x244>
 8007b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dc39      	bgt.n	8007bc0 <_printf_float+0x2f0>
 8007b4c:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <_printf_float+0x2ec>)
 8007b4e:	2301      	movs	r3, #1
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f af19 	beq.w	800798e <_printf_float+0xbe>
 8007b5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b60:	4313      	orrs	r3, r2
 8007b62:	d102      	bne.n	8007b6a <_printf_float+0x29a>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	07d9      	lsls	r1, r3, #31
 8007b68:	d5d8      	bpl.n	8007b1c <_printf_float+0x24c>
 8007b6a:	ee18 3a10 	vmov	r3, s16
 8007b6e:	4652      	mov	r2, sl
 8007b70:	4631      	mov	r1, r6
 8007b72:	4628      	mov	r0, r5
 8007b74:	47b8      	blx	r7
 8007b76:	3001      	adds	r0, #1
 8007b78:	f43f af09 	beq.w	800798e <_printf_float+0xbe>
 8007b7c:	f04f 0900 	mov.w	r9, #0
 8007b80:	f104 0a1a 	add.w	sl, r4, #26
 8007b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b86:	425b      	negs	r3, r3
 8007b88:	454b      	cmp	r3, r9
 8007b8a:	dc01      	bgt.n	8007b90 <_printf_float+0x2c0>
 8007b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b8e:	e792      	b.n	8007ab6 <_printf_float+0x1e6>
 8007b90:	2301      	movs	r3, #1
 8007b92:	4652      	mov	r2, sl
 8007b94:	4631      	mov	r1, r6
 8007b96:	4628      	mov	r0, r5
 8007b98:	47b8      	blx	r7
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f43f aef7 	beq.w	800798e <_printf_float+0xbe>
 8007ba0:	f109 0901 	add.w	r9, r9, #1
 8007ba4:	e7ee      	b.n	8007b84 <_printf_float+0x2b4>
 8007ba6:	bf00      	nop
 8007ba8:	7fefffff 	.word	0x7fefffff
 8007bac:	0800bac9 	.word	0x0800bac9
 8007bb0:	0800bacd 	.word	0x0800bacd
 8007bb4:	0800bad1 	.word	0x0800bad1
 8007bb8:	0800bad5 	.word	0x0800bad5
 8007bbc:	0800bad9 	.word	0x0800bad9
 8007bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	bfa8      	it	ge
 8007bc8:	461a      	movge	r2, r3
 8007bca:	2a00      	cmp	r2, #0
 8007bcc:	4691      	mov	r9, r2
 8007bce:	dc37      	bgt.n	8007c40 <_printf_float+0x370>
 8007bd0:	f04f 0b00 	mov.w	fp, #0
 8007bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bd8:	f104 021a 	add.w	r2, r4, #26
 8007bdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bde:	9305      	str	r3, [sp, #20]
 8007be0:	eba3 0309 	sub.w	r3, r3, r9
 8007be4:	455b      	cmp	r3, fp
 8007be6:	dc33      	bgt.n	8007c50 <_printf_float+0x380>
 8007be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bec:	429a      	cmp	r2, r3
 8007bee:	db3b      	blt.n	8007c68 <_printf_float+0x398>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	07da      	lsls	r2, r3, #31
 8007bf4:	d438      	bmi.n	8007c68 <_printf_float+0x398>
 8007bf6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007bfa:	eba2 0903 	sub.w	r9, r2, r3
 8007bfe:	9b05      	ldr	r3, [sp, #20]
 8007c00:	1ad2      	subs	r2, r2, r3
 8007c02:	4591      	cmp	r9, r2
 8007c04:	bfa8      	it	ge
 8007c06:	4691      	movge	r9, r2
 8007c08:	f1b9 0f00 	cmp.w	r9, #0
 8007c0c:	dc35      	bgt.n	8007c7a <_printf_float+0x3aa>
 8007c0e:	f04f 0800 	mov.w	r8, #0
 8007c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c16:	f104 0a1a 	add.w	sl, r4, #26
 8007c1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c1e:	1a9b      	subs	r3, r3, r2
 8007c20:	eba3 0309 	sub.w	r3, r3, r9
 8007c24:	4543      	cmp	r3, r8
 8007c26:	f77f af79 	ble.w	8007b1c <_printf_float+0x24c>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4652      	mov	r2, sl
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b8      	blx	r7
 8007c34:	3001      	adds	r0, #1
 8007c36:	f43f aeaa 	beq.w	800798e <_printf_float+0xbe>
 8007c3a:	f108 0801 	add.w	r8, r8, #1
 8007c3e:	e7ec      	b.n	8007c1a <_printf_float+0x34a>
 8007c40:	4613      	mov	r3, r2
 8007c42:	4631      	mov	r1, r6
 8007c44:	4642      	mov	r2, r8
 8007c46:	4628      	mov	r0, r5
 8007c48:	47b8      	blx	r7
 8007c4a:	3001      	adds	r0, #1
 8007c4c:	d1c0      	bne.n	8007bd0 <_printf_float+0x300>
 8007c4e:	e69e      	b.n	800798e <_printf_float+0xbe>
 8007c50:	2301      	movs	r3, #1
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	9205      	str	r2, [sp, #20]
 8007c58:	47b8      	blx	r7
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	f43f ae97 	beq.w	800798e <_printf_float+0xbe>
 8007c60:	9a05      	ldr	r2, [sp, #20]
 8007c62:	f10b 0b01 	add.w	fp, fp, #1
 8007c66:	e7b9      	b.n	8007bdc <_printf_float+0x30c>
 8007c68:	ee18 3a10 	vmov	r3, s16
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	d1be      	bne.n	8007bf6 <_printf_float+0x326>
 8007c78:	e689      	b.n	800798e <_printf_float+0xbe>
 8007c7a:	9a05      	ldr	r2, [sp, #20]
 8007c7c:	464b      	mov	r3, r9
 8007c7e:	4442      	add	r2, r8
 8007c80:	4631      	mov	r1, r6
 8007c82:	4628      	mov	r0, r5
 8007c84:	47b8      	blx	r7
 8007c86:	3001      	adds	r0, #1
 8007c88:	d1c1      	bne.n	8007c0e <_printf_float+0x33e>
 8007c8a:	e680      	b.n	800798e <_printf_float+0xbe>
 8007c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c8e:	2a01      	cmp	r2, #1
 8007c90:	dc01      	bgt.n	8007c96 <_printf_float+0x3c6>
 8007c92:	07db      	lsls	r3, r3, #31
 8007c94:	d53a      	bpl.n	8007d0c <_printf_float+0x43c>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4642      	mov	r2, r8
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	47b8      	blx	r7
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	f43f ae74 	beq.w	800798e <_printf_float+0xbe>
 8007ca6:	ee18 3a10 	vmov	r3, s16
 8007caa:	4652      	mov	r2, sl
 8007cac:	4631      	mov	r1, r6
 8007cae:	4628      	mov	r0, r5
 8007cb0:	47b8      	blx	r7
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	f43f ae6b 	beq.w	800798e <_printf_float+0xbe>
 8007cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007cc4:	f7f8 ff08 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cc8:	b9d8      	cbnz	r0, 8007d02 <_printf_float+0x432>
 8007cca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007cce:	f108 0201 	add.w	r2, r8, #1
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	47b8      	blx	r7
 8007cd8:	3001      	adds	r0, #1
 8007cda:	d10e      	bne.n	8007cfa <_printf_float+0x42a>
 8007cdc:	e657      	b.n	800798e <_printf_float+0xbe>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4652      	mov	r2, sl
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4628      	mov	r0, r5
 8007ce6:	47b8      	blx	r7
 8007ce8:	3001      	adds	r0, #1
 8007cea:	f43f ae50 	beq.w	800798e <_printf_float+0xbe>
 8007cee:	f108 0801 	add.w	r8, r8, #1
 8007cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	4543      	cmp	r3, r8
 8007cf8:	dcf1      	bgt.n	8007cde <_printf_float+0x40e>
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d00:	e6da      	b.n	8007ab8 <_printf_float+0x1e8>
 8007d02:	f04f 0800 	mov.w	r8, #0
 8007d06:	f104 0a1a 	add.w	sl, r4, #26
 8007d0a:	e7f2      	b.n	8007cf2 <_printf_float+0x422>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	4642      	mov	r2, r8
 8007d10:	e7df      	b.n	8007cd2 <_printf_float+0x402>
 8007d12:	2301      	movs	r3, #1
 8007d14:	464a      	mov	r2, r9
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	f43f ae36 	beq.w	800798e <_printf_float+0xbe>
 8007d22:	f108 0801 	add.w	r8, r8, #1
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d2a:	1a5b      	subs	r3, r3, r1
 8007d2c:	4543      	cmp	r3, r8
 8007d2e:	dcf0      	bgt.n	8007d12 <_printf_float+0x442>
 8007d30:	e6f8      	b.n	8007b24 <_printf_float+0x254>
 8007d32:	f04f 0800 	mov.w	r8, #0
 8007d36:	f104 0919 	add.w	r9, r4, #25
 8007d3a:	e7f4      	b.n	8007d26 <_printf_float+0x456>

08007d3c <_printf_common>:
 8007d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d40:	4616      	mov	r6, r2
 8007d42:	4699      	mov	r9, r3
 8007d44:	688a      	ldr	r2, [r1, #8]
 8007d46:	690b      	ldr	r3, [r1, #16]
 8007d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	bfb8      	it	lt
 8007d50:	4613      	movlt	r3, r2
 8007d52:	6033      	str	r3, [r6, #0]
 8007d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d58:	4607      	mov	r7, r0
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	b10a      	cbz	r2, 8007d62 <_printf_common+0x26>
 8007d5e:	3301      	adds	r3, #1
 8007d60:	6033      	str	r3, [r6, #0]
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	0699      	lsls	r1, r3, #26
 8007d66:	bf42      	ittt	mi
 8007d68:	6833      	ldrmi	r3, [r6, #0]
 8007d6a:	3302      	addmi	r3, #2
 8007d6c:	6033      	strmi	r3, [r6, #0]
 8007d6e:	6825      	ldr	r5, [r4, #0]
 8007d70:	f015 0506 	ands.w	r5, r5, #6
 8007d74:	d106      	bne.n	8007d84 <_printf_common+0x48>
 8007d76:	f104 0a19 	add.w	sl, r4, #25
 8007d7a:	68e3      	ldr	r3, [r4, #12]
 8007d7c:	6832      	ldr	r2, [r6, #0]
 8007d7e:	1a9b      	subs	r3, r3, r2
 8007d80:	42ab      	cmp	r3, r5
 8007d82:	dc26      	bgt.n	8007dd2 <_printf_common+0x96>
 8007d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d88:	1e13      	subs	r3, r2, #0
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	bf18      	it	ne
 8007d8e:	2301      	movne	r3, #1
 8007d90:	0692      	lsls	r2, r2, #26
 8007d92:	d42b      	bmi.n	8007dec <_printf_common+0xb0>
 8007d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	47c0      	blx	r8
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d01e      	beq.n	8007de0 <_printf_common+0xa4>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	6922      	ldr	r2, [r4, #16]
 8007da6:	f003 0306 	and.w	r3, r3, #6
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	bf02      	ittt	eq
 8007dae:	68e5      	ldreq	r5, [r4, #12]
 8007db0:	6833      	ldreq	r3, [r6, #0]
 8007db2:	1aed      	subeq	r5, r5, r3
 8007db4:	68a3      	ldr	r3, [r4, #8]
 8007db6:	bf0c      	ite	eq
 8007db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dbc:	2500      	movne	r5, #0
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	bfc4      	itt	gt
 8007dc2:	1a9b      	subgt	r3, r3, r2
 8007dc4:	18ed      	addgt	r5, r5, r3
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	341a      	adds	r4, #26
 8007dca:	42b5      	cmp	r5, r6
 8007dcc:	d11a      	bne.n	8007e04 <_printf_common+0xc8>
 8007dce:	2000      	movs	r0, #0
 8007dd0:	e008      	b.n	8007de4 <_printf_common+0xa8>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4652      	mov	r2, sl
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	4638      	mov	r0, r7
 8007dda:	47c0      	blx	r8
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d103      	bne.n	8007de8 <_printf_common+0xac>
 8007de0:	f04f 30ff 	mov.w	r0, #4294967295
 8007de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de8:	3501      	adds	r5, #1
 8007dea:	e7c6      	b.n	8007d7a <_printf_common+0x3e>
 8007dec:	18e1      	adds	r1, r4, r3
 8007dee:	1c5a      	adds	r2, r3, #1
 8007df0:	2030      	movs	r0, #48	; 0x30
 8007df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007df6:	4422      	add	r2, r4
 8007df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e00:	3302      	adds	r3, #2
 8007e02:	e7c7      	b.n	8007d94 <_printf_common+0x58>
 8007e04:	2301      	movs	r3, #1
 8007e06:	4622      	mov	r2, r4
 8007e08:	4649      	mov	r1, r9
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	47c0      	blx	r8
 8007e0e:	3001      	adds	r0, #1
 8007e10:	d0e6      	beq.n	8007de0 <_printf_common+0xa4>
 8007e12:	3601      	adds	r6, #1
 8007e14:	e7d9      	b.n	8007dca <_printf_common+0x8e>
	...

08007e18 <_printf_i>:
 8007e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1c:	7e0f      	ldrb	r7, [r1, #24]
 8007e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e20:	2f78      	cmp	r7, #120	; 0x78
 8007e22:	4691      	mov	r9, r2
 8007e24:	4680      	mov	r8, r0
 8007e26:	460c      	mov	r4, r1
 8007e28:	469a      	mov	sl, r3
 8007e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e2e:	d807      	bhi.n	8007e40 <_printf_i+0x28>
 8007e30:	2f62      	cmp	r7, #98	; 0x62
 8007e32:	d80a      	bhi.n	8007e4a <_printf_i+0x32>
 8007e34:	2f00      	cmp	r7, #0
 8007e36:	f000 80d4 	beq.w	8007fe2 <_printf_i+0x1ca>
 8007e3a:	2f58      	cmp	r7, #88	; 0x58
 8007e3c:	f000 80c0 	beq.w	8007fc0 <_printf_i+0x1a8>
 8007e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e48:	e03a      	b.n	8007ec0 <_printf_i+0xa8>
 8007e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e4e:	2b15      	cmp	r3, #21
 8007e50:	d8f6      	bhi.n	8007e40 <_printf_i+0x28>
 8007e52:	a101      	add	r1, pc, #4	; (adr r1, 8007e58 <_printf_i+0x40>)
 8007e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e58:	08007eb1 	.word	0x08007eb1
 8007e5c:	08007ec5 	.word	0x08007ec5
 8007e60:	08007e41 	.word	0x08007e41
 8007e64:	08007e41 	.word	0x08007e41
 8007e68:	08007e41 	.word	0x08007e41
 8007e6c:	08007e41 	.word	0x08007e41
 8007e70:	08007ec5 	.word	0x08007ec5
 8007e74:	08007e41 	.word	0x08007e41
 8007e78:	08007e41 	.word	0x08007e41
 8007e7c:	08007e41 	.word	0x08007e41
 8007e80:	08007e41 	.word	0x08007e41
 8007e84:	08007fc9 	.word	0x08007fc9
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007f83 	.word	0x08007f83
 8007e90:	08007e41 	.word	0x08007e41
 8007e94:	08007e41 	.word	0x08007e41
 8007e98:	08007feb 	.word	0x08007feb
 8007e9c:	08007e41 	.word	0x08007e41
 8007ea0:	08007ef1 	.word	0x08007ef1
 8007ea4:	08007e41 	.word	0x08007e41
 8007ea8:	08007e41 	.word	0x08007e41
 8007eac:	08007f8b 	.word	0x08007f8b
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	1d1a      	adds	r2, r3, #4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	602a      	str	r2, [r5, #0]
 8007eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e09f      	b.n	8008004 <_printf_i+0x1ec>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	682b      	ldr	r3, [r5, #0]
 8007ec8:	0607      	lsls	r7, r0, #24
 8007eca:	f103 0104 	add.w	r1, r3, #4
 8007ece:	6029      	str	r1, [r5, #0]
 8007ed0:	d501      	bpl.n	8007ed6 <_printf_i+0xbe>
 8007ed2:	681e      	ldr	r6, [r3, #0]
 8007ed4:	e003      	b.n	8007ede <_printf_i+0xc6>
 8007ed6:	0646      	lsls	r6, r0, #25
 8007ed8:	d5fb      	bpl.n	8007ed2 <_printf_i+0xba>
 8007eda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ede:	2e00      	cmp	r6, #0
 8007ee0:	da03      	bge.n	8007eea <_printf_i+0xd2>
 8007ee2:	232d      	movs	r3, #45	; 0x2d
 8007ee4:	4276      	negs	r6, r6
 8007ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eea:	485a      	ldr	r0, [pc, #360]	; (8008054 <_printf_i+0x23c>)
 8007eec:	230a      	movs	r3, #10
 8007eee:	e012      	b.n	8007f16 <_printf_i+0xfe>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	6820      	ldr	r0, [r4, #0]
 8007ef4:	1d19      	adds	r1, r3, #4
 8007ef6:	6029      	str	r1, [r5, #0]
 8007ef8:	0605      	lsls	r5, r0, #24
 8007efa:	d501      	bpl.n	8007f00 <_printf_i+0xe8>
 8007efc:	681e      	ldr	r6, [r3, #0]
 8007efe:	e002      	b.n	8007f06 <_printf_i+0xee>
 8007f00:	0641      	lsls	r1, r0, #25
 8007f02:	d5fb      	bpl.n	8007efc <_printf_i+0xe4>
 8007f04:	881e      	ldrh	r6, [r3, #0]
 8007f06:	4853      	ldr	r0, [pc, #332]	; (8008054 <_printf_i+0x23c>)
 8007f08:	2f6f      	cmp	r7, #111	; 0x6f
 8007f0a:	bf0c      	ite	eq
 8007f0c:	2308      	moveq	r3, #8
 8007f0e:	230a      	movne	r3, #10
 8007f10:	2100      	movs	r1, #0
 8007f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f16:	6865      	ldr	r5, [r4, #4]
 8007f18:	60a5      	str	r5, [r4, #8]
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	bfa2      	ittt	ge
 8007f1e:	6821      	ldrge	r1, [r4, #0]
 8007f20:	f021 0104 	bicge.w	r1, r1, #4
 8007f24:	6021      	strge	r1, [r4, #0]
 8007f26:	b90e      	cbnz	r6, 8007f2c <_printf_i+0x114>
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	d04b      	beq.n	8007fc4 <_printf_i+0x1ac>
 8007f2c:	4615      	mov	r5, r2
 8007f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f32:	fb03 6711 	mls	r7, r3, r1, r6
 8007f36:	5dc7      	ldrb	r7, [r0, r7]
 8007f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f3c:	4637      	mov	r7, r6
 8007f3e:	42bb      	cmp	r3, r7
 8007f40:	460e      	mov	r6, r1
 8007f42:	d9f4      	bls.n	8007f2e <_printf_i+0x116>
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d10b      	bne.n	8007f60 <_printf_i+0x148>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	07de      	lsls	r6, r3, #31
 8007f4c:	d508      	bpl.n	8007f60 <_printf_i+0x148>
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	6861      	ldr	r1, [r4, #4]
 8007f52:	4299      	cmp	r1, r3
 8007f54:	bfde      	ittt	le
 8007f56:	2330      	movle	r3, #48	; 0x30
 8007f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f60:	1b52      	subs	r2, r2, r5
 8007f62:	6122      	str	r2, [r4, #16]
 8007f64:	f8cd a000 	str.w	sl, [sp]
 8007f68:	464b      	mov	r3, r9
 8007f6a:	aa03      	add	r2, sp, #12
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4640      	mov	r0, r8
 8007f70:	f7ff fee4 	bl	8007d3c <_printf_common>
 8007f74:	3001      	adds	r0, #1
 8007f76:	d14a      	bne.n	800800e <_printf_i+0x1f6>
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	b004      	add	sp, #16
 8007f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	f043 0320 	orr.w	r3, r3, #32
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	4833      	ldr	r0, [pc, #204]	; (8008058 <_printf_i+0x240>)
 8007f8c:	2778      	movs	r7, #120	; 0x78
 8007f8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	6829      	ldr	r1, [r5, #0]
 8007f96:	061f      	lsls	r7, r3, #24
 8007f98:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f9c:	d402      	bmi.n	8007fa4 <_printf_i+0x18c>
 8007f9e:	065f      	lsls	r7, r3, #25
 8007fa0:	bf48      	it	mi
 8007fa2:	b2b6      	uxthmi	r6, r6
 8007fa4:	07df      	lsls	r7, r3, #31
 8007fa6:	bf48      	it	mi
 8007fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8007fac:	6029      	str	r1, [r5, #0]
 8007fae:	bf48      	it	mi
 8007fb0:	6023      	strmi	r3, [r4, #0]
 8007fb2:	b91e      	cbnz	r6, 8007fbc <_printf_i+0x1a4>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	f023 0320 	bic.w	r3, r3, #32
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	e7a7      	b.n	8007f10 <_printf_i+0xf8>
 8007fc0:	4824      	ldr	r0, [pc, #144]	; (8008054 <_printf_i+0x23c>)
 8007fc2:	e7e4      	b.n	8007f8e <_printf_i+0x176>
 8007fc4:	4615      	mov	r5, r2
 8007fc6:	e7bd      	b.n	8007f44 <_printf_i+0x12c>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	6826      	ldr	r6, [r4, #0]
 8007fcc:	6961      	ldr	r1, [r4, #20]
 8007fce:	1d18      	adds	r0, r3, #4
 8007fd0:	6028      	str	r0, [r5, #0]
 8007fd2:	0635      	lsls	r5, r6, #24
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	d501      	bpl.n	8007fdc <_printf_i+0x1c4>
 8007fd8:	6019      	str	r1, [r3, #0]
 8007fda:	e002      	b.n	8007fe2 <_printf_i+0x1ca>
 8007fdc:	0670      	lsls	r0, r6, #25
 8007fde:	d5fb      	bpl.n	8007fd8 <_printf_i+0x1c0>
 8007fe0:	8019      	strh	r1, [r3, #0]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6123      	str	r3, [r4, #16]
 8007fe6:	4615      	mov	r5, r2
 8007fe8:	e7bc      	b.n	8007f64 <_printf_i+0x14c>
 8007fea:	682b      	ldr	r3, [r5, #0]
 8007fec:	1d1a      	adds	r2, r3, #4
 8007fee:	602a      	str	r2, [r5, #0]
 8007ff0:	681d      	ldr	r5, [r3, #0]
 8007ff2:	6862      	ldr	r2, [r4, #4]
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f7f8 f8f2 	bl	80001e0 <memchr>
 8007ffc:	b108      	cbz	r0, 8008002 <_printf_i+0x1ea>
 8007ffe:	1b40      	subs	r0, r0, r5
 8008000:	6060      	str	r0, [r4, #4]
 8008002:	6863      	ldr	r3, [r4, #4]
 8008004:	6123      	str	r3, [r4, #16]
 8008006:	2300      	movs	r3, #0
 8008008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800800c:	e7aa      	b.n	8007f64 <_printf_i+0x14c>
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	462a      	mov	r2, r5
 8008012:	4649      	mov	r1, r9
 8008014:	4640      	mov	r0, r8
 8008016:	47d0      	blx	sl
 8008018:	3001      	adds	r0, #1
 800801a:	d0ad      	beq.n	8007f78 <_printf_i+0x160>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	079b      	lsls	r3, r3, #30
 8008020:	d413      	bmi.n	800804a <_printf_i+0x232>
 8008022:	68e0      	ldr	r0, [r4, #12]
 8008024:	9b03      	ldr	r3, [sp, #12]
 8008026:	4298      	cmp	r0, r3
 8008028:	bfb8      	it	lt
 800802a:	4618      	movlt	r0, r3
 800802c:	e7a6      	b.n	8007f7c <_printf_i+0x164>
 800802e:	2301      	movs	r3, #1
 8008030:	4632      	mov	r2, r6
 8008032:	4649      	mov	r1, r9
 8008034:	4640      	mov	r0, r8
 8008036:	47d0      	blx	sl
 8008038:	3001      	adds	r0, #1
 800803a:	d09d      	beq.n	8007f78 <_printf_i+0x160>
 800803c:	3501      	adds	r5, #1
 800803e:	68e3      	ldr	r3, [r4, #12]
 8008040:	9903      	ldr	r1, [sp, #12]
 8008042:	1a5b      	subs	r3, r3, r1
 8008044:	42ab      	cmp	r3, r5
 8008046:	dcf2      	bgt.n	800802e <_printf_i+0x216>
 8008048:	e7eb      	b.n	8008022 <_printf_i+0x20a>
 800804a:	2500      	movs	r5, #0
 800804c:	f104 0619 	add.w	r6, r4, #25
 8008050:	e7f5      	b.n	800803e <_printf_i+0x226>
 8008052:	bf00      	nop
 8008054:	0800badb 	.word	0x0800badb
 8008058:	0800baec 	.word	0x0800baec

0800805c <_scanf_float>:
 800805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	b087      	sub	sp, #28
 8008062:	4617      	mov	r7, r2
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	688b      	ldr	r3, [r1, #8]
 8008068:	1e5a      	subs	r2, r3, #1
 800806a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800806e:	bf83      	ittte	hi
 8008070:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008074:	195b      	addhi	r3, r3, r5
 8008076:	9302      	strhi	r3, [sp, #8]
 8008078:	2300      	movls	r3, #0
 800807a:	bf86      	itte	hi
 800807c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008080:	608b      	strhi	r3, [r1, #8]
 8008082:	9302      	strls	r3, [sp, #8]
 8008084:	680b      	ldr	r3, [r1, #0]
 8008086:	468b      	mov	fp, r1
 8008088:	2500      	movs	r5, #0
 800808a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800808e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008092:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008096:	4680      	mov	r8, r0
 8008098:	460c      	mov	r4, r1
 800809a:	465e      	mov	r6, fp
 800809c:	46aa      	mov	sl, r5
 800809e:	46a9      	mov	r9, r5
 80080a0:	9501      	str	r5, [sp, #4]
 80080a2:	68a2      	ldr	r2, [r4, #8]
 80080a4:	b152      	cbz	r2, 80080bc <_scanf_float+0x60>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b4e      	cmp	r3, #78	; 0x4e
 80080ac:	d864      	bhi.n	8008178 <_scanf_float+0x11c>
 80080ae:	2b40      	cmp	r3, #64	; 0x40
 80080b0:	d83c      	bhi.n	800812c <_scanf_float+0xd0>
 80080b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80080b6:	b2c8      	uxtb	r0, r1
 80080b8:	280e      	cmp	r0, #14
 80080ba:	d93a      	bls.n	8008132 <_scanf_float+0xd6>
 80080bc:	f1b9 0f00 	cmp.w	r9, #0
 80080c0:	d003      	beq.n	80080ca <_scanf_float+0x6e>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080ce:	f1ba 0f01 	cmp.w	sl, #1
 80080d2:	f200 8113 	bhi.w	80082fc <_scanf_float+0x2a0>
 80080d6:	455e      	cmp	r6, fp
 80080d8:	f200 8105 	bhi.w	80082e6 <_scanf_float+0x28a>
 80080dc:	2501      	movs	r5, #1
 80080de:	4628      	mov	r0, r5
 80080e0:	b007      	add	sp, #28
 80080e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80080ea:	2a0d      	cmp	r2, #13
 80080ec:	d8e6      	bhi.n	80080bc <_scanf_float+0x60>
 80080ee:	a101      	add	r1, pc, #4	; (adr r1, 80080f4 <_scanf_float+0x98>)
 80080f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80080f4:	08008233 	.word	0x08008233
 80080f8:	080080bd 	.word	0x080080bd
 80080fc:	080080bd 	.word	0x080080bd
 8008100:	080080bd 	.word	0x080080bd
 8008104:	08008293 	.word	0x08008293
 8008108:	0800826b 	.word	0x0800826b
 800810c:	080080bd 	.word	0x080080bd
 8008110:	080080bd 	.word	0x080080bd
 8008114:	08008241 	.word	0x08008241
 8008118:	080080bd 	.word	0x080080bd
 800811c:	080080bd 	.word	0x080080bd
 8008120:	080080bd 	.word	0x080080bd
 8008124:	080080bd 	.word	0x080080bd
 8008128:	080081f9 	.word	0x080081f9
 800812c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008130:	e7db      	b.n	80080ea <_scanf_float+0x8e>
 8008132:	290e      	cmp	r1, #14
 8008134:	d8c2      	bhi.n	80080bc <_scanf_float+0x60>
 8008136:	a001      	add	r0, pc, #4	; (adr r0, 800813c <_scanf_float+0xe0>)
 8008138:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800813c:	080081eb 	.word	0x080081eb
 8008140:	080080bd 	.word	0x080080bd
 8008144:	080081eb 	.word	0x080081eb
 8008148:	0800827f 	.word	0x0800827f
 800814c:	080080bd 	.word	0x080080bd
 8008150:	08008199 	.word	0x08008199
 8008154:	080081d5 	.word	0x080081d5
 8008158:	080081d5 	.word	0x080081d5
 800815c:	080081d5 	.word	0x080081d5
 8008160:	080081d5 	.word	0x080081d5
 8008164:	080081d5 	.word	0x080081d5
 8008168:	080081d5 	.word	0x080081d5
 800816c:	080081d5 	.word	0x080081d5
 8008170:	080081d5 	.word	0x080081d5
 8008174:	080081d5 	.word	0x080081d5
 8008178:	2b6e      	cmp	r3, #110	; 0x6e
 800817a:	d809      	bhi.n	8008190 <_scanf_float+0x134>
 800817c:	2b60      	cmp	r3, #96	; 0x60
 800817e:	d8b2      	bhi.n	80080e6 <_scanf_float+0x8a>
 8008180:	2b54      	cmp	r3, #84	; 0x54
 8008182:	d077      	beq.n	8008274 <_scanf_float+0x218>
 8008184:	2b59      	cmp	r3, #89	; 0x59
 8008186:	d199      	bne.n	80080bc <_scanf_float+0x60>
 8008188:	2d07      	cmp	r5, #7
 800818a:	d197      	bne.n	80080bc <_scanf_float+0x60>
 800818c:	2508      	movs	r5, #8
 800818e:	e029      	b.n	80081e4 <_scanf_float+0x188>
 8008190:	2b74      	cmp	r3, #116	; 0x74
 8008192:	d06f      	beq.n	8008274 <_scanf_float+0x218>
 8008194:	2b79      	cmp	r3, #121	; 0x79
 8008196:	e7f6      	b.n	8008186 <_scanf_float+0x12a>
 8008198:	6821      	ldr	r1, [r4, #0]
 800819a:	05c8      	lsls	r0, r1, #23
 800819c:	d51a      	bpl.n	80081d4 <_scanf_float+0x178>
 800819e:	9b02      	ldr	r3, [sp, #8]
 80081a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80081a4:	6021      	str	r1, [r4, #0]
 80081a6:	f109 0901 	add.w	r9, r9, #1
 80081aa:	b11b      	cbz	r3, 80081b4 <_scanf_float+0x158>
 80081ac:	3b01      	subs	r3, #1
 80081ae:	3201      	adds	r2, #1
 80081b0:	9302      	str	r3, [sp, #8]
 80081b2:	60a2      	str	r2, [r4, #8]
 80081b4:	68a3      	ldr	r3, [r4, #8]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	60a3      	str	r3, [r4, #8]
 80081ba:	6923      	ldr	r3, [r4, #16]
 80081bc:	3301      	adds	r3, #1
 80081be:	6123      	str	r3, [r4, #16]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	607b      	str	r3, [r7, #4]
 80081c8:	f340 8084 	ble.w	80082d4 <_scanf_float+0x278>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	603b      	str	r3, [r7, #0]
 80081d2:	e766      	b.n	80080a2 <_scanf_float+0x46>
 80081d4:	eb1a 0f05 	cmn.w	sl, r5
 80081d8:	f47f af70 	bne.w	80080bc <_scanf_float+0x60>
 80081dc:	6822      	ldr	r2, [r4, #0]
 80081de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80081e2:	6022      	str	r2, [r4, #0]
 80081e4:	f806 3b01 	strb.w	r3, [r6], #1
 80081e8:	e7e4      	b.n	80081b4 <_scanf_float+0x158>
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	0610      	lsls	r0, r2, #24
 80081ee:	f57f af65 	bpl.w	80080bc <_scanf_float+0x60>
 80081f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081f6:	e7f4      	b.n	80081e2 <_scanf_float+0x186>
 80081f8:	f1ba 0f00 	cmp.w	sl, #0
 80081fc:	d10e      	bne.n	800821c <_scanf_float+0x1c0>
 80081fe:	f1b9 0f00 	cmp.w	r9, #0
 8008202:	d10e      	bne.n	8008222 <_scanf_float+0x1c6>
 8008204:	6822      	ldr	r2, [r4, #0]
 8008206:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800820a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800820e:	d108      	bne.n	8008222 <_scanf_float+0x1c6>
 8008210:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008214:	6022      	str	r2, [r4, #0]
 8008216:	f04f 0a01 	mov.w	sl, #1
 800821a:	e7e3      	b.n	80081e4 <_scanf_float+0x188>
 800821c:	f1ba 0f02 	cmp.w	sl, #2
 8008220:	d055      	beq.n	80082ce <_scanf_float+0x272>
 8008222:	2d01      	cmp	r5, #1
 8008224:	d002      	beq.n	800822c <_scanf_float+0x1d0>
 8008226:	2d04      	cmp	r5, #4
 8008228:	f47f af48 	bne.w	80080bc <_scanf_float+0x60>
 800822c:	3501      	adds	r5, #1
 800822e:	b2ed      	uxtb	r5, r5
 8008230:	e7d8      	b.n	80081e4 <_scanf_float+0x188>
 8008232:	f1ba 0f01 	cmp.w	sl, #1
 8008236:	f47f af41 	bne.w	80080bc <_scanf_float+0x60>
 800823a:	f04f 0a02 	mov.w	sl, #2
 800823e:	e7d1      	b.n	80081e4 <_scanf_float+0x188>
 8008240:	b97d      	cbnz	r5, 8008262 <_scanf_float+0x206>
 8008242:	f1b9 0f00 	cmp.w	r9, #0
 8008246:	f47f af3c 	bne.w	80080c2 <_scanf_float+0x66>
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008250:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008254:	f47f af39 	bne.w	80080ca <_scanf_float+0x6e>
 8008258:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800825c:	6022      	str	r2, [r4, #0]
 800825e:	2501      	movs	r5, #1
 8008260:	e7c0      	b.n	80081e4 <_scanf_float+0x188>
 8008262:	2d03      	cmp	r5, #3
 8008264:	d0e2      	beq.n	800822c <_scanf_float+0x1d0>
 8008266:	2d05      	cmp	r5, #5
 8008268:	e7de      	b.n	8008228 <_scanf_float+0x1cc>
 800826a:	2d02      	cmp	r5, #2
 800826c:	f47f af26 	bne.w	80080bc <_scanf_float+0x60>
 8008270:	2503      	movs	r5, #3
 8008272:	e7b7      	b.n	80081e4 <_scanf_float+0x188>
 8008274:	2d06      	cmp	r5, #6
 8008276:	f47f af21 	bne.w	80080bc <_scanf_float+0x60>
 800827a:	2507      	movs	r5, #7
 800827c:	e7b2      	b.n	80081e4 <_scanf_float+0x188>
 800827e:	6822      	ldr	r2, [r4, #0]
 8008280:	0591      	lsls	r1, r2, #22
 8008282:	f57f af1b 	bpl.w	80080bc <_scanf_float+0x60>
 8008286:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800828a:	6022      	str	r2, [r4, #0]
 800828c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008290:	e7a8      	b.n	80081e4 <_scanf_float+0x188>
 8008292:	6822      	ldr	r2, [r4, #0]
 8008294:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008298:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800829c:	d006      	beq.n	80082ac <_scanf_float+0x250>
 800829e:	0550      	lsls	r0, r2, #21
 80082a0:	f57f af0c 	bpl.w	80080bc <_scanf_float+0x60>
 80082a4:	f1b9 0f00 	cmp.w	r9, #0
 80082a8:	f43f af0f 	beq.w	80080ca <_scanf_float+0x6e>
 80082ac:	0591      	lsls	r1, r2, #22
 80082ae:	bf58      	it	pl
 80082b0:	9901      	ldrpl	r1, [sp, #4]
 80082b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082b6:	bf58      	it	pl
 80082b8:	eba9 0101 	subpl.w	r1, r9, r1
 80082bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80082c0:	bf58      	it	pl
 80082c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80082c6:	6022      	str	r2, [r4, #0]
 80082c8:	f04f 0900 	mov.w	r9, #0
 80082cc:	e78a      	b.n	80081e4 <_scanf_float+0x188>
 80082ce:	f04f 0a03 	mov.w	sl, #3
 80082d2:	e787      	b.n	80081e4 <_scanf_float+0x188>
 80082d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80082d8:	4639      	mov	r1, r7
 80082da:	4640      	mov	r0, r8
 80082dc:	4798      	blx	r3
 80082de:	2800      	cmp	r0, #0
 80082e0:	f43f aedf 	beq.w	80080a2 <_scanf_float+0x46>
 80082e4:	e6ea      	b.n	80080bc <_scanf_float+0x60>
 80082e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082ee:	463a      	mov	r2, r7
 80082f0:	4640      	mov	r0, r8
 80082f2:	4798      	blx	r3
 80082f4:	6923      	ldr	r3, [r4, #16]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	6123      	str	r3, [r4, #16]
 80082fa:	e6ec      	b.n	80080d6 <_scanf_float+0x7a>
 80082fc:	1e6b      	subs	r3, r5, #1
 80082fe:	2b06      	cmp	r3, #6
 8008300:	d825      	bhi.n	800834e <_scanf_float+0x2f2>
 8008302:	2d02      	cmp	r5, #2
 8008304:	d836      	bhi.n	8008374 <_scanf_float+0x318>
 8008306:	455e      	cmp	r6, fp
 8008308:	f67f aee8 	bls.w	80080dc <_scanf_float+0x80>
 800830c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008310:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008314:	463a      	mov	r2, r7
 8008316:	4640      	mov	r0, r8
 8008318:	4798      	blx	r3
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	3b01      	subs	r3, #1
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	e7f1      	b.n	8008306 <_scanf_float+0x2aa>
 8008322:	9802      	ldr	r0, [sp, #8]
 8008324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008328:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800832c:	9002      	str	r0, [sp, #8]
 800832e:	463a      	mov	r2, r7
 8008330:	4640      	mov	r0, r8
 8008332:	4798      	blx	r3
 8008334:	6923      	ldr	r3, [r4, #16]
 8008336:	3b01      	subs	r3, #1
 8008338:	6123      	str	r3, [r4, #16]
 800833a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800833e:	fa5f fa8a 	uxtb.w	sl, sl
 8008342:	f1ba 0f02 	cmp.w	sl, #2
 8008346:	d1ec      	bne.n	8008322 <_scanf_float+0x2c6>
 8008348:	3d03      	subs	r5, #3
 800834a:	b2ed      	uxtb	r5, r5
 800834c:	1b76      	subs	r6, r6, r5
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	05da      	lsls	r2, r3, #23
 8008352:	d52f      	bpl.n	80083b4 <_scanf_float+0x358>
 8008354:	055b      	lsls	r3, r3, #21
 8008356:	d510      	bpl.n	800837a <_scanf_float+0x31e>
 8008358:	455e      	cmp	r6, fp
 800835a:	f67f aebf 	bls.w	80080dc <_scanf_float+0x80>
 800835e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008366:	463a      	mov	r2, r7
 8008368:	4640      	mov	r0, r8
 800836a:	4798      	blx	r3
 800836c:	6923      	ldr	r3, [r4, #16]
 800836e:	3b01      	subs	r3, #1
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	e7f1      	b.n	8008358 <_scanf_float+0x2fc>
 8008374:	46aa      	mov	sl, r5
 8008376:	9602      	str	r6, [sp, #8]
 8008378:	e7df      	b.n	800833a <_scanf_float+0x2de>
 800837a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800837e:	6923      	ldr	r3, [r4, #16]
 8008380:	2965      	cmp	r1, #101	; 0x65
 8008382:	f103 33ff 	add.w	r3, r3, #4294967295
 8008386:	f106 35ff 	add.w	r5, r6, #4294967295
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	d00c      	beq.n	80083a8 <_scanf_float+0x34c>
 800838e:	2945      	cmp	r1, #69	; 0x45
 8008390:	d00a      	beq.n	80083a8 <_scanf_float+0x34c>
 8008392:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008396:	463a      	mov	r2, r7
 8008398:	4640      	mov	r0, r8
 800839a:	4798      	blx	r3
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80083a2:	3b01      	subs	r3, #1
 80083a4:	1eb5      	subs	r5, r6, #2
 80083a6:	6123      	str	r3, [r4, #16]
 80083a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083ac:	463a      	mov	r2, r7
 80083ae:	4640      	mov	r0, r8
 80083b0:	4798      	blx	r3
 80083b2:	462e      	mov	r6, r5
 80083b4:	6825      	ldr	r5, [r4, #0]
 80083b6:	f015 0510 	ands.w	r5, r5, #16
 80083ba:	d158      	bne.n	800846e <_scanf_float+0x412>
 80083bc:	7035      	strb	r5, [r6, #0]
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80083c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c8:	d11c      	bne.n	8008404 <_scanf_float+0x3a8>
 80083ca:	9b01      	ldr	r3, [sp, #4]
 80083cc:	454b      	cmp	r3, r9
 80083ce:	eba3 0209 	sub.w	r2, r3, r9
 80083d2:	d124      	bne.n	800841e <_scanf_float+0x3c2>
 80083d4:	2200      	movs	r2, #0
 80083d6:	4659      	mov	r1, fp
 80083d8:	4640      	mov	r0, r8
 80083da:	f7ff f939 	bl	8007650 <_strtod_r>
 80083de:	9b03      	ldr	r3, [sp, #12]
 80083e0:	6821      	ldr	r1, [r4, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f011 0f02 	tst.w	r1, #2
 80083e8:	ec57 6b10 	vmov	r6, r7, d0
 80083ec:	f103 0204 	add.w	r2, r3, #4
 80083f0:	d020      	beq.n	8008434 <_scanf_float+0x3d8>
 80083f2:	9903      	ldr	r1, [sp, #12]
 80083f4:	600a      	str	r2, [r1, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	e9c3 6700 	strd	r6, r7, [r3]
 80083fc:	68e3      	ldr	r3, [r4, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	60e3      	str	r3, [r4, #12]
 8008402:	e66c      	b.n	80080de <_scanf_float+0x82>
 8008404:	9b04      	ldr	r3, [sp, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0e4      	beq.n	80083d4 <_scanf_float+0x378>
 800840a:	9905      	ldr	r1, [sp, #20]
 800840c:	230a      	movs	r3, #10
 800840e:	462a      	mov	r2, r5
 8008410:	3101      	adds	r1, #1
 8008412:	4640      	mov	r0, r8
 8008414:	f7ff f9b0 	bl	8007778 <_strtol_r>
 8008418:	9b04      	ldr	r3, [sp, #16]
 800841a:	9e05      	ldr	r6, [sp, #20]
 800841c:	1ac2      	subs	r2, r0, r3
 800841e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008422:	429e      	cmp	r6, r3
 8008424:	bf28      	it	cs
 8008426:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800842a:	4912      	ldr	r1, [pc, #72]	; (8008474 <_scanf_float+0x418>)
 800842c:	4630      	mov	r0, r6
 800842e:	f000 f8d5 	bl	80085dc <siprintf>
 8008432:	e7cf      	b.n	80083d4 <_scanf_float+0x378>
 8008434:	f011 0f04 	tst.w	r1, #4
 8008438:	9903      	ldr	r1, [sp, #12]
 800843a:	600a      	str	r2, [r1, #0]
 800843c:	d1db      	bne.n	80083f6 <_scanf_float+0x39a>
 800843e:	f8d3 8000 	ldr.w	r8, [r3]
 8008442:	ee10 2a10 	vmov	r2, s0
 8008446:	ee10 0a10 	vmov	r0, s0
 800844a:	463b      	mov	r3, r7
 800844c:	4639      	mov	r1, r7
 800844e:	f7f8 fb75 	bl	8000b3c <__aeabi_dcmpun>
 8008452:	b128      	cbz	r0, 8008460 <_scanf_float+0x404>
 8008454:	4808      	ldr	r0, [pc, #32]	; (8008478 <_scanf_float+0x41c>)
 8008456:	f000 f9f7 	bl	8008848 <nanf>
 800845a:	ed88 0a00 	vstr	s0, [r8]
 800845e:	e7cd      	b.n	80083fc <_scanf_float+0x3a0>
 8008460:	4630      	mov	r0, r6
 8008462:	4639      	mov	r1, r7
 8008464:	f7f8 fbc8 	bl	8000bf8 <__aeabi_d2f>
 8008468:	f8c8 0000 	str.w	r0, [r8]
 800846c:	e7c6      	b.n	80083fc <_scanf_float+0x3a0>
 800846e:	2500      	movs	r5, #0
 8008470:	e635      	b.n	80080de <_scanf_float+0x82>
 8008472:	bf00      	nop
 8008474:	0800bafd 	.word	0x0800bafd
 8008478:	0800bd98 	.word	0x0800bd98

0800847c <std>:
 800847c:	2300      	movs	r3, #0
 800847e:	b510      	push	{r4, lr}
 8008480:	4604      	mov	r4, r0
 8008482:	e9c0 3300 	strd	r3, r3, [r0]
 8008486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800848a:	6083      	str	r3, [r0, #8]
 800848c:	8181      	strh	r1, [r0, #12]
 800848e:	6643      	str	r3, [r0, #100]	; 0x64
 8008490:	81c2      	strh	r2, [r0, #14]
 8008492:	6183      	str	r3, [r0, #24]
 8008494:	4619      	mov	r1, r3
 8008496:	2208      	movs	r2, #8
 8008498:	305c      	adds	r0, #92	; 0x5c
 800849a:	f000 f902 	bl	80086a2 <memset>
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <std+0x38>)
 80084a0:	6263      	str	r3, [r4, #36]	; 0x24
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <std+0x3c>)
 80084a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <std+0x40>)
 80084a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <std+0x44>)
 80084ac:	6224      	str	r4, [r4, #32]
 80084ae:	6323      	str	r3, [r4, #48]	; 0x30
 80084b0:	bd10      	pop	{r4, pc}
 80084b2:	bf00      	nop
 80084b4:	0800861d 	.word	0x0800861d
 80084b8:	0800863f 	.word	0x0800863f
 80084bc:	08008677 	.word	0x08008677
 80084c0:	0800869b 	.word	0x0800869b

080084c4 <stdio_exit_handler>:
 80084c4:	4a02      	ldr	r2, [pc, #8]	; (80084d0 <stdio_exit_handler+0xc>)
 80084c6:	4903      	ldr	r1, [pc, #12]	; (80084d4 <stdio_exit_handler+0x10>)
 80084c8:	4803      	ldr	r0, [pc, #12]	; (80084d8 <stdio_exit_handler+0x14>)
 80084ca:	f000 b869 	b.w	80085a0 <_fwalk_sglue>
 80084ce:	bf00      	nop
 80084d0:	200000b4 	.word	0x200000b4
 80084d4:	0800ab51 	.word	0x0800ab51
 80084d8:	2000022c 	.word	0x2000022c

080084dc <cleanup_stdio>:
 80084dc:	6841      	ldr	r1, [r0, #4]
 80084de:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <cleanup_stdio+0x34>)
 80084e0:	4299      	cmp	r1, r3
 80084e2:	b510      	push	{r4, lr}
 80084e4:	4604      	mov	r4, r0
 80084e6:	d001      	beq.n	80084ec <cleanup_stdio+0x10>
 80084e8:	f002 fb32 	bl	800ab50 <_fflush_r>
 80084ec:	68a1      	ldr	r1, [r4, #8]
 80084ee:	4b09      	ldr	r3, [pc, #36]	; (8008514 <cleanup_stdio+0x38>)
 80084f0:	4299      	cmp	r1, r3
 80084f2:	d002      	beq.n	80084fa <cleanup_stdio+0x1e>
 80084f4:	4620      	mov	r0, r4
 80084f6:	f002 fb2b 	bl	800ab50 <_fflush_r>
 80084fa:	68e1      	ldr	r1, [r4, #12]
 80084fc:	4b06      	ldr	r3, [pc, #24]	; (8008518 <cleanup_stdio+0x3c>)
 80084fe:	4299      	cmp	r1, r3
 8008500:	d004      	beq.n	800850c <cleanup_stdio+0x30>
 8008502:	4620      	mov	r0, r4
 8008504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008508:	f002 bb22 	b.w	800ab50 <_fflush_r>
 800850c:	bd10      	pop	{r4, pc}
 800850e:	bf00      	nop
 8008510:	200004c4 	.word	0x200004c4
 8008514:	2000052c 	.word	0x2000052c
 8008518:	20000594 	.word	0x20000594

0800851c <global_stdio_init.part.0>:
 800851c:	b510      	push	{r4, lr}
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <global_stdio_init.part.0+0x30>)
 8008520:	4c0b      	ldr	r4, [pc, #44]	; (8008550 <global_stdio_init.part.0+0x34>)
 8008522:	4a0c      	ldr	r2, [pc, #48]	; (8008554 <global_stdio_init.part.0+0x38>)
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	4620      	mov	r0, r4
 8008528:	2200      	movs	r2, #0
 800852a:	2104      	movs	r1, #4
 800852c:	f7ff ffa6 	bl	800847c <std>
 8008530:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008534:	2201      	movs	r2, #1
 8008536:	2109      	movs	r1, #9
 8008538:	f7ff ffa0 	bl	800847c <std>
 800853c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008540:	2202      	movs	r2, #2
 8008542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008546:	2112      	movs	r1, #18
 8008548:	f7ff bf98 	b.w	800847c <std>
 800854c:	200005fc 	.word	0x200005fc
 8008550:	200004c4 	.word	0x200004c4
 8008554:	080084c5 	.word	0x080084c5

08008558 <__sfp_lock_acquire>:
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <__sfp_lock_acquire+0x8>)
 800855a:	f000 b95b 	b.w	8008814 <__retarget_lock_acquire_recursive>
 800855e:	bf00      	nop
 8008560:	20000605 	.word	0x20000605

08008564 <__sfp_lock_release>:
 8008564:	4801      	ldr	r0, [pc, #4]	; (800856c <__sfp_lock_release+0x8>)
 8008566:	f000 b956 	b.w	8008816 <__retarget_lock_release_recursive>
 800856a:	bf00      	nop
 800856c:	20000605 	.word	0x20000605

08008570 <__sinit>:
 8008570:	b510      	push	{r4, lr}
 8008572:	4604      	mov	r4, r0
 8008574:	f7ff fff0 	bl	8008558 <__sfp_lock_acquire>
 8008578:	6a23      	ldr	r3, [r4, #32]
 800857a:	b11b      	cbz	r3, 8008584 <__sinit+0x14>
 800857c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008580:	f7ff bff0 	b.w	8008564 <__sfp_lock_release>
 8008584:	4b04      	ldr	r3, [pc, #16]	; (8008598 <__sinit+0x28>)
 8008586:	6223      	str	r3, [r4, #32]
 8008588:	4b04      	ldr	r3, [pc, #16]	; (800859c <__sinit+0x2c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1f5      	bne.n	800857c <__sinit+0xc>
 8008590:	f7ff ffc4 	bl	800851c <global_stdio_init.part.0>
 8008594:	e7f2      	b.n	800857c <__sinit+0xc>
 8008596:	bf00      	nop
 8008598:	080084dd 	.word	0x080084dd
 800859c:	200005fc 	.word	0x200005fc

080085a0 <_fwalk_sglue>:
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	4607      	mov	r7, r0
 80085a6:	4688      	mov	r8, r1
 80085a8:	4614      	mov	r4, r2
 80085aa:	2600      	movs	r6, #0
 80085ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085b0:	f1b9 0901 	subs.w	r9, r9, #1
 80085b4:	d505      	bpl.n	80085c2 <_fwalk_sglue+0x22>
 80085b6:	6824      	ldr	r4, [r4, #0]
 80085b8:	2c00      	cmp	r4, #0
 80085ba:	d1f7      	bne.n	80085ac <_fwalk_sglue+0xc>
 80085bc:	4630      	mov	r0, r6
 80085be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c2:	89ab      	ldrh	r3, [r5, #12]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d907      	bls.n	80085d8 <_fwalk_sglue+0x38>
 80085c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085cc:	3301      	adds	r3, #1
 80085ce:	d003      	beq.n	80085d8 <_fwalk_sglue+0x38>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4638      	mov	r0, r7
 80085d4:	47c0      	blx	r8
 80085d6:	4306      	orrs	r6, r0
 80085d8:	3568      	adds	r5, #104	; 0x68
 80085da:	e7e9      	b.n	80085b0 <_fwalk_sglue+0x10>

080085dc <siprintf>:
 80085dc:	b40e      	push	{r1, r2, r3}
 80085de:	b500      	push	{lr}
 80085e0:	b09c      	sub	sp, #112	; 0x70
 80085e2:	ab1d      	add	r3, sp, #116	; 0x74
 80085e4:	9002      	str	r0, [sp, #8]
 80085e6:	9006      	str	r0, [sp, #24]
 80085e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085ec:	4809      	ldr	r0, [pc, #36]	; (8008614 <siprintf+0x38>)
 80085ee:	9107      	str	r1, [sp, #28]
 80085f0:	9104      	str	r1, [sp, #16]
 80085f2:	4909      	ldr	r1, [pc, #36]	; (8008618 <siprintf+0x3c>)
 80085f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f8:	9105      	str	r1, [sp, #20]
 80085fa:	6800      	ldr	r0, [r0, #0]
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	a902      	add	r1, sp, #8
 8008600:	f002 f922 	bl	800a848 <_svfiprintf_r>
 8008604:	9b02      	ldr	r3, [sp, #8]
 8008606:	2200      	movs	r2, #0
 8008608:	701a      	strb	r2, [r3, #0]
 800860a:	b01c      	add	sp, #112	; 0x70
 800860c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008610:	b003      	add	sp, #12
 8008612:	4770      	bx	lr
 8008614:	20000278 	.word	0x20000278
 8008618:	ffff0208 	.word	0xffff0208

0800861c <__sread>:
 800861c:	b510      	push	{r4, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008624:	f000 f8a8 	bl	8008778 <_read_r>
 8008628:	2800      	cmp	r0, #0
 800862a:	bfab      	itete	ge
 800862c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800862e:	89a3      	ldrhlt	r3, [r4, #12]
 8008630:	181b      	addge	r3, r3, r0
 8008632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008636:	bfac      	ite	ge
 8008638:	6563      	strge	r3, [r4, #84]	; 0x54
 800863a:	81a3      	strhlt	r3, [r4, #12]
 800863c:	bd10      	pop	{r4, pc}

0800863e <__swrite>:
 800863e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008642:	461f      	mov	r7, r3
 8008644:	898b      	ldrh	r3, [r1, #12]
 8008646:	05db      	lsls	r3, r3, #23
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	4616      	mov	r6, r2
 800864e:	d505      	bpl.n	800865c <__swrite+0x1e>
 8008650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008654:	2302      	movs	r3, #2
 8008656:	2200      	movs	r2, #0
 8008658:	f000 f87c 	bl	8008754 <_lseek_r>
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008662:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	4632      	mov	r2, r6
 800866a:	463b      	mov	r3, r7
 800866c:	4628      	mov	r0, r5
 800866e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008672:	f000 b893 	b.w	800879c <_write_r>

08008676 <__sseek>:
 8008676:	b510      	push	{r4, lr}
 8008678:	460c      	mov	r4, r1
 800867a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867e:	f000 f869 	bl	8008754 <_lseek_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	bf15      	itete	ne
 8008688:	6560      	strne	r0, [r4, #84]	; 0x54
 800868a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800868e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008692:	81a3      	strheq	r3, [r4, #12]
 8008694:	bf18      	it	ne
 8008696:	81a3      	strhne	r3, [r4, #12]
 8008698:	bd10      	pop	{r4, pc}

0800869a <__sclose>:
 800869a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869e:	f000 b849 	b.w	8008734 <_close_r>

080086a2 <memset>:
 80086a2:	4402      	add	r2, r0
 80086a4:	4603      	mov	r3, r0
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d100      	bne.n	80086ac <memset+0xa>
 80086aa:	4770      	bx	lr
 80086ac:	f803 1b01 	strb.w	r1, [r3], #1
 80086b0:	e7f9      	b.n	80086a6 <memset+0x4>

080086b2 <strncmp>:
 80086b2:	b510      	push	{r4, lr}
 80086b4:	b16a      	cbz	r2, 80086d2 <strncmp+0x20>
 80086b6:	3901      	subs	r1, #1
 80086b8:	1884      	adds	r4, r0, r2
 80086ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d103      	bne.n	80086ce <strncmp+0x1c>
 80086c6:	42a0      	cmp	r0, r4
 80086c8:	d001      	beq.n	80086ce <strncmp+0x1c>
 80086ca:	2a00      	cmp	r2, #0
 80086cc:	d1f5      	bne.n	80086ba <strncmp+0x8>
 80086ce:	1ad0      	subs	r0, r2, r3
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	4610      	mov	r0, r2
 80086d4:	e7fc      	b.n	80086d0 <strncmp+0x1e>

080086d6 <__strtok_r>:
 80086d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086d8:	b908      	cbnz	r0, 80086de <__strtok_r+0x8>
 80086da:	6810      	ldr	r0, [r2, #0]
 80086dc:	b188      	cbz	r0, 8008702 <__strtok_r+0x2c>
 80086de:	4604      	mov	r4, r0
 80086e0:	4620      	mov	r0, r4
 80086e2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80086e6:	460f      	mov	r7, r1
 80086e8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80086ec:	b91e      	cbnz	r6, 80086f6 <__strtok_r+0x20>
 80086ee:	b965      	cbnz	r5, 800870a <__strtok_r+0x34>
 80086f0:	6015      	str	r5, [r2, #0]
 80086f2:	4628      	mov	r0, r5
 80086f4:	e005      	b.n	8008702 <__strtok_r+0x2c>
 80086f6:	42b5      	cmp	r5, r6
 80086f8:	d1f6      	bne.n	80086e8 <__strtok_r+0x12>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1f0      	bne.n	80086e0 <__strtok_r+0xa>
 80086fe:	6014      	str	r4, [r2, #0]
 8008700:	7003      	strb	r3, [r0, #0]
 8008702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008704:	461c      	mov	r4, r3
 8008706:	e00c      	b.n	8008722 <__strtok_r+0x4c>
 8008708:	b915      	cbnz	r5, 8008710 <__strtok_r+0x3a>
 800870a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800870e:	460e      	mov	r6, r1
 8008710:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008714:	42ab      	cmp	r3, r5
 8008716:	d1f7      	bne.n	8008708 <__strtok_r+0x32>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0f3      	beq.n	8008704 <__strtok_r+0x2e>
 800871c:	2300      	movs	r3, #0
 800871e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008722:	6014      	str	r4, [r2, #0]
 8008724:	e7ed      	b.n	8008702 <__strtok_r+0x2c>

08008726 <strtok_r>:
 8008726:	2301      	movs	r3, #1
 8008728:	f7ff bfd5 	b.w	80086d6 <__strtok_r>

0800872c <_localeconv_r>:
 800872c:	4800      	ldr	r0, [pc, #0]	; (8008730 <_localeconv_r+0x4>)
 800872e:	4770      	bx	lr
 8008730:	200001b0 	.word	0x200001b0

08008734 <_close_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d06      	ldr	r5, [pc, #24]	; (8008750 <_close_r+0x1c>)
 8008738:	2300      	movs	r3, #0
 800873a:	4604      	mov	r4, r0
 800873c:	4608      	mov	r0, r1
 800873e:	602b      	str	r3, [r5, #0]
 8008740:	f7f9 ffcb 	bl	80026da <_close>
 8008744:	1c43      	adds	r3, r0, #1
 8008746:	d102      	bne.n	800874e <_close_r+0x1a>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	b103      	cbz	r3, 800874e <_close_r+0x1a>
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	20000600 	.word	0x20000600

08008754 <_lseek_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4d07      	ldr	r5, [pc, #28]	; (8008774 <_lseek_r+0x20>)
 8008758:	4604      	mov	r4, r0
 800875a:	4608      	mov	r0, r1
 800875c:	4611      	mov	r1, r2
 800875e:	2200      	movs	r2, #0
 8008760:	602a      	str	r2, [r5, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	f7f9 ffe0 	bl	8002728 <_lseek>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_lseek_r+0x1e>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_lseek_r+0x1e>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	20000600 	.word	0x20000600

08008778 <_read_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d07      	ldr	r5, [pc, #28]	; (8008798 <_read_r+0x20>)
 800877c:	4604      	mov	r4, r0
 800877e:	4608      	mov	r0, r1
 8008780:	4611      	mov	r1, r2
 8008782:	2200      	movs	r2, #0
 8008784:	602a      	str	r2, [r5, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	f7f9 ff6e 	bl	8002668 <_read>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_read_r+0x1e>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_read_r+0x1e>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000600 	.word	0x20000600

0800879c <_write_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	; (80087bc <_write_r+0x20>)
 80087a0:	4604      	mov	r4, r0
 80087a2:	4608      	mov	r0, r1
 80087a4:	4611      	mov	r1, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	602a      	str	r2, [r5, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f7f9 ff79 	bl	80026a2 <_write>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_write_r+0x1e>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_write_r+0x1e>
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	20000600 	.word	0x20000600

080087c0 <__errno>:
 80087c0:	4b01      	ldr	r3, [pc, #4]	; (80087c8 <__errno+0x8>)
 80087c2:	6818      	ldr	r0, [r3, #0]
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	20000278 	.word	0x20000278

080087cc <__libc_init_array>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	4d0d      	ldr	r5, [pc, #52]	; (8008804 <__libc_init_array+0x38>)
 80087d0:	4c0d      	ldr	r4, [pc, #52]	; (8008808 <__libc_init_array+0x3c>)
 80087d2:	1b64      	subs	r4, r4, r5
 80087d4:	10a4      	asrs	r4, r4, #2
 80087d6:	2600      	movs	r6, #0
 80087d8:	42a6      	cmp	r6, r4
 80087da:	d109      	bne.n	80087f0 <__libc_init_array+0x24>
 80087dc:	4d0b      	ldr	r5, [pc, #44]	; (800880c <__libc_init_array+0x40>)
 80087de:	4c0c      	ldr	r4, [pc, #48]	; (8008810 <__libc_init_array+0x44>)
 80087e0:	f003 f8a8 	bl	800b934 <_init>
 80087e4:	1b64      	subs	r4, r4, r5
 80087e6:	10a4      	asrs	r4, r4, #2
 80087e8:	2600      	movs	r6, #0
 80087ea:	42a6      	cmp	r6, r4
 80087ec:	d105      	bne.n	80087fa <__libc_init_array+0x2e>
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087f4:	4798      	blx	r3
 80087f6:	3601      	adds	r6, #1
 80087f8:	e7ee      	b.n	80087d8 <__libc_init_array+0xc>
 80087fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80087fe:	4798      	blx	r3
 8008800:	3601      	adds	r6, #1
 8008802:	e7f2      	b.n	80087ea <__libc_init_array+0x1e>
 8008804:	0800be18 	.word	0x0800be18
 8008808:	0800be18 	.word	0x0800be18
 800880c:	0800be18 	.word	0x0800be18
 8008810:	0800be1c 	.word	0x0800be1c

08008814 <__retarget_lock_acquire_recursive>:
 8008814:	4770      	bx	lr

08008816 <__retarget_lock_release_recursive>:
 8008816:	4770      	bx	lr

08008818 <memcpy>:
 8008818:	440a      	add	r2, r1
 800881a:	4291      	cmp	r1, r2
 800881c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008820:	d100      	bne.n	8008824 <memcpy+0xc>
 8008822:	4770      	bx	lr
 8008824:	b510      	push	{r4, lr}
 8008826:	f811 4b01 	ldrb.w	r4, [r1], #1
 800882a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800882e:	4291      	cmp	r1, r2
 8008830:	d1f9      	bne.n	8008826 <memcpy+0xe>
 8008832:	bd10      	pop	{r4, pc}
 8008834:	0000      	movs	r0, r0
	...

08008838 <nan>:
 8008838:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008840 <nan+0x8>
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	00000000 	.word	0x00000000
 8008844:	7ff80000 	.word	0x7ff80000

08008848 <nanf>:
 8008848:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008850 <nanf+0x8>
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	7fc00000 	.word	0x7fc00000

08008854 <quorem>:
 8008854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	6903      	ldr	r3, [r0, #16]
 800885a:	690c      	ldr	r4, [r1, #16]
 800885c:	42a3      	cmp	r3, r4
 800885e:	4607      	mov	r7, r0
 8008860:	db7e      	blt.n	8008960 <quorem+0x10c>
 8008862:	3c01      	subs	r4, #1
 8008864:	f101 0814 	add.w	r8, r1, #20
 8008868:	f100 0514 	add.w	r5, r0, #20
 800886c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800887a:	3301      	adds	r3, #1
 800887c:	429a      	cmp	r2, r3
 800887e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008882:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008886:	fbb2 f6f3 	udiv	r6, r2, r3
 800888a:	d331      	bcc.n	80088f0 <quorem+0x9c>
 800888c:	f04f 0e00 	mov.w	lr, #0
 8008890:	4640      	mov	r0, r8
 8008892:	46ac      	mov	ip, r5
 8008894:	46f2      	mov	sl, lr
 8008896:	f850 2b04 	ldr.w	r2, [r0], #4
 800889a:	b293      	uxth	r3, r2
 800889c:	fb06 e303 	mla	r3, r6, r3, lr
 80088a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088a4:	0c1a      	lsrs	r2, r3, #16
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ebaa 0303 	sub.w	r3, sl, r3
 80088ac:	f8dc a000 	ldr.w	sl, [ip]
 80088b0:	fa13 f38a 	uxtah	r3, r3, sl
 80088b4:	fb06 220e 	mla	r2, r6, lr, r2
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	9b00      	ldr	r3, [sp, #0]
 80088bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088c0:	b292      	uxth	r2, r2
 80088c2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80088c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80088ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80088ce:	4581      	cmp	r9, r0
 80088d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088d4:	f84c 3b04 	str.w	r3, [ip], #4
 80088d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80088dc:	d2db      	bcs.n	8008896 <quorem+0x42>
 80088de:	f855 300b 	ldr.w	r3, [r5, fp]
 80088e2:	b92b      	cbnz	r3, 80088f0 <quorem+0x9c>
 80088e4:	9b01      	ldr	r3, [sp, #4]
 80088e6:	3b04      	subs	r3, #4
 80088e8:	429d      	cmp	r5, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	d32c      	bcc.n	8008948 <quorem+0xf4>
 80088ee:	613c      	str	r4, [r7, #16]
 80088f0:	4638      	mov	r0, r7
 80088f2:	f001 fd5b 	bl	800a3ac <__mcmp>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	db22      	blt.n	8008940 <quorem+0xec>
 80088fa:	3601      	adds	r6, #1
 80088fc:	4629      	mov	r1, r5
 80088fe:	2000      	movs	r0, #0
 8008900:	f858 2b04 	ldr.w	r2, [r8], #4
 8008904:	f8d1 c000 	ldr.w	ip, [r1]
 8008908:	b293      	uxth	r3, r2
 800890a:	1ac3      	subs	r3, r0, r3
 800890c:	0c12      	lsrs	r2, r2, #16
 800890e:	fa13 f38c 	uxtah	r3, r3, ip
 8008912:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008916:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800891a:	b29b      	uxth	r3, r3
 800891c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008920:	45c1      	cmp	r9, r8
 8008922:	f841 3b04 	str.w	r3, [r1], #4
 8008926:	ea4f 4022 	mov.w	r0, r2, asr #16
 800892a:	d2e9      	bcs.n	8008900 <quorem+0xac>
 800892c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008930:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008934:	b922      	cbnz	r2, 8008940 <quorem+0xec>
 8008936:	3b04      	subs	r3, #4
 8008938:	429d      	cmp	r5, r3
 800893a:	461a      	mov	r2, r3
 800893c:	d30a      	bcc.n	8008954 <quorem+0x100>
 800893e:	613c      	str	r4, [r7, #16]
 8008940:	4630      	mov	r0, r6
 8008942:	b003      	add	sp, #12
 8008944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	3b04      	subs	r3, #4
 800894c:	2a00      	cmp	r2, #0
 800894e:	d1ce      	bne.n	80088ee <quorem+0x9a>
 8008950:	3c01      	subs	r4, #1
 8008952:	e7c9      	b.n	80088e8 <quorem+0x94>
 8008954:	6812      	ldr	r2, [r2, #0]
 8008956:	3b04      	subs	r3, #4
 8008958:	2a00      	cmp	r2, #0
 800895a:	d1f0      	bne.n	800893e <quorem+0xea>
 800895c:	3c01      	subs	r4, #1
 800895e:	e7eb      	b.n	8008938 <quorem+0xe4>
 8008960:	2000      	movs	r0, #0
 8008962:	e7ee      	b.n	8008942 <quorem+0xee>
 8008964:	0000      	movs	r0, r0
	...

08008968 <_dtoa_r>:
 8008968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896c:	ed2d 8b04 	vpush	{d8-d9}
 8008970:	69c5      	ldr	r5, [r0, #28]
 8008972:	b093      	sub	sp, #76	; 0x4c
 8008974:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008978:	ec57 6b10 	vmov	r6, r7, d0
 800897c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008980:	9107      	str	r1, [sp, #28]
 8008982:	4604      	mov	r4, r0
 8008984:	920a      	str	r2, [sp, #40]	; 0x28
 8008986:	930d      	str	r3, [sp, #52]	; 0x34
 8008988:	b975      	cbnz	r5, 80089a8 <_dtoa_r+0x40>
 800898a:	2010      	movs	r0, #16
 800898c:	f001 f982 	bl	8009c94 <malloc>
 8008990:	4602      	mov	r2, r0
 8008992:	61e0      	str	r0, [r4, #28]
 8008994:	b920      	cbnz	r0, 80089a0 <_dtoa_r+0x38>
 8008996:	4bae      	ldr	r3, [pc, #696]	; (8008c50 <_dtoa_r+0x2e8>)
 8008998:	21ef      	movs	r1, #239	; 0xef
 800899a:	48ae      	ldr	r0, [pc, #696]	; (8008c54 <_dtoa_r+0x2ec>)
 800899c:	f002 f92a 	bl	800abf4 <__assert_func>
 80089a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089a4:	6005      	str	r5, [r0, #0]
 80089a6:	60c5      	str	r5, [r0, #12]
 80089a8:	69e3      	ldr	r3, [r4, #28]
 80089aa:	6819      	ldr	r1, [r3, #0]
 80089ac:	b151      	cbz	r1, 80089c4 <_dtoa_r+0x5c>
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	604a      	str	r2, [r1, #4]
 80089b2:	2301      	movs	r3, #1
 80089b4:	4093      	lsls	r3, r2
 80089b6:	608b      	str	r3, [r1, #8]
 80089b8:	4620      	mov	r0, r4
 80089ba:	f001 fa71 	bl	8009ea0 <_Bfree>
 80089be:	69e3      	ldr	r3, [r4, #28]
 80089c0:	2200      	movs	r2, #0
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	1e3b      	subs	r3, r7, #0
 80089c6:	bfbb      	ittet	lt
 80089c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80089cc:	9303      	strlt	r3, [sp, #12]
 80089ce:	2300      	movge	r3, #0
 80089d0:	2201      	movlt	r2, #1
 80089d2:	bfac      	ite	ge
 80089d4:	f8c8 3000 	strge.w	r3, [r8]
 80089d8:	f8c8 2000 	strlt.w	r2, [r8]
 80089dc:	4b9e      	ldr	r3, [pc, #632]	; (8008c58 <_dtoa_r+0x2f0>)
 80089de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80089e2:	ea33 0308 	bics.w	r3, r3, r8
 80089e6:	d11b      	bne.n	8008a20 <_dtoa_r+0xb8>
 80089e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80089f4:	4333      	orrs	r3, r6
 80089f6:	f000 8593 	beq.w	8009520 <_dtoa_r+0xbb8>
 80089fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089fc:	b963      	cbnz	r3, 8008a18 <_dtoa_r+0xb0>
 80089fe:	4b97      	ldr	r3, [pc, #604]	; (8008c5c <_dtoa_r+0x2f4>)
 8008a00:	e027      	b.n	8008a52 <_dtoa_r+0xea>
 8008a02:	4b97      	ldr	r3, [pc, #604]	; (8008c60 <_dtoa_r+0x2f8>)
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	3308      	adds	r3, #8
 8008a08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	9800      	ldr	r0, [sp, #0]
 8008a0e:	b013      	add	sp, #76	; 0x4c
 8008a10:	ecbd 8b04 	vpop	{d8-d9}
 8008a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a18:	4b90      	ldr	r3, [pc, #576]	; (8008c5c <_dtoa_r+0x2f4>)
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	3303      	adds	r3, #3
 8008a1e:	e7f3      	b.n	8008a08 <_dtoa_r+0xa0>
 8008a20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a24:	2200      	movs	r2, #0
 8008a26:	ec51 0b17 	vmov	r0, r1, d7
 8008a2a:	eeb0 8a47 	vmov.f32	s16, s14
 8008a2e:	eef0 8a67 	vmov.f32	s17, s15
 8008a32:	2300      	movs	r3, #0
 8008a34:	f7f8 f850 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a38:	4681      	mov	r9, r0
 8008a3a:	b160      	cbz	r0, 8008a56 <_dtoa_r+0xee>
 8008a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a3e:	2301      	movs	r3, #1
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 8568 	beq.w	800951a <_dtoa_r+0xbb2>
 8008a4a:	4b86      	ldr	r3, [pc, #536]	; (8008c64 <_dtoa_r+0x2fc>)
 8008a4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	e7da      	b.n	8008a0c <_dtoa_r+0xa4>
 8008a56:	aa10      	add	r2, sp, #64	; 0x40
 8008a58:	a911      	add	r1, sp, #68	; 0x44
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8008a60:	eef0 0a68 	vmov.f32	s1, s17
 8008a64:	f001 fdb8 	bl	800a5d8 <__d2b>
 8008a68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a6c:	4682      	mov	sl, r0
 8008a6e:	2d00      	cmp	r5, #0
 8008a70:	d07f      	beq.n	8008b72 <_dtoa_r+0x20a>
 8008a72:	ee18 3a90 	vmov	r3, s17
 8008a76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008a7e:	ec51 0b18 	vmov	r0, r1, d8
 8008a82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008a86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008a8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008a8e:	4619      	mov	r1, r3
 8008a90:	2200      	movs	r2, #0
 8008a92:	4b75      	ldr	r3, [pc, #468]	; (8008c68 <_dtoa_r+0x300>)
 8008a94:	f7f7 fc00 	bl	8000298 <__aeabi_dsub>
 8008a98:	a367      	add	r3, pc, #412	; (adr r3, 8008c38 <_dtoa_r+0x2d0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fdb3 	bl	8000608 <__aeabi_dmul>
 8008aa2:	a367      	add	r3, pc, #412	; (adr r3, 8008c40 <_dtoa_r+0x2d8>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	f7f7 fbf8 	bl	800029c <__adddf3>
 8008aac:	4606      	mov	r6, r0
 8008aae:	4628      	mov	r0, r5
 8008ab0:	460f      	mov	r7, r1
 8008ab2:	f7f7 fd3f 	bl	8000534 <__aeabi_i2d>
 8008ab6:	a364      	add	r3, pc, #400	; (adr r3, 8008c48 <_dtoa_r+0x2e0>)
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f7f7 fda4 	bl	8000608 <__aeabi_dmul>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	f7f7 fbe8 	bl	800029c <__adddf3>
 8008acc:	4606      	mov	r6, r0
 8008ace:	460f      	mov	r7, r1
 8008ad0:	f7f8 f84a 	bl	8000b68 <__aeabi_d2iz>
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4683      	mov	fp, r0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4630      	mov	r0, r6
 8008adc:	4639      	mov	r1, r7
 8008ade:	f7f8 f805 	bl	8000aec <__aeabi_dcmplt>
 8008ae2:	b148      	cbz	r0, 8008af8 <_dtoa_r+0x190>
 8008ae4:	4658      	mov	r0, fp
 8008ae6:	f7f7 fd25 	bl	8000534 <__aeabi_i2d>
 8008aea:	4632      	mov	r2, r6
 8008aec:	463b      	mov	r3, r7
 8008aee:	f7f7 fff3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008af2:	b908      	cbnz	r0, 8008af8 <_dtoa_r+0x190>
 8008af4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008af8:	f1bb 0f16 	cmp.w	fp, #22
 8008afc:	d857      	bhi.n	8008bae <_dtoa_r+0x246>
 8008afe:	4b5b      	ldr	r3, [pc, #364]	; (8008c6c <_dtoa_r+0x304>)
 8008b00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	ec51 0b18 	vmov	r0, r1, d8
 8008b0c:	f7f7 ffee 	bl	8000aec <__aeabi_dcmplt>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d04e      	beq.n	8008bb2 <_dtoa_r+0x24a>
 8008b14:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b18:	2300      	movs	r3, #0
 8008b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8008b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b1e:	1b5b      	subs	r3, r3, r5
 8008b20:	1e5a      	subs	r2, r3, #1
 8008b22:	bf45      	ittet	mi
 8008b24:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b28:	9305      	strmi	r3, [sp, #20]
 8008b2a:	2300      	movpl	r3, #0
 8008b2c:	2300      	movmi	r3, #0
 8008b2e:	9206      	str	r2, [sp, #24]
 8008b30:	bf54      	ite	pl
 8008b32:	9305      	strpl	r3, [sp, #20]
 8008b34:	9306      	strmi	r3, [sp, #24]
 8008b36:	f1bb 0f00 	cmp.w	fp, #0
 8008b3a:	db3c      	blt.n	8008bb6 <_dtoa_r+0x24e>
 8008b3c:	9b06      	ldr	r3, [sp, #24]
 8008b3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008b42:	445b      	add	r3, fp
 8008b44:	9306      	str	r3, [sp, #24]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9308      	str	r3, [sp, #32]
 8008b4a:	9b07      	ldr	r3, [sp, #28]
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d868      	bhi.n	8008c22 <_dtoa_r+0x2ba>
 8008b50:	2b05      	cmp	r3, #5
 8008b52:	bfc4      	itt	gt
 8008b54:	3b04      	subgt	r3, #4
 8008b56:	9307      	strgt	r3, [sp, #28]
 8008b58:	9b07      	ldr	r3, [sp, #28]
 8008b5a:	f1a3 0302 	sub.w	r3, r3, #2
 8008b5e:	bfcc      	ite	gt
 8008b60:	2500      	movgt	r5, #0
 8008b62:	2501      	movle	r5, #1
 8008b64:	2b03      	cmp	r3, #3
 8008b66:	f200 8085 	bhi.w	8008c74 <_dtoa_r+0x30c>
 8008b6a:	e8df f003 	tbb	[pc, r3]
 8008b6e:	3b2e      	.short	0x3b2e
 8008b70:	5839      	.short	0x5839
 8008b72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008b76:	441d      	add	r5, r3
 8008b78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	bfc1      	itttt	gt
 8008b80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008b84:	fa08 f803 	lslgt.w	r8, r8, r3
 8008b88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008b8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008b90:	bfd6      	itet	le
 8008b92:	f1c3 0320 	rsble	r3, r3, #32
 8008b96:	ea48 0003 	orrgt.w	r0, r8, r3
 8008b9a:	fa06 f003 	lslle.w	r0, r6, r3
 8008b9e:	f7f7 fcb9 	bl	8000514 <__aeabi_ui2d>
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008ba8:	3d01      	subs	r5, #1
 8008baa:	920e      	str	r2, [sp, #56]	; 0x38
 8008bac:	e76f      	b.n	8008a8e <_dtoa_r+0x126>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e7b3      	b.n	8008b1a <_dtoa_r+0x1b2>
 8008bb2:	900c      	str	r0, [sp, #48]	; 0x30
 8008bb4:	e7b2      	b.n	8008b1c <_dtoa_r+0x1b4>
 8008bb6:	9b05      	ldr	r3, [sp, #20]
 8008bb8:	eba3 030b 	sub.w	r3, r3, fp
 8008bbc:	9305      	str	r3, [sp, #20]
 8008bbe:	f1cb 0300 	rsb	r3, fp, #0
 8008bc2:	9308      	str	r3, [sp, #32]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc8:	e7bf      	b.n	8008b4a <_dtoa_r+0x1e2>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dc52      	bgt.n	8008c7a <_dtoa_r+0x312>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	461a      	mov	r2, r3
 8008bdc:	920a      	str	r2, [sp, #40]	; 0x28
 8008bde:	e00b      	b.n	8008bf8 <_dtoa_r+0x290>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e7f3      	b.n	8008bcc <_dtoa_r+0x264>
 8008be4:	2300      	movs	r3, #0
 8008be6:	9309      	str	r3, [sp, #36]	; 0x24
 8008be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bea:	445b      	add	r3, fp
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	bfb8      	it	lt
 8008bf6:	2301      	movlt	r3, #1
 8008bf8:	69e0      	ldr	r0, [r4, #28]
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	2204      	movs	r2, #4
 8008bfe:	f102 0614 	add.w	r6, r2, #20
 8008c02:	429e      	cmp	r6, r3
 8008c04:	d93d      	bls.n	8008c82 <_dtoa_r+0x31a>
 8008c06:	6041      	str	r1, [r0, #4]
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f001 f909 	bl	8009e20 <_Balloc>
 8008c0e:	9000      	str	r0, [sp, #0]
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d139      	bne.n	8008c88 <_dtoa_r+0x320>
 8008c14:	4b16      	ldr	r3, [pc, #88]	; (8008c70 <_dtoa_r+0x308>)
 8008c16:	4602      	mov	r2, r0
 8008c18:	f240 11af 	movw	r1, #431	; 0x1af
 8008c1c:	e6bd      	b.n	800899a <_dtoa_r+0x32>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e7e1      	b.n	8008be6 <_dtoa_r+0x27e>
 8008c22:	2501      	movs	r5, #1
 8008c24:	2300      	movs	r3, #0
 8008c26:	9307      	str	r3, [sp, #28]
 8008c28:	9509      	str	r5, [sp, #36]	; 0x24
 8008c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	9304      	str	r3, [sp, #16]
 8008c32:	2200      	movs	r2, #0
 8008c34:	2312      	movs	r3, #18
 8008c36:	e7d1      	b.n	8008bdc <_dtoa_r+0x274>
 8008c38:	636f4361 	.word	0x636f4361
 8008c3c:	3fd287a7 	.word	0x3fd287a7
 8008c40:	8b60c8b3 	.word	0x8b60c8b3
 8008c44:	3fc68a28 	.word	0x3fc68a28
 8008c48:	509f79fb 	.word	0x509f79fb
 8008c4c:	3fd34413 	.word	0x3fd34413
 8008c50:	0800bb17 	.word	0x0800bb17
 8008c54:	0800bb2e 	.word	0x0800bb2e
 8008c58:	7ff00000 	.word	0x7ff00000
 8008c5c:	0800bb13 	.word	0x0800bb13
 8008c60:	0800bb0a 	.word	0x0800bb0a
 8008c64:	0800bada 	.word	0x0800bada
 8008c68:	3ff80000 	.word	0x3ff80000
 8008c6c:	0800bc78 	.word	0x0800bc78
 8008c70:	0800bb86 	.word	0x0800bb86
 8008c74:	2301      	movs	r3, #1
 8008c76:	9309      	str	r3, [sp, #36]	; 0x24
 8008c78:	e7d7      	b.n	8008c2a <_dtoa_r+0x2c2>
 8008c7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7c:	9301      	str	r3, [sp, #4]
 8008c7e:	9304      	str	r3, [sp, #16]
 8008c80:	e7ba      	b.n	8008bf8 <_dtoa_r+0x290>
 8008c82:	3101      	adds	r1, #1
 8008c84:	0052      	lsls	r2, r2, #1
 8008c86:	e7ba      	b.n	8008bfe <_dtoa_r+0x296>
 8008c88:	69e3      	ldr	r3, [r4, #28]
 8008c8a:	9a00      	ldr	r2, [sp, #0]
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	2b0e      	cmp	r3, #14
 8008c92:	f200 80a8 	bhi.w	8008de6 <_dtoa_r+0x47e>
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	f000 80a5 	beq.w	8008de6 <_dtoa_r+0x47e>
 8008c9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ca0:	dd38      	ble.n	8008d14 <_dtoa_r+0x3ac>
 8008ca2:	4bc0      	ldr	r3, [pc, #768]	; (8008fa4 <_dtoa_r+0x63c>)
 8008ca4:	f00b 020f 	and.w	r2, fp, #15
 8008ca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008cb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008cb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008cb8:	d019      	beq.n	8008cee <_dtoa_r+0x386>
 8008cba:	4bbb      	ldr	r3, [pc, #748]	; (8008fa8 <_dtoa_r+0x640>)
 8008cbc:	ec51 0b18 	vmov	r0, r1, d8
 8008cc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cc4:	f7f7 fdca 	bl	800085c <__aeabi_ddiv>
 8008cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ccc:	f008 080f 	and.w	r8, r8, #15
 8008cd0:	2503      	movs	r5, #3
 8008cd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008fa8 <_dtoa_r+0x640>
 8008cd6:	f1b8 0f00 	cmp.w	r8, #0
 8008cda:	d10a      	bne.n	8008cf2 <_dtoa_r+0x38a>
 8008cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	463b      	mov	r3, r7
 8008ce4:	f7f7 fdba 	bl	800085c <__aeabi_ddiv>
 8008ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cec:	e02b      	b.n	8008d46 <_dtoa_r+0x3de>
 8008cee:	2502      	movs	r5, #2
 8008cf0:	e7ef      	b.n	8008cd2 <_dtoa_r+0x36a>
 8008cf2:	f018 0f01 	tst.w	r8, #1
 8008cf6:	d008      	beq.n	8008d0a <_dtoa_r+0x3a2>
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d00:	f7f7 fc82 	bl	8000608 <__aeabi_dmul>
 8008d04:	3501      	adds	r5, #1
 8008d06:	4606      	mov	r6, r0
 8008d08:	460f      	mov	r7, r1
 8008d0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d0e:	f109 0908 	add.w	r9, r9, #8
 8008d12:	e7e0      	b.n	8008cd6 <_dtoa_r+0x36e>
 8008d14:	f000 809f 	beq.w	8008e56 <_dtoa_r+0x4ee>
 8008d18:	f1cb 0600 	rsb	r6, fp, #0
 8008d1c:	4ba1      	ldr	r3, [pc, #644]	; (8008fa4 <_dtoa_r+0x63c>)
 8008d1e:	4fa2      	ldr	r7, [pc, #648]	; (8008fa8 <_dtoa_r+0x640>)
 8008d20:	f006 020f 	and.w	r2, r6, #15
 8008d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2c:	ec51 0b18 	vmov	r0, r1, d8
 8008d30:	f7f7 fc6a 	bl	8000608 <__aeabi_dmul>
 8008d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d38:	1136      	asrs	r6, r6, #4
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2502      	movs	r5, #2
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	d17e      	bne.n	8008e40 <_dtoa_r+0x4d8>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1d0      	bne.n	8008ce8 <_dtoa_r+0x380>
 8008d46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f000 8084 	beq.w	8008e5a <_dtoa_r+0x4f2>
 8008d52:	4b96      	ldr	r3, [pc, #600]	; (8008fac <_dtoa_r+0x644>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	4640      	mov	r0, r8
 8008d58:	4649      	mov	r1, r9
 8008d5a:	f7f7 fec7 	bl	8000aec <__aeabi_dcmplt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d07b      	beq.n	8008e5a <_dtoa_r+0x4f2>
 8008d62:	9b04      	ldr	r3, [sp, #16]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d078      	beq.n	8008e5a <_dtoa_r+0x4f2>
 8008d68:	9b01      	ldr	r3, [sp, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dd39      	ble.n	8008de2 <_dtoa_r+0x47a>
 8008d6e:	4b90      	ldr	r3, [pc, #576]	; (8008fb0 <_dtoa_r+0x648>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	4640      	mov	r0, r8
 8008d74:	4649      	mov	r1, r9
 8008d76:	f7f7 fc47 	bl	8000608 <__aeabi_dmul>
 8008d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d7e:	9e01      	ldr	r6, [sp, #4]
 8008d80:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008d84:	3501      	adds	r5, #1
 8008d86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f7f7 fbd2 	bl	8000534 <__aeabi_i2d>
 8008d90:	4642      	mov	r2, r8
 8008d92:	464b      	mov	r3, r9
 8008d94:	f7f7 fc38 	bl	8000608 <__aeabi_dmul>
 8008d98:	4b86      	ldr	r3, [pc, #536]	; (8008fb4 <_dtoa_r+0x64c>)
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f7f7 fa7e 	bl	800029c <__adddf3>
 8008da0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008da4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	2e00      	cmp	r6, #0
 8008dac:	d158      	bne.n	8008e60 <_dtoa_r+0x4f8>
 8008dae:	4b82      	ldr	r3, [pc, #520]	; (8008fb8 <_dtoa_r+0x650>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	4640      	mov	r0, r8
 8008db4:	4649      	mov	r1, r9
 8008db6:	f7f7 fa6f 	bl	8000298 <__aeabi_dsub>
 8008dba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	4689      	mov	r9, r1
 8008dc2:	f7f7 feb1 	bl	8000b28 <__aeabi_dcmpgt>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f040 8296 	bne.w	80092f8 <_dtoa_r+0x990>
 8008dcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	f7f7 fe88 	bl	8000aec <__aeabi_dcmplt>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	f040 8289 	bne.w	80092f4 <_dtoa_r+0x98c>
 8008de2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008de6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f2c0 814e 	blt.w	800908a <_dtoa_r+0x722>
 8008dee:	f1bb 0f0e 	cmp.w	fp, #14
 8008df2:	f300 814a 	bgt.w	800908a <_dtoa_r+0x722>
 8008df6:	4b6b      	ldr	r3, [pc, #428]	; (8008fa4 <_dtoa_r+0x63c>)
 8008df8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f280 80dc 	bge.w	8008fc0 <_dtoa_r+0x658>
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f300 80d8 	bgt.w	8008fc0 <_dtoa_r+0x658>
 8008e10:	f040 826f 	bne.w	80092f2 <_dtoa_r+0x98a>
 8008e14:	4b68      	ldr	r3, [pc, #416]	; (8008fb8 <_dtoa_r+0x650>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	4640      	mov	r0, r8
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	f7f7 fbf4 	bl	8000608 <__aeabi_dmul>
 8008e20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e24:	f7f7 fe76 	bl	8000b14 <__aeabi_dcmpge>
 8008e28:	9e04      	ldr	r6, [sp, #16]
 8008e2a:	4637      	mov	r7, r6
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	f040 8245 	bne.w	80092bc <_dtoa_r+0x954>
 8008e32:	9d00      	ldr	r5, [sp, #0]
 8008e34:	2331      	movs	r3, #49	; 0x31
 8008e36:	f805 3b01 	strb.w	r3, [r5], #1
 8008e3a:	f10b 0b01 	add.w	fp, fp, #1
 8008e3e:	e241      	b.n	80092c4 <_dtoa_r+0x95c>
 8008e40:	07f2      	lsls	r2, r6, #31
 8008e42:	d505      	bpl.n	8008e50 <_dtoa_r+0x4e8>
 8008e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e48:	f7f7 fbde 	bl	8000608 <__aeabi_dmul>
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	2301      	movs	r3, #1
 8008e50:	1076      	asrs	r6, r6, #1
 8008e52:	3708      	adds	r7, #8
 8008e54:	e773      	b.n	8008d3e <_dtoa_r+0x3d6>
 8008e56:	2502      	movs	r5, #2
 8008e58:	e775      	b.n	8008d46 <_dtoa_r+0x3de>
 8008e5a:	9e04      	ldr	r6, [sp, #16]
 8008e5c:	465f      	mov	r7, fp
 8008e5e:	e792      	b.n	8008d86 <_dtoa_r+0x41e>
 8008e60:	9900      	ldr	r1, [sp, #0]
 8008e62:	4b50      	ldr	r3, [pc, #320]	; (8008fa4 <_dtoa_r+0x63c>)
 8008e64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e68:	4431      	add	r1, r6
 8008e6a:	9102      	str	r1, [sp, #8]
 8008e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e6e:	eeb0 9a47 	vmov.f32	s18, s14
 8008e72:	eef0 9a67 	vmov.f32	s19, s15
 8008e76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d044      	beq.n	8008f0c <_dtoa_r+0x5a4>
 8008e82:	494e      	ldr	r1, [pc, #312]	; (8008fbc <_dtoa_r+0x654>)
 8008e84:	2000      	movs	r0, #0
 8008e86:	f7f7 fce9 	bl	800085c <__aeabi_ddiv>
 8008e8a:	ec53 2b19 	vmov	r2, r3, d9
 8008e8e:	f7f7 fa03 	bl	8000298 <__aeabi_dsub>
 8008e92:	9d00      	ldr	r5, [sp, #0]
 8008e94:	ec41 0b19 	vmov	d9, r0, r1
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	f7f7 fe64 	bl	8000b68 <__aeabi_d2iz>
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	f7f7 fb47 	bl	8000534 <__aeabi_i2d>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	f7f7 f9f3 	bl	8000298 <__aeabi_dsub>
 8008eb2:	3630      	adds	r6, #48	; 0x30
 8008eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8008eb8:	ec53 2b19 	vmov	r2, r3, d9
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	4689      	mov	r9, r1
 8008ec0:	f7f7 fe14 	bl	8000aec <__aeabi_dcmplt>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d164      	bne.n	8008f92 <_dtoa_r+0x62a>
 8008ec8:	4642      	mov	r2, r8
 8008eca:	464b      	mov	r3, r9
 8008ecc:	4937      	ldr	r1, [pc, #220]	; (8008fac <_dtoa_r+0x644>)
 8008ece:	2000      	movs	r0, #0
 8008ed0:	f7f7 f9e2 	bl	8000298 <__aeabi_dsub>
 8008ed4:	ec53 2b19 	vmov	r2, r3, d9
 8008ed8:	f7f7 fe08 	bl	8000aec <__aeabi_dcmplt>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	f040 80b6 	bne.w	800904e <_dtoa_r+0x6e6>
 8008ee2:	9b02      	ldr	r3, [sp, #8]
 8008ee4:	429d      	cmp	r5, r3
 8008ee6:	f43f af7c 	beq.w	8008de2 <_dtoa_r+0x47a>
 8008eea:	4b31      	ldr	r3, [pc, #196]	; (8008fb0 <_dtoa_r+0x648>)
 8008eec:	ec51 0b19 	vmov	r0, r1, d9
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f7f7 fb89 	bl	8000608 <__aeabi_dmul>
 8008ef6:	4b2e      	ldr	r3, [pc, #184]	; (8008fb0 <_dtoa_r+0x648>)
 8008ef8:	ec41 0b19 	vmov	d9, r0, r1
 8008efc:	2200      	movs	r2, #0
 8008efe:	4640      	mov	r0, r8
 8008f00:	4649      	mov	r1, r9
 8008f02:	f7f7 fb81 	bl	8000608 <__aeabi_dmul>
 8008f06:	4680      	mov	r8, r0
 8008f08:	4689      	mov	r9, r1
 8008f0a:	e7c5      	b.n	8008e98 <_dtoa_r+0x530>
 8008f0c:	ec51 0b17 	vmov	r0, r1, d7
 8008f10:	f7f7 fb7a 	bl	8000608 <__aeabi_dmul>
 8008f14:	9b02      	ldr	r3, [sp, #8]
 8008f16:	9d00      	ldr	r5, [sp, #0]
 8008f18:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f1a:	ec41 0b19 	vmov	d9, r0, r1
 8008f1e:	4649      	mov	r1, r9
 8008f20:	4640      	mov	r0, r8
 8008f22:	f7f7 fe21 	bl	8000b68 <__aeabi_d2iz>
 8008f26:	4606      	mov	r6, r0
 8008f28:	f7f7 fb04 	bl	8000534 <__aeabi_i2d>
 8008f2c:	3630      	adds	r6, #48	; 0x30
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f7f7 f9af 	bl	8000298 <__aeabi_dsub>
 8008f3a:	f805 6b01 	strb.w	r6, [r5], #1
 8008f3e:	9b02      	ldr	r3, [sp, #8]
 8008f40:	429d      	cmp	r5, r3
 8008f42:	4680      	mov	r8, r0
 8008f44:	4689      	mov	r9, r1
 8008f46:	f04f 0200 	mov.w	r2, #0
 8008f4a:	d124      	bne.n	8008f96 <_dtoa_r+0x62e>
 8008f4c:	4b1b      	ldr	r3, [pc, #108]	; (8008fbc <_dtoa_r+0x654>)
 8008f4e:	ec51 0b19 	vmov	r0, r1, d9
 8008f52:	f7f7 f9a3 	bl	800029c <__adddf3>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	4649      	mov	r1, r9
 8008f5e:	f7f7 fde3 	bl	8000b28 <__aeabi_dcmpgt>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d173      	bne.n	800904e <_dtoa_r+0x6e6>
 8008f66:	ec53 2b19 	vmov	r2, r3, d9
 8008f6a:	4914      	ldr	r1, [pc, #80]	; (8008fbc <_dtoa_r+0x654>)
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f7f7 f993 	bl	8000298 <__aeabi_dsub>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	4640      	mov	r0, r8
 8008f78:	4649      	mov	r1, r9
 8008f7a:	f7f7 fdb7 	bl	8000aec <__aeabi_dcmplt>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f43f af2f 	beq.w	8008de2 <_dtoa_r+0x47a>
 8008f84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008f86:	1e6b      	subs	r3, r5, #1
 8008f88:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f8e:	2b30      	cmp	r3, #48	; 0x30
 8008f90:	d0f8      	beq.n	8008f84 <_dtoa_r+0x61c>
 8008f92:	46bb      	mov	fp, r7
 8008f94:	e04a      	b.n	800902c <_dtoa_r+0x6c4>
 8008f96:	4b06      	ldr	r3, [pc, #24]	; (8008fb0 <_dtoa_r+0x648>)
 8008f98:	f7f7 fb36 	bl	8000608 <__aeabi_dmul>
 8008f9c:	4680      	mov	r8, r0
 8008f9e:	4689      	mov	r9, r1
 8008fa0:	e7bd      	b.n	8008f1e <_dtoa_r+0x5b6>
 8008fa2:	bf00      	nop
 8008fa4:	0800bc78 	.word	0x0800bc78
 8008fa8:	0800bc50 	.word	0x0800bc50
 8008fac:	3ff00000 	.word	0x3ff00000
 8008fb0:	40240000 	.word	0x40240000
 8008fb4:	401c0000 	.word	0x401c0000
 8008fb8:	40140000 	.word	0x40140000
 8008fbc:	3fe00000 	.word	0x3fe00000
 8008fc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008fc4:	9d00      	ldr	r5, [sp, #0]
 8008fc6:	4642      	mov	r2, r8
 8008fc8:	464b      	mov	r3, r9
 8008fca:	4630      	mov	r0, r6
 8008fcc:	4639      	mov	r1, r7
 8008fce:	f7f7 fc45 	bl	800085c <__aeabi_ddiv>
 8008fd2:	f7f7 fdc9 	bl	8000b68 <__aeabi_d2iz>
 8008fd6:	9001      	str	r0, [sp, #4]
 8008fd8:	f7f7 faac 	bl	8000534 <__aeabi_i2d>
 8008fdc:	4642      	mov	r2, r8
 8008fde:	464b      	mov	r3, r9
 8008fe0:	f7f7 fb12 	bl	8000608 <__aeabi_dmul>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4630      	mov	r0, r6
 8008fea:	4639      	mov	r1, r7
 8008fec:	f7f7 f954 	bl	8000298 <__aeabi_dsub>
 8008ff0:	9e01      	ldr	r6, [sp, #4]
 8008ff2:	9f04      	ldr	r7, [sp, #16]
 8008ff4:	3630      	adds	r6, #48	; 0x30
 8008ff6:	f805 6b01 	strb.w	r6, [r5], #1
 8008ffa:	9e00      	ldr	r6, [sp, #0]
 8008ffc:	1bae      	subs	r6, r5, r6
 8008ffe:	42b7      	cmp	r7, r6
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	d134      	bne.n	8009070 <_dtoa_r+0x708>
 8009006:	f7f7 f949 	bl	800029c <__adddf3>
 800900a:	4642      	mov	r2, r8
 800900c:	464b      	mov	r3, r9
 800900e:	4606      	mov	r6, r0
 8009010:	460f      	mov	r7, r1
 8009012:	f7f7 fd89 	bl	8000b28 <__aeabi_dcmpgt>
 8009016:	b9c8      	cbnz	r0, 800904c <_dtoa_r+0x6e4>
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	4630      	mov	r0, r6
 800901e:	4639      	mov	r1, r7
 8009020:	f7f7 fd5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009024:	b110      	cbz	r0, 800902c <_dtoa_r+0x6c4>
 8009026:	9b01      	ldr	r3, [sp, #4]
 8009028:	07db      	lsls	r3, r3, #31
 800902a:	d40f      	bmi.n	800904c <_dtoa_r+0x6e4>
 800902c:	4651      	mov	r1, sl
 800902e:	4620      	mov	r0, r4
 8009030:	f000 ff36 	bl	8009ea0 <_Bfree>
 8009034:	2300      	movs	r3, #0
 8009036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009038:	702b      	strb	r3, [r5, #0]
 800903a:	f10b 0301 	add.w	r3, fp, #1
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009042:	2b00      	cmp	r3, #0
 8009044:	f43f ace2 	beq.w	8008a0c <_dtoa_r+0xa4>
 8009048:	601d      	str	r5, [r3, #0]
 800904a:	e4df      	b.n	8008a0c <_dtoa_r+0xa4>
 800904c:	465f      	mov	r7, fp
 800904e:	462b      	mov	r3, r5
 8009050:	461d      	mov	r5, r3
 8009052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009056:	2a39      	cmp	r2, #57	; 0x39
 8009058:	d106      	bne.n	8009068 <_dtoa_r+0x700>
 800905a:	9a00      	ldr	r2, [sp, #0]
 800905c:	429a      	cmp	r2, r3
 800905e:	d1f7      	bne.n	8009050 <_dtoa_r+0x6e8>
 8009060:	9900      	ldr	r1, [sp, #0]
 8009062:	2230      	movs	r2, #48	; 0x30
 8009064:	3701      	adds	r7, #1
 8009066:	700a      	strb	r2, [r1, #0]
 8009068:	781a      	ldrb	r2, [r3, #0]
 800906a:	3201      	adds	r2, #1
 800906c:	701a      	strb	r2, [r3, #0]
 800906e:	e790      	b.n	8008f92 <_dtoa_r+0x62a>
 8009070:	4ba3      	ldr	r3, [pc, #652]	; (8009300 <_dtoa_r+0x998>)
 8009072:	2200      	movs	r2, #0
 8009074:	f7f7 fac8 	bl	8000608 <__aeabi_dmul>
 8009078:	2200      	movs	r2, #0
 800907a:	2300      	movs	r3, #0
 800907c:	4606      	mov	r6, r0
 800907e:	460f      	mov	r7, r1
 8009080:	f7f7 fd2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009084:	2800      	cmp	r0, #0
 8009086:	d09e      	beq.n	8008fc6 <_dtoa_r+0x65e>
 8009088:	e7d0      	b.n	800902c <_dtoa_r+0x6c4>
 800908a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800908c:	2a00      	cmp	r2, #0
 800908e:	f000 80ca 	beq.w	8009226 <_dtoa_r+0x8be>
 8009092:	9a07      	ldr	r2, [sp, #28]
 8009094:	2a01      	cmp	r2, #1
 8009096:	f300 80ad 	bgt.w	80091f4 <_dtoa_r+0x88c>
 800909a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800909c:	2a00      	cmp	r2, #0
 800909e:	f000 80a5 	beq.w	80091ec <_dtoa_r+0x884>
 80090a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090a6:	9e08      	ldr	r6, [sp, #32]
 80090a8:	9d05      	ldr	r5, [sp, #20]
 80090aa:	9a05      	ldr	r2, [sp, #20]
 80090ac:	441a      	add	r2, r3
 80090ae:	9205      	str	r2, [sp, #20]
 80090b0:	9a06      	ldr	r2, [sp, #24]
 80090b2:	2101      	movs	r1, #1
 80090b4:	441a      	add	r2, r3
 80090b6:	4620      	mov	r0, r4
 80090b8:	9206      	str	r2, [sp, #24]
 80090ba:	f000 fff1 	bl	800a0a0 <__i2b>
 80090be:	4607      	mov	r7, r0
 80090c0:	b165      	cbz	r5, 80090dc <_dtoa_r+0x774>
 80090c2:	9b06      	ldr	r3, [sp, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dd09      	ble.n	80090dc <_dtoa_r+0x774>
 80090c8:	42ab      	cmp	r3, r5
 80090ca:	9a05      	ldr	r2, [sp, #20]
 80090cc:	bfa8      	it	ge
 80090ce:	462b      	movge	r3, r5
 80090d0:	1ad2      	subs	r2, r2, r3
 80090d2:	9205      	str	r2, [sp, #20]
 80090d4:	9a06      	ldr	r2, [sp, #24]
 80090d6:	1aed      	subs	r5, r5, r3
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	9306      	str	r3, [sp, #24]
 80090dc:	9b08      	ldr	r3, [sp, #32]
 80090de:	b1f3      	cbz	r3, 800911e <_dtoa_r+0x7b6>
 80090e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80a3 	beq.w	800922e <_dtoa_r+0x8c6>
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	dd10      	ble.n	800910e <_dtoa_r+0x7a6>
 80090ec:	4639      	mov	r1, r7
 80090ee:	4632      	mov	r2, r6
 80090f0:	4620      	mov	r0, r4
 80090f2:	f001 f895 	bl	800a220 <__pow5mult>
 80090f6:	4652      	mov	r2, sl
 80090f8:	4601      	mov	r1, r0
 80090fa:	4607      	mov	r7, r0
 80090fc:	4620      	mov	r0, r4
 80090fe:	f000 ffe5 	bl	800a0cc <__multiply>
 8009102:	4651      	mov	r1, sl
 8009104:	4680      	mov	r8, r0
 8009106:	4620      	mov	r0, r4
 8009108:	f000 feca 	bl	8009ea0 <_Bfree>
 800910c:	46c2      	mov	sl, r8
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	1b9a      	subs	r2, r3, r6
 8009112:	d004      	beq.n	800911e <_dtoa_r+0x7b6>
 8009114:	4651      	mov	r1, sl
 8009116:	4620      	mov	r0, r4
 8009118:	f001 f882 	bl	800a220 <__pow5mult>
 800911c:	4682      	mov	sl, r0
 800911e:	2101      	movs	r1, #1
 8009120:	4620      	mov	r0, r4
 8009122:	f000 ffbd 	bl	800a0a0 <__i2b>
 8009126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009128:	2b00      	cmp	r3, #0
 800912a:	4606      	mov	r6, r0
 800912c:	f340 8081 	ble.w	8009232 <_dtoa_r+0x8ca>
 8009130:	461a      	mov	r2, r3
 8009132:	4601      	mov	r1, r0
 8009134:	4620      	mov	r0, r4
 8009136:	f001 f873 	bl	800a220 <__pow5mult>
 800913a:	9b07      	ldr	r3, [sp, #28]
 800913c:	2b01      	cmp	r3, #1
 800913e:	4606      	mov	r6, r0
 8009140:	dd7a      	ble.n	8009238 <_dtoa_r+0x8d0>
 8009142:	f04f 0800 	mov.w	r8, #0
 8009146:	6933      	ldr	r3, [r6, #16]
 8009148:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800914c:	6918      	ldr	r0, [r3, #16]
 800914e:	f000 ff59 	bl	800a004 <__hi0bits>
 8009152:	f1c0 0020 	rsb	r0, r0, #32
 8009156:	9b06      	ldr	r3, [sp, #24]
 8009158:	4418      	add	r0, r3
 800915a:	f010 001f 	ands.w	r0, r0, #31
 800915e:	f000 8094 	beq.w	800928a <_dtoa_r+0x922>
 8009162:	f1c0 0320 	rsb	r3, r0, #32
 8009166:	2b04      	cmp	r3, #4
 8009168:	f340 8085 	ble.w	8009276 <_dtoa_r+0x90e>
 800916c:	9b05      	ldr	r3, [sp, #20]
 800916e:	f1c0 001c 	rsb	r0, r0, #28
 8009172:	4403      	add	r3, r0
 8009174:	9305      	str	r3, [sp, #20]
 8009176:	9b06      	ldr	r3, [sp, #24]
 8009178:	4403      	add	r3, r0
 800917a:	4405      	add	r5, r0
 800917c:	9306      	str	r3, [sp, #24]
 800917e:	9b05      	ldr	r3, [sp, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	dd05      	ble.n	8009190 <_dtoa_r+0x828>
 8009184:	4651      	mov	r1, sl
 8009186:	461a      	mov	r2, r3
 8009188:	4620      	mov	r0, r4
 800918a:	f001 f8a3 	bl	800a2d4 <__lshift>
 800918e:	4682      	mov	sl, r0
 8009190:	9b06      	ldr	r3, [sp, #24]
 8009192:	2b00      	cmp	r3, #0
 8009194:	dd05      	ble.n	80091a2 <_dtoa_r+0x83a>
 8009196:	4631      	mov	r1, r6
 8009198:	461a      	mov	r2, r3
 800919a:	4620      	mov	r0, r4
 800919c:	f001 f89a 	bl	800a2d4 <__lshift>
 80091a0:	4606      	mov	r6, r0
 80091a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d072      	beq.n	800928e <_dtoa_r+0x926>
 80091a8:	4631      	mov	r1, r6
 80091aa:	4650      	mov	r0, sl
 80091ac:	f001 f8fe 	bl	800a3ac <__mcmp>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	da6c      	bge.n	800928e <_dtoa_r+0x926>
 80091b4:	2300      	movs	r3, #0
 80091b6:	4651      	mov	r1, sl
 80091b8:	220a      	movs	r2, #10
 80091ba:	4620      	mov	r0, r4
 80091bc:	f000 fe92 	bl	8009ee4 <__multadd>
 80091c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091c6:	4682      	mov	sl, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 81b0 	beq.w	800952e <_dtoa_r+0xbc6>
 80091ce:	2300      	movs	r3, #0
 80091d0:	4639      	mov	r1, r7
 80091d2:	220a      	movs	r2, #10
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 fe85 	bl	8009ee4 <__multadd>
 80091da:	9b01      	ldr	r3, [sp, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	4607      	mov	r7, r0
 80091e0:	f300 8096 	bgt.w	8009310 <_dtoa_r+0x9a8>
 80091e4:	9b07      	ldr	r3, [sp, #28]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	dc59      	bgt.n	800929e <_dtoa_r+0x936>
 80091ea:	e091      	b.n	8009310 <_dtoa_r+0x9a8>
 80091ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80091f2:	e758      	b.n	80090a6 <_dtoa_r+0x73e>
 80091f4:	9b04      	ldr	r3, [sp, #16]
 80091f6:	1e5e      	subs	r6, r3, #1
 80091f8:	9b08      	ldr	r3, [sp, #32]
 80091fa:	42b3      	cmp	r3, r6
 80091fc:	bfbf      	itttt	lt
 80091fe:	9b08      	ldrlt	r3, [sp, #32]
 8009200:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009202:	9608      	strlt	r6, [sp, #32]
 8009204:	1af3      	sublt	r3, r6, r3
 8009206:	bfb4      	ite	lt
 8009208:	18d2      	addlt	r2, r2, r3
 800920a:	1b9e      	subge	r6, r3, r6
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	bfbc      	itt	lt
 8009210:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009212:	2600      	movlt	r6, #0
 8009214:	2b00      	cmp	r3, #0
 8009216:	bfb7      	itett	lt
 8009218:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800921c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009220:	1a9d      	sublt	r5, r3, r2
 8009222:	2300      	movlt	r3, #0
 8009224:	e741      	b.n	80090aa <_dtoa_r+0x742>
 8009226:	9e08      	ldr	r6, [sp, #32]
 8009228:	9d05      	ldr	r5, [sp, #20]
 800922a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800922c:	e748      	b.n	80090c0 <_dtoa_r+0x758>
 800922e:	9a08      	ldr	r2, [sp, #32]
 8009230:	e770      	b.n	8009114 <_dtoa_r+0x7ac>
 8009232:	9b07      	ldr	r3, [sp, #28]
 8009234:	2b01      	cmp	r3, #1
 8009236:	dc19      	bgt.n	800926c <_dtoa_r+0x904>
 8009238:	9b02      	ldr	r3, [sp, #8]
 800923a:	b9bb      	cbnz	r3, 800926c <_dtoa_r+0x904>
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009242:	b99b      	cbnz	r3, 800926c <_dtoa_r+0x904>
 8009244:	9b03      	ldr	r3, [sp, #12]
 8009246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800924a:	0d1b      	lsrs	r3, r3, #20
 800924c:	051b      	lsls	r3, r3, #20
 800924e:	b183      	cbz	r3, 8009272 <_dtoa_r+0x90a>
 8009250:	9b05      	ldr	r3, [sp, #20]
 8009252:	3301      	adds	r3, #1
 8009254:	9305      	str	r3, [sp, #20]
 8009256:	9b06      	ldr	r3, [sp, #24]
 8009258:	3301      	adds	r3, #1
 800925a:	9306      	str	r3, [sp, #24]
 800925c:	f04f 0801 	mov.w	r8, #1
 8009260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009262:	2b00      	cmp	r3, #0
 8009264:	f47f af6f 	bne.w	8009146 <_dtoa_r+0x7de>
 8009268:	2001      	movs	r0, #1
 800926a:	e774      	b.n	8009156 <_dtoa_r+0x7ee>
 800926c:	f04f 0800 	mov.w	r8, #0
 8009270:	e7f6      	b.n	8009260 <_dtoa_r+0x8f8>
 8009272:	4698      	mov	r8, r3
 8009274:	e7f4      	b.n	8009260 <_dtoa_r+0x8f8>
 8009276:	d082      	beq.n	800917e <_dtoa_r+0x816>
 8009278:	9a05      	ldr	r2, [sp, #20]
 800927a:	331c      	adds	r3, #28
 800927c:	441a      	add	r2, r3
 800927e:	9205      	str	r2, [sp, #20]
 8009280:	9a06      	ldr	r2, [sp, #24]
 8009282:	441a      	add	r2, r3
 8009284:	441d      	add	r5, r3
 8009286:	9206      	str	r2, [sp, #24]
 8009288:	e779      	b.n	800917e <_dtoa_r+0x816>
 800928a:	4603      	mov	r3, r0
 800928c:	e7f4      	b.n	8009278 <_dtoa_r+0x910>
 800928e:	9b04      	ldr	r3, [sp, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	dc37      	bgt.n	8009304 <_dtoa_r+0x99c>
 8009294:	9b07      	ldr	r3, [sp, #28]
 8009296:	2b02      	cmp	r3, #2
 8009298:	dd34      	ble.n	8009304 <_dtoa_r+0x99c>
 800929a:	9b04      	ldr	r3, [sp, #16]
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	b963      	cbnz	r3, 80092bc <_dtoa_r+0x954>
 80092a2:	4631      	mov	r1, r6
 80092a4:	2205      	movs	r2, #5
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 fe1c 	bl	8009ee4 <__multadd>
 80092ac:	4601      	mov	r1, r0
 80092ae:	4606      	mov	r6, r0
 80092b0:	4650      	mov	r0, sl
 80092b2:	f001 f87b 	bl	800a3ac <__mcmp>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	f73f adbb 	bgt.w	8008e32 <_dtoa_r+0x4ca>
 80092bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092be:	9d00      	ldr	r5, [sp, #0]
 80092c0:	ea6f 0b03 	mvn.w	fp, r3
 80092c4:	f04f 0800 	mov.w	r8, #0
 80092c8:	4631      	mov	r1, r6
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 fde8 	bl	8009ea0 <_Bfree>
 80092d0:	2f00      	cmp	r7, #0
 80092d2:	f43f aeab 	beq.w	800902c <_dtoa_r+0x6c4>
 80092d6:	f1b8 0f00 	cmp.w	r8, #0
 80092da:	d005      	beq.n	80092e8 <_dtoa_r+0x980>
 80092dc:	45b8      	cmp	r8, r7
 80092de:	d003      	beq.n	80092e8 <_dtoa_r+0x980>
 80092e0:	4641      	mov	r1, r8
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 fddc 	bl	8009ea0 <_Bfree>
 80092e8:	4639      	mov	r1, r7
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 fdd8 	bl	8009ea0 <_Bfree>
 80092f0:	e69c      	b.n	800902c <_dtoa_r+0x6c4>
 80092f2:	2600      	movs	r6, #0
 80092f4:	4637      	mov	r7, r6
 80092f6:	e7e1      	b.n	80092bc <_dtoa_r+0x954>
 80092f8:	46bb      	mov	fp, r7
 80092fa:	4637      	mov	r7, r6
 80092fc:	e599      	b.n	8008e32 <_dtoa_r+0x4ca>
 80092fe:	bf00      	nop
 8009300:	40240000 	.word	0x40240000
 8009304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 80c8 	beq.w	800949c <_dtoa_r+0xb34>
 800930c:	9b04      	ldr	r3, [sp, #16]
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	2d00      	cmp	r5, #0
 8009312:	dd05      	ble.n	8009320 <_dtoa_r+0x9b8>
 8009314:	4639      	mov	r1, r7
 8009316:	462a      	mov	r2, r5
 8009318:	4620      	mov	r0, r4
 800931a:	f000 ffdb 	bl	800a2d4 <__lshift>
 800931e:	4607      	mov	r7, r0
 8009320:	f1b8 0f00 	cmp.w	r8, #0
 8009324:	d05b      	beq.n	80093de <_dtoa_r+0xa76>
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4620      	mov	r0, r4
 800932a:	f000 fd79 	bl	8009e20 <_Balloc>
 800932e:	4605      	mov	r5, r0
 8009330:	b928      	cbnz	r0, 800933e <_dtoa_r+0x9d6>
 8009332:	4b83      	ldr	r3, [pc, #524]	; (8009540 <_dtoa_r+0xbd8>)
 8009334:	4602      	mov	r2, r0
 8009336:	f240 21ef 	movw	r1, #751	; 0x2ef
 800933a:	f7ff bb2e 	b.w	800899a <_dtoa_r+0x32>
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	3202      	adds	r2, #2
 8009342:	0092      	lsls	r2, r2, #2
 8009344:	f107 010c 	add.w	r1, r7, #12
 8009348:	300c      	adds	r0, #12
 800934a:	f7ff fa65 	bl	8008818 <memcpy>
 800934e:	2201      	movs	r2, #1
 8009350:	4629      	mov	r1, r5
 8009352:	4620      	mov	r0, r4
 8009354:	f000 ffbe 	bl	800a2d4 <__lshift>
 8009358:	9b00      	ldr	r3, [sp, #0]
 800935a:	3301      	adds	r3, #1
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009362:	4413      	add	r3, r2
 8009364:	9308      	str	r3, [sp, #32]
 8009366:	9b02      	ldr	r3, [sp, #8]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	46b8      	mov	r8, r7
 800936e:	9306      	str	r3, [sp, #24]
 8009370:	4607      	mov	r7, r0
 8009372:	9b04      	ldr	r3, [sp, #16]
 8009374:	4631      	mov	r1, r6
 8009376:	3b01      	subs	r3, #1
 8009378:	4650      	mov	r0, sl
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	f7ff fa6a 	bl	8008854 <quorem>
 8009380:	4641      	mov	r1, r8
 8009382:	9002      	str	r0, [sp, #8]
 8009384:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009388:	4650      	mov	r0, sl
 800938a:	f001 f80f 	bl	800a3ac <__mcmp>
 800938e:	463a      	mov	r2, r7
 8009390:	9005      	str	r0, [sp, #20]
 8009392:	4631      	mov	r1, r6
 8009394:	4620      	mov	r0, r4
 8009396:	f001 f825 	bl	800a3e4 <__mdiff>
 800939a:	68c2      	ldr	r2, [r0, #12]
 800939c:	4605      	mov	r5, r0
 800939e:	bb02      	cbnz	r2, 80093e2 <_dtoa_r+0xa7a>
 80093a0:	4601      	mov	r1, r0
 80093a2:	4650      	mov	r0, sl
 80093a4:	f001 f802 	bl	800a3ac <__mcmp>
 80093a8:	4602      	mov	r2, r0
 80093aa:	4629      	mov	r1, r5
 80093ac:	4620      	mov	r0, r4
 80093ae:	9209      	str	r2, [sp, #36]	; 0x24
 80093b0:	f000 fd76 	bl	8009ea0 <_Bfree>
 80093b4:	9b07      	ldr	r3, [sp, #28]
 80093b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b8:	9d04      	ldr	r5, [sp, #16]
 80093ba:	ea43 0102 	orr.w	r1, r3, r2
 80093be:	9b06      	ldr	r3, [sp, #24]
 80093c0:	4319      	orrs	r1, r3
 80093c2:	d110      	bne.n	80093e6 <_dtoa_r+0xa7e>
 80093c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093c8:	d029      	beq.n	800941e <_dtoa_r+0xab6>
 80093ca:	9b05      	ldr	r3, [sp, #20]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	dd02      	ble.n	80093d6 <_dtoa_r+0xa6e>
 80093d0:	9b02      	ldr	r3, [sp, #8]
 80093d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	f883 9000 	strb.w	r9, [r3]
 80093dc:	e774      	b.n	80092c8 <_dtoa_r+0x960>
 80093de:	4638      	mov	r0, r7
 80093e0:	e7ba      	b.n	8009358 <_dtoa_r+0x9f0>
 80093e2:	2201      	movs	r2, #1
 80093e4:	e7e1      	b.n	80093aa <_dtoa_r+0xa42>
 80093e6:	9b05      	ldr	r3, [sp, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	db04      	blt.n	80093f6 <_dtoa_r+0xa8e>
 80093ec:	9907      	ldr	r1, [sp, #28]
 80093ee:	430b      	orrs	r3, r1
 80093f0:	9906      	ldr	r1, [sp, #24]
 80093f2:	430b      	orrs	r3, r1
 80093f4:	d120      	bne.n	8009438 <_dtoa_r+0xad0>
 80093f6:	2a00      	cmp	r2, #0
 80093f8:	dded      	ble.n	80093d6 <_dtoa_r+0xa6e>
 80093fa:	4651      	mov	r1, sl
 80093fc:	2201      	movs	r2, #1
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 ff68 	bl	800a2d4 <__lshift>
 8009404:	4631      	mov	r1, r6
 8009406:	4682      	mov	sl, r0
 8009408:	f000 ffd0 	bl	800a3ac <__mcmp>
 800940c:	2800      	cmp	r0, #0
 800940e:	dc03      	bgt.n	8009418 <_dtoa_r+0xab0>
 8009410:	d1e1      	bne.n	80093d6 <_dtoa_r+0xa6e>
 8009412:	f019 0f01 	tst.w	r9, #1
 8009416:	d0de      	beq.n	80093d6 <_dtoa_r+0xa6e>
 8009418:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800941c:	d1d8      	bne.n	80093d0 <_dtoa_r+0xa68>
 800941e:	9a01      	ldr	r2, [sp, #4]
 8009420:	2339      	movs	r3, #57	; 0x39
 8009422:	7013      	strb	r3, [r2, #0]
 8009424:	462b      	mov	r3, r5
 8009426:	461d      	mov	r5, r3
 8009428:	3b01      	subs	r3, #1
 800942a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800942e:	2a39      	cmp	r2, #57	; 0x39
 8009430:	d06c      	beq.n	800950c <_dtoa_r+0xba4>
 8009432:	3201      	adds	r2, #1
 8009434:	701a      	strb	r2, [r3, #0]
 8009436:	e747      	b.n	80092c8 <_dtoa_r+0x960>
 8009438:	2a00      	cmp	r2, #0
 800943a:	dd07      	ble.n	800944c <_dtoa_r+0xae4>
 800943c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009440:	d0ed      	beq.n	800941e <_dtoa_r+0xab6>
 8009442:	9a01      	ldr	r2, [sp, #4]
 8009444:	f109 0301 	add.w	r3, r9, #1
 8009448:	7013      	strb	r3, [r2, #0]
 800944a:	e73d      	b.n	80092c8 <_dtoa_r+0x960>
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	9a08      	ldr	r2, [sp, #32]
 8009450:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009454:	4293      	cmp	r3, r2
 8009456:	d043      	beq.n	80094e0 <_dtoa_r+0xb78>
 8009458:	4651      	mov	r1, sl
 800945a:	2300      	movs	r3, #0
 800945c:	220a      	movs	r2, #10
 800945e:	4620      	mov	r0, r4
 8009460:	f000 fd40 	bl	8009ee4 <__multadd>
 8009464:	45b8      	cmp	r8, r7
 8009466:	4682      	mov	sl, r0
 8009468:	f04f 0300 	mov.w	r3, #0
 800946c:	f04f 020a 	mov.w	r2, #10
 8009470:	4641      	mov	r1, r8
 8009472:	4620      	mov	r0, r4
 8009474:	d107      	bne.n	8009486 <_dtoa_r+0xb1e>
 8009476:	f000 fd35 	bl	8009ee4 <__multadd>
 800947a:	4680      	mov	r8, r0
 800947c:	4607      	mov	r7, r0
 800947e:	9b04      	ldr	r3, [sp, #16]
 8009480:	3301      	adds	r3, #1
 8009482:	9304      	str	r3, [sp, #16]
 8009484:	e775      	b.n	8009372 <_dtoa_r+0xa0a>
 8009486:	f000 fd2d 	bl	8009ee4 <__multadd>
 800948a:	4639      	mov	r1, r7
 800948c:	4680      	mov	r8, r0
 800948e:	2300      	movs	r3, #0
 8009490:	220a      	movs	r2, #10
 8009492:	4620      	mov	r0, r4
 8009494:	f000 fd26 	bl	8009ee4 <__multadd>
 8009498:	4607      	mov	r7, r0
 800949a:	e7f0      	b.n	800947e <_dtoa_r+0xb16>
 800949c:	9b04      	ldr	r3, [sp, #16]
 800949e:	9301      	str	r3, [sp, #4]
 80094a0:	9d00      	ldr	r5, [sp, #0]
 80094a2:	4631      	mov	r1, r6
 80094a4:	4650      	mov	r0, sl
 80094a6:	f7ff f9d5 	bl	8008854 <quorem>
 80094aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094ae:	9b00      	ldr	r3, [sp, #0]
 80094b0:	f805 9b01 	strb.w	r9, [r5], #1
 80094b4:	1aea      	subs	r2, r5, r3
 80094b6:	9b01      	ldr	r3, [sp, #4]
 80094b8:	4293      	cmp	r3, r2
 80094ba:	dd07      	ble.n	80094cc <_dtoa_r+0xb64>
 80094bc:	4651      	mov	r1, sl
 80094be:	2300      	movs	r3, #0
 80094c0:	220a      	movs	r2, #10
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 fd0e 	bl	8009ee4 <__multadd>
 80094c8:	4682      	mov	sl, r0
 80094ca:	e7ea      	b.n	80094a2 <_dtoa_r+0xb3a>
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	bfc8      	it	gt
 80094d2:	461d      	movgt	r5, r3
 80094d4:	9b00      	ldr	r3, [sp, #0]
 80094d6:	bfd8      	it	le
 80094d8:	2501      	movle	r5, #1
 80094da:	441d      	add	r5, r3
 80094dc:	f04f 0800 	mov.w	r8, #0
 80094e0:	4651      	mov	r1, sl
 80094e2:	2201      	movs	r2, #1
 80094e4:	4620      	mov	r0, r4
 80094e6:	f000 fef5 	bl	800a2d4 <__lshift>
 80094ea:	4631      	mov	r1, r6
 80094ec:	4682      	mov	sl, r0
 80094ee:	f000 ff5d 	bl	800a3ac <__mcmp>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	dc96      	bgt.n	8009424 <_dtoa_r+0xabc>
 80094f6:	d102      	bne.n	80094fe <_dtoa_r+0xb96>
 80094f8:	f019 0f01 	tst.w	r9, #1
 80094fc:	d192      	bne.n	8009424 <_dtoa_r+0xabc>
 80094fe:	462b      	mov	r3, r5
 8009500:	461d      	mov	r5, r3
 8009502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009506:	2a30      	cmp	r2, #48	; 0x30
 8009508:	d0fa      	beq.n	8009500 <_dtoa_r+0xb98>
 800950a:	e6dd      	b.n	80092c8 <_dtoa_r+0x960>
 800950c:	9a00      	ldr	r2, [sp, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d189      	bne.n	8009426 <_dtoa_r+0xabe>
 8009512:	f10b 0b01 	add.w	fp, fp, #1
 8009516:	2331      	movs	r3, #49	; 0x31
 8009518:	e796      	b.n	8009448 <_dtoa_r+0xae0>
 800951a:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <_dtoa_r+0xbdc>)
 800951c:	f7ff ba99 	b.w	8008a52 <_dtoa_r+0xea>
 8009520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009522:	2b00      	cmp	r3, #0
 8009524:	f47f aa6d 	bne.w	8008a02 <_dtoa_r+0x9a>
 8009528:	4b07      	ldr	r3, [pc, #28]	; (8009548 <_dtoa_r+0xbe0>)
 800952a:	f7ff ba92 	b.w	8008a52 <_dtoa_r+0xea>
 800952e:	9b01      	ldr	r3, [sp, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	dcb5      	bgt.n	80094a0 <_dtoa_r+0xb38>
 8009534:	9b07      	ldr	r3, [sp, #28]
 8009536:	2b02      	cmp	r3, #2
 8009538:	f73f aeb1 	bgt.w	800929e <_dtoa_r+0x936>
 800953c:	e7b0      	b.n	80094a0 <_dtoa_r+0xb38>
 800953e:	bf00      	nop
 8009540:	0800bb86 	.word	0x0800bb86
 8009544:	0800bad9 	.word	0x0800bad9
 8009548:	0800bb0a 	.word	0x0800bb0a

0800954c <_free_r>:
 800954c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800954e:	2900      	cmp	r1, #0
 8009550:	d044      	beq.n	80095dc <_free_r+0x90>
 8009552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009556:	9001      	str	r0, [sp, #4]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f1a1 0404 	sub.w	r4, r1, #4
 800955e:	bfb8      	it	lt
 8009560:	18e4      	addlt	r4, r4, r3
 8009562:	f000 fc51 	bl	8009e08 <__malloc_lock>
 8009566:	4a1e      	ldr	r2, [pc, #120]	; (80095e0 <_free_r+0x94>)
 8009568:	9801      	ldr	r0, [sp, #4]
 800956a:	6813      	ldr	r3, [r2, #0]
 800956c:	b933      	cbnz	r3, 800957c <_free_r+0x30>
 800956e:	6063      	str	r3, [r4, #4]
 8009570:	6014      	str	r4, [r2, #0]
 8009572:	b003      	add	sp, #12
 8009574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009578:	f000 bc4c 	b.w	8009e14 <__malloc_unlock>
 800957c:	42a3      	cmp	r3, r4
 800957e:	d908      	bls.n	8009592 <_free_r+0x46>
 8009580:	6825      	ldr	r5, [r4, #0]
 8009582:	1961      	adds	r1, r4, r5
 8009584:	428b      	cmp	r3, r1
 8009586:	bf01      	itttt	eq
 8009588:	6819      	ldreq	r1, [r3, #0]
 800958a:	685b      	ldreq	r3, [r3, #4]
 800958c:	1949      	addeq	r1, r1, r5
 800958e:	6021      	streq	r1, [r4, #0]
 8009590:	e7ed      	b.n	800956e <_free_r+0x22>
 8009592:	461a      	mov	r2, r3
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	b10b      	cbz	r3, 800959c <_free_r+0x50>
 8009598:	42a3      	cmp	r3, r4
 800959a:	d9fa      	bls.n	8009592 <_free_r+0x46>
 800959c:	6811      	ldr	r1, [r2, #0]
 800959e:	1855      	adds	r5, r2, r1
 80095a0:	42a5      	cmp	r5, r4
 80095a2:	d10b      	bne.n	80095bc <_free_r+0x70>
 80095a4:	6824      	ldr	r4, [r4, #0]
 80095a6:	4421      	add	r1, r4
 80095a8:	1854      	adds	r4, r2, r1
 80095aa:	42a3      	cmp	r3, r4
 80095ac:	6011      	str	r1, [r2, #0]
 80095ae:	d1e0      	bne.n	8009572 <_free_r+0x26>
 80095b0:	681c      	ldr	r4, [r3, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	6053      	str	r3, [r2, #4]
 80095b6:	440c      	add	r4, r1
 80095b8:	6014      	str	r4, [r2, #0]
 80095ba:	e7da      	b.n	8009572 <_free_r+0x26>
 80095bc:	d902      	bls.n	80095c4 <_free_r+0x78>
 80095be:	230c      	movs	r3, #12
 80095c0:	6003      	str	r3, [r0, #0]
 80095c2:	e7d6      	b.n	8009572 <_free_r+0x26>
 80095c4:	6825      	ldr	r5, [r4, #0]
 80095c6:	1961      	adds	r1, r4, r5
 80095c8:	428b      	cmp	r3, r1
 80095ca:	bf04      	itt	eq
 80095cc:	6819      	ldreq	r1, [r3, #0]
 80095ce:	685b      	ldreq	r3, [r3, #4]
 80095d0:	6063      	str	r3, [r4, #4]
 80095d2:	bf04      	itt	eq
 80095d4:	1949      	addeq	r1, r1, r5
 80095d6:	6021      	streq	r1, [r4, #0]
 80095d8:	6054      	str	r4, [r2, #4]
 80095da:	e7ca      	b.n	8009572 <_free_r+0x26>
 80095dc:	b003      	add	sp, #12
 80095de:	bd30      	pop	{r4, r5, pc}
 80095e0:	20000608 	.word	0x20000608

080095e4 <rshift>:
 80095e4:	6903      	ldr	r3, [r0, #16]
 80095e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095f2:	f100 0414 	add.w	r4, r0, #20
 80095f6:	dd45      	ble.n	8009684 <rshift+0xa0>
 80095f8:	f011 011f 	ands.w	r1, r1, #31
 80095fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009600:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009604:	d10c      	bne.n	8009620 <rshift+0x3c>
 8009606:	f100 0710 	add.w	r7, r0, #16
 800960a:	4629      	mov	r1, r5
 800960c:	42b1      	cmp	r1, r6
 800960e:	d334      	bcc.n	800967a <rshift+0x96>
 8009610:	1a9b      	subs	r3, r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	1eea      	subs	r2, r5, #3
 8009616:	4296      	cmp	r6, r2
 8009618:	bf38      	it	cc
 800961a:	2300      	movcc	r3, #0
 800961c:	4423      	add	r3, r4
 800961e:	e015      	b.n	800964c <rshift+0x68>
 8009620:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009624:	f1c1 0820 	rsb	r8, r1, #32
 8009628:	40cf      	lsrs	r7, r1
 800962a:	f105 0e04 	add.w	lr, r5, #4
 800962e:	46a1      	mov	r9, r4
 8009630:	4576      	cmp	r6, lr
 8009632:	46f4      	mov	ip, lr
 8009634:	d815      	bhi.n	8009662 <rshift+0x7e>
 8009636:	1a9a      	subs	r2, r3, r2
 8009638:	0092      	lsls	r2, r2, #2
 800963a:	3a04      	subs	r2, #4
 800963c:	3501      	adds	r5, #1
 800963e:	42ae      	cmp	r6, r5
 8009640:	bf38      	it	cc
 8009642:	2200      	movcc	r2, #0
 8009644:	18a3      	adds	r3, r4, r2
 8009646:	50a7      	str	r7, [r4, r2]
 8009648:	b107      	cbz	r7, 800964c <rshift+0x68>
 800964a:	3304      	adds	r3, #4
 800964c:	1b1a      	subs	r2, r3, r4
 800964e:	42a3      	cmp	r3, r4
 8009650:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009654:	bf08      	it	eq
 8009656:	2300      	moveq	r3, #0
 8009658:	6102      	str	r2, [r0, #16]
 800965a:	bf08      	it	eq
 800965c:	6143      	streq	r3, [r0, #20]
 800965e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009662:	f8dc c000 	ldr.w	ip, [ip]
 8009666:	fa0c fc08 	lsl.w	ip, ip, r8
 800966a:	ea4c 0707 	orr.w	r7, ip, r7
 800966e:	f849 7b04 	str.w	r7, [r9], #4
 8009672:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009676:	40cf      	lsrs	r7, r1
 8009678:	e7da      	b.n	8009630 <rshift+0x4c>
 800967a:	f851 cb04 	ldr.w	ip, [r1], #4
 800967e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009682:	e7c3      	b.n	800960c <rshift+0x28>
 8009684:	4623      	mov	r3, r4
 8009686:	e7e1      	b.n	800964c <rshift+0x68>

08009688 <__hexdig_fun>:
 8009688:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800968c:	2b09      	cmp	r3, #9
 800968e:	d802      	bhi.n	8009696 <__hexdig_fun+0xe>
 8009690:	3820      	subs	r0, #32
 8009692:	b2c0      	uxtb	r0, r0
 8009694:	4770      	bx	lr
 8009696:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800969a:	2b05      	cmp	r3, #5
 800969c:	d801      	bhi.n	80096a2 <__hexdig_fun+0x1a>
 800969e:	3847      	subs	r0, #71	; 0x47
 80096a0:	e7f7      	b.n	8009692 <__hexdig_fun+0xa>
 80096a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80096a6:	2b05      	cmp	r3, #5
 80096a8:	d801      	bhi.n	80096ae <__hexdig_fun+0x26>
 80096aa:	3827      	subs	r0, #39	; 0x27
 80096ac:	e7f1      	b.n	8009692 <__hexdig_fun+0xa>
 80096ae:	2000      	movs	r0, #0
 80096b0:	4770      	bx	lr
	...

080096b4 <__gethex>:
 80096b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b8:	4617      	mov	r7, r2
 80096ba:	680a      	ldr	r2, [r1, #0]
 80096bc:	b085      	sub	sp, #20
 80096be:	f102 0b02 	add.w	fp, r2, #2
 80096c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80096c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80096ca:	4681      	mov	r9, r0
 80096cc:	468a      	mov	sl, r1
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	32fe      	adds	r2, #254	; 0xfe
 80096d2:	eb02 030b 	add.w	r3, r2, fp
 80096d6:	46d8      	mov	r8, fp
 80096d8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	2830      	cmp	r0, #48	; 0x30
 80096e0:	d0f7      	beq.n	80096d2 <__gethex+0x1e>
 80096e2:	f7ff ffd1 	bl	8009688 <__hexdig_fun>
 80096e6:	4604      	mov	r4, r0
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d138      	bne.n	800975e <__gethex+0xaa>
 80096ec:	49a7      	ldr	r1, [pc, #668]	; (800998c <__gethex+0x2d8>)
 80096ee:	2201      	movs	r2, #1
 80096f0:	4640      	mov	r0, r8
 80096f2:	f7fe ffde 	bl	80086b2 <strncmp>
 80096f6:	4606      	mov	r6, r0
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d169      	bne.n	80097d0 <__gethex+0x11c>
 80096fc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009700:	465d      	mov	r5, fp
 8009702:	f7ff ffc1 	bl	8009688 <__hexdig_fun>
 8009706:	2800      	cmp	r0, #0
 8009708:	d064      	beq.n	80097d4 <__gethex+0x120>
 800970a:	465a      	mov	r2, fp
 800970c:	7810      	ldrb	r0, [r2, #0]
 800970e:	2830      	cmp	r0, #48	; 0x30
 8009710:	4690      	mov	r8, r2
 8009712:	f102 0201 	add.w	r2, r2, #1
 8009716:	d0f9      	beq.n	800970c <__gethex+0x58>
 8009718:	f7ff ffb6 	bl	8009688 <__hexdig_fun>
 800971c:	2301      	movs	r3, #1
 800971e:	fab0 f480 	clz	r4, r0
 8009722:	0964      	lsrs	r4, r4, #5
 8009724:	465e      	mov	r6, fp
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	4642      	mov	r2, r8
 800972a:	4615      	mov	r5, r2
 800972c:	3201      	adds	r2, #1
 800972e:	7828      	ldrb	r0, [r5, #0]
 8009730:	f7ff ffaa 	bl	8009688 <__hexdig_fun>
 8009734:	2800      	cmp	r0, #0
 8009736:	d1f8      	bne.n	800972a <__gethex+0x76>
 8009738:	4994      	ldr	r1, [pc, #592]	; (800998c <__gethex+0x2d8>)
 800973a:	2201      	movs	r2, #1
 800973c:	4628      	mov	r0, r5
 800973e:	f7fe ffb8 	bl	80086b2 <strncmp>
 8009742:	b978      	cbnz	r0, 8009764 <__gethex+0xb0>
 8009744:	b946      	cbnz	r6, 8009758 <__gethex+0xa4>
 8009746:	1c6e      	adds	r6, r5, #1
 8009748:	4632      	mov	r2, r6
 800974a:	4615      	mov	r5, r2
 800974c:	3201      	adds	r2, #1
 800974e:	7828      	ldrb	r0, [r5, #0]
 8009750:	f7ff ff9a 	bl	8009688 <__hexdig_fun>
 8009754:	2800      	cmp	r0, #0
 8009756:	d1f8      	bne.n	800974a <__gethex+0x96>
 8009758:	1b73      	subs	r3, r6, r5
 800975a:	009e      	lsls	r6, r3, #2
 800975c:	e004      	b.n	8009768 <__gethex+0xb4>
 800975e:	2400      	movs	r4, #0
 8009760:	4626      	mov	r6, r4
 8009762:	e7e1      	b.n	8009728 <__gethex+0x74>
 8009764:	2e00      	cmp	r6, #0
 8009766:	d1f7      	bne.n	8009758 <__gethex+0xa4>
 8009768:	782b      	ldrb	r3, [r5, #0]
 800976a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800976e:	2b50      	cmp	r3, #80	; 0x50
 8009770:	d13d      	bne.n	80097ee <__gethex+0x13a>
 8009772:	786b      	ldrb	r3, [r5, #1]
 8009774:	2b2b      	cmp	r3, #43	; 0x2b
 8009776:	d02f      	beq.n	80097d8 <__gethex+0x124>
 8009778:	2b2d      	cmp	r3, #45	; 0x2d
 800977a:	d031      	beq.n	80097e0 <__gethex+0x12c>
 800977c:	1c69      	adds	r1, r5, #1
 800977e:	f04f 0b00 	mov.w	fp, #0
 8009782:	7808      	ldrb	r0, [r1, #0]
 8009784:	f7ff ff80 	bl	8009688 <__hexdig_fun>
 8009788:	1e42      	subs	r2, r0, #1
 800978a:	b2d2      	uxtb	r2, r2
 800978c:	2a18      	cmp	r2, #24
 800978e:	d82e      	bhi.n	80097ee <__gethex+0x13a>
 8009790:	f1a0 0210 	sub.w	r2, r0, #16
 8009794:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009798:	f7ff ff76 	bl	8009688 <__hexdig_fun>
 800979c:	f100 3cff 	add.w	ip, r0, #4294967295
 80097a0:	fa5f fc8c 	uxtb.w	ip, ip
 80097a4:	f1bc 0f18 	cmp.w	ip, #24
 80097a8:	d91d      	bls.n	80097e6 <__gethex+0x132>
 80097aa:	f1bb 0f00 	cmp.w	fp, #0
 80097ae:	d000      	beq.n	80097b2 <__gethex+0xfe>
 80097b0:	4252      	negs	r2, r2
 80097b2:	4416      	add	r6, r2
 80097b4:	f8ca 1000 	str.w	r1, [sl]
 80097b8:	b1dc      	cbz	r4, 80097f2 <__gethex+0x13e>
 80097ba:	9b01      	ldr	r3, [sp, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	bf14      	ite	ne
 80097c0:	f04f 0800 	movne.w	r8, #0
 80097c4:	f04f 0806 	moveq.w	r8, #6
 80097c8:	4640      	mov	r0, r8
 80097ca:	b005      	add	sp, #20
 80097cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d0:	4645      	mov	r5, r8
 80097d2:	4626      	mov	r6, r4
 80097d4:	2401      	movs	r4, #1
 80097d6:	e7c7      	b.n	8009768 <__gethex+0xb4>
 80097d8:	f04f 0b00 	mov.w	fp, #0
 80097dc:	1ca9      	adds	r1, r5, #2
 80097de:	e7d0      	b.n	8009782 <__gethex+0xce>
 80097e0:	f04f 0b01 	mov.w	fp, #1
 80097e4:	e7fa      	b.n	80097dc <__gethex+0x128>
 80097e6:	230a      	movs	r3, #10
 80097e8:	fb03 0002 	mla	r0, r3, r2, r0
 80097ec:	e7d0      	b.n	8009790 <__gethex+0xdc>
 80097ee:	4629      	mov	r1, r5
 80097f0:	e7e0      	b.n	80097b4 <__gethex+0x100>
 80097f2:	eba5 0308 	sub.w	r3, r5, r8
 80097f6:	3b01      	subs	r3, #1
 80097f8:	4621      	mov	r1, r4
 80097fa:	2b07      	cmp	r3, #7
 80097fc:	dc0a      	bgt.n	8009814 <__gethex+0x160>
 80097fe:	4648      	mov	r0, r9
 8009800:	f000 fb0e 	bl	8009e20 <_Balloc>
 8009804:	4604      	mov	r4, r0
 8009806:	b940      	cbnz	r0, 800981a <__gethex+0x166>
 8009808:	4b61      	ldr	r3, [pc, #388]	; (8009990 <__gethex+0x2dc>)
 800980a:	4602      	mov	r2, r0
 800980c:	21e4      	movs	r1, #228	; 0xe4
 800980e:	4861      	ldr	r0, [pc, #388]	; (8009994 <__gethex+0x2e0>)
 8009810:	f001 f9f0 	bl	800abf4 <__assert_func>
 8009814:	3101      	adds	r1, #1
 8009816:	105b      	asrs	r3, r3, #1
 8009818:	e7ef      	b.n	80097fa <__gethex+0x146>
 800981a:	f100 0a14 	add.w	sl, r0, #20
 800981e:	2300      	movs	r3, #0
 8009820:	495a      	ldr	r1, [pc, #360]	; (800998c <__gethex+0x2d8>)
 8009822:	f8cd a004 	str.w	sl, [sp, #4]
 8009826:	469b      	mov	fp, r3
 8009828:	45a8      	cmp	r8, r5
 800982a:	d342      	bcc.n	80098b2 <__gethex+0x1fe>
 800982c:	9801      	ldr	r0, [sp, #4]
 800982e:	f840 bb04 	str.w	fp, [r0], #4
 8009832:	eba0 000a 	sub.w	r0, r0, sl
 8009836:	1080      	asrs	r0, r0, #2
 8009838:	6120      	str	r0, [r4, #16]
 800983a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800983e:	4658      	mov	r0, fp
 8009840:	f000 fbe0 	bl	800a004 <__hi0bits>
 8009844:	683d      	ldr	r5, [r7, #0]
 8009846:	eba8 0000 	sub.w	r0, r8, r0
 800984a:	42a8      	cmp	r0, r5
 800984c:	dd59      	ble.n	8009902 <__gethex+0x24e>
 800984e:	eba0 0805 	sub.w	r8, r0, r5
 8009852:	4641      	mov	r1, r8
 8009854:	4620      	mov	r0, r4
 8009856:	f000 ff6f 	bl	800a738 <__any_on>
 800985a:	4683      	mov	fp, r0
 800985c:	b1b8      	cbz	r0, 800988e <__gethex+0x1da>
 800985e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009862:	1159      	asrs	r1, r3, #5
 8009864:	f003 021f 	and.w	r2, r3, #31
 8009868:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800986c:	f04f 0b01 	mov.w	fp, #1
 8009870:	fa0b f202 	lsl.w	r2, fp, r2
 8009874:	420a      	tst	r2, r1
 8009876:	d00a      	beq.n	800988e <__gethex+0x1da>
 8009878:	455b      	cmp	r3, fp
 800987a:	dd06      	ble.n	800988a <__gethex+0x1d6>
 800987c:	f1a8 0102 	sub.w	r1, r8, #2
 8009880:	4620      	mov	r0, r4
 8009882:	f000 ff59 	bl	800a738 <__any_on>
 8009886:	2800      	cmp	r0, #0
 8009888:	d138      	bne.n	80098fc <__gethex+0x248>
 800988a:	f04f 0b02 	mov.w	fp, #2
 800988e:	4641      	mov	r1, r8
 8009890:	4620      	mov	r0, r4
 8009892:	f7ff fea7 	bl	80095e4 <rshift>
 8009896:	4446      	add	r6, r8
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	42b3      	cmp	r3, r6
 800989c:	da41      	bge.n	8009922 <__gethex+0x26e>
 800989e:	4621      	mov	r1, r4
 80098a0:	4648      	mov	r0, r9
 80098a2:	f000 fafd 	bl	8009ea0 <_Bfree>
 80098a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098a8:	2300      	movs	r3, #0
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80098b0:	e78a      	b.n	80097c8 <__gethex+0x114>
 80098b2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80098b6:	2a2e      	cmp	r2, #46	; 0x2e
 80098b8:	d014      	beq.n	80098e4 <__gethex+0x230>
 80098ba:	2b20      	cmp	r3, #32
 80098bc:	d106      	bne.n	80098cc <__gethex+0x218>
 80098be:	9b01      	ldr	r3, [sp, #4]
 80098c0:	f843 bb04 	str.w	fp, [r3], #4
 80098c4:	f04f 0b00 	mov.w	fp, #0
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	465b      	mov	r3, fp
 80098cc:	7828      	ldrb	r0, [r5, #0]
 80098ce:	9303      	str	r3, [sp, #12]
 80098d0:	f7ff feda 	bl	8009688 <__hexdig_fun>
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	f000 000f 	and.w	r0, r0, #15
 80098da:	4098      	lsls	r0, r3
 80098dc:	ea4b 0b00 	orr.w	fp, fp, r0
 80098e0:	3304      	adds	r3, #4
 80098e2:	e7a1      	b.n	8009828 <__gethex+0x174>
 80098e4:	45a8      	cmp	r8, r5
 80098e6:	d8e8      	bhi.n	80098ba <__gethex+0x206>
 80098e8:	2201      	movs	r2, #1
 80098ea:	4628      	mov	r0, r5
 80098ec:	9303      	str	r3, [sp, #12]
 80098ee:	f7fe fee0 	bl	80086b2 <strncmp>
 80098f2:	4926      	ldr	r1, [pc, #152]	; (800998c <__gethex+0x2d8>)
 80098f4:	9b03      	ldr	r3, [sp, #12]
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d1df      	bne.n	80098ba <__gethex+0x206>
 80098fa:	e795      	b.n	8009828 <__gethex+0x174>
 80098fc:	f04f 0b03 	mov.w	fp, #3
 8009900:	e7c5      	b.n	800988e <__gethex+0x1da>
 8009902:	da0b      	bge.n	800991c <__gethex+0x268>
 8009904:	eba5 0800 	sub.w	r8, r5, r0
 8009908:	4621      	mov	r1, r4
 800990a:	4642      	mov	r2, r8
 800990c:	4648      	mov	r0, r9
 800990e:	f000 fce1 	bl	800a2d4 <__lshift>
 8009912:	eba6 0608 	sub.w	r6, r6, r8
 8009916:	4604      	mov	r4, r0
 8009918:	f100 0a14 	add.w	sl, r0, #20
 800991c:	f04f 0b00 	mov.w	fp, #0
 8009920:	e7ba      	b.n	8009898 <__gethex+0x1e4>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	42b3      	cmp	r3, r6
 8009926:	dd73      	ble.n	8009a10 <__gethex+0x35c>
 8009928:	1b9e      	subs	r6, r3, r6
 800992a:	42b5      	cmp	r5, r6
 800992c:	dc34      	bgt.n	8009998 <__gethex+0x2e4>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b02      	cmp	r3, #2
 8009932:	d023      	beq.n	800997c <__gethex+0x2c8>
 8009934:	2b03      	cmp	r3, #3
 8009936:	d025      	beq.n	8009984 <__gethex+0x2d0>
 8009938:	2b01      	cmp	r3, #1
 800993a:	d115      	bne.n	8009968 <__gethex+0x2b4>
 800993c:	42b5      	cmp	r5, r6
 800993e:	d113      	bne.n	8009968 <__gethex+0x2b4>
 8009940:	2d01      	cmp	r5, #1
 8009942:	d10b      	bne.n	800995c <__gethex+0x2a8>
 8009944:	9a02      	ldr	r2, [sp, #8]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6013      	str	r3, [r2, #0]
 800994a:	2301      	movs	r3, #1
 800994c:	6123      	str	r3, [r4, #16]
 800994e:	f8ca 3000 	str.w	r3, [sl]
 8009952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009954:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009958:	601c      	str	r4, [r3, #0]
 800995a:	e735      	b.n	80097c8 <__gethex+0x114>
 800995c:	1e69      	subs	r1, r5, #1
 800995e:	4620      	mov	r0, r4
 8009960:	f000 feea 	bl	800a738 <__any_on>
 8009964:	2800      	cmp	r0, #0
 8009966:	d1ed      	bne.n	8009944 <__gethex+0x290>
 8009968:	4621      	mov	r1, r4
 800996a:	4648      	mov	r0, r9
 800996c:	f000 fa98 	bl	8009ea0 <_Bfree>
 8009970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009972:	2300      	movs	r3, #0
 8009974:	6013      	str	r3, [r2, #0]
 8009976:	f04f 0850 	mov.w	r8, #80	; 0x50
 800997a:	e725      	b.n	80097c8 <__gethex+0x114>
 800997c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1f2      	bne.n	8009968 <__gethex+0x2b4>
 8009982:	e7df      	b.n	8009944 <__gethex+0x290>
 8009984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1dc      	bne.n	8009944 <__gethex+0x290>
 800998a:	e7ed      	b.n	8009968 <__gethex+0x2b4>
 800998c:	0800b974 	.word	0x0800b974
 8009990:	0800bb86 	.word	0x0800bb86
 8009994:	0800bb97 	.word	0x0800bb97
 8009998:	f106 38ff 	add.w	r8, r6, #4294967295
 800999c:	f1bb 0f00 	cmp.w	fp, #0
 80099a0:	d133      	bne.n	8009a0a <__gethex+0x356>
 80099a2:	f1b8 0f00 	cmp.w	r8, #0
 80099a6:	d004      	beq.n	80099b2 <__gethex+0x2fe>
 80099a8:	4641      	mov	r1, r8
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 fec4 	bl	800a738 <__any_on>
 80099b0:	4683      	mov	fp, r0
 80099b2:	ea4f 1268 	mov.w	r2, r8, asr #5
 80099b6:	2301      	movs	r3, #1
 80099b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80099bc:	f008 081f 	and.w	r8, r8, #31
 80099c0:	fa03 f308 	lsl.w	r3, r3, r8
 80099c4:	4213      	tst	r3, r2
 80099c6:	4631      	mov	r1, r6
 80099c8:	4620      	mov	r0, r4
 80099ca:	bf18      	it	ne
 80099cc:	f04b 0b02 	orrne.w	fp, fp, #2
 80099d0:	1bad      	subs	r5, r5, r6
 80099d2:	f7ff fe07 	bl	80095e4 <rshift>
 80099d6:	687e      	ldr	r6, [r7, #4]
 80099d8:	f04f 0802 	mov.w	r8, #2
 80099dc:	f1bb 0f00 	cmp.w	fp, #0
 80099e0:	d04a      	beq.n	8009a78 <__gethex+0x3c4>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d016      	beq.n	8009a16 <__gethex+0x362>
 80099e8:	2b03      	cmp	r3, #3
 80099ea:	d018      	beq.n	8009a1e <__gethex+0x36a>
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d109      	bne.n	8009a04 <__gethex+0x350>
 80099f0:	f01b 0f02 	tst.w	fp, #2
 80099f4:	d006      	beq.n	8009a04 <__gethex+0x350>
 80099f6:	f8da 3000 	ldr.w	r3, [sl]
 80099fa:	ea4b 0b03 	orr.w	fp, fp, r3
 80099fe:	f01b 0f01 	tst.w	fp, #1
 8009a02:	d10f      	bne.n	8009a24 <__gethex+0x370>
 8009a04:	f048 0810 	orr.w	r8, r8, #16
 8009a08:	e036      	b.n	8009a78 <__gethex+0x3c4>
 8009a0a:	f04f 0b01 	mov.w	fp, #1
 8009a0e:	e7d0      	b.n	80099b2 <__gethex+0x2fe>
 8009a10:	f04f 0801 	mov.w	r8, #1
 8009a14:	e7e2      	b.n	80099dc <__gethex+0x328>
 8009a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a18:	f1c3 0301 	rsb	r3, r3, #1
 8009a1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d0ef      	beq.n	8009a04 <__gethex+0x350>
 8009a24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a28:	f104 0214 	add.w	r2, r4, #20
 8009a2c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009a36:	2300      	movs	r3, #0
 8009a38:	4694      	mov	ip, r2
 8009a3a:	f852 1b04 	ldr.w	r1, [r2], #4
 8009a3e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009a42:	d01e      	beq.n	8009a82 <__gethex+0x3ce>
 8009a44:	3101      	adds	r1, #1
 8009a46:	f8cc 1000 	str.w	r1, [ip]
 8009a4a:	f1b8 0f02 	cmp.w	r8, #2
 8009a4e:	f104 0214 	add.w	r2, r4, #20
 8009a52:	d13d      	bne.n	8009ad0 <__gethex+0x41c>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	42ab      	cmp	r3, r5
 8009a5a:	d10b      	bne.n	8009a74 <__gethex+0x3c0>
 8009a5c:	1169      	asrs	r1, r5, #5
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f005 051f 	and.w	r5, r5, #31
 8009a64:	fa03 f505 	lsl.w	r5, r3, r5
 8009a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a6c:	421d      	tst	r5, r3
 8009a6e:	bf18      	it	ne
 8009a70:	f04f 0801 	movne.w	r8, #1
 8009a74:	f048 0820 	orr.w	r8, r8, #32
 8009a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a7a:	601c      	str	r4, [r3, #0]
 8009a7c:	9b02      	ldr	r3, [sp, #8]
 8009a7e:	601e      	str	r6, [r3, #0]
 8009a80:	e6a2      	b.n	80097c8 <__gethex+0x114>
 8009a82:	4290      	cmp	r0, r2
 8009a84:	f842 3c04 	str.w	r3, [r2, #-4]
 8009a88:	d8d6      	bhi.n	8009a38 <__gethex+0x384>
 8009a8a:	68a2      	ldr	r2, [r4, #8]
 8009a8c:	4593      	cmp	fp, r2
 8009a8e:	db17      	blt.n	8009ac0 <__gethex+0x40c>
 8009a90:	6861      	ldr	r1, [r4, #4]
 8009a92:	4648      	mov	r0, r9
 8009a94:	3101      	adds	r1, #1
 8009a96:	f000 f9c3 	bl	8009e20 <_Balloc>
 8009a9a:	4682      	mov	sl, r0
 8009a9c:	b918      	cbnz	r0, 8009aa6 <__gethex+0x3f2>
 8009a9e:	4b1b      	ldr	r3, [pc, #108]	; (8009b0c <__gethex+0x458>)
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	2184      	movs	r1, #132	; 0x84
 8009aa4:	e6b3      	b.n	800980e <__gethex+0x15a>
 8009aa6:	6922      	ldr	r2, [r4, #16]
 8009aa8:	3202      	adds	r2, #2
 8009aaa:	f104 010c 	add.w	r1, r4, #12
 8009aae:	0092      	lsls	r2, r2, #2
 8009ab0:	300c      	adds	r0, #12
 8009ab2:	f7fe feb1 	bl	8008818 <memcpy>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4648      	mov	r0, r9
 8009aba:	f000 f9f1 	bl	8009ea0 <_Bfree>
 8009abe:	4654      	mov	r4, sl
 8009ac0:	6922      	ldr	r2, [r4, #16]
 8009ac2:	1c51      	adds	r1, r2, #1
 8009ac4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009ac8:	6121      	str	r1, [r4, #16]
 8009aca:	2101      	movs	r1, #1
 8009acc:	6151      	str	r1, [r2, #20]
 8009ace:	e7bc      	b.n	8009a4a <__gethex+0x396>
 8009ad0:	6921      	ldr	r1, [r4, #16]
 8009ad2:	4559      	cmp	r1, fp
 8009ad4:	dd0b      	ble.n	8009aee <__gethex+0x43a>
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f7ff fd83 	bl	80095e4 <rshift>
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	3601      	adds	r6, #1
 8009ae2:	42b3      	cmp	r3, r6
 8009ae4:	f6ff aedb 	blt.w	800989e <__gethex+0x1ea>
 8009ae8:	f04f 0801 	mov.w	r8, #1
 8009aec:	e7c2      	b.n	8009a74 <__gethex+0x3c0>
 8009aee:	f015 051f 	ands.w	r5, r5, #31
 8009af2:	d0f9      	beq.n	8009ae8 <__gethex+0x434>
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	441a      	add	r2, r3
 8009af8:	f1c5 0520 	rsb	r5, r5, #32
 8009afc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009b00:	f000 fa80 	bl	800a004 <__hi0bits>
 8009b04:	42a8      	cmp	r0, r5
 8009b06:	dbe6      	blt.n	8009ad6 <__gethex+0x422>
 8009b08:	e7ee      	b.n	8009ae8 <__gethex+0x434>
 8009b0a:	bf00      	nop
 8009b0c:	0800bb86 	.word	0x0800bb86

08009b10 <L_shift>:
 8009b10:	f1c2 0208 	rsb	r2, r2, #8
 8009b14:	0092      	lsls	r2, r2, #2
 8009b16:	b570      	push	{r4, r5, r6, lr}
 8009b18:	f1c2 0620 	rsb	r6, r2, #32
 8009b1c:	6843      	ldr	r3, [r0, #4]
 8009b1e:	6804      	ldr	r4, [r0, #0]
 8009b20:	fa03 f506 	lsl.w	r5, r3, r6
 8009b24:	432c      	orrs	r4, r5
 8009b26:	40d3      	lsrs	r3, r2
 8009b28:	6004      	str	r4, [r0, #0]
 8009b2a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b2e:	4288      	cmp	r0, r1
 8009b30:	d3f4      	bcc.n	8009b1c <L_shift+0xc>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}

08009b34 <__match>:
 8009b34:	b530      	push	{r4, r5, lr}
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b3e:	b914      	cbnz	r4, 8009b46 <__match+0x12>
 8009b40:	6003      	str	r3, [r0, #0]
 8009b42:	2001      	movs	r0, #1
 8009b44:	bd30      	pop	{r4, r5, pc}
 8009b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b4e:	2d19      	cmp	r5, #25
 8009b50:	bf98      	it	ls
 8009b52:	3220      	addls	r2, #32
 8009b54:	42a2      	cmp	r2, r4
 8009b56:	d0f0      	beq.n	8009b3a <__match+0x6>
 8009b58:	2000      	movs	r0, #0
 8009b5a:	e7f3      	b.n	8009b44 <__match+0x10>

08009b5c <__hexnan>:
 8009b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	680b      	ldr	r3, [r1, #0]
 8009b62:	6801      	ldr	r1, [r0, #0]
 8009b64:	115e      	asrs	r6, r3, #5
 8009b66:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b6a:	f013 031f 	ands.w	r3, r3, #31
 8009b6e:	b087      	sub	sp, #28
 8009b70:	bf18      	it	ne
 8009b72:	3604      	addne	r6, #4
 8009b74:	2500      	movs	r5, #0
 8009b76:	1f37      	subs	r7, r6, #4
 8009b78:	4682      	mov	sl, r0
 8009b7a:	4690      	mov	r8, r2
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b82:	46b9      	mov	r9, r7
 8009b84:	463c      	mov	r4, r7
 8009b86:	9502      	str	r5, [sp, #8]
 8009b88:	46ab      	mov	fp, r5
 8009b8a:	784a      	ldrb	r2, [r1, #1]
 8009b8c:	1c4b      	adds	r3, r1, #1
 8009b8e:	9303      	str	r3, [sp, #12]
 8009b90:	b342      	cbz	r2, 8009be4 <__hexnan+0x88>
 8009b92:	4610      	mov	r0, r2
 8009b94:	9105      	str	r1, [sp, #20]
 8009b96:	9204      	str	r2, [sp, #16]
 8009b98:	f7ff fd76 	bl	8009688 <__hexdig_fun>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d14f      	bne.n	8009c40 <__hexnan+0xe4>
 8009ba0:	9a04      	ldr	r2, [sp, #16]
 8009ba2:	9905      	ldr	r1, [sp, #20]
 8009ba4:	2a20      	cmp	r2, #32
 8009ba6:	d818      	bhi.n	8009bda <__hexnan+0x7e>
 8009ba8:	9b02      	ldr	r3, [sp, #8]
 8009baa:	459b      	cmp	fp, r3
 8009bac:	dd13      	ble.n	8009bd6 <__hexnan+0x7a>
 8009bae:	454c      	cmp	r4, r9
 8009bb0:	d206      	bcs.n	8009bc0 <__hexnan+0x64>
 8009bb2:	2d07      	cmp	r5, #7
 8009bb4:	dc04      	bgt.n	8009bc0 <__hexnan+0x64>
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f7ff ffa8 	bl	8009b10 <L_shift>
 8009bc0:	4544      	cmp	r4, r8
 8009bc2:	d950      	bls.n	8009c66 <__hexnan+0x10a>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f1a4 0904 	sub.w	r9, r4, #4
 8009bca:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bce:	f8cd b008 	str.w	fp, [sp, #8]
 8009bd2:	464c      	mov	r4, r9
 8009bd4:	461d      	mov	r5, r3
 8009bd6:	9903      	ldr	r1, [sp, #12]
 8009bd8:	e7d7      	b.n	8009b8a <__hexnan+0x2e>
 8009bda:	2a29      	cmp	r2, #41	; 0x29
 8009bdc:	d155      	bne.n	8009c8a <__hexnan+0x12e>
 8009bde:	3102      	adds	r1, #2
 8009be0:	f8ca 1000 	str.w	r1, [sl]
 8009be4:	f1bb 0f00 	cmp.w	fp, #0
 8009be8:	d04f      	beq.n	8009c8a <__hexnan+0x12e>
 8009bea:	454c      	cmp	r4, r9
 8009bec:	d206      	bcs.n	8009bfc <__hexnan+0xa0>
 8009bee:	2d07      	cmp	r5, #7
 8009bf0:	dc04      	bgt.n	8009bfc <__hexnan+0xa0>
 8009bf2:	462a      	mov	r2, r5
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f7ff ff8a 	bl	8009b10 <L_shift>
 8009bfc:	4544      	cmp	r4, r8
 8009bfe:	d934      	bls.n	8009c6a <__hexnan+0x10e>
 8009c00:	f1a8 0204 	sub.w	r2, r8, #4
 8009c04:	4623      	mov	r3, r4
 8009c06:	f853 1b04 	ldr.w	r1, [r3], #4
 8009c0a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009c0e:	429f      	cmp	r7, r3
 8009c10:	d2f9      	bcs.n	8009c06 <__hexnan+0xaa>
 8009c12:	1b3b      	subs	r3, r7, r4
 8009c14:	f023 0303 	bic.w	r3, r3, #3
 8009c18:	3304      	adds	r3, #4
 8009c1a:	3e03      	subs	r6, #3
 8009c1c:	3401      	adds	r4, #1
 8009c1e:	42a6      	cmp	r6, r4
 8009c20:	bf38      	it	cc
 8009c22:	2304      	movcc	r3, #4
 8009c24:	4443      	add	r3, r8
 8009c26:	2200      	movs	r2, #0
 8009c28:	f843 2b04 	str.w	r2, [r3], #4
 8009c2c:	429f      	cmp	r7, r3
 8009c2e:	d2fb      	bcs.n	8009c28 <__hexnan+0xcc>
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	b91b      	cbnz	r3, 8009c3c <__hexnan+0xe0>
 8009c34:	4547      	cmp	r7, r8
 8009c36:	d126      	bne.n	8009c86 <__hexnan+0x12a>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	2005      	movs	r0, #5
 8009c3e:	e025      	b.n	8009c8c <__hexnan+0x130>
 8009c40:	3501      	adds	r5, #1
 8009c42:	2d08      	cmp	r5, #8
 8009c44:	f10b 0b01 	add.w	fp, fp, #1
 8009c48:	dd06      	ble.n	8009c58 <__hexnan+0xfc>
 8009c4a:	4544      	cmp	r4, r8
 8009c4c:	d9c3      	bls.n	8009bd6 <__hexnan+0x7a>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c54:	2501      	movs	r5, #1
 8009c56:	3c04      	subs	r4, #4
 8009c58:	6822      	ldr	r2, [r4, #0]
 8009c5a:	f000 000f 	and.w	r0, r0, #15
 8009c5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c62:	6020      	str	r0, [r4, #0]
 8009c64:	e7b7      	b.n	8009bd6 <__hexnan+0x7a>
 8009c66:	2508      	movs	r5, #8
 8009c68:	e7b5      	b.n	8009bd6 <__hexnan+0x7a>
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0df      	beq.n	8009c30 <__hexnan+0xd4>
 8009c70:	f1c3 0320 	rsb	r3, r3, #32
 8009c74:	f04f 32ff 	mov.w	r2, #4294967295
 8009c78:	40da      	lsrs	r2, r3
 8009c7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c84:	e7d4      	b.n	8009c30 <__hexnan+0xd4>
 8009c86:	3f04      	subs	r7, #4
 8009c88:	e7d2      	b.n	8009c30 <__hexnan+0xd4>
 8009c8a:	2004      	movs	r0, #4
 8009c8c:	b007      	add	sp, #28
 8009c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009c94 <malloc>:
 8009c94:	4b02      	ldr	r3, [pc, #8]	; (8009ca0 <malloc+0xc>)
 8009c96:	4601      	mov	r1, r0
 8009c98:	6818      	ldr	r0, [r3, #0]
 8009c9a:	f000 b823 	b.w	8009ce4 <_malloc_r>
 8009c9e:	bf00      	nop
 8009ca0:	20000278 	.word	0x20000278

08009ca4 <sbrk_aligned>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4e0e      	ldr	r6, [pc, #56]	; (8009ce0 <sbrk_aligned+0x3c>)
 8009ca8:	460c      	mov	r4, r1
 8009caa:	6831      	ldr	r1, [r6, #0]
 8009cac:	4605      	mov	r5, r0
 8009cae:	b911      	cbnz	r1, 8009cb6 <sbrk_aligned+0x12>
 8009cb0:	f000 ff90 	bl	800abd4 <_sbrk_r>
 8009cb4:	6030      	str	r0, [r6, #0]
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f000 ff8b 	bl	800abd4 <_sbrk_r>
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	d00a      	beq.n	8009cd8 <sbrk_aligned+0x34>
 8009cc2:	1cc4      	adds	r4, r0, #3
 8009cc4:	f024 0403 	bic.w	r4, r4, #3
 8009cc8:	42a0      	cmp	r0, r4
 8009cca:	d007      	beq.n	8009cdc <sbrk_aligned+0x38>
 8009ccc:	1a21      	subs	r1, r4, r0
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f000 ff80 	bl	800abd4 <_sbrk_r>
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d101      	bne.n	8009cdc <sbrk_aligned+0x38>
 8009cd8:	f04f 34ff 	mov.w	r4, #4294967295
 8009cdc:	4620      	mov	r0, r4
 8009cde:	bd70      	pop	{r4, r5, r6, pc}
 8009ce0:	2000060c 	.word	0x2000060c

08009ce4 <_malloc_r>:
 8009ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce8:	1ccd      	adds	r5, r1, #3
 8009cea:	f025 0503 	bic.w	r5, r5, #3
 8009cee:	3508      	adds	r5, #8
 8009cf0:	2d0c      	cmp	r5, #12
 8009cf2:	bf38      	it	cc
 8009cf4:	250c      	movcc	r5, #12
 8009cf6:	2d00      	cmp	r5, #0
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	db01      	blt.n	8009d00 <_malloc_r+0x1c>
 8009cfc:	42a9      	cmp	r1, r5
 8009cfe:	d905      	bls.n	8009d0c <_malloc_r+0x28>
 8009d00:	230c      	movs	r3, #12
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	2600      	movs	r6, #0
 8009d06:	4630      	mov	r0, r6
 8009d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009de0 <_malloc_r+0xfc>
 8009d10:	f000 f87a 	bl	8009e08 <__malloc_lock>
 8009d14:	f8d8 3000 	ldr.w	r3, [r8]
 8009d18:	461c      	mov	r4, r3
 8009d1a:	bb5c      	cbnz	r4, 8009d74 <_malloc_r+0x90>
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	4638      	mov	r0, r7
 8009d20:	f7ff ffc0 	bl	8009ca4 <sbrk_aligned>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	4604      	mov	r4, r0
 8009d28:	d155      	bne.n	8009dd6 <_malloc_r+0xf2>
 8009d2a:	f8d8 4000 	ldr.w	r4, [r8]
 8009d2e:	4626      	mov	r6, r4
 8009d30:	2e00      	cmp	r6, #0
 8009d32:	d145      	bne.n	8009dc0 <_malloc_r+0xdc>
 8009d34:	2c00      	cmp	r4, #0
 8009d36:	d048      	beq.n	8009dca <_malloc_r+0xe6>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	eb04 0903 	add.w	r9, r4, r3
 8009d42:	f000 ff47 	bl	800abd4 <_sbrk_r>
 8009d46:	4581      	cmp	r9, r0
 8009d48:	d13f      	bne.n	8009dca <_malloc_r+0xe6>
 8009d4a:	6821      	ldr	r1, [r4, #0]
 8009d4c:	1a6d      	subs	r5, r5, r1
 8009d4e:	4629      	mov	r1, r5
 8009d50:	4638      	mov	r0, r7
 8009d52:	f7ff ffa7 	bl	8009ca4 <sbrk_aligned>
 8009d56:	3001      	adds	r0, #1
 8009d58:	d037      	beq.n	8009dca <_malloc_r+0xe6>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	442b      	add	r3, r5
 8009d5e:	6023      	str	r3, [r4, #0]
 8009d60:	f8d8 3000 	ldr.w	r3, [r8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d038      	beq.n	8009dda <_malloc_r+0xf6>
 8009d68:	685a      	ldr	r2, [r3, #4]
 8009d6a:	42a2      	cmp	r2, r4
 8009d6c:	d12b      	bne.n	8009dc6 <_malloc_r+0xe2>
 8009d6e:	2200      	movs	r2, #0
 8009d70:	605a      	str	r2, [r3, #4]
 8009d72:	e00f      	b.n	8009d94 <_malloc_r+0xb0>
 8009d74:	6822      	ldr	r2, [r4, #0]
 8009d76:	1b52      	subs	r2, r2, r5
 8009d78:	d41f      	bmi.n	8009dba <_malloc_r+0xd6>
 8009d7a:	2a0b      	cmp	r2, #11
 8009d7c:	d917      	bls.n	8009dae <_malloc_r+0xca>
 8009d7e:	1961      	adds	r1, r4, r5
 8009d80:	42a3      	cmp	r3, r4
 8009d82:	6025      	str	r5, [r4, #0]
 8009d84:	bf18      	it	ne
 8009d86:	6059      	strne	r1, [r3, #4]
 8009d88:	6863      	ldr	r3, [r4, #4]
 8009d8a:	bf08      	it	eq
 8009d8c:	f8c8 1000 	streq.w	r1, [r8]
 8009d90:	5162      	str	r2, [r4, r5]
 8009d92:	604b      	str	r3, [r1, #4]
 8009d94:	4638      	mov	r0, r7
 8009d96:	f104 060b 	add.w	r6, r4, #11
 8009d9a:	f000 f83b 	bl	8009e14 <__malloc_unlock>
 8009d9e:	f026 0607 	bic.w	r6, r6, #7
 8009da2:	1d23      	adds	r3, r4, #4
 8009da4:	1af2      	subs	r2, r6, r3
 8009da6:	d0ae      	beq.n	8009d06 <_malloc_r+0x22>
 8009da8:	1b9b      	subs	r3, r3, r6
 8009daa:	50a3      	str	r3, [r4, r2]
 8009dac:	e7ab      	b.n	8009d06 <_malloc_r+0x22>
 8009dae:	42a3      	cmp	r3, r4
 8009db0:	6862      	ldr	r2, [r4, #4]
 8009db2:	d1dd      	bne.n	8009d70 <_malloc_r+0x8c>
 8009db4:	f8c8 2000 	str.w	r2, [r8]
 8009db8:	e7ec      	b.n	8009d94 <_malloc_r+0xb0>
 8009dba:	4623      	mov	r3, r4
 8009dbc:	6864      	ldr	r4, [r4, #4]
 8009dbe:	e7ac      	b.n	8009d1a <_malloc_r+0x36>
 8009dc0:	4634      	mov	r4, r6
 8009dc2:	6876      	ldr	r6, [r6, #4]
 8009dc4:	e7b4      	b.n	8009d30 <_malloc_r+0x4c>
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	e7cc      	b.n	8009d64 <_malloc_r+0x80>
 8009dca:	230c      	movs	r3, #12
 8009dcc:	603b      	str	r3, [r7, #0]
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f000 f820 	bl	8009e14 <__malloc_unlock>
 8009dd4:	e797      	b.n	8009d06 <_malloc_r+0x22>
 8009dd6:	6025      	str	r5, [r4, #0]
 8009dd8:	e7dc      	b.n	8009d94 <_malloc_r+0xb0>
 8009dda:	605b      	str	r3, [r3, #4]
 8009ddc:	deff      	udf	#255	; 0xff
 8009dde:	bf00      	nop
 8009de0:	20000608 	.word	0x20000608

08009de4 <__ascii_mbtowc>:
 8009de4:	b082      	sub	sp, #8
 8009de6:	b901      	cbnz	r1, 8009dea <__ascii_mbtowc+0x6>
 8009de8:	a901      	add	r1, sp, #4
 8009dea:	b142      	cbz	r2, 8009dfe <__ascii_mbtowc+0x1a>
 8009dec:	b14b      	cbz	r3, 8009e02 <__ascii_mbtowc+0x1e>
 8009dee:	7813      	ldrb	r3, [r2, #0]
 8009df0:	600b      	str	r3, [r1, #0]
 8009df2:	7812      	ldrb	r2, [r2, #0]
 8009df4:	1e10      	subs	r0, r2, #0
 8009df6:	bf18      	it	ne
 8009df8:	2001      	movne	r0, #1
 8009dfa:	b002      	add	sp, #8
 8009dfc:	4770      	bx	lr
 8009dfe:	4610      	mov	r0, r2
 8009e00:	e7fb      	b.n	8009dfa <__ascii_mbtowc+0x16>
 8009e02:	f06f 0001 	mvn.w	r0, #1
 8009e06:	e7f8      	b.n	8009dfa <__ascii_mbtowc+0x16>

08009e08 <__malloc_lock>:
 8009e08:	4801      	ldr	r0, [pc, #4]	; (8009e10 <__malloc_lock+0x8>)
 8009e0a:	f7fe bd03 	b.w	8008814 <__retarget_lock_acquire_recursive>
 8009e0e:	bf00      	nop
 8009e10:	20000604 	.word	0x20000604

08009e14 <__malloc_unlock>:
 8009e14:	4801      	ldr	r0, [pc, #4]	; (8009e1c <__malloc_unlock+0x8>)
 8009e16:	f7fe bcfe 	b.w	8008816 <__retarget_lock_release_recursive>
 8009e1a:	bf00      	nop
 8009e1c:	20000604 	.word	0x20000604

08009e20 <_Balloc>:
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	69c6      	ldr	r6, [r0, #28]
 8009e24:	4604      	mov	r4, r0
 8009e26:	460d      	mov	r5, r1
 8009e28:	b976      	cbnz	r6, 8009e48 <_Balloc+0x28>
 8009e2a:	2010      	movs	r0, #16
 8009e2c:	f7ff ff32 	bl	8009c94 <malloc>
 8009e30:	4602      	mov	r2, r0
 8009e32:	61e0      	str	r0, [r4, #28]
 8009e34:	b920      	cbnz	r0, 8009e40 <_Balloc+0x20>
 8009e36:	4b18      	ldr	r3, [pc, #96]	; (8009e98 <_Balloc+0x78>)
 8009e38:	4818      	ldr	r0, [pc, #96]	; (8009e9c <_Balloc+0x7c>)
 8009e3a:	216b      	movs	r1, #107	; 0x6b
 8009e3c:	f000 feda 	bl	800abf4 <__assert_func>
 8009e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e44:	6006      	str	r6, [r0, #0]
 8009e46:	60c6      	str	r6, [r0, #12]
 8009e48:	69e6      	ldr	r6, [r4, #28]
 8009e4a:	68f3      	ldr	r3, [r6, #12]
 8009e4c:	b183      	cbz	r3, 8009e70 <_Balloc+0x50>
 8009e4e:	69e3      	ldr	r3, [r4, #28]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e56:	b9b8      	cbnz	r0, 8009e88 <_Balloc+0x68>
 8009e58:	2101      	movs	r1, #1
 8009e5a:	fa01 f605 	lsl.w	r6, r1, r5
 8009e5e:	1d72      	adds	r2, r6, #5
 8009e60:	0092      	lsls	r2, r2, #2
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 fee4 	bl	800ac30 <_calloc_r>
 8009e68:	b160      	cbz	r0, 8009e84 <_Balloc+0x64>
 8009e6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e6e:	e00e      	b.n	8009e8e <_Balloc+0x6e>
 8009e70:	2221      	movs	r2, #33	; 0x21
 8009e72:	2104      	movs	r1, #4
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fedb 	bl	800ac30 <_calloc_r>
 8009e7a:	69e3      	ldr	r3, [r4, #28]
 8009e7c:	60f0      	str	r0, [r6, #12]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d1e4      	bne.n	8009e4e <_Balloc+0x2e>
 8009e84:	2000      	movs	r0, #0
 8009e86:	bd70      	pop	{r4, r5, r6, pc}
 8009e88:	6802      	ldr	r2, [r0, #0]
 8009e8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e8e:	2300      	movs	r3, #0
 8009e90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e94:	e7f7      	b.n	8009e86 <_Balloc+0x66>
 8009e96:	bf00      	nop
 8009e98:	0800bb17 	.word	0x0800bb17
 8009e9c:	0800bbf7 	.word	0x0800bbf7

08009ea0 <_Bfree>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	69c6      	ldr	r6, [r0, #28]
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	b976      	cbnz	r6, 8009ec8 <_Bfree+0x28>
 8009eaa:	2010      	movs	r0, #16
 8009eac:	f7ff fef2 	bl	8009c94 <malloc>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	61e8      	str	r0, [r5, #28]
 8009eb4:	b920      	cbnz	r0, 8009ec0 <_Bfree+0x20>
 8009eb6:	4b09      	ldr	r3, [pc, #36]	; (8009edc <_Bfree+0x3c>)
 8009eb8:	4809      	ldr	r0, [pc, #36]	; (8009ee0 <_Bfree+0x40>)
 8009eba:	218f      	movs	r1, #143	; 0x8f
 8009ebc:	f000 fe9a 	bl	800abf4 <__assert_func>
 8009ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ec4:	6006      	str	r6, [r0, #0]
 8009ec6:	60c6      	str	r6, [r0, #12]
 8009ec8:	b13c      	cbz	r4, 8009eda <_Bfree+0x3a>
 8009eca:	69eb      	ldr	r3, [r5, #28]
 8009ecc:	6862      	ldr	r2, [r4, #4]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ed4:	6021      	str	r1, [r4, #0]
 8009ed6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009eda:	bd70      	pop	{r4, r5, r6, pc}
 8009edc:	0800bb17 	.word	0x0800bb17
 8009ee0:	0800bbf7 	.word	0x0800bbf7

08009ee4 <__multadd>:
 8009ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee8:	690d      	ldr	r5, [r1, #16]
 8009eea:	4607      	mov	r7, r0
 8009eec:	460c      	mov	r4, r1
 8009eee:	461e      	mov	r6, r3
 8009ef0:	f101 0c14 	add.w	ip, r1, #20
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	f8dc 3000 	ldr.w	r3, [ip]
 8009efa:	b299      	uxth	r1, r3
 8009efc:	fb02 6101 	mla	r1, r2, r1, r6
 8009f00:	0c1e      	lsrs	r6, r3, #16
 8009f02:	0c0b      	lsrs	r3, r1, #16
 8009f04:	fb02 3306 	mla	r3, r2, r6, r3
 8009f08:	b289      	uxth	r1, r1
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f10:	4285      	cmp	r5, r0
 8009f12:	f84c 1b04 	str.w	r1, [ip], #4
 8009f16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f1a:	dcec      	bgt.n	8009ef6 <__multadd+0x12>
 8009f1c:	b30e      	cbz	r6, 8009f62 <__multadd+0x7e>
 8009f1e:	68a3      	ldr	r3, [r4, #8]
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	dc19      	bgt.n	8009f58 <__multadd+0x74>
 8009f24:	6861      	ldr	r1, [r4, #4]
 8009f26:	4638      	mov	r0, r7
 8009f28:	3101      	adds	r1, #1
 8009f2a:	f7ff ff79 	bl	8009e20 <_Balloc>
 8009f2e:	4680      	mov	r8, r0
 8009f30:	b928      	cbnz	r0, 8009f3e <__multadd+0x5a>
 8009f32:	4602      	mov	r2, r0
 8009f34:	4b0c      	ldr	r3, [pc, #48]	; (8009f68 <__multadd+0x84>)
 8009f36:	480d      	ldr	r0, [pc, #52]	; (8009f6c <__multadd+0x88>)
 8009f38:	21ba      	movs	r1, #186	; 0xba
 8009f3a:	f000 fe5b 	bl	800abf4 <__assert_func>
 8009f3e:	6922      	ldr	r2, [r4, #16]
 8009f40:	3202      	adds	r2, #2
 8009f42:	f104 010c 	add.w	r1, r4, #12
 8009f46:	0092      	lsls	r2, r2, #2
 8009f48:	300c      	adds	r0, #12
 8009f4a:	f7fe fc65 	bl	8008818 <memcpy>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4638      	mov	r0, r7
 8009f52:	f7ff ffa5 	bl	8009ea0 <_Bfree>
 8009f56:	4644      	mov	r4, r8
 8009f58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f5c:	3501      	adds	r5, #1
 8009f5e:	615e      	str	r6, [r3, #20]
 8009f60:	6125      	str	r5, [r4, #16]
 8009f62:	4620      	mov	r0, r4
 8009f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f68:	0800bb86 	.word	0x0800bb86
 8009f6c:	0800bbf7 	.word	0x0800bbf7

08009f70 <__s2b>:
 8009f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f74:	460c      	mov	r4, r1
 8009f76:	4615      	mov	r5, r2
 8009f78:	461f      	mov	r7, r3
 8009f7a:	2209      	movs	r2, #9
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	4606      	mov	r6, r0
 8009f80:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f84:	2100      	movs	r1, #0
 8009f86:	2201      	movs	r2, #1
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	db09      	blt.n	8009fa0 <__s2b+0x30>
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7ff ff47 	bl	8009e20 <_Balloc>
 8009f92:	b940      	cbnz	r0, 8009fa6 <__s2b+0x36>
 8009f94:	4602      	mov	r2, r0
 8009f96:	4b19      	ldr	r3, [pc, #100]	; (8009ffc <__s2b+0x8c>)
 8009f98:	4819      	ldr	r0, [pc, #100]	; (800a000 <__s2b+0x90>)
 8009f9a:	21d3      	movs	r1, #211	; 0xd3
 8009f9c:	f000 fe2a 	bl	800abf4 <__assert_func>
 8009fa0:	0052      	lsls	r2, r2, #1
 8009fa2:	3101      	adds	r1, #1
 8009fa4:	e7f0      	b.n	8009f88 <__s2b+0x18>
 8009fa6:	9b08      	ldr	r3, [sp, #32]
 8009fa8:	6143      	str	r3, [r0, #20]
 8009faa:	2d09      	cmp	r5, #9
 8009fac:	f04f 0301 	mov.w	r3, #1
 8009fb0:	6103      	str	r3, [r0, #16]
 8009fb2:	dd16      	ble.n	8009fe2 <__s2b+0x72>
 8009fb4:	f104 0909 	add.w	r9, r4, #9
 8009fb8:	46c8      	mov	r8, r9
 8009fba:	442c      	add	r4, r5
 8009fbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009fc0:	4601      	mov	r1, r0
 8009fc2:	3b30      	subs	r3, #48	; 0x30
 8009fc4:	220a      	movs	r2, #10
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7ff ff8c 	bl	8009ee4 <__multadd>
 8009fcc:	45a0      	cmp	r8, r4
 8009fce:	d1f5      	bne.n	8009fbc <__s2b+0x4c>
 8009fd0:	f1a5 0408 	sub.w	r4, r5, #8
 8009fd4:	444c      	add	r4, r9
 8009fd6:	1b2d      	subs	r5, r5, r4
 8009fd8:	1963      	adds	r3, r4, r5
 8009fda:	42bb      	cmp	r3, r7
 8009fdc:	db04      	blt.n	8009fe8 <__s2b+0x78>
 8009fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fe2:	340a      	adds	r4, #10
 8009fe4:	2509      	movs	r5, #9
 8009fe6:	e7f6      	b.n	8009fd6 <__s2b+0x66>
 8009fe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fec:	4601      	mov	r1, r0
 8009fee:	3b30      	subs	r3, #48	; 0x30
 8009ff0:	220a      	movs	r2, #10
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f7ff ff76 	bl	8009ee4 <__multadd>
 8009ff8:	e7ee      	b.n	8009fd8 <__s2b+0x68>
 8009ffa:	bf00      	nop
 8009ffc:	0800bb86 	.word	0x0800bb86
 800a000:	0800bbf7 	.word	0x0800bbf7

0800a004 <__hi0bits>:
 800a004:	0c03      	lsrs	r3, r0, #16
 800a006:	041b      	lsls	r3, r3, #16
 800a008:	b9d3      	cbnz	r3, 800a040 <__hi0bits+0x3c>
 800a00a:	0400      	lsls	r0, r0, #16
 800a00c:	2310      	movs	r3, #16
 800a00e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a012:	bf04      	itt	eq
 800a014:	0200      	lsleq	r0, r0, #8
 800a016:	3308      	addeq	r3, #8
 800a018:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a01c:	bf04      	itt	eq
 800a01e:	0100      	lsleq	r0, r0, #4
 800a020:	3304      	addeq	r3, #4
 800a022:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a026:	bf04      	itt	eq
 800a028:	0080      	lsleq	r0, r0, #2
 800a02a:	3302      	addeq	r3, #2
 800a02c:	2800      	cmp	r0, #0
 800a02e:	db05      	blt.n	800a03c <__hi0bits+0x38>
 800a030:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a034:	f103 0301 	add.w	r3, r3, #1
 800a038:	bf08      	it	eq
 800a03a:	2320      	moveq	r3, #32
 800a03c:	4618      	mov	r0, r3
 800a03e:	4770      	bx	lr
 800a040:	2300      	movs	r3, #0
 800a042:	e7e4      	b.n	800a00e <__hi0bits+0xa>

0800a044 <__lo0bits>:
 800a044:	6803      	ldr	r3, [r0, #0]
 800a046:	f013 0207 	ands.w	r2, r3, #7
 800a04a:	d00c      	beq.n	800a066 <__lo0bits+0x22>
 800a04c:	07d9      	lsls	r1, r3, #31
 800a04e:	d422      	bmi.n	800a096 <__lo0bits+0x52>
 800a050:	079a      	lsls	r2, r3, #30
 800a052:	bf49      	itett	mi
 800a054:	085b      	lsrmi	r3, r3, #1
 800a056:	089b      	lsrpl	r3, r3, #2
 800a058:	6003      	strmi	r3, [r0, #0]
 800a05a:	2201      	movmi	r2, #1
 800a05c:	bf5c      	itt	pl
 800a05e:	6003      	strpl	r3, [r0, #0]
 800a060:	2202      	movpl	r2, #2
 800a062:	4610      	mov	r0, r2
 800a064:	4770      	bx	lr
 800a066:	b299      	uxth	r1, r3
 800a068:	b909      	cbnz	r1, 800a06e <__lo0bits+0x2a>
 800a06a:	0c1b      	lsrs	r3, r3, #16
 800a06c:	2210      	movs	r2, #16
 800a06e:	b2d9      	uxtb	r1, r3
 800a070:	b909      	cbnz	r1, 800a076 <__lo0bits+0x32>
 800a072:	3208      	adds	r2, #8
 800a074:	0a1b      	lsrs	r3, r3, #8
 800a076:	0719      	lsls	r1, r3, #28
 800a078:	bf04      	itt	eq
 800a07a:	091b      	lsreq	r3, r3, #4
 800a07c:	3204      	addeq	r2, #4
 800a07e:	0799      	lsls	r1, r3, #30
 800a080:	bf04      	itt	eq
 800a082:	089b      	lsreq	r3, r3, #2
 800a084:	3202      	addeq	r2, #2
 800a086:	07d9      	lsls	r1, r3, #31
 800a088:	d403      	bmi.n	800a092 <__lo0bits+0x4e>
 800a08a:	085b      	lsrs	r3, r3, #1
 800a08c:	f102 0201 	add.w	r2, r2, #1
 800a090:	d003      	beq.n	800a09a <__lo0bits+0x56>
 800a092:	6003      	str	r3, [r0, #0]
 800a094:	e7e5      	b.n	800a062 <__lo0bits+0x1e>
 800a096:	2200      	movs	r2, #0
 800a098:	e7e3      	b.n	800a062 <__lo0bits+0x1e>
 800a09a:	2220      	movs	r2, #32
 800a09c:	e7e1      	b.n	800a062 <__lo0bits+0x1e>
	...

0800a0a0 <__i2b>:
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	f7ff febb 	bl	8009e20 <_Balloc>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	b928      	cbnz	r0, 800a0ba <__i2b+0x1a>
 800a0ae:	4b05      	ldr	r3, [pc, #20]	; (800a0c4 <__i2b+0x24>)
 800a0b0:	4805      	ldr	r0, [pc, #20]	; (800a0c8 <__i2b+0x28>)
 800a0b2:	f240 1145 	movw	r1, #325	; 0x145
 800a0b6:	f000 fd9d 	bl	800abf4 <__assert_func>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	6144      	str	r4, [r0, #20]
 800a0be:	6103      	str	r3, [r0, #16]
 800a0c0:	bd10      	pop	{r4, pc}
 800a0c2:	bf00      	nop
 800a0c4:	0800bb86 	.word	0x0800bb86
 800a0c8:	0800bbf7 	.word	0x0800bbf7

0800a0cc <__multiply>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	4691      	mov	r9, r2
 800a0d2:	690a      	ldr	r2, [r1, #16]
 800a0d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	bfb8      	it	lt
 800a0dc:	460b      	movlt	r3, r1
 800a0de:	460c      	mov	r4, r1
 800a0e0:	bfbc      	itt	lt
 800a0e2:	464c      	movlt	r4, r9
 800a0e4:	4699      	movlt	r9, r3
 800a0e6:	6927      	ldr	r7, [r4, #16]
 800a0e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0ec:	68a3      	ldr	r3, [r4, #8]
 800a0ee:	6861      	ldr	r1, [r4, #4]
 800a0f0:	eb07 060a 	add.w	r6, r7, sl
 800a0f4:	42b3      	cmp	r3, r6
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	bfb8      	it	lt
 800a0fa:	3101      	addlt	r1, #1
 800a0fc:	f7ff fe90 	bl	8009e20 <_Balloc>
 800a100:	b930      	cbnz	r0, 800a110 <__multiply+0x44>
 800a102:	4602      	mov	r2, r0
 800a104:	4b44      	ldr	r3, [pc, #272]	; (800a218 <__multiply+0x14c>)
 800a106:	4845      	ldr	r0, [pc, #276]	; (800a21c <__multiply+0x150>)
 800a108:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a10c:	f000 fd72 	bl	800abf4 <__assert_func>
 800a110:	f100 0514 	add.w	r5, r0, #20
 800a114:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a118:	462b      	mov	r3, r5
 800a11a:	2200      	movs	r2, #0
 800a11c:	4543      	cmp	r3, r8
 800a11e:	d321      	bcc.n	800a164 <__multiply+0x98>
 800a120:	f104 0314 	add.w	r3, r4, #20
 800a124:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a128:	f109 0314 	add.w	r3, r9, #20
 800a12c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a130:	9202      	str	r2, [sp, #8]
 800a132:	1b3a      	subs	r2, r7, r4
 800a134:	3a15      	subs	r2, #21
 800a136:	f022 0203 	bic.w	r2, r2, #3
 800a13a:	3204      	adds	r2, #4
 800a13c:	f104 0115 	add.w	r1, r4, #21
 800a140:	428f      	cmp	r7, r1
 800a142:	bf38      	it	cc
 800a144:	2204      	movcc	r2, #4
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	9a02      	ldr	r2, [sp, #8]
 800a14a:	9303      	str	r3, [sp, #12]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d80c      	bhi.n	800a16a <__multiply+0x9e>
 800a150:	2e00      	cmp	r6, #0
 800a152:	dd03      	ble.n	800a15c <__multiply+0x90>
 800a154:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d05b      	beq.n	800a214 <__multiply+0x148>
 800a15c:	6106      	str	r6, [r0, #16]
 800a15e:	b005      	add	sp, #20
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a164:	f843 2b04 	str.w	r2, [r3], #4
 800a168:	e7d8      	b.n	800a11c <__multiply+0x50>
 800a16a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a16e:	f1ba 0f00 	cmp.w	sl, #0
 800a172:	d024      	beq.n	800a1be <__multiply+0xf2>
 800a174:	f104 0e14 	add.w	lr, r4, #20
 800a178:	46a9      	mov	r9, r5
 800a17a:	f04f 0c00 	mov.w	ip, #0
 800a17e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a182:	f8d9 1000 	ldr.w	r1, [r9]
 800a186:	fa1f fb82 	uxth.w	fp, r2
 800a18a:	b289      	uxth	r1, r1
 800a18c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a190:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a194:	f8d9 2000 	ldr.w	r2, [r9]
 800a198:	4461      	add	r1, ip
 800a19a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a19e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1a6:	b289      	uxth	r1, r1
 800a1a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1ac:	4577      	cmp	r7, lr
 800a1ae:	f849 1b04 	str.w	r1, [r9], #4
 800a1b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1b6:	d8e2      	bhi.n	800a17e <__multiply+0xb2>
 800a1b8:	9a01      	ldr	r2, [sp, #4]
 800a1ba:	f845 c002 	str.w	ip, [r5, r2]
 800a1be:	9a03      	ldr	r2, [sp, #12]
 800a1c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a1c4:	3304      	adds	r3, #4
 800a1c6:	f1b9 0f00 	cmp.w	r9, #0
 800a1ca:	d021      	beq.n	800a210 <__multiply+0x144>
 800a1cc:	6829      	ldr	r1, [r5, #0]
 800a1ce:	f104 0c14 	add.w	ip, r4, #20
 800a1d2:	46ae      	mov	lr, r5
 800a1d4:	f04f 0a00 	mov.w	sl, #0
 800a1d8:	f8bc b000 	ldrh.w	fp, [ip]
 800a1dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1e0:	fb09 220b 	mla	r2, r9, fp, r2
 800a1e4:	4452      	add	r2, sl
 800a1e6:	b289      	uxth	r1, r1
 800a1e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1ec:	f84e 1b04 	str.w	r1, [lr], #4
 800a1f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a1f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1f8:	f8be 1000 	ldrh.w	r1, [lr]
 800a1fc:	fb09 110a 	mla	r1, r9, sl, r1
 800a200:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a204:	4567      	cmp	r7, ip
 800a206:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a20a:	d8e5      	bhi.n	800a1d8 <__multiply+0x10c>
 800a20c:	9a01      	ldr	r2, [sp, #4]
 800a20e:	50a9      	str	r1, [r5, r2]
 800a210:	3504      	adds	r5, #4
 800a212:	e799      	b.n	800a148 <__multiply+0x7c>
 800a214:	3e01      	subs	r6, #1
 800a216:	e79b      	b.n	800a150 <__multiply+0x84>
 800a218:	0800bb86 	.word	0x0800bb86
 800a21c:	0800bbf7 	.word	0x0800bbf7

0800a220 <__pow5mult>:
 800a220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a224:	4615      	mov	r5, r2
 800a226:	f012 0203 	ands.w	r2, r2, #3
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	d007      	beq.n	800a240 <__pow5mult+0x20>
 800a230:	4c25      	ldr	r4, [pc, #148]	; (800a2c8 <__pow5mult+0xa8>)
 800a232:	3a01      	subs	r2, #1
 800a234:	2300      	movs	r3, #0
 800a236:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a23a:	f7ff fe53 	bl	8009ee4 <__multadd>
 800a23e:	4607      	mov	r7, r0
 800a240:	10ad      	asrs	r5, r5, #2
 800a242:	d03d      	beq.n	800a2c0 <__pow5mult+0xa0>
 800a244:	69f4      	ldr	r4, [r6, #28]
 800a246:	b97c      	cbnz	r4, 800a268 <__pow5mult+0x48>
 800a248:	2010      	movs	r0, #16
 800a24a:	f7ff fd23 	bl	8009c94 <malloc>
 800a24e:	4602      	mov	r2, r0
 800a250:	61f0      	str	r0, [r6, #28]
 800a252:	b928      	cbnz	r0, 800a260 <__pow5mult+0x40>
 800a254:	4b1d      	ldr	r3, [pc, #116]	; (800a2cc <__pow5mult+0xac>)
 800a256:	481e      	ldr	r0, [pc, #120]	; (800a2d0 <__pow5mult+0xb0>)
 800a258:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a25c:	f000 fcca 	bl	800abf4 <__assert_func>
 800a260:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a264:	6004      	str	r4, [r0, #0]
 800a266:	60c4      	str	r4, [r0, #12]
 800a268:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a26c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a270:	b94c      	cbnz	r4, 800a286 <__pow5mult+0x66>
 800a272:	f240 2171 	movw	r1, #625	; 0x271
 800a276:	4630      	mov	r0, r6
 800a278:	f7ff ff12 	bl	800a0a0 <__i2b>
 800a27c:	2300      	movs	r3, #0
 800a27e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a282:	4604      	mov	r4, r0
 800a284:	6003      	str	r3, [r0, #0]
 800a286:	f04f 0900 	mov.w	r9, #0
 800a28a:	07eb      	lsls	r3, r5, #31
 800a28c:	d50a      	bpl.n	800a2a4 <__pow5mult+0x84>
 800a28e:	4639      	mov	r1, r7
 800a290:	4622      	mov	r2, r4
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ff1a 	bl	800a0cc <__multiply>
 800a298:	4639      	mov	r1, r7
 800a29a:	4680      	mov	r8, r0
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7ff fdff 	bl	8009ea0 <_Bfree>
 800a2a2:	4647      	mov	r7, r8
 800a2a4:	106d      	asrs	r5, r5, #1
 800a2a6:	d00b      	beq.n	800a2c0 <__pow5mult+0xa0>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	b938      	cbnz	r0, 800a2bc <__pow5mult+0x9c>
 800a2ac:	4622      	mov	r2, r4
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f7ff ff0b 	bl	800a0cc <__multiply>
 800a2b6:	6020      	str	r0, [r4, #0]
 800a2b8:	f8c0 9000 	str.w	r9, [r0]
 800a2bc:	4604      	mov	r4, r0
 800a2be:	e7e4      	b.n	800a28a <__pow5mult+0x6a>
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c6:	bf00      	nop
 800a2c8:	0800bd40 	.word	0x0800bd40
 800a2cc:	0800bb17 	.word	0x0800bb17
 800a2d0:	0800bbf7 	.word	0x0800bbf7

0800a2d4 <__lshift>:
 800a2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d8:	460c      	mov	r4, r1
 800a2da:	6849      	ldr	r1, [r1, #4]
 800a2dc:	6923      	ldr	r3, [r4, #16]
 800a2de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2e2:	68a3      	ldr	r3, [r4, #8]
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	4691      	mov	r9, r2
 800a2e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2ec:	f108 0601 	add.w	r6, r8, #1
 800a2f0:	42b3      	cmp	r3, r6
 800a2f2:	db0b      	blt.n	800a30c <__lshift+0x38>
 800a2f4:	4638      	mov	r0, r7
 800a2f6:	f7ff fd93 	bl	8009e20 <_Balloc>
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	b948      	cbnz	r0, 800a312 <__lshift+0x3e>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b28      	ldr	r3, [pc, #160]	; (800a3a4 <__lshift+0xd0>)
 800a302:	4829      	ldr	r0, [pc, #164]	; (800a3a8 <__lshift+0xd4>)
 800a304:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a308:	f000 fc74 	bl	800abf4 <__assert_func>
 800a30c:	3101      	adds	r1, #1
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	e7ee      	b.n	800a2f0 <__lshift+0x1c>
 800a312:	2300      	movs	r3, #0
 800a314:	f100 0114 	add.w	r1, r0, #20
 800a318:	f100 0210 	add.w	r2, r0, #16
 800a31c:	4618      	mov	r0, r3
 800a31e:	4553      	cmp	r3, sl
 800a320:	db33      	blt.n	800a38a <__lshift+0xb6>
 800a322:	6920      	ldr	r0, [r4, #16]
 800a324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a328:	f104 0314 	add.w	r3, r4, #20
 800a32c:	f019 091f 	ands.w	r9, r9, #31
 800a330:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a334:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a338:	d02b      	beq.n	800a392 <__lshift+0xbe>
 800a33a:	f1c9 0e20 	rsb	lr, r9, #32
 800a33e:	468a      	mov	sl, r1
 800a340:	2200      	movs	r2, #0
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	fa00 f009 	lsl.w	r0, r0, r9
 800a348:	4310      	orrs	r0, r2
 800a34a:	f84a 0b04 	str.w	r0, [sl], #4
 800a34e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a352:	459c      	cmp	ip, r3
 800a354:	fa22 f20e 	lsr.w	r2, r2, lr
 800a358:	d8f3      	bhi.n	800a342 <__lshift+0x6e>
 800a35a:	ebac 0304 	sub.w	r3, ip, r4
 800a35e:	3b15      	subs	r3, #21
 800a360:	f023 0303 	bic.w	r3, r3, #3
 800a364:	3304      	adds	r3, #4
 800a366:	f104 0015 	add.w	r0, r4, #21
 800a36a:	4584      	cmp	ip, r0
 800a36c:	bf38      	it	cc
 800a36e:	2304      	movcc	r3, #4
 800a370:	50ca      	str	r2, [r1, r3]
 800a372:	b10a      	cbz	r2, 800a378 <__lshift+0xa4>
 800a374:	f108 0602 	add.w	r6, r8, #2
 800a378:	3e01      	subs	r6, #1
 800a37a:	4638      	mov	r0, r7
 800a37c:	612e      	str	r6, [r5, #16]
 800a37e:	4621      	mov	r1, r4
 800a380:	f7ff fd8e 	bl	8009ea0 <_Bfree>
 800a384:	4628      	mov	r0, r5
 800a386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a38e:	3301      	adds	r3, #1
 800a390:	e7c5      	b.n	800a31e <__lshift+0x4a>
 800a392:	3904      	subs	r1, #4
 800a394:	f853 2b04 	ldr.w	r2, [r3], #4
 800a398:	f841 2f04 	str.w	r2, [r1, #4]!
 800a39c:	459c      	cmp	ip, r3
 800a39e:	d8f9      	bhi.n	800a394 <__lshift+0xc0>
 800a3a0:	e7ea      	b.n	800a378 <__lshift+0xa4>
 800a3a2:	bf00      	nop
 800a3a4:	0800bb86 	.word	0x0800bb86
 800a3a8:	0800bbf7 	.word	0x0800bbf7

0800a3ac <__mcmp>:
 800a3ac:	b530      	push	{r4, r5, lr}
 800a3ae:	6902      	ldr	r2, [r0, #16]
 800a3b0:	690c      	ldr	r4, [r1, #16]
 800a3b2:	1b12      	subs	r2, r2, r4
 800a3b4:	d10e      	bne.n	800a3d4 <__mcmp+0x28>
 800a3b6:	f100 0314 	add.w	r3, r0, #20
 800a3ba:	3114      	adds	r1, #20
 800a3bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a3c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a3c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a3c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a3cc:	42a5      	cmp	r5, r4
 800a3ce:	d003      	beq.n	800a3d8 <__mcmp+0x2c>
 800a3d0:	d305      	bcc.n	800a3de <__mcmp+0x32>
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	bd30      	pop	{r4, r5, pc}
 800a3d8:	4283      	cmp	r3, r0
 800a3da:	d3f3      	bcc.n	800a3c4 <__mcmp+0x18>
 800a3dc:	e7fa      	b.n	800a3d4 <__mcmp+0x28>
 800a3de:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e2:	e7f7      	b.n	800a3d4 <__mcmp+0x28>

0800a3e4 <__mdiff>:
 800a3e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	4606      	mov	r6, r0
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	4690      	mov	r8, r2
 800a3f2:	f7ff ffdb 	bl	800a3ac <__mcmp>
 800a3f6:	1e05      	subs	r5, r0, #0
 800a3f8:	d110      	bne.n	800a41c <__mdiff+0x38>
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7ff fd0f 	bl	8009e20 <_Balloc>
 800a402:	b930      	cbnz	r0, 800a412 <__mdiff+0x2e>
 800a404:	4b3a      	ldr	r3, [pc, #232]	; (800a4f0 <__mdiff+0x10c>)
 800a406:	4602      	mov	r2, r0
 800a408:	f240 2137 	movw	r1, #567	; 0x237
 800a40c:	4839      	ldr	r0, [pc, #228]	; (800a4f4 <__mdiff+0x110>)
 800a40e:	f000 fbf1 	bl	800abf4 <__assert_func>
 800a412:	2301      	movs	r3, #1
 800a414:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a418:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41c:	bfa4      	itt	ge
 800a41e:	4643      	movge	r3, r8
 800a420:	46a0      	movge	r8, r4
 800a422:	4630      	mov	r0, r6
 800a424:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a428:	bfa6      	itte	ge
 800a42a:	461c      	movge	r4, r3
 800a42c:	2500      	movge	r5, #0
 800a42e:	2501      	movlt	r5, #1
 800a430:	f7ff fcf6 	bl	8009e20 <_Balloc>
 800a434:	b920      	cbnz	r0, 800a440 <__mdiff+0x5c>
 800a436:	4b2e      	ldr	r3, [pc, #184]	; (800a4f0 <__mdiff+0x10c>)
 800a438:	4602      	mov	r2, r0
 800a43a:	f240 2145 	movw	r1, #581	; 0x245
 800a43e:	e7e5      	b.n	800a40c <__mdiff+0x28>
 800a440:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a444:	6926      	ldr	r6, [r4, #16]
 800a446:	60c5      	str	r5, [r0, #12]
 800a448:	f104 0914 	add.w	r9, r4, #20
 800a44c:	f108 0514 	add.w	r5, r8, #20
 800a450:	f100 0e14 	add.w	lr, r0, #20
 800a454:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a458:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a45c:	f108 0210 	add.w	r2, r8, #16
 800a460:	46f2      	mov	sl, lr
 800a462:	2100      	movs	r1, #0
 800a464:	f859 3b04 	ldr.w	r3, [r9], #4
 800a468:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a46c:	fa11 f88b 	uxtah	r8, r1, fp
 800a470:	b299      	uxth	r1, r3
 800a472:	0c1b      	lsrs	r3, r3, #16
 800a474:	eba8 0801 	sub.w	r8, r8, r1
 800a478:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a47c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a480:	fa1f f888 	uxth.w	r8, r8
 800a484:	1419      	asrs	r1, r3, #16
 800a486:	454e      	cmp	r6, r9
 800a488:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a48c:	f84a 3b04 	str.w	r3, [sl], #4
 800a490:	d8e8      	bhi.n	800a464 <__mdiff+0x80>
 800a492:	1b33      	subs	r3, r6, r4
 800a494:	3b15      	subs	r3, #21
 800a496:	f023 0303 	bic.w	r3, r3, #3
 800a49a:	3304      	adds	r3, #4
 800a49c:	3415      	adds	r4, #21
 800a49e:	42a6      	cmp	r6, r4
 800a4a0:	bf38      	it	cc
 800a4a2:	2304      	movcc	r3, #4
 800a4a4:	441d      	add	r5, r3
 800a4a6:	4473      	add	r3, lr
 800a4a8:	469e      	mov	lr, r3
 800a4aa:	462e      	mov	r6, r5
 800a4ac:	4566      	cmp	r6, ip
 800a4ae:	d30e      	bcc.n	800a4ce <__mdiff+0xea>
 800a4b0:	f10c 0203 	add.w	r2, ip, #3
 800a4b4:	1b52      	subs	r2, r2, r5
 800a4b6:	f022 0203 	bic.w	r2, r2, #3
 800a4ba:	3d03      	subs	r5, #3
 800a4bc:	45ac      	cmp	ip, r5
 800a4be:	bf38      	it	cc
 800a4c0:	2200      	movcc	r2, #0
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a4c8:	b17a      	cbz	r2, 800a4ea <__mdiff+0x106>
 800a4ca:	6107      	str	r7, [r0, #16]
 800a4cc:	e7a4      	b.n	800a418 <__mdiff+0x34>
 800a4ce:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4d2:	fa11 f288 	uxtah	r2, r1, r8
 800a4d6:	1414      	asrs	r4, r2, #16
 800a4d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4dc:	b292      	uxth	r2, r2
 800a4de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4e2:	f84e 2b04 	str.w	r2, [lr], #4
 800a4e6:	1421      	asrs	r1, r4, #16
 800a4e8:	e7e0      	b.n	800a4ac <__mdiff+0xc8>
 800a4ea:	3f01      	subs	r7, #1
 800a4ec:	e7ea      	b.n	800a4c4 <__mdiff+0xe0>
 800a4ee:	bf00      	nop
 800a4f0:	0800bb86 	.word	0x0800bb86
 800a4f4:	0800bbf7 	.word	0x0800bbf7

0800a4f8 <__ulp>:
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	ed8d 0b00 	vstr	d0, [sp]
 800a4fe:	9a01      	ldr	r2, [sp, #4]
 800a500:	4b0f      	ldr	r3, [pc, #60]	; (800a540 <__ulp+0x48>)
 800a502:	4013      	ands	r3, r2
 800a504:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dc08      	bgt.n	800a51e <__ulp+0x26>
 800a50c:	425b      	negs	r3, r3
 800a50e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a512:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a516:	da04      	bge.n	800a522 <__ulp+0x2a>
 800a518:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a51c:	4113      	asrs	r3, r2
 800a51e:	2200      	movs	r2, #0
 800a520:	e008      	b.n	800a534 <__ulp+0x3c>
 800a522:	f1a2 0314 	sub.w	r3, r2, #20
 800a526:	2b1e      	cmp	r3, #30
 800a528:	bfda      	itte	le
 800a52a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a52e:	40da      	lsrle	r2, r3
 800a530:	2201      	movgt	r2, #1
 800a532:	2300      	movs	r3, #0
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	ec41 0b10 	vmov	d0, r0, r1
 800a53c:	b002      	add	sp, #8
 800a53e:	4770      	bx	lr
 800a540:	7ff00000 	.word	0x7ff00000

0800a544 <__b2d>:
 800a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	6906      	ldr	r6, [r0, #16]
 800a54a:	f100 0814 	add.w	r8, r0, #20
 800a54e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a552:	1f37      	subs	r7, r6, #4
 800a554:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a558:	4610      	mov	r0, r2
 800a55a:	f7ff fd53 	bl	800a004 <__hi0bits>
 800a55e:	f1c0 0320 	rsb	r3, r0, #32
 800a562:	280a      	cmp	r0, #10
 800a564:	600b      	str	r3, [r1, #0]
 800a566:	491b      	ldr	r1, [pc, #108]	; (800a5d4 <__b2d+0x90>)
 800a568:	dc15      	bgt.n	800a596 <__b2d+0x52>
 800a56a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a56e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a572:	45b8      	cmp	r8, r7
 800a574:	ea43 0501 	orr.w	r5, r3, r1
 800a578:	bf34      	ite	cc
 800a57a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a57e:	2300      	movcs	r3, #0
 800a580:	3015      	adds	r0, #21
 800a582:	fa02 f000 	lsl.w	r0, r2, r0
 800a586:	fa23 f30c 	lsr.w	r3, r3, ip
 800a58a:	4303      	orrs	r3, r0
 800a58c:	461c      	mov	r4, r3
 800a58e:	ec45 4b10 	vmov	d0, r4, r5
 800a592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a596:	45b8      	cmp	r8, r7
 800a598:	bf3a      	itte	cc
 800a59a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a59e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a5a2:	2300      	movcs	r3, #0
 800a5a4:	380b      	subs	r0, #11
 800a5a6:	d012      	beq.n	800a5ce <__b2d+0x8a>
 800a5a8:	f1c0 0120 	rsb	r1, r0, #32
 800a5ac:	fa23 f401 	lsr.w	r4, r3, r1
 800a5b0:	4082      	lsls	r2, r0
 800a5b2:	4322      	orrs	r2, r4
 800a5b4:	4547      	cmp	r7, r8
 800a5b6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a5ba:	bf8c      	ite	hi
 800a5bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a5c0:	2200      	movls	r2, #0
 800a5c2:	4083      	lsls	r3, r0
 800a5c4:	40ca      	lsrs	r2, r1
 800a5c6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	e7de      	b.n	800a58c <__b2d+0x48>
 800a5ce:	ea42 0501 	orr.w	r5, r2, r1
 800a5d2:	e7db      	b.n	800a58c <__b2d+0x48>
 800a5d4:	3ff00000 	.word	0x3ff00000

0800a5d8 <__d2b>:
 800a5d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5dc:	460f      	mov	r7, r1
 800a5de:	2101      	movs	r1, #1
 800a5e0:	ec59 8b10 	vmov	r8, r9, d0
 800a5e4:	4616      	mov	r6, r2
 800a5e6:	f7ff fc1b 	bl	8009e20 <_Balloc>
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	b930      	cbnz	r0, 800a5fc <__d2b+0x24>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	4b24      	ldr	r3, [pc, #144]	; (800a684 <__d2b+0xac>)
 800a5f2:	4825      	ldr	r0, [pc, #148]	; (800a688 <__d2b+0xb0>)
 800a5f4:	f240 310f 	movw	r1, #783	; 0x30f
 800a5f8:	f000 fafc 	bl	800abf4 <__assert_func>
 800a5fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a604:	bb2d      	cbnz	r5, 800a652 <__d2b+0x7a>
 800a606:	9301      	str	r3, [sp, #4]
 800a608:	f1b8 0300 	subs.w	r3, r8, #0
 800a60c:	d026      	beq.n	800a65c <__d2b+0x84>
 800a60e:	4668      	mov	r0, sp
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	f7ff fd17 	bl	800a044 <__lo0bits>
 800a616:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a61a:	b1e8      	cbz	r0, 800a658 <__d2b+0x80>
 800a61c:	f1c0 0320 	rsb	r3, r0, #32
 800a620:	fa02 f303 	lsl.w	r3, r2, r3
 800a624:	430b      	orrs	r3, r1
 800a626:	40c2      	lsrs	r2, r0
 800a628:	6163      	str	r3, [r4, #20]
 800a62a:	9201      	str	r2, [sp, #4]
 800a62c:	9b01      	ldr	r3, [sp, #4]
 800a62e:	61a3      	str	r3, [r4, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	bf14      	ite	ne
 800a634:	2202      	movne	r2, #2
 800a636:	2201      	moveq	r2, #1
 800a638:	6122      	str	r2, [r4, #16]
 800a63a:	b1bd      	cbz	r5, 800a66c <__d2b+0x94>
 800a63c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a640:	4405      	add	r5, r0
 800a642:	603d      	str	r5, [r7, #0]
 800a644:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a648:	6030      	str	r0, [r6, #0]
 800a64a:	4620      	mov	r0, r4
 800a64c:	b003      	add	sp, #12
 800a64e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a656:	e7d6      	b.n	800a606 <__d2b+0x2e>
 800a658:	6161      	str	r1, [r4, #20]
 800a65a:	e7e7      	b.n	800a62c <__d2b+0x54>
 800a65c:	a801      	add	r0, sp, #4
 800a65e:	f7ff fcf1 	bl	800a044 <__lo0bits>
 800a662:	9b01      	ldr	r3, [sp, #4]
 800a664:	6163      	str	r3, [r4, #20]
 800a666:	3020      	adds	r0, #32
 800a668:	2201      	movs	r2, #1
 800a66a:	e7e5      	b.n	800a638 <__d2b+0x60>
 800a66c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a674:	6038      	str	r0, [r7, #0]
 800a676:	6918      	ldr	r0, [r3, #16]
 800a678:	f7ff fcc4 	bl	800a004 <__hi0bits>
 800a67c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a680:	e7e2      	b.n	800a648 <__d2b+0x70>
 800a682:	bf00      	nop
 800a684:	0800bb86 	.word	0x0800bb86
 800a688:	0800bbf7 	.word	0x0800bbf7

0800a68c <__ratio>:
 800a68c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	4688      	mov	r8, r1
 800a692:	4669      	mov	r1, sp
 800a694:	4681      	mov	r9, r0
 800a696:	f7ff ff55 	bl	800a544 <__b2d>
 800a69a:	a901      	add	r1, sp, #4
 800a69c:	4640      	mov	r0, r8
 800a69e:	ec55 4b10 	vmov	r4, r5, d0
 800a6a2:	f7ff ff4f 	bl	800a544 <__b2d>
 800a6a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6ae:	eba3 0c02 	sub.w	ip, r3, r2
 800a6b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6b6:	1a9b      	subs	r3, r3, r2
 800a6b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a6bc:	ec51 0b10 	vmov	r0, r1, d0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	bfd6      	itet	le
 800a6c4:	460a      	movle	r2, r1
 800a6c6:	462a      	movgt	r2, r5
 800a6c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6cc:	468b      	mov	fp, r1
 800a6ce:	462f      	mov	r7, r5
 800a6d0:	bfd4      	ite	le
 800a6d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a6d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6da:	4620      	mov	r0, r4
 800a6dc:	ee10 2a10 	vmov	r2, s0
 800a6e0:	465b      	mov	r3, fp
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f6 f8ba 	bl	800085c <__aeabi_ddiv>
 800a6e8:	ec41 0b10 	vmov	d0, r0, r1
 800a6ec:	b003      	add	sp, #12
 800a6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6f2 <__copybits>:
 800a6f2:	3901      	subs	r1, #1
 800a6f4:	b570      	push	{r4, r5, r6, lr}
 800a6f6:	1149      	asrs	r1, r1, #5
 800a6f8:	6914      	ldr	r4, [r2, #16]
 800a6fa:	3101      	adds	r1, #1
 800a6fc:	f102 0314 	add.w	r3, r2, #20
 800a700:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a704:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a708:	1f05      	subs	r5, r0, #4
 800a70a:	42a3      	cmp	r3, r4
 800a70c:	d30c      	bcc.n	800a728 <__copybits+0x36>
 800a70e:	1aa3      	subs	r3, r4, r2
 800a710:	3b11      	subs	r3, #17
 800a712:	f023 0303 	bic.w	r3, r3, #3
 800a716:	3211      	adds	r2, #17
 800a718:	42a2      	cmp	r2, r4
 800a71a:	bf88      	it	hi
 800a71c:	2300      	movhi	r3, #0
 800a71e:	4418      	add	r0, r3
 800a720:	2300      	movs	r3, #0
 800a722:	4288      	cmp	r0, r1
 800a724:	d305      	bcc.n	800a732 <__copybits+0x40>
 800a726:	bd70      	pop	{r4, r5, r6, pc}
 800a728:	f853 6b04 	ldr.w	r6, [r3], #4
 800a72c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a730:	e7eb      	b.n	800a70a <__copybits+0x18>
 800a732:	f840 3b04 	str.w	r3, [r0], #4
 800a736:	e7f4      	b.n	800a722 <__copybits+0x30>

0800a738 <__any_on>:
 800a738:	f100 0214 	add.w	r2, r0, #20
 800a73c:	6900      	ldr	r0, [r0, #16]
 800a73e:	114b      	asrs	r3, r1, #5
 800a740:	4298      	cmp	r0, r3
 800a742:	b510      	push	{r4, lr}
 800a744:	db11      	blt.n	800a76a <__any_on+0x32>
 800a746:	dd0a      	ble.n	800a75e <__any_on+0x26>
 800a748:	f011 011f 	ands.w	r1, r1, #31
 800a74c:	d007      	beq.n	800a75e <__any_on+0x26>
 800a74e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a752:	fa24 f001 	lsr.w	r0, r4, r1
 800a756:	fa00 f101 	lsl.w	r1, r0, r1
 800a75a:	428c      	cmp	r4, r1
 800a75c:	d10b      	bne.n	800a776 <__any_on+0x3e>
 800a75e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a762:	4293      	cmp	r3, r2
 800a764:	d803      	bhi.n	800a76e <__any_on+0x36>
 800a766:	2000      	movs	r0, #0
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	4603      	mov	r3, r0
 800a76c:	e7f7      	b.n	800a75e <__any_on+0x26>
 800a76e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a772:	2900      	cmp	r1, #0
 800a774:	d0f5      	beq.n	800a762 <__any_on+0x2a>
 800a776:	2001      	movs	r0, #1
 800a778:	e7f6      	b.n	800a768 <__any_on+0x30>

0800a77a <__ascii_wctomb>:
 800a77a:	b149      	cbz	r1, 800a790 <__ascii_wctomb+0x16>
 800a77c:	2aff      	cmp	r2, #255	; 0xff
 800a77e:	bf85      	ittet	hi
 800a780:	238a      	movhi	r3, #138	; 0x8a
 800a782:	6003      	strhi	r3, [r0, #0]
 800a784:	700a      	strbls	r2, [r1, #0]
 800a786:	f04f 30ff 	movhi.w	r0, #4294967295
 800a78a:	bf98      	it	ls
 800a78c:	2001      	movls	r0, #1
 800a78e:	4770      	bx	lr
 800a790:	4608      	mov	r0, r1
 800a792:	4770      	bx	lr

0800a794 <__ssputs_r>:
 800a794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a798:	688e      	ldr	r6, [r1, #8]
 800a79a:	461f      	mov	r7, r3
 800a79c:	42be      	cmp	r6, r7
 800a79e:	680b      	ldr	r3, [r1, #0]
 800a7a0:	4682      	mov	sl, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	4690      	mov	r8, r2
 800a7a6:	d82c      	bhi.n	800a802 <__ssputs_r+0x6e>
 800a7a8:	898a      	ldrh	r2, [r1, #12]
 800a7aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7ae:	d026      	beq.n	800a7fe <__ssputs_r+0x6a>
 800a7b0:	6965      	ldr	r5, [r4, #20]
 800a7b2:	6909      	ldr	r1, [r1, #16]
 800a7b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b8:	eba3 0901 	sub.w	r9, r3, r1
 800a7bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7c0:	1c7b      	adds	r3, r7, #1
 800a7c2:	444b      	add	r3, r9
 800a7c4:	106d      	asrs	r5, r5, #1
 800a7c6:	429d      	cmp	r5, r3
 800a7c8:	bf38      	it	cc
 800a7ca:	461d      	movcc	r5, r3
 800a7cc:	0553      	lsls	r3, r2, #21
 800a7ce:	d527      	bpl.n	800a820 <__ssputs_r+0x8c>
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f7ff fa87 	bl	8009ce4 <_malloc_r>
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	b360      	cbz	r0, 800a834 <__ssputs_r+0xa0>
 800a7da:	6921      	ldr	r1, [r4, #16]
 800a7dc:	464a      	mov	r2, r9
 800a7de:	f7fe f81b 	bl	8008818 <memcpy>
 800a7e2:	89a3      	ldrh	r3, [r4, #12]
 800a7e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	6126      	str	r6, [r4, #16]
 800a7f0:	6165      	str	r5, [r4, #20]
 800a7f2:	444e      	add	r6, r9
 800a7f4:	eba5 0509 	sub.w	r5, r5, r9
 800a7f8:	6026      	str	r6, [r4, #0]
 800a7fa:	60a5      	str	r5, [r4, #8]
 800a7fc:	463e      	mov	r6, r7
 800a7fe:	42be      	cmp	r6, r7
 800a800:	d900      	bls.n	800a804 <__ssputs_r+0x70>
 800a802:	463e      	mov	r6, r7
 800a804:	6820      	ldr	r0, [r4, #0]
 800a806:	4632      	mov	r2, r6
 800a808:	4641      	mov	r1, r8
 800a80a:	f000 f9c9 	bl	800aba0 <memmove>
 800a80e:	68a3      	ldr	r3, [r4, #8]
 800a810:	1b9b      	subs	r3, r3, r6
 800a812:	60a3      	str	r3, [r4, #8]
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	4433      	add	r3, r6
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	2000      	movs	r0, #0
 800a81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a820:	462a      	mov	r2, r5
 800a822:	f000 fa1b 	bl	800ac5c <_realloc_r>
 800a826:	4606      	mov	r6, r0
 800a828:	2800      	cmp	r0, #0
 800a82a:	d1e0      	bne.n	800a7ee <__ssputs_r+0x5a>
 800a82c:	6921      	ldr	r1, [r4, #16]
 800a82e:	4650      	mov	r0, sl
 800a830:	f7fe fe8c 	bl	800954c <_free_r>
 800a834:	230c      	movs	r3, #12
 800a836:	f8ca 3000 	str.w	r3, [sl]
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a840:	81a3      	strh	r3, [r4, #12]
 800a842:	f04f 30ff 	mov.w	r0, #4294967295
 800a846:	e7e9      	b.n	800a81c <__ssputs_r+0x88>

0800a848 <_svfiprintf_r>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	4698      	mov	r8, r3
 800a84e:	898b      	ldrh	r3, [r1, #12]
 800a850:	061b      	lsls	r3, r3, #24
 800a852:	b09d      	sub	sp, #116	; 0x74
 800a854:	4607      	mov	r7, r0
 800a856:	460d      	mov	r5, r1
 800a858:	4614      	mov	r4, r2
 800a85a:	d50e      	bpl.n	800a87a <_svfiprintf_r+0x32>
 800a85c:	690b      	ldr	r3, [r1, #16]
 800a85e:	b963      	cbnz	r3, 800a87a <_svfiprintf_r+0x32>
 800a860:	2140      	movs	r1, #64	; 0x40
 800a862:	f7ff fa3f 	bl	8009ce4 <_malloc_r>
 800a866:	6028      	str	r0, [r5, #0]
 800a868:	6128      	str	r0, [r5, #16]
 800a86a:	b920      	cbnz	r0, 800a876 <_svfiprintf_r+0x2e>
 800a86c:	230c      	movs	r3, #12
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	f04f 30ff 	mov.w	r0, #4294967295
 800a874:	e0d0      	b.n	800aa18 <_svfiprintf_r+0x1d0>
 800a876:	2340      	movs	r3, #64	; 0x40
 800a878:	616b      	str	r3, [r5, #20]
 800a87a:	2300      	movs	r3, #0
 800a87c:	9309      	str	r3, [sp, #36]	; 0x24
 800a87e:	2320      	movs	r3, #32
 800a880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a884:	f8cd 800c 	str.w	r8, [sp, #12]
 800a888:	2330      	movs	r3, #48	; 0x30
 800a88a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa30 <_svfiprintf_r+0x1e8>
 800a88e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a892:	f04f 0901 	mov.w	r9, #1
 800a896:	4623      	mov	r3, r4
 800a898:	469a      	mov	sl, r3
 800a89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a89e:	b10a      	cbz	r2, 800a8a4 <_svfiprintf_r+0x5c>
 800a8a0:	2a25      	cmp	r2, #37	; 0x25
 800a8a2:	d1f9      	bne.n	800a898 <_svfiprintf_r+0x50>
 800a8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a8:	d00b      	beq.n	800a8c2 <_svfiprintf_r+0x7a>
 800a8aa:	465b      	mov	r3, fp
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	4638      	mov	r0, r7
 800a8b2:	f7ff ff6f 	bl	800a794 <__ssputs_r>
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	f000 80a9 	beq.w	800aa0e <_svfiprintf_r+0x1c6>
 800a8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8be:	445a      	add	r2, fp
 800a8c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 80a1 	beq.w	800aa0e <_svfiprintf_r+0x1c6>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d6:	f10a 0a01 	add.w	sl, sl, #1
 800a8da:	9304      	str	r3, [sp, #16]
 800a8dc:	9307      	str	r3, [sp, #28]
 800a8de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a8e4:	4654      	mov	r4, sl
 800a8e6:	2205      	movs	r2, #5
 800a8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ec:	4850      	ldr	r0, [pc, #320]	; (800aa30 <_svfiprintf_r+0x1e8>)
 800a8ee:	f7f5 fc77 	bl	80001e0 <memchr>
 800a8f2:	9a04      	ldr	r2, [sp, #16]
 800a8f4:	b9d8      	cbnz	r0, 800a92e <_svfiprintf_r+0xe6>
 800a8f6:	06d0      	lsls	r0, r2, #27
 800a8f8:	bf44      	itt	mi
 800a8fa:	2320      	movmi	r3, #32
 800a8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a900:	0711      	lsls	r1, r2, #28
 800a902:	bf44      	itt	mi
 800a904:	232b      	movmi	r3, #43	; 0x2b
 800a906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a90a:	f89a 3000 	ldrb.w	r3, [sl]
 800a90e:	2b2a      	cmp	r3, #42	; 0x2a
 800a910:	d015      	beq.n	800a93e <_svfiprintf_r+0xf6>
 800a912:	9a07      	ldr	r2, [sp, #28]
 800a914:	4654      	mov	r4, sl
 800a916:	2000      	movs	r0, #0
 800a918:	f04f 0c0a 	mov.w	ip, #10
 800a91c:	4621      	mov	r1, r4
 800a91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a922:	3b30      	subs	r3, #48	; 0x30
 800a924:	2b09      	cmp	r3, #9
 800a926:	d94d      	bls.n	800a9c4 <_svfiprintf_r+0x17c>
 800a928:	b1b0      	cbz	r0, 800a958 <_svfiprintf_r+0x110>
 800a92a:	9207      	str	r2, [sp, #28]
 800a92c:	e014      	b.n	800a958 <_svfiprintf_r+0x110>
 800a92e:	eba0 0308 	sub.w	r3, r0, r8
 800a932:	fa09 f303 	lsl.w	r3, r9, r3
 800a936:	4313      	orrs	r3, r2
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	46a2      	mov	sl, r4
 800a93c:	e7d2      	b.n	800a8e4 <_svfiprintf_r+0x9c>
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	9103      	str	r1, [sp, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	bfbb      	ittet	lt
 800a94a:	425b      	neglt	r3, r3
 800a94c:	f042 0202 	orrlt.w	r2, r2, #2
 800a950:	9307      	strge	r3, [sp, #28]
 800a952:	9307      	strlt	r3, [sp, #28]
 800a954:	bfb8      	it	lt
 800a956:	9204      	strlt	r2, [sp, #16]
 800a958:	7823      	ldrb	r3, [r4, #0]
 800a95a:	2b2e      	cmp	r3, #46	; 0x2e
 800a95c:	d10c      	bne.n	800a978 <_svfiprintf_r+0x130>
 800a95e:	7863      	ldrb	r3, [r4, #1]
 800a960:	2b2a      	cmp	r3, #42	; 0x2a
 800a962:	d134      	bne.n	800a9ce <_svfiprintf_r+0x186>
 800a964:	9b03      	ldr	r3, [sp, #12]
 800a966:	1d1a      	adds	r2, r3, #4
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	9203      	str	r2, [sp, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	bfb8      	it	lt
 800a970:	f04f 33ff 	movlt.w	r3, #4294967295
 800a974:	3402      	adds	r4, #2
 800a976:	9305      	str	r3, [sp, #20]
 800a978:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800aa40 <_svfiprintf_r+0x1f8>
 800a97c:	7821      	ldrb	r1, [r4, #0]
 800a97e:	2203      	movs	r2, #3
 800a980:	4650      	mov	r0, sl
 800a982:	f7f5 fc2d 	bl	80001e0 <memchr>
 800a986:	b138      	cbz	r0, 800a998 <_svfiprintf_r+0x150>
 800a988:	9b04      	ldr	r3, [sp, #16]
 800a98a:	eba0 000a 	sub.w	r0, r0, sl
 800a98e:	2240      	movs	r2, #64	; 0x40
 800a990:	4082      	lsls	r2, r0
 800a992:	4313      	orrs	r3, r2
 800a994:	3401      	adds	r4, #1
 800a996:	9304      	str	r3, [sp, #16]
 800a998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99c:	4825      	ldr	r0, [pc, #148]	; (800aa34 <_svfiprintf_r+0x1ec>)
 800a99e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9a2:	2206      	movs	r2, #6
 800a9a4:	f7f5 fc1c 	bl	80001e0 <memchr>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d038      	beq.n	800aa1e <_svfiprintf_r+0x1d6>
 800a9ac:	4b22      	ldr	r3, [pc, #136]	; (800aa38 <_svfiprintf_r+0x1f0>)
 800a9ae:	bb1b      	cbnz	r3, 800a9f8 <_svfiprintf_r+0x1b0>
 800a9b0:	9b03      	ldr	r3, [sp, #12]
 800a9b2:	3307      	adds	r3, #7
 800a9b4:	f023 0307 	bic.w	r3, r3, #7
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	9303      	str	r3, [sp, #12]
 800a9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9be:	4433      	add	r3, r6
 800a9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c2:	e768      	b.n	800a896 <_svfiprintf_r+0x4e>
 800a9c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	e7a6      	b.n	800a91c <_svfiprintf_r+0xd4>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	3401      	adds	r4, #1
 800a9d2:	9305      	str	r3, [sp, #20]
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	f04f 0c0a 	mov.w	ip, #10
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9e0:	3a30      	subs	r2, #48	; 0x30
 800a9e2:	2a09      	cmp	r2, #9
 800a9e4:	d903      	bls.n	800a9ee <_svfiprintf_r+0x1a6>
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d0c6      	beq.n	800a978 <_svfiprintf_r+0x130>
 800a9ea:	9105      	str	r1, [sp, #20]
 800a9ec:	e7c4      	b.n	800a978 <_svfiprintf_r+0x130>
 800a9ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e7f0      	b.n	800a9da <_svfiprintf_r+0x192>
 800a9f8:	ab03      	add	r3, sp, #12
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	462a      	mov	r2, r5
 800a9fe:	4b0f      	ldr	r3, [pc, #60]	; (800aa3c <_svfiprintf_r+0x1f4>)
 800aa00:	a904      	add	r1, sp, #16
 800aa02:	4638      	mov	r0, r7
 800aa04:	f7fc ff64 	bl	80078d0 <_printf_float>
 800aa08:	1c42      	adds	r2, r0, #1
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	d1d6      	bne.n	800a9bc <_svfiprintf_r+0x174>
 800aa0e:	89ab      	ldrh	r3, [r5, #12]
 800aa10:	065b      	lsls	r3, r3, #25
 800aa12:	f53f af2d 	bmi.w	800a870 <_svfiprintf_r+0x28>
 800aa16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa18:	b01d      	add	sp, #116	; 0x74
 800aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa1e:	ab03      	add	r3, sp, #12
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	462a      	mov	r2, r5
 800aa24:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <_svfiprintf_r+0x1f4>)
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	4638      	mov	r0, r7
 800aa2a:	f7fd f9f5 	bl	8007e18 <_printf_i>
 800aa2e:	e7eb      	b.n	800aa08 <_svfiprintf_r+0x1c0>
 800aa30:	0800bd4c 	.word	0x0800bd4c
 800aa34:	0800bd56 	.word	0x0800bd56
 800aa38:	080078d1 	.word	0x080078d1
 800aa3c:	0800a795 	.word	0x0800a795
 800aa40:	0800bd52 	.word	0x0800bd52

0800aa44 <__sflush_r>:
 800aa44:	898a      	ldrh	r2, [r1, #12]
 800aa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	0710      	lsls	r0, r2, #28
 800aa4e:	460c      	mov	r4, r1
 800aa50:	d458      	bmi.n	800ab04 <__sflush_r+0xc0>
 800aa52:	684b      	ldr	r3, [r1, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	dc05      	bgt.n	800aa64 <__sflush_r+0x20>
 800aa58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dc02      	bgt.n	800aa64 <__sflush_r+0x20>
 800aa5e:	2000      	movs	r0, #0
 800aa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa66:	2e00      	cmp	r6, #0
 800aa68:	d0f9      	beq.n	800aa5e <__sflush_r+0x1a>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa70:	682f      	ldr	r7, [r5, #0]
 800aa72:	6a21      	ldr	r1, [r4, #32]
 800aa74:	602b      	str	r3, [r5, #0]
 800aa76:	d032      	beq.n	800aade <__sflush_r+0x9a>
 800aa78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	075a      	lsls	r2, r3, #29
 800aa7e:	d505      	bpl.n	800aa8c <__sflush_r+0x48>
 800aa80:	6863      	ldr	r3, [r4, #4]
 800aa82:	1ac0      	subs	r0, r0, r3
 800aa84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa86:	b10b      	cbz	r3, 800aa8c <__sflush_r+0x48>
 800aa88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa8a:	1ac0      	subs	r0, r0, r3
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4602      	mov	r2, r0
 800aa90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa92:	6a21      	ldr	r1, [r4, #32]
 800aa94:	4628      	mov	r0, r5
 800aa96:	47b0      	blx	r6
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	89a3      	ldrh	r3, [r4, #12]
 800aa9c:	d106      	bne.n	800aaac <__sflush_r+0x68>
 800aa9e:	6829      	ldr	r1, [r5, #0]
 800aaa0:	291d      	cmp	r1, #29
 800aaa2:	d82b      	bhi.n	800aafc <__sflush_r+0xb8>
 800aaa4:	4a29      	ldr	r2, [pc, #164]	; (800ab4c <__sflush_r+0x108>)
 800aaa6:	410a      	asrs	r2, r1
 800aaa8:	07d6      	lsls	r6, r2, #31
 800aaaa:	d427      	bmi.n	800aafc <__sflush_r+0xb8>
 800aaac:	2200      	movs	r2, #0
 800aaae:	6062      	str	r2, [r4, #4]
 800aab0:	04d9      	lsls	r1, r3, #19
 800aab2:	6922      	ldr	r2, [r4, #16]
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	d504      	bpl.n	800aac2 <__sflush_r+0x7e>
 800aab8:	1c42      	adds	r2, r0, #1
 800aaba:	d101      	bne.n	800aac0 <__sflush_r+0x7c>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b903      	cbnz	r3, 800aac2 <__sflush_r+0x7e>
 800aac0:	6560      	str	r0, [r4, #84]	; 0x54
 800aac2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aac4:	602f      	str	r7, [r5, #0]
 800aac6:	2900      	cmp	r1, #0
 800aac8:	d0c9      	beq.n	800aa5e <__sflush_r+0x1a>
 800aaca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aace:	4299      	cmp	r1, r3
 800aad0:	d002      	beq.n	800aad8 <__sflush_r+0x94>
 800aad2:	4628      	mov	r0, r5
 800aad4:	f7fe fd3a 	bl	800954c <_free_r>
 800aad8:	2000      	movs	r0, #0
 800aada:	6360      	str	r0, [r4, #52]	; 0x34
 800aadc:	e7c0      	b.n	800aa60 <__sflush_r+0x1c>
 800aade:	2301      	movs	r3, #1
 800aae0:	4628      	mov	r0, r5
 800aae2:	47b0      	blx	r6
 800aae4:	1c41      	adds	r1, r0, #1
 800aae6:	d1c8      	bne.n	800aa7a <__sflush_r+0x36>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d0c5      	beq.n	800aa7a <__sflush_r+0x36>
 800aaee:	2b1d      	cmp	r3, #29
 800aaf0:	d001      	beq.n	800aaf6 <__sflush_r+0xb2>
 800aaf2:	2b16      	cmp	r3, #22
 800aaf4:	d101      	bne.n	800aafa <__sflush_r+0xb6>
 800aaf6:	602f      	str	r7, [r5, #0]
 800aaf8:	e7b1      	b.n	800aa5e <__sflush_r+0x1a>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab00:	81a3      	strh	r3, [r4, #12]
 800ab02:	e7ad      	b.n	800aa60 <__sflush_r+0x1c>
 800ab04:	690f      	ldr	r7, [r1, #16]
 800ab06:	2f00      	cmp	r7, #0
 800ab08:	d0a9      	beq.n	800aa5e <__sflush_r+0x1a>
 800ab0a:	0793      	lsls	r3, r2, #30
 800ab0c:	680e      	ldr	r6, [r1, #0]
 800ab0e:	bf08      	it	eq
 800ab10:	694b      	ldreq	r3, [r1, #20]
 800ab12:	600f      	str	r7, [r1, #0]
 800ab14:	bf18      	it	ne
 800ab16:	2300      	movne	r3, #0
 800ab18:	eba6 0807 	sub.w	r8, r6, r7
 800ab1c:	608b      	str	r3, [r1, #8]
 800ab1e:	f1b8 0f00 	cmp.w	r8, #0
 800ab22:	dd9c      	ble.n	800aa5e <__sflush_r+0x1a>
 800ab24:	6a21      	ldr	r1, [r4, #32]
 800ab26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab28:	4643      	mov	r3, r8
 800ab2a:	463a      	mov	r2, r7
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	47b0      	blx	r6
 800ab30:	2800      	cmp	r0, #0
 800ab32:	dc06      	bgt.n	800ab42 <__sflush_r+0xfe>
 800ab34:	89a3      	ldrh	r3, [r4, #12]
 800ab36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab3a:	81a3      	strh	r3, [r4, #12]
 800ab3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab40:	e78e      	b.n	800aa60 <__sflush_r+0x1c>
 800ab42:	4407      	add	r7, r0
 800ab44:	eba8 0800 	sub.w	r8, r8, r0
 800ab48:	e7e9      	b.n	800ab1e <__sflush_r+0xda>
 800ab4a:	bf00      	nop
 800ab4c:	dfbffffe 	.word	0xdfbffffe

0800ab50 <_fflush_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	690b      	ldr	r3, [r1, #16]
 800ab54:	4605      	mov	r5, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	b913      	cbnz	r3, 800ab60 <_fflush_r+0x10>
 800ab5a:	2500      	movs	r5, #0
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	bd38      	pop	{r3, r4, r5, pc}
 800ab60:	b118      	cbz	r0, 800ab6a <_fflush_r+0x1a>
 800ab62:	6a03      	ldr	r3, [r0, #32]
 800ab64:	b90b      	cbnz	r3, 800ab6a <_fflush_r+0x1a>
 800ab66:	f7fd fd03 	bl	8008570 <__sinit>
 800ab6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0f3      	beq.n	800ab5a <_fflush_r+0xa>
 800ab72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab74:	07d0      	lsls	r0, r2, #31
 800ab76:	d404      	bmi.n	800ab82 <_fflush_r+0x32>
 800ab78:	0599      	lsls	r1, r3, #22
 800ab7a:	d402      	bmi.n	800ab82 <_fflush_r+0x32>
 800ab7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab7e:	f7fd fe49 	bl	8008814 <__retarget_lock_acquire_recursive>
 800ab82:	4628      	mov	r0, r5
 800ab84:	4621      	mov	r1, r4
 800ab86:	f7ff ff5d 	bl	800aa44 <__sflush_r>
 800ab8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab8c:	07da      	lsls	r2, r3, #31
 800ab8e:	4605      	mov	r5, r0
 800ab90:	d4e4      	bmi.n	800ab5c <_fflush_r+0xc>
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	059b      	lsls	r3, r3, #22
 800ab96:	d4e1      	bmi.n	800ab5c <_fflush_r+0xc>
 800ab98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab9a:	f7fd fe3c 	bl	8008816 <__retarget_lock_release_recursive>
 800ab9e:	e7dd      	b.n	800ab5c <_fflush_r+0xc>

0800aba0 <memmove>:
 800aba0:	4288      	cmp	r0, r1
 800aba2:	b510      	push	{r4, lr}
 800aba4:	eb01 0402 	add.w	r4, r1, r2
 800aba8:	d902      	bls.n	800abb0 <memmove+0x10>
 800abaa:	4284      	cmp	r4, r0
 800abac:	4623      	mov	r3, r4
 800abae:	d807      	bhi.n	800abc0 <memmove+0x20>
 800abb0:	1e43      	subs	r3, r0, #1
 800abb2:	42a1      	cmp	r1, r4
 800abb4:	d008      	beq.n	800abc8 <memmove+0x28>
 800abb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abbe:	e7f8      	b.n	800abb2 <memmove+0x12>
 800abc0:	4402      	add	r2, r0
 800abc2:	4601      	mov	r1, r0
 800abc4:	428a      	cmp	r2, r1
 800abc6:	d100      	bne.n	800abca <memmove+0x2a>
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abd2:	e7f7      	b.n	800abc4 <memmove+0x24>

0800abd4 <_sbrk_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d06      	ldr	r5, [pc, #24]	; (800abf0 <_sbrk_r+0x1c>)
 800abd8:	2300      	movs	r3, #0
 800abda:	4604      	mov	r4, r0
 800abdc:	4608      	mov	r0, r1
 800abde:	602b      	str	r3, [r5, #0]
 800abe0:	f7f7 fdb0 	bl	8002744 <_sbrk>
 800abe4:	1c43      	adds	r3, r0, #1
 800abe6:	d102      	bne.n	800abee <_sbrk_r+0x1a>
 800abe8:	682b      	ldr	r3, [r5, #0]
 800abea:	b103      	cbz	r3, 800abee <_sbrk_r+0x1a>
 800abec:	6023      	str	r3, [r4, #0]
 800abee:	bd38      	pop	{r3, r4, r5, pc}
 800abf0:	20000600 	.word	0x20000600

0800abf4 <__assert_func>:
 800abf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abf6:	4614      	mov	r4, r2
 800abf8:	461a      	mov	r2, r3
 800abfa:	4b09      	ldr	r3, [pc, #36]	; (800ac20 <__assert_func+0x2c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4605      	mov	r5, r0
 800ac00:	68d8      	ldr	r0, [r3, #12]
 800ac02:	b14c      	cbz	r4, 800ac18 <__assert_func+0x24>
 800ac04:	4b07      	ldr	r3, [pc, #28]	; (800ac24 <__assert_func+0x30>)
 800ac06:	9100      	str	r1, [sp, #0]
 800ac08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac0c:	4906      	ldr	r1, [pc, #24]	; (800ac28 <__assert_func+0x34>)
 800ac0e:	462b      	mov	r3, r5
 800ac10:	f000 f854 	bl	800acbc <fiprintf>
 800ac14:	f000 f864 	bl	800ace0 <abort>
 800ac18:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <__assert_func+0x38>)
 800ac1a:	461c      	mov	r4, r3
 800ac1c:	e7f3      	b.n	800ac06 <__assert_func+0x12>
 800ac1e:	bf00      	nop
 800ac20:	20000278 	.word	0x20000278
 800ac24:	0800bd5d 	.word	0x0800bd5d
 800ac28:	0800bd6a 	.word	0x0800bd6a
 800ac2c:	0800bd98 	.word	0x0800bd98

0800ac30 <_calloc_r>:
 800ac30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac32:	fba1 2402 	umull	r2, r4, r1, r2
 800ac36:	b94c      	cbnz	r4, 800ac4c <_calloc_r+0x1c>
 800ac38:	4611      	mov	r1, r2
 800ac3a:	9201      	str	r2, [sp, #4]
 800ac3c:	f7ff f852 	bl	8009ce4 <_malloc_r>
 800ac40:	9a01      	ldr	r2, [sp, #4]
 800ac42:	4605      	mov	r5, r0
 800ac44:	b930      	cbnz	r0, 800ac54 <_calloc_r+0x24>
 800ac46:	4628      	mov	r0, r5
 800ac48:	b003      	add	sp, #12
 800ac4a:	bd30      	pop	{r4, r5, pc}
 800ac4c:	220c      	movs	r2, #12
 800ac4e:	6002      	str	r2, [r0, #0]
 800ac50:	2500      	movs	r5, #0
 800ac52:	e7f8      	b.n	800ac46 <_calloc_r+0x16>
 800ac54:	4621      	mov	r1, r4
 800ac56:	f7fd fd24 	bl	80086a2 <memset>
 800ac5a:	e7f4      	b.n	800ac46 <_calloc_r+0x16>

0800ac5c <_realloc_r>:
 800ac5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac60:	4680      	mov	r8, r0
 800ac62:	4614      	mov	r4, r2
 800ac64:	460e      	mov	r6, r1
 800ac66:	b921      	cbnz	r1, 800ac72 <_realloc_r+0x16>
 800ac68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	f7ff b839 	b.w	8009ce4 <_malloc_r>
 800ac72:	b92a      	cbnz	r2, 800ac80 <_realloc_r+0x24>
 800ac74:	f7fe fc6a 	bl	800954c <_free_r>
 800ac78:	4625      	mov	r5, r4
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac80:	f000 f835 	bl	800acee <_malloc_usable_size_r>
 800ac84:	4284      	cmp	r4, r0
 800ac86:	4607      	mov	r7, r0
 800ac88:	d802      	bhi.n	800ac90 <_realloc_r+0x34>
 800ac8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac8e:	d812      	bhi.n	800acb6 <_realloc_r+0x5a>
 800ac90:	4621      	mov	r1, r4
 800ac92:	4640      	mov	r0, r8
 800ac94:	f7ff f826 	bl	8009ce4 <_malloc_r>
 800ac98:	4605      	mov	r5, r0
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d0ed      	beq.n	800ac7a <_realloc_r+0x1e>
 800ac9e:	42bc      	cmp	r4, r7
 800aca0:	4622      	mov	r2, r4
 800aca2:	4631      	mov	r1, r6
 800aca4:	bf28      	it	cs
 800aca6:	463a      	movcs	r2, r7
 800aca8:	f7fd fdb6 	bl	8008818 <memcpy>
 800acac:	4631      	mov	r1, r6
 800acae:	4640      	mov	r0, r8
 800acb0:	f7fe fc4c 	bl	800954c <_free_r>
 800acb4:	e7e1      	b.n	800ac7a <_realloc_r+0x1e>
 800acb6:	4635      	mov	r5, r6
 800acb8:	e7df      	b.n	800ac7a <_realloc_r+0x1e>
	...

0800acbc <fiprintf>:
 800acbc:	b40e      	push	{r1, r2, r3}
 800acbe:	b503      	push	{r0, r1, lr}
 800acc0:	4601      	mov	r1, r0
 800acc2:	ab03      	add	r3, sp, #12
 800acc4:	4805      	ldr	r0, [pc, #20]	; (800acdc <fiprintf+0x20>)
 800acc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acca:	6800      	ldr	r0, [r0, #0]
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	f000 f83f 	bl	800ad50 <_vfiprintf_r>
 800acd2:	b002      	add	sp, #8
 800acd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acd8:	b003      	add	sp, #12
 800acda:	4770      	bx	lr
 800acdc:	20000278 	.word	0x20000278

0800ace0 <abort>:
 800ace0:	b508      	push	{r3, lr}
 800ace2:	2006      	movs	r0, #6
 800ace4:	f000 fa0c 	bl	800b100 <raise>
 800ace8:	2001      	movs	r0, #1
 800acea:	f7f7 fcb3 	bl	8002654 <_exit>

0800acee <_malloc_usable_size_r>:
 800acee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf2:	1f18      	subs	r0, r3, #4
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	bfbc      	itt	lt
 800acf8:	580b      	ldrlt	r3, [r1, r0]
 800acfa:	18c0      	addlt	r0, r0, r3
 800acfc:	4770      	bx	lr

0800acfe <__sfputc_r>:
 800acfe:	6893      	ldr	r3, [r2, #8]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	b410      	push	{r4}
 800ad06:	6093      	str	r3, [r2, #8]
 800ad08:	da08      	bge.n	800ad1c <__sfputc_r+0x1e>
 800ad0a:	6994      	ldr	r4, [r2, #24]
 800ad0c:	42a3      	cmp	r3, r4
 800ad0e:	db01      	blt.n	800ad14 <__sfputc_r+0x16>
 800ad10:	290a      	cmp	r1, #10
 800ad12:	d103      	bne.n	800ad1c <__sfputc_r+0x1e>
 800ad14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad18:	f000 b934 	b.w	800af84 <__swbuf_r>
 800ad1c:	6813      	ldr	r3, [r2, #0]
 800ad1e:	1c58      	adds	r0, r3, #1
 800ad20:	6010      	str	r0, [r2, #0]
 800ad22:	7019      	strb	r1, [r3, #0]
 800ad24:	4608      	mov	r0, r1
 800ad26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <__sfputs_r>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	4606      	mov	r6, r0
 800ad30:	460f      	mov	r7, r1
 800ad32:	4614      	mov	r4, r2
 800ad34:	18d5      	adds	r5, r2, r3
 800ad36:	42ac      	cmp	r4, r5
 800ad38:	d101      	bne.n	800ad3e <__sfputs_r+0x12>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	e007      	b.n	800ad4e <__sfputs_r+0x22>
 800ad3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad42:	463a      	mov	r2, r7
 800ad44:	4630      	mov	r0, r6
 800ad46:	f7ff ffda 	bl	800acfe <__sfputc_r>
 800ad4a:	1c43      	adds	r3, r0, #1
 800ad4c:	d1f3      	bne.n	800ad36 <__sfputs_r+0xa>
 800ad4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad50 <_vfiprintf_r>:
 800ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	460d      	mov	r5, r1
 800ad56:	b09d      	sub	sp, #116	; 0x74
 800ad58:	4614      	mov	r4, r2
 800ad5a:	4698      	mov	r8, r3
 800ad5c:	4606      	mov	r6, r0
 800ad5e:	b118      	cbz	r0, 800ad68 <_vfiprintf_r+0x18>
 800ad60:	6a03      	ldr	r3, [r0, #32]
 800ad62:	b90b      	cbnz	r3, 800ad68 <_vfiprintf_r+0x18>
 800ad64:	f7fd fc04 	bl	8008570 <__sinit>
 800ad68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad6a:	07d9      	lsls	r1, r3, #31
 800ad6c:	d405      	bmi.n	800ad7a <_vfiprintf_r+0x2a>
 800ad6e:	89ab      	ldrh	r3, [r5, #12]
 800ad70:	059a      	lsls	r2, r3, #22
 800ad72:	d402      	bmi.n	800ad7a <_vfiprintf_r+0x2a>
 800ad74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad76:	f7fd fd4d 	bl	8008814 <__retarget_lock_acquire_recursive>
 800ad7a:	89ab      	ldrh	r3, [r5, #12]
 800ad7c:	071b      	lsls	r3, r3, #28
 800ad7e:	d501      	bpl.n	800ad84 <_vfiprintf_r+0x34>
 800ad80:	692b      	ldr	r3, [r5, #16]
 800ad82:	b99b      	cbnz	r3, 800adac <_vfiprintf_r+0x5c>
 800ad84:	4629      	mov	r1, r5
 800ad86:	4630      	mov	r0, r6
 800ad88:	f000 f93a 	bl	800b000 <__swsetup_r>
 800ad8c:	b170      	cbz	r0, 800adac <_vfiprintf_r+0x5c>
 800ad8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad90:	07dc      	lsls	r4, r3, #31
 800ad92:	d504      	bpl.n	800ad9e <_vfiprintf_r+0x4e>
 800ad94:	f04f 30ff 	mov.w	r0, #4294967295
 800ad98:	b01d      	add	sp, #116	; 0x74
 800ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9e:	89ab      	ldrh	r3, [r5, #12]
 800ada0:	0598      	lsls	r0, r3, #22
 800ada2:	d4f7      	bmi.n	800ad94 <_vfiprintf_r+0x44>
 800ada4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ada6:	f7fd fd36 	bl	8008816 <__retarget_lock_release_recursive>
 800adaa:	e7f3      	b.n	800ad94 <_vfiprintf_r+0x44>
 800adac:	2300      	movs	r3, #0
 800adae:	9309      	str	r3, [sp, #36]	; 0x24
 800adb0:	2320      	movs	r3, #32
 800adb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800adba:	2330      	movs	r3, #48	; 0x30
 800adbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800af70 <_vfiprintf_r+0x220>
 800adc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adc4:	f04f 0901 	mov.w	r9, #1
 800adc8:	4623      	mov	r3, r4
 800adca:	469a      	mov	sl, r3
 800adcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add0:	b10a      	cbz	r2, 800add6 <_vfiprintf_r+0x86>
 800add2:	2a25      	cmp	r2, #37	; 0x25
 800add4:	d1f9      	bne.n	800adca <_vfiprintf_r+0x7a>
 800add6:	ebba 0b04 	subs.w	fp, sl, r4
 800adda:	d00b      	beq.n	800adf4 <_vfiprintf_r+0xa4>
 800addc:	465b      	mov	r3, fp
 800adde:	4622      	mov	r2, r4
 800ade0:	4629      	mov	r1, r5
 800ade2:	4630      	mov	r0, r6
 800ade4:	f7ff ffa2 	bl	800ad2c <__sfputs_r>
 800ade8:	3001      	adds	r0, #1
 800adea:	f000 80a9 	beq.w	800af40 <_vfiprintf_r+0x1f0>
 800adee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf0:	445a      	add	r2, fp
 800adf2:	9209      	str	r2, [sp, #36]	; 0x24
 800adf4:	f89a 3000 	ldrb.w	r3, [sl]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 80a1 	beq.w	800af40 <_vfiprintf_r+0x1f0>
 800adfe:	2300      	movs	r3, #0
 800ae00:	f04f 32ff 	mov.w	r2, #4294967295
 800ae04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae08:	f10a 0a01 	add.w	sl, sl, #1
 800ae0c:	9304      	str	r3, [sp, #16]
 800ae0e:	9307      	str	r3, [sp, #28]
 800ae10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae14:	931a      	str	r3, [sp, #104]	; 0x68
 800ae16:	4654      	mov	r4, sl
 800ae18:	2205      	movs	r2, #5
 800ae1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae1e:	4854      	ldr	r0, [pc, #336]	; (800af70 <_vfiprintf_r+0x220>)
 800ae20:	f7f5 f9de 	bl	80001e0 <memchr>
 800ae24:	9a04      	ldr	r2, [sp, #16]
 800ae26:	b9d8      	cbnz	r0, 800ae60 <_vfiprintf_r+0x110>
 800ae28:	06d1      	lsls	r1, r2, #27
 800ae2a:	bf44      	itt	mi
 800ae2c:	2320      	movmi	r3, #32
 800ae2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae32:	0713      	lsls	r3, r2, #28
 800ae34:	bf44      	itt	mi
 800ae36:	232b      	movmi	r3, #43	; 0x2b
 800ae38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae40:	2b2a      	cmp	r3, #42	; 0x2a
 800ae42:	d015      	beq.n	800ae70 <_vfiprintf_r+0x120>
 800ae44:	9a07      	ldr	r2, [sp, #28]
 800ae46:	4654      	mov	r4, sl
 800ae48:	2000      	movs	r0, #0
 800ae4a:	f04f 0c0a 	mov.w	ip, #10
 800ae4e:	4621      	mov	r1, r4
 800ae50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae54:	3b30      	subs	r3, #48	; 0x30
 800ae56:	2b09      	cmp	r3, #9
 800ae58:	d94d      	bls.n	800aef6 <_vfiprintf_r+0x1a6>
 800ae5a:	b1b0      	cbz	r0, 800ae8a <_vfiprintf_r+0x13a>
 800ae5c:	9207      	str	r2, [sp, #28]
 800ae5e:	e014      	b.n	800ae8a <_vfiprintf_r+0x13a>
 800ae60:	eba0 0308 	sub.w	r3, r0, r8
 800ae64:	fa09 f303 	lsl.w	r3, r9, r3
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	9304      	str	r3, [sp, #16]
 800ae6c:	46a2      	mov	sl, r4
 800ae6e:	e7d2      	b.n	800ae16 <_vfiprintf_r+0xc6>
 800ae70:	9b03      	ldr	r3, [sp, #12]
 800ae72:	1d19      	adds	r1, r3, #4
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	9103      	str	r1, [sp, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	bfbb      	ittet	lt
 800ae7c:	425b      	neglt	r3, r3
 800ae7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae82:	9307      	strge	r3, [sp, #28]
 800ae84:	9307      	strlt	r3, [sp, #28]
 800ae86:	bfb8      	it	lt
 800ae88:	9204      	strlt	r2, [sp, #16]
 800ae8a:	7823      	ldrb	r3, [r4, #0]
 800ae8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae8e:	d10c      	bne.n	800aeaa <_vfiprintf_r+0x15a>
 800ae90:	7863      	ldrb	r3, [r4, #1]
 800ae92:	2b2a      	cmp	r3, #42	; 0x2a
 800ae94:	d134      	bne.n	800af00 <_vfiprintf_r+0x1b0>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	1d1a      	adds	r2, r3, #4
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	9203      	str	r2, [sp, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	bfb8      	it	lt
 800aea2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aea6:	3402      	adds	r4, #2
 800aea8:	9305      	str	r3, [sp, #20]
 800aeaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800af80 <_vfiprintf_r+0x230>
 800aeae:	7821      	ldrb	r1, [r4, #0]
 800aeb0:	2203      	movs	r2, #3
 800aeb2:	4650      	mov	r0, sl
 800aeb4:	f7f5 f994 	bl	80001e0 <memchr>
 800aeb8:	b138      	cbz	r0, 800aeca <_vfiprintf_r+0x17a>
 800aeba:	9b04      	ldr	r3, [sp, #16]
 800aebc:	eba0 000a 	sub.w	r0, r0, sl
 800aec0:	2240      	movs	r2, #64	; 0x40
 800aec2:	4082      	lsls	r2, r0
 800aec4:	4313      	orrs	r3, r2
 800aec6:	3401      	adds	r4, #1
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aece:	4829      	ldr	r0, [pc, #164]	; (800af74 <_vfiprintf_r+0x224>)
 800aed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aed4:	2206      	movs	r2, #6
 800aed6:	f7f5 f983 	bl	80001e0 <memchr>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	d03f      	beq.n	800af5e <_vfiprintf_r+0x20e>
 800aede:	4b26      	ldr	r3, [pc, #152]	; (800af78 <_vfiprintf_r+0x228>)
 800aee0:	bb1b      	cbnz	r3, 800af2a <_vfiprintf_r+0x1da>
 800aee2:	9b03      	ldr	r3, [sp, #12]
 800aee4:	3307      	adds	r3, #7
 800aee6:	f023 0307 	bic.w	r3, r3, #7
 800aeea:	3308      	adds	r3, #8
 800aeec:	9303      	str	r3, [sp, #12]
 800aeee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef0:	443b      	add	r3, r7
 800aef2:	9309      	str	r3, [sp, #36]	; 0x24
 800aef4:	e768      	b.n	800adc8 <_vfiprintf_r+0x78>
 800aef6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aefa:	460c      	mov	r4, r1
 800aefc:	2001      	movs	r0, #1
 800aefe:	e7a6      	b.n	800ae4e <_vfiprintf_r+0xfe>
 800af00:	2300      	movs	r3, #0
 800af02:	3401      	adds	r4, #1
 800af04:	9305      	str	r3, [sp, #20]
 800af06:	4619      	mov	r1, r3
 800af08:	f04f 0c0a 	mov.w	ip, #10
 800af0c:	4620      	mov	r0, r4
 800af0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af12:	3a30      	subs	r2, #48	; 0x30
 800af14:	2a09      	cmp	r2, #9
 800af16:	d903      	bls.n	800af20 <_vfiprintf_r+0x1d0>
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0c6      	beq.n	800aeaa <_vfiprintf_r+0x15a>
 800af1c:	9105      	str	r1, [sp, #20]
 800af1e:	e7c4      	b.n	800aeaa <_vfiprintf_r+0x15a>
 800af20:	fb0c 2101 	mla	r1, ip, r1, r2
 800af24:	4604      	mov	r4, r0
 800af26:	2301      	movs	r3, #1
 800af28:	e7f0      	b.n	800af0c <_vfiprintf_r+0x1bc>
 800af2a:	ab03      	add	r3, sp, #12
 800af2c:	9300      	str	r3, [sp, #0]
 800af2e:	462a      	mov	r2, r5
 800af30:	4b12      	ldr	r3, [pc, #72]	; (800af7c <_vfiprintf_r+0x22c>)
 800af32:	a904      	add	r1, sp, #16
 800af34:	4630      	mov	r0, r6
 800af36:	f7fc fccb 	bl	80078d0 <_printf_float>
 800af3a:	4607      	mov	r7, r0
 800af3c:	1c78      	adds	r0, r7, #1
 800af3e:	d1d6      	bne.n	800aeee <_vfiprintf_r+0x19e>
 800af40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af42:	07d9      	lsls	r1, r3, #31
 800af44:	d405      	bmi.n	800af52 <_vfiprintf_r+0x202>
 800af46:	89ab      	ldrh	r3, [r5, #12]
 800af48:	059a      	lsls	r2, r3, #22
 800af4a:	d402      	bmi.n	800af52 <_vfiprintf_r+0x202>
 800af4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af4e:	f7fd fc62 	bl	8008816 <__retarget_lock_release_recursive>
 800af52:	89ab      	ldrh	r3, [r5, #12]
 800af54:	065b      	lsls	r3, r3, #25
 800af56:	f53f af1d 	bmi.w	800ad94 <_vfiprintf_r+0x44>
 800af5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af5c:	e71c      	b.n	800ad98 <_vfiprintf_r+0x48>
 800af5e:	ab03      	add	r3, sp, #12
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	462a      	mov	r2, r5
 800af64:	4b05      	ldr	r3, [pc, #20]	; (800af7c <_vfiprintf_r+0x22c>)
 800af66:	a904      	add	r1, sp, #16
 800af68:	4630      	mov	r0, r6
 800af6a:	f7fc ff55 	bl	8007e18 <_printf_i>
 800af6e:	e7e4      	b.n	800af3a <_vfiprintf_r+0x1ea>
 800af70:	0800bd4c 	.word	0x0800bd4c
 800af74:	0800bd56 	.word	0x0800bd56
 800af78:	080078d1 	.word	0x080078d1
 800af7c:	0800ad2d 	.word	0x0800ad2d
 800af80:	0800bd52 	.word	0x0800bd52

0800af84 <__swbuf_r>:
 800af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af86:	460e      	mov	r6, r1
 800af88:	4614      	mov	r4, r2
 800af8a:	4605      	mov	r5, r0
 800af8c:	b118      	cbz	r0, 800af96 <__swbuf_r+0x12>
 800af8e:	6a03      	ldr	r3, [r0, #32]
 800af90:	b90b      	cbnz	r3, 800af96 <__swbuf_r+0x12>
 800af92:	f7fd faed 	bl	8008570 <__sinit>
 800af96:	69a3      	ldr	r3, [r4, #24]
 800af98:	60a3      	str	r3, [r4, #8]
 800af9a:	89a3      	ldrh	r3, [r4, #12]
 800af9c:	071a      	lsls	r2, r3, #28
 800af9e:	d525      	bpl.n	800afec <__swbuf_r+0x68>
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	b31b      	cbz	r3, 800afec <__swbuf_r+0x68>
 800afa4:	6823      	ldr	r3, [r4, #0]
 800afa6:	6922      	ldr	r2, [r4, #16]
 800afa8:	1a98      	subs	r0, r3, r2
 800afaa:	6963      	ldr	r3, [r4, #20]
 800afac:	b2f6      	uxtb	r6, r6
 800afae:	4283      	cmp	r3, r0
 800afb0:	4637      	mov	r7, r6
 800afb2:	dc04      	bgt.n	800afbe <__swbuf_r+0x3a>
 800afb4:	4621      	mov	r1, r4
 800afb6:	4628      	mov	r0, r5
 800afb8:	f7ff fdca 	bl	800ab50 <_fflush_r>
 800afbc:	b9e0      	cbnz	r0, 800aff8 <__swbuf_r+0x74>
 800afbe:	68a3      	ldr	r3, [r4, #8]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	60a3      	str	r3, [r4, #8]
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	1c5a      	adds	r2, r3, #1
 800afc8:	6022      	str	r2, [r4, #0]
 800afca:	701e      	strb	r6, [r3, #0]
 800afcc:	6962      	ldr	r2, [r4, #20]
 800afce:	1c43      	adds	r3, r0, #1
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d004      	beq.n	800afde <__swbuf_r+0x5a>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	07db      	lsls	r3, r3, #31
 800afd8:	d506      	bpl.n	800afe8 <__swbuf_r+0x64>
 800afda:	2e0a      	cmp	r6, #10
 800afdc:	d104      	bne.n	800afe8 <__swbuf_r+0x64>
 800afde:	4621      	mov	r1, r4
 800afe0:	4628      	mov	r0, r5
 800afe2:	f7ff fdb5 	bl	800ab50 <_fflush_r>
 800afe6:	b938      	cbnz	r0, 800aff8 <__swbuf_r+0x74>
 800afe8:	4638      	mov	r0, r7
 800afea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afec:	4621      	mov	r1, r4
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 f806 	bl	800b000 <__swsetup_r>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	d0d5      	beq.n	800afa4 <__swbuf_r+0x20>
 800aff8:	f04f 37ff 	mov.w	r7, #4294967295
 800affc:	e7f4      	b.n	800afe8 <__swbuf_r+0x64>
	...

0800b000 <__swsetup_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	4b2a      	ldr	r3, [pc, #168]	; (800b0ac <__swsetup_r+0xac>)
 800b004:	4605      	mov	r5, r0
 800b006:	6818      	ldr	r0, [r3, #0]
 800b008:	460c      	mov	r4, r1
 800b00a:	b118      	cbz	r0, 800b014 <__swsetup_r+0x14>
 800b00c:	6a03      	ldr	r3, [r0, #32]
 800b00e:	b90b      	cbnz	r3, 800b014 <__swsetup_r+0x14>
 800b010:	f7fd faae 	bl	8008570 <__sinit>
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b01a:	0718      	lsls	r0, r3, #28
 800b01c:	d422      	bmi.n	800b064 <__swsetup_r+0x64>
 800b01e:	06d9      	lsls	r1, r3, #27
 800b020:	d407      	bmi.n	800b032 <__swsetup_r+0x32>
 800b022:	2309      	movs	r3, #9
 800b024:	602b      	str	r3, [r5, #0]
 800b026:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b02a:	81a3      	strh	r3, [r4, #12]
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e034      	b.n	800b09c <__swsetup_r+0x9c>
 800b032:	0758      	lsls	r0, r3, #29
 800b034:	d512      	bpl.n	800b05c <__swsetup_r+0x5c>
 800b036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b038:	b141      	cbz	r1, 800b04c <__swsetup_r+0x4c>
 800b03a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b03e:	4299      	cmp	r1, r3
 800b040:	d002      	beq.n	800b048 <__swsetup_r+0x48>
 800b042:	4628      	mov	r0, r5
 800b044:	f7fe fa82 	bl	800954c <_free_r>
 800b048:	2300      	movs	r3, #0
 800b04a:	6363      	str	r3, [r4, #52]	; 0x34
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b052:	81a3      	strh	r3, [r4, #12]
 800b054:	2300      	movs	r3, #0
 800b056:	6063      	str	r3, [r4, #4]
 800b058:	6923      	ldr	r3, [r4, #16]
 800b05a:	6023      	str	r3, [r4, #0]
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	f043 0308 	orr.w	r3, r3, #8
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	6923      	ldr	r3, [r4, #16]
 800b066:	b94b      	cbnz	r3, 800b07c <__swsetup_r+0x7c>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b072:	d003      	beq.n	800b07c <__swsetup_r+0x7c>
 800b074:	4621      	mov	r1, r4
 800b076:	4628      	mov	r0, r5
 800b078:	f000 f884 	bl	800b184 <__smakebuf_r>
 800b07c:	89a0      	ldrh	r0, [r4, #12]
 800b07e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b082:	f010 0301 	ands.w	r3, r0, #1
 800b086:	d00a      	beq.n	800b09e <__swsetup_r+0x9e>
 800b088:	2300      	movs	r3, #0
 800b08a:	60a3      	str	r3, [r4, #8]
 800b08c:	6963      	ldr	r3, [r4, #20]
 800b08e:	425b      	negs	r3, r3
 800b090:	61a3      	str	r3, [r4, #24]
 800b092:	6923      	ldr	r3, [r4, #16]
 800b094:	b943      	cbnz	r3, 800b0a8 <__swsetup_r+0xa8>
 800b096:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b09a:	d1c4      	bne.n	800b026 <__swsetup_r+0x26>
 800b09c:	bd38      	pop	{r3, r4, r5, pc}
 800b09e:	0781      	lsls	r1, r0, #30
 800b0a0:	bf58      	it	pl
 800b0a2:	6963      	ldrpl	r3, [r4, #20]
 800b0a4:	60a3      	str	r3, [r4, #8]
 800b0a6:	e7f4      	b.n	800b092 <__swsetup_r+0x92>
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	e7f7      	b.n	800b09c <__swsetup_r+0x9c>
 800b0ac:	20000278 	.word	0x20000278

0800b0b0 <_raise_r>:
 800b0b0:	291f      	cmp	r1, #31
 800b0b2:	b538      	push	{r3, r4, r5, lr}
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	460d      	mov	r5, r1
 800b0b8:	d904      	bls.n	800b0c4 <_raise_r+0x14>
 800b0ba:	2316      	movs	r3, #22
 800b0bc:	6003      	str	r3, [r0, #0]
 800b0be:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b0c6:	b112      	cbz	r2, 800b0ce <_raise_r+0x1e>
 800b0c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0cc:	b94b      	cbnz	r3, 800b0e2 <_raise_r+0x32>
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f000 f830 	bl	800b134 <_getpid_r>
 800b0d4:	462a      	mov	r2, r5
 800b0d6:	4601      	mov	r1, r0
 800b0d8:	4620      	mov	r0, r4
 800b0da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0de:	f000 b817 	b.w	800b110 <_kill_r>
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d00a      	beq.n	800b0fc <_raise_r+0x4c>
 800b0e6:	1c59      	adds	r1, r3, #1
 800b0e8:	d103      	bne.n	800b0f2 <_raise_r+0x42>
 800b0ea:	2316      	movs	r3, #22
 800b0ec:	6003      	str	r3, [r0, #0]
 800b0ee:	2001      	movs	r0, #1
 800b0f0:	e7e7      	b.n	800b0c2 <_raise_r+0x12>
 800b0f2:	2400      	movs	r4, #0
 800b0f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	4798      	blx	r3
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e7e0      	b.n	800b0c2 <_raise_r+0x12>

0800b100 <raise>:
 800b100:	4b02      	ldr	r3, [pc, #8]	; (800b10c <raise+0xc>)
 800b102:	4601      	mov	r1, r0
 800b104:	6818      	ldr	r0, [r3, #0]
 800b106:	f7ff bfd3 	b.w	800b0b0 <_raise_r>
 800b10a:	bf00      	nop
 800b10c:	20000278 	.word	0x20000278

0800b110 <_kill_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4d07      	ldr	r5, [pc, #28]	; (800b130 <_kill_r+0x20>)
 800b114:	2300      	movs	r3, #0
 800b116:	4604      	mov	r4, r0
 800b118:	4608      	mov	r0, r1
 800b11a:	4611      	mov	r1, r2
 800b11c:	602b      	str	r3, [r5, #0]
 800b11e:	f7f7 fa89 	bl	8002634 <_kill>
 800b122:	1c43      	adds	r3, r0, #1
 800b124:	d102      	bne.n	800b12c <_kill_r+0x1c>
 800b126:	682b      	ldr	r3, [r5, #0]
 800b128:	b103      	cbz	r3, 800b12c <_kill_r+0x1c>
 800b12a:	6023      	str	r3, [r4, #0]
 800b12c:	bd38      	pop	{r3, r4, r5, pc}
 800b12e:	bf00      	nop
 800b130:	20000600 	.word	0x20000600

0800b134 <_getpid_r>:
 800b134:	f7f7 ba76 	b.w	8002624 <_getpid>

0800b138 <__swhatbuf_r>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	460c      	mov	r4, r1
 800b13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b140:	2900      	cmp	r1, #0
 800b142:	b096      	sub	sp, #88	; 0x58
 800b144:	4615      	mov	r5, r2
 800b146:	461e      	mov	r6, r3
 800b148:	da0d      	bge.n	800b166 <__swhatbuf_r+0x2e>
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b150:	f04f 0100 	mov.w	r1, #0
 800b154:	bf0c      	ite	eq
 800b156:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b15a:	2340      	movne	r3, #64	; 0x40
 800b15c:	2000      	movs	r0, #0
 800b15e:	6031      	str	r1, [r6, #0]
 800b160:	602b      	str	r3, [r5, #0]
 800b162:	b016      	add	sp, #88	; 0x58
 800b164:	bd70      	pop	{r4, r5, r6, pc}
 800b166:	466a      	mov	r2, sp
 800b168:	f000 f848 	bl	800b1fc <_fstat_r>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	dbec      	blt.n	800b14a <__swhatbuf_r+0x12>
 800b170:	9901      	ldr	r1, [sp, #4]
 800b172:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b176:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b17a:	4259      	negs	r1, r3
 800b17c:	4159      	adcs	r1, r3
 800b17e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b182:	e7eb      	b.n	800b15c <__swhatbuf_r+0x24>

0800b184 <__smakebuf_r>:
 800b184:	898b      	ldrh	r3, [r1, #12]
 800b186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b188:	079d      	lsls	r5, r3, #30
 800b18a:	4606      	mov	r6, r0
 800b18c:	460c      	mov	r4, r1
 800b18e:	d507      	bpl.n	800b1a0 <__smakebuf_r+0x1c>
 800b190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b194:	6023      	str	r3, [r4, #0]
 800b196:	6123      	str	r3, [r4, #16]
 800b198:	2301      	movs	r3, #1
 800b19a:	6163      	str	r3, [r4, #20]
 800b19c:	b002      	add	sp, #8
 800b19e:	bd70      	pop	{r4, r5, r6, pc}
 800b1a0:	ab01      	add	r3, sp, #4
 800b1a2:	466a      	mov	r2, sp
 800b1a4:	f7ff ffc8 	bl	800b138 <__swhatbuf_r>
 800b1a8:	9900      	ldr	r1, [sp, #0]
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f7fe fd99 	bl	8009ce4 <_malloc_r>
 800b1b2:	b948      	cbnz	r0, 800b1c8 <__smakebuf_r+0x44>
 800b1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b8:	059a      	lsls	r2, r3, #22
 800b1ba:	d4ef      	bmi.n	800b19c <__smakebuf_r+0x18>
 800b1bc:	f023 0303 	bic.w	r3, r3, #3
 800b1c0:	f043 0302 	orr.w	r3, r3, #2
 800b1c4:	81a3      	strh	r3, [r4, #12]
 800b1c6:	e7e3      	b.n	800b190 <__smakebuf_r+0xc>
 800b1c8:	89a3      	ldrh	r3, [r4, #12]
 800b1ca:	6020      	str	r0, [r4, #0]
 800b1cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d0:	81a3      	strh	r3, [r4, #12]
 800b1d2:	9b00      	ldr	r3, [sp, #0]
 800b1d4:	6163      	str	r3, [r4, #20]
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	6120      	str	r0, [r4, #16]
 800b1da:	b15b      	cbz	r3, 800b1f4 <__smakebuf_r+0x70>
 800b1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f000 f81d 	bl	800b220 <_isatty_r>
 800b1e6:	b128      	cbz	r0, 800b1f4 <__smakebuf_r+0x70>
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	f023 0303 	bic.w	r3, r3, #3
 800b1ee:	f043 0301 	orr.w	r3, r3, #1
 800b1f2:	81a3      	strh	r3, [r4, #12]
 800b1f4:	89a3      	ldrh	r3, [r4, #12]
 800b1f6:	431d      	orrs	r5, r3
 800b1f8:	81a5      	strh	r5, [r4, #12]
 800b1fa:	e7cf      	b.n	800b19c <__smakebuf_r+0x18>

0800b1fc <_fstat_r>:
 800b1fc:	b538      	push	{r3, r4, r5, lr}
 800b1fe:	4d07      	ldr	r5, [pc, #28]	; (800b21c <_fstat_r+0x20>)
 800b200:	2300      	movs	r3, #0
 800b202:	4604      	mov	r4, r0
 800b204:	4608      	mov	r0, r1
 800b206:	4611      	mov	r1, r2
 800b208:	602b      	str	r3, [r5, #0]
 800b20a:	f7f7 fa72 	bl	80026f2 <_fstat>
 800b20e:	1c43      	adds	r3, r0, #1
 800b210:	d102      	bne.n	800b218 <_fstat_r+0x1c>
 800b212:	682b      	ldr	r3, [r5, #0]
 800b214:	b103      	cbz	r3, 800b218 <_fstat_r+0x1c>
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	bd38      	pop	{r3, r4, r5, pc}
 800b21a:	bf00      	nop
 800b21c:	20000600 	.word	0x20000600

0800b220 <_isatty_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d06      	ldr	r5, [pc, #24]	; (800b23c <_isatty_r+0x1c>)
 800b224:	2300      	movs	r3, #0
 800b226:	4604      	mov	r4, r0
 800b228:	4608      	mov	r0, r1
 800b22a:	602b      	str	r3, [r5, #0]
 800b22c:	f7f7 fa71 	bl	8002712 <_isatty>
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	d102      	bne.n	800b23a <_isatty_r+0x1a>
 800b234:	682b      	ldr	r3, [r5, #0]
 800b236:	b103      	cbz	r3, 800b23a <_isatty_r+0x1a>
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}
 800b23c:	20000600 	.word	0x20000600

0800b240 <atan2>:
 800b240:	f000 bab2 	b.w	800b7a8 <__ieee754_atan2>

0800b244 <sqrt>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	ed2d 8b02 	vpush	{d8}
 800b24a:	ec55 4b10 	vmov	r4, r5, d0
 800b24e:	f000 f9d1 	bl	800b5f4 <__ieee754_sqrt>
 800b252:	4622      	mov	r2, r4
 800b254:	462b      	mov	r3, r5
 800b256:	4620      	mov	r0, r4
 800b258:	4629      	mov	r1, r5
 800b25a:	eeb0 8a40 	vmov.f32	s16, s0
 800b25e:	eef0 8a60 	vmov.f32	s17, s1
 800b262:	f7f5 fc6b 	bl	8000b3c <__aeabi_dcmpun>
 800b266:	b990      	cbnz	r0, 800b28e <sqrt+0x4a>
 800b268:	2200      	movs	r2, #0
 800b26a:	2300      	movs	r3, #0
 800b26c:	4620      	mov	r0, r4
 800b26e:	4629      	mov	r1, r5
 800b270:	f7f5 fc3c 	bl	8000aec <__aeabi_dcmplt>
 800b274:	b158      	cbz	r0, 800b28e <sqrt+0x4a>
 800b276:	f7fd faa3 	bl	80087c0 <__errno>
 800b27a:	2321      	movs	r3, #33	; 0x21
 800b27c:	6003      	str	r3, [r0, #0]
 800b27e:	2200      	movs	r2, #0
 800b280:	2300      	movs	r3, #0
 800b282:	4610      	mov	r0, r2
 800b284:	4619      	mov	r1, r3
 800b286:	f7f5 fae9 	bl	800085c <__aeabi_ddiv>
 800b28a:	ec41 0b18 	vmov	d8, r0, r1
 800b28e:	eeb0 0a48 	vmov.f32	s0, s16
 800b292:	eef0 0a68 	vmov.f32	s1, s17
 800b296:	ecbd 8b02 	vpop	{d8}
 800b29a:	bd38      	pop	{r3, r4, r5, pc}
 800b29c:	0000      	movs	r0, r0
	...

0800b2a0 <atan>:
 800b2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	ec55 4b10 	vmov	r4, r5, d0
 800b2a8:	4bc3      	ldr	r3, [pc, #780]	; (800b5b8 <atan+0x318>)
 800b2aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b2ae:	429e      	cmp	r6, r3
 800b2b0:	46ab      	mov	fp, r5
 800b2b2:	dd18      	ble.n	800b2e6 <atan+0x46>
 800b2b4:	4bc1      	ldr	r3, [pc, #772]	; (800b5bc <atan+0x31c>)
 800b2b6:	429e      	cmp	r6, r3
 800b2b8:	dc01      	bgt.n	800b2be <atan+0x1e>
 800b2ba:	d109      	bne.n	800b2d0 <atan+0x30>
 800b2bc:	b144      	cbz	r4, 800b2d0 <atan+0x30>
 800b2be:	4622      	mov	r2, r4
 800b2c0:	462b      	mov	r3, r5
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	f7f4 ffe9 	bl	800029c <__adddf3>
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	460d      	mov	r5, r1
 800b2ce:	e006      	b.n	800b2de <atan+0x3e>
 800b2d0:	f1bb 0f00 	cmp.w	fp, #0
 800b2d4:	f300 8131 	bgt.w	800b53a <atan+0x29a>
 800b2d8:	a59b      	add	r5, pc, #620	; (adr r5, 800b548 <atan+0x2a8>)
 800b2da:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2de:	ec45 4b10 	vmov	d0, r4, r5
 800b2e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e6:	4bb6      	ldr	r3, [pc, #728]	; (800b5c0 <atan+0x320>)
 800b2e8:	429e      	cmp	r6, r3
 800b2ea:	dc14      	bgt.n	800b316 <atan+0x76>
 800b2ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b2f0:	429e      	cmp	r6, r3
 800b2f2:	dc0d      	bgt.n	800b310 <atan+0x70>
 800b2f4:	a396      	add	r3, pc, #600	; (adr r3, 800b550 <atan+0x2b0>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	ee10 0a10 	vmov	r0, s0
 800b2fe:	4629      	mov	r1, r5
 800b300:	f7f4 ffcc 	bl	800029c <__adddf3>
 800b304:	4baf      	ldr	r3, [pc, #700]	; (800b5c4 <atan+0x324>)
 800b306:	2200      	movs	r2, #0
 800b308:	f7f5 fc0e 	bl	8000b28 <__aeabi_dcmpgt>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d1e6      	bne.n	800b2de <atan+0x3e>
 800b310:	f04f 3aff 	mov.w	sl, #4294967295
 800b314:	e02b      	b.n	800b36e <atan+0xce>
 800b316:	f000 f963 	bl	800b5e0 <fabs>
 800b31a:	4bab      	ldr	r3, [pc, #684]	; (800b5c8 <atan+0x328>)
 800b31c:	429e      	cmp	r6, r3
 800b31e:	ec55 4b10 	vmov	r4, r5, d0
 800b322:	f300 80bf 	bgt.w	800b4a4 <atan+0x204>
 800b326:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b32a:	429e      	cmp	r6, r3
 800b32c:	f300 80a0 	bgt.w	800b470 <atan+0x1d0>
 800b330:	ee10 2a10 	vmov	r2, s0
 800b334:	ee10 0a10 	vmov	r0, s0
 800b338:	462b      	mov	r3, r5
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7f4 ffae 	bl	800029c <__adddf3>
 800b340:	4ba0      	ldr	r3, [pc, #640]	; (800b5c4 <atan+0x324>)
 800b342:	2200      	movs	r2, #0
 800b344:	f7f4 ffa8 	bl	8000298 <__aeabi_dsub>
 800b348:	2200      	movs	r2, #0
 800b34a:	4606      	mov	r6, r0
 800b34c:	460f      	mov	r7, r1
 800b34e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b352:	4620      	mov	r0, r4
 800b354:	4629      	mov	r1, r5
 800b356:	f7f4 ffa1 	bl	800029c <__adddf3>
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	4630      	mov	r0, r6
 800b360:	4639      	mov	r1, r7
 800b362:	f7f5 fa7b 	bl	800085c <__aeabi_ddiv>
 800b366:	f04f 0a00 	mov.w	sl, #0
 800b36a:	4604      	mov	r4, r0
 800b36c:	460d      	mov	r5, r1
 800b36e:	4622      	mov	r2, r4
 800b370:	462b      	mov	r3, r5
 800b372:	4620      	mov	r0, r4
 800b374:	4629      	mov	r1, r5
 800b376:	f7f5 f947 	bl	8000608 <__aeabi_dmul>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4680      	mov	r8, r0
 800b380:	4689      	mov	r9, r1
 800b382:	f7f5 f941 	bl	8000608 <__aeabi_dmul>
 800b386:	a374      	add	r3, pc, #464	; (adr r3, 800b558 <atan+0x2b8>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	4606      	mov	r6, r0
 800b38e:	460f      	mov	r7, r1
 800b390:	f7f5 f93a 	bl	8000608 <__aeabi_dmul>
 800b394:	a372      	add	r3, pc, #456	; (adr r3, 800b560 <atan+0x2c0>)
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	f7f4 ff7f 	bl	800029c <__adddf3>
 800b39e:	4632      	mov	r2, r6
 800b3a0:	463b      	mov	r3, r7
 800b3a2:	f7f5 f931 	bl	8000608 <__aeabi_dmul>
 800b3a6:	a370      	add	r3, pc, #448	; (adr r3, 800b568 <atan+0x2c8>)
 800b3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ac:	f7f4 ff76 	bl	800029c <__adddf3>
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	f7f5 f928 	bl	8000608 <__aeabi_dmul>
 800b3b8:	a36d      	add	r3, pc, #436	; (adr r3, 800b570 <atan+0x2d0>)
 800b3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3be:	f7f4 ff6d 	bl	800029c <__adddf3>
 800b3c2:	4632      	mov	r2, r6
 800b3c4:	463b      	mov	r3, r7
 800b3c6:	f7f5 f91f 	bl	8000608 <__aeabi_dmul>
 800b3ca:	a36b      	add	r3, pc, #428	; (adr r3, 800b578 <atan+0x2d8>)
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f7f4 ff64 	bl	800029c <__adddf3>
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	463b      	mov	r3, r7
 800b3d8:	f7f5 f916 	bl	8000608 <__aeabi_dmul>
 800b3dc:	a368      	add	r3, pc, #416	; (adr r3, 800b580 <atan+0x2e0>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	f7f4 ff5b 	bl	800029c <__adddf3>
 800b3e6:	4642      	mov	r2, r8
 800b3e8:	464b      	mov	r3, r9
 800b3ea:	f7f5 f90d 	bl	8000608 <__aeabi_dmul>
 800b3ee:	a366      	add	r3, pc, #408	; (adr r3, 800b588 <atan+0x2e8>)
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	4689      	mov	r9, r1
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	f7f5 f904 	bl	8000608 <__aeabi_dmul>
 800b400:	a363      	add	r3, pc, #396	; (adr r3, 800b590 <atan+0x2f0>)
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	f7f4 ff47 	bl	8000298 <__aeabi_dsub>
 800b40a:	4632      	mov	r2, r6
 800b40c:	463b      	mov	r3, r7
 800b40e:	f7f5 f8fb 	bl	8000608 <__aeabi_dmul>
 800b412:	a361      	add	r3, pc, #388	; (adr r3, 800b598 <atan+0x2f8>)
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f7f4 ff3e 	bl	8000298 <__aeabi_dsub>
 800b41c:	4632      	mov	r2, r6
 800b41e:	463b      	mov	r3, r7
 800b420:	f7f5 f8f2 	bl	8000608 <__aeabi_dmul>
 800b424:	a35e      	add	r3, pc, #376	; (adr r3, 800b5a0 <atan+0x300>)
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f7f4 ff35 	bl	8000298 <__aeabi_dsub>
 800b42e:	4632      	mov	r2, r6
 800b430:	463b      	mov	r3, r7
 800b432:	f7f5 f8e9 	bl	8000608 <__aeabi_dmul>
 800b436:	a35c      	add	r3, pc, #368	; (adr r3, 800b5a8 <atan+0x308>)
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	f7f4 ff2c 	bl	8000298 <__aeabi_dsub>
 800b440:	4632      	mov	r2, r6
 800b442:	463b      	mov	r3, r7
 800b444:	f7f5 f8e0 	bl	8000608 <__aeabi_dmul>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4640      	mov	r0, r8
 800b44e:	4649      	mov	r1, r9
 800b450:	f7f4 ff24 	bl	800029c <__adddf3>
 800b454:	4622      	mov	r2, r4
 800b456:	462b      	mov	r3, r5
 800b458:	f7f5 f8d6 	bl	8000608 <__aeabi_dmul>
 800b45c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	d14b      	bne.n	800b4fe <atan+0x25e>
 800b466:	4620      	mov	r0, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	f7f4 ff15 	bl	8000298 <__aeabi_dsub>
 800b46e:	e72c      	b.n	800b2ca <atan+0x2a>
 800b470:	ee10 0a10 	vmov	r0, s0
 800b474:	4b53      	ldr	r3, [pc, #332]	; (800b5c4 <atan+0x324>)
 800b476:	2200      	movs	r2, #0
 800b478:	4629      	mov	r1, r5
 800b47a:	f7f4 ff0d 	bl	8000298 <__aeabi_dsub>
 800b47e:	4b51      	ldr	r3, [pc, #324]	; (800b5c4 <atan+0x324>)
 800b480:	4606      	mov	r6, r0
 800b482:	460f      	mov	r7, r1
 800b484:	2200      	movs	r2, #0
 800b486:	4620      	mov	r0, r4
 800b488:	4629      	mov	r1, r5
 800b48a:	f7f4 ff07 	bl	800029c <__adddf3>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	4630      	mov	r0, r6
 800b494:	4639      	mov	r1, r7
 800b496:	f7f5 f9e1 	bl	800085c <__aeabi_ddiv>
 800b49a:	f04f 0a01 	mov.w	sl, #1
 800b49e:	4604      	mov	r4, r0
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	e764      	b.n	800b36e <atan+0xce>
 800b4a4:	4b49      	ldr	r3, [pc, #292]	; (800b5cc <atan+0x32c>)
 800b4a6:	429e      	cmp	r6, r3
 800b4a8:	da1d      	bge.n	800b4e6 <atan+0x246>
 800b4aa:	ee10 0a10 	vmov	r0, s0
 800b4ae:	4b48      	ldr	r3, [pc, #288]	; (800b5d0 <atan+0x330>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f4 fef0 	bl	8000298 <__aeabi_dsub>
 800b4b8:	4b45      	ldr	r3, [pc, #276]	; (800b5d0 <atan+0x330>)
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460f      	mov	r7, r1
 800b4be:	2200      	movs	r2, #0
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f7f5 f8a0 	bl	8000608 <__aeabi_dmul>
 800b4c8:	4b3e      	ldr	r3, [pc, #248]	; (800b5c4 <atan+0x324>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f7f4 fee6 	bl	800029c <__adddf3>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	f7f5 f9c0 	bl	800085c <__aeabi_ddiv>
 800b4dc:	f04f 0a02 	mov.w	sl, #2
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	460d      	mov	r5, r1
 800b4e4:	e743      	b.n	800b36e <atan+0xce>
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	ee10 2a10 	vmov	r2, s0
 800b4ec:	4939      	ldr	r1, [pc, #228]	; (800b5d4 <atan+0x334>)
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	f7f5 f9b4 	bl	800085c <__aeabi_ddiv>
 800b4f4:	f04f 0a03 	mov.w	sl, #3
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	e737      	b.n	800b36e <atan+0xce>
 800b4fe:	4b36      	ldr	r3, [pc, #216]	; (800b5d8 <atan+0x338>)
 800b500:	4e36      	ldr	r6, [pc, #216]	; (800b5dc <atan+0x33c>)
 800b502:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f7f4 fec5 	bl	8000298 <__aeabi_dsub>
 800b50e:	4622      	mov	r2, r4
 800b510:	462b      	mov	r3, r5
 800b512:	f7f4 fec1 	bl	8000298 <__aeabi_dsub>
 800b516:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b522:	f7f4 feb9 	bl	8000298 <__aeabi_dsub>
 800b526:	f1bb 0f00 	cmp.w	fp, #0
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	f6bf aed6 	bge.w	800b2de <atan+0x3e>
 800b532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b536:	461d      	mov	r5, r3
 800b538:	e6d1      	b.n	800b2de <atan+0x3e>
 800b53a:	a51d      	add	r5, pc, #116	; (adr r5, 800b5b0 <atan+0x310>)
 800b53c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b540:	e6cd      	b.n	800b2de <atan+0x3e>
 800b542:	bf00      	nop
 800b544:	f3af 8000 	nop.w
 800b548:	54442d18 	.word	0x54442d18
 800b54c:	bff921fb 	.word	0xbff921fb
 800b550:	8800759c 	.word	0x8800759c
 800b554:	7e37e43c 	.word	0x7e37e43c
 800b558:	e322da11 	.word	0xe322da11
 800b55c:	3f90ad3a 	.word	0x3f90ad3a
 800b560:	24760deb 	.word	0x24760deb
 800b564:	3fa97b4b 	.word	0x3fa97b4b
 800b568:	a0d03d51 	.word	0xa0d03d51
 800b56c:	3fb10d66 	.word	0x3fb10d66
 800b570:	c54c206e 	.word	0xc54c206e
 800b574:	3fb745cd 	.word	0x3fb745cd
 800b578:	920083ff 	.word	0x920083ff
 800b57c:	3fc24924 	.word	0x3fc24924
 800b580:	5555550d 	.word	0x5555550d
 800b584:	3fd55555 	.word	0x3fd55555
 800b588:	2c6a6c2f 	.word	0x2c6a6c2f
 800b58c:	bfa2b444 	.word	0xbfa2b444
 800b590:	52defd9a 	.word	0x52defd9a
 800b594:	3fadde2d 	.word	0x3fadde2d
 800b598:	af749a6d 	.word	0xaf749a6d
 800b59c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b5a0:	fe231671 	.word	0xfe231671
 800b5a4:	3fbc71c6 	.word	0x3fbc71c6
 800b5a8:	9998ebc4 	.word	0x9998ebc4
 800b5ac:	3fc99999 	.word	0x3fc99999
 800b5b0:	54442d18 	.word	0x54442d18
 800b5b4:	3ff921fb 	.word	0x3ff921fb
 800b5b8:	440fffff 	.word	0x440fffff
 800b5bc:	7ff00000 	.word	0x7ff00000
 800b5c0:	3fdbffff 	.word	0x3fdbffff
 800b5c4:	3ff00000 	.word	0x3ff00000
 800b5c8:	3ff2ffff 	.word	0x3ff2ffff
 800b5cc:	40038000 	.word	0x40038000
 800b5d0:	3ff80000 	.word	0x3ff80000
 800b5d4:	bff00000 	.word	0xbff00000
 800b5d8:	0800bdc0 	.word	0x0800bdc0
 800b5dc:	0800bda0 	.word	0x0800bda0

0800b5e0 <fabs>:
 800b5e0:	ec51 0b10 	vmov	r0, r1, d0
 800b5e4:	ee10 2a10 	vmov	r2, s0
 800b5e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b5ec:	ec43 2b10 	vmov	d0, r2, r3
 800b5f0:	4770      	bx	lr
	...

0800b5f4 <__ieee754_sqrt>:
 800b5f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f8:	ec55 4b10 	vmov	r4, r5, d0
 800b5fc:	4e67      	ldr	r6, [pc, #412]	; (800b79c <__ieee754_sqrt+0x1a8>)
 800b5fe:	43ae      	bics	r6, r5
 800b600:	ee10 0a10 	vmov	r0, s0
 800b604:	ee10 2a10 	vmov	r2, s0
 800b608:	4629      	mov	r1, r5
 800b60a:	462b      	mov	r3, r5
 800b60c:	d10d      	bne.n	800b62a <__ieee754_sqrt+0x36>
 800b60e:	f7f4 fffb 	bl	8000608 <__aeabi_dmul>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4620      	mov	r0, r4
 800b618:	4629      	mov	r1, r5
 800b61a:	f7f4 fe3f 	bl	800029c <__adddf3>
 800b61e:	4604      	mov	r4, r0
 800b620:	460d      	mov	r5, r1
 800b622:	ec45 4b10 	vmov	d0, r4, r5
 800b626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62a:	2d00      	cmp	r5, #0
 800b62c:	dc0b      	bgt.n	800b646 <__ieee754_sqrt+0x52>
 800b62e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b632:	4326      	orrs	r6, r4
 800b634:	d0f5      	beq.n	800b622 <__ieee754_sqrt+0x2e>
 800b636:	b135      	cbz	r5, 800b646 <__ieee754_sqrt+0x52>
 800b638:	f7f4 fe2e 	bl	8000298 <__aeabi_dsub>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	f7f5 f90c 	bl	800085c <__aeabi_ddiv>
 800b644:	e7eb      	b.n	800b61e <__ieee754_sqrt+0x2a>
 800b646:	1509      	asrs	r1, r1, #20
 800b648:	f000 808d 	beq.w	800b766 <__ieee754_sqrt+0x172>
 800b64c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b650:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b658:	07c9      	lsls	r1, r1, #31
 800b65a:	bf5c      	itt	pl
 800b65c:	005b      	lslpl	r3, r3, #1
 800b65e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b662:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b666:	bf58      	it	pl
 800b668:	0052      	lslpl	r2, r2, #1
 800b66a:	2500      	movs	r5, #0
 800b66c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b670:	1076      	asrs	r6, r6, #1
 800b672:	0052      	lsls	r2, r2, #1
 800b674:	f04f 0e16 	mov.w	lr, #22
 800b678:	46ac      	mov	ip, r5
 800b67a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b67e:	eb0c 0001 	add.w	r0, ip, r1
 800b682:	4298      	cmp	r0, r3
 800b684:	bfde      	ittt	le
 800b686:	1a1b      	suble	r3, r3, r0
 800b688:	eb00 0c01 	addle.w	ip, r0, r1
 800b68c:	186d      	addle	r5, r5, r1
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	f1be 0e01 	subs.w	lr, lr, #1
 800b694:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b698:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b69c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b6a0:	d1ed      	bne.n	800b67e <__ieee754_sqrt+0x8a>
 800b6a2:	4674      	mov	r4, lr
 800b6a4:	2720      	movs	r7, #32
 800b6a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b6aa:	4563      	cmp	r3, ip
 800b6ac:	eb01 000e 	add.w	r0, r1, lr
 800b6b0:	dc02      	bgt.n	800b6b8 <__ieee754_sqrt+0xc4>
 800b6b2:	d113      	bne.n	800b6dc <__ieee754_sqrt+0xe8>
 800b6b4:	4290      	cmp	r0, r2
 800b6b6:	d811      	bhi.n	800b6dc <__ieee754_sqrt+0xe8>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	eb00 0e01 	add.w	lr, r0, r1
 800b6be:	da57      	bge.n	800b770 <__ieee754_sqrt+0x17c>
 800b6c0:	f1be 0f00 	cmp.w	lr, #0
 800b6c4:	db54      	blt.n	800b770 <__ieee754_sqrt+0x17c>
 800b6c6:	f10c 0801 	add.w	r8, ip, #1
 800b6ca:	eba3 030c 	sub.w	r3, r3, ip
 800b6ce:	4290      	cmp	r0, r2
 800b6d0:	bf88      	it	hi
 800b6d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b6d6:	1a12      	subs	r2, r2, r0
 800b6d8:	440c      	add	r4, r1
 800b6da:	46c4      	mov	ip, r8
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	3f01      	subs	r7, #1
 800b6e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b6e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b6e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b6ec:	d1dd      	bne.n	800b6aa <__ieee754_sqrt+0xb6>
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	d01b      	beq.n	800b72a <__ieee754_sqrt+0x136>
 800b6f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b7a0 <__ieee754_sqrt+0x1ac>
 800b6f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b7a4 <__ieee754_sqrt+0x1b0>
 800b6fa:	e9da 0100 	ldrd	r0, r1, [sl]
 800b6fe:	e9db 2300 	ldrd	r2, r3, [fp]
 800b702:	f7f4 fdc9 	bl	8000298 <__aeabi_dsub>
 800b706:	e9da 8900 	ldrd	r8, r9, [sl]
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	4640      	mov	r0, r8
 800b710:	4649      	mov	r1, r9
 800b712:	f7f5 f9f5 	bl	8000b00 <__aeabi_dcmple>
 800b716:	b140      	cbz	r0, 800b72a <__ieee754_sqrt+0x136>
 800b718:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b71c:	e9da 0100 	ldrd	r0, r1, [sl]
 800b720:	e9db 2300 	ldrd	r2, r3, [fp]
 800b724:	d126      	bne.n	800b774 <__ieee754_sqrt+0x180>
 800b726:	3501      	adds	r5, #1
 800b728:	463c      	mov	r4, r7
 800b72a:	106a      	asrs	r2, r5, #1
 800b72c:	0863      	lsrs	r3, r4, #1
 800b72e:	07e9      	lsls	r1, r5, #31
 800b730:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b734:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b738:	bf48      	it	mi
 800b73a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b73e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b742:	461c      	mov	r4, r3
 800b744:	e76d      	b.n	800b622 <__ieee754_sqrt+0x2e>
 800b746:	0ad3      	lsrs	r3, r2, #11
 800b748:	3815      	subs	r0, #21
 800b74a:	0552      	lsls	r2, r2, #21
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d0fa      	beq.n	800b746 <__ieee754_sqrt+0x152>
 800b750:	02dc      	lsls	r4, r3, #11
 800b752:	d50a      	bpl.n	800b76a <__ieee754_sqrt+0x176>
 800b754:	f1c1 0420 	rsb	r4, r1, #32
 800b758:	fa22 f404 	lsr.w	r4, r2, r4
 800b75c:	1e4d      	subs	r5, r1, #1
 800b75e:	408a      	lsls	r2, r1
 800b760:	4323      	orrs	r3, r4
 800b762:	1b41      	subs	r1, r0, r5
 800b764:	e772      	b.n	800b64c <__ieee754_sqrt+0x58>
 800b766:	4608      	mov	r0, r1
 800b768:	e7f0      	b.n	800b74c <__ieee754_sqrt+0x158>
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	3101      	adds	r1, #1
 800b76e:	e7ef      	b.n	800b750 <__ieee754_sqrt+0x15c>
 800b770:	46e0      	mov	r8, ip
 800b772:	e7aa      	b.n	800b6ca <__ieee754_sqrt+0xd6>
 800b774:	f7f4 fd92 	bl	800029c <__adddf3>
 800b778:	e9da 8900 	ldrd	r8, r9, [sl]
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4640      	mov	r0, r8
 800b782:	4649      	mov	r1, r9
 800b784:	f7f5 f9b2 	bl	8000aec <__aeabi_dcmplt>
 800b788:	b120      	cbz	r0, 800b794 <__ieee754_sqrt+0x1a0>
 800b78a:	1ca0      	adds	r0, r4, #2
 800b78c:	bf08      	it	eq
 800b78e:	3501      	addeq	r5, #1
 800b790:	3402      	adds	r4, #2
 800b792:	e7ca      	b.n	800b72a <__ieee754_sqrt+0x136>
 800b794:	3401      	adds	r4, #1
 800b796:	f024 0401 	bic.w	r4, r4, #1
 800b79a:	e7c6      	b.n	800b72a <__ieee754_sqrt+0x136>
 800b79c:	7ff00000 	.word	0x7ff00000
 800b7a0:	20000280 	.word	0x20000280
 800b7a4:	20000288 	.word	0x20000288

0800b7a8 <__ieee754_atan2>:
 800b7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ac:	ec57 6b11 	vmov	r6, r7, d1
 800b7b0:	4273      	negs	r3, r6
 800b7b2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b930 <__ieee754_atan2+0x188>
 800b7b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b7ba:	4333      	orrs	r3, r6
 800b7bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b7c0:	4543      	cmp	r3, r8
 800b7c2:	ec51 0b10 	vmov	r0, r1, d0
 800b7c6:	ee11 5a10 	vmov	r5, s2
 800b7ca:	d80a      	bhi.n	800b7e2 <__ieee754_atan2+0x3a>
 800b7cc:	4244      	negs	r4, r0
 800b7ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7d2:	4304      	orrs	r4, r0
 800b7d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b7d8:	4544      	cmp	r4, r8
 800b7da:	ee10 9a10 	vmov	r9, s0
 800b7de:	468e      	mov	lr, r1
 800b7e0:	d907      	bls.n	800b7f2 <__ieee754_atan2+0x4a>
 800b7e2:	4632      	mov	r2, r6
 800b7e4:	463b      	mov	r3, r7
 800b7e6:	f7f4 fd59 	bl	800029c <__adddf3>
 800b7ea:	ec41 0b10 	vmov	d0, r0, r1
 800b7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b7f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b7fa:	4334      	orrs	r4, r6
 800b7fc:	d103      	bne.n	800b806 <__ieee754_atan2+0x5e>
 800b7fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b802:	f7ff bd4d 	b.w	800b2a0 <atan>
 800b806:	17bc      	asrs	r4, r7, #30
 800b808:	f004 0402 	and.w	r4, r4, #2
 800b80c:	ea53 0909 	orrs.w	r9, r3, r9
 800b810:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b814:	d107      	bne.n	800b826 <__ieee754_atan2+0x7e>
 800b816:	2c02      	cmp	r4, #2
 800b818:	d05f      	beq.n	800b8da <__ieee754_atan2+0x132>
 800b81a:	2c03      	cmp	r4, #3
 800b81c:	d1e5      	bne.n	800b7ea <__ieee754_atan2+0x42>
 800b81e:	a140      	add	r1, pc, #256	; (adr r1, 800b920 <__ieee754_atan2+0x178>)
 800b820:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b824:	e7e1      	b.n	800b7ea <__ieee754_atan2+0x42>
 800b826:	4315      	orrs	r5, r2
 800b828:	d106      	bne.n	800b838 <__ieee754_atan2+0x90>
 800b82a:	f1be 0f00 	cmp.w	lr, #0
 800b82e:	da5f      	bge.n	800b8f0 <__ieee754_atan2+0x148>
 800b830:	a13d      	add	r1, pc, #244	; (adr r1, 800b928 <__ieee754_atan2+0x180>)
 800b832:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b836:	e7d8      	b.n	800b7ea <__ieee754_atan2+0x42>
 800b838:	4542      	cmp	r2, r8
 800b83a:	d10f      	bne.n	800b85c <__ieee754_atan2+0xb4>
 800b83c:	4293      	cmp	r3, r2
 800b83e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b842:	d107      	bne.n	800b854 <__ieee754_atan2+0xac>
 800b844:	2c02      	cmp	r4, #2
 800b846:	d84c      	bhi.n	800b8e2 <__ieee754_atan2+0x13a>
 800b848:	4b33      	ldr	r3, [pc, #204]	; (800b918 <__ieee754_atan2+0x170>)
 800b84a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b84e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b852:	e7ca      	b.n	800b7ea <__ieee754_atan2+0x42>
 800b854:	2c02      	cmp	r4, #2
 800b856:	d848      	bhi.n	800b8ea <__ieee754_atan2+0x142>
 800b858:	4b30      	ldr	r3, [pc, #192]	; (800b91c <__ieee754_atan2+0x174>)
 800b85a:	e7f6      	b.n	800b84a <__ieee754_atan2+0xa2>
 800b85c:	4543      	cmp	r3, r8
 800b85e:	d0e4      	beq.n	800b82a <__ieee754_atan2+0x82>
 800b860:	1a9b      	subs	r3, r3, r2
 800b862:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b866:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b86a:	da1e      	bge.n	800b8aa <__ieee754_atan2+0x102>
 800b86c:	2f00      	cmp	r7, #0
 800b86e:	da01      	bge.n	800b874 <__ieee754_atan2+0xcc>
 800b870:	323c      	adds	r2, #60	; 0x3c
 800b872:	db1e      	blt.n	800b8b2 <__ieee754_atan2+0x10a>
 800b874:	4632      	mov	r2, r6
 800b876:	463b      	mov	r3, r7
 800b878:	f7f4 fff0 	bl	800085c <__aeabi_ddiv>
 800b87c:	ec41 0b10 	vmov	d0, r0, r1
 800b880:	f7ff feae 	bl	800b5e0 <fabs>
 800b884:	f7ff fd0c 	bl	800b2a0 <atan>
 800b888:	ec51 0b10 	vmov	r0, r1, d0
 800b88c:	2c01      	cmp	r4, #1
 800b88e:	d013      	beq.n	800b8b8 <__ieee754_atan2+0x110>
 800b890:	2c02      	cmp	r4, #2
 800b892:	d015      	beq.n	800b8c0 <__ieee754_atan2+0x118>
 800b894:	2c00      	cmp	r4, #0
 800b896:	d0a8      	beq.n	800b7ea <__ieee754_atan2+0x42>
 800b898:	a317      	add	r3, pc, #92	; (adr r3, 800b8f8 <__ieee754_atan2+0x150>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f7f4 fcfb 	bl	8000298 <__aeabi_dsub>
 800b8a2:	a317      	add	r3, pc, #92	; (adr r3, 800b900 <__ieee754_atan2+0x158>)
 800b8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a8:	e014      	b.n	800b8d4 <__ieee754_atan2+0x12c>
 800b8aa:	a117      	add	r1, pc, #92	; (adr r1, 800b908 <__ieee754_atan2+0x160>)
 800b8ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8b0:	e7ec      	b.n	800b88c <__ieee754_atan2+0xe4>
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	e7e9      	b.n	800b88c <__ieee754_atan2+0xe4>
 800b8b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8bc:	4619      	mov	r1, r3
 800b8be:	e794      	b.n	800b7ea <__ieee754_atan2+0x42>
 800b8c0:	a30d      	add	r3, pc, #52	; (adr r3, 800b8f8 <__ieee754_atan2+0x150>)
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	f7f4 fce7 	bl	8000298 <__aeabi_dsub>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	a10c      	add	r1, pc, #48	; (adr r1, 800b900 <__ieee754_atan2+0x158>)
 800b8d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8d4:	f7f4 fce0 	bl	8000298 <__aeabi_dsub>
 800b8d8:	e787      	b.n	800b7ea <__ieee754_atan2+0x42>
 800b8da:	a109      	add	r1, pc, #36	; (adr r1, 800b900 <__ieee754_atan2+0x158>)
 800b8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e0:	e783      	b.n	800b7ea <__ieee754_atan2+0x42>
 800b8e2:	a10b      	add	r1, pc, #44	; (adr r1, 800b910 <__ieee754_atan2+0x168>)
 800b8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e8:	e77f      	b.n	800b7ea <__ieee754_atan2+0x42>
 800b8ea:	2000      	movs	r0, #0
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	e77c      	b.n	800b7ea <__ieee754_atan2+0x42>
 800b8f0:	a105      	add	r1, pc, #20	; (adr r1, 800b908 <__ieee754_atan2+0x160>)
 800b8f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8f6:	e778      	b.n	800b7ea <__ieee754_atan2+0x42>
 800b8f8:	33145c07 	.word	0x33145c07
 800b8fc:	3ca1a626 	.word	0x3ca1a626
 800b900:	54442d18 	.word	0x54442d18
 800b904:	400921fb 	.word	0x400921fb
 800b908:	54442d18 	.word	0x54442d18
 800b90c:	3ff921fb 	.word	0x3ff921fb
 800b910:	54442d18 	.word	0x54442d18
 800b914:	3fe921fb 	.word	0x3fe921fb
 800b918:	0800bde0 	.word	0x0800bde0
 800b91c:	0800bdf8 	.word	0x0800bdf8
 800b920:	54442d18 	.word	0x54442d18
 800b924:	c00921fb 	.word	0xc00921fb
 800b928:	54442d18 	.word	0x54442d18
 800b92c:	bff921fb 	.word	0xbff921fb
 800b930:	7ff00000 	.word	0x7ff00000

0800b934 <_init>:
 800b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b936:	bf00      	nop
 800b938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93a:	bc08      	pop	{r3}
 800b93c:	469e      	mov	lr, r3
 800b93e:	4770      	bx	lr

0800b940 <_fini>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	bf00      	nop
 800b944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b946:	bc08      	pop	{r3}
 800b948:	469e      	mov	lr, r3
 800b94a:	4770      	bx	lr
