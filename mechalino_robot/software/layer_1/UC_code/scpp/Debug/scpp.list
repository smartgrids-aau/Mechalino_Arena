
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c900  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800caa0  0800caa0  0000daa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d098  0800d098  0000f238  2**0
                  CONTENTS
  4 .ARM          00000008  0800d098  0800d098  0000e098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0a0  0800d0a0  0000f238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0a0  0800d0a0  0000e0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0a4  0800d0a4  0000e0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800d0a8  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  20000238  0800d2e0  0000f238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000097c  0800d2e0  0000f97c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a27  00000000  00000000  0000f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf1  00000000  00000000  00021c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00024880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dab  00000000  00000000  000259e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b02  00000000  00000000  00026793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016aeb  00000000  00000000  00040295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f4e7  00000000  00000000  00056d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000f6267  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006768  00000000  00000000  000f62f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000fca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ca88 	.word	0x0800ca88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	0800ca88 	.word	0x0800ca88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_ADC1_Init+0xa0>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001016:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001024:	2201      	movs	r2, #1
 8001026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <MX_ADC1_Init+0xa4>)
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001058:	f001 fca6 	bl	80029a8 <HAL_ADC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001062:	f001 f877 	bl	8002154 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001078:	f001 fcda 	bl	8002a30 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001082:	f001 f867 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000254 	.word	0x20000254
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f002 f853 	bl	80031b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b0:	4815      	ldr	r0, [pc, #84]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011b2:	f002 f983 	bl	80034bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011b6:	2200      	movs	r2, #0
 80011b8:	213b      	movs	r1, #59	@ 0x3b
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011bc:	f002 f97e 	bl	80034bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011da:	f001 ffeb 	bl	80031b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011de:	233b      	movs	r3, #59	@ 0x3b
 80011e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011f6:	f001 ffdd 	bl	80031b4 <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020400 	.word	0x40020400

08001210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f002 f94f 	bl	80034f0 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 ff7c 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000029c 	.word	0x2000029c
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f001 ff74 	bl	80031b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_UART_RxCpltCallback>:

/**
 * @brief UART Receive Complete Callback.
 * @param huart Pointer to UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_UART_RxCpltCallback+0x5c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d120      	bne.n	8001350 <HAL_UART_RxCpltCallback+0x54>
		if (UART1_rxBuffer[0] == '\n') { // Assuming commands are newline terminated
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d10c      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x34>
			rx_buffer[rx_index] = '\0'; // Null terminate the string
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]
			rx_complete = 1; // Set flag for command complete
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_RxCpltCallback+0x6c>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
			rx_index = 0; // Reset index
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e00a      	b.n	8001346 <HAL_UART_RxCpltCallback+0x4a>
		} else {
			rx_buffer[rx_index++] = UART1_rxBuffer[0]; // Store character in buffer
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800133a:	7011      	strb	r1, [r2, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 8001344:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1); // Listen for next character
 8001346:	2201      	movs	r2, #1
 8001348:	4904      	ldr	r1, [pc, #16]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 800134a:	4808      	ldr	r0, [pc, #32]	@ (800136c <HAL_UART_RxCpltCallback+0x70>)
 800134c:	f003 fde9 	bl	8004f22 <HAL_UART_Receive_IT>
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	200003fc 	.word	0x200003fc
 8001360:	200003f4 	.word	0x200003f4
 8001364:	200002f4 	.word	0x200002f4
 8001368:	200003f8 	.word	0x200003f8
 800136c:	200007e4 	.word	0x200007e4

08001370 <pid_controller>:
 * @param pid Pointer to PIDController structure.
 * @param setpoint Desired setpoint.
 * @param measured_value Current measured value.
 * @return Control output.
 */
float pid_controller(PIDController *pid, float setpoint, float measured_value) {
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	ed87 0a02 	vstr	s0, [r7, #8]
 800137c:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measured_value;
 8001380:	ed97 7a02 	vldr	s14, [r7, #8]
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->integral += error;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	ed93 7a00 	vldr	s14, [r3]
 8001396:	edd7 7a06 	vldr	s15, [r7, #24]
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	edc3 7a00 	vstr	s15, [r3]

	// Anti-windup: Limit the integral term
	if (pid->integral > pid->integral_limit)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80013b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	dd03      	ble.n	80013c2 <pid_controller+0x52>
		pid->integral = pid->integral_limit;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]
	if (pid->integral < -pid->integral_limit)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	ed93 7a00 	vldr	s14, [r3]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80013ce:	eef1 7a67 	vneg.f32	s15, s15
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d507      	bpl.n	80013ec <pid_controller+0x7c>
		pid->integral = -pid->integral_limit;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	edd3 7a05 	vldr	s15, [r3, #20]
 80013e2:	eef1 7a67 	vneg.f32	s15, s15
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	edc3 7a00 	vstr	s15, [r3]

	float derivative = error - pid->previous_error;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80013f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fa:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->previous_error = error;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]

	float output = pid->kp * error + pid->ki * pid->integral
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	ed93 7a02 	vldr	s14, [r3, #8]
 800140a:	edd7 7a06 	vldr	s15, [r7, #24]
 800140e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	edd3 6a03 	vldr	s13, [r3, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->kd * derivative;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	edd3 6a04 	vldr	s13, [r3, #16]
 800142c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001430:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float output = pid->kp * error + pid->ki * pid->integral
 8001434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001438:	edc7 7a07 	vstr	s15, [r7, #28]

	// Limit the output to the maximum correction factor
	if (output > pid->output_limit)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001442:	ed97 7a07 	vldr	s14, [r7, #28]
 8001446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	dd02      	ble.n	8001456 <pid_controller+0xe6>
		output = pid->output_limit;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	61fb      	str	r3, [r7, #28]
	if (output < -pid->output_limit)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	edd3 7a06 	vldr	s15, [r3, #24]
 800145c:	eef1 7a67 	vneg.f32	s15, s15
 8001460:	ed97 7a07 	vldr	s14, [r7, #28]
 8001464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	d506      	bpl.n	800147c <pid_controller+0x10c>
		output = -pid->output_limit;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	edd3 7a06 	vldr	s15, [r3, #24]
 8001474:	eef1 7a67 	vneg.f32	s15, s15
 8001478:	edc7 7a07 	vstr	s15, [r7, #28]

	return output;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	ee07 3a90 	vmov	s15, r3
}
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	3724      	adds	r7, #36	@ 0x24
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <handle_rotation>:

/**
 * @brief Handle the rotation of the robot towards the target angle.
 */
void handle_rotation() {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
	float target_angle = calculate_angle(current_x, current_y, target_x,
 8001496:	4b64      	ldr	r3, [pc, #400]	@ (8001628 <handle_rotation+0x198>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	4b63      	ldr	r3, [pc, #396]	@ (800162c <handle_rotation+0x19c>)
 800149e:	ed93 7a00 	vldr	s14, [r3]
 80014a2:	4b63      	ldr	r3, [pc, #396]	@ (8001630 <handle_rotation+0x1a0>)
 80014a4:	edd3 6a00 	vldr	s13, [r3]
 80014a8:	4b62      	ldr	r3, [pc, #392]	@ (8001634 <handle_rotation+0x1a4>)
 80014aa:	ed93 6a00 	vldr	s12, [r3]
 80014ae:	eef0 1a46 	vmov.f32	s3, s12
 80014b2:	eeb0 1a66 	vmov.f32	s2, s13
 80014b6:	eef0 0a47 	vmov.f32	s1, s14
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	f000 fa47 	bl	8001950 <calculate_angle>
 80014c2:	ed87 0a02 	vstr	s0, [r7, #8]
			target_y);
	angle_error = target_angle - current_yaw;
 80014c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001638 <handle_rotation+0x1a8>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d4:	4b59      	ldr	r3, [pc, #356]	@ (800163c <handle_rotation+0x1ac>)
 80014d6:	edc3 7a00 	vstr	s15, [r3]

	// Normalize the angle error to always choose the shortest rotation path
	if (angle_error > 180) {
 80014da:	4b58      	ldr	r3, [pc, #352]	@ (800163c <handle_rotation+0x1ac>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001640 <handle_rotation+0x1b0>
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	dd0a      	ble.n	8001504 <handle_rotation+0x74>
		angle_error -= 360;
 80014ee:	4b53      	ldr	r3, [pc, #332]	@ (800163c <handle_rotation+0x1ac>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001644 <handle_rotation+0x1b4>
 80014f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014fc:	4b4f      	ldr	r3, [pc, #316]	@ (800163c <handle_rotation+0x1ac>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
 8001502:	e013      	b.n	800152c <handle_rotation+0x9c>
	} else if (angle_error < -180) {
 8001504:	4b4d      	ldr	r3, [pc, #308]	@ (800163c <handle_rotation+0x1ac>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001648 <handle_rotation+0x1b8>
 800150e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d509      	bpl.n	800152c <handle_rotation+0x9c>
		angle_error += 360;
 8001518:	4b48      	ldr	r3, [pc, #288]	@ (800163c <handle_rotation+0x1ac>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001644 <handle_rotation+0x1b4>
 8001522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001526:	4b45      	ldr	r3, [pc, #276]	@ (800163c <handle_rotation+0x1ac>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
	}

	if (fabsf(angle_error) > ANGLE_THRESHOLD_ROTATE_TO_MOVE) {
 800152c:	4b43      	ldr	r3, [pc, #268]	@ (800163c <handle_rotation+0x1ac>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	eef0 7ae7 	vabs.f32	s15, s15
 8001536:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800153a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	dd60      	ble.n	8001606 <handle_rotation+0x176>
		// Normalize the angle error for rotation
		float normalized_angle_error = angle_error / 180.0f;
 8001544:	4b3d      	ldr	r3, [pc, #244]	@ (800163c <handle_rotation+0x1ac>)
 8001546:	ed93 7a00 	vldr	s14, [r3]
 800154a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001640 <handle_rotation+0x1b0>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc7 7a01 	vstr	s15, [r7, #4]

		// PID-based correction for rotation
		calculated_correction = pid_controller(&rotation_pid, 0.0f,
 8001556:	edd7 0a01 	vldr	s1, [r7, #4]
 800155a:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 800164c <handle_rotation+0x1bc>
 800155e:	483c      	ldr	r0, [pc, #240]	@ (8001650 <handle_rotation+0x1c0>)
 8001560:	f7ff ff06 	bl	8001370 <pid_controller>
 8001564:	eef0 7a40 	vmov.f32	s15, s0
 8001568:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <handle_rotation+0x1c4>)
 800156a:	edc3 7a00 	vstr	s15, [r3]
				normalized_angle_error);

		uint32_t left_right_pwm;

		if (angle_error > 0) {
 800156e:	4b33      	ldr	r3, [pc, #204]	@ (800163c <handle_rotation+0x1ac>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd1c      	ble.n	80015b8 <handle_rotation+0x128>
			// Rotate right: Both motors move forward speed
			left_right_pwm = FORWARD_SLOW + calculated_correction;
 800157e:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <handle_rotation+0x1c4>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001658 <handle_rotation+0x1c8>
 8001588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800158c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	60fb      	str	r3, [r7, #12]

			// Ensure PWM values are within valid ranges
			if (left_right_pwm > FORWARD_MAX)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800159c:	4293      	cmp	r3, r2
 800159e:	d902      	bls.n	80015a6 <handle_rotation+0x116>
				left_right_pwm = FORWARD_MAX;
 80015a0:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 80015a4:	60fb      	str	r3, [r7, #12]
			if (left_right_pwm < FORWARD_SLOW)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f640 42b1 	movw	r2, #3249	@ 0xcb1
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d81d      	bhi.n	80015ec <handle_rotation+0x15c>
				left_right_pwm = FORWARD_SLOW;
 80015b0:	f640 43b2 	movw	r3, #3250	@ 0xcb2
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e019      	b.n	80015ec <handle_rotation+0x15c>
		} else {
			// Rotate left: Both motors move backward speed
			left_right_pwm = BACKWARD_SLOW - calculated_correction;
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <handle_rotation+0x1c4>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800165c <handle_rotation+0x1cc>
 80015c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ca:	ee17 3a90 	vmov	r3, s15
 80015ce:	60fb      	str	r3, [r7, #12]

			// Ensure PWM values are within valid ranges
			if (left_right_pwm < BACKWARD_MAX)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80015d6:	d202      	bcs.n	80015de <handle_rotation+0x14e>
				left_right_pwm = BACKWARD_MAX;
 80015d8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80015dc:	60fb      	str	r3, [r7, #12]
			if (left_right_pwm > BACKWARD_SLOW)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 80015e4:	d902      	bls.n	80015ec <handle_rotation+0x15c>
				left_right_pwm = BACKWARD_SLOW;
 80015e6:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80015ea:	60fb      	str	r3, [r7, #12]
		}

		angle_error = 0.0f; // reset angle error for better performance monitoring over udp as only handle_movement angle_error should be captured
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <handle_rotation+0x1ac>)
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

		set_servo_pwm(&servo_left, left_right_pwm);
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	481a      	ldr	r0, [pc, #104]	@ (8001660 <handle_rotation+0x1d0>)
 80015f8:	f000 fc04 	bl	8001e04 <set_servo_pwm>
		set_servo_pwm(&servo_right, left_right_pwm);
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	4819      	ldr	r0, [pc, #100]	@ (8001664 <handle_rotation+0x1d4>)
 8001600:	f000 fc00 	bl	8001e04 <set_servo_pwm>
		// Stop rotating and switch to moving state
		set_servo_pwm(&servo_left, SERVO_STOP);
		set_servo_pwm(&servo_right, SERVO_STOP);
		current_state = MOVING;
	}
}
 8001604:	e00c      	b.n	8001620 <handle_rotation+0x190>
		set_servo_pwm(&servo_left, SERVO_STOP);
 8001606:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800160a:	4815      	ldr	r0, [pc, #84]	@ (8001660 <handle_rotation+0x1d0>)
 800160c:	f000 fbfa 	bl	8001e04 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001610:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001614:	4813      	ldr	r0, [pc, #76]	@ (8001664 <handle_rotation+0x1d4>)
 8001616:	f000 fbf5 	bl	8001e04 <set_servo_pwm>
		current_state = MOVING;
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <handle_rotation+0x1d8>)
 800161c:	2202      	movs	r2, #2
 800161e:	701a      	strb	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000400 	.word	0x20000400
 800162c:	20000404 	.word	0x20000404
 8001630:	2000040c 	.word	0x2000040c
 8001634:	20000410 	.word	0x20000410
 8001638:	20000408 	.word	0x20000408
 800163c:	2000073c 	.word	0x2000073c
 8001640:	43340000 	.word	0x43340000
 8001644:	43b40000 	.word	0x43b40000
 8001648:	c3340000 	.word	0xc3340000
 800164c:	00000000 	.word	0x00000000
 8001650:	20000018 	.word	0x20000018
 8001654:	20000740 	.word	0x20000740
 8001658:	454b2000 	.word	0x454b2000
 800165c:	452f0000 	.word	0x452f0000
 8001660:	20000000 	.word	0x20000000
 8001664:	2000000c 	.word	0x2000000c
 8001668:	200002f0 	.word	0x200002f0

0800166c <handle_movement>:

/**
 * @brief Handle the movement of the robot towards the target position.
 */
void handle_movement() {
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
	target_distance = distance_to_target(current_x, current_y, target_x,
 8001672:	4b9b      	ldr	r3, [pc, #620]	@ (80018e0 <handle_movement+0x274>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	4b9a      	ldr	r3, [pc, #616]	@ (80018e4 <handle_movement+0x278>)
 800167a:	ed93 7a00 	vldr	s14, [r3]
 800167e:	4b9a      	ldr	r3, [pc, #616]	@ (80018e8 <handle_movement+0x27c>)
 8001680:	edd3 6a00 	vldr	s13, [r3]
 8001684:	4b99      	ldr	r3, [pc, #612]	@ (80018ec <handle_movement+0x280>)
 8001686:	ed93 6a00 	vldr	s12, [r3]
 800168a:	eef0 1a46 	vmov.f32	s3, s12
 800168e:	eeb0 1a66 	vmov.f32	s2, s13
 8001692:	eef0 0a47 	vmov.f32	s1, s14
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	f000 fa1b 	bl	8001ad4 <distance_to_target>
 800169e:	eef0 7a40 	vmov.f32	s15, s0
 80016a2:	4b93      	ldr	r3, [pc, #588]	@ (80018f0 <handle_movement+0x284>)
 80016a4:	edc3 7a00 	vstr	s15, [r3]
			target_y);
	float target_angle = calculate_angle(current_x, current_y, target_x,
 80016a8:	4b8d      	ldr	r3, [pc, #564]	@ (80018e0 <handle_movement+0x274>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	4b8d      	ldr	r3, [pc, #564]	@ (80018e4 <handle_movement+0x278>)
 80016b0:	ed93 7a00 	vldr	s14, [r3]
 80016b4:	4b8c      	ldr	r3, [pc, #560]	@ (80018e8 <handle_movement+0x27c>)
 80016b6:	edd3 6a00 	vldr	s13, [r3]
 80016ba:	4b8c      	ldr	r3, [pc, #560]	@ (80018ec <handle_movement+0x280>)
 80016bc:	ed93 6a00 	vldr	s12, [r3]
 80016c0:	eef0 1a46 	vmov.f32	s3, s12
 80016c4:	eeb0 1a66 	vmov.f32	s2, s13
 80016c8:	eef0 0a47 	vmov.f32	s1, s14
 80016cc:	eeb0 0a67 	vmov.f32	s0, s15
 80016d0:	f000 f93e 	bl	8001950 <calculate_angle>
 80016d4:	ed87 0a01 	vstr	s0, [r7, #4]
			target_y);
	angle_error = target_angle - current_yaw;
 80016d8:	4b86      	ldr	r3, [pc, #536]	@ (80018f4 <handle_movement+0x288>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ed97 7a01 	vldr	s14, [r7, #4]
 80016e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e6:	4b84      	ldr	r3, [pc, #528]	@ (80018f8 <handle_movement+0x28c>)
 80016e8:	edc3 7a00 	vstr	s15, [r3]

	// Normalize the angle error to [-180, 180]
	if (angle_error > 180.0f) {
 80016ec:	4b82      	ldr	r3, [pc, #520]	@ (80018f8 <handle_movement+0x28c>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80018fc <handle_movement+0x290>
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	dd0a      	ble.n	8001716 <handle_movement+0xaa>
		angle_error -= 360.0f;
 8001700:	4b7d      	ldr	r3, [pc, #500]	@ (80018f8 <handle_movement+0x28c>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001900 <handle_movement+0x294>
 800170a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800170e:	4b7a      	ldr	r3, [pc, #488]	@ (80018f8 <handle_movement+0x28c>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
 8001714:	e013      	b.n	800173e <handle_movement+0xd2>
	} else if (angle_error < -180.0f) {
 8001716:	4b78      	ldr	r3, [pc, #480]	@ (80018f8 <handle_movement+0x28c>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001904 <handle_movement+0x298>
 8001720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	d509      	bpl.n	800173e <handle_movement+0xd2>
		angle_error += 360.0f;
 800172a:	4b73      	ldr	r3, [pc, #460]	@ (80018f8 <handle_movement+0x28c>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001900 <handle_movement+0x294>
 8001734:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001738:	4b6f      	ldr	r3, [pc, #444]	@ (80018f8 <handle_movement+0x28c>)
 800173a:	edc3 7a00 	vstr	s15, [r3]
	}

	if (target_distance > DISTANCE_THRESHOLD_MOVE_TO_STOP) {
 800173e:	4b6c      	ldr	r3, [pc, #432]	@ (80018f0 <handle_movement+0x284>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001908 <handle_movement+0x29c>
 8001748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	f340 808a 	ble.w	8001868 <handle_movement+0x1fc>
		if (fabsf(angle_error) > ANGLE_THRESHOLD_MOVE_TO_ROTATE) {
 8001754:	4b68      	ldr	r3, [pc, #416]	@ (80018f8 <handle_movement+0x28c>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	eef0 7ae7 	vabs.f32	s15, s15
 800175e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800190c <handle_movement+0x2a0>
 8001762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	dd0d      	ble.n	8001788 <handle_movement+0x11c>
			// If the angle error is too large, switch to rotating state
			set_servo_pwm(&servo_left, SERVO_STOP);
 800176c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001770:	4867      	ldr	r0, [pc, #412]	@ (8001910 <handle_movement+0x2a4>)
 8001772:	f000 fb47 	bl	8001e04 <set_servo_pwm>
			set_servo_pwm(&servo_right, SERVO_STOP);
 8001776:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800177a:	4866      	ldr	r0, [pc, #408]	@ (8001914 <handle_movement+0x2a8>)
 800177c:	f000 fb42 	bl	8001e04 <set_servo_pwm>
			current_state = ROTATING;
 8001780:	4b65      	ldr	r3, [pc, #404]	@ (8001918 <handle_movement+0x2ac>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
			return;
 8001786:	e0a8      	b.n	80018da <handle_movement+0x26e>
		}

		// Normalize the angle error
		float normalized_angle_error = angle_error
				/ ANGLE_THRESHOLD_MOVE_TO_ROTATE;
 8001788:	4b5b      	ldr	r3, [pc, #364]	@ (80018f8 <handle_movement+0x28c>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
		float normalized_angle_error = angle_error
 800178e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800190c <handle_movement+0x2a0>
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	edc7 7a00 	vstr	s15, [r7]

		// PID-based correction for forward movement
		calculated_correction = pid_controller(&movement_pid, 0.0f,
 800179a:	edd7 0a00 	vldr	s1, [r7]
 800179e:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 800191c <handle_movement+0x2b0>
 80017a2:	485f      	ldr	r0, [pc, #380]	@ (8001920 <handle_movement+0x2b4>)
 80017a4:	f7ff fde4 	bl	8001370 <pid_controller>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001924 <handle_movement+0x2b8>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]
				normalized_angle_error);

		// Base speeds for both motors
		uint32_t left_pwm = BASE_SPEED_FORWARD;
 80017b2:	f241 034f 	movw	r3, #4175	@ 0x104f
 80017b6:	60fb      	str	r3, [r7, #12]
		uint32_t right_pwm = BASE_SPEED_BACKWARD;
 80017b8:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80017bc:	60bb      	str	r3, [r7, #8]

		// Limit the correction to prevent excessive adjustments
		if (calculated_correction > MAX_CORRECTION)
 80017be:	4b59      	ldr	r3, [pc, #356]	@ (8001924 <handle_movement+0x2b8>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001928 <handle_movement+0x2bc>
 80017c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	dd02      	ble.n	80017d8 <handle_movement+0x16c>
			calculated_correction = MAX_CORRECTION;
 80017d2:	4b54      	ldr	r3, [pc, #336]	@ (8001924 <handle_movement+0x2b8>)
 80017d4:	4a55      	ldr	r2, [pc, #340]	@ (800192c <handle_movement+0x2c0>)
 80017d6:	601a      	str	r2, [r3, #0]
		if (calculated_correction < -MAX_CORRECTION)
 80017d8:	4b52      	ldr	r3, [pc, #328]	@ (8001924 <handle_movement+0x2b8>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001930 <handle_movement+0x2c4>
 80017e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	d502      	bpl.n	80017f2 <handle_movement+0x186>
			calculated_correction = -MAX_CORRECTION;
 80017ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001924 <handle_movement+0x2b8>)
 80017ee:	4a51      	ldr	r2, [pc, #324]	@ (8001934 <handle_movement+0x2c8>)
 80017f0:	601a      	str	r2, [r3, #0]

		// Adjust PWM values based on the correction
		left_pwm += (int32_t) (calculated_correction); // Left motor PWM increases with speed
 80017f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001924 <handle_movement+0x2b8>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fc:	ee17 2a90 	vmov	r2, s15
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
		right_pwm -= (int32_t) (calculated_correction); // Right motor PWM decreases with speed
 8001806:	4b47      	ldr	r3, [pc, #284]	@ (8001924 <handle_movement+0x2b8>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001810:	ee17 2a90 	vmov	r2, s15
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	60bb      	str	r3, [r7, #8]

		// Ensure PWM values are within valid ranges
		if (left_pwm > FORWARD_MAX)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8001820:	4293      	cmp	r3, r2
 8001822:	d902      	bls.n	800182a <handle_movement+0x1be>
			left_pwm = FORWARD_MAX;
 8001824:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8001828:	60fb      	str	r3, [r7, #12]
		if (left_pwm < FORWARD_SLOW)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f640 42b1 	movw	r2, #3249	@ 0xcb1
 8001830:	4293      	cmp	r3, r2
 8001832:	d802      	bhi.n	800183a <handle_movement+0x1ce>
			left_pwm = FORWARD_SLOW;
 8001834:	f640 43b2 	movw	r3, #3250	@ 0xcb2
 8001838:	60fb      	str	r3, [r7, #12]

		if (right_pwm < BACKWARD_MAX)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001840:	d202      	bcs.n	8001848 <handle_movement+0x1dc>
			right_pwm = BACKWARD_MAX;
 8001842:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001846:	60bb      	str	r3, [r7, #8]
		if (right_pwm > BACKWARD_SLOW)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800184e:	d902      	bls.n	8001856 <handle_movement+0x1ea>
			right_pwm = BACKWARD_SLOW;
 8001850:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001854:	60bb      	str	r3, [r7, #8]

		set_servo_pwm(&servo_left, left_pwm);
 8001856:	68f9      	ldr	r1, [r7, #12]
 8001858:	482d      	ldr	r0, [pc, #180]	@ (8001910 <handle_movement+0x2a4>)
 800185a:	f000 fad3 	bl	8001e04 <set_servo_pwm>
		set_servo_pwm(&servo_right, right_pwm);
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	482c      	ldr	r0, [pc, #176]	@ (8001914 <handle_movement+0x2a8>)
 8001862:	f000 facf 	bl	8001e04 <set_servo_pwm>
 8001866:	e038      	b.n	80018da <handle_movement+0x26e>
	} else {
		// Stop the robot when it reaches the target
		set_servo_pwm(&servo_left, SERVO_STOP);
 8001868:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800186c:	4828      	ldr	r0, [pc, #160]	@ (8001910 <handle_movement+0x2a4>)
 800186e:	f000 fac9 	bl	8001e04 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001872:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001876:	4827      	ldr	r0, [pc, #156]	@ (8001914 <handle_movement+0x2a8>)
 8001878:	f000 fac4 	bl	8001e04 <set_servo_pwm>

		// Hysteresis for distance threshold
		if (target_distance < DISTANCE_THRESHOLD_STOP_TO_MOVE) {
 800187c:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <handle_movement+0x284>)
 800187e:	edd3 7a00 	vldr	s15, [r3]
 8001882:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001938 <handle_movement+0x2cc>
 8001886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d524      	bpl.n	80018da <handle_movement+0x26e>
			currentTargetIndex++;
 8001890:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <handle_movement+0x2d0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a29      	ldr	r2, [pc, #164]	@ (800193c <handle_movement+0x2d0>)
 8001898:	6013      	str	r3, [r2, #0]
			if (currentTargetIndex < totalCoords) {
 800189a:	4b28      	ldr	r3, [pc, #160]	@ (800193c <handle_movement+0x2d0>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b28      	ldr	r3, [pc, #160]	@ (8001940 <handle_movement+0x2d4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	da13      	bge.n	80018ce <handle_movement+0x262>
				target_x = xCoords[currentTargetIndex];
 80018a6:	4b25      	ldr	r3, [pc, #148]	@ (800193c <handle_movement+0x2d0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a26      	ldr	r2, [pc, #152]	@ (8001944 <handle_movement+0x2d8>)
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <handle_movement+0x27c>)
 80018b4:	6013      	str	r3, [r2, #0]
				target_y = yCoords[currentTargetIndex];
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <handle_movement+0x2d0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a23      	ldr	r2, [pc, #140]	@ (8001948 <handle_movement+0x2dc>)
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <handle_movement+0x280>)
 80018c4:	6013      	str	r3, [r2, #0]
				current_state = ROTATING;
 80018c6:	4b14      	ldr	r3, [pc, #80]	@ (8001918 <handle_movement+0x2ac>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e005      	b.n	80018da <handle_movement+0x26e>
			} else {
				current_state = IDLE;
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <handle_movement+0x2ac>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
				path_set = 0;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	@ (800194c <handle_movement+0x2e0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000400 	.word	0x20000400
 80018e4:	20000404 	.word	0x20000404
 80018e8:	2000040c 	.word	0x2000040c
 80018ec:	20000410 	.word	0x20000410
 80018f0:	20000744 	.word	0x20000744
 80018f4:	20000408 	.word	0x20000408
 80018f8:	2000073c 	.word	0x2000073c
 80018fc:	43340000 	.word	0x43340000
 8001900:	43b40000 	.word	0x43b40000
 8001904:	c3340000 	.word	0xc3340000
 8001908:	3da3d70a 	.word	0x3da3d70a
 800190c:	42200000 	.word	0x42200000
 8001910:	20000000 	.word	0x20000000
 8001914:	2000000c 	.word	0x2000000c
 8001918:	200002f0 	.word	0x200002f0
 800191c:	00000000 	.word	0x00000000
 8001920:	20000034 	.word	0x20000034
 8001924:	20000740 	.word	0x20000740
 8001928:	44610000 	.word	0x44610000
 800192c:	44610000 	.word	0x44610000
 8001930:	c4610000 	.word	0xc4610000
 8001934:	c4610000 	.word	0xc4610000
 8001938:	3de147ae 	.word	0x3de147ae
 800193c:	20000738 	.word	0x20000738
 8001940:	20000734 	.word	0x20000734
 8001944:	20000414 	.word	0x20000414
 8001948:	200005a4 	.word	0x200005a4
 800194c:	2000074c 	.word	0x2000074c

08001950 <calculate_angle>:
 * @param y Current y position.
 * @param x_next Target x position.
 * @param y_next Target y position.
 * @return Angle in degrees.
 */
float calculate_angle(float x, float y, float x_next, float y_next) {
 8001950:	b5b0      	push	{r4, r5, r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	ed87 0a03 	vstr	s0, [r7, #12]
 800195a:	edc7 0a02 	vstr	s1, [r7, #8]
 800195e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001962:	edc7 1a00 	vstr	s3, [r7]
	// Calculation of the scalar product
	float dot_product = -y * (y_next - y);
 8001966:	edd7 7a02 	vldr	s15, [r7, #8]
 800196a:	eeb1 7a67 	vneg.f32	s14, s15
 800196e:	edd7 6a00 	vldr	s13, [r7]
 8001972:	edd7 7a02 	vldr	s15, [r7, #8]
 8001976:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	edc7 7a07 	vstr	s15, [r7, #28]

	// Length of vectors
	float length_v1 = fabsf(y); // Since v1 is the length of (0, -y), the length corresponds to |y|
 8001982:	edd7 7a02 	vldr	s15, [r7, #8]
 8001986:	eef0 7ae7 	vabs.f32	s15, s15
 800198a:	edc7 7a06 	vstr	s15, [r7, #24]
	float length_v2 = (float) sqrt(pow(x_next - x, 2) + pow(y_next - y, 2));
 800198e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001992:	edd7 7a03 	vldr	s15, [r7, #12]
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	ee17 0a90 	vmov	r0, s15
 800199e:	f7fe fddb 	bl	8000558 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8001ac0 <calculate_angle+0x170>
 80019aa:	ec43 2b10 	vmov	d0, r2, r3
 80019ae:	f009 fa9b 	bl	800aee8 <pow>
 80019b2:	ec55 4b10 	vmov	r4, r5, d0
 80019b6:	ed97 7a00 	vldr	s14, [r7]
 80019ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80019be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c2:	ee17 0a90 	vmov	r0, s15
 80019c6:	f7fe fdc7 	bl	8000558 <__aeabi_f2d>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001ac0 <calculate_angle+0x170>
 80019d2:	ec43 2b10 	vmov	d0, r2, r3
 80019d6:	f009 fa87 	bl	800aee8 <pow>
 80019da:	ec53 2b10 	vmov	r2, r3, d0
 80019de:	4620      	mov	r0, r4
 80019e0:	4629      	mov	r1, r5
 80019e2:	f7fe fc5b 	bl	800029c <__adddf3>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	ec43 2b17 	vmov	d7, r2, r3
 80019ee:	eeb0 0a47 	vmov.f32	s0, s14
 80019f2:	eef0 0a67 	vmov.f32	s1, s15
 80019f6:	f009 fae7 	bl	800afc8 <sqrt>
 80019fa:	ec53 2b10 	vmov	r2, r3, d0
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f8f9 	bl	8000bf8 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	617b      	str	r3, [r7, #20]

	// Calculating the cosine of the angle
	float cos_theta = dot_product / (length_v1 * length_v2);
 8001a0a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a1e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Clamp cos_theta to [-1, 1] to avoid NaNs due to floating point errors
	if (cos_theta > 1.0f)
 8001a22:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	dd02      	ble.n	8001a3a <calculate_angle+0xea>
		cos_theta = 1.0f;
 8001a34:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
	if (cos_theta < -1.0f)
 8001a3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a3e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	d501      	bpl.n	8001a50 <calculate_angle+0x100>
		cos_theta = -1.0f;
 8001a4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <calculate_angle+0x180>)
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24

	// Calculation of the angle in radians and conversion to degrees
	float theta_rad = (float) acos(cos_theta);
 8001a50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a52:	f7fe fd81 	bl	8000558 <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	ec43 2b10 	vmov	d0, r2, r3
 8001a5e:	f009 fa0f 	bl	800ae80 <acos>
 8001a62:	ec53 2b10 	vmov	r2, r3, d0
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8c5 	bl	8000bf8 <__aeabi_d2f>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	613b      	str	r3, [r7, #16]
	float theta_deg = (float) (theta_rad * (180.0 / M_PI));
 8001a72:	6938      	ldr	r0, [r7, #16]
 8001a74:	f7fe fd70 	bl	8000558 <__aeabi_f2d>
 8001a78:	a313      	add	r3, pc, #76	@ (adr r3, 8001ac8 <calculate_angle+0x178>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe fdc3 	bl	8000608 <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7ff f8b5 	bl	8000bf8 <__aeabi_d2f>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	623b      	str	r3, [r7, #32]

	// Determining the direction
	if (x_next < x) {
 8001a92:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa2:	d505      	bpl.n	8001ab0 <calculate_angle+0x160>
		theta_deg = -theta_deg; // Negative angle if x_next is to the left of x
 8001aa4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001aa8:	eef1 7a67 	vneg.f32	s15, s15
 8001aac:	edc7 7a08 	vstr	s15, [r7, #32]
	}

	return theta_deg;
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	ee07 3a90 	vmov	s15, r3
}
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	3728      	adds	r7, #40	@ 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac0:	00000000 	.word	0x00000000
 8001ac4:	40000000 	.word	0x40000000
 8001ac8:	1a63c1f8 	.word	0x1a63c1f8
 8001acc:	404ca5dc 	.word	0x404ca5dc
 8001ad0:	bf800000 	.word	0xbf800000

08001ad4 <distance_to_target>:
 * @param target_x Target x position.
 * @param target_y Target y position.
 * @return Distance to target.
 */
float distance_to_target(float current_x, float current_y, float target_x,
		float target_y) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	ed2d 8b02 	vpush	{d8}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ae2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ae6:	ed87 1a01 	vstr	s2, [r7, #4]
 8001aea:	edc7 1a00 	vstr	s3, [r7]
	return sqrtf(
			powf(target_x - current_x, 2.0f) + powf(target_y - current_y, 2.0f));
 8001aee:	ed97 7a01 	vldr	s14, [r7, #4]
 8001af2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001afa:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	f009 fa95 	bl	800b030 <powf>
 8001b06:	eeb0 8a40 	vmov.f32	s16, s0
 8001b0a:	ed97 7a00 	vldr	s14, [r7]
 8001b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b16:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1e:	f009 fa87 	bl	800b030 <powf>
 8001b22:	eef0 7a40 	vmov.f32	s15, s0
	return sqrtf(
 8001b26:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2e:	f009 fad7 	bl	800b0e0 <sqrtf>
 8001b32:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	ecbd 8b02 	vpop	{d8}
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <execute_command>:

/**
 * @brief Execute received command from ESP8266.
 * @param cmd The command string.
 */
void execute_command(const char *cmd) {
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8001b4a:	af02      	add	r7, sp, #8
 8001b4c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b50:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b54:	6018      	str	r0, [r3, #0]
	if (strncmp(cmd, "STOP", 4) == 0) {
 8001b56:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b5a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b5e:	2204      	movs	r2, #4
 8001b60:	4994      	ldr	r1, [pc, #592]	@ (8001db4 <execute_command+0x270>)
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	f005 ff6b 	bl	8007a3e <strncmp>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d110      	bne.n	8001b90 <execute_command+0x4c>
		set_servo_pwm(&servo_left, SERVO_STOP);
 8001b6e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001b72:	4891      	ldr	r0, [pc, #580]	@ (8001db8 <execute_command+0x274>)
 8001b74:	f000 f946 	bl	8001e04 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001b78:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001b7c:	488f      	ldr	r0, [pc, #572]	@ (8001dbc <execute_command+0x278>)
 8001b7e:	f000 f941 	bl	8001e04 <set_servo_pwm>
		path_set = 0; 								// Set the path flag
 8001b82:	4b8f      	ldr	r3, [pc, #572]	@ (8001dc0 <execute_command+0x27c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
		current_state = IDLE;
 8001b88:	4b8e      	ldr	r3, [pc, #568]	@ (8001dc4 <execute_command+0x280>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e10c      	b.n	8001daa <execute_command+0x266>
	} else if (strncmp(cmd, "START_SPINNING", 14) == 0) {
 8001b90:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b94:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b98:	220e      	movs	r2, #14
 8001b9a:	498b      	ldr	r1, [pc, #556]	@ (8001dc8 <execute_command+0x284>)
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	f005 ff4e 	bl	8007a3e <strncmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d110      	bne.n	8001bca <execute_command+0x86>
		set_servo_pwm(&servo_left, FORWARD_MAX);
 8001ba8:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 8001bac:	4882      	ldr	r0, [pc, #520]	@ (8001db8 <execute_command+0x274>)
 8001bae:	f000 f929 	bl	8001e04 <set_servo_pwm>
		set_servo_pwm(&servo_right, FORWARD_MAX);
 8001bb2:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 8001bb6:	4881      	ldr	r0, [pc, #516]	@ (8001dbc <execute_command+0x278>)
 8001bb8:	f000 f924 	bl	8001e04 <set_servo_pwm>
		path_set = 0; 								// Set the path flag
 8001bbc:	4b80      	ldr	r3, [pc, #512]	@ (8001dc0 <execute_command+0x27c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
		current_state = SPINNING;
 8001bc2:	4b80      	ldr	r3, [pc, #512]	@ (8001dc4 <execute_command+0x280>)
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	701a      	strb	r2, [r3, #0]
 8001bc8:	e0ef      	b.n	8001daa <execute_command+0x266>
	} else if (strncmp(cmd, "LOCATION_UPDATE", 15) == 0) {
 8001bca:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001bce:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	497d      	ldr	r1, [pc, #500]	@ (8001dcc <execute_command+0x288>)
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	f005 ff31 	bl	8007a3e <strncmp>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d12c      	bne.n	8001c3c <execute_command+0xf8>
		sscanf(cmd + 16, "%f;%f;%f", &current_x, &current_y, &current_yaw);
 8001be2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001be6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f103 0010 	add.w	r0, r3, #16
 8001bf0:	4b77      	ldr	r3, [pc, #476]	@ (8001dd0 <execute_command+0x28c>)
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4b77      	ldr	r3, [pc, #476]	@ (8001dd4 <execute_command+0x290>)
 8001bf6:	4a78      	ldr	r2, [pc, #480]	@ (8001dd8 <execute_command+0x294>)
 8001bf8:	4978      	ldr	r1, [pc, #480]	@ (8001ddc <execute_command+0x298>)
 8001bfa:	f005 fea9 	bl	8007950 <siscanf>

		if (path_set && current_state == IDLE) {
 8001bfe:	4b70      	ldr	r3, [pc, #448]	@ (8001dc0 <execute_command+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80d1 	beq.w	8001daa <execute_command+0x266>
 8001c08:	4b6e      	ldr	r3, [pc, #440]	@ (8001dc4 <execute_command+0x280>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 80cb 	bne.w	8001daa <execute_command+0x266>
			target_x = xCoords[currentTargetIndex];
 8001c14:	4b72      	ldr	r3, [pc, #456]	@ (8001de0 <execute_command+0x29c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a72      	ldr	r2, [pc, #456]	@ (8001de4 <execute_command+0x2a0>)
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a71      	ldr	r2, [pc, #452]	@ (8001de8 <execute_command+0x2a4>)
 8001c22:	6013      	str	r3, [r2, #0]
			target_y = yCoords[currentTargetIndex];
 8001c24:	4b6e      	ldr	r3, [pc, #440]	@ (8001de0 <execute_command+0x29c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a70      	ldr	r2, [pc, #448]	@ (8001dec <execute_command+0x2a8>)
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a6f      	ldr	r2, [pc, #444]	@ (8001df0 <execute_command+0x2ac>)
 8001c32:	6013      	str	r3, [r2, #0]
			current_state = ROTATING;
 8001c34:	4b63      	ldr	r3, [pc, #396]	@ (8001dc4 <execute_command+0x280>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e0b6      	b.n	8001daa <execute_command+0x266>
		}
	} else if (strncmp(cmd, "PATH_UPDATE", 11) == 0) {
 8001c3c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001c40:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001c44:	220b      	movs	r2, #11
 8001c46:	496b      	ldr	r1, [pc, #428]	@ (8001df4 <execute_command+0x2b0>)
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	f005 fef8 	bl	8007a3e <strncmp>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 80aa 	bne.w	8001daa <execute_command+0x266>
		memset(xCoords, 0, sizeof(xCoords));
 8001c56:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4861      	ldr	r0, [pc, #388]	@ (8001de4 <execute_command+0x2a0>)
 8001c5e:	f005 fee6 	bl	8007a2e <memset>
		memset(yCoords, 0, sizeof(yCoords));
 8001c62:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001c66:	2100      	movs	r1, #0
 8001c68:	4860      	ldr	r0, [pc, #384]	@ (8001dec <execute_command+0x2a8>)
 8001c6a:	f005 fee0 	bl	8007a2e <memset>
		totalCoords = 0;
 8001c6e:	4b62      	ldr	r3, [pc, #392]	@ (8001df8 <execute_command+0x2b4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
		currentTargetIndex = 0;
 8001c74:	4b5a      	ldr	r3, [pc, #360]	@ (8001de0 <execute_command+0x29c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

		// Extract x and y coordinates and the amount of coordinates
		char x_values[256];  // Buffer for x values
		char y_values[256];  // Buffer for y values
		int amount_of_coordinates = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

		// Extract the x values, y values, and the number of coordinates
		sscanf(cmd + 12, "%[^;];%[^;];%d", x_values, y_values,
 8001c80:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001c84:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f103 000c 	add.w	r0, r3, #12
 8001c8e:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001c92:	f107 020c 	add.w	r2, r7, #12
 8001c96:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4957      	ldr	r1, [pc, #348]	@ (8001dfc <execute_command+0x2b8>)
 8001ca0:	f005 fe56 	bl	8007950 <siscanf>
				&amount_of_coordinates);

		amount_of_coordinates = amount_of_coordinates / 2;
 8001ca4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001ca8:	0fda      	lsrs	r2, r3, #31
 8001caa:	4413      	add	r3, r2
 8001cac:	105b      	asrs	r3, r3, #1
 8001cae:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

		// Now, x_values contains "x0:x1:x2:...", y_values contains "y0:y1:y2:...", and amount_of_coordinates is an integer
		// Ensure that the number of coordinates does not exceed MAX_COORDS
		totalCoords =
				(amount_of_coordinates > MAX_COORDS) ?
				MAX_COORDS :
 8001cb2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001cb6:	2b64      	cmp	r3, #100	@ 0x64
 8001cb8:	bfa8      	it	ge
 8001cba:	2364      	movge	r3, #100	@ 0x64
		totalCoords =
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	@ (8001df8 <execute_command+0x2b4>)
 8001cbe:	6013      	str	r3, [r2, #0]
														amount_of_coordinates;

		char *token;
		int index = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

		// Split x values by ':' and store them in an array
		token = strtok(x_values, ":");
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	494d      	ldr	r1, [pc, #308]	@ (8001e00 <execute_command+0x2bc>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f005 fec9 	bl	8007a64 <strtok>
 8001cd2:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001cd6:	e017      	b.n	8001d08 <execute_command+0x1c4>
			xCoords[index++] = atof(token);
 8001cd8:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001cdc:	f004 f89c 	bl	8005e18 <atof>
 8001ce0:	ec51 0b10 	vmov	r0, r1, d0
 8001ce4:	f8d7 4210 	ldr.w	r4, [r7, #528]	@ 0x210
 8001ce8:	1c63      	adds	r3, r4, #1
 8001cea:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001cee:	f7fe ff83 	bl	8000bf8 <__aeabi_d2f>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	493b      	ldr	r1, [pc, #236]	@ (8001de4 <execute_command+0x2a0>)
 8001cf6:	00a3      	lsls	r3, r4, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	601a      	str	r2, [r3, #0]
			token = strtok(NULL, ":");
 8001cfc:	4940      	ldr	r1, [pc, #256]	@ (8001e00 <execute_command+0x2bc>)
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f005 feb0 	bl	8007a64 <strtok>
 8001d04:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001d08:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <execute_command+0x1d8>
 8001d10:	4b39      	ldr	r3, [pc, #228]	@ (8001df8 <execute_command+0x2b4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dbdd      	blt.n	8001cd8 <execute_command+0x194>
		}
		if (index != totalCoords) {
 8001d1c:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <execute_command+0x2b4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d13d      	bne.n	8001da4 <execute_command+0x260>
			return;
		}

		// Split y values by ':' and store them in an array
		index = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		token = strtok(y_values, ":");
 8001d2e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001d32:	4933      	ldr	r1, [pc, #204]	@ (8001e00 <execute_command+0x2bc>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f005 fe95 	bl	8007a64 <strtok>
 8001d3a:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001d3e:	e017      	b.n	8001d70 <execute_command+0x22c>
			yCoords[index++] = atof(token);
 8001d40:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001d44:	f004 f868 	bl	8005e18 <atof>
 8001d48:	ec51 0b10 	vmov	r0, r1, d0
 8001d4c:	f8d7 4210 	ldr.w	r4, [r7, #528]	@ 0x210
 8001d50:	1c63      	adds	r3, r4, #1
 8001d52:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001d56:	f7fe ff4f 	bl	8000bf8 <__aeabi_d2f>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4923      	ldr	r1, [pc, #140]	@ (8001dec <execute_command+0x2a8>)
 8001d5e:	00a3      	lsls	r3, r4, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	601a      	str	r2, [r3, #0]
			token = strtok(NULL, ":");
 8001d64:	4926      	ldr	r1, [pc, #152]	@ (8001e00 <execute_command+0x2bc>)
 8001d66:	2000      	movs	r0, #0
 8001d68:	f005 fe7c 	bl	8007a64 <strtok>
 8001d6c:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001d70:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <execute_command+0x240>
 8001d78:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <execute_command+0x2b4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbdd      	blt.n	8001d40 <execute_command+0x1fc>
		}
		if (index != totalCoords) {
 8001d84:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <execute_command+0x2b4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d10b      	bne.n	8001da8 <execute_command+0x264>
			return;
		}

		path_set = 1; 				// Set the target flag
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <execute_command+0x27c>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
		currentTargetIndex = 0;
 8001d96:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <execute_command+0x29c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
		current_state = ROTATING;  	// Start with rotating to face the target
 8001d9c:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <execute_command+0x280>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e002      	b.n	8001daa <execute_command+0x266>
			return;
 8001da4:	bf00      	nop
 8001da6:	e000      	b.n	8001daa <execute_command+0x266>
			return;
 8001da8:	bf00      	nop
	}

	//send_status_to_esp();
}
 8001daa:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	0800caa0 	.word	0x0800caa0
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	2000000c 	.word	0x2000000c
 8001dc0:	2000074c 	.word	0x2000074c
 8001dc4:	200002f0 	.word	0x200002f0
 8001dc8:	0800caa8 	.word	0x0800caa8
 8001dcc:	0800cab8 	.word	0x0800cab8
 8001dd0:	20000408 	.word	0x20000408
 8001dd4:	20000404 	.word	0x20000404
 8001dd8:	20000400 	.word	0x20000400
 8001ddc:	0800cac8 	.word	0x0800cac8
 8001de0:	20000738 	.word	0x20000738
 8001de4:	20000414 	.word	0x20000414
 8001de8:	2000040c 	.word	0x2000040c
 8001dec:	200005a4 	.word	0x200005a4
 8001df0:	20000410 	.word	0x20000410
 8001df4:	0800cad4 	.word	0x0800cad4
 8001df8:	20000734 	.word	0x20000734
 8001dfc:	0800cae0 	.word	0x0800cae0
 8001e00:	0800caf0 	.word	0x0800caf0

08001e04 <set_servo_pwm>:
/**
 * @brief Set the PWM value for a servo motor.
 * @param servo Pointer to the Servo structure.
 * @param pulse PWM value to set.
 */
void set_servo_pwm(Servo *servo, uint32_t pulse) {
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	servo->current_pwm = pulse;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d105      	bne.n	8001e28 <set_servo_pwm+0x24>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e26:	e018      	b.n	8001e5a <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d105      	bne.n	8001e3c <set_servo_pwm+0x38>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001e3a:	e00e      	b.n	8001e5a <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	d105      	bne.n	8001e50 <set_servo_pwm+0x4c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001e4e:	e004      	b.n	8001e5a <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <send_status_to_esp>:

/**
 * @brief Send the robot's status to ESP8266.
 */
void send_status_to_esp() {
 8001e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e6c:	b0d6      	sub	sp, #344	@ 0x158
 8001e6e:	af0a      	add	r7, sp, #40	@ 0x28
	// Increase buffer size to accommodate arrays
	char status_message[256];

	// Append basic status information
	int len =
			snprintf(status_message, sizeof(status_message),
 8001e70:	4b37      	ldr	r3, [pc, #220]	@ (8001f50 <send_status_to_esp+0xe8>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	469a      	mov	sl, r3
 8001e78:	4b36      	ldr	r3, [pc, #216]	@ (8001f54 <send_status_to_esp+0xec>)
 8001e7a:	681e      	ldr	r6, [r3, #0]
					"STATE:%d;CURRENT_TARGET_INDEX:%d;MOTOR_L:%lu;MOTOR_R:%lu;ANGLE_ERROR:%.4f;CALCULATED_PID:%.4f;TARGET_DISTANCE:%.4f\n",
					current_state, currentTargetIndex,
					(unsigned long) servo_left.current_pwm,
 8001e7c:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <send_status_to_esp+0xf0>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	607b      	str	r3, [r7, #4]
					(unsigned long) servo_right.current_pwm, angle_error,
 8001e82:	4b36      	ldr	r3, [pc, #216]	@ (8001f5c <send_status_to_esp+0xf4>)
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	603a      	str	r2, [r7, #0]
			snprintf(status_message, sizeof(status_message),
 8001e88:	4b35      	ldr	r3, [pc, #212]	@ (8001f60 <send_status_to_esp+0xf8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fb63 	bl	8000558 <__aeabi_f2d>
 8001e92:	4604      	mov	r4, r0
 8001e94:	460d      	mov	r5, r1
 8001e96:	4b33      	ldr	r3, [pc, #204]	@ (8001f64 <send_status_to_esp+0xfc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb5c 	bl	8000558 <__aeabi_f2d>
 8001ea0:	4680      	mov	r8, r0
 8001ea2:	4689      	mov	r9, r1
 8001ea4:	4b30      	ldr	r3, [pc, #192]	@ (8001f68 <send_status_to_esp+0x100>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb55 	bl	8000558 <__aeabi_f2d>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001eb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001eba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001ebe:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	9202      	str	r2, [sp, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	9600      	str	r6, [sp, #0]
 8001ecc:	4653      	mov	r3, sl
 8001ece:	4a27      	ldr	r2, [pc, #156]	@ (8001f6c <send_status_to_esp+0x104>)
 8001ed0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ed4:	f005 fce8 	bl	80078a8 <sniprintf>
 8001ed8:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
					calculated_correction, target_distance);

	// Ensure null-termination
	status_message[sizeof(status_message) - 1] = '\0';
 8001edc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ee0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

	// Check for truncation
	if (len >= sizeof(status_message)) {
 8001eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001eee:	2bff      	cmp	r3, #255	@ 0xff
 8001ef0:	d91a      	bls.n	8001f28 <send_status_to_esp+0xc0>
		// Handle the error: truncate, log, etc.
        char error_message[] = "ERROR: Status message truncated.\n";
 8001ef2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ef6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001efa:	4a1d      	ldr	r2, [pc, #116]	@ (8001f70 <send_status_to_esp+0x108>)
 8001efc:	461c      	mov	r4, r3
 8001efe:	4615      	mov	r5, r2
 8001f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f08:	682b      	ldr	r3, [r5, #0]
 8001f0a:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) error_message,
				strlen(error_message), HAL_MAX_DELAY);
 8001f0c:	f107 0308 	add.w	r3, r7, #8
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe f9b5 	bl	8000280 <strlen>
 8001f16:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) error_message,
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	f107 0108 	add.w	r1, r7, #8
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	4814      	ldr	r0, [pc, #80]	@ (8001f74 <send_status_to_esp+0x10c>)
 8001f24:	f002 ff72 	bl	8004e0c <HAL_UART_Transmit>
	}

	// Transmit the status message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*) status_message,
			strlen(status_message), HAL_MAX_DELAY);
 8001f28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe f9a7 	bl	8000280 <strlen>
 8001f32:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) status_message,
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	480d      	ldr	r0, [pc, #52]	@ (8001f74 <send_status_to_esp+0x10c>)
 8001f40:	f002 ff64 	bl	8004e0c <HAL_UART_Transmit>
}
 8001f44:	bf00      	nop
 8001f46:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f50:	200002f0 	.word	0x200002f0
 8001f54:	20000738 	.word	0x20000738
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	2000000c 	.word	0x2000000c
 8001f60:	2000073c 	.word	0x2000073c
 8001f64:	20000740 	.word	0x20000740
 8001f68:	20000744 	.word	0x20000744
 8001f6c:	0800caf4 	.word	0x0800caf4
 8001f70:	0800cb68 	.word	0x0800cb68
 8001f74:	200007e4 	.word	0x200007e4

08001f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7e:	f000 fc7d 	bl	800287c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f82:	f000 f87b 	bl	800207c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f86:	f7ff f8cd 	bl	8001124 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001f8a:	f000 fa25 	bl	80023d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f8e:	f000 fac3 	bl	8002518 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001f92:	f000 fbcf 	bl	8002734 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001f96:	f7ff f93b 	bl	8001210 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001f9a:	f7ff f82b 	bl	8000ff4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fa4:	482b      	ldr	r0, [pc, #172]	@ (8002054 <main+0xdc>)
 8001fa6:	f001 fa89 	bl	80034bc <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001faa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001fae:	f000 fcd7 	bl	8002960 <HAL_Delay>
	 }
	 Gz_mean /= CALIB;
	 Ax_mean /= CALIB;
	 Ay_mean /= CALIB;*/

	HAL_TIM_PWM_Init(&htim1);
 8001fb2:	4829      	ldr	r0, [pc, #164]	@ (8002058 <main+0xe0>)
 8001fb4:	f002 f8ae 	bl	8004114 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8001fb8:	4828      	ldr	r0, [pc, #160]	@ (800205c <main+0xe4>)
 8001fba:	f002 f8ab 	bl	8004114 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4825      	ldr	r0, [pc, #148]	@ (8002058 <main+0xe0>)
 8001fc2:	f002 f901 	bl	80041c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001fc6:	2108      	movs	r1, #8
 8001fc8:	4824      	ldr	r0, [pc, #144]	@ (800205c <main+0xe4>)
 8001fca:	f002 f8fd 	bl	80041c8 <HAL_TIM_PWM_Start>
	TIM1->CR1 = 0x01;
 8001fce:	4b24      	ldr	r3, [pc, #144]	@ (8002060 <main+0xe8>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
	TIM2->CR1 = 0x01;
 8001fd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer)); // interrupt based
 8001fdc:	2201      	movs	r2, #1
 8001fde:	4921      	ldr	r1, [pc, #132]	@ (8002064 <main+0xec>)
 8001fe0:	4821      	ldr	r0, [pc, #132]	@ (8002068 <main+0xf0>)
 8001fe2:	f002 ff9e 	bl	8004f22 <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fec:	4819      	ldr	r0, [pc, #100]	@ (8002054 <main+0xdc>)
 8001fee:	f001 fa65 	bl	80034bc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (rx_complete) {
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <main+0xf4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <main+0x8e>
			execute_command(rx_buffer); // Process the command
 8001ffa:	481d      	ldr	r0, [pc, #116]	@ (8002070 <main+0xf8>)
 8001ffc:	f7ff fda2 	bl	8001b44 <execute_command>
			rx_complete = 0; // Reset the completion flag
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <main+0xf4>)
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
		}
		switch (current_state) {
 8002006:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <main+0xfc>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b03      	cmp	r3, #3
 800200e:	d00c      	beq.n	800202a <main+0xb2>
 8002010:	2b03      	cmp	r3, #3
 8002012:	dc0b      	bgt.n	800202c <main+0xb4>
 8002014:	2b01      	cmp	r3, #1
 8002016:	d002      	beq.n	800201e <main+0xa6>
 8002018:	2b02      	cmp	r3, #2
 800201a:	d003      	beq.n	8002024 <main+0xac>
 800201c:	e006      	b.n	800202c <main+0xb4>
		case ROTATING:
			handle_rotation();
 800201e:	f7ff fa37 	bl	8001490 <handle_rotation>
			break;
 8002022:	e003      	b.n	800202c <main+0xb4>
		case MOVING:
			handle_movement();
 8002024:	f7ff fb22 	bl	800166c <handle_movement>
			break;
 8002028:	e000      	b.n	800202c <main+0xb4>
		case SPINNING:
			// Spinning is already handled in execute_command
			break;
 800202a:	bf00      	nop
		case IDLE:
		default:
		}

		// Send status to ESP8266 every 500ms
		uint32_t current_time = HAL_GetTick();
 800202c:	f000 fc8c 	bl	8002948 <HAL_GetTick>
 8002030:	6078      	str	r0, [r7, #4]
		if (current_time - last_status_send_time >= 1000) {
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <main+0x100>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800203e:	d304      	bcc.n	800204a <main+0xd2>
			last_status_send_time = current_time;
 8002040:	4a0d      	ldr	r2, [pc, #52]	@ (8002078 <main+0x100>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
			send_status_to_esp();
 8002046:	f7ff ff0f 	bl	8001e68 <send_status_to_esp>
		}

		HAL_Delay(10);
 800204a:	200a      	movs	r0, #10
 800204c:	f000 fc88 	bl	8002960 <HAL_Delay>
	while (1) {
 8002050:	e7cf      	b.n	8001ff2 <main+0x7a>
 8002052:	bf00      	nop
 8002054:	40020800 	.word	0x40020800
 8002058:	20000754 	.word	0x20000754
 800205c:	2000079c 	.word	0x2000079c
 8002060:	40010000 	.word	0x40010000
 8002064:	200003fc 	.word	0x200003fc
 8002068:	200007e4 	.word	0x200007e4
 800206c:	200003f8 	.word	0x200003f8
 8002070:	200002f4 	.word	0x200002f4
 8002074:	200002f0 	.word	0x200002f0
 8002078:	20000748 	.word	0x20000748

0800207c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b094      	sub	sp, #80	@ 0x50
 8002080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	2230      	movs	r2, #48	@ 0x30
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f005 fccf 	bl	8007a2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	4b29      	ldr	r3, [pc, #164]	@ (800214c <SystemClock_Config+0xd0>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a28      	ldr	r2, [pc, #160]	@ (800214c <SystemClock_Config+0xd0>)
 80020aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b0:	4b26      	ldr	r3, [pc, #152]	@ (800214c <SystemClock_Config+0xd0>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <SystemClock_Config+0xd4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80020c8:	4a21      	ldr	r2, [pc, #132]	@ (8002150 <SystemClock_Config+0xd4>)
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <SystemClock_Config+0xd4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020dc:	2301      	movs	r3, #1
 80020de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e6:	2302      	movs	r3, #2
 80020e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80020ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 80020f0:	2314      	movs	r3, #20
 80020f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020f8:	2302      	movs	r3, #2
 80020fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80020fc:	2304      	movs	r3, #4
 80020fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	4618      	mov	r0, r3
 8002106:	f001 fb37 	bl	8003778 <HAL_RCC_OscConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002110:	f000 f820 	bl	8002154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002114:	230f      	movs	r3, #15
 8002116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002118:	2302      	movs	r3, #2
 800211a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	2102      	movs	r1, #2
 8002130:	4618      	mov	r0, r3
 8002132:	f001 fd99 	bl	8003c68 <HAL_RCC_ClockConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800213c:	f000 f80a 	bl	8002154 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002140:	f001 fe78 	bl	8003e34 <HAL_RCC_EnableCSS>
}
 8002144:	bf00      	nop
 8002146:	3750      	adds	r7, #80	@ 0x50
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	40007000 	.word	0x40007000

08002154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002158:	b672      	cpsid	i
}
 800215a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <Error_Handler+0x8>

08002160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <HAL_MspInit+0x4c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	4a0f      	ldr	r2, [pc, #60]	@ (80021ac <HAL_MspInit+0x4c>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002174:	6453      	str	r3, [r2, #68]	@ 0x44
 8002176:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <HAL_MspInit+0x4c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	603b      	str	r3, [r7, #0]
 8002186:	4b09      	ldr	r3, [pc, #36]	@ (80021ac <HAL_MspInit+0x4c>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4a08      	ldr	r2, [pc, #32]	@ (80021ac <HAL_MspInit+0x4c>)
 800218c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002190:	6413      	str	r3, [r2, #64]	@ 0x40
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_MspInit+0x4c>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80021b4:	f001 ff44 	bl	8004040 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <NMI_Handler+0x8>

080021bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <HardFault_Handler+0x4>

080021c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <MemManage_Handler+0x4>

080021cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <BusFault_Handler+0x4>

080021d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d8:	bf00      	nop
 80021da:	e7fd      	b.n	80021d8 <UsageFault_Handler+0x4>

080021dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220a:	f000 fb89 	bl	8002920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002218:	4802      	ldr	r0, [pc, #8]	@ (8002224 <USART1_IRQHandler+0x10>)
 800221a:	f002 fea7 	bl	8004f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200007e4 	.word	0x200007e4

08002228 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return 1;
 800222c:	2301      	movs	r3, #1
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <_kill>:

int _kill(int pid, int sig)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002242:	f005 fcb5 	bl	8007bb0 <__errno>
 8002246:	4603      	mov	r3, r0
 8002248:	2216      	movs	r2, #22
 800224a:	601a      	str	r2, [r3, #0]
  return -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_exit>:

void _exit (int status)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ffe7 	bl	8002238 <_kill>
  while (1) {}    /* Make sure we hang here */
 800226a:	bf00      	nop
 800226c:	e7fd      	b.n	800226a <_exit+0x12>

0800226e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e00a      	b.n	8002296 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002280:	f3af 8000 	nop.w
 8002284:	4601      	mov	r1, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	60ba      	str	r2, [r7, #8]
 800228c:	b2ca      	uxtb	r2, r1
 800228e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	dbf0      	blt.n	8002280 <_read+0x12>
  }

  return len;
 800229e:	687b      	ldr	r3, [r7, #4]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	e009      	b.n	80022ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	60ba      	str	r2, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	3301      	adds	r3, #1
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	dbf1      	blt.n	80022ba <_write+0x12>
  }
  return len;
 80022d6:	687b      	ldr	r3, [r7, #4]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_close>:

int _close(int file)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002308:	605a      	str	r2, [r3, #4]
  return 0;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <_isatty>:

int _isatty(int file)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800232e:	b480      	push	{r7}
 8002330:	b085      	sub	sp, #20
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002350:	4a14      	ldr	r2, [pc, #80]	@ (80023a4 <_sbrk+0x5c>)
 8002352:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <_sbrk+0x60>)
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <_sbrk+0x64>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <_sbrk+0x64>)
 8002366:	4a12      	ldr	r2, [pc, #72]	@ (80023b0 <_sbrk+0x68>)
 8002368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <_sbrk+0x64>)
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	429a      	cmp	r2, r3
 8002376:	d207      	bcs.n	8002388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002378:	f005 fc1a 	bl	8007bb0 <__errno>
 800237c:	4603      	mov	r3, r0
 800237e:	220c      	movs	r2, #12
 8002380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	e009      	b.n	800239c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002388:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <_sbrk+0x64>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238e:	4b07      	ldr	r3, [pc, #28]	@ (80023ac <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	4a05      	ldr	r2, [pc, #20]	@ (80023ac <_sbrk+0x64>)
 8002398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800239a:	68fb      	ldr	r3, [r7, #12]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20010000 	.word	0x20010000
 80023a8:	00000400 	.word	0x00000400
 80023ac:	20000750 	.word	0x20000750
 80023b0:	20000980 	.word	0x20000980

080023b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <SystemInit+0x20>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023be:	4a05      	ldr	r2, [pc, #20]	@ (80023d4 <SystemInit+0x20>)
 80023c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b096      	sub	sp, #88	@ 0x58
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	611a      	str	r2, [r3, #16]
 8002406:	615a      	str	r2, [r3, #20]
 8002408:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2220      	movs	r2, #32
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f005 fb0c 	bl	8007a2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002416:	4b3e      	ldr	r3, [pc, #248]	@ (8002510 <MX_TIM1_Init+0x138>)
 8002418:	4a3e      	ldr	r2, [pc, #248]	@ (8002514 <MX_TIM1_Init+0x13c>)
 800241a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 800241c:	4b3c      	ldr	r3, [pc, #240]	@ (8002510 <MX_TIM1_Init+0x138>)
 800241e:	2227      	movs	r2, #39	@ 0x27
 8002420:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002422:	4b3b      	ldr	r3, [pc, #236]	@ (8002510 <MX_TIM1_Init+0x138>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8002428:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <MX_TIM1_Init+0x138>)
 800242a:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800242e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002430:	4b37      	ldr	r3, [pc, #220]	@ (8002510 <MX_TIM1_Init+0x138>)
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002436:	4b36      	ldr	r3, [pc, #216]	@ (8002510 <MX_TIM1_Init+0x138>)
 8002438:	2200      	movs	r2, #0
 800243a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b34      	ldr	r3, [pc, #208]	@ (8002510 <MX_TIM1_Init+0x138>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002442:	4833      	ldr	r0, [pc, #204]	@ (8002510 <MX_TIM1_Init+0x138>)
 8002444:	f001 fe17 	bl	8004076 <HAL_TIM_Base_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800244e:	f7ff fe81 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002456:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002458:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800245c:	4619      	mov	r1, r3
 800245e:	482c      	ldr	r0, [pc, #176]	@ (8002510 <MX_TIM1_Init+0x138>)
 8002460:	f002 f824 	bl	80044ac <HAL_TIM_ConfigClockSource>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800246a:	f7ff fe73 	bl	8002154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800246e:	4828      	ldr	r0, [pc, #160]	@ (8002510 <MX_TIM1_Init+0x138>)
 8002470:	f001 fe50 	bl	8004114 <HAL_TIM_PWM_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800247a:	f7ff fe6b 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002486:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800248a:	4619      	mov	r1, r3
 800248c:	4820      	ldr	r0, [pc, #128]	@ (8002510 <MX_TIM1_Init+0x138>)
 800248e:	f002 fbad 	bl	8004bec <HAL_TIMEx_MasterConfigSynchronization>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002498:	f7ff fe5c 	bl	8002154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249c:	2360      	movs	r3, #96	@ 0x60
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024a8:	2300      	movs	r3, #0
 80024aa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024bc:	2200      	movs	r2, #0
 80024be:	4619      	mov	r1, r3
 80024c0:	4813      	ldr	r0, [pc, #76]	@ (8002510 <MX_TIM1_Init+0x138>)
 80024c2:	f001 ff31 	bl	8004328 <HAL_TIM_PWM_ConfigChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80024cc:	f7ff fe42 	bl	8002154 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4807      	ldr	r0, [pc, #28]	@ (8002510 <MX_TIM1_Init+0x138>)
 80024f4:	f002 fbe8 	bl	8004cc8 <HAL_TIMEx_ConfigBreakDeadTime>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80024fe:	f7ff fe29 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002502:	4803      	ldr	r0, [pc, #12]	@ (8002510 <MX_TIM1_Init+0x138>)
 8002504:	f000 f8b4 	bl	8002670 <HAL_TIM_MspPostInit>

}
 8002508:	bf00      	nop
 800250a:	3758      	adds	r7, #88	@ 0x58
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000754 	.word	0x20000754
 8002514:	40010000 	.word	0x40010000

08002518 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08e      	sub	sp, #56	@ 0x38
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	f107 0320 	add.w	r3, r7, #32
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
 8002544:	615a      	str	r2, [r3, #20]
 8002546:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002548:	4b2d      	ldr	r3, [pc, #180]	@ (8002600 <MX_TIM2_Init+0xe8>)
 800254a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800254e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8002550:	4b2b      	ldr	r3, [pc, #172]	@ (8002600 <MX_TIM2_Init+0xe8>)
 8002552:	2227      	movs	r2, #39	@ 0x27
 8002554:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002556:	4b2a      	ldr	r3, [pc, #168]	@ (8002600 <MX_TIM2_Init+0xe8>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 800255c:	4b28      	ldr	r3, [pc, #160]	@ (8002600 <MX_TIM2_Init+0xe8>)
 800255e:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8002562:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002564:	4b26      	ldr	r3, [pc, #152]	@ (8002600 <MX_TIM2_Init+0xe8>)
 8002566:	2200      	movs	r2, #0
 8002568:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256a:	4b25      	ldr	r3, [pc, #148]	@ (8002600 <MX_TIM2_Init+0xe8>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002570:	4823      	ldr	r0, [pc, #140]	@ (8002600 <MX_TIM2_Init+0xe8>)
 8002572:	f001 fd80 	bl	8004076 <HAL_TIM_Base_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800257c:	f7ff fdea 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002584:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258a:	4619      	mov	r1, r3
 800258c:	481c      	ldr	r0, [pc, #112]	@ (8002600 <MX_TIM2_Init+0xe8>)
 800258e:	f001 ff8d 	bl	80044ac <HAL_TIM_ConfigClockSource>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002598:	f7ff fddc 	bl	8002154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800259c:	4818      	ldr	r0, [pc, #96]	@ (8002600 <MX_TIM2_Init+0xe8>)
 800259e:	f001 fdb9 	bl	8004114 <HAL_TIM_PWM_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025a8:	f7ff fdd4 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025b4:	f107 0320 	add.w	r3, r7, #32
 80025b8:	4619      	mov	r1, r3
 80025ba:	4811      	ldr	r0, [pc, #68]	@ (8002600 <MX_TIM2_Init+0xe8>)
 80025bc:	f002 fb16 	bl	8004bec <HAL_TIMEx_MasterConfigSynchronization>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80025c6:	f7ff fdc5 	bl	8002154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ca:	2360      	movs	r3, #96	@ 0x60
 80025cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2208      	movs	r2, #8
 80025de:	4619      	mov	r1, r3
 80025e0:	4807      	ldr	r0, [pc, #28]	@ (8002600 <MX_TIM2_Init+0xe8>)
 80025e2:	f001 fea1 	bl	8004328 <HAL_TIM_PWM_ConfigChannel>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80025ec:	f7ff fdb2 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025f0:	4803      	ldr	r0, [pc, #12]	@ (8002600 <MX_TIM2_Init+0xe8>)
 80025f2:	f000 f83d 	bl	8002670 <HAL_TIM_MspPostInit>

}
 80025f6:	bf00      	nop
 80025f8:	3738      	adds	r7, #56	@ 0x38
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000079c 	.word	0x2000079c

08002604 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a15      	ldr	r2, [pc, #84]	@ (8002668 <HAL_TIM_Base_MspInit+0x64>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b14      	ldr	r3, [pc, #80]	@ (800266c <HAL_TIM_Base_MspInit+0x68>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a13      	ldr	r2, [pc, #76]	@ (800266c <HAL_TIM_Base_MspInit+0x68>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b11      	ldr	r3, [pc, #68]	@ (800266c <HAL_TIM_Base_MspInit+0x68>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002632:	e012      	b.n	800265a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800263c:	d10d      	bne.n	800265a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <HAL_TIM_Base_MspInit+0x68>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	4a09      	ldr	r2, [pc, #36]	@ (800266c <HAL_TIM_Base_MspInit+0x68>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6413      	str	r3, [r2, #64]	@ 0x40
 800264e:	4b07      	ldr	r3, [pc, #28]	@ (800266c <HAL_TIM_Base_MspInit+0x68>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40010000 	.word	0x40010000
 800266c:	40023800 	.word	0x40023800

08002670 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	@ 0x28
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a25      	ldr	r2, [pc, #148]	@ (8002724 <HAL_TIM_MspPostInit+0xb4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d11f      	bne.n	80026d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <HAL_TIM_MspPostInit+0xb8>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	4a23      	ldr	r2, [pc, #140]	@ (8002728 <HAL_TIM_MspPostInit+0xb8>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a2:	4b21      	ldr	r3, [pc, #132]	@ (8002728 <HAL_TIM_MspPostInit+0xb8>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026c0:	2301      	movs	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4619      	mov	r1, r3
 80026ca:	4818      	ldr	r0, [pc, #96]	@ (800272c <HAL_TIM_MspPostInit+0xbc>)
 80026cc:	f000 fd72 	bl	80031b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026d0:	e023      	b.n	800271a <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026da:	d11e      	bne.n	800271a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <HAL_TIM_MspPostInit+0xb8>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	4a10      	ldr	r2, [pc, #64]	@ (8002728 <HAL_TIM_MspPostInit+0xb8>)
 80026e6:	f043 0302 	orr.w	r3, r3, #2
 80026ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <HAL_TIM_MspPostInit+0xb8>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800270a:	2301      	movs	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4619      	mov	r1, r3
 8002714:	4806      	ldr	r0, [pc, #24]	@ (8002730 <HAL_TIM_MspPostInit+0xc0>)
 8002716:	f000 fd4d 	bl	80031b4 <HAL_GPIO_Init>
}
 800271a:	bf00      	nop
 800271c:	3728      	adds	r7, #40	@ 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40010000 	.word	0x40010000
 8002728:	40023800 	.word	0x40023800
 800272c:	40020000 	.word	0x40020000
 8002730:	40020400 	.word	0x40020400

08002734 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <MX_USART1_UART_Init+0x48>)
 800273a:	4a11      	ldr	r2, [pc, #68]	@ (8002780 <MX_USART1_UART_Init+0x4c>)
 800273c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 800273e:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <MX_USART1_UART_Init+0x48>)
 8002740:	4a10      	ldr	r2, [pc, #64]	@ (8002784 <MX_USART1_UART_Init+0x50>)
 8002742:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002744:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <MX_USART1_UART_Init+0x48>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800274a:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <MX_USART1_UART_Init+0x48>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002750:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <MX_USART1_UART_Init+0x48>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <MX_USART1_UART_Init+0x48>)
 8002758:	220c      	movs	r2, #12
 800275a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275c:	4b07      	ldr	r3, [pc, #28]	@ (800277c <MX_USART1_UART_Init+0x48>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <MX_USART1_UART_Init+0x48>)
 8002764:	2200      	movs	r2, #0
 8002766:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002768:	4804      	ldr	r0, [pc, #16]	@ (800277c <MX_USART1_UART_Init+0x48>)
 800276a:	f002 faff 	bl	8004d6c <HAL_UART_Init>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8002774:	f7ff fcee 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200007e4 	.word	0x200007e4
 8002780:	40011000 	.word	0x40011000
 8002784:	0007a120 	.word	0x0007a120

08002788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1d      	ldr	r2, [pc, #116]	@ (800281c <HAL_UART_MspInit+0x94>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d134      	bne.n	8002814 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <HAL_UART_MspInit+0x98>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <HAL_UART_MspInit+0x98>)
 80027b4:	f043 0310 	orr.w	r3, r3, #16
 80027b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_UART_MspInit+0x98>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_UART_MspInit+0x98>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	4a14      	ldr	r2, [pc, #80]	@ (8002820 <HAL_UART_MspInit+0x98>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d6:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_UART_MspInit+0x98>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027f4:	2307      	movs	r3, #7
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4619      	mov	r1, r3
 80027fe:	4809      	ldr	r0, [pc, #36]	@ (8002824 <HAL_UART_MspInit+0x9c>)
 8002800:	f000 fcd8 	bl	80031b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002804:	2200      	movs	r2, #0
 8002806:	2100      	movs	r1, #0
 8002808:	2025      	movs	r0, #37	@ 0x25
 800280a:	f000 fc0a 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800280e:	2025      	movs	r0, #37	@ 0x25
 8002810:	f000 fc23 	bl	800305a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002814:	bf00      	nop
 8002816:	3728      	adds	r7, #40	@ 0x28
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40011000 	.word	0x40011000
 8002820:	40023800 	.word	0x40023800
 8002824:	40020000 	.word	0x40020000

08002828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002860 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800282c:	480d      	ldr	r0, [pc, #52]	@ (8002864 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800282e:	490e      	ldr	r1, [pc, #56]	@ (8002868 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002830:	4a0e      	ldr	r2, [pc, #56]	@ (800286c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002834:	e002      	b.n	800283c <LoopCopyDataInit>

08002836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283a:	3304      	adds	r3, #4

0800283c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800283c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002840:	d3f9      	bcc.n	8002836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002842:	4a0b      	ldr	r2, [pc, #44]	@ (8002870 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002844:	4c0b      	ldr	r4, [pc, #44]	@ (8002874 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002848:	e001      	b.n	800284e <LoopFillZerobss>

0800284a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800284c:	3204      	adds	r2, #4

0800284e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002850:	d3fb      	bcc.n	800284a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002852:	f7ff fdaf 	bl	80023b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002856:	f005 f9b1 	bl	8007bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285a:	f7ff fb8d 	bl	8001f78 <main>
  bx  lr    
 800285e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002860:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002868:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 800286c:	0800d0a8 	.word	0x0800d0a8
  ldr r2, =_sbss
 8002870:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002874:	2000097c 	.word	0x2000097c

08002878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002878:	e7fe      	b.n	8002878 <ADC_IRQHandler>
	...

0800287c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_Init+0x40>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0d      	ldr	r2, [pc, #52]	@ (80028bc <HAL_Init+0x40>)
 8002886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800288a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_Init+0x40>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0a      	ldr	r2, [pc, #40]	@ (80028bc <HAL_Init+0x40>)
 8002892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002898:	4b08      	ldr	r3, [pc, #32]	@ (80028bc <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <HAL_Init+0x40>)
 800289e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a4:	2003      	movs	r0, #3
 80028a6:	f000 fbb1 	bl	800300c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028aa:	200f      	movs	r0, #15
 80028ac:	f000 f808 	bl	80028c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b0:	f7ff fc56 	bl	8002160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023c00 	.word	0x40023c00

080028c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c8:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <HAL_InitTick+0x54>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <HAL_InitTick+0x58>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4619      	mov	r1, r3
 80028d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fbc9 	bl	8003076 <HAL_SYSTICK_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00e      	b.n	800290c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	d80a      	bhi.n	800290a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f4:	2200      	movs	r2, #0
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f000 fb91 	bl	8003022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002900:	4a06      	ldr	r2, [pc, #24]	@ (800291c <HAL_InitTick+0x5c>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
}
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000050 	.word	0x20000050
 8002918:	20000058 	.word	0x20000058
 800291c:	20000054 	.word	0x20000054

08002920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_IncTick+0x20>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_IncTick+0x24>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4413      	add	r3, r2
 8002930:	4a04      	ldr	r2, [pc, #16]	@ (8002944 <HAL_IncTick+0x24>)
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000058 	.word	0x20000058
 8002944:	2000082c 	.word	0x2000082c

08002948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return uwTick;
 800294c:	4b03      	ldr	r3, [pc, #12]	@ (800295c <HAL_GetTick+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	2000082c 	.word	0x2000082c

08002960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff ffee 	bl	8002948 <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d005      	beq.n	8002986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297a:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <HAL_Delay+0x44>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002986:	bf00      	nop
 8002988:	f7ff ffde 	bl	8002948 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	d8f7      	bhi.n	8002988 <HAL_Delay+0x28>
  {
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000058 	.word	0x20000058

080029a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e033      	b.n	8002a26 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d109      	bne.n	80029da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fb68 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029ee:	f023 0302 	bic.w	r3, r3, #2
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f93a 	bl	8002c74 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f023 0303 	bic.w	r3, r3, #3
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a16:	e001      	b.n	8002a1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x1c>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e105      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x228>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b09      	cmp	r3, #9
 8002a5a:	d925      	bls.n	8002aa8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68d9      	ldr	r1, [r3, #12]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b1e      	subs	r3, #30
 8002a72:	2207      	movs	r2, #7
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	400a      	ands	r2, r1
 8002a80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68d9      	ldr	r1, [r3, #12]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	4603      	mov	r3, r0
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4403      	add	r3, r0
 8002a9a:	3b1e      	subs	r3, #30
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	e022      	b.n	8002aee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6919      	ldr	r1, [r3, #16]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	2207      	movs	r2, #7
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	400a      	ands	r2, r1
 8002aca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6919      	ldr	r1, [r3, #16]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4618      	mov	r0, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4403      	add	r3, r0
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d824      	bhi.n	8002b40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b05      	subs	r3, #5
 8002b08:	221f      	movs	r2, #31
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	400a      	ands	r2, r1
 8002b16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4618      	mov	r0, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b05      	subs	r3, #5
 8002b32:	fa00 f203 	lsl.w	r2, r0, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b3e:	e04c      	b.n	8002bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d824      	bhi.n	8002b92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	3b23      	subs	r3, #35	@ 0x23
 8002b5a:	221f      	movs	r2, #31
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43da      	mvns	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	400a      	ands	r2, r1
 8002b68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	3b23      	subs	r3, #35	@ 0x23
 8002b84:	fa00 f203 	lsl.w	r2, r0, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b90:	e023      	b.n	8002bda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b41      	subs	r3, #65	@ 0x41
 8002ba4:	221f      	movs	r2, #31
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b41      	subs	r3, #65	@ 0x41
 8002bce:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bda:	4b22      	ldr	r3, [pc, #136]	@ (8002c64 <HAL_ADC_ConfigChannel+0x234>)
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a21      	ldr	r2, [pc, #132]	@ (8002c68 <HAL_ADC_ConfigChannel+0x238>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d109      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1cc>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b12      	cmp	r3, #18
 8002bee:	d105      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a19      	ldr	r2, [pc, #100]	@ (8002c68 <HAL_ADC_ConfigChannel+0x238>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d123      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x21e>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d003      	beq.n	8002c16 <HAL_ADC_ConfigChannel+0x1e6>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b11      	cmp	r3, #17
 8002c14:	d11b      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d111      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2a:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <HAL_ADC_ConfigChannel+0x23c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a10      	ldr	r2, [pc, #64]	@ (8002c70 <HAL_ADC_ConfigChannel+0x240>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0c9a      	lsrs	r2, r3, #18
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40012300 	.word	0x40012300
 8002c68:	40012000 	.word	0x40012000
 8002c6c:	20000050 	.word	0x20000050
 8002c70:	431bde83 	.word	0x431bde83

08002c74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c7c:	4b79      	ldr	r3, [pc, #484]	@ (8002e64 <ADC_Init+0x1f0>)
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	021a      	lsls	r2, r3, #8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ccc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6899      	ldr	r1, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d06:	4a58      	ldr	r2, [pc, #352]	@ (8002e68 <ADC_Init+0x1f4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6899      	ldr	r1, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	e00f      	b.n	8002d72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d70:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0202 	bic.w	r2, r2, #2
 8002d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7e1b      	ldrb	r3, [r3, #24]
 8002d8c:	005a      	lsls	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01b      	beq.n	8002dd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002dbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	035a      	lsls	r2, r3, #13
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	e007      	b.n	8002de8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002de6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	051a      	lsls	r2, r3, #20
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6899      	ldr	r1, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e2a:	025a      	lsls	r2, r3, #9
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	029a      	lsls	r2, r3, #10
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40012300 	.word	0x40012300
 8002e68:	0f000001 	.word	0x0f000001

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4907      	ldr	r1, [pc, #28]	@ (8002f08 <__NVIC_EnableIRQ+0x38>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	@ (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	@ (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	@ 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd8:	d301      	bcc.n	8002fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00f      	b.n	8002ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fde:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <SysTick_Config+0x40>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f7ff ff8e 	bl	8002f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <SysTick_Config+0x40>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff6:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <SysTick_Config+0x40>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff29 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003030:	2300      	movs	r3, #0
 8003032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003034:	f7ff ff3e 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8003038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	6978      	ldr	r0, [r7, #20]
 8003040:	f7ff ff8e 	bl	8002f60 <NVIC_EncodePriority>
 8003044:	4602      	mov	r2, r0
 8003046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff5d 	bl	8002f0c <__NVIC_SetPriority>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff31 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffa2 	bl	8002fc8 <SysTick_Config>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7ff fc54 	bl	8002948 <HAL_GetTick>
 80030a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d008      	beq.n	80030c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2280      	movs	r2, #128	@ 0x80
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e052      	b.n	8003166 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0216 	bic.w	r2, r2, #22
 80030ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d103      	bne.n	80030f0 <HAL_DMA_Abort+0x62>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0208 	bic.w	r2, r2, #8
 80030fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003110:	e013      	b.n	800313a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003112:	f7ff fc19 	bl	8002948 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b05      	cmp	r3, #5
 800311e:	d90c      	bls.n	800313a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2203      	movs	r2, #3
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e015      	b.n	8003166 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e4      	bne.n	8003112 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	223f      	movs	r2, #63	@ 0x3f
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d004      	beq.n	800318c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2280      	movs	r2, #128	@ 0x80
 8003186:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e00c      	b.n	80031a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2205      	movs	r2, #5
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b089      	sub	sp, #36	@ 0x24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e159      	b.n	8003484 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	f040 8148 	bne.w	800347e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d005      	beq.n	8003206 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003202:	2b02      	cmp	r3, #2
 8003204:	d130      	bne.n	8003268 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	2203      	movs	r2, #3
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800323c:	2201      	movs	r2, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 0201 	and.w	r2, r3, #1
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b03      	cmp	r3, #3
 8003272:	d017      	beq.n	80032a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d123      	bne.n	80032f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	08da      	lsrs	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3208      	adds	r2, #8
 80032b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	08da      	lsrs	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3208      	adds	r2, #8
 80032f2:	69b9      	ldr	r1, [r7, #24]
 80032f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2203      	movs	r2, #3
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80a2 	beq.w	800347e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	4b57      	ldr	r3, [pc, #348]	@ (800349c <HAL_GPIO_Init+0x2e8>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003342:	4a56      	ldr	r2, [pc, #344]	@ (800349c <HAL_GPIO_Init+0x2e8>)
 8003344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003348:	6453      	str	r3, [r2, #68]	@ 0x44
 800334a:	4b54      	ldr	r3, [pc, #336]	@ (800349c <HAL_GPIO_Init+0x2e8>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003356:	4a52      	ldr	r2, [pc, #328]	@ (80034a0 <HAL_GPIO_Init+0x2ec>)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	089b      	lsrs	r3, r3, #2
 800335c:	3302      	adds	r3, #2
 800335e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	f003 0303 	and.w	r3, r3, #3
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	220f      	movs	r2, #15
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a49      	ldr	r2, [pc, #292]	@ (80034a4 <HAL_GPIO_Init+0x2f0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d019      	beq.n	80033b6 <HAL_GPIO_Init+0x202>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a48      	ldr	r2, [pc, #288]	@ (80034a8 <HAL_GPIO_Init+0x2f4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_GPIO_Init+0x1fe>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a47      	ldr	r2, [pc, #284]	@ (80034ac <HAL_GPIO_Init+0x2f8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00d      	beq.n	80033ae <HAL_GPIO_Init+0x1fa>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a46      	ldr	r2, [pc, #280]	@ (80034b0 <HAL_GPIO_Init+0x2fc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <HAL_GPIO_Init+0x1f6>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a45      	ldr	r2, [pc, #276]	@ (80034b4 <HAL_GPIO_Init+0x300>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_GPIO_Init+0x1f2>
 80033a2:	2304      	movs	r3, #4
 80033a4:	e008      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033a6:	2307      	movs	r3, #7
 80033a8:	e006      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033aa:	2303      	movs	r3, #3
 80033ac:	e004      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e002      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <HAL_GPIO_Init+0x204>
 80033b6:	2300      	movs	r3, #0
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	f002 0203 	and.w	r2, r2, #3
 80033be:	0092      	lsls	r2, r2, #2
 80033c0:	4093      	lsls	r3, r2
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033c8:	4935      	ldr	r1, [pc, #212]	@ (80034a0 <HAL_GPIO_Init+0x2ec>)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	3302      	adds	r3, #2
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033d6:	4b38      	ldr	r3, [pc, #224]	@ (80034b8 <HAL_GPIO_Init+0x304>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033fa:	4a2f      	ldr	r2, [pc, #188]	@ (80034b8 <HAL_GPIO_Init+0x304>)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003400:	4b2d      	ldr	r3, [pc, #180]	@ (80034b8 <HAL_GPIO_Init+0x304>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003424:	4a24      	ldr	r2, [pc, #144]	@ (80034b8 <HAL_GPIO_Init+0x304>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800342a:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <HAL_GPIO_Init+0x304>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800344e:	4a1a      	ldr	r2, [pc, #104]	@ (80034b8 <HAL_GPIO_Init+0x304>)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003454:	4b18      	ldr	r3, [pc, #96]	@ (80034b8 <HAL_GPIO_Init+0x304>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003478:	4a0f      	ldr	r2, [pc, #60]	@ (80034b8 <HAL_GPIO_Init+0x304>)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3301      	adds	r3, #1
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b0f      	cmp	r3, #15
 8003488:	f67f aea2 	bls.w	80031d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	3724      	adds	r7, #36	@ 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
 80034a0:	40013800 	.word	0x40013800
 80034a4:	40020000 	.word	0x40020000
 80034a8:	40020400 	.word	0x40020400
 80034ac:	40020800 	.word	0x40020800
 80034b0:	40020c00 	.word	0x40020c00
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40013c00 	.word	0x40013c00

080034bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	807b      	strh	r3, [r7, #2]
 80034c8:	4613      	mov	r3, r2
 80034ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034cc:	787b      	ldrb	r3, [r7, #1]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d2:	887a      	ldrh	r2, [r7, #2]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034d8:	e003      	b.n	80034e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034da:	887b      	ldrh	r3, [r7, #2]
 80034dc:	041a      	lsls	r2, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	619a      	str	r2, [r3, #24]
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e12b      	b.n	800375a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fd fea8 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2224      	movs	r2, #36	@ 0x24
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003554:	f000 fd4c 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 8003558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4a81      	ldr	r2, [pc, #516]	@ (8003764 <HAL_I2C_Init+0x274>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d807      	bhi.n	8003574 <HAL_I2C_Init+0x84>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a80      	ldr	r2, [pc, #512]	@ (8003768 <HAL_I2C_Init+0x278>)
 8003568:	4293      	cmp	r3, r2
 800356a:	bf94      	ite	ls
 800356c:	2301      	movls	r3, #1
 800356e:	2300      	movhi	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e006      	b.n	8003582 <HAL_I2C_Init+0x92>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a7d      	ldr	r2, [pc, #500]	@ (800376c <HAL_I2C_Init+0x27c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	bf94      	ite	ls
 800357c:	2301      	movls	r3, #1
 800357e:	2300      	movhi	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e0e7      	b.n	800375a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4a78      	ldr	r2, [pc, #480]	@ (8003770 <HAL_I2C_Init+0x280>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0c9b      	lsrs	r3, r3, #18
 8003594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003764 <HAL_I2C_Init+0x274>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d802      	bhi.n	80035c4 <HAL_I2C_Init+0xd4>
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3301      	adds	r3, #1
 80035c2:	e009      	b.n	80035d8 <HAL_I2C_Init+0xe8>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	4a69      	ldr	r2, [pc, #420]	@ (8003774 <HAL_I2C_Init+0x284>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	3301      	adds	r3, #1
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	495c      	ldr	r1, [pc, #368]	@ (8003764 <HAL_I2C_Init+0x274>)
 80035f4:	428b      	cmp	r3, r1
 80035f6:	d819      	bhi.n	800362c <HAL_I2C_Init+0x13c>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e59      	subs	r1, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fbb1 f3f3 	udiv	r3, r1, r3
 8003606:	1c59      	adds	r1, r3, #1
 8003608:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800360c:	400b      	ands	r3, r1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_I2C_Init+0x138>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1e59      	subs	r1, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003620:	3301      	adds	r3, #1
 8003622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003626:	e051      	b.n	80036cc <HAL_I2C_Init+0x1dc>
 8003628:	2304      	movs	r3, #4
 800362a:	e04f      	b.n	80036cc <HAL_I2C_Init+0x1dc>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d111      	bne.n	8003658 <HAL_I2C_Init+0x168>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1e58      	subs	r0, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6859      	ldr	r1, [r3, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	440b      	add	r3, r1
 8003642:	fbb0 f3f3 	udiv	r3, r0, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	e012      	b.n	800367e <HAL_I2C_Init+0x18e>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1e58      	subs	r0, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	0099      	lsls	r1, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	fbb0 f3f3 	udiv	r3, r0, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Init+0x196>
 8003682:	2301      	movs	r3, #1
 8003684:	e022      	b.n	80036cc <HAL_I2C_Init+0x1dc>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10e      	bne.n	80036ac <HAL_I2C_Init+0x1bc>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1e58      	subs	r0, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	460b      	mov	r3, r1
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	440b      	add	r3, r1
 800369c:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036aa:	e00f      	b.n	80036cc <HAL_I2C_Init+0x1dc>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e58      	subs	r0, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	0099      	lsls	r1, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c2:	3301      	adds	r3, #1
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	6809      	ldr	r1, [r1, #0]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6911      	ldr	r1, [r2, #16]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	68d2      	ldr	r2, [r2, #12]
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	430b      	orrs	r3, r1
 800370e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	000186a0 	.word	0x000186a0
 8003768:	001e847f 	.word	0x001e847f
 800376c:	003d08ff 	.word	0x003d08ff
 8003770:	431bde83 	.word	0x431bde83
 8003774:	10624dd3 	.word	0x10624dd3

08003778 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e267      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d075      	beq.n	8003882 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003796:	4b88      	ldr	r3, [pc, #544]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d00c      	beq.n	80037bc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a2:	4b85      	ldr	r3, [pc, #532]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d112      	bne.n	80037d4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ae:	4b82      	ldr	r3, [pc, #520]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ba:	d10b      	bne.n	80037d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	4b7e      	ldr	r3, [pc, #504]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d05b      	beq.n	8003880 <HAL_RCC_OscConfig+0x108>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d157      	bne.n	8003880 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e242      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037dc:	d106      	bne.n	80037ec <HAL_RCC_OscConfig+0x74>
 80037de:	4b76      	ldr	r3, [pc, #472]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a75      	ldr	r2, [pc, #468]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e01d      	b.n	8003828 <HAL_RCC_OscConfig+0xb0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x98>
 80037f6:	4b70      	ldr	r3, [pc, #448]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a6f      	ldr	r2, [pc, #444]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80037fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b6d      	ldr	r3, [pc, #436]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a6c      	ldr	r2, [pc, #432]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e00b      	b.n	8003828 <HAL_RCC_OscConfig+0xb0>
 8003810:	4b69      	ldr	r3, [pc, #420]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a68      	ldr	r2, [pc, #416]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003816:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4b66      	ldr	r3, [pc, #408]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a65      	ldr	r2, [pc, #404]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7ff f88a 	bl	8002948 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003838:	f7ff f886 	bl	8002948 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b64      	cmp	r3, #100	@ 0x64
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e207      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b5b      	ldr	r3, [pc, #364]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0xc0>
 8003856:	e014      	b.n	8003882 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7ff f876 	bl	8002948 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7ff f872 	bl	8002948 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	@ 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e1f3      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003872:	4b51      	ldr	r3, [pc, #324]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0xe8>
 800387e:	e000      	b.n	8003882 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d063      	beq.n	8003956 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800388e:	4b4a      	ldr	r3, [pc, #296]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389a:	4b47      	ldr	r3, [pc, #284]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d11c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a6:	4b44      	ldr	r3, [pc, #272]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d116      	bne.n	80038e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b2:	4b41      	ldr	r3, [pc, #260]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_RCC_OscConfig+0x152>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e1c7      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	4b3b      	ldr	r3, [pc, #236]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4937      	ldr	r1, [pc, #220]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038de:	e03a      	b.n	8003956 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d020      	beq.n	800392a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e8:	4b34      	ldr	r3, [pc, #208]	@ (80039bc <HAL_RCC_OscConfig+0x244>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ee:	f7ff f82b 	bl	8002948 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f6:	f7ff f827 	bl	8002948 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e1a8      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003908:	4b2b      	ldr	r3, [pc, #172]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	4b28      	ldr	r3, [pc, #160]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	4925      	ldr	r1, [pc, #148]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 8003924:	4313      	orrs	r3, r2
 8003926:	600b      	str	r3, [r1, #0]
 8003928:	e015      	b.n	8003956 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392a:	4b24      	ldr	r3, [pc, #144]	@ (80039bc <HAL_RCC_OscConfig+0x244>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7ff f80a 	bl	8002948 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003938:	f7ff f806 	bl	8002948 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e187      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394a:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d036      	beq.n	80039d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d016      	beq.n	8003998 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396a:	4b15      	ldr	r3, [pc, #84]	@ (80039c0 <HAL_RCC_OscConfig+0x248>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7fe ffea 	bl	8002948 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003978:	f7fe ffe6 	bl	8002948 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e167      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398a:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <HAL_RCC_OscConfig+0x240>)
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x200>
 8003996:	e01b      	b.n	80039d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003998:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <HAL_RCC_OscConfig+0x248>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399e:	f7fe ffd3 	bl	8002948 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a4:	e00e      	b.n	80039c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039a6:	f7fe ffcf 	bl	8002948 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d907      	bls.n	80039c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e150      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
 80039b8:	40023800 	.word	0x40023800
 80039bc:	42470000 	.word	0x42470000
 80039c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c4:	4b88      	ldr	r3, [pc, #544]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ea      	bne.n	80039a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8097 	beq.w	8003b0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e2:	4b81      	ldr	r3, [pc, #516]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	4b7d      	ldr	r3, [pc, #500]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	4a7c      	ldr	r2, [pc, #496]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80039fe:	4b7a      	ldr	r3, [pc, #488]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b77      	ldr	r3, [pc, #476]	@ (8003bec <HAL_RCC_OscConfig+0x474>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d118      	bne.n	8003a4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1a:	4b74      	ldr	r3, [pc, #464]	@ (8003bec <HAL_RCC_OscConfig+0x474>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a73      	ldr	r2, [pc, #460]	@ (8003bec <HAL_RCC_OscConfig+0x474>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fe ff8f 	bl	8002948 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a2e:	f7fe ff8b 	bl	8002948 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e10c      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	4b6a      	ldr	r3, [pc, #424]	@ (8003bec <HAL_RCC_OscConfig+0x474>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x2ea>
 8003a54:	4b64      	ldr	r3, [pc, #400]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a58:	4a63      	ldr	r2, [pc, #396]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a60:	e01c      	b.n	8003a9c <HAL_RCC_OscConfig+0x324>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b05      	cmp	r3, #5
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x30c>
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a76:	4b5c      	ldr	r3, [pc, #368]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	4a5b      	ldr	r2, [pc, #364]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a82:	e00b      	b.n	8003a9c <HAL_RCC_OscConfig+0x324>
 8003a84:	4b58      	ldr	r3, [pc, #352]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a88:	4a57      	ldr	r2, [pc, #348]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a90:	4b55      	ldr	r3, [pc, #340]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	4a54      	ldr	r2, [pc, #336]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003a96:	f023 0304 	bic.w	r3, r3, #4
 8003a9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d015      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7fe ff50 	bl	8002948 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aac:	f7fe ff4c 	bl	8002948 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0cb      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac2:	4b49      	ldr	r3, [pc, #292]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0ee      	beq.n	8003aac <HAL_RCC_OscConfig+0x334>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad0:	f7fe ff3a 	bl	8002948 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f7fe ff36 	bl	8002948 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e0b5      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aee:	4b3e      	ldr	r3, [pc, #248]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1ee      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d105      	bne.n	8003b0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b00:	4b39      	ldr	r3, [pc, #228]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	4a38      	ldr	r2, [pc, #224]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 80a1 	beq.w	8003c58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b16:	4b34      	ldr	r3, [pc, #208]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 030c 	and.w	r3, r3, #12
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d05c      	beq.n	8003bdc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d141      	bne.n	8003bae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2a:	4b31      	ldr	r3, [pc, #196]	@ (8003bf0 <HAL_RCC_OscConfig+0x478>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fe ff0a 	bl	8002948 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7fe ff06 	bl	8002948 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e087      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4a:	4b27      	ldr	r3, [pc, #156]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	019b      	lsls	r3, r3, #6
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	061b      	lsls	r3, r3, #24
 8003b7a:	491b      	ldr	r1, [pc, #108]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf0 <HAL_RCC_OscConfig+0x478>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fe fedf 	bl	8002948 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fe fedb 	bl	8002948 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e05c      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba0:	4b11      	ldr	r3, [pc, #68]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x416>
 8003bac:	e054      	b.n	8003c58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <HAL_RCC_OscConfig+0x478>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fec8 	bl	8002948 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe fec4 	bl	8002948 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e045      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x444>
 8003bda:	e03d      	b.n	8003c58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d107      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e038      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40007000 	.word	0x40007000
 8003bf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c64 <HAL_RCC_OscConfig+0x4ec>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d028      	beq.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d121      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d11a      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c24:	4013      	ands	r3, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d111      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0cc      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b68      	ldr	r3, [pc, #416]	@ (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d90c      	bls.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b65      	ldr	r3, [pc, #404]	@ (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c92:	4b63      	ldr	r3, [pc, #396]	@ (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0b8      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cbc:	4b59      	ldr	r3, [pc, #356]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	4a58      	ldr	r2, [pc, #352]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd4:	4b53      	ldr	r3, [pc, #332]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a52      	ldr	r2, [pc, #328]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce0:	4b50      	ldr	r3, [pc, #320]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	494d      	ldr	r1, [pc, #308]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d044      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d107      	bne.n	8003d16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d119      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e07f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d003      	beq.n	8003d26 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b3f      	ldr	r3, [pc, #252]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b3b      	ldr	r3, [pc, #236]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e067      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b37      	ldr	r3, [pc, #220]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4934      	ldr	r1, [pc, #208]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7fe fdf6 	bl	8002948 <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe fdf2 	bl	8002948 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04f      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b2b      	ldr	r3, [pc, #172]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b25      	ldr	r3, [pc, #148]	@ (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d20c      	bcs.n	8003db0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b22      	ldr	r3, [pc, #136]	@ (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b20      	ldr	r3, [pc, #128]	@ (8003e20 <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e032      	b.n	8003e16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dbc:	4b19      	ldr	r3, [pc, #100]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4916      	ldr	r1, [pc, #88]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dda:	4b12      	ldr	r3, [pc, #72]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	490e      	ldr	r1, [pc, #56]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dee:	f000 f82d 	bl	8003e4c <HAL_RCC_GetSysClockFreq>
 8003df2:	4602      	mov	r2, r0
 8003df4:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	490a      	ldr	r1, [pc, #40]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	5ccb      	ldrb	r3, [r1, r3]
 8003e02:	fa22 f303 	lsr.w	r3, r2, r3
 8003e06:	4a09      	ldr	r2, [pc, #36]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e0a:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe fd56 	bl	80028c0 <HAL_InitTick>

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023c00 	.word	0x40023c00
 8003e24:	40023800 	.word	0x40023800
 8003e28:	0800cb98 	.word	0x0800cb98
 8003e2c:	20000050 	.word	0x20000050
 8003e30:	20000054 	.word	0x20000054

08003e34 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003e38:	4b03      	ldr	r3, [pc, #12]	@ (8003e48 <HAL_RCC_EnableCSS+0x14>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	4247004c 	.word	0x4247004c

08003e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e50:	b090      	sub	sp, #64	@ 0x40
 8003e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e64:	4b59      	ldr	r3, [pc, #356]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 030c 	and.w	r3, r3, #12
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d00d      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x40>
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	f200 80a1 	bhi.w	8003fb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x34>
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e7e:	e09b      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4b53      	ldr	r3, [pc, #332]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e84:	e09b      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e86:	4b53      	ldr	r3, [pc, #332]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003e8a:	e098      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e96:	4b4d      	ldr	r3, [pc, #308]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d028      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	099b      	lsrs	r3, r3, #6
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	623b      	str	r3, [r7, #32]
 8003eac:	627a      	str	r2, [r7, #36]	@ 0x24
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4b47      	ldr	r3, [pc, #284]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003eb8:	fb03 f201 	mul.w	r2, r3, r1
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	fb00 f303 	mul.w	r3, r0, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	4a43      	ldr	r2, [pc, #268]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ec6:	fba0 1202 	umull	r1, r2, r0, r2
 8003eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ecc:	460a      	mov	r2, r1
 8003ece:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed2:	4413      	add	r3, r2
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed8:	2200      	movs	r2, #0
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	61fa      	str	r2, [r7, #28]
 8003ede:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ee6:	f7fc fed7 	bl	8000c98 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4613      	mov	r3, r2
 8003ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ef2:	e053      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ef4:	4b35      	ldr	r3, [pc, #212]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	2200      	movs	r2, #0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	617a      	str	r2, [r7, #20]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f06:	f04f 0b00 	mov.w	fp, #0
 8003f0a:	4652      	mov	r2, sl
 8003f0c:	465b      	mov	r3, fp
 8003f0e:	f04f 0000 	mov.w	r0, #0
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	0159      	lsls	r1, r3, #5
 8003f18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f1c:	0150      	lsls	r0, r2, #5
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	ebb2 080a 	subs.w	r8, r2, sl
 8003f26:	eb63 090b 	sbc.w	r9, r3, fp
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f3e:	ebb2 0408 	subs.w	r4, r2, r8
 8003f42:	eb63 0509 	sbc.w	r5, r3, r9
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	00eb      	lsls	r3, r5, #3
 8003f50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f54:	00e2      	lsls	r2, r4, #3
 8003f56:	4614      	mov	r4, r2
 8003f58:	461d      	mov	r5, r3
 8003f5a:	eb14 030a 	adds.w	r3, r4, sl
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	eb45 030b 	adc.w	r3, r5, fp
 8003f64:	607b      	str	r3, [r7, #4]
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f72:	4629      	mov	r1, r5
 8003f74:	028b      	lsls	r3, r1, #10
 8003f76:	4621      	mov	r1, r4
 8003f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	028a      	lsls	r2, r1, #10
 8003f80:	4610      	mov	r0, r2
 8003f82:	4619      	mov	r1, r3
 8003f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f86:	2200      	movs	r2, #0
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	60fa      	str	r2, [r7, #12]
 8003f8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f90:	f7fc fe82 	bl	8000c98 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4613      	mov	r3, r2
 8003f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003fac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fb6:	e002      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3740      	adds	r7, #64	@ 0x40
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	00f42400 	.word	0x00f42400
 8003fd4:	017d7840 	.word	0x017d7840

08003fd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fdc:	4b03      	ldr	r3, [pc, #12]	@ (8003fec <HAL_RCC_GetHCLKFreq+0x14>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000050 	.word	0x20000050

08003ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ff4:	f7ff fff0 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	@ (8004010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0a9b      	lsrs	r3, r3, #10
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	@ (8004014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40023800 	.word	0x40023800
 8004014:	0800cba8 	.word	0x0800cba8

08004018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800401c:	f7ff ffdc 	bl	8003fd8 <HAL_RCC_GetHCLKFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	0b5b      	lsrs	r3, r3, #13
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4903      	ldr	r1, [pc, #12]	@ (800403c <HAL_RCC_GetPCLK2Freq+0x24>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40023800 	.word	0x40023800
 800403c:	0800cba8 	.word	0x0800cba8

08004040 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004044:	4b06      	ldr	r3, [pc, #24]	@ (8004060 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404c:	2b80      	cmp	r3, #128	@ 0x80
 800404e:	d104      	bne.n	800405a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004050:	f000 f80a 	bl	8004068 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004054:	4b03      	ldr	r3, [pc, #12]	@ (8004064 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004056:	2280      	movs	r2, #128	@ 0x80
 8004058:	701a      	strb	r2, [r3, #0]
  }
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	4002380e 	.word	0x4002380e

08004068 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e041      	b.n	800410c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d106      	bne.n	80040a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7fe fab1 	bl	8002604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2202      	movs	r2, #2
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f000 fac1 	bl	800463c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e041      	b.n	80041aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f839 	bl	80041b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f000 fa72 	bl	800463c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_TIM_PWM_Start+0x24>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e022      	b.n	8004232 <HAL_TIM_PWM_Start+0x6a>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d109      	bne.n	8004206 <HAL_TIM_PWM_Start+0x3e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e015      	b.n	8004232 <HAL_TIM_PWM_Start+0x6a>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d109      	bne.n	8004220 <HAL_TIM_PWM_Start+0x58>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e008      	b.n	8004232 <HAL_TIM_PWM_Start+0x6a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e068      	b.n	800430c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <HAL_TIM_PWM_Start+0x82>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004248:	e013      	b.n	8004272 <HAL_TIM_PWM_Start+0xaa>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b04      	cmp	r3, #4
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Start+0x92>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004258:	e00b      	b.n	8004272 <HAL_TIM_PWM_Start+0xaa>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0xa2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004268:	e003      	b.n	8004272 <HAL_TIM_PWM_Start+0xaa>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fc90 	bl	8004ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a23      	ldr	r2, [pc, #140]	@ (8004314 <HAL_TIM_PWM_Start+0x14c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d107      	bne.n	800429a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1d      	ldr	r2, [pc, #116]	@ (8004314 <HAL_TIM_PWM_Start+0x14c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d018      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x10e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ac:	d013      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x10e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a19      	ldr	r2, [pc, #100]	@ (8004318 <HAL_TIM_PWM_Start+0x150>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x10e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a17      	ldr	r2, [pc, #92]	@ (800431c <HAL_TIM_PWM_Start+0x154>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x10e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a16      	ldr	r2, [pc, #88]	@ (8004320 <HAL_TIM_PWM_Start+0x158>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x10e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a14      	ldr	r2, [pc, #80]	@ (8004324 <HAL_TIM_PWM_Start+0x15c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d111      	bne.n	80042fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d010      	beq.n	800430a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f8:	e007      	b.n	800430a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40014000 	.word	0x40014000

08004328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004342:	2302      	movs	r3, #2
 8004344:	e0ae      	b.n	80044a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b0c      	cmp	r3, #12
 8004352:	f200 809f 	bhi.w	8004494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004356:	a201      	add	r2, pc, #4	@ (adr r2, 800435c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435c:	08004391 	.word	0x08004391
 8004360:	08004495 	.word	0x08004495
 8004364:	08004495 	.word	0x08004495
 8004368:	08004495 	.word	0x08004495
 800436c:	080043d1 	.word	0x080043d1
 8004370:	08004495 	.word	0x08004495
 8004374:	08004495 	.word	0x08004495
 8004378:	08004495 	.word	0x08004495
 800437c:	08004413 	.word	0x08004413
 8004380:	08004495 	.word	0x08004495
 8004384:	08004495 	.word	0x08004495
 8004388:	08004495 	.word	0x08004495
 800438c:	08004453 	.word	0x08004453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f9dc 	bl	8004754 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0208 	orr.w	r2, r2, #8
 80043aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0204 	bic.w	r2, r2, #4
 80043ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6999      	ldr	r1, [r3, #24]
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	619a      	str	r2, [r3, #24]
      break;
 80043ce:	e064      	b.n	800449a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fa22 	bl	8004820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6999      	ldr	r1, [r3, #24]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	021a      	lsls	r2, r3, #8
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	619a      	str	r2, [r3, #24]
      break;
 8004410:	e043      	b.n	800449a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fa6d 	bl	80048f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0208 	orr.w	r2, r2, #8
 800442c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0204 	bic.w	r2, r2, #4
 800443c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69d9      	ldr	r1, [r3, #28]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	61da      	str	r2, [r3, #28]
      break;
 8004450:	e023      	b.n	800449a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fab7 	bl	80049cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800446c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69d9      	ldr	r1, [r3, #28]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	021a      	lsls	r2, r3, #8
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	61da      	str	r2, [r3, #28]
      break;
 8004492:	e002      	b.n	800449a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
      break;
 8004498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_TIM_ConfigClockSource+0x1c>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e0b4      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x186>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004500:	d03e      	beq.n	8004580 <HAL_TIM_ConfigClockSource+0xd4>
 8004502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004506:	f200 8087 	bhi.w	8004618 <HAL_TIM_ConfigClockSource+0x16c>
 800450a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800450e:	f000 8086 	beq.w	800461e <HAL_TIM_ConfigClockSource+0x172>
 8004512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004516:	d87f      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x16c>
 8004518:	2b70      	cmp	r3, #112	@ 0x70
 800451a:	d01a      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0xa6>
 800451c:	2b70      	cmp	r3, #112	@ 0x70
 800451e:	d87b      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x16c>
 8004520:	2b60      	cmp	r3, #96	@ 0x60
 8004522:	d050      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004524:	2b60      	cmp	r3, #96	@ 0x60
 8004526:	d877      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x16c>
 8004528:	2b50      	cmp	r3, #80	@ 0x50
 800452a:	d03c      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0xfa>
 800452c:	2b50      	cmp	r3, #80	@ 0x50
 800452e:	d873      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b40      	cmp	r3, #64	@ 0x40
 8004532:	d058      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004534:	2b40      	cmp	r3, #64	@ 0x40
 8004536:	d86f      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b30      	cmp	r3, #48	@ 0x30
 800453a:	d064      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x15a>
 800453c:	2b30      	cmp	r3, #48	@ 0x30
 800453e:	d86b      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x16c>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d060      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x15a>
 8004544:	2b20      	cmp	r3, #32
 8004546:	d867      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d05c      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x15a>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d05a      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x15a>
 8004550:	e062      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004562:	f000 fafd 	bl	8004b60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	609a      	str	r2, [r3, #8]
      break;
 800457e:	e04f      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004590:	f000 fae6 	bl	8004b60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045a2:	609a      	str	r2, [r3, #8]
      break;
 80045a4:	e03c      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b2:	461a      	mov	r2, r3
 80045b4:	f000 fa5a 	bl	8004a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2150      	movs	r1, #80	@ 0x50
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fab3 	bl	8004b2a <TIM_ITRx_SetConfig>
      break;
 80045c4:	e02c      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045d2:	461a      	mov	r2, r3
 80045d4:	f000 fa79 	bl	8004aca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2160      	movs	r1, #96	@ 0x60
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 faa3 	bl	8004b2a <TIM_ITRx_SetConfig>
      break;
 80045e4:	e01c      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 fa3a 	bl	8004a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2140      	movs	r1, #64	@ 0x40
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fa93 	bl	8004b2a <TIM_ITRx_SetConfig>
      break;
 8004604:	e00c      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f000 fa8a 	bl	8004b2a <TIM_ITRx_SetConfig>
      break;
 8004616:	e003      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e000      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800461e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004630:	7bfb      	ldrb	r3, [r7, #15]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a3a      	ldr	r2, [pc, #232]	@ (8004738 <TIM_Base_SetConfig+0xfc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00f      	beq.n	8004674 <TIM_Base_SetConfig+0x38>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465a:	d00b      	beq.n	8004674 <TIM_Base_SetConfig+0x38>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a37      	ldr	r2, [pc, #220]	@ (800473c <TIM_Base_SetConfig+0x100>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_Base_SetConfig+0x38>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a36      	ldr	r2, [pc, #216]	@ (8004740 <TIM_Base_SetConfig+0x104>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_Base_SetConfig+0x38>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a35      	ldr	r2, [pc, #212]	@ (8004744 <TIM_Base_SetConfig+0x108>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d108      	bne.n	8004686 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a2b      	ldr	r2, [pc, #172]	@ (8004738 <TIM_Base_SetConfig+0xfc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01b      	beq.n	80046c6 <TIM_Base_SetConfig+0x8a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004694:	d017      	beq.n	80046c6 <TIM_Base_SetConfig+0x8a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a28      	ldr	r2, [pc, #160]	@ (800473c <TIM_Base_SetConfig+0x100>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <TIM_Base_SetConfig+0x8a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a27      	ldr	r2, [pc, #156]	@ (8004740 <TIM_Base_SetConfig+0x104>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00f      	beq.n	80046c6 <TIM_Base_SetConfig+0x8a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a26      	ldr	r2, [pc, #152]	@ (8004744 <TIM_Base_SetConfig+0x108>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <TIM_Base_SetConfig+0x8a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a25      	ldr	r2, [pc, #148]	@ (8004748 <TIM_Base_SetConfig+0x10c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <TIM_Base_SetConfig+0x8a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a24      	ldr	r2, [pc, #144]	@ (800474c <TIM_Base_SetConfig+0x110>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_Base_SetConfig+0x8a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a23      	ldr	r2, [pc, #140]	@ (8004750 <TIM_Base_SetConfig+0x114>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d108      	bne.n	80046d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004738 <TIM_Base_SetConfig+0xfc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d103      	bne.n	800470c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d105      	bne.n	800472a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f023 0201 	bic.w	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	611a      	str	r2, [r3, #16]
  }
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40010000 	.word	0x40010000
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40014000 	.word	0x40014000
 800474c:	40014400 	.word	0x40014400
 8004750:	40014800 	.word	0x40014800

08004754 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f023 0201 	bic.w	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0303 	bic.w	r3, r3, #3
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f023 0302 	bic.w	r3, r3, #2
 800479c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a1c      	ldr	r2, [pc, #112]	@ (800481c <TIM_OC1_SetConfig+0xc8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d10c      	bne.n	80047ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0308 	bic.w	r3, r3, #8
 80047b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f023 0304 	bic.w	r3, r3, #4
 80047c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a13      	ldr	r2, [pc, #76]	@ (800481c <TIM_OC1_SetConfig+0xc8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d111      	bne.n	80047f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40010000 	.word	0x40010000

08004820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f023 0210 	bic.w	r2, r3, #16
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004856:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0320 	bic.w	r3, r3, #32
 800486a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a1e      	ldr	r2, [pc, #120]	@ (80048f4 <TIM_OC2_SetConfig+0xd4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d10d      	bne.n	800489c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800489a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <TIM_OC2_SetConfig+0xd4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d113      	bne.n	80048cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	4313      	orrs	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000

080048f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0303 	bic.w	r3, r3, #3
 800492e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a1d      	ldr	r2, [pc, #116]	@ (80049c8 <TIM_OC3_SetConfig+0xd0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10d      	bne.n	8004972 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800495c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a14      	ldr	r2, [pc, #80]	@ (80049c8 <TIM_OC3_SetConfig+0xd0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d113      	bne.n	80049a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	621a      	str	r2, [r3, #32]
}
 80049bc:	bf00      	nop
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40010000 	.word	0x40010000

080049cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	031b      	lsls	r3, r3, #12
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a10      	ldr	r2, [pc, #64]	@ (8004a68 <TIM_OC4_SetConfig+0x9c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d109      	bne.n	8004a40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	019b      	lsls	r3, r3, #6
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000

08004a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f023 0201 	bic.w	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 030a 	bic.w	r3, r3, #10
 8004aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	621a      	str	r2, [r3, #32]
}
 8004abe:	bf00      	nop
 8004ac0:	371c      	adds	r7, #28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b087      	sub	sp, #28
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f023 0210 	bic.w	r2, r3, #16
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	031b      	lsls	r3, r3, #12
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	621a      	str	r2, [r3, #32]
}
 8004b1e:	bf00      	nop
 8004b20:	371c      	adds	r7, #28
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f043 0307 	orr.w	r3, r3, #7
 8004b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	609a      	str	r2, [r3, #8]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	021a      	lsls	r2, r3, #8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f003 031f 	and.w	r3, r3, #31
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1a      	ldr	r2, [r3, #32]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e050      	b.n	8004ca6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d018      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c50:	d013      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a18      	ldr	r2, [pc, #96]	@ (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a16      	ldr	r2, [pc, #88]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a15      	ldr	r2, [pc, #84]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a13      	ldr	r2, [pc, #76]	@ (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d10c      	bne.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40010000 	.word	0x40010000
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40000c00 	.word	0x40000c00
 8004cc4:	40014000 	.word	0x40014000

08004cc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e03d      	b.n	8004d60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e042      	b.n	8004e04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7fd fcf8 	bl	8002788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	@ 0x24
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fdbd 	bl	8005930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	@ 0x28
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	d175      	bne.n	8004f18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_UART_Transmit+0x2c>
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e06e      	b.n	8004f1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2221      	movs	r2, #33	@ 0x21
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e4a:	f7fd fd7d 	bl	8002948 <HAL_GetTick>
 8004e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	88fa      	ldrh	r2, [r7, #6]
 8004e5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e64:	d108      	bne.n	8004e78 <HAL_UART_Transmit+0x6c>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d104      	bne.n	8004e78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	61bb      	str	r3, [r7, #24]
 8004e76:	e003      	b.n	8004e80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e80:	e02e      	b.n	8004ee0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2180      	movs	r1, #128	@ 0x80
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fb1f 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e03a      	b.n	8004f1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10b      	bne.n	8004ec2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	3302      	adds	r3, #2
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	e007      	b.n	8004ed2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	781a      	ldrb	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1cb      	bne.n	8004e82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2140      	movs	r1, #64	@ 0x40
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 faeb 	bl	80054d0 <UART_WaitOnFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e006      	b.n	8004f1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e000      	b.n	8004f1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f18:	2302      	movs	r3, #2
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d112      	bne.n	8004f62 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_UART_Receive_IT+0x26>
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e00b      	b.n	8004f64 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f52:	88fb      	ldrh	r3, [r7, #6]
 8004f54:	461a      	mov	r2, r3
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fb12 	bl	8005582 <UART_Start_Receive_IT>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	e000      	b.n	8004f64 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f62:	2302      	movs	r3, #2
  }
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b0ba      	sub	sp, #232	@ 0xe8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x66>
 8004fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fbf2 	bl	80057b4 <UART_Receive_IT>
      return;
 8004fd0:	e25b      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 80de 	beq.w	8005198 <HAL_UART_IRQHandler+0x22c>
 8004fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80d1 	beq.w	8005198 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_UART_IRQHandler+0xae>
 8005002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	f043 0201 	orr.w	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00b      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
 8005026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005036:	f043 0202 	orr.w	r2, r3, #2
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800503e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <HAL_UART_IRQHandler+0xf6>
 800504a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <HAL_UART_IRQHandler+0x126>
 800506e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	d105      	bne.n	8005086 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800507a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508a:	f043 0208 	orr.w	r2, r3, #8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 81f2 	beq.w	8005480 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800509c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_UART_IRQHandler+0x14e>
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fb7d 	bl	80057b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b40      	cmp	r3, #64	@ 0x40
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <HAL_UART_IRQHandler+0x17a>
 80050de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d04f      	beq.n	8005186 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa85 	bl	80055f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f6:	2b40      	cmp	r3, #64	@ 0x40
 80050f8:	d141      	bne.n	800517e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3314      	adds	r3, #20
 8005100:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005126:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800512a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800513e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1d9      	bne.n	80050fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d013      	beq.n	8005176 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005152:	4a7e      	ldr	r2, [pc, #504]	@ (800534c <HAL_UART_IRQHandler+0x3e0>)
 8005154:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe f807 	bl	800316e <HAL_DMA_Abort_IT>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d016      	beq.n	8005194 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005170:	4610      	mov	r0, r2
 8005172:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005174:	e00e      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f994 	bl	80054a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	e00a      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f990 	bl	80054a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005184:	e006      	b.n	8005194 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f98c 	bl	80054a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005192:	e175      	b.n	8005480 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	bf00      	nop
    return;
 8005196:	e173      	b.n	8005480 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519c:	2b01      	cmp	r3, #1
 800519e:	f040 814f 	bne.w	8005440 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a6:	f003 0310 	and.w	r3, r3, #16
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8148 	beq.w	8005440 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8141 	beq.w	8005440 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051de:	2b40      	cmp	r3, #64	@ 0x40
 80051e0:	f040 80b6 	bne.w	8005350 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8145 	beq.w	8005484 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005202:	429a      	cmp	r2, r3
 8005204:	f080 813e 	bcs.w	8005484 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800520e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800521a:	f000 8088 	beq.w	800532e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	330c      	adds	r3, #12
 8005224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005234:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800523c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800524a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800524e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005256:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1d9      	bne.n	800521e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3314      	adds	r3, #20
 8005270:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800527a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3314      	adds	r3, #20
 800528a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800528e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005292:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005296:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e1      	bne.n	800526a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3314      	adds	r3, #20
 80052c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e3      	bne.n	80052a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005310:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005312:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005316:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800531e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e3      	bne.n	80052ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005328:	4618      	mov	r0, r3
 800532a:	f7fd feb0 	bl	800308e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800533c:	b29b      	uxth	r3, r3
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	b29b      	uxth	r3, r3
 8005342:	4619      	mov	r1, r3
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f8b7 	bl	80054b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800534a:	e09b      	b.n	8005484 <HAL_UART_IRQHandler+0x518>
 800534c:	080056bd 	.word	0x080056bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005358:	b29b      	uxth	r3, r3
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 808e 	beq.w	8005488 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800536c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8089 	beq.w	8005488 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800538c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800539a:	647a      	str	r2, [r7, #68]	@ 0x44
 800539c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e3      	bne.n	8005376 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	623b      	str	r3, [r7, #32]
   return(result);
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3314      	adds	r3, #20
 80053ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80053d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e3      	bne.n	80053ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	330c      	adds	r3, #12
 80053fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	60fb      	str	r3, [r7, #12]
   return(result);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0310 	bic.w	r3, r3, #16
 800540a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	330c      	adds	r3, #12
 8005414:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005418:	61fa      	str	r2, [r7, #28]
 800541a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	69b9      	ldr	r1, [r7, #24]
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	617b      	str	r3, [r7, #20]
   return(result);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e3      	bne.n	80053f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005432:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f83d 	bl	80054b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800543e:	e023      	b.n	8005488 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <HAL_UART_IRQHandler+0x4f4>
 800544c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f943 	bl	80056e4 <UART_Transmit_IT>
    return;
 800545e:	e014      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <HAL_UART_IRQHandler+0x51e>
 800546c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f983 	bl	8005784 <UART_EndTransmit_IT>
    return;
 800547e:	e004      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
    return;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
      return;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_UART_IRQHandler+0x51e>
      return;
 8005488:	bf00      	nop
  }
}
 800548a:	37e8      	adds	r7, #232	@ 0xe8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e0:	e03b      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d037      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fd fa2d 	bl	8002948 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	6a3a      	ldr	r2, [r7, #32]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <UART_WaitOnFlagUntilTimeout+0x30>
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e03a      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d023      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b80      	cmp	r3, #128	@ 0x80
 8005516:	d020      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b40      	cmp	r3, #64	@ 0x40
 800551c:	d01d      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b08      	cmp	r3, #8
 800552a:	d116      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f857 	bl	80055f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2208      	movs	r2, #8
 800554c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e00f      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	429a      	cmp	r2, r3
 8005576:	d0b4      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	4613      	mov	r3, r2
 800558e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2222      	movs	r2, #34	@ 0x22
 80055ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055c6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0201 	orr.w	r2, r2, #1
 80055d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0220 	orr.w	r2, r2, #32
 80055e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b095      	sub	sp, #84	@ 0x54
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800561e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005624:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800562c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e5      	bne.n	80055fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3314      	adds	r3, #20
 8005638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	61fb      	str	r3, [r7, #28]
   return(result);
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3314      	adds	r3, #20
 8005650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	2b01      	cmp	r3, #1
 800566c:	d119      	bne.n	80056a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	330c      	adds	r3, #12
 8005674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	60bb      	str	r3, [r7, #8]
   return(result);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f023 0310 	bic.w	r3, r3, #16
 8005684:	647b      	str	r3, [r7, #68]	@ 0x44
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800568e:	61ba      	str	r2, [r7, #24]
 8005690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6979      	ldr	r1, [r7, #20]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	613b      	str	r3, [r7, #16]
   return(result);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e5      	bne.n	800566e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056b0:	bf00      	nop
 80056b2:	3754      	adds	r7, #84	@ 0x54
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff fee4 	bl	80054a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b21      	cmp	r3, #33	@ 0x21
 80056f6:	d13e      	bne.n	8005776 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005700:	d114      	bne.n	800572c <UART_Transmit_IT+0x48>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d110      	bne.n	800572c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800571e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	1c9a      	adds	r2, r3, #2
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]
 800572a:	e008      	b.n	800573e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	1c59      	adds	r1, r3, #1
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6211      	str	r1, [r2, #32]
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29b      	uxth	r3, r3
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4619      	mov	r1, r3
 800574c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10f      	bne.n	8005772 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005760:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005770:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	e000      	b.n	8005778 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005776:	2302      	movs	r3, #2
  }
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800579a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fe73 	bl	8005490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08c      	sub	sp, #48	@ 0x30
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b22      	cmp	r3, #34	@ 0x22
 80057c6:	f040 80ae 	bne.w	8005926 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d2:	d117      	bne.n	8005804 <UART_Receive_IT+0x50>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d113      	bne.n	8005804 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fc:	1c9a      	adds	r2, r3, #2
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	629a      	str	r2, [r3, #40]	@ 0x28
 8005802:	e026      	b.n	8005852 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005816:	d007      	beq.n	8005828 <UART_Receive_IT+0x74>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <UART_Receive_IT+0x82>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	b2da      	uxtb	r2, r3
 8005830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e008      	b.n	8005848 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005842:	b2da      	uxtb	r2, r3
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29b      	uxth	r3, r3
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	4619      	mov	r1, r3
 8005860:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005862:	2b00      	cmp	r3, #0
 8005864:	d15d      	bne.n	8005922 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0220 	bic.w	r2, r2, #32
 8005874:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005884:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695a      	ldr	r2, [r3, #20]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d135      	bne.n	8005918 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	613b      	str	r3, [r7, #16]
   return(result);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f023 0310 	bic.w	r3, r3, #16
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d2:	623a      	str	r2, [r7, #32]
 80058d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	69f9      	ldr	r1, [r7, #28]
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e5      	bne.n	80058b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0310 	and.w	r3, r3, #16
 80058f0:	2b10      	cmp	r3, #16
 80058f2:	d10a      	bne.n	800590a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7ff fdd1 	bl	80054b8 <HAL_UARTEx_RxEventCallback>
 8005916:	e002      	b.n	800591e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7fb fcef 	bl	80012fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e002      	b.n	8005928 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e000      	b.n	8005928 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005926:	2302      	movs	r3, #2
  }
}
 8005928:	4618      	mov	r0, r3
 800592a:	3730      	adds	r7, #48	@ 0x30
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005934:	b0c0      	sub	sp, #256	@ 0x100
 8005936:	af00      	add	r7, sp, #0
 8005938:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	68d9      	ldr	r1, [r3, #12]
 800594e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	ea40 0301 	orr.w	r3, r0, r1
 8005958:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	431a      	orrs	r2, r3
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	431a      	orrs	r2, r3
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005988:	f021 010c 	bic.w	r1, r1, #12
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005996:	430b      	orrs	r3, r1
 8005998:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800599a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059aa:	6999      	ldr	r1, [r3, #24]
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	ea40 0301 	orr.w	r3, r0, r1
 80059b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	4b8f      	ldr	r3, [pc, #572]	@ (8005bfc <UART_SetConfig+0x2cc>)
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d005      	beq.n	80059d0 <UART_SetConfig+0xa0>
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005c00 <UART_SetConfig+0x2d0>)
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d104      	bne.n	80059da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059d0:	f7fe fb22 	bl	8004018 <HAL_RCC_GetPCLK2Freq>
 80059d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059d8:	e003      	b.n	80059e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059da:	f7fe fb09 	bl	8003ff0 <HAL_RCC_GetPCLK1Freq>
 80059de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ec:	f040 810c 	bne.w	8005c08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f4:	2200      	movs	r2, #0
 80059f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a02:	4622      	mov	r2, r4
 8005a04:	462b      	mov	r3, r5
 8005a06:	1891      	adds	r1, r2, r2
 8005a08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a0a:	415b      	adcs	r3, r3
 8005a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a12:	4621      	mov	r1, r4
 8005a14:	eb12 0801 	adds.w	r8, r2, r1
 8005a18:	4629      	mov	r1, r5
 8005a1a:	eb43 0901 	adc.w	r9, r3, r1
 8005a1e:	f04f 0200 	mov.w	r2, #0
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a32:	4690      	mov	r8, r2
 8005a34:	4699      	mov	r9, r3
 8005a36:	4623      	mov	r3, r4
 8005a38:	eb18 0303 	adds.w	r3, r8, r3
 8005a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a40:	462b      	mov	r3, r5
 8005a42:	eb49 0303 	adc.w	r3, r9, r3
 8005a46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a5e:	460b      	mov	r3, r1
 8005a60:	18db      	adds	r3, r3, r3
 8005a62:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a64:	4613      	mov	r3, r2
 8005a66:	eb42 0303 	adc.w	r3, r2, r3
 8005a6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a74:	f7fb f910 	bl	8000c98 <__aeabi_uldivmod>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4b61      	ldr	r3, [pc, #388]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	011c      	lsls	r4, r3, #4
 8005a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a98:	4642      	mov	r2, r8
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	1891      	adds	r1, r2, r2
 8005a9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005aa0:	415b      	adcs	r3, r3
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	eb12 0a01 	adds.w	sl, r2, r1
 8005aae:	4649      	mov	r1, r9
 8005ab0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ac0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ac4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ac8:	4692      	mov	sl, r2
 8005aca:	469b      	mov	fp, r3
 8005acc:	4643      	mov	r3, r8
 8005ace:	eb1a 0303 	adds.w	r3, sl, r3
 8005ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8005adc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005aec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005af0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005af4:	460b      	mov	r3, r1
 8005af6:	18db      	adds	r3, r3, r3
 8005af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005afa:	4613      	mov	r3, r2
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b0a:	f7fb f8c5 	bl	8000c98 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	4b3b      	ldr	r3, [pc, #236]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005b16:	fba3 2301 	umull	r2, r3, r3, r1
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	2264      	movs	r2, #100	@ 0x64
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
 8005b22:	1acb      	subs	r3, r1, r3
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b2a:	4b36      	ldr	r3, [pc, #216]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005b2c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b30:	095b      	lsrs	r3, r3, #5
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b38:	441c      	add	r4, r3
 8005b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	1891      	adds	r1, r2, r2
 8005b52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b54:	415b      	adcs	r3, r3
 8005b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b5c:	4641      	mov	r1, r8
 8005b5e:	1851      	adds	r1, r2, r1
 8005b60:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b62:	4649      	mov	r1, r9
 8005b64:	414b      	adcs	r3, r1
 8005b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b68:	f04f 0200 	mov.w	r2, #0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b74:	4659      	mov	r1, fp
 8005b76:	00cb      	lsls	r3, r1, #3
 8005b78:	4651      	mov	r1, sl
 8005b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b7e:	4651      	mov	r1, sl
 8005b80:	00ca      	lsls	r2, r1, #3
 8005b82:	4610      	mov	r0, r2
 8005b84:	4619      	mov	r1, r3
 8005b86:	4603      	mov	r3, r0
 8005b88:	4642      	mov	r2, r8
 8005b8a:	189b      	adds	r3, r3, r2
 8005b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b90:	464b      	mov	r3, r9
 8005b92:	460a      	mov	r2, r1
 8005b94:	eb42 0303 	adc.w	r3, r2, r3
 8005b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ba8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	18db      	adds	r3, r3, r3
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	eb42 0303 	adc.w	r3, r2, r3
 8005bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bc6:	f7fb f867 	bl	8000c98 <__aeabi_uldivmod>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4b0d      	ldr	r3, [pc, #52]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	2164      	movs	r1, #100	@ 0x64
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	3332      	adds	r3, #50	@ 0x32
 8005be2:	4a08      	ldr	r2, [pc, #32]	@ (8005c04 <UART_SetConfig+0x2d4>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	f003 0207 	and.w	r2, r3, #7
 8005bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4422      	add	r2, r4
 8005bf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bf8:	e106      	b.n	8005e08 <UART_SetConfig+0x4d8>
 8005bfa:	bf00      	nop
 8005bfc:	40011000 	.word	0x40011000
 8005c00:	40011400 	.word	0x40011400
 8005c04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	464b      	mov	r3, r9
 8005c1e:	1891      	adds	r1, r2, r2
 8005c20:	6239      	str	r1, [r7, #32]
 8005c22:	415b      	adcs	r3, r3
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c2a:	4641      	mov	r1, r8
 8005c2c:	1854      	adds	r4, r2, r1
 8005c2e:	4649      	mov	r1, r9
 8005c30:	eb43 0501 	adc.w	r5, r3, r1
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	00eb      	lsls	r3, r5, #3
 8005c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c42:	00e2      	lsls	r2, r4, #3
 8005c44:	4614      	mov	r4, r2
 8005c46:	461d      	mov	r5, r3
 8005c48:	4643      	mov	r3, r8
 8005c4a:	18e3      	adds	r3, r4, r3
 8005c4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c50:	464b      	mov	r3, r9
 8005c52:	eb45 0303 	adc.w	r3, r5, r3
 8005c56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c76:	4629      	mov	r1, r5
 8005c78:	008b      	lsls	r3, r1, #2
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c80:	4621      	mov	r1, r4
 8005c82:	008a      	lsls	r2, r1, #2
 8005c84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c88:	f7fb f806 	bl	8000c98 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4b60      	ldr	r3, [pc, #384]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005c92:	fba3 2302 	umull	r2, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	011c      	lsls	r4, r3, #4
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ca4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ca8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	61b9      	str	r1, [r7, #24]
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	61fb      	str	r3, [r7, #28]
 8005cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	1851      	adds	r1, r2, r1
 8005cc0:	6139      	str	r1, [r7, #16]
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	414b      	adcs	r3, r1
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cd4:	4659      	mov	r1, fp
 8005cd6:	00cb      	lsls	r3, r1, #3
 8005cd8:	4651      	mov	r1, sl
 8005cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cde:	4651      	mov	r1, sl
 8005ce0:	00ca      	lsls	r2, r1, #3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4642      	mov	r2, r8
 8005cea:	189b      	adds	r3, r3, r2
 8005cec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	460a      	mov	r2, r1
 8005cf4:	eb42 0303 	adc.w	r3, r2, r3
 8005cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d06:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d14:	4649      	mov	r1, r9
 8005d16:	008b      	lsls	r3, r1, #2
 8005d18:	4641      	mov	r1, r8
 8005d1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d1e:	4641      	mov	r1, r8
 8005d20:	008a      	lsls	r2, r1, #2
 8005d22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d26:	f7fa ffb7 	bl	8000c98 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4b38      	ldr	r3, [pc, #224]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005d32:	fba3 2301 	umull	r2, r3, r3, r1
 8005d36:	095b      	lsrs	r3, r3, #5
 8005d38:	2264      	movs	r2, #100	@ 0x64
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	1acb      	subs	r3, r1, r3
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	3332      	adds	r3, #50	@ 0x32
 8005d44:	4a33      	ldr	r2, [pc, #204]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d50:	441c      	add	r4, r3
 8005d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d56:	2200      	movs	r2, #0
 8005d58:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d70:	4641      	mov	r1, r8
 8005d72:	1851      	adds	r1, r2, r1
 8005d74:	6039      	str	r1, [r7, #0]
 8005d76:	4649      	mov	r1, r9
 8005d78:	414b      	adcs	r3, r1
 8005d7a:	607b      	str	r3, [r7, #4]
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d88:	4659      	mov	r1, fp
 8005d8a:	00cb      	lsls	r3, r1, #3
 8005d8c:	4651      	mov	r1, sl
 8005d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d92:	4651      	mov	r1, sl
 8005d94:	00ca      	lsls	r2, r1, #3
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	189b      	adds	r3, r3, r2
 8005da0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005da2:	464b      	mov	r3, r9
 8005da4:	460a      	mov	r2, r1
 8005da6:	eb42 0303 	adc.w	r3, r2, r3
 8005daa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005db6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005dc4:	4649      	mov	r1, r9
 8005dc6:	008b      	lsls	r3, r1, #2
 8005dc8:	4641      	mov	r1, r8
 8005dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dce:	4641      	mov	r1, r8
 8005dd0:	008a      	lsls	r2, r1, #2
 8005dd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dd6:	f7fa ff5f 	bl	8000c98 <__aeabi_uldivmod>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4b0d      	ldr	r3, [pc, #52]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	@ 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	3332      	adds	r3, #50	@ 0x32
 8005df2:	4a08      	ldr	r2, [pc, #32]	@ (8005e14 <UART_SetConfig+0x4e4>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f003 020f 	and.w	r2, r3, #15
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4422      	add	r2, r4
 8005e06:	609a      	str	r2, [r3, #8]
}
 8005e08:	bf00      	nop
 8005e0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e14:	51eb851f 	.word	0x51eb851f

08005e18 <atof>:
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f000 be0b 	b.w	8006a34 <strtod>

08005e1e <sulp>:
 8005e1e:	b570      	push	{r4, r5, r6, lr}
 8005e20:	4604      	mov	r4, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	ec45 4b10 	vmov	d0, r4, r5
 8005e28:	4616      	mov	r6, r2
 8005e2a:	f003 fd35 	bl	8009898 <__ulp>
 8005e2e:	ec51 0b10 	vmov	r0, r1, d0
 8005e32:	b17e      	cbz	r6, 8005e54 <sulp+0x36>
 8005e34:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e38:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dd09      	ble.n	8005e54 <sulp+0x36>
 8005e40:	051b      	lsls	r3, r3, #20
 8005e42:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005e46:	2400      	movs	r4, #0
 8005e48:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	462b      	mov	r3, r5
 8005e50:	f7fa fbda 	bl	8000608 <__aeabi_dmul>
 8005e54:	ec41 0b10 	vmov	d0, r0, r1
 8005e58:	bd70      	pop	{r4, r5, r6, pc}
 8005e5a:	0000      	movs	r0, r0
 8005e5c:	0000      	movs	r0, r0
	...

08005e60 <_strtod_l>:
 8005e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e64:	b09f      	sub	sp, #124	@ 0x7c
 8005e66:	460c      	mov	r4, r1
 8005e68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005e6e:	9005      	str	r0, [sp, #20]
 8005e70:	f04f 0a00 	mov.w	sl, #0
 8005e74:	f04f 0b00 	mov.w	fp, #0
 8005e78:	460a      	mov	r2, r1
 8005e7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e7c:	7811      	ldrb	r1, [r2, #0]
 8005e7e:	292b      	cmp	r1, #43	@ 0x2b
 8005e80:	d04a      	beq.n	8005f18 <_strtod_l+0xb8>
 8005e82:	d838      	bhi.n	8005ef6 <_strtod_l+0x96>
 8005e84:	290d      	cmp	r1, #13
 8005e86:	d832      	bhi.n	8005eee <_strtod_l+0x8e>
 8005e88:	2908      	cmp	r1, #8
 8005e8a:	d832      	bhi.n	8005ef2 <_strtod_l+0x92>
 8005e8c:	2900      	cmp	r1, #0
 8005e8e:	d03b      	beq.n	8005f08 <_strtod_l+0xa8>
 8005e90:	2200      	movs	r2, #0
 8005e92:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005e94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005e96:	782a      	ldrb	r2, [r5, #0]
 8005e98:	2a30      	cmp	r2, #48	@ 0x30
 8005e9a:	f040 80b3 	bne.w	8006004 <_strtod_l+0x1a4>
 8005e9e:	786a      	ldrb	r2, [r5, #1]
 8005ea0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ea4:	2a58      	cmp	r2, #88	@ 0x58
 8005ea6:	d16e      	bne.n	8005f86 <_strtod_l+0x126>
 8005ea8:	9302      	str	r3, [sp, #8]
 8005eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	ab1a      	add	r3, sp, #104	@ 0x68
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4a8e      	ldr	r2, [pc, #568]	@ (80060ec <_strtod_l+0x28c>)
 8005eb4:	9805      	ldr	r0, [sp, #20]
 8005eb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005eb8:	a919      	add	r1, sp, #100	@ 0x64
 8005eba:	f002 fddf 	bl	8008a7c <__gethex>
 8005ebe:	f010 060f 	ands.w	r6, r0, #15
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	d005      	beq.n	8005ed2 <_strtod_l+0x72>
 8005ec6:	2e06      	cmp	r6, #6
 8005ec8:	d128      	bne.n	8005f1c <_strtod_l+0xbc>
 8005eca:	3501      	adds	r5, #1
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9519      	str	r5, [sp, #100]	@ 0x64
 8005ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ed2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f040 858e 	bne.w	80069f6 <_strtod_l+0xb96>
 8005eda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005edc:	b1cb      	cbz	r3, 8005f12 <_strtod_l+0xb2>
 8005ede:	4652      	mov	r2, sl
 8005ee0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005ee4:	ec43 2b10 	vmov	d0, r2, r3
 8005ee8:	b01f      	add	sp, #124	@ 0x7c
 8005eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eee:	2920      	cmp	r1, #32
 8005ef0:	d1ce      	bne.n	8005e90 <_strtod_l+0x30>
 8005ef2:	3201      	adds	r2, #1
 8005ef4:	e7c1      	b.n	8005e7a <_strtod_l+0x1a>
 8005ef6:	292d      	cmp	r1, #45	@ 0x2d
 8005ef8:	d1ca      	bne.n	8005e90 <_strtod_l+0x30>
 8005efa:	2101      	movs	r1, #1
 8005efc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005efe:	1c51      	adds	r1, r2, #1
 8005f00:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f02:	7852      	ldrb	r2, [r2, #1]
 8005f04:	2a00      	cmp	r2, #0
 8005f06:	d1c5      	bne.n	8005e94 <_strtod_l+0x34>
 8005f08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f0a:	9419      	str	r4, [sp, #100]	@ 0x64
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 8570 	bne.w	80069f2 <_strtod_l+0xb92>
 8005f12:	4652      	mov	r2, sl
 8005f14:	465b      	mov	r3, fp
 8005f16:	e7e5      	b.n	8005ee4 <_strtod_l+0x84>
 8005f18:	2100      	movs	r1, #0
 8005f1a:	e7ef      	b.n	8005efc <_strtod_l+0x9c>
 8005f1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005f1e:	b13a      	cbz	r2, 8005f30 <_strtod_l+0xd0>
 8005f20:	2135      	movs	r1, #53	@ 0x35
 8005f22:	a81c      	add	r0, sp, #112	@ 0x70
 8005f24:	f003 fdb2 	bl	8009a8c <__copybits>
 8005f28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f2a:	9805      	ldr	r0, [sp, #20]
 8005f2c:	f003 f980 	bl	8009230 <_Bfree>
 8005f30:	3e01      	subs	r6, #1
 8005f32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005f34:	2e04      	cmp	r6, #4
 8005f36:	d806      	bhi.n	8005f46 <_strtod_l+0xe6>
 8005f38:	e8df f006 	tbb	[pc, r6]
 8005f3c:	201d0314 	.word	0x201d0314
 8005f40:	14          	.byte	0x14
 8005f41:	00          	.byte	0x00
 8005f42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005f46:	05e1      	lsls	r1, r4, #23
 8005f48:	bf48      	it	mi
 8005f4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005f4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f52:	0d1b      	lsrs	r3, r3, #20
 8005f54:	051b      	lsls	r3, r3, #20
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1bb      	bne.n	8005ed2 <_strtod_l+0x72>
 8005f5a:	f001 fe29 	bl	8007bb0 <__errno>
 8005f5e:	2322      	movs	r3, #34	@ 0x22
 8005f60:	6003      	str	r3, [r0, #0]
 8005f62:	e7b6      	b.n	8005ed2 <_strtod_l+0x72>
 8005f64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005f68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005f6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005f74:	e7e7      	b.n	8005f46 <_strtod_l+0xe6>
 8005f76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80060f4 <_strtod_l+0x294>
 8005f7a:	e7e4      	b.n	8005f46 <_strtod_l+0xe6>
 8005f7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005f80:	f04f 3aff 	mov.w	sl, #4294967295
 8005f84:	e7df      	b.n	8005f46 <_strtod_l+0xe6>
 8005f86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	2b30      	cmp	r3, #48	@ 0x30
 8005f90:	d0f9      	beq.n	8005f86 <_strtod_l+0x126>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d09d      	beq.n	8005ed2 <_strtod_l+0x72>
 8005f96:	2301      	movs	r3, #1
 8005f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9308      	str	r3, [sp, #32]
 8005fa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fa4:	461f      	mov	r7, r3
 8005fa6:	220a      	movs	r2, #10
 8005fa8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005faa:	7805      	ldrb	r5, [r0, #0]
 8005fac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005fb0:	b2d9      	uxtb	r1, r3
 8005fb2:	2909      	cmp	r1, #9
 8005fb4:	d928      	bls.n	8006008 <_strtod_l+0x1a8>
 8005fb6:	494e      	ldr	r1, [pc, #312]	@ (80060f0 <_strtod_l+0x290>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f001 fd40 	bl	8007a3e <strncmp>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d032      	beq.n	8006028 <_strtod_l+0x1c8>
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4681      	mov	r9, r0
 8005fc8:	463d      	mov	r5, r7
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2a65      	cmp	r2, #101	@ 0x65
 8005fce:	d001      	beq.n	8005fd4 <_strtod_l+0x174>
 8005fd0:	2a45      	cmp	r2, #69	@ 0x45
 8005fd2:	d114      	bne.n	8005ffe <_strtod_l+0x19e>
 8005fd4:	b91d      	cbnz	r5, 8005fde <_strtod_l+0x17e>
 8005fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fd8:	4302      	orrs	r2, r0
 8005fda:	d095      	beq.n	8005f08 <_strtod_l+0xa8>
 8005fdc:	2500      	movs	r5, #0
 8005fde:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005fe0:	1c62      	adds	r2, r4, #1
 8005fe2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fe4:	7862      	ldrb	r2, [r4, #1]
 8005fe6:	2a2b      	cmp	r2, #43	@ 0x2b
 8005fe8:	d077      	beq.n	80060da <_strtod_l+0x27a>
 8005fea:	2a2d      	cmp	r2, #45	@ 0x2d
 8005fec:	d07b      	beq.n	80060e6 <_strtod_l+0x286>
 8005fee:	f04f 0c00 	mov.w	ip, #0
 8005ff2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005ff6:	2909      	cmp	r1, #9
 8005ff8:	f240 8082 	bls.w	8006100 <_strtod_l+0x2a0>
 8005ffc:	9419      	str	r4, [sp, #100]	@ 0x64
 8005ffe:	f04f 0800 	mov.w	r8, #0
 8006002:	e0a2      	b.n	800614a <_strtod_l+0x2ea>
 8006004:	2300      	movs	r3, #0
 8006006:	e7c7      	b.n	8005f98 <_strtod_l+0x138>
 8006008:	2f08      	cmp	r7, #8
 800600a:	bfd5      	itete	le
 800600c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800600e:	9908      	ldrgt	r1, [sp, #32]
 8006010:	fb02 3301 	mlale	r3, r2, r1, r3
 8006014:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006018:	f100 0001 	add.w	r0, r0, #1
 800601c:	bfd4      	ite	le
 800601e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006020:	9308      	strgt	r3, [sp, #32]
 8006022:	3701      	adds	r7, #1
 8006024:	9019      	str	r0, [sp, #100]	@ 0x64
 8006026:	e7bf      	b.n	8005fa8 <_strtod_l+0x148>
 8006028:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	9219      	str	r2, [sp, #100]	@ 0x64
 800602e:	785a      	ldrb	r2, [r3, #1]
 8006030:	b37f      	cbz	r7, 8006092 <_strtod_l+0x232>
 8006032:	4681      	mov	r9, r0
 8006034:	463d      	mov	r5, r7
 8006036:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800603a:	2b09      	cmp	r3, #9
 800603c:	d912      	bls.n	8006064 <_strtod_l+0x204>
 800603e:	2301      	movs	r3, #1
 8006040:	e7c4      	b.n	8005fcc <_strtod_l+0x16c>
 8006042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	9219      	str	r2, [sp, #100]	@ 0x64
 8006048:	785a      	ldrb	r2, [r3, #1]
 800604a:	3001      	adds	r0, #1
 800604c:	2a30      	cmp	r2, #48	@ 0x30
 800604e:	d0f8      	beq.n	8006042 <_strtod_l+0x1e2>
 8006050:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006054:	2b08      	cmp	r3, #8
 8006056:	f200 84d3 	bhi.w	8006a00 <_strtod_l+0xba0>
 800605a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800605c:	930c      	str	r3, [sp, #48]	@ 0x30
 800605e:	4681      	mov	r9, r0
 8006060:	2000      	movs	r0, #0
 8006062:	4605      	mov	r5, r0
 8006064:	3a30      	subs	r2, #48	@ 0x30
 8006066:	f100 0301 	add.w	r3, r0, #1
 800606a:	d02a      	beq.n	80060c2 <_strtod_l+0x262>
 800606c:	4499      	add	r9, r3
 800606e:	eb00 0c05 	add.w	ip, r0, r5
 8006072:	462b      	mov	r3, r5
 8006074:	210a      	movs	r1, #10
 8006076:	4563      	cmp	r3, ip
 8006078:	d10d      	bne.n	8006096 <_strtod_l+0x236>
 800607a:	1c69      	adds	r1, r5, #1
 800607c:	4401      	add	r1, r0
 800607e:	4428      	add	r0, r5
 8006080:	2808      	cmp	r0, #8
 8006082:	dc16      	bgt.n	80060b2 <_strtod_l+0x252>
 8006084:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006086:	230a      	movs	r3, #10
 8006088:	fb03 2300 	mla	r3, r3, r0, r2
 800608c:	930a      	str	r3, [sp, #40]	@ 0x28
 800608e:	2300      	movs	r3, #0
 8006090:	e018      	b.n	80060c4 <_strtod_l+0x264>
 8006092:	4638      	mov	r0, r7
 8006094:	e7da      	b.n	800604c <_strtod_l+0x1ec>
 8006096:	2b08      	cmp	r3, #8
 8006098:	f103 0301 	add.w	r3, r3, #1
 800609c:	dc03      	bgt.n	80060a6 <_strtod_l+0x246>
 800609e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80060a0:	434e      	muls	r6, r1
 80060a2:	960a      	str	r6, [sp, #40]	@ 0x28
 80060a4:	e7e7      	b.n	8006076 <_strtod_l+0x216>
 80060a6:	2b10      	cmp	r3, #16
 80060a8:	bfde      	ittt	le
 80060aa:	9e08      	ldrle	r6, [sp, #32]
 80060ac:	434e      	mulle	r6, r1
 80060ae:	9608      	strle	r6, [sp, #32]
 80060b0:	e7e1      	b.n	8006076 <_strtod_l+0x216>
 80060b2:	280f      	cmp	r0, #15
 80060b4:	dceb      	bgt.n	800608e <_strtod_l+0x22e>
 80060b6:	9808      	ldr	r0, [sp, #32]
 80060b8:	230a      	movs	r3, #10
 80060ba:	fb03 2300 	mla	r3, r3, r0, r2
 80060be:	9308      	str	r3, [sp, #32]
 80060c0:	e7e5      	b.n	800608e <_strtod_l+0x22e>
 80060c2:	4629      	mov	r1, r5
 80060c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060c6:	1c50      	adds	r0, r2, #1
 80060c8:	9019      	str	r0, [sp, #100]	@ 0x64
 80060ca:	7852      	ldrb	r2, [r2, #1]
 80060cc:	4618      	mov	r0, r3
 80060ce:	460d      	mov	r5, r1
 80060d0:	e7b1      	b.n	8006036 <_strtod_l+0x1d6>
 80060d2:	f04f 0900 	mov.w	r9, #0
 80060d6:	2301      	movs	r3, #1
 80060d8:	e77d      	b.n	8005fd6 <_strtod_l+0x176>
 80060da:	f04f 0c00 	mov.w	ip, #0
 80060de:	1ca2      	adds	r2, r4, #2
 80060e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80060e2:	78a2      	ldrb	r2, [r4, #2]
 80060e4:	e785      	b.n	8005ff2 <_strtod_l+0x192>
 80060e6:	f04f 0c01 	mov.w	ip, #1
 80060ea:	e7f8      	b.n	80060de <_strtod_l+0x27e>
 80060ec:	0800cbc8 	.word	0x0800cbc8
 80060f0:	0800cbb0 	.word	0x0800cbb0
 80060f4:	7ff00000 	.word	0x7ff00000
 80060f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060fa:	1c51      	adds	r1, r2, #1
 80060fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80060fe:	7852      	ldrb	r2, [r2, #1]
 8006100:	2a30      	cmp	r2, #48	@ 0x30
 8006102:	d0f9      	beq.n	80060f8 <_strtod_l+0x298>
 8006104:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006108:	2908      	cmp	r1, #8
 800610a:	f63f af78 	bhi.w	8005ffe <_strtod_l+0x19e>
 800610e:	3a30      	subs	r2, #48	@ 0x30
 8006110:	920e      	str	r2, [sp, #56]	@ 0x38
 8006112:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006114:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006116:	f04f 080a 	mov.w	r8, #10
 800611a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800611c:	1c56      	adds	r6, r2, #1
 800611e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006120:	7852      	ldrb	r2, [r2, #1]
 8006122:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006126:	f1be 0f09 	cmp.w	lr, #9
 800612a:	d939      	bls.n	80061a0 <_strtod_l+0x340>
 800612c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800612e:	1a76      	subs	r6, r6, r1
 8006130:	2e08      	cmp	r6, #8
 8006132:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006136:	dc03      	bgt.n	8006140 <_strtod_l+0x2e0>
 8006138:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800613a:	4588      	cmp	r8, r1
 800613c:	bfa8      	it	ge
 800613e:	4688      	movge	r8, r1
 8006140:	f1bc 0f00 	cmp.w	ip, #0
 8006144:	d001      	beq.n	800614a <_strtod_l+0x2ea>
 8006146:	f1c8 0800 	rsb	r8, r8, #0
 800614a:	2d00      	cmp	r5, #0
 800614c:	d14e      	bne.n	80061ec <_strtod_l+0x38c>
 800614e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006150:	4308      	orrs	r0, r1
 8006152:	f47f aebe 	bne.w	8005ed2 <_strtod_l+0x72>
 8006156:	2b00      	cmp	r3, #0
 8006158:	f47f aed6 	bne.w	8005f08 <_strtod_l+0xa8>
 800615c:	2a69      	cmp	r2, #105	@ 0x69
 800615e:	d028      	beq.n	80061b2 <_strtod_l+0x352>
 8006160:	dc25      	bgt.n	80061ae <_strtod_l+0x34e>
 8006162:	2a49      	cmp	r2, #73	@ 0x49
 8006164:	d025      	beq.n	80061b2 <_strtod_l+0x352>
 8006166:	2a4e      	cmp	r2, #78	@ 0x4e
 8006168:	f47f aece 	bne.w	8005f08 <_strtod_l+0xa8>
 800616c:	499b      	ldr	r1, [pc, #620]	@ (80063dc <_strtod_l+0x57c>)
 800616e:	a819      	add	r0, sp, #100	@ 0x64
 8006170:	f002 fea6 	bl	8008ec0 <__match>
 8006174:	2800      	cmp	r0, #0
 8006176:	f43f aec7 	beq.w	8005f08 <_strtod_l+0xa8>
 800617a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b28      	cmp	r3, #40	@ 0x28
 8006180:	d12e      	bne.n	80061e0 <_strtod_l+0x380>
 8006182:	4997      	ldr	r1, [pc, #604]	@ (80063e0 <_strtod_l+0x580>)
 8006184:	aa1c      	add	r2, sp, #112	@ 0x70
 8006186:	a819      	add	r0, sp, #100	@ 0x64
 8006188:	f002 feae 	bl	8008ee8 <__hexnan>
 800618c:	2805      	cmp	r0, #5
 800618e:	d127      	bne.n	80061e0 <_strtod_l+0x380>
 8006190:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006192:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006196:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800619a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800619e:	e698      	b.n	8005ed2 <_strtod_l+0x72>
 80061a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80061a2:	fb08 2101 	mla	r1, r8, r1, r2
 80061a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80061aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80061ac:	e7b5      	b.n	800611a <_strtod_l+0x2ba>
 80061ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80061b0:	e7da      	b.n	8006168 <_strtod_l+0x308>
 80061b2:	498c      	ldr	r1, [pc, #560]	@ (80063e4 <_strtod_l+0x584>)
 80061b4:	a819      	add	r0, sp, #100	@ 0x64
 80061b6:	f002 fe83 	bl	8008ec0 <__match>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f43f aea4 	beq.w	8005f08 <_strtod_l+0xa8>
 80061c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061c2:	4989      	ldr	r1, [pc, #548]	@ (80063e8 <_strtod_l+0x588>)
 80061c4:	3b01      	subs	r3, #1
 80061c6:	a819      	add	r0, sp, #100	@ 0x64
 80061c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80061ca:	f002 fe79 	bl	8008ec0 <__match>
 80061ce:	b910      	cbnz	r0, 80061d6 <_strtod_l+0x376>
 80061d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061d2:	3301      	adds	r3, #1
 80061d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80061d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80063f8 <_strtod_l+0x598>
 80061da:	f04f 0a00 	mov.w	sl, #0
 80061de:	e678      	b.n	8005ed2 <_strtod_l+0x72>
 80061e0:	4882      	ldr	r0, [pc, #520]	@ (80063ec <_strtod_l+0x58c>)
 80061e2:	f001 fd21 	bl	8007c28 <nan>
 80061e6:	ec5b ab10 	vmov	sl, fp, d0
 80061ea:	e672      	b.n	8005ed2 <_strtod_l+0x72>
 80061ec:	eba8 0309 	sub.w	r3, r8, r9
 80061f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80061f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061f4:	2f00      	cmp	r7, #0
 80061f6:	bf08      	it	eq
 80061f8:	462f      	moveq	r7, r5
 80061fa:	2d10      	cmp	r5, #16
 80061fc:	462c      	mov	r4, r5
 80061fe:	bfa8      	it	ge
 8006200:	2410      	movge	r4, #16
 8006202:	f7fa f987 	bl	8000514 <__aeabi_ui2d>
 8006206:	2d09      	cmp	r5, #9
 8006208:	4682      	mov	sl, r0
 800620a:	468b      	mov	fp, r1
 800620c:	dc13      	bgt.n	8006236 <_strtod_l+0x3d6>
 800620e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006210:	2b00      	cmp	r3, #0
 8006212:	f43f ae5e 	beq.w	8005ed2 <_strtod_l+0x72>
 8006216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006218:	dd78      	ble.n	800630c <_strtod_l+0x4ac>
 800621a:	2b16      	cmp	r3, #22
 800621c:	dc5f      	bgt.n	80062de <_strtod_l+0x47e>
 800621e:	4974      	ldr	r1, [pc, #464]	@ (80063f0 <_strtod_l+0x590>)
 8006220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006224:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006228:	4652      	mov	r2, sl
 800622a:	465b      	mov	r3, fp
 800622c:	f7fa f9ec 	bl	8000608 <__aeabi_dmul>
 8006230:	4682      	mov	sl, r0
 8006232:	468b      	mov	fp, r1
 8006234:	e64d      	b.n	8005ed2 <_strtod_l+0x72>
 8006236:	4b6e      	ldr	r3, [pc, #440]	@ (80063f0 <_strtod_l+0x590>)
 8006238:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800623c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006240:	f7fa f9e2 	bl	8000608 <__aeabi_dmul>
 8006244:	4682      	mov	sl, r0
 8006246:	9808      	ldr	r0, [sp, #32]
 8006248:	468b      	mov	fp, r1
 800624a:	f7fa f963 	bl	8000514 <__aeabi_ui2d>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4650      	mov	r0, sl
 8006254:	4659      	mov	r1, fp
 8006256:	f7fa f821 	bl	800029c <__adddf3>
 800625a:	2d0f      	cmp	r5, #15
 800625c:	4682      	mov	sl, r0
 800625e:	468b      	mov	fp, r1
 8006260:	ddd5      	ble.n	800620e <_strtod_l+0x3ae>
 8006262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006264:	1b2c      	subs	r4, r5, r4
 8006266:	441c      	add	r4, r3
 8006268:	2c00      	cmp	r4, #0
 800626a:	f340 8096 	ble.w	800639a <_strtod_l+0x53a>
 800626e:	f014 030f 	ands.w	r3, r4, #15
 8006272:	d00a      	beq.n	800628a <_strtod_l+0x42a>
 8006274:	495e      	ldr	r1, [pc, #376]	@ (80063f0 <_strtod_l+0x590>)
 8006276:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800627a:	4652      	mov	r2, sl
 800627c:	465b      	mov	r3, fp
 800627e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006282:	f7fa f9c1 	bl	8000608 <__aeabi_dmul>
 8006286:	4682      	mov	sl, r0
 8006288:	468b      	mov	fp, r1
 800628a:	f034 040f 	bics.w	r4, r4, #15
 800628e:	d073      	beq.n	8006378 <_strtod_l+0x518>
 8006290:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006294:	dd48      	ble.n	8006328 <_strtod_l+0x4c8>
 8006296:	2400      	movs	r4, #0
 8006298:	46a0      	mov	r8, r4
 800629a:	940a      	str	r4, [sp, #40]	@ 0x28
 800629c:	46a1      	mov	r9, r4
 800629e:	9a05      	ldr	r2, [sp, #20]
 80062a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80063f8 <_strtod_l+0x598>
 80062a4:	2322      	movs	r3, #34	@ 0x22
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	f04f 0a00 	mov.w	sl, #0
 80062ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f43f ae0f 	beq.w	8005ed2 <_strtod_l+0x72>
 80062b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80062b6:	9805      	ldr	r0, [sp, #20]
 80062b8:	f002 ffba 	bl	8009230 <_Bfree>
 80062bc:	9805      	ldr	r0, [sp, #20]
 80062be:	4649      	mov	r1, r9
 80062c0:	f002 ffb6 	bl	8009230 <_Bfree>
 80062c4:	9805      	ldr	r0, [sp, #20]
 80062c6:	4641      	mov	r1, r8
 80062c8:	f002 ffb2 	bl	8009230 <_Bfree>
 80062cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062ce:	9805      	ldr	r0, [sp, #20]
 80062d0:	f002 ffae 	bl	8009230 <_Bfree>
 80062d4:	9805      	ldr	r0, [sp, #20]
 80062d6:	4621      	mov	r1, r4
 80062d8:	f002 ffaa 	bl	8009230 <_Bfree>
 80062dc:	e5f9      	b.n	8005ed2 <_strtod_l+0x72>
 80062de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80062e4:	4293      	cmp	r3, r2
 80062e6:	dbbc      	blt.n	8006262 <_strtod_l+0x402>
 80062e8:	4c41      	ldr	r4, [pc, #260]	@ (80063f0 <_strtod_l+0x590>)
 80062ea:	f1c5 050f 	rsb	r5, r5, #15
 80062ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80062f2:	4652      	mov	r2, sl
 80062f4:	465b      	mov	r3, fp
 80062f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062fa:	f7fa f985 	bl	8000608 <__aeabi_dmul>
 80062fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006300:	1b5d      	subs	r5, r3, r5
 8006302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006306:	e9d4 2300 	ldrd	r2, r3, [r4]
 800630a:	e78f      	b.n	800622c <_strtod_l+0x3cc>
 800630c:	3316      	adds	r3, #22
 800630e:	dba8      	blt.n	8006262 <_strtod_l+0x402>
 8006310:	4b37      	ldr	r3, [pc, #220]	@ (80063f0 <_strtod_l+0x590>)
 8006312:	eba9 0808 	sub.w	r8, r9, r8
 8006316:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800631a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800631e:	4650      	mov	r0, sl
 8006320:	4659      	mov	r1, fp
 8006322:	f7fa fa9b 	bl	800085c <__aeabi_ddiv>
 8006326:	e783      	b.n	8006230 <_strtod_l+0x3d0>
 8006328:	4b32      	ldr	r3, [pc, #200]	@ (80063f4 <_strtod_l+0x594>)
 800632a:	9308      	str	r3, [sp, #32]
 800632c:	2300      	movs	r3, #0
 800632e:	1124      	asrs	r4, r4, #4
 8006330:	4650      	mov	r0, sl
 8006332:	4659      	mov	r1, fp
 8006334:	461e      	mov	r6, r3
 8006336:	2c01      	cmp	r4, #1
 8006338:	dc21      	bgt.n	800637e <_strtod_l+0x51e>
 800633a:	b10b      	cbz	r3, 8006340 <_strtod_l+0x4e0>
 800633c:	4682      	mov	sl, r0
 800633e:	468b      	mov	fp, r1
 8006340:	492c      	ldr	r1, [pc, #176]	@ (80063f4 <_strtod_l+0x594>)
 8006342:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006346:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800634a:	4652      	mov	r2, sl
 800634c:	465b      	mov	r3, fp
 800634e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006352:	f7fa f959 	bl	8000608 <__aeabi_dmul>
 8006356:	4b28      	ldr	r3, [pc, #160]	@ (80063f8 <_strtod_l+0x598>)
 8006358:	460a      	mov	r2, r1
 800635a:	400b      	ands	r3, r1
 800635c:	4927      	ldr	r1, [pc, #156]	@ (80063fc <_strtod_l+0x59c>)
 800635e:	428b      	cmp	r3, r1
 8006360:	4682      	mov	sl, r0
 8006362:	d898      	bhi.n	8006296 <_strtod_l+0x436>
 8006364:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006368:	428b      	cmp	r3, r1
 800636a:	bf86      	itte	hi
 800636c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006400 <_strtod_l+0x5a0>
 8006370:	f04f 3aff 	movhi.w	sl, #4294967295
 8006374:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006378:	2300      	movs	r3, #0
 800637a:	9308      	str	r3, [sp, #32]
 800637c:	e07a      	b.n	8006474 <_strtod_l+0x614>
 800637e:	07e2      	lsls	r2, r4, #31
 8006380:	d505      	bpl.n	800638e <_strtod_l+0x52e>
 8006382:	9b08      	ldr	r3, [sp, #32]
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7fa f93e 	bl	8000608 <__aeabi_dmul>
 800638c:	2301      	movs	r3, #1
 800638e:	9a08      	ldr	r2, [sp, #32]
 8006390:	3208      	adds	r2, #8
 8006392:	3601      	adds	r6, #1
 8006394:	1064      	asrs	r4, r4, #1
 8006396:	9208      	str	r2, [sp, #32]
 8006398:	e7cd      	b.n	8006336 <_strtod_l+0x4d6>
 800639a:	d0ed      	beq.n	8006378 <_strtod_l+0x518>
 800639c:	4264      	negs	r4, r4
 800639e:	f014 020f 	ands.w	r2, r4, #15
 80063a2:	d00a      	beq.n	80063ba <_strtod_l+0x55a>
 80063a4:	4b12      	ldr	r3, [pc, #72]	@ (80063f0 <_strtod_l+0x590>)
 80063a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063aa:	4650      	mov	r0, sl
 80063ac:	4659      	mov	r1, fp
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f7fa fa53 	bl	800085c <__aeabi_ddiv>
 80063b6:	4682      	mov	sl, r0
 80063b8:	468b      	mov	fp, r1
 80063ba:	1124      	asrs	r4, r4, #4
 80063bc:	d0dc      	beq.n	8006378 <_strtod_l+0x518>
 80063be:	2c1f      	cmp	r4, #31
 80063c0:	dd20      	ble.n	8006404 <_strtod_l+0x5a4>
 80063c2:	2400      	movs	r4, #0
 80063c4:	46a0      	mov	r8, r4
 80063c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80063c8:	46a1      	mov	r9, r4
 80063ca:	9a05      	ldr	r2, [sp, #20]
 80063cc:	2322      	movs	r3, #34	@ 0x22
 80063ce:	f04f 0a00 	mov.w	sl, #0
 80063d2:	f04f 0b00 	mov.w	fp, #0
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e768      	b.n	80062ac <_strtod_l+0x44c>
 80063da:	bf00      	nop
 80063dc:	0800cc15 	.word	0x0800cc15
 80063e0:	0800cbb4 	.word	0x0800cbb4
 80063e4:	0800cc0d 	.word	0x0800cc0d
 80063e8:	0800ccf7 	.word	0x0800ccf7
 80063ec:	0800ccf3 	.word	0x0800ccf3
 80063f0:	0800ce58 	.word	0x0800ce58
 80063f4:	0800ce30 	.word	0x0800ce30
 80063f8:	7ff00000 	.word	0x7ff00000
 80063fc:	7ca00000 	.word	0x7ca00000
 8006400:	7fefffff 	.word	0x7fefffff
 8006404:	f014 0310 	ands.w	r3, r4, #16
 8006408:	bf18      	it	ne
 800640a:	236a      	movne	r3, #106	@ 0x6a
 800640c:	4ea9      	ldr	r6, [pc, #676]	@ (80066b4 <_strtod_l+0x854>)
 800640e:	9308      	str	r3, [sp, #32]
 8006410:	4650      	mov	r0, sl
 8006412:	4659      	mov	r1, fp
 8006414:	2300      	movs	r3, #0
 8006416:	07e2      	lsls	r2, r4, #31
 8006418:	d504      	bpl.n	8006424 <_strtod_l+0x5c4>
 800641a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800641e:	f7fa f8f3 	bl	8000608 <__aeabi_dmul>
 8006422:	2301      	movs	r3, #1
 8006424:	1064      	asrs	r4, r4, #1
 8006426:	f106 0608 	add.w	r6, r6, #8
 800642a:	d1f4      	bne.n	8006416 <_strtod_l+0x5b6>
 800642c:	b10b      	cbz	r3, 8006432 <_strtod_l+0x5d2>
 800642e:	4682      	mov	sl, r0
 8006430:	468b      	mov	fp, r1
 8006432:	9b08      	ldr	r3, [sp, #32]
 8006434:	b1b3      	cbz	r3, 8006464 <_strtod_l+0x604>
 8006436:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800643a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800643e:	2b00      	cmp	r3, #0
 8006440:	4659      	mov	r1, fp
 8006442:	dd0f      	ble.n	8006464 <_strtod_l+0x604>
 8006444:	2b1f      	cmp	r3, #31
 8006446:	dd55      	ble.n	80064f4 <_strtod_l+0x694>
 8006448:	2b34      	cmp	r3, #52	@ 0x34
 800644a:	bfde      	ittt	le
 800644c:	f04f 33ff 	movle.w	r3, #4294967295
 8006450:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006454:	4093      	lslle	r3, r2
 8006456:	f04f 0a00 	mov.w	sl, #0
 800645a:	bfcc      	ite	gt
 800645c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006460:	ea03 0b01 	andle.w	fp, r3, r1
 8006464:	2200      	movs	r2, #0
 8006466:	2300      	movs	r3, #0
 8006468:	4650      	mov	r0, sl
 800646a:	4659      	mov	r1, fp
 800646c:	f7fa fb34 	bl	8000ad8 <__aeabi_dcmpeq>
 8006470:	2800      	cmp	r0, #0
 8006472:	d1a6      	bne.n	80063c2 <_strtod_l+0x562>
 8006474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800647a:	9805      	ldr	r0, [sp, #20]
 800647c:	462b      	mov	r3, r5
 800647e:	463a      	mov	r2, r7
 8006480:	f002 ff3e 	bl	8009300 <__s2b>
 8006484:	900a      	str	r0, [sp, #40]	@ 0x28
 8006486:	2800      	cmp	r0, #0
 8006488:	f43f af05 	beq.w	8006296 <_strtod_l+0x436>
 800648c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800648e:	2a00      	cmp	r2, #0
 8006490:	eba9 0308 	sub.w	r3, r9, r8
 8006494:	bfa8      	it	ge
 8006496:	2300      	movge	r3, #0
 8006498:	9312      	str	r3, [sp, #72]	@ 0x48
 800649a:	2400      	movs	r4, #0
 800649c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80064a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80064a2:	46a0      	mov	r8, r4
 80064a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064a6:	9805      	ldr	r0, [sp, #20]
 80064a8:	6859      	ldr	r1, [r3, #4]
 80064aa:	f002 fe81 	bl	80091b0 <_Balloc>
 80064ae:	4681      	mov	r9, r0
 80064b0:	2800      	cmp	r0, #0
 80064b2:	f43f aef4 	beq.w	800629e <_strtod_l+0x43e>
 80064b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	3202      	adds	r2, #2
 80064bc:	f103 010c 	add.w	r1, r3, #12
 80064c0:	0092      	lsls	r2, r2, #2
 80064c2:	300c      	adds	r0, #12
 80064c4:	f001 fba1 	bl	8007c0a <memcpy>
 80064c8:	ec4b ab10 	vmov	d0, sl, fp
 80064cc:	9805      	ldr	r0, [sp, #20]
 80064ce:	aa1c      	add	r2, sp, #112	@ 0x70
 80064d0:	a91b      	add	r1, sp, #108	@ 0x6c
 80064d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80064d6:	f003 fa4f 	bl	8009978 <__d2b>
 80064da:	901a      	str	r0, [sp, #104]	@ 0x68
 80064dc:	2800      	cmp	r0, #0
 80064de:	f43f aede 	beq.w	800629e <_strtod_l+0x43e>
 80064e2:	9805      	ldr	r0, [sp, #20]
 80064e4:	2101      	movs	r1, #1
 80064e6:	f002 ffa1 	bl	800942c <__i2b>
 80064ea:	4680      	mov	r8, r0
 80064ec:	b948      	cbnz	r0, 8006502 <_strtod_l+0x6a2>
 80064ee:	f04f 0800 	mov.w	r8, #0
 80064f2:	e6d4      	b.n	800629e <_strtod_l+0x43e>
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	ea03 0a0a 	and.w	sl, r3, sl
 8006500:	e7b0      	b.n	8006464 <_strtod_l+0x604>
 8006502:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006504:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006506:	2d00      	cmp	r5, #0
 8006508:	bfab      	itete	ge
 800650a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800650c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800650e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006510:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006512:	bfac      	ite	ge
 8006514:	18ef      	addge	r7, r5, r3
 8006516:	1b5e      	sublt	r6, r3, r5
 8006518:	9b08      	ldr	r3, [sp, #32]
 800651a:	1aed      	subs	r5, r5, r3
 800651c:	4415      	add	r5, r2
 800651e:	4b66      	ldr	r3, [pc, #408]	@ (80066b8 <_strtod_l+0x858>)
 8006520:	3d01      	subs	r5, #1
 8006522:	429d      	cmp	r5, r3
 8006524:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006528:	da50      	bge.n	80065cc <_strtod_l+0x76c>
 800652a:	1b5b      	subs	r3, r3, r5
 800652c:	2b1f      	cmp	r3, #31
 800652e:	eba2 0203 	sub.w	r2, r2, r3
 8006532:	f04f 0101 	mov.w	r1, #1
 8006536:	dc3d      	bgt.n	80065b4 <_strtod_l+0x754>
 8006538:	fa01 f303 	lsl.w	r3, r1, r3
 800653c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800653e:	2300      	movs	r3, #0
 8006540:	9310      	str	r3, [sp, #64]	@ 0x40
 8006542:	18bd      	adds	r5, r7, r2
 8006544:	9b08      	ldr	r3, [sp, #32]
 8006546:	42af      	cmp	r7, r5
 8006548:	4416      	add	r6, r2
 800654a:	441e      	add	r6, r3
 800654c:	463b      	mov	r3, r7
 800654e:	bfa8      	it	ge
 8006550:	462b      	movge	r3, r5
 8006552:	42b3      	cmp	r3, r6
 8006554:	bfa8      	it	ge
 8006556:	4633      	movge	r3, r6
 8006558:	2b00      	cmp	r3, #0
 800655a:	bfc2      	ittt	gt
 800655c:	1aed      	subgt	r5, r5, r3
 800655e:	1af6      	subgt	r6, r6, r3
 8006560:	1aff      	subgt	r7, r7, r3
 8006562:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006564:	2b00      	cmp	r3, #0
 8006566:	dd16      	ble.n	8006596 <_strtod_l+0x736>
 8006568:	4641      	mov	r1, r8
 800656a:	9805      	ldr	r0, [sp, #20]
 800656c:	461a      	mov	r2, r3
 800656e:	f003 f81d 	bl	80095ac <__pow5mult>
 8006572:	4680      	mov	r8, r0
 8006574:	2800      	cmp	r0, #0
 8006576:	d0ba      	beq.n	80064ee <_strtod_l+0x68e>
 8006578:	4601      	mov	r1, r0
 800657a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800657c:	9805      	ldr	r0, [sp, #20]
 800657e:	f002 ff6b 	bl	8009458 <__multiply>
 8006582:	900e      	str	r0, [sp, #56]	@ 0x38
 8006584:	2800      	cmp	r0, #0
 8006586:	f43f ae8a 	beq.w	800629e <_strtod_l+0x43e>
 800658a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800658c:	9805      	ldr	r0, [sp, #20]
 800658e:	f002 fe4f 	bl	8009230 <_Bfree>
 8006592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006594:	931a      	str	r3, [sp, #104]	@ 0x68
 8006596:	2d00      	cmp	r5, #0
 8006598:	dc1d      	bgt.n	80065d6 <_strtod_l+0x776>
 800659a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	dd23      	ble.n	80065e8 <_strtod_l+0x788>
 80065a0:	4649      	mov	r1, r9
 80065a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80065a4:	9805      	ldr	r0, [sp, #20]
 80065a6:	f003 f801 	bl	80095ac <__pow5mult>
 80065aa:	4681      	mov	r9, r0
 80065ac:	b9e0      	cbnz	r0, 80065e8 <_strtod_l+0x788>
 80065ae:	f04f 0900 	mov.w	r9, #0
 80065b2:	e674      	b.n	800629e <_strtod_l+0x43e>
 80065b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80065b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80065bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80065c0:	35e2      	adds	r5, #226	@ 0xe2
 80065c2:	fa01 f305 	lsl.w	r3, r1, r5
 80065c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80065c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80065ca:	e7ba      	b.n	8006542 <_strtod_l+0x6e2>
 80065cc:	2300      	movs	r3, #0
 80065ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80065d0:	2301      	movs	r3, #1
 80065d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065d4:	e7b5      	b.n	8006542 <_strtod_l+0x6e2>
 80065d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065d8:	9805      	ldr	r0, [sp, #20]
 80065da:	462a      	mov	r2, r5
 80065dc:	f003 f840 	bl	8009660 <__lshift>
 80065e0:	901a      	str	r0, [sp, #104]	@ 0x68
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d1d9      	bne.n	800659a <_strtod_l+0x73a>
 80065e6:	e65a      	b.n	800629e <_strtod_l+0x43e>
 80065e8:	2e00      	cmp	r6, #0
 80065ea:	dd07      	ble.n	80065fc <_strtod_l+0x79c>
 80065ec:	4649      	mov	r1, r9
 80065ee:	9805      	ldr	r0, [sp, #20]
 80065f0:	4632      	mov	r2, r6
 80065f2:	f003 f835 	bl	8009660 <__lshift>
 80065f6:	4681      	mov	r9, r0
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d0d8      	beq.n	80065ae <_strtod_l+0x74e>
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	dd08      	ble.n	8006612 <_strtod_l+0x7b2>
 8006600:	4641      	mov	r1, r8
 8006602:	9805      	ldr	r0, [sp, #20]
 8006604:	463a      	mov	r2, r7
 8006606:	f003 f82b 	bl	8009660 <__lshift>
 800660a:	4680      	mov	r8, r0
 800660c:	2800      	cmp	r0, #0
 800660e:	f43f ae46 	beq.w	800629e <_strtod_l+0x43e>
 8006612:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006614:	9805      	ldr	r0, [sp, #20]
 8006616:	464a      	mov	r2, r9
 8006618:	f003 f8aa 	bl	8009770 <__mdiff>
 800661c:	4604      	mov	r4, r0
 800661e:	2800      	cmp	r0, #0
 8006620:	f43f ae3d 	beq.w	800629e <_strtod_l+0x43e>
 8006624:	68c3      	ldr	r3, [r0, #12]
 8006626:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006628:	2300      	movs	r3, #0
 800662a:	60c3      	str	r3, [r0, #12]
 800662c:	4641      	mov	r1, r8
 800662e:	f003 f883 	bl	8009738 <__mcmp>
 8006632:	2800      	cmp	r0, #0
 8006634:	da46      	bge.n	80066c4 <_strtod_l+0x864>
 8006636:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006638:	ea53 030a 	orrs.w	r3, r3, sl
 800663c:	d16c      	bne.n	8006718 <_strtod_l+0x8b8>
 800663e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006642:	2b00      	cmp	r3, #0
 8006644:	d168      	bne.n	8006718 <_strtod_l+0x8b8>
 8006646:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800664a:	0d1b      	lsrs	r3, r3, #20
 800664c:	051b      	lsls	r3, r3, #20
 800664e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006652:	d961      	bls.n	8006718 <_strtod_l+0x8b8>
 8006654:	6963      	ldr	r3, [r4, #20]
 8006656:	b913      	cbnz	r3, 800665e <_strtod_l+0x7fe>
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	2b01      	cmp	r3, #1
 800665c:	dd5c      	ble.n	8006718 <_strtod_l+0x8b8>
 800665e:	4621      	mov	r1, r4
 8006660:	2201      	movs	r2, #1
 8006662:	9805      	ldr	r0, [sp, #20]
 8006664:	f002 fffc 	bl	8009660 <__lshift>
 8006668:	4641      	mov	r1, r8
 800666a:	4604      	mov	r4, r0
 800666c:	f003 f864 	bl	8009738 <__mcmp>
 8006670:	2800      	cmp	r0, #0
 8006672:	dd51      	ble.n	8006718 <_strtod_l+0x8b8>
 8006674:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006678:	9a08      	ldr	r2, [sp, #32]
 800667a:	0d1b      	lsrs	r3, r3, #20
 800667c:	051b      	lsls	r3, r3, #20
 800667e:	2a00      	cmp	r2, #0
 8006680:	d06b      	beq.n	800675a <_strtod_l+0x8fa>
 8006682:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006686:	d868      	bhi.n	800675a <_strtod_l+0x8fa>
 8006688:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800668c:	f67f ae9d 	bls.w	80063ca <_strtod_l+0x56a>
 8006690:	4b0a      	ldr	r3, [pc, #40]	@ (80066bc <_strtod_l+0x85c>)
 8006692:	4650      	mov	r0, sl
 8006694:	4659      	mov	r1, fp
 8006696:	2200      	movs	r2, #0
 8006698:	f7f9 ffb6 	bl	8000608 <__aeabi_dmul>
 800669c:	4b08      	ldr	r3, [pc, #32]	@ (80066c0 <_strtod_l+0x860>)
 800669e:	400b      	ands	r3, r1
 80066a0:	4682      	mov	sl, r0
 80066a2:	468b      	mov	fp, r1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f47f ae05 	bne.w	80062b4 <_strtod_l+0x454>
 80066aa:	9a05      	ldr	r2, [sp, #20]
 80066ac:	2322      	movs	r3, #34	@ 0x22
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	e600      	b.n	80062b4 <_strtod_l+0x454>
 80066b2:	bf00      	nop
 80066b4:	0800cbe0 	.word	0x0800cbe0
 80066b8:	fffffc02 	.word	0xfffffc02
 80066bc:	39500000 	.word	0x39500000
 80066c0:	7ff00000 	.word	0x7ff00000
 80066c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80066c8:	d165      	bne.n	8006796 <_strtod_l+0x936>
 80066ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80066cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066d0:	b35a      	cbz	r2, 800672a <_strtod_l+0x8ca>
 80066d2:	4a9f      	ldr	r2, [pc, #636]	@ (8006950 <_strtod_l+0xaf0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d12b      	bne.n	8006730 <_strtod_l+0x8d0>
 80066d8:	9b08      	ldr	r3, [sp, #32]
 80066da:	4651      	mov	r1, sl
 80066dc:	b303      	cbz	r3, 8006720 <_strtod_l+0x8c0>
 80066de:	4b9d      	ldr	r3, [pc, #628]	@ (8006954 <_strtod_l+0xaf4>)
 80066e0:	465a      	mov	r2, fp
 80066e2:	4013      	ands	r3, r2
 80066e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80066e8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ec:	d81b      	bhi.n	8006726 <_strtod_l+0x8c6>
 80066ee:	0d1b      	lsrs	r3, r3, #20
 80066f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	4299      	cmp	r1, r3
 80066fa:	d119      	bne.n	8006730 <_strtod_l+0x8d0>
 80066fc:	4b96      	ldr	r3, [pc, #600]	@ (8006958 <_strtod_l+0xaf8>)
 80066fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006700:	429a      	cmp	r2, r3
 8006702:	d102      	bne.n	800670a <_strtod_l+0x8aa>
 8006704:	3101      	adds	r1, #1
 8006706:	f43f adca 	beq.w	800629e <_strtod_l+0x43e>
 800670a:	4b92      	ldr	r3, [pc, #584]	@ (8006954 <_strtod_l+0xaf4>)
 800670c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800670e:	401a      	ands	r2, r3
 8006710:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006714:	f04f 0a00 	mov.w	sl, #0
 8006718:	9b08      	ldr	r3, [sp, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1b8      	bne.n	8006690 <_strtod_l+0x830>
 800671e:	e5c9      	b.n	80062b4 <_strtod_l+0x454>
 8006720:	f04f 33ff 	mov.w	r3, #4294967295
 8006724:	e7e8      	b.n	80066f8 <_strtod_l+0x898>
 8006726:	4613      	mov	r3, r2
 8006728:	e7e6      	b.n	80066f8 <_strtod_l+0x898>
 800672a:	ea53 030a 	orrs.w	r3, r3, sl
 800672e:	d0a1      	beq.n	8006674 <_strtod_l+0x814>
 8006730:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006732:	b1db      	cbz	r3, 800676c <_strtod_l+0x90c>
 8006734:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006736:	4213      	tst	r3, r2
 8006738:	d0ee      	beq.n	8006718 <_strtod_l+0x8b8>
 800673a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800673c:	9a08      	ldr	r2, [sp, #32]
 800673e:	4650      	mov	r0, sl
 8006740:	4659      	mov	r1, fp
 8006742:	b1bb      	cbz	r3, 8006774 <_strtod_l+0x914>
 8006744:	f7ff fb6b 	bl	8005e1e <sulp>
 8006748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800674c:	ec53 2b10 	vmov	r2, r3, d0
 8006750:	f7f9 fda4 	bl	800029c <__adddf3>
 8006754:	4682      	mov	sl, r0
 8006756:	468b      	mov	fp, r1
 8006758:	e7de      	b.n	8006718 <_strtod_l+0x8b8>
 800675a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800675e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006762:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006766:	f04f 3aff 	mov.w	sl, #4294967295
 800676a:	e7d5      	b.n	8006718 <_strtod_l+0x8b8>
 800676c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800676e:	ea13 0f0a 	tst.w	r3, sl
 8006772:	e7e1      	b.n	8006738 <_strtod_l+0x8d8>
 8006774:	f7ff fb53 	bl	8005e1e <sulp>
 8006778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800677c:	ec53 2b10 	vmov	r2, r3, d0
 8006780:	f7f9 fd8a 	bl	8000298 <__aeabi_dsub>
 8006784:	2200      	movs	r2, #0
 8006786:	2300      	movs	r3, #0
 8006788:	4682      	mov	sl, r0
 800678a:	468b      	mov	fp, r1
 800678c:	f7fa f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006790:	2800      	cmp	r0, #0
 8006792:	d0c1      	beq.n	8006718 <_strtod_l+0x8b8>
 8006794:	e619      	b.n	80063ca <_strtod_l+0x56a>
 8006796:	4641      	mov	r1, r8
 8006798:	4620      	mov	r0, r4
 800679a:	f003 f945 	bl	8009a28 <__ratio>
 800679e:	ec57 6b10 	vmov	r6, r7, d0
 80067a2:	2200      	movs	r2, #0
 80067a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80067a8:	4630      	mov	r0, r6
 80067aa:	4639      	mov	r1, r7
 80067ac:	f7fa f9a8 	bl	8000b00 <__aeabi_dcmple>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d06f      	beq.n	8006894 <_strtod_l+0xa34>
 80067b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d17a      	bne.n	80068b0 <_strtod_l+0xa50>
 80067ba:	f1ba 0f00 	cmp.w	sl, #0
 80067be:	d158      	bne.n	8006872 <_strtod_l+0xa12>
 80067c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d15a      	bne.n	8006880 <_strtod_l+0xa20>
 80067ca:	4b64      	ldr	r3, [pc, #400]	@ (800695c <_strtod_l+0xafc>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	4630      	mov	r0, r6
 80067d0:	4639      	mov	r1, r7
 80067d2:	f7fa f98b 	bl	8000aec <__aeabi_dcmplt>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d159      	bne.n	800688e <_strtod_l+0xa2e>
 80067da:	4630      	mov	r0, r6
 80067dc:	4639      	mov	r1, r7
 80067de:	4b60      	ldr	r3, [pc, #384]	@ (8006960 <_strtod_l+0xb00>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	f7f9 ff11 	bl	8000608 <__aeabi_dmul>
 80067e6:	4606      	mov	r6, r0
 80067e8:	460f      	mov	r7, r1
 80067ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80067ee:	9606      	str	r6, [sp, #24]
 80067f0:	9307      	str	r3, [sp, #28]
 80067f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067f6:	4d57      	ldr	r5, [pc, #348]	@ (8006954 <_strtod_l+0xaf4>)
 80067f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80067fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067fe:	401d      	ands	r5, r3
 8006800:	4b58      	ldr	r3, [pc, #352]	@ (8006964 <_strtod_l+0xb04>)
 8006802:	429d      	cmp	r5, r3
 8006804:	f040 80b2 	bne.w	800696c <_strtod_l+0xb0c>
 8006808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800680a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800680e:	ec4b ab10 	vmov	d0, sl, fp
 8006812:	f003 f841 	bl	8009898 <__ulp>
 8006816:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800681a:	ec51 0b10 	vmov	r0, r1, d0
 800681e:	f7f9 fef3 	bl	8000608 <__aeabi_dmul>
 8006822:	4652      	mov	r2, sl
 8006824:	465b      	mov	r3, fp
 8006826:	f7f9 fd39 	bl	800029c <__adddf3>
 800682a:	460b      	mov	r3, r1
 800682c:	4949      	ldr	r1, [pc, #292]	@ (8006954 <_strtod_l+0xaf4>)
 800682e:	4a4e      	ldr	r2, [pc, #312]	@ (8006968 <_strtod_l+0xb08>)
 8006830:	4019      	ands	r1, r3
 8006832:	4291      	cmp	r1, r2
 8006834:	4682      	mov	sl, r0
 8006836:	d942      	bls.n	80068be <_strtod_l+0xa5e>
 8006838:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800683a:	4b47      	ldr	r3, [pc, #284]	@ (8006958 <_strtod_l+0xaf8>)
 800683c:	429a      	cmp	r2, r3
 800683e:	d103      	bne.n	8006848 <_strtod_l+0x9e8>
 8006840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006842:	3301      	adds	r3, #1
 8006844:	f43f ad2b 	beq.w	800629e <_strtod_l+0x43e>
 8006848:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006958 <_strtod_l+0xaf8>
 800684c:	f04f 3aff 	mov.w	sl, #4294967295
 8006850:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006852:	9805      	ldr	r0, [sp, #20]
 8006854:	f002 fcec 	bl	8009230 <_Bfree>
 8006858:	9805      	ldr	r0, [sp, #20]
 800685a:	4649      	mov	r1, r9
 800685c:	f002 fce8 	bl	8009230 <_Bfree>
 8006860:	9805      	ldr	r0, [sp, #20]
 8006862:	4641      	mov	r1, r8
 8006864:	f002 fce4 	bl	8009230 <_Bfree>
 8006868:	9805      	ldr	r0, [sp, #20]
 800686a:	4621      	mov	r1, r4
 800686c:	f002 fce0 	bl	8009230 <_Bfree>
 8006870:	e618      	b.n	80064a4 <_strtod_l+0x644>
 8006872:	f1ba 0f01 	cmp.w	sl, #1
 8006876:	d103      	bne.n	8006880 <_strtod_l+0xa20>
 8006878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	f43f ada5 	beq.w	80063ca <_strtod_l+0x56a>
 8006880:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006930 <_strtod_l+0xad0>
 8006884:	4f35      	ldr	r7, [pc, #212]	@ (800695c <_strtod_l+0xafc>)
 8006886:	ed8d 7b06 	vstr	d7, [sp, #24]
 800688a:	2600      	movs	r6, #0
 800688c:	e7b1      	b.n	80067f2 <_strtod_l+0x992>
 800688e:	4f34      	ldr	r7, [pc, #208]	@ (8006960 <_strtod_l+0xb00>)
 8006890:	2600      	movs	r6, #0
 8006892:	e7aa      	b.n	80067ea <_strtod_l+0x98a>
 8006894:	4b32      	ldr	r3, [pc, #200]	@ (8006960 <_strtod_l+0xb00>)
 8006896:	4630      	mov	r0, r6
 8006898:	4639      	mov	r1, r7
 800689a:	2200      	movs	r2, #0
 800689c:	f7f9 feb4 	bl	8000608 <__aeabi_dmul>
 80068a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068a2:	4606      	mov	r6, r0
 80068a4:	460f      	mov	r7, r1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d09f      	beq.n	80067ea <_strtod_l+0x98a>
 80068aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80068ae:	e7a0      	b.n	80067f2 <_strtod_l+0x992>
 80068b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006938 <_strtod_l+0xad8>
 80068b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80068b8:	ec57 6b17 	vmov	r6, r7, d7
 80068bc:	e799      	b.n	80067f2 <_strtod_l+0x992>
 80068be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80068c2:	9b08      	ldr	r3, [sp, #32]
 80068c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1c1      	bne.n	8006850 <_strtod_l+0x9f0>
 80068cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80068d0:	0d1b      	lsrs	r3, r3, #20
 80068d2:	051b      	lsls	r3, r3, #20
 80068d4:	429d      	cmp	r5, r3
 80068d6:	d1bb      	bne.n	8006850 <_strtod_l+0x9f0>
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7fa f9f4 	bl	8000cc8 <__aeabi_d2lz>
 80068e0:	f7f9 fe64 	bl	80005ac <__aeabi_l2d>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4630      	mov	r0, r6
 80068ea:	4639      	mov	r1, r7
 80068ec:	f7f9 fcd4 	bl	8000298 <__aeabi_dsub>
 80068f0:	460b      	mov	r3, r1
 80068f2:	4602      	mov	r2, r0
 80068f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80068f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80068fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068fe:	ea46 060a 	orr.w	r6, r6, sl
 8006902:	431e      	orrs	r6, r3
 8006904:	d06f      	beq.n	80069e6 <_strtod_l+0xb86>
 8006906:	a30e      	add	r3, pc, #56	@ (adr r3, 8006940 <_strtod_l+0xae0>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f7fa f8ee 	bl	8000aec <__aeabi_dcmplt>
 8006910:	2800      	cmp	r0, #0
 8006912:	f47f accf 	bne.w	80062b4 <_strtod_l+0x454>
 8006916:	a30c      	add	r3, pc, #48	@ (adr r3, 8006948 <_strtod_l+0xae8>)
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006920:	f7fa f902 	bl	8000b28 <__aeabi_dcmpgt>
 8006924:	2800      	cmp	r0, #0
 8006926:	d093      	beq.n	8006850 <_strtod_l+0x9f0>
 8006928:	e4c4      	b.n	80062b4 <_strtod_l+0x454>
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w
 8006930:	00000000 	.word	0x00000000
 8006934:	bff00000 	.word	0xbff00000
 8006938:	00000000 	.word	0x00000000
 800693c:	3ff00000 	.word	0x3ff00000
 8006940:	94a03595 	.word	0x94a03595
 8006944:	3fdfffff 	.word	0x3fdfffff
 8006948:	35afe535 	.word	0x35afe535
 800694c:	3fe00000 	.word	0x3fe00000
 8006950:	000fffff 	.word	0x000fffff
 8006954:	7ff00000 	.word	0x7ff00000
 8006958:	7fefffff 	.word	0x7fefffff
 800695c:	3ff00000 	.word	0x3ff00000
 8006960:	3fe00000 	.word	0x3fe00000
 8006964:	7fe00000 	.word	0x7fe00000
 8006968:	7c9fffff 	.word	0x7c9fffff
 800696c:	9b08      	ldr	r3, [sp, #32]
 800696e:	b323      	cbz	r3, 80069ba <_strtod_l+0xb5a>
 8006970:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006974:	d821      	bhi.n	80069ba <_strtod_l+0xb5a>
 8006976:	a328      	add	r3, pc, #160	@ (adr r3, 8006a18 <_strtod_l+0xbb8>)
 8006978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697c:	4630      	mov	r0, r6
 800697e:	4639      	mov	r1, r7
 8006980:	f7fa f8be 	bl	8000b00 <__aeabi_dcmple>
 8006984:	b1a0      	cbz	r0, 80069b0 <_strtod_l+0xb50>
 8006986:	4639      	mov	r1, r7
 8006988:	4630      	mov	r0, r6
 800698a:	f7fa f915 	bl	8000bb8 <__aeabi_d2uiz>
 800698e:	2801      	cmp	r0, #1
 8006990:	bf38      	it	cc
 8006992:	2001      	movcc	r0, #1
 8006994:	f7f9 fdbe 	bl	8000514 <__aeabi_ui2d>
 8006998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800699a:	4606      	mov	r6, r0
 800699c:	460f      	mov	r7, r1
 800699e:	b9fb      	cbnz	r3, 80069e0 <_strtod_l+0xb80>
 80069a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80069a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80069a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80069ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80069b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80069b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80069b6:	1b5b      	subs	r3, r3, r5
 80069b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80069ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80069be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80069c2:	f002 ff69 	bl	8009898 <__ulp>
 80069c6:	4650      	mov	r0, sl
 80069c8:	ec53 2b10 	vmov	r2, r3, d0
 80069cc:	4659      	mov	r1, fp
 80069ce:	f7f9 fe1b 	bl	8000608 <__aeabi_dmul>
 80069d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80069d6:	f7f9 fc61 	bl	800029c <__adddf3>
 80069da:	4682      	mov	sl, r0
 80069dc:	468b      	mov	fp, r1
 80069de:	e770      	b.n	80068c2 <_strtod_l+0xa62>
 80069e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80069e4:	e7e0      	b.n	80069a8 <_strtod_l+0xb48>
 80069e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a20 <_strtod_l+0xbc0>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	f7fa f87e 	bl	8000aec <__aeabi_dcmplt>
 80069f0:	e798      	b.n	8006924 <_strtod_l+0xac4>
 80069f2:	2300      	movs	r3, #0
 80069f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80069f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	f7ff ba6d 	b.w	8005eda <_strtod_l+0x7a>
 8006a00:	2a65      	cmp	r2, #101	@ 0x65
 8006a02:	f43f ab66 	beq.w	80060d2 <_strtod_l+0x272>
 8006a06:	2a45      	cmp	r2, #69	@ 0x45
 8006a08:	f43f ab63 	beq.w	80060d2 <_strtod_l+0x272>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f7ff bb9e 	b.w	800614e <_strtod_l+0x2ee>
 8006a12:	bf00      	nop
 8006a14:	f3af 8000 	nop.w
 8006a18:	ffc00000 	.word	0xffc00000
 8006a1c:	41dfffff 	.word	0x41dfffff
 8006a20:	94a03595 	.word	0x94a03595
 8006a24:	3fcfffff 	.word	0x3fcfffff

08006a28 <_strtod_r>:
 8006a28:	4b01      	ldr	r3, [pc, #4]	@ (8006a30 <_strtod_r+0x8>)
 8006a2a:	f7ff ba19 	b.w	8005e60 <_strtod_l>
 8006a2e:	bf00      	nop
 8006a30:	20000068 	.word	0x20000068

08006a34 <strtod>:
 8006a34:	460a      	mov	r2, r1
 8006a36:	4601      	mov	r1, r0
 8006a38:	4802      	ldr	r0, [pc, #8]	@ (8006a44 <strtod+0x10>)
 8006a3a:	4b03      	ldr	r3, [pc, #12]	@ (8006a48 <strtod+0x14>)
 8006a3c:	6800      	ldr	r0, [r0, #0]
 8006a3e:	f7ff ba0f 	b.w	8005e60 <_strtod_l>
 8006a42:	bf00      	nop
 8006a44:	200001d4 	.word	0x200001d4
 8006a48:	20000068 	.word	0x20000068

08006a4c <__cvt>:
 8006a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a50:	ec57 6b10 	vmov	r6, r7, d0
 8006a54:	2f00      	cmp	r7, #0
 8006a56:	460c      	mov	r4, r1
 8006a58:	4619      	mov	r1, r3
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	bfbb      	ittet	lt
 8006a5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a62:	461f      	movlt	r7, r3
 8006a64:	2300      	movge	r3, #0
 8006a66:	232d      	movlt	r3, #45	@ 0x2d
 8006a68:	700b      	strb	r3, [r1, #0]
 8006a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a70:	4691      	mov	r9, r2
 8006a72:	f023 0820 	bic.w	r8, r3, #32
 8006a76:	bfbc      	itt	lt
 8006a78:	4632      	movlt	r2, r6
 8006a7a:	4616      	movlt	r6, r2
 8006a7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a80:	d005      	beq.n	8006a8e <__cvt+0x42>
 8006a82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a86:	d100      	bne.n	8006a8a <__cvt+0x3e>
 8006a88:	3401      	adds	r4, #1
 8006a8a:	2102      	movs	r1, #2
 8006a8c:	e000      	b.n	8006a90 <__cvt+0x44>
 8006a8e:	2103      	movs	r1, #3
 8006a90:	ab03      	add	r3, sp, #12
 8006a92:	9301      	str	r3, [sp, #4]
 8006a94:	ab02      	add	r3, sp, #8
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	ec47 6b10 	vmov	d0, r6, r7
 8006a9c:	4653      	mov	r3, sl
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	f001 f976 	bl	8007d90 <_dtoa_r>
 8006aa4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	d119      	bne.n	8006ae0 <__cvt+0x94>
 8006aac:	f019 0f01 	tst.w	r9, #1
 8006ab0:	d00e      	beq.n	8006ad0 <__cvt+0x84>
 8006ab2:	eb00 0904 	add.w	r9, r0, r4
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2300      	movs	r3, #0
 8006aba:	4630      	mov	r0, r6
 8006abc:	4639      	mov	r1, r7
 8006abe:	f7fa f80b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ac2:	b108      	cbz	r0, 8006ac8 <__cvt+0x7c>
 8006ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ac8:	2230      	movs	r2, #48	@ 0x30
 8006aca:	9b03      	ldr	r3, [sp, #12]
 8006acc:	454b      	cmp	r3, r9
 8006ace:	d31e      	bcc.n	8006b0e <__cvt+0xc2>
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ad4:	1b5b      	subs	r3, r3, r5
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	b004      	add	sp, #16
 8006adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ae4:	eb00 0904 	add.w	r9, r0, r4
 8006ae8:	d1e5      	bne.n	8006ab6 <__cvt+0x6a>
 8006aea:	7803      	ldrb	r3, [r0, #0]
 8006aec:	2b30      	cmp	r3, #48	@ 0x30
 8006aee:	d10a      	bne.n	8006b06 <__cvt+0xba>
 8006af0:	2200      	movs	r2, #0
 8006af2:	2300      	movs	r3, #0
 8006af4:	4630      	mov	r0, r6
 8006af6:	4639      	mov	r1, r7
 8006af8:	f7f9 ffee 	bl	8000ad8 <__aeabi_dcmpeq>
 8006afc:	b918      	cbnz	r0, 8006b06 <__cvt+0xba>
 8006afe:	f1c4 0401 	rsb	r4, r4, #1
 8006b02:	f8ca 4000 	str.w	r4, [sl]
 8006b06:	f8da 3000 	ldr.w	r3, [sl]
 8006b0a:	4499      	add	r9, r3
 8006b0c:	e7d3      	b.n	8006ab6 <__cvt+0x6a>
 8006b0e:	1c59      	adds	r1, r3, #1
 8006b10:	9103      	str	r1, [sp, #12]
 8006b12:	701a      	strb	r2, [r3, #0]
 8006b14:	e7d9      	b.n	8006aca <__cvt+0x7e>

08006b16 <__exponent>:
 8006b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b18:	2900      	cmp	r1, #0
 8006b1a:	bfba      	itte	lt
 8006b1c:	4249      	neglt	r1, r1
 8006b1e:	232d      	movlt	r3, #45	@ 0x2d
 8006b20:	232b      	movge	r3, #43	@ 0x2b
 8006b22:	2909      	cmp	r1, #9
 8006b24:	7002      	strb	r2, [r0, #0]
 8006b26:	7043      	strb	r3, [r0, #1]
 8006b28:	dd29      	ble.n	8006b7e <__exponent+0x68>
 8006b2a:	f10d 0307 	add.w	r3, sp, #7
 8006b2e:	461d      	mov	r5, r3
 8006b30:	270a      	movs	r7, #10
 8006b32:	461a      	mov	r2, r3
 8006b34:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b38:	fb07 1416 	mls	r4, r7, r6, r1
 8006b3c:	3430      	adds	r4, #48	@ 0x30
 8006b3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b42:	460c      	mov	r4, r1
 8006b44:	2c63      	cmp	r4, #99	@ 0x63
 8006b46:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	dcf1      	bgt.n	8006b32 <__exponent+0x1c>
 8006b4e:	3130      	adds	r1, #48	@ 0x30
 8006b50:	1e94      	subs	r4, r2, #2
 8006b52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b56:	1c41      	adds	r1, r0, #1
 8006b58:	4623      	mov	r3, r4
 8006b5a:	42ab      	cmp	r3, r5
 8006b5c:	d30a      	bcc.n	8006b74 <__exponent+0x5e>
 8006b5e:	f10d 0309 	add.w	r3, sp, #9
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	42ac      	cmp	r4, r5
 8006b66:	bf88      	it	hi
 8006b68:	2300      	movhi	r3, #0
 8006b6a:	3302      	adds	r3, #2
 8006b6c:	4403      	add	r3, r0
 8006b6e:	1a18      	subs	r0, r3, r0
 8006b70:	b003      	add	sp, #12
 8006b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b7c:	e7ed      	b.n	8006b5a <__exponent+0x44>
 8006b7e:	2330      	movs	r3, #48	@ 0x30
 8006b80:	3130      	adds	r1, #48	@ 0x30
 8006b82:	7083      	strb	r3, [r0, #2]
 8006b84:	70c1      	strb	r1, [r0, #3]
 8006b86:	1d03      	adds	r3, r0, #4
 8006b88:	e7f1      	b.n	8006b6e <__exponent+0x58>
	...

08006b8c <_printf_float>:
 8006b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b90:	b08d      	sub	sp, #52	@ 0x34
 8006b92:	460c      	mov	r4, r1
 8006b94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b98:	4616      	mov	r6, r2
 8006b9a:	461f      	mov	r7, r3
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	f000 ffbd 	bl	8007b1c <_localeconv_r>
 8006ba2:	6803      	ldr	r3, [r0, #0]
 8006ba4:	9304      	str	r3, [sp, #16]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7f9 fb6a 	bl	8000280 <strlen>
 8006bac:	2300      	movs	r3, #0
 8006bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb4:	9005      	str	r0, [sp, #20]
 8006bb6:	3307      	adds	r3, #7
 8006bb8:	f023 0307 	bic.w	r3, r3, #7
 8006bbc:	f103 0208 	add.w	r2, r3, #8
 8006bc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006bc4:	f8d4 b000 	ldr.w	fp, [r4]
 8006bc8:	f8c8 2000 	str.w	r2, [r8]
 8006bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006bd4:	9307      	str	r3, [sp, #28]
 8006bd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be2:	4b9c      	ldr	r3, [pc, #624]	@ (8006e54 <_printf_float+0x2c8>)
 8006be4:	f04f 32ff 	mov.w	r2, #4294967295
 8006be8:	f7f9 ffa8 	bl	8000b3c <__aeabi_dcmpun>
 8006bec:	bb70      	cbnz	r0, 8006c4c <_printf_float+0xc0>
 8006bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf2:	4b98      	ldr	r3, [pc, #608]	@ (8006e54 <_printf_float+0x2c8>)
 8006bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf8:	f7f9 ff82 	bl	8000b00 <__aeabi_dcmple>
 8006bfc:	bb30      	cbnz	r0, 8006c4c <_printf_float+0xc0>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2300      	movs	r3, #0
 8006c02:	4640      	mov	r0, r8
 8006c04:	4649      	mov	r1, r9
 8006c06:	f7f9 ff71 	bl	8000aec <__aeabi_dcmplt>
 8006c0a:	b110      	cbz	r0, 8006c12 <_printf_float+0x86>
 8006c0c:	232d      	movs	r3, #45	@ 0x2d
 8006c0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c12:	4a91      	ldr	r2, [pc, #580]	@ (8006e58 <_printf_float+0x2cc>)
 8006c14:	4b91      	ldr	r3, [pc, #580]	@ (8006e5c <_printf_float+0x2d0>)
 8006c16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c1a:	bf94      	ite	ls
 8006c1c:	4690      	movls	r8, r2
 8006c1e:	4698      	movhi	r8, r3
 8006c20:	2303      	movs	r3, #3
 8006c22:	6123      	str	r3, [r4, #16]
 8006c24:	f02b 0304 	bic.w	r3, fp, #4
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	f04f 0900 	mov.w	r9, #0
 8006c2e:	9700      	str	r7, [sp, #0]
 8006c30:	4633      	mov	r3, r6
 8006c32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c34:	4621      	mov	r1, r4
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 f9d2 	bl	8006fe0 <_printf_common>
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	f040 808d 	bne.w	8006d5c <_printf_float+0x1d0>
 8006c42:	f04f 30ff 	mov.w	r0, #4294967295
 8006c46:	b00d      	add	sp, #52	@ 0x34
 8006c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	464b      	mov	r3, r9
 8006c50:	4640      	mov	r0, r8
 8006c52:	4649      	mov	r1, r9
 8006c54:	f7f9 ff72 	bl	8000b3c <__aeabi_dcmpun>
 8006c58:	b140      	cbz	r0, 8006c6c <_printf_float+0xe0>
 8006c5a:	464b      	mov	r3, r9
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	bfbc      	itt	lt
 8006c60:	232d      	movlt	r3, #45	@ 0x2d
 8006c62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c66:	4a7e      	ldr	r2, [pc, #504]	@ (8006e60 <_printf_float+0x2d4>)
 8006c68:	4b7e      	ldr	r3, [pc, #504]	@ (8006e64 <_printf_float+0x2d8>)
 8006c6a:	e7d4      	b.n	8006c16 <_printf_float+0x8a>
 8006c6c:	6863      	ldr	r3, [r4, #4]
 8006c6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c72:	9206      	str	r2, [sp, #24]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	d13b      	bne.n	8006cf0 <_printf_float+0x164>
 8006c78:	2306      	movs	r3, #6
 8006c7a:	6063      	str	r3, [r4, #4]
 8006c7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006c80:	2300      	movs	r3, #0
 8006c82:	6022      	str	r2, [r4, #0]
 8006c84:	9303      	str	r3, [sp, #12]
 8006c86:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006c8c:	ab09      	add	r3, sp, #36	@ 0x24
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	6861      	ldr	r1, [r4, #4]
 8006c92:	ec49 8b10 	vmov	d0, r8, r9
 8006c96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f7ff fed6 	bl	8006a4c <__cvt>
 8006ca0:	9b06      	ldr	r3, [sp, #24]
 8006ca2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ca4:	2b47      	cmp	r3, #71	@ 0x47
 8006ca6:	4680      	mov	r8, r0
 8006ca8:	d129      	bne.n	8006cfe <_printf_float+0x172>
 8006caa:	1cc8      	adds	r0, r1, #3
 8006cac:	db02      	blt.n	8006cb4 <_printf_float+0x128>
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	dd41      	ble.n	8006d38 <_printf_float+0x1ac>
 8006cb4:	f1aa 0a02 	sub.w	sl, sl, #2
 8006cb8:	fa5f fa8a 	uxtb.w	sl, sl
 8006cbc:	3901      	subs	r1, #1
 8006cbe:	4652      	mov	r2, sl
 8006cc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006cc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8006cc6:	f7ff ff26 	bl	8006b16 <__exponent>
 8006cca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ccc:	1813      	adds	r3, r2, r0
 8006cce:	2a01      	cmp	r2, #1
 8006cd0:	4681      	mov	r9, r0
 8006cd2:	6123      	str	r3, [r4, #16]
 8006cd4:	dc02      	bgt.n	8006cdc <_printf_float+0x150>
 8006cd6:	6822      	ldr	r2, [r4, #0]
 8006cd8:	07d2      	lsls	r2, r2, #31
 8006cda:	d501      	bpl.n	8006ce0 <_printf_float+0x154>
 8006cdc:	3301      	adds	r3, #1
 8006cde:	6123      	str	r3, [r4, #16]
 8006ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0a2      	beq.n	8006c2e <_printf_float+0xa2>
 8006ce8:	232d      	movs	r3, #45	@ 0x2d
 8006cea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cee:	e79e      	b.n	8006c2e <_printf_float+0xa2>
 8006cf0:	9a06      	ldr	r2, [sp, #24]
 8006cf2:	2a47      	cmp	r2, #71	@ 0x47
 8006cf4:	d1c2      	bne.n	8006c7c <_printf_float+0xf0>
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1c0      	bne.n	8006c7c <_printf_float+0xf0>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e7bd      	b.n	8006c7a <_printf_float+0xee>
 8006cfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d02:	d9db      	bls.n	8006cbc <_printf_float+0x130>
 8006d04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d08:	d118      	bne.n	8006d3c <_printf_float+0x1b0>
 8006d0a:	2900      	cmp	r1, #0
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	dd0b      	ble.n	8006d28 <_printf_float+0x19c>
 8006d10:	6121      	str	r1, [r4, #16]
 8006d12:	b913      	cbnz	r3, 8006d1a <_printf_float+0x18e>
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	07d0      	lsls	r0, r2, #31
 8006d18:	d502      	bpl.n	8006d20 <_printf_float+0x194>
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	440b      	add	r3, r1
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d22:	f04f 0900 	mov.w	r9, #0
 8006d26:	e7db      	b.n	8006ce0 <_printf_float+0x154>
 8006d28:	b913      	cbnz	r3, 8006d30 <_printf_float+0x1a4>
 8006d2a:	6822      	ldr	r2, [r4, #0]
 8006d2c:	07d2      	lsls	r2, r2, #31
 8006d2e:	d501      	bpl.n	8006d34 <_printf_float+0x1a8>
 8006d30:	3302      	adds	r3, #2
 8006d32:	e7f4      	b.n	8006d1e <_printf_float+0x192>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e7f2      	b.n	8006d1e <_printf_float+0x192>
 8006d38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d3e:	4299      	cmp	r1, r3
 8006d40:	db05      	blt.n	8006d4e <_printf_float+0x1c2>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	6121      	str	r1, [r4, #16]
 8006d46:	07d8      	lsls	r0, r3, #31
 8006d48:	d5ea      	bpl.n	8006d20 <_printf_float+0x194>
 8006d4a:	1c4b      	adds	r3, r1, #1
 8006d4c:	e7e7      	b.n	8006d1e <_printf_float+0x192>
 8006d4e:	2900      	cmp	r1, #0
 8006d50:	bfd4      	ite	le
 8006d52:	f1c1 0202 	rsble	r2, r1, #2
 8006d56:	2201      	movgt	r2, #1
 8006d58:	4413      	add	r3, r2
 8006d5a:	e7e0      	b.n	8006d1e <_printf_float+0x192>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	055a      	lsls	r2, r3, #21
 8006d60:	d407      	bmi.n	8006d72 <_printf_float+0x1e6>
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	4642      	mov	r2, r8
 8006d66:	4631      	mov	r1, r6
 8006d68:	4628      	mov	r0, r5
 8006d6a:	47b8      	blx	r7
 8006d6c:	3001      	adds	r0, #1
 8006d6e:	d12b      	bne.n	8006dc8 <_printf_float+0x23c>
 8006d70:	e767      	b.n	8006c42 <_printf_float+0xb6>
 8006d72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d76:	f240 80dd 	bls.w	8006f34 <_printf_float+0x3a8>
 8006d7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2300      	movs	r3, #0
 8006d82:	f7f9 fea9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d033      	beq.n	8006df2 <_printf_float+0x266>
 8006d8a:	4a37      	ldr	r2, [pc, #220]	@ (8006e68 <_printf_float+0x2dc>)
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4628      	mov	r0, r5
 8006d92:	47b8      	blx	r7
 8006d94:	3001      	adds	r0, #1
 8006d96:	f43f af54 	beq.w	8006c42 <_printf_float+0xb6>
 8006d9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d9e:	4543      	cmp	r3, r8
 8006da0:	db02      	blt.n	8006da8 <_printf_float+0x21c>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	07d8      	lsls	r0, r3, #31
 8006da6:	d50f      	bpl.n	8006dc8 <_printf_float+0x23c>
 8006da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dac:	4631      	mov	r1, r6
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b8      	blx	r7
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f af45 	beq.w	8006c42 <_printf_float+0xb6>
 8006db8:	f04f 0900 	mov.w	r9, #0
 8006dbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006dc0:	f104 0a1a 	add.w	sl, r4, #26
 8006dc4:	45c8      	cmp	r8, r9
 8006dc6:	dc09      	bgt.n	8006ddc <_printf_float+0x250>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	079b      	lsls	r3, r3, #30
 8006dcc:	f100 8103 	bmi.w	8006fd6 <_printf_float+0x44a>
 8006dd0:	68e0      	ldr	r0, [r4, #12]
 8006dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dd4:	4298      	cmp	r0, r3
 8006dd6:	bfb8      	it	lt
 8006dd8:	4618      	movlt	r0, r3
 8006dda:	e734      	b.n	8006c46 <_printf_float+0xba>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	4652      	mov	r2, sl
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f af2b 	beq.w	8006c42 <_printf_float+0xb6>
 8006dec:	f109 0901 	add.w	r9, r9, #1
 8006df0:	e7e8      	b.n	8006dc4 <_printf_float+0x238>
 8006df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	dc39      	bgt.n	8006e6c <_printf_float+0x2e0>
 8006df8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e68 <_printf_float+0x2dc>)
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af1d 	beq.w	8006c42 <_printf_float+0xb6>
 8006e08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e0c:	ea59 0303 	orrs.w	r3, r9, r3
 8006e10:	d102      	bne.n	8006e18 <_printf_float+0x28c>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	07d9      	lsls	r1, r3, #31
 8006e16:	d5d7      	bpl.n	8006dc8 <_printf_float+0x23c>
 8006e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	f43f af0d 	beq.w	8006c42 <_printf_float+0xb6>
 8006e28:	f04f 0a00 	mov.w	sl, #0
 8006e2c:	f104 0b1a 	add.w	fp, r4, #26
 8006e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e32:	425b      	negs	r3, r3
 8006e34:	4553      	cmp	r3, sl
 8006e36:	dc01      	bgt.n	8006e3c <_printf_float+0x2b0>
 8006e38:	464b      	mov	r3, r9
 8006e3a:	e793      	b.n	8006d64 <_printf_float+0x1d8>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	465a      	mov	r2, fp
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	f43f aefb 	beq.w	8006c42 <_printf_float+0xb6>
 8006e4c:	f10a 0a01 	add.w	sl, sl, #1
 8006e50:	e7ee      	b.n	8006e30 <_printf_float+0x2a4>
 8006e52:	bf00      	nop
 8006e54:	7fefffff 	.word	0x7fefffff
 8006e58:	0800cc08 	.word	0x0800cc08
 8006e5c:	0800cc0c 	.word	0x0800cc0c
 8006e60:	0800cc10 	.word	0x0800cc10
 8006e64:	0800cc14 	.word	0x0800cc14
 8006e68:	0800d048 	.word	0x0800d048
 8006e6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e72:	4553      	cmp	r3, sl
 8006e74:	bfa8      	it	ge
 8006e76:	4653      	movge	r3, sl
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	4699      	mov	r9, r3
 8006e7c:	dc36      	bgt.n	8006eec <_printf_float+0x360>
 8006e7e:	f04f 0b00 	mov.w	fp, #0
 8006e82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e86:	f104 021a 	add.w	r2, r4, #26
 8006e8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e8c:	9306      	str	r3, [sp, #24]
 8006e8e:	eba3 0309 	sub.w	r3, r3, r9
 8006e92:	455b      	cmp	r3, fp
 8006e94:	dc31      	bgt.n	8006efa <_printf_float+0x36e>
 8006e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e98:	459a      	cmp	sl, r3
 8006e9a:	dc3a      	bgt.n	8006f12 <_printf_float+0x386>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	07da      	lsls	r2, r3, #31
 8006ea0:	d437      	bmi.n	8006f12 <_printf_float+0x386>
 8006ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea4:	ebaa 0903 	sub.w	r9, sl, r3
 8006ea8:	9b06      	ldr	r3, [sp, #24]
 8006eaa:	ebaa 0303 	sub.w	r3, sl, r3
 8006eae:	4599      	cmp	r9, r3
 8006eb0:	bfa8      	it	ge
 8006eb2:	4699      	movge	r9, r3
 8006eb4:	f1b9 0f00 	cmp.w	r9, #0
 8006eb8:	dc33      	bgt.n	8006f22 <_printf_float+0x396>
 8006eba:	f04f 0800 	mov.w	r8, #0
 8006ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ec2:	f104 0b1a 	add.w	fp, r4, #26
 8006ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec8:	ebaa 0303 	sub.w	r3, sl, r3
 8006ecc:	eba3 0309 	sub.w	r3, r3, r9
 8006ed0:	4543      	cmp	r3, r8
 8006ed2:	f77f af79 	ble.w	8006dc8 <_printf_float+0x23c>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	465a      	mov	r2, fp
 8006eda:	4631      	mov	r1, r6
 8006edc:	4628      	mov	r0, r5
 8006ede:	47b8      	blx	r7
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	f43f aeae 	beq.w	8006c42 <_printf_float+0xb6>
 8006ee6:	f108 0801 	add.w	r8, r8, #1
 8006eea:	e7ec      	b.n	8006ec6 <_printf_float+0x33a>
 8006eec:	4642      	mov	r2, r8
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d1c2      	bne.n	8006e7e <_printf_float+0x2f2>
 8006ef8:	e6a3      	b.n	8006c42 <_printf_float+0xb6>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	9206      	str	r2, [sp, #24]
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f ae9c 	beq.w	8006c42 <_printf_float+0xb6>
 8006f0a:	9a06      	ldr	r2, [sp, #24]
 8006f0c:	f10b 0b01 	add.w	fp, fp, #1
 8006f10:	e7bb      	b.n	8006e8a <_printf_float+0x2fe>
 8006f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f16:	4631      	mov	r1, r6
 8006f18:	4628      	mov	r0, r5
 8006f1a:	47b8      	blx	r7
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d1c0      	bne.n	8006ea2 <_printf_float+0x316>
 8006f20:	e68f      	b.n	8006c42 <_printf_float+0xb6>
 8006f22:	9a06      	ldr	r2, [sp, #24]
 8006f24:	464b      	mov	r3, r9
 8006f26:	4442      	add	r2, r8
 8006f28:	4631      	mov	r1, r6
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b8      	blx	r7
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d1c3      	bne.n	8006eba <_printf_float+0x32e>
 8006f32:	e686      	b.n	8006c42 <_printf_float+0xb6>
 8006f34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f38:	f1ba 0f01 	cmp.w	sl, #1
 8006f3c:	dc01      	bgt.n	8006f42 <_printf_float+0x3b6>
 8006f3e:	07db      	lsls	r3, r3, #31
 8006f40:	d536      	bpl.n	8006fb0 <_printf_float+0x424>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4642      	mov	r2, r8
 8006f46:	4631      	mov	r1, r6
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b8      	blx	r7
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	f43f ae78 	beq.w	8006c42 <_printf_float+0xb6>
 8006f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f43f ae70 	beq.w	8006c42 <_printf_float+0xb6>
 8006f62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f66:	2200      	movs	r2, #0
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f6e:	f7f9 fdb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f72:	b9c0      	cbnz	r0, 8006fa6 <_printf_float+0x41a>
 8006f74:	4653      	mov	r3, sl
 8006f76:	f108 0201 	add.w	r2, r8, #1
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	d10c      	bne.n	8006f9e <_printf_float+0x412>
 8006f84:	e65d      	b.n	8006c42 <_printf_float+0xb6>
 8006f86:	2301      	movs	r3, #1
 8006f88:	465a      	mov	r2, fp
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	f43f ae56 	beq.w	8006c42 <_printf_float+0xb6>
 8006f96:	f108 0801 	add.w	r8, r8, #1
 8006f9a:	45d0      	cmp	r8, sl
 8006f9c:	dbf3      	blt.n	8006f86 <_printf_float+0x3fa>
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fa4:	e6df      	b.n	8006d66 <_printf_float+0x1da>
 8006fa6:	f04f 0800 	mov.w	r8, #0
 8006faa:	f104 0b1a 	add.w	fp, r4, #26
 8006fae:	e7f4      	b.n	8006f9a <_printf_float+0x40e>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	e7e1      	b.n	8006f7a <_printf_float+0x3ee>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	464a      	mov	r2, r9
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f ae3e 	beq.w	8006c42 <_printf_float+0xb6>
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fce:	1a5b      	subs	r3, r3, r1
 8006fd0:	4543      	cmp	r3, r8
 8006fd2:	dcf0      	bgt.n	8006fb6 <_printf_float+0x42a>
 8006fd4:	e6fc      	b.n	8006dd0 <_printf_float+0x244>
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	f104 0919 	add.w	r9, r4, #25
 8006fde:	e7f4      	b.n	8006fca <_printf_float+0x43e>

08006fe0 <_printf_common>:
 8006fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	4698      	mov	r8, r3
 8006fe8:	688a      	ldr	r2, [r1, #8]
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	bfb8      	it	lt
 8006ff4:	4613      	movlt	r3, r2
 8006ff6:	6033      	str	r3, [r6, #0]
 8006ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	460c      	mov	r4, r1
 8007000:	b10a      	cbz	r2, 8007006 <_printf_common+0x26>
 8007002:	3301      	adds	r3, #1
 8007004:	6033      	str	r3, [r6, #0]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	0699      	lsls	r1, r3, #26
 800700a:	bf42      	ittt	mi
 800700c:	6833      	ldrmi	r3, [r6, #0]
 800700e:	3302      	addmi	r3, #2
 8007010:	6033      	strmi	r3, [r6, #0]
 8007012:	6825      	ldr	r5, [r4, #0]
 8007014:	f015 0506 	ands.w	r5, r5, #6
 8007018:	d106      	bne.n	8007028 <_printf_common+0x48>
 800701a:	f104 0a19 	add.w	sl, r4, #25
 800701e:	68e3      	ldr	r3, [r4, #12]
 8007020:	6832      	ldr	r2, [r6, #0]
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	42ab      	cmp	r3, r5
 8007026:	dc26      	bgt.n	8007076 <_printf_common+0x96>
 8007028:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800702c:	6822      	ldr	r2, [r4, #0]
 800702e:	3b00      	subs	r3, #0
 8007030:	bf18      	it	ne
 8007032:	2301      	movne	r3, #1
 8007034:	0692      	lsls	r2, r2, #26
 8007036:	d42b      	bmi.n	8007090 <_printf_common+0xb0>
 8007038:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800703c:	4641      	mov	r1, r8
 800703e:	4638      	mov	r0, r7
 8007040:	47c8      	blx	r9
 8007042:	3001      	adds	r0, #1
 8007044:	d01e      	beq.n	8007084 <_printf_common+0xa4>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	6922      	ldr	r2, [r4, #16]
 800704a:	f003 0306 	and.w	r3, r3, #6
 800704e:	2b04      	cmp	r3, #4
 8007050:	bf02      	ittt	eq
 8007052:	68e5      	ldreq	r5, [r4, #12]
 8007054:	6833      	ldreq	r3, [r6, #0]
 8007056:	1aed      	subeq	r5, r5, r3
 8007058:	68a3      	ldr	r3, [r4, #8]
 800705a:	bf0c      	ite	eq
 800705c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007060:	2500      	movne	r5, #0
 8007062:	4293      	cmp	r3, r2
 8007064:	bfc4      	itt	gt
 8007066:	1a9b      	subgt	r3, r3, r2
 8007068:	18ed      	addgt	r5, r5, r3
 800706a:	2600      	movs	r6, #0
 800706c:	341a      	adds	r4, #26
 800706e:	42b5      	cmp	r5, r6
 8007070:	d11a      	bne.n	80070a8 <_printf_common+0xc8>
 8007072:	2000      	movs	r0, #0
 8007074:	e008      	b.n	8007088 <_printf_common+0xa8>
 8007076:	2301      	movs	r3, #1
 8007078:	4652      	mov	r2, sl
 800707a:	4641      	mov	r1, r8
 800707c:	4638      	mov	r0, r7
 800707e:	47c8      	blx	r9
 8007080:	3001      	adds	r0, #1
 8007082:	d103      	bne.n	800708c <_printf_common+0xac>
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708c:	3501      	adds	r5, #1
 800708e:	e7c6      	b.n	800701e <_printf_common+0x3e>
 8007090:	18e1      	adds	r1, r4, r3
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	2030      	movs	r0, #48	@ 0x30
 8007096:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800709a:	4422      	add	r2, r4
 800709c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070a4:	3302      	adds	r3, #2
 80070a6:	e7c7      	b.n	8007038 <_printf_common+0x58>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4622      	mov	r2, r4
 80070ac:	4641      	mov	r1, r8
 80070ae:	4638      	mov	r0, r7
 80070b0:	47c8      	blx	r9
 80070b2:	3001      	adds	r0, #1
 80070b4:	d0e6      	beq.n	8007084 <_printf_common+0xa4>
 80070b6:	3601      	adds	r6, #1
 80070b8:	e7d9      	b.n	800706e <_printf_common+0x8e>
	...

080070bc <_printf_i>:
 80070bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070c0:	7e0f      	ldrb	r7, [r1, #24]
 80070c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070c4:	2f78      	cmp	r7, #120	@ 0x78
 80070c6:	4691      	mov	r9, r2
 80070c8:	4680      	mov	r8, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	469a      	mov	sl, r3
 80070ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070d2:	d807      	bhi.n	80070e4 <_printf_i+0x28>
 80070d4:	2f62      	cmp	r7, #98	@ 0x62
 80070d6:	d80a      	bhi.n	80070ee <_printf_i+0x32>
 80070d8:	2f00      	cmp	r7, #0
 80070da:	f000 80d2 	beq.w	8007282 <_printf_i+0x1c6>
 80070de:	2f58      	cmp	r7, #88	@ 0x58
 80070e0:	f000 80b9 	beq.w	8007256 <_printf_i+0x19a>
 80070e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070ec:	e03a      	b.n	8007164 <_printf_i+0xa8>
 80070ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070f2:	2b15      	cmp	r3, #21
 80070f4:	d8f6      	bhi.n	80070e4 <_printf_i+0x28>
 80070f6:	a101      	add	r1, pc, #4	@ (adr r1, 80070fc <_printf_i+0x40>)
 80070f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070fc:	08007155 	.word	0x08007155
 8007100:	08007169 	.word	0x08007169
 8007104:	080070e5 	.word	0x080070e5
 8007108:	080070e5 	.word	0x080070e5
 800710c:	080070e5 	.word	0x080070e5
 8007110:	080070e5 	.word	0x080070e5
 8007114:	08007169 	.word	0x08007169
 8007118:	080070e5 	.word	0x080070e5
 800711c:	080070e5 	.word	0x080070e5
 8007120:	080070e5 	.word	0x080070e5
 8007124:	080070e5 	.word	0x080070e5
 8007128:	08007269 	.word	0x08007269
 800712c:	08007193 	.word	0x08007193
 8007130:	08007223 	.word	0x08007223
 8007134:	080070e5 	.word	0x080070e5
 8007138:	080070e5 	.word	0x080070e5
 800713c:	0800728b 	.word	0x0800728b
 8007140:	080070e5 	.word	0x080070e5
 8007144:	08007193 	.word	0x08007193
 8007148:	080070e5 	.word	0x080070e5
 800714c:	080070e5 	.word	0x080070e5
 8007150:	0800722b 	.word	0x0800722b
 8007154:	6833      	ldr	r3, [r6, #0]
 8007156:	1d1a      	adds	r2, r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6032      	str	r2, [r6, #0]
 800715c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007160:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007164:	2301      	movs	r3, #1
 8007166:	e09d      	b.n	80072a4 <_printf_i+0x1e8>
 8007168:	6833      	ldr	r3, [r6, #0]
 800716a:	6820      	ldr	r0, [r4, #0]
 800716c:	1d19      	adds	r1, r3, #4
 800716e:	6031      	str	r1, [r6, #0]
 8007170:	0606      	lsls	r6, r0, #24
 8007172:	d501      	bpl.n	8007178 <_printf_i+0xbc>
 8007174:	681d      	ldr	r5, [r3, #0]
 8007176:	e003      	b.n	8007180 <_printf_i+0xc4>
 8007178:	0645      	lsls	r5, r0, #25
 800717a:	d5fb      	bpl.n	8007174 <_printf_i+0xb8>
 800717c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007180:	2d00      	cmp	r5, #0
 8007182:	da03      	bge.n	800718c <_printf_i+0xd0>
 8007184:	232d      	movs	r3, #45	@ 0x2d
 8007186:	426d      	negs	r5, r5
 8007188:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800718c:	4859      	ldr	r0, [pc, #356]	@ (80072f4 <_printf_i+0x238>)
 800718e:	230a      	movs	r3, #10
 8007190:	e011      	b.n	80071b6 <_printf_i+0xfa>
 8007192:	6821      	ldr	r1, [r4, #0]
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	0608      	lsls	r0, r1, #24
 8007198:	f853 5b04 	ldr.w	r5, [r3], #4
 800719c:	d402      	bmi.n	80071a4 <_printf_i+0xe8>
 800719e:	0649      	lsls	r1, r1, #25
 80071a0:	bf48      	it	mi
 80071a2:	b2ad      	uxthmi	r5, r5
 80071a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80071a6:	4853      	ldr	r0, [pc, #332]	@ (80072f4 <_printf_i+0x238>)
 80071a8:	6033      	str	r3, [r6, #0]
 80071aa:	bf14      	ite	ne
 80071ac:	230a      	movne	r3, #10
 80071ae:	2308      	moveq	r3, #8
 80071b0:	2100      	movs	r1, #0
 80071b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071b6:	6866      	ldr	r6, [r4, #4]
 80071b8:	60a6      	str	r6, [r4, #8]
 80071ba:	2e00      	cmp	r6, #0
 80071bc:	bfa2      	ittt	ge
 80071be:	6821      	ldrge	r1, [r4, #0]
 80071c0:	f021 0104 	bicge.w	r1, r1, #4
 80071c4:	6021      	strge	r1, [r4, #0]
 80071c6:	b90d      	cbnz	r5, 80071cc <_printf_i+0x110>
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	d04b      	beq.n	8007264 <_printf_i+0x1a8>
 80071cc:	4616      	mov	r6, r2
 80071ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80071d2:	fb03 5711 	mls	r7, r3, r1, r5
 80071d6:	5dc7      	ldrb	r7, [r0, r7]
 80071d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071dc:	462f      	mov	r7, r5
 80071de:	42bb      	cmp	r3, r7
 80071e0:	460d      	mov	r5, r1
 80071e2:	d9f4      	bls.n	80071ce <_printf_i+0x112>
 80071e4:	2b08      	cmp	r3, #8
 80071e6:	d10b      	bne.n	8007200 <_printf_i+0x144>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	07df      	lsls	r7, r3, #31
 80071ec:	d508      	bpl.n	8007200 <_printf_i+0x144>
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	6861      	ldr	r1, [r4, #4]
 80071f2:	4299      	cmp	r1, r3
 80071f4:	bfde      	ittt	le
 80071f6:	2330      	movle	r3, #48	@ 0x30
 80071f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007200:	1b92      	subs	r2, r2, r6
 8007202:	6122      	str	r2, [r4, #16]
 8007204:	f8cd a000 	str.w	sl, [sp]
 8007208:	464b      	mov	r3, r9
 800720a:	aa03      	add	r2, sp, #12
 800720c:	4621      	mov	r1, r4
 800720e:	4640      	mov	r0, r8
 8007210:	f7ff fee6 	bl	8006fe0 <_printf_common>
 8007214:	3001      	adds	r0, #1
 8007216:	d14a      	bne.n	80072ae <_printf_i+0x1f2>
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	b004      	add	sp, #16
 800721e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	f043 0320 	orr.w	r3, r3, #32
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	4833      	ldr	r0, [pc, #204]	@ (80072f8 <_printf_i+0x23c>)
 800722c:	2778      	movs	r7, #120	@ 0x78
 800722e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	6831      	ldr	r1, [r6, #0]
 8007236:	061f      	lsls	r7, r3, #24
 8007238:	f851 5b04 	ldr.w	r5, [r1], #4
 800723c:	d402      	bmi.n	8007244 <_printf_i+0x188>
 800723e:	065f      	lsls	r7, r3, #25
 8007240:	bf48      	it	mi
 8007242:	b2ad      	uxthmi	r5, r5
 8007244:	6031      	str	r1, [r6, #0]
 8007246:	07d9      	lsls	r1, r3, #31
 8007248:	bf44      	itt	mi
 800724a:	f043 0320 	orrmi.w	r3, r3, #32
 800724e:	6023      	strmi	r3, [r4, #0]
 8007250:	b11d      	cbz	r5, 800725a <_printf_i+0x19e>
 8007252:	2310      	movs	r3, #16
 8007254:	e7ac      	b.n	80071b0 <_printf_i+0xf4>
 8007256:	4827      	ldr	r0, [pc, #156]	@ (80072f4 <_printf_i+0x238>)
 8007258:	e7e9      	b.n	800722e <_printf_i+0x172>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	f023 0320 	bic.w	r3, r3, #32
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	e7f6      	b.n	8007252 <_printf_i+0x196>
 8007264:	4616      	mov	r6, r2
 8007266:	e7bd      	b.n	80071e4 <_printf_i+0x128>
 8007268:	6833      	ldr	r3, [r6, #0]
 800726a:	6825      	ldr	r5, [r4, #0]
 800726c:	6961      	ldr	r1, [r4, #20]
 800726e:	1d18      	adds	r0, r3, #4
 8007270:	6030      	str	r0, [r6, #0]
 8007272:	062e      	lsls	r6, r5, #24
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	d501      	bpl.n	800727c <_printf_i+0x1c0>
 8007278:	6019      	str	r1, [r3, #0]
 800727a:	e002      	b.n	8007282 <_printf_i+0x1c6>
 800727c:	0668      	lsls	r0, r5, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0x1bc>
 8007280:	8019      	strh	r1, [r3, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	4616      	mov	r6, r2
 8007288:	e7bc      	b.n	8007204 <_printf_i+0x148>
 800728a:	6833      	ldr	r3, [r6, #0]
 800728c:	1d1a      	adds	r2, r3, #4
 800728e:	6032      	str	r2, [r6, #0]
 8007290:	681e      	ldr	r6, [r3, #0]
 8007292:	6862      	ldr	r2, [r4, #4]
 8007294:	2100      	movs	r1, #0
 8007296:	4630      	mov	r0, r6
 8007298:	f7f8 ffa2 	bl	80001e0 <memchr>
 800729c:	b108      	cbz	r0, 80072a2 <_printf_i+0x1e6>
 800729e:	1b80      	subs	r0, r0, r6
 80072a0:	6060      	str	r0, [r4, #4]
 80072a2:	6863      	ldr	r3, [r4, #4]
 80072a4:	6123      	str	r3, [r4, #16]
 80072a6:	2300      	movs	r3, #0
 80072a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072ac:	e7aa      	b.n	8007204 <_printf_i+0x148>
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	4632      	mov	r2, r6
 80072b2:	4649      	mov	r1, r9
 80072b4:	4640      	mov	r0, r8
 80072b6:	47d0      	blx	sl
 80072b8:	3001      	adds	r0, #1
 80072ba:	d0ad      	beq.n	8007218 <_printf_i+0x15c>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	079b      	lsls	r3, r3, #30
 80072c0:	d413      	bmi.n	80072ea <_printf_i+0x22e>
 80072c2:	68e0      	ldr	r0, [r4, #12]
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	4298      	cmp	r0, r3
 80072c8:	bfb8      	it	lt
 80072ca:	4618      	movlt	r0, r3
 80072cc:	e7a6      	b.n	800721c <_printf_i+0x160>
 80072ce:	2301      	movs	r3, #1
 80072d0:	4632      	mov	r2, r6
 80072d2:	4649      	mov	r1, r9
 80072d4:	4640      	mov	r0, r8
 80072d6:	47d0      	blx	sl
 80072d8:	3001      	adds	r0, #1
 80072da:	d09d      	beq.n	8007218 <_printf_i+0x15c>
 80072dc:	3501      	adds	r5, #1
 80072de:	68e3      	ldr	r3, [r4, #12]
 80072e0:	9903      	ldr	r1, [sp, #12]
 80072e2:	1a5b      	subs	r3, r3, r1
 80072e4:	42ab      	cmp	r3, r5
 80072e6:	dcf2      	bgt.n	80072ce <_printf_i+0x212>
 80072e8:	e7eb      	b.n	80072c2 <_printf_i+0x206>
 80072ea:	2500      	movs	r5, #0
 80072ec:	f104 0619 	add.w	r6, r4, #25
 80072f0:	e7f5      	b.n	80072de <_printf_i+0x222>
 80072f2:	bf00      	nop
 80072f4:	0800cc18 	.word	0x0800cc18
 80072f8:	0800cc29 	.word	0x0800cc29

080072fc <_scanf_float>:
 80072fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007300:	b087      	sub	sp, #28
 8007302:	4617      	mov	r7, r2
 8007304:	9303      	str	r3, [sp, #12]
 8007306:	688b      	ldr	r3, [r1, #8]
 8007308:	1e5a      	subs	r2, r3, #1
 800730a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800730e:	bf81      	itttt	hi
 8007310:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007314:	eb03 0b05 	addhi.w	fp, r3, r5
 8007318:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800731c:	608b      	strhi	r3, [r1, #8]
 800731e:	680b      	ldr	r3, [r1, #0]
 8007320:	460a      	mov	r2, r1
 8007322:	f04f 0500 	mov.w	r5, #0
 8007326:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800732a:	f842 3b1c 	str.w	r3, [r2], #28
 800732e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007332:	4680      	mov	r8, r0
 8007334:	460c      	mov	r4, r1
 8007336:	bf98      	it	ls
 8007338:	f04f 0b00 	movls.w	fp, #0
 800733c:	9201      	str	r2, [sp, #4]
 800733e:	4616      	mov	r6, r2
 8007340:	46aa      	mov	sl, r5
 8007342:	46a9      	mov	r9, r5
 8007344:	9502      	str	r5, [sp, #8]
 8007346:	68a2      	ldr	r2, [r4, #8]
 8007348:	b152      	cbz	r2, 8007360 <_scanf_float+0x64>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007350:	d864      	bhi.n	800741c <_scanf_float+0x120>
 8007352:	2b40      	cmp	r3, #64	@ 0x40
 8007354:	d83c      	bhi.n	80073d0 <_scanf_float+0xd4>
 8007356:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800735a:	b2c8      	uxtb	r0, r1
 800735c:	280e      	cmp	r0, #14
 800735e:	d93a      	bls.n	80073d6 <_scanf_float+0xda>
 8007360:	f1b9 0f00 	cmp.w	r9, #0
 8007364:	d003      	beq.n	800736e <_scanf_float+0x72>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007372:	f1ba 0f01 	cmp.w	sl, #1
 8007376:	f200 8117 	bhi.w	80075a8 <_scanf_float+0x2ac>
 800737a:	9b01      	ldr	r3, [sp, #4]
 800737c:	429e      	cmp	r6, r3
 800737e:	f200 8108 	bhi.w	8007592 <_scanf_float+0x296>
 8007382:	2001      	movs	r0, #1
 8007384:	b007      	add	sp, #28
 8007386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800738e:	2a0d      	cmp	r2, #13
 8007390:	d8e6      	bhi.n	8007360 <_scanf_float+0x64>
 8007392:	a101      	add	r1, pc, #4	@ (adr r1, 8007398 <_scanf_float+0x9c>)
 8007394:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007398:	080074df 	.word	0x080074df
 800739c:	08007361 	.word	0x08007361
 80073a0:	08007361 	.word	0x08007361
 80073a4:	08007361 	.word	0x08007361
 80073a8:	0800753f 	.word	0x0800753f
 80073ac:	08007517 	.word	0x08007517
 80073b0:	08007361 	.word	0x08007361
 80073b4:	08007361 	.word	0x08007361
 80073b8:	080074ed 	.word	0x080074ed
 80073bc:	08007361 	.word	0x08007361
 80073c0:	08007361 	.word	0x08007361
 80073c4:	08007361 	.word	0x08007361
 80073c8:	08007361 	.word	0x08007361
 80073cc:	080074a5 	.word	0x080074a5
 80073d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80073d4:	e7db      	b.n	800738e <_scanf_float+0x92>
 80073d6:	290e      	cmp	r1, #14
 80073d8:	d8c2      	bhi.n	8007360 <_scanf_float+0x64>
 80073da:	a001      	add	r0, pc, #4	@ (adr r0, 80073e0 <_scanf_float+0xe4>)
 80073dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80073e0:	08007495 	.word	0x08007495
 80073e4:	08007361 	.word	0x08007361
 80073e8:	08007495 	.word	0x08007495
 80073ec:	0800752b 	.word	0x0800752b
 80073f0:	08007361 	.word	0x08007361
 80073f4:	0800743d 	.word	0x0800743d
 80073f8:	0800747b 	.word	0x0800747b
 80073fc:	0800747b 	.word	0x0800747b
 8007400:	0800747b 	.word	0x0800747b
 8007404:	0800747b 	.word	0x0800747b
 8007408:	0800747b 	.word	0x0800747b
 800740c:	0800747b 	.word	0x0800747b
 8007410:	0800747b 	.word	0x0800747b
 8007414:	0800747b 	.word	0x0800747b
 8007418:	0800747b 	.word	0x0800747b
 800741c:	2b6e      	cmp	r3, #110	@ 0x6e
 800741e:	d809      	bhi.n	8007434 <_scanf_float+0x138>
 8007420:	2b60      	cmp	r3, #96	@ 0x60
 8007422:	d8b2      	bhi.n	800738a <_scanf_float+0x8e>
 8007424:	2b54      	cmp	r3, #84	@ 0x54
 8007426:	d07b      	beq.n	8007520 <_scanf_float+0x224>
 8007428:	2b59      	cmp	r3, #89	@ 0x59
 800742a:	d199      	bne.n	8007360 <_scanf_float+0x64>
 800742c:	2d07      	cmp	r5, #7
 800742e:	d197      	bne.n	8007360 <_scanf_float+0x64>
 8007430:	2508      	movs	r5, #8
 8007432:	e02c      	b.n	800748e <_scanf_float+0x192>
 8007434:	2b74      	cmp	r3, #116	@ 0x74
 8007436:	d073      	beq.n	8007520 <_scanf_float+0x224>
 8007438:	2b79      	cmp	r3, #121	@ 0x79
 800743a:	e7f6      	b.n	800742a <_scanf_float+0x12e>
 800743c:	6821      	ldr	r1, [r4, #0]
 800743e:	05c8      	lsls	r0, r1, #23
 8007440:	d51b      	bpl.n	800747a <_scanf_float+0x17e>
 8007442:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007446:	6021      	str	r1, [r4, #0]
 8007448:	f109 0901 	add.w	r9, r9, #1
 800744c:	f1bb 0f00 	cmp.w	fp, #0
 8007450:	d003      	beq.n	800745a <_scanf_float+0x15e>
 8007452:	3201      	adds	r2, #1
 8007454:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007458:	60a2      	str	r2, [r4, #8]
 800745a:	68a3      	ldr	r3, [r4, #8]
 800745c:	3b01      	subs	r3, #1
 800745e:	60a3      	str	r3, [r4, #8]
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	3301      	adds	r3, #1
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3b01      	subs	r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	607b      	str	r3, [r7, #4]
 800746e:	f340 8087 	ble.w	8007580 <_scanf_float+0x284>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	3301      	adds	r3, #1
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	e765      	b.n	8007346 <_scanf_float+0x4a>
 800747a:	eb1a 0105 	adds.w	r1, sl, r5
 800747e:	f47f af6f 	bne.w	8007360 <_scanf_float+0x64>
 8007482:	6822      	ldr	r2, [r4, #0]
 8007484:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007488:	6022      	str	r2, [r4, #0]
 800748a:	460d      	mov	r5, r1
 800748c:	468a      	mov	sl, r1
 800748e:	f806 3b01 	strb.w	r3, [r6], #1
 8007492:	e7e2      	b.n	800745a <_scanf_float+0x15e>
 8007494:	6822      	ldr	r2, [r4, #0]
 8007496:	0610      	lsls	r0, r2, #24
 8007498:	f57f af62 	bpl.w	8007360 <_scanf_float+0x64>
 800749c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074a0:	6022      	str	r2, [r4, #0]
 80074a2:	e7f4      	b.n	800748e <_scanf_float+0x192>
 80074a4:	f1ba 0f00 	cmp.w	sl, #0
 80074a8:	d10e      	bne.n	80074c8 <_scanf_float+0x1cc>
 80074aa:	f1b9 0f00 	cmp.w	r9, #0
 80074ae:	d10e      	bne.n	80074ce <_scanf_float+0x1d2>
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074ba:	d108      	bne.n	80074ce <_scanf_float+0x1d2>
 80074bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074c0:	6022      	str	r2, [r4, #0]
 80074c2:	f04f 0a01 	mov.w	sl, #1
 80074c6:	e7e2      	b.n	800748e <_scanf_float+0x192>
 80074c8:	f1ba 0f02 	cmp.w	sl, #2
 80074cc:	d055      	beq.n	800757a <_scanf_float+0x27e>
 80074ce:	2d01      	cmp	r5, #1
 80074d0:	d002      	beq.n	80074d8 <_scanf_float+0x1dc>
 80074d2:	2d04      	cmp	r5, #4
 80074d4:	f47f af44 	bne.w	8007360 <_scanf_float+0x64>
 80074d8:	3501      	adds	r5, #1
 80074da:	b2ed      	uxtb	r5, r5
 80074dc:	e7d7      	b.n	800748e <_scanf_float+0x192>
 80074de:	f1ba 0f01 	cmp.w	sl, #1
 80074e2:	f47f af3d 	bne.w	8007360 <_scanf_float+0x64>
 80074e6:	f04f 0a02 	mov.w	sl, #2
 80074ea:	e7d0      	b.n	800748e <_scanf_float+0x192>
 80074ec:	b97d      	cbnz	r5, 800750e <_scanf_float+0x212>
 80074ee:	f1b9 0f00 	cmp.w	r9, #0
 80074f2:	f47f af38 	bne.w	8007366 <_scanf_float+0x6a>
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007500:	f040 8108 	bne.w	8007714 <_scanf_float+0x418>
 8007504:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	2501      	movs	r5, #1
 800750c:	e7bf      	b.n	800748e <_scanf_float+0x192>
 800750e:	2d03      	cmp	r5, #3
 8007510:	d0e2      	beq.n	80074d8 <_scanf_float+0x1dc>
 8007512:	2d05      	cmp	r5, #5
 8007514:	e7de      	b.n	80074d4 <_scanf_float+0x1d8>
 8007516:	2d02      	cmp	r5, #2
 8007518:	f47f af22 	bne.w	8007360 <_scanf_float+0x64>
 800751c:	2503      	movs	r5, #3
 800751e:	e7b6      	b.n	800748e <_scanf_float+0x192>
 8007520:	2d06      	cmp	r5, #6
 8007522:	f47f af1d 	bne.w	8007360 <_scanf_float+0x64>
 8007526:	2507      	movs	r5, #7
 8007528:	e7b1      	b.n	800748e <_scanf_float+0x192>
 800752a:	6822      	ldr	r2, [r4, #0]
 800752c:	0591      	lsls	r1, r2, #22
 800752e:	f57f af17 	bpl.w	8007360 <_scanf_float+0x64>
 8007532:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007536:	6022      	str	r2, [r4, #0]
 8007538:	f8cd 9008 	str.w	r9, [sp, #8]
 800753c:	e7a7      	b.n	800748e <_scanf_float+0x192>
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007544:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007548:	d006      	beq.n	8007558 <_scanf_float+0x25c>
 800754a:	0550      	lsls	r0, r2, #21
 800754c:	f57f af08 	bpl.w	8007360 <_scanf_float+0x64>
 8007550:	f1b9 0f00 	cmp.w	r9, #0
 8007554:	f000 80de 	beq.w	8007714 <_scanf_float+0x418>
 8007558:	0591      	lsls	r1, r2, #22
 800755a:	bf58      	it	pl
 800755c:	9902      	ldrpl	r1, [sp, #8]
 800755e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007562:	bf58      	it	pl
 8007564:	eba9 0101 	subpl.w	r1, r9, r1
 8007568:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800756c:	bf58      	it	pl
 800756e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	f04f 0900 	mov.w	r9, #0
 8007578:	e789      	b.n	800748e <_scanf_float+0x192>
 800757a:	f04f 0a03 	mov.w	sl, #3
 800757e:	e786      	b.n	800748e <_scanf_float+0x192>
 8007580:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007584:	4639      	mov	r1, r7
 8007586:	4640      	mov	r0, r8
 8007588:	4798      	blx	r3
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f aedb 	beq.w	8007346 <_scanf_float+0x4a>
 8007590:	e6e6      	b.n	8007360 <_scanf_float+0x64>
 8007592:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007596:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800759a:	463a      	mov	r2, r7
 800759c:	4640      	mov	r0, r8
 800759e:	4798      	blx	r3
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	6123      	str	r3, [r4, #16]
 80075a6:	e6e8      	b.n	800737a <_scanf_float+0x7e>
 80075a8:	1e6b      	subs	r3, r5, #1
 80075aa:	2b06      	cmp	r3, #6
 80075ac:	d824      	bhi.n	80075f8 <_scanf_float+0x2fc>
 80075ae:	2d02      	cmp	r5, #2
 80075b0:	d836      	bhi.n	8007620 <_scanf_float+0x324>
 80075b2:	9b01      	ldr	r3, [sp, #4]
 80075b4:	429e      	cmp	r6, r3
 80075b6:	f67f aee4 	bls.w	8007382 <_scanf_float+0x86>
 80075ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075c2:	463a      	mov	r2, r7
 80075c4:	4640      	mov	r0, r8
 80075c6:	4798      	blx	r3
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	e7f0      	b.n	80075b2 <_scanf_float+0x2b6>
 80075d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80075d8:	463a      	mov	r2, r7
 80075da:	4640      	mov	r0, r8
 80075dc:	4798      	blx	r3
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	6123      	str	r3, [r4, #16]
 80075e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075e8:	fa5f fa8a 	uxtb.w	sl, sl
 80075ec:	f1ba 0f02 	cmp.w	sl, #2
 80075f0:	d1ee      	bne.n	80075d0 <_scanf_float+0x2d4>
 80075f2:	3d03      	subs	r5, #3
 80075f4:	b2ed      	uxtb	r5, r5
 80075f6:	1b76      	subs	r6, r6, r5
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	05da      	lsls	r2, r3, #23
 80075fc:	d530      	bpl.n	8007660 <_scanf_float+0x364>
 80075fe:	055b      	lsls	r3, r3, #21
 8007600:	d511      	bpl.n	8007626 <_scanf_float+0x32a>
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	429e      	cmp	r6, r3
 8007606:	f67f aebc 	bls.w	8007382 <_scanf_float+0x86>
 800760a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800760e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007612:	463a      	mov	r2, r7
 8007614:	4640      	mov	r0, r8
 8007616:	4798      	blx	r3
 8007618:	6923      	ldr	r3, [r4, #16]
 800761a:	3b01      	subs	r3, #1
 800761c:	6123      	str	r3, [r4, #16]
 800761e:	e7f0      	b.n	8007602 <_scanf_float+0x306>
 8007620:	46aa      	mov	sl, r5
 8007622:	46b3      	mov	fp, r6
 8007624:	e7de      	b.n	80075e4 <_scanf_float+0x2e8>
 8007626:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	2965      	cmp	r1, #101	@ 0x65
 800762e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007632:	f106 35ff 	add.w	r5, r6, #4294967295
 8007636:	6123      	str	r3, [r4, #16]
 8007638:	d00c      	beq.n	8007654 <_scanf_float+0x358>
 800763a:	2945      	cmp	r1, #69	@ 0x45
 800763c:	d00a      	beq.n	8007654 <_scanf_float+0x358>
 800763e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007642:	463a      	mov	r2, r7
 8007644:	4640      	mov	r0, r8
 8007646:	4798      	blx	r3
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800764e:	3b01      	subs	r3, #1
 8007650:	1eb5      	subs	r5, r6, #2
 8007652:	6123      	str	r3, [r4, #16]
 8007654:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007658:	463a      	mov	r2, r7
 800765a:	4640      	mov	r0, r8
 800765c:	4798      	blx	r3
 800765e:	462e      	mov	r6, r5
 8007660:	6822      	ldr	r2, [r4, #0]
 8007662:	f012 0210 	ands.w	r2, r2, #16
 8007666:	d001      	beq.n	800766c <_scanf_float+0x370>
 8007668:	2000      	movs	r0, #0
 800766a:	e68b      	b.n	8007384 <_scanf_float+0x88>
 800766c:	7032      	strb	r2, [r6, #0]
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007678:	d11c      	bne.n	80076b4 <_scanf_float+0x3b8>
 800767a:	9b02      	ldr	r3, [sp, #8]
 800767c:	454b      	cmp	r3, r9
 800767e:	eba3 0209 	sub.w	r2, r3, r9
 8007682:	d123      	bne.n	80076cc <_scanf_float+0x3d0>
 8007684:	9901      	ldr	r1, [sp, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	4640      	mov	r0, r8
 800768a:	f7ff f9cd 	bl	8006a28 <_strtod_r>
 800768e:	9b03      	ldr	r3, [sp, #12]
 8007690:	6821      	ldr	r1, [r4, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f011 0f02 	tst.w	r1, #2
 8007698:	ec57 6b10 	vmov	r6, r7, d0
 800769c:	f103 0204 	add.w	r2, r3, #4
 80076a0:	d01f      	beq.n	80076e2 <_scanf_float+0x3e6>
 80076a2:	9903      	ldr	r1, [sp, #12]
 80076a4:	600a      	str	r2, [r1, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	e9c3 6700 	strd	r6, r7, [r3]
 80076ac:	68e3      	ldr	r3, [r4, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	60e3      	str	r3, [r4, #12]
 80076b2:	e7d9      	b.n	8007668 <_scanf_float+0x36c>
 80076b4:	9b04      	ldr	r3, [sp, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0e4      	beq.n	8007684 <_scanf_float+0x388>
 80076ba:	9905      	ldr	r1, [sp, #20]
 80076bc:	230a      	movs	r3, #10
 80076be:	3101      	adds	r1, #1
 80076c0:	4640      	mov	r0, r8
 80076c2:	f002 faa1 	bl	8009c08 <_strtol_r>
 80076c6:	9b04      	ldr	r3, [sp, #16]
 80076c8:	9e05      	ldr	r6, [sp, #20]
 80076ca:	1ac2      	subs	r2, r0, r3
 80076cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80076d0:	429e      	cmp	r6, r3
 80076d2:	bf28      	it	cs
 80076d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80076d8:	4910      	ldr	r1, [pc, #64]	@ (800771c <_scanf_float+0x420>)
 80076da:	4630      	mov	r0, r6
 80076dc:	f000 f918 	bl	8007910 <siprintf>
 80076e0:	e7d0      	b.n	8007684 <_scanf_float+0x388>
 80076e2:	f011 0f04 	tst.w	r1, #4
 80076e6:	9903      	ldr	r1, [sp, #12]
 80076e8:	600a      	str	r2, [r1, #0]
 80076ea:	d1dc      	bne.n	80076a6 <_scanf_float+0x3aa>
 80076ec:	681d      	ldr	r5, [r3, #0]
 80076ee:	4632      	mov	r2, r6
 80076f0:	463b      	mov	r3, r7
 80076f2:	4630      	mov	r0, r6
 80076f4:	4639      	mov	r1, r7
 80076f6:	f7f9 fa21 	bl	8000b3c <__aeabi_dcmpun>
 80076fa:	b128      	cbz	r0, 8007708 <_scanf_float+0x40c>
 80076fc:	4808      	ldr	r0, [pc, #32]	@ (8007720 <_scanf_float+0x424>)
 80076fe:	f000 fa9b 	bl	8007c38 <nanf>
 8007702:	ed85 0a00 	vstr	s0, [r5]
 8007706:	e7d1      	b.n	80076ac <_scanf_float+0x3b0>
 8007708:	4630      	mov	r0, r6
 800770a:	4639      	mov	r1, r7
 800770c:	f7f9 fa74 	bl	8000bf8 <__aeabi_d2f>
 8007710:	6028      	str	r0, [r5, #0]
 8007712:	e7cb      	b.n	80076ac <_scanf_float+0x3b0>
 8007714:	f04f 0900 	mov.w	r9, #0
 8007718:	e629      	b.n	800736e <_scanf_float+0x72>
 800771a:	bf00      	nop
 800771c:	0800cc3a 	.word	0x0800cc3a
 8007720:	0800ccf3 	.word	0x0800ccf3

08007724 <std>:
 8007724:	2300      	movs	r3, #0
 8007726:	b510      	push	{r4, lr}
 8007728:	4604      	mov	r4, r0
 800772a:	e9c0 3300 	strd	r3, r3, [r0]
 800772e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007732:	6083      	str	r3, [r0, #8]
 8007734:	8181      	strh	r1, [r0, #12]
 8007736:	6643      	str	r3, [r0, #100]	@ 0x64
 8007738:	81c2      	strh	r2, [r0, #14]
 800773a:	6183      	str	r3, [r0, #24]
 800773c:	4619      	mov	r1, r3
 800773e:	2208      	movs	r2, #8
 8007740:	305c      	adds	r0, #92	@ 0x5c
 8007742:	f000 f974 	bl	8007a2e <memset>
 8007746:	4b0d      	ldr	r3, [pc, #52]	@ (800777c <std+0x58>)
 8007748:	6263      	str	r3, [r4, #36]	@ 0x24
 800774a:	4b0d      	ldr	r3, [pc, #52]	@ (8007780 <std+0x5c>)
 800774c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <std+0x60>)
 8007750:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007752:	4b0d      	ldr	r3, [pc, #52]	@ (8007788 <std+0x64>)
 8007754:	6323      	str	r3, [r4, #48]	@ 0x30
 8007756:	4b0d      	ldr	r3, [pc, #52]	@ (800778c <std+0x68>)
 8007758:	6224      	str	r4, [r4, #32]
 800775a:	429c      	cmp	r4, r3
 800775c:	d006      	beq.n	800776c <std+0x48>
 800775e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007762:	4294      	cmp	r4, r2
 8007764:	d002      	beq.n	800776c <std+0x48>
 8007766:	33d0      	adds	r3, #208	@ 0xd0
 8007768:	429c      	cmp	r4, r3
 800776a:	d105      	bne.n	8007778 <std+0x54>
 800776c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007774:	f000 ba46 	b.w	8007c04 <__retarget_lock_init_recursive>
 8007778:	bd10      	pop	{r4, pc}
 800777a:	bf00      	nop
 800777c:	080079a5 	.word	0x080079a5
 8007780:	080079cb 	.word	0x080079cb
 8007784:	08007a03 	.word	0x08007a03
 8007788:	08007a27 	.word	0x08007a27
 800778c:	20000830 	.word	0x20000830

08007790 <stdio_exit_handler>:
 8007790:	4a02      	ldr	r2, [pc, #8]	@ (800779c <stdio_exit_handler+0xc>)
 8007792:	4903      	ldr	r1, [pc, #12]	@ (80077a0 <stdio_exit_handler+0x10>)
 8007794:	4803      	ldr	r0, [pc, #12]	@ (80077a4 <stdio_exit_handler+0x14>)
 8007796:	f000 b869 	b.w	800786c <_fwalk_sglue>
 800779a:	bf00      	nop
 800779c:	2000005c 	.word	0x2000005c
 80077a0:	0800a611 	.word	0x0800a611
 80077a4:	200001d8 	.word	0x200001d8

080077a8 <cleanup_stdio>:
 80077a8:	6841      	ldr	r1, [r0, #4]
 80077aa:	4b0c      	ldr	r3, [pc, #48]	@ (80077dc <cleanup_stdio+0x34>)
 80077ac:	4299      	cmp	r1, r3
 80077ae:	b510      	push	{r4, lr}
 80077b0:	4604      	mov	r4, r0
 80077b2:	d001      	beq.n	80077b8 <cleanup_stdio+0x10>
 80077b4:	f002 ff2c 	bl	800a610 <_fflush_r>
 80077b8:	68a1      	ldr	r1, [r4, #8]
 80077ba:	4b09      	ldr	r3, [pc, #36]	@ (80077e0 <cleanup_stdio+0x38>)
 80077bc:	4299      	cmp	r1, r3
 80077be:	d002      	beq.n	80077c6 <cleanup_stdio+0x1e>
 80077c0:	4620      	mov	r0, r4
 80077c2:	f002 ff25 	bl	800a610 <_fflush_r>
 80077c6:	68e1      	ldr	r1, [r4, #12]
 80077c8:	4b06      	ldr	r3, [pc, #24]	@ (80077e4 <cleanup_stdio+0x3c>)
 80077ca:	4299      	cmp	r1, r3
 80077cc:	d004      	beq.n	80077d8 <cleanup_stdio+0x30>
 80077ce:	4620      	mov	r0, r4
 80077d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d4:	f002 bf1c 	b.w	800a610 <_fflush_r>
 80077d8:	bd10      	pop	{r4, pc}
 80077da:	bf00      	nop
 80077dc:	20000830 	.word	0x20000830
 80077e0:	20000898 	.word	0x20000898
 80077e4:	20000900 	.word	0x20000900

080077e8 <global_stdio_init.part.0>:
 80077e8:	b510      	push	{r4, lr}
 80077ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007818 <global_stdio_init.part.0+0x30>)
 80077ec:	4c0b      	ldr	r4, [pc, #44]	@ (800781c <global_stdio_init.part.0+0x34>)
 80077ee:	4a0c      	ldr	r2, [pc, #48]	@ (8007820 <global_stdio_init.part.0+0x38>)
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	4620      	mov	r0, r4
 80077f4:	2200      	movs	r2, #0
 80077f6:	2104      	movs	r1, #4
 80077f8:	f7ff ff94 	bl	8007724 <std>
 80077fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007800:	2201      	movs	r2, #1
 8007802:	2109      	movs	r1, #9
 8007804:	f7ff ff8e 	bl	8007724 <std>
 8007808:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800780c:	2202      	movs	r2, #2
 800780e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007812:	2112      	movs	r1, #18
 8007814:	f7ff bf86 	b.w	8007724 <std>
 8007818:	20000968 	.word	0x20000968
 800781c:	20000830 	.word	0x20000830
 8007820:	08007791 	.word	0x08007791

08007824 <__sfp_lock_acquire>:
 8007824:	4801      	ldr	r0, [pc, #4]	@ (800782c <__sfp_lock_acquire+0x8>)
 8007826:	f000 b9ee 	b.w	8007c06 <__retarget_lock_acquire_recursive>
 800782a:	bf00      	nop
 800782c:	20000971 	.word	0x20000971

08007830 <__sfp_lock_release>:
 8007830:	4801      	ldr	r0, [pc, #4]	@ (8007838 <__sfp_lock_release+0x8>)
 8007832:	f000 b9e9 	b.w	8007c08 <__retarget_lock_release_recursive>
 8007836:	bf00      	nop
 8007838:	20000971 	.word	0x20000971

0800783c <__sinit>:
 800783c:	b510      	push	{r4, lr}
 800783e:	4604      	mov	r4, r0
 8007840:	f7ff fff0 	bl	8007824 <__sfp_lock_acquire>
 8007844:	6a23      	ldr	r3, [r4, #32]
 8007846:	b11b      	cbz	r3, 8007850 <__sinit+0x14>
 8007848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784c:	f7ff bff0 	b.w	8007830 <__sfp_lock_release>
 8007850:	4b04      	ldr	r3, [pc, #16]	@ (8007864 <__sinit+0x28>)
 8007852:	6223      	str	r3, [r4, #32]
 8007854:	4b04      	ldr	r3, [pc, #16]	@ (8007868 <__sinit+0x2c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1f5      	bne.n	8007848 <__sinit+0xc>
 800785c:	f7ff ffc4 	bl	80077e8 <global_stdio_init.part.0>
 8007860:	e7f2      	b.n	8007848 <__sinit+0xc>
 8007862:	bf00      	nop
 8007864:	080077a9 	.word	0x080077a9
 8007868:	20000968 	.word	0x20000968

0800786c <_fwalk_sglue>:
 800786c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007870:	4607      	mov	r7, r0
 8007872:	4688      	mov	r8, r1
 8007874:	4614      	mov	r4, r2
 8007876:	2600      	movs	r6, #0
 8007878:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800787c:	f1b9 0901 	subs.w	r9, r9, #1
 8007880:	d505      	bpl.n	800788e <_fwalk_sglue+0x22>
 8007882:	6824      	ldr	r4, [r4, #0]
 8007884:	2c00      	cmp	r4, #0
 8007886:	d1f7      	bne.n	8007878 <_fwalk_sglue+0xc>
 8007888:	4630      	mov	r0, r6
 800788a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800788e:	89ab      	ldrh	r3, [r5, #12]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d907      	bls.n	80078a4 <_fwalk_sglue+0x38>
 8007894:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007898:	3301      	adds	r3, #1
 800789a:	d003      	beq.n	80078a4 <_fwalk_sglue+0x38>
 800789c:	4629      	mov	r1, r5
 800789e:	4638      	mov	r0, r7
 80078a0:	47c0      	blx	r8
 80078a2:	4306      	orrs	r6, r0
 80078a4:	3568      	adds	r5, #104	@ 0x68
 80078a6:	e7e9      	b.n	800787c <_fwalk_sglue+0x10>

080078a8 <sniprintf>:
 80078a8:	b40c      	push	{r2, r3}
 80078aa:	b530      	push	{r4, r5, lr}
 80078ac:	4b17      	ldr	r3, [pc, #92]	@ (800790c <sniprintf+0x64>)
 80078ae:	1e0c      	subs	r4, r1, #0
 80078b0:	681d      	ldr	r5, [r3, #0]
 80078b2:	b09d      	sub	sp, #116	@ 0x74
 80078b4:	da08      	bge.n	80078c8 <sniprintf+0x20>
 80078b6:	238b      	movs	r3, #139	@ 0x8b
 80078b8:	602b      	str	r3, [r5, #0]
 80078ba:	f04f 30ff 	mov.w	r0, #4294967295
 80078be:	b01d      	add	sp, #116	@ 0x74
 80078c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078c4:	b002      	add	sp, #8
 80078c6:	4770      	bx	lr
 80078c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078d0:	bf14      	ite	ne
 80078d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078d6:	4623      	moveq	r3, r4
 80078d8:	9304      	str	r3, [sp, #16]
 80078da:	9307      	str	r3, [sp, #28]
 80078dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078e0:	9002      	str	r0, [sp, #8]
 80078e2:	9006      	str	r0, [sp, #24]
 80078e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80078ea:	ab21      	add	r3, sp, #132	@ 0x84
 80078ec:	a902      	add	r1, sp, #8
 80078ee:	4628      	mov	r0, r5
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	f002 f9f3 	bl	8009cdc <_svfiprintf_r>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	bfbc      	itt	lt
 80078fa:	238b      	movlt	r3, #139	@ 0x8b
 80078fc:	602b      	strlt	r3, [r5, #0]
 80078fe:	2c00      	cmp	r4, #0
 8007900:	d0dd      	beq.n	80078be <sniprintf+0x16>
 8007902:	9b02      	ldr	r3, [sp, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	e7d9      	b.n	80078be <sniprintf+0x16>
 800790a:	bf00      	nop
 800790c:	200001d4 	.word	0x200001d4

08007910 <siprintf>:
 8007910:	b40e      	push	{r1, r2, r3}
 8007912:	b500      	push	{lr}
 8007914:	b09c      	sub	sp, #112	@ 0x70
 8007916:	ab1d      	add	r3, sp, #116	@ 0x74
 8007918:	9002      	str	r0, [sp, #8]
 800791a:	9006      	str	r0, [sp, #24]
 800791c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007920:	4809      	ldr	r0, [pc, #36]	@ (8007948 <siprintf+0x38>)
 8007922:	9107      	str	r1, [sp, #28]
 8007924:	9104      	str	r1, [sp, #16]
 8007926:	4909      	ldr	r1, [pc, #36]	@ (800794c <siprintf+0x3c>)
 8007928:	f853 2b04 	ldr.w	r2, [r3], #4
 800792c:	9105      	str	r1, [sp, #20]
 800792e:	6800      	ldr	r0, [r0, #0]
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	a902      	add	r1, sp, #8
 8007934:	f002 f9d2 	bl	8009cdc <_svfiprintf_r>
 8007938:	9b02      	ldr	r3, [sp, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	b01c      	add	sp, #112	@ 0x70
 8007940:	f85d eb04 	ldr.w	lr, [sp], #4
 8007944:	b003      	add	sp, #12
 8007946:	4770      	bx	lr
 8007948:	200001d4 	.word	0x200001d4
 800794c:	ffff0208 	.word	0xffff0208

08007950 <siscanf>:
 8007950:	b40e      	push	{r1, r2, r3}
 8007952:	b530      	push	{r4, r5, lr}
 8007954:	b09c      	sub	sp, #112	@ 0x70
 8007956:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007958:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800795c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007960:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007964:	9002      	str	r0, [sp, #8]
 8007966:	9006      	str	r0, [sp, #24]
 8007968:	f7f8 fc8a 	bl	8000280 <strlen>
 800796c:	4b0b      	ldr	r3, [pc, #44]	@ (800799c <siscanf+0x4c>)
 800796e:	9003      	str	r0, [sp, #12]
 8007970:	9007      	str	r0, [sp, #28]
 8007972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007974:	480a      	ldr	r0, [pc, #40]	@ (80079a0 <siscanf+0x50>)
 8007976:	9401      	str	r4, [sp, #4]
 8007978:	2300      	movs	r3, #0
 800797a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800797c:	9314      	str	r3, [sp, #80]	@ 0x50
 800797e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007982:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007986:	462a      	mov	r2, r5
 8007988:	4623      	mov	r3, r4
 800798a:	a902      	add	r1, sp, #8
 800798c:	6800      	ldr	r0, [r0, #0]
 800798e:	f002 faf9 	bl	8009f84 <__ssvfiscanf_r>
 8007992:	b01c      	add	sp, #112	@ 0x70
 8007994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007998:	b003      	add	sp, #12
 800799a:	4770      	bx	lr
 800799c:	080079c7 	.word	0x080079c7
 80079a0:	200001d4 	.word	0x200001d4

080079a4 <__sread>:
 80079a4:	b510      	push	{r4, lr}
 80079a6:	460c      	mov	r4, r1
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	f000 f8dc 	bl	8007b68 <_read_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	bfab      	itete	ge
 80079b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079b6:	89a3      	ldrhlt	r3, [r4, #12]
 80079b8:	181b      	addge	r3, r3, r0
 80079ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079be:	bfac      	ite	ge
 80079c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079c2:	81a3      	strhlt	r3, [r4, #12]
 80079c4:	bd10      	pop	{r4, pc}

080079c6 <__seofread>:
 80079c6:	2000      	movs	r0, #0
 80079c8:	4770      	bx	lr

080079ca <__swrite>:
 80079ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ce:	461f      	mov	r7, r3
 80079d0:	898b      	ldrh	r3, [r1, #12]
 80079d2:	05db      	lsls	r3, r3, #23
 80079d4:	4605      	mov	r5, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	4616      	mov	r6, r2
 80079da:	d505      	bpl.n	80079e8 <__swrite+0x1e>
 80079dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e0:	2302      	movs	r3, #2
 80079e2:	2200      	movs	r2, #0
 80079e4:	f000 f8ae 	bl	8007b44 <_lseek_r>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	4632      	mov	r2, r6
 80079f6:	463b      	mov	r3, r7
 80079f8:	4628      	mov	r0, r5
 80079fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079fe:	f000 b8c5 	b.w	8007b8c <_write_r>

08007a02 <__sseek>:
 8007a02:	b510      	push	{r4, lr}
 8007a04:	460c      	mov	r4, r1
 8007a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0a:	f000 f89b 	bl	8007b44 <_lseek_r>
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	bf15      	itete	ne
 8007a14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a1e:	81a3      	strheq	r3, [r4, #12]
 8007a20:	bf18      	it	ne
 8007a22:	81a3      	strhne	r3, [r4, #12]
 8007a24:	bd10      	pop	{r4, pc}

08007a26 <__sclose>:
 8007a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2a:	f000 b87b 	b.w	8007b24 <_close_r>

08007a2e <memset>:
 8007a2e:	4402      	add	r2, r0
 8007a30:	4603      	mov	r3, r0
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d100      	bne.n	8007a38 <memset+0xa>
 8007a36:	4770      	bx	lr
 8007a38:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3c:	e7f9      	b.n	8007a32 <memset+0x4>

08007a3e <strncmp>:
 8007a3e:	b510      	push	{r4, lr}
 8007a40:	b16a      	cbz	r2, 8007a5e <strncmp+0x20>
 8007a42:	3901      	subs	r1, #1
 8007a44:	1884      	adds	r4, r0, r2
 8007a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d103      	bne.n	8007a5a <strncmp+0x1c>
 8007a52:	42a0      	cmp	r0, r4
 8007a54:	d001      	beq.n	8007a5a <strncmp+0x1c>
 8007a56:	2a00      	cmp	r2, #0
 8007a58:	d1f5      	bne.n	8007a46 <strncmp+0x8>
 8007a5a:	1ad0      	subs	r0, r2, r3
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	4610      	mov	r0, r2
 8007a60:	e7fc      	b.n	8007a5c <strncmp+0x1e>
	...

08007a64 <strtok>:
 8007a64:	4b16      	ldr	r3, [pc, #88]	@ (8007ac0 <strtok+0x5c>)
 8007a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6a:	681f      	ldr	r7, [r3, #0]
 8007a6c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007a6e:	4605      	mov	r5, r0
 8007a70:	460e      	mov	r6, r1
 8007a72:	b9ec      	cbnz	r4, 8007ab0 <strtok+0x4c>
 8007a74:	2050      	movs	r0, #80	@ 0x50
 8007a76:	f001 fad3 	bl	8009020 <malloc>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	6478      	str	r0, [r7, #68]	@ 0x44
 8007a7e:	b920      	cbnz	r0, 8007a8a <strtok+0x26>
 8007a80:	4b10      	ldr	r3, [pc, #64]	@ (8007ac4 <strtok+0x60>)
 8007a82:	4811      	ldr	r0, [pc, #68]	@ (8007ac8 <strtok+0x64>)
 8007a84:	215b      	movs	r1, #91	@ 0x5b
 8007a86:	f000 f8dd 	bl	8007c44 <__assert_func>
 8007a8a:	e9c0 4400 	strd	r4, r4, [r0]
 8007a8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007a92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007a96:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007a9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007a9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007aa2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007aa6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007aaa:	6184      	str	r4, [r0, #24]
 8007aac:	7704      	strb	r4, [r0, #28]
 8007aae:	6244      	str	r4, [r0, #36]	@ 0x24
 8007ab0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007abc:	f000 b806 	b.w	8007acc <__strtok_r>
 8007ac0:	200001d4 	.word	0x200001d4
 8007ac4:	0800cc3f 	.word	0x0800cc3f
 8007ac8:	0800cc56 	.word	0x0800cc56

08007acc <__strtok_r>:
 8007acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ace:	4604      	mov	r4, r0
 8007ad0:	b908      	cbnz	r0, 8007ad6 <__strtok_r+0xa>
 8007ad2:	6814      	ldr	r4, [r2, #0]
 8007ad4:	b144      	cbz	r4, 8007ae8 <__strtok_r+0x1c>
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007adc:	460f      	mov	r7, r1
 8007ade:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007ae2:	b91e      	cbnz	r6, 8007aec <__strtok_r+0x20>
 8007ae4:	b965      	cbnz	r5, 8007b00 <__strtok_r+0x34>
 8007ae6:	6015      	str	r5, [r2, #0]
 8007ae8:	2000      	movs	r0, #0
 8007aea:	e005      	b.n	8007af8 <__strtok_r+0x2c>
 8007aec:	42b5      	cmp	r5, r6
 8007aee:	d1f6      	bne.n	8007ade <__strtok_r+0x12>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1f0      	bne.n	8007ad6 <__strtok_r+0xa>
 8007af4:	6014      	str	r4, [r2, #0]
 8007af6:	7003      	strb	r3, [r0, #0]
 8007af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007afa:	461c      	mov	r4, r3
 8007afc:	e00c      	b.n	8007b18 <__strtok_r+0x4c>
 8007afe:	b915      	cbnz	r5, 8007b06 <__strtok_r+0x3a>
 8007b00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b04:	460e      	mov	r6, r1
 8007b06:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007b0a:	42ab      	cmp	r3, r5
 8007b0c:	d1f7      	bne.n	8007afe <__strtok_r+0x32>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0f3      	beq.n	8007afa <__strtok_r+0x2e>
 8007b12:	2300      	movs	r3, #0
 8007b14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007b18:	6014      	str	r4, [r2, #0]
 8007b1a:	e7ed      	b.n	8007af8 <__strtok_r+0x2c>

08007b1c <_localeconv_r>:
 8007b1c:	4800      	ldr	r0, [pc, #0]	@ (8007b20 <_localeconv_r+0x4>)
 8007b1e:	4770      	bx	lr
 8007b20:	20000158 	.word	0x20000158

08007b24 <_close_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d06      	ldr	r5, [pc, #24]	@ (8007b40 <_close_r+0x1c>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	f7fa fbd6 	bl	80022e0 <_close>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_close_r+0x1a>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_close_r+0x1a>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	2000096c 	.word	0x2000096c

08007b44 <_lseek_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d07      	ldr	r5, [pc, #28]	@ (8007b64 <_lseek_r+0x20>)
 8007b48:	4604      	mov	r4, r0
 8007b4a:	4608      	mov	r0, r1
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	2200      	movs	r2, #0
 8007b50:	602a      	str	r2, [r5, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	f7fa fbeb 	bl	800232e <_lseek>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d102      	bne.n	8007b62 <_lseek_r+0x1e>
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	b103      	cbz	r3, 8007b62 <_lseek_r+0x1e>
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	2000096c 	.word	0x2000096c

08007b68 <_read_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4d07      	ldr	r5, [pc, #28]	@ (8007b88 <_read_r+0x20>)
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	4608      	mov	r0, r1
 8007b70:	4611      	mov	r1, r2
 8007b72:	2200      	movs	r2, #0
 8007b74:	602a      	str	r2, [r5, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f7fa fb79 	bl	800226e <_read>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_read_r+0x1e>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_read_r+0x1e>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	2000096c 	.word	0x2000096c

08007b8c <_write_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d07      	ldr	r5, [pc, #28]	@ (8007bac <_write_r+0x20>)
 8007b90:	4604      	mov	r4, r0
 8007b92:	4608      	mov	r0, r1
 8007b94:	4611      	mov	r1, r2
 8007b96:	2200      	movs	r2, #0
 8007b98:	602a      	str	r2, [r5, #0]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f7fa fb84 	bl	80022a8 <_write>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_write_r+0x1e>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_write_r+0x1e>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	2000096c 	.word	0x2000096c

08007bb0 <__errno>:
 8007bb0:	4b01      	ldr	r3, [pc, #4]	@ (8007bb8 <__errno+0x8>)
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	200001d4 	.word	0x200001d4

08007bbc <__libc_init_array>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8007bf4 <__libc_init_array+0x38>)
 8007bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8007bf8 <__libc_init_array+0x3c>)
 8007bc2:	1b64      	subs	r4, r4, r5
 8007bc4:	10a4      	asrs	r4, r4, #2
 8007bc6:	2600      	movs	r6, #0
 8007bc8:	42a6      	cmp	r6, r4
 8007bca:	d109      	bne.n	8007be0 <__libc_init_array+0x24>
 8007bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8007bfc <__libc_init_array+0x40>)
 8007bce:	4c0c      	ldr	r4, [pc, #48]	@ (8007c00 <__libc_init_array+0x44>)
 8007bd0:	f004 ff5a 	bl	800ca88 <_init>
 8007bd4:	1b64      	subs	r4, r4, r5
 8007bd6:	10a4      	asrs	r4, r4, #2
 8007bd8:	2600      	movs	r6, #0
 8007bda:	42a6      	cmp	r6, r4
 8007bdc:	d105      	bne.n	8007bea <__libc_init_array+0x2e>
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be4:	4798      	blx	r3
 8007be6:	3601      	adds	r6, #1
 8007be8:	e7ee      	b.n	8007bc8 <__libc_init_array+0xc>
 8007bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bee:	4798      	blx	r3
 8007bf0:	3601      	adds	r6, #1
 8007bf2:	e7f2      	b.n	8007bda <__libc_init_array+0x1e>
 8007bf4:	0800d0a0 	.word	0x0800d0a0
 8007bf8:	0800d0a0 	.word	0x0800d0a0
 8007bfc:	0800d0a0 	.word	0x0800d0a0
 8007c00:	0800d0a4 	.word	0x0800d0a4

08007c04 <__retarget_lock_init_recursive>:
 8007c04:	4770      	bx	lr

08007c06 <__retarget_lock_acquire_recursive>:
 8007c06:	4770      	bx	lr

08007c08 <__retarget_lock_release_recursive>:
 8007c08:	4770      	bx	lr

08007c0a <memcpy>:
 8007c0a:	440a      	add	r2, r1
 8007c0c:	4291      	cmp	r1, r2
 8007c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c12:	d100      	bne.n	8007c16 <memcpy+0xc>
 8007c14:	4770      	bx	lr
 8007c16:	b510      	push	{r4, lr}
 8007c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c20:	4291      	cmp	r1, r2
 8007c22:	d1f9      	bne.n	8007c18 <memcpy+0xe>
 8007c24:	bd10      	pop	{r4, pc}
	...

08007c28 <nan>:
 8007c28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007c30 <nan+0x8>
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	00000000 	.word	0x00000000
 8007c34:	7ff80000 	.word	0x7ff80000

08007c38 <nanf>:
 8007c38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007c40 <nanf+0x8>
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	7fc00000 	.word	0x7fc00000

08007c44 <__assert_func>:
 8007c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c46:	4614      	mov	r4, r2
 8007c48:	461a      	mov	r2, r3
 8007c4a:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <__assert_func+0x2c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4605      	mov	r5, r0
 8007c50:	68d8      	ldr	r0, [r3, #12]
 8007c52:	b954      	cbnz	r4, 8007c6a <__assert_func+0x26>
 8007c54:	4b07      	ldr	r3, [pc, #28]	@ (8007c74 <__assert_func+0x30>)
 8007c56:	461c      	mov	r4, r3
 8007c58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c5c:	9100      	str	r1, [sp, #0]
 8007c5e:	462b      	mov	r3, r5
 8007c60:	4905      	ldr	r1, [pc, #20]	@ (8007c78 <__assert_func+0x34>)
 8007c62:	f002 fcfd 	bl	800a660 <fiprintf>
 8007c66:	f002 fdab 	bl	800a7c0 <abort>
 8007c6a:	4b04      	ldr	r3, [pc, #16]	@ (8007c7c <__assert_func+0x38>)
 8007c6c:	e7f4      	b.n	8007c58 <__assert_func+0x14>
 8007c6e:	bf00      	nop
 8007c70:	200001d4 	.word	0x200001d4
 8007c74:	0800ccf3 	.word	0x0800ccf3
 8007c78:	0800ccc5 	.word	0x0800ccc5
 8007c7c:	0800ccb8 	.word	0x0800ccb8

08007c80 <quorem>:
 8007c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	6903      	ldr	r3, [r0, #16]
 8007c86:	690c      	ldr	r4, [r1, #16]
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	db7e      	blt.n	8007d8c <quorem+0x10c>
 8007c8e:	3c01      	subs	r4, #1
 8007c90:	f101 0814 	add.w	r8, r1, #20
 8007c94:	00a3      	lsls	r3, r4, #2
 8007c96:	f100 0514 	add.w	r5, r0, #20
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ca0:	9301      	str	r3, [sp, #4]
 8007ca2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ca6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007caa:	3301      	adds	r3, #1
 8007cac:	429a      	cmp	r2, r3
 8007cae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007cb6:	d32e      	bcc.n	8007d16 <quorem+0x96>
 8007cb8:	f04f 0a00 	mov.w	sl, #0
 8007cbc:	46c4      	mov	ip, r8
 8007cbe:	46ae      	mov	lr, r5
 8007cc0:	46d3      	mov	fp, sl
 8007cc2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cc6:	b298      	uxth	r0, r3
 8007cc8:	fb06 a000 	mla	r0, r6, r0, sl
 8007ccc:	0c02      	lsrs	r2, r0, #16
 8007cce:	0c1b      	lsrs	r3, r3, #16
 8007cd0:	fb06 2303 	mla	r3, r6, r3, r2
 8007cd4:	f8de 2000 	ldr.w	r2, [lr]
 8007cd8:	b280      	uxth	r0, r0
 8007cda:	b292      	uxth	r2, r2
 8007cdc:	1a12      	subs	r2, r2, r0
 8007cde:	445a      	add	r2, fp
 8007ce0:	f8de 0000 	ldr.w	r0, [lr]
 8007ce4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007cee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007cf2:	b292      	uxth	r2, r2
 8007cf4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007cf8:	45e1      	cmp	r9, ip
 8007cfa:	f84e 2b04 	str.w	r2, [lr], #4
 8007cfe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d02:	d2de      	bcs.n	8007cc2 <quorem+0x42>
 8007d04:	9b00      	ldr	r3, [sp, #0]
 8007d06:	58eb      	ldr	r3, [r5, r3]
 8007d08:	b92b      	cbnz	r3, 8007d16 <quorem+0x96>
 8007d0a:	9b01      	ldr	r3, [sp, #4]
 8007d0c:	3b04      	subs	r3, #4
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	d32f      	bcc.n	8007d74 <quorem+0xf4>
 8007d14:	613c      	str	r4, [r7, #16]
 8007d16:	4638      	mov	r0, r7
 8007d18:	f001 fd0e 	bl	8009738 <__mcmp>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	db25      	blt.n	8007d6c <quorem+0xec>
 8007d20:	4629      	mov	r1, r5
 8007d22:	2000      	movs	r0, #0
 8007d24:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d28:	f8d1 c000 	ldr.w	ip, [r1]
 8007d2c:	fa1f fe82 	uxth.w	lr, r2
 8007d30:	fa1f f38c 	uxth.w	r3, ip
 8007d34:	eba3 030e 	sub.w	r3, r3, lr
 8007d38:	4403      	add	r3, r0
 8007d3a:	0c12      	lsrs	r2, r2, #16
 8007d3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d4a:	45c1      	cmp	r9, r8
 8007d4c:	f841 3b04 	str.w	r3, [r1], #4
 8007d50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d54:	d2e6      	bcs.n	8007d24 <quorem+0xa4>
 8007d56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d5e:	b922      	cbnz	r2, 8007d6a <quorem+0xea>
 8007d60:	3b04      	subs	r3, #4
 8007d62:	429d      	cmp	r5, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	d30b      	bcc.n	8007d80 <quorem+0x100>
 8007d68:	613c      	str	r4, [r7, #16]
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	b003      	add	sp, #12
 8007d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d74:	6812      	ldr	r2, [r2, #0]
 8007d76:	3b04      	subs	r3, #4
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	d1cb      	bne.n	8007d14 <quorem+0x94>
 8007d7c:	3c01      	subs	r4, #1
 8007d7e:	e7c6      	b.n	8007d0e <quorem+0x8e>
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	3b04      	subs	r3, #4
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	d1ef      	bne.n	8007d68 <quorem+0xe8>
 8007d88:	3c01      	subs	r4, #1
 8007d8a:	e7ea      	b.n	8007d62 <quorem+0xe2>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e7ee      	b.n	8007d6e <quorem+0xee>

08007d90 <_dtoa_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	69c7      	ldr	r7, [r0, #28]
 8007d96:	b099      	sub	sp, #100	@ 0x64
 8007d98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d9c:	ec55 4b10 	vmov	r4, r5, d0
 8007da0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007da2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007da4:	4683      	mov	fp, r0
 8007da6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007da8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007daa:	b97f      	cbnz	r7, 8007dcc <_dtoa_r+0x3c>
 8007dac:	2010      	movs	r0, #16
 8007dae:	f001 f937 	bl	8009020 <malloc>
 8007db2:	4602      	mov	r2, r0
 8007db4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007db8:	b920      	cbnz	r0, 8007dc4 <_dtoa_r+0x34>
 8007dba:	4ba7      	ldr	r3, [pc, #668]	@ (8008058 <_dtoa_r+0x2c8>)
 8007dbc:	21ef      	movs	r1, #239	@ 0xef
 8007dbe:	48a7      	ldr	r0, [pc, #668]	@ (800805c <_dtoa_r+0x2cc>)
 8007dc0:	f7ff ff40 	bl	8007c44 <__assert_func>
 8007dc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007dc8:	6007      	str	r7, [r0, #0]
 8007dca:	60c7      	str	r7, [r0, #12]
 8007dcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007dd0:	6819      	ldr	r1, [r3, #0]
 8007dd2:	b159      	cbz	r1, 8007dec <_dtoa_r+0x5c>
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	604a      	str	r2, [r1, #4]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	4093      	lsls	r3, r2
 8007ddc:	608b      	str	r3, [r1, #8]
 8007dde:	4658      	mov	r0, fp
 8007de0:	f001 fa26 	bl	8009230 <_Bfree>
 8007de4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	1e2b      	subs	r3, r5, #0
 8007dee:	bfb9      	ittee	lt
 8007df0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007df4:	9303      	strlt	r3, [sp, #12]
 8007df6:	2300      	movge	r3, #0
 8007df8:	6033      	strge	r3, [r6, #0]
 8007dfa:	9f03      	ldr	r7, [sp, #12]
 8007dfc:	4b98      	ldr	r3, [pc, #608]	@ (8008060 <_dtoa_r+0x2d0>)
 8007dfe:	bfbc      	itt	lt
 8007e00:	2201      	movlt	r2, #1
 8007e02:	6032      	strlt	r2, [r6, #0]
 8007e04:	43bb      	bics	r3, r7
 8007e06:	d112      	bne.n	8007e2e <_dtoa_r+0x9e>
 8007e08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e14:	4323      	orrs	r3, r4
 8007e16:	f000 854d 	beq.w	80088b4 <_dtoa_r+0xb24>
 8007e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008074 <_dtoa_r+0x2e4>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 854f 	beq.w	80088c4 <_dtoa_r+0xb34>
 8007e26:	f10a 0303 	add.w	r3, sl, #3
 8007e2a:	f000 bd49 	b.w	80088c0 <_dtoa_r+0xb30>
 8007e2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	ec51 0b17 	vmov	r0, r1, d7
 8007e38:	2300      	movs	r3, #0
 8007e3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007e3e:	f7f8 fe4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e42:	4680      	mov	r8, r0
 8007e44:	b158      	cbz	r0, 8007e5e <_dtoa_r+0xce>
 8007e46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e48:	2301      	movs	r3, #1
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e4e:	b113      	cbz	r3, 8007e56 <_dtoa_r+0xc6>
 8007e50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e52:	4b84      	ldr	r3, [pc, #528]	@ (8008064 <_dtoa_r+0x2d4>)
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008078 <_dtoa_r+0x2e8>
 8007e5a:	f000 bd33 	b.w	80088c4 <_dtoa_r+0xb34>
 8007e5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007e62:	aa16      	add	r2, sp, #88	@ 0x58
 8007e64:	a917      	add	r1, sp, #92	@ 0x5c
 8007e66:	4658      	mov	r0, fp
 8007e68:	f001 fd86 	bl	8009978 <__d2b>
 8007e6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007e70:	4681      	mov	r9, r0
 8007e72:	2e00      	cmp	r6, #0
 8007e74:	d077      	beq.n	8007f66 <_dtoa_r+0x1d6>
 8007e76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e90:	4619      	mov	r1, r3
 8007e92:	2200      	movs	r2, #0
 8007e94:	4b74      	ldr	r3, [pc, #464]	@ (8008068 <_dtoa_r+0x2d8>)
 8007e96:	f7f8 f9ff 	bl	8000298 <__aeabi_dsub>
 8007e9a:	a369      	add	r3, pc, #420	@ (adr r3, 8008040 <_dtoa_r+0x2b0>)
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f7f8 fbb2 	bl	8000608 <__aeabi_dmul>
 8007ea4:	a368      	add	r3, pc, #416	@ (adr r3, 8008048 <_dtoa_r+0x2b8>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	f7f8 f9f7 	bl	800029c <__adddf3>
 8007eae:	4604      	mov	r4, r0
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	460d      	mov	r5, r1
 8007eb4:	f7f8 fb3e 	bl	8000534 <__aeabi_i2d>
 8007eb8:	a365      	add	r3, pc, #404	@ (adr r3, 8008050 <_dtoa_r+0x2c0>)
 8007eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebe:	f7f8 fba3 	bl	8000608 <__aeabi_dmul>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	4629      	mov	r1, r5
 8007eca:	f7f8 f9e7 	bl	800029c <__adddf3>
 8007ece:	4604      	mov	r4, r0
 8007ed0:	460d      	mov	r5, r1
 8007ed2:	f7f8 fe49 	bl	8000b68 <__aeabi_d2iz>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	4607      	mov	r7, r0
 8007eda:	2300      	movs	r3, #0
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 fe04 	bl	8000aec <__aeabi_dcmplt>
 8007ee4:	b140      	cbz	r0, 8007ef8 <_dtoa_r+0x168>
 8007ee6:	4638      	mov	r0, r7
 8007ee8:	f7f8 fb24 	bl	8000534 <__aeabi_i2d>
 8007eec:	4622      	mov	r2, r4
 8007eee:	462b      	mov	r3, r5
 8007ef0:	f7f8 fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ef4:	b900      	cbnz	r0, 8007ef8 <_dtoa_r+0x168>
 8007ef6:	3f01      	subs	r7, #1
 8007ef8:	2f16      	cmp	r7, #22
 8007efa:	d851      	bhi.n	8007fa0 <_dtoa_r+0x210>
 8007efc:	4b5b      	ldr	r3, [pc, #364]	@ (800806c <_dtoa_r+0x2dc>)
 8007efe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f0a:	f7f8 fdef 	bl	8000aec <__aeabi_dcmplt>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d048      	beq.n	8007fa4 <_dtoa_r+0x214>
 8007f12:	3f01      	subs	r7, #1
 8007f14:	2300      	movs	r3, #0
 8007f16:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f1a:	1b9b      	subs	r3, r3, r6
 8007f1c:	1e5a      	subs	r2, r3, #1
 8007f1e:	bf44      	itt	mi
 8007f20:	f1c3 0801 	rsbmi	r8, r3, #1
 8007f24:	2300      	movmi	r3, #0
 8007f26:	9208      	str	r2, [sp, #32]
 8007f28:	bf54      	ite	pl
 8007f2a:	f04f 0800 	movpl.w	r8, #0
 8007f2e:	9308      	strmi	r3, [sp, #32]
 8007f30:	2f00      	cmp	r7, #0
 8007f32:	db39      	blt.n	8007fa8 <_dtoa_r+0x218>
 8007f34:	9b08      	ldr	r3, [sp, #32]
 8007f36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007f38:	443b      	add	r3, r7
 8007f3a:	9308      	str	r3, [sp, #32]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f42:	2b09      	cmp	r3, #9
 8007f44:	d864      	bhi.n	8008010 <_dtoa_r+0x280>
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	bfc4      	itt	gt
 8007f4a:	3b04      	subgt	r3, #4
 8007f4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f50:	f1a3 0302 	sub.w	r3, r3, #2
 8007f54:	bfcc      	ite	gt
 8007f56:	2400      	movgt	r4, #0
 8007f58:	2401      	movle	r4, #1
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d863      	bhi.n	8008026 <_dtoa_r+0x296>
 8007f5e:	e8df f003 	tbb	[pc, r3]
 8007f62:	372a      	.short	0x372a
 8007f64:	5535      	.short	0x5535
 8007f66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007f6a:	441e      	add	r6, r3
 8007f6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	bfc1      	itttt	gt
 8007f74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f78:	409f      	lslgt	r7, r3
 8007f7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f82:	bfd6      	itet	le
 8007f84:	f1c3 0320 	rsble	r3, r3, #32
 8007f88:	ea47 0003 	orrgt.w	r0, r7, r3
 8007f8c:	fa04 f003 	lslle.w	r0, r4, r3
 8007f90:	f7f8 fac0 	bl	8000514 <__aeabi_ui2d>
 8007f94:	2201      	movs	r2, #1
 8007f96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f9a:	3e01      	subs	r6, #1
 8007f9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007f9e:	e777      	b.n	8007e90 <_dtoa_r+0x100>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e7b8      	b.n	8007f16 <_dtoa_r+0x186>
 8007fa4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007fa6:	e7b7      	b.n	8007f18 <_dtoa_r+0x188>
 8007fa8:	427b      	negs	r3, r7
 8007faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fac:	2300      	movs	r3, #0
 8007fae:	eba8 0807 	sub.w	r8, r8, r7
 8007fb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007fb4:	e7c4      	b.n	8007f40 <_dtoa_r+0x1b0>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc35      	bgt.n	800802c <_dtoa_r+0x29c>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	9307      	str	r3, [sp, #28]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007fca:	e00b      	b.n	8007fe4 <_dtoa_r+0x254>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e7f3      	b.n	8007fb8 <_dtoa_r+0x228>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fd6:	18fb      	adds	r3, r7, r3
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	9307      	str	r3, [sp, #28]
 8007fe0:	bfb8      	it	lt
 8007fe2:	2301      	movlt	r3, #1
 8007fe4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007fe8:	2100      	movs	r1, #0
 8007fea:	2204      	movs	r2, #4
 8007fec:	f102 0514 	add.w	r5, r2, #20
 8007ff0:	429d      	cmp	r5, r3
 8007ff2:	d91f      	bls.n	8008034 <_dtoa_r+0x2a4>
 8007ff4:	6041      	str	r1, [r0, #4]
 8007ff6:	4658      	mov	r0, fp
 8007ff8:	f001 f8da 	bl	80091b0 <_Balloc>
 8007ffc:	4682      	mov	sl, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d13c      	bne.n	800807c <_dtoa_r+0x2ec>
 8008002:	4b1b      	ldr	r3, [pc, #108]	@ (8008070 <_dtoa_r+0x2e0>)
 8008004:	4602      	mov	r2, r0
 8008006:	f240 11af 	movw	r1, #431	@ 0x1af
 800800a:	e6d8      	b.n	8007dbe <_dtoa_r+0x2e>
 800800c:	2301      	movs	r3, #1
 800800e:	e7e0      	b.n	8007fd2 <_dtoa_r+0x242>
 8008010:	2401      	movs	r4, #1
 8008012:	2300      	movs	r3, #0
 8008014:	9309      	str	r3, [sp, #36]	@ 0x24
 8008016:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008018:	f04f 33ff 	mov.w	r3, #4294967295
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	9307      	str	r3, [sp, #28]
 8008020:	2200      	movs	r2, #0
 8008022:	2312      	movs	r3, #18
 8008024:	e7d0      	b.n	8007fc8 <_dtoa_r+0x238>
 8008026:	2301      	movs	r3, #1
 8008028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800802a:	e7f5      	b.n	8008018 <_dtoa_r+0x288>
 800802c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	9307      	str	r3, [sp, #28]
 8008032:	e7d7      	b.n	8007fe4 <_dtoa_r+0x254>
 8008034:	3101      	adds	r1, #1
 8008036:	0052      	lsls	r2, r2, #1
 8008038:	e7d8      	b.n	8007fec <_dtoa_r+0x25c>
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w
 8008040:	636f4361 	.word	0x636f4361
 8008044:	3fd287a7 	.word	0x3fd287a7
 8008048:	8b60c8b3 	.word	0x8b60c8b3
 800804c:	3fc68a28 	.word	0x3fc68a28
 8008050:	509f79fb 	.word	0x509f79fb
 8008054:	3fd34413 	.word	0x3fd34413
 8008058:	0800cc3f 	.word	0x0800cc3f
 800805c:	0800cd01 	.word	0x0800cd01
 8008060:	7ff00000 	.word	0x7ff00000
 8008064:	0800d049 	.word	0x0800d049
 8008068:	3ff80000 	.word	0x3ff80000
 800806c:	0800ce58 	.word	0x0800ce58
 8008070:	0800cd59 	.word	0x0800cd59
 8008074:	0800ccfd 	.word	0x0800ccfd
 8008078:	0800d048 	.word	0x0800d048
 800807c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008080:	6018      	str	r0, [r3, #0]
 8008082:	9b07      	ldr	r3, [sp, #28]
 8008084:	2b0e      	cmp	r3, #14
 8008086:	f200 80a4 	bhi.w	80081d2 <_dtoa_r+0x442>
 800808a:	2c00      	cmp	r4, #0
 800808c:	f000 80a1 	beq.w	80081d2 <_dtoa_r+0x442>
 8008090:	2f00      	cmp	r7, #0
 8008092:	dd33      	ble.n	80080fc <_dtoa_r+0x36c>
 8008094:	4bad      	ldr	r3, [pc, #692]	@ (800834c <_dtoa_r+0x5bc>)
 8008096:	f007 020f 	and.w	r2, r7, #15
 800809a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800809e:	ed93 7b00 	vldr	d7, [r3]
 80080a2:	05f8      	lsls	r0, r7, #23
 80080a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80080a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80080ac:	d516      	bpl.n	80080dc <_dtoa_r+0x34c>
 80080ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008350 <_dtoa_r+0x5c0>)
 80080b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080b8:	f7f8 fbd0 	bl	800085c <__aeabi_ddiv>
 80080bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c0:	f004 040f 	and.w	r4, r4, #15
 80080c4:	2603      	movs	r6, #3
 80080c6:	4da2      	ldr	r5, [pc, #648]	@ (8008350 <_dtoa_r+0x5c0>)
 80080c8:	b954      	cbnz	r4, 80080e0 <_dtoa_r+0x350>
 80080ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d2:	f7f8 fbc3 	bl	800085c <__aeabi_ddiv>
 80080d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080da:	e028      	b.n	800812e <_dtoa_r+0x39e>
 80080dc:	2602      	movs	r6, #2
 80080de:	e7f2      	b.n	80080c6 <_dtoa_r+0x336>
 80080e0:	07e1      	lsls	r1, r4, #31
 80080e2:	d508      	bpl.n	80080f6 <_dtoa_r+0x366>
 80080e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080ec:	f7f8 fa8c 	bl	8000608 <__aeabi_dmul>
 80080f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080f4:	3601      	adds	r6, #1
 80080f6:	1064      	asrs	r4, r4, #1
 80080f8:	3508      	adds	r5, #8
 80080fa:	e7e5      	b.n	80080c8 <_dtoa_r+0x338>
 80080fc:	f000 80d2 	beq.w	80082a4 <_dtoa_r+0x514>
 8008100:	427c      	negs	r4, r7
 8008102:	4b92      	ldr	r3, [pc, #584]	@ (800834c <_dtoa_r+0x5bc>)
 8008104:	4d92      	ldr	r5, [pc, #584]	@ (8008350 <_dtoa_r+0x5c0>)
 8008106:	f004 020f 	and.w	r2, r4, #15
 800810a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800810e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008112:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008116:	f7f8 fa77 	bl	8000608 <__aeabi_dmul>
 800811a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800811e:	1124      	asrs	r4, r4, #4
 8008120:	2300      	movs	r3, #0
 8008122:	2602      	movs	r6, #2
 8008124:	2c00      	cmp	r4, #0
 8008126:	f040 80b2 	bne.w	800828e <_dtoa_r+0x4fe>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1d3      	bne.n	80080d6 <_dtoa_r+0x346>
 800812e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008130:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 80b7 	beq.w	80082a8 <_dtoa_r+0x518>
 800813a:	4b86      	ldr	r3, [pc, #536]	@ (8008354 <_dtoa_r+0x5c4>)
 800813c:	2200      	movs	r2, #0
 800813e:	4620      	mov	r0, r4
 8008140:	4629      	mov	r1, r5
 8008142:	f7f8 fcd3 	bl	8000aec <__aeabi_dcmplt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f000 80ae 	beq.w	80082a8 <_dtoa_r+0x518>
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 80aa 	beq.w	80082a8 <_dtoa_r+0x518>
 8008154:	9b00      	ldr	r3, [sp, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	dd37      	ble.n	80081ca <_dtoa_r+0x43a>
 800815a:	1e7b      	subs	r3, r7, #1
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	4620      	mov	r0, r4
 8008160:	4b7d      	ldr	r3, [pc, #500]	@ (8008358 <_dtoa_r+0x5c8>)
 8008162:	2200      	movs	r2, #0
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 fa4f 	bl	8000608 <__aeabi_dmul>
 800816a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800816e:	9c00      	ldr	r4, [sp, #0]
 8008170:	3601      	adds	r6, #1
 8008172:	4630      	mov	r0, r6
 8008174:	f7f8 f9de 	bl	8000534 <__aeabi_i2d>
 8008178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800817c:	f7f8 fa44 	bl	8000608 <__aeabi_dmul>
 8008180:	4b76      	ldr	r3, [pc, #472]	@ (800835c <_dtoa_r+0x5cc>)
 8008182:	2200      	movs	r2, #0
 8008184:	f7f8 f88a 	bl	800029c <__adddf3>
 8008188:	4605      	mov	r5, r0
 800818a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800818e:	2c00      	cmp	r4, #0
 8008190:	f040 808d 	bne.w	80082ae <_dtoa_r+0x51e>
 8008194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008198:	4b71      	ldr	r3, [pc, #452]	@ (8008360 <_dtoa_r+0x5d0>)
 800819a:	2200      	movs	r2, #0
 800819c:	f7f8 f87c 	bl	8000298 <__aeabi_dsub>
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081a8:	462a      	mov	r2, r5
 80081aa:	4633      	mov	r3, r6
 80081ac:	f7f8 fcbc 	bl	8000b28 <__aeabi_dcmpgt>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	f040 828b 	bne.w	80086cc <_dtoa_r+0x93c>
 80081b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ba:	462a      	mov	r2, r5
 80081bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80081c0:	f7f8 fc94 	bl	8000aec <__aeabi_dcmplt>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f040 8128 	bne.w	800841a <_dtoa_r+0x68a>
 80081ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80081ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80081d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f2c0 815a 	blt.w	800848e <_dtoa_r+0x6fe>
 80081da:	2f0e      	cmp	r7, #14
 80081dc:	f300 8157 	bgt.w	800848e <_dtoa_r+0x6fe>
 80081e0:	4b5a      	ldr	r3, [pc, #360]	@ (800834c <_dtoa_r+0x5bc>)
 80081e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081e6:	ed93 7b00 	vldr	d7, [r3]
 80081ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	ed8d 7b00 	vstr	d7, [sp]
 80081f2:	da03      	bge.n	80081fc <_dtoa_r+0x46c>
 80081f4:	9b07      	ldr	r3, [sp, #28]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f340 8101 	ble.w	80083fe <_dtoa_r+0x66e>
 80081fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008200:	4656      	mov	r6, sl
 8008202:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008206:	4620      	mov	r0, r4
 8008208:	4629      	mov	r1, r5
 800820a:	f7f8 fb27 	bl	800085c <__aeabi_ddiv>
 800820e:	f7f8 fcab 	bl	8000b68 <__aeabi_d2iz>
 8008212:	4680      	mov	r8, r0
 8008214:	f7f8 f98e 	bl	8000534 <__aeabi_i2d>
 8008218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800821c:	f7f8 f9f4 	bl	8000608 <__aeabi_dmul>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800822c:	f7f8 f834 	bl	8000298 <__aeabi_dsub>
 8008230:	f806 4b01 	strb.w	r4, [r6], #1
 8008234:	9d07      	ldr	r5, [sp, #28]
 8008236:	eba6 040a 	sub.w	r4, r6, sl
 800823a:	42a5      	cmp	r5, r4
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	f040 8117 	bne.w	8008472 <_dtoa_r+0x6e2>
 8008244:	f7f8 f82a 	bl	800029c <__adddf3>
 8008248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800824c:	4604      	mov	r4, r0
 800824e:	460d      	mov	r5, r1
 8008250:	f7f8 fc6a 	bl	8000b28 <__aeabi_dcmpgt>
 8008254:	2800      	cmp	r0, #0
 8008256:	f040 80f9 	bne.w	800844c <_dtoa_r+0x6bc>
 800825a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800825e:	4620      	mov	r0, r4
 8008260:	4629      	mov	r1, r5
 8008262:	f7f8 fc39 	bl	8000ad8 <__aeabi_dcmpeq>
 8008266:	b118      	cbz	r0, 8008270 <_dtoa_r+0x4e0>
 8008268:	f018 0f01 	tst.w	r8, #1
 800826c:	f040 80ee 	bne.w	800844c <_dtoa_r+0x6bc>
 8008270:	4649      	mov	r1, r9
 8008272:	4658      	mov	r0, fp
 8008274:	f000 ffdc 	bl	8009230 <_Bfree>
 8008278:	2300      	movs	r3, #0
 800827a:	7033      	strb	r3, [r6, #0]
 800827c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800827e:	3701      	adds	r7, #1
 8008280:	601f      	str	r7, [r3, #0]
 8008282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 831d 	beq.w	80088c4 <_dtoa_r+0xb34>
 800828a:	601e      	str	r6, [r3, #0]
 800828c:	e31a      	b.n	80088c4 <_dtoa_r+0xb34>
 800828e:	07e2      	lsls	r2, r4, #31
 8008290:	d505      	bpl.n	800829e <_dtoa_r+0x50e>
 8008292:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008296:	f7f8 f9b7 	bl	8000608 <__aeabi_dmul>
 800829a:	3601      	adds	r6, #1
 800829c:	2301      	movs	r3, #1
 800829e:	1064      	asrs	r4, r4, #1
 80082a0:	3508      	adds	r5, #8
 80082a2:	e73f      	b.n	8008124 <_dtoa_r+0x394>
 80082a4:	2602      	movs	r6, #2
 80082a6:	e742      	b.n	800812e <_dtoa_r+0x39e>
 80082a8:	9c07      	ldr	r4, [sp, #28]
 80082aa:	9704      	str	r7, [sp, #16]
 80082ac:	e761      	b.n	8008172 <_dtoa_r+0x3e2>
 80082ae:	4b27      	ldr	r3, [pc, #156]	@ (800834c <_dtoa_r+0x5bc>)
 80082b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082ba:	4454      	add	r4, sl
 80082bc:	2900      	cmp	r1, #0
 80082be:	d053      	beq.n	8008368 <_dtoa_r+0x5d8>
 80082c0:	4928      	ldr	r1, [pc, #160]	@ (8008364 <_dtoa_r+0x5d4>)
 80082c2:	2000      	movs	r0, #0
 80082c4:	f7f8 faca 	bl	800085c <__aeabi_ddiv>
 80082c8:	4633      	mov	r3, r6
 80082ca:	462a      	mov	r2, r5
 80082cc:	f7f7 ffe4 	bl	8000298 <__aeabi_dsub>
 80082d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082d4:	4656      	mov	r6, sl
 80082d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082da:	f7f8 fc45 	bl	8000b68 <__aeabi_d2iz>
 80082de:	4605      	mov	r5, r0
 80082e0:	f7f8 f928 	bl	8000534 <__aeabi_i2d>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ec:	f7f7 ffd4 	bl	8000298 <__aeabi_dsub>
 80082f0:	3530      	adds	r5, #48	@ 0x30
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082fa:	f806 5b01 	strb.w	r5, [r6], #1
 80082fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008302:	f7f8 fbf3 	bl	8000aec <__aeabi_dcmplt>
 8008306:	2800      	cmp	r0, #0
 8008308:	d171      	bne.n	80083ee <_dtoa_r+0x65e>
 800830a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800830e:	4911      	ldr	r1, [pc, #68]	@ (8008354 <_dtoa_r+0x5c4>)
 8008310:	2000      	movs	r0, #0
 8008312:	f7f7 ffc1 	bl	8000298 <__aeabi_dsub>
 8008316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800831a:	f7f8 fbe7 	bl	8000aec <__aeabi_dcmplt>
 800831e:	2800      	cmp	r0, #0
 8008320:	f040 8095 	bne.w	800844e <_dtoa_r+0x6be>
 8008324:	42a6      	cmp	r6, r4
 8008326:	f43f af50 	beq.w	80081ca <_dtoa_r+0x43a>
 800832a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800832e:	4b0a      	ldr	r3, [pc, #40]	@ (8008358 <_dtoa_r+0x5c8>)
 8008330:	2200      	movs	r2, #0
 8008332:	f7f8 f969 	bl	8000608 <__aeabi_dmul>
 8008336:	4b08      	ldr	r3, [pc, #32]	@ (8008358 <_dtoa_r+0x5c8>)
 8008338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800833c:	2200      	movs	r2, #0
 800833e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008342:	f7f8 f961 	bl	8000608 <__aeabi_dmul>
 8008346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800834a:	e7c4      	b.n	80082d6 <_dtoa_r+0x546>
 800834c:	0800ce58 	.word	0x0800ce58
 8008350:	0800ce30 	.word	0x0800ce30
 8008354:	3ff00000 	.word	0x3ff00000
 8008358:	40240000 	.word	0x40240000
 800835c:	401c0000 	.word	0x401c0000
 8008360:	40140000 	.word	0x40140000
 8008364:	3fe00000 	.word	0x3fe00000
 8008368:	4631      	mov	r1, r6
 800836a:	4628      	mov	r0, r5
 800836c:	f7f8 f94c 	bl	8000608 <__aeabi_dmul>
 8008370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008374:	9415      	str	r4, [sp, #84]	@ 0x54
 8008376:	4656      	mov	r6, sl
 8008378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800837c:	f7f8 fbf4 	bl	8000b68 <__aeabi_d2iz>
 8008380:	4605      	mov	r5, r0
 8008382:	f7f8 f8d7 	bl	8000534 <__aeabi_i2d>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838e:	f7f7 ff83 	bl	8000298 <__aeabi_dsub>
 8008392:	3530      	adds	r5, #48	@ 0x30
 8008394:	f806 5b01 	strb.w	r5, [r6], #1
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	42a6      	cmp	r6, r4
 800839e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083a2:	f04f 0200 	mov.w	r2, #0
 80083a6:	d124      	bne.n	80083f2 <_dtoa_r+0x662>
 80083a8:	4bac      	ldr	r3, [pc, #688]	@ (800865c <_dtoa_r+0x8cc>)
 80083aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083ae:	f7f7 ff75 	bl	800029c <__adddf3>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ba:	f7f8 fbb5 	bl	8000b28 <__aeabi_dcmpgt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d145      	bne.n	800844e <_dtoa_r+0x6be>
 80083c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083c6:	49a5      	ldr	r1, [pc, #660]	@ (800865c <_dtoa_r+0x8cc>)
 80083c8:	2000      	movs	r0, #0
 80083ca:	f7f7 ff65 	bl	8000298 <__aeabi_dsub>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083d6:	f7f8 fb89 	bl	8000aec <__aeabi_dcmplt>
 80083da:	2800      	cmp	r0, #0
 80083dc:	f43f aef5 	beq.w	80081ca <_dtoa_r+0x43a>
 80083e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80083e2:	1e73      	subs	r3, r6, #1
 80083e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80083e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083ea:	2b30      	cmp	r3, #48	@ 0x30
 80083ec:	d0f8      	beq.n	80083e0 <_dtoa_r+0x650>
 80083ee:	9f04      	ldr	r7, [sp, #16]
 80083f0:	e73e      	b.n	8008270 <_dtoa_r+0x4e0>
 80083f2:	4b9b      	ldr	r3, [pc, #620]	@ (8008660 <_dtoa_r+0x8d0>)
 80083f4:	f7f8 f908 	bl	8000608 <__aeabi_dmul>
 80083f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083fc:	e7bc      	b.n	8008378 <_dtoa_r+0x5e8>
 80083fe:	d10c      	bne.n	800841a <_dtoa_r+0x68a>
 8008400:	4b98      	ldr	r3, [pc, #608]	@ (8008664 <_dtoa_r+0x8d4>)
 8008402:	2200      	movs	r2, #0
 8008404:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008408:	f7f8 f8fe 	bl	8000608 <__aeabi_dmul>
 800840c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008410:	f7f8 fb80 	bl	8000b14 <__aeabi_dcmpge>
 8008414:	2800      	cmp	r0, #0
 8008416:	f000 8157 	beq.w	80086c8 <_dtoa_r+0x938>
 800841a:	2400      	movs	r4, #0
 800841c:	4625      	mov	r5, r4
 800841e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008420:	43db      	mvns	r3, r3
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	4656      	mov	r6, sl
 8008426:	2700      	movs	r7, #0
 8008428:	4621      	mov	r1, r4
 800842a:	4658      	mov	r0, fp
 800842c:	f000 ff00 	bl	8009230 <_Bfree>
 8008430:	2d00      	cmp	r5, #0
 8008432:	d0dc      	beq.n	80083ee <_dtoa_r+0x65e>
 8008434:	b12f      	cbz	r7, 8008442 <_dtoa_r+0x6b2>
 8008436:	42af      	cmp	r7, r5
 8008438:	d003      	beq.n	8008442 <_dtoa_r+0x6b2>
 800843a:	4639      	mov	r1, r7
 800843c:	4658      	mov	r0, fp
 800843e:	f000 fef7 	bl	8009230 <_Bfree>
 8008442:	4629      	mov	r1, r5
 8008444:	4658      	mov	r0, fp
 8008446:	f000 fef3 	bl	8009230 <_Bfree>
 800844a:	e7d0      	b.n	80083ee <_dtoa_r+0x65e>
 800844c:	9704      	str	r7, [sp, #16]
 800844e:	4633      	mov	r3, r6
 8008450:	461e      	mov	r6, r3
 8008452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008456:	2a39      	cmp	r2, #57	@ 0x39
 8008458:	d107      	bne.n	800846a <_dtoa_r+0x6da>
 800845a:	459a      	cmp	sl, r3
 800845c:	d1f8      	bne.n	8008450 <_dtoa_r+0x6c0>
 800845e:	9a04      	ldr	r2, [sp, #16]
 8008460:	3201      	adds	r2, #1
 8008462:	9204      	str	r2, [sp, #16]
 8008464:	2230      	movs	r2, #48	@ 0x30
 8008466:	f88a 2000 	strb.w	r2, [sl]
 800846a:	781a      	ldrb	r2, [r3, #0]
 800846c:	3201      	adds	r2, #1
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	e7bd      	b.n	80083ee <_dtoa_r+0x65e>
 8008472:	4b7b      	ldr	r3, [pc, #492]	@ (8008660 <_dtoa_r+0x8d0>)
 8008474:	2200      	movs	r2, #0
 8008476:	f7f8 f8c7 	bl	8000608 <__aeabi_dmul>
 800847a:	2200      	movs	r2, #0
 800847c:	2300      	movs	r3, #0
 800847e:	4604      	mov	r4, r0
 8008480:	460d      	mov	r5, r1
 8008482:	f7f8 fb29 	bl	8000ad8 <__aeabi_dcmpeq>
 8008486:	2800      	cmp	r0, #0
 8008488:	f43f aebb 	beq.w	8008202 <_dtoa_r+0x472>
 800848c:	e6f0      	b.n	8008270 <_dtoa_r+0x4e0>
 800848e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008490:	2a00      	cmp	r2, #0
 8008492:	f000 80db 	beq.w	800864c <_dtoa_r+0x8bc>
 8008496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008498:	2a01      	cmp	r2, #1
 800849a:	f300 80bf 	bgt.w	800861c <_dtoa_r+0x88c>
 800849e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80084a0:	2a00      	cmp	r2, #0
 80084a2:	f000 80b7 	beq.w	8008614 <_dtoa_r+0x884>
 80084a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80084aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084ac:	4646      	mov	r6, r8
 80084ae:	9a08      	ldr	r2, [sp, #32]
 80084b0:	2101      	movs	r1, #1
 80084b2:	441a      	add	r2, r3
 80084b4:	4658      	mov	r0, fp
 80084b6:	4498      	add	r8, r3
 80084b8:	9208      	str	r2, [sp, #32]
 80084ba:	f000 ffb7 	bl	800942c <__i2b>
 80084be:	4605      	mov	r5, r0
 80084c0:	b15e      	cbz	r6, 80084da <_dtoa_r+0x74a>
 80084c2:	9b08      	ldr	r3, [sp, #32]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	dd08      	ble.n	80084da <_dtoa_r+0x74a>
 80084c8:	42b3      	cmp	r3, r6
 80084ca:	9a08      	ldr	r2, [sp, #32]
 80084cc:	bfa8      	it	ge
 80084ce:	4633      	movge	r3, r6
 80084d0:	eba8 0803 	sub.w	r8, r8, r3
 80084d4:	1af6      	subs	r6, r6, r3
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	9308      	str	r3, [sp, #32]
 80084da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084dc:	b1f3      	cbz	r3, 800851c <_dtoa_r+0x78c>
 80084de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 80b7 	beq.w	8008654 <_dtoa_r+0x8c4>
 80084e6:	b18c      	cbz	r4, 800850c <_dtoa_r+0x77c>
 80084e8:	4629      	mov	r1, r5
 80084ea:	4622      	mov	r2, r4
 80084ec:	4658      	mov	r0, fp
 80084ee:	f001 f85d 	bl	80095ac <__pow5mult>
 80084f2:	464a      	mov	r2, r9
 80084f4:	4601      	mov	r1, r0
 80084f6:	4605      	mov	r5, r0
 80084f8:	4658      	mov	r0, fp
 80084fa:	f000 ffad 	bl	8009458 <__multiply>
 80084fe:	4649      	mov	r1, r9
 8008500:	9004      	str	r0, [sp, #16]
 8008502:	4658      	mov	r0, fp
 8008504:	f000 fe94 	bl	8009230 <_Bfree>
 8008508:	9b04      	ldr	r3, [sp, #16]
 800850a:	4699      	mov	r9, r3
 800850c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800850e:	1b1a      	subs	r2, r3, r4
 8008510:	d004      	beq.n	800851c <_dtoa_r+0x78c>
 8008512:	4649      	mov	r1, r9
 8008514:	4658      	mov	r0, fp
 8008516:	f001 f849 	bl	80095ac <__pow5mult>
 800851a:	4681      	mov	r9, r0
 800851c:	2101      	movs	r1, #1
 800851e:	4658      	mov	r0, fp
 8008520:	f000 ff84 	bl	800942c <__i2b>
 8008524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008526:	4604      	mov	r4, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 81cf 	beq.w	80088cc <_dtoa_r+0xb3c>
 800852e:	461a      	mov	r2, r3
 8008530:	4601      	mov	r1, r0
 8008532:	4658      	mov	r0, fp
 8008534:	f001 f83a 	bl	80095ac <__pow5mult>
 8008538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853a:	2b01      	cmp	r3, #1
 800853c:	4604      	mov	r4, r0
 800853e:	f300 8095 	bgt.w	800866c <_dtoa_r+0x8dc>
 8008542:	9b02      	ldr	r3, [sp, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f040 8087 	bne.w	8008658 <_dtoa_r+0x8c8>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008550:	2b00      	cmp	r3, #0
 8008552:	f040 8089 	bne.w	8008668 <_dtoa_r+0x8d8>
 8008556:	9b03      	ldr	r3, [sp, #12]
 8008558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800855c:	0d1b      	lsrs	r3, r3, #20
 800855e:	051b      	lsls	r3, r3, #20
 8008560:	b12b      	cbz	r3, 800856e <_dtoa_r+0x7de>
 8008562:	9b08      	ldr	r3, [sp, #32]
 8008564:	3301      	adds	r3, #1
 8008566:	9308      	str	r3, [sp, #32]
 8008568:	f108 0801 	add.w	r8, r8, #1
 800856c:	2301      	movs	r3, #1
 800856e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 81b0 	beq.w	80088d8 <_dtoa_r+0xb48>
 8008578:	6923      	ldr	r3, [r4, #16]
 800857a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800857e:	6918      	ldr	r0, [r3, #16]
 8008580:	f000 ff08 	bl	8009394 <__hi0bits>
 8008584:	f1c0 0020 	rsb	r0, r0, #32
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	4418      	add	r0, r3
 800858c:	f010 001f 	ands.w	r0, r0, #31
 8008590:	d077      	beq.n	8008682 <_dtoa_r+0x8f2>
 8008592:	f1c0 0320 	rsb	r3, r0, #32
 8008596:	2b04      	cmp	r3, #4
 8008598:	dd6b      	ble.n	8008672 <_dtoa_r+0x8e2>
 800859a:	9b08      	ldr	r3, [sp, #32]
 800859c:	f1c0 001c 	rsb	r0, r0, #28
 80085a0:	4403      	add	r3, r0
 80085a2:	4480      	add	r8, r0
 80085a4:	4406      	add	r6, r0
 80085a6:	9308      	str	r3, [sp, #32]
 80085a8:	f1b8 0f00 	cmp.w	r8, #0
 80085ac:	dd05      	ble.n	80085ba <_dtoa_r+0x82a>
 80085ae:	4649      	mov	r1, r9
 80085b0:	4642      	mov	r2, r8
 80085b2:	4658      	mov	r0, fp
 80085b4:	f001 f854 	bl	8009660 <__lshift>
 80085b8:	4681      	mov	r9, r0
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	dd05      	ble.n	80085cc <_dtoa_r+0x83c>
 80085c0:	4621      	mov	r1, r4
 80085c2:	461a      	mov	r2, r3
 80085c4:	4658      	mov	r0, fp
 80085c6:	f001 f84b 	bl	8009660 <__lshift>
 80085ca:	4604      	mov	r4, r0
 80085cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d059      	beq.n	8008686 <_dtoa_r+0x8f6>
 80085d2:	4621      	mov	r1, r4
 80085d4:	4648      	mov	r0, r9
 80085d6:	f001 f8af 	bl	8009738 <__mcmp>
 80085da:	2800      	cmp	r0, #0
 80085dc:	da53      	bge.n	8008686 <_dtoa_r+0x8f6>
 80085de:	1e7b      	subs	r3, r7, #1
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	4649      	mov	r1, r9
 80085e4:	2300      	movs	r3, #0
 80085e6:	220a      	movs	r2, #10
 80085e8:	4658      	mov	r0, fp
 80085ea:	f000 fe43 	bl	8009274 <__multadd>
 80085ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085f0:	4681      	mov	r9, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 8172 	beq.w	80088dc <_dtoa_r+0xb4c>
 80085f8:	2300      	movs	r3, #0
 80085fa:	4629      	mov	r1, r5
 80085fc:	220a      	movs	r2, #10
 80085fe:	4658      	mov	r0, fp
 8008600:	f000 fe38 	bl	8009274 <__multadd>
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	4605      	mov	r5, r0
 800860a:	dc67      	bgt.n	80086dc <_dtoa_r+0x94c>
 800860c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800860e:	2b02      	cmp	r3, #2
 8008610:	dc41      	bgt.n	8008696 <_dtoa_r+0x906>
 8008612:	e063      	b.n	80086dc <_dtoa_r+0x94c>
 8008614:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008616:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800861a:	e746      	b.n	80084aa <_dtoa_r+0x71a>
 800861c:	9b07      	ldr	r3, [sp, #28]
 800861e:	1e5c      	subs	r4, r3, #1
 8008620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008622:	42a3      	cmp	r3, r4
 8008624:	bfbf      	itttt	lt
 8008626:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008628:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800862a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800862c:	1ae3      	sublt	r3, r4, r3
 800862e:	bfb4      	ite	lt
 8008630:	18d2      	addlt	r2, r2, r3
 8008632:	1b1c      	subge	r4, r3, r4
 8008634:	9b07      	ldr	r3, [sp, #28]
 8008636:	bfbc      	itt	lt
 8008638:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800863a:	2400      	movlt	r4, #0
 800863c:	2b00      	cmp	r3, #0
 800863e:	bfb5      	itete	lt
 8008640:	eba8 0603 	sublt.w	r6, r8, r3
 8008644:	9b07      	ldrge	r3, [sp, #28]
 8008646:	2300      	movlt	r3, #0
 8008648:	4646      	movge	r6, r8
 800864a:	e730      	b.n	80084ae <_dtoa_r+0x71e>
 800864c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800864e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008650:	4646      	mov	r6, r8
 8008652:	e735      	b.n	80084c0 <_dtoa_r+0x730>
 8008654:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008656:	e75c      	b.n	8008512 <_dtoa_r+0x782>
 8008658:	2300      	movs	r3, #0
 800865a:	e788      	b.n	800856e <_dtoa_r+0x7de>
 800865c:	3fe00000 	.word	0x3fe00000
 8008660:	40240000 	.word	0x40240000
 8008664:	40140000 	.word	0x40140000
 8008668:	9b02      	ldr	r3, [sp, #8]
 800866a:	e780      	b.n	800856e <_dtoa_r+0x7de>
 800866c:	2300      	movs	r3, #0
 800866e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008670:	e782      	b.n	8008578 <_dtoa_r+0x7e8>
 8008672:	d099      	beq.n	80085a8 <_dtoa_r+0x818>
 8008674:	9a08      	ldr	r2, [sp, #32]
 8008676:	331c      	adds	r3, #28
 8008678:	441a      	add	r2, r3
 800867a:	4498      	add	r8, r3
 800867c:	441e      	add	r6, r3
 800867e:	9208      	str	r2, [sp, #32]
 8008680:	e792      	b.n	80085a8 <_dtoa_r+0x818>
 8008682:	4603      	mov	r3, r0
 8008684:	e7f6      	b.n	8008674 <_dtoa_r+0x8e4>
 8008686:	9b07      	ldr	r3, [sp, #28]
 8008688:	9704      	str	r7, [sp, #16]
 800868a:	2b00      	cmp	r3, #0
 800868c:	dc20      	bgt.n	80086d0 <_dtoa_r+0x940>
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008692:	2b02      	cmp	r3, #2
 8008694:	dd1e      	ble.n	80086d4 <_dtoa_r+0x944>
 8008696:	9b00      	ldr	r3, [sp, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	f47f aec0 	bne.w	800841e <_dtoa_r+0x68e>
 800869e:	4621      	mov	r1, r4
 80086a0:	2205      	movs	r2, #5
 80086a2:	4658      	mov	r0, fp
 80086a4:	f000 fde6 	bl	8009274 <__multadd>
 80086a8:	4601      	mov	r1, r0
 80086aa:	4604      	mov	r4, r0
 80086ac:	4648      	mov	r0, r9
 80086ae:	f001 f843 	bl	8009738 <__mcmp>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f77f aeb3 	ble.w	800841e <_dtoa_r+0x68e>
 80086b8:	4656      	mov	r6, sl
 80086ba:	2331      	movs	r3, #49	@ 0x31
 80086bc:	f806 3b01 	strb.w	r3, [r6], #1
 80086c0:	9b04      	ldr	r3, [sp, #16]
 80086c2:	3301      	adds	r3, #1
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	e6ae      	b.n	8008426 <_dtoa_r+0x696>
 80086c8:	9c07      	ldr	r4, [sp, #28]
 80086ca:	9704      	str	r7, [sp, #16]
 80086cc:	4625      	mov	r5, r4
 80086ce:	e7f3      	b.n	80086b8 <_dtoa_r+0x928>
 80086d0:	9b07      	ldr	r3, [sp, #28]
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 8104 	beq.w	80088e4 <_dtoa_r+0xb54>
 80086dc:	2e00      	cmp	r6, #0
 80086de:	dd05      	ble.n	80086ec <_dtoa_r+0x95c>
 80086e0:	4629      	mov	r1, r5
 80086e2:	4632      	mov	r2, r6
 80086e4:	4658      	mov	r0, fp
 80086e6:	f000 ffbb 	bl	8009660 <__lshift>
 80086ea:	4605      	mov	r5, r0
 80086ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d05a      	beq.n	80087a8 <_dtoa_r+0xa18>
 80086f2:	6869      	ldr	r1, [r5, #4]
 80086f4:	4658      	mov	r0, fp
 80086f6:	f000 fd5b 	bl	80091b0 <_Balloc>
 80086fa:	4606      	mov	r6, r0
 80086fc:	b928      	cbnz	r0, 800870a <_dtoa_r+0x97a>
 80086fe:	4b84      	ldr	r3, [pc, #528]	@ (8008910 <_dtoa_r+0xb80>)
 8008700:	4602      	mov	r2, r0
 8008702:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008706:	f7ff bb5a 	b.w	8007dbe <_dtoa_r+0x2e>
 800870a:	692a      	ldr	r2, [r5, #16]
 800870c:	3202      	adds	r2, #2
 800870e:	0092      	lsls	r2, r2, #2
 8008710:	f105 010c 	add.w	r1, r5, #12
 8008714:	300c      	adds	r0, #12
 8008716:	f7ff fa78 	bl	8007c0a <memcpy>
 800871a:	2201      	movs	r2, #1
 800871c:	4631      	mov	r1, r6
 800871e:	4658      	mov	r0, fp
 8008720:	f000 ff9e 	bl	8009660 <__lshift>
 8008724:	f10a 0301 	add.w	r3, sl, #1
 8008728:	9307      	str	r3, [sp, #28]
 800872a:	9b00      	ldr	r3, [sp, #0]
 800872c:	4453      	add	r3, sl
 800872e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008730:	9b02      	ldr	r3, [sp, #8]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	462f      	mov	r7, r5
 8008738:	930a      	str	r3, [sp, #40]	@ 0x28
 800873a:	4605      	mov	r5, r0
 800873c:	9b07      	ldr	r3, [sp, #28]
 800873e:	4621      	mov	r1, r4
 8008740:	3b01      	subs	r3, #1
 8008742:	4648      	mov	r0, r9
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	f7ff fa9b 	bl	8007c80 <quorem>
 800874a:	4639      	mov	r1, r7
 800874c:	9002      	str	r0, [sp, #8]
 800874e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008752:	4648      	mov	r0, r9
 8008754:	f000 fff0 	bl	8009738 <__mcmp>
 8008758:	462a      	mov	r2, r5
 800875a:	9008      	str	r0, [sp, #32]
 800875c:	4621      	mov	r1, r4
 800875e:	4658      	mov	r0, fp
 8008760:	f001 f806 	bl	8009770 <__mdiff>
 8008764:	68c2      	ldr	r2, [r0, #12]
 8008766:	4606      	mov	r6, r0
 8008768:	bb02      	cbnz	r2, 80087ac <_dtoa_r+0xa1c>
 800876a:	4601      	mov	r1, r0
 800876c:	4648      	mov	r0, r9
 800876e:	f000 ffe3 	bl	8009738 <__mcmp>
 8008772:	4602      	mov	r2, r0
 8008774:	4631      	mov	r1, r6
 8008776:	4658      	mov	r0, fp
 8008778:	920e      	str	r2, [sp, #56]	@ 0x38
 800877a:	f000 fd59 	bl	8009230 <_Bfree>
 800877e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008780:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008782:	9e07      	ldr	r6, [sp, #28]
 8008784:	ea43 0102 	orr.w	r1, r3, r2
 8008788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800878a:	4319      	orrs	r1, r3
 800878c:	d110      	bne.n	80087b0 <_dtoa_r+0xa20>
 800878e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008792:	d029      	beq.n	80087e8 <_dtoa_r+0xa58>
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	2b00      	cmp	r3, #0
 8008798:	dd02      	ble.n	80087a0 <_dtoa_r+0xa10>
 800879a:	9b02      	ldr	r3, [sp, #8]
 800879c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80087a0:	9b00      	ldr	r3, [sp, #0]
 80087a2:	f883 8000 	strb.w	r8, [r3]
 80087a6:	e63f      	b.n	8008428 <_dtoa_r+0x698>
 80087a8:	4628      	mov	r0, r5
 80087aa:	e7bb      	b.n	8008724 <_dtoa_r+0x994>
 80087ac:	2201      	movs	r2, #1
 80087ae:	e7e1      	b.n	8008774 <_dtoa_r+0x9e4>
 80087b0:	9b08      	ldr	r3, [sp, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	db04      	blt.n	80087c0 <_dtoa_r+0xa30>
 80087b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087b8:	430b      	orrs	r3, r1
 80087ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80087bc:	430b      	orrs	r3, r1
 80087be:	d120      	bne.n	8008802 <_dtoa_r+0xa72>
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	dded      	ble.n	80087a0 <_dtoa_r+0xa10>
 80087c4:	4649      	mov	r1, r9
 80087c6:	2201      	movs	r2, #1
 80087c8:	4658      	mov	r0, fp
 80087ca:	f000 ff49 	bl	8009660 <__lshift>
 80087ce:	4621      	mov	r1, r4
 80087d0:	4681      	mov	r9, r0
 80087d2:	f000 ffb1 	bl	8009738 <__mcmp>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	dc03      	bgt.n	80087e2 <_dtoa_r+0xa52>
 80087da:	d1e1      	bne.n	80087a0 <_dtoa_r+0xa10>
 80087dc:	f018 0f01 	tst.w	r8, #1
 80087e0:	d0de      	beq.n	80087a0 <_dtoa_r+0xa10>
 80087e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087e6:	d1d8      	bne.n	800879a <_dtoa_r+0xa0a>
 80087e8:	9a00      	ldr	r2, [sp, #0]
 80087ea:	2339      	movs	r3, #57	@ 0x39
 80087ec:	7013      	strb	r3, [r2, #0]
 80087ee:	4633      	mov	r3, r6
 80087f0:	461e      	mov	r6, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80087f8:	2a39      	cmp	r2, #57	@ 0x39
 80087fa:	d052      	beq.n	80088a2 <_dtoa_r+0xb12>
 80087fc:	3201      	adds	r2, #1
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	e612      	b.n	8008428 <_dtoa_r+0x698>
 8008802:	2a00      	cmp	r2, #0
 8008804:	dd07      	ble.n	8008816 <_dtoa_r+0xa86>
 8008806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800880a:	d0ed      	beq.n	80087e8 <_dtoa_r+0xa58>
 800880c:	9a00      	ldr	r2, [sp, #0]
 800880e:	f108 0301 	add.w	r3, r8, #1
 8008812:	7013      	strb	r3, [r2, #0]
 8008814:	e608      	b.n	8008428 <_dtoa_r+0x698>
 8008816:	9b07      	ldr	r3, [sp, #28]
 8008818:	9a07      	ldr	r2, [sp, #28]
 800881a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800881e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008820:	4293      	cmp	r3, r2
 8008822:	d028      	beq.n	8008876 <_dtoa_r+0xae6>
 8008824:	4649      	mov	r1, r9
 8008826:	2300      	movs	r3, #0
 8008828:	220a      	movs	r2, #10
 800882a:	4658      	mov	r0, fp
 800882c:	f000 fd22 	bl	8009274 <__multadd>
 8008830:	42af      	cmp	r7, r5
 8008832:	4681      	mov	r9, r0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	f04f 020a 	mov.w	r2, #10
 800883c:	4639      	mov	r1, r7
 800883e:	4658      	mov	r0, fp
 8008840:	d107      	bne.n	8008852 <_dtoa_r+0xac2>
 8008842:	f000 fd17 	bl	8009274 <__multadd>
 8008846:	4607      	mov	r7, r0
 8008848:	4605      	mov	r5, r0
 800884a:	9b07      	ldr	r3, [sp, #28]
 800884c:	3301      	adds	r3, #1
 800884e:	9307      	str	r3, [sp, #28]
 8008850:	e774      	b.n	800873c <_dtoa_r+0x9ac>
 8008852:	f000 fd0f 	bl	8009274 <__multadd>
 8008856:	4629      	mov	r1, r5
 8008858:	4607      	mov	r7, r0
 800885a:	2300      	movs	r3, #0
 800885c:	220a      	movs	r2, #10
 800885e:	4658      	mov	r0, fp
 8008860:	f000 fd08 	bl	8009274 <__multadd>
 8008864:	4605      	mov	r5, r0
 8008866:	e7f0      	b.n	800884a <_dtoa_r+0xaba>
 8008868:	9b00      	ldr	r3, [sp, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	bfcc      	ite	gt
 800886e:	461e      	movgt	r6, r3
 8008870:	2601      	movle	r6, #1
 8008872:	4456      	add	r6, sl
 8008874:	2700      	movs	r7, #0
 8008876:	4649      	mov	r1, r9
 8008878:	2201      	movs	r2, #1
 800887a:	4658      	mov	r0, fp
 800887c:	f000 fef0 	bl	8009660 <__lshift>
 8008880:	4621      	mov	r1, r4
 8008882:	4681      	mov	r9, r0
 8008884:	f000 ff58 	bl	8009738 <__mcmp>
 8008888:	2800      	cmp	r0, #0
 800888a:	dcb0      	bgt.n	80087ee <_dtoa_r+0xa5e>
 800888c:	d102      	bne.n	8008894 <_dtoa_r+0xb04>
 800888e:	f018 0f01 	tst.w	r8, #1
 8008892:	d1ac      	bne.n	80087ee <_dtoa_r+0xa5e>
 8008894:	4633      	mov	r3, r6
 8008896:	461e      	mov	r6, r3
 8008898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800889c:	2a30      	cmp	r2, #48	@ 0x30
 800889e:	d0fa      	beq.n	8008896 <_dtoa_r+0xb06>
 80088a0:	e5c2      	b.n	8008428 <_dtoa_r+0x698>
 80088a2:	459a      	cmp	sl, r3
 80088a4:	d1a4      	bne.n	80087f0 <_dtoa_r+0xa60>
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	3301      	adds	r3, #1
 80088aa:	9304      	str	r3, [sp, #16]
 80088ac:	2331      	movs	r3, #49	@ 0x31
 80088ae:	f88a 3000 	strb.w	r3, [sl]
 80088b2:	e5b9      	b.n	8008428 <_dtoa_r+0x698>
 80088b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008914 <_dtoa_r+0xb84>
 80088ba:	b11b      	cbz	r3, 80088c4 <_dtoa_r+0xb34>
 80088bc:	f10a 0308 	add.w	r3, sl, #8
 80088c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	4650      	mov	r0, sl
 80088c6:	b019      	add	sp, #100	@ 0x64
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	f77f ae37 	ble.w	8008542 <_dtoa_r+0x7b2>
 80088d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80088d8:	2001      	movs	r0, #1
 80088da:	e655      	b.n	8008588 <_dtoa_r+0x7f8>
 80088dc:	9b00      	ldr	r3, [sp, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f77f aed6 	ble.w	8008690 <_dtoa_r+0x900>
 80088e4:	4656      	mov	r6, sl
 80088e6:	4621      	mov	r1, r4
 80088e8:	4648      	mov	r0, r9
 80088ea:	f7ff f9c9 	bl	8007c80 <quorem>
 80088ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80088f2:	f806 8b01 	strb.w	r8, [r6], #1
 80088f6:	9b00      	ldr	r3, [sp, #0]
 80088f8:	eba6 020a 	sub.w	r2, r6, sl
 80088fc:	4293      	cmp	r3, r2
 80088fe:	ddb3      	ble.n	8008868 <_dtoa_r+0xad8>
 8008900:	4649      	mov	r1, r9
 8008902:	2300      	movs	r3, #0
 8008904:	220a      	movs	r2, #10
 8008906:	4658      	mov	r0, fp
 8008908:	f000 fcb4 	bl	8009274 <__multadd>
 800890c:	4681      	mov	r9, r0
 800890e:	e7ea      	b.n	80088e6 <_dtoa_r+0xb56>
 8008910:	0800cd59 	.word	0x0800cd59
 8008914:	0800ccf4 	.word	0x0800ccf4

08008918 <_free_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4605      	mov	r5, r0
 800891c:	2900      	cmp	r1, #0
 800891e:	d041      	beq.n	80089a4 <_free_r+0x8c>
 8008920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008924:	1f0c      	subs	r4, r1, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfb8      	it	lt
 800892a:	18e4      	addlt	r4, r4, r3
 800892c:	f000 fc34 	bl	8009198 <__malloc_lock>
 8008930:	4a1d      	ldr	r2, [pc, #116]	@ (80089a8 <_free_r+0x90>)
 8008932:	6813      	ldr	r3, [r2, #0]
 8008934:	b933      	cbnz	r3, 8008944 <_free_r+0x2c>
 8008936:	6063      	str	r3, [r4, #4]
 8008938:	6014      	str	r4, [r2, #0]
 800893a:	4628      	mov	r0, r5
 800893c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008940:	f000 bc30 	b.w	80091a4 <__malloc_unlock>
 8008944:	42a3      	cmp	r3, r4
 8008946:	d908      	bls.n	800895a <_free_r+0x42>
 8008948:	6820      	ldr	r0, [r4, #0]
 800894a:	1821      	adds	r1, r4, r0
 800894c:	428b      	cmp	r3, r1
 800894e:	bf01      	itttt	eq
 8008950:	6819      	ldreq	r1, [r3, #0]
 8008952:	685b      	ldreq	r3, [r3, #4]
 8008954:	1809      	addeq	r1, r1, r0
 8008956:	6021      	streq	r1, [r4, #0]
 8008958:	e7ed      	b.n	8008936 <_free_r+0x1e>
 800895a:	461a      	mov	r2, r3
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	b10b      	cbz	r3, 8008964 <_free_r+0x4c>
 8008960:	42a3      	cmp	r3, r4
 8008962:	d9fa      	bls.n	800895a <_free_r+0x42>
 8008964:	6811      	ldr	r1, [r2, #0]
 8008966:	1850      	adds	r0, r2, r1
 8008968:	42a0      	cmp	r0, r4
 800896a:	d10b      	bne.n	8008984 <_free_r+0x6c>
 800896c:	6820      	ldr	r0, [r4, #0]
 800896e:	4401      	add	r1, r0
 8008970:	1850      	adds	r0, r2, r1
 8008972:	4283      	cmp	r3, r0
 8008974:	6011      	str	r1, [r2, #0]
 8008976:	d1e0      	bne.n	800893a <_free_r+0x22>
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	6053      	str	r3, [r2, #4]
 800897e:	4408      	add	r0, r1
 8008980:	6010      	str	r0, [r2, #0]
 8008982:	e7da      	b.n	800893a <_free_r+0x22>
 8008984:	d902      	bls.n	800898c <_free_r+0x74>
 8008986:	230c      	movs	r3, #12
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	e7d6      	b.n	800893a <_free_r+0x22>
 800898c:	6820      	ldr	r0, [r4, #0]
 800898e:	1821      	adds	r1, r4, r0
 8008990:	428b      	cmp	r3, r1
 8008992:	bf04      	itt	eq
 8008994:	6819      	ldreq	r1, [r3, #0]
 8008996:	685b      	ldreq	r3, [r3, #4]
 8008998:	6063      	str	r3, [r4, #4]
 800899a:	bf04      	itt	eq
 800899c:	1809      	addeq	r1, r1, r0
 800899e:	6021      	streq	r1, [r4, #0]
 80089a0:	6054      	str	r4, [r2, #4]
 80089a2:	e7ca      	b.n	800893a <_free_r+0x22>
 80089a4:	bd38      	pop	{r3, r4, r5, pc}
 80089a6:	bf00      	nop
 80089a8:	20000978 	.word	0x20000978

080089ac <rshift>:
 80089ac:	6903      	ldr	r3, [r0, #16]
 80089ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089ba:	f100 0414 	add.w	r4, r0, #20
 80089be:	dd45      	ble.n	8008a4c <rshift+0xa0>
 80089c0:	f011 011f 	ands.w	r1, r1, #31
 80089c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089cc:	d10c      	bne.n	80089e8 <rshift+0x3c>
 80089ce:	f100 0710 	add.w	r7, r0, #16
 80089d2:	4629      	mov	r1, r5
 80089d4:	42b1      	cmp	r1, r6
 80089d6:	d334      	bcc.n	8008a42 <rshift+0x96>
 80089d8:	1a9b      	subs	r3, r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	1eea      	subs	r2, r5, #3
 80089de:	4296      	cmp	r6, r2
 80089e0:	bf38      	it	cc
 80089e2:	2300      	movcc	r3, #0
 80089e4:	4423      	add	r3, r4
 80089e6:	e015      	b.n	8008a14 <rshift+0x68>
 80089e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089ec:	f1c1 0820 	rsb	r8, r1, #32
 80089f0:	40cf      	lsrs	r7, r1
 80089f2:	f105 0e04 	add.w	lr, r5, #4
 80089f6:	46a1      	mov	r9, r4
 80089f8:	4576      	cmp	r6, lr
 80089fa:	46f4      	mov	ip, lr
 80089fc:	d815      	bhi.n	8008a2a <rshift+0x7e>
 80089fe:	1a9a      	subs	r2, r3, r2
 8008a00:	0092      	lsls	r2, r2, #2
 8008a02:	3a04      	subs	r2, #4
 8008a04:	3501      	adds	r5, #1
 8008a06:	42ae      	cmp	r6, r5
 8008a08:	bf38      	it	cc
 8008a0a:	2200      	movcc	r2, #0
 8008a0c:	18a3      	adds	r3, r4, r2
 8008a0e:	50a7      	str	r7, [r4, r2]
 8008a10:	b107      	cbz	r7, 8008a14 <rshift+0x68>
 8008a12:	3304      	adds	r3, #4
 8008a14:	1b1a      	subs	r2, r3, r4
 8008a16:	42a3      	cmp	r3, r4
 8008a18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a1c:	bf08      	it	eq
 8008a1e:	2300      	moveq	r3, #0
 8008a20:	6102      	str	r2, [r0, #16]
 8008a22:	bf08      	it	eq
 8008a24:	6143      	streq	r3, [r0, #20]
 8008a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a2a:	f8dc c000 	ldr.w	ip, [ip]
 8008a2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a32:	ea4c 0707 	orr.w	r7, ip, r7
 8008a36:	f849 7b04 	str.w	r7, [r9], #4
 8008a3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a3e:	40cf      	lsrs	r7, r1
 8008a40:	e7da      	b.n	80089f8 <rshift+0x4c>
 8008a42:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a46:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a4a:	e7c3      	b.n	80089d4 <rshift+0x28>
 8008a4c:	4623      	mov	r3, r4
 8008a4e:	e7e1      	b.n	8008a14 <rshift+0x68>

08008a50 <__hexdig_fun>:
 8008a50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008a54:	2b09      	cmp	r3, #9
 8008a56:	d802      	bhi.n	8008a5e <__hexdig_fun+0xe>
 8008a58:	3820      	subs	r0, #32
 8008a5a:	b2c0      	uxtb	r0, r0
 8008a5c:	4770      	bx	lr
 8008a5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008a62:	2b05      	cmp	r3, #5
 8008a64:	d801      	bhi.n	8008a6a <__hexdig_fun+0x1a>
 8008a66:	3847      	subs	r0, #71	@ 0x47
 8008a68:	e7f7      	b.n	8008a5a <__hexdig_fun+0xa>
 8008a6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008a6e:	2b05      	cmp	r3, #5
 8008a70:	d801      	bhi.n	8008a76 <__hexdig_fun+0x26>
 8008a72:	3827      	subs	r0, #39	@ 0x27
 8008a74:	e7f1      	b.n	8008a5a <__hexdig_fun+0xa>
 8008a76:	2000      	movs	r0, #0
 8008a78:	4770      	bx	lr
	...

08008a7c <__gethex>:
 8008a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	b085      	sub	sp, #20
 8008a82:	468a      	mov	sl, r1
 8008a84:	9302      	str	r3, [sp, #8]
 8008a86:	680b      	ldr	r3, [r1, #0]
 8008a88:	9001      	str	r0, [sp, #4]
 8008a8a:	4690      	mov	r8, r2
 8008a8c:	1c9c      	adds	r4, r3, #2
 8008a8e:	46a1      	mov	r9, r4
 8008a90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008a94:	2830      	cmp	r0, #48	@ 0x30
 8008a96:	d0fa      	beq.n	8008a8e <__gethex+0x12>
 8008a98:	eba9 0303 	sub.w	r3, r9, r3
 8008a9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008aa0:	f7ff ffd6 	bl	8008a50 <__hexdig_fun>
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d168      	bne.n	8008b7c <__gethex+0x100>
 8008aaa:	49a0      	ldr	r1, [pc, #640]	@ (8008d2c <__gethex+0x2b0>)
 8008aac:	2201      	movs	r2, #1
 8008aae:	4648      	mov	r0, r9
 8008ab0:	f7fe ffc5 	bl	8007a3e <strncmp>
 8008ab4:	4607      	mov	r7, r0
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d167      	bne.n	8008b8a <__gethex+0x10e>
 8008aba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008abe:	4626      	mov	r6, r4
 8008ac0:	f7ff ffc6 	bl	8008a50 <__hexdig_fun>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d062      	beq.n	8008b8e <__gethex+0x112>
 8008ac8:	4623      	mov	r3, r4
 8008aca:	7818      	ldrb	r0, [r3, #0]
 8008acc:	2830      	cmp	r0, #48	@ 0x30
 8008ace:	4699      	mov	r9, r3
 8008ad0:	f103 0301 	add.w	r3, r3, #1
 8008ad4:	d0f9      	beq.n	8008aca <__gethex+0x4e>
 8008ad6:	f7ff ffbb 	bl	8008a50 <__hexdig_fun>
 8008ada:	fab0 f580 	clz	r5, r0
 8008ade:	096d      	lsrs	r5, r5, #5
 8008ae0:	f04f 0b01 	mov.w	fp, #1
 8008ae4:	464a      	mov	r2, r9
 8008ae6:	4616      	mov	r6, r2
 8008ae8:	3201      	adds	r2, #1
 8008aea:	7830      	ldrb	r0, [r6, #0]
 8008aec:	f7ff ffb0 	bl	8008a50 <__hexdig_fun>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d1f8      	bne.n	8008ae6 <__gethex+0x6a>
 8008af4:	498d      	ldr	r1, [pc, #564]	@ (8008d2c <__gethex+0x2b0>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	4630      	mov	r0, r6
 8008afa:	f7fe ffa0 	bl	8007a3e <strncmp>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d13f      	bne.n	8008b82 <__gethex+0x106>
 8008b02:	b944      	cbnz	r4, 8008b16 <__gethex+0x9a>
 8008b04:	1c74      	adds	r4, r6, #1
 8008b06:	4622      	mov	r2, r4
 8008b08:	4616      	mov	r6, r2
 8008b0a:	3201      	adds	r2, #1
 8008b0c:	7830      	ldrb	r0, [r6, #0]
 8008b0e:	f7ff ff9f 	bl	8008a50 <__hexdig_fun>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d1f8      	bne.n	8008b08 <__gethex+0x8c>
 8008b16:	1ba4      	subs	r4, r4, r6
 8008b18:	00a7      	lsls	r7, r4, #2
 8008b1a:	7833      	ldrb	r3, [r6, #0]
 8008b1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008b20:	2b50      	cmp	r3, #80	@ 0x50
 8008b22:	d13e      	bne.n	8008ba2 <__gethex+0x126>
 8008b24:	7873      	ldrb	r3, [r6, #1]
 8008b26:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b28:	d033      	beq.n	8008b92 <__gethex+0x116>
 8008b2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b2c:	d034      	beq.n	8008b98 <__gethex+0x11c>
 8008b2e:	1c71      	adds	r1, r6, #1
 8008b30:	2400      	movs	r4, #0
 8008b32:	7808      	ldrb	r0, [r1, #0]
 8008b34:	f7ff ff8c 	bl	8008a50 <__hexdig_fun>
 8008b38:	1e43      	subs	r3, r0, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b18      	cmp	r3, #24
 8008b3e:	d830      	bhi.n	8008ba2 <__gethex+0x126>
 8008b40:	f1a0 0210 	sub.w	r2, r0, #16
 8008b44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b48:	f7ff ff82 	bl	8008a50 <__hexdig_fun>
 8008b4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008b50:	fa5f fc8c 	uxtb.w	ip, ip
 8008b54:	f1bc 0f18 	cmp.w	ip, #24
 8008b58:	f04f 030a 	mov.w	r3, #10
 8008b5c:	d91e      	bls.n	8008b9c <__gethex+0x120>
 8008b5e:	b104      	cbz	r4, 8008b62 <__gethex+0xe6>
 8008b60:	4252      	negs	r2, r2
 8008b62:	4417      	add	r7, r2
 8008b64:	f8ca 1000 	str.w	r1, [sl]
 8008b68:	b1ed      	cbz	r5, 8008ba6 <__gethex+0x12a>
 8008b6a:	f1bb 0f00 	cmp.w	fp, #0
 8008b6e:	bf0c      	ite	eq
 8008b70:	2506      	moveq	r5, #6
 8008b72:	2500      	movne	r5, #0
 8008b74:	4628      	mov	r0, r5
 8008b76:	b005      	add	sp, #20
 8008b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7c:	2500      	movs	r5, #0
 8008b7e:	462c      	mov	r4, r5
 8008b80:	e7b0      	b.n	8008ae4 <__gethex+0x68>
 8008b82:	2c00      	cmp	r4, #0
 8008b84:	d1c7      	bne.n	8008b16 <__gethex+0x9a>
 8008b86:	4627      	mov	r7, r4
 8008b88:	e7c7      	b.n	8008b1a <__gethex+0x9e>
 8008b8a:	464e      	mov	r6, r9
 8008b8c:	462f      	mov	r7, r5
 8008b8e:	2501      	movs	r5, #1
 8008b90:	e7c3      	b.n	8008b1a <__gethex+0x9e>
 8008b92:	2400      	movs	r4, #0
 8008b94:	1cb1      	adds	r1, r6, #2
 8008b96:	e7cc      	b.n	8008b32 <__gethex+0xb6>
 8008b98:	2401      	movs	r4, #1
 8008b9a:	e7fb      	b.n	8008b94 <__gethex+0x118>
 8008b9c:	fb03 0002 	mla	r0, r3, r2, r0
 8008ba0:	e7ce      	b.n	8008b40 <__gethex+0xc4>
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	e7de      	b.n	8008b64 <__gethex+0xe8>
 8008ba6:	eba6 0309 	sub.w	r3, r6, r9
 8008baa:	3b01      	subs	r3, #1
 8008bac:	4629      	mov	r1, r5
 8008bae:	2b07      	cmp	r3, #7
 8008bb0:	dc0a      	bgt.n	8008bc8 <__gethex+0x14c>
 8008bb2:	9801      	ldr	r0, [sp, #4]
 8008bb4:	f000 fafc 	bl	80091b0 <_Balloc>
 8008bb8:	4604      	mov	r4, r0
 8008bba:	b940      	cbnz	r0, 8008bce <__gethex+0x152>
 8008bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8008d30 <__gethex+0x2b4>)
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	21e4      	movs	r1, #228	@ 0xe4
 8008bc2:	485c      	ldr	r0, [pc, #368]	@ (8008d34 <__gethex+0x2b8>)
 8008bc4:	f7ff f83e 	bl	8007c44 <__assert_func>
 8008bc8:	3101      	adds	r1, #1
 8008bca:	105b      	asrs	r3, r3, #1
 8008bcc:	e7ef      	b.n	8008bae <__gethex+0x132>
 8008bce:	f100 0a14 	add.w	sl, r0, #20
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	4655      	mov	r5, sl
 8008bd6:	469b      	mov	fp, r3
 8008bd8:	45b1      	cmp	r9, r6
 8008bda:	d337      	bcc.n	8008c4c <__gethex+0x1d0>
 8008bdc:	f845 bb04 	str.w	fp, [r5], #4
 8008be0:	eba5 050a 	sub.w	r5, r5, sl
 8008be4:	10ad      	asrs	r5, r5, #2
 8008be6:	6125      	str	r5, [r4, #16]
 8008be8:	4658      	mov	r0, fp
 8008bea:	f000 fbd3 	bl	8009394 <__hi0bits>
 8008bee:	016d      	lsls	r5, r5, #5
 8008bf0:	f8d8 6000 	ldr.w	r6, [r8]
 8008bf4:	1a2d      	subs	r5, r5, r0
 8008bf6:	42b5      	cmp	r5, r6
 8008bf8:	dd54      	ble.n	8008ca4 <__gethex+0x228>
 8008bfa:	1bad      	subs	r5, r5, r6
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f000 ff67 	bl	8009ad2 <__any_on>
 8008c04:	4681      	mov	r9, r0
 8008c06:	b178      	cbz	r0, 8008c28 <__gethex+0x1ac>
 8008c08:	1e6b      	subs	r3, r5, #1
 8008c0a:	1159      	asrs	r1, r3, #5
 8008c0c:	f003 021f 	and.w	r2, r3, #31
 8008c10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008c14:	f04f 0901 	mov.w	r9, #1
 8008c18:	fa09 f202 	lsl.w	r2, r9, r2
 8008c1c:	420a      	tst	r2, r1
 8008c1e:	d003      	beq.n	8008c28 <__gethex+0x1ac>
 8008c20:	454b      	cmp	r3, r9
 8008c22:	dc36      	bgt.n	8008c92 <__gethex+0x216>
 8008c24:	f04f 0902 	mov.w	r9, #2
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7ff febe 	bl	80089ac <rshift>
 8008c30:	442f      	add	r7, r5
 8008c32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c36:	42bb      	cmp	r3, r7
 8008c38:	da42      	bge.n	8008cc0 <__gethex+0x244>
 8008c3a:	9801      	ldr	r0, [sp, #4]
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	f000 faf7 	bl	8009230 <_Bfree>
 8008c42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c44:	2300      	movs	r3, #0
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	25a3      	movs	r5, #163	@ 0xa3
 8008c4a:	e793      	b.n	8008b74 <__gethex+0xf8>
 8008c4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008c50:	2a2e      	cmp	r2, #46	@ 0x2e
 8008c52:	d012      	beq.n	8008c7a <__gethex+0x1fe>
 8008c54:	2b20      	cmp	r3, #32
 8008c56:	d104      	bne.n	8008c62 <__gethex+0x1e6>
 8008c58:	f845 bb04 	str.w	fp, [r5], #4
 8008c5c:	f04f 0b00 	mov.w	fp, #0
 8008c60:	465b      	mov	r3, fp
 8008c62:	7830      	ldrb	r0, [r6, #0]
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	f7ff fef3 	bl	8008a50 <__hexdig_fun>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	f000 000f 	and.w	r0, r0, #15
 8008c70:	4098      	lsls	r0, r3
 8008c72:	ea4b 0b00 	orr.w	fp, fp, r0
 8008c76:	3304      	adds	r3, #4
 8008c78:	e7ae      	b.n	8008bd8 <__gethex+0x15c>
 8008c7a:	45b1      	cmp	r9, r6
 8008c7c:	d8ea      	bhi.n	8008c54 <__gethex+0x1d8>
 8008c7e:	492b      	ldr	r1, [pc, #172]	@ (8008d2c <__gethex+0x2b0>)
 8008c80:	9303      	str	r3, [sp, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7fe feda 	bl	8007a3e <strncmp>
 8008c8a:	9b03      	ldr	r3, [sp, #12]
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d1e1      	bne.n	8008c54 <__gethex+0x1d8>
 8008c90:	e7a2      	b.n	8008bd8 <__gethex+0x15c>
 8008c92:	1ea9      	subs	r1, r5, #2
 8008c94:	4620      	mov	r0, r4
 8008c96:	f000 ff1c 	bl	8009ad2 <__any_on>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d0c2      	beq.n	8008c24 <__gethex+0x1a8>
 8008c9e:	f04f 0903 	mov.w	r9, #3
 8008ca2:	e7c1      	b.n	8008c28 <__gethex+0x1ac>
 8008ca4:	da09      	bge.n	8008cba <__gethex+0x23e>
 8008ca6:	1b75      	subs	r5, r6, r5
 8008ca8:	4621      	mov	r1, r4
 8008caa:	9801      	ldr	r0, [sp, #4]
 8008cac:	462a      	mov	r2, r5
 8008cae:	f000 fcd7 	bl	8009660 <__lshift>
 8008cb2:	1b7f      	subs	r7, r7, r5
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	f100 0a14 	add.w	sl, r0, #20
 8008cba:	f04f 0900 	mov.w	r9, #0
 8008cbe:	e7b8      	b.n	8008c32 <__gethex+0x1b6>
 8008cc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cc4:	42bd      	cmp	r5, r7
 8008cc6:	dd6f      	ble.n	8008da8 <__gethex+0x32c>
 8008cc8:	1bed      	subs	r5, r5, r7
 8008cca:	42ae      	cmp	r6, r5
 8008ccc:	dc34      	bgt.n	8008d38 <__gethex+0x2bc>
 8008cce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d022      	beq.n	8008d1c <__gethex+0x2a0>
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d024      	beq.n	8008d24 <__gethex+0x2a8>
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d115      	bne.n	8008d0a <__gethex+0x28e>
 8008cde:	42ae      	cmp	r6, r5
 8008ce0:	d113      	bne.n	8008d0a <__gethex+0x28e>
 8008ce2:	2e01      	cmp	r6, #1
 8008ce4:	d10b      	bne.n	8008cfe <__gethex+0x282>
 8008ce6:	9a02      	ldr	r2, [sp, #8]
 8008ce8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	2301      	movs	r3, #1
 8008cf0:	6123      	str	r3, [r4, #16]
 8008cf2:	f8ca 3000 	str.w	r3, [sl]
 8008cf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cf8:	2562      	movs	r5, #98	@ 0x62
 8008cfa:	601c      	str	r4, [r3, #0]
 8008cfc:	e73a      	b.n	8008b74 <__gethex+0xf8>
 8008cfe:	1e71      	subs	r1, r6, #1
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 fee6 	bl	8009ad2 <__any_on>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d1ed      	bne.n	8008ce6 <__gethex+0x26a>
 8008d0a:	9801      	ldr	r0, [sp, #4]
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	f000 fa8f 	bl	8009230 <_Bfree>
 8008d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d14:	2300      	movs	r3, #0
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	2550      	movs	r5, #80	@ 0x50
 8008d1a:	e72b      	b.n	8008b74 <__gethex+0xf8>
 8008d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f3      	bne.n	8008d0a <__gethex+0x28e>
 8008d22:	e7e0      	b.n	8008ce6 <__gethex+0x26a>
 8008d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1dd      	bne.n	8008ce6 <__gethex+0x26a>
 8008d2a:	e7ee      	b.n	8008d0a <__gethex+0x28e>
 8008d2c:	0800cbb0 	.word	0x0800cbb0
 8008d30:	0800cd59 	.word	0x0800cd59
 8008d34:	0800cd6a 	.word	0x0800cd6a
 8008d38:	1e6f      	subs	r7, r5, #1
 8008d3a:	f1b9 0f00 	cmp.w	r9, #0
 8008d3e:	d130      	bne.n	8008da2 <__gethex+0x326>
 8008d40:	b127      	cbz	r7, 8008d4c <__gethex+0x2d0>
 8008d42:	4639      	mov	r1, r7
 8008d44:	4620      	mov	r0, r4
 8008d46:	f000 fec4 	bl	8009ad2 <__any_on>
 8008d4a:	4681      	mov	r9, r0
 8008d4c:	117a      	asrs	r2, r7, #5
 8008d4e:	2301      	movs	r3, #1
 8008d50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008d54:	f007 071f 	and.w	r7, r7, #31
 8008d58:	40bb      	lsls	r3, r7
 8008d5a:	4213      	tst	r3, r2
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4620      	mov	r0, r4
 8008d60:	bf18      	it	ne
 8008d62:	f049 0902 	orrne.w	r9, r9, #2
 8008d66:	f7ff fe21 	bl	80089ac <rshift>
 8008d6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008d6e:	1b76      	subs	r6, r6, r5
 8008d70:	2502      	movs	r5, #2
 8008d72:	f1b9 0f00 	cmp.w	r9, #0
 8008d76:	d047      	beq.n	8008e08 <__gethex+0x38c>
 8008d78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d015      	beq.n	8008dac <__gethex+0x330>
 8008d80:	2b03      	cmp	r3, #3
 8008d82:	d017      	beq.n	8008db4 <__gethex+0x338>
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d109      	bne.n	8008d9c <__gethex+0x320>
 8008d88:	f019 0f02 	tst.w	r9, #2
 8008d8c:	d006      	beq.n	8008d9c <__gethex+0x320>
 8008d8e:	f8da 3000 	ldr.w	r3, [sl]
 8008d92:	ea49 0903 	orr.w	r9, r9, r3
 8008d96:	f019 0f01 	tst.w	r9, #1
 8008d9a:	d10e      	bne.n	8008dba <__gethex+0x33e>
 8008d9c:	f045 0510 	orr.w	r5, r5, #16
 8008da0:	e032      	b.n	8008e08 <__gethex+0x38c>
 8008da2:	f04f 0901 	mov.w	r9, #1
 8008da6:	e7d1      	b.n	8008d4c <__gethex+0x2d0>
 8008da8:	2501      	movs	r5, #1
 8008daa:	e7e2      	b.n	8008d72 <__gethex+0x2f6>
 8008dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dae:	f1c3 0301 	rsb	r3, r3, #1
 8008db2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d0f0      	beq.n	8008d9c <__gethex+0x320>
 8008dba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008dbe:	f104 0314 	add.w	r3, r4, #20
 8008dc2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008dc6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008dca:	f04f 0c00 	mov.w	ip, #0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008dd8:	d01b      	beq.n	8008e12 <__gethex+0x396>
 8008dda:	3201      	adds	r2, #1
 8008ddc:	6002      	str	r2, [r0, #0]
 8008dde:	2d02      	cmp	r5, #2
 8008de0:	f104 0314 	add.w	r3, r4, #20
 8008de4:	d13c      	bne.n	8008e60 <__gethex+0x3e4>
 8008de6:	f8d8 2000 	ldr.w	r2, [r8]
 8008dea:	3a01      	subs	r2, #1
 8008dec:	42b2      	cmp	r2, r6
 8008dee:	d109      	bne.n	8008e04 <__gethex+0x388>
 8008df0:	1171      	asrs	r1, r6, #5
 8008df2:	2201      	movs	r2, #1
 8008df4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008df8:	f006 061f 	and.w	r6, r6, #31
 8008dfc:	fa02 f606 	lsl.w	r6, r2, r6
 8008e00:	421e      	tst	r6, r3
 8008e02:	d13a      	bne.n	8008e7a <__gethex+0x3fe>
 8008e04:	f045 0520 	orr.w	r5, r5, #32
 8008e08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e0a:	601c      	str	r4, [r3, #0]
 8008e0c:	9b02      	ldr	r3, [sp, #8]
 8008e0e:	601f      	str	r7, [r3, #0]
 8008e10:	e6b0      	b.n	8008b74 <__gethex+0xf8>
 8008e12:	4299      	cmp	r1, r3
 8008e14:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e18:	d8d9      	bhi.n	8008dce <__gethex+0x352>
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	459b      	cmp	fp, r3
 8008e1e:	db17      	blt.n	8008e50 <__gethex+0x3d4>
 8008e20:	6861      	ldr	r1, [r4, #4]
 8008e22:	9801      	ldr	r0, [sp, #4]
 8008e24:	3101      	adds	r1, #1
 8008e26:	f000 f9c3 	bl	80091b0 <_Balloc>
 8008e2a:	4681      	mov	r9, r0
 8008e2c:	b918      	cbnz	r0, 8008e36 <__gethex+0x3ba>
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8008e98 <__gethex+0x41c>)
 8008e30:	4602      	mov	r2, r0
 8008e32:	2184      	movs	r1, #132	@ 0x84
 8008e34:	e6c5      	b.n	8008bc2 <__gethex+0x146>
 8008e36:	6922      	ldr	r2, [r4, #16]
 8008e38:	3202      	adds	r2, #2
 8008e3a:	f104 010c 	add.w	r1, r4, #12
 8008e3e:	0092      	lsls	r2, r2, #2
 8008e40:	300c      	adds	r0, #12
 8008e42:	f7fe fee2 	bl	8007c0a <memcpy>
 8008e46:	4621      	mov	r1, r4
 8008e48:	9801      	ldr	r0, [sp, #4]
 8008e4a:	f000 f9f1 	bl	8009230 <_Bfree>
 8008e4e:	464c      	mov	r4, r9
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	1c5a      	adds	r2, r3, #1
 8008e54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e58:	6122      	str	r2, [r4, #16]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	615a      	str	r2, [r3, #20]
 8008e5e:	e7be      	b.n	8008dde <__gethex+0x362>
 8008e60:	6922      	ldr	r2, [r4, #16]
 8008e62:	455a      	cmp	r2, fp
 8008e64:	dd0b      	ble.n	8008e7e <__gethex+0x402>
 8008e66:	2101      	movs	r1, #1
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f7ff fd9f 	bl	80089ac <rshift>
 8008e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e72:	3701      	adds	r7, #1
 8008e74:	42bb      	cmp	r3, r7
 8008e76:	f6ff aee0 	blt.w	8008c3a <__gethex+0x1be>
 8008e7a:	2501      	movs	r5, #1
 8008e7c:	e7c2      	b.n	8008e04 <__gethex+0x388>
 8008e7e:	f016 061f 	ands.w	r6, r6, #31
 8008e82:	d0fa      	beq.n	8008e7a <__gethex+0x3fe>
 8008e84:	4453      	add	r3, sl
 8008e86:	f1c6 0620 	rsb	r6, r6, #32
 8008e8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008e8e:	f000 fa81 	bl	8009394 <__hi0bits>
 8008e92:	42b0      	cmp	r0, r6
 8008e94:	dbe7      	blt.n	8008e66 <__gethex+0x3ea>
 8008e96:	e7f0      	b.n	8008e7a <__gethex+0x3fe>
 8008e98:	0800cd59 	.word	0x0800cd59

08008e9c <L_shift>:
 8008e9c:	f1c2 0208 	rsb	r2, r2, #8
 8008ea0:	0092      	lsls	r2, r2, #2
 8008ea2:	b570      	push	{r4, r5, r6, lr}
 8008ea4:	f1c2 0620 	rsb	r6, r2, #32
 8008ea8:	6843      	ldr	r3, [r0, #4]
 8008eaa:	6804      	ldr	r4, [r0, #0]
 8008eac:	fa03 f506 	lsl.w	r5, r3, r6
 8008eb0:	432c      	orrs	r4, r5
 8008eb2:	40d3      	lsrs	r3, r2
 8008eb4:	6004      	str	r4, [r0, #0]
 8008eb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008eba:	4288      	cmp	r0, r1
 8008ebc:	d3f4      	bcc.n	8008ea8 <L_shift+0xc>
 8008ebe:	bd70      	pop	{r4, r5, r6, pc}

08008ec0 <__match>:
 8008ec0:	b530      	push	{r4, r5, lr}
 8008ec2:	6803      	ldr	r3, [r0, #0]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eca:	b914      	cbnz	r4, 8008ed2 <__match+0x12>
 8008ecc:	6003      	str	r3, [r0, #0]
 8008ece:	2001      	movs	r0, #1
 8008ed0:	bd30      	pop	{r4, r5, pc}
 8008ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ed6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008eda:	2d19      	cmp	r5, #25
 8008edc:	bf98      	it	ls
 8008ede:	3220      	addls	r2, #32
 8008ee0:	42a2      	cmp	r2, r4
 8008ee2:	d0f0      	beq.n	8008ec6 <__match+0x6>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	e7f3      	b.n	8008ed0 <__match+0x10>

08008ee8 <__hexnan>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	680b      	ldr	r3, [r1, #0]
 8008eee:	6801      	ldr	r1, [r0, #0]
 8008ef0:	115e      	asrs	r6, r3, #5
 8008ef2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ef6:	f013 031f 	ands.w	r3, r3, #31
 8008efa:	b087      	sub	sp, #28
 8008efc:	bf18      	it	ne
 8008efe:	3604      	addne	r6, #4
 8008f00:	2500      	movs	r5, #0
 8008f02:	1f37      	subs	r7, r6, #4
 8008f04:	4682      	mov	sl, r0
 8008f06:	4690      	mov	r8, r2
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f0e:	46b9      	mov	r9, r7
 8008f10:	463c      	mov	r4, r7
 8008f12:	9502      	str	r5, [sp, #8]
 8008f14:	46ab      	mov	fp, r5
 8008f16:	784a      	ldrb	r2, [r1, #1]
 8008f18:	1c4b      	adds	r3, r1, #1
 8008f1a:	9303      	str	r3, [sp, #12]
 8008f1c:	b342      	cbz	r2, 8008f70 <__hexnan+0x88>
 8008f1e:	4610      	mov	r0, r2
 8008f20:	9105      	str	r1, [sp, #20]
 8008f22:	9204      	str	r2, [sp, #16]
 8008f24:	f7ff fd94 	bl	8008a50 <__hexdig_fun>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d151      	bne.n	8008fd0 <__hexnan+0xe8>
 8008f2c:	9a04      	ldr	r2, [sp, #16]
 8008f2e:	9905      	ldr	r1, [sp, #20]
 8008f30:	2a20      	cmp	r2, #32
 8008f32:	d818      	bhi.n	8008f66 <__hexnan+0x7e>
 8008f34:	9b02      	ldr	r3, [sp, #8]
 8008f36:	459b      	cmp	fp, r3
 8008f38:	dd13      	ble.n	8008f62 <__hexnan+0x7a>
 8008f3a:	454c      	cmp	r4, r9
 8008f3c:	d206      	bcs.n	8008f4c <__hexnan+0x64>
 8008f3e:	2d07      	cmp	r5, #7
 8008f40:	dc04      	bgt.n	8008f4c <__hexnan+0x64>
 8008f42:	462a      	mov	r2, r5
 8008f44:	4649      	mov	r1, r9
 8008f46:	4620      	mov	r0, r4
 8008f48:	f7ff ffa8 	bl	8008e9c <L_shift>
 8008f4c:	4544      	cmp	r4, r8
 8008f4e:	d952      	bls.n	8008ff6 <__hexnan+0x10e>
 8008f50:	2300      	movs	r3, #0
 8008f52:	f1a4 0904 	sub.w	r9, r4, #4
 8008f56:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f5a:	f8cd b008 	str.w	fp, [sp, #8]
 8008f5e:	464c      	mov	r4, r9
 8008f60:	461d      	mov	r5, r3
 8008f62:	9903      	ldr	r1, [sp, #12]
 8008f64:	e7d7      	b.n	8008f16 <__hexnan+0x2e>
 8008f66:	2a29      	cmp	r2, #41	@ 0x29
 8008f68:	d157      	bne.n	800901a <__hexnan+0x132>
 8008f6a:	3102      	adds	r1, #2
 8008f6c:	f8ca 1000 	str.w	r1, [sl]
 8008f70:	f1bb 0f00 	cmp.w	fp, #0
 8008f74:	d051      	beq.n	800901a <__hexnan+0x132>
 8008f76:	454c      	cmp	r4, r9
 8008f78:	d206      	bcs.n	8008f88 <__hexnan+0xa0>
 8008f7a:	2d07      	cmp	r5, #7
 8008f7c:	dc04      	bgt.n	8008f88 <__hexnan+0xa0>
 8008f7e:	462a      	mov	r2, r5
 8008f80:	4649      	mov	r1, r9
 8008f82:	4620      	mov	r0, r4
 8008f84:	f7ff ff8a 	bl	8008e9c <L_shift>
 8008f88:	4544      	cmp	r4, r8
 8008f8a:	d936      	bls.n	8008ffa <__hexnan+0x112>
 8008f8c:	f1a8 0204 	sub.w	r2, r8, #4
 8008f90:	4623      	mov	r3, r4
 8008f92:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f96:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f9a:	429f      	cmp	r7, r3
 8008f9c:	d2f9      	bcs.n	8008f92 <__hexnan+0xaa>
 8008f9e:	1b3b      	subs	r3, r7, r4
 8008fa0:	f023 0303 	bic.w	r3, r3, #3
 8008fa4:	3304      	adds	r3, #4
 8008fa6:	3401      	adds	r4, #1
 8008fa8:	3e03      	subs	r6, #3
 8008faa:	42b4      	cmp	r4, r6
 8008fac:	bf88      	it	hi
 8008fae:	2304      	movhi	r3, #4
 8008fb0:	4443      	add	r3, r8
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f843 2b04 	str.w	r2, [r3], #4
 8008fb8:	429f      	cmp	r7, r3
 8008fba:	d2fb      	bcs.n	8008fb4 <__hexnan+0xcc>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	b91b      	cbnz	r3, 8008fc8 <__hexnan+0xe0>
 8008fc0:	4547      	cmp	r7, r8
 8008fc2:	d128      	bne.n	8009016 <__hexnan+0x12e>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	2005      	movs	r0, #5
 8008fca:	b007      	add	sp, #28
 8008fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd0:	3501      	adds	r5, #1
 8008fd2:	2d08      	cmp	r5, #8
 8008fd4:	f10b 0b01 	add.w	fp, fp, #1
 8008fd8:	dd06      	ble.n	8008fe8 <__hexnan+0x100>
 8008fda:	4544      	cmp	r4, r8
 8008fdc:	d9c1      	bls.n	8008f62 <__hexnan+0x7a>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fe4:	2501      	movs	r5, #1
 8008fe6:	3c04      	subs	r4, #4
 8008fe8:	6822      	ldr	r2, [r4, #0]
 8008fea:	f000 000f 	and.w	r0, r0, #15
 8008fee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ff2:	6020      	str	r0, [r4, #0]
 8008ff4:	e7b5      	b.n	8008f62 <__hexnan+0x7a>
 8008ff6:	2508      	movs	r5, #8
 8008ff8:	e7b3      	b.n	8008f62 <__hexnan+0x7a>
 8008ffa:	9b01      	ldr	r3, [sp, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0dd      	beq.n	8008fbc <__hexnan+0xd4>
 8009000:	f1c3 0320 	rsb	r3, r3, #32
 8009004:	f04f 32ff 	mov.w	r2, #4294967295
 8009008:	40da      	lsrs	r2, r3
 800900a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800900e:	4013      	ands	r3, r2
 8009010:	f846 3c04 	str.w	r3, [r6, #-4]
 8009014:	e7d2      	b.n	8008fbc <__hexnan+0xd4>
 8009016:	3f04      	subs	r7, #4
 8009018:	e7d0      	b.n	8008fbc <__hexnan+0xd4>
 800901a:	2004      	movs	r0, #4
 800901c:	e7d5      	b.n	8008fca <__hexnan+0xe2>
	...

08009020 <malloc>:
 8009020:	4b02      	ldr	r3, [pc, #8]	@ (800902c <malloc+0xc>)
 8009022:	4601      	mov	r1, r0
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	f000 b825 	b.w	8009074 <_malloc_r>
 800902a:	bf00      	nop
 800902c:	200001d4 	.word	0x200001d4

08009030 <sbrk_aligned>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	4e0f      	ldr	r6, [pc, #60]	@ (8009070 <sbrk_aligned+0x40>)
 8009034:	460c      	mov	r4, r1
 8009036:	6831      	ldr	r1, [r6, #0]
 8009038:	4605      	mov	r5, r0
 800903a:	b911      	cbnz	r1, 8009042 <sbrk_aligned+0x12>
 800903c:	f001 fbb0 	bl	800a7a0 <_sbrk_r>
 8009040:	6030      	str	r0, [r6, #0]
 8009042:	4621      	mov	r1, r4
 8009044:	4628      	mov	r0, r5
 8009046:	f001 fbab 	bl	800a7a0 <_sbrk_r>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	d103      	bne.n	8009056 <sbrk_aligned+0x26>
 800904e:	f04f 34ff 	mov.w	r4, #4294967295
 8009052:	4620      	mov	r0, r4
 8009054:	bd70      	pop	{r4, r5, r6, pc}
 8009056:	1cc4      	adds	r4, r0, #3
 8009058:	f024 0403 	bic.w	r4, r4, #3
 800905c:	42a0      	cmp	r0, r4
 800905e:	d0f8      	beq.n	8009052 <sbrk_aligned+0x22>
 8009060:	1a21      	subs	r1, r4, r0
 8009062:	4628      	mov	r0, r5
 8009064:	f001 fb9c 	bl	800a7a0 <_sbrk_r>
 8009068:	3001      	adds	r0, #1
 800906a:	d1f2      	bne.n	8009052 <sbrk_aligned+0x22>
 800906c:	e7ef      	b.n	800904e <sbrk_aligned+0x1e>
 800906e:	bf00      	nop
 8009070:	20000974 	.word	0x20000974

08009074 <_malloc_r>:
 8009074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009078:	1ccd      	adds	r5, r1, #3
 800907a:	f025 0503 	bic.w	r5, r5, #3
 800907e:	3508      	adds	r5, #8
 8009080:	2d0c      	cmp	r5, #12
 8009082:	bf38      	it	cc
 8009084:	250c      	movcc	r5, #12
 8009086:	2d00      	cmp	r5, #0
 8009088:	4606      	mov	r6, r0
 800908a:	db01      	blt.n	8009090 <_malloc_r+0x1c>
 800908c:	42a9      	cmp	r1, r5
 800908e:	d904      	bls.n	800909a <_malloc_r+0x26>
 8009090:	230c      	movs	r3, #12
 8009092:	6033      	str	r3, [r6, #0]
 8009094:	2000      	movs	r0, #0
 8009096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009170 <_malloc_r+0xfc>
 800909e:	f000 f87b 	bl	8009198 <__malloc_lock>
 80090a2:	f8d8 3000 	ldr.w	r3, [r8]
 80090a6:	461c      	mov	r4, r3
 80090a8:	bb44      	cbnz	r4, 80090fc <_malloc_r+0x88>
 80090aa:	4629      	mov	r1, r5
 80090ac:	4630      	mov	r0, r6
 80090ae:	f7ff ffbf 	bl	8009030 <sbrk_aligned>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	4604      	mov	r4, r0
 80090b6:	d158      	bne.n	800916a <_malloc_r+0xf6>
 80090b8:	f8d8 4000 	ldr.w	r4, [r8]
 80090bc:	4627      	mov	r7, r4
 80090be:	2f00      	cmp	r7, #0
 80090c0:	d143      	bne.n	800914a <_malloc_r+0xd6>
 80090c2:	2c00      	cmp	r4, #0
 80090c4:	d04b      	beq.n	800915e <_malloc_r+0xea>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	4639      	mov	r1, r7
 80090ca:	4630      	mov	r0, r6
 80090cc:	eb04 0903 	add.w	r9, r4, r3
 80090d0:	f001 fb66 	bl	800a7a0 <_sbrk_r>
 80090d4:	4581      	cmp	r9, r0
 80090d6:	d142      	bne.n	800915e <_malloc_r+0xea>
 80090d8:	6821      	ldr	r1, [r4, #0]
 80090da:	1a6d      	subs	r5, r5, r1
 80090dc:	4629      	mov	r1, r5
 80090de:	4630      	mov	r0, r6
 80090e0:	f7ff ffa6 	bl	8009030 <sbrk_aligned>
 80090e4:	3001      	adds	r0, #1
 80090e6:	d03a      	beq.n	800915e <_malloc_r+0xea>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	442b      	add	r3, r5
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	f8d8 3000 	ldr.w	r3, [r8]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	bb62      	cbnz	r2, 8009150 <_malloc_r+0xdc>
 80090f6:	f8c8 7000 	str.w	r7, [r8]
 80090fa:	e00f      	b.n	800911c <_malloc_r+0xa8>
 80090fc:	6822      	ldr	r2, [r4, #0]
 80090fe:	1b52      	subs	r2, r2, r5
 8009100:	d420      	bmi.n	8009144 <_malloc_r+0xd0>
 8009102:	2a0b      	cmp	r2, #11
 8009104:	d917      	bls.n	8009136 <_malloc_r+0xc2>
 8009106:	1961      	adds	r1, r4, r5
 8009108:	42a3      	cmp	r3, r4
 800910a:	6025      	str	r5, [r4, #0]
 800910c:	bf18      	it	ne
 800910e:	6059      	strne	r1, [r3, #4]
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	bf08      	it	eq
 8009114:	f8c8 1000 	streq.w	r1, [r8]
 8009118:	5162      	str	r2, [r4, r5]
 800911a:	604b      	str	r3, [r1, #4]
 800911c:	4630      	mov	r0, r6
 800911e:	f000 f841 	bl	80091a4 <__malloc_unlock>
 8009122:	f104 000b 	add.w	r0, r4, #11
 8009126:	1d23      	adds	r3, r4, #4
 8009128:	f020 0007 	bic.w	r0, r0, #7
 800912c:	1ac2      	subs	r2, r0, r3
 800912e:	bf1c      	itt	ne
 8009130:	1a1b      	subne	r3, r3, r0
 8009132:	50a3      	strne	r3, [r4, r2]
 8009134:	e7af      	b.n	8009096 <_malloc_r+0x22>
 8009136:	6862      	ldr	r2, [r4, #4]
 8009138:	42a3      	cmp	r3, r4
 800913a:	bf0c      	ite	eq
 800913c:	f8c8 2000 	streq.w	r2, [r8]
 8009140:	605a      	strne	r2, [r3, #4]
 8009142:	e7eb      	b.n	800911c <_malloc_r+0xa8>
 8009144:	4623      	mov	r3, r4
 8009146:	6864      	ldr	r4, [r4, #4]
 8009148:	e7ae      	b.n	80090a8 <_malloc_r+0x34>
 800914a:	463c      	mov	r4, r7
 800914c:	687f      	ldr	r7, [r7, #4]
 800914e:	e7b6      	b.n	80090be <_malloc_r+0x4a>
 8009150:	461a      	mov	r2, r3
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	42a3      	cmp	r3, r4
 8009156:	d1fb      	bne.n	8009150 <_malloc_r+0xdc>
 8009158:	2300      	movs	r3, #0
 800915a:	6053      	str	r3, [r2, #4]
 800915c:	e7de      	b.n	800911c <_malloc_r+0xa8>
 800915e:	230c      	movs	r3, #12
 8009160:	6033      	str	r3, [r6, #0]
 8009162:	4630      	mov	r0, r6
 8009164:	f000 f81e 	bl	80091a4 <__malloc_unlock>
 8009168:	e794      	b.n	8009094 <_malloc_r+0x20>
 800916a:	6005      	str	r5, [r0, #0]
 800916c:	e7d6      	b.n	800911c <_malloc_r+0xa8>
 800916e:	bf00      	nop
 8009170:	20000978 	.word	0x20000978

08009174 <__ascii_mbtowc>:
 8009174:	b082      	sub	sp, #8
 8009176:	b901      	cbnz	r1, 800917a <__ascii_mbtowc+0x6>
 8009178:	a901      	add	r1, sp, #4
 800917a:	b142      	cbz	r2, 800918e <__ascii_mbtowc+0x1a>
 800917c:	b14b      	cbz	r3, 8009192 <__ascii_mbtowc+0x1e>
 800917e:	7813      	ldrb	r3, [r2, #0]
 8009180:	600b      	str	r3, [r1, #0]
 8009182:	7812      	ldrb	r2, [r2, #0]
 8009184:	1e10      	subs	r0, r2, #0
 8009186:	bf18      	it	ne
 8009188:	2001      	movne	r0, #1
 800918a:	b002      	add	sp, #8
 800918c:	4770      	bx	lr
 800918e:	4610      	mov	r0, r2
 8009190:	e7fb      	b.n	800918a <__ascii_mbtowc+0x16>
 8009192:	f06f 0001 	mvn.w	r0, #1
 8009196:	e7f8      	b.n	800918a <__ascii_mbtowc+0x16>

08009198 <__malloc_lock>:
 8009198:	4801      	ldr	r0, [pc, #4]	@ (80091a0 <__malloc_lock+0x8>)
 800919a:	f7fe bd34 	b.w	8007c06 <__retarget_lock_acquire_recursive>
 800919e:	bf00      	nop
 80091a0:	20000970 	.word	0x20000970

080091a4 <__malloc_unlock>:
 80091a4:	4801      	ldr	r0, [pc, #4]	@ (80091ac <__malloc_unlock+0x8>)
 80091a6:	f7fe bd2f 	b.w	8007c08 <__retarget_lock_release_recursive>
 80091aa:	bf00      	nop
 80091ac:	20000970 	.word	0x20000970

080091b0 <_Balloc>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	69c6      	ldr	r6, [r0, #28]
 80091b4:	4604      	mov	r4, r0
 80091b6:	460d      	mov	r5, r1
 80091b8:	b976      	cbnz	r6, 80091d8 <_Balloc+0x28>
 80091ba:	2010      	movs	r0, #16
 80091bc:	f7ff ff30 	bl	8009020 <malloc>
 80091c0:	4602      	mov	r2, r0
 80091c2:	61e0      	str	r0, [r4, #28]
 80091c4:	b920      	cbnz	r0, 80091d0 <_Balloc+0x20>
 80091c6:	4b18      	ldr	r3, [pc, #96]	@ (8009228 <_Balloc+0x78>)
 80091c8:	4818      	ldr	r0, [pc, #96]	@ (800922c <_Balloc+0x7c>)
 80091ca:	216b      	movs	r1, #107	@ 0x6b
 80091cc:	f7fe fd3a 	bl	8007c44 <__assert_func>
 80091d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091d4:	6006      	str	r6, [r0, #0]
 80091d6:	60c6      	str	r6, [r0, #12]
 80091d8:	69e6      	ldr	r6, [r4, #28]
 80091da:	68f3      	ldr	r3, [r6, #12]
 80091dc:	b183      	cbz	r3, 8009200 <_Balloc+0x50>
 80091de:	69e3      	ldr	r3, [r4, #28]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091e6:	b9b8      	cbnz	r0, 8009218 <_Balloc+0x68>
 80091e8:	2101      	movs	r1, #1
 80091ea:	fa01 f605 	lsl.w	r6, r1, r5
 80091ee:	1d72      	adds	r2, r6, #5
 80091f0:	0092      	lsls	r2, r2, #2
 80091f2:	4620      	mov	r0, r4
 80091f4:	f001 faeb 	bl	800a7ce <_calloc_r>
 80091f8:	b160      	cbz	r0, 8009214 <_Balloc+0x64>
 80091fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091fe:	e00e      	b.n	800921e <_Balloc+0x6e>
 8009200:	2221      	movs	r2, #33	@ 0x21
 8009202:	2104      	movs	r1, #4
 8009204:	4620      	mov	r0, r4
 8009206:	f001 fae2 	bl	800a7ce <_calloc_r>
 800920a:	69e3      	ldr	r3, [r4, #28]
 800920c:	60f0      	str	r0, [r6, #12]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e4      	bne.n	80091de <_Balloc+0x2e>
 8009214:	2000      	movs	r0, #0
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	6802      	ldr	r2, [r0, #0]
 800921a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800921e:	2300      	movs	r3, #0
 8009220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009224:	e7f7      	b.n	8009216 <_Balloc+0x66>
 8009226:	bf00      	nop
 8009228:	0800cc3f 	.word	0x0800cc3f
 800922c:	0800cdca 	.word	0x0800cdca

08009230 <_Bfree>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	69c6      	ldr	r6, [r0, #28]
 8009234:	4605      	mov	r5, r0
 8009236:	460c      	mov	r4, r1
 8009238:	b976      	cbnz	r6, 8009258 <_Bfree+0x28>
 800923a:	2010      	movs	r0, #16
 800923c:	f7ff fef0 	bl	8009020 <malloc>
 8009240:	4602      	mov	r2, r0
 8009242:	61e8      	str	r0, [r5, #28]
 8009244:	b920      	cbnz	r0, 8009250 <_Bfree+0x20>
 8009246:	4b09      	ldr	r3, [pc, #36]	@ (800926c <_Bfree+0x3c>)
 8009248:	4809      	ldr	r0, [pc, #36]	@ (8009270 <_Bfree+0x40>)
 800924a:	218f      	movs	r1, #143	@ 0x8f
 800924c:	f7fe fcfa 	bl	8007c44 <__assert_func>
 8009250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009254:	6006      	str	r6, [r0, #0]
 8009256:	60c6      	str	r6, [r0, #12]
 8009258:	b13c      	cbz	r4, 800926a <_Bfree+0x3a>
 800925a:	69eb      	ldr	r3, [r5, #28]
 800925c:	6862      	ldr	r2, [r4, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009264:	6021      	str	r1, [r4, #0]
 8009266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	0800cc3f 	.word	0x0800cc3f
 8009270:	0800cdca 	.word	0x0800cdca

08009274 <__multadd>:
 8009274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009278:	690d      	ldr	r5, [r1, #16]
 800927a:	4607      	mov	r7, r0
 800927c:	460c      	mov	r4, r1
 800927e:	461e      	mov	r6, r3
 8009280:	f101 0c14 	add.w	ip, r1, #20
 8009284:	2000      	movs	r0, #0
 8009286:	f8dc 3000 	ldr.w	r3, [ip]
 800928a:	b299      	uxth	r1, r3
 800928c:	fb02 6101 	mla	r1, r2, r1, r6
 8009290:	0c1e      	lsrs	r6, r3, #16
 8009292:	0c0b      	lsrs	r3, r1, #16
 8009294:	fb02 3306 	mla	r3, r2, r6, r3
 8009298:	b289      	uxth	r1, r1
 800929a:	3001      	adds	r0, #1
 800929c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092a0:	4285      	cmp	r5, r0
 80092a2:	f84c 1b04 	str.w	r1, [ip], #4
 80092a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092aa:	dcec      	bgt.n	8009286 <__multadd+0x12>
 80092ac:	b30e      	cbz	r6, 80092f2 <__multadd+0x7e>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	42ab      	cmp	r3, r5
 80092b2:	dc19      	bgt.n	80092e8 <__multadd+0x74>
 80092b4:	6861      	ldr	r1, [r4, #4]
 80092b6:	4638      	mov	r0, r7
 80092b8:	3101      	adds	r1, #1
 80092ba:	f7ff ff79 	bl	80091b0 <_Balloc>
 80092be:	4680      	mov	r8, r0
 80092c0:	b928      	cbnz	r0, 80092ce <__multadd+0x5a>
 80092c2:	4602      	mov	r2, r0
 80092c4:	4b0c      	ldr	r3, [pc, #48]	@ (80092f8 <__multadd+0x84>)
 80092c6:	480d      	ldr	r0, [pc, #52]	@ (80092fc <__multadd+0x88>)
 80092c8:	21ba      	movs	r1, #186	@ 0xba
 80092ca:	f7fe fcbb 	bl	8007c44 <__assert_func>
 80092ce:	6922      	ldr	r2, [r4, #16]
 80092d0:	3202      	adds	r2, #2
 80092d2:	f104 010c 	add.w	r1, r4, #12
 80092d6:	0092      	lsls	r2, r2, #2
 80092d8:	300c      	adds	r0, #12
 80092da:	f7fe fc96 	bl	8007c0a <memcpy>
 80092de:	4621      	mov	r1, r4
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7ff ffa5 	bl	8009230 <_Bfree>
 80092e6:	4644      	mov	r4, r8
 80092e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092ec:	3501      	adds	r5, #1
 80092ee:	615e      	str	r6, [r3, #20]
 80092f0:	6125      	str	r5, [r4, #16]
 80092f2:	4620      	mov	r0, r4
 80092f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f8:	0800cd59 	.word	0x0800cd59
 80092fc:	0800cdca 	.word	0x0800cdca

08009300 <__s2b>:
 8009300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009304:	460c      	mov	r4, r1
 8009306:	4615      	mov	r5, r2
 8009308:	461f      	mov	r7, r3
 800930a:	2209      	movs	r2, #9
 800930c:	3308      	adds	r3, #8
 800930e:	4606      	mov	r6, r0
 8009310:	fb93 f3f2 	sdiv	r3, r3, r2
 8009314:	2100      	movs	r1, #0
 8009316:	2201      	movs	r2, #1
 8009318:	429a      	cmp	r2, r3
 800931a:	db09      	blt.n	8009330 <__s2b+0x30>
 800931c:	4630      	mov	r0, r6
 800931e:	f7ff ff47 	bl	80091b0 <_Balloc>
 8009322:	b940      	cbnz	r0, 8009336 <__s2b+0x36>
 8009324:	4602      	mov	r2, r0
 8009326:	4b19      	ldr	r3, [pc, #100]	@ (800938c <__s2b+0x8c>)
 8009328:	4819      	ldr	r0, [pc, #100]	@ (8009390 <__s2b+0x90>)
 800932a:	21d3      	movs	r1, #211	@ 0xd3
 800932c:	f7fe fc8a 	bl	8007c44 <__assert_func>
 8009330:	0052      	lsls	r2, r2, #1
 8009332:	3101      	adds	r1, #1
 8009334:	e7f0      	b.n	8009318 <__s2b+0x18>
 8009336:	9b08      	ldr	r3, [sp, #32]
 8009338:	6143      	str	r3, [r0, #20]
 800933a:	2d09      	cmp	r5, #9
 800933c:	f04f 0301 	mov.w	r3, #1
 8009340:	6103      	str	r3, [r0, #16]
 8009342:	dd16      	ble.n	8009372 <__s2b+0x72>
 8009344:	f104 0909 	add.w	r9, r4, #9
 8009348:	46c8      	mov	r8, r9
 800934a:	442c      	add	r4, r5
 800934c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009350:	4601      	mov	r1, r0
 8009352:	3b30      	subs	r3, #48	@ 0x30
 8009354:	220a      	movs	r2, #10
 8009356:	4630      	mov	r0, r6
 8009358:	f7ff ff8c 	bl	8009274 <__multadd>
 800935c:	45a0      	cmp	r8, r4
 800935e:	d1f5      	bne.n	800934c <__s2b+0x4c>
 8009360:	f1a5 0408 	sub.w	r4, r5, #8
 8009364:	444c      	add	r4, r9
 8009366:	1b2d      	subs	r5, r5, r4
 8009368:	1963      	adds	r3, r4, r5
 800936a:	42bb      	cmp	r3, r7
 800936c:	db04      	blt.n	8009378 <__s2b+0x78>
 800936e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009372:	340a      	adds	r4, #10
 8009374:	2509      	movs	r5, #9
 8009376:	e7f6      	b.n	8009366 <__s2b+0x66>
 8009378:	f814 3b01 	ldrb.w	r3, [r4], #1
 800937c:	4601      	mov	r1, r0
 800937e:	3b30      	subs	r3, #48	@ 0x30
 8009380:	220a      	movs	r2, #10
 8009382:	4630      	mov	r0, r6
 8009384:	f7ff ff76 	bl	8009274 <__multadd>
 8009388:	e7ee      	b.n	8009368 <__s2b+0x68>
 800938a:	bf00      	nop
 800938c:	0800cd59 	.word	0x0800cd59
 8009390:	0800cdca 	.word	0x0800cdca

08009394 <__hi0bits>:
 8009394:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009398:	4603      	mov	r3, r0
 800939a:	bf36      	itet	cc
 800939c:	0403      	lslcc	r3, r0, #16
 800939e:	2000      	movcs	r0, #0
 80093a0:	2010      	movcc	r0, #16
 80093a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093a6:	bf3c      	itt	cc
 80093a8:	021b      	lslcc	r3, r3, #8
 80093aa:	3008      	addcc	r0, #8
 80093ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093b0:	bf3c      	itt	cc
 80093b2:	011b      	lslcc	r3, r3, #4
 80093b4:	3004      	addcc	r0, #4
 80093b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ba:	bf3c      	itt	cc
 80093bc:	009b      	lslcc	r3, r3, #2
 80093be:	3002      	addcc	r0, #2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db05      	blt.n	80093d0 <__hi0bits+0x3c>
 80093c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093c8:	f100 0001 	add.w	r0, r0, #1
 80093cc:	bf08      	it	eq
 80093ce:	2020      	moveq	r0, #32
 80093d0:	4770      	bx	lr

080093d2 <__lo0bits>:
 80093d2:	6803      	ldr	r3, [r0, #0]
 80093d4:	4602      	mov	r2, r0
 80093d6:	f013 0007 	ands.w	r0, r3, #7
 80093da:	d00b      	beq.n	80093f4 <__lo0bits+0x22>
 80093dc:	07d9      	lsls	r1, r3, #31
 80093de:	d421      	bmi.n	8009424 <__lo0bits+0x52>
 80093e0:	0798      	lsls	r0, r3, #30
 80093e2:	bf49      	itett	mi
 80093e4:	085b      	lsrmi	r3, r3, #1
 80093e6:	089b      	lsrpl	r3, r3, #2
 80093e8:	2001      	movmi	r0, #1
 80093ea:	6013      	strmi	r3, [r2, #0]
 80093ec:	bf5c      	itt	pl
 80093ee:	6013      	strpl	r3, [r2, #0]
 80093f0:	2002      	movpl	r0, #2
 80093f2:	4770      	bx	lr
 80093f4:	b299      	uxth	r1, r3
 80093f6:	b909      	cbnz	r1, 80093fc <__lo0bits+0x2a>
 80093f8:	0c1b      	lsrs	r3, r3, #16
 80093fa:	2010      	movs	r0, #16
 80093fc:	b2d9      	uxtb	r1, r3
 80093fe:	b909      	cbnz	r1, 8009404 <__lo0bits+0x32>
 8009400:	3008      	adds	r0, #8
 8009402:	0a1b      	lsrs	r3, r3, #8
 8009404:	0719      	lsls	r1, r3, #28
 8009406:	bf04      	itt	eq
 8009408:	091b      	lsreq	r3, r3, #4
 800940a:	3004      	addeq	r0, #4
 800940c:	0799      	lsls	r1, r3, #30
 800940e:	bf04      	itt	eq
 8009410:	089b      	lsreq	r3, r3, #2
 8009412:	3002      	addeq	r0, #2
 8009414:	07d9      	lsls	r1, r3, #31
 8009416:	d403      	bmi.n	8009420 <__lo0bits+0x4e>
 8009418:	085b      	lsrs	r3, r3, #1
 800941a:	f100 0001 	add.w	r0, r0, #1
 800941e:	d003      	beq.n	8009428 <__lo0bits+0x56>
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	4770      	bx	lr
 8009424:	2000      	movs	r0, #0
 8009426:	4770      	bx	lr
 8009428:	2020      	movs	r0, #32
 800942a:	4770      	bx	lr

0800942c <__i2b>:
 800942c:	b510      	push	{r4, lr}
 800942e:	460c      	mov	r4, r1
 8009430:	2101      	movs	r1, #1
 8009432:	f7ff febd 	bl	80091b0 <_Balloc>
 8009436:	4602      	mov	r2, r0
 8009438:	b928      	cbnz	r0, 8009446 <__i2b+0x1a>
 800943a:	4b05      	ldr	r3, [pc, #20]	@ (8009450 <__i2b+0x24>)
 800943c:	4805      	ldr	r0, [pc, #20]	@ (8009454 <__i2b+0x28>)
 800943e:	f240 1145 	movw	r1, #325	@ 0x145
 8009442:	f7fe fbff 	bl	8007c44 <__assert_func>
 8009446:	2301      	movs	r3, #1
 8009448:	6144      	str	r4, [r0, #20]
 800944a:	6103      	str	r3, [r0, #16]
 800944c:	bd10      	pop	{r4, pc}
 800944e:	bf00      	nop
 8009450:	0800cd59 	.word	0x0800cd59
 8009454:	0800cdca 	.word	0x0800cdca

08009458 <__multiply>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	4614      	mov	r4, r2
 800945e:	690a      	ldr	r2, [r1, #16]
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	429a      	cmp	r2, r3
 8009464:	bfa8      	it	ge
 8009466:	4623      	movge	r3, r4
 8009468:	460f      	mov	r7, r1
 800946a:	bfa4      	itt	ge
 800946c:	460c      	movge	r4, r1
 800946e:	461f      	movge	r7, r3
 8009470:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009474:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009478:	68a3      	ldr	r3, [r4, #8]
 800947a:	6861      	ldr	r1, [r4, #4]
 800947c:	eb0a 0609 	add.w	r6, sl, r9
 8009480:	42b3      	cmp	r3, r6
 8009482:	b085      	sub	sp, #20
 8009484:	bfb8      	it	lt
 8009486:	3101      	addlt	r1, #1
 8009488:	f7ff fe92 	bl	80091b0 <_Balloc>
 800948c:	b930      	cbnz	r0, 800949c <__multiply+0x44>
 800948e:	4602      	mov	r2, r0
 8009490:	4b44      	ldr	r3, [pc, #272]	@ (80095a4 <__multiply+0x14c>)
 8009492:	4845      	ldr	r0, [pc, #276]	@ (80095a8 <__multiply+0x150>)
 8009494:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009498:	f7fe fbd4 	bl	8007c44 <__assert_func>
 800949c:	f100 0514 	add.w	r5, r0, #20
 80094a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094a4:	462b      	mov	r3, r5
 80094a6:	2200      	movs	r2, #0
 80094a8:	4543      	cmp	r3, r8
 80094aa:	d321      	bcc.n	80094f0 <__multiply+0x98>
 80094ac:	f107 0114 	add.w	r1, r7, #20
 80094b0:	f104 0214 	add.w	r2, r4, #20
 80094b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80094b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80094bc:	9302      	str	r3, [sp, #8]
 80094be:	1b13      	subs	r3, r2, r4
 80094c0:	3b15      	subs	r3, #21
 80094c2:	f023 0303 	bic.w	r3, r3, #3
 80094c6:	3304      	adds	r3, #4
 80094c8:	f104 0715 	add.w	r7, r4, #21
 80094cc:	42ba      	cmp	r2, r7
 80094ce:	bf38      	it	cc
 80094d0:	2304      	movcc	r3, #4
 80094d2:	9301      	str	r3, [sp, #4]
 80094d4:	9b02      	ldr	r3, [sp, #8]
 80094d6:	9103      	str	r1, [sp, #12]
 80094d8:	428b      	cmp	r3, r1
 80094da:	d80c      	bhi.n	80094f6 <__multiply+0x9e>
 80094dc:	2e00      	cmp	r6, #0
 80094de:	dd03      	ble.n	80094e8 <__multiply+0x90>
 80094e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d05b      	beq.n	80095a0 <__multiply+0x148>
 80094e8:	6106      	str	r6, [r0, #16]
 80094ea:	b005      	add	sp, #20
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f0:	f843 2b04 	str.w	r2, [r3], #4
 80094f4:	e7d8      	b.n	80094a8 <__multiply+0x50>
 80094f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80094fa:	f1ba 0f00 	cmp.w	sl, #0
 80094fe:	d024      	beq.n	800954a <__multiply+0xf2>
 8009500:	f104 0e14 	add.w	lr, r4, #20
 8009504:	46a9      	mov	r9, r5
 8009506:	f04f 0c00 	mov.w	ip, #0
 800950a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800950e:	f8d9 3000 	ldr.w	r3, [r9]
 8009512:	fa1f fb87 	uxth.w	fp, r7
 8009516:	b29b      	uxth	r3, r3
 8009518:	fb0a 330b 	mla	r3, sl, fp, r3
 800951c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009520:	f8d9 7000 	ldr.w	r7, [r9]
 8009524:	4463      	add	r3, ip
 8009526:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800952a:	fb0a c70b 	mla	r7, sl, fp, ip
 800952e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009532:	b29b      	uxth	r3, r3
 8009534:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009538:	4572      	cmp	r2, lr
 800953a:	f849 3b04 	str.w	r3, [r9], #4
 800953e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009542:	d8e2      	bhi.n	800950a <__multiply+0xb2>
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	f845 c003 	str.w	ip, [r5, r3]
 800954a:	9b03      	ldr	r3, [sp, #12]
 800954c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009550:	3104      	adds	r1, #4
 8009552:	f1b9 0f00 	cmp.w	r9, #0
 8009556:	d021      	beq.n	800959c <__multiply+0x144>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	f104 0c14 	add.w	ip, r4, #20
 800955e:	46ae      	mov	lr, r5
 8009560:	f04f 0a00 	mov.w	sl, #0
 8009564:	f8bc b000 	ldrh.w	fp, [ip]
 8009568:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800956c:	fb09 770b 	mla	r7, r9, fp, r7
 8009570:	4457      	add	r7, sl
 8009572:	b29b      	uxth	r3, r3
 8009574:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009578:	f84e 3b04 	str.w	r3, [lr], #4
 800957c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009580:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009584:	f8be 3000 	ldrh.w	r3, [lr]
 8009588:	fb09 330a 	mla	r3, r9, sl, r3
 800958c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009590:	4562      	cmp	r2, ip
 8009592:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009596:	d8e5      	bhi.n	8009564 <__multiply+0x10c>
 8009598:	9f01      	ldr	r7, [sp, #4]
 800959a:	51eb      	str	r3, [r5, r7]
 800959c:	3504      	adds	r5, #4
 800959e:	e799      	b.n	80094d4 <__multiply+0x7c>
 80095a0:	3e01      	subs	r6, #1
 80095a2:	e79b      	b.n	80094dc <__multiply+0x84>
 80095a4:	0800cd59 	.word	0x0800cd59
 80095a8:	0800cdca 	.word	0x0800cdca

080095ac <__pow5mult>:
 80095ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b0:	4615      	mov	r5, r2
 80095b2:	f012 0203 	ands.w	r2, r2, #3
 80095b6:	4607      	mov	r7, r0
 80095b8:	460e      	mov	r6, r1
 80095ba:	d007      	beq.n	80095cc <__pow5mult+0x20>
 80095bc:	4c25      	ldr	r4, [pc, #148]	@ (8009654 <__pow5mult+0xa8>)
 80095be:	3a01      	subs	r2, #1
 80095c0:	2300      	movs	r3, #0
 80095c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095c6:	f7ff fe55 	bl	8009274 <__multadd>
 80095ca:	4606      	mov	r6, r0
 80095cc:	10ad      	asrs	r5, r5, #2
 80095ce:	d03d      	beq.n	800964c <__pow5mult+0xa0>
 80095d0:	69fc      	ldr	r4, [r7, #28]
 80095d2:	b97c      	cbnz	r4, 80095f4 <__pow5mult+0x48>
 80095d4:	2010      	movs	r0, #16
 80095d6:	f7ff fd23 	bl	8009020 <malloc>
 80095da:	4602      	mov	r2, r0
 80095dc:	61f8      	str	r0, [r7, #28]
 80095de:	b928      	cbnz	r0, 80095ec <__pow5mult+0x40>
 80095e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009658 <__pow5mult+0xac>)
 80095e2:	481e      	ldr	r0, [pc, #120]	@ (800965c <__pow5mult+0xb0>)
 80095e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095e8:	f7fe fb2c 	bl	8007c44 <__assert_func>
 80095ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095f0:	6004      	str	r4, [r0, #0]
 80095f2:	60c4      	str	r4, [r0, #12]
 80095f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80095f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095fc:	b94c      	cbnz	r4, 8009612 <__pow5mult+0x66>
 80095fe:	f240 2171 	movw	r1, #625	@ 0x271
 8009602:	4638      	mov	r0, r7
 8009604:	f7ff ff12 	bl	800942c <__i2b>
 8009608:	2300      	movs	r3, #0
 800960a:	f8c8 0008 	str.w	r0, [r8, #8]
 800960e:	4604      	mov	r4, r0
 8009610:	6003      	str	r3, [r0, #0]
 8009612:	f04f 0900 	mov.w	r9, #0
 8009616:	07eb      	lsls	r3, r5, #31
 8009618:	d50a      	bpl.n	8009630 <__pow5mult+0x84>
 800961a:	4631      	mov	r1, r6
 800961c:	4622      	mov	r2, r4
 800961e:	4638      	mov	r0, r7
 8009620:	f7ff ff1a 	bl	8009458 <__multiply>
 8009624:	4631      	mov	r1, r6
 8009626:	4680      	mov	r8, r0
 8009628:	4638      	mov	r0, r7
 800962a:	f7ff fe01 	bl	8009230 <_Bfree>
 800962e:	4646      	mov	r6, r8
 8009630:	106d      	asrs	r5, r5, #1
 8009632:	d00b      	beq.n	800964c <__pow5mult+0xa0>
 8009634:	6820      	ldr	r0, [r4, #0]
 8009636:	b938      	cbnz	r0, 8009648 <__pow5mult+0x9c>
 8009638:	4622      	mov	r2, r4
 800963a:	4621      	mov	r1, r4
 800963c:	4638      	mov	r0, r7
 800963e:	f7ff ff0b 	bl	8009458 <__multiply>
 8009642:	6020      	str	r0, [r4, #0]
 8009644:	f8c0 9000 	str.w	r9, [r0]
 8009648:	4604      	mov	r4, r0
 800964a:	e7e4      	b.n	8009616 <__pow5mult+0x6a>
 800964c:	4630      	mov	r0, r6
 800964e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009652:	bf00      	nop
 8009654:	0800ce24 	.word	0x0800ce24
 8009658:	0800cc3f 	.word	0x0800cc3f
 800965c:	0800cdca 	.word	0x0800cdca

08009660 <__lshift>:
 8009660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009664:	460c      	mov	r4, r1
 8009666:	6849      	ldr	r1, [r1, #4]
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800966e:	68a3      	ldr	r3, [r4, #8]
 8009670:	4607      	mov	r7, r0
 8009672:	4691      	mov	r9, r2
 8009674:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009678:	f108 0601 	add.w	r6, r8, #1
 800967c:	42b3      	cmp	r3, r6
 800967e:	db0b      	blt.n	8009698 <__lshift+0x38>
 8009680:	4638      	mov	r0, r7
 8009682:	f7ff fd95 	bl	80091b0 <_Balloc>
 8009686:	4605      	mov	r5, r0
 8009688:	b948      	cbnz	r0, 800969e <__lshift+0x3e>
 800968a:	4602      	mov	r2, r0
 800968c:	4b28      	ldr	r3, [pc, #160]	@ (8009730 <__lshift+0xd0>)
 800968e:	4829      	ldr	r0, [pc, #164]	@ (8009734 <__lshift+0xd4>)
 8009690:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009694:	f7fe fad6 	bl	8007c44 <__assert_func>
 8009698:	3101      	adds	r1, #1
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	e7ee      	b.n	800967c <__lshift+0x1c>
 800969e:	2300      	movs	r3, #0
 80096a0:	f100 0114 	add.w	r1, r0, #20
 80096a4:	f100 0210 	add.w	r2, r0, #16
 80096a8:	4618      	mov	r0, r3
 80096aa:	4553      	cmp	r3, sl
 80096ac:	db33      	blt.n	8009716 <__lshift+0xb6>
 80096ae:	6920      	ldr	r0, [r4, #16]
 80096b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096b4:	f104 0314 	add.w	r3, r4, #20
 80096b8:	f019 091f 	ands.w	r9, r9, #31
 80096bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096c4:	d02b      	beq.n	800971e <__lshift+0xbe>
 80096c6:	f1c9 0e20 	rsb	lr, r9, #32
 80096ca:	468a      	mov	sl, r1
 80096cc:	2200      	movs	r2, #0
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	fa00 f009 	lsl.w	r0, r0, r9
 80096d4:	4310      	orrs	r0, r2
 80096d6:	f84a 0b04 	str.w	r0, [sl], #4
 80096da:	f853 2b04 	ldr.w	r2, [r3], #4
 80096de:	459c      	cmp	ip, r3
 80096e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80096e4:	d8f3      	bhi.n	80096ce <__lshift+0x6e>
 80096e6:	ebac 0304 	sub.w	r3, ip, r4
 80096ea:	3b15      	subs	r3, #21
 80096ec:	f023 0303 	bic.w	r3, r3, #3
 80096f0:	3304      	adds	r3, #4
 80096f2:	f104 0015 	add.w	r0, r4, #21
 80096f6:	4584      	cmp	ip, r0
 80096f8:	bf38      	it	cc
 80096fa:	2304      	movcc	r3, #4
 80096fc:	50ca      	str	r2, [r1, r3]
 80096fe:	b10a      	cbz	r2, 8009704 <__lshift+0xa4>
 8009700:	f108 0602 	add.w	r6, r8, #2
 8009704:	3e01      	subs	r6, #1
 8009706:	4638      	mov	r0, r7
 8009708:	612e      	str	r6, [r5, #16]
 800970a:	4621      	mov	r1, r4
 800970c:	f7ff fd90 	bl	8009230 <_Bfree>
 8009710:	4628      	mov	r0, r5
 8009712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009716:	f842 0f04 	str.w	r0, [r2, #4]!
 800971a:	3301      	adds	r3, #1
 800971c:	e7c5      	b.n	80096aa <__lshift+0x4a>
 800971e:	3904      	subs	r1, #4
 8009720:	f853 2b04 	ldr.w	r2, [r3], #4
 8009724:	f841 2f04 	str.w	r2, [r1, #4]!
 8009728:	459c      	cmp	ip, r3
 800972a:	d8f9      	bhi.n	8009720 <__lshift+0xc0>
 800972c:	e7ea      	b.n	8009704 <__lshift+0xa4>
 800972e:	bf00      	nop
 8009730:	0800cd59 	.word	0x0800cd59
 8009734:	0800cdca 	.word	0x0800cdca

08009738 <__mcmp>:
 8009738:	690a      	ldr	r2, [r1, #16]
 800973a:	4603      	mov	r3, r0
 800973c:	6900      	ldr	r0, [r0, #16]
 800973e:	1a80      	subs	r0, r0, r2
 8009740:	b530      	push	{r4, r5, lr}
 8009742:	d10e      	bne.n	8009762 <__mcmp+0x2a>
 8009744:	3314      	adds	r3, #20
 8009746:	3114      	adds	r1, #20
 8009748:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800974c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009750:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009754:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009758:	4295      	cmp	r5, r2
 800975a:	d003      	beq.n	8009764 <__mcmp+0x2c>
 800975c:	d205      	bcs.n	800976a <__mcmp+0x32>
 800975e:	f04f 30ff 	mov.w	r0, #4294967295
 8009762:	bd30      	pop	{r4, r5, pc}
 8009764:	42a3      	cmp	r3, r4
 8009766:	d3f3      	bcc.n	8009750 <__mcmp+0x18>
 8009768:	e7fb      	b.n	8009762 <__mcmp+0x2a>
 800976a:	2001      	movs	r0, #1
 800976c:	e7f9      	b.n	8009762 <__mcmp+0x2a>
	...

08009770 <__mdiff>:
 8009770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009774:	4689      	mov	r9, r1
 8009776:	4606      	mov	r6, r0
 8009778:	4611      	mov	r1, r2
 800977a:	4648      	mov	r0, r9
 800977c:	4614      	mov	r4, r2
 800977e:	f7ff ffdb 	bl	8009738 <__mcmp>
 8009782:	1e05      	subs	r5, r0, #0
 8009784:	d112      	bne.n	80097ac <__mdiff+0x3c>
 8009786:	4629      	mov	r1, r5
 8009788:	4630      	mov	r0, r6
 800978a:	f7ff fd11 	bl	80091b0 <_Balloc>
 800978e:	4602      	mov	r2, r0
 8009790:	b928      	cbnz	r0, 800979e <__mdiff+0x2e>
 8009792:	4b3f      	ldr	r3, [pc, #252]	@ (8009890 <__mdiff+0x120>)
 8009794:	f240 2137 	movw	r1, #567	@ 0x237
 8009798:	483e      	ldr	r0, [pc, #248]	@ (8009894 <__mdiff+0x124>)
 800979a:	f7fe fa53 	bl	8007c44 <__assert_func>
 800979e:	2301      	movs	r3, #1
 80097a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097a4:	4610      	mov	r0, r2
 80097a6:	b003      	add	sp, #12
 80097a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ac:	bfbc      	itt	lt
 80097ae:	464b      	movlt	r3, r9
 80097b0:	46a1      	movlt	r9, r4
 80097b2:	4630      	mov	r0, r6
 80097b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097b8:	bfba      	itte	lt
 80097ba:	461c      	movlt	r4, r3
 80097bc:	2501      	movlt	r5, #1
 80097be:	2500      	movge	r5, #0
 80097c0:	f7ff fcf6 	bl	80091b0 <_Balloc>
 80097c4:	4602      	mov	r2, r0
 80097c6:	b918      	cbnz	r0, 80097d0 <__mdiff+0x60>
 80097c8:	4b31      	ldr	r3, [pc, #196]	@ (8009890 <__mdiff+0x120>)
 80097ca:	f240 2145 	movw	r1, #581	@ 0x245
 80097ce:	e7e3      	b.n	8009798 <__mdiff+0x28>
 80097d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097d4:	6926      	ldr	r6, [r4, #16]
 80097d6:	60c5      	str	r5, [r0, #12]
 80097d8:	f109 0310 	add.w	r3, r9, #16
 80097dc:	f109 0514 	add.w	r5, r9, #20
 80097e0:	f104 0e14 	add.w	lr, r4, #20
 80097e4:	f100 0b14 	add.w	fp, r0, #20
 80097e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097f0:	9301      	str	r3, [sp, #4]
 80097f2:	46d9      	mov	r9, fp
 80097f4:	f04f 0c00 	mov.w	ip, #0
 80097f8:	9b01      	ldr	r3, [sp, #4]
 80097fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80097fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009802:	9301      	str	r3, [sp, #4]
 8009804:	fa1f f38a 	uxth.w	r3, sl
 8009808:	4619      	mov	r1, r3
 800980a:	b283      	uxth	r3, r0
 800980c:	1acb      	subs	r3, r1, r3
 800980e:	0c00      	lsrs	r0, r0, #16
 8009810:	4463      	add	r3, ip
 8009812:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009816:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800981a:	b29b      	uxth	r3, r3
 800981c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009820:	4576      	cmp	r6, lr
 8009822:	f849 3b04 	str.w	r3, [r9], #4
 8009826:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800982a:	d8e5      	bhi.n	80097f8 <__mdiff+0x88>
 800982c:	1b33      	subs	r3, r6, r4
 800982e:	3b15      	subs	r3, #21
 8009830:	f023 0303 	bic.w	r3, r3, #3
 8009834:	3415      	adds	r4, #21
 8009836:	3304      	adds	r3, #4
 8009838:	42a6      	cmp	r6, r4
 800983a:	bf38      	it	cc
 800983c:	2304      	movcc	r3, #4
 800983e:	441d      	add	r5, r3
 8009840:	445b      	add	r3, fp
 8009842:	461e      	mov	r6, r3
 8009844:	462c      	mov	r4, r5
 8009846:	4544      	cmp	r4, r8
 8009848:	d30e      	bcc.n	8009868 <__mdiff+0xf8>
 800984a:	f108 0103 	add.w	r1, r8, #3
 800984e:	1b49      	subs	r1, r1, r5
 8009850:	f021 0103 	bic.w	r1, r1, #3
 8009854:	3d03      	subs	r5, #3
 8009856:	45a8      	cmp	r8, r5
 8009858:	bf38      	it	cc
 800985a:	2100      	movcc	r1, #0
 800985c:	440b      	add	r3, r1
 800985e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009862:	b191      	cbz	r1, 800988a <__mdiff+0x11a>
 8009864:	6117      	str	r7, [r2, #16]
 8009866:	e79d      	b.n	80097a4 <__mdiff+0x34>
 8009868:	f854 1b04 	ldr.w	r1, [r4], #4
 800986c:	46e6      	mov	lr, ip
 800986e:	0c08      	lsrs	r0, r1, #16
 8009870:	fa1c fc81 	uxtah	ip, ip, r1
 8009874:	4471      	add	r1, lr
 8009876:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800987a:	b289      	uxth	r1, r1
 800987c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009880:	f846 1b04 	str.w	r1, [r6], #4
 8009884:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009888:	e7dd      	b.n	8009846 <__mdiff+0xd6>
 800988a:	3f01      	subs	r7, #1
 800988c:	e7e7      	b.n	800985e <__mdiff+0xee>
 800988e:	bf00      	nop
 8009890:	0800cd59 	.word	0x0800cd59
 8009894:	0800cdca 	.word	0x0800cdca

08009898 <__ulp>:
 8009898:	b082      	sub	sp, #8
 800989a:	ed8d 0b00 	vstr	d0, [sp]
 800989e:	9a01      	ldr	r2, [sp, #4]
 80098a0:	4b0f      	ldr	r3, [pc, #60]	@ (80098e0 <__ulp+0x48>)
 80098a2:	4013      	ands	r3, r2
 80098a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	dc08      	bgt.n	80098be <__ulp+0x26>
 80098ac:	425b      	negs	r3, r3
 80098ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80098b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80098b6:	da04      	bge.n	80098c2 <__ulp+0x2a>
 80098b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80098bc:	4113      	asrs	r3, r2
 80098be:	2200      	movs	r2, #0
 80098c0:	e008      	b.n	80098d4 <__ulp+0x3c>
 80098c2:	f1a2 0314 	sub.w	r3, r2, #20
 80098c6:	2b1e      	cmp	r3, #30
 80098c8:	bfda      	itte	le
 80098ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80098ce:	40da      	lsrle	r2, r3
 80098d0:	2201      	movgt	r2, #1
 80098d2:	2300      	movs	r3, #0
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	ec41 0b10 	vmov	d0, r0, r1
 80098dc:	b002      	add	sp, #8
 80098de:	4770      	bx	lr
 80098e0:	7ff00000 	.word	0x7ff00000

080098e4 <__b2d>:
 80098e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e8:	6906      	ldr	r6, [r0, #16]
 80098ea:	f100 0814 	add.w	r8, r0, #20
 80098ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80098f2:	1f37      	subs	r7, r6, #4
 80098f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098f8:	4610      	mov	r0, r2
 80098fa:	f7ff fd4b 	bl	8009394 <__hi0bits>
 80098fe:	f1c0 0320 	rsb	r3, r0, #32
 8009902:	280a      	cmp	r0, #10
 8009904:	600b      	str	r3, [r1, #0]
 8009906:	491b      	ldr	r1, [pc, #108]	@ (8009974 <__b2d+0x90>)
 8009908:	dc15      	bgt.n	8009936 <__b2d+0x52>
 800990a:	f1c0 0c0b 	rsb	ip, r0, #11
 800990e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009912:	45b8      	cmp	r8, r7
 8009914:	ea43 0501 	orr.w	r5, r3, r1
 8009918:	bf34      	ite	cc
 800991a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800991e:	2300      	movcs	r3, #0
 8009920:	3015      	adds	r0, #21
 8009922:	fa02 f000 	lsl.w	r0, r2, r0
 8009926:	fa23 f30c 	lsr.w	r3, r3, ip
 800992a:	4303      	orrs	r3, r0
 800992c:	461c      	mov	r4, r3
 800992e:	ec45 4b10 	vmov	d0, r4, r5
 8009932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009936:	45b8      	cmp	r8, r7
 8009938:	bf3a      	itte	cc
 800993a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800993e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009942:	2300      	movcs	r3, #0
 8009944:	380b      	subs	r0, #11
 8009946:	d012      	beq.n	800996e <__b2d+0x8a>
 8009948:	f1c0 0120 	rsb	r1, r0, #32
 800994c:	fa23 f401 	lsr.w	r4, r3, r1
 8009950:	4082      	lsls	r2, r0
 8009952:	4322      	orrs	r2, r4
 8009954:	4547      	cmp	r7, r8
 8009956:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800995a:	bf8c      	ite	hi
 800995c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009960:	2200      	movls	r2, #0
 8009962:	4083      	lsls	r3, r0
 8009964:	40ca      	lsrs	r2, r1
 8009966:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800996a:	4313      	orrs	r3, r2
 800996c:	e7de      	b.n	800992c <__b2d+0x48>
 800996e:	ea42 0501 	orr.w	r5, r2, r1
 8009972:	e7db      	b.n	800992c <__b2d+0x48>
 8009974:	3ff00000 	.word	0x3ff00000

08009978 <__d2b>:
 8009978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800997c:	460f      	mov	r7, r1
 800997e:	2101      	movs	r1, #1
 8009980:	ec59 8b10 	vmov	r8, r9, d0
 8009984:	4616      	mov	r6, r2
 8009986:	f7ff fc13 	bl	80091b0 <_Balloc>
 800998a:	4604      	mov	r4, r0
 800998c:	b930      	cbnz	r0, 800999c <__d2b+0x24>
 800998e:	4602      	mov	r2, r0
 8009990:	4b23      	ldr	r3, [pc, #140]	@ (8009a20 <__d2b+0xa8>)
 8009992:	4824      	ldr	r0, [pc, #144]	@ (8009a24 <__d2b+0xac>)
 8009994:	f240 310f 	movw	r1, #783	@ 0x30f
 8009998:	f7fe f954 	bl	8007c44 <__assert_func>
 800999c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099a4:	b10d      	cbz	r5, 80099aa <__d2b+0x32>
 80099a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	f1b8 0300 	subs.w	r3, r8, #0
 80099b0:	d023      	beq.n	80099fa <__d2b+0x82>
 80099b2:	4668      	mov	r0, sp
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	f7ff fd0c 	bl	80093d2 <__lo0bits>
 80099ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80099be:	b1d0      	cbz	r0, 80099f6 <__d2b+0x7e>
 80099c0:	f1c0 0320 	rsb	r3, r0, #32
 80099c4:	fa02 f303 	lsl.w	r3, r2, r3
 80099c8:	430b      	orrs	r3, r1
 80099ca:	40c2      	lsrs	r2, r0
 80099cc:	6163      	str	r3, [r4, #20]
 80099ce:	9201      	str	r2, [sp, #4]
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	61a3      	str	r3, [r4, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	bf0c      	ite	eq
 80099d8:	2201      	moveq	r2, #1
 80099da:	2202      	movne	r2, #2
 80099dc:	6122      	str	r2, [r4, #16]
 80099de:	b1a5      	cbz	r5, 8009a0a <__d2b+0x92>
 80099e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80099e4:	4405      	add	r5, r0
 80099e6:	603d      	str	r5, [r7, #0]
 80099e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80099ec:	6030      	str	r0, [r6, #0]
 80099ee:	4620      	mov	r0, r4
 80099f0:	b003      	add	sp, #12
 80099f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099f6:	6161      	str	r1, [r4, #20]
 80099f8:	e7ea      	b.n	80099d0 <__d2b+0x58>
 80099fa:	a801      	add	r0, sp, #4
 80099fc:	f7ff fce9 	bl	80093d2 <__lo0bits>
 8009a00:	9b01      	ldr	r3, [sp, #4]
 8009a02:	6163      	str	r3, [r4, #20]
 8009a04:	3020      	adds	r0, #32
 8009a06:	2201      	movs	r2, #1
 8009a08:	e7e8      	b.n	80099dc <__d2b+0x64>
 8009a0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a12:	6038      	str	r0, [r7, #0]
 8009a14:	6918      	ldr	r0, [r3, #16]
 8009a16:	f7ff fcbd 	bl	8009394 <__hi0bits>
 8009a1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a1e:	e7e5      	b.n	80099ec <__d2b+0x74>
 8009a20:	0800cd59 	.word	0x0800cd59
 8009a24:	0800cdca 	.word	0x0800cdca

08009a28 <__ratio>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	b085      	sub	sp, #20
 8009a2e:	e9cd 1000 	strd	r1, r0, [sp]
 8009a32:	a902      	add	r1, sp, #8
 8009a34:	f7ff ff56 	bl	80098e4 <__b2d>
 8009a38:	9800      	ldr	r0, [sp, #0]
 8009a3a:	a903      	add	r1, sp, #12
 8009a3c:	ec55 4b10 	vmov	r4, r5, d0
 8009a40:	f7ff ff50 	bl	80098e4 <__b2d>
 8009a44:	9b01      	ldr	r3, [sp, #4]
 8009a46:	6919      	ldr	r1, [r3, #16]
 8009a48:	9b00      	ldr	r3, [sp, #0]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	1ac9      	subs	r1, r1, r3
 8009a4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	ec5b ab10 	vmov	sl, fp, d0
 8009a58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	bfce      	itee	gt
 8009a60:	462a      	movgt	r2, r5
 8009a62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a66:	465a      	movle	r2, fp
 8009a68:	462f      	mov	r7, r5
 8009a6a:	46d9      	mov	r9, fp
 8009a6c:	bfcc      	ite	gt
 8009a6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009a72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009a76:	464b      	mov	r3, r9
 8009a78:	4652      	mov	r2, sl
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	f7f6 feed 	bl	800085c <__aeabi_ddiv>
 8009a82:	ec41 0b10 	vmov	d0, r0, r1
 8009a86:	b005      	add	sp, #20
 8009a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a8c <__copybits>:
 8009a8c:	3901      	subs	r1, #1
 8009a8e:	b570      	push	{r4, r5, r6, lr}
 8009a90:	1149      	asrs	r1, r1, #5
 8009a92:	6914      	ldr	r4, [r2, #16]
 8009a94:	3101      	adds	r1, #1
 8009a96:	f102 0314 	add.w	r3, r2, #20
 8009a9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009aa2:	1f05      	subs	r5, r0, #4
 8009aa4:	42a3      	cmp	r3, r4
 8009aa6:	d30c      	bcc.n	8009ac2 <__copybits+0x36>
 8009aa8:	1aa3      	subs	r3, r4, r2
 8009aaa:	3b11      	subs	r3, #17
 8009aac:	f023 0303 	bic.w	r3, r3, #3
 8009ab0:	3211      	adds	r2, #17
 8009ab2:	42a2      	cmp	r2, r4
 8009ab4:	bf88      	it	hi
 8009ab6:	2300      	movhi	r3, #0
 8009ab8:	4418      	add	r0, r3
 8009aba:	2300      	movs	r3, #0
 8009abc:	4288      	cmp	r0, r1
 8009abe:	d305      	bcc.n	8009acc <__copybits+0x40>
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ac6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009aca:	e7eb      	b.n	8009aa4 <__copybits+0x18>
 8009acc:	f840 3b04 	str.w	r3, [r0], #4
 8009ad0:	e7f4      	b.n	8009abc <__copybits+0x30>

08009ad2 <__any_on>:
 8009ad2:	f100 0214 	add.w	r2, r0, #20
 8009ad6:	6900      	ldr	r0, [r0, #16]
 8009ad8:	114b      	asrs	r3, r1, #5
 8009ada:	4298      	cmp	r0, r3
 8009adc:	b510      	push	{r4, lr}
 8009ade:	db11      	blt.n	8009b04 <__any_on+0x32>
 8009ae0:	dd0a      	ble.n	8009af8 <__any_on+0x26>
 8009ae2:	f011 011f 	ands.w	r1, r1, #31
 8009ae6:	d007      	beq.n	8009af8 <__any_on+0x26>
 8009ae8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009aec:	fa24 f001 	lsr.w	r0, r4, r1
 8009af0:	fa00 f101 	lsl.w	r1, r0, r1
 8009af4:	428c      	cmp	r4, r1
 8009af6:	d10b      	bne.n	8009b10 <__any_on+0x3e>
 8009af8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d803      	bhi.n	8009b08 <__any_on+0x36>
 8009b00:	2000      	movs	r0, #0
 8009b02:	bd10      	pop	{r4, pc}
 8009b04:	4603      	mov	r3, r0
 8009b06:	e7f7      	b.n	8009af8 <__any_on+0x26>
 8009b08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	d0f5      	beq.n	8009afc <__any_on+0x2a>
 8009b10:	2001      	movs	r0, #1
 8009b12:	e7f6      	b.n	8009b02 <__any_on+0x30>

08009b14 <_strtol_l.constprop.0>:
 8009b14:	2b24      	cmp	r3, #36	@ 0x24
 8009b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1a:	4686      	mov	lr, r0
 8009b1c:	4690      	mov	r8, r2
 8009b1e:	d801      	bhi.n	8009b24 <_strtol_l.constprop.0+0x10>
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d106      	bne.n	8009b32 <_strtol_l.constprop.0+0x1e>
 8009b24:	f7fe f844 	bl	8007bb0 <__errno>
 8009b28:	2316      	movs	r3, #22
 8009b2a:	6003      	str	r3, [r0, #0]
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b32:	4834      	ldr	r0, [pc, #208]	@ (8009c04 <_strtol_l.constprop.0+0xf0>)
 8009b34:	460d      	mov	r5, r1
 8009b36:	462a      	mov	r2, r5
 8009b38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b3c:	5d06      	ldrb	r6, [r0, r4]
 8009b3e:	f016 0608 	ands.w	r6, r6, #8
 8009b42:	d1f8      	bne.n	8009b36 <_strtol_l.constprop.0+0x22>
 8009b44:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b46:	d12d      	bne.n	8009ba4 <_strtol_l.constprop.0+0x90>
 8009b48:	782c      	ldrb	r4, [r5, #0]
 8009b4a:	2601      	movs	r6, #1
 8009b4c:	1c95      	adds	r5, r2, #2
 8009b4e:	f033 0210 	bics.w	r2, r3, #16
 8009b52:	d109      	bne.n	8009b68 <_strtol_l.constprop.0+0x54>
 8009b54:	2c30      	cmp	r4, #48	@ 0x30
 8009b56:	d12a      	bne.n	8009bae <_strtol_l.constprop.0+0x9a>
 8009b58:	782a      	ldrb	r2, [r5, #0]
 8009b5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b5e:	2a58      	cmp	r2, #88	@ 0x58
 8009b60:	d125      	bne.n	8009bae <_strtol_l.constprop.0+0x9a>
 8009b62:	786c      	ldrb	r4, [r5, #1]
 8009b64:	2310      	movs	r3, #16
 8009b66:	3502      	adds	r5, #2
 8009b68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009b6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b70:	2200      	movs	r2, #0
 8009b72:	fbbc f9f3 	udiv	r9, ip, r3
 8009b76:	4610      	mov	r0, r2
 8009b78:	fb03 ca19 	mls	sl, r3, r9, ip
 8009b7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009b80:	2f09      	cmp	r7, #9
 8009b82:	d81b      	bhi.n	8009bbc <_strtol_l.constprop.0+0xa8>
 8009b84:	463c      	mov	r4, r7
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	dd27      	ble.n	8009bda <_strtol_l.constprop.0+0xc6>
 8009b8a:	1c57      	adds	r7, r2, #1
 8009b8c:	d007      	beq.n	8009b9e <_strtol_l.constprop.0+0x8a>
 8009b8e:	4581      	cmp	r9, r0
 8009b90:	d320      	bcc.n	8009bd4 <_strtol_l.constprop.0+0xc0>
 8009b92:	d101      	bne.n	8009b98 <_strtol_l.constprop.0+0x84>
 8009b94:	45a2      	cmp	sl, r4
 8009b96:	db1d      	blt.n	8009bd4 <_strtol_l.constprop.0+0xc0>
 8009b98:	fb00 4003 	mla	r0, r0, r3, r4
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ba2:	e7eb      	b.n	8009b7c <_strtol_l.constprop.0+0x68>
 8009ba4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ba6:	bf04      	itt	eq
 8009ba8:	782c      	ldrbeq	r4, [r5, #0]
 8009baa:	1c95      	addeq	r5, r2, #2
 8009bac:	e7cf      	b.n	8009b4e <_strtol_l.constprop.0+0x3a>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1da      	bne.n	8009b68 <_strtol_l.constprop.0+0x54>
 8009bb2:	2c30      	cmp	r4, #48	@ 0x30
 8009bb4:	bf0c      	ite	eq
 8009bb6:	2308      	moveq	r3, #8
 8009bb8:	230a      	movne	r3, #10
 8009bba:	e7d5      	b.n	8009b68 <_strtol_l.constprop.0+0x54>
 8009bbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009bc0:	2f19      	cmp	r7, #25
 8009bc2:	d801      	bhi.n	8009bc8 <_strtol_l.constprop.0+0xb4>
 8009bc4:	3c37      	subs	r4, #55	@ 0x37
 8009bc6:	e7de      	b.n	8009b86 <_strtol_l.constprop.0+0x72>
 8009bc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009bcc:	2f19      	cmp	r7, #25
 8009bce:	d804      	bhi.n	8009bda <_strtol_l.constprop.0+0xc6>
 8009bd0:	3c57      	subs	r4, #87	@ 0x57
 8009bd2:	e7d8      	b.n	8009b86 <_strtol_l.constprop.0+0x72>
 8009bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd8:	e7e1      	b.n	8009b9e <_strtol_l.constprop.0+0x8a>
 8009bda:	1c53      	adds	r3, r2, #1
 8009bdc:	d108      	bne.n	8009bf0 <_strtol_l.constprop.0+0xdc>
 8009bde:	2322      	movs	r3, #34	@ 0x22
 8009be0:	f8ce 3000 	str.w	r3, [lr]
 8009be4:	4660      	mov	r0, ip
 8009be6:	f1b8 0f00 	cmp.w	r8, #0
 8009bea:	d0a0      	beq.n	8009b2e <_strtol_l.constprop.0+0x1a>
 8009bec:	1e69      	subs	r1, r5, #1
 8009bee:	e006      	b.n	8009bfe <_strtol_l.constprop.0+0xea>
 8009bf0:	b106      	cbz	r6, 8009bf4 <_strtol_l.constprop.0+0xe0>
 8009bf2:	4240      	negs	r0, r0
 8009bf4:	f1b8 0f00 	cmp.w	r8, #0
 8009bf8:	d099      	beq.n	8009b2e <_strtol_l.constprop.0+0x1a>
 8009bfa:	2a00      	cmp	r2, #0
 8009bfc:	d1f6      	bne.n	8009bec <_strtol_l.constprop.0+0xd8>
 8009bfe:	f8c8 1000 	str.w	r1, [r8]
 8009c02:	e794      	b.n	8009b2e <_strtol_l.constprop.0+0x1a>
 8009c04:	0800cf21 	.word	0x0800cf21

08009c08 <_strtol_r>:
 8009c08:	f7ff bf84 	b.w	8009b14 <_strtol_l.constprop.0>

08009c0c <__ascii_wctomb>:
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	4608      	mov	r0, r1
 8009c10:	b141      	cbz	r1, 8009c24 <__ascii_wctomb+0x18>
 8009c12:	2aff      	cmp	r2, #255	@ 0xff
 8009c14:	d904      	bls.n	8009c20 <__ascii_wctomb+0x14>
 8009c16:	228a      	movs	r2, #138	@ 0x8a
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1e:	4770      	bx	lr
 8009c20:	700a      	strb	r2, [r1, #0]
 8009c22:	2001      	movs	r0, #1
 8009c24:	4770      	bx	lr

08009c26 <__ssputs_r>:
 8009c26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2a:	688e      	ldr	r6, [r1, #8]
 8009c2c:	461f      	mov	r7, r3
 8009c2e:	42be      	cmp	r6, r7
 8009c30:	680b      	ldr	r3, [r1, #0]
 8009c32:	4682      	mov	sl, r0
 8009c34:	460c      	mov	r4, r1
 8009c36:	4690      	mov	r8, r2
 8009c38:	d82d      	bhi.n	8009c96 <__ssputs_r+0x70>
 8009c3a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c3e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c42:	d026      	beq.n	8009c92 <__ssputs_r+0x6c>
 8009c44:	6965      	ldr	r5, [r4, #20]
 8009c46:	6909      	ldr	r1, [r1, #16]
 8009c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c4c:	eba3 0901 	sub.w	r9, r3, r1
 8009c50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c54:	1c7b      	adds	r3, r7, #1
 8009c56:	444b      	add	r3, r9
 8009c58:	106d      	asrs	r5, r5, #1
 8009c5a:	429d      	cmp	r5, r3
 8009c5c:	bf38      	it	cc
 8009c5e:	461d      	movcc	r5, r3
 8009c60:	0553      	lsls	r3, r2, #21
 8009c62:	d527      	bpl.n	8009cb4 <__ssputs_r+0x8e>
 8009c64:	4629      	mov	r1, r5
 8009c66:	f7ff fa05 	bl	8009074 <_malloc_r>
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	b360      	cbz	r0, 8009cc8 <__ssputs_r+0xa2>
 8009c6e:	6921      	ldr	r1, [r4, #16]
 8009c70:	464a      	mov	r2, r9
 8009c72:	f7fd ffca 	bl	8007c0a <memcpy>
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	6126      	str	r6, [r4, #16]
 8009c84:	6165      	str	r5, [r4, #20]
 8009c86:	444e      	add	r6, r9
 8009c88:	eba5 0509 	sub.w	r5, r5, r9
 8009c8c:	6026      	str	r6, [r4, #0]
 8009c8e:	60a5      	str	r5, [r4, #8]
 8009c90:	463e      	mov	r6, r7
 8009c92:	42be      	cmp	r6, r7
 8009c94:	d900      	bls.n	8009c98 <__ssputs_r+0x72>
 8009c96:	463e      	mov	r6, r7
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	4641      	mov	r1, r8
 8009c9e:	f000 fd64 	bl	800a76a <memmove>
 8009ca2:	68a3      	ldr	r3, [r4, #8]
 8009ca4:	1b9b      	subs	r3, r3, r6
 8009ca6:	60a3      	str	r3, [r4, #8]
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	4433      	add	r3, r6
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	2000      	movs	r0, #0
 8009cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb4:	462a      	mov	r2, r5
 8009cb6:	f000 fd9e 	bl	800a7f6 <_realloc_r>
 8009cba:	4606      	mov	r6, r0
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d1e0      	bne.n	8009c82 <__ssputs_r+0x5c>
 8009cc0:	6921      	ldr	r1, [r4, #16]
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	f7fe fe28 	bl	8008918 <_free_r>
 8009cc8:	230c      	movs	r3, #12
 8009cca:	f8ca 3000 	str.w	r3, [sl]
 8009cce:	89a3      	ldrh	r3, [r4, #12]
 8009cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cd4:	81a3      	strh	r3, [r4, #12]
 8009cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cda:	e7e9      	b.n	8009cb0 <__ssputs_r+0x8a>

08009cdc <_svfiprintf_r>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	898b      	ldrh	r3, [r1, #12]
 8009ce4:	061b      	lsls	r3, r3, #24
 8009ce6:	b09d      	sub	sp, #116	@ 0x74
 8009ce8:	4607      	mov	r7, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	4614      	mov	r4, r2
 8009cee:	d510      	bpl.n	8009d12 <_svfiprintf_r+0x36>
 8009cf0:	690b      	ldr	r3, [r1, #16]
 8009cf2:	b973      	cbnz	r3, 8009d12 <_svfiprintf_r+0x36>
 8009cf4:	2140      	movs	r1, #64	@ 0x40
 8009cf6:	f7ff f9bd 	bl	8009074 <_malloc_r>
 8009cfa:	6028      	str	r0, [r5, #0]
 8009cfc:	6128      	str	r0, [r5, #16]
 8009cfe:	b930      	cbnz	r0, 8009d0e <_svfiprintf_r+0x32>
 8009d00:	230c      	movs	r3, #12
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	b01d      	add	sp, #116	@ 0x74
 8009d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0e:	2340      	movs	r3, #64	@ 0x40
 8009d10:	616b      	str	r3, [r5, #20]
 8009d12:	2300      	movs	r3, #0
 8009d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d16:	2320      	movs	r3, #32
 8009d18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d20:	2330      	movs	r3, #48	@ 0x30
 8009d22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ec0 <_svfiprintf_r+0x1e4>
 8009d26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d2a:	f04f 0901 	mov.w	r9, #1
 8009d2e:	4623      	mov	r3, r4
 8009d30:	469a      	mov	sl, r3
 8009d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d36:	b10a      	cbz	r2, 8009d3c <_svfiprintf_r+0x60>
 8009d38:	2a25      	cmp	r2, #37	@ 0x25
 8009d3a:	d1f9      	bne.n	8009d30 <_svfiprintf_r+0x54>
 8009d3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d40:	d00b      	beq.n	8009d5a <_svfiprintf_r+0x7e>
 8009d42:	465b      	mov	r3, fp
 8009d44:	4622      	mov	r2, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f7ff ff6c 	bl	8009c26 <__ssputs_r>
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f000 80a7 	beq.w	8009ea2 <_svfiprintf_r+0x1c6>
 8009d54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d56:	445a      	add	r2, fp
 8009d58:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 809f 	beq.w	8009ea2 <_svfiprintf_r+0x1c6>
 8009d64:	2300      	movs	r3, #0
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6e:	f10a 0a01 	add.w	sl, sl, #1
 8009d72:	9304      	str	r3, [sp, #16]
 8009d74:	9307      	str	r3, [sp, #28]
 8009d76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d7c:	4654      	mov	r4, sl
 8009d7e:	2205      	movs	r2, #5
 8009d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d84:	484e      	ldr	r0, [pc, #312]	@ (8009ec0 <_svfiprintf_r+0x1e4>)
 8009d86:	f7f6 fa2b 	bl	80001e0 <memchr>
 8009d8a:	9a04      	ldr	r2, [sp, #16]
 8009d8c:	b9d8      	cbnz	r0, 8009dc6 <_svfiprintf_r+0xea>
 8009d8e:	06d0      	lsls	r0, r2, #27
 8009d90:	bf44      	itt	mi
 8009d92:	2320      	movmi	r3, #32
 8009d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d98:	0711      	lsls	r1, r2, #28
 8009d9a:	bf44      	itt	mi
 8009d9c:	232b      	movmi	r3, #43	@ 0x2b
 8009d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009da2:	f89a 3000 	ldrb.w	r3, [sl]
 8009da6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009da8:	d015      	beq.n	8009dd6 <_svfiprintf_r+0xfa>
 8009daa:	9a07      	ldr	r2, [sp, #28]
 8009dac:	4654      	mov	r4, sl
 8009dae:	2000      	movs	r0, #0
 8009db0:	f04f 0c0a 	mov.w	ip, #10
 8009db4:	4621      	mov	r1, r4
 8009db6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dba:	3b30      	subs	r3, #48	@ 0x30
 8009dbc:	2b09      	cmp	r3, #9
 8009dbe:	d94b      	bls.n	8009e58 <_svfiprintf_r+0x17c>
 8009dc0:	b1b0      	cbz	r0, 8009df0 <_svfiprintf_r+0x114>
 8009dc2:	9207      	str	r2, [sp, #28]
 8009dc4:	e014      	b.n	8009df0 <_svfiprintf_r+0x114>
 8009dc6:	eba0 0308 	sub.w	r3, r0, r8
 8009dca:	fa09 f303 	lsl.w	r3, r9, r3
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	9304      	str	r3, [sp, #16]
 8009dd2:	46a2      	mov	sl, r4
 8009dd4:	e7d2      	b.n	8009d7c <_svfiprintf_r+0xa0>
 8009dd6:	9b03      	ldr	r3, [sp, #12]
 8009dd8:	1d19      	adds	r1, r3, #4
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	9103      	str	r1, [sp, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfbb      	ittet	lt
 8009de2:	425b      	neglt	r3, r3
 8009de4:	f042 0202 	orrlt.w	r2, r2, #2
 8009de8:	9307      	strge	r3, [sp, #28]
 8009dea:	9307      	strlt	r3, [sp, #28]
 8009dec:	bfb8      	it	lt
 8009dee:	9204      	strlt	r2, [sp, #16]
 8009df0:	7823      	ldrb	r3, [r4, #0]
 8009df2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009df4:	d10a      	bne.n	8009e0c <_svfiprintf_r+0x130>
 8009df6:	7863      	ldrb	r3, [r4, #1]
 8009df8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dfa:	d132      	bne.n	8009e62 <_svfiprintf_r+0x186>
 8009dfc:	9b03      	ldr	r3, [sp, #12]
 8009dfe:	1d1a      	adds	r2, r3, #4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	9203      	str	r2, [sp, #12]
 8009e04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e08:	3402      	adds	r4, #2
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ed0 <_svfiprintf_r+0x1f4>
 8009e10:	7821      	ldrb	r1, [r4, #0]
 8009e12:	2203      	movs	r2, #3
 8009e14:	4650      	mov	r0, sl
 8009e16:	f7f6 f9e3 	bl	80001e0 <memchr>
 8009e1a:	b138      	cbz	r0, 8009e2c <_svfiprintf_r+0x150>
 8009e1c:	9b04      	ldr	r3, [sp, #16]
 8009e1e:	eba0 000a 	sub.w	r0, r0, sl
 8009e22:	2240      	movs	r2, #64	@ 0x40
 8009e24:	4082      	lsls	r2, r0
 8009e26:	4313      	orrs	r3, r2
 8009e28:	3401      	adds	r4, #1
 8009e2a:	9304      	str	r3, [sp, #16]
 8009e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e30:	4824      	ldr	r0, [pc, #144]	@ (8009ec4 <_svfiprintf_r+0x1e8>)
 8009e32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e36:	2206      	movs	r2, #6
 8009e38:	f7f6 f9d2 	bl	80001e0 <memchr>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	d036      	beq.n	8009eae <_svfiprintf_r+0x1d2>
 8009e40:	4b21      	ldr	r3, [pc, #132]	@ (8009ec8 <_svfiprintf_r+0x1ec>)
 8009e42:	bb1b      	cbnz	r3, 8009e8c <_svfiprintf_r+0x1b0>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	3307      	adds	r3, #7
 8009e48:	f023 0307 	bic.w	r3, r3, #7
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	9303      	str	r3, [sp, #12]
 8009e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e52:	4433      	add	r3, r6
 8009e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e56:	e76a      	b.n	8009d2e <_svfiprintf_r+0x52>
 8009e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	2001      	movs	r0, #1
 8009e60:	e7a8      	b.n	8009db4 <_svfiprintf_r+0xd8>
 8009e62:	2300      	movs	r3, #0
 8009e64:	3401      	adds	r4, #1
 8009e66:	9305      	str	r3, [sp, #20]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	f04f 0c0a 	mov.w	ip, #10
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e74:	3a30      	subs	r2, #48	@ 0x30
 8009e76:	2a09      	cmp	r2, #9
 8009e78:	d903      	bls.n	8009e82 <_svfiprintf_r+0x1a6>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0c6      	beq.n	8009e0c <_svfiprintf_r+0x130>
 8009e7e:	9105      	str	r1, [sp, #20]
 8009e80:	e7c4      	b.n	8009e0c <_svfiprintf_r+0x130>
 8009e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e86:	4604      	mov	r4, r0
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e7f0      	b.n	8009e6e <_svfiprintf_r+0x192>
 8009e8c:	ab03      	add	r3, sp, #12
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	462a      	mov	r2, r5
 8009e92:	4b0e      	ldr	r3, [pc, #56]	@ (8009ecc <_svfiprintf_r+0x1f0>)
 8009e94:	a904      	add	r1, sp, #16
 8009e96:	4638      	mov	r0, r7
 8009e98:	f7fc fe78 	bl	8006b8c <_printf_float>
 8009e9c:	1c42      	adds	r2, r0, #1
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	d1d6      	bne.n	8009e50 <_svfiprintf_r+0x174>
 8009ea2:	89ab      	ldrh	r3, [r5, #12]
 8009ea4:	065b      	lsls	r3, r3, #25
 8009ea6:	f53f af2d 	bmi.w	8009d04 <_svfiprintf_r+0x28>
 8009eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eac:	e72c      	b.n	8009d08 <_svfiprintf_r+0x2c>
 8009eae:	ab03      	add	r3, sp, #12
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	462a      	mov	r2, r5
 8009eb4:	4b05      	ldr	r3, [pc, #20]	@ (8009ecc <_svfiprintf_r+0x1f0>)
 8009eb6:	a904      	add	r1, sp, #16
 8009eb8:	4638      	mov	r0, r7
 8009eba:	f7fd f8ff 	bl	80070bc <_printf_i>
 8009ebe:	e7ed      	b.n	8009e9c <_svfiprintf_r+0x1c0>
 8009ec0:	0800d021 	.word	0x0800d021
 8009ec4:	0800d02b 	.word	0x0800d02b
 8009ec8:	08006b8d 	.word	0x08006b8d
 8009ecc:	08009c27 	.word	0x08009c27
 8009ed0:	0800d027 	.word	0x0800d027

08009ed4 <_sungetc_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	1c4b      	adds	r3, r1, #1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	d103      	bne.n	8009ee4 <_sungetc_r+0x10>
 8009edc:	f04f 35ff 	mov.w	r5, #4294967295
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	8993      	ldrh	r3, [r2, #12]
 8009ee6:	f023 0320 	bic.w	r3, r3, #32
 8009eea:	8193      	strh	r3, [r2, #12]
 8009eec:	6853      	ldr	r3, [r2, #4]
 8009eee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009ef0:	b2cd      	uxtb	r5, r1
 8009ef2:	b18a      	cbz	r2, 8009f18 <_sungetc_r+0x44>
 8009ef4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	dd08      	ble.n	8009f0c <_sungetc_r+0x38>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	1e5a      	subs	r2, r3, #1
 8009efe:	6022      	str	r2, [r4, #0]
 8009f00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009f04:	6863      	ldr	r3, [r4, #4]
 8009f06:	3301      	adds	r3, #1
 8009f08:	6063      	str	r3, [r4, #4]
 8009f0a:	e7e9      	b.n	8009ee0 <_sungetc_r+0xc>
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	f000 fbf2 	bl	800a6f6 <__submore>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d0f1      	beq.n	8009efa <_sungetc_r+0x26>
 8009f16:	e7e1      	b.n	8009edc <_sungetc_r+0x8>
 8009f18:	6921      	ldr	r1, [r4, #16]
 8009f1a:	6822      	ldr	r2, [r4, #0]
 8009f1c:	b141      	cbz	r1, 8009f30 <_sungetc_r+0x5c>
 8009f1e:	4291      	cmp	r1, r2
 8009f20:	d206      	bcs.n	8009f30 <_sungetc_r+0x5c>
 8009f22:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009f26:	42a9      	cmp	r1, r5
 8009f28:	d102      	bne.n	8009f30 <_sungetc_r+0x5c>
 8009f2a:	3a01      	subs	r2, #1
 8009f2c:	6022      	str	r2, [r4, #0]
 8009f2e:	e7ea      	b.n	8009f06 <_sungetc_r+0x32>
 8009f30:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f38:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009f3e:	4623      	mov	r3, r4
 8009f40:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	2301      	movs	r3, #1
 8009f48:	e7de      	b.n	8009f08 <_sungetc_r+0x34>

08009f4a <__ssrefill_r>:
 8009f4a:	b510      	push	{r4, lr}
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009f50:	b169      	cbz	r1, 8009f6e <__ssrefill_r+0x24>
 8009f52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f56:	4299      	cmp	r1, r3
 8009f58:	d001      	beq.n	8009f5e <__ssrefill_r+0x14>
 8009f5a:	f7fe fcdd 	bl	8008918 <_free_r>
 8009f5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f60:	6063      	str	r3, [r4, #4]
 8009f62:	2000      	movs	r0, #0
 8009f64:	6360      	str	r0, [r4, #52]	@ 0x34
 8009f66:	b113      	cbz	r3, 8009f6e <__ssrefill_r+0x24>
 8009f68:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	2300      	movs	r3, #0
 8009f74:	6063      	str	r3, [r4, #4]
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f043 0320 	orr.w	r3, r3, #32
 8009f7c:	81a3      	strh	r3, [r4, #12]
 8009f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f82:	e7f3      	b.n	8009f6c <__ssrefill_r+0x22>

08009f84 <__ssvfiscanf_r>:
 8009f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f88:	460c      	mov	r4, r1
 8009f8a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009f8e:	2100      	movs	r1, #0
 8009f90:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009f94:	49a5      	ldr	r1, [pc, #660]	@ (800a22c <__ssvfiscanf_r+0x2a8>)
 8009f96:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009f98:	f10d 0804 	add.w	r8, sp, #4
 8009f9c:	49a4      	ldr	r1, [pc, #656]	@ (800a230 <__ssvfiscanf_r+0x2ac>)
 8009f9e:	4fa5      	ldr	r7, [pc, #660]	@ (800a234 <__ssvfiscanf_r+0x2b0>)
 8009fa0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	7813      	ldrb	r3, [r2, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f000 8158 	beq.w	800a262 <__ssvfiscanf_r+0x2de>
 8009fb2:	5cf9      	ldrb	r1, [r7, r3]
 8009fb4:	f011 0108 	ands.w	r1, r1, #8
 8009fb8:	f102 0501 	add.w	r5, r2, #1
 8009fbc:	d019      	beq.n	8009ff2 <__ssvfiscanf_r+0x6e>
 8009fbe:	6863      	ldr	r3, [r4, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dd0f      	ble.n	8009fe4 <__ssvfiscanf_r+0x60>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	781a      	ldrb	r2, [r3, #0]
 8009fc8:	5cba      	ldrb	r2, [r7, r2]
 8009fca:	0712      	lsls	r2, r2, #28
 8009fcc:	d401      	bmi.n	8009fd2 <__ssvfiscanf_r+0x4e>
 8009fce:	462a      	mov	r2, r5
 8009fd0:	e7eb      	b.n	8009faa <__ssvfiscanf_r+0x26>
 8009fd2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009fd4:	3201      	adds	r2, #1
 8009fd6:	9245      	str	r2, [sp, #276]	@ 0x114
 8009fd8:	6862      	ldr	r2, [r4, #4]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	3a01      	subs	r2, #1
 8009fde:	6062      	str	r2, [r4, #4]
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	e7ec      	b.n	8009fbe <__ssvfiscanf_r+0x3a>
 8009fe4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	4630      	mov	r0, r6
 8009fea:	4798      	blx	r3
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d0e9      	beq.n	8009fc4 <__ssvfiscanf_r+0x40>
 8009ff0:	e7ed      	b.n	8009fce <__ssvfiscanf_r+0x4a>
 8009ff2:	2b25      	cmp	r3, #37	@ 0x25
 8009ff4:	d012      	beq.n	800a01c <__ssvfiscanf_r+0x98>
 8009ff6:	4699      	mov	r9, r3
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f340 8093 	ble.w	800a126 <__ssvfiscanf_r+0x1a2>
 800a000:	6822      	ldr	r2, [r4, #0]
 800a002:	7813      	ldrb	r3, [r2, #0]
 800a004:	454b      	cmp	r3, r9
 800a006:	f040 812c 	bne.w	800a262 <__ssvfiscanf_r+0x2de>
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	6063      	str	r3, [r4, #4]
 800a010:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a012:	3201      	adds	r2, #1
 800a014:	3301      	adds	r3, #1
 800a016:	6022      	str	r2, [r4, #0]
 800a018:	9345      	str	r3, [sp, #276]	@ 0x114
 800a01a:	e7d8      	b.n	8009fce <__ssvfiscanf_r+0x4a>
 800a01c:	9141      	str	r1, [sp, #260]	@ 0x104
 800a01e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a020:	7853      	ldrb	r3, [r2, #1]
 800a022:	2b2a      	cmp	r3, #42	@ 0x2a
 800a024:	bf02      	ittt	eq
 800a026:	2310      	moveq	r3, #16
 800a028:	1c95      	addeq	r5, r2, #2
 800a02a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a02c:	220a      	movs	r2, #10
 800a02e:	46a9      	mov	r9, r5
 800a030:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a034:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a038:	2b09      	cmp	r3, #9
 800a03a:	d91e      	bls.n	800a07a <__ssvfiscanf_r+0xf6>
 800a03c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a238 <__ssvfiscanf_r+0x2b4>
 800a040:	2203      	movs	r2, #3
 800a042:	4650      	mov	r0, sl
 800a044:	f7f6 f8cc 	bl	80001e0 <memchr>
 800a048:	b138      	cbz	r0, 800a05a <__ssvfiscanf_r+0xd6>
 800a04a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a04c:	eba0 000a 	sub.w	r0, r0, sl
 800a050:	2301      	movs	r3, #1
 800a052:	4083      	lsls	r3, r0
 800a054:	4313      	orrs	r3, r2
 800a056:	9341      	str	r3, [sp, #260]	@ 0x104
 800a058:	464d      	mov	r5, r9
 800a05a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a05e:	2b78      	cmp	r3, #120	@ 0x78
 800a060:	d806      	bhi.n	800a070 <__ssvfiscanf_r+0xec>
 800a062:	2b57      	cmp	r3, #87	@ 0x57
 800a064:	d810      	bhi.n	800a088 <__ssvfiscanf_r+0x104>
 800a066:	2b25      	cmp	r3, #37	@ 0x25
 800a068:	d0c5      	beq.n	8009ff6 <__ssvfiscanf_r+0x72>
 800a06a:	d857      	bhi.n	800a11c <__ssvfiscanf_r+0x198>
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d065      	beq.n	800a13c <__ssvfiscanf_r+0x1b8>
 800a070:	2303      	movs	r3, #3
 800a072:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a074:	230a      	movs	r3, #10
 800a076:	9342      	str	r3, [sp, #264]	@ 0x108
 800a078:	e078      	b.n	800a16c <__ssvfiscanf_r+0x1e8>
 800a07a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a07c:	fb02 1103 	mla	r1, r2, r3, r1
 800a080:	3930      	subs	r1, #48	@ 0x30
 800a082:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a084:	464d      	mov	r5, r9
 800a086:	e7d2      	b.n	800a02e <__ssvfiscanf_r+0xaa>
 800a088:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a08c:	2a20      	cmp	r2, #32
 800a08e:	d8ef      	bhi.n	800a070 <__ssvfiscanf_r+0xec>
 800a090:	a101      	add	r1, pc, #4	@ (adr r1, 800a098 <__ssvfiscanf_r+0x114>)
 800a092:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a096:	bf00      	nop
 800a098:	0800a14b 	.word	0x0800a14b
 800a09c:	0800a071 	.word	0x0800a071
 800a0a0:	0800a071 	.word	0x0800a071
 800a0a4:	0800a1a5 	.word	0x0800a1a5
 800a0a8:	0800a071 	.word	0x0800a071
 800a0ac:	0800a071 	.word	0x0800a071
 800a0b0:	0800a071 	.word	0x0800a071
 800a0b4:	0800a071 	.word	0x0800a071
 800a0b8:	0800a071 	.word	0x0800a071
 800a0bc:	0800a071 	.word	0x0800a071
 800a0c0:	0800a071 	.word	0x0800a071
 800a0c4:	0800a1bb 	.word	0x0800a1bb
 800a0c8:	0800a1a1 	.word	0x0800a1a1
 800a0cc:	0800a123 	.word	0x0800a123
 800a0d0:	0800a123 	.word	0x0800a123
 800a0d4:	0800a123 	.word	0x0800a123
 800a0d8:	0800a071 	.word	0x0800a071
 800a0dc:	0800a15d 	.word	0x0800a15d
 800a0e0:	0800a071 	.word	0x0800a071
 800a0e4:	0800a071 	.word	0x0800a071
 800a0e8:	0800a071 	.word	0x0800a071
 800a0ec:	0800a071 	.word	0x0800a071
 800a0f0:	0800a1cb 	.word	0x0800a1cb
 800a0f4:	0800a165 	.word	0x0800a165
 800a0f8:	0800a143 	.word	0x0800a143
 800a0fc:	0800a071 	.word	0x0800a071
 800a100:	0800a071 	.word	0x0800a071
 800a104:	0800a1c7 	.word	0x0800a1c7
 800a108:	0800a071 	.word	0x0800a071
 800a10c:	0800a1a1 	.word	0x0800a1a1
 800a110:	0800a071 	.word	0x0800a071
 800a114:	0800a071 	.word	0x0800a071
 800a118:	0800a14b 	.word	0x0800a14b
 800a11c:	3b45      	subs	r3, #69	@ 0x45
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d8a6      	bhi.n	800a070 <__ssvfiscanf_r+0xec>
 800a122:	2305      	movs	r3, #5
 800a124:	e021      	b.n	800a16a <__ssvfiscanf_r+0x1e6>
 800a126:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a128:	4621      	mov	r1, r4
 800a12a:	4630      	mov	r0, r6
 800a12c:	4798      	blx	r3
 800a12e:	2800      	cmp	r0, #0
 800a130:	f43f af66 	beq.w	800a000 <__ssvfiscanf_r+0x7c>
 800a134:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a136:	2800      	cmp	r0, #0
 800a138:	f040 808b 	bne.w	800a252 <__ssvfiscanf_r+0x2ce>
 800a13c:	f04f 30ff 	mov.w	r0, #4294967295
 800a140:	e08b      	b.n	800a25a <__ssvfiscanf_r+0x2d6>
 800a142:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a144:	f042 0220 	orr.w	r2, r2, #32
 800a148:	9241      	str	r2, [sp, #260]	@ 0x104
 800a14a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a14c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a150:	9241      	str	r2, [sp, #260]	@ 0x104
 800a152:	2210      	movs	r2, #16
 800a154:	2b6e      	cmp	r3, #110	@ 0x6e
 800a156:	9242      	str	r2, [sp, #264]	@ 0x108
 800a158:	d902      	bls.n	800a160 <__ssvfiscanf_r+0x1dc>
 800a15a:	e005      	b.n	800a168 <__ssvfiscanf_r+0x1e4>
 800a15c:	2300      	movs	r3, #0
 800a15e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a160:	2303      	movs	r3, #3
 800a162:	e002      	b.n	800a16a <__ssvfiscanf_r+0x1e6>
 800a164:	2308      	movs	r3, #8
 800a166:	9342      	str	r3, [sp, #264]	@ 0x108
 800a168:	2304      	movs	r3, #4
 800a16a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a16c:	6863      	ldr	r3, [r4, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	dd39      	ble.n	800a1e6 <__ssvfiscanf_r+0x262>
 800a172:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a174:	0659      	lsls	r1, r3, #25
 800a176:	d404      	bmi.n	800a182 <__ssvfiscanf_r+0x1fe>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	781a      	ldrb	r2, [r3, #0]
 800a17c:	5cba      	ldrb	r2, [r7, r2]
 800a17e:	0712      	lsls	r2, r2, #28
 800a180:	d438      	bmi.n	800a1f4 <__ssvfiscanf_r+0x270>
 800a182:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a184:	2b02      	cmp	r3, #2
 800a186:	dc47      	bgt.n	800a218 <__ssvfiscanf_r+0x294>
 800a188:	466b      	mov	r3, sp
 800a18a:	4622      	mov	r2, r4
 800a18c:	a941      	add	r1, sp, #260	@ 0x104
 800a18e:	4630      	mov	r0, r6
 800a190:	f000 f86c 	bl	800a26c <_scanf_chars>
 800a194:	2801      	cmp	r0, #1
 800a196:	d064      	beq.n	800a262 <__ssvfiscanf_r+0x2de>
 800a198:	2802      	cmp	r0, #2
 800a19a:	f47f af18 	bne.w	8009fce <__ssvfiscanf_r+0x4a>
 800a19e:	e7c9      	b.n	800a134 <__ssvfiscanf_r+0x1b0>
 800a1a0:	220a      	movs	r2, #10
 800a1a2:	e7d7      	b.n	800a154 <__ssvfiscanf_r+0x1d0>
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	f000 fa6c 	bl	800a684 <__sccl>
 800a1ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1b2:	9341      	str	r3, [sp, #260]	@ 0x104
 800a1b4:	4605      	mov	r5, r0
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e7d7      	b.n	800a16a <__ssvfiscanf_r+0x1e6>
 800a1ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a1bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1c0:	9341      	str	r3, [sp, #260]	@ 0x104
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e7d1      	b.n	800a16a <__ssvfiscanf_r+0x1e6>
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	e7cf      	b.n	800a16a <__ssvfiscanf_r+0x1e6>
 800a1ca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a1cc:	06c3      	lsls	r3, r0, #27
 800a1ce:	f53f aefe 	bmi.w	8009fce <__ssvfiscanf_r+0x4a>
 800a1d2:	9b00      	ldr	r3, [sp, #0]
 800a1d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a1d6:	1d19      	adds	r1, r3, #4
 800a1d8:	9100      	str	r1, [sp, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	07c0      	lsls	r0, r0, #31
 800a1de:	bf4c      	ite	mi
 800a1e0:	801a      	strhmi	r2, [r3, #0]
 800a1e2:	601a      	strpl	r2, [r3, #0]
 800a1e4:	e6f3      	b.n	8009fce <__ssvfiscanf_r+0x4a>
 800a1e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	4798      	blx	r3
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d0bf      	beq.n	800a172 <__ssvfiscanf_r+0x1ee>
 800a1f2:	e79f      	b.n	800a134 <__ssvfiscanf_r+0x1b0>
 800a1f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	9245      	str	r2, [sp, #276]	@ 0x114
 800a1fa:	6862      	ldr	r2, [r4, #4]
 800a1fc:	3a01      	subs	r2, #1
 800a1fe:	2a00      	cmp	r2, #0
 800a200:	6062      	str	r2, [r4, #4]
 800a202:	dd02      	ble.n	800a20a <__ssvfiscanf_r+0x286>
 800a204:	3301      	adds	r3, #1
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	e7b6      	b.n	800a178 <__ssvfiscanf_r+0x1f4>
 800a20a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a20c:	4621      	mov	r1, r4
 800a20e:	4630      	mov	r0, r6
 800a210:	4798      	blx	r3
 800a212:	2800      	cmp	r0, #0
 800a214:	d0b0      	beq.n	800a178 <__ssvfiscanf_r+0x1f4>
 800a216:	e78d      	b.n	800a134 <__ssvfiscanf_r+0x1b0>
 800a218:	2b04      	cmp	r3, #4
 800a21a:	dc0f      	bgt.n	800a23c <__ssvfiscanf_r+0x2b8>
 800a21c:	466b      	mov	r3, sp
 800a21e:	4622      	mov	r2, r4
 800a220:	a941      	add	r1, sp, #260	@ 0x104
 800a222:	4630      	mov	r0, r6
 800a224:	f000 f87c 	bl	800a320 <_scanf_i>
 800a228:	e7b4      	b.n	800a194 <__ssvfiscanf_r+0x210>
 800a22a:	bf00      	nop
 800a22c:	08009ed5 	.word	0x08009ed5
 800a230:	08009f4b 	.word	0x08009f4b
 800a234:	0800cf21 	.word	0x0800cf21
 800a238:	0800d027 	.word	0x0800d027
 800a23c:	4b0a      	ldr	r3, [pc, #40]	@ (800a268 <__ssvfiscanf_r+0x2e4>)
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f43f aec5 	beq.w	8009fce <__ssvfiscanf_r+0x4a>
 800a244:	466b      	mov	r3, sp
 800a246:	4622      	mov	r2, r4
 800a248:	a941      	add	r1, sp, #260	@ 0x104
 800a24a:	4630      	mov	r0, r6
 800a24c:	f7fd f856 	bl	80072fc <_scanf_float>
 800a250:	e7a0      	b.n	800a194 <__ssvfiscanf_r+0x210>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	065b      	lsls	r3, r3, #25
 800a256:	f53f af71 	bmi.w	800a13c <__ssvfiscanf_r+0x1b8>
 800a25a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a262:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a264:	e7f9      	b.n	800a25a <__ssvfiscanf_r+0x2d6>
 800a266:	bf00      	nop
 800a268:	080072fd 	.word	0x080072fd

0800a26c <_scanf_chars>:
 800a26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a270:	4615      	mov	r5, r2
 800a272:	688a      	ldr	r2, [r1, #8]
 800a274:	4680      	mov	r8, r0
 800a276:	460c      	mov	r4, r1
 800a278:	b932      	cbnz	r2, 800a288 <_scanf_chars+0x1c>
 800a27a:	698a      	ldr	r2, [r1, #24]
 800a27c:	2a00      	cmp	r2, #0
 800a27e:	bf14      	ite	ne
 800a280:	f04f 32ff 	movne.w	r2, #4294967295
 800a284:	2201      	moveq	r2, #1
 800a286:	608a      	str	r2, [r1, #8]
 800a288:	6822      	ldr	r2, [r4, #0]
 800a28a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a31c <_scanf_chars+0xb0>
 800a28e:	06d1      	lsls	r1, r2, #27
 800a290:	bf5f      	itttt	pl
 800a292:	681a      	ldrpl	r2, [r3, #0]
 800a294:	1d11      	addpl	r1, r2, #4
 800a296:	6019      	strpl	r1, [r3, #0]
 800a298:	6816      	ldrpl	r6, [r2, #0]
 800a29a:	2700      	movs	r7, #0
 800a29c:	69a0      	ldr	r0, [r4, #24]
 800a29e:	b188      	cbz	r0, 800a2c4 <_scanf_chars+0x58>
 800a2a0:	2801      	cmp	r0, #1
 800a2a2:	d107      	bne.n	800a2b4 <_scanf_chars+0x48>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	781a      	ldrb	r2, [r3, #0]
 800a2a8:	6963      	ldr	r3, [r4, #20]
 800a2aa:	5c9b      	ldrb	r3, [r3, r2]
 800a2ac:	b953      	cbnz	r3, 800a2c4 <_scanf_chars+0x58>
 800a2ae:	2f00      	cmp	r7, #0
 800a2b0:	d031      	beq.n	800a316 <_scanf_chars+0xaa>
 800a2b2:	e022      	b.n	800a2fa <_scanf_chars+0x8e>
 800a2b4:	2802      	cmp	r0, #2
 800a2b6:	d120      	bne.n	800a2fa <_scanf_chars+0x8e>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a2c0:	071b      	lsls	r3, r3, #28
 800a2c2:	d41a      	bmi.n	800a2fa <_scanf_chars+0x8e>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	06da      	lsls	r2, r3, #27
 800a2c8:	bf5e      	ittt	pl
 800a2ca:	682b      	ldrpl	r3, [r5, #0]
 800a2cc:	781b      	ldrbpl	r3, [r3, #0]
 800a2ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a2d2:	682a      	ldr	r2, [r5, #0]
 800a2d4:	686b      	ldr	r3, [r5, #4]
 800a2d6:	3201      	adds	r2, #1
 800a2d8:	602a      	str	r2, [r5, #0]
 800a2da:	68a2      	ldr	r2, [r4, #8]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	3a01      	subs	r2, #1
 800a2e0:	606b      	str	r3, [r5, #4]
 800a2e2:	3701      	adds	r7, #1
 800a2e4:	60a2      	str	r2, [r4, #8]
 800a2e6:	b142      	cbz	r2, 800a2fa <_scanf_chars+0x8e>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	dcd7      	bgt.n	800a29c <_scanf_chars+0x30>
 800a2ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4798      	blx	r3
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d0d0      	beq.n	800a29c <_scanf_chars+0x30>
 800a2fa:	6823      	ldr	r3, [r4, #0]
 800a2fc:	f013 0310 	ands.w	r3, r3, #16
 800a300:	d105      	bne.n	800a30e <_scanf_chars+0xa2>
 800a302:	68e2      	ldr	r2, [r4, #12]
 800a304:	3201      	adds	r2, #1
 800a306:	60e2      	str	r2, [r4, #12]
 800a308:	69a2      	ldr	r2, [r4, #24]
 800a30a:	b102      	cbz	r2, 800a30e <_scanf_chars+0xa2>
 800a30c:	7033      	strb	r3, [r6, #0]
 800a30e:	6923      	ldr	r3, [r4, #16]
 800a310:	443b      	add	r3, r7
 800a312:	6123      	str	r3, [r4, #16]
 800a314:	2000      	movs	r0, #0
 800a316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31a:	bf00      	nop
 800a31c:	0800cf21 	.word	0x0800cf21

0800a320 <_scanf_i>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	4698      	mov	r8, r3
 800a326:	4b74      	ldr	r3, [pc, #464]	@ (800a4f8 <_scanf_i+0x1d8>)
 800a328:	460c      	mov	r4, r1
 800a32a:	4682      	mov	sl, r0
 800a32c:	4616      	mov	r6, r2
 800a32e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a332:	b087      	sub	sp, #28
 800a334:	ab03      	add	r3, sp, #12
 800a336:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a33a:	4b70      	ldr	r3, [pc, #448]	@ (800a4fc <_scanf_i+0x1dc>)
 800a33c:	69a1      	ldr	r1, [r4, #24]
 800a33e:	4a70      	ldr	r2, [pc, #448]	@ (800a500 <_scanf_i+0x1e0>)
 800a340:	2903      	cmp	r1, #3
 800a342:	bf08      	it	eq
 800a344:	461a      	moveq	r2, r3
 800a346:	68a3      	ldr	r3, [r4, #8]
 800a348:	9201      	str	r2, [sp, #4]
 800a34a:	1e5a      	subs	r2, r3, #1
 800a34c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a350:	bf88      	it	hi
 800a352:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a356:	4627      	mov	r7, r4
 800a358:	bf82      	ittt	hi
 800a35a:	eb03 0905 	addhi.w	r9, r3, r5
 800a35e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a362:	60a3      	strhi	r3, [r4, #8]
 800a364:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a368:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a36c:	bf98      	it	ls
 800a36e:	f04f 0900 	movls.w	r9, #0
 800a372:	6023      	str	r3, [r4, #0]
 800a374:	463d      	mov	r5, r7
 800a376:	f04f 0b00 	mov.w	fp, #0
 800a37a:	6831      	ldr	r1, [r6, #0]
 800a37c:	ab03      	add	r3, sp, #12
 800a37e:	7809      	ldrb	r1, [r1, #0]
 800a380:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a384:	2202      	movs	r2, #2
 800a386:	f7f5 ff2b 	bl	80001e0 <memchr>
 800a38a:	b328      	cbz	r0, 800a3d8 <_scanf_i+0xb8>
 800a38c:	f1bb 0f01 	cmp.w	fp, #1
 800a390:	d159      	bne.n	800a446 <_scanf_i+0x126>
 800a392:	6862      	ldr	r2, [r4, #4]
 800a394:	b92a      	cbnz	r2, 800a3a2 <_scanf_i+0x82>
 800a396:	6822      	ldr	r2, [r4, #0]
 800a398:	2108      	movs	r1, #8
 800a39a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a39e:	6061      	str	r1, [r4, #4]
 800a3a0:	6022      	str	r2, [r4, #0]
 800a3a2:	6822      	ldr	r2, [r4, #0]
 800a3a4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a3a8:	6022      	str	r2, [r4, #0]
 800a3aa:	68a2      	ldr	r2, [r4, #8]
 800a3ac:	1e51      	subs	r1, r2, #1
 800a3ae:	60a1      	str	r1, [r4, #8]
 800a3b0:	b192      	cbz	r2, 800a3d8 <_scanf_i+0xb8>
 800a3b2:	6832      	ldr	r2, [r6, #0]
 800a3b4:	1c51      	adds	r1, r2, #1
 800a3b6:	6031      	str	r1, [r6, #0]
 800a3b8:	7812      	ldrb	r2, [r2, #0]
 800a3ba:	f805 2b01 	strb.w	r2, [r5], #1
 800a3be:	6872      	ldr	r2, [r6, #4]
 800a3c0:	3a01      	subs	r2, #1
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	6072      	str	r2, [r6, #4]
 800a3c6:	dc07      	bgt.n	800a3d8 <_scanf_i+0xb8>
 800a3c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a3cc:	4631      	mov	r1, r6
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	4790      	blx	r2
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	f040 8085 	bne.w	800a4e2 <_scanf_i+0x1c2>
 800a3d8:	f10b 0b01 	add.w	fp, fp, #1
 800a3dc:	f1bb 0f03 	cmp.w	fp, #3
 800a3e0:	d1cb      	bne.n	800a37a <_scanf_i+0x5a>
 800a3e2:	6863      	ldr	r3, [r4, #4]
 800a3e4:	b90b      	cbnz	r3, 800a3ea <_scanf_i+0xca>
 800a3e6:	230a      	movs	r3, #10
 800a3e8:	6063      	str	r3, [r4, #4]
 800a3ea:	6863      	ldr	r3, [r4, #4]
 800a3ec:	4945      	ldr	r1, [pc, #276]	@ (800a504 <_scanf_i+0x1e4>)
 800a3ee:	6960      	ldr	r0, [r4, #20]
 800a3f0:	1ac9      	subs	r1, r1, r3
 800a3f2:	f000 f947 	bl	800a684 <__sccl>
 800a3f6:	f04f 0b00 	mov.w	fp, #0
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	6822      	ldr	r2, [r4, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d03d      	beq.n	800a47e <_scanf_i+0x15e>
 800a402:	6831      	ldr	r1, [r6, #0]
 800a404:	6960      	ldr	r0, [r4, #20]
 800a406:	f891 c000 	ldrb.w	ip, [r1]
 800a40a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a40e:	2800      	cmp	r0, #0
 800a410:	d035      	beq.n	800a47e <_scanf_i+0x15e>
 800a412:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a416:	d124      	bne.n	800a462 <_scanf_i+0x142>
 800a418:	0510      	lsls	r0, r2, #20
 800a41a:	d522      	bpl.n	800a462 <_scanf_i+0x142>
 800a41c:	f10b 0b01 	add.w	fp, fp, #1
 800a420:	f1b9 0f00 	cmp.w	r9, #0
 800a424:	d003      	beq.n	800a42e <_scanf_i+0x10e>
 800a426:	3301      	adds	r3, #1
 800a428:	f109 39ff 	add.w	r9, r9, #4294967295
 800a42c:	60a3      	str	r3, [r4, #8]
 800a42e:	6873      	ldr	r3, [r6, #4]
 800a430:	3b01      	subs	r3, #1
 800a432:	2b00      	cmp	r3, #0
 800a434:	6073      	str	r3, [r6, #4]
 800a436:	dd1b      	ble.n	800a470 <_scanf_i+0x150>
 800a438:	6833      	ldr	r3, [r6, #0]
 800a43a:	3301      	adds	r3, #1
 800a43c:	6033      	str	r3, [r6, #0]
 800a43e:	68a3      	ldr	r3, [r4, #8]
 800a440:	3b01      	subs	r3, #1
 800a442:	60a3      	str	r3, [r4, #8]
 800a444:	e7d9      	b.n	800a3fa <_scanf_i+0xda>
 800a446:	f1bb 0f02 	cmp.w	fp, #2
 800a44a:	d1ae      	bne.n	800a3aa <_scanf_i+0x8a>
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a452:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a456:	d1bf      	bne.n	800a3d8 <_scanf_i+0xb8>
 800a458:	2110      	movs	r1, #16
 800a45a:	6061      	str	r1, [r4, #4]
 800a45c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a460:	e7a2      	b.n	800a3a8 <_scanf_i+0x88>
 800a462:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a466:	6022      	str	r2, [r4, #0]
 800a468:	780b      	ldrb	r3, [r1, #0]
 800a46a:	f805 3b01 	strb.w	r3, [r5], #1
 800a46e:	e7de      	b.n	800a42e <_scanf_i+0x10e>
 800a470:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a474:	4631      	mov	r1, r6
 800a476:	4650      	mov	r0, sl
 800a478:	4798      	blx	r3
 800a47a:	2800      	cmp	r0, #0
 800a47c:	d0df      	beq.n	800a43e <_scanf_i+0x11e>
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	05d9      	lsls	r1, r3, #23
 800a482:	d50d      	bpl.n	800a4a0 <_scanf_i+0x180>
 800a484:	42bd      	cmp	r5, r7
 800a486:	d909      	bls.n	800a49c <_scanf_i+0x17c>
 800a488:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a48c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a490:	4632      	mov	r2, r6
 800a492:	4650      	mov	r0, sl
 800a494:	4798      	blx	r3
 800a496:	f105 39ff 	add.w	r9, r5, #4294967295
 800a49a:	464d      	mov	r5, r9
 800a49c:	42bd      	cmp	r5, r7
 800a49e:	d028      	beq.n	800a4f2 <_scanf_i+0x1d2>
 800a4a0:	6822      	ldr	r2, [r4, #0]
 800a4a2:	f012 0210 	ands.w	r2, r2, #16
 800a4a6:	d113      	bne.n	800a4d0 <_scanf_i+0x1b0>
 800a4a8:	702a      	strb	r2, [r5, #0]
 800a4aa:	6863      	ldr	r3, [r4, #4]
 800a4ac:	9e01      	ldr	r6, [sp, #4]
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	4650      	mov	r0, sl
 800a4b2:	47b0      	blx	r6
 800a4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a4b8:	6821      	ldr	r1, [r4, #0]
 800a4ba:	1d1a      	adds	r2, r3, #4
 800a4bc:	f8c8 2000 	str.w	r2, [r8]
 800a4c0:	f011 0f20 	tst.w	r1, #32
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	d00f      	beq.n	800a4e8 <_scanf_i+0x1c8>
 800a4c8:	6018      	str	r0, [r3, #0]
 800a4ca:	68e3      	ldr	r3, [r4, #12]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	60e3      	str	r3, [r4, #12]
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	1bed      	subs	r5, r5, r7
 800a4d4:	445d      	add	r5, fp
 800a4d6:	442b      	add	r3, r5
 800a4d8:	6123      	str	r3, [r4, #16]
 800a4da:	2000      	movs	r0, #0
 800a4dc:	b007      	add	sp, #28
 800a4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e2:	f04f 0b00 	mov.w	fp, #0
 800a4e6:	e7ca      	b.n	800a47e <_scanf_i+0x15e>
 800a4e8:	07ca      	lsls	r2, r1, #31
 800a4ea:	bf4c      	ite	mi
 800a4ec:	8018      	strhmi	r0, [r3, #0]
 800a4ee:	6018      	strpl	r0, [r3, #0]
 800a4f0:	e7eb      	b.n	800a4ca <_scanf_i+0x1aa>
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	e7f2      	b.n	800a4dc <_scanf_i+0x1bc>
 800a4f6:	bf00      	nop
 800a4f8:	0800cb8c 	.word	0x0800cb8c
 800a4fc:	08009c09 	.word	0x08009c09
 800a500:	0800a931 	.word	0x0800a931
 800a504:	0800d042 	.word	0x0800d042

0800a508 <__sflush_r>:
 800a508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	0716      	lsls	r6, r2, #28
 800a512:	4605      	mov	r5, r0
 800a514:	460c      	mov	r4, r1
 800a516:	d454      	bmi.n	800a5c2 <__sflush_r+0xba>
 800a518:	684b      	ldr	r3, [r1, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	dc02      	bgt.n	800a524 <__sflush_r+0x1c>
 800a51e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a520:	2b00      	cmp	r3, #0
 800a522:	dd48      	ble.n	800a5b6 <__sflush_r+0xae>
 800a524:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a526:	2e00      	cmp	r6, #0
 800a528:	d045      	beq.n	800a5b6 <__sflush_r+0xae>
 800a52a:	2300      	movs	r3, #0
 800a52c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a530:	682f      	ldr	r7, [r5, #0]
 800a532:	6a21      	ldr	r1, [r4, #32]
 800a534:	602b      	str	r3, [r5, #0]
 800a536:	d030      	beq.n	800a59a <__sflush_r+0x92>
 800a538:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	0759      	lsls	r1, r3, #29
 800a53e:	d505      	bpl.n	800a54c <__sflush_r+0x44>
 800a540:	6863      	ldr	r3, [r4, #4]
 800a542:	1ad2      	subs	r2, r2, r3
 800a544:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a546:	b10b      	cbz	r3, 800a54c <__sflush_r+0x44>
 800a548:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a54a:	1ad2      	subs	r2, r2, r3
 800a54c:	2300      	movs	r3, #0
 800a54e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a550:	6a21      	ldr	r1, [r4, #32]
 800a552:	4628      	mov	r0, r5
 800a554:	47b0      	blx	r6
 800a556:	1c43      	adds	r3, r0, #1
 800a558:	89a3      	ldrh	r3, [r4, #12]
 800a55a:	d106      	bne.n	800a56a <__sflush_r+0x62>
 800a55c:	6829      	ldr	r1, [r5, #0]
 800a55e:	291d      	cmp	r1, #29
 800a560:	d82b      	bhi.n	800a5ba <__sflush_r+0xb2>
 800a562:	4a2a      	ldr	r2, [pc, #168]	@ (800a60c <__sflush_r+0x104>)
 800a564:	410a      	asrs	r2, r1
 800a566:	07d6      	lsls	r6, r2, #31
 800a568:	d427      	bmi.n	800a5ba <__sflush_r+0xb2>
 800a56a:	2200      	movs	r2, #0
 800a56c:	6062      	str	r2, [r4, #4]
 800a56e:	04d9      	lsls	r1, r3, #19
 800a570:	6922      	ldr	r2, [r4, #16]
 800a572:	6022      	str	r2, [r4, #0]
 800a574:	d504      	bpl.n	800a580 <__sflush_r+0x78>
 800a576:	1c42      	adds	r2, r0, #1
 800a578:	d101      	bne.n	800a57e <__sflush_r+0x76>
 800a57a:	682b      	ldr	r3, [r5, #0]
 800a57c:	b903      	cbnz	r3, 800a580 <__sflush_r+0x78>
 800a57e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a582:	602f      	str	r7, [r5, #0]
 800a584:	b1b9      	cbz	r1, 800a5b6 <__sflush_r+0xae>
 800a586:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a58a:	4299      	cmp	r1, r3
 800a58c:	d002      	beq.n	800a594 <__sflush_r+0x8c>
 800a58e:	4628      	mov	r0, r5
 800a590:	f7fe f9c2 	bl	8008918 <_free_r>
 800a594:	2300      	movs	r3, #0
 800a596:	6363      	str	r3, [r4, #52]	@ 0x34
 800a598:	e00d      	b.n	800a5b6 <__sflush_r+0xae>
 800a59a:	2301      	movs	r3, #1
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b0      	blx	r6
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	1c50      	adds	r0, r2, #1
 800a5a4:	d1c9      	bne.n	800a53a <__sflush_r+0x32>
 800a5a6:	682b      	ldr	r3, [r5, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d0c6      	beq.n	800a53a <__sflush_r+0x32>
 800a5ac:	2b1d      	cmp	r3, #29
 800a5ae:	d001      	beq.n	800a5b4 <__sflush_r+0xac>
 800a5b0:	2b16      	cmp	r3, #22
 800a5b2:	d11e      	bne.n	800a5f2 <__sflush_r+0xea>
 800a5b4:	602f      	str	r7, [r5, #0]
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	e022      	b.n	800a600 <__sflush_r+0xf8>
 800a5ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5be:	b21b      	sxth	r3, r3
 800a5c0:	e01b      	b.n	800a5fa <__sflush_r+0xf2>
 800a5c2:	690f      	ldr	r7, [r1, #16]
 800a5c4:	2f00      	cmp	r7, #0
 800a5c6:	d0f6      	beq.n	800a5b6 <__sflush_r+0xae>
 800a5c8:	0793      	lsls	r3, r2, #30
 800a5ca:	680e      	ldr	r6, [r1, #0]
 800a5cc:	bf08      	it	eq
 800a5ce:	694b      	ldreq	r3, [r1, #20]
 800a5d0:	600f      	str	r7, [r1, #0]
 800a5d2:	bf18      	it	ne
 800a5d4:	2300      	movne	r3, #0
 800a5d6:	eba6 0807 	sub.w	r8, r6, r7
 800a5da:	608b      	str	r3, [r1, #8]
 800a5dc:	f1b8 0f00 	cmp.w	r8, #0
 800a5e0:	dde9      	ble.n	800a5b6 <__sflush_r+0xae>
 800a5e2:	6a21      	ldr	r1, [r4, #32]
 800a5e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a5e6:	4643      	mov	r3, r8
 800a5e8:	463a      	mov	r2, r7
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	47b0      	blx	r6
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	dc08      	bgt.n	800a604 <__sflush_r+0xfc>
 800a5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5fa:	81a3      	strh	r3, [r4, #12]
 800a5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a604:	4407      	add	r7, r0
 800a606:	eba8 0800 	sub.w	r8, r8, r0
 800a60a:	e7e7      	b.n	800a5dc <__sflush_r+0xd4>
 800a60c:	dfbffffe 	.word	0xdfbffffe

0800a610 <_fflush_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	690b      	ldr	r3, [r1, #16]
 800a614:	4605      	mov	r5, r0
 800a616:	460c      	mov	r4, r1
 800a618:	b913      	cbnz	r3, 800a620 <_fflush_r+0x10>
 800a61a:	2500      	movs	r5, #0
 800a61c:	4628      	mov	r0, r5
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	b118      	cbz	r0, 800a62a <_fflush_r+0x1a>
 800a622:	6a03      	ldr	r3, [r0, #32]
 800a624:	b90b      	cbnz	r3, 800a62a <_fflush_r+0x1a>
 800a626:	f7fd f909 	bl	800783c <__sinit>
 800a62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d0f3      	beq.n	800a61a <_fflush_r+0xa>
 800a632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a634:	07d0      	lsls	r0, r2, #31
 800a636:	d404      	bmi.n	800a642 <_fflush_r+0x32>
 800a638:	0599      	lsls	r1, r3, #22
 800a63a:	d402      	bmi.n	800a642 <_fflush_r+0x32>
 800a63c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a63e:	f7fd fae2 	bl	8007c06 <__retarget_lock_acquire_recursive>
 800a642:	4628      	mov	r0, r5
 800a644:	4621      	mov	r1, r4
 800a646:	f7ff ff5f 	bl	800a508 <__sflush_r>
 800a64a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a64c:	07da      	lsls	r2, r3, #31
 800a64e:	4605      	mov	r5, r0
 800a650:	d4e4      	bmi.n	800a61c <_fflush_r+0xc>
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	059b      	lsls	r3, r3, #22
 800a656:	d4e1      	bmi.n	800a61c <_fflush_r+0xc>
 800a658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a65a:	f7fd fad5 	bl	8007c08 <__retarget_lock_release_recursive>
 800a65e:	e7dd      	b.n	800a61c <_fflush_r+0xc>

0800a660 <fiprintf>:
 800a660:	b40e      	push	{r1, r2, r3}
 800a662:	b503      	push	{r0, r1, lr}
 800a664:	4601      	mov	r1, r0
 800a666:	ab03      	add	r3, sp, #12
 800a668:	4805      	ldr	r0, [pc, #20]	@ (800a680 <fiprintf+0x20>)
 800a66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66e:	6800      	ldr	r0, [r0, #0]
 800a670:	9301      	str	r3, [sp, #4]
 800a672:	f000 f989 	bl	800a988 <_vfiprintf_r>
 800a676:	b002      	add	sp, #8
 800a678:	f85d eb04 	ldr.w	lr, [sp], #4
 800a67c:	b003      	add	sp, #12
 800a67e:	4770      	bx	lr
 800a680:	200001d4 	.word	0x200001d4

0800a684 <__sccl>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	780b      	ldrb	r3, [r1, #0]
 800a688:	4604      	mov	r4, r0
 800a68a:	2b5e      	cmp	r3, #94	@ 0x5e
 800a68c:	bf0b      	itete	eq
 800a68e:	784b      	ldrbeq	r3, [r1, #1]
 800a690:	1c4a      	addne	r2, r1, #1
 800a692:	1c8a      	addeq	r2, r1, #2
 800a694:	2100      	movne	r1, #0
 800a696:	bf08      	it	eq
 800a698:	2101      	moveq	r1, #1
 800a69a:	3801      	subs	r0, #1
 800a69c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a6a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a6a4:	42a8      	cmp	r0, r5
 800a6a6:	d1fb      	bne.n	800a6a0 <__sccl+0x1c>
 800a6a8:	b90b      	cbnz	r3, 800a6ae <__sccl+0x2a>
 800a6aa:	1e50      	subs	r0, r2, #1
 800a6ac:	bd70      	pop	{r4, r5, r6, pc}
 800a6ae:	f081 0101 	eor.w	r1, r1, #1
 800a6b2:	54e1      	strb	r1, [r4, r3]
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a6bc:	2d2d      	cmp	r5, #45	@ 0x2d
 800a6be:	d005      	beq.n	800a6cc <__sccl+0x48>
 800a6c0:	2d5d      	cmp	r5, #93	@ 0x5d
 800a6c2:	d016      	beq.n	800a6f2 <__sccl+0x6e>
 800a6c4:	2d00      	cmp	r5, #0
 800a6c6:	d0f1      	beq.n	800a6ac <__sccl+0x28>
 800a6c8:	462b      	mov	r3, r5
 800a6ca:	e7f2      	b.n	800a6b2 <__sccl+0x2e>
 800a6cc:	7846      	ldrb	r6, [r0, #1]
 800a6ce:	2e5d      	cmp	r6, #93	@ 0x5d
 800a6d0:	d0fa      	beq.n	800a6c8 <__sccl+0x44>
 800a6d2:	42b3      	cmp	r3, r6
 800a6d4:	dcf8      	bgt.n	800a6c8 <__sccl+0x44>
 800a6d6:	3002      	adds	r0, #2
 800a6d8:	461a      	mov	r2, r3
 800a6da:	3201      	adds	r2, #1
 800a6dc:	4296      	cmp	r6, r2
 800a6de:	54a1      	strb	r1, [r4, r2]
 800a6e0:	dcfb      	bgt.n	800a6da <__sccl+0x56>
 800a6e2:	1af2      	subs	r2, r6, r3
 800a6e4:	3a01      	subs	r2, #1
 800a6e6:	1c5d      	adds	r5, r3, #1
 800a6e8:	42b3      	cmp	r3, r6
 800a6ea:	bfa8      	it	ge
 800a6ec:	2200      	movge	r2, #0
 800a6ee:	18ab      	adds	r3, r5, r2
 800a6f0:	e7e1      	b.n	800a6b6 <__sccl+0x32>
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	e7da      	b.n	800a6ac <__sccl+0x28>

0800a6f6 <__submore>:
 800a6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a6fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a702:	4299      	cmp	r1, r3
 800a704:	d11d      	bne.n	800a742 <__submore+0x4c>
 800a706:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a70a:	f7fe fcb3 	bl	8009074 <_malloc_r>
 800a70e:	b918      	cbnz	r0, 800a718 <__submore+0x22>
 800a710:	f04f 30ff 	mov.w	r0, #4294967295
 800a714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a71c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a71e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a722:	6360      	str	r0, [r4, #52]	@ 0x34
 800a724:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a728:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a72c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a730:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a734:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a738:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a73c:	6020      	str	r0, [r4, #0]
 800a73e:	2000      	movs	r0, #0
 800a740:	e7e8      	b.n	800a714 <__submore+0x1e>
 800a742:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a744:	0077      	lsls	r7, r6, #1
 800a746:	463a      	mov	r2, r7
 800a748:	f000 f855 	bl	800a7f6 <_realloc_r>
 800a74c:	4605      	mov	r5, r0
 800a74e:	2800      	cmp	r0, #0
 800a750:	d0de      	beq.n	800a710 <__submore+0x1a>
 800a752:	eb00 0806 	add.w	r8, r0, r6
 800a756:	4601      	mov	r1, r0
 800a758:	4632      	mov	r2, r6
 800a75a:	4640      	mov	r0, r8
 800a75c:	f7fd fa55 	bl	8007c0a <memcpy>
 800a760:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a764:	f8c4 8000 	str.w	r8, [r4]
 800a768:	e7e9      	b.n	800a73e <__submore+0x48>

0800a76a <memmove>:
 800a76a:	4288      	cmp	r0, r1
 800a76c:	b510      	push	{r4, lr}
 800a76e:	eb01 0402 	add.w	r4, r1, r2
 800a772:	d902      	bls.n	800a77a <memmove+0x10>
 800a774:	4284      	cmp	r4, r0
 800a776:	4623      	mov	r3, r4
 800a778:	d807      	bhi.n	800a78a <memmove+0x20>
 800a77a:	1e43      	subs	r3, r0, #1
 800a77c:	42a1      	cmp	r1, r4
 800a77e:	d008      	beq.n	800a792 <memmove+0x28>
 800a780:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a784:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a788:	e7f8      	b.n	800a77c <memmove+0x12>
 800a78a:	4402      	add	r2, r0
 800a78c:	4601      	mov	r1, r0
 800a78e:	428a      	cmp	r2, r1
 800a790:	d100      	bne.n	800a794 <memmove+0x2a>
 800a792:	bd10      	pop	{r4, pc}
 800a794:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a798:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a79c:	e7f7      	b.n	800a78e <memmove+0x24>
	...

0800a7a0 <_sbrk_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d06      	ldr	r5, [pc, #24]	@ (800a7bc <_sbrk_r+0x1c>)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	4608      	mov	r0, r1
 800a7aa:	602b      	str	r3, [r5, #0]
 800a7ac:	f7f7 fdcc 	bl	8002348 <_sbrk>
 800a7b0:	1c43      	adds	r3, r0, #1
 800a7b2:	d102      	bne.n	800a7ba <_sbrk_r+0x1a>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	b103      	cbz	r3, 800a7ba <_sbrk_r+0x1a>
 800a7b8:	6023      	str	r3, [r4, #0]
 800a7ba:	bd38      	pop	{r3, r4, r5, pc}
 800a7bc:	2000096c 	.word	0x2000096c

0800a7c0 <abort>:
 800a7c0:	b508      	push	{r3, lr}
 800a7c2:	2006      	movs	r0, #6
 800a7c4:	f000 fab4 	bl	800ad30 <raise>
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	f7f7 fd45 	bl	8002258 <_exit>

0800a7ce <_calloc_r>:
 800a7ce:	b570      	push	{r4, r5, r6, lr}
 800a7d0:	fba1 5402 	umull	r5, r4, r1, r2
 800a7d4:	b93c      	cbnz	r4, 800a7e6 <_calloc_r+0x18>
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	f7fe fc4c 	bl	8009074 <_malloc_r>
 800a7dc:	4606      	mov	r6, r0
 800a7de:	b928      	cbnz	r0, 800a7ec <_calloc_r+0x1e>
 800a7e0:	2600      	movs	r6, #0
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	bd70      	pop	{r4, r5, r6, pc}
 800a7e6:	220c      	movs	r2, #12
 800a7e8:	6002      	str	r2, [r0, #0]
 800a7ea:	e7f9      	b.n	800a7e0 <_calloc_r+0x12>
 800a7ec:	462a      	mov	r2, r5
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	f7fd f91d 	bl	8007a2e <memset>
 800a7f4:	e7f5      	b.n	800a7e2 <_calloc_r+0x14>

0800a7f6 <_realloc_r>:
 800a7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fa:	4680      	mov	r8, r0
 800a7fc:	4615      	mov	r5, r2
 800a7fe:	460c      	mov	r4, r1
 800a800:	b921      	cbnz	r1, 800a80c <_realloc_r+0x16>
 800a802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a806:	4611      	mov	r1, r2
 800a808:	f7fe bc34 	b.w	8009074 <_malloc_r>
 800a80c:	b92a      	cbnz	r2, 800a81a <_realloc_r+0x24>
 800a80e:	f7fe f883 	bl	8008918 <_free_r>
 800a812:	2400      	movs	r4, #0
 800a814:	4620      	mov	r0, r4
 800a816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a81a:	f000 faa5 	bl	800ad68 <_malloc_usable_size_r>
 800a81e:	4285      	cmp	r5, r0
 800a820:	4606      	mov	r6, r0
 800a822:	d802      	bhi.n	800a82a <_realloc_r+0x34>
 800a824:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a828:	d8f4      	bhi.n	800a814 <_realloc_r+0x1e>
 800a82a:	4629      	mov	r1, r5
 800a82c:	4640      	mov	r0, r8
 800a82e:	f7fe fc21 	bl	8009074 <_malloc_r>
 800a832:	4607      	mov	r7, r0
 800a834:	2800      	cmp	r0, #0
 800a836:	d0ec      	beq.n	800a812 <_realloc_r+0x1c>
 800a838:	42b5      	cmp	r5, r6
 800a83a:	462a      	mov	r2, r5
 800a83c:	4621      	mov	r1, r4
 800a83e:	bf28      	it	cs
 800a840:	4632      	movcs	r2, r6
 800a842:	f7fd f9e2 	bl	8007c0a <memcpy>
 800a846:	4621      	mov	r1, r4
 800a848:	4640      	mov	r0, r8
 800a84a:	f7fe f865 	bl	8008918 <_free_r>
 800a84e:	463c      	mov	r4, r7
 800a850:	e7e0      	b.n	800a814 <_realloc_r+0x1e>
	...

0800a854 <_strtoul_l.constprop.0>:
 800a854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a858:	4e34      	ldr	r6, [pc, #208]	@ (800a92c <_strtoul_l.constprop.0+0xd8>)
 800a85a:	4686      	mov	lr, r0
 800a85c:	460d      	mov	r5, r1
 800a85e:	4628      	mov	r0, r5
 800a860:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a864:	5d37      	ldrb	r7, [r6, r4]
 800a866:	f017 0708 	ands.w	r7, r7, #8
 800a86a:	d1f8      	bne.n	800a85e <_strtoul_l.constprop.0+0xa>
 800a86c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a86e:	d12f      	bne.n	800a8d0 <_strtoul_l.constprop.0+0x7c>
 800a870:	782c      	ldrb	r4, [r5, #0]
 800a872:	2701      	movs	r7, #1
 800a874:	1c85      	adds	r5, r0, #2
 800a876:	f033 0010 	bics.w	r0, r3, #16
 800a87a:	d109      	bne.n	800a890 <_strtoul_l.constprop.0+0x3c>
 800a87c:	2c30      	cmp	r4, #48	@ 0x30
 800a87e:	d12c      	bne.n	800a8da <_strtoul_l.constprop.0+0x86>
 800a880:	7828      	ldrb	r0, [r5, #0]
 800a882:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a886:	2858      	cmp	r0, #88	@ 0x58
 800a888:	d127      	bne.n	800a8da <_strtoul_l.constprop.0+0x86>
 800a88a:	786c      	ldrb	r4, [r5, #1]
 800a88c:	2310      	movs	r3, #16
 800a88e:	3502      	adds	r5, #2
 800a890:	f04f 38ff 	mov.w	r8, #4294967295
 800a894:	2600      	movs	r6, #0
 800a896:	fbb8 f8f3 	udiv	r8, r8, r3
 800a89a:	fb03 f908 	mul.w	r9, r3, r8
 800a89e:	ea6f 0909 	mvn.w	r9, r9
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a8a8:	f1bc 0f09 	cmp.w	ip, #9
 800a8ac:	d81c      	bhi.n	800a8e8 <_strtoul_l.constprop.0+0x94>
 800a8ae:	4664      	mov	r4, ip
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	dd2a      	ble.n	800a90a <_strtoul_l.constprop.0+0xb6>
 800a8b4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a8b8:	d007      	beq.n	800a8ca <_strtoul_l.constprop.0+0x76>
 800a8ba:	4580      	cmp	r8, r0
 800a8bc:	d322      	bcc.n	800a904 <_strtoul_l.constprop.0+0xb0>
 800a8be:	d101      	bne.n	800a8c4 <_strtoul_l.constprop.0+0x70>
 800a8c0:	45a1      	cmp	r9, r4
 800a8c2:	db1f      	blt.n	800a904 <_strtoul_l.constprop.0+0xb0>
 800a8c4:	fb00 4003 	mla	r0, r0, r3, r4
 800a8c8:	2601      	movs	r6, #1
 800a8ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8ce:	e7e9      	b.n	800a8a4 <_strtoul_l.constprop.0+0x50>
 800a8d0:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8d2:	bf04      	itt	eq
 800a8d4:	782c      	ldrbeq	r4, [r5, #0]
 800a8d6:	1c85      	addeq	r5, r0, #2
 800a8d8:	e7cd      	b.n	800a876 <_strtoul_l.constprop.0+0x22>
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1d8      	bne.n	800a890 <_strtoul_l.constprop.0+0x3c>
 800a8de:	2c30      	cmp	r4, #48	@ 0x30
 800a8e0:	bf0c      	ite	eq
 800a8e2:	2308      	moveq	r3, #8
 800a8e4:	230a      	movne	r3, #10
 800a8e6:	e7d3      	b.n	800a890 <_strtoul_l.constprop.0+0x3c>
 800a8e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a8ec:	f1bc 0f19 	cmp.w	ip, #25
 800a8f0:	d801      	bhi.n	800a8f6 <_strtoul_l.constprop.0+0xa2>
 800a8f2:	3c37      	subs	r4, #55	@ 0x37
 800a8f4:	e7dc      	b.n	800a8b0 <_strtoul_l.constprop.0+0x5c>
 800a8f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a8fa:	f1bc 0f19 	cmp.w	ip, #25
 800a8fe:	d804      	bhi.n	800a90a <_strtoul_l.constprop.0+0xb6>
 800a900:	3c57      	subs	r4, #87	@ 0x57
 800a902:	e7d5      	b.n	800a8b0 <_strtoul_l.constprop.0+0x5c>
 800a904:	f04f 36ff 	mov.w	r6, #4294967295
 800a908:	e7df      	b.n	800a8ca <_strtoul_l.constprop.0+0x76>
 800a90a:	1c73      	adds	r3, r6, #1
 800a90c:	d106      	bne.n	800a91c <_strtoul_l.constprop.0+0xc8>
 800a90e:	2322      	movs	r3, #34	@ 0x22
 800a910:	f8ce 3000 	str.w	r3, [lr]
 800a914:	4630      	mov	r0, r6
 800a916:	b932      	cbnz	r2, 800a926 <_strtoul_l.constprop.0+0xd2>
 800a918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91c:	b107      	cbz	r7, 800a920 <_strtoul_l.constprop.0+0xcc>
 800a91e:	4240      	negs	r0, r0
 800a920:	2a00      	cmp	r2, #0
 800a922:	d0f9      	beq.n	800a918 <_strtoul_l.constprop.0+0xc4>
 800a924:	b106      	cbz	r6, 800a928 <_strtoul_l.constprop.0+0xd4>
 800a926:	1e69      	subs	r1, r5, #1
 800a928:	6011      	str	r1, [r2, #0]
 800a92a:	e7f5      	b.n	800a918 <_strtoul_l.constprop.0+0xc4>
 800a92c:	0800cf21 	.word	0x0800cf21

0800a930 <_strtoul_r>:
 800a930:	f7ff bf90 	b.w	800a854 <_strtoul_l.constprop.0>

0800a934 <__sfputc_r>:
 800a934:	6893      	ldr	r3, [r2, #8]
 800a936:	3b01      	subs	r3, #1
 800a938:	2b00      	cmp	r3, #0
 800a93a:	b410      	push	{r4}
 800a93c:	6093      	str	r3, [r2, #8]
 800a93e:	da08      	bge.n	800a952 <__sfputc_r+0x1e>
 800a940:	6994      	ldr	r4, [r2, #24]
 800a942:	42a3      	cmp	r3, r4
 800a944:	db01      	blt.n	800a94a <__sfputc_r+0x16>
 800a946:	290a      	cmp	r1, #10
 800a948:	d103      	bne.n	800a952 <__sfputc_r+0x1e>
 800a94a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a94e:	f000 b933 	b.w	800abb8 <__swbuf_r>
 800a952:	6813      	ldr	r3, [r2, #0]
 800a954:	1c58      	adds	r0, r3, #1
 800a956:	6010      	str	r0, [r2, #0]
 800a958:	7019      	strb	r1, [r3, #0]
 800a95a:	4608      	mov	r0, r1
 800a95c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <__sfputs_r>:
 800a962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a964:	4606      	mov	r6, r0
 800a966:	460f      	mov	r7, r1
 800a968:	4614      	mov	r4, r2
 800a96a:	18d5      	adds	r5, r2, r3
 800a96c:	42ac      	cmp	r4, r5
 800a96e:	d101      	bne.n	800a974 <__sfputs_r+0x12>
 800a970:	2000      	movs	r0, #0
 800a972:	e007      	b.n	800a984 <__sfputs_r+0x22>
 800a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a978:	463a      	mov	r2, r7
 800a97a:	4630      	mov	r0, r6
 800a97c:	f7ff ffda 	bl	800a934 <__sfputc_r>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d1f3      	bne.n	800a96c <__sfputs_r+0xa>
 800a984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a988 <_vfiprintf_r>:
 800a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	460d      	mov	r5, r1
 800a98e:	b09d      	sub	sp, #116	@ 0x74
 800a990:	4614      	mov	r4, r2
 800a992:	4698      	mov	r8, r3
 800a994:	4606      	mov	r6, r0
 800a996:	b118      	cbz	r0, 800a9a0 <_vfiprintf_r+0x18>
 800a998:	6a03      	ldr	r3, [r0, #32]
 800a99a:	b90b      	cbnz	r3, 800a9a0 <_vfiprintf_r+0x18>
 800a99c:	f7fc ff4e 	bl	800783c <__sinit>
 800a9a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9a2:	07d9      	lsls	r1, r3, #31
 800a9a4:	d405      	bmi.n	800a9b2 <_vfiprintf_r+0x2a>
 800a9a6:	89ab      	ldrh	r3, [r5, #12]
 800a9a8:	059a      	lsls	r2, r3, #22
 800a9aa:	d402      	bmi.n	800a9b2 <_vfiprintf_r+0x2a>
 800a9ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ae:	f7fd f92a 	bl	8007c06 <__retarget_lock_acquire_recursive>
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	071b      	lsls	r3, r3, #28
 800a9b6:	d501      	bpl.n	800a9bc <_vfiprintf_r+0x34>
 800a9b8:	692b      	ldr	r3, [r5, #16]
 800a9ba:	b99b      	cbnz	r3, 800a9e4 <_vfiprintf_r+0x5c>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4630      	mov	r0, r6
 800a9c0:	f000 f938 	bl	800ac34 <__swsetup_r>
 800a9c4:	b170      	cbz	r0, 800a9e4 <_vfiprintf_r+0x5c>
 800a9c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9c8:	07dc      	lsls	r4, r3, #31
 800a9ca:	d504      	bpl.n	800a9d6 <_vfiprintf_r+0x4e>
 800a9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d0:	b01d      	add	sp, #116	@ 0x74
 800a9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d6:	89ab      	ldrh	r3, [r5, #12]
 800a9d8:	0598      	lsls	r0, r3, #22
 800a9da:	d4f7      	bmi.n	800a9cc <_vfiprintf_r+0x44>
 800a9dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9de:	f7fd f913 	bl	8007c08 <__retarget_lock_release_recursive>
 800a9e2:	e7f3      	b.n	800a9cc <_vfiprintf_r+0x44>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9e8:	2320      	movs	r3, #32
 800a9ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9f2:	2330      	movs	r3, #48	@ 0x30
 800a9f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aba4 <_vfiprintf_r+0x21c>
 800a9f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9fc:	f04f 0901 	mov.w	r9, #1
 800aa00:	4623      	mov	r3, r4
 800aa02:	469a      	mov	sl, r3
 800aa04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa08:	b10a      	cbz	r2, 800aa0e <_vfiprintf_r+0x86>
 800aa0a:	2a25      	cmp	r2, #37	@ 0x25
 800aa0c:	d1f9      	bne.n	800aa02 <_vfiprintf_r+0x7a>
 800aa0e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa12:	d00b      	beq.n	800aa2c <_vfiprintf_r+0xa4>
 800aa14:	465b      	mov	r3, fp
 800aa16:	4622      	mov	r2, r4
 800aa18:	4629      	mov	r1, r5
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f7ff ffa1 	bl	800a962 <__sfputs_r>
 800aa20:	3001      	adds	r0, #1
 800aa22:	f000 80a7 	beq.w	800ab74 <_vfiprintf_r+0x1ec>
 800aa26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa28:	445a      	add	r2, fp
 800aa2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa2c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 809f 	beq.w	800ab74 <_vfiprintf_r+0x1ec>
 800aa36:	2300      	movs	r3, #0
 800aa38:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa40:	f10a 0a01 	add.w	sl, sl, #1
 800aa44:	9304      	str	r3, [sp, #16]
 800aa46:	9307      	str	r3, [sp, #28]
 800aa48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa4e:	4654      	mov	r4, sl
 800aa50:	2205      	movs	r2, #5
 800aa52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa56:	4853      	ldr	r0, [pc, #332]	@ (800aba4 <_vfiprintf_r+0x21c>)
 800aa58:	f7f5 fbc2 	bl	80001e0 <memchr>
 800aa5c:	9a04      	ldr	r2, [sp, #16]
 800aa5e:	b9d8      	cbnz	r0, 800aa98 <_vfiprintf_r+0x110>
 800aa60:	06d1      	lsls	r1, r2, #27
 800aa62:	bf44      	itt	mi
 800aa64:	2320      	movmi	r3, #32
 800aa66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa6a:	0713      	lsls	r3, r2, #28
 800aa6c:	bf44      	itt	mi
 800aa6e:	232b      	movmi	r3, #43	@ 0x2b
 800aa70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa74:	f89a 3000 	ldrb.w	r3, [sl]
 800aa78:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa7a:	d015      	beq.n	800aaa8 <_vfiprintf_r+0x120>
 800aa7c:	9a07      	ldr	r2, [sp, #28]
 800aa7e:	4654      	mov	r4, sl
 800aa80:	2000      	movs	r0, #0
 800aa82:	f04f 0c0a 	mov.w	ip, #10
 800aa86:	4621      	mov	r1, r4
 800aa88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa8c:	3b30      	subs	r3, #48	@ 0x30
 800aa8e:	2b09      	cmp	r3, #9
 800aa90:	d94b      	bls.n	800ab2a <_vfiprintf_r+0x1a2>
 800aa92:	b1b0      	cbz	r0, 800aac2 <_vfiprintf_r+0x13a>
 800aa94:	9207      	str	r2, [sp, #28]
 800aa96:	e014      	b.n	800aac2 <_vfiprintf_r+0x13a>
 800aa98:	eba0 0308 	sub.w	r3, r0, r8
 800aa9c:	fa09 f303 	lsl.w	r3, r9, r3
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	9304      	str	r3, [sp, #16]
 800aaa4:	46a2      	mov	sl, r4
 800aaa6:	e7d2      	b.n	800aa4e <_vfiprintf_r+0xc6>
 800aaa8:	9b03      	ldr	r3, [sp, #12]
 800aaaa:	1d19      	adds	r1, r3, #4
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	9103      	str	r1, [sp, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	bfbb      	ittet	lt
 800aab4:	425b      	neglt	r3, r3
 800aab6:	f042 0202 	orrlt.w	r2, r2, #2
 800aaba:	9307      	strge	r3, [sp, #28]
 800aabc:	9307      	strlt	r3, [sp, #28]
 800aabe:	bfb8      	it	lt
 800aac0:	9204      	strlt	r2, [sp, #16]
 800aac2:	7823      	ldrb	r3, [r4, #0]
 800aac4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aac6:	d10a      	bne.n	800aade <_vfiprintf_r+0x156>
 800aac8:	7863      	ldrb	r3, [r4, #1]
 800aaca:	2b2a      	cmp	r3, #42	@ 0x2a
 800aacc:	d132      	bne.n	800ab34 <_vfiprintf_r+0x1ac>
 800aace:	9b03      	ldr	r3, [sp, #12]
 800aad0:	1d1a      	adds	r2, r3, #4
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	9203      	str	r2, [sp, #12]
 800aad6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aada:	3402      	adds	r4, #2
 800aadc:	9305      	str	r3, [sp, #20]
 800aade:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abb4 <_vfiprintf_r+0x22c>
 800aae2:	7821      	ldrb	r1, [r4, #0]
 800aae4:	2203      	movs	r2, #3
 800aae6:	4650      	mov	r0, sl
 800aae8:	f7f5 fb7a 	bl	80001e0 <memchr>
 800aaec:	b138      	cbz	r0, 800aafe <_vfiprintf_r+0x176>
 800aaee:	9b04      	ldr	r3, [sp, #16]
 800aaf0:	eba0 000a 	sub.w	r0, r0, sl
 800aaf4:	2240      	movs	r2, #64	@ 0x40
 800aaf6:	4082      	lsls	r2, r0
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	3401      	adds	r4, #1
 800aafc:	9304      	str	r3, [sp, #16]
 800aafe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab02:	4829      	ldr	r0, [pc, #164]	@ (800aba8 <_vfiprintf_r+0x220>)
 800ab04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab08:	2206      	movs	r2, #6
 800ab0a:	f7f5 fb69 	bl	80001e0 <memchr>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	d03f      	beq.n	800ab92 <_vfiprintf_r+0x20a>
 800ab12:	4b26      	ldr	r3, [pc, #152]	@ (800abac <_vfiprintf_r+0x224>)
 800ab14:	bb1b      	cbnz	r3, 800ab5e <_vfiprintf_r+0x1d6>
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	3307      	adds	r3, #7
 800ab1a:	f023 0307 	bic.w	r3, r3, #7
 800ab1e:	3308      	adds	r3, #8
 800ab20:	9303      	str	r3, [sp, #12]
 800ab22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab24:	443b      	add	r3, r7
 800ab26:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab28:	e76a      	b.n	800aa00 <_vfiprintf_r+0x78>
 800ab2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab2e:	460c      	mov	r4, r1
 800ab30:	2001      	movs	r0, #1
 800ab32:	e7a8      	b.n	800aa86 <_vfiprintf_r+0xfe>
 800ab34:	2300      	movs	r3, #0
 800ab36:	3401      	adds	r4, #1
 800ab38:	9305      	str	r3, [sp, #20]
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	f04f 0c0a 	mov.w	ip, #10
 800ab40:	4620      	mov	r0, r4
 800ab42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab46:	3a30      	subs	r2, #48	@ 0x30
 800ab48:	2a09      	cmp	r2, #9
 800ab4a:	d903      	bls.n	800ab54 <_vfiprintf_r+0x1cc>
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d0c6      	beq.n	800aade <_vfiprintf_r+0x156>
 800ab50:	9105      	str	r1, [sp, #20]
 800ab52:	e7c4      	b.n	800aade <_vfiprintf_r+0x156>
 800ab54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab58:	4604      	mov	r4, r0
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e7f0      	b.n	800ab40 <_vfiprintf_r+0x1b8>
 800ab5e:	ab03      	add	r3, sp, #12
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	462a      	mov	r2, r5
 800ab64:	4b12      	ldr	r3, [pc, #72]	@ (800abb0 <_vfiprintf_r+0x228>)
 800ab66:	a904      	add	r1, sp, #16
 800ab68:	4630      	mov	r0, r6
 800ab6a:	f7fc f80f 	bl	8006b8c <_printf_float>
 800ab6e:	4607      	mov	r7, r0
 800ab70:	1c78      	adds	r0, r7, #1
 800ab72:	d1d6      	bne.n	800ab22 <_vfiprintf_r+0x19a>
 800ab74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab76:	07d9      	lsls	r1, r3, #31
 800ab78:	d405      	bmi.n	800ab86 <_vfiprintf_r+0x1fe>
 800ab7a:	89ab      	ldrh	r3, [r5, #12]
 800ab7c:	059a      	lsls	r2, r3, #22
 800ab7e:	d402      	bmi.n	800ab86 <_vfiprintf_r+0x1fe>
 800ab80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab82:	f7fd f841 	bl	8007c08 <__retarget_lock_release_recursive>
 800ab86:	89ab      	ldrh	r3, [r5, #12]
 800ab88:	065b      	lsls	r3, r3, #25
 800ab8a:	f53f af1f 	bmi.w	800a9cc <_vfiprintf_r+0x44>
 800ab8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab90:	e71e      	b.n	800a9d0 <_vfiprintf_r+0x48>
 800ab92:	ab03      	add	r3, sp, #12
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	462a      	mov	r2, r5
 800ab98:	4b05      	ldr	r3, [pc, #20]	@ (800abb0 <_vfiprintf_r+0x228>)
 800ab9a:	a904      	add	r1, sp, #16
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f7fc fa8d 	bl	80070bc <_printf_i>
 800aba2:	e7e4      	b.n	800ab6e <_vfiprintf_r+0x1e6>
 800aba4:	0800d021 	.word	0x0800d021
 800aba8:	0800d02b 	.word	0x0800d02b
 800abac:	08006b8d 	.word	0x08006b8d
 800abb0:	0800a963 	.word	0x0800a963
 800abb4:	0800d027 	.word	0x0800d027

0800abb8 <__swbuf_r>:
 800abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abba:	460e      	mov	r6, r1
 800abbc:	4614      	mov	r4, r2
 800abbe:	4605      	mov	r5, r0
 800abc0:	b118      	cbz	r0, 800abca <__swbuf_r+0x12>
 800abc2:	6a03      	ldr	r3, [r0, #32]
 800abc4:	b90b      	cbnz	r3, 800abca <__swbuf_r+0x12>
 800abc6:	f7fc fe39 	bl	800783c <__sinit>
 800abca:	69a3      	ldr	r3, [r4, #24]
 800abcc:	60a3      	str	r3, [r4, #8]
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	071a      	lsls	r2, r3, #28
 800abd2:	d501      	bpl.n	800abd8 <__swbuf_r+0x20>
 800abd4:	6923      	ldr	r3, [r4, #16]
 800abd6:	b943      	cbnz	r3, 800abea <__swbuf_r+0x32>
 800abd8:	4621      	mov	r1, r4
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 f82a 	bl	800ac34 <__swsetup_r>
 800abe0:	b118      	cbz	r0, 800abea <__swbuf_r+0x32>
 800abe2:	f04f 37ff 	mov.w	r7, #4294967295
 800abe6:	4638      	mov	r0, r7
 800abe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	6922      	ldr	r2, [r4, #16]
 800abee:	1a98      	subs	r0, r3, r2
 800abf0:	6963      	ldr	r3, [r4, #20]
 800abf2:	b2f6      	uxtb	r6, r6
 800abf4:	4283      	cmp	r3, r0
 800abf6:	4637      	mov	r7, r6
 800abf8:	dc05      	bgt.n	800ac06 <__swbuf_r+0x4e>
 800abfa:	4621      	mov	r1, r4
 800abfc:	4628      	mov	r0, r5
 800abfe:	f7ff fd07 	bl	800a610 <_fflush_r>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d1ed      	bne.n	800abe2 <__swbuf_r+0x2a>
 800ac06:	68a3      	ldr	r3, [r4, #8]
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	60a3      	str	r3, [r4, #8]
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	6022      	str	r2, [r4, #0]
 800ac12:	701e      	strb	r6, [r3, #0]
 800ac14:	6962      	ldr	r2, [r4, #20]
 800ac16:	1c43      	adds	r3, r0, #1
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d004      	beq.n	800ac26 <__swbuf_r+0x6e>
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	07db      	lsls	r3, r3, #31
 800ac20:	d5e1      	bpl.n	800abe6 <__swbuf_r+0x2e>
 800ac22:	2e0a      	cmp	r6, #10
 800ac24:	d1df      	bne.n	800abe6 <__swbuf_r+0x2e>
 800ac26:	4621      	mov	r1, r4
 800ac28:	4628      	mov	r0, r5
 800ac2a:	f7ff fcf1 	bl	800a610 <_fflush_r>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d0d9      	beq.n	800abe6 <__swbuf_r+0x2e>
 800ac32:	e7d6      	b.n	800abe2 <__swbuf_r+0x2a>

0800ac34 <__swsetup_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4b29      	ldr	r3, [pc, #164]	@ (800acdc <__swsetup_r+0xa8>)
 800ac38:	4605      	mov	r5, r0
 800ac3a:	6818      	ldr	r0, [r3, #0]
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	b118      	cbz	r0, 800ac48 <__swsetup_r+0x14>
 800ac40:	6a03      	ldr	r3, [r0, #32]
 800ac42:	b90b      	cbnz	r3, 800ac48 <__swsetup_r+0x14>
 800ac44:	f7fc fdfa 	bl	800783c <__sinit>
 800ac48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac4c:	0719      	lsls	r1, r3, #28
 800ac4e:	d422      	bmi.n	800ac96 <__swsetup_r+0x62>
 800ac50:	06da      	lsls	r2, r3, #27
 800ac52:	d407      	bmi.n	800ac64 <__swsetup_r+0x30>
 800ac54:	2209      	movs	r2, #9
 800ac56:	602a      	str	r2, [r5, #0]
 800ac58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac5c:	81a3      	strh	r3, [r4, #12]
 800ac5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac62:	e033      	b.n	800accc <__swsetup_r+0x98>
 800ac64:	0758      	lsls	r0, r3, #29
 800ac66:	d512      	bpl.n	800ac8e <__swsetup_r+0x5a>
 800ac68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac6a:	b141      	cbz	r1, 800ac7e <__swsetup_r+0x4a>
 800ac6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac70:	4299      	cmp	r1, r3
 800ac72:	d002      	beq.n	800ac7a <__swsetup_r+0x46>
 800ac74:	4628      	mov	r0, r5
 800ac76:	f7fd fe4f 	bl	8008918 <_free_r>
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	2300      	movs	r3, #0
 800ac88:	6063      	str	r3, [r4, #4]
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	f043 0308 	orr.w	r3, r3, #8
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	6923      	ldr	r3, [r4, #16]
 800ac98:	b94b      	cbnz	r3, 800acae <__swsetup_r+0x7a>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aca4:	d003      	beq.n	800acae <__swsetup_r+0x7a>
 800aca6:	4621      	mov	r1, r4
 800aca8:	4628      	mov	r0, r5
 800acaa:	f000 f88b 	bl	800adc4 <__smakebuf_r>
 800acae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acb2:	f013 0201 	ands.w	r2, r3, #1
 800acb6:	d00a      	beq.n	800acce <__swsetup_r+0x9a>
 800acb8:	2200      	movs	r2, #0
 800acba:	60a2      	str	r2, [r4, #8]
 800acbc:	6962      	ldr	r2, [r4, #20]
 800acbe:	4252      	negs	r2, r2
 800acc0:	61a2      	str	r2, [r4, #24]
 800acc2:	6922      	ldr	r2, [r4, #16]
 800acc4:	b942      	cbnz	r2, 800acd8 <__swsetup_r+0xa4>
 800acc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acca:	d1c5      	bne.n	800ac58 <__swsetup_r+0x24>
 800accc:	bd38      	pop	{r3, r4, r5, pc}
 800acce:	0799      	lsls	r1, r3, #30
 800acd0:	bf58      	it	pl
 800acd2:	6962      	ldrpl	r2, [r4, #20]
 800acd4:	60a2      	str	r2, [r4, #8]
 800acd6:	e7f4      	b.n	800acc2 <__swsetup_r+0x8e>
 800acd8:	2000      	movs	r0, #0
 800acda:	e7f7      	b.n	800accc <__swsetup_r+0x98>
 800acdc:	200001d4 	.word	0x200001d4

0800ace0 <_raise_r>:
 800ace0:	291f      	cmp	r1, #31
 800ace2:	b538      	push	{r3, r4, r5, lr}
 800ace4:	4605      	mov	r5, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	d904      	bls.n	800acf4 <_raise_r+0x14>
 800acea:	2316      	movs	r3, #22
 800acec:	6003      	str	r3, [r0, #0]
 800acee:	f04f 30ff 	mov.w	r0, #4294967295
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800acf6:	b112      	cbz	r2, 800acfe <_raise_r+0x1e>
 800acf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acfc:	b94b      	cbnz	r3, 800ad12 <_raise_r+0x32>
 800acfe:	4628      	mov	r0, r5
 800ad00:	f000 f830 	bl	800ad64 <_getpid_r>
 800ad04:	4622      	mov	r2, r4
 800ad06:	4601      	mov	r1, r0
 800ad08:	4628      	mov	r0, r5
 800ad0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad0e:	f000 b817 	b.w	800ad40 <_kill_r>
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d00a      	beq.n	800ad2c <_raise_r+0x4c>
 800ad16:	1c59      	adds	r1, r3, #1
 800ad18:	d103      	bne.n	800ad22 <_raise_r+0x42>
 800ad1a:	2316      	movs	r3, #22
 800ad1c:	6003      	str	r3, [r0, #0]
 800ad1e:	2001      	movs	r0, #1
 800ad20:	e7e7      	b.n	800acf2 <_raise_r+0x12>
 800ad22:	2100      	movs	r1, #0
 800ad24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad28:	4620      	mov	r0, r4
 800ad2a:	4798      	blx	r3
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	e7e0      	b.n	800acf2 <_raise_r+0x12>

0800ad30 <raise>:
 800ad30:	4b02      	ldr	r3, [pc, #8]	@ (800ad3c <raise+0xc>)
 800ad32:	4601      	mov	r1, r0
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	f7ff bfd3 	b.w	800ace0 <_raise_r>
 800ad3a:	bf00      	nop
 800ad3c:	200001d4 	.word	0x200001d4

0800ad40 <_kill_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d07      	ldr	r5, [pc, #28]	@ (800ad60 <_kill_r+0x20>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	602b      	str	r3, [r5, #0]
 800ad4e:	f7f7 fa73 	bl	8002238 <_kill>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	d102      	bne.n	800ad5c <_kill_r+0x1c>
 800ad56:	682b      	ldr	r3, [r5, #0]
 800ad58:	b103      	cbz	r3, 800ad5c <_kill_r+0x1c>
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	bd38      	pop	{r3, r4, r5, pc}
 800ad5e:	bf00      	nop
 800ad60:	2000096c 	.word	0x2000096c

0800ad64 <_getpid_r>:
 800ad64:	f7f7 ba60 	b.w	8002228 <_getpid>

0800ad68 <_malloc_usable_size_r>:
 800ad68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad6c:	1f18      	subs	r0, r3, #4
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfbc      	itt	lt
 800ad72:	580b      	ldrlt	r3, [r1, r0]
 800ad74:	18c0      	addlt	r0, r0, r3
 800ad76:	4770      	bx	lr

0800ad78 <__swhatbuf_r>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad80:	2900      	cmp	r1, #0
 800ad82:	b096      	sub	sp, #88	@ 0x58
 800ad84:	4615      	mov	r5, r2
 800ad86:	461e      	mov	r6, r3
 800ad88:	da0d      	bge.n	800ada6 <__swhatbuf_r+0x2e>
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad90:	f04f 0100 	mov.w	r1, #0
 800ad94:	bf14      	ite	ne
 800ad96:	2340      	movne	r3, #64	@ 0x40
 800ad98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	6031      	str	r1, [r6, #0]
 800ada0:	602b      	str	r3, [r5, #0]
 800ada2:	b016      	add	sp, #88	@ 0x58
 800ada4:	bd70      	pop	{r4, r5, r6, pc}
 800ada6:	466a      	mov	r2, sp
 800ada8:	f000 f848 	bl	800ae3c <_fstat_r>
 800adac:	2800      	cmp	r0, #0
 800adae:	dbec      	blt.n	800ad8a <__swhatbuf_r+0x12>
 800adb0:	9901      	ldr	r1, [sp, #4]
 800adb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800adba:	4259      	negs	r1, r3
 800adbc:	4159      	adcs	r1, r3
 800adbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adc2:	e7eb      	b.n	800ad9c <__swhatbuf_r+0x24>

0800adc4 <__smakebuf_r>:
 800adc4:	898b      	ldrh	r3, [r1, #12]
 800adc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adc8:	079d      	lsls	r5, r3, #30
 800adca:	4606      	mov	r6, r0
 800adcc:	460c      	mov	r4, r1
 800adce:	d507      	bpl.n	800ade0 <__smakebuf_r+0x1c>
 800add0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	6123      	str	r3, [r4, #16]
 800add8:	2301      	movs	r3, #1
 800adda:	6163      	str	r3, [r4, #20]
 800addc:	b003      	add	sp, #12
 800adde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade0:	ab01      	add	r3, sp, #4
 800ade2:	466a      	mov	r2, sp
 800ade4:	f7ff ffc8 	bl	800ad78 <__swhatbuf_r>
 800ade8:	9f00      	ldr	r7, [sp, #0]
 800adea:	4605      	mov	r5, r0
 800adec:	4639      	mov	r1, r7
 800adee:	4630      	mov	r0, r6
 800adf0:	f7fe f940 	bl	8009074 <_malloc_r>
 800adf4:	b948      	cbnz	r0, 800ae0a <__smakebuf_r+0x46>
 800adf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adfa:	059a      	lsls	r2, r3, #22
 800adfc:	d4ee      	bmi.n	800addc <__smakebuf_r+0x18>
 800adfe:	f023 0303 	bic.w	r3, r3, #3
 800ae02:	f043 0302 	orr.w	r3, r3, #2
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	e7e2      	b.n	800add0 <__smakebuf_r+0xc>
 800ae0a:	89a3      	ldrh	r3, [r4, #12]
 800ae0c:	6020      	str	r0, [r4, #0]
 800ae0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae1a:	b15b      	cbz	r3, 800ae34 <__smakebuf_r+0x70>
 800ae1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae20:	4630      	mov	r0, r6
 800ae22:	f000 f81d 	bl	800ae60 <_isatty_r>
 800ae26:	b128      	cbz	r0, 800ae34 <__smakebuf_r+0x70>
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	f023 0303 	bic.w	r3, r3, #3
 800ae2e:	f043 0301 	orr.w	r3, r3, #1
 800ae32:	81a3      	strh	r3, [r4, #12]
 800ae34:	89a3      	ldrh	r3, [r4, #12]
 800ae36:	431d      	orrs	r5, r3
 800ae38:	81a5      	strh	r5, [r4, #12]
 800ae3a:	e7cf      	b.n	800addc <__smakebuf_r+0x18>

0800ae3c <_fstat_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4d07      	ldr	r5, [pc, #28]	@ (800ae5c <_fstat_r+0x20>)
 800ae40:	2300      	movs	r3, #0
 800ae42:	4604      	mov	r4, r0
 800ae44:	4608      	mov	r0, r1
 800ae46:	4611      	mov	r1, r2
 800ae48:	602b      	str	r3, [r5, #0]
 800ae4a:	f7f7 fa55 	bl	80022f8 <_fstat>
 800ae4e:	1c43      	adds	r3, r0, #1
 800ae50:	d102      	bne.n	800ae58 <_fstat_r+0x1c>
 800ae52:	682b      	ldr	r3, [r5, #0]
 800ae54:	b103      	cbz	r3, 800ae58 <_fstat_r+0x1c>
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	bd38      	pop	{r3, r4, r5, pc}
 800ae5a:	bf00      	nop
 800ae5c:	2000096c 	.word	0x2000096c

0800ae60 <_isatty_r>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	4d06      	ldr	r5, [pc, #24]	@ (800ae7c <_isatty_r+0x1c>)
 800ae64:	2300      	movs	r3, #0
 800ae66:	4604      	mov	r4, r0
 800ae68:	4608      	mov	r0, r1
 800ae6a:	602b      	str	r3, [r5, #0]
 800ae6c:	f7f7 fa54 	bl	8002318 <_isatty>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_isatty_r+0x1a>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_isatty_r+0x1a>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	2000096c 	.word	0x2000096c

0800ae80 <acos>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	ed2d 8b02 	vpush	{d8}
 800ae86:	ec55 4b10 	vmov	r4, r5, d0
 800ae8a:	f000 fa3d 	bl	800b308 <__ieee754_acos>
 800ae8e:	4622      	mov	r2, r4
 800ae90:	462b      	mov	r3, r5
 800ae92:	4620      	mov	r0, r4
 800ae94:	4629      	mov	r1, r5
 800ae96:	eeb0 8a40 	vmov.f32	s16, s0
 800ae9a:	eef0 8a60 	vmov.f32	s17, s1
 800ae9e:	f7f5 fe4d 	bl	8000b3c <__aeabi_dcmpun>
 800aea2:	b9a8      	cbnz	r0, 800aed0 <acos+0x50>
 800aea4:	ec45 4b10 	vmov	d0, r4, r5
 800aea8:	f000 f8ba 	bl	800b020 <fabs>
 800aeac:	4b0c      	ldr	r3, [pc, #48]	@ (800aee0 <acos+0x60>)
 800aeae:	ec51 0b10 	vmov	r0, r1, d0
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f7f5 fe38 	bl	8000b28 <__aeabi_dcmpgt>
 800aeb8:	b150      	cbz	r0, 800aed0 <acos+0x50>
 800aeba:	f7fc fe79 	bl	8007bb0 <__errno>
 800aebe:	ecbd 8b02 	vpop	{d8}
 800aec2:	2321      	movs	r3, #33	@ 0x21
 800aec4:	6003      	str	r3, [r0, #0]
 800aec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeca:	4806      	ldr	r0, [pc, #24]	@ (800aee4 <acos+0x64>)
 800aecc:	f7fc beac 	b.w	8007c28 <nan>
 800aed0:	eeb0 0a48 	vmov.f32	s0, s16
 800aed4:	eef0 0a68 	vmov.f32	s1, s17
 800aed8:	ecbd 8b02 	vpop	{d8}
 800aedc:	bd38      	pop	{r3, r4, r5, pc}
 800aede:	bf00      	nop
 800aee0:	3ff00000 	.word	0x3ff00000
 800aee4:	0800ccf3 	.word	0x0800ccf3

0800aee8 <pow>:
 800aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeea:	ed2d 8b02 	vpush	{d8}
 800aeee:	eeb0 8a40 	vmov.f32	s16, s0
 800aef2:	eef0 8a60 	vmov.f32	s17, s1
 800aef6:	ec55 4b11 	vmov	r4, r5, d1
 800aefa:	f000 fc61 	bl	800b7c0 <__ieee754_pow>
 800aefe:	4622      	mov	r2, r4
 800af00:	462b      	mov	r3, r5
 800af02:	4620      	mov	r0, r4
 800af04:	4629      	mov	r1, r5
 800af06:	ec57 6b10 	vmov	r6, r7, d0
 800af0a:	f7f5 fe17 	bl	8000b3c <__aeabi_dcmpun>
 800af0e:	2800      	cmp	r0, #0
 800af10:	d13b      	bne.n	800af8a <pow+0xa2>
 800af12:	ec51 0b18 	vmov	r0, r1, d8
 800af16:	2200      	movs	r2, #0
 800af18:	2300      	movs	r3, #0
 800af1a:	f7f5 fddd 	bl	8000ad8 <__aeabi_dcmpeq>
 800af1e:	b1b8      	cbz	r0, 800af50 <pow+0x68>
 800af20:	2200      	movs	r2, #0
 800af22:	2300      	movs	r3, #0
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 fdd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d146      	bne.n	800afbe <pow+0xd6>
 800af30:	ec45 4b10 	vmov	d0, r4, r5
 800af34:	f000 f8f2 	bl	800b11c <finite>
 800af38:	b338      	cbz	r0, 800af8a <pow+0xa2>
 800af3a:	2200      	movs	r2, #0
 800af3c:	2300      	movs	r3, #0
 800af3e:	4620      	mov	r0, r4
 800af40:	4629      	mov	r1, r5
 800af42:	f7f5 fdd3 	bl	8000aec <__aeabi_dcmplt>
 800af46:	b300      	cbz	r0, 800af8a <pow+0xa2>
 800af48:	f7fc fe32 	bl	8007bb0 <__errno>
 800af4c:	2322      	movs	r3, #34	@ 0x22
 800af4e:	e01b      	b.n	800af88 <pow+0xa0>
 800af50:	ec47 6b10 	vmov	d0, r6, r7
 800af54:	f000 f8e2 	bl	800b11c <finite>
 800af58:	b9e0      	cbnz	r0, 800af94 <pow+0xac>
 800af5a:	eeb0 0a48 	vmov.f32	s0, s16
 800af5e:	eef0 0a68 	vmov.f32	s1, s17
 800af62:	f000 f8db 	bl	800b11c <finite>
 800af66:	b1a8      	cbz	r0, 800af94 <pow+0xac>
 800af68:	ec45 4b10 	vmov	d0, r4, r5
 800af6c:	f000 f8d6 	bl	800b11c <finite>
 800af70:	b180      	cbz	r0, 800af94 <pow+0xac>
 800af72:	4632      	mov	r2, r6
 800af74:	463b      	mov	r3, r7
 800af76:	4630      	mov	r0, r6
 800af78:	4639      	mov	r1, r7
 800af7a:	f7f5 fddf 	bl	8000b3c <__aeabi_dcmpun>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d0e2      	beq.n	800af48 <pow+0x60>
 800af82:	f7fc fe15 	bl	8007bb0 <__errno>
 800af86:	2321      	movs	r3, #33	@ 0x21
 800af88:	6003      	str	r3, [r0, #0]
 800af8a:	ecbd 8b02 	vpop	{d8}
 800af8e:	ec47 6b10 	vmov	d0, r6, r7
 800af92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af94:	2200      	movs	r2, #0
 800af96:	2300      	movs	r3, #0
 800af98:	4630      	mov	r0, r6
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 fd9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d0f2      	beq.n	800af8a <pow+0xa2>
 800afa4:	eeb0 0a48 	vmov.f32	s0, s16
 800afa8:	eef0 0a68 	vmov.f32	s1, s17
 800afac:	f000 f8b6 	bl	800b11c <finite>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d0ea      	beq.n	800af8a <pow+0xa2>
 800afb4:	ec45 4b10 	vmov	d0, r4, r5
 800afb8:	f000 f8b0 	bl	800b11c <finite>
 800afbc:	e7c3      	b.n	800af46 <pow+0x5e>
 800afbe:	4f01      	ldr	r7, [pc, #4]	@ (800afc4 <pow+0xdc>)
 800afc0:	2600      	movs	r6, #0
 800afc2:	e7e2      	b.n	800af8a <pow+0xa2>
 800afc4:	3ff00000 	.word	0x3ff00000

0800afc8 <sqrt>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	ed2d 8b02 	vpush	{d8}
 800afce:	ec55 4b10 	vmov	r4, r5, d0
 800afd2:	f000 f8b9 	bl	800b148 <__ieee754_sqrt>
 800afd6:	4622      	mov	r2, r4
 800afd8:	462b      	mov	r3, r5
 800afda:	4620      	mov	r0, r4
 800afdc:	4629      	mov	r1, r5
 800afde:	eeb0 8a40 	vmov.f32	s16, s0
 800afe2:	eef0 8a60 	vmov.f32	s17, s1
 800afe6:	f7f5 fda9 	bl	8000b3c <__aeabi_dcmpun>
 800afea:	b990      	cbnz	r0, 800b012 <sqrt+0x4a>
 800afec:	2200      	movs	r2, #0
 800afee:	2300      	movs	r3, #0
 800aff0:	4620      	mov	r0, r4
 800aff2:	4629      	mov	r1, r5
 800aff4:	f7f5 fd7a 	bl	8000aec <__aeabi_dcmplt>
 800aff8:	b158      	cbz	r0, 800b012 <sqrt+0x4a>
 800affa:	f7fc fdd9 	bl	8007bb0 <__errno>
 800affe:	2321      	movs	r3, #33	@ 0x21
 800b000:	6003      	str	r3, [r0, #0]
 800b002:	2200      	movs	r2, #0
 800b004:	2300      	movs	r3, #0
 800b006:	4610      	mov	r0, r2
 800b008:	4619      	mov	r1, r3
 800b00a:	f7f5 fc27 	bl	800085c <__aeabi_ddiv>
 800b00e:	ec41 0b18 	vmov	d8, r0, r1
 800b012:	eeb0 0a48 	vmov.f32	s0, s16
 800b016:	eef0 0a68 	vmov.f32	s1, s17
 800b01a:	ecbd 8b02 	vpop	{d8}
 800b01e:	bd38      	pop	{r3, r4, r5, pc}

0800b020 <fabs>:
 800b020:	ec51 0b10 	vmov	r0, r1, d0
 800b024:	4602      	mov	r2, r0
 800b026:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b02a:	ec43 2b10 	vmov	d0, r2, r3
 800b02e:	4770      	bx	lr

0800b030 <powf>:
 800b030:	b508      	push	{r3, lr}
 800b032:	ed2d 8b04 	vpush	{d8-d9}
 800b036:	eeb0 8a60 	vmov.f32	s16, s1
 800b03a:	eeb0 9a40 	vmov.f32	s18, s0
 800b03e:	f001 f903 	bl	800c248 <__ieee754_powf>
 800b042:	eeb4 8a48 	vcmp.f32	s16, s16
 800b046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b04a:	eef0 8a40 	vmov.f32	s17, s0
 800b04e:	d63e      	bvs.n	800b0ce <powf+0x9e>
 800b050:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b058:	d112      	bne.n	800b080 <powf+0x50>
 800b05a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b05e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b062:	d039      	beq.n	800b0d8 <powf+0xa8>
 800b064:	eeb0 0a48 	vmov.f32	s0, s16
 800b068:	f000 f863 	bl	800b132 <finitef>
 800b06c:	b378      	cbz	r0, 800b0ce <powf+0x9e>
 800b06e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b076:	d52a      	bpl.n	800b0ce <powf+0x9e>
 800b078:	f7fc fd9a 	bl	8007bb0 <__errno>
 800b07c:	2322      	movs	r3, #34	@ 0x22
 800b07e:	e014      	b.n	800b0aa <powf+0x7a>
 800b080:	f000 f857 	bl	800b132 <finitef>
 800b084:	b998      	cbnz	r0, 800b0ae <powf+0x7e>
 800b086:	eeb0 0a49 	vmov.f32	s0, s18
 800b08a:	f000 f852 	bl	800b132 <finitef>
 800b08e:	b170      	cbz	r0, 800b0ae <powf+0x7e>
 800b090:	eeb0 0a48 	vmov.f32	s0, s16
 800b094:	f000 f84d 	bl	800b132 <finitef>
 800b098:	b148      	cbz	r0, 800b0ae <powf+0x7e>
 800b09a:	eef4 8a68 	vcmp.f32	s17, s17
 800b09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a2:	d7e9      	bvc.n	800b078 <powf+0x48>
 800b0a4:	f7fc fd84 	bl	8007bb0 <__errno>
 800b0a8:	2321      	movs	r3, #33	@ 0x21
 800b0aa:	6003      	str	r3, [r0, #0]
 800b0ac:	e00f      	b.n	800b0ce <powf+0x9e>
 800b0ae:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b6:	d10a      	bne.n	800b0ce <powf+0x9e>
 800b0b8:	eeb0 0a49 	vmov.f32	s0, s18
 800b0bc:	f000 f839 	bl	800b132 <finitef>
 800b0c0:	b128      	cbz	r0, 800b0ce <powf+0x9e>
 800b0c2:	eeb0 0a48 	vmov.f32	s0, s16
 800b0c6:	f000 f834 	bl	800b132 <finitef>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d1d4      	bne.n	800b078 <powf+0x48>
 800b0ce:	eeb0 0a68 	vmov.f32	s0, s17
 800b0d2:	ecbd 8b04 	vpop	{d8-d9}
 800b0d6:	bd08      	pop	{r3, pc}
 800b0d8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b0dc:	e7f7      	b.n	800b0ce <powf+0x9e>
	...

0800b0e0 <sqrtf>:
 800b0e0:	b508      	push	{r3, lr}
 800b0e2:	ed2d 8b02 	vpush	{d8}
 800b0e6:	eeb0 8a40 	vmov.f32	s16, s0
 800b0ea:	f000 f907 	bl	800b2fc <__ieee754_sqrtf>
 800b0ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800b0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f6:	d60c      	bvs.n	800b112 <sqrtf+0x32>
 800b0f8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b118 <sqrtf+0x38>
 800b0fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b104:	d505      	bpl.n	800b112 <sqrtf+0x32>
 800b106:	f7fc fd53 	bl	8007bb0 <__errno>
 800b10a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b10e:	2321      	movs	r3, #33	@ 0x21
 800b110:	6003      	str	r3, [r0, #0]
 800b112:	ecbd 8b02 	vpop	{d8}
 800b116:	bd08      	pop	{r3, pc}
 800b118:	00000000 	.word	0x00000000

0800b11c <finite>:
 800b11c:	b082      	sub	sp, #8
 800b11e:	ed8d 0b00 	vstr	d0, [sp]
 800b122:	9801      	ldr	r0, [sp, #4]
 800b124:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b128:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b12c:	0fc0      	lsrs	r0, r0, #31
 800b12e:	b002      	add	sp, #8
 800b130:	4770      	bx	lr

0800b132 <finitef>:
 800b132:	ee10 3a10 	vmov	r3, s0
 800b136:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b13a:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b13e:	bfac      	ite	ge
 800b140:	2000      	movge	r0, #0
 800b142:	2001      	movlt	r0, #1
 800b144:	4770      	bx	lr
	...

0800b148 <__ieee754_sqrt>:
 800b148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	4a68      	ldr	r2, [pc, #416]	@ (800b2f0 <__ieee754_sqrt+0x1a8>)
 800b14e:	ec55 4b10 	vmov	r4, r5, d0
 800b152:	43aa      	bics	r2, r5
 800b154:	462b      	mov	r3, r5
 800b156:	4621      	mov	r1, r4
 800b158:	d110      	bne.n	800b17c <__ieee754_sqrt+0x34>
 800b15a:	4622      	mov	r2, r4
 800b15c:	4620      	mov	r0, r4
 800b15e:	4629      	mov	r1, r5
 800b160:	f7f5 fa52 	bl	8000608 <__aeabi_dmul>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4620      	mov	r0, r4
 800b16a:	4629      	mov	r1, r5
 800b16c:	f7f5 f896 	bl	800029c <__adddf3>
 800b170:	4604      	mov	r4, r0
 800b172:	460d      	mov	r5, r1
 800b174:	ec45 4b10 	vmov	d0, r4, r5
 800b178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	dc0e      	bgt.n	800b19e <__ieee754_sqrt+0x56>
 800b180:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b184:	4322      	orrs	r2, r4
 800b186:	d0f5      	beq.n	800b174 <__ieee754_sqrt+0x2c>
 800b188:	b19d      	cbz	r5, 800b1b2 <__ieee754_sqrt+0x6a>
 800b18a:	4622      	mov	r2, r4
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	f7f5 f882 	bl	8000298 <__aeabi_dsub>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	f7f5 fb60 	bl	800085c <__aeabi_ddiv>
 800b19c:	e7e8      	b.n	800b170 <__ieee754_sqrt+0x28>
 800b19e:	152a      	asrs	r2, r5, #20
 800b1a0:	d115      	bne.n	800b1ce <__ieee754_sqrt+0x86>
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	e009      	b.n	800b1ba <__ieee754_sqrt+0x72>
 800b1a6:	0acb      	lsrs	r3, r1, #11
 800b1a8:	3a15      	subs	r2, #21
 800b1aa:	0549      	lsls	r1, r1, #21
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d0fa      	beq.n	800b1a6 <__ieee754_sqrt+0x5e>
 800b1b0:	e7f7      	b.n	800b1a2 <__ieee754_sqrt+0x5a>
 800b1b2:	462a      	mov	r2, r5
 800b1b4:	e7fa      	b.n	800b1ac <__ieee754_sqrt+0x64>
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	02dc      	lsls	r4, r3, #11
 800b1bc:	d5fb      	bpl.n	800b1b6 <__ieee754_sqrt+0x6e>
 800b1be:	1e44      	subs	r4, r0, #1
 800b1c0:	1b12      	subs	r2, r2, r4
 800b1c2:	f1c0 0420 	rsb	r4, r0, #32
 800b1c6:	fa21 f404 	lsr.w	r4, r1, r4
 800b1ca:	4323      	orrs	r3, r4
 800b1cc:	4081      	lsls	r1, r0
 800b1ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b1d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1da:	07d2      	lsls	r2, r2, #31
 800b1dc:	bf5c      	itt	pl
 800b1de:	005b      	lslpl	r3, r3, #1
 800b1e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b1e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1e8:	bf58      	it	pl
 800b1ea:	0049      	lslpl	r1, r1, #1
 800b1ec:	2600      	movs	r6, #0
 800b1ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b1f2:	106d      	asrs	r5, r5, #1
 800b1f4:	0049      	lsls	r1, r1, #1
 800b1f6:	2016      	movs	r0, #22
 800b1f8:	4632      	mov	r2, r6
 800b1fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b1fe:	1917      	adds	r7, r2, r4
 800b200:	429f      	cmp	r7, r3
 800b202:	bfde      	ittt	le
 800b204:	193a      	addle	r2, r7, r4
 800b206:	1bdb      	suble	r3, r3, r7
 800b208:	1936      	addle	r6, r6, r4
 800b20a:	0fcf      	lsrs	r7, r1, #31
 800b20c:	3801      	subs	r0, #1
 800b20e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b212:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b216:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b21a:	d1f0      	bne.n	800b1fe <__ieee754_sqrt+0xb6>
 800b21c:	4604      	mov	r4, r0
 800b21e:	2720      	movs	r7, #32
 800b220:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b224:	429a      	cmp	r2, r3
 800b226:	eb00 0e0c 	add.w	lr, r0, ip
 800b22a:	db02      	blt.n	800b232 <__ieee754_sqrt+0xea>
 800b22c:	d113      	bne.n	800b256 <__ieee754_sqrt+0x10e>
 800b22e:	458e      	cmp	lr, r1
 800b230:	d811      	bhi.n	800b256 <__ieee754_sqrt+0x10e>
 800b232:	f1be 0f00 	cmp.w	lr, #0
 800b236:	eb0e 000c 	add.w	r0, lr, ip
 800b23a:	da42      	bge.n	800b2c2 <__ieee754_sqrt+0x17a>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	db40      	blt.n	800b2c2 <__ieee754_sqrt+0x17a>
 800b240:	f102 0801 	add.w	r8, r2, #1
 800b244:	1a9b      	subs	r3, r3, r2
 800b246:	458e      	cmp	lr, r1
 800b248:	bf88      	it	hi
 800b24a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b24e:	eba1 010e 	sub.w	r1, r1, lr
 800b252:	4464      	add	r4, ip
 800b254:	4642      	mov	r2, r8
 800b256:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b25a:	3f01      	subs	r7, #1
 800b25c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b260:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b264:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b268:	d1dc      	bne.n	800b224 <__ieee754_sqrt+0xdc>
 800b26a:	4319      	orrs	r1, r3
 800b26c:	d01b      	beq.n	800b2a6 <__ieee754_sqrt+0x15e>
 800b26e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b2f4 <__ieee754_sqrt+0x1ac>
 800b272:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b2f8 <__ieee754_sqrt+0x1b0>
 800b276:	e9da 0100 	ldrd	r0, r1, [sl]
 800b27a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b27e:	f7f5 f80b 	bl	8000298 <__aeabi_dsub>
 800b282:	e9da 8900 	ldrd	r8, r9, [sl]
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4640      	mov	r0, r8
 800b28c:	4649      	mov	r1, r9
 800b28e:	f7f5 fc37 	bl	8000b00 <__aeabi_dcmple>
 800b292:	b140      	cbz	r0, 800b2a6 <__ieee754_sqrt+0x15e>
 800b294:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b298:	e9da 0100 	ldrd	r0, r1, [sl]
 800b29c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b2a0:	d111      	bne.n	800b2c6 <__ieee754_sqrt+0x17e>
 800b2a2:	3601      	adds	r6, #1
 800b2a4:	463c      	mov	r4, r7
 800b2a6:	1072      	asrs	r2, r6, #1
 800b2a8:	0863      	lsrs	r3, r4, #1
 800b2aa:	07f1      	lsls	r1, r6, #31
 800b2ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b2b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b2b4:	bf48      	it	mi
 800b2b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b2ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b2be:	4618      	mov	r0, r3
 800b2c0:	e756      	b.n	800b170 <__ieee754_sqrt+0x28>
 800b2c2:	4690      	mov	r8, r2
 800b2c4:	e7be      	b.n	800b244 <__ieee754_sqrt+0xfc>
 800b2c6:	f7f4 ffe9 	bl	800029c <__adddf3>
 800b2ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	f7f5 fc09 	bl	8000aec <__aeabi_dcmplt>
 800b2da:	b120      	cbz	r0, 800b2e6 <__ieee754_sqrt+0x19e>
 800b2dc:	1ca0      	adds	r0, r4, #2
 800b2de:	bf08      	it	eq
 800b2e0:	3601      	addeq	r6, #1
 800b2e2:	3402      	adds	r4, #2
 800b2e4:	e7df      	b.n	800b2a6 <__ieee754_sqrt+0x15e>
 800b2e6:	1c63      	adds	r3, r4, #1
 800b2e8:	f023 0401 	bic.w	r4, r3, #1
 800b2ec:	e7db      	b.n	800b2a6 <__ieee754_sqrt+0x15e>
 800b2ee:	bf00      	nop
 800b2f0:	7ff00000 	.word	0x7ff00000
 800b2f4:	20000230 	.word	0x20000230
 800b2f8:	20000228 	.word	0x20000228

0800b2fc <__ieee754_sqrtf>:
 800b2fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b300:	4770      	bx	lr
 800b302:	0000      	movs	r0, r0
 800b304:	0000      	movs	r0, r0
	...

0800b308 <__ieee754_acos>:
 800b308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	ec55 4b10 	vmov	r4, r5, d0
 800b310:	49b7      	ldr	r1, [pc, #732]	@ (800b5f0 <__ieee754_acos+0x2e8>)
 800b312:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b316:	428b      	cmp	r3, r1
 800b318:	d919      	bls.n	800b34e <__ieee754_acos+0x46>
 800b31a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800b31e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b322:	4323      	orrs	r3, r4
 800b324:	d106      	bne.n	800b334 <__ieee754_acos+0x2c>
 800b326:	2d00      	cmp	r5, #0
 800b328:	f340 8210 	ble.w	800b74c <__ieee754_acos+0x444>
 800b32c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800b580 <__ieee754_acos+0x278>
 800b330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	4622      	mov	r2, r4
 800b336:	462b      	mov	r3, r5
 800b338:	4620      	mov	r0, r4
 800b33a:	4629      	mov	r1, r5
 800b33c:	f7f4 ffac 	bl	8000298 <__aeabi_dsub>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	f7f5 fa8a 	bl	800085c <__aeabi_ddiv>
 800b348:	ec41 0b10 	vmov	d0, r0, r1
 800b34c:	e7f0      	b.n	800b330 <__ieee754_acos+0x28>
 800b34e:	49a9      	ldr	r1, [pc, #676]	@ (800b5f4 <__ieee754_acos+0x2ec>)
 800b350:	428b      	cmp	r3, r1
 800b352:	f200 8085 	bhi.w	800b460 <__ieee754_acos+0x158>
 800b356:	4aa8      	ldr	r2, [pc, #672]	@ (800b5f8 <__ieee754_acos+0x2f0>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	f240 81fa 	bls.w	800b752 <__ieee754_acos+0x44a>
 800b35e:	4622      	mov	r2, r4
 800b360:	462b      	mov	r3, r5
 800b362:	4620      	mov	r0, r4
 800b364:	4629      	mov	r1, r5
 800b366:	f7f5 f94f 	bl	8000608 <__aeabi_dmul>
 800b36a:	a387      	add	r3, pc, #540	@ (adr r3, 800b588 <__ieee754_acos+0x280>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	4606      	mov	r6, r0
 800b372:	460f      	mov	r7, r1
 800b374:	f7f5 f948 	bl	8000608 <__aeabi_dmul>
 800b378:	a385      	add	r3, pc, #532	@ (adr r3, 800b590 <__ieee754_acos+0x288>)
 800b37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37e:	f7f4 ff8d 	bl	800029c <__adddf3>
 800b382:	4632      	mov	r2, r6
 800b384:	463b      	mov	r3, r7
 800b386:	f7f5 f93f 	bl	8000608 <__aeabi_dmul>
 800b38a:	a383      	add	r3, pc, #524	@ (adr r3, 800b598 <__ieee754_acos+0x290>)
 800b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b390:	f7f4 ff82 	bl	8000298 <__aeabi_dsub>
 800b394:	4632      	mov	r2, r6
 800b396:	463b      	mov	r3, r7
 800b398:	f7f5 f936 	bl	8000608 <__aeabi_dmul>
 800b39c:	a380      	add	r3, pc, #512	@ (adr r3, 800b5a0 <__ieee754_acos+0x298>)
 800b39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a2:	f7f4 ff7b 	bl	800029c <__adddf3>
 800b3a6:	4632      	mov	r2, r6
 800b3a8:	463b      	mov	r3, r7
 800b3aa:	f7f5 f92d 	bl	8000608 <__aeabi_dmul>
 800b3ae:	a37e      	add	r3, pc, #504	@ (adr r3, 800b5a8 <__ieee754_acos+0x2a0>)
 800b3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b4:	f7f4 ff70 	bl	8000298 <__aeabi_dsub>
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	463b      	mov	r3, r7
 800b3bc:	f7f5 f924 	bl	8000608 <__aeabi_dmul>
 800b3c0:	a37b      	add	r3, pc, #492	@ (adr r3, 800b5b0 <__ieee754_acos+0x2a8>)
 800b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c6:	f7f4 ff69 	bl	800029c <__adddf3>
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	463b      	mov	r3, r7
 800b3ce:	f7f5 f91b 	bl	8000608 <__aeabi_dmul>
 800b3d2:	a379      	add	r3, pc, #484	@ (adr r3, 800b5b8 <__ieee754_acos+0x2b0>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	4680      	mov	r8, r0
 800b3da:	4689      	mov	r9, r1
 800b3dc:	4630      	mov	r0, r6
 800b3de:	4639      	mov	r1, r7
 800b3e0:	f7f5 f912 	bl	8000608 <__aeabi_dmul>
 800b3e4:	a376      	add	r3, pc, #472	@ (adr r3, 800b5c0 <__ieee754_acos+0x2b8>)
 800b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ea:	f7f4 ff55 	bl	8000298 <__aeabi_dsub>
 800b3ee:	4632      	mov	r2, r6
 800b3f0:	463b      	mov	r3, r7
 800b3f2:	f7f5 f909 	bl	8000608 <__aeabi_dmul>
 800b3f6:	a374      	add	r3, pc, #464	@ (adr r3, 800b5c8 <__ieee754_acos+0x2c0>)
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	f7f4 ff4e 	bl	800029c <__adddf3>
 800b400:	4632      	mov	r2, r6
 800b402:	463b      	mov	r3, r7
 800b404:	f7f5 f900 	bl	8000608 <__aeabi_dmul>
 800b408:	a371      	add	r3, pc, #452	@ (adr r3, 800b5d0 <__ieee754_acos+0x2c8>)
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	f7f4 ff43 	bl	8000298 <__aeabi_dsub>
 800b412:	4632      	mov	r2, r6
 800b414:	463b      	mov	r3, r7
 800b416:	f7f5 f8f7 	bl	8000608 <__aeabi_dmul>
 800b41a:	4b78      	ldr	r3, [pc, #480]	@ (800b5fc <__ieee754_acos+0x2f4>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	f7f4 ff3d 	bl	800029c <__adddf3>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	4640      	mov	r0, r8
 800b428:	4649      	mov	r1, r9
 800b42a:	f7f5 fa17 	bl	800085c <__aeabi_ddiv>
 800b42e:	4622      	mov	r2, r4
 800b430:	462b      	mov	r3, r5
 800b432:	f7f5 f8e9 	bl	8000608 <__aeabi_dmul>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	a167      	add	r1, pc, #412	@ (adr r1, 800b5d8 <__ieee754_acos+0x2d0>)
 800b43c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b440:	f7f4 ff2a 	bl	8000298 <__aeabi_dsub>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4620      	mov	r0, r4
 800b44a:	4629      	mov	r1, r5
 800b44c:	f7f4 ff24 	bl	8000298 <__aeabi_dsub>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	a162      	add	r1, pc, #392	@ (adr r1, 800b5e0 <__ieee754_acos+0x2d8>)
 800b456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b45a:	f7f4 ff1d 	bl	8000298 <__aeabi_dsub>
 800b45e:	e773      	b.n	800b348 <__ieee754_acos+0x40>
 800b460:	2d00      	cmp	r5, #0
 800b462:	f280 80cf 	bge.w	800b604 <__ieee754_acos+0x2fc>
 800b466:	4b65      	ldr	r3, [pc, #404]	@ (800b5fc <__ieee754_acos+0x2f4>)
 800b468:	2200      	movs	r2, #0
 800b46a:	4620      	mov	r0, r4
 800b46c:	4629      	mov	r1, r5
 800b46e:	f7f4 ff15 	bl	800029c <__adddf3>
 800b472:	4b63      	ldr	r3, [pc, #396]	@ (800b600 <__ieee754_acos+0x2f8>)
 800b474:	2200      	movs	r2, #0
 800b476:	f7f5 f8c7 	bl	8000608 <__aeabi_dmul>
 800b47a:	a343      	add	r3, pc, #268	@ (adr r3, 800b588 <__ieee754_acos+0x280>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	4604      	mov	r4, r0
 800b482:	460d      	mov	r5, r1
 800b484:	f7f5 f8c0 	bl	8000608 <__aeabi_dmul>
 800b488:	a341      	add	r3, pc, #260	@ (adr r3, 800b590 <__ieee754_acos+0x288>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	f7f4 ff05 	bl	800029c <__adddf3>
 800b492:	4622      	mov	r2, r4
 800b494:	462b      	mov	r3, r5
 800b496:	f7f5 f8b7 	bl	8000608 <__aeabi_dmul>
 800b49a:	a33f      	add	r3, pc, #252	@ (adr r3, 800b598 <__ieee754_acos+0x290>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 fefa 	bl	8000298 <__aeabi_dsub>
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	462b      	mov	r3, r5
 800b4a8:	f7f5 f8ae 	bl	8000608 <__aeabi_dmul>
 800b4ac:	a33c      	add	r3, pc, #240	@ (adr r3, 800b5a0 <__ieee754_acos+0x298>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	f7f4 fef3 	bl	800029c <__adddf3>
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	f7f5 f8a5 	bl	8000608 <__aeabi_dmul>
 800b4be:	a33a      	add	r3, pc, #232	@ (adr r3, 800b5a8 <__ieee754_acos+0x2a0>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 fee8 	bl	8000298 <__aeabi_dsub>
 800b4c8:	4622      	mov	r2, r4
 800b4ca:	462b      	mov	r3, r5
 800b4cc:	f7f5 f89c 	bl	8000608 <__aeabi_dmul>
 800b4d0:	a337      	add	r3, pc, #220	@ (adr r3, 800b5b0 <__ieee754_acos+0x2a8>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	f7f4 fee1 	bl	800029c <__adddf3>
 800b4da:	4622      	mov	r2, r4
 800b4dc:	462b      	mov	r3, r5
 800b4de:	f7f5 f893 	bl	8000608 <__aeabi_dmul>
 800b4e2:	a335      	add	r3, pc, #212	@ (adr r3, 800b5b8 <__ieee754_acos+0x2b0>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	460f      	mov	r7, r1
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7f5 f88a 	bl	8000608 <__aeabi_dmul>
 800b4f4:	a332      	add	r3, pc, #200	@ (adr r3, 800b5c0 <__ieee754_acos+0x2b8>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7f4 fecd 	bl	8000298 <__aeabi_dsub>
 800b4fe:	4622      	mov	r2, r4
 800b500:	462b      	mov	r3, r5
 800b502:	f7f5 f881 	bl	8000608 <__aeabi_dmul>
 800b506:	a330      	add	r3, pc, #192	@ (adr r3, 800b5c8 <__ieee754_acos+0x2c0>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f7f4 fec6 	bl	800029c <__adddf3>
 800b510:	4622      	mov	r2, r4
 800b512:	462b      	mov	r3, r5
 800b514:	f7f5 f878 	bl	8000608 <__aeabi_dmul>
 800b518:	a32d      	add	r3, pc, #180	@ (adr r3, 800b5d0 <__ieee754_acos+0x2c8>)
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	f7f4 febb 	bl	8000298 <__aeabi_dsub>
 800b522:	4622      	mov	r2, r4
 800b524:	462b      	mov	r3, r5
 800b526:	f7f5 f86f 	bl	8000608 <__aeabi_dmul>
 800b52a:	4b34      	ldr	r3, [pc, #208]	@ (800b5fc <__ieee754_acos+0x2f4>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	f7f4 feb5 	bl	800029c <__adddf3>
 800b532:	ec45 4b10 	vmov	d0, r4, r5
 800b536:	4680      	mov	r8, r0
 800b538:	4689      	mov	r9, r1
 800b53a:	f7ff fe05 	bl	800b148 <__ieee754_sqrt>
 800b53e:	ec55 4b10 	vmov	r4, r5, d0
 800b542:	4642      	mov	r2, r8
 800b544:	464b      	mov	r3, r9
 800b546:	4630      	mov	r0, r6
 800b548:	4639      	mov	r1, r7
 800b54a:	f7f5 f987 	bl	800085c <__aeabi_ddiv>
 800b54e:	4622      	mov	r2, r4
 800b550:	462b      	mov	r3, r5
 800b552:	f7f5 f859 	bl	8000608 <__aeabi_dmul>
 800b556:	a320      	add	r3, pc, #128	@ (adr r3, 800b5d8 <__ieee754_acos+0x2d0>)
 800b558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55c:	f7f4 fe9c 	bl	8000298 <__aeabi_dsub>
 800b560:	4622      	mov	r2, r4
 800b562:	462b      	mov	r3, r5
 800b564:	f7f4 fe9a 	bl	800029c <__adddf3>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	f7f4 fe96 	bl	800029c <__adddf3>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	a11c      	add	r1, pc, #112	@ (adr r1, 800b5e8 <__ieee754_acos+0x2e0>)
 800b576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b57a:	e76e      	b.n	800b45a <__ieee754_acos+0x152>
 800b57c:	f3af 8000 	nop.w
	...
 800b588:	0dfdf709 	.word	0x0dfdf709
 800b58c:	3f023de1 	.word	0x3f023de1
 800b590:	7501b288 	.word	0x7501b288
 800b594:	3f49efe0 	.word	0x3f49efe0
 800b598:	b5688f3b 	.word	0xb5688f3b
 800b59c:	3fa48228 	.word	0x3fa48228
 800b5a0:	0e884455 	.word	0x0e884455
 800b5a4:	3fc9c155 	.word	0x3fc9c155
 800b5a8:	03eb6f7d 	.word	0x03eb6f7d
 800b5ac:	3fd4d612 	.word	0x3fd4d612
 800b5b0:	55555555 	.word	0x55555555
 800b5b4:	3fc55555 	.word	0x3fc55555
 800b5b8:	b12e9282 	.word	0xb12e9282
 800b5bc:	3fb3b8c5 	.word	0x3fb3b8c5
 800b5c0:	1b8d0159 	.word	0x1b8d0159
 800b5c4:	3fe6066c 	.word	0x3fe6066c
 800b5c8:	9c598ac8 	.word	0x9c598ac8
 800b5cc:	40002ae5 	.word	0x40002ae5
 800b5d0:	1c8a2d4b 	.word	0x1c8a2d4b
 800b5d4:	40033a27 	.word	0x40033a27
 800b5d8:	33145c07 	.word	0x33145c07
 800b5dc:	3c91a626 	.word	0x3c91a626
 800b5e0:	54442d18 	.word	0x54442d18
 800b5e4:	3ff921fb 	.word	0x3ff921fb
 800b5e8:	54442d18 	.word	0x54442d18
 800b5ec:	400921fb 	.word	0x400921fb
 800b5f0:	3fefffff 	.word	0x3fefffff
 800b5f4:	3fdfffff 	.word	0x3fdfffff
 800b5f8:	3c600000 	.word	0x3c600000
 800b5fc:	3ff00000 	.word	0x3ff00000
 800b600:	3fe00000 	.word	0x3fe00000
 800b604:	4622      	mov	r2, r4
 800b606:	462b      	mov	r3, r5
 800b608:	496b      	ldr	r1, [pc, #428]	@ (800b7b8 <__ieee754_acos+0x4b0>)
 800b60a:	2000      	movs	r0, #0
 800b60c:	f7f4 fe44 	bl	8000298 <__aeabi_dsub>
 800b610:	4b6a      	ldr	r3, [pc, #424]	@ (800b7bc <__ieee754_acos+0x4b4>)
 800b612:	2200      	movs	r2, #0
 800b614:	f7f4 fff8 	bl	8000608 <__aeabi_dmul>
 800b618:	4604      	mov	r4, r0
 800b61a:	460d      	mov	r5, r1
 800b61c:	ec45 4b10 	vmov	d0, r4, r5
 800b620:	f7ff fd92 	bl	800b148 <__ieee754_sqrt>
 800b624:	a34c      	add	r3, pc, #304	@ (adr r3, 800b758 <__ieee754_acos+0x450>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	4620      	mov	r0, r4
 800b62c:	4629      	mov	r1, r5
 800b62e:	ec59 8b10 	vmov	r8, r9, d0
 800b632:	f7f4 ffe9 	bl	8000608 <__aeabi_dmul>
 800b636:	a34a      	add	r3, pc, #296	@ (adr r3, 800b760 <__ieee754_acos+0x458>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	f7f4 fe2e 	bl	800029c <__adddf3>
 800b640:	4622      	mov	r2, r4
 800b642:	462b      	mov	r3, r5
 800b644:	f7f4 ffe0 	bl	8000608 <__aeabi_dmul>
 800b648:	a347      	add	r3, pc, #284	@ (adr r3, 800b768 <__ieee754_acos+0x460>)
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	f7f4 fe23 	bl	8000298 <__aeabi_dsub>
 800b652:	4622      	mov	r2, r4
 800b654:	462b      	mov	r3, r5
 800b656:	f7f4 ffd7 	bl	8000608 <__aeabi_dmul>
 800b65a:	a345      	add	r3, pc, #276	@ (adr r3, 800b770 <__ieee754_acos+0x468>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7f4 fe1c 	bl	800029c <__adddf3>
 800b664:	4622      	mov	r2, r4
 800b666:	462b      	mov	r3, r5
 800b668:	f7f4 ffce 	bl	8000608 <__aeabi_dmul>
 800b66c:	a342      	add	r3, pc, #264	@ (adr r3, 800b778 <__ieee754_acos+0x470>)
 800b66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b672:	f7f4 fe11 	bl	8000298 <__aeabi_dsub>
 800b676:	4622      	mov	r2, r4
 800b678:	462b      	mov	r3, r5
 800b67a:	f7f4 ffc5 	bl	8000608 <__aeabi_dmul>
 800b67e:	a340      	add	r3, pc, #256	@ (adr r3, 800b780 <__ieee754_acos+0x478>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	f7f4 fe0a 	bl	800029c <__adddf3>
 800b688:	4622      	mov	r2, r4
 800b68a:	462b      	mov	r3, r5
 800b68c:	f7f4 ffbc 	bl	8000608 <__aeabi_dmul>
 800b690:	a33d      	add	r3, pc, #244	@ (adr r3, 800b788 <__ieee754_acos+0x480>)
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	4682      	mov	sl, r0
 800b698:	468b      	mov	fp, r1
 800b69a:	4620      	mov	r0, r4
 800b69c:	4629      	mov	r1, r5
 800b69e:	f7f4 ffb3 	bl	8000608 <__aeabi_dmul>
 800b6a2:	a33b      	add	r3, pc, #236	@ (adr r3, 800b790 <__ieee754_acos+0x488>)
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	f7f4 fdf6 	bl	8000298 <__aeabi_dsub>
 800b6ac:	4622      	mov	r2, r4
 800b6ae:	462b      	mov	r3, r5
 800b6b0:	f7f4 ffaa 	bl	8000608 <__aeabi_dmul>
 800b6b4:	a338      	add	r3, pc, #224	@ (adr r3, 800b798 <__ieee754_acos+0x490>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	f7f4 fdef 	bl	800029c <__adddf3>
 800b6be:	4622      	mov	r2, r4
 800b6c0:	462b      	mov	r3, r5
 800b6c2:	f7f4 ffa1 	bl	8000608 <__aeabi_dmul>
 800b6c6:	a336      	add	r3, pc, #216	@ (adr r3, 800b7a0 <__ieee754_acos+0x498>)
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f7f4 fde4 	bl	8000298 <__aeabi_dsub>
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	462b      	mov	r3, r5
 800b6d4:	f7f4 ff98 	bl	8000608 <__aeabi_dmul>
 800b6d8:	4b37      	ldr	r3, [pc, #220]	@ (800b7b8 <__ieee754_acos+0x4b0>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f7f4 fdde 	bl	800029c <__adddf3>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4650      	mov	r0, sl
 800b6e6:	4659      	mov	r1, fp
 800b6e8:	f7f5 f8b8 	bl	800085c <__aeabi_ddiv>
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	f7f4 ff8a 	bl	8000608 <__aeabi_dmul>
 800b6f4:	2600      	movs	r6, #0
 800b6f6:	4682      	mov	sl, r0
 800b6f8:	468b      	mov	fp, r1
 800b6fa:	4632      	mov	r2, r6
 800b6fc:	464b      	mov	r3, r9
 800b6fe:	4630      	mov	r0, r6
 800b700:	4649      	mov	r1, r9
 800b702:	f7f4 ff81 	bl	8000608 <__aeabi_dmul>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4620      	mov	r0, r4
 800b70c:	4629      	mov	r1, r5
 800b70e:	f7f4 fdc3 	bl	8000298 <__aeabi_dsub>
 800b712:	4632      	mov	r2, r6
 800b714:	4604      	mov	r4, r0
 800b716:	460d      	mov	r5, r1
 800b718:	464b      	mov	r3, r9
 800b71a:	4640      	mov	r0, r8
 800b71c:	4649      	mov	r1, r9
 800b71e:	f7f4 fdbd 	bl	800029c <__adddf3>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	4620      	mov	r0, r4
 800b728:	4629      	mov	r1, r5
 800b72a:	f7f5 f897 	bl	800085c <__aeabi_ddiv>
 800b72e:	4602      	mov	r2, r0
 800b730:	460b      	mov	r3, r1
 800b732:	4650      	mov	r0, sl
 800b734:	4659      	mov	r1, fp
 800b736:	f7f4 fdb1 	bl	800029c <__adddf3>
 800b73a:	4632      	mov	r2, r6
 800b73c:	464b      	mov	r3, r9
 800b73e:	f7f4 fdad 	bl	800029c <__adddf3>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	f7f4 fda9 	bl	800029c <__adddf3>
 800b74a:	e5fd      	b.n	800b348 <__ieee754_acos+0x40>
 800b74c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b7a8 <__ieee754_acos+0x4a0>
 800b750:	e5ee      	b.n	800b330 <__ieee754_acos+0x28>
 800b752:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b7b0 <__ieee754_acos+0x4a8>
 800b756:	e5eb      	b.n	800b330 <__ieee754_acos+0x28>
 800b758:	0dfdf709 	.word	0x0dfdf709
 800b75c:	3f023de1 	.word	0x3f023de1
 800b760:	7501b288 	.word	0x7501b288
 800b764:	3f49efe0 	.word	0x3f49efe0
 800b768:	b5688f3b 	.word	0xb5688f3b
 800b76c:	3fa48228 	.word	0x3fa48228
 800b770:	0e884455 	.word	0x0e884455
 800b774:	3fc9c155 	.word	0x3fc9c155
 800b778:	03eb6f7d 	.word	0x03eb6f7d
 800b77c:	3fd4d612 	.word	0x3fd4d612
 800b780:	55555555 	.word	0x55555555
 800b784:	3fc55555 	.word	0x3fc55555
 800b788:	b12e9282 	.word	0xb12e9282
 800b78c:	3fb3b8c5 	.word	0x3fb3b8c5
 800b790:	1b8d0159 	.word	0x1b8d0159
 800b794:	3fe6066c 	.word	0x3fe6066c
 800b798:	9c598ac8 	.word	0x9c598ac8
 800b79c:	40002ae5 	.word	0x40002ae5
 800b7a0:	1c8a2d4b 	.word	0x1c8a2d4b
 800b7a4:	40033a27 	.word	0x40033a27
 800b7a8:	54442d18 	.word	0x54442d18
 800b7ac:	400921fb 	.word	0x400921fb
 800b7b0:	54442d18 	.word	0x54442d18
 800b7b4:	3ff921fb 	.word	0x3ff921fb
 800b7b8:	3ff00000 	.word	0x3ff00000
 800b7bc:	3fe00000 	.word	0x3fe00000

0800b7c0 <__ieee754_pow>:
 800b7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	b091      	sub	sp, #68	@ 0x44
 800b7c6:	ed8d 1b00 	vstr	d1, [sp]
 800b7ca:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b7ce:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b7d2:	ea5a 0001 	orrs.w	r0, sl, r1
 800b7d6:	ec57 6b10 	vmov	r6, r7, d0
 800b7da:	d113      	bne.n	800b804 <__ieee754_pow+0x44>
 800b7dc:	19b3      	adds	r3, r6, r6
 800b7de:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b7e2:	4152      	adcs	r2, r2
 800b7e4:	4298      	cmp	r0, r3
 800b7e6:	4b98      	ldr	r3, [pc, #608]	@ (800ba48 <__ieee754_pow+0x288>)
 800b7e8:	4193      	sbcs	r3, r2
 800b7ea:	f080 84ea 	bcs.w	800c1c2 <__ieee754_pow+0xa02>
 800b7ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	f7f4 fd51 	bl	800029c <__adddf3>
 800b7fa:	ec41 0b10 	vmov	d0, r0, r1
 800b7fe:	b011      	add	sp, #68	@ 0x44
 800b800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b804:	4a91      	ldr	r2, [pc, #580]	@ (800ba4c <__ieee754_pow+0x28c>)
 800b806:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b80a:	4590      	cmp	r8, r2
 800b80c:	463d      	mov	r5, r7
 800b80e:	4633      	mov	r3, r6
 800b810:	d806      	bhi.n	800b820 <__ieee754_pow+0x60>
 800b812:	d101      	bne.n	800b818 <__ieee754_pow+0x58>
 800b814:	2e00      	cmp	r6, #0
 800b816:	d1ea      	bne.n	800b7ee <__ieee754_pow+0x2e>
 800b818:	4592      	cmp	sl, r2
 800b81a:	d801      	bhi.n	800b820 <__ieee754_pow+0x60>
 800b81c:	d10e      	bne.n	800b83c <__ieee754_pow+0x7c>
 800b81e:	b169      	cbz	r1, 800b83c <__ieee754_pow+0x7c>
 800b820:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b824:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b828:	431d      	orrs	r5, r3
 800b82a:	d1e0      	bne.n	800b7ee <__ieee754_pow+0x2e>
 800b82c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b830:	18db      	adds	r3, r3, r3
 800b832:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b836:	4152      	adcs	r2, r2
 800b838:	429d      	cmp	r5, r3
 800b83a:	e7d4      	b.n	800b7e6 <__ieee754_pow+0x26>
 800b83c:	2d00      	cmp	r5, #0
 800b83e:	46c3      	mov	fp, r8
 800b840:	da3a      	bge.n	800b8b8 <__ieee754_pow+0xf8>
 800b842:	4a83      	ldr	r2, [pc, #524]	@ (800ba50 <__ieee754_pow+0x290>)
 800b844:	4592      	cmp	sl, r2
 800b846:	d84d      	bhi.n	800b8e4 <__ieee754_pow+0x124>
 800b848:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b84c:	4592      	cmp	sl, r2
 800b84e:	f240 84c7 	bls.w	800c1e0 <__ieee754_pow+0xa20>
 800b852:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b856:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b85a:	2a14      	cmp	r2, #20
 800b85c:	dd0f      	ble.n	800b87e <__ieee754_pow+0xbe>
 800b85e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b862:	fa21 f402 	lsr.w	r4, r1, r2
 800b866:	fa04 f202 	lsl.w	r2, r4, r2
 800b86a:	428a      	cmp	r2, r1
 800b86c:	f040 84b8 	bne.w	800c1e0 <__ieee754_pow+0xa20>
 800b870:	f004 0401 	and.w	r4, r4, #1
 800b874:	f1c4 0402 	rsb	r4, r4, #2
 800b878:	2900      	cmp	r1, #0
 800b87a:	d158      	bne.n	800b92e <__ieee754_pow+0x16e>
 800b87c:	e00e      	b.n	800b89c <__ieee754_pow+0xdc>
 800b87e:	2900      	cmp	r1, #0
 800b880:	d154      	bne.n	800b92c <__ieee754_pow+0x16c>
 800b882:	f1c2 0214 	rsb	r2, r2, #20
 800b886:	fa4a f402 	asr.w	r4, sl, r2
 800b88a:	fa04 f202 	lsl.w	r2, r4, r2
 800b88e:	4552      	cmp	r2, sl
 800b890:	f040 84a3 	bne.w	800c1da <__ieee754_pow+0xa1a>
 800b894:	f004 0401 	and.w	r4, r4, #1
 800b898:	f1c4 0402 	rsb	r4, r4, #2
 800b89c:	4a6d      	ldr	r2, [pc, #436]	@ (800ba54 <__ieee754_pow+0x294>)
 800b89e:	4592      	cmp	sl, r2
 800b8a0:	d12e      	bne.n	800b900 <__ieee754_pow+0x140>
 800b8a2:	f1b9 0f00 	cmp.w	r9, #0
 800b8a6:	f280 8494 	bge.w	800c1d2 <__ieee754_pow+0xa12>
 800b8aa:	496a      	ldr	r1, [pc, #424]	@ (800ba54 <__ieee754_pow+0x294>)
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	463b      	mov	r3, r7
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	f7f4 ffd3 	bl	800085c <__aeabi_ddiv>
 800b8b6:	e7a0      	b.n	800b7fa <__ieee754_pow+0x3a>
 800b8b8:	2400      	movs	r4, #0
 800b8ba:	bbc1      	cbnz	r1, 800b92e <__ieee754_pow+0x16e>
 800b8bc:	4a63      	ldr	r2, [pc, #396]	@ (800ba4c <__ieee754_pow+0x28c>)
 800b8be:	4592      	cmp	sl, r2
 800b8c0:	d1ec      	bne.n	800b89c <__ieee754_pow+0xdc>
 800b8c2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b8c6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	f000 8479 	beq.w	800c1c2 <__ieee754_pow+0xa02>
 800b8d0:	4b61      	ldr	r3, [pc, #388]	@ (800ba58 <__ieee754_pow+0x298>)
 800b8d2:	4598      	cmp	r8, r3
 800b8d4:	d908      	bls.n	800b8e8 <__ieee754_pow+0x128>
 800b8d6:	f1b9 0f00 	cmp.w	r9, #0
 800b8da:	f2c0 8476 	blt.w	800c1ca <__ieee754_pow+0xa0a>
 800b8de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8e2:	e78a      	b.n	800b7fa <__ieee754_pow+0x3a>
 800b8e4:	2402      	movs	r4, #2
 800b8e6:	e7e8      	b.n	800b8ba <__ieee754_pow+0xfa>
 800b8e8:	f1b9 0f00 	cmp.w	r9, #0
 800b8ec:	f04f 0000 	mov.w	r0, #0
 800b8f0:	f04f 0100 	mov.w	r1, #0
 800b8f4:	da81      	bge.n	800b7fa <__ieee754_pow+0x3a>
 800b8f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b8fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b8fe:	e77c      	b.n	800b7fa <__ieee754_pow+0x3a>
 800b900:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b904:	d106      	bne.n	800b914 <__ieee754_pow+0x154>
 800b906:	4632      	mov	r2, r6
 800b908:	463b      	mov	r3, r7
 800b90a:	4630      	mov	r0, r6
 800b90c:	4639      	mov	r1, r7
 800b90e:	f7f4 fe7b 	bl	8000608 <__aeabi_dmul>
 800b912:	e772      	b.n	800b7fa <__ieee754_pow+0x3a>
 800b914:	4a51      	ldr	r2, [pc, #324]	@ (800ba5c <__ieee754_pow+0x29c>)
 800b916:	4591      	cmp	r9, r2
 800b918:	d109      	bne.n	800b92e <__ieee754_pow+0x16e>
 800b91a:	2d00      	cmp	r5, #0
 800b91c:	db07      	blt.n	800b92e <__ieee754_pow+0x16e>
 800b91e:	ec47 6b10 	vmov	d0, r6, r7
 800b922:	b011      	add	sp, #68	@ 0x44
 800b924:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	f7ff bc0e 	b.w	800b148 <__ieee754_sqrt>
 800b92c:	2400      	movs	r4, #0
 800b92e:	ec47 6b10 	vmov	d0, r6, r7
 800b932:	9302      	str	r3, [sp, #8]
 800b934:	f7ff fb74 	bl	800b020 <fabs>
 800b938:	9b02      	ldr	r3, [sp, #8]
 800b93a:	ec51 0b10 	vmov	r0, r1, d0
 800b93e:	bb53      	cbnz	r3, 800b996 <__ieee754_pow+0x1d6>
 800b940:	4b44      	ldr	r3, [pc, #272]	@ (800ba54 <__ieee754_pow+0x294>)
 800b942:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b946:	429a      	cmp	r2, r3
 800b948:	d002      	beq.n	800b950 <__ieee754_pow+0x190>
 800b94a:	f1b8 0f00 	cmp.w	r8, #0
 800b94e:	d122      	bne.n	800b996 <__ieee754_pow+0x1d6>
 800b950:	f1b9 0f00 	cmp.w	r9, #0
 800b954:	da05      	bge.n	800b962 <__ieee754_pow+0x1a2>
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	2000      	movs	r0, #0
 800b95c:	493d      	ldr	r1, [pc, #244]	@ (800ba54 <__ieee754_pow+0x294>)
 800b95e:	f7f4 ff7d 	bl	800085c <__aeabi_ddiv>
 800b962:	2d00      	cmp	r5, #0
 800b964:	f6bf af49 	bge.w	800b7fa <__ieee754_pow+0x3a>
 800b968:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b96c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b970:	ea58 0804 	orrs.w	r8, r8, r4
 800b974:	d108      	bne.n	800b988 <__ieee754_pow+0x1c8>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4610      	mov	r0, r2
 800b97c:	4619      	mov	r1, r3
 800b97e:	f7f4 fc8b 	bl	8000298 <__aeabi_dsub>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	e794      	b.n	800b8b2 <__ieee754_pow+0xf2>
 800b988:	2c01      	cmp	r4, #1
 800b98a:	f47f af36 	bne.w	800b7fa <__ieee754_pow+0x3a>
 800b98e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b992:	4619      	mov	r1, r3
 800b994:	e731      	b.n	800b7fa <__ieee754_pow+0x3a>
 800b996:	0feb      	lsrs	r3, r5, #31
 800b998:	3b01      	subs	r3, #1
 800b99a:	ea53 0204 	orrs.w	r2, r3, r4
 800b99e:	d102      	bne.n	800b9a6 <__ieee754_pow+0x1e6>
 800b9a0:	4632      	mov	r2, r6
 800b9a2:	463b      	mov	r3, r7
 800b9a4:	e7e9      	b.n	800b97a <__ieee754_pow+0x1ba>
 800b9a6:	3c01      	subs	r4, #1
 800b9a8:	431c      	orrs	r4, r3
 800b9aa:	d016      	beq.n	800b9da <__ieee754_pow+0x21a>
 800b9ac:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ba38 <__ieee754_pow+0x278>
 800b9b0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b9b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9b8:	f240 8112 	bls.w	800bbe0 <__ieee754_pow+0x420>
 800b9bc:	4b28      	ldr	r3, [pc, #160]	@ (800ba60 <__ieee754_pow+0x2a0>)
 800b9be:	459a      	cmp	sl, r3
 800b9c0:	4b25      	ldr	r3, [pc, #148]	@ (800ba58 <__ieee754_pow+0x298>)
 800b9c2:	d916      	bls.n	800b9f2 <__ieee754_pow+0x232>
 800b9c4:	4598      	cmp	r8, r3
 800b9c6:	d80b      	bhi.n	800b9e0 <__ieee754_pow+0x220>
 800b9c8:	f1b9 0f00 	cmp.w	r9, #0
 800b9cc:	da0b      	bge.n	800b9e6 <__ieee754_pow+0x226>
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	b011      	add	sp, #68	@ 0x44
 800b9d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d6:	f000 bfc3 	b.w	800c960 <__math_oflow>
 800b9da:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ba40 <__ieee754_pow+0x280>
 800b9de:	e7e7      	b.n	800b9b0 <__ieee754_pow+0x1f0>
 800b9e0:	f1b9 0f00 	cmp.w	r9, #0
 800b9e4:	dcf3      	bgt.n	800b9ce <__ieee754_pow+0x20e>
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	b011      	add	sp, #68	@ 0x44
 800b9ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ee:	f000 bfaf 	b.w	800c950 <__math_uflow>
 800b9f2:	4598      	cmp	r8, r3
 800b9f4:	d20c      	bcs.n	800ba10 <__ieee754_pow+0x250>
 800b9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f7f5 f875 	bl	8000aec <__aeabi_dcmplt>
 800ba02:	3800      	subs	r0, #0
 800ba04:	bf18      	it	ne
 800ba06:	2001      	movne	r0, #1
 800ba08:	f1b9 0f00 	cmp.w	r9, #0
 800ba0c:	daec      	bge.n	800b9e8 <__ieee754_pow+0x228>
 800ba0e:	e7df      	b.n	800b9d0 <__ieee754_pow+0x210>
 800ba10:	4b10      	ldr	r3, [pc, #64]	@ (800ba54 <__ieee754_pow+0x294>)
 800ba12:	4598      	cmp	r8, r3
 800ba14:	f04f 0200 	mov.w	r2, #0
 800ba18:	d924      	bls.n	800ba64 <__ieee754_pow+0x2a4>
 800ba1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f7f5 f864 	bl	8000aec <__aeabi_dcmplt>
 800ba24:	3800      	subs	r0, #0
 800ba26:	bf18      	it	ne
 800ba28:	2001      	movne	r0, #1
 800ba2a:	f1b9 0f00 	cmp.w	r9, #0
 800ba2e:	dccf      	bgt.n	800b9d0 <__ieee754_pow+0x210>
 800ba30:	e7da      	b.n	800b9e8 <__ieee754_pow+0x228>
 800ba32:	bf00      	nop
 800ba34:	f3af 8000 	nop.w
 800ba38:	00000000 	.word	0x00000000
 800ba3c:	3ff00000 	.word	0x3ff00000
 800ba40:	00000000 	.word	0x00000000
 800ba44:	bff00000 	.word	0xbff00000
 800ba48:	fff00000 	.word	0xfff00000
 800ba4c:	7ff00000 	.word	0x7ff00000
 800ba50:	433fffff 	.word	0x433fffff
 800ba54:	3ff00000 	.word	0x3ff00000
 800ba58:	3fefffff 	.word	0x3fefffff
 800ba5c:	3fe00000 	.word	0x3fe00000
 800ba60:	43f00000 	.word	0x43f00000
 800ba64:	4b5a      	ldr	r3, [pc, #360]	@ (800bbd0 <__ieee754_pow+0x410>)
 800ba66:	f7f4 fc17 	bl	8000298 <__aeabi_dsub>
 800ba6a:	a351      	add	r3, pc, #324	@ (adr r3, 800bbb0 <__ieee754_pow+0x3f0>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	4604      	mov	r4, r0
 800ba72:	460d      	mov	r5, r1
 800ba74:	f7f4 fdc8 	bl	8000608 <__aeabi_dmul>
 800ba78:	a34f      	add	r3, pc, #316	@ (adr r3, 800bbb8 <__ieee754_pow+0x3f8>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	4620      	mov	r0, r4
 800ba84:	4629      	mov	r1, r5
 800ba86:	f7f4 fdbf 	bl	8000608 <__aeabi_dmul>
 800ba8a:	4b52      	ldr	r3, [pc, #328]	@ (800bbd4 <__ieee754_pow+0x414>)
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	468b      	mov	fp, r1
 800ba90:	2200      	movs	r2, #0
 800ba92:	4620      	mov	r0, r4
 800ba94:	4629      	mov	r1, r5
 800ba96:	f7f4 fdb7 	bl	8000608 <__aeabi_dmul>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	a148      	add	r1, pc, #288	@ (adr r1, 800bbc0 <__ieee754_pow+0x400>)
 800baa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa4:	f7f4 fbf8 	bl	8000298 <__aeabi_dsub>
 800baa8:	4622      	mov	r2, r4
 800baaa:	462b      	mov	r3, r5
 800baac:	f7f4 fdac 	bl	8000608 <__aeabi_dmul>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	2000      	movs	r0, #0
 800bab6:	4948      	ldr	r1, [pc, #288]	@ (800bbd8 <__ieee754_pow+0x418>)
 800bab8:	f7f4 fbee 	bl	8000298 <__aeabi_dsub>
 800babc:	4622      	mov	r2, r4
 800babe:	4680      	mov	r8, r0
 800bac0:	4689      	mov	r9, r1
 800bac2:	462b      	mov	r3, r5
 800bac4:	4620      	mov	r0, r4
 800bac6:	4629      	mov	r1, r5
 800bac8:	f7f4 fd9e 	bl	8000608 <__aeabi_dmul>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4640      	mov	r0, r8
 800bad2:	4649      	mov	r1, r9
 800bad4:	f7f4 fd98 	bl	8000608 <__aeabi_dmul>
 800bad8:	a33b      	add	r3, pc, #236	@ (adr r3, 800bbc8 <__ieee754_pow+0x408>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f7f4 fd93 	bl	8000608 <__aeabi_dmul>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4650      	mov	r0, sl
 800bae8:	4659      	mov	r1, fp
 800baea:	f7f4 fbd5 	bl	8000298 <__aeabi_dsub>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	4680      	mov	r8, r0
 800baf4:	4689      	mov	r9, r1
 800baf6:	4630      	mov	r0, r6
 800baf8:	4639      	mov	r1, r7
 800bafa:	f7f4 fbcf 	bl	800029c <__adddf3>
 800bafe:	2400      	movs	r4, #0
 800bb00:	4632      	mov	r2, r6
 800bb02:	463b      	mov	r3, r7
 800bb04:	4620      	mov	r0, r4
 800bb06:	460d      	mov	r5, r1
 800bb08:	f7f4 fbc6 	bl	8000298 <__aeabi_dsub>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	4640      	mov	r0, r8
 800bb12:	4649      	mov	r1, r9
 800bb14:	f7f4 fbc0 	bl	8000298 <__aeabi_dsub>
 800bb18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb20:	2300      	movs	r3, #0
 800bb22:	9304      	str	r3, [sp, #16]
 800bb24:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bb28:	4606      	mov	r6, r0
 800bb2a:	460f      	mov	r7, r1
 800bb2c:	4652      	mov	r2, sl
 800bb2e:	465b      	mov	r3, fp
 800bb30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb34:	f7f4 fbb0 	bl	8000298 <__aeabi_dsub>
 800bb38:	4622      	mov	r2, r4
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	f7f4 fd64 	bl	8000608 <__aeabi_dmul>
 800bb40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb44:	4680      	mov	r8, r0
 800bb46:	4689      	mov	r9, r1
 800bb48:	4630      	mov	r0, r6
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	f7f4 fd5c 	bl	8000608 <__aeabi_dmul>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4640      	mov	r0, r8
 800bb56:	4649      	mov	r1, r9
 800bb58:	f7f4 fba0 	bl	800029c <__adddf3>
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	465b      	mov	r3, fp
 800bb60:	4606      	mov	r6, r0
 800bb62:	460f      	mov	r7, r1
 800bb64:	4620      	mov	r0, r4
 800bb66:	4629      	mov	r1, r5
 800bb68:	f7f4 fd4e 	bl	8000608 <__aeabi_dmul>
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4602      	mov	r2, r0
 800bb70:	4680      	mov	r8, r0
 800bb72:	4689      	mov	r9, r1
 800bb74:	4630      	mov	r0, r6
 800bb76:	4639      	mov	r1, r7
 800bb78:	f7f4 fb90 	bl	800029c <__adddf3>
 800bb7c:	4b17      	ldr	r3, [pc, #92]	@ (800bbdc <__ieee754_pow+0x41c>)
 800bb7e:	4299      	cmp	r1, r3
 800bb80:	4604      	mov	r4, r0
 800bb82:	460d      	mov	r5, r1
 800bb84:	468a      	mov	sl, r1
 800bb86:	468b      	mov	fp, r1
 800bb88:	f340 82ef 	ble.w	800c16a <__ieee754_pow+0x9aa>
 800bb8c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bb90:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bb94:	4303      	orrs	r3, r0
 800bb96:	f000 81e8 	beq.w	800bf6a <__ieee754_pow+0x7aa>
 800bb9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2300      	movs	r3, #0
 800bba2:	f7f4 ffa3 	bl	8000aec <__aeabi_dcmplt>
 800bba6:	3800      	subs	r0, #0
 800bba8:	bf18      	it	ne
 800bbaa:	2001      	movne	r0, #1
 800bbac:	e710      	b.n	800b9d0 <__ieee754_pow+0x210>
 800bbae:	bf00      	nop
 800bbb0:	60000000 	.word	0x60000000
 800bbb4:	3ff71547 	.word	0x3ff71547
 800bbb8:	f85ddf44 	.word	0xf85ddf44
 800bbbc:	3e54ae0b 	.word	0x3e54ae0b
 800bbc0:	55555555 	.word	0x55555555
 800bbc4:	3fd55555 	.word	0x3fd55555
 800bbc8:	652b82fe 	.word	0x652b82fe
 800bbcc:	3ff71547 	.word	0x3ff71547
 800bbd0:	3ff00000 	.word	0x3ff00000
 800bbd4:	3fd00000 	.word	0x3fd00000
 800bbd8:	3fe00000 	.word	0x3fe00000
 800bbdc:	408fffff 	.word	0x408fffff
 800bbe0:	4bd5      	ldr	r3, [pc, #852]	@ (800bf38 <__ieee754_pow+0x778>)
 800bbe2:	402b      	ands	r3, r5
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	b92b      	cbnz	r3, 800bbf4 <__ieee754_pow+0x434>
 800bbe8:	4bd4      	ldr	r3, [pc, #848]	@ (800bf3c <__ieee754_pow+0x77c>)
 800bbea:	f7f4 fd0d 	bl	8000608 <__aeabi_dmul>
 800bbee:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800bbf2:	468b      	mov	fp, r1
 800bbf4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800bbf8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bbfc:	4413      	add	r3, r2
 800bbfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc00:	4bcf      	ldr	r3, [pc, #828]	@ (800bf40 <__ieee754_pow+0x780>)
 800bc02:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800bc06:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bc0a:	459b      	cmp	fp, r3
 800bc0c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bc10:	dd08      	ble.n	800bc24 <__ieee754_pow+0x464>
 800bc12:	4bcc      	ldr	r3, [pc, #816]	@ (800bf44 <__ieee754_pow+0x784>)
 800bc14:	459b      	cmp	fp, r3
 800bc16:	f340 81a5 	ble.w	800bf64 <__ieee754_pow+0x7a4>
 800bc1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc20:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bc24:	f04f 0a00 	mov.w	sl, #0
 800bc28:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bc2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc2e:	4bc6      	ldr	r3, [pc, #792]	@ (800bf48 <__ieee754_pow+0x788>)
 800bc30:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc34:	ed93 7b00 	vldr	d7, [r3]
 800bc38:	4629      	mov	r1, r5
 800bc3a:	ec53 2b17 	vmov	r2, r3, d7
 800bc3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc42:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc46:	f7f4 fb27 	bl	8000298 <__aeabi_dsub>
 800bc4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc4e:	4606      	mov	r6, r0
 800bc50:	460f      	mov	r7, r1
 800bc52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc56:	f7f4 fb21 	bl	800029c <__adddf3>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	2000      	movs	r0, #0
 800bc60:	49ba      	ldr	r1, [pc, #744]	@ (800bf4c <__ieee754_pow+0x78c>)
 800bc62:	f7f4 fdfb 	bl	800085c <__aeabi_ddiv>
 800bc66:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4630      	mov	r0, r6
 800bc70:	4639      	mov	r1, r7
 800bc72:	f7f4 fcc9 	bl	8000608 <__aeabi_dmul>
 800bc76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc7a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bc7e:	106d      	asrs	r5, r5, #1
 800bc80:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bc84:	f04f 0b00 	mov.w	fp, #0
 800bc88:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bc8c:	4661      	mov	r1, ip
 800bc8e:	2200      	movs	r2, #0
 800bc90:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bc94:	4658      	mov	r0, fp
 800bc96:	46e1      	mov	r9, ip
 800bc98:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bc9c:	4614      	mov	r4, r2
 800bc9e:	461d      	mov	r5, r3
 800bca0:	f7f4 fcb2 	bl	8000608 <__aeabi_dmul>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4630      	mov	r0, r6
 800bcaa:	4639      	mov	r1, r7
 800bcac:	f7f4 faf4 	bl	8000298 <__aeabi_dsub>
 800bcb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	460f      	mov	r7, r1
 800bcb8:	4620      	mov	r0, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	f7f4 faec 	bl	8000298 <__aeabi_dsub>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bcc8:	f7f4 fae6 	bl	8000298 <__aeabi_dsub>
 800bccc:	465a      	mov	r2, fp
 800bcce:	464b      	mov	r3, r9
 800bcd0:	f7f4 fc9a 	bl	8000608 <__aeabi_dmul>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 fadc 	bl	8000298 <__aeabi_dsub>
 800bce0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bce4:	f7f4 fc90 	bl	8000608 <__aeabi_dmul>
 800bce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcf0:	4610      	mov	r0, r2
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	f7f4 fc88 	bl	8000608 <__aeabi_dmul>
 800bcf8:	a37d      	add	r3, pc, #500	@ (adr r3, 800bef0 <__ieee754_pow+0x730>)
 800bcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfe:	4604      	mov	r4, r0
 800bd00:	460d      	mov	r5, r1
 800bd02:	f7f4 fc81 	bl	8000608 <__aeabi_dmul>
 800bd06:	a37c      	add	r3, pc, #496	@ (adr r3, 800bef8 <__ieee754_pow+0x738>)
 800bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0c:	f7f4 fac6 	bl	800029c <__adddf3>
 800bd10:	4622      	mov	r2, r4
 800bd12:	462b      	mov	r3, r5
 800bd14:	f7f4 fc78 	bl	8000608 <__aeabi_dmul>
 800bd18:	a379      	add	r3, pc, #484	@ (adr r3, 800bf00 <__ieee754_pow+0x740>)
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f7f4 fabd 	bl	800029c <__adddf3>
 800bd22:	4622      	mov	r2, r4
 800bd24:	462b      	mov	r3, r5
 800bd26:	f7f4 fc6f 	bl	8000608 <__aeabi_dmul>
 800bd2a:	a377      	add	r3, pc, #476	@ (adr r3, 800bf08 <__ieee754_pow+0x748>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f7f4 fab4 	bl	800029c <__adddf3>
 800bd34:	4622      	mov	r2, r4
 800bd36:	462b      	mov	r3, r5
 800bd38:	f7f4 fc66 	bl	8000608 <__aeabi_dmul>
 800bd3c:	a374      	add	r3, pc, #464	@ (adr r3, 800bf10 <__ieee754_pow+0x750>)
 800bd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd42:	f7f4 faab 	bl	800029c <__adddf3>
 800bd46:	4622      	mov	r2, r4
 800bd48:	462b      	mov	r3, r5
 800bd4a:	f7f4 fc5d 	bl	8000608 <__aeabi_dmul>
 800bd4e:	a372      	add	r3, pc, #456	@ (adr r3, 800bf18 <__ieee754_pow+0x758>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	f7f4 faa2 	bl	800029c <__adddf3>
 800bd58:	4622      	mov	r2, r4
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	460f      	mov	r7, r1
 800bd5e:	462b      	mov	r3, r5
 800bd60:	4620      	mov	r0, r4
 800bd62:	4629      	mov	r1, r5
 800bd64:	f7f4 fc50 	bl	8000608 <__aeabi_dmul>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	4639      	mov	r1, r7
 800bd70:	f7f4 fc4a 	bl	8000608 <__aeabi_dmul>
 800bd74:	465a      	mov	r2, fp
 800bd76:	4604      	mov	r4, r0
 800bd78:	460d      	mov	r5, r1
 800bd7a:	464b      	mov	r3, r9
 800bd7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd80:	f7f4 fa8c 	bl	800029c <__adddf3>
 800bd84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd88:	f7f4 fc3e 	bl	8000608 <__aeabi_dmul>
 800bd8c:	4622      	mov	r2, r4
 800bd8e:	462b      	mov	r3, r5
 800bd90:	f7f4 fa84 	bl	800029c <__adddf3>
 800bd94:	465a      	mov	r2, fp
 800bd96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd9a:	464b      	mov	r3, r9
 800bd9c:	4658      	mov	r0, fp
 800bd9e:	4649      	mov	r1, r9
 800bda0:	f7f4 fc32 	bl	8000608 <__aeabi_dmul>
 800bda4:	4b6a      	ldr	r3, [pc, #424]	@ (800bf50 <__ieee754_pow+0x790>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	4606      	mov	r6, r0
 800bdaa:	460f      	mov	r7, r1
 800bdac:	f7f4 fa76 	bl	800029c <__adddf3>
 800bdb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bdb4:	f7f4 fa72 	bl	800029c <__adddf3>
 800bdb8:	46d8      	mov	r8, fp
 800bdba:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800bdbe:	460d      	mov	r5, r1
 800bdc0:	465a      	mov	r2, fp
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4640      	mov	r0, r8
 800bdc6:	4649      	mov	r1, r9
 800bdc8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800bdcc:	f7f4 fc1c 	bl	8000608 <__aeabi_dmul>
 800bdd0:	465c      	mov	r4, fp
 800bdd2:	4680      	mov	r8, r0
 800bdd4:	4689      	mov	r9, r1
 800bdd6:	4b5e      	ldr	r3, [pc, #376]	@ (800bf50 <__ieee754_pow+0x790>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	4620      	mov	r0, r4
 800bddc:	4629      	mov	r1, r5
 800bdde:	f7f4 fa5b 	bl	8000298 <__aeabi_dsub>
 800bde2:	4632      	mov	r2, r6
 800bde4:	463b      	mov	r3, r7
 800bde6:	f7f4 fa57 	bl	8000298 <__aeabi_dsub>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bdf2:	f7f4 fa51 	bl	8000298 <__aeabi_dsub>
 800bdf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdfa:	f7f4 fc05 	bl	8000608 <__aeabi_dmul>
 800bdfe:	4622      	mov	r2, r4
 800be00:	4606      	mov	r6, r0
 800be02:	460f      	mov	r7, r1
 800be04:	462b      	mov	r3, r5
 800be06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be0a:	f7f4 fbfd 	bl	8000608 <__aeabi_dmul>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	4630      	mov	r0, r6
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 fa41 	bl	800029c <__adddf3>
 800be1a:	4606      	mov	r6, r0
 800be1c:	460f      	mov	r7, r1
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4640      	mov	r0, r8
 800be24:	4649      	mov	r1, r9
 800be26:	f7f4 fa39 	bl	800029c <__adddf3>
 800be2a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800be2e:	a33c      	add	r3, pc, #240	@ (adr r3, 800bf20 <__ieee754_pow+0x760>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	4658      	mov	r0, fp
 800be36:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800be3a:	460d      	mov	r5, r1
 800be3c:	f7f4 fbe4 	bl	8000608 <__aeabi_dmul>
 800be40:	465c      	mov	r4, fp
 800be42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be46:	4642      	mov	r2, r8
 800be48:	464b      	mov	r3, r9
 800be4a:	4620      	mov	r0, r4
 800be4c:	4629      	mov	r1, r5
 800be4e:	f7f4 fa23 	bl	8000298 <__aeabi_dsub>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	4630      	mov	r0, r6
 800be58:	4639      	mov	r1, r7
 800be5a:	f7f4 fa1d 	bl	8000298 <__aeabi_dsub>
 800be5e:	a332      	add	r3, pc, #200	@ (adr r3, 800bf28 <__ieee754_pow+0x768>)
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f7f4 fbd0 	bl	8000608 <__aeabi_dmul>
 800be68:	a331      	add	r3, pc, #196	@ (adr r3, 800bf30 <__ieee754_pow+0x770>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	4606      	mov	r6, r0
 800be70:	460f      	mov	r7, r1
 800be72:	4620      	mov	r0, r4
 800be74:	4629      	mov	r1, r5
 800be76:	f7f4 fbc7 	bl	8000608 <__aeabi_dmul>
 800be7a:	4602      	mov	r2, r0
 800be7c:	460b      	mov	r3, r1
 800be7e:	4630      	mov	r0, r6
 800be80:	4639      	mov	r1, r7
 800be82:	f7f4 fa0b 	bl	800029c <__adddf3>
 800be86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be88:	4b32      	ldr	r3, [pc, #200]	@ (800bf54 <__ieee754_pow+0x794>)
 800be8a:	4413      	add	r3, r2
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	f7f4 fa04 	bl	800029c <__adddf3>
 800be94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800be9a:	f7f4 fb4b 	bl	8000534 <__aeabi_i2d>
 800be9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bea0:	4b2d      	ldr	r3, [pc, #180]	@ (800bf58 <__ieee754_pow+0x798>)
 800bea2:	4413      	add	r3, r2
 800bea4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bea8:	4606      	mov	r6, r0
 800beaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800beae:	460f      	mov	r7, r1
 800beb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beb4:	f7f4 f9f2 	bl	800029c <__adddf3>
 800beb8:	4642      	mov	r2, r8
 800beba:	464b      	mov	r3, r9
 800bebc:	f7f4 f9ee 	bl	800029c <__adddf3>
 800bec0:	4632      	mov	r2, r6
 800bec2:	463b      	mov	r3, r7
 800bec4:	f7f4 f9ea 	bl	800029c <__adddf3>
 800bec8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800becc:	4632      	mov	r2, r6
 800bece:	463b      	mov	r3, r7
 800bed0:	4658      	mov	r0, fp
 800bed2:	460d      	mov	r5, r1
 800bed4:	f7f4 f9e0 	bl	8000298 <__aeabi_dsub>
 800bed8:	4642      	mov	r2, r8
 800beda:	464b      	mov	r3, r9
 800bedc:	f7f4 f9dc 	bl	8000298 <__aeabi_dsub>
 800bee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bee4:	f7f4 f9d8 	bl	8000298 <__aeabi_dsub>
 800bee8:	465c      	mov	r4, fp
 800beea:	4602      	mov	r2, r0
 800beec:	e036      	b.n	800bf5c <__ieee754_pow+0x79c>
 800beee:	bf00      	nop
 800bef0:	4a454eef 	.word	0x4a454eef
 800bef4:	3fca7e28 	.word	0x3fca7e28
 800bef8:	93c9db65 	.word	0x93c9db65
 800befc:	3fcd864a 	.word	0x3fcd864a
 800bf00:	a91d4101 	.word	0xa91d4101
 800bf04:	3fd17460 	.word	0x3fd17460
 800bf08:	518f264d 	.word	0x518f264d
 800bf0c:	3fd55555 	.word	0x3fd55555
 800bf10:	db6fabff 	.word	0xdb6fabff
 800bf14:	3fdb6db6 	.word	0x3fdb6db6
 800bf18:	33333303 	.word	0x33333303
 800bf1c:	3fe33333 	.word	0x3fe33333
 800bf20:	e0000000 	.word	0xe0000000
 800bf24:	3feec709 	.word	0x3feec709
 800bf28:	dc3a03fd 	.word	0xdc3a03fd
 800bf2c:	3feec709 	.word	0x3feec709
 800bf30:	145b01f5 	.word	0x145b01f5
 800bf34:	be3e2fe0 	.word	0xbe3e2fe0
 800bf38:	7ff00000 	.word	0x7ff00000
 800bf3c:	43400000 	.word	0x43400000
 800bf40:	0003988e 	.word	0x0003988e
 800bf44:	000bb679 	.word	0x000bb679
 800bf48:	0800d070 	.word	0x0800d070
 800bf4c:	3ff00000 	.word	0x3ff00000
 800bf50:	40080000 	.word	0x40080000
 800bf54:	0800d050 	.word	0x0800d050
 800bf58:	0800d060 	.word	0x0800d060
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf62:	e5d7      	b.n	800bb14 <__ieee754_pow+0x354>
 800bf64:	f04f 0a01 	mov.w	sl, #1
 800bf68:	e65e      	b.n	800bc28 <__ieee754_pow+0x468>
 800bf6a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c23c <__ieee754_pow+0xa7c>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	4630      	mov	r0, r6
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 f992 	bl	800029c <__adddf3>
 800bf78:	4642      	mov	r2, r8
 800bf7a:	e9cd 0100 	strd	r0, r1, [sp]
 800bf7e:	464b      	mov	r3, r9
 800bf80:	4620      	mov	r0, r4
 800bf82:	4629      	mov	r1, r5
 800bf84:	f7f4 f988 	bl	8000298 <__aeabi_dsub>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf90:	f7f4 fdca 	bl	8000b28 <__aeabi_dcmpgt>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	f47f ae00 	bne.w	800bb9a <__ieee754_pow+0x3da>
 800bf9a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800bf9e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bfa2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800bfa6:	fa43 fa0a 	asr.w	sl, r3, sl
 800bfaa:	44da      	add	sl, fp
 800bfac:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bfb0:	489d      	ldr	r0, [pc, #628]	@ (800c228 <__ieee754_pow+0xa68>)
 800bfb2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bfb6:	4108      	asrs	r0, r1
 800bfb8:	ea00 030a 	and.w	r3, r0, sl
 800bfbc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bfc0:	f1c1 0114 	rsb	r1, r1, #20
 800bfc4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800bfc8:	fa4a fa01 	asr.w	sl, sl, r1
 800bfcc:	f1bb 0f00 	cmp.w	fp, #0
 800bfd0:	4640      	mov	r0, r8
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	f04f 0200 	mov.w	r2, #0
 800bfd8:	bfb8      	it	lt
 800bfda:	f1ca 0a00 	rsblt	sl, sl, #0
 800bfde:	f7f4 f95b 	bl	8000298 <__aeabi_dsub>
 800bfe2:	4680      	mov	r8, r0
 800bfe4:	4689      	mov	r9, r1
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	463b      	mov	r3, r7
 800bfea:	4640      	mov	r0, r8
 800bfec:	4649      	mov	r1, r9
 800bfee:	f7f4 f955 	bl	800029c <__adddf3>
 800bff2:	2400      	movs	r4, #0
 800bff4:	a37c      	add	r3, pc, #496	@ (adr r3, 800c1e8 <__ieee754_pow+0xa28>)
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	4620      	mov	r0, r4
 800bffc:	460d      	mov	r5, r1
 800bffe:	f7f4 fb03 	bl	8000608 <__aeabi_dmul>
 800c002:	4642      	mov	r2, r8
 800c004:	e9cd 0100 	strd	r0, r1, [sp]
 800c008:	464b      	mov	r3, r9
 800c00a:	4620      	mov	r0, r4
 800c00c:	4629      	mov	r1, r5
 800c00e:	f7f4 f943 	bl	8000298 <__aeabi_dsub>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4630      	mov	r0, r6
 800c018:	4639      	mov	r1, r7
 800c01a:	f7f4 f93d 	bl	8000298 <__aeabi_dsub>
 800c01e:	a374      	add	r3, pc, #464	@ (adr r3, 800c1f0 <__ieee754_pow+0xa30>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f7f4 faf0 	bl	8000608 <__aeabi_dmul>
 800c028:	a373      	add	r3, pc, #460	@ (adr r3, 800c1f8 <__ieee754_pow+0xa38>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	4680      	mov	r8, r0
 800c030:	4689      	mov	r9, r1
 800c032:	4620      	mov	r0, r4
 800c034:	4629      	mov	r1, r5
 800c036:	f7f4 fae7 	bl	8000608 <__aeabi_dmul>
 800c03a:	4602      	mov	r2, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	4640      	mov	r0, r8
 800c040:	4649      	mov	r1, r9
 800c042:	f7f4 f92b 	bl	800029c <__adddf3>
 800c046:	4604      	mov	r4, r0
 800c048:	460d      	mov	r5, r1
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c052:	f7f4 f923 	bl	800029c <__adddf3>
 800c056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c05a:	4680      	mov	r8, r0
 800c05c:	4689      	mov	r9, r1
 800c05e:	f7f4 f91b 	bl	8000298 <__aeabi_dsub>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	4620      	mov	r0, r4
 800c068:	4629      	mov	r1, r5
 800c06a:	f7f4 f915 	bl	8000298 <__aeabi_dsub>
 800c06e:	4642      	mov	r2, r8
 800c070:	4606      	mov	r6, r0
 800c072:	460f      	mov	r7, r1
 800c074:	464b      	mov	r3, r9
 800c076:	4640      	mov	r0, r8
 800c078:	4649      	mov	r1, r9
 800c07a:	f7f4 fac5 	bl	8000608 <__aeabi_dmul>
 800c07e:	a360      	add	r3, pc, #384	@ (adr r3, 800c200 <__ieee754_pow+0xa40>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	4604      	mov	r4, r0
 800c086:	460d      	mov	r5, r1
 800c088:	f7f4 fabe 	bl	8000608 <__aeabi_dmul>
 800c08c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c208 <__ieee754_pow+0xa48>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	f7f4 f901 	bl	8000298 <__aeabi_dsub>
 800c096:	4622      	mov	r2, r4
 800c098:	462b      	mov	r3, r5
 800c09a:	f7f4 fab5 	bl	8000608 <__aeabi_dmul>
 800c09e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c210 <__ieee754_pow+0xa50>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f7f4 f8fa 	bl	800029c <__adddf3>
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	462b      	mov	r3, r5
 800c0ac:	f7f4 faac 	bl	8000608 <__aeabi_dmul>
 800c0b0:	a359      	add	r3, pc, #356	@ (adr r3, 800c218 <__ieee754_pow+0xa58>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 f8ef 	bl	8000298 <__aeabi_dsub>
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	462b      	mov	r3, r5
 800c0be:	f7f4 faa3 	bl	8000608 <__aeabi_dmul>
 800c0c2:	a357      	add	r3, pc, #348	@ (adr r3, 800c220 <__ieee754_pow+0xa60>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	f7f4 f8e8 	bl	800029c <__adddf3>
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	462b      	mov	r3, r5
 800c0d0:	f7f4 fa9a 	bl	8000608 <__aeabi_dmul>
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	4640      	mov	r0, r8
 800c0da:	4649      	mov	r1, r9
 800c0dc:	f7f4 f8dc 	bl	8000298 <__aeabi_dsub>
 800c0e0:	4604      	mov	r4, r0
 800c0e2:	460d      	mov	r5, r1
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	4649      	mov	r1, r9
 800c0ec:	f7f4 fa8c 	bl	8000608 <__aeabi_dmul>
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	e9cd 0100 	strd	r0, r1, [sp]
 800c0f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	f7f4 f8cb 	bl	8000298 <__aeabi_dsub>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c10a:	f7f4 fba7 	bl	800085c <__aeabi_ddiv>
 800c10e:	4632      	mov	r2, r6
 800c110:	4604      	mov	r4, r0
 800c112:	460d      	mov	r5, r1
 800c114:	463b      	mov	r3, r7
 800c116:	4640      	mov	r0, r8
 800c118:	4649      	mov	r1, r9
 800c11a:	f7f4 fa75 	bl	8000608 <__aeabi_dmul>
 800c11e:	4632      	mov	r2, r6
 800c120:	463b      	mov	r3, r7
 800c122:	f7f4 f8bb 	bl	800029c <__adddf3>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4620      	mov	r0, r4
 800c12c:	4629      	mov	r1, r5
 800c12e:	f7f4 f8b3 	bl	8000298 <__aeabi_dsub>
 800c132:	4642      	mov	r2, r8
 800c134:	464b      	mov	r3, r9
 800c136:	f7f4 f8af 	bl	8000298 <__aeabi_dsub>
 800c13a:	460b      	mov	r3, r1
 800c13c:	4602      	mov	r2, r0
 800c13e:	493b      	ldr	r1, [pc, #236]	@ (800c22c <__ieee754_pow+0xa6c>)
 800c140:	2000      	movs	r0, #0
 800c142:	f7f4 f8a9 	bl	8000298 <__aeabi_dsub>
 800c146:	ec41 0b10 	vmov	d0, r0, r1
 800c14a:	ee10 3a90 	vmov	r3, s1
 800c14e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c156:	da30      	bge.n	800c1ba <__ieee754_pow+0x9fa>
 800c158:	4650      	mov	r0, sl
 800c15a:	f000 fb4d 	bl	800c7f8 <scalbn>
 800c15e:	ec51 0b10 	vmov	r0, r1, d0
 800c162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c166:	f7ff bbd2 	b.w	800b90e <__ieee754_pow+0x14e>
 800c16a:	4c31      	ldr	r4, [pc, #196]	@ (800c230 <__ieee754_pow+0xa70>)
 800c16c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c170:	42a3      	cmp	r3, r4
 800c172:	d91a      	bls.n	800c1aa <__ieee754_pow+0x9ea>
 800c174:	4b2f      	ldr	r3, [pc, #188]	@ (800c234 <__ieee754_pow+0xa74>)
 800c176:	440b      	add	r3, r1
 800c178:	4303      	orrs	r3, r0
 800c17a:	d009      	beq.n	800c190 <__ieee754_pow+0x9d0>
 800c17c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c180:	2200      	movs	r2, #0
 800c182:	2300      	movs	r3, #0
 800c184:	f7f4 fcb2 	bl	8000aec <__aeabi_dcmplt>
 800c188:	3800      	subs	r0, #0
 800c18a:	bf18      	it	ne
 800c18c:	2001      	movne	r0, #1
 800c18e:	e42b      	b.n	800b9e8 <__ieee754_pow+0x228>
 800c190:	4642      	mov	r2, r8
 800c192:	464b      	mov	r3, r9
 800c194:	f7f4 f880 	bl	8000298 <__aeabi_dsub>
 800c198:	4632      	mov	r2, r6
 800c19a:	463b      	mov	r3, r7
 800c19c:	f7f4 fcba 	bl	8000b14 <__aeabi_dcmpge>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	d1eb      	bne.n	800c17c <__ieee754_pow+0x9bc>
 800c1a4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c244 <__ieee754_pow+0xa84>
 800c1a8:	e6f7      	b.n	800bf9a <__ieee754_pow+0x7da>
 800c1aa:	469a      	mov	sl, r3
 800c1ac:	4b22      	ldr	r3, [pc, #136]	@ (800c238 <__ieee754_pow+0xa78>)
 800c1ae:	459a      	cmp	sl, r3
 800c1b0:	f63f aef3 	bhi.w	800bf9a <__ieee754_pow+0x7da>
 800c1b4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c1b8:	e715      	b.n	800bfe6 <__ieee754_pow+0x826>
 800c1ba:	ec51 0b10 	vmov	r0, r1, d0
 800c1be:	4619      	mov	r1, r3
 800c1c0:	e7cf      	b.n	800c162 <__ieee754_pow+0x9a2>
 800c1c2:	491a      	ldr	r1, [pc, #104]	@ (800c22c <__ieee754_pow+0xa6c>)
 800c1c4:	2000      	movs	r0, #0
 800c1c6:	f7ff bb18 	b.w	800b7fa <__ieee754_pow+0x3a>
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	f7ff bb14 	b.w	800b7fa <__ieee754_pow+0x3a>
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	4639      	mov	r1, r7
 800c1d6:	f7ff bb10 	b.w	800b7fa <__ieee754_pow+0x3a>
 800c1da:	460c      	mov	r4, r1
 800c1dc:	f7ff bb5e 	b.w	800b89c <__ieee754_pow+0xdc>
 800c1e0:	2400      	movs	r4, #0
 800c1e2:	f7ff bb49 	b.w	800b878 <__ieee754_pow+0xb8>
 800c1e6:	bf00      	nop
 800c1e8:	00000000 	.word	0x00000000
 800c1ec:	3fe62e43 	.word	0x3fe62e43
 800c1f0:	fefa39ef 	.word	0xfefa39ef
 800c1f4:	3fe62e42 	.word	0x3fe62e42
 800c1f8:	0ca86c39 	.word	0x0ca86c39
 800c1fc:	be205c61 	.word	0xbe205c61
 800c200:	72bea4d0 	.word	0x72bea4d0
 800c204:	3e663769 	.word	0x3e663769
 800c208:	c5d26bf1 	.word	0xc5d26bf1
 800c20c:	3ebbbd41 	.word	0x3ebbbd41
 800c210:	af25de2c 	.word	0xaf25de2c
 800c214:	3f11566a 	.word	0x3f11566a
 800c218:	16bebd93 	.word	0x16bebd93
 800c21c:	3f66c16c 	.word	0x3f66c16c
 800c220:	5555553e 	.word	0x5555553e
 800c224:	3fc55555 	.word	0x3fc55555
 800c228:	fff00000 	.word	0xfff00000
 800c22c:	3ff00000 	.word	0x3ff00000
 800c230:	4090cbff 	.word	0x4090cbff
 800c234:	3f6f3400 	.word	0x3f6f3400
 800c238:	3fe00000 	.word	0x3fe00000
 800c23c:	652b82fe 	.word	0x652b82fe
 800c240:	3c971547 	.word	0x3c971547
 800c244:	4090cc00 	.word	0x4090cc00

0800c248 <__ieee754_powf>:
 800c248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c24c:	ee10 4a90 	vmov	r4, s1
 800c250:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800c254:	ed2d 8b02 	vpush	{d8}
 800c258:	ee10 6a10 	vmov	r6, s0
 800c25c:	eeb0 8a40 	vmov.f32	s16, s0
 800c260:	eef0 8a60 	vmov.f32	s17, s1
 800c264:	d10c      	bne.n	800c280 <__ieee754_powf+0x38>
 800c266:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800c26a:	0076      	lsls	r6, r6, #1
 800c26c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800c270:	f240 829c 	bls.w	800c7ac <__ieee754_powf+0x564>
 800c274:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c278:	ecbd 8b02 	vpop	{d8}
 800c27c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c280:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800c284:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800c288:	d802      	bhi.n	800c290 <__ieee754_powf+0x48>
 800c28a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c28e:	d908      	bls.n	800c2a2 <__ieee754_powf+0x5a>
 800c290:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800c294:	d1ee      	bne.n	800c274 <__ieee754_powf+0x2c>
 800c296:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800c29a:	0064      	lsls	r4, r4, #1
 800c29c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800c2a0:	e7e6      	b.n	800c270 <__ieee754_powf+0x28>
 800c2a2:	2e00      	cmp	r6, #0
 800c2a4:	da1e      	bge.n	800c2e4 <__ieee754_powf+0x9c>
 800c2a6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800c2aa:	d22b      	bcs.n	800c304 <__ieee754_powf+0xbc>
 800c2ac:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800c2b0:	d332      	bcc.n	800c318 <__ieee754_powf+0xd0>
 800c2b2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800c2b6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800c2ba:	fa49 f503 	asr.w	r5, r9, r3
 800c2be:	fa05 f303 	lsl.w	r3, r5, r3
 800c2c2:	454b      	cmp	r3, r9
 800c2c4:	d126      	bne.n	800c314 <__ieee754_powf+0xcc>
 800c2c6:	f005 0501 	and.w	r5, r5, #1
 800c2ca:	f1c5 0502 	rsb	r5, r5, #2
 800c2ce:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800c2d2:	d122      	bne.n	800c31a <__ieee754_powf+0xd2>
 800c2d4:	2c00      	cmp	r4, #0
 800c2d6:	f280 826f 	bge.w	800c7b8 <__ieee754_powf+0x570>
 800c2da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c2de:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c2e2:	e7c9      	b.n	800c278 <__ieee754_powf+0x30>
 800c2e4:	2500      	movs	r5, #0
 800c2e6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c2ea:	d1f0      	bne.n	800c2ce <__ieee754_powf+0x86>
 800c2ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800c2f0:	f000 825c 	beq.w	800c7ac <__ieee754_powf+0x564>
 800c2f4:	d908      	bls.n	800c308 <__ieee754_powf+0xc0>
 800c2f6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800c658 <__ieee754_powf+0x410>
 800c2fa:	2c00      	cmp	r4, #0
 800c2fc:	bfa8      	it	ge
 800c2fe:	eeb0 0a68 	vmovge.f32	s0, s17
 800c302:	e7b9      	b.n	800c278 <__ieee754_powf+0x30>
 800c304:	2502      	movs	r5, #2
 800c306:	e7ee      	b.n	800c2e6 <__ieee754_powf+0x9e>
 800c308:	2c00      	cmp	r4, #0
 800c30a:	f280 8252 	bge.w	800c7b2 <__ieee754_powf+0x56a>
 800c30e:	eeb1 0a68 	vneg.f32	s0, s17
 800c312:	e7b1      	b.n	800c278 <__ieee754_powf+0x30>
 800c314:	2500      	movs	r5, #0
 800c316:	e7da      	b.n	800c2ce <__ieee754_powf+0x86>
 800c318:	2500      	movs	r5, #0
 800c31a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800c31e:	d102      	bne.n	800c326 <__ieee754_powf+0xde>
 800c320:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c324:	e7a8      	b.n	800c278 <__ieee754_powf+0x30>
 800c326:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800c32a:	d109      	bne.n	800c340 <__ieee754_powf+0xf8>
 800c32c:	2e00      	cmp	r6, #0
 800c32e:	db07      	blt.n	800c340 <__ieee754_powf+0xf8>
 800c330:	eeb0 0a48 	vmov.f32	s0, s16
 800c334:	ecbd 8b02 	vpop	{d8}
 800c338:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c33c:	f7fe bfde 	b.w	800b2fc <__ieee754_sqrtf>
 800c340:	eeb0 0a48 	vmov.f32	s0, s16
 800c344:	f000 fa50 	bl	800c7e8 <fabsf>
 800c348:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800c34c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800c350:	4647      	mov	r7, r8
 800c352:	d002      	beq.n	800c35a <__ieee754_powf+0x112>
 800c354:	f1b8 0f00 	cmp.w	r8, #0
 800c358:	d117      	bne.n	800c38a <__ieee754_powf+0x142>
 800c35a:	2c00      	cmp	r4, #0
 800c35c:	bfbc      	itt	lt
 800c35e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800c362:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c366:	2e00      	cmp	r6, #0
 800c368:	da86      	bge.n	800c278 <__ieee754_powf+0x30>
 800c36a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800c36e:	ea58 0805 	orrs.w	r8, r8, r5
 800c372:	d104      	bne.n	800c37e <__ieee754_powf+0x136>
 800c374:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c378:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c37c:	e77c      	b.n	800c278 <__ieee754_powf+0x30>
 800c37e:	2d01      	cmp	r5, #1
 800c380:	f47f af7a 	bne.w	800c278 <__ieee754_powf+0x30>
 800c384:	eeb1 0a40 	vneg.f32	s0, s0
 800c388:	e776      	b.n	800c278 <__ieee754_powf+0x30>
 800c38a:	0ff0      	lsrs	r0, r6, #31
 800c38c:	3801      	subs	r0, #1
 800c38e:	ea55 0300 	orrs.w	r3, r5, r0
 800c392:	d104      	bne.n	800c39e <__ieee754_powf+0x156>
 800c394:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c398:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c39c:	e76c      	b.n	800c278 <__ieee754_powf+0x30>
 800c39e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800c3a2:	d973      	bls.n	800c48c <__ieee754_powf+0x244>
 800c3a4:	4bad      	ldr	r3, [pc, #692]	@ (800c65c <__ieee754_powf+0x414>)
 800c3a6:	4598      	cmp	r8, r3
 800c3a8:	d808      	bhi.n	800c3bc <__ieee754_powf+0x174>
 800c3aa:	2c00      	cmp	r4, #0
 800c3ac:	da0b      	bge.n	800c3c6 <__ieee754_powf+0x17e>
 800c3ae:	2000      	movs	r0, #0
 800c3b0:	ecbd 8b02 	vpop	{d8}
 800c3b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3b8:	f000 bb60 	b.w	800ca7c <__math_oflowf>
 800c3bc:	4ba8      	ldr	r3, [pc, #672]	@ (800c660 <__ieee754_powf+0x418>)
 800c3be:	4598      	cmp	r8, r3
 800c3c0:	d908      	bls.n	800c3d4 <__ieee754_powf+0x18c>
 800c3c2:	2c00      	cmp	r4, #0
 800c3c4:	dcf3      	bgt.n	800c3ae <__ieee754_powf+0x166>
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	ecbd 8b02 	vpop	{d8}
 800c3cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d0:	f000 bb4e 	b.w	800ca70 <__math_uflowf>
 800c3d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c3d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c3dc:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800c664 <__ieee754_powf+0x41c>
 800c3e0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800c3e4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c3e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c3ec:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c3f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c3f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3f8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800c668 <__ieee754_powf+0x420>
 800c3fc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c400:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800c66c <__ieee754_powf+0x424>
 800c404:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c408:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800c670 <__ieee754_powf+0x428>
 800c40c:	eef0 6a67 	vmov.f32	s13, s15
 800c410:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c414:	ee16 3a90 	vmov	r3, s13
 800c418:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c41c:	f023 030f 	bic.w	r3, r3, #15
 800c420:	ee06 3a90 	vmov	s13, r3
 800c424:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c428:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c42c:	3d01      	subs	r5, #1
 800c42e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800c432:	4305      	orrs	r5, r0
 800c434:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c438:	f024 040f 	bic.w	r4, r4, #15
 800c43c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800c440:	bf18      	it	ne
 800c442:	eeb0 8a47 	vmovne.f32	s16, s14
 800c446:	ee07 4a10 	vmov	s14, r4
 800c44a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c44e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c452:	ee07 3a90 	vmov	s15, r3
 800c456:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c45a:	ee07 4a10 	vmov	s14, r4
 800c45e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c462:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c466:	ee17 1a10 	vmov	r1, s14
 800c46a:	2900      	cmp	r1, #0
 800c46c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c470:	f340 80dd 	ble.w	800c62e <__ieee754_powf+0x3e6>
 800c474:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800c478:	f240 80ca 	bls.w	800c610 <__ieee754_powf+0x3c8>
 800c47c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c484:	bf4c      	ite	mi
 800c486:	2001      	movmi	r0, #1
 800c488:	2000      	movpl	r0, #0
 800c48a:	e791      	b.n	800c3b0 <__ieee754_powf+0x168>
 800c48c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c490:	bf01      	itttt	eq
 800c492:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c674 <__ieee754_powf+0x42c>
 800c496:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c49a:	f06f 0317 	mvneq.w	r3, #23
 800c49e:	ee17 7a90 	vmoveq	r7, s15
 800c4a2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800c4a6:	bf18      	it	ne
 800c4a8:	2300      	movne	r3, #0
 800c4aa:	3a7f      	subs	r2, #127	@ 0x7f
 800c4ac:	441a      	add	r2, r3
 800c4ae:	4b72      	ldr	r3, [pc, #456]	@ (800c678 <__ieee754_powf+0x430>)
 800c4b0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c4b4:	429f      	cmp	r7, r3
 800c4b6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c4ba:	dd06      	ble.n	800c4ca <__ieee754_powf+0x282>
 800c4bc:	4b6f      	ldr	r3, [pc, #444]	@ (800c67c <__ieee754_powf+0x434>)
 800c4be:	429f      	cmp	r7, r3
 800c4c0:	f340 80a4 	ble.w	800c60c <__ieee754_powf+0x3c4>
 800c4c4:	3201      	adds	r2, #1
 800c4c6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c4ca:	2600      	movs	r6, #0
 800c4cc:	4b6c      	ldr	r3, [pc, #432]	@ (800c680 <__ieee754_powf+0x438>)
 800c4ce:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c4d2:	ee07 1a10 	vmov	s14, r1
 800c4d6:	edd3 5a00 	vldr	s11, [r3]
 800c4da:	4b6a      	ldr	r3, [pc, #424]	@ (800c684 <__ieee754_powf+0x43c>)
 800c4dc:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c4e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4e4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c4e8:	1049      	asrs	r1, r1, #1
 800c4ea:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c4ee:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c4f2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c4f6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c4fa:	ee07 1a90 	vmov	s15, r1
 800c4fe:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c502:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c506:	ee15 7a10 	vmov	r7, s10
 800c50a:	401f      	ands	r7, r3
 800c50c:	ee06 7a90 	vmov	s13, r7
 800c510:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c514:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c518:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c51c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c520:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c688 <__ieee754_powf+0x440>
 800c524:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c68c <__ieee754_powf+0x444>
 800c528:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c52c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c690 <__ieee754_powf+0x448>
 800c530:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c534:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c664 <__ieee754_powf+0x41c>
 800c538:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c53c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c694 <__ieee754_powf+0x44c>
 800c540:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c544:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c698 <__ieee754_powf+0x450>
 800c548:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c54c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c550:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c554:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c558:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c55c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c560:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c564:	eef0 5a67 	vmov.f32	s11, s15
 800c568:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c56c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c570:	ee15 1a90 	vmov	r1, s11
 800c574:	4019      	ands	r1, r3
 800c576:	ee05 1a90 	vmov	s11, r1
 800c57a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c57e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c582:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c586:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c58a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c58e:	eeb0 6a67 	vmov.f32	s12, s15
 800c592:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c596:	ee16 1a10 	vmov	r1, s12
 800c59a:	4019      	ands	r1, r3
 800c59c:	ee06 1a10 	vmov	s12, r1
 800c5a0:	eeb0 7a46 	vmov.f32	s14, s12
 800c5a4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c5a8:	493c      	ldr	r1, [pc, #240]	@ (800c69c <__ieee754_powf+0x454>)
 800c5aa:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c5ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5b2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c6a0 <__ieee754_powf+0x458>
 800c5b6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c6a4 <__ieee754_powf+0x45c>
 800c5ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5be:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c6a8 <__ieee754_powf+0x460>
 800c5c2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c5c6:	ed91 7a00 	vldr	s14, [r1]
 800c5ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5ce:	ee07 2a10 	vmov	s14, r2
 800c5d2:	eef0 6a67 	vmov.f32	s13, s15
 800c5d6:	4a35      	ldr	r2, [pc, #212]	@ (800c6ac <__ieee754_powf+0x464>)
 800c5d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c5dc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c5e0:	ed92 5a00 	vldr	s10, [r2]
 800c5e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c5e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c5ec:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c5f0:	ee16 2a90 	vmov	r2, s13
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	ee06 3a90 	vmov	s13, r3
 800c5fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c5fe:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c602:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c60a:	e70f      	b.n	800c42c <__ieee754_powf+0x1e4>
 800c60c:	2601      	movs	r6, #1
 800c60e:	e75d      	b.n	800c4cc <__ieee754_powf+0x284>
 800c610:	d152      	bne.n	800c6b8 <__ieee754_powf+0x470>
 800c612:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c6b0 <__ieee754_powf+0x468>
 800c616:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c61a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c61e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c626:	f73f af29 	bgt.w	800c47c <__ieee754_powf+0x234>
 800c62a:	2386      	movs	r3, #134	@ 0x86
 800c62c:	e048      	b.n	800c6c0 <__ieee754_powf+0x478>
 800c62e:	4a21      	ldr	r2, [pc, #132]	@ (800c6b4 <__ieee754_powf+0x46c>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d907      	bls.n	800c644 <__ieee754_powf+0x3fc>
 800c634:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c63c:	bf4c      	ite	mi
 800c63e:	2001      	movmi	r0, #1
 800c640:	2000      	movpl	r0, #0
 800c642:	e6c1      	b.n	800c3c8 <__ieee754_powf+0x180>
 800c644:	d138      	bne.n	800c6b8 <__ieee754_powf+0x470>
 800c646:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c64a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c652:	dbea      	blt.n	800c62a <__ieee754_powf+0x3e2>
 800c654:	e7ee      	b.n	800c634 <__ieee754_powf+0x3ec>
 800c656:	bf00      	nop
 800c658:	00000000 	.word	0x00000000
 800c65c:	3f7ffff3 	.word	0x3f7ffff3
 800c660:	3f800007 	.word	0x3f800007
 800c664:	3eaaaaab 	.word	0x3eaaaaab
 800c668:	3fb8aa3b 	.word	0x3fb8aa3b
 800c66c:	36eca570 	.word	0x36eca570
 800c670:	3fb8aa00 	.word	0x3fb8aa00
 800c674:	4b800000 	.word	0x4b800000
 800c678:	001cc471 	.word	0x001cc471
 800c67c:	005db3d6 	.word	0x005db3d6
 800c680:	0800d090 	.word	0x0800d090
 800c684:	fffff000 	.word	0xfffff000
 800c688:	3e6c3255 	.word	0x3e6c3255
 800c68c:	3e53f142 	.word	0x3e53f142
 800c690:	3e8ba305 	.word	0x3e8ba305
 800c694:	3edb6db7 	.word	0x3edb6db7
 800c698:	3f19999a 	.word	0x3f19999a
 800c69c:	0800d080 	.word	0x0800d080
 800c6a0:	3f76384f 	.word	0x3f76384f
 800c6a4:	3f763800 	.word	0x3f763800
 800c6a8:	369dc3a0 	.word	0x369dc3a0
 800c6ac:	0800d088 	.word	0x0800d088
 800c6b0:	3338aa3c 	.word	0x3338aa3c
 800c6b4:	43160000 	.word	0x43160000
 800c6b8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c6bc:	d971      	bls.n	800c7a2 <__ieee754_powf+0x55a>
 800c6be:	15db      	asrs	r3, r3, #23
 800c6c0:	3b7e      	subs	r3, #126	@ 0x7e
 800c6c2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c6c6:	4118      	asrs	r0, r3
 800c6c8:	4408      	add	r0, r1
 800c6ca:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c6ce:	4a3c      	ldr	r2, [pc, #240]	@ (800c7c0 <__ieee754_powf+0x578>)
 800c6d0:	3b7f      	subs	r3, #127	@ 0x7f
 800c6d2:	411a      	asrs	r2, r3
 800c6d4:	4002      	ands	r2, r0
 800c6d6:	ee07 2a10 	vmov	s14, r2
 800c6da:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c6de:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c6e2:	f1c3 0317 	rsb	r3, r3, #23
 800c6e6:	4118      	asrs	r0, r3
 800c6e8:	2900      	cmp	r1, #0
 800c6ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6ee:	bfb8      	it	lt
 800c6f0:	4240      	neglt	r0, r0
 800c6f2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c6f6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c7c4 <__ieee754_powf+0x57c>
 800c6fa:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800c7c8 <__ieee754_powf+0x580>
 800c6fe:	ee17 3a10 	vmov	r3, s14
 800c702:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c706:	f023 030f 	bic.w	r3, r3, #15
 800c70a:	ee07 3a10 	vmov	s14, r3
 800c70e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c712:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c716:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c71a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800c7cc <__ieee754_powf+0x584>
 800c71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c722:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c726:	eef0 6a67 	vmov.f32	s13, s15
 800c72a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c72e:	eef0 5a66 	vmov.f32	s11, s13
 800c732:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c736:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c73a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c73e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800c7d0 <__ieee754_powf+0x588>
 800c742:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800c7d4 <__ieee754_powf+0x58c>
 800c746:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c74a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800c7d8 <__ieee754_powf+0x590>
 800c74e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c752:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800c7dc <__ieee754_powf+0x594>
 800c756:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c75a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c7e0 <__ieee754_powf+0x598>
 800c75e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c762:	eeb0 6a66 	vmov.f32	s12, s13
 800c766:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c76a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c76e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c772:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c776:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c77a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c77e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c782:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c786:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c78a:	ee10 3a10 	vmov	r3, s0
 800c78e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c792:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c796:	da06      	bge.n	800c7a6 <__ieee754_powf+0x55e>
 800c798:	f000 f8ea 	bl	800c970 <scalbnf>
 800c79c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c7a0:	e56a      	b.n	800c278 <__ieee754_powf+0x30>
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	e7a5      	b.n	800c6f2 <__ieee754_powf+0x4aa>
 800c7a6:	ee00 3a10 	vmov	s0, r3
 800c7aa:	e7f7      	b.n	800c79c <__ieee754_powf+0x554>
 800c7ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c7b0:	e562      	b.n	800c278 <__ieee754_powf+0x30>
 800c7b2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800c7e4 <__ieee754_powf+0x59c>
 800c7b6:	e55f      	b.n	800c278 <__ieee754_powf+0x30>
 800c7b8:	eeb0 0a48 	vmov.f32	s0, s16
 800c7bc:	e55c      	b.n	800c278 <__ieee754_powf+0x30>
 800c7be:	bf00      	nop
 800c7c0:	ff800000 	.word	0xff800000
 800c7c4:	3f317218 	.word	0x3f317218
 800c7c8:	3f317200 	.word	0x3f317200
 800c7cc:	35bfbe8c 	.word	0x35bfbe8c
 800c7d0:	b5ddea0e 	.word	0xb5ddea0e
 800c7d4:	3331bb4c 	.word	0x3331bb4c
 800c7d8:	388ab355 	.word	0x388ab355
 800c7dc:	bb360b61 	.word	0xbb360b61
 800c7e0:	3e2aaaab 	.word	0x3e2aaaab
 800c7e4:	00000000 	.word	0x00000000

0800c7e8 <fabsf>:
 800c7e8:	ee10 3a10 	vmov	r3, s0
 800c7ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c7f0:	ee00 3a10 	vmov	s0, r3
 800c7f4:	4770      	bx	lr
	...

0800c7f8 <scalbn>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	ec55 4b10 	vmov	r4, r5, d0
 800c7fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c802:	4606      	mov	r6, r0
 800c804:	462b      	mov	r3, r5
 800c806:	b991      	cbnz	r1, 800c82e <scalbn+0x36>
 800c808:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c80c:	4323      	orrs	r3, r4
 800c80e:	d03d      	beq.n	800c88c <scalbn+0x94>
 800c810:	4b35      	ldr	r3, [pc, #212]	@ (800c8e8 <scalbn+0xf0>)
 800c812:	4620      	mov	r0, r4
 800c814:	4629      	mov	r1, r5
 800c816:	2200      	movs	r2, #0
 800c818:	f7f3 fef6 	bl	8000608 <__aeabi_dmul>
 800c81c:	4b33      	ldr	r3, [pc, #204]	@ (800c8ec <scalbn+0xf4>)
 800c81e:	429e      	cmp	r6, r3
 800c820:	4604      	mov	r4, r0
 800c822:	460d      	mov	r5, r1
 800c824:	da0f      	bge.n	800c846 <scalbn+0x4e>
 800c826:	a328      	add	r3, pc, #160	@ (adr r3, 800c8c8 <scalbn+0xd0>)
 800c828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82c:	e01e      	b.n	800c86c <scalbn+0x74>
 800c82e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c832:	4291      	cmp	r1, r2
 800c834:	d10b      	bne.n	800c84e <scalbn+0x56>
 800c836:	4622      	mov	r2, r4
 800c838:	4620      	mov	r0, r4
 800c83a:	4629      	mov	r1, r5
 800c83c:	f7f3 fd2e 	bl	800029c <__adddf3>
 800c840:	4604      	mov	r4, r0
 800c842:	460d      	mov	r5, r1
 800c844:	e022      	b.n	800c88c <scalbn+0x94>
 800c846:	460b      	mov	r3, r1
 800c848:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c84c:	3936      	subs	r1, #54	@ 0x36
 800c84e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c852:	4296      	cmp	r6, r2
 800c854:	dd0d      	ble.n	800c872 <scalbn+0x7a>
 800c856:	2d00      	cmp	r5, #0
 800c858:	a11d      	add	r1, pc, #116	@ (adr r1, 800c8d0 <scalbn+0xd8>)
 800c85a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c85e:	da02      	bge.n	800c866 <scalbn+0x6e>
 800c860:	a11d      	add	r1, pc, #116	@ (adr r1, 800c8d8 <scalbn+0xe0>)
 800c862:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c866:	a31a      	add	r3, pc, #104	@ (adr r3, 800c8d0 <scalbn+0xd8>)
 800c868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86c:	f7f3 fecc 	bl	8000608 <__aeabi_dmul>
 800c870:	e7e6      	b.n	800c840 <scalbn+0x48>
 800c872:	1872      	adds	r2, r6, r1
 800c874:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c878:	428a      	cmp	r2, r1
 800c87a:	dcec      	bgt.n	800c856 <scalbn+0x5e>
 800c87c:	2a00      	cmp	r2, #0
 800c87e:	dd08      	ble.n	800c892 <scalbn+0x9a>
 800c880:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c884:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c888:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c88c:	ec45 4b10 	vmov	d0, r4, r5
 800c890:	bd70      	pop	{r4, r5, r6, pc}
 800c892:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c896:	da08      	bge.n	800c8aa <scalbn+0xb2>
 800c898:	2d00      	cmp	r5, #0
 800c89a:	a10b      	add	r1, pc, #44	@ (adr r1, 800c8c8 <scalbn+0xd0>)
 800c89c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8a0:	dac1      	bge.n	800c826 <scalbn+0x2e>
 800c8a2:	a10f      	add	r1, pc, #60	@ (adr r1, 800c8e0 <scalbn+0xe8>)
 800c8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8a8:	e7bd      	b.n	800c826 <scalbn+0x2e>
 800c8aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c8ae:	3236      	adds	r2, #54	@ 0x36
 800c8b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c8b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f0 <scalbn+0xf8>)
 800c8bc:	4629      	mov	r1, r5
 800c8be:	2200      	movs	r2, #0
 800c8c0:	e7d4      	b.n	800c86c <scalbn+0x74>
 800c8c2:	bf00      	nop
 800c8c4:	f3af 8000 	nop.w
 800c8c8:	c2f8f359 	.word	0xc2f8f359
 800c8cc:	01a56e1f 	.word	0x01a56e1f
 800c8d0:	8800759c 	.word	0x8800759c
 800c8d4:	7e37e43c 	.word	0x7e37e43c
 800c8d8:	8800759c 	.word	0x8800759c
 800c8dc:	fe37e43c 	.word	0xfe37e43c
 800c8e0:	c2f8f359 	.word	0xc2f8f359
 800c8e4:	81a56e1f 	.word	0x81a56e1f
 800c8e8:	43500000 	.word	0x43500000
 800c8ec:	ffff3cb0 	.word	0xffff3cb0
 800c8f0:	3c900000 	.word	0x3c900000

0800c8f4 <with_errno>:
 800c8f4:	b510      	push	{r4, lr}
 800c8f6:	ed2d 8b02 	vpush	{d8}
 800c8fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c8fe:	eef0 8a60 	vmov.f32	s17, s1
 800c902:	4604      	mov	r4, r0
 800c904:	f7fb f954 	bl	8007bb0 <__errno>
 800c908:	eeb0 0a48 	vmov.f32	s0, s16
 800c90c:	eef0 0a68 	vmov.f32	s1, s17
 800c910:	ecbd 8b02 	vpop	{d8}
 800c914:	6004      	str	r4, [r0, #0]
 800c916:	bd10      	pop	{r4, pc}

0800c918 <xflow>:
 800c918:	4603      	mov	r3, r0
 800c91a:	b507      	push	{r0, r1, r2, lr}
 800c91c:	ec51 0b10 	vmov	r0, r1, d0
 800c920:	b183      	cbz	r3, 800c944 <xflow+0x2c>
 800c922:	4602      	mov	r2, r0
 800c924:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c928:	e9cd 2300 	strd	r2, r3, [sp]
 800c92c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c930:	f7f3 fe6a 	bl	8000608 <__aeabi_dmul>
 800c934:	ec41 0b10 	vmov	d0, r0, r1
 800c938:	2022      	movs	r0, #34	@ 0x22
 800c93a:	b003      	add	sp, #12
 800c93c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c940:	f7ff bfd8 	b.w	800c8f4 <with_errno>
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	e7ee      	b.n	800c928 <xflow+0x10>
 800c94a:	0000      	movs	r0, r0
 800c94c:	0000      	movs	r0, r0
	...

0800c950 <__math_uflow>:
 800c950:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c958 <__math_uflow+0x8>
 800c954:	f7ff bfe0 	b.w	800c918 <xflow>
 800c958:	00000000 	.word	0x00000000
 800c95c:	10000000 	.word	0x10000000

0800c960 <__math_oflow>:
 800c960:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c968 <__math_oflow+0x8>
 800c964:	f7ff bfd8 	b.w	800c918 <xflow>
 800c968:	00000000 	.word	0x00000000
 800c96c:	70000000 	.word	0x70000000

0800c970 <scalbnf>:
 800c970:	ee10 3a10 	vmov	r3, s0
 800c974:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c978:	d02b      	beq.n	800c9d2 <scalbnf+0x62>
 800c97a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c97e:	d302      	bcc.n	800c986 <scalbnf+0x16>
 800c980:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c984:	4770      	bx	lr
 800c986:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c98a:	d123      	bne.n	800c9d4 <scalbnf+0x64>
 800c98c:	4b24      	ldr	r3, [pc, #144]	@ (800ca20 <scalbnf+0xb0>)
 800c98e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ca24 <scalbnf+0xb4>
 800c992:	4298      	cmp	r0, r3
 800c994:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c998:	db17      	blt.n	800c9ca <scalbnf+0x5a>
 800c99a:	ee10 3a10 	vmov	r3, s0
 800c99e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c9a2:	3a19      	subs	r2, #25
 800c9a4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c9a8:	4288      	cmp	r0, r1
 800c9aa:	dd15      	ble.n	800c9d8 <scalbnf+0x68>
 800c9ac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ca28 <scalbnf+0xb8>
 800c9b0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ca2c <scalbnf+0xbc>
 800c9b4:	ee10 3a10 	vmov	r3, s0
 800c9b8:	eeb0 7a67 	vmov.f32	s14, s15
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	bfb8      	it	lt
 800c9c0:	eef0 7a66 	vmovlt.f32	s15, s13
 800c9c4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c9c8:	4770      	bx	lr
 800c9ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ca30 <scalbnf+0xc0>
 800c9ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c9d2:	4770      	bx	lr
 800c9d4:	0dd2      	lsrs	r2, r2, #23
 800c9d6:	e7e5      	b.n	800c9a4 <scalbnf+0x34>
 800c9d8:	4410      	add	r0, r2
 800c9da:	28fe      	cmp	r0, #254	@ 0xfe
 800c9dc:	dce6      	bgt.n	800c9ac <scalbnf+0x3c>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	dd06      	ble.n	800c9f0 <scalbnf+0x80>
 800c9e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c9e6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c9ea:	ee00 3a10 	vmov	s0, r3
 800c9ee:	4770      	bx	lr
 800c9f0:	f110 0f16 	cmn.w	r0, #22
 800c9f4:	da09      	bge.n	800ca0a <scalbnf+0x9a>
 800c9f6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ca30 <scalbnf+0xc0>
 800c9fa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ca34 <scalbnf+0xc4>
 800c9fe:	ee10 3a10 	vmov	r3, s0
 800ca02:	eeb0 7a67 	vmov.f32	s14, s15
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	e7d9      	b.n	800c9be <scalbnf+0x4e>
 800ca0a:	3019      	adds	r0, #25
 800ca0c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ca10:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ca14:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ca38 <scalbnf+0xc8>
 800ca18:	ee07 3a90 	vmov	s15, r3
 800ca1c:	e7d7      	b.n	800c9ce <scalbnf+0x5e>
 800ca1e:	bf00      	nop
 800ca20:	ffff3cb0 	.word	0xffff3cb0
 800ca24:	4c000000 	.word	0x4c000000
 800ca28:	7149f2ca 	.word	0x7149f2ca
 800ca2c:	f149f2ca 	.word	0xf149f2ca
 800ca30:	0da24260 	.word	0x0da24260
 800ca34:	8da24260 	.word	0x8da24260
 800ca38:	33000000 	.word	0x33000000

0800ca3c <with_errnof>:
 800ca3c:	b510      	push	{r4, lr}
 800ca3e:	ed2d 8b02 	vpush	{d8}
 800ca42:	eeb0 8a40 	vmov.f32	s16, s0
 800ca46:	4604      	mov	r4, r0
 800ca48:	f7fb f8b2 	bl	8007bb0 <__errno>
 800ca4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ca50:	ecbd 8b02 	vpop	{d8}
 800ca54:	6004      	str	r4, [r0, #0]
 800ca56:	bd10      	pop	{r4, pc}

0800ca58 <xflowf>:
 800ca58:	b130      	cbz	r0, 800ca68 <xflowf+0x10>
 800ca5a:	eef1 7a40 	vneg.f32	s15, s0
 800ca5e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ca62:	2022      	movs	r0, #34	@ 0x22
 800ca64:	f7ff bfea 	b.w	800ca3c <with_errnof>
 800ca68:	eef0 7a40 	vmov.f32	s15, s0
 800ca6c:	e7f7      	b.n	800ca5e <xflowf+0x6>
	...

0800ca70 <__math_uflowf>:
 800ca70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ca78 <__math_uflowf+0x8>
 800ca74:	f7ff bff0 	b.w	800ca58 <xflowf>
 800ca78:	10000000 	.word	0x10000000

0800ca7c <__math_oflowf>:
 800ca7c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ca84 <__math_oflowf+0x8>
 800ca80:	f7ff bfea 	b.w	800ca58 <xflowf>
 800ca84:	70000000 	.word	0x70000000

0800ca88 <_init>:
 800ca88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8a:	bf00      	nop
 800ca8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca8e:	bc08      	pop	{r3}
 800ca90:	469e      	mov	lr, r3
 800ca92:	4770      	bx	lr

0800ca94 <_fini>:
 800ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca96:	bf00      	nop
 800ca98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9a:	bc08      	pop	{r3}
 800ca9c:	469e      	mov	lr, r3
 800ca9e:	4770      	bx	lr
