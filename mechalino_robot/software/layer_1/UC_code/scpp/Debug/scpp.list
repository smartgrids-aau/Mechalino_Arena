
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9b8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800cb58  0800cb58  0000db58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d150  0800d150  0000f238  2**0
                  CONTENTS
  4 .ARM          00000008  0800d150  0800d150  0000e150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d158  0800d158  0000f238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d158  0800d158  0000e158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d15c  0800d15c  0000e15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800d160  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  20000238  0800d398  0000f238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  0800d398  0000f980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a55  00000000  00000000  0000f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf1  00000000  00000000  00021cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  000248b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dab  00000000  00000000  00025a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b08  00000000  00000000  000267c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b29  00000000  00000000  000402cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f512  00000000  00000000  00056df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000f6306  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006768  00000000  00000000  000f638c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000fcaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cb40 	.word	0x0800cb40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	0800cb40 	.word	0x0800cb40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_ADC1_Init+0xa0>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001016:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001024:	2201      	movs	r2, #1
 8001026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <MX_ADC1_Init+0xa4>)
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001058:	f001 fd02 	bl	8002a60 <HAL_ADC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001062:	f001 f8d3 	bl	800220c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001078:	f001 fd36 	bl	8002ae8 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001082:	f001 f8c3 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000254 	.word	0x20000254
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f002 f8af 	bl	800326c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b0:	4815      	ldr	r0, [pc, #84]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011b2:	f002 f9df 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011b6:	2200      	movs	r2, #0
 80011b8:	213b      	movs	r1, #59	@ 0x3b
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011bc:	f002 f9da 	bl	8003574 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011da:	f002 f847 	bl	800326c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011de:	233b      	movs	r3, #59	@ 0x3b
 80011e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011f6:	f002 f839 	bl	800326c <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020400 	.word	0x40020400

08001210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f002 f9ab 	bl	80035a8 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 ffd8 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000029c 	.word	0x2000029c
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f001 ffd0 	bl	800326c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_UART_RxCpltCallback>:

/**
 * @brief UART Receive Complete Callback.
 * @param huart Pointer to UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_UART_RxCpltCallback+0x5c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d120      	bne.n	8001350 <HAL_UART_RxCpltCallback+0x54>
		if (UART1_rxBuffer[0] == '\n') { // Assuming commands are newline terminated
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d10c      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x34>
			rx_buffer[rx_index] = '\0'; // Null terminate the string
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]
			rx_complete = 1; // Set flag for command complete
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_RxCpltCallback+0x6c>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
			rx_index = 0; // Reset index
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e00a      	b.n	8001346 <HAL_UART_RxCpltCallback+0x4a>
		} else {
			rx_buffer[rx_index++] = UART1_rxBuffer[0]; // Store character in buffer
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800133a:	7011      	strb	r1, [r2, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 8001344:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1); // Listen for next character
 8001346:	2201      	movs	r2, #1
 8001348:	4904      	ldr	r1, [pc, #16]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 800134a:	4808      	ldr	r0, [pc, #32]	@ (800136c <HAL_UART_RxCpltCallback+0x70>)
 800134c:	f003 fe45 	bl	8004fda <HAL_UART_Receive_IT>
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	200003fc 	.word	0x200003fc
 8001360:	200003f4 	.word	0x200003f4
 8001364:	200002f4 	.word	0x200002f4
 8001368:	200003f8 	.word	0x200003f8
 800136c:	200007e8 	.word	0x200007e8

08001370 <pid_controller>:
 * @param pid Pointer to PIDController structure.
 * @param setpoint Desired setpoint.
 * @param measured_value Current measured value.
 * @return Control output.
 */
float pid_controller(PIDController *pid, float setpoint, float measured_value) {
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	ed87 0a02 	vstr	s0, [r7, #8]
 800137c:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measured_value;
 8001380:	ed97 7a02 	vldr	s14, [r7, #8]
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->integral += error;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	ed93 7a00 	vldr	s14, [r3]
 8001396:	edd7 7a06 	vldr	s15, [r7, #24]
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	edc3 7a00 	vstr	s15, [r3]

	// Anti-windup: Limit the integral term
	if (pid->integral > pid->integral_limit)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80013b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	dd03      	ble.n	80013c2 <pid_controller+0x52>
		pid->integral = pid->integral_limit;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]
	if (pid->integral < -pid->integral_limit)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	ed93 7a00 	vldr	s14, [r3]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80013ce:	eef1 7a67 	vneg.f32	s15, s15
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d507      	bpl.n	80013ec <pid_controller+0x7c>
		pid->integral = -pid->integral_limit;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	edd3 7a05 	vldr	s15, [r3, #20]
 80013e2:	eef1 7a67 	vneg.f32	s15, s15
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	edc3 7a00 	vstr	s15, [r3]

	float derivative = error - pid->previous_error;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80013f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fa:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->previous_error = error;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]

	float output = pid->kp * error + pid->ki * pid->integral
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	ed93 7a02 	vldr	s14, [r3, #8]
 800140a:	edd7 7a06 	vldr	s15, [r7, #24]
 800140e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	edd3 6a03 	vldr	s13, [r3, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->kd * derivative;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	edd3 6a04 	vldr	s13, [r3, #16]
 800142c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001430:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float output = pid->kp * error + pid->ki * pid->integral
 8001434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001438:	edc7 7a07 	vstr	s15, [r7, #28]

	// Limit the output to the maximum correction factor
	if (output > pid->output_limit)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001442:	ed97 7a07 	vldr	s14, [r7, #28]
 8001446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	dd02      	ble.n	8001456 <pid_controller+0xe6>
		output = pid->output_limit;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	61fb      	str	r3, [r7, #28]
	if (output < -pid->output_limit)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	edd3 7a06 	vldr	s15, [r3, #24]
 800145c:	eef1 7a67 	vneg.f32	s15, s15
 8001460:	ed97 7a07 	vldr	s14, [r7, #28]
 8001464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	d506      	bpl.n	800147c <pid_controller+0x10c>
		output = -pid->output_limit;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	edd3 7a06 	vldr	s15, [r3, #24]
 8001474:	eef1 7a67 	vneg.f32	s15, s15
 8001478:	edc7 7a07 	vstr	s15, [r7, #28]

	return output;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	ee07 3a90 	vmov	s15, r3
}
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	3724      	adds	r7, #36	@ 0x24
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <handle_rotation>:

/**
 * @brief Handle the rotation of the robot towards the target angle.
 */
void handle_rotation() {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
	float target_angle = calculate_angle(current_x, current_y, target_x,
 8001496:	4b64      	ldr	r3, [pc, #400]	@ (8001628 <handle_rotation+0x198>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	4b63      	ldr	r3, [pc, #396]	@ (800162c <handle_rotation+0x19c>)
 800149e:	ed93 7a00 	vldr	s14, [r3]
 80014a2:	4b63      	ldr	r3, [pc, #396]	@ (8001630 <handle_rotation+0x1a0>)
 80014a4:	edd3 6a00 	vldr	s13, [r3]
 80014a8:	4b62      	ldr	r3, [pc, #392]	@ (8001634 <handle_rotation+0x1a4>)
 80014aa:	ed93 6a00 	vldr	s12, [r3]
 80014ae:	eef0 1a46 	vmov.f32	s3, s12
 80014b2:	eeb0 1a66 	vmov.f32	s2, s13
 80014b6:	eef0 0a47 	vmov.f32	s1, s14
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	f000 fa77 	bl	80019b0 <calculate_angle>
 80014c2:	ed87 0a02 	vstr	s0, [r7, #8]
			target_y);
	angle_error = target_angle - current_yaw;
 80014c6:	4b5c      	ldr	r3, [pc, #368]	@ (8001638 <handle_rotation+0x1a8>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d4:	4b59      	ldr	r3, [pc, #356]	@ (800163c <handle_rotation+0x1ac>)
 80014d6:	edc3 7a00 	vstr	s15, [r3]

	// Normalize the angle error to always choose the shortest rotation path
	if (angle_error > 180) {
 80014da:	4b58      	ldr	r3, [pc, #352]	@ (800163c <handle_rotation+0x1ac>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001640 <handle_rotation+0x1b0>
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	dd0a      	ble.n	8001504 <handle_rotation+0x74>
		angle_error -= 360;
 80014ee:	4b53      	ldr	r3, [pc, #332]	@ (800163c <handle_rotation+0x1ac>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001644 <handle_rotation+0x1b4>
 80014f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014fc:	4b4f      	ldr	r3, [pc, #316]	@ (800163c <handle_rotation+0x1ac>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
 8001502:	e013      	b.n	800152c <handle_rotation+0x9c>
	} else if (angle_error < -180) {
 8001504:	4b4d      	ldr	r3, [pc, #308]	@ (800163c <handle_rotation+0x1ac>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001648 <handle_rotation+0x1b8>
 800150e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d509      	bpl.n	800152c <handle_rotation+0x9c>
		angle_error += 360;
 8001518:	4b48      	ldr	r3, [pc, #288]	@ (800163c <handle_rotation+0x1ac>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001644 <handle_rotation+0x1b4>
 8001522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001526:	4b45      	ldr	r3, [pc, #276]	@ (800163c <handle_rotation+0x1ac>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
	}

	if (fabsf(angle_error) > ANGLE_THRESHOLD_ROTATE_TO_MOVE) {
 800152c:	4b43      	ldr	r3, [pc, #268]	@ (800163c <handle_rotation+0x1ac>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	eef0 7ae7 	vabs.f32	s15, s15
 8001536:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800153a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	dd60      	ble.n	8001606 <handle_rotation+0x176>
		// Normalize the angle error for rotation
		float normalized_angle_error = angle_error / 180.0f;
 8001544:	4b3d      	ldr	r3, [pc, #244]	@ (800163c <handle_rotation+0x1ac>)
 8001546:	ed93 7a00 	vldr	s14, [r3]
 800154a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001640 <handle_rotation+0x1b0>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc7 7a01 	vstr	s15, [r7, #4]

		// PID-based correction for rotation
		calculated_correction = pid_controller(&rotation_pid, 0.0f,
 8001556:	edd7 0a01 	vldr	s1, [r7, #4]
 800155a:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 800164c <handle_rotation+0x1bc>
 800155e:	483c      	ldr	r0, [pc, #240]	@ (8001650 <handle_rotation+0x1c0>)
 8001560:	f7ff ff06 	bl	8001370 <pid_controller>
 8001564:	eef0 7a40 	vmov.f32	s15, s0
 8001568:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <handle_rotation+0x1c4>)
 800156a:	edc3 7a00 	vstr	s15, [r3]
				normalized_angle_error);

		uint32_t left_right_pwm;

		if (angle_error > 0) {
 800156e:	4b33      	ldr	r3, [pc, #204]	@ (800163c <handle_rotation+0x1ac>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd1c      	ble.n	80015b8 <handle_rotation+0x128>
			// Rotate right: Both motors move forward speed
			left_right_pwm = FORWARD_SLOW + calculated_correction;
 800157e:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <handle_rotation+0x1c4>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001658 <handle_rotation+0x1c8>
 8001588:	ee77 7a87 	vadd.f32	s15, s15, s14
 800158c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	60fb      	str	r3, [r7, #12]

			// Ensure PWM values are within valid ranges
			if (left_right_pwm > FORWARD_MAX)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800159c:	4293      	cmp	r3, r2
 800159e:	d902      	bls.n	80015a6 <handle_rotation+0x116>
				left_right_pwm = FORWARD_MAX;
 80015a0:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 80015a4:	60fb      	str	r3, [r7, #12]
			if (left_right_pwm < FORWARD_SLOW)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f640 42b1 	movw	r2, #3249	@ 0xcb1
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d81d      	bhi.n	80015ec <handle_rotation+0x15c>
				left_right_pwm = FORWARD_SLOW;
 80015b0:	f640 43b2 	movw	r3, #3250	@ 0xcb2
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e019      	b.n	80015ec <handle_rotation+0x15c>
		} else {
			// Rotate left: Both motors move backward speed
			left_right_pwm = BACKWARD_SLOW - calculated_correction;
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <handle_rotation+0x1c4>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800165c <handle_rotation+0x1cc>
 80015c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ca:	ee17 3a90 	vmov	r3, s15
 80015ce:	60fb      	str	r3, [r7, #12]

			// Ensure PWM values are within valid ranges
			if (left_right_pwm < BACKWARD_MAX)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80015d6:	d202      	bcs.n	80015de <handle_rotation+0x14e>
				left_right_pwm = BACKWARD_MAX;
 80015d8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80015dc:	60fb      	str	r3, [r7, #12]
			if (left_right_pwm > BACKWARD_SLOW)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 80015e4:	d902      	bls.n	80015ec <handle_rotation+0x15c>
				left_right_pwm = BACKWARD_SLOW;
 80015e6:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80015ea:	60fb      	str	r3, [r7, #12]
		}

		angle_error = 0.0f; // reset angle error for better performance monitoring over udp as only handle_movement angle_error should be captured
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <handle_rotation+0x1ac>)
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

		set_servo_pwm(&servo_left, left_right_pwm);
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	481a      	ldr	r0, [pc, #104]	@ (8001660 <handle_rotation+0x1d0>)
 80015f8:	f000 fc4a 	bl	8001e90 <set_servo_pwm>
		set_servo_pwm(&servo_right, left_right_pwm);
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	4819      	ldr	r0, [pc, #100]	@ (8001664 <handle_rotation+0x1d4>)
 8001600:	f000 fc46 	bl	8001e90 <set_servo_pwm>
		// Stop rotating and switch to moving state
		set_servo_pwm(&servo_left, SERVO_STOP);
		set_servo_pwm(&servo_right, SERVO_STOP);
		current_state = MOVING;
	}
}
 8001604:	e00c      	b.n	8001620 <handle_rotation+0x190>
		set_servo_pwm(&servo_left, SERVO_STOP);
 8001606:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800160a:	4815      	ldr	r0, [pc, #84]	@ (8001660 <handle_rotation+0x1d0>)
 800160c:	f000 fc40 	bl	8001e90 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001610:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001614:	4813      	ldr	r0, [pc, #76]	@ (8001664 <handle_rotation+0x1d4>)
 8001616:	f000 fc3b 	bl	8001e90 <set_servo_pwm>
		current_state = MOVING;
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <handle_rotation+0x1d8>)
 800161c:	2202      	movs	r2, #2
 800161e:	701a      	strb	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000400 	.word	0x20000400
 800162c:	20000404 	.word	0x20000404
 8001630:	2000040c 	.word	0x2000040c
 8001634:	20000410 	.word	0x20000410
 8001638:	20000408 	.word	0x20000408
 800163c:	2000073c 	.word	0x2000073c
 8001640:	43340000 	.word	0x43340000
 8001644:	43b40000 	.word	0x43b40000
 8001648:	c3340000 	.word	0xc3340000
 800164c:	00000000 	.word	0x00000000
 8001650:	20000018 	.word	0x20000018
 8001654:	20000740 	.word	0x20000740
 8001658:	454b2000 	.word	0x454b2000
 800165c:	452f0000 	.word	0x452f0000
 8001660:	20000000 	.word	0x20000000
 8001664:	2000000c 	.word	0x2000000c
 8001668:	200002f0 	.word	0x200002f0

0800166c <handle_movement>:

/**
 * @brief Handle the movement of the robot towards the target position.
 */
void handle_movement() {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
	target_distance = distance_to_target(current_x, current_y, target_x,
 8001672:	4bb4      	ldr	r3, [pc, #720]	@ (8001944 <handle_movement+0x2d8>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	4bb3      	ldr	r3, [pc, #716]	@ (8001948 <handle_movement+0x2dc>)
 800167a:	ed93 7a00 	vldr	s14, [r3]
 800167e:	4bb3      	ldr	r3, [pc, #716]	@ (800194c <handle_movement+0x2e0>)
 8001680:	edd3 6a00 	vldr	s13, [r3]
 8001684:	4bb2      	ldr	r3, [pc, #712]	@ (8001950 <handle_movement+0x2e4>)
 8001686:	ed93 6a00 	vldr	s12, [r3]
 800168a:	eef0 1a46 	vmov.f32	s3, s12
 800168e:	eeb0 1a66 	vmov.f32	s2, s13
 8001692:	eef0 0a47 	vmov.f32	s1, s14
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	f000 fa4b 	bl	8001b34 <distance_to_target>
 800169e:	eef0 7a40 	vmov.f32	s15, s0
 80016a2:	4bac      	ldr	r3, [pc, #688]	@ (8001954 <handle_movement+0x2e8>)
 80016a4:	edc3 7a00 	vstr	s15, [r3]
			target_y);
	float target_angle = calculate_angle(current_x, current_y, target_x,
 80016a8:	4ba6      	ldr	r3, [pc, #664]	@ (8001944 <handle_movement+0x2d8>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	4ba6      	ldr	r3, [pc, #664]	@ (8001948 <handle_movement+0x2dc>)
 80016b0:	ed93 7a00 	vldr	s14, [r3]
 80016b4:	4ba5      	ldr	r3, [pc, #660]	@ (800194c <handle_movement+0x2e0>)
 80016b6:	edd3 6a00 	vldr	s13, [r3]
 80016ba:	4ba5      	ldr	r3, [pc, #660]	@ (8001950 <handle_movement+0x2e4>)
 80016bc:	ed93 6a00 	vldr	s12, [r3]
 80016c0:	eef0 1a46 	vmov.f32	s3, s12
 80016c4:	eeb0 1a66 	vmov.f32	s2, s13
 80016c8:	eef0 0a47 	vmov.f32	s1, s14
 80016cc:	eeb0 0a67 	vmov.f32	s0, s15
 80016d0:	f000 f96e 	bl	80019b0 <calculate_angle>
 80016d4:	ed87 0a03 	vstr	s0, [r7, #12]
			target_y);
	angle_error = target_angle - current_yaw;
 80016d8:	4b9f      	ldr	r3, [pc, #636]	@ (8001958 <handle_movement+0x2ec>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ed97 7a03 	vldr	s14, [r7, #12]
 80016e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e6:	4b9d      	ldr	r3, [pc, #628]	@ (800195c <handle_movement+0x2f0>)
 80016e8:	edc3 7a00 	vstr	s15, [r3]

	// Normalize the angle error to [-180, 180]
	if (angle_error > 180.0f) {
 80016ec:	4b9b      	ldr	r3, [pc, #620]	@ (800195c <handle_movement+0x2f0>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8001960 <handle_movement+0x2f4>
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	dd0a      	ble.n	8001716 <handle_movement+0xaa>
		angle_error -= 360.0f;
 8001700:	4b96      	ldr	r3, [pc, #600]	@ (800195c <handle_movement+0x2f0>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8001964 <handle_movement+0x2f8>
 800170a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800170e:	4b93      	ldr	r3, [pc, #588]	@ (800195c <handle_movement+0x2f0>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
 8001714:	e013      	b.n	800173e <handle_movement+0xd2>
	} else if (angle_error < -180.0f) {
 8001716:	4b91      	ldr	r3, [pc, #580]	@ (800195c <handle_movement+0x2f0>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8001968 <handle_movement+0x2fc>
 8001720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	d509      	bpl.n	800173e <handle_movement+0xd2>
		angle_error += 360.0f;
 800172a:	4b8c      	ldr	r3, [pc, #560]	@ (800195c <handle_movement+0x2f0>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001964 <handle_movement+0x2f8>
 8001734:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001738:	4b88      	ldr	r3, [pc, #544]	@ (800195c <handle_movement+0x2f0>)
 800173a:	edc3 7a00 	vstr	s15, [r3]
	}

	if (target_distance > DISTANCE_THRESHOLD_MOVE_TO_STOP) {
 800173e:	4b85      	ldr	r3, [pc, #532]	@ (8001954 <handle_movement+0x2e8>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 800196c <handle_movement+0x300>
 8001748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	f340 808a 	ble.w	8001868 <handle_movement+0x1fc>
		if (fabsf(angle_error) > ANGLE_THRESHOLD_MOVE_TO_ROTATE) {
 8001754:	4b81      	ldr	r3, [pc, #516]	@ (800195c <handle_movement+0x2f0>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	eef0 7ae7 	vabs.f32	s15, s15
 800175e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	dd0d      	ble.n	8001788 <handle_movement+0x11c>
			// If the angle error is too large, switch to rotating state
			set_servo_pwm(&servo_left, SERVO_STOP);
 800176c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001770:	487f      	ldr	r0, [pc, #508]	@ (8001970 <handle_movement+0x304>)
 8001772:	f000 fb8d 	bl	8001e90 <set_servo_pwm>
			set_servo_pwm(&servo_right, SERVO_STOP);
 8001776:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800177a:	487e      	ldr	r0, [pc, #504]	@ (8001974 <handle_movement+0x308>)
 800177c:	f000 fb88 	bl	8001e90 <set_servo_pwm>
			current_state = ROTATING;
 8001780:	4b7d      	ldr	r3, [pc, #500]	@ (8001978 <handle_movement+0x30c>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
			return;
 8001786:	e0d9      	b.n	800193c <handle_movement+0x2d0>
		}

		// Normalize the angle error
		float normalized_angle_error = angle_error
				/ ANGLE_THRESHOLD_MOVE_TO_ROTATE;
 8001788:	4b74      	ldr	r3, [pc, #464]	@ (800195c <handle_movement+0x2f0>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
		float normalized_angle_error = angle_error
 800178e:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	edc7 7a01 	vstr	s15, [r7, #4]

		// PID-based correction for forward movement
		calculated_correction = pid_controller(&movement_pid, 0.0f,
 800179a:	edd7 0a01 	vldr	s1, [r7, #4]
 800179e:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 800197c <handle_movement+0x310>
 80017a2:	4877      	ldr	r0, [pc, #476]	@ (8001980 <handle_movement+0x314>)
 80017a4:	f7ff fde4 	bl	8001370 <pid_controller>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	4b75      	ldr	r3, [pc, #468]	@ (8001984 <handle_movement+0x318>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]
				normalized_angle_error);

		// Base speeds for both motors
		uint32_t left_pwm = BASE_SPEED_FORWARD;
 80017b2:	f241 034f 	movw	r3, #4175	@ 0x104f
 80017b6:	617b      	str	r3, [r7, #20]
		uint32_t right_pwm = BASE_SPEED_BACKWARD;
 80017b8:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 80017bc:	613b      	str	r3, [r7, #16]

		// Limit the correction to prevent excessive adjustments
		if (calculated_correction > MAX_CORRECTION)
 80017be:	4b71      	ldr	r3, [pc, #452]	@ (8001984 <handle_movement+0x318>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001988 <handle_movement+0x31c>
 80017c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d0:	dd02      	ble.n	80017d8 <handle_movement+0x16c>
			calculated_correction = MAX_CORRECTION;
 80017d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001984 <handle_movement+0x318>)
 80017d4:	4a6d      	ldr	r2, [pc, #436]	@ (800198c <handle_movement+0x320>)
 80017d6:	601a      	str	r2, [r3, #0]
		if (calculated_correction < -MAX_CORRECTION)
 80017d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001984 <handle_movement+0x318>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001990 <handle_movement+0x324>
 80017e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	d502      	bpl.n	80017f2 <handle_movement+0x186>
			calculated_correction = -MAX_CORRECTION;
 80017ec:	4b65      	ldr	r3, [pc, #404]	@ (8001984 <handle_movement+0x318>)
 80017ee:	4a69      	ldr	r2, [pc, #420]	@ (8001994 <handle_movement+0x328>)
 80017f0:	601a      	str	r2, [r3, #0]

		// Adjust PWM values based on the correction
		left_pwm += (int32_t) (calculated_correction); // Left motor PWM increases with speed
 80017f2:	4b64      	ldr	r3, [pc, #400]	@ (8001984 <handle_movement+0x318>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fc:	ee17 2a90 	vmov	r2, s15
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	4413      	add	r3, r2
 8001804:	617b      	str	r3, [r7, #20]
		right_pwm -= (int32_t) (calculated_correction); // Right motor PWM decreases with speed
 8001806:	4b5f      	ldr	r3, [pc, #380]	@ (8001984 <handle_movement+0x318>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001810:	ee17 2a90 	vmov	r2, s15
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	613b      	str	r3, [r7, #16]

		// Ensure PWM values are within valid ranges
		if (left_pwm > FORWARD_MAX)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8001820:	4293      	cmp	r3, r2
 8001822:	d902      	bls.n	800182a <handle_movement+0x1be>
			left_pwm = FORWARD_MAX;
 8001824:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8001828:	617b      	str	r3, [r7, #20]
		if (left_pwm < FORWARD_SLOW)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f640 42b1 	movw	r2, #3249	@ 0xcb1
 8001830:	4293      	cmp	r3, r2
 8001832:	d802      	bhi.n	800183a <handle_movement+0x1ce>
			left_pwm = FORWARD_SLOW;
 8001834:	f640 43b2 	movw	r3, #3250	@ 0xcb2
 8001838:	617b      	str	r3, [r7, #20]

		if (right_pwm < BACKWARD_MAX)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001840:	d202      	bcs.n	8001848 <handle_movement+0x1dc>
			right_pwm = BACKWARD_MAX;
 8001842:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001846:	613b      	str	r3, [r7, #16]
		if (right_pwm > BACKWARD_SLOW)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800184e:	d902      	bls.n	8001856 <handle_movement+0x1ea>
			right_pwm = BACKWARD_SLOW;
 8001850:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001854:	613b      	str	r3, [r7, #16]

		set_servo_pwm(&servo_left, left_pwm);
 8001856:	6979      	ldr	r1, [r7, #20]
 8001858:	4845      	ldr	r0, [pc, #276]	@ (8001970 <handle_movement+0x304>)
 800185a:	f000 fb19 	bl	8001e90 <set_servo_pwm>
		set_servo_pwm(&servo_right, right_pwm);
 800185e:	6939      	ldr	r1, [r7, #16]
 8001860:	4844      	ldr	r0, [pc, #272]	@ (8001974 <handle_movement+0x308>)
 8001862:	f000 fb15 	bl	8001e90 <set_servo_pwm>
 8001866:	e069      	b.n	800193c <handle_movement+0x2d0>
	} else {
		// Stop the robot when it reaches the target
		set_servo_pwm(&servo_left, SERVO_STOP);
 8001868:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800186c:	4840      	ldr	r0, [pc, #256]	@ (8001970 <handle_movement+0x304>)
 800186e:	f000 fb0f 	bl	8001e90 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001872:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001876:	483f      	ldr	r0, [pc, #252]	@ (8001974 <handle_movement+0x308>)
 8001878:	f000 fb0a 	bl	8001e90 <set_servo_pwm>

		current_state = ROTATING;
 800187c:	4b3e      	ldr	r3, [pc, #248]	@ (8001978 <handle_movement+0x30c>)
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]

		// Hysteresis for distance threshold
		if (target_distance < DISTANCE_THRESHOLD_STOP_TO_MOVE) {
 8001882:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <handle_movement+0x2e8>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001998 <handle_movement+0x32c>
 800188c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d552      	bpl.n	800193c <handle_movement+0x2d0>
			currentTargetIndex++;
 8001896:	4b41      	ldr	r3, [pc, #260]	@ (800199c <handle_movement+0x330>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	4a3f      	ldr	r2, [pc, #252]	@ (800199c <handle_movement+0x330>)
 800189e:	6013      	str	r3, [r2, #0]
			if (currentTargetIndex < totalCoords) {
 80018a0:	4b3e      	ldr	r3, [pc, #248]	@ (800199c <handle_movement+0x330>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b3e      	ldr	r3, [pc, #248]	@ (80019a0 <handle_movement+0x334>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	da41      	bge.n	8001930 <handle_movement+0x2c4>
				target_x = xCoords[currentTargetIndex];
 80018ac:	4b3b      	ldr	r3, [pc, #236]	@ (800199c <handle_movement+0x330>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a3c      	ldr	r2, [pc, #240]	@ (80019a4 <handle_movement+0x338>)
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a24      	ldr	r2, [pc, #144]	@ (800194c <handle_movement+0x2e0>)
 80018ba:	6013      	str	r3, [r2, #0]
				target_y = yCoords[currentTargetIndex];
 80018bc:	4b37      	ldr	r3, [pc, #220]	@ (800199c <handle_movement+0x330>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a39      	ldr	r2, [pc, #228]	@ (80019a8 <handle_movement+0x33c>)
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a21      	ldr	r2, [pc, #132]	@ (8001950 <handle_movement+0x2e4>)
 80018ca:	6013      	str	r3, [r2, #0]
				float target_angle = calculate_angle(current_x, current_y,
 80018cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <handle_movement+0x2d8>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <handle_movement+0x2dc>)
 80018d4:	ed93 7a00 	vldr	s14, [r3]
 80018d8:	4b1c      	ldr	r3, [pc, #112]	@ (800194c <handle_movement+0x2e0>)
 80018da:	edd3 6a00 	vldr	s13, [r3]
 80018de:	4b1c      	ldr	r3, [pc, #112]	@ (8001950 <handle_movement+0x2e4>)
 80018e0:	ed93 6a00 	vldr	s12, [r3]
 80018e4:	eef0 1a46 	vmov.f32	s3, s12
 80018e8:	eeb0 1a66 	vmov.f32	s2, s13
 80018ec:	eef0 0a47 	vmov.f32	s1, s14
 80018f0:	eeb0 0a67 	vmov.f32	s0, s15
 80018f4:	f000 f85c 	bl	80019b0 <calculate_angle>
 80018f8:	ed87 0a02 	vstr	s0, [r7, #8]
						target_x, target_y);
				angle_error = target_angle - current_yaw;
 80018fc:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <handle_movement+0x2ec>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	ed97 7a02 	vldr	s14, [r7, #8]
 8001906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <handle_movement+0x2f0>)
 800190c:	edc3 7a00 	vstr	s15, [r3]
				if (fabsf(angle_error) < ANGLE_THRESHOLD_MOVE_TO_ROTATE) {
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <handle_movement+0x2f0>)
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	eef0 7ae7 	vabs.f32	s15, s15
 800191a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800191e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d509      	bpl.n	800193c <handle_movement+0x2d0>
					current_state = MOVING;
 8001928:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <handle_movement+0x30c>)
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
					return;
 800192e:	e005      	b.n	800193c <handle_movement+0x2d0>
				}
			} else {
				current_state = IDLE;
 8001930:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <handle_movement+0x30c>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
				path_set = 0;
 8001936:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <handle_movement+0x340>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000400 	.word	0x20000400
 8001948:	20000404 	.word	0x20000404
 800194c:	2000040c 	.word	0x2000040c
 8001950:	20000410 	.word	0x20000410
 8001954:	20000744 	.word	0x20000744
 8001958:	20000408 	.word	0x20000408
 800195c:	2000073c 	.word	0x2000073c
 8001960:	43340000 	.word	0x43340000
 8001964:	43b40000 	.word	0x43b40000
 8001968:	c3340000 	.word	0xc3340000
 800196c:	3df5c28f 	.word	0x3df5c28f
 8001970:	20000000 	.word	0x20000000
 8001974:	2000000c 	.word	0x2000000c
 8001978:	200002f0 	.word	0x200002f0
 800197c:	00000000 	.word	0x00000000
 8001980:	20000034 	.word	0x20000034
 8001984:	20000740 	.word	0x20000740
 8001988:	44610000 	.word	0x44610000
 800198c:	44610000 	.word	0x44610000
 8001990:	c4610000 	.word	0xc4610000
 8001994:	c4610000 	.word	0xc4610000
 8001998:	3e19999a 	.word	0x3e19999a
 800199c:	20000738 	.word	0x20000738
 80019a0:	20000734 	.word	0x20000734
 80019a4:	20000414 	.word	0x20000414
 80019a8:	200005a4 	.word	0x200005a4
 80019ac:	2000074c 	.word	0x2000074c

080019b0 <calculate_angle>:
 * @param y Current y position.
 * @param x_next Target x position.
 * @param y_next Target y position.
 * @return Angle in degrees.
 */
float calculate_angle(float x, float y, float x_next, float y_next) {
 80019b0:	b5b0      	push	{r4, r5, r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80019ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80019be:	ed87 1a01 	vstr	s2, [r7, #4]
 80019c2:	edc7 1a00 	vstr	s3, [r7]
	// Calculation of the scalar product
	float dot_product = -y * (y_next - y);
 80019c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ca:	eeb1 7a67 	vneg.f32	s14, s15
 80019ce:	edd7 6a00 	vldr	s13, [r7]
 80019d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019de:	edc7 7a07 	vstr	s15, [r7, #28]

	// Length of vectors
	float length_v1 = fabsf(y); // Since v1 is the length of (0, -y), the length corresponds to |y|
 80019e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e6:	eef0 7ae7 	vabs.f32	s15, s15
 80019ea:	edc7 7a06 	vstr	s15, [r7, #24]
	float length_v2 = (float) sqrt(pow(x_next - x, 2) + pow(y_next - y, 2));
 80019ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fa:	ee17 0a90 	vmov	r0, s15
 80019fe:	f7fe fdab 	bl	8000558 <__aeabi_f2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8001b20 <calculate_angle+0x170>
 8001a0a:	ec43 2b10 	vmov	d0, r2, r3
 8001a0e:	f009 fac7 	bl	800afa0 <pow>
 8001a12:	ec55 4b10 	vmov	r4, r5, d0
 8001a16:	ed97 7a00 	vldr	s14, [r7]
 8001a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	ee17 0a90 	vmov	r0, s15
 8001a26:	f7fe fd97 	bl	8000558 <__aeabi_f2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001b20 <calculate_angle+0x170>
 8001a32:	ec43 2b10 	vmov	d0, r2, r3
 8001a36:	f009 fab3 	bl	800afa0 <pow>
 8001a3a:	ec53 2b10 	vmov	r2, r3, d0
 8001a3e:	4620      	mov	r0, r4
 8001a40:	4629      	mov	r1, r5
 8001a42:	f7fe fc2b 	bl	800029c <__adddf3>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	ec43 2b17 	vmov	d7, r2, r3
 8001a4e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a52:	eef0 0a67 	vmov.f32	s1, s15
 8001a56:	f009 fb13 	bl	800b080 <sqrt>
 8001a5a:	ec53 2b10 	vmov	r2, r3, d0
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff f8c9 	bl	8000bf8 <__aeabi_d2f>
 8001a66:	4603      	mov	r3, r0
 8001a68:	617b      	str	r3, [r7, #20]

	// Calculating the cosine of the angle
	float cos_theta = dot_product / (length_v1 * length_v2);
 8001a6a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Clamp cos_theta to [-1, 1] to avoid NaNs due to floating point errors
	if (cos_theta > 1.0f)
 8001a82:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	dd02      	ble.n	8001a9a <calculate_angle+0xea>
		cos_theta = 1.0f;
 8001a94:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
	if (cos_theta < -1.0f)
 8001a9a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a9e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d501      	bpl.n	8001ab0 <calculate_angle+0x100>
		cos_theta = -1.0f;
 8001aac:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <calculate_angle+0x180>)
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24

	// Calculation of the angle in radians and conversion to degrees
	float theta_rad = (float) acos(cos_theta);
 8001ab0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ab2:	f7fe fd51 	bl	8000558 <__aeabi_f2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	ec43 2b10 	vmov	d0, r2, r3
 8001abe:	f009 fa3b 	bl	800af38 <acos>
 8001ac2:	ec53 2b10 	vmov	r2, r3, d0
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f895 	bl	8000bf8 <__aeabi_d2f>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	613b      	str	r3, [r7, #16]
	float theta_deg = (float) (theta_rad * (180.0 / M_PI));
 8001ad2:	6938      	ldr	r0, [r7, #16]
 8001ad4:	f7fe fd40 	bl	8000558 <__aeabi_f2d>
 8001ad8:	a313      	add	r3, pc, #76	@ (adr r3, 8001b28 <calculate_angle+0x178>)
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	f7fe fd93 	bl	8000608 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f7ff f885 	bl	8000bf8 <__aeabi_d2f>
 8001aee:	4603      	mov	r3, r0
 8001af0:	623b      	str	r3, [r7, #32]

	// Determining the direction
	if (x_next < x) {
 8001af2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	d505      	bpl.n	8001b10 <calculate_angle+0x160>
		theta_deg = -theta_deg; // Negative angle if x_next is to the left of x
 8001b04:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b08:	eef1 7a67 	vneg.f32	s15, s15
 8001b0c:	edc7 7a08 	vstr	s15, [r7, #32]
	}

	return theta_deg;
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	ee07 3a90 	vmov	s15, r3
}
 8001b16:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1a:	3728      	adds	r7, #40	@ 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b20:	00000000 	.word	0x00000000
 8001b24:	40000000 	.word	0x40000000
 8001b28:	1a63c1f8 	.word	0x1a63c1f8
 8001b2c:	404ca5dc 	.word	0x404ca5dc
 8001b30:	bf800000 	.word	0xbf800000

08001b34 <distance_to_target>:
 * @param target_x Target x position.
 * @param target_y Target y position.
 * @return Distance to target.
 */
float distance_to_target(float current_x, float current_y, float target_x,
		float target_y) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	ed2d 8b02 	vpush	{d8}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b42:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b46:	ed87 1a01 	vstr	s2, [r7, #4]
 8001b4a:	edc7 1a00 	vstr	s3, [r7]
	return sqrtf(
			powf(target_x - current_x, 2.0f) + powf(target_y - current_y, 2.0f));
 8001b4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b62:	f009 fac1 	bl	800b0e8 <powf>
 8001b66:	eeb0 8a40 	vmov.f32	s16, s0
 8001b6a:	ed97 7a00 	vldr	s14, [r7]
 8001b6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b76:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b7e:	f009 fab3 	bl	800b0e8 <powf>
 8001b82:	eef0 7a40 	vmov.f32	s15, s0
	return sqrtf(
 8001b86:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b8e:	f009 fb03 	bl	800b198 <sqrtf>
 8001b92:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	ecbd 8b02 	vpop	{d8}
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <execute_command>:

/**
 * @brief Execute received command from ESP8266.
 * @param cmd The command string.
 */
void execute_command(const char *cmd) {
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8001baa:	af02      	add	r7, sp, #8
 8001bac:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001bb0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bb4:	6018      	str	r0, [r3, #0]
	if (strncmp(cmd, "STOP", 4) == 0) {
 8001bb6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001bba:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	499e      	ldr	r1, [pc, #632]	@ (8001e3c <execute_command+0x298>)
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	f005 ff97 	bl	8007af6 <strncmp>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10d      	bne.n	8001bea <execute_command+0x46>
		set_servo_pwm(&servo_left, SERVO_STOP);
 8001bce:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001bd2:	489b      	ldr	r0, [pc, #620]	@ (8001e40 <execute_command+0x29c>)
 8001bd4:	f000 f95c 	bl	8001e90 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001bd8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001bdc:	4899      	ldr	r0, [pc, #612]	@ (8001e44 <execute_command+0x2a0>)
 8001bde:	f000 f957 	bl	8001e90 <set_servo_pwm>
		current_state = IDLE;
 8001be2:	4b99      	ldr	r3, [pc, #612]	@ (8001e48 <execute_command+0x2a4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	e123      	b.n	8001e32 <execute_command+0x28e>
	} else if (strncmp(cmd, "START_SPINNING", 14) == 0) {
 8001bea:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001bee:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bf2:	220e      	movs	r2, #14
 8001bf4:	4995      	ldr	r1, [pc, #596]	@ (8001e4c <execute_command+0x2a8>)
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	f005 ff7d 	bl	8007af6 <strncmp>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d110      	bne.n	8001c24 <execute_command+0x80>
		set_servo_pwm(&servo_left, FORWARD_MAX);
 8001c02:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 8001c06:	488e      	ldr	r0, [pc, #568]	@ (8001e40 <execute_command+0x29c>)
 8001c08:	f000 f942 	bl	8001e90 <set_servo_pwm>
		set_servo_pwm(&servo_right, FORWARD_MAX);
 8001c0c:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 8001c10:	488c      	ldr	r0, [pc, #560]	@ (8001e44 <execute_command+0x2a0>)
 8001c12:	f000 f93d 	bl	8001e90 <set_servo_pwm>
		path_set = 0; 								// Set the path flag
 8001c16:	4b8e      	ldr	r3, [pc, #568]	@ (8001e50 <execute_command+0x2ac>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
		current_state = SPINNING;
 8001c1c:	4b8a      	ldr	r3, [pc, #552]	@ (8001e48 <execute_command+0x2a4>)
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e106      	b.n	8001e32 <execute_command+0x28e>
	} else if (strncmp(cmd, "LOCATION_UPDATE", 15) == 0) {
 8001c24:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001c28:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	4989      	ldr	r1, [pc, #548]	@ (8001e54 <execute_command+0x2b0>)
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	f005 ff60 	bl	8007af6 <strncmp>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d12f      	bne.n	8001c9c <execute_command+0xf8>
		sscanf(cmd + 16, "%f;%f;%f", &current_x, &current_y, &current_yaw);
 8001c3c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001c40:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f103 0010 	add.w	r0, r3, #16
 8001c4a:	4b83      	ldr	r3, [pc, #524]	@ (8001e58 <execute_command+0x2b4>)
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4b83      	ldr	r3, [pc, #524]	@ (8001e5c <execute_command+0x2b8>)
 8001c50:	4a83      	ldr	r2, [pc, #524]	@ (8001e60 <execute_command+0x2bc>)
 8001c52:	4984      	ldr	r1, [pc, #528]	@ (8001e64 <execute_command+0x2c0>)
 8001c54:	f005 fed8 	bl	8007a08 <siscanf>
		locationReceived = 1;
 8001c58:	4b83      	ldr	r3, [pc, #524]	@ (8001e68 <execute_command+0x2c4>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
		if (path_set && current_state == IDLE) {
 8001c5e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e50 <execute_command+0x2ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80e5 	beq.w	8001e32 <execute_command+0x28e>
 8001c68:	4b77      	ldr	r3, [pc, #476]	@ (8001e48 <execute_command+0x2a4>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 80df 	bne.w	8001e32 <execute_command+0x28e>
			target_x = xCoords[currentTargetIndex];
 8001c74:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <execute_command+0x2c8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a7d      	ldr	r2, [pc, #500]	@ (8001e70 <execute_command+0x2cc>)
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a7c      	ldr	r2, [pc, #496]	@ (8001e74 <execute_command+0x2d0>)
 8001c82:	6013      	str	r3, [r2, #0]
			target_y = yCoords[currentTargetIndex];
 8001c84:	4b79      	ldr	r3, [pc, #484]	@ (8001e6c <execute_command+0x2c8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a7b      	ldr	r2, [pc, #492]	@ (8001e78 <execute_command+0x2d4>)
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a7a      	ldr	r2, [pc, #488]	@ (8001e7c <execute_command+0x2d8>)
 8001c92:	6013      	str	r3, [r2, #0]
			current_state = ROTATING;
 8001c94:	4b6c      	ldr	r3, [pc, #432]	@ (8001e48 <execute_command+0x2a4>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e0ca      	b.n	8001e32 <execute_command+0x28e>
		}
	} else if (strncmp(cmd, "PATH_UPDATE", 11) == 0) {
 8001c9c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ca0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001ca4:	220b      	movs	r2, #11
 8001ca6:	4976      	ldr	r1, [pc, #472]	@ (8001e80 <execute_command+0x2dc>)
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	f005 ff24 	bl	8007af6 <strncmp>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 80be 	bne.w	8001e32 <execute_command+0x28e>
		memset(xCoords, 0, sizeof(xCoords));
 8001cb6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001cba:	2100      	movs	r1, #0
 8001cbc:	486c      	ldr	r0, [pc, #432]	@ (8001e70 <execute_command+0x2cc>)
 8001cbe:	f005 ff12 	bl	8007ae6 <memset>
		memset(yCoords, 0, sizeof(yCoords));
 8001cc2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	486b      	ldr	r0, [pc, #428]	@ (8001e78 <execute_command+0x2d4>)
 8001cca:	f005 ff0c 	bl	8007ae6 <memset>
		totalCoords = 0;
 8001cce:	4b6d      	ldr	r3, [pc, #436]	@ (8001e84 <execute_command+0x2e0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
		currentTargetIndex = 0;
 8001cd4:	4b65      	ldr	r3, [pc, #404]	@ (8001e6c <execute_command+0x2c8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

		// Extract x and y coordinates and the amount of coordinates
		char x_values[256];  // Buffer for x values
		char y_values[256];  // Buffer for y values
		int amount_of_coordinates = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

		// Extract the x values, y values, and the number of coordinates
		sscanf(cmd + 12, "%[^;];%[^;];%d", x_values, y_values,
 8001ce0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ce4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f103 000c 	add.w	r0, r3, #12
 8001cee:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001cf2:	f107 020c 	add.w	r2, r7, #12
 8001cf6:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4962      	ldr	r1, [pc, #392]	@ (8001e88 <execute_command+0x2e4>)
 8001d00:	f005 fe82 	bl	8007a08 <siscanf>
				&amount_of_coordinates);

		amount_of_coordinates = amount_of_coordinates / 2;
 8001d04:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001d08:	0fda      	lsrs	r2, r3, #31
 8001d0a:	4413      	add	r3, r2
 8001d0c:	105b      	asrs	r3, r3, #1
 8001d0e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

		// Now, x_values contains "x0:x1:x2:...", y_values contains "y0:y1:y2:...", and amount_of_coordinates is an integer
		// Ensure that the number of coordinates does not exceed MAX_COORDS
		totalCoords =
				(amount_of_coordinates > MAX_COORDS) ?
				MAX_COORDS :
 8001d12:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	bfa8      	it	ge
 8001d1a:	2364      	movge	r3, #100	@ 0x64
		totalCoords =
 8001d1c:	4a59      	ldr	r2, [pc, #356]	@ (8001e84 <execute_command+0x2e0>)
 8001d1e:	6013      	str	r3, [r2, #0]
														amount_of_coordinates;

		char *token;
		int index = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

		// Split x values by ':' and store them in an array
		token = strtok(x_values, ":");
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	4958      	ldr	r1, [pc, #352]	@ (8001e8c <execute_command+0x2e8>)
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f005 fef5 	bl	8007b1c <strtok>
 8001d32:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001d36:	e017      	b.n	8001d68 <execute_command+0x1c4>
			xCoords[index++] = atof(token);
 8001d38:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001d3c:	f004 f8c8 	bl	8005ed0 <atof>
 8001d40:	ec51 0b10 	vmov	r0, r1, d0
 8001d44:	f8d7 4210 	ldr.w	r4, [r7, #528]	@ 0x210
 8001d48:	1c63      	adds	r3, r4, #1
 8001d4a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001d4e:	f7fe ff53 	bl	8000bf8 <__aeabi_d2f>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4946      	ldr	r1, [pc, #280]	@ (8001e70 <execute_command+0x2cc>)
 8001d56:	00a3      	lsls	r3, r4, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	601a      	str	r2, [r3, #0]
			token = strtok(NULL, ":");
 8001d5c:	494b      	ldr	r1, [pc, #300]	@ (8001e8c <execute_command+0x2e8>)
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f005 fedc 	bl	8007b1c <strtok>
 8001d64:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001d68:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <execute_command+0x1d8>
 8001d70:	4b44      	ldr	r3, [pc, #272]	@ (8001e84 <execute_command+0x2e0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbdd      	blt.n	8001d38 <execute_command+0x194>
		}
		if (index != totalCoords) {
 8001d7c:	4b41      	ldr	r3, [pc, #260]	@ (8001e84 <execute_command+0x2e0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d151      	bne.n	8001e2c <execute_command+0x288>
			return;
		}

		// Split y values by ':' and store them in an array
		index = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		token = strtok(y_values, ":");
 8001d8e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001d92:	493e      	ldr	r1, [pc, #248]	@ (8001e8c <execute_command+0x2e8>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f005 fec1 	bl	8007b1c <strtok>
 8001d9a:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001d9e:	e017      	b.n	8001dd0 <execute_command+0x22c>
			yCoords[index++] = atof(token);
 8001da0:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001da4:	f004 f894 	bl	8005ed0 <atof>
 8001da8:	ec51 0b10 	vmov	r0, r1, d0
 8001dac:	f8d7 4210 	ldr.w	r4, [r7, #528]	@ 0x210
 8001db0:	1c63      	adds	r3, r4, #1
 8001db2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001db6:	f7fe ff1f 	bl	8000bf8 <__aeabi_d2f>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	492e      	ldr	r1, [pc, #184]	@ (8001e78 <execute_command+0x2d4>)
 8001dbe:	00a3      	lsls	r3, r4, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	601a      	str	r2, [r3, #0]
			token = strtok(NULL, ":");
 8001dc4:	4931      	ldr	r1, [pc, #196]	@ (8001e8c <execute_command+0x2e8>)
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f005 fea8 	bl	8007b1c <strtok>
 8001dcc:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001dd0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <execute_command+0x240>
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <execute_command+0x2e0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbdd      	blt.n	8001da0 <execute_command+0x1fc>
		}
		if (index != totalCoords) {
 8001de4:	4b27      	ldr	r3, [pc, #156]	@ (8001e84 <execute_command+0x2e0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d11f      	bne.n	8001e30 <execute_command+0x28c>
			return;
		}

		path_set = 1; 				// Set the target flag
 8001df0:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <execute_command+0x2ac>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
		currentTargetIndex = 0;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <execute_command+0x2c8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

		if (totalCoords > 0) {
 8001dfc:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <execute_command+0x2e0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	dd0f      	ble.n	8001e24 <execute_command+0x280>
			target_x = xCoords[currentTargetIndex];
 8001e04:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <execute_command+0x2c8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a19      	ldr	r2, [pc, #100]	@ (8001e70 <execute_command+0x2cc>)
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a18      	ldr	r2, [pc, #96]	@ (8001e74 <execute_command+0x2d0>)
 8001e12:	6013      	str	r3, [r2, #0]
			target_y = yCoords[currentTargetIndex];
 8001e14:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <execute_command+0x2c8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <execute_command+0x2d4>)
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a16      	ldr	r2, [pc, #88]	@ (8001e7c <execute_command+0x2d8>)
 8001e22:	6013      	str	r3, [r2, #0]
		}

		current_state = ROTATING;  	// Start with rotating to face the target
 8001e24:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <execute_command+0x2a4>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e002      	b.n	8001e32 <execute_command+0x28e>
			return;
 8001e2c:	bf00      	nop
 8001e2e:	e000      	b.n	8001e32 <execute_command+0x28e>
			return;
 8001e30:	bf00      	nop
	}
}
 8001e32:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	0800cb58 	.word	0x0800cb58
 8001e40:	20000000 	.word	0x20000000
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	200002f0 	.word	0x200002f0
 8001e4c:	0800cb60 	.word	0x0800cb60
 8001e50:	2000074c 	.word	0x2000074c
 8001e54:	0800cb70 	.word	0x0800cb70
 8001e58:	20000408 	.word	0x20000408
 8001e5c:	20000404 	.word	0x20000404
 8001e60:	20000400 	.word	0x20000400
 8001e64:	0800cb80 	.word	0x0800cb80
 8001e68:	20000750 	.word	0x20000750
 8001e6c:	20000738 	.word	0x20000738
 8001e70:	20000414 	.word	0x20000414
 8001e74:	2000040c 	.word	0x2000040c
 8001e78:	200005a4 	.word	0x200005a4
 8001e7c:	20000410 	.word	0x20000410
 8001e80:	0800cb8c 	.word	0x0800cb8c
 8001e84:	20000734 	.word	0x20000734
 8001e88:	0800cb98 	.word	0x0800cb98
 8001e8c:	0800cba8 	.word	0x0800cba8

08001e90 <set_servo_pwm>:
/**
 * @brief Set the PWM value for a servo motor.
 * @param servo Pointer to the Servo structure.
 * @param pulse PWM value to set.
 */
void set_servo_pwm(Servo *servo, uint32_t pulse) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
	servo->current_pwm = pulse;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <set_servo_pwm+0x24>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001eb2:	e018      	b.n	8001ee6 <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d105      	bne.n	8001ec8 <set_servo_pwm+0x38>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001ec6:	e00e      	b.n	8001ee6 <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d105      	bne.n	8001edc <set_servo_pwm+0x4c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001eda:	e004      	b.n	8001ee6 <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <send_status_to_esp>:

/**
 * @brief Send the robot's status to ESP8266.
 */
void send_status_to_esp() {
 8001ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ef8:	b0d6      	sub	sp, #344	@ 0x158
 8001efa:	af0a      	add	r7, sp, #40	@ 0x28
	// Increase buffer size to accommodate arrays
	char status_message[256];

	// Append basic status information
	int len =
			snprintf(status_message, sizeof(status_message),
 8001efc:	4b37      	ldr	r3, [pc, #220]	@ (8001fdc <send_status_to_esp+0xe8>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	469a      	mov	sl, r3
 8001f04:	4b36      	ldr	r3, [pc, #216]	@ (8001fe0 <send_status_to_esp+0xec>)
 8001f06:	681e      	ldr	r6, [r3, #0]
					"STATE:%d;CURRENT_TARGET_INDEX:%d;MOTOR_L:%lu;MOTOR_R:%lu;ANGLE_ERROR:%.1f;CALCULATED_PID:%.2f;TARGET_DISTANCE:%.2f\n",
					current_state, currentTargetIndex,
					(unsigned long) servo_left.current_pwm,
 8001f08:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <send_status_to_esp+0xf0>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	607b      	str	r3, [r7, #4]
					(unsigned long) servo_right.current_pwm, angle_error,
 8001f0e:	4b36      	ldr	r3, [pc, #216]	@ (8001fe8 <send_status_to_esp+0xf4>)
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	603a      	str	r2, [r7, #0]
			snprintf(status_message, sizeof(status_message),
 8001f14:	4b35      	ldr	r3, [pc, #212]	@ (8001fec <send_status_to_esp+0xf8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb1d 	bl	8000558 <__aeabi_f2d>
 8001f1e:	4604      	mov	r4, r0
 8001f20:	460d      	mov	r5, r1
 8001f22:	4b33      	ldr	r3, [pc, #204]	@ (8001ff0 <send_status_to_esp+0xfc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb16 	bl	8000558 <__aeabi_f2d>
 8001f2c:	4680      	mov	r8, r0
 8001f2e:	4689      	mov	r9, r1
 8001f30:	4b30      	ldr	r3, [pc, #192]	@ (8001ff4 <send_status_to_esp+0x100>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fb0f 	bl	8000558 <__aeabi_f2d>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001f42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001f46:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001f4a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	9202      	str	r2, [sp, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	9600      	str	r6, [sp, #0]
 8001f58:	4653      	mov	r3, sl
 8001f5a:	4a27      	ldr	r2, [pc, #156]	@ (8001ff8 <send_status_to_esp+0x104>)
 8001f5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f60:	f005 fcfe 	bl	8007960 <sniprintf>
 8001f64:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
					calculated_correction, target_distance);

	// Ensure null-termination
	status_message[sizeof(status_message) - 1] = '\0';
 8001f68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

	// Check for truncation
	if (len >= sizeof(status_message)) {
 8001f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f7a:	2bff      	cmp	r3, #255	@ 0xff
 8001f7c:	d91a      	bls.n	8001fb4 <send_status_to_esp+0xc0>
		// Handle the error: truncate, log, etc.
		char error_message[] = "ERROR: Status message truncated.\n";
 8001f7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f82:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f86:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <send_status_to_esp+0x108>)
 8001f88:	461c      	mov	r4, r3
 8001f8a:	4615      	mov	r5, r2
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f94:	682b      	ldr	r3, [r5, #0]
 8001f96:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) error_message,
				strlen(error_message), HAL_MAX_DELAY);
 8001f98:	f107 0308 	add.w	r3, r7, #8
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe f96f 	bl	8000280 <strlen>
 8001fa2:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) error_message,
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	f107 0108 	add.w	r1, r7, #8
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	4814      	ldr	r0, [pc, #80]	@ (8002000 <send_status_to_esp+0x10c>)
 8001fb0:	f002 ff88 	bl	8004ec4 <HAL_UART_Transmit>
	}

	// Transmit the status message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*) status_message,
			strlen(status_message), HAL_MAX_DELAY);
 8001fb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe f961 	bl	8000280 <strlen>
 8001fbe:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) status_message,
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	480d      	ldr	r0, [pc, #52]	@ (8002000 <send_status_to_esp+0x10c>)
 8001fcc:	f002 ff7a 	bl	8004ec4 <HAL_UART_Transmit>
}
 8001fd0:	bf00      	nop
 8001fd2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fdc:	200002f0 	.word	0x200002f0
 8001fe0:	20000738 	.word	0x20000738
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	2000000c 	.word	0x2000000c
 8001fec:	2000073c 	.word	0x2000073c
 8001ff0:	20000740 	.word	0x20000740
 8001ff4:	20000744 	.word	0x20000744
 8001ff8:	0800cbac 	.word	0x0800cbac
 8001ffc:	0800cc20 	.word	0x0800cc20
 8002000:	200007e8 	.word	0x200007e8

08002004 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800200a:	f000 fc93 	bl	8002934 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800200e:	f000 f891 	bl	8002134 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002012:	f7ff f887 	bl	8001124 <MX_GPIO_Init>
	MX_TIM1_Init();
 8002016:	f000 fa3b 	bl	8002490 <MX_TIM1_Init>
	MX_TIM2_Init();
 800201a:	f000 fad9 	bl	80025d0 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 800201e:	f000 fbe5 	bl	80027ec <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8002022:	f7ff f8f5 	bl	8001210 <MX_I2C1_Init>
	MX_ADC1_Init();
 8002026:	f7fe ffe5 	bl	8000ff4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800202a:	2201      	movs	r2, #1
 800202c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002030:	4835      	ldr	r0, [pc, #212]	@ (8002108 <main+0x104>)
 8002032:	f001 fa9f 	bl	8003574 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8002036:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800203a:	f000 fced 	bl	8002a18 <HAL_Delay>
	 }
	 Gz_mean /= CALIB;
	 Ax_mean /= CALIB;
	 Ay_mean /= CALIB;*/

	HAL_TIM_PWM_Init(&htim1);
 800203e:	4833      	ldr	r0, [pc, #204]	@ (800210c <main+0x108>)
 8002040:	f002 f8c4 	bl	80041cc <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8002044:	4832      	ldr	r0, [pc, #200]	@ (8002110 <main+0x10c>)
 8002046:	f002 f8c1 	bl	80041cc <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800204a:	2100      	movs	r1, #0
 800204c:	482f      	ldr	r0, [pc, #188]	@ (800210c <main+0x108>)
 800204e:	f002 f917 	bl	8004280 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002052:	2108      	movs	r1, #8
 8002054:	482e      	ldr	r0, [pc, #184]	@ (8002110 <main+0x10c>)
 8002056:	f002 f913 	bl	8004280 <HAL_TIM_PWM_Start>
	TIM1->CR1 = 0x01;
 800205a:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <main+0x110>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
	TIM2->CR1 = 0x01;
 8002060:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer)); // interrupt based
 8002068:	2201      	movs	r2, #1
 800206a:	492b      	ldr	r1, [pc, #172]	@ (8002118 <main+0x114>)
 800206c:	482b      	ldr	r0, [pc, #172]	@ (800211c <main+0x118>)
 800206e:	f002 ffb4 	bl	8004fda <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002072:	2200      	movs	r2, #0
 8002074:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002078:	4823      	ldr	r0, [pc, #140]	@ (8002108 <main+0x104>)
 800207a:	f001 fa7b 	bl	8003574 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (rx_complete) {
 800207e:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <main+0x11c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <main+0x8e>
			execute_command(rx_buffer); // Process the command
 8002086:	4827      	ldr	r0, [pc, #156]	@ (8002124 <main+0x120>)
 8002088:	f7ff fd8c 	bl	8001ba4 <execute_command>
			rx_complete = 0; // Reset the completion flag
 800208c:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <main+0x11c>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
		}
		switch (current_state) {
 8002092:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <main+0x124>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b03      	cmp	r3, #3
 800209a:	d822      	bhi.n	80020e2 <main+0xde>
 800209c:	a201      	add	r2, pc, #4	@ (adr r2, 80020a4 <main+0xa0>)
 800209e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a2:	bf00      	nop
 80020a4:	080020e3 	.word	0x080020e3
 80020a8:	080020b5 	.word	0x080020b5
 80020ac:	080020c9 	.word	0x080020c9
 80020b0:	080020e3 	.word	0x080020e3
		case ROTATING:
			if (locationReceived) {
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <main+0x128>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00f      	beq.n	80020dc <main+0xd8>
				handle_rotation();
 80020bc:	f7ff f9e8 	bl	8001490 <handle_rotation>
				locationReceived = 0;
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <main+0x128>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
			}
			break;
 80020c6:	e009      	b.n	80020dc <main+0xd8>
		case MOVING:
			if (locationReceived) {
 80020c8:	4b18      	ldr	r3, [pc, #96]	@ (800212c <main+0x128>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <main+0xdc>
				handle_movement();
 80020d0:	f7ff facc 	bl	800166c <handle_movement>
				locationReceived = 0;
 80020d4:	4b15      	ldr	r3, [pc, #84]	@ (800212c <main+0x128>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
			}
			break;
 80020da:	e001      	b.n	80020e0 <main+0xdc>
			break;
 80020dc:	bf00      	nop
 80020de:	e000      	b.n	80020e2 <main+0xde>
			break;
 80020e0:	bf00      	nop
			break;
		default:
		}

		// Send status to ESP8266 every 1000ms
		uint32_t current_time = HAL_GetTick();
 80020e2:	f000 fc8d 	bl	8002a00 <HAL_GetTick>
 80020e6:	6078      	str	r0, [r7, #4]
		if (current_time - last_status_send_time >= SERIAL_SEND_INTERVAL) {
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <main+0x12c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020f4:	d304      	bcc.n	8002100 <main+0xfc>
			last_status_send_time = current_time;
 80020f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002130 <main+0x12c>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6013      	str	r3, [r2, #0]
			send_status_to_esp();
 80020fc:	f7ff fefa 	bl	8001ef4 <send_status_to_esp>
		}

		HAL_Delay(10);
 8002100:	200a      	movs	r0, #10
 8002102:	f000 fc89 	bl	8002a18 <HAL_Delay>
	while (1) {
 8002106:	e7ba      	b.n	800207e <main+0x7a>
 8002108:	40020800 	.word	0x40020800
 800210c:	20000758 	.word	0x20000758
 8002110:	200007a0 	.word	0x200007a0
 8002114:	40010000 	.word	0x40010000
 8002118:	200003fc 	.word	0x200003fc
 800211c:	200007e8 	.word	0x200007e8
 8002120:	200003f8 	.word	0x200003f8
 8002124:	200002f4 	.word	0x200002f4
 8002128:	200002f0 	.word	0x200002f0
 800212c:	20000750 	.word	0x20000750
 8002130:	20000748 	.word	0x20000748

08002134 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b094      	sub	sp, #80	@ 0x50
 8002138:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800213a:	f107 0320 	add.w	r3, r7, #32
 800213e:	2230      	movs	r2, #48	@ 0x30
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f005 fccf 	bl	8007ae6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <SystemClock_Config+0xd0>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	4a28      	ldr	r2, [pc, #160]	@ (8002204 <SystemClock_Config+0xd0>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002166:	6413      	str	r3, [r2, #64]	@ 0x40
 8002168:	4b26      	ldr	r3, [pc, #152]	@ (8002204 <SystemClock_Config+0xd0>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002174:	2300      	movs	r3, #0
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	4b23      	ldr	r3, [pc, #140]	@ (8002208 <SystemClock_Config+0xd4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002180:	4a21      	ldr	r2, [pc, #132]	@ (8002208 <SystemClock_Config+0xd4>)
 8002182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b1f      	ldr	r3, [pc, #124]	@ (8002208 <SystemClock_Config+0xd4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002194:	2301      	movs	r3, #1
 8002196:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002198:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800219e:	2302      	movs	r3, #2
 80021a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 20;
 80021a8:	2314      	movs	r3, #20
 80021aa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 128;
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021b0:	2302      	movs	r3, #2
 80021b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80021b4:	2304      	movs	r3, #4
 80021b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021b8:	f107 0320 	add.w	r3, r7, #32
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 fb37 	bl	8003830 <HAL_RCC_OscConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <SystemClock_Config+0x98>
		Error_Handler();
 80021c8:	f000 f820 	bl	800220c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021cc:	230f      	movs	r3, #15
 80021ce:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d0:	2302      	movs	r3, #2
 80021d2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021dc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	2102      	movs	r1, #2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f001 fd99 	bl	8003d20 <HAL_RCC_ClockConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <SystemClock_Config+0xc4>
		Error_Handler();
 80021f4:	f000 f80a 	bl	800220c <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80021f8:	f001 fe78 	bl	8003eec <HAL_RCC_EnableCSS>
}
 80021fc:	bf00      	nop
 80021fe:	3750      	adds	r7, #80	@ 0x50
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40023800 	.word	0x40023800
 8002208:	40007000 	.word	0x40007000

0800220c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002210:	b672      	cpsid	i
}
 8002212:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <Error_Handler+0x8>

08002218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <HAL_MspInit+0x4c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	4a0f      	ldr	r2, [pc, #60]	@ (8002264 <HAL_MspInit+0x4c>)
 8002228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800222c:	6453      	str	r3, [r2, #68]	@ 0x44
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_MspInit+0x4c>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002236:	607b      	str	r3, [r7, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	603b      	str	r3, [r7, #0]
 800223e:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_MspInit+0x4c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <HAL_MspInit+0x4c>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_MspInit+0x4c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800226c:	f001 ff44 	bl	80040f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002270:	bf00      	nop
 8002272:	e7fd      	b.n	8002270 <NMI_Handler+0x8>

08002274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002278:	bf00      	nop
 800227a:	e7fd      	b.n	8002278 <HardFault_Handler+0x4>

0800227c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <MemManage_Handler+0x4>

08002284 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <BusFault_Handler+0x4>

0800228c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <UsageFault_Handler+0x4>

08002294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c2:	f000 fb89 	bl	80029d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <USART1_IRQHandler+0x10>)
 80022d2:	f002 fea7 	bl	8005024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200007e8 	.word	0x200007e8

080022e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return 1;
 80022e4:	2301      	movs	r3, #1
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_kill>:

int _kill(int pid, int sig)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022fa:	f005 fcb5 	bl	8007c68 <__errno>
 80022fe:	4603      	mov	r3, r0
 8002300:	2216      	movs	r2, #22
 8002302:	601a      	str	r2, [r3, #0]
  return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_exit>:

void _exit (int status)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ffe7 	bl	80022f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002322:	bf00      	nop
 8002324:	e7fd      	b.n	8002322 <_exit+0x12>

08002326 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e00a      	b.n	800234e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002338:	f3af 8000 	nop.w
 800233c:	4601      	mov	r1, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	60ba      	str	r2, [r7, #8]
 8002344:	b2ca      	uxtb	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3301      	adds	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	dbf0      	blt.n	8002338 <_read+0x12>
  }

  return len;
 8002356:	687b      	ldr	r3, [r7, #4]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e009      	b.n	8002386 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	60ba      	str	r2, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	dbf1      	blt.n	8002372 <_write+0x12>
  }
  return len;
 800238e:	687b      	ldr	r3, [r7, #4]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_close>:

int _close(int file)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023c0:	605a      	str	r2, [r3, #4]
  return 0;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_isatty>:

int _isatty(int file)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d8:	2301      	movs	r3, #1
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	@ (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	@ (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f005 fc1a 	bl	8007c68 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	@ (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20010000 	.word	0x20010000
 8002460:	00000400 	.word	0x00000400
 8002464:	20000754 	.word	0x20000754
 8002468:	20000980 	.word	0x20000980

0800246c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b06      	ldr	r3, [pc, #24]	@ (800248c <SystemInit+0x20>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002476:	4a05      	ldr	r2, [pc, #20]	@ (800248c <SystemInit+0x20>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b096      	sub	sp, #88	@ 0x58
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	615a      	str	r2, [r3, #20]
 80024c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2220      	movs	r2, #32
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f005 fb0c 	bl	8007ae6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024ce:	4b3e      	ldr	r3, [pc, #248]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80024d0:	4a3e      	ldr	r2, [pc, #248]	@ (80025cc <MX_TIM1_Init+0x13c>)
 80024d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 80024d4:	4b3c      	ldr	r3, [pc, #240]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80024d6:	2227      	movs	r2, #39	@ 0x27
 80024d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024da:	4b3b      	ldr	r3, [pc, #236]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 80024e0:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80024e2:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80024e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e8:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024ee:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f4:	4b34      	ldr	r3, [pc, #208]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024fa:	4833      	ldr	r0, [pc, #204]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80024fc:	f001 fe17 	bl	800412e <HAL_TIM_Base_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002506:	f7ff fe81 	bl	800220c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002510:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002514:	4619      	mov	r1, r3
 8002516:	482c      	ldr	r0, [pc, #176]	@ (80025c8 <MX_TIM1_Init+0x138>)
 8002518:	f002 f824 	bl	8004564 <HAL_TIM_ConfigClockSource>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002522:	f7ff fe73 	bl	800220c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002526:	4828      	ldr	r0, [pc, #160]	@ (80025c8 <MX_TIM1_Init+0x138>)
 8002528:	f001 fe50 	bl	80041cc <HAL_TIM_PWM_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002532:	f7ff fe6b 	bl	800220c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800253e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002542:	4619      	mov	r1, r3
 8002544:	4820      	ldr	r0, [pc, #128]	@ (80025c8 <MX_TIM1_Init+0x138>)
 8002546:	f002 fbad 	bl	8004ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002550:	f7ff fe5c 	bl	800220c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002554:	2360      	movs	r3, #96	@ 0x60
 8002556:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800255c:	2300      	movs	r3, #0
 800255e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002560:	2300      	movs	r3, #0
 8002562:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002574:	2200      	movs	r2, #0
 8002576:	4619      	mov	r1, r3
 8002578:	4813      	ldr	r0, [pc, #76]	@ (80025c8 <MX_TIM1_Init+0x138>)
 800257a:	f001 ff31 	bl	80043e0 <HAL_TIM_PWM_ConfigChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002584:	f7ff fe42 	bl	800220c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800259c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4807      	ldr	r0, [pc, #28]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80025ac:	f002 fbe8 	bl	8004d80 <HAL_TIMEx_ConfigBreakDeadTime>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80025b6:	f7ff fe29 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80025ba:	4803      	ldr	r0, [pc, #12]	@ (80025c8 <MX_TIM1_Init+0x138>)
 80025bc:	f000 f8b4 	bl	8002728 <HAL_TIM_MspPostInit>

}
 80025c0:	bf00      	nop
 80025c2:	3758      	adds	r7, #88	@ 0x58
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000758 	.word	0x20000758
 80025cc:	40010000 	.word	0x40010000

080025d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08e      	sub	sp, #56	@ 0x38
 80025d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	609a      	str	r2, [r3, #8]
 80025e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025e4:	f107 0320 	add.w	r3, r7, #32
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
 80025fc:	615a      	str	r2, [r3, #20]
 80025fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002600:	4b2d      	ldr	r3, [pc, #180]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 8002602:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8002608:	4b2b      	ldr	r3, [pc, #172]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 800260a:	2227      	movs	r2, #39	@ 0x27
 800260c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b2a      	ldr	r3, [pc, #168]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 8002614:	4b28      	ldr	r3, [pc, #160]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 8002616:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800261a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261c:	4b26      	ldr	r3, [pc, #152]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002622:	4b25      	ldr	r3, [pc, #148]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002628:	4823      	ldr	r0, [pc, #140]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 800262a:	f001 fd80 	bl	800412e <HAL_TIM_Base_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002634:	f7ff fdea 	bl	800220c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800263e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002642:	4619      	mov	r1, r3
 8002644:	481c      	ldr	r0, [pc, #112]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 8002646:	f001 ff8d 	bl	8004564 <HAL_TIM_ConfigClockSource>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002650:	f7ff fddc 	bl	800220c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002654:	4818      	ldr	r0, [pc, #96]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 8002656:	f001 fdb9 	bl	80041cc <HAL_TIM_PWM_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002660:	f7ff fdd4 	bl	800220c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800266c:	f107 0320 	add.w	r3, r7, #32
 8002670:	4619      	mov	r1, r3
 8002672:	4811      	ldr	r0, [pc, #68]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 8002674:	f002 fb16 	bl	8004ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800267e:	f7ff fdc5 	bl	800220c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002682:	2360      	movs	r3, #96	@ 0x60
 8002684:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2208      	movs	r2, #8
 8002696:	4619      	mov	r1, r3
 8002698:	4807      	ldr	r0, [pc, #28]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 800269a:	f001 fea1 	bl	80043e0 <HAL_TIM_PWM_ConfigChannel>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80026a4:	f7ff fdb2 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026a8:	4803      	ldr	r0, [pc, #12]	@ (80026b8 <MX_TIM2_Init+0xe8>)
 80026aa:	f000 f83d 	bl	8002728 <HAL_TIM_MspPostInit>

}
 80026ae:	bf00      	nop
 80026b0:	3738      	adds	r7, #56	@ 0x38
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200007a0 	.word	0x200007a0

080026bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a15      	ldr	r2, [pc, #84]	@ (8002720 <HAL_TIM_Base_MspInit+0x64>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10e      	bne.n	80026ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <HAL_TIM_Base_MspInit+0x68>)
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	4a13      	ldr	r2, [pc, #76]	@ (8002724 <HAL_TIM_Base_MspInit+0x68>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_TIM_Base_MspInit+0x68>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026ea:	e012      	b.n	8002712 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f4:	d10d      	bne.n	8002712 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_TIM_Base_MspInit+0x68>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	4a09      	ldr	r2, [pc, #36]	@ (8002724 <HAL_TIM_Base_MspInit+0x68>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6413      	str	r3, [r2, #64]	@ 0x40
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <HAL_TIM_Base_MspInit+0x68>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	40010000 	.word	0x40010000
 8002724:	40023800 	.word	0x40023800

08002728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	@ 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a25      	ldr	r2, [pc, #148]	@ (80027dc <HAL_TIM_MspPostInit+0xb4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d11f      	bne.n	800278a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b24      	ldr	r3, [pc, #144]	@ (80027e0 <HAL_TIM_MspPostInit+0xb8>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a23      	ldr	r2, [pc, #140]	@ (80027e0 <HAL_TIM_MspPostInit+0xb8>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <HAL_TIM_MspPostInit+0xb8>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002766:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800276a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002778:	2301      	movs	r3, #1
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 0314 	add.w	r3, r7, #20
 8002780:	4619      	mov	r1, r3
 8002782:	4818      	ldr	r0, [pc, #96]	@ (80027e4 <HAL_TIM_MspPostInit+0xbc>)
 8002784:	f000 fd72 	bl	800326c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002788:	e023      	b.n	80027d2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002792:	d11e      	bne.n	80027d2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <HAL_TIM_MspPostInit+0xb8>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279c:	4a10      	ldr	r2, [pc, #64]	@ (80027e0 <HAL_TIM_MspPostInit+0xb8>)
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a4:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <HAL_TIM_MspPostInit+0xb8>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027c2:	2301      	movs	r3, #1
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4806      	ldr	r0, [pc, #24]	@ (80027e8 <HAL_TIM_MspPostInit+0xc0>)
 80027ce:	f000 fd4d 	bl	800326c <HAL_GPIO_Init>
}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	@ 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40010000 	.word	0x40010000
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020000 	.word	0x40020000
 80027e8:	40020400 	.word	0x40020400

080027ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	@ (800283c <MX_USART1_UART_Init+0x50>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 80027f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002822:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_USART1_UART_Init+0x4c>)
 8002824:	f002 fafe 	bl	8004e24 <HAL_UART_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800282e:	f7ff fced 	bl	800220c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200007e8 	.word	0x200007e8
 800283c:	40011000 	.word	0x40011000

08002840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	@ 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1d      	ldr	r2, [pc, #116]	@ (80028d4 <HAL_UART_MspInit+0x94>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d134      	bne.n	80028cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	4b1c      	ldr	r3, [pc, #112]	@ (80028d8 <HAL_UART_MspInit+0x98>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	4a1b      	ldr	r2, [pc, #108]	@ (80028d8 <HAL_UART_MspInit+0x98>)
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	6453      	str	r3, [r2, #68]	@ 0x44
 8002872:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_UART_MspInit+0x98>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_UART_MspInit+0x98>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	4a14      	ldr	r2, [pc, #80]	@ (80028d8 <HAL_UART_MspInit+0x98>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	@ 0x30
 800288e:	4b12      	ldr	r3, [pc, #72]	@ (80028d8 <HAL_UART_MspInit+0x98>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800289a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ac:	2307      	movs	r3, #7
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	4809      	ldr	r0, [pc, #36]	@ (80028dc <HAL_UART_MspInit+0x9c>)
 80028b8:	f000 fcd8 	bl	800326c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2025      	movs	r0, #37	@ 0x25
 80028c2:	f000 fc0a 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028c6:	2025      	movs	r0, #37	@ 0x25
 80028c8:	f000 fc23 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	@ 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000

080028e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002918 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028e4:	480d      	ldr	r0, [pc, #52]	@ (800291c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028e6:	490e      	ldr	r1, [pc, #56]	@ (8002920 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002928 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028fc:	4c0b      	ldr	r4, [pc, #44]	@ (800292c <LoopFillZerobss+0x26>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800290a:	f7ff fdaf 	bl	800246c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290e:	f005 f9b1 	bl	8007c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002912:	f7ff fb77 	bl	8002004 <main>
  bx  lr    
 8002916:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002918:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800291c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002920:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002924:	0800d160 	.word	0x0800d160
  ldr r2, =_sbss
 8002928:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 800292c:	20000980 	.word	0x20000980

08002930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002930:	e7fe      	b.n	8002930 <ADC_IRQHandler>
	...

08002934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002938:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <HAL_Init+0x40>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <HAL_Init+0x40>)
 800293e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_Init+0x40>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <HAL_Init+0x40>)
 800294a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800294e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002950:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a07      	ldr	r2, [pc, #28]	@ (8002974 <HAL_Init+0x40>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295c:	2003      	movs	r0, #3
 800295e:	f000 fbb1 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002962:	200f      	movs	r0, #15
 8002964:	f000 f808 	bl	8002978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002968:	f7ff fc56 	bl	8002218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023c00 	.word	0x40023c00

08002978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002980:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_InitTick+0x54>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <HAL_InitTick+0x58>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fbc9 	bl	800312e <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00e      	b.n	80029c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b0f      	cmp	r3, #15
 80029aa:	d80a      	bhi.n	80029c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ac:	2200      	movs	r2, #0
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f000 fb91 	bl	80030da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029b8:	4a06      	ldr	r2, [pc, #24]	@ (80029d4 <HAL_InitTick+0x5c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e000      	b.n	80029c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000050 	.word	0x20000050
 80029d0:	20000058 	.word	0x20000058
 80029d4:	20000054 	.word	0x20000054

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_IncTick+0x20>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_IncTick+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <HAL_IncTick+0x24>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000058 	.word	0x20000058
 80029fc:	20000830 	.word	0x20000830

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b03      	ldr	r3, [pc, #12]	@ (8002a14 <HAL_GetTick+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000830 	.word	0x20000830

08002a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff ffee 	bl	8002a00 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d005      	beq.n	8002a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_Delay+0x44>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a3e:	bf00      	nop
 8002a40:	f7ff ffde 	bl	8002a00 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d8f7      	bhi.n	8002a40 <HAL_Delay+0x28>
  {
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000058 	.word	0x20000058

08002a60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e033      	b.n	8002ade <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe fb0c 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f003 0310 	and.w	r3, r3, #16
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d118      	bne.n	8002ad0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002aa6:	f023 0302 	bic.w	r3, r3, #2
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f93a 	bl	8002d2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	f023 0303 	bic.w	r3, r3, #3
 8002ac6:	f043 0201 	orr.w	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ace:	e001      	b.n	8002ad4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x1c>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e105      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x228>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b09      	cmp	r3, #9
 8002b12:	d925      	bls.n	8002b60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	3b1e      	subs	r3, #30
 8002b2a:	2207      	movs	r2, #7
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43da      	mvns	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	400a      	ands	r2, r1
 8002b38:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68d9      	ldr	r1, [r3, #12]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4403      	add	r3, r0
 8002b52:	3b1e      	subs	r3, #30
 8002b54:	409a      	lsls	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	e022      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6919      	ldr	r1, [r3, #16]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	2207      	movs	r2, #7
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	400a      	ands	r2, r1
 8002b82:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6919      	ldr	r1, [r3, #16]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4618      	mov	r0, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4403      	add	r3, r0
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d824      	bhi.n	8002bf8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3b05      	subs	r3, #5
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	400a      	ands	r2, r1
 8002bce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	3b05      	subs	r3, #5
 8002bea:	fa00 f203 	lsl.w	r2, r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bf6:	e04c      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b0c      	cmp	r3, #12
 8002bfe:	d824      	bhi.n	8002c4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b23      	subs	r3, #35	@ 0x23
 8002c12:	221f      	movs	r2, #31
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	400a      	ands	r2, r1
 8002c20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b23      	subs	r3, #35	@ 0x23
 8002c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c48:	e023      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	3b41      	subs	r3, #65	@ 0x41
 8002c5c:	221f      	movs	r2, #31
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	400a      	ands	r2, r1
 8002c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	3b41      	subs	r3, #65	@ 0x41
 8002c86:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c92:	4b22      	ldr	r3, [pc, #136]	@ (8002d1c <HAL_ADC_ConfigChannel+0x234>)
 8002c94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a21      	ldr	r2, [pc, #132]	@ (8002d20 <HAL_ADC_ConfigChannel+0x238>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d109      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1cc>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b12      	cmp	r3, #18
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <HAL_ADC_ConfigChannel+0x238>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d123      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d003      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x1e6>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b11      	cmp	r3, #17
 8002ccc:	d11b      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b10      	cmp	r3, #16
 8002ce0:	d111      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <HAL_ADC_ConfigChannel+0x23c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a10      	ldr	r2, [pc, #64]	@ (8002d28 <HAL_ADC_ConfigChannel+0x240>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	0c9a      	lsrs	r2, r3, #18
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cf8:	e002      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f9      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40012300 	.word	0x40012300
 8002d20:	40012000 	.word	0x40012000
 8002d24:	20000050 	.word	0x20000050
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d34:	4b79      	ldr	r3, [pc, #484]	@ (8002f1c <ADC_Init+0x1f0>)
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	021a      	lsls	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	4a58      	ldr	r2, [pc, #352]	@ (8002f20 <ADC_Init+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e00f      	b.n	8002e2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e28:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0202 	bic.w	r2, r2, #2
 8002e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e1b      	ldrb	r3, [r3, #24]
 8002e44:	005a      	lsls	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e66:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	3b01      	subs	r3, #1
 8002e84:	035a      	lsls	r2, r3, #13
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e007      	b.n	8002ea0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	051a      	lsls	r2, r3, #20
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ee2:	025a      	lsls	r2, r3, #9
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	029a      	lsls	r2, r3, #10
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012300 	.word	0x40012300
 8002f20:	0f000001 	.word	0x0f000001

08002f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f34:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <__NVIC_GetPriorityGrouping+0x18>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 0307 	and.w	r3, r3, #7
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	db0b      	blt.n	8002fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4907      	ldr	r1, [pc, #28]	@ (8002fc0 <__NVIC_EnableIRQ+0x38>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2001      	movs	r0, #1
 8002faa:	fa00 f202 	lsl.w	r2, r0, r2
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	@ (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	@ (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	@ 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
         );
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	@ 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003090:	d301      	bcc.n	8003096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003092:	2301      	movs	r3, #1
 8003094:	e00f      	b.n	80030b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003096:	4a0a      	ldr	r2, [pc, #40]	@ (80030c0 <SysTick_Config+0x40>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309e:	210f      	movs	r1, #15
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	f7ff ff8e 	bl	8002fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a8:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <SysTick_Config+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ae:	4b04      	ldr	r3, [pc, #16]	@ (80030c0 <SysTick_Config+0x40>)
 80030b0:	2207      	movs	r2, #7
 80030b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	e000e010 	.word	0xe000e010

080030c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff29 	bl	8002f24 <__NVIC_SetPriorityGrouping>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ec:	f7ff ff3e 	bl	8002f6c <__NVIC_GetPriorityGrouping>
 80030f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	f7ff ff8e 	bl	8003018 <NVIC_EncodePriority>
 80030fc:	4602      	mov	r2, r0
 80030fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff ff5d 	bl	8002fc4 <__NVIC_SetPriority>
}
 800310a:	bf00      	nop
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff31 	bl	8002f88 <__NVIC_EnableIRQ>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ffa2 	bl	8003080 <SysTick_Config>
 800313c:	4603      	mov	r3, r0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003154:	f7ff fc54 	bl	8002a00 <HAL_GetTick>
 8003158:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d008      	beq.n	8003178 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2280      	movs	r2, #128	@ 0x80
 800316a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e052      	b.n	800321e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0216 	bic.w	r2, r2, #22
 8003186:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003196:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <HAL_DMA_Abort+0x62>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0208 	bic.w	r2, r2, #8
 80031b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c8:	e013      	b.n	80031f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ca:	f7ff fc19 	bl	8002a00 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d90c      	bls.n	80031f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2203      	movs	r2, #3
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e015      	b.n	800321e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e4      	bne.n	80031ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	223f      	movs	r2, #63	@ 0x3f
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d004      	beq.n	8003244 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2280      	movs	r2, #128	@ 0x80
 800323e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e00c      	b.n	800325e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2205      	movs	r2, #5
 8003248:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0201 	bic.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	@ 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	e159      	b.n	800353c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003288:	2201      	movs	r2, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	f040 8148 	bne.w	8003536 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d005      	beq.n	80032be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d130      	bne.n	8003320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	2203      	movs	r2, #3
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f4:	2201      	movs	r2, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 0201 	and.w	r2, r3, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	2b03      	cmp	r3, #3
 800332a:	d017      	beq.n	800335c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d123      	bne.n	80033b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	08da      	lsrs	r2, r3, #3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3208      	adds	r2, #8
 8003370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	220f      	movs	r2, #15
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	08da      	lsrs	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3208      	adds	r2, #8
 80033aa:	69b9      	ldr	r1, [r7, #24]
 80033ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2203      	movs	r2, #3
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0203 	and.w	r2, r3, #3
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80a2 	beq.w	8003536 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
 80033f6:	4b57      	ldr	r3, [pc, #348]	@ (8003554 <HAL_GPIO_Init+0x2e8>)
 80033f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fa:	4a56      	ldr	r2, [pc, #344]	@ (8003554 <HAL_GPIO_Init+0x2e8>)
 80033fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003400:	6453      	str	r3, [r2, #68]	@ 0x44
 8003402:	4b54      	ldr	r3, [pc, #336]	@ (8003554 <HAL_GPIO_Init+0x2e8>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800340e:	4a52      	ldr	r2, [pc, #328]	@ (8003558 <HAL_GPIO_Init+0x2ec>)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	3302      	adds	r3, #2
 8003416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	220f      	movs	r2, #15
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a49      	ldr	r2, [pc, #292]	@ (800355c <HAL_GPIO_Init+0x2f0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d019      	beq.n	800346e <HAL_GPIO_Init+0x202>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a48      	ldr	r2, [pc, #288]	@ (8003560 <HAL_GPIO_Init+0x2f4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_GPIO_Init+0x1fe>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a47      	ldr	r2, [pc, #284]	@ (8003564 <HAL_GPIO_Init+0x2f8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00d      	beq.n	8003466 <HAL_GPIO_Init+0x1fa>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a46      	ldr	r2, [pc, #280]	@ (8003568 <HAL_GPIO_Init+0x2fc>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <HAL_GPIO_Init+0x1f6>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a45      	ldr	r2, [pc, #276]	@ (800356c <HAL_GPIO_Init+0x300>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_GPIO_Init+0x1f2>
 800345a:	2304      	movs	r3, #4
 800345c:	e008      	b.n	8003470 <HAL_GPIO_Init+0x204>
 800345e:	2307      	movs	r3, #7
 8003460:	e006      	b.n	8003470 <HAL_GPIO_Init+0x204>
 8003462:	2303      	movs	r3, #3
 8003464:	e004      	b.n	8003470 <HAL_GPIO_Init+0x204>
 8003466:	2302      	movs	r3, #2
 8003468:	e002      	b.n	8003470 <HAL_GPIO_Init+0x204>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <HAL_GPIO_Init+0x204>
 800346e:	2300      	movs	r3, #0
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	f002 0203 	and.w	r2, r2, #3
 8003476:	0092      	lsls	r2, r2, #2
 8003478:	4093      	lsls	r3, r2
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003480:	4935      	ldr	r1, [pc, #212]	@ (8003558 <HAL_GPIO_Init+0x2ec>)
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	089b      	lsrs	r3, r3, #2
 8003486:	3302      	adds	r3, #2
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800348e:	4b38      	ldr	r3, [pc, #224]	@ (8003570 <HAL_GPIO_Init+0x304>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003570 <HAL_GPIO_Init+0x304>)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003570 <HAL_GPIO_Init+0x304>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034dc:	4a24      	ldr	r2, [pc, #144]	@ (8003570 <HAL_GPIO_Init+0x304>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034e2:	4b23      	ldr	r3, [pc, #140]	@ (8003570 <HAL_GPIO_Init+0x304>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003506:	4a1a      	ldr	r2, [pc, #104]	@ (8003570 <HAL_GPIO_Init+0x304>)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800350c:	4b18      	ldr	r3, [pc, #96]	@ (8003570 <HAL_GPIO_Init+0x304>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003530:	4a0f      	ldr	r2, [pc, #60]	@ (8003570 <HAL_GPIO_Init+0x304>)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3301      	adds	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b0f      	cmp	r3, #15
 8003540:	f67f aea2 	bls.w	8003288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003544:	bf00      	nop
 8003546:	bf00      	nop
 8003548:	3724      	adds	r7, #36	@ 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	40013800 	.word	0x40013800
 800355c:	40020000 	.word	0x40020000
 8003560:	40020400 	.word	0x40020400
 8003564:	40020800 	.word	0x40020800
 8003568:	40020c00 	.word	0x40020c00
 800356c:	40021000 	.word	0x40021000
 8003570:	40013c00 	.word	0x40013c00

08003574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
 8003580:	4613      	mov	r3, r2
 8003582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003584:	787b      	ldrb	r3, [r7, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003590:	e003      	b.n	800359a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003592:	887b      	ldrh	r3, [r7, #2]
 8003594:	041a      	lsls	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	619a      	str	r2, [r3, #24]
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e12b      	b.n	8003812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd fe4c 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2224      	movs	r2, #36	@ 0x24
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800360a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800360c:	f000 fd4c 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8003610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4a81      	ldr	r2, [pc, #516]	@ (800381c <HAL_I2C_Init+0x274>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d807      	bhi.n	800362c <HAL_I2C_Init+0x84>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a80      	ldr	r2, [pc, #512]	@ (8003820 <HAL_I2C_Init+0x278>)
 8003620:	4293      	cmp	r3, r2
 8003622:	bf94      	ite	ls
 8003624:	2301      	movls	r3, #1
 8003626:	2300      	movhi	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e006      	b.n	800363a <HAL_I2C_Init+0x92>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a7d      	ldr	r2, [pc, #500]	@ (8003824 <HAL_I2C_Init+0x27c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	bf94      	ite	ls
 8003634:	2301      	movls	r3, #1
 8003636:	2300      	movhi	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e0e7      	b.n	8003812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a78      	ldr	r2, [pc, #480]	@ (8003828 <HAL_I2C_Init+0x280>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	0c9b      	lsrs	r3, r3, #18
 800364c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a6a      	ldr	r2, [pc, #424]	@ (800381c <HAL_I2C_Init+0x274>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d802      	bhi.n	800367c <HAL_I2C_Init+0xd4>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3301      	adds	r3, #1
 800367a:	e009      	b.n	8003690 <HAL_I2C_Init+0xe8>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	4a69      	ldr	r2, [pc, #420]	@ (800382c <HAL_I2C_Init+0x284>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	3301      	adds	r3, #1
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	430b      	orrs	r3, r1
 8003696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	495c      	ldr	r1, [pc, #368]	@ (800381c <HAL_I2C_Init+0x274>)
 80036ac:	428b      	cmp	r3, r1
 80036ae:	d819      	bhi.n	80036e4 <HAL_I2C_Init+0x13c>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1e59      	subs	r1, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80036be:	1c59      	adds	r1, r3, #1
 80036c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036c4:	400b      	ands	r3, r1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_I2C_Init+0x138>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1e59      	subs	r1, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036de:	e051      	b.n	8003784 <HAL_I2C_Init+0x1dc>
 80036e0:	2304      	movs	r3, #4
 80036e2:	e04f      	b.n	8003784 <HAL_I2C_Init+0x1dc>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d111      	bne.n	8003710 <HAL_I2C_Init+0x168>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1e58      	subs	r0, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	440b      	add	r3, r1
 80036fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e012      	b.n	8003736 <HAL_I2C_Init+0x18e>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1e58      	subs	r0, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	0099      	lsls	r1, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	fbb0 f3f3 	udiv	r3, r0, r3
 8003726:	3301      	adds	r3, #1
 8003728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Init+0x196>
 800373a:	2301      	movs	r3, #1
 800373c:	e022      	b.n	8003784 <HAL_I2C_Init+0x1dc>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10e      	bne.n	8003764 <HAL_I2C_Init+0x1bc>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1e58      	subs	r0, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	460b      	mov	r3, r1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	440b      	add	r3, r1
 8003754:	fbb0 f3f3 	udiv	r3, r0, r3
 8003758:	3301      	adds	r3, #1
 800375a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003762:	e00f      	b.n	8003784 <HAL_I2C_Init+0x1dc>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1e58      	subs	r0, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6859      	ldr	r1, [r3, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	0099      	lsls	r1, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	fbb0 f3f3 	udiv	r3, r0, r3
 800377a:	3301      	adds	r3, #1
 800377c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003780:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	6809      	ldr	r1, [r1, #0]
 8003788:	4313      	orrs	r3, r2
 800378a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6911      	ldr	r1, [r2, #16]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68d2      	ldr	r2, [r2, #12]
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	000186a0 	.word	0x000186a0
 8003820:	001e847f 	.word	0x001e847f
 8003824:	003d08ff 	.word	0x003d08ff
 8003828:	431bde83 	.word	0x431bde83
 800382c:	10624dd3 	.word	0x10624dd3

08003830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e267      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d075      	beq.n	800393a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800384e:	4b88      	ldr	r3, [pc, #544]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b04      	cmp	r3, #4
 8003858:	d00c      	beq.n	8003874 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385a:	4b85      	ldr	r3, [pc, #532]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003862:	2b08      	cmp	r3, #8
 8003864:	d112      	bne.n	800388c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003866:	4b82      	ldr	r3, [pc, #520]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800386e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003872:	d10b      	bne.n	800388c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	4b7e      	ldr	r3, [pc, #504]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d05b      	beq.n	8003938 <HAL_RCC_OscConfig+0x108>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d157      	bne.n	8003938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e242      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x74>
 8003896:	4b76      	ldr	r3, [pc, #472]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a75      	ldr	r2, [pc, #468]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e01d      	b.n	80038e0 <HAL_RCC_OscConfig+0xb0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x98>
 80038ae:	4b70      	ldr	r3, [pc, #448]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6f      	ldr	r2, [pc, #444]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6c      	ldr	r2, [pc, #432]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0xb0>
 80038c8:	4b69      	ldr	r3, [pc, #420]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a68      	ldr	r2, [pc, #416]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b66      	ldr	r3, [pc, #408]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a65      	ldr	r2, [pc, #404]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7ff f88a 	bl	8002a00 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7ff f886 	bl	8002a00 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	@ 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e207      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b5b      	ldr	r3, [pc, #364]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0xc0>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7ff f876 	bl	8002a00 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003918:	f7ff f872 	bl	8002a00 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	@ 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1f3      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	4b51      	ldr	r3, [pc, #324]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0xe8>
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d063      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003946:	4b4a      	ldr	r3, [pc, #296]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003952:	4b47      	ldr	r3, [pc, #284]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800395a:	2b08      	cmp	r3, #8
 800395c:	d11c      	bne.n	8003998 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395e:	4b44      	ldr	r3, [pc, #272]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d116      	bne.n	8003998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	4b41      	ldr	r3, [pc, #260]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_RCC_OscConfig+0x152>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d001      	beq.n	8003982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e1c7      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b3b      	ldr	r3, [pc, #236]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4937      	ldr	r1, [pc, #220]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	e03a      	b.n	8003a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a0:	4b34      	ldr	r3, [pc, #208]	@ (8003a74 <HAL_RCC_OscConfig+0x244>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7ff f82b 	bl	8002a00 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ae:	f7ff f827 	bl	8002a00 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1a8      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b28      	ldr	r3, [pc, #160]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4925      	ldr	r1, [pc, #148]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
 80039e0:	e015      	b.n	8003a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e2:	4b24      	ldr	r3, [pc, #144]	@ (8003a74 <HAL_RCC_OscConfig+0x244>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7ff f80a 	bl	8002a00 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f0:	f7ff f806 	bl	8002a00 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e187      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d036      	beq.n	8003a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d016      	beq.n	8003a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a22:	4b15      	ldr	r3, [pc, #84]	@ (8003a78 <HAL_RCC_OscConfig+0x248>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fe ffea 	bl	8002a00 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a30:	f7fe ffe6 	bl	8002a00 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e167      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x200>
 8003a4e:	e01b      	b.n	8003a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a50:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <HAL_RCC_OscConfig+0x248>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7fe ffd3 	bl	8002a00 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	e00e      	b.n	8003a7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5e:	f7fe ffcf 	bl	8002a00 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d907      	bls.n	8003a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e150      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
 8003a70:	40023800 	.word	0x40023800
 8003a74:	42470000 	.word	0x42470000
 8003a78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	4b88      	ldr	r3, [pc, #544]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ea      	bne.n	8003a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8097 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9a:	4b81      	ldr	r3, [pc, #516]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4b77      	ldr	r3, [pc, #476]	@ (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d118      	bne.n	8003b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad2:	4b74      	ldr	r3, [pc, #464]	@ (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a73      	ldr	r2, [pc, #460]	@ (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7fe ff8f 	bl	8002a00 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fe ff8b 	bl	8002a00 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e10c      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x2ea>
 8003b0c:	4b64      	ldr	r3, [pc, #400]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b10:	4a63      	ldr	r2, [pc, #396]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b18:	e01c      	b.n	8003b54 <HAL_RCC_OscConfig+0x324>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b05      	cmp	r3, #5
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x30c>
 8003b22:	4b5f      	ldr	r3, [pc, #380]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b26:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b28:	f043 0304 	orr.w	r3, r3, #4
 8003b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	4a5b      	ldr	r2, [pc, #364]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0x324>
 8003b3c:	4b58      	ldr	r3, [pc, #352]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b40:	4a57      	ldr	r2, [pc, #348]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b48:	4b55      	ldr	r3, [pc, #340]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4c:	4a54      	ldr	r2, [pc, #336]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	f023 0304 	bic.w	r3, r3, #4
 8003b52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fe ff50 	bl	8002a00 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fe ff4c 	bl	8002a00 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0cb      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	4b49      	ldr	r3, [pc, #292]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0ee      	beq.n	8003b64 <HAL_RCC_OscConfig+0x334>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b88:	f7fe ff3a 	bl	8002a00 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fe ff36 	bl	8002a00 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0b5      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ee      	bne.n	8003b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb8:	4b39      	ldr	r3, [pc, #228]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	4a38      	ldr	r2, [pc, #224]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80a1 	beq.w	8003d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bce:	4b34      	ldr	r3, [pc, #208]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d05c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d141      	bne.n	8003c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b31      	ldr	r3, [pc, #196]	@ (8003ca8 <HAL_RCC_OscConfig+0x478>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe ff0a 	bl	8002a00 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fe ff06 	bl	8002a00 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e087      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	4b27      	ldr	r3, [pc, #156]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	3b01      	subs	r3, #1
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	491b      	ldr	r1, [pc, #108]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca8 <HAL_RCC_OscConfig+0x478>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fe fedf 	bl	8002a00 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fe fedb 	bl	8002a00 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e05c      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c58:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x416>
 8003c64:	e054      	b.n	8003d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b10      	ldr	r3, [pc, #64]	@ (8003ca8 <HAL_RCC_OscConfig+0x478>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fec8 	bl	8002a00 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe fec4 	bl	8002a00 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e045      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x444>
 8003c92:	e03d      	b.n	8003d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e038      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <HAL_RCC_OscConfig+0x4ec>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d028      	beq.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d121      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d11a      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cdc:	4013      	ands	r3, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d111      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d107      	bne.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800

08003d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0cc      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d34:	4b68      	ldr	r3, [pc, #416]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d90c      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b65      	ldr	r3, [pc, #404]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a58      	ldr	r2, [pc, #352]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a52      	ldr	r2, [pc, #328]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d044      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d119      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	4b3f      	ldr	r3, [pc, #252]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e067      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b37      	ldr	r3, [pc, #220]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4934      	ldr	r1, [pc, #208]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e10:	f7fe fdf6 	bl	8002a00 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7fe fdf2 	bl	8002a00 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e04f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e40:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d20c      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e92:	4b12      	ldr	r3, [pc, #72]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f82d 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490a      	ldr	r1, [pc, #40]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fd56 	bl	8002978 <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	0800cc50 	.word	0x0800cc50
 8003ee4:	20000050 	.word	0x20000050
 8003ee8:	20000054 	.word	0x20000054

08003eec <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <HAL_RCC_EnableCSS+0x14>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	4247004c 	.word	0x4247004c

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b090      	sub	sp, #64	@ 0x40
 8003f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f1c:	4b59      	ldr	r3, [pc, #356]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 030c 	and.w	r3, r3, #12
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d00d      	beq.n	8003f44 <HAL_RCC_GetSysClockFreq+0x40>
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	f200 80a1 	bhi.w	8004070 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x34>
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d003      	beq.n	8003f3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f36:	e09b      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f38:	4b53      	ldr	r3, [pc, #332]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f3c:	e09b      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f3e:	4b53      	ldr	r3, [pc, #332]	@ (800408c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f42:	e098      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f44:	4b4f      	ldr	r3, [pc, #316]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f4c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f4e:	4b4d      	ldr	r3, [pc, #308]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d028      	beq.n	8003fac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	099b      	lsrs	r3, r3, #6
 8003f60:	2200      	movs	r2, #0
 8003f62:	623b      	str	r3, [r7, #32]
 8003f64:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4b47      	ldr	r3, [pc, #284]	@ (800408c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f70:	fb03 f201 	mul.w	r2, r3, r1
 8003f74:	2300      	movs	r3, #0
 8003f76:	fb00 f303 	mul.w	r3, r0, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4a43      	ldr	r2, [pc, #268]	@ (800408c <HAL_RCC_GetSysClockFreq+0x188>)
 8003f7e:	fba0 1202 	umull	r1, r2, r0, r2
 8003f82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f84:	460a      	mov	r2, r1
 8003f86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f8a:	4413      	add	r3, r2
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f90:	2200      	movs	r2, #0
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	61fa      	str	r2, [r7, #28]
 8003f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f9e:	f7fc fe7b 	bl	8000c98 <__aeabi_uldivmod>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003faa:	e053      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fac:	4b35      	ldr	r3, [pc, #212]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	617a      	str	r2, [r7, #20]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fbe:	f04f 0b00 	mov.w	fp, #0
 8003fc2:	4652      	mov	r2, sl
 8003fc4:	465b      	mov	r3, fp
 8003fc6:	f04f 0000 	mov.w	r0, #0
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	0159      	lsls	r1, r3, #5
 8003fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd4:	0150      	lsls	r0, r2, #5
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	ebb2 080a 	subs.w	r8, r2, sl
 8003fde:	eb63 090b 	sbc.w	r9, r3, fp
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ff2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ff6:	ebb2 0408 	subs.w	r4, r2, r8
 8003ffa:	eb63 0509 	sbc.w	r5, r3, r9
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	00eb      	lsls	r3, r5, #3
 8004008:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800400c:	00e2      	lsls	r2, r4, #3
 800400e:	4614      	mov	r4, r2
 8004010:	461d      	mov	r5, r3
 8004012:	eb14 030a 	adds.w	r3, r4, sl
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	eb45 030b 	adc.w	r3, r5, fp
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800402a:	4629      	mov	r1, r5
 800402c:	028b      	lsls	r3, r1, #10
 800402e:	4621      	mov	r1, r4
 8004030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004034:	4621      	mov	r1, r4
 8004036:	028a      	lsls	r2, r1, #10
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403e:	2200      	movs	r2, #0
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	60fa      	str	r2, [r7, #12]
 8004044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004048:	f7fc fe26 	bl	8000c98 <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4613      	mov	r3, r2
 8004052:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_RCC_GetSysClockFreq+0x180>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	3301      	adds	r3, #1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004064:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800406e:	e002      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x184>)
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004078:	4618      	mov	r0, r3
 800407a:	3740      	adds	r7, #64	@ 0x40
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400
 800408c:	017d7840 	.word	0x017d7840

08004090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000050 	.word	0x20000050

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a9b      	lsrs	r3, r3, #10
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	@ (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	0800cc60 	.word	0x0800cc60

080040d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040d4:	f7ff ffdc 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0b5b      	lsrs	r3, r3, #13
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	@ (80040f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	0800cc60 	.word	0x0800cc60

080040f8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80040fc:	4b06      	ldr	r3, [pc, #24]	@ (8004118 <HAL_RCC_NMI_IRQHandler+0x20>)
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004104:	2b80      	cmp	r3, #128	@ 0x80
 8004106:	d104      	bne.n	8004112 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004108:	f000 f80a 	bl	8004120 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800410c:	4b03      	ldr	r3, [pc, #12]	@ (800411c <HAL_RCC_NMI_IRQHandler+0x24>)
 800410e:	2280      	movs	r2, #128	@ 0x80
 8004110:	701a      	strb	r2, [r3, #0]
  }
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	4002380e 	.word	0x4002380e

08004120 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e041      	b.n	80041c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7fe fab1 	bl	80026bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3304      	adds	r3, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f000 fac1 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e041      	b.n	8004262 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f839 	bl	800426a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fa72 	bl	80046f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <HAL_TIM_PWM_Start+0x24>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e022      	b.n	80042ea <HAL_TIM_PWM_Start+0x6a>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d109      	bne.n	80042be <HAL_TIM_PWM_Start+0x3e>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	bf14      	ite	ne
 80042b6:	2301      	movne	r3, #1
 80042b8:	2300      	moveq	r3, #0
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	e015      	b.n	80042ea <HAL_TIM_PWM_Start+0x6a>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d109      	bne.n	80042d8 <HAL_TIM_PWM_Start+0x58>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	bf14      	ite	ne
 80042d0:	2301      	movne	r3, #1
 80042d2:	2300      	moveq	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	e008      	b.n	80042ea <HAL_TIM_PWM_Start+0x6a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e068      	b.n	80043c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d104      	bne.n	8004302 <HAL_TIM_PWM_Start+0x82>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004300:	e013      	b.n	800432a <HAL_TIM_PWM_Start+0xaa>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d104      	bne.n	8004312 <HAL_TIM_PWM_Start+0x92>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004310:	e00b      	b.n	800432a <HAL_TIM_PWM_Start+0xaa>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d104      	bne.n	8004322 <HAL_TIM_PWM_Start+0xa2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004320:	e003      	b.n	800432a <HAL_TIM_PWM_Start+0xaa>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2202      	movs	r2, #2
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fc90 	bl	8004c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a23      	ldr	r2, [pc, #140]	@ (80043cc <HAL_TIM_PWM_Start+0x14c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d107      	bne.n	8004352 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1d      	ldr	r2, [pc, #116]	@ (80043cc <HAL_TIM_PWM_Start+0x14c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d018      	beq.n	800438e <HAL_TIM_PWM_Start+0x10e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004364:	d013      	beq.n	800438e <HAL_TIM_PWM_Start+0x10e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a19      	ldr	r2, [pc, #100]	@ (80043d0 <HAL_TIM_PWM_Start+0x150>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00e      	beq.n	800438e <HAL_TIM_PWM_Start+0x10e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a17      	ldr	r2, [pc, #92]	@ (80043d4 <HAL_TIM_PWM_Start+0x154>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d009      	beq.n	800438e <HAL_TIM_PWM_Start+0x10e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <HAL_TIM_PWM_Start+0x158>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d004      	beq.n	800438e <HAL_TIM_PWM_Start+0x10e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a14      	ldr	r2, [pc, #80]	@ (80043dc <HAL_TIM_PWM_Start+0x15c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d111      	bne.n	80043b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b06      	cmp	r3, #6
 800439e:	d010      	beq.n	80043c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b0:	e007      	b.n	80043c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40014000 	.word	0x40014000

080043e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e0ae      	b.n	800455c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b0c      	cmp	r3, #12
 800440a:	f200 809f 	bhi.w	800454c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800440e:	a201      	add	r2, pc, #4	@ (adr r2, 8004414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004449 	.word	0x08004449
 8004418:	0800454d 	.word	0x0800454d
 800441c:	0800454d 	.word	0x0800454d
 8004420:	0800454d 	.word	0x0800454d
 8004424:	08004489 	.word	0x08004489
 8004428:	0800454d 	.word	0x0800454d
 800442c:	0800454d 	.word	0x0800454d
 8004430:	0800454d 	.word	0x0800454d
 8004434:	080044cb 	.word	0x080044cb
 8004438:	0800454d 	.word	0x0800454d
 800443c:	0800454d 	.word	0x0800454d
 8004440:	0800454d 	.word	0x0800454d
 8004444:	0800450b 	.word	0x0800450b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 f9dc 	bl	800480c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0208 	orr.w	r2, r2, #8
 8004462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0204 	bic.w	r2, r2, #4
 8004472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6999      	ldr	r1, [r3, #24]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	619a      	str	r2, [r3, #24]
      break;
 8004486:	e064      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fa22 	bl	80048d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	699a      	ldr	r2, [r3, #24]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6999      	ldr	r1, [r3, #24]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	021a      	lsls	r2, r3, #8
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	619a      	str	r2, [r3, #24]
      break;
 80044c8:	e043      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fa6d 	bl	80049b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0208 	orr.w	r2, r2, #8
 80044e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0204 	bic.w	r2, r2, #4
 80044f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69d9      	ldr	r1, [r3, #28]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	61da      	str	r2, [r3, #28]
      break;
 8004508:	e023      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fab7 	bl	8004a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69da      	ldr	r2, [r3, #28]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69d9      	ldr	r1, [r3, #28]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	021a      	lsls	r2, r3, #8
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	61da      	str	r2, [r3, #28]
      break;
 800454a:	e002      	b.n	8004552 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
      break;
 8004550:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800455a:	7dfb      	ldrb	r3, [r7, #23]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800456e:	2300      	movs	r3, #0
 8004570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_TIM_ConfigClockSource+0x1c>
 800457c:	2302      	movs	r3, #2
 800457e:	e0b4      	b.n	80046ea <HAL_TIM_ConfigClockSource+0x186>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800459e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b8:	d03e      	beq.n	8004638 <HAL_TIM_ConfigClockSource+0xd4>
 80045ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045be:	f200 8087 	bhi.w	80046d0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c6:	f000 8086 	beq.w	80046d6 <HAL_TIM_ConfigClockSource+0x172>
 80045ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ce:	d87f      	bhi.n	80046d0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b70      	cmp	r3, #112	@ 0x70
 80045d2:	d01a      	beq.n	800460a <HAL_TIM_ConfigClockSource+0xa6>
 80045d4:	2b70      	cmp	r3, #112	@ 0x70
 80045d6:	d87b      	bhi.n	80046d0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b60      	cmp	r3, #96	@ 0x60
 80045da:	d050      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x11a>
 80045dc:	2b60      	cmp	r3, #96	@ 0x60
 80045de:	d877      	bhi.n	80046d0 <HAL_TIM_ConfigClockSource+0x16c>
 80045e0:	2b50      	cmp	r3, #80	@ 0x50
 80045e2:	d03c      	beq.n	800465e <HAL_TIM_ConfigClockSource+0xfa>
 80045e4:	2b50      	cmp	r3, #80	@ 0x50
 80045e6:	d873      	bhi.n	80046d0 <HAL_TIM_ConfigClockSource+0x16c>
 80045e8:	2b40      	cmp	r3, #64	@ 0x40
 80045ea:	d058      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x13a>
 80045ec:	2b40      	cmp	r3, #64	@ 0x40
 80045ee:	d86f      	bhi.n	80046d0 <HAL_TIM_ConfigClockSource+0x16c>
 80045f0:	2b30      	cmp	r3, #48	@ 0x30
 80045f2:	d064      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x15a>
 80045f4:	2b30      	cmp	r3, #48	@ 0x30
 80045f6:	d86b      	bhi.n	80046d0 <HAL_TIM_ConfigClockSource+0x16c>
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d060      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x15a>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d867      	bhi.n	80046d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d05c      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x15a>
 8004604:	2b10      	cmp	r3, #16
 8004606:	d05a      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	e062      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800461a:	f000 fafd 	bl	8004c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800462c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	609a      	str	r2, [r3, #8]
      break;
 8004636:	e04f      	b.n	80046d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004648:	f000 fae6 	bl	8004c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800465a:	609a      	str	r2, [r3, #8]
      break;
 800465c:	e03c      	b.n	80046d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800466a:	461a      	mov	r2, r3
 800466c:	f000 fa5a 	bl	8004b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2150      	movs	r1, #80	@ 0x50
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fab3 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 800467c:	e02c      	b.n	80046d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800468a:	461a      	mov	r2, r3
 800468c:	f000 fa79 	bl	8004b82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2160      	movs	r1, #96	@ 0x60
 8004696:	4618      	mov	r0, r3
 8004698:	f000 faa3 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 800469c:	e01c      	b.n	80046d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	461a      	mov	r2, r3
 80046ac:	f000 fa3a 	bl	8004b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2140      	movs	r1, #64	@ 0x40
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fa93 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 80046bc:	e00c      	b.n	80046d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f000 fa8a 	bl	8004be2 <TIM_ITRx_SetConfig>
      break;
 80046ce:	e003      	b.n	80046d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      break;
 80046d4:	e000      	b.n	80046d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3a      	ldr	r2, [pc, #232]	@ (80047f0 <TIM_Base_SetConfig+0xfc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00f      	beq.n	800472c <TIM_Base_SetConfig+0x38>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004712:	d00b      	beq.n	800472c <TIM_Base_SetConfig+0x38>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a37      	ldr	r2, [pc, #220]	@ (80047f4 <TIM_Base_SetConfig+0x100>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <TIM_Base_SetConfig+0x38>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a36      	ldr	r2, [pc, #216]	@ (80047f8 <TIM_Base_SetConfig+0x104>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_Base_SetConfig+0x38>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a35      	ldr	r2, [pc, #212]	@ (80047fc <TIM_Base_SetConfig+0x108>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d108      	bne.n	800473e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2b      	ldr	r2, [pc, #172]	@ (80047f0 <TIM_Base_SetConfig+0xfc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01b      	beq.n	800477e <TIM_Base_SetConfig+0x8a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474c:	d017      	beq.n	800477e <TIM_Base_SetConfig+0x8a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a28      	ldr	r2, [pc, #160]	@ (80047f4 <TIM_Base_SetConfig+0x100>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <TIM_Base_SetConfig+0x8a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a27      	ldr	r2, [pc, #156]	@ (80047f8 <TIM_Base_SetConfig+0x104>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00f      	beq.n	800477e <TIM_Base_SetConfig+0x8a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a26      	ldr	r2, [pc, #152]	@ (80047fc <TIM_Base_SetConfig+0x108>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00b      	beq.n	800477e <TIM_Base_SetConfig+0x8a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a25      	ldr	r2, [pc, #148]	@ (8004800 <TIM_Base_SetConfig+0x10c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <TIM_Base_SetConfig+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a24      	ldr	r2, [pc, #144]	@ (8004804 <TIM_Base_SetConfig+0x110>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d003      	beq.n	800477e <TIM_Base_SetConfig+0x8a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a23      	ldr	r2, [pc, #140]	@ (8004808 <TIM_Base_SetConfig+0x114>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d108      	bne.n	8004790 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a0e      	ldr	r2, [pc, #56]	@ (80047f0 <TIM_Base_SetConfig+0xfc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d103      	bne.n	80047c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f023 0201 	bic.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]
  }
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40014000 	.word	0x40014000
 8004804:	40014400 	.word	0x40014400
 8004808:	40014800 	.word	0x40014800

0800480c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f023 0201 	bic.w	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 0302 	bic.w	r3, r3, #2
 8004854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a1c      	ldr	r2, [pc, #112]	@ (80048d4 <TIM_OC1_SetConfig+0xc8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d10c      	bne.n	8004882 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 0308 	bic.w	r3, r3, #8
 800486e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 0304 	bic.w	r3, r3, #4
 8004880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a13      	ldr	r2, [pc, #76]	@ (80048d4 <TIM_OC1_SetConfig+0xc8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d111      	bne.n	80048ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	621a      	str	r2, [r3, #32]
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	40010000 	.word	0x40010000

080048d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f023 0210 	bic.w	r2, r3, #16
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800490e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f023 0320 	bic.w	r3, r3, #32
 8004922:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	4313      	orrs	r3, r2
 800492e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a1e      	ldr	r2, [pc, #120]	@ (80049ac <TIM_OC2_SetConfig+0xd4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d10d      	bne.n	8004954 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800493e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004952:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a15      	ldr	r2, [pc, #84]	@ (80049ac <TIM_OC2_SetConfig+0xd4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d113      	bne.n	8004984 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000

080049b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	@ (8004a80 <TIM_OC3_SetConfig+0xd0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10d      	bne.n	8004a2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a14      	ldr	r2, [pc, #80]	@ (8004a80 <TIM_OC3_SetConfig+0xd0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d113      	bne.n	8004a5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40010000 	.word	0x40010000

08004a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	031b      	lsls	r3, r3, #12
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a10      	ldr	r2, [pc, #64]	@ (8004b20 <TIM_OC4_SetConfig+0x9c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d109      	bne.n	8004af8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	019b      	lsls	r3, r3, #6
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	621a      	str	r2, [r3, #32]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40010000 	.word	0x40010000

08004b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f023 030a 	bic.w	r3, r3, #10
 8004b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b087      	sub	sp, #28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f023 0210 	bic.w	r2, r3, #16
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	031b      	lsls	r3, r3, #12
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f043 0307 	orr.w	r3, r3, #7
 8004c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	609a      	str	r2, [r3, #8]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
 8004c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	021a      	lsls	r2, r3, #8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 031f 	and.w	r3, r3, #31
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1a      	ldr	r2, [r3, #32]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	401a      	ands	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1a      	ldr	r2, [r3, #32]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
	...

08004ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e050      	b.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d018      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d08:	d013      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a18      	ldr	r2, [pc, #96]	@ (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00e      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a16      	ldr	r2, [pc, #88]	@ (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d009      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a15      	ldr	r2, [pc, #84]	@ (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a13      	ldr	r2, [pc, #76]	@ (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d10c      	bne.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40014000 	.word	0x40014000

08004d80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e03d      	b.n	8004e18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e042      	b.n	8004ebc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd fcf8 	bl	8002840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2224      	movs	r2, #36	@ 0x24
 8004e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fdbd 	bl	80059e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	@ 0x28
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d175      	bne.n	8004fd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_UART_Transmit+0x2c>
 8004eea:	88fb      	ldrh	r3, [r7, #6]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e06e      	b.n	8004fd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2221      	movs	r2, #33	@ 0x21
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f02:	f7fd fd7d 	bl	8002a00 <HAL_GetTick>
 8004f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	88fa      	ldrh	r2, [r7, #6]
 8004f0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	88fa      	ldrh	r2, [r7, #6]
 8004f12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f1c:	d108      	bne.n	8004f30 <HAL_UART_Transmit+0x6c>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	e003      	b.n	8004f38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f34:	2300      	movs	r3, #0
 8004f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f38:	e02e      	b.n	8004f98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	2180      	movs	r1, #128	@ 0x80
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fb1f 	bl	8005588 <UART_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e03a      	b.n	8004fd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	3302      	adds	r3, #2
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e007      	b.n	8004f8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	3301      	adds	r3, #1
 8004f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1cb      	bne.n	8004f3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	9300      	str	r3, [sp, #0]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	2140      	movs	r1, #64	@ 0x40
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 faeb 	bl	8005588 <UART_WaitOnFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e006      	b.n	8004fd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e000      	b.n	8004fd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d112      	bne.n	800501a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_UART_Receive_IT+0x26>
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e00b      	b.n	800501c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	461a      	mov	r2, r3
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 fb12 	bl	800563a <UART_Start_Receive_IT>
 8005016:	4603      	mov	r3, r0
 8005018:	e000      	b.n	800501c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800501a:	2302      	movs	r3, #2
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b0ba      	sub	sp, #232	@ 0xe8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005050:	2300      	movs	r3, #0
 8005052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10f      	bne.n	800508a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_UART_IRQHandler+0x66>
 8005076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fbf2 	bl	800586c <UART_Receive_IT>
      return;
 8005088:	e25b      	b.n	8005542 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800508a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80de 	beq.w	8005250 <HAL_UART_IRQHandler+0x22c>
 8005094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80d1 	beq.w	8005250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00b      	beq.n	80050d2 <HAL_UART_IRQHandler+0xae>
 80050ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	f043 0201 	orr.w	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_UART_IRQHandler+0xd2>
 80050de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	f043 0202 	orr.w	r2, r3, #2
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_UART_IRQHandler+0xf6>
 8005102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	f043 0204 	orr.w	r2, r3, #4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d011      	beq.n	800514a <HAL_UART_IRQHandler+0x126>
 8005126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d005      	beq.n	800514a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005142:	f043 0208 	orr.w	r2, r3, #8
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 81f2 	beq.w	8005538 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_UART_IRQHandler+0x14e>
 8005160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fb7d 	bl	800586c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	bf0c      	ite	eq
 8005180:	2301      	moveq	r3, #1
 8005182:	2300      	movne	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <HAL_UART_IRQHandler+0x17a>
 8005196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d04f      	beq.n	800523e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa85 	bl	80056ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ae:	2b40      	cmp	r3, #64	@ 0x40
 80051b0:	d141      	bne.n	8005236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051c0:	e853 3f00 	ldrex	r3, [r3]
 80051c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3314      	adds	r3, #20
 80051da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1d9      	bne.n	80051b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d013      	beq.n	800522e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	4a7e      	ldr	r2, [pc, #504]	@ (8005404 <HAL_UART_IRQHandler+0x3e0>)
 800520c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe f807 	bl	8003226 <HAL_DMA_Abort_IT>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d016      	beq.n	800524c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005228:	4610      	mov	r0, r2
 800522a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522c:	e00e      	b.n	800524c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f994 	bl	800555c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005234:	e00a      	b.n	800524c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f990 	bl	800555c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	e006      	b.n	800524c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f98c 	bl	800555c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800524a:	e175      	b.n	8005538 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524c:	bf00      	nop
    return;
 800524e:	e173      	b.n	8005538 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005254:	2b01      	cmp	r3, #1
 8005256:	f040 814f 	bne.w	80054f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800525a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8148 	beq.w	80054f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8141 	beq.w	80054f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60bb      	str	r3, [r7, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005296:	2b40      	cmp	r3, #64	@ 0x40
 8005298:	f040 80b6 	bne.w	8005408 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8145 	beq.w	800553c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052ba:	429a      	cmp	r2, r3
 80052bc:	f080 813e 	bcs.w	800553c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80052c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052d2:	f000 8088 	beq.w	80053e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	330c      	adds	r3, #12
 80052dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	330c      	adds	r3, #12
 80052fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800530e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1d9      	bne.n	80052d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3314      	adds	r3, #20
 8005342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800534a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800534e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e1      	bne.n	8005322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3314      	adds	r3, #20
 8005364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800536e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e3      	bne.n	800535e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b6:	f023 0310 	bic.w	r3, r3, #16
 80053ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80053c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053d0:	e841 2300 	strex	r3, r2, [r1]
 80053d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e3      	bne.n	80053a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fd feb0 	bl	8003146 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f8b7 	bl	8005570 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005402:	e09b      	b.n	800553c <HAL_UART_IRQHandler+0x518>
 8005404:	08005775 	.word	0x08005775
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005410:	b29b      	uxth	r3, r3
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 808e 	beq.w	8005540 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8089 	beq.w	8005540 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800543e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005444:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005452:	647a      	str	r2, [r7, #68]	@ 0x44
 8005454:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e3      	bne.n	800542e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3314      	adds	r3, #20
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	e853 3f00 	ldrex	r3, [r3]
 8005474:	623b      	str	r3, [r7, #32]
   return(result);
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	f023 0301 	bic.w	r3, r3, #1
 800547c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3314      	adds	r3, #20
 8005486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800548a:	633a      	str	r2, [r7, #48]	@ 0x30
 800548c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005492:	e841 2300 	strex	r3, r2, [r1]
 8005496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e3      	bne.n	8005466 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	330c      	adds	r3, #12
 80054b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f023 0310 	bic.w	r3, r3, #16
 80054c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	330c      	adds	r3, #12
 80054cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80054d0:	61fa      	str	r2, [r7, #28]
 80054d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	69b9      	ldr	r1, [r7, #24]
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	617b      	str	r3, [r7, #20]
   return(result);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e3      	bne.n	80054ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f83d 	bl	8005570 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054f6:	e023      	b.n	8005540 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005500:	2b00      	cmp	r3, #0
 8005502:	d009      	beq.n	8005518 <HAL_UART_IRQHandler+0x4f4>
 8005504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f943 	bl	800579c <UART_Transmit_IT>
    return;
 8005516:	e014      	b.n	8005542 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00e      	beq.n	8005542 <HAL_UART_IRQHandler+0x51e>
 8005524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d008      	beq.n	8005542 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f983 	bl	800583c <UART_EndTransmit_IT>
    return;
 8005536:	e004      	b.n	8005542 <HAL_UART_IRQHandler+0x51e>
    return;
 8005538:	bf00      	nop
 800553a:	e002      	b.n	8005542 <HAL_UART_IRQHandler+0x51e>
      return;
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <HAL_UART_IRQHandler+0x51e>
      return;
 8005540:	bf00      	nop
  }
}
 8005542:	37e8      	adds	r7, #232	@ 0xe8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005598:	e03b      	b.n	8005612 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d037      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fd fa2d 	bl	8002a00 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	6a3a      	ldr	r2, [r7, #32]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e03a      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d023      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b80      	cmp	r3, #128	@ 0x80
 80055ce:	d020      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b40      	cmp	r3, #64	@ 0x40
 80055d4:	d01d      	beq.n	8005612 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d116      	bne.n	8005612 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	617b      	str	r3, [r7, #20]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f857 	bl	80056ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2208      	movs	r2, #8
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e00f      	b.n	8005632 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	429a      	cmp	r2, r3
 800562e:	d0b4      	beq.n	800559a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	4613      	mov	r3, r2
 8005646:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	88fa      	ldrh	r2, [r7, #6]
 8005652:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2222      	movs	r2, #34	@ 0x22
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800567e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0220 	orr.w	r2, r2, #32
 800569e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b095      	sub	sp, #84	@ 0x54
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80056d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056de:	e841 2300 	strex	r3, r2, [r1]
 80056e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1e5      	bne.n	80056b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3314      	adds	r3, #20
 80056f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3314      	adds	r3, #20
 8005708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800570a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800570c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e5      	bne.n	80056ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005722:	2b01      	cmp	r3, #1
 8005724:	d119      	bne.n	800575a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	60bb      	str	r3, [r7, #8]
   return(result);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f023 0310 	bic.w	r3, r3, #16
 800573c:	647b      	str	r3, [r7, #68]	@ 0x44
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005746:	61ba      	str	r2, [r7, #24]
 8005748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6979      	ldr	r1, [r7, #20]
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	613b      	str	r3, [r7, #16]
   return(result);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e5      	bne.n	8005726 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005768:	bf00      	nop
 800576a:	3754      	adds	r7, #84	@ 0x54
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005780:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f7ff fee4 	bl	800555c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b21      	cmp	r3, #33	@ 0x21
 80057ae:	d13e      	bne.n	800582e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b8:	d114      	bne.n	80057e4 <UART_Transmit_IT+0x48>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d110      	bne.n	80057e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	1c9a      	adds	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	621a      	str	r2, [r3, #32]
 80057e2:	e008      	b.n	80057f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	1c59      	adds	r1, r3, #1
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6211      	str	r1, [r2, #32]
 80057ee:	781a      	ldrb	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29b      	uxth	r3, r3
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4619      	mov	r1, r3
 8005804:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10f      	bne.n	800582a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005818:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005828:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e000      	b.n	8005830 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800582e:	2302      	movs	r3, #2
  }
}
 8005830:	4618      	mov	r0, r3
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005852:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff fe73 	bl	8005548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08c      	sub	sp, #48	@ 0x30
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b22      	cmp	r3, #34	@ 0x22
 800587e:	f040 80ae 	bne.w	80059de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588a:	d117      	bne.n	80058bc <UART_Receive_IT+0x50>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d113      	bne.n	80058bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b4:	1c9a      	adds	r2, r3, #2
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80058ba:	e026      	b.n	800590a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80058c2:	2300      	movs	r3, #0
 80058c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ce:	d007      	beq.n	80058e0 <UART_Receive_IT+0x74>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <UART_Receive_IT+0x82>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e008      	b.n	8005900 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29b      	uxth	r3, r3
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	4619      	mov	r1, r3
 8005918:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800591a:	2b00      	cmp	r3, #0
 800591c:	d15d      	bne.n	80059da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0220 	bic.w	r2, r2, #32
 800592c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800593c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005960:	2b01      	cmp	r3, #1
 8005962:	d135      	bne.n	80059d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	613b      	str	r3, [r7, #16]
   return(result);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f023 0310 	bic.w	r3, r3, #16
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598a:	623a      	str	r2, [r7, #32]
 800598c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	69f9      	ldr	r1, [r7, #28]
 8005990:	6a3a      	ldr	r2, [r7, #32]
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	61bb      	str	r3, [r7, #24]
   return(result);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e5      	bne.n	800596a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d10a      	bne.n	80059c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff fdd1 	bl	8005570 <HAL_UARTEx_RxEventCallback>
 80059ce:	e002      	b.n	80059d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fb fc93 	bl	80012fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e002      	b.n	80059e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	e000      	b.n	80059e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059de:	2302      	movs	r3, #2
  }
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3730      	adds	r7, #48	@ 0x30
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059ec:	b0c0      	sub	sp, #256	@ 0x100
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	68d9      	ldr	r1, [r3, #12]
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	ea40 0301 	orr.w	r3, r0, r1
 8005a10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a40:	f021 010c 	bic.w	r1, r1, #12
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a62:	6999      	ldr	r1, [r3, #24]
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	ea40 0301 	orr.w	r3, r0, r1
 8005a6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b8f      	ldr	r3, [pc, #572]	@ (8005cb4 <UART_SetConfig+0x2cc>)
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d005      	beq.n	8005a88 <UART_SetConfig+0xa0>
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	4b8d      	ldr	r3, [pc, #564]	@ (8005cb8 <UART_SetConfig+0x2d0>)
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d104      	bne.n	8005a92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a88:	f7fe fb22 	bl	80040d0 <HAL_RCC_GetPCLK2Freq>
 8005a8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a90:	e003      	b.n	8005a9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a92:	f7fe fb09 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8005a96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aa4:	f040 810c 	bne.w	8005cc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ab2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ab6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005aba:	4622      	mov	r2, r4
 8005abc:	462b      	mov	r3, r5
 8005abe:	1891      	adds	r1, r2, r2
 8005ac0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ac2:	415b      	adcs	r3, r3
 8005ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ac6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005aca:	4621      	mov	r1, r4
 8005acc:	eb12 0801 	adds.w	r8, r2, r1
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	eb43 0901 	adc.w	r9, r3, r1
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aea:	4690      	mov	r8, r2
 8005aec:	4699      	mov	r9, r3
 8005aee:	4623      	mov	r3, r4
 8005af0:	eb18 0303 	adds.w	r3, r8, r3
 8005af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005af8:	462b      	mov	r3, r5
 8005afa:	eb49 0303 	adc.w	r3, r9, r3
 8005afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b16:	460b      	mov	r3, r1
 8005b18:	18db      	adds	r3, r3, r3
 8005b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	eb42 0303 	adc.w	r3, r2, r3
 8005b22:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b2c:	f7fb f8b4 	bl	8000c98 <__aeabi_uldivmod>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4b61      	ldr	r3, [pc, #388]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005b36:	fba3 2302 	umull	r2, r3, r3, r2
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	011c      	lsls	r4, r3, #4
 8005b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	1891      	adds	r1, r2, r2
 8005b56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b58:	415b      	adcs	r3, r3
 8005b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b60:	4641      	mov	r1, r8
 8005b62:	eb12 0a01 	adds.w	sl, r2, r1
 8005b66:	4649      	mov	r1, r9
 8005b68:	eb43 0b01 	adc.w	fp, r3, r1
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b80:	4692      	mov	sl, r2
 8005b82:	469b      	mov	fp, r3
 8005b84:	4643      	mov	r3, r8
 8005b86:	eb1a 0303 	adds.w	r3, sl, r3
 8005b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	eb4b 0303 	adc.w	r3, fp, r3
 8005b94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ba4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ba8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005bac:	460b      	mov	r3, r1
 8005bae:	18db      	adds	r3, r3, r3
 8005bb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	eb42 0303 	adc.w	r3, r2, r3
 8005bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bc2:	f7fb f869 	bl	8000c98 <__aeabi_uldivmod>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4611      	mov	r1, r2
 8005bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005bce:	fba3 2301 	umull	r2, r3, r3, r1
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2264      	movs	r2, #100	@ 0x64
 8005bd6:	fb02 f303 	mul.w	r3, r2, r3
 8005bda:	1acb      	subs	r3, r1, r3
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005be2:	4b36      	ldr	r3, [pc, #216]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005be4:	fba3 2302 	umull	r2, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bf0:	441c      	add	r4, r3
 8005bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c04:	4642      	mov	r2, r8
 8005c06:	464b      	mov	r3, r9
 8005c08:	1891      	adds	r1, r2, r2
 8005c0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c0c:	415b      	adcs	r3, r3
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c14:	4641      	mov	r1, r8
 8005c16:	1851      	adds	r1, r2, r1
 8005c18:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	414b      	adcs	r3, r1
 8005c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c2c:	4659      	mov	r1, fp
 8005c2e:	00cb      	lsls	r3, r1, #3
 8005c30:	4651      	mov	r1, sl
 8005c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c36:	4651      	mov	r1, sl
 8005c38:	00ca      	lsls	r2, r1, #3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4642      	mov	r2, r8
 8005c42:	189b      	adds	r3, r3, r2
 8005c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c48:	464b      	mov	r3, r9
 8005c4a:	460a      	mov	r2, r1
 8005c4c:	eb42 0303 	adc.w	r3, r2, r3
 8005c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c68:	460b      	mov	r3, r1
 8005c6a:	18db      	adds	r3, r3, r3
 8005c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c6e:	4613      	mov	r3, r2
 8005c70:	eb42 0303 	adc.w	r3, r2, r3
 8005c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c7e:	f7fb f80b 	bl	8000c98 <__aeabi_uldivmod>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4b0d      	ldr	r3, [pc, #52]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005c88:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8c:	095b      	lsrs	r3, r3, #5
 8005c8e:	2164      	movs	r1, #100	@ 0x64
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	3332      	adds	r3, #50	@ 0x32
 8005c9a:	4a08      	ldr	r2, [pc, #32]	@ (8005cbc <UART_SetConfig+0x2d4>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	f003 0207 	and.w	r2, r3, #7
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4422      	add	r2, r4
 8005cae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cb0:	e106      	b.n	8005ec0 <UART_SetConfig+0x4d8>
 8005cb2:	bf00      	nop
 8005cb4:	40011000 	.word	0x40011000
 8005cb8:	40011400 	.word	0x40011400
 8005cbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005cca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005cce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005cd2:	4642      	mov	r2, r8
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	1891      	adds	r1, r2, r2
 8005cd8:	6239      	str	r1, [r7, #32]
 8005cda:	415b      	adcs	r3, r3
 8005cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	1854      	adds	r4, r2, r1
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	eb43 0501 	adc.w	r5, r3, r1
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	00eb      	lsls	r3, r5, #3
 8005cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cfa:	00e2      	lsls	r2, r4, #3
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	461d      	mov	r5, r3
 8005d00:	4643      	mov	r3, r8
 8005d02:	18e3      	adds	r3, r4, r3
 8005d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d08:	464b      	mov	r3, r9
 8005d0a:	eb45 0303 	adc.w	r3, r5, r3
 8005d0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d2e:	4629      	mov	r1, r5
 8005d30:	008b      	lsls	r3, r1, #2
 8005d32:	4621      	mov	r1, r4
 8005d34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d38:	4621      	mov	r1, r4
 8005d3a:	008a      	lsls	r2, r1, #2
 8005d3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d40:	f7fa ffaa 	bl	8000c98 <__aeabi_uldivmod>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4b60      	ldr	r3, [pc, #384]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	011c      	lsls	r4, r3, #4
 8005d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d64:	4642      	mov	r2, r8
 8005d66:	464b      	mov	r3, r9
 8005d68:	1891      	adds	r1, r2, r2
 8005d6a:	61b9      	str	r1, [r7, #24]
 8005d6c:	415b      	adcs	r3, r3
 8005d6e:	61fb      	str	r3, [r7, #28]
 8005d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d74:	4641      	mov	r1, r8
 8005d76:	1851      	adds	r1, r2, r1
 8005d78:	6139      	str	r1, [r7, #16]
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	414b      	adcs	r3, r1
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	f04f 0300 	mov.w	r3, #0
 8005d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	00cb      	lsls	r3, r1, #3
 8005d90:	4651      	mov	r1, sl
 8005d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d96:	4651      	mov	r1, sl
 8005d98:	00ca      	lsls	r2, r1, #3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4642      	mov	r2, r8
 8005da2:	189b      	adds	r3, r3, r2
 8005da4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005da8:	464b      	mov	r3, r9
 8005daa:	460a      	mov	r2, r1
 8005dac:	eb42 0303 	adc.w	r3, r2, r3
 8005db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005dbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005dcc:	4649      	mov	r1, r9
 8005dce:	008b      	lsls	r3, r1, #2
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd6:	4641      	mov	r1, r8
 8005dd8:	008a      	lsls	r2, r1, #2
 8005dda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dde:	f7fa ff5b 	bl	8000c98 <__aeabi_uldivmod>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	4b38      	ldr	r3, [pc, #224]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005dea:	fba3 2301 	umull	r2, r3, r3, r1
 8005dee:	095b      	lsrs	r3, r3, #5
 8005df0:	2264      	movs	r2, #100	@ 0x64
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
 8005df6:	1acb      	subs	r3, r1, r3
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	3332      	adds	r3, #50	@ 0x32
 8005dfc:	4a33      	ldr	r2, [pc, #204]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e08:	441c      	add	r4, r3
 8005e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e0e:	2200      	movs	r2, #0
 8005e10:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e12:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	1891      	adds	r1, r2, r2
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	415b      	adcs	r3, r3
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e28:	4641      	mov	r1, r8
 8005e2a:	1851      	adds	r1, r2, r1
 8005e2c:	6039      	str	r1, [r7, #0]
 8005e2e:	4649      	mov	r1, r9
 8005e30:	414b      	adcs	r3, r1
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e40:	4659      	mov	r1, fp
 8005e42:	00cb      	lsls	r3, r1, #3
 8005e44:	4651      	mov	r1, sl
 8005e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e4a:	4651      	mov	r1, sl
 8005e4c:	00ca      	lsls	r2, r1, #3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	4642      	mov	r2, r8
 8005e56:	189b      	adds	r3, r3, r2
 8005e58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	eb42 0303 	adc.w	r3, r2, r3
 8005e62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e7c:	4649      	mov	r1, r9
 8005e7e:	008b      	lsls	r3, r1, #2
 8005e80:	4641      	mov	r1, r8
 8005e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e86:	4641      	mov	r1, r8
 8005e88:	008a      	lsls	r2, r1, #2
 8005e8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e8e:	f7fa ff03 	bl	8000c98 <__aeabi_uldivmod>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4b0d      	ldr	r3, [pc, #52]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005e98:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	2164      	movs	r1, #100	@ 0x64
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	3332      	adds	r3, #50	@ 0x32
 8005eaa:	4a08      	ldr	r2, [pc, #32]	@ (8005ecc <UART_SetConfig+0x4e4>)
 8005eac:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	f003 020f 	and.w	r2, r3, #15
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4422      	add	r2, r4
 8005ebe:	609a      	str	r2, [r3, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ecc:	51eb851f 	.word	0x51eb851f

08005ed0 <atof>:
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	f000 be0b 	b.w	8006aec <strtod>

08005ed6 <sulp>:
 8005ed6:	b570      	push	{r4, r5, r6, lr}
 8005ed8:	4604      	mov	r4, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	ec45 4b10 	vmov	d0, r4, r5
 8005ee0:	4616      	mov	r6, r2
 8005ee2:	f003 fd35 	bl	8009950 <__ulp>
 8005ee6:	ec51 0b10 	vmov	r0, r1, d0
 8005eea:	b17e      	cbz	r6, 8005f0c <sulp+0x36>
 8005eec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ef0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dd09      	ble.n	8005f0c <sulp+0x36>
 8005ef8:	051b      	lsls	r3, r3, #20
 8005efa:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005efe:	2400      	movs	r4, #0
 8005f00:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005f04:	4622      	mov	r2, r4
 8005f06:	462b      	mov	r3, r5
 8005f08:	f7fa fb7e 	bl	8000608 <__aeabi_dmul>
 8005f0c:	ec41 0b10 	vmov	d0, r0, r1
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	0000      	movs	r0, r0
 8005f14:	0000      	movs	r0, r0
	...

08005f18 <_strtod_l>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	b09f      	sub	sp, #124	@ 0x7c
 8005f1e:	460c      	mov	r4, r1
 8005f20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005f22:	2200      	movs	r2, #0
 8005f24:	921a      	str	r2, [sp, #104]	@ 0x68
 8005f26:	9005      	str	r0, [sp, #20]
 8005f28:	f04f 0a00 	mov.w	sl, #0
 8005f2c:	f04f 0b00 	mov.w	fp, #0
 8005f30:	460a      	mov	r2, r1
 8005f32:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f34:	7811      	ldrb	r1, [r2, #0]
 8005f36:	292b      	cmp	r1, #43	@ 0x2b
 8005f38:	d04a      	beq.n	8005fd0 <_strtod_l+0xb8>
 8005f3a:	d838      	bhi.n	8005fae <_strtod_l+0x96>
 8005f3c:	290d      	cmp	r1, #13
 8005f3e:	d832      	bhi.n	8005fa6 <_strtod_l+0x8e>
 8005f40:	2908      	cmp	r1, #8
 8005f42:	d832      	bhi.n	8005faa <_strtod_l+0x92>
 8005f44:	2900      	cmp	r1, #0
 8005f46:	d03b      	beq.n	8005fc0 <_strtod_l+0xa8>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005f4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005f4e:	782a      	ldrb	r2, [r5, #0]
 8005f50:	2a30      	cmp	r2, #48	@ 0x30
 8005f52:	f040 80b3 	bne.w	80060bc <_strtod_l+0x1a4>
 8005f56:	786a      	ldrb	r2, [r5, #1]
 8005f58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f5c:	2a58      	cmp	r2, #88	@ 0x58
 8005f5e:	d16e      	bne.n	800603e <_strtod_l+0x126>
 8005f60:	9302      	str	r3, [sp, #8]
 8005f62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f64:	9301      	str	r3, [sp, #4]
 8005f66:	ab1a      	add	r3, sp, #104	@ 0x68
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	4a8e      	ldr	r2, [pc, #568]	@ (80061a4 <_strtod_l+0x28c>)
 8005f6c:	9805      	ldr	r0, [sp, #20]
 8005f6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005f70:	a919      	add	r1, sp, #100	@ 0x64
 8005f72:	f002 fddf 	bl	8008b34 <__gethex>
 8005f76:	f010 060f 	ands.w	r6, r0, #15
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	d005      	beq.n	8005f8a <_strtod_l+0x72>
 8005f7e:	2e06      	cmp	r6, #6
 8005f80:	d128      	bne.n	8005fd4 <_strtod_l+0xbc>
 8005f82:	3501      	adds	r5, #1
 8005f84:	2300      	movs	r3, #0
 8005f86:	9519      	str	r5, [sp, #100]	@ 0x64
 8005f88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 858e 	bne.w	8006aae <_strtod_l+0xb96>
 8005f92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f94:	b1cb      	cbz	r3, 8005fca <_strtod_l+0xb2>
 8005f96:	4652      	mov	r2, sl
 8005f98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005f9c:	ec43 2b10 	vmov	d0, r2, r3
 8005fa0:	b01f      	add	sp, #124	@ 0x7c
 8005fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa6:	2920      	cmp	r1, #32
 8005fa8:	d1ce      	bne.n	8005f48 <_strtod_l+0x30>
 8005faa:	3201      	adds	r2, #1
 8005fac:	e7c1      	b.n	8005f32 <_strtod_l+0x1a>
 8005fae:	292d      	cmp	r1, #45	@ 0x2d
 8005fb0:	d1ca      	bne.n	8005f48 <_strtod_l+0x30>
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005fb6:	1c51      	adds	r1, r2, #1
 8005fb8:	9119      	str	r1, [sp, #100]	@ 0x64
 8005fba:	7852      	ldrb	r2, [r2, #1]
 8005fbc:	2a00      	cmp	r2, #0
 8005fbe:	d1c5      	bne.n	8005f4c <_strtod_l+0x34>
 8005fc0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005fc2:	9419      	str	r4, [sp, #100]	@ 0x64
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f040 8570 	bne.w	8006aaa <_strtod_l+0xb92>
 8005fca:	4652      	mov	r2, sl
 8005fcc:	465b      	mov	r3, fp
 8005fce:	e7e5      	b.n	8005f9c <_strtod_l+0x84>
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	e7ef      	b.n	8005fb4 <_strtod_l+0x9c>
 8005fd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005fd6:	b13a      	cbz	r2, 8005fe8 <_strtod_l+0xd0>
 8005fd8:	2135      	movs	r1, #53	@ 0x35
 8005fda:	a81c      	add	r0, sp, #112	@ 0x70
 8005fdc:	f003 fdb2 	bl	8009b44 <__copybits>
 8005fe0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005fe2:	9805      	ldr	r0, [sp, #20]
 8005fe4:	f003 f980 	bl	80092e8 <_Bfree>
 8005fe8:	3e01      	subs	r6, #1
 8005fea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005fec:	2e04      	cmp	r6, #4
 8005fee:	d806      	bhi.n	8005ffe <_strtod_l+0xe6>
 8005ff0:	e8df f006 	tbb	[pc, r6]
 8005ff4:	201d0314 	.word	0x201d0314
 8005ff8:	14          	.byte	0x14
 8005ff9:	00          	.byte	0x00
 8005ffa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005ffe:	05e1      	lsls	r1, r4, #23
 8006000:	bf48      	it	mi
 8006002:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800600a:	0d1b      	lsrs	r3, r3, #20
 800600c:	051b      	lsls	r3, r3, #20
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1bb      	bne.n	8005f8a <_strtod_l+0x72>
 8006012:	f001 fe29 	bl	8007c68 <__errno>
 8006016:	2322      	movs	r3, #34	@ 0x22
 8006018:	6003      	str	r3, [r0, #0]
 800601a:	e7b6      	b.n	8005f8a <_strtod_l+0x72>
 800601c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006020:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006024:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006028:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800602c:	e7e7      	b.n	8005ffe <_strtod_l+0xe6>
 800602e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80061ac <_strtod_l+0x294>
 8006032:	e7e4      	b.n	8005ffe <_strtod_l+0xe6>
 8006034:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006038:	f04f 3aff 	mov.w	sl, #4294967295
 800603c:	e7df      	b.n	8005ffe <_strtod_l+0xe6>
 800603e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	9219      	str	r2, [sp, #100]	@ 0x64
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	2b30      	cmp	r3, #48	@ 0x30
 8006048:	d0f9      	beq.n	800603e <_strtod_l+0x126>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d09d      	beq.n	8005f8a <_strtod_l+0x72>
 800604e:	2301      	movs	r3, #1
 8006050:	9309      	str	r3, [sp, #36]	@ 0x24
 8006052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006054:	930c      	str	r3, [sp, #48]	@ 0x30
 8006056:	2300      	movs	r3, #0
 8006058:	9308      	str	r3, [sp, #32]
 800605a:	930a      	str	r3, [sp, #40]	@ 0x28
 800605c:	461f      	mov	r7, r3
 800605e:	220a      	movs	r2, #10
 8006060:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006062:	7805      	ldrb	r5, [r0, #0]
 8006064:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006068:	b2d9      	uxtb	r1, r3
 800606a:	2909      	cmp	r1, #9
 800606c:	d928      	bls.n	80060c0 <_strtod_l+0x1a8>
 800606e:	494e      	ldr	r1, [pc, #312]	@ (80061a8 <_strtod_l+0x290>)
 8006070:	2201      	movs	r2, #1
 8006072:	f001 fd40 	bl	8007af6 <strncmp>
 8006076:	2800      	cmp	r0, #0
 8006078:	d032      	beq.n	80060e0 <_strtod_l+0x1c8>
 800607a:	2000      	movs	r0, #0
 800607c:	462a      	mov	r2, r5
 800607e:	4681      	mov	r9, r0
 8006080:	463d      	mov	r5, r7
 8006082:	4603      	mov	r3, r0
 8006084:	2a65      	cmp	r2, #101	@ 0x65
 8006086:	d001      	beq.n	800608c <_strtod_l+0x174>
 8006088:	2a45      	cmp	r2, #69	@ 0x45
 800608a:	d114      	bne.n	80060b6 <_strtod_l+0x19e>
 800608c:	b91d      	cbnz	r5, 8006096 <_strtod_l+0x17e>
 800608e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006090:	4302      	orrs	r2, r0
 8006092:	d095      	beq.n	8005fc0 <_strtod_l+0xa8>
 8006094:	2500      	movs	r5, #0
 8006096:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006098:	1c62      	adds	r2, r4, #1
 800609a:	9219      	str	r2, [sp, #100]	@ 0x64
 800609c:	7862      	ldrb	r2, [r4, #1]
 800609e:	2a2b      	cmp	r2, #43	@ 0x2b
 80060a0:	d077      	beq.n	8006192 <_strtod_l+0x27a>
 80060a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80060a4:	d07b      	beq.n	800619e <_strtod_l+0x286>
 80060a6:	f04f 0c00 	mov.w	ip, #0
 80060aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80060ae:	2909      	cmp	r1, #9
 80060b0:	f240 8082 	bls.w	80061b8 <_strtod_l+0x2a0>
 80060b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80060b6:	f04f 0800 	mov.w	r8, #0
 80060ba:	e0a2      	b.n	8006202 <_strtod_l+0x2ea>
 80060bc:	2300      	movs	r3, #0
 80060be:	e7c7      	b.n	8006050 <_strtod_l+0x138>
 80060c0:	2f08      	cmp	r7, #8
 80060c2:	bfd5      	itete	le
 80060c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80060c6:	9908      	ldrgt	r1, [sp, #32]
 80060c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80060cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80060d0:	f100 0001 	add.w	r0, r0, #1
 80060d4:	bfd4      	ite	le
 80060d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80060d8:	9308      	strgt	r3, [sp, #32]
 80060da:	3701      	adds	r7, #1
 80060dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80060de:	e7bf      	b.n	8006060 <_strtod_l+0x148>
 80060e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80060e6:	785a      	ldrb	r2, [r3, #1]
 80060e8:	b37f      	cbz	r7, 800614a <_strtod_l+0x232>
 80060ea:	4681      	mov	r9, r0
 80060ec:	463d      	mov	r5, r7
 80060ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80060f2:	2b09      	cmp	r3, #9
 80060f4:	d912      	bls.n	800611c <_strtod_l+0x204>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e7c4      	b.n	8006084 <_strtod_l+0x16c>
 80060fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8006100:	785a      	ldrb	r2, [r3, #1]
 8006102:	3001      	adds	r0, #1
 8006104:	2a30      	cmp	r2, #48	@ 0x30
 8006106:	d0f8      	beq.n	80060fa <_strtod_l+0x1e2>
 8006108:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800610c:	2b08      	cmp	r3, #8
 800610e:	f200 84d3 	bhi.w	8006ab8 <_strtod_l+0xba0>
 8006112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006114:	930c      	str	r3, [sp, #48]	@ 0x30
 8006116:	4681      	mov	r9, r0
 8006118:	2000      	movs	r0, #0
 800611a:	4605      	mov	r5, r0
 800611c:	3a30      	subs	r2, #48	@ 0x30
 800611e:	f100 0301 	add.w	r3, r0, #1
 8006122:	d02a      	beq.n	800617a <_strtod_l+0x262>
 8006124:	4499      	add	r9, r3
 8006126:	eb00 0c05 	add.w	ip, r0, r5
 800612a:	462b      	mov	r3, r5
 800612c:	210a      	movs	r1, #10
 800612e:	4563      	cmp	r3, ip
 8006130:	d10d      	bne.n	800614e <_strtod_l+0x236>
 8006132:	1c69      	adds	r1, r5, #1
 8006134:	4401      	add	r1, r0
 8006136:	4428      	add	r0, r5
 8006138:	2808      	cmp	r0, #8
 800613a:	dc16      	bgt.n	800616a <_strtod_l+0x252>
 800613c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800613e:	230a      	movs	r3, #10
 8006140:	fb03 2300 	mla	r3, r3, r0, r2
 8006144:	930a      	str	r3, [sp, #40]	@ 0x28
 8006146:	2300      	movs	r3, #0
 8006148:	e018      	b.n	800617c <_strtod_l+0x264>
 800614a:	4638      	mov	r0, r7
 800614c:	e7da      	b.n	8006104 <_strtod_l+0x1ec>
 800614e:	2b08      	cmp	r3, #8
 8006150:	f103 0301 	add.w	r3, r3, #1
 8006154:	dc03      	bgt.n	800615e <_strtod_l+0x246>
 8006156:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006158:	434e      	muls	r6, r1
 800615a:	960a      	str	r6, [sp, #40]	@ 0x28
 800615c:	e7e7      	b.n	800612e <_strtod_l+0x216>
 800615e:	2b10      	cmp	r3, #16
 8006160:	bfde      	ittt	le
 8006162:	9e08      	ldrle	r6, [sp, #32]
 8006164:	434e      	mulle	r6, r1
 8006166:	9608      	strle	r6, [sp, #32]
 8006168:	e7e1      	b.n	800612e <_strtod_l+0x216>
 800616a:	280f      	cmp	r0, #15
 800616c:	dceb      	bgt.n	8006146 <_strtod_l+0x22e>
 800616e:	9808      	ldr	r0, [sp, #32]
 8006170:	230a      	movs	r3, #10
 8006172:	fb03 2300 	mla	r3, r3, r0, r2
 8006176:	9308      	str	r3, [sp, #32]
 8006178:	e7e5      	b.n	8006146 <_strtod_l+0x22e>
 800617a:	4629      	mov	r1, r5
 800617c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800617e:	1c50      	adds	r0, r2, #1
 8006180:	9019      	str	r0, [sp, #100]	@ 0x64
 8006182:	7852      	ldrb	r2, [r2, #1]
 8006184:	4618      	mov	r0, r3
 8006186:	460d      	mov	r5, r1
 8006188:	e7b1      	b.n	80060ee <_strtod_l+0x1d6>
 800618a:	f04f 0900 	mov.w	r9, #0
 800618e:	2301      	movs	r3, #1
 8006190:	e77d      	b.n	800608e <_strtod_l+0x176>
 8006192:	f04f 0c00 	mov.w	ip, #0
 8006196:	1ca2      	adds	r2, r4, #2
 8006198:	9219      	str	r2, [sp, #100]	@ 0x64
 800619a:	78a2      	ldrb	r2, [r4, #2]
 800619c:	e785      	b.n	80060aa <_strtod_l+0x192>
 800619e:	f04f 0c01 	mov.w	ip, #1
 80061a2:	e7f8      	b.n	8006196 <_strtod_l+0x27e>
 80061a4:	0800cc80 	.word	0x0800cc80
 80061a8:	0800cc68 	.word	0x0800cc68
 80061ac:	7ff00000 	.word	0x7ff00000
 80061b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061b2:	1c51      	adds	r1, r2, #1
 80061b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80061b6:	7852      	ldrb	r2, [r2, #1]
 80061b8:	2a30      	cmp	r2, #48	@ 0x30
 80061ba:	d0f9      	beq.n	80061b0 <_strtod_l+0x298>
 80061bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80061c0:	2908      	cmp	r1, #8
 80061c2:	f63f af78 	bhi.w	80060b6 <_strtod_l+0x19e>
 80061c6:	3a30      	subs	r2, #48	@ 0x30
 80061c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80061ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80061ce:	f04f 080a 	mov.w	r8, #10
 80061d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061d4:	1c56      	adds	r6, r2, #1
 80061d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80061d8:	7852      	ldrb	r2, [r2, #1]
 80061da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80061de:	f1be 0f09 	cmp.w	lr, #9
 80061e2:	d939      	bls.n	8006258 <_strtod_l+0x340>
 80061e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80061e6:	1a76      	subs	r6, r6, r1
 80061e8:	2e08      	cmp	r6, #8
 80061ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80061ee:	dc03      	bgt.n	80061f8 <_strtod_l+0x2e0>
 80061f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80061f2:	4588      	cmp	r8, r1
 80061f4:	bfa8      	it	ge
 80061f6:	4688      	movge	r8, r1
 80061f8:	f1bc 0f00 	cmp.w	ip, #0
 80061fc:	d001      	beq.n	8006202 <_strtod_l+0x2ea>
 80061fe:	f1c8 0800 	rsb	r8, r8, #0
 8006202:	2d00      	cmp	r5, #0
 8006204:	d14e      	bne.n	80062a4 <_strtod_l+0x38c>
 8006206:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006208:	4308      	orrs	r0, r1
 800620a:	f47f aebe 	bne.w	8005f8a <_strtod_l+0x72>
 800620e:	2b00      	cmp	r3, #0
 8006210:	f47f aed6 	bne.w	8005fc0 <_strtod_l+0xa8>
 8006214:	2a69      	cmp	r2, #105	@ 0x69
 8006216:	d028      	beq.n	800626a <_strtod_l+0x352>
 8006218:	dc25      	bgt.n	8006266 <_strtod_l+0x34e>
 800621a:	2a49      	cmp	r2, #73	@ 0x49
 800621c:	d025      	beq.n	800626a <_strtod_l+0x352>
 800621e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006220:	f47f aece 	bne.w	8005fc0 <_strtod_l+0xa8>
 8006224:	499b      	ldr	r1, [pc, #620]	@ (8006494 <_strtod_l+0x57c>)
 8006226:	a819      	add	r0, sp, #100	@ 0x64
 8006228:	f002 fea6 	bl	8008f78 <__match>
 800622c:	2800      	cmp	r0, #0
 800622e:	f43f aec7 	beq.w	8005fc0 <_strtod_l+0xa8>
 8006232:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b28      	cmp	r3, #40	@ 0x28
 8006238:	d12e      	bne.n	8006298 <_strtod_l+0x380>
 800623a:	4997      	ldr	r1, [pc, #604]	@ (8006498 <_strtod_l+0x580>)
 800623c:	aa1c      	add	r2, sp, #112	@ 0x70
 800623e:	a819      	add	r0, sp, #100	@ 0x64
 8006240:	f002 feae 	bl	8008fa0 <__hexnan>
 8006244:	2805      	cmp	r0, #5
 8006246:	d127      	bne.n	8006298 <_strtod_l+0x380>
 8006248:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800624a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800624e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006252:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006256:	e698      	b.n	8005f8a <_strtod_l+0x72>
 8006258:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800625a:	fb08 2101 	mla	r1, r8, r1, r2
 800625e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006262:	920e      	str	r2, [sp, #56]	@ 0x38
 8006264:	e7b5      	b.n	80061d2 <_strtod_l+0x2ba>
 8006266:	2a6e      	cmp	r2, #110	@ 0x6e
 8006268:	e7da      	b.n	8006220 <_strtod_l+0x308>
 800626a:	498c      	ldr	r1, [pc, #560]	@ (800649c <_strtod_l+0x584>)
 800626c:	a819      	add	r0, sp, #100	@ 0x64
 800626e:	f002 fe83 	bl	8008f78 <__match>
 8006272:	2800      	cmp	r0, #0
 8006274:	f43f aea4 	beq.w	8005fc0 <_strtod_l+0xa8>
 8006278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800627a:	4989      	ldr	r1, [pc, #548]	@ (80064a0 <_strtod_l+0x588>)
 800627c:	3b01      	subs	r3, #1
 800627e:	a819      	add	r0, sp, #100	@ 0x64
 8006280:	9319      	str	r3, [sp, #100]	@ 0x64
 8006282:	f002 fe79 	bl	8008f78 <__match>
 8006286:	b910      	cbnz	r0, 800628e <_strtod_l+0x376>
 8006288:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800628a:	3301      	adds	r3, #1
 800628c:	9319      	str	r3, [sp, #100]	@ 0x64
 800628e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80064b0 <_strtod_l+0x598>
 8006292:	f04f 0a00 	mov.w	sl, #0
 8006296:	e678      	b.n	8005f8a <_strtod_l+0x72>
 8006298:	4882      	ldr	r0, [pc, #520]	@ (80064a4 <_strtod_l+0x58c>)
 800629a:	f001 fd21 	bl	8007ce0 <nan>
 800629e:	ec5b ab10 	vmov	sl, fp, d0
 80062a2:	e672      	b.n	8005f8a <_strtod_l+0x72>
 80062a4:	eba8 0309 	sub.w	r3, r8, r9
 80062a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80062aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ac:	2f00      	cmp	r7, #0
 80062ae:	bf08      	it	eq
 80062b0:	462f      	moveq	r7, r5
 80062b2:	2d10      	cmp	r5, #16
 80062b4:	462c      	mov	r4, r5
 80062b6:	bfa8      	it	ge
 80062b8:	2410      	movge	r4, #16
 80062ba:	f7fa f92b 	bl	8000514 <__aeabi_ui2d>
 80062be:	2d09      	cmp	r5, #9
 80062c0:	4682      	mov	sl, r0
 80062c2:	468b      	mov	fp, r1
 80062c4:	dc13      	bgt.n	80062ee <_strtod_l+0x3d6>
 80062c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f43f ae5e 	beq.w	8005f8a <_strtod_l+0x72>
 80062ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d0:	dd78      	ble.n	80063c4 <_strtod_l+0x4ac>
 80062d2:	2b16      	cmp	r3, #22
 80062d4:	dc5f      	bgt.n	8006396 <_strtod_l+0x47e>
 80062d6:	4974      	ldr	r1, [pc, #464]	@ (80064a8 <_strtod_l+0x590>)
 80062d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062e0:	4652      	mov	r2, sl
 80062e2:	465b      	mov	r3, fp
 80062e4:	f7fa f990 	bl	8000608 <__aeabi_dmul>
 80062e8:	4682      	mov	sl, r0
 80062ea:	468b      	mov	fp, r1
 80062ec:	e64d      	b.n	8005f8a <_strtod_l+0x72>
 80062ee:	4b6e      	ldr	r3, [pc, #440]	@ (80064a8 <_strtod_l+0x590>)
 80062f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80062f8:	f7fa f986 	bl	8000608 <__aeabi_dmul>
 80062fc:	4682      	mov	sl, r0
 80062fe:	9808      	ldr	r0, [sp, #32]
 8006300:	468b      	mov	fp, r1
 8006302:	f7fa f907 	bl	8000514 <__aeabi_ui2d>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4650      	mov	r0, sl
 800630c:	4659      	mov	r1, fp
 800630e:	f7f9 ffc5 	bl	800029c <__adddf3>
 8006312:	2d0f      	cmp	r5, #15
 8006314:	4682      	mov	sl, r0
 8006316:	468b      	mov	fp, r1
 8006318:	ddd5      	ble.n	80062c6 <_strtod_l+0x3ae>
 800631a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800631c:	1b2c      	subs	r4, r5, r4
 800631e:	441c      	add	r4, r3
 8006320:	2c00      	cmp	r4, #0
 8006322:	f340 8096 	ble.w	8006452 <_strtod_l+0x53a>
 8006326:	f014 030f 	ands.w	r3, r4, #15
 800632a:	d00a      	beq.n	8006342 <_strtod_l+0x42a>
 800632c:	495e      	ldr	r1, [pc, #376]	@ (80064a8 <_strtod_l+0x590>)
 800632e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006332:	4652      	mov	r2, sl
 8006334:	465b      	mov	r3, fp
 8006336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800633a:	f7fa f965 	bl	8000608 <__aeabi_dmul>
 800633e:	4682      	mov	sl, r0
 8006340:	468b      	mov	fp, r1
 8006342:	f034 040f 	bics.w	r4, r4, #15
 8006346:	d073      	beq.n	8006430 <_strtod_l+0x518>
 8006348:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800634c:	dd48      	ble.n	80063e0 <_strtod_l+0x4c8>
 800634e:	2400      	movs	r4, #0
 8006350:	46a0      	mov	r8, r4
 8006352:	940a      	str	r4, [sp, #40]	@ 0x28
 8006354:	46a1      	mov	r9, r4
 8006356:	9a05      	ldr	r2, [sp, #20]
 8006358:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80064b0 <_strtod_l+0x598>
 800635c:	2322      	movs	r3, #34	@ 0x22
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	f04f 0a00 	mov.w	sl, #0
 8006364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006366:	2b00      	cmp	r3, #0
 8006368:	f43f ae0f 	beq.w	8005f8a <_strtod_l+0x72>
 800636c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800636e:	9805      	ldr	r0, [sp, #20]
 8006370:	f002 ffba 	bl	80092e8 <_Bfree>
 8006374:	9805      	ldr	r0, [sp, #20]
 8006376:	4649      	mov	r1, r9
 8006378:	f002 ffb6 	bl	80092e8 <_Bfree>
 800637c:	9805      	ldr	r0, [sp, #20]
 800637e:	4641      	mov	r1, r8
 8006380:	f002 ffb2 	bl	80092e8 <_Bfree>
 8006384:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006386:	9805      	ldr	r0, [sp, #20]
 8006388:	f002 ffae 	bl	80092e8 <_Bfree>
 800638c:	9805      	ldr	r0, [sp, #20]
 800638e:	4621      	mov	r1, r4
 8006390:	f002 ffaa 	bl	80092e8 <_Bfree>
 8006394:	e5f9      	b.n	8005f8a <_strtod_l+0x72>
 8006396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006398:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800639c:	4293      	cmp	r3, r2
 800639e:	dbbc      	blt.n	800631a <_strtod_l+0x402>
 80063a0:	4c41      	ldr	r4, [pc, #260]	@ (80064a8 <_strtod_l+0x590>)
 80063a2:	f1c5 050f 	rsb	r5, r5, #15
 80063a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b2:	f7fa f929 	bl	8000608 <__aeabi_dmul>
 80063b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b8:	1b5d      	subs	r5, r3, r5
 80063ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80063be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063c2:	e78f      	b.n	80062e4 <_strtod_l+0x3cc>
 80063c4:	3316      	adds	r3, #22
 80063c6:	dba8      	blt.n	800631a <_strtod_l+0x402>
 80063c8:	4b37      	ldr	r3, [pc, #220]	@ (80064a8 <_strtod_l+0x590>)
 80063ca:	eba9 0808 	sub.w	r8, r9, r8
 80063ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80063d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80063d6:	4650      	mov	r0, sl
 80063d8:	4659      	mov	r1, fp
 80063da:	f7fa fa3f 	bl	800085c <__aeabi_ddiv>
 80063de:	e783      	b.n	80062e8 <_strtod_l+0x3d0>
 80063e0:	4b32      	ldr	r3, [pc, #200]	@ (80064ac <_strtod_l+0x594>)
 80063e2:	9308      	str	r3, [sp, #32]
 80063e4:	2300      	movs	r3, #0
 80063e6:	1124      	asrs	r4, r4, #4
 80063e8:	4650      	mov	r0, sl
 80063ea:	4659      	mov	r1, fp
 80063ec:	461e      	mov	r6, r3
 80063ee:	2c01      	cmp	r4, #1
 80063f0:	dc21      	bgt.n	8006436 <_strtod_l+0x51e>
 80063f2:	b10b      	cbz	r3, 80063f8 <_strtod_l+0x4e0>
 80063f4:	4682      	mov	sl, r0
 80063f6:	468b      	mov	fp, r1
 80063f8:	492c      	ldr	r1, [pc, #176]	@ (80064ac <_strtod_l+0x594>)
 80063fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80063fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006402:	4652      	mov	r2, sl
 8006404:	465b      	mov	r3, fp
 8006406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800640a:	f7fa f8fd 	bl	8000608 <__aeabi_dmul>
 800640e:	4b28      	ldr	r3, [pc, #160]	@ (80064b0 <_strtod_l+0x598>)
 8006410:	460a      	mov	r2, r1
 8006412:	400b      	ands	r3, r1
 8006414:	4927      	ldr	r1, [pc, #156]	@ (80064b4 <_strtod_l+0x59c>)
 8006416:	428b      	cmp	r3, r1
 8006418:	4682      	mov	sl, r0
 800641a:	d898      	bhi.n	800634e <_strtod_l+0x436>
 800641c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006420:	428b      	cmp	r3, r1
 8006422:	bf86      	itte	hi
 8006424:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80064b8 <_strtod_l+0x5a0>
 8006428:	f04f 3aff 	movhi.w	sl, #4294967295
 800642c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006430:	2300      	movs	r3, #0
 8006432:	9308      	str	r3, [sp, #32]
 8006434:	e07a      	b.n	800652c <_strtod_l+0x614>
 8006436:	07e2      	lsls	r2, r4, #31
 8006438:	d505      	bpl.n	8006446 <_strtod_l+0x52e>
 800643a:	9b08      	ldr	r3, [sp, #32]
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f7fa f8e2 	bl	8000608 <__aeabi_dmul>
 8006444:	2301      	movs	r3, #1
 8006446:	9a08      	ldr	r2, [sp, #32]
 8006448:	3208      	adds	r2, #8
 800644a:	3601      	adds	r6, #1
 800644c:	1064      	asrs	r4, r4, #1
 800644e:	9208      	str	r2, [sp, #32]
 8006450:	e7cd      	b.n	80063ee <_strtod_l+0x4d6>
 8006452:	d0ed      	beq.n	8006430 <_strtod_l+0x518>
 8006454:	4264      	negs	r4, r4
 8006456:	f014 020f 	ands.w	r2, r4, #15
 800645a:	d00a      	beq.n	8006472 <_strtod_l+0x55a>
 800645c:	4b12      	ldr	r3, [pc, #72]	@ (80064a8 <_strtod_l+0x590>)
 800645e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006462:	4650      	mov	r0, sl
 8006464:	4659      	mov	r1, fp
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f7fa f9f7 	bl	800085c <__aeabi_ddiv>
 800646e:	4682      	mov	sl, r0
 8006470:	468b      	mov	fp, r1
 8006472:	1124      	asrs	r4, r4, #4
 8006474:	d0dc      	beq.n	8006430 <_strtod_l+0x518>
 8006476:	2c1f      	cmp	r4, #31
 8006478:	dd20      	ble.n	80064bc <_strtod_l+0x5a4>
 800647a:	2400      	movs	r4, #0
 800647c:	46a0      	mov	r8, r4
 800647e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006480:	46a1      	mov	r9, r4
 8006482:	9a05      	ldr	r2, [sp, #20]
 8006484:	2322      	movs	r3, #34	@ 0x22
 8006486:	f04f 0a00 	mov.w	sl, #0
 800648a:	f04f 0b00 	mov.w	fp, #0
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	e768      	b.n	8006364 <_strtod_l+0x44c>
 8006492:	bf00      	nop
 8006494:	0800cccd 	.word	0x0800cccd
 8006498:	0800cc6c 	.word	0x0800cc6c
 800649c:	0800ccc5 	.word	0x0800ccc5
 80064a0:	0800cdaf 	.word	0x0800cdaf
 80064a4:	0800cdab 	.word	0x0800cdab
 80064a8:	0800cf10 	.word	0x0800cf10
 80064ac:	0800cee8 	.word	0x0800cee8
 80064b0:	7ff00000 	.word	0x7ff00000
 80064b4:	7ca00000 	.word	0x7ca00000
 80064b8:	7fefffff 	.word	0x7fefffff
 80064bc:	f014 0310 	ands.w	r3, r4, #16
 80064c0:	bf18      	it	ne
 80064c2:	236a      	movne	r3, #106	@ 0x6a
 80064c4:	4ea9      	ldr	r6, [pc, #676]	@ (800676c <_strtod_l+0x854>)
 80064c6:	9308      	str	r3, [sp, #32]
 80064c8:	4650      	mov	r0, sl
 80064ca:	4659      	mov	r1, fp
 80064cc:	2300      	movs	r3, #0
 80064ce:	07e2      	lsls	r2, r4, #31
 80064d0:	d504      	bpl.n	80064dc <_strtod_l+0x5c4>
 80064d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064d6:	f7fa f897 	bl	8000608 <__aeabi_dmul>
 80064da:	2301      	movs	r3, #1
 80064dc:	1064      	asrs	r4, r4, #1
 80064de:	f106 0608 	add.w	r6, r6, #8
 80064e2:	d1f4      	bne.n	80064ce <_strtod_l+0x5b6>
 80064e4:	b10b      	cbz	r3, 80064ea <_strtod_l+0x5d2>
 80064e6:	4682      	mov	sl, r0
 80064e8:	468b      	mov	fp, r1
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	b1b3      	cbz	r3, 800651c <_strtod_l+0x604>
 80064ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80064f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	4659      	mov	r1, fp
 80064fa:	dd0f      	ble.n	800651c <_strtod_l+0x604>
 80064fc:	2b1f      	cmp	r3, #31
 80064fe:	dd55      	ble.n	80065ac <_strtod_l+0x694>
 8006500:	2b34      	cmp	r3, #52	@ 0x34
 8006502:	bfde      	ittt	le
 8006504:	f04f 33ff 	movle.w	r3, #4294967295
 8006508:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800650c:	4093      	lslle	r3, r2
 800650e:	f04f 0a00 	mov.w	sl, #0
 8006512:	bfcc      	ite	gt
 8006514:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006518:	ea03 0b01 	andle.w	fp, r3, r1
 800651c:	2200      	movs	r2, #0
 800651e:	2300      	movs	r3, #0
 8006520:	4650      	mov	r0, sl
 8006522:	4659      	mov	r1, fp
 8006524:	f7fa fad8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006528:	2800      	cmp	r0, #0
 800652a:	d1a6      	bne.n	800647a <_strtod_l+0x562>
 800652c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006532:	9805      	ldr	r0, [sp, #20]
 8006534:	462b      	mov	r3, r5
 8006536:	463a      	mov	r2, r7
 8006538:	f002 ff3e 	bl	80093b8 <__s2b>
 800653c:	900a      	str	r0, [sp, #40]	@ 0x28
 800653e:	2800      	cmp	r0, #0
 8006540:	f43f af05 	beq.w	800634e <_strtod_l+0x436>
 8006544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006546:	2a00      	cmp	r2, #0
 8006548:	eba9 0308 	sub.w	r3, r9, r8
 800654c:	bfa8      	it	ge
 800654e:	2300      	movge	r3, #0
 8006550:	9312      	str	r3, [sp, #72]	@ 0x48
 8006552:	2400      	movs	r4, #0
 8006554:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006558:	9316      	str	r3, [sp, #88]	@ 0x58
 800655a:	46a0      	mov	r8, r4
 800655c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800655e:	9805      	ldr	r0, [sp, #20]
 8006560:	6859      	ldr	r1, [r3, #4]
 8006562:	f002 fe81 	bl	8009268 <_Balloc>
 8006566:	4681      	mov	r9, r0
 8006568:	2800      	cmp	r0, #0
 800656a:	f43f aef4 	beq.w	8006356 <_strtod_l+0x43e>
 800656e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	3202      	adds	r2, #2
 8006574:	f103 010c 	add.w	r1, r3, #12
 8006578:	0092      	lsls	r2, r2, #2
 800657a:	300c      	adds	r0, #12
 800657c:	f001 fba1 	bl	8007cc2 <memcpy>
 8006580:	ec4b ab10 	vmov	d0, sl, fp
 8006584:	9805      	ldr	r0, [sp, #20]
 8006586:	aa1c      	add	r2, sp, #112	@ 0x70
 8006588:	a91b      	add	r1, sp, #108	@ 0x6c
 800658a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800658e:	f003 fa4f 	bl	8009a30 <__d2b>
 8006592:	901a      	str	r0, [sp, #104]	@ 0x68
 8006594:	2800      	cmp	r0, #0
 8006596:	f43f aede 	beq.w	8006356 <_strtod_l+0x43e>
 800659a:	9805      	ldr	r0, [sp, #20]
 800659c:	2101      	movs	r1, #1
 800659e:	f002 ffa1 	bl	80094e4 <__i2b>
 80065a2:	4680      	mov	r8, r0
 80065a4:	b948      	cbnz	r0, 80065ba <_strtod_l+0x6a2>
 80065a6:	f04f 0800 	mov.w	r8, #0
 80065aa:	e6d4      	b.n	8006356 <_strtod_l+0x43e>
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	ea03 0a0a 	and.w	sl, r3, sl
 80065b8:	e7b0      	b.n	800651c <_strtod_l+0x604>
 80065ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80065bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80065be:	2d00      	cmp	r5, #0
 80065c0:	bfab      	itete	ge
 80065c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80065c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80065c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80065c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80065ca:	bfac      	ite	ge
 80065cc:	18ef      	addge	r7, r5, r3
 80065ce:	1b5e      	sublt	r6, r3, r5
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	1aed      	subs	r5, r5, r3
 80065d4:	4415      	add	r5, r2
 80065d6:	4b66      	ldr	r3, [pc, #408]	@ (8006770 <_strtod_l+0x858>)
 80065d8:	3d01      	subs	r5, #1
 80065da:	429d      	cmp	r5, r3
 80065dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80065e0:	da50      	bge.n	8006684 <_strtod_l+0x76c>
 80065e2:	1b5b      	subs	r3, r3, r5
 80065e4:	2b1f      	cmp	r3, #31
 80065e6:	eba2 0203 	sub.w	r2, r2, r3
 80065ea:	f04f 0101 	mov.w	r1, #1
 80065ee:	dc3d      	bgt.n	800666c <_strtod_l+0x754>
 80065f0:	fa01 f303 	lsl.w	r3, r1, r3
 80065f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065f6:	2300      	movs	r3, #0
 80065f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80065fa:	18bd      	adds	r5, r7, r2
 80065fc:	9b08      	ldr	r3, [sp, #32]
 80065fe:	42af      	cmp	r7, r5
 8006600:	4416      	add	r6, r2
 8006602:	441e      	add	r6, r3
 8006604:	463b      	mov	r3, r7
 8006606:	bfa8      	it	ge
 8006608:	462b      	movge	r3, r5
 800660a:	42b3      	cmp	r3, r6
 800660c:	bfa8      	it	ge
 800660e:	4633      	movge	r3, r6
 8006610:	2b00      	cmp	r3, #0
 8006612:	bfc2      	ittt	gt
 8006614:	1aed      	subgt	r5, r5, r3
 8006616:	1af6      	subgt	r6, r6, r3
 8006618:	1aff      	subgt	r7, r7, r3
 800661a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800661c:	2b00      	cmp	r3, #0
 800661e:	dd16      	ble.n	800664e <_strtod_l+0x736>
 8006620:	4641      	mov	r1, r8
 8006622:	9805      	ldr	r0, [sp, #20]
 8006624:	461a      	mov	r2, r3
 8006626:	f003 f81d 	bl	8009664 <__pow5mult>
 800662a:	4680      	mov	r8, r0
 800662c:	2800      	cmp	r0, #0
 800662e:	d0ba      	beq.n	80065a6 <_strtod_l+0x68e>
 8006630:	4601      	mov	r1, r0
 8006632:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006634:	9805      	ldr	r0, [sp, #20]
 8006636:	f002 ff6b 	bl	8009510 <__multiply>
 800663a:	900e      	str	r0, [sp, #56]	@ 0x38
 800663c:	2800      	cmp	r0, #0
 800663e:	f43f ae8a 	beq.w	8006356 <_strtod_l+0x43e>
 8006642:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006644:	9805      	ldr	r0, [sp, #20]
 8006646:	f002 fe4f 	bl	80092e8 <_Bfree>
 800664a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800664c:	931a      	str	r3, [sp, #104]	@ 0x68
 800664e:	2d00      	cmp	r5, #0
 8006650:	dc1d      	bgt.n	800668e <_strtod_l+0x776>
 8006652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	dd23      	ble.n	80066a0 <_strtod_l+0x788>
 8006658:	4649      	mov	r1, r9
 800665a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800665c:	9805      	ldr	r0, [sp, #20]
 800665e:	f003 f801 	bl	8009664 <__pow5mult>
 8006662:	4681      	mov	r9, r0
 8006664:	b9e0      	cbnz	r0, 80066a0 <_strtod_l+0x788>
 8006666:	f04f 0900 	mov.w	r9, #0
 800666a:	e674      	b.n	8006356 <_strtod_l+0x43e>
 800666c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006670:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006674:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006678:	35e2      	adds	r5, #226	@ 0xe2
 800667a:	fa01 f305 	lsl.w	r3, r1, r5
 800667e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006680:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006682:	e7ba      	b.n	80065fa <_strtod_l+0x6e2>
 8006684:	2300      	movs	r3, #0
 8006686:	9310      	str	r3, [sp, #64]	@ 0x40
 8006688:	2301      	movs	r3, #1
 800668a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800668c:	e7b5      	b.n	80065fa <_strtod_l+0x6e2>
 800668e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006690:	9805      	ldr	r0, [sp, #20]
 8006692:	462a      	mov	r2, r5
 8006694:	f003 f840 	bl	8009718 <__lshift>
 8006698:	901a      	str	r0, [sp, #104]	@ 0x68
 800669a:	2800      	cmp	r0, #0
 800669c:	d1d9      	bne.n	8006652 <_strtod_l+0x73a>
 800669e:	e65a      	b.n	8006356 <_strtod_l+0x43e>
 80066a0:	2e00      	cmp	r6, #0
 80066a2:	dd07      	ble.n	80066b4 <_strtod_l+0x79c>
 80066a4:	4649      	mov	r1, r9
 80066a6:	9805      	ldr	r0, [sp, #20]
 80066a8:	4632      	mov	r2, r6
 80066aa:	f003 f835 	bl	8009718 <__lshift>
 80066ae:	4681      	mov	r9, r0
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d0d8      	beq.n	8006666 <_strtod_l+0x74e>
 80066b4:	2f00      	cmp	r7, #0
 80066b6:	dd08      	ble.n	80066ca <_strtod_l+0x7b2>
 80066b8:	4641      	mov	r1, r8
 80066ba:	9805      	ldr	r0, [sp, #20]
 80066bc:	463a      	mov	r2, r7
 80066be:	f003 f82b 	bl	8009718 <__lshift>
 80066c2:	4680      	mov	r8, r0
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f43f ae46 	beq.w	8006356 <_strtod_l+0x43e>
 80066ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066cc:	9805      	ldr	r0, [sp, #20]
 80066ce:	464a      	mov	r2, r9
 80066d0:	f003 f8aa 	bl	8009828 <__mdiff>
 80066d4:	4604      	mov	r4, r0
 80066d6:	2800      	cmp	r0, #0
 80066d8:	f43f ae3d 	beq.w	8006356 <_strtod_l+0x43e>
 80066dc:	68c3      	ldr	r3, [r0, #12]
 80066de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066e0:	2300      	movs	r3, #0
 80066e2:	60c3      	str	r3, [r0, #12]
 80066e4:	4641      	mov	r1, r8
 80066e6:	f003 f883 	bl	80097f0 <__mcmp>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	da46      	bge.n	800677c <_strtod_l+0x864>
 80066ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066f0:	ea53 030a 	orrs.w	r3, r3, sl
 80066f4:	d16c      	bne.n	80067d0 <_strtod_l+0x8b8>
 80066f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d168      	bne.n	80067d0 <_strtod_l+0x8b8>
 80066fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006702:	0d1b      	lsrs	r3, r3, #20
 8006704:	051b      	lsls	r3, r3, #20
 8006706:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800670a:	d961      	bls.n	80067d0 <_strtod_l+0x8b8>
 800670c:	6963      	ldr	r3, [r4, #20]
 800670e:	b913      	cbnz	r3, 8006716 <_strtod_l+0x7fe>
 8006710:	6923      	ldr	r3, [r4, #16]
 8006712:	2b01      	cmp	r3, #1
 8006714:	dd5c      	ble.n	80067d0 <_strtod_l+0x8b8>
 8006716:	4621      	mov	r1, r4
 8006718:	2201      	movs	r2, #1
 800671a:	9805      	ldr	r0, [sp, #20]
 800671c:	f002 fffc 	bl	8009718 <__lshift>
 8006720:	4641      	mov	r1, r8
 8006722:	4604      	mov	r4, r0
 8006724:	f003 f864 	bl	80097f0 <__mcmp>
 8006728:	2800      	cmp	r0, #0
 800672a:	dd51      	ble.n	80067d0 <_strtod_l+0x8b8>
 800672c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006730:	9a08      	ldr	r2, [sp, #32]
 8006732:	0d1b      	lsrs	r3, r3, #20
 8006734:	051b      	lsls	r3, r3, #20
 8006736:	2a00      	cmp	r2, #0
 8006738:	d06b      	beq.n	8006812 <_strtod_l+0x8fa>
 800673a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800673e:	d868      	bhi.n	8006812 <_strtod_l+0x8fa>
 8006740:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006744:	f67f ae9d 	bls.w	8006482 <_strtod_l+0x56a>
 8006748:	4b0a      	ldr	r3, [pc, #40]	@ (8006774 <_strtod_l+0x85c>)
 800674a:	4650      	mov	r0, sl
 800674c:	4659      	mov	r1, fp
 800674e:	2200      	movs	r2, #0
 8006750:	f7f9 ff5a 	bl	8000608 <__aeabi_dmul>
 8006754:	4b08      	ldr	r3, [pc, #32]	@ (8006778 <_strtod_l+0x860>)
 8006756:	400b      	ands	r3, r1
 8006758:	4682      	mov	sl, r0
 800675a:	468b      	mov	fp, r1
 800675c:	2b00      	cmp	r3, #0
 800675e:	f47f ae05 	bne.w	800636c <_strtod_l+0x454>
 8006762:	9a05      	ldr	r2, [sp, #20]
 8006764:	2322      	movs	r3, #34	@ 0x22
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	e600      	b.n	800636c <_strtod_l+0x454>
 800676a:	bf00      	nop
 800676c:	0800cc98 	.word	0x0800cc98
 8006770:	fffffc02 	.word	0xfffffc02
 8006774:	39500000 	.word	0x39500000
 8006778:	7ff00000 	.word	0x7ff00000
 800677c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006780:	d165      	bne.n	800684e <_strtod_l+0x936>
 8006782:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006784:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006788:	b35a      	cbz	r2, 80067e2 <_strtod_l+0x8ca>
 800678a:	4a9f      	ldr	r2, [pc, #636]	@ (8006a08 <_strtod_l+0xaf0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d12b      	bne.n	80067e8 <_strtod_l+0x8d0>
 8006790:	9b08      	ldr	r3, [sp, #32]
 8006792:	4651      	mov	r1, sl
 8006794:	b303      	cbz	r3, 80067d8 <_strtod_l+0x8c0>
 8006796:	4b9d      	ldr	r3, [pc, #628]	@ (8006a0c <_strtod_l+0xaf4>)
 8006798:	465a      	mov	r2, fp
 800679a:	4013      	ands	r3, r2
 800679c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	d81b      	bhi.n	80067de <_strtod_l+0x8c6>
 80067a6:	0d1b      	lsrs	r3, r3, #20
 80067a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	4299      	cmp	r1, r3
 80067b2:	d119      	bne.n	80067e8 <_strtod_l+0x8d0>
 80067b4:	4b96      	ldr	r3, [pc, #600]	@ (8006a10 <_strtod_l+0xaf8>)
 80067b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d102      	bne.n	80067c2 <_strtod_l+0x8aa>
 80067bc:	3101      	adds	r1, #1
 80067be:	f43f adca 	beq.w	8006356 <_strtod_l+0x43e>
 80067c2:	4b92      	ldr	r3, [pc, #584]	@ (8006a0c <_strtod_l+0xaf4>)
 80067c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067c6:	401a      	ands	r2, r3
 80067c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80067cc:	f04f 0a00 	mov.w	sl, #0
 80067d0:	9b08      	ldr	r3, [sp, #32]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1b8      	bne.n	8006748 <_strtod_l+0x830>
 80067d6:	e5c9      	b.n	800636c <_strtod_l+0x454>
 80067d8:	f04f 33ff 	mov.w	r3, #4294967295
 80067dc:	e7e8      	b.n	80067b0 <_strtod_l+0x898>
 80067de:	4613      	mov	r3, r2
 80067e0:	e7e6      	b.n	80067b0 <_strtod_l+0x898>
 80067e2:	ea53 030a 	orrs.w	r3, r3, sl
 80067e6:	d0a1      	beq.n	800672c <_strtod_l+0x814>
 80067e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80067ea:	b1db      	cbz	r3, 8006824 <_strtod_l+0x90c>
 80067ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067ee:	4213      	tst	r3, r2
 80067f0:	d0ee      	beq.n	80067d0 <_strtod_l+0x8b8>
 80067f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067f4:	9a08      	ldr	r2, [sp, #32]
 80067f6:	4650      	mov	r0, sl
 80067f8:	4659      	mov	r1, fp
 80067fa:	b1bb      	cbz	r3, 800682c <_strtod_l+0x914>
 80067fc:	f7ff fb6b 	bl	8005ed6 <sulp>
 8006800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006804:	ec53 2b10 	vmov	r2, r3, d0
 8006808:	f7f9 fd48 	bl	800029c <__adddf3>
 800680c:	4682      	mov	sl, r0
 800680e:	468b      	mov	fp, r1
 8006810:	e7de      	b.n	80067d0 <_strtod_l+0x8b8>
 8006812:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006816:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800681a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800681e:	f04f 3aff 	mov.w	sl, #4294967295
 8006822:	e7d5      	b.n	80067d0 <_strtod_l+0x8b8>
 8006824:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006826:	ea13 0f0a 	tst.w	r3, sl
 800682a:	e7e1      	b.n	80067f0 <_strtod_l+0x8d8>
 800682c:	f7ff fb53 	bl	8005ed6 <sulp>
 8006830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006834:	ec53 2b10 	vmov	r2, r3, d0
 8006838:	f7f9 fd2e 	bl	8000298 <__aeabi_dsub>
 800683c:	2200      	movs	r2, #0
 800683e:	2300      	movs	r3, #0
 8006840:	4682      	mov	sl, r0
 8006842:	468b      	mov	fp, r1
 8006844:	f7fa f948 	bl	8000ad8 <__aeabi_dcmpeq>
 8006848:	2800      	cmp	r0, #0
 800684a:	d0c1      	beq.n	80067d0 <_strtod_l+0x8b8>
 800684c:	e619      	b.n	8006482 <_strtod_l+0x56a>
 800684e:	4641      	mov	r1, r8
 8006850:	4620      	mov	r0, r4
 8006852:	f003 f945 	bl	8009ae0 <__ratio>
 8006856:	ec57 6b10 	vmov	r6, r7, d0
 800685a:	2200      	movs	r2, #0
 800685c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006860:	4630      	mov	r0, r6
 8006862:	4639      	mov	r1, r7
 8006864:	f7fa f94c 	bl	8000b00 <__aeabi_dcmple>
 8006868:	2800      	cmp	r0, #0
 800686a:	d06f      	beq.n	800694c <_strtod_l+0xa34>
 800686c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800686e:	2b00      	cmp	r3, #0
 8006870:	d17a      	bne.n	8006968 <_strtod_l+0xa50>
 8006872:	f1ba 0f00 	cmp.w	sl, #0
 8006876:	d158      	bne.n	800692a <_strtod_l+0xa12>
 8006878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800687a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800687e:	2b00      	cmp	r3, #0
 8006880:	d15a      	bne.n	8006938 <_strtod_l+0xa20>
 8006882:	4b64      	ldr	r3, [pc, #400]	@ (8006a14 <_strtod_l+0xafc>)
 8006884:	2200      	movs	r2, #0
 8006886:	4630      	mov	r0, r6
 8006888:	4639      	mov	r1, r7
 800688a:	f7fa f92f 	bl	8000aec <__aeabi_dcmplt>
 800688e:	2800      	cmp	r0, #0
 8006890:	d159      	bne.n	8006946 <_strtod_l+0xa2e>
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	4b60      	ldr	r3, [pc, #384]	@ (8006a18 <_strtod_l+0xb00>)
 8006898:	2200      	movs	r2, #0
 800689a:	f7f9 feb5 	bl	8000608 <__aeabi_dmul>
 800689e:	4606      	mov	r6, r0
 80068a0:	460f      	mov	r7, r1
 80068a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80068a6:	9606      	str	r6, [sp, #24]
 80068a8:	9307      	str	r3, [sp, #28]
 80068aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068ae:	4d57      	ldr	r5, [pc, #348]	@ (8006a0c <_strtod_l+0xaf4>)
 80068b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80068b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068b6:	401d      	ands	r5, r3
 80068b8:	4b58      	ldr	r3, [pc, #352]	@ (8006a1c <_strtod_l+0xb04>)
 80068ba:	429d      	cmp	r5, r3
 80068bc:	f040 80b2 	bne.w	8006a24 <_strtod_l+0xb0c>
 80068c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80068c6:	ec4b ab10 	vmov	d0, sl, fp
 80068ca:	f003 f841 	bl	8009950 <__ulp>
 80068ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068d2:	ec51 0b10 	vmov	r0, r1, d0
 80068d6:	f7f9 fe97 	bl	8000608 <__aeabi_dmul>
 80068da:	4652      	mov	r2, sl
 80068dc:	465b      	mov	r3, fp
 80068de:	f7f9 fcdd 	bl	800029c <__adddf3>
 80068e2:	460b      	mov	r3, r1
 80068e4:	4949      	ldr	r1, [pc, #292]	@ (8006a0c <_strtod_l+0xaf4>)
 80068e6:	4a4e      	ldr	r2, [pc, #312]	@ (8006a20 <_strtod_l+0xb08>)
 80068e8:	4019      	ands	r1, r3
 80068ea:	4291      	cmp	r1, r2
 80068ec:	4682      	mov	sl, r0
 80068ee:	d942      	bls.n	8006976 <_strtod_l+0xa5e>
 80068f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068f2:	4b47      	ldr	r3, [pc, #284]	@ (8006a10 <_strtod_l+0xaf8>)
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d103      	bne.n	8006900 <_strtod_l+0x9e8>
 80068f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068fa:	3301      	adds	r3, #1
 80068fc:	f43f ad2b 	beq.w	8006356 <_strtod_l+0x43e>
 8006900:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006a10 <_strtod_l+0xaf8>
 8006904:	f04f 3aff 	mov.w	sl, #4294967295
 8006908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800690a:	9805      	ldr	r0, [sp, #20]
 800690c:	f002 fcec 	bl	80092e8 <_Bfree>
 8006910:	9805      	ldr	r0, [sp, #20]
 8006912:	4649      	mov	r1, r9
 8006914:	f002 fce8 	bl	80092e8 <_Bfree>
 8006918:	9805      	ldr	r0, [sp, #20]
 800691a:	4641      	mov	r1, r8
 800691c:	f002 fce4 	bl	80092e8 <_Bfree>
 8006920:	9805      	ldr	r0, [sp, #20]
 8006922:	4621      	mov	r1, r4
 8006924:	f002 fce0 	bl	80092e8 <_Bfree>
 8006928:	e618      	b.n	800655c <_strtod_l+0x644>
 800692a:	f1ba 0f01 	cmp.w	sl, #1
 800692e:	d103      	bne.n	8006938 <_strtod_l+0xa20>
 8006930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006932:	2b00      	cmp	r3, #0
 8006934:	f43f ada5 	beq.w	8006482 <_strtod_l+0x56a>
 8006938:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80069e8 <_strtod_l+0xad0>
 800693c:	4f35      	ldr	r7, [pc, #212]	@ (8006a14 <_strtod_l+0xafc>)
 800693e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006942:	2600      	movs	r6, #0
 8006944:	e7b1      	b.n	80068aa <_strtod_l+0x992>
 8006946:	4f34      	ldr	r7, [pc, #208]	@ (8006a18 <_strtod_l+0xb00>)
 8006948:	2600      	movs	r6, #0
 800694a:	e7aa      	b.n	80068a2 <_strtod_l+0x98a>
 800694c:	4b32      	ldr	r3, [pc, #200]	@ (8006a18 <_strtod_l+0xb00>)
 800694e:	4630      	mov	r0, r6
 8006950:	4639      	mov	r1, r7
 8006952:	2200      	movs	r2, #0
 8006954:	f7f9 fe58 	bl	8000608 <__aeabi_dmul>
 8006958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800695a:	4606      	mov	r6, r0
 800695c:	460f      	mov	r7, r1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d09f      	beq.n	80068a2 <_strtod_l+0x98a>
 8006962:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006966:	e7a0      	b.n	80068aa <_strtod_l+0x992>
 8006968:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80069f0 <_strtod_l+0xad8>
 800696c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006970:	ec57 6b17 	vmov	r6, r7, d7
 8006974:	e799      	b.n	80068aa <_strtod_l+0x992>
 8006976:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800697a:	9b08      	ldr	r3, [sp, #32]
 800697c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1c1      	bne.n	8006908 <_strtod_l+0x9f0>
 8006984:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006988:	0d1b      	lsrs	r3, r3, #20
 800698a:	051b      	lsls	r3, r3, #20
 800698c:	429d      	cmp	r5, r3
 800698e:	d1bb      	bne.n	8006908 <_strtod_l+0x9f0>
 8006990:	4630      	mov	r0, r6
 8006992:	4639      	mov	r1, r7
 8006994:	f7fa f998 	bl	8000cc8 <__aeabi_d2lz>
 8006998:	f7f9 fe08 	bl	80005ac <__aeabi_l2d>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7f9 fc78 	bl	8000298 <__aeabi_dsub>
 80069a8:	460b      	mov	r3, r1
 80069aa:	4602      	mov	r2, r0
 80069ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80069b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80069b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069b6:	ea46 060a 	orr.w	r6, r6, sl
 80069ba:	431e      	orrs	r6, r3
 80069bc:	d06f      	beq.n	8006a9e <_strtod_l+0xb86>
 80069be:	a30e      	add	r3, pc, #56	@ (adr r3, 80069f8 <_strtod_l+0xae0>)
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7fa f892 	bl	8000aec <__aeabi_dcmplt>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	f47f accf 	bne.w	800636c <_strtod_l+0x454>
 80069ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8006a00 <_strtod_l+0xae8>)
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069d8:	f7fa f8a6 	bl	8000b28 <__aeabi_dcmpgt>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d093      	beq.n	8006908 <_strtod_l+0x9f0>
 80069e0:	e4c4      	b.n	800636c <_strtod_l+0x454>
 80069e2:	bf00      	nop
 80069e4:	f3af 8000 	nop.w
 80069e8:	00000000 	.word	0x00000000
 80069ec:	bff00000 	.word	0xbff00000
 80069f0:	00000000 	.word	0x00000000
 80069f4:	3ff00000 	.word	0x3ff00000
 80069f8:	94a03595 	.word	0x94a03595
 80069fc:	3fdfffff 	.word	0x3fdfffff
 8006a00:	35afe535 	.word	0x35afe535
 8006a04:	3fe00000 	.word	0x3fe00000
 8006a08:	000fffff 	.word	0x000fffff
 8006a0c:	7ff00000 	.word	0x7ff00000
 8006a10:	7fefffff 	.word	0x7fefffff
 8006a14:	3ff00000 	.word	0x3ff00000
 8006a18:	3fe00000 	.word	0x3fe00000
 8006a1c:	7fe00000 	.word	0x7fe00000
 8006a20:	7c9fffff 	.word	0x7c9fffff
 8006a24:	9b08      	ldr	r3, [sp, #32]
 8006a26:	b323      	cbz	r3, 8006a72 <_strtod_l+0xb5a>
 8006a28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006a2c:	d821      	bhi.n	8006a72 <_strtod_l+0xb5a>
 8006a2e:	a328      	add	r3, pc, #160	@ (adr r3, 8006ad0 <_strtod_l+0xbb8>)
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	4630      	mov	r0, r6
 8006a36:	4639      	mov	r1, r7
 8006a38:	f7fa f862 	bl	8000b00 <__aeabi_dcmple>
 8006a3c:	b1a0      	cbz	r0, 8006a68 <_strtod_l+0xb50>
 8006a3e:	4639      	mov	r1, r7
 8006a40:	4630      	mov	r0, r6
 8006a42:	f7fa f8b9 	bl	8000bb8 <__aeabi_d2uiz>
 8006a46:	2801      	cmp	r0, #1
 8006a48:	bf38      	it	cc
 8006a4a:	2001      	movcc	r0, #1
 8006a4c:	f7f9 fd62 	bl	8000514 <__aeabi_ui2d>
 8006a50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a52:	4606      	mov	r6, r0
 8006a54:	460f      	mov	r7, r1
 8006a56:	b9fb      	cbnz	r3, 8006a98 <_strtod_l+0xb80>
 8006a58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8006a5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006a64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006a68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006a6e:	1b5b      	subs	r3, r3, r5
 8006a70:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006a7a:	f002 ff69 	bl	8009950 <__ulp>
 8006a7e:	4650      	mov	r0, sl
 8006a80:	ec53 2b10 	vmov	r2, r3, d0
 8006a84:	4659      	mov	r1, fp
 8006a86:	f7f9 fdbf 	bl	8000608 <__aeabi_dmul>
 8006a8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006a8e:	f7f9 fc05 	bl	800029c <__adddf3>
 8006a92:	4682      	mov	sl, r0
 8006a94:	468b      	mov	fp, r1
 8006a96:	e770      	b.n	800697a <_strtod_l+0xa62>
 8006a98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006a9c:	e7e0      	b.n	8006a60 <_strtod_l+0xb48>
 8006a9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ad8 <_strtod_l+0xbc0>)
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7fa f822 	bl	8000aec <__aeabi_dcmplt>
 8006aa8:	e798      	b.n	80069dc <_strtod_l+0xac4>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006ab0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	f7ff ba6d 	b.w	8005f92 <_strtod_l+0x7a>
 8006ab8:	2a65      	cmp	r2, #101	@ 0x65
 8006aba:	f43f ab66 	beq.w	800618a <_strtod_l+0x272>
 8006abe:	2a45      	cmp	r2, #69	@ 0x45
 8006ac0:	f43f ab63 	beq.w	800618a <_strtod_l+0x272>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f7ff bb9e 	b.w	8006206 <_strtod_l+0x2ee>
 8006aca:	bf00      	nop
 8006acc:	f3af 8000 	nop.w
 8006ad0:	ffc00000 	.word	0xffc00000
 8006ad4:	41dfffff 	.word	0x41dfffff
 8006ad8:	94a03595 	.word	0x94a03595
 8006adc:	3fcfffff 	.word	0x3fcfffff

08006ae0 <_strtod_r>:
 8006ae0:	4b01      	ldr	r3, [pc, #4]	@ (8006ae8 <_strtod_r+0x8>)
 8006ae2:	f7ff ba19 	b.w	8005f18 <_strtod_l>
 8006ae6:	bf00      	nop
 8006ae8:	20000068 	.word	0x20000068

08006aec <strtod>:
 8006aec:	460a      	mov	r2, r1
 8006aee:	4601      	mov	r1, r0
 8006af0:	4802      	ldr	r0, [pc, #8]	@ (8006afc <strtod+0x10>)
 8006af2:	4b03      	ldr	r3, [pc, #12]	@ (8006b00 <strtod+0x14>)
 8006af4:	6800      	ldr	r0, [r0, #0]
 8006af6:	f7ff ba0f 	b.w	8005f18 <_strtod_l>
 8006afa:	bf00      	nop
 8006afc:	200001d4 	.word	0x200001d4
 8006b00:	20000068 	.word	0x20000068

08006b04 <__cvt>:
 8006b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b08:	ec57 6b10 	vmov	r6, r7, d0
 8006b0c:	2f00      	cmp	r7, #0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	4619      	mov	r1, r3
 8006b12:	463b      	mov	r3, r7
 8006b14:	bfbb      	ittet	lt
 8006b16:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006b1a:	461f      	movlt	r7, r3
 8006b1c:	2300      	movge	r3, #0
 8006b1e:	232d      	movlt	r3, #45	@ 0x2d
 8006b20:	700b      	strb	r3, [r1, #0]
 8006b22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b24:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006b28:	4691      	mov	r9, r2
 8006b2a:	f023 0820 	bic.w	r8, r3, #32
 8006b2e:	bfbc      	itt	lt
 8006b30:	4632      	movlt	r2, r6
 8006b32:	4616      	movlt	r6, r2
 8006b34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b38:	d005      	beq.n	8006b46 <__cvt+0x42>
 8006b3a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b3e:	d100      	bne.n	8006b42 <__cvt+0x3e>
 8006b40:	3401      	adds	r4, #1
 8006b42:	2102      	movs	r1, #2
 8006b44:	e000      	b.n	8006b48 <__cvt+0x44>
 8006b46:	2103      	movs	r1, #3
 8006b48:	ab03      	add	r3, sp, #12
 8006b4a:	9301      	str	r3, [sp, #4]
 8006b4c:	ab02      	add	r3, sp, #8
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	ec47 6b10 	vmov	d0, r6, r7
 8006b54:	4653      	mov	r3, sl
 8006b56:	4622      	mov	r2, r4
 8006b58:	f001 f976 	bl	8007e48 <_dtoa_r>
 8006b5c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b60:	4605      	mov	r5, r0
 8006b62:	d119      	bne.n	8006b98 <__cvt+0x94>
 8006b64:	f019 0f01 	tst.w	r9, #1
 8006b68:	d00e      	beq.n	8006b88 <__cvt+0x84>
 8006b6a:	eb00 0904 	add.w	r9, r0, r4
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2300      	movs	r3, #0
 8006b72:	4630      	mov	r0, r6
 8006b74:	4639      	mov	r1, r7
 8006b76:	f7f9 ffaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b7a:	b108      	cbz	r0, 8006b80 <__cvt+0x7c>
 8006b7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b80:	2230      	movs	r2, #48	@ 0x30
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	454b      	cmp	r3, r9
 8006b86:	d31e      	bcc.n	8006bc6 <__cvt+0xc2>
 8006b88:	9b03      	ldr	r3, [sp, #12]
 8006b8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b8c:	1b5b      	subs	r3, r3, r5
 8006b8e:	4628      	mov	r0, r5
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	b004      	add	sp, #16
 8006b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b9c:	eb00 0904 	add.w	r9, r0, r4
 8006ba0:	d1e5      	bne.n	8006b6e <__cvt+0x6a>
 8006ba2:	7803      	ldrb	r3, [r0, #0]
 8006ba4:	2b30      	cmp	r3, #48	@ 0x30
 8006ba6:	d10a      	bne.n	8006bbe <__cvt+0xba>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	2300      	movs	r3, #0
 8006bac:	4630      	mov	r0, r6
 8006bae:	4639      	mov	r1, r7
 8006bb0:	f7f9 ff92 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bb4:	b918      	cbnz	r0, 8006bbe <__cvt+0xba>
 8006bb6:	f1c4 0401 	rsb	r4, r4, #1
 8006bba:	f8ca 4000 	str.w	r4, [sl]
 8006bbe:	f8da 3000 	ldr.w	r3, [sl]
 8006bc2:	4499      	add	r9, r3
 8006bc4:	e7d3      	b.n	8006b6e <__cvt+0x6a>
 8006bc6:	1c59      	adds	r1, r3, #1
 8006bc8:	9103      	str	r1, [sp, #12]
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	e7d9      	b.n	8006b82 <__cvt+0x7e>

08006bce <__exponent>:
 8006bce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bd0:	2900      	cmp	r1, #0
 8006bd2:	bfba      	itte	lt
 8006bd4:	4249      	neglt	r1, r1
 8006bd6:	232d      	movlt	r3, #45	@ 0x2d
 8006bd8:	232b      	movge	r3, #43	@ 0x2b
 8006bda:	2909      	cmp	r1, #9
 8006bdc:	7002      	strb	r2, [r0, #0]
 8006bde:	7043      	strb	r3, [r0, #1]
 8006be0:	dd29      	ble.n	8006c36 <__exponent+0x68>
 8006be2:	f10d 0307 	add.w	r3, sp, #7
 8006be6:	461d      	mov	r5, r3
 8006be8:	270a      	movs	r7, #10
 8006bea:	461a      	mov	r2, r3
 8006bec:	fbb1 f6f7 	udiv	r6, r1, r7
 8006bf0:	fb07 1416 	mls	r4, r7, r6, r1
 8006bf4:	3430      	adds	r4, #48	@ 0x30
 8006bf6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	2c63      	cmp	r4, #99	@ 0x63
 8006bfe:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c02:	4631      	mov	r1, r6
 8006c04:	dcf1      	bgt.n	8006bea <__exponent+0x1c>
 8006c06:	3130      	adds	r1, #48	@ 0x30
 8006c08:	1e94      	subs	r4, r2, #2
 8006c0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c0e:	1c41      	adds	r1, r0, #1
 8006c10:	4623      	mov	r3, r4
 8006c12:	42ab      	cmp	r3, r5
 8006c14:	d30a      	bcc.n	8006c2c <__exponent+0x5e>
 8006c16:	f10d 0309 	add.w	r3, sp, #9
 8006c1a:	1a9b      	subs	r3, r3, r2
 8006c1c:	42ac      	cmp	r4, r5
 8006c1e:	bf88      	it	hi
 8006c20:	2300      	movhi	r3, #0
 8006c22:	3302      	adds	r3, #2
 8006c24:	4403      	add	r3, r0
 8006c26:	1a18      	subs	r0, r3, r0
 8006c28:	b003      	add	sp, #12
 8006c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c2c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c30:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c34:	e7ed      	b.n	8006c12 <__exponent+0x44>
 8006c36:	2330      	movs	r3, #48	@ 0x30
 8006c38:	3130      	adds	r1, #48	@ 0x30
 8006c3a:	7083      	strb	r3, [r0, #2]
 8006c3c:	70c1      	strb	r1, [r0, #3]
 8006c3e:	1d03      	adds	r3, r0, #4
 8006c40:	e7f1      	b.n	8006c26 <__exponent+0x58>
	...

08006c44 <_printf_float>:
 8006c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	b08d      	sub	sp, #52	@ 0x34
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c50:	4616      	mov	r6, r2
 8006c52:	461f      	mov	r7, r3
 8006c54:	4605      	mov	r5, r0
 8006c56:	f000 ffbd 	bl	8007bd4 <_localeconv_r>
 8006c5a:	6803      	ldr	r3, [r0, #0]
 8006c5c:	9304      	str	r3, [sp, #16]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7f9 fb0e 	bl	8000280 <strlen>
 8006c64:	2300      	movs	r3, #0
 8006c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c68:	f8d8 3000 	ldr.w	r3, [r8]
 8006c6c:	9005      	str	r0, [sp, #20]
 8006c6e:	3307      	adds	r3, #7
 8006c70:	f023 0307 	bic.w	r3, r3, #7
 8006c74:	f103 0208 	add.w	r2, r3, #8
 8006c78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c7c:	f8d4 b000 	ldr.w	fp, [r4]
 8006c80:	f8c8 2000 	str.w	r2, [r8]
 8006c84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c8c:	9307      	str	r3, [sp, #28]
 8006c8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c9a:	4b9c      	ldr	r3, [pc, #624]	@ (8006f0c <_printf_float+0x2c8>)
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	f7f9 ff4c 	bl	8000b3c <__aeabi_dcmpun>
 8006ca4:	bb70      	cbnz	r0, 8006d04 <_printf_float+0xc0>
 8006ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006caa:	4b98      	ldr	r3, [pc, #608]	@ (8006f0c <_printf_float+0x2c8>)
 8006cac:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb0:	f7f9 ff26 	bl	8000b00 <__aeabi_dcmple>
 8006cb4:	bb30      	cbnz	r0, 8006d04 <_printf_float+0xc0>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4640      	mov	r0, r8
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	f7f9 ff15 	bl	8000aec <__aeabi_dcmplt>
 8006cc2:	b110      	cbz	r0, 8006cca <_printf_float+0x86>
 8006cc4:	232d      	movs	r3, #45	@ 0x2d
 8006cc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cca:	4a91      	ldr	r2, [pc, #580]	@ (8006f10 <_printf_float+0x2cc>)
 8006ccc:	4b91      	ldr	r3, [pc, #580]	@ (8006f14 <_printf_float+0x2d0>)
 8006cce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006cd2:	bf94      	ite	ls
 8006cd4:	4690      	movls	r8, r2
 8006cd6:	4698      	movhi	r8, r3
 8006cd8:	2303      	movs	r3, #3
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	f02b 0304 	bic.w	r3, fp, #4
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	f04f 0900 	mov.w	r9, #0
 8006ce6:	9700      	str	r7, [sp, #0]
 8006ce8:	4633      	mov	r3, r6
 8006cea:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006cec:	4621      	mov	r1, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 f9d2 	bl	8007098 <_printf_common>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f040 808d 	bne.w	8006e14 <_printf_float+0x1d0>
 8006cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfe:	b00d      	add	sp, #52	@ 0x34
 8006d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d04:	4642      	mov	r2, r8
 8006d06:	464b      	mov	r3, r9
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	f7f9 ff16 	bl	8000b3c <__aeabi_dcmpun>
 8006d10:	b140      	cbz	r0, 8006d24 <_printf_float+0xe0>
 8006d12:	464b      	mov	r3, r9
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	bfbc      	itt	lt
 8006d18:	232d      	movlt	r3, #45	@ 0x2d
 8006d1a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f18 <_printf_float+0x2d4>)
 8006d20:	4b7e      	ldr	r3, [pc, #504]	@ (8006f1c <_printf_float+0x2d8>)
 8006d22:	e7d4      	b.n	8006cce <_printf_float+0x8a>
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006d2a:	9206      	str	r2, [sp, #24]
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	d13b      	bne.n	8006da8 <_printf_float+0x164>
 8006d30:	2306      	movs	r3, #6
 8006d32:	6063      	str	r3, [r4, #4]
 8006d34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6022      	str	r2, [r4, #0]
 8006d3c:	9303      	str	r3, [sp, #12]
 8006d3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006d40:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006d44:	ab09      	add	r3, sp, #36	@ 0x24
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	6861      	ldr	r1, [r4, #4]
 8006d4a:	ec49 8b10 	vmov	d0, r8, r9
 8006d4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006d52:	4628      	mov	r0, r5
 8006d54:	f7ff fed6 	bl	8006b04 <__cvt>
 8006d58:	9b06      	ldr	r3, [sp, #24]
 8006d5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d5c:	2b47      	cmp	r3, #71	@ 0x47
 8006d5e:	4680      	mov	r8, r0
 8006d60:	d129      	bne.n	8006db6 <_printf_float+0x172>
 8006d62:	1cc8      	adds	r0, r1, #3
 8006d64:	db02      	blt.n	8006d6c <_printf_float+0x128>
 8006d66:	6863      	ldr	r3, [r4, #4]
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	dd41      	ble.n	8006df0 <_printf_float+0x1ac>
 8006d6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d70:	fa5f fa8a 	uxtb.w	sl, sl
 8006d74:	3901      	subs	r1, #1
 8006d76:	4652      	mov	r2, sl
 8006d78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d7e:	f7ff ff26 	bl	8006bce <__exponent>
 8006d82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d84:	1813      	adds	r3, r2, r0
 8006d86:	2a01      	cmp	r2, #1
 8006d88:	4681      	mov	r9, r0
 8006d8a:	6123      	str	r3, [r4, #16]
 8006d8c:	dc02      	bgt.n	8006d94 <_printf_float+0x150>
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	07d2      	lsls	r2, r2, #31
 8006d92:	d501      	bpl.n	8006d98 <_printf_float+0x154>
 8006d94:	3301      	adds	r3, #1
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0a2      	beq.n	8006ce6 <_printf_float+0xa2>
 8006da0:	232d      	movs	r3, #45	@ 0x2d
 8006da2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006da6:	e79e      	b.n	8006ce6 <_printf_float+0xa2>
 8006da8:	9a06      	ldr	r2, [sp, #24]
 8006daa:	2a47      	cmp	r2, #71	@ 0x47
 8006dac:	d1c2      	bne.n	8006d34 <_printf_float+0xf0>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1c0      	bne.n	8006d34 <_printf_float+0xf0>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e7bd      	b.n	8006d32 <_printf_float+0xee>
 8006db6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dba:	d9db      	bls.n	8006d74 <_printf_float+0x130>
 8006dbc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006dc0:	d118      	bne.n	8006df4 <_printf_float+0x1b0>
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	6863      	ldr	r3, [r4, #4]
 8006dc6:	dd0b      	ble.n	8006de0 <_printf_float+0x19c>
 8006dc8:	6121      	str	r1, [r4, #16]
 8006dca:	b913      	cbnz	r3, 8006dd2 <_printf_float+0x18e>
 8006dcc:	6822      	ldr	r2, [r4, #0]
 8006dce:	07d0      	lsls	r0, r2, #31
 8006dd0:	d502      	bpl.n	8006dd8 <_printf_float+0x194>
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	440b      	add	r3, r1
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006dda:	f04f 0900 	mov.w	r9, #0
 8006dde:	e7db      	b.n	8006d98 <_printf_float+0x154>
 8006de0:	b913      	cbnz	r3, 8006de8 <_printf_float+0x1a4>
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	07d2      	lsls	r2, r2, #31
 8006de6:	d501      	bpl.n	8006dec <_printf_float+0x1a8>
 8006de8:	3302      	adds	r3, #2
 8006dea:	e7f4      	b.n	8006dd6 <_printf_float+0x192>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e7f2      	b.n	8006dd6 <_printf_float+0x192>
 8006df0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006df6:	4299      	cmp	r1, r3
 8006df8:	db05      	blt.n	8006e06 <_printf_float+0x1c2>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	6121      	str	r1, [r4, #16]
 8006dfe:	07d8      	lsls	r0, r3, #31
 8006e00:	d5ea      	bpl.n	8006dd8 <_printf_float+0x194>
 8006e02:	1c4b      	adds	r3, r1, #1
 8006e04:	e7e7      	b.n	8006dd6 <_printf_float+0x192>
 8006e06:	2900      	cmp	r1, #0
 8006e08:	bfd4      	ite	le
 8006e0a:	f1c1 0202 	rsble	r2, r1, #2
 8006e0e:	2201      	movgt	r2, #1
 8006e10:	4413      	add	r3, r2
 8006e12:	e7e0      	b.n	8006dd6 <_printf_float+0x192>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	055a      	lsls	r2, r3, #21
 8006e18:	d407      	bmi.n	8006e2a <_printf_float+0x1e6>
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4628      	mov	r0, r5
 8006e22:	47b8      	blx	r7
 8006e24:	3001      	adds	r0, #1
 8006e26:	d12b      	bne.n	8006e80 <_printf_float+0x23c>
 8006e28:	e767      	b.n	8006cfa <_printf_float+0xb6>
 8006e2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e2e:	f240 80dd 	bls.w	8006fec <_printf_float+0x3a8>
 8006e32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e36:	2200      	movs	r2, #0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f7f9 fe4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d033      	beq.n	8006eaa <_printf_float+0x266>
 8006e42:	4a37      	ldr	r2, [pc, #220]	@ (8006f20 <_printf_float+0x2dc>)
 8006e44:	2301      	movs	r3, #1
 8006e46:	4631      	mov	r1, r6
 8006e48:	4628      	mov	r0, r5
 8006e4a:	47b8      	blx	r7
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	f43f af54 	beq.w	8006cfa <_printf_float+0xb6>
 8006e52:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006e56:	4543      	cmp	r3, r8
 8006e58:	db02      	blt.n	8006e60 <_printf_float+0x21c>
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	07d8      	lsls	r0, r3, #31
 8006e5e:	d50f      	bpl.n	8006e80 <_printf_float+0x23c>
 8006e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e64:	4631      	mov	r1, r6
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f af45 	beq.w	8006cfa <_printf_float+0xb6>
 8006e70:	f04f 0900 	mov.w	r9, #0
 8006e74:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e78:	f104 0a1a 	add.w	sl, r4, #26
 8006e7c:	45c8      	cmp	r8, r9
 8006e7e:	dc09      	bgt.n	8006e94 <_printf_float+0x250>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	079b      	lsls	r3, r3, #30
 8006e84:	f100 8103 	bmi.w	800708e <_printf_float+0x44a>
 8006e88:	68e0      	ldr	r0, [r4, #12]
 8006e8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e8c:	4298      	cmp	r0, r3
 8006e8e:	bfb8      	it	lt
 8006e90:	4618      	movlt	r0, r3
 8006e92:	e734      	b.n	8006cfe <_printf_float+0xba>
 8006e94:	2301      	movs	r3, #1
 8006e96:	4652      	mov	r2, sl
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	f43f af2b 	beq.w	8006cfa <_printf_float+0xb6>
 8006ea4:	f109 0901 	add.w	r9, r9, #1
 8006ea8:	e7e8      	b.n	8006e7c <_printf_float+0x238>
 8006eaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dc39      	bgt.n	8006f24 <_printf_float+0x2e0>
 8006eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f20 <_printf_float+0x2dc>)
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f43f af1d 	beq.w	8006cfa <_printf_float+0xb6>
 8006ec0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ec4:	ea59 0303 	orrs.w	r3, r9, r3
 8006ec8:	d102      	bne.n	8006ed0 <_printf_float+0x28c>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	07d9      	lsls	r1, r3, #31
 8006ece:	d5d7      	bpl.n	8006e80 <_printf_float+0x23c>
 8006ed0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	47b8      	blx	r7
 8006eda:	3001      	adds	r0, #1
 8006edc:	f43f af0d 	beq.w	8006cfa <_printf_float+0xb6>
 8006ee0:	f04f 0a00 	mov.w	sl, #0
 8006ee4:	f104 0b1a 	add.w	fp, r4, #26
 8006ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eea:	425b      	negs	r3, r3
 8006eec:	4553      	cmp	r3, sl
 8006eee:	dc01      	bgt.n	8006ef4 <_printf_float+0x2b0>
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	e793      	b.n	8006e1c <_printf_float+0x1d8>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	465a      	mov	r2, fp
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	f43f aefb 	beq.w	8006cfa <_printf_float+0xb6>
 8006f04:	f10a 0a01 	add.w	sl, sl, #1
 8006f08:	e7ee      	b.n	8006ee8 <_printf_float+0x2a4>
 8006f0a:	bf00      	nop
 8006f0c:	7fefffff 	.word	0x7fefffff
 8006f10:	0800ccc0 	.word	0x0800ccc0
 8006f14:	0800ccc4 	.word	0x0800ccc4
 8006f18:	0800ccc8 	.word	0x0800ccc8
 8006f1c:	0800cccc 	.word	0x0800cccc
 8006f20:	0800d100 	.word	0x0800d100
 8006f24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f2a:	4553      	cmp	r3, sl
 8006f2c:	bfa8      	it	ge
 8006f2e:	4653      	movge	r3, sl
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	4699      	mov	r9, r3
 8006f34:	dc36      	bgt.n	8006fa4 <_printf_float+0x360>
 8006f36:	f04f 0b00 	mov.w	fp, #0
 8006f3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f3e:	f104 021a 	add.w	r2, r4, #26
 8006f42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f44:	9306      	str	r3, [sp, #24]
 8006f46:	eba3 0309 	sub.w	r3, r3, r9
 8006f4a:	455b      	cmp	r3, fp
 8006f4c:	dc31      	bgt.n	8006fb2 <_printf_float+0x36e>
 8006f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f50:	459a      	cmp	sl, r3
 8006f52:	dc3a      	bgt.n	8006fca <_printf_float+0x386>
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	07da      	lsls	r2, r3, #31
 8006f58:	d437      	bmi.n	8006fca <_printf_float+0x386>
 8006f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f5c:	ebaa 0903 	sub.w	r9, sl, r3
 8006f60:	9b06      	ldr	r3, [sp, #24]
 8006f62:	ebaa 0303 	sub.w	r3, sl, r3
 8006f66:	4599      	cmp	r9, r3
 8006f68:	bfa8      	it	ge
 8006f6a:	4699      	movge	r9, r3
 8006f6c:	f1b9 0f00 	cmp.w	r9, #0
 8006f70:	dc33      	bgt.n	8006fda <_printf_float+0x396>
 8006f72:	f04f 0800 	mov.w	r8, #0
 8006f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f7a:	f104 0b1a 	add.w	fp, r4, #26
 8006f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f80:	ebaa 0303 	sub.w	r3, sl, r3
 8006f84:	eba3 0309 	sub.w	r3, r3, r9
 8006f88:	4543      	cmp	r3, r8
 8006f8a:	f77f af79 	ble.w	8006e80 <_printf_float+0x23c>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	465a      	mov	r2, fp
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	47b8      	blx	r7
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f43f aeae 	beq.w	8006cfa <_printf_float+0xb6>
 8006f9e:	f108 0801 	add.w	r8, r8, #1
 8006fa2:	e7ec      	b.n	8006f7e <_printf_float+0x33a>
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b8      	blx	r7
 8006fac:	3001      	adds	r0, #1
 8006fae:	d1c2      	bne.n	8006f36 <_printf_float+0x2f2>
 8006fb0:	e6a3      	b.n	8006cfa <_printf_float+0xb6>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	9206      	str	r2, [sp, #24]
 8006fba:	47b8      	blx	r7
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	f43f ae9c 	beq.w	8006cfa <_printf_float+0xb6>
 8006fc2:	9a06      	ldr	r2, [sp, #24]
 8006fc4:	f10b 0b01 	add.w	fp, fp, #1
 8006fc8:	e7bb      	b.n	8006f42 <_printf_float+0x2fe>
 8006fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b8      	blx	r7
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d1c0      	bne.n	8006f5a <_printf_float+0x316>
 8006fd8:	e68f      	b.n	8006cfa <_printf_float+0xb6>
 8006fda:	9a06      	ldr	r2, [sp, #24]
 8006fdc:	464b      	mov	r3, r9
 8006fde:	4442      	add	r2, r8
 8006fe0:	4631      	mov	r1, r6
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	47b8      	blx	r7
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	d1c3      	bne.n	8006f72 <_printf_float+0x32e>
 8006fea:	e686      	b.n	8006cfa <_printf_float+0xb6>
 8006fec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ff0:	f1ba 0f01 	cmp.w	sl, #1
 8006ff4:	dc01      	bgt.n	8006ffa <_printf_float+0x3b6>
 8006ff6:	07db      	lsls	r3, r3, #31
 8006ff8:	d536      	bpl.n	8007068 <_printf_float+0x424>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	f43f ae78 	beq.w	8006cfa <_printf_float+0xb6>
 800700a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800700e:	4631      	mov	r1, r6
 8007010:	4628      	mov	r0, r5
 8007012:	47b8      	blx	r7
 8007014:	3001      	adds	r0, #1
 8007016:	f43f ae70 	beq.w	8006cfa <_printf_float+0xb6>
 800701a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800701e:	2200      	movs	r2, #0
 8007020:	2300      	movs	r3, #0
 8007022:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007026:	f7f9 fd57 	bl	8000ad8 <__aeabi_dcmpeq>
 800702a:	b9c0      	cbnz	r0, 800705e <_printf_float+0x41a>
 800702c:	4653      	mov	r3, sl
 800702e:	f108 0201 	add.w	r2, r8, #1
 8007032:	4631      	mov	r1, r6
 8007034:	4628      	mov	r0, r5
 8007036:	47b8      	blx	r7
 8007038:	3001      	adds	r0, #1
 800703a:	d10c      	bne.n	8007056 <_printf_float+0x412>
 800703c:	e65d      	b.n	8006cfa <_printf_float+0xb6>
 800703e:	2301      	movs	r3, #1
 8007040:	465a      	mov	r2, fp
 8007042:	4631      	mov	r1, r6
 8007044:	4628      	mov	r0, r5
 8007046:	47b8      	blx	r7
 8007048:	3001      	adds	r0, #1
 800704a:	f43f ae56 	beq.w	8006cfa <_printf_float+0xb6>
 800704e:	f108 0801 	add.w	r8, r8, #1
 8007052:	45d0      	cmp	r8, sl
 8007054:	dbf3      	blt.n	800703e <_printf_float+0x3fa>
 8007056:	464b      	mov	r3, r9
 8007058:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800705c:	e6df      	b.n	8006e1e <_printf_float+0x1da>
 800705e:	f04f 0800 	mov.w	r8, #0
 8007062:	f104 0b1a 	add.w	fp, r4, #26
 8007066:	e7f4      	b.n	8007052 <_printf_float+0x40e>
 8007068:	2301      	movs	r3, #1
 800706a:	4642      	mov	r2, r8
 800706c:	e7e1      	b.n	8007032 <_printf_float+0x3ee>
 800706e:	2301      	movs	r3, #1
 8007070:	464a      	mov	r2, r9
 8007072:	4631      	mov	r1, r6
 8007074:	4628      	mov	r0, r5
 8007076:	47b8      	blx	r7
 8007078:	3001      	adds	r0, #1
 800707a:	f43f ae3e 	beq.w	8006cfa <_printf_float+0xb6>
 800707e:	f108 0801 	add.w	r8, r8, #1
 8007082:	68e3      	ldr	r3, [r4, #12]
 8007084:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007086:	1a5b      	subs	r3, r3, r1
 8007088:	4543      	cmp	r3, r8
 800708a:	dcf0      	bgt.n	800706e <_printf_float+0x42a>
 800708c:	e6fc      	b.n	8006e88 <_printf_float+0x244>
 800708e:	f04f 0800 	mov.w	r8, #0
 8007092:	f104 0919 	add.w	r9, r4, #25
 8007096:	e7f4      	b.n	8007082 <_printf_float+0x43e>

08007098 <_printf_common>:
 8007098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709c:	4616      	mov	r6, r2
 800709e:	4698      	mov	r8, r3
 80070a0:	688a      	ldr	r2, [r1, #8]
 80070a2:	690b      	ldr	r3, [r1, #16]
 80070a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070a8:	4293      	cmp	r3, r2
 80070aa:	bfb8      	it	lt
 80070ac:	4613      	movlt	r3, r2
 80070ae:	6033      	str	r3, [r6, #0]
 80070b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070b4:	4607      	mov	r7, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	b10a      	cbz	r2, 80070be <_printf_common+0x26>
 80070ba:	3301      	adds	r3, #1
 80070bc:	6033      	str	r3, [r6, #0]
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	0699      	lsls	r1, r3, #26
 80070c2:	bf42      	ittt	mi
 80070c4:	6833      	ldrmi	r3, [r6, #0]
 80070c6:	3302      	addmi	r3, #2
 80070c8:	6033      	strmi	r3, [r6, #0]
 80070ca:	6825      	ldr	r5, [r4, #0]
 80070cc:	f015 0506 	ands.w	r5, r5, #6
 80070d0:	d106      	bne.n	80070e0 <_printf_common+0x48>
 80070d2:	f104 0a19 	add.w	sl, r4, #25
 80070d6:	68e3      	ldr	r3, [r4, #12]
 80070d8:	6832      	ldr	r2, [r6, #0]
 80070da:	1a9b      	subs	r3, r3, r2
 80070dc:	42ab      	cmp	r3, r5
 80070de:	dc26      	bgt.n	800712e <_printf_common+0x96>
 80070e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070e4:	6822      	ldr	r2, [r4, #0]
 80070e6:	3b00      	subs	r3, #0
 80070e8:	bf18      	it	ne
 80070ea:	2301      	movne	r3, #1
 80070ec:	0692      	lsls	r2, r2, #26
 80070ee:	d42b      	bmi.n	8007148 <_printf_common+0xb0>
 80070f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070f4:	4641      	mov	r1, r8
 80070f6:	4638      	mov	r0, r7
 80070f8:	47c8      	blx	r9
 80070fa:	3001      	adds	r0, #1
 80070fc:	d01e      	beq.n	800713c <_printf_common+0xa4>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	6922      	ldr	r2, [r4, #16]
 8007102:	f003 0306 	and.w	r3, r3, #6
 8007106:	2b04      	cmp	r3, #4
 8007108:	bf02      	ittt	eq
 800710a:	68e5      	ldreq	r5, [r4, #12]
 800710c:	6833      	ldreq	r3, [r6, #0]
 800710e:	1aed      	subeq	r5, r5, r3
 8007110:	68a3      	ldr	r3, [r4, #8]
 8007112:	bf0c      	ite	eq
 8007114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007118:	2500      	movne	r5, #0
 800711a:	4293      	cmp	r3, r2
 800711c:	bfc4      	itt	gt
 800711e:	1a9b      	subgt	r3, r3, r2
 8007120:	18ed      	addgt	r5, r5, r3
 8007122:	2600      	movs	r6, #0
 8007124:	341a      	adds	r4, #26
 8007126:	42b5      	cmp	r5, r6
 8007128:	d11a      	bne.n	8007160 <_printf_common+0xc8>
 800712a:	2000      	movs	r0, #0
 800712c:	e008      	b.n	8007140 <_printf_common+0xa8>
 800712e:	2301      	movs	r3, #1
 8007130:	4652      	mov	r2, sl
 8007132:	4641      	mov	r1, r8
 8007134:	4638      	mov	r0, r7
 8007136:	47c8      	blx	r9
 8007138:	3001      	adds	r0, #1
 800713a:	d103      	bne.n	8007144 <_printf_common+0xac>
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007144:	3501      	adds	r5, #1
 8007146:	e7c6      	b.n	80070d6 <_printf_common+0x3e>
 8007148:	18e1      	adds	r1, r4, r3
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	2030      	movs	r0, #48	@ 0x30
 800714e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007152:	4422      	add	r2, r4
 8007154:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007158:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800715c:	3302      	adds	r3, #2
 800715e:	e7c7      	b.n	80070f0 <_printf_common+0x58>
 8007160:	2301      	movs	r3, #1
 8007162:	4622      	mov	r2, r4
 8007164:	4641      	mov	r1, r8
 8007166:	4638      	mov	r0, r7
 8007168:	47c8      	blx	r9
 800716a:	3001      	adds	r0, #1
 800716c:	d0e6      	beq.n	800713c <_printf_common+0xa4>
 800716e:	3601      	adds	r6, #1
 8007170:	e7d9      	b.n	8007126 <_printf_common+0x8e>
	...

08007174 <_printf_i>:
 8007174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007178:	7e0f      	ldrb	r7, [r1, #24]
 800717a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800717c:	2f78      	cmp	r7, #120	@ 0x78
 800717e:	4691      	mov	r9, r2
 8007180:	4680      	mov	r8, r0
 8007182:	460c      	mov	r4, r1
 8007184:	469a      	mov	sl, r3
 8007186:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800718a:	d807      	bhi.n	800719c <_printf_i+0x28>
 800718c:	2f62      	cmp	r7, #98	@ 0x62
 800718e:	d80a      	bhi.n	80071a6 <_printf_i+0x32>
 8007190:	2f00      	cmp	r7, #0
 8007192:	f000 80d2 	beq.w	800733a <_printf_i+0x1c6>
 8007196:	2f58      	cmp	r7, #88	@ 0x58
 8007198:	f000 80b9 	beq.w	800730e <_printf_i+0x19a>
 800719c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071a4:	e03a      	b.n	800721c <_printf_i+0xa8>
 80071a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071aa:	2b15      	cmp	r3, #21
 80071ac:	d8f6      	bhi.n	800719c <_printf_i+0x28>
 80071ae:	a101      	add	r1, pc, #4	@ (adr r1, 80071b4 <_printf_i+0x40>)
 80071b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071b4:	0800720d 	.word	0x0800720d
 80071b8:	08007221 	.word	0x08007221
 80071bc:	0800719d 	.word	0x0800719d
 80071c0:	0800719d 	.word	0x0800719d
 80071c4:	0800719d 	.word	0x0800719d
 80071c8:	0800719d 	.word	0x0800719d
 80071cc:	08007221 	.word	0x08007221
 80071d0:	0800719d 	.word	0x0800719d
 80071d4:	0800719d 	.word	0x0800719d
 80071d8:	0800719d 	.word	0x0800719d
 80071dc:	0800719d 	.word	0x0800719d
 80071e0:	08007321 	.word	0x08007321
 80071e4:	0800724b 	.word	0x0800724b
 80071e8:	080072db 	.word	0x080072db
 80071ec:	0800719d 	.word	0x0800719d
 80071f0:	0800719d 	.word	0x0800719d
 80071f4:	08007343 	.word	0x08007343
 80071f8:	0800719d 	.word	0x0800719d
 80071fc:	0800724b 	.word	0x0800724b
 8007200:	0800719d 	.word	0x0800719d
 8007204:	0800719d 	.word	0x0800719d
 8007208:	080072e3 	.word	0x080072e3
 800720c:	6833      	ldr	r3, [r6, #0]
 800720e:	1d1a      	adds	r2, r3, #4
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6032      	str	r2, [r6, #0]
 8007214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007218:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800721c:	2301      	movs	r3, #1
 800721e:	e09d      	b.n	800735c <_printf_i+0x1e8>
 8007220:	6833      	ldr	r3, [r6, #0]
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1d19      	adds	r1, r3, #4
 8007226:	6031      	str	r1, [r6, #0]
 8007228:	0606      	lsls	r6, r0, #24
 800722a:	d501      	bpl.n	8007230 <_printf_i+0xbc>
 800722c:	681d      	ldr	r5, [r3, #0]
 800722e:	e003      	b.n	8007238 <_printf_i+0xc4>
 8007230:	0645      	lsls	r5, r0, #25
 8007232:	d5fb      	bpl.n	800722c <_printf_i+0xb8>
 8007234:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007238:	2d00      	cmp	r5, #0
 800723a:	da03      	bge.n	8007244 <_printf_i+0xd0>
 800723c:	232d      	movs	r3, #45	@ 0x2d
 800723e:	426d      	negs	r5, r5
 8007240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007244:	4859      	ldr	r0, [pc, #356]	@ (80073ac <_printf_i+0x238>)
 8007246:	230a      	movs	r3, #10
 8007248:	e011      	b.n	800726e <_printf_i+0xfa>
 800724a:	6821      	ldr	r1, [r4, #0]
 800724c:	6833      	ldr	r3, [r6, #0]
 800724e:	0608      	lsls	r0, r1, #24
 8007250:	f853 5b04 	ldr.w	r5, [r3], #4
 8007254:	d402      	bmi.n	800725c <_printf_i+0xe8>
 8007256:	0649      	lsls	r1, r1, #25
 8007258:	bf48      	it	mi
 800725a:	b2ad      	uxthmi	r5, r5
 800725c:	2f6f      	cmp	r7, #111	@ 0x6f
 800725e:	4853      	ldr	r0, [pc, #332]	@ (80073ac <_printf_i+0x238>)
 8007260:	6033      	str	r3, [r6, #0]
 8007262:	bf14      	ite	ne
 8007264:	230a      	movne	r3, #10
 8007266:	2308      	moveq	r3, #8
 8007268:	2100      	movs	r1, #0
 800726a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800726e:	6866      	ldr	r6, [r4, #4]
 8007270:	60a6      	str	r6, [r4, #8]
 8007272:	2e00      	cmp	r6, #0
 8007274:	bfa2      	ittt	ge
 8007276:	6821      	ldrge	r1, [r4, #0]
 8007278:	f021 0104 	bicge.w	r1, r1, #4
 800727c:	6021      	strge	r1, [r4, #0]
 800727e:	b90d      	cbnz	r5, 8007284 <_printf_i+0x110>
 8007280:	2e00      	cmp	r6, #0
 8007282:	d04b      	beq.n	800731c <_printf_i+0x1a8>
 8007284:	4616      	mov	r6, r2
 8007286:	fbb5 f1f3 	udiv	r1, r5, r3
 800728a:	fb03 5711 	mls	r7, r3, r1, r5
 800728e:	5dc7      	ldrb	r7, [r0, r7]
 8007290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007294:	462f      	mov	r7, r5
 8007296:	42bb      	cmp	r3, r7
 8007298:	460d      	mov	r5, r1
 800729a:	d9f4      	bls.n	8007286 <_printf_i+0x112>
 800729c:	2b08      	cmp	r3, #8
 800729e:	d10b      	bne.n	80072b8 <_printf_i+0x144>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	07df      	lsls	r7, r3, #31
 80072a4:	d508      	bpl.n	80072b8 <_printf_i+0x144>
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	6861      	ldr	r1, [r4, #4]
 80072aa:	4299      	cmp	r1, r3
 80072ac:	bfde      	ittt	le
 80072ae:	2330      	movle	r3, #48	@ 0x30
 80072b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072b8:	1b92      	subs	r2, r2, r6
 80072ba:	6122      	str	r2, [r4, #16]
 80072bc:	f8cd a000 	str.w	sl, [sp]
 80072c0:	464b      	mov	r3, r9
 80072c2:	aa03      	add	r2, sp, #12
 80072c4:	4621      	mov	r1, r4
 80072c6:	4640      	mov	r0, r8
 80072c8:	f7ff fee6 	bl	8007098 <_printf_common>
 80072cc:	3001      	adds	r0, #1
 80072ce:	d14a      	bne.n	8007366 <_printf_i+0x1f2>
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
 80072d4:	b004      	add	sp, #16
 80072d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	f043 0320 	orr.w	r3, r3, #32
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	4833      	ldr	r0, [pc, #204]	@ (80073b0 <_printf_i+0x23c>)
 80072e4:	2778      	movs	r7, #120	@ 0x78
 80072e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	6831      	ldr	r1, [r6, #0]
 80072ee:	061f      	lsls	r7, r3, #24
 80072f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80072f4:	d402      	bmi.n	80072fc <_printf_i+0x188>
 80072f6:	065f      	lsls	r7, r3, #25
 80072f8:	bf48      	it	mi
 80072fa:	b2ad      	uxthmi	r5, r5
 80072fc:	6031      	str	r1, [r6, #0]
 80072fe:	07d9      	lsls	r1, r3, #31
 8007300:	bf44      	itt	mi
 8007302:	f043 0320 	orrmi.w	r3, r3, #32
 8007306:	6023      	strmi	r3, [r4, #0]
 8007308:	b11d      	cbz	r5, 8007312 <_printf_i+0x19e>
 800730a:	2310      	movs	r3, #16
 800730c:	e7ac      	b.n	8007268 <_printf_i+0xf4>
 800730e:	4827      	ldr	r0, [pc, #156]	@ (80073ac <_printf_i+0x238>)
 8007310:	e7e9      	b.n	80072e6 <_printf_i+0x172>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	f023 0320 	bic.w	r3, r3, #32
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	e7f6      	b.n	800730a <_printf_i+0x196>
 800731c:	4616      	mov	r6, r2
 800731e:	e7bd      	b.n	800729c <_printf_i+0x128>
 8007320:	6833      	ldr	r3, [r6, #0]
 8007322:	6825      	ldr	r5, [r4, #0]
 8007324:	6961      	ldr	r1, [r4, #20]
 8007326:	1d18      	adds	r0, r3, #4
 8007328:	6030      	str	r0, [r6, #0]
 800732a:	062e      	lsls	r6, r5, #24
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	d501      	bpl.n	8007334 <_printf_i+0x1c0>
 8007330:	6019      	str	r1, [r3, #0]
 8007332:	e002      	b.n	800733a <_printf_i+0x1c6>
 8007334:	0668      	lsls	r0, r5, #25
 8007336:	d5fb      	bpl.n	8007330 <_printf_i+0x1bc>
 8007338:	8019      	strh	r1, [r3, #0]
 800733a:	2300      	movs	r3, #0
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	4616      	mov	r6, r2
 8007340:	e7bc      	b.n	80072bc <_printf_i+0x148>
 8007342:	6833      	ldr	r3, [r6, #0]
 8007344:	1d1a      	adds	r2, r3, #4
 8007346:	6032      	str	r2, [r6, #0]
 8007348:	681e      	ldr	r6, [r3, #0]
 800734a:	6862      	ldr	r2, [r4, #4]
 800734c:	2100      	movs	r1, #0
 800734e:	4630      	mov	r0, r6
 8007350:	f7f8 ff46 	bl	80001e0 <memchr>
 8007354:	b108      	cbz	r0, 800735a <_printf_i+0x1e6>
 8007356:	1b80      	subs	r0, r0, r6
 8007358:	6060      	str	r0, [r4, #4]
 800735a:	6863      	ldr	r3, [r4, #4]
 800735c:	6123      	str	r3, [r4, #16]
 800735e:	2300      	movs	r3, #0
 8007360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007364:	e7aa      	b.n	80072bc <_printf_i+0x148>
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	4632      	mov	r2, r6
 800736a:	4649      	mov	r1, r9
 800736c:	4640      	mov	r0, r8
 800736e:	47d0      	blx	sl
 8007370:	3001      	adds	r0, #1
 8007372:	d0ad      	beq.n	80072d0 <_printf_i+0x15c>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	079b      	lsls	r3, r3, #30
 8007378:	d413      	bmi.n	80073a2 <_printf_i+0x22e>
 800737a:	68e0      	ldr	r0, [r4, #12]
 800737c:	9b03      	ldr	r3, [sp, #12]
 800737e:	4298      	cmp	r0, r3
 8007380:	bfb8      	it	lt
 8007382:	4618      	movlt	r0, r3
 8007384:	e7a6      	b.n	80072d4 <_printf_i+0x160>
 8007386:	2301      	movs	r3, #1
 8007388:	4632      	mov	r2, r6
 800738a:	4649      	mov	r1, r9
 800738c:	4640      	mov	r0, r8
 800738e:	47d0      	blx	sl
 8007390:	3001      	adds	r0, #1
 8007392:	d09d      	beq.n	80072d0 <_printf_i+0x15c>
 8007394:	3501      	adds	r5, #1
 8007396:	68e3      	ldr	r3, [r4, #12]
 8007398:	9903      	ldr	r1, [sp, #12]
 800739a:	1a5b      	subs	r3, r3, r1
 800739c:	42ab      	cmp	r3, r5
 800739e:	dcf2      	bgt.n	8007386 <_printf_i+0x212>
 80073a0:	e7eb      	b.n	800737a <_printf_i+0x206>
 80073a2:	2500      	movs	r5, #0
 80073a4:	f104 0619 	add.w	r6, r4, #25
 80073a8:	e7f5      	b.n	8007396 <_printf_i+0x222>
 80073aa:	bf00      	nop
 80073ac:	0800ccd0 	.word	0x0800ccd0
 80073b0:	0800cce1 	.word	0x0800cce1

080073b4 <_scanf_float>:
 80073b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	b087      	sub	sp, #28
 80073ba:	4617      	mov	r7, r2
 80073bc:	9303      	str	r3, [sp, #12]
 80073be:	688b      	ldr	r3, [r1, #8]
 80073c0:	1e5a      	subs	r2, r3, #1
 80073c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80073c6:	bf81      	itttt	hi
 80073c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80073cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80073d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80073d4:	608b      	strhi	r3, [r1, #8]
 80073d6:	680b      	ldr	r3, [r1, #0]
 80073d8:	460a      	mov	r2, r1
 80073da:	f04f 0500 	mov.w	r5, #0
 80073de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80073e2:	f842 3b1c 	str.w	r3, [r2], #28
 80073e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80073ea:	4680      	mov	r8, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	bf98      	it	ls
 80073f0:	f04f 0b00 	movls.w	fp, #0
 80073f4:	9201      	str	r2, [sp, #4]
 80073f6:	4616      	mov	r6, r2
 80073f8:	46aa      	mov	sl, r5
 80073fa:	46a9      	mov	r9, r5
 80073fc:	9502      	str	r5, [sp, #8]
 80073fe:	68a2      	ldr	r2, [r4, #8]
 8007400:	b152      	cbz	r2, 8007418 <_scanf_float+0x64>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b4e      	cmp	r3, #78	@ 0x4e
 8007408:	d864      	bhi.n	80074d4 <_scanf_float+0x120>
 800740a:	2b40      	cmp	r3, #64	@ 0x40
 800740c:	d83c      	bhi.n	8007488 <_scanf_float+0xd4>
 800740e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007412:	b2c8      	uxtb	r0, r1
 8007414:	280e      	cmp	r0, #14
 8007416:	d93a      	bls.n	800748e <_scanf_float+0xda>
 8007418:	f1b9 0f00 	cmp.w	r9, #0
 800741c:	d003      	beq.n	8007426 <_scanf_float+0x72>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	f10a 3aff 	add.w	sl, sl, #4294967295
 800742a:	f1ba 0f01 	cmp.w	sl, #1
 800742e:	f200 8117 	bhi.w	8007660 <_scanf_float+0x2ac>
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	429e      	cmp	r6, r3
 8007436:	f200 8108 	bhi.w	800764a <_scanf_float+0x296>
 800743a:	2001      	movs	r0, #1
 800743c:	b007      	add	sp, #28
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007446:	2a0d      	cmp	r2, #13
 8007448:	d8e6      	bhi.n	8007418 <_scanf_float+0x64>
 800744a:	a101      	add	r1, pc, #4	@ (adr r1, 8007450 <_scanf_float+0x9c>)
 800744c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007450:	08007597 	.word	0x08007597
 8007454:	08007419 	.word	0x08007419
 8007458:	08007419 	.word	0x08007419
 800745c:	08007419 	.word	0x08007419
 8007460:	080075f7 	.word	0x080075f7
 8007464:	080075cf 	.word	0x080075cf
 8007468:	08007419 	.word	0x08007419
 800746c:	08007419 	.word	0x08007419
 8007470:	080075a5 	.word	0x080075a5
 8007474:	08007419 	.word	0x08007419
 8007478:	08007419 	.word	0x08007419
 800747c:	08007419 	.word	0x08007419
 8007480:	08007419 	.word	0x08007419
 8007484:	0800755d 	.word	0x0800755d
 8007488:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800748c:	e7db      	b.n	8007446 <_scanf_float+0x92>
 800748e:	290e      	cmp	r1, #14
 8007490:	d8c2      	bhi.n	8007418 <_scanf_float+0x64>
 8007492:	a001      	add	r0, pc, #4	@ (adr r0, 8007498 <_scanf_float+0xe4>)
 8007494:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007498:	0800754d 	.word	0x0800754d
 800749c:	08007419 	.word	0x08007419
 80074a0:	0800754d 	.word	0x0800754d
 80074a4:	080075e3 	.word	0x080075e3
 80074a8:	08007419 	.word	0x08007419
 80074ac:	080074f5 	.word	0x080074f5
 80074b0:	08007533 	.word	0x08007533
 80074b4:	08007533 	.word	0x08007533
 80074b8:	08007533 	.word	0x08007533
 80074bc:	08007533 	.word	0x08007533
 80074c0:	08007533 	.word	0x08007533
 80074c4:	08007533 	.word	0x08007533
 80074c8:	08007533 	.word	0x08007533
 80074cc:	08007533 	.word	0x08007533
 80074d0:	08007533 	.word	0x08007533
 80074d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80074d6:	d809      	bhi.n	80074ec <_scanf_float+0x138>
 80074d8:	2b60      	cmp	r3, #96	@ 0x60
 80074da:	d8b2      	bhi.n	8007442 <_scanf_float+0x8e>
 80074dc:	2b54      	cmp	r3, #84	@ 0x54
 80074de:	d07b      	beq.n	80075d8 <_scanf_float+0x224>
 80074e0:	2b59      	cmp	r3, #89	@ 0x59
 80074e2:	d199      	bne.n	8007418 <_scanf_float+0x64>
 80074e4:	2d07      	cmp	r5, #7
 80074e6:	d197      	bne.n	8007418 <_scanf_float+0x64>
 80074e8:	2508      	movs	r5, #8
 80074ea:	e02c      	b.n	8007546 <_scanf_float+0x192>
 80074ec:	2b74      	cmp	r3, #116	@ 0x74
 80074ee:	d073      	beq.n	80075d8 <_scanf_float+0x224>
 80074f0:	2b79      	cmp	r3, #121	@ 0x79
 80074f2:	e7f6      	b.n	80074e2 <_scanf_float+0x12e>
 80074f4:	6821      	ldr	r1, [r4, #0]
 80074f6:	05c8      	lsls	r0, r1, #23
 80074f8:	d51b      	bpl.n	8007532 <_scanf_float+0x17e>
 80074fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80074fe:	6021      	str	r1, [r4, #0]
 8007500:	f109 0901 	add.w	r9, r9, #1
 8007504:	f1bb 0f00 	cmp.w	fp, #0
 8007508:	d003      	beq.n	8007512 <_scanf_float+0x15e>
 800750a:	3201      	adds	r2, #1
 800750c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007510:	60a2      	str	r2, [r4, #8]
 8007512:	68a3      	ldr	r3, [r4, #8]
 8007514:	3b01      	subs	r3, #1
 8007516:	60a3      	str	r3, [r4, #8]
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	3301      	adds	r3, #1
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3b01      	subs	r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	f340 8087 	ble.w	8007638 <_scanf_float+0x284>
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	3301      	adds	r3, #1
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	e765      	b.n	80073fe <_scanf_float+0x4a>
 8007532:	eb1a 0105 	adds.w	r1, sl, r5
 8007536:	f47f af6f 	bne.w	8007418 <_scanf_float+0x64>
 800753a:	6822      	ldr	r2, [r4, #0]
 800753c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007540:	6022      	str	r2, [r4, #0]
 8007542:	460d      	mov	r5, r1
 8007544:	468a      	mov	sl, r1
 8007546:	f806 3b01 	strb.w	r3, [r6], #1
 800754a:	e7e2      	b.n	8007512 <_scanf_float+0x15e>
 800754c:	6822      	ldr	r2, [r4, #0]
 800754e:	0610      	lsls	r0, r2, #24
 8007550:	f57f af62 	bpl.w	8007418 <_scanf_float+0x64>
 8007554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007558:	6022      	str	r2, [r4, #0]
 800755a:	e7f4      	b.n	8007546 <_scanf_float+0x192>
 800755c:	f1ba 0f00 	cmp.w	sl, #0
 8007560:	d10e      	bne.n	8007580 <_scanf_float+0x1cc>
 8007562:	f1b9 0f00 	cmp.w	r9, #0
 8007566:	d10e      	bne.n	8007586 <_scanf_float+0x1d2>
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800756e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007572:	d108      	bne.n	8007586 <_scanf_float+0x1d2>
 8007574:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007578:	6022      	str	r2, [r4, #0]
 800757a:	f04f 0a01 	mov.w	sl, #1
 800757e:	e7e2      	b.n	8007546 <_scanf_float+0x192>
 8007580:	f1ba 0f02 	cmp.w	sl, #2
 8007584:	d055      	beq.n	8007632 <_scanf_float+0x27e>
 8007586:	2d01      	cmp	r5, #1
 8007588:	d002      	beq.n	8007590 <_scanf_float+0x1dc>
 800758a:	2d04      	cmp	r5, #4
 800758c:	f47f af44 	bne.w	8007418 <_scanf_float+0x64>
 8007590:	3501      	adds	r5, #1
 8007592:	b2ed      	uxtb	r5, r5
 8007594:	e7d7      	b.n	8007546 <_scanf_float+0x192>
 8007596:	f1ba 0f01 	cmp.w	sl, #1
 800759a:	f47f af3d 	bne.w	8007418 <_scanf_float+0x64>
 800759e:	f04f 0a02 	mov.w	sl, #2
 80075a2:	e7d0      	b.n	8007546 <_scanf_float+0x192>
 80075a4:	b97d      	cbnz	r5, 80075c6 <_scanf_float+0x212>
 80075a6:	f1b9 0f00 	cmp.w	r9, #0
 80075aa:	f47f af38 	bne.w	800741e <_scanf_float+0x6a>
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80075b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80075b8:	f040 8108 	bne.w	80077cc <_scanf_float+0x418>
 80075bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80075c0:	6022      	str	r2, [r4, #0]
 80075c2:	2501      	movs	r5, #1
 80075c4:	e7bf      	b.n	8007546 <_scanf_float+0x192>
 80075c6:	2d03      	cmp	r5, #3
 80075c8:	d0e2      	beq.n	8007590 <_scanf_float+0x1dc>
 80075ca:	2d05      	cmp	r5, #5
 80075cc:	e7de      	b.n	800758c <_scanf_float+0x1d8>
 80075ce:	2d02      	cmp	r5, #2
 80075d0:	f47f af22 	bne.w	8007418 <_scanf_float+0x64>
 80075d4:	2503      	movs	r5, #3
 80075d6:	e7b6      	b.n	8007546 <_scanf_float+0x192>
 80075d8:	2d06      	cmp	r5, #6
 80075da:	f47f af1d 	bne.w	8007418 <_scanf_float+0x64>
 80075de:	2507      	movs	r5, #7
 80075e0:	e7b1      	b.n	8007546 <_scanf_float+0x192>
 80075e2:	6822      	ldr	r2, [r4, #0]
 80075e4:	0591      	lsls	r1, r2, #22
 80075e6:	f57f af17 	bpl.w	8007418 <_scanf_float+0x64>
 80075ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80075ee:	6022      	str	r2, [r4, #0]
 80075f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80075f4:	e7a7      	b.n	8007546 <_scanf_float+0x192>
 80075f6:	6822      	ldr	r2, [r4, #0]
 80075f8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80075fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007600:	d006      	beq.n	8007610 <_scanf_float+0x25c>
 8007602:	0550      	lsls	r0, r2, #21
 8007604:	f57f af08 	bpl.w	8007418 <_scanf_float+0x64>
 8007608:	f1b9 0f00 	cmp.w	r9, #0
 800760c:	f000 80de 	beq.w	80077cc <_scanf_float+0x418>
 8007610:	0591      	lsls	r1, r2, #22
 8007612:	bf58      	it	pl
 8007614:	9902      	ldrpl	r1, [sp, #8]
 8007616:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800761a:	bf58      	it	pl
 800761c:	eba9 0101 	subpl.w	r1, r9, r1
 8007620:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007624:	bf58      	it	pl
 8007626:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800762a:	6022      	str	r2, [r4, #0]
 800762c:	f04f 0900 	mov.w	r9, #0
 8007630:	e789      	b.n	8007546 <_scanf_float+0x192>
 8007632:	f04f 0a03 	mov.w	sl, #3
 8007636:	e786      	b.n	8007546 <_scanf_float+0x192>
 8007638:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800763c:	4639      	mov	r1, r7
 800763e:	4640      	mov	r0, r8
 8007640:	4798      	blx	r3
 8007642:	2800      	cmp	r0, #0
 8007644:	f43f aedb 	beq.w	80073fe <_scanf_float+0x4a>
 8007648:	e6e6      	b.n	8007418 <_scanf_float+0x64>
 800764a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800764e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007652:	463a      	mov	r2, r7
 8007654:	4640      	mov	r0, r8
 8007656:	4798      	blx	r3
 8007658:	6923      	ldr	r3, [r4, #16]
 800765a:	3b01      	subs	r3, #1
 800765c:	6123      	str	r3, [r4, #16]
 800765e:	e6e8      	b.n	8007432 <_scanf_float+0x7e>
 8007660:	1e6b      	subs	r3, r5, #1
 8007662:	2b06      	cmp	r3, #6
 8007664:	d824      	bhi.n	80076b0 <_scanf_float+0x2fc>
 8007666:	2d02      	cmp	r5, #2
 8007668:	d836      	bhi.n	80076d8 <_scanf_float+0x324>
 800766a:	9b01      	ldr	r3, [sp, #4]
 800766c:	429e      	cmp	r6, r3
 800766e:	f67f aee4 	bls.w	800743a <_scanf_float+0x86>
 8007672:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007676:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800767a:	463a      	mov	r2, r7
 800767c:	4640      	mov	r0, r8
 800767e:	4798      	blx	r3
 8007680:	6923      	ldr	r3, [r4, #16]
 8007682:	3b01      	subs	r3, #1
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	e7f0      	b.n	800766a <_scanf_float+0x2b6>
 8007688:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800768c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007690:	463a      	mov	r2, r7
 8007692:	4640      	mov	r0, r8
 8007694:	4798      	blx	r3
 8007696:	6923      	ldr	r3, [r4, #16]
 8007698:	3b01      	subs	r3, #1
 800769a:	6123      	str	r3, [r4, #16]
 800769c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076a0:	fa5f fa8a 	uxtb.w	sl, sl
 80076a4:	f1ba 0f02 	cmp.w	sl, #2
 80076a8:	d1ee      	bne.n	8007688 <_scanf_float+0x2d4>
 80076aa:	3d03      	subs	r5, #3
 80076ac:	b2ed      	uxtb	r5, r5
 80076ae:	1b76      	subs	r6, r6, r5
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	05da      	lsls	r2, r3, #23
 80076b4:	d530      	bpl.n	8007718 <_scanf_float+0x364>
 80076b6:	055b      	lsls	r3, r3, #21
 80076b8:	d511      	bpl.n	80076de <_scanf_float+0x32a>
 80076ba:	9b01      	ldr	r3, [sp, #4]
 80076bc:	429e      	cmp	r6, r3
 80076be:	f67f aebc 	bls.w	800743a <_scanf_float+0x86>
 80076c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076ca:	463a      	mov	r2, r7
 80076cc:	4640      	mov	r0, r8
 80076ce:	4798      	blx	r3
 80076d0:	6923      	ldr	r3, [r4, #16]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	6123      	str	r3, [r4, #16]
 80076d6:	e7f0      	b.n	80076ba <_scanf_float+0x306>
 80076d8:	46aa      	mov	sl, r5
 80076da:	46b3      	mov	fp, r6
 80076dc:	e7de      	b.n	800769c <_scanf_float+0x2e8>
 80076de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	2965      	cmp	r1, #101	@ 0x65
 80076e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80076ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80076ee:	6123      	str	r3, [r4, #16]
 80076f0:	d00c      	beq.n	800770c <_scanf_float+0x358>
 80076f2:	2945      	cmp	r1, #69	@ 0x45
 80076f4:	d00a      	beq.n	800770c <_scanf_float+0x358>
 80076f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076fa:	463a      	mov	r2, r7
 80076fc:	4640      	mov	r0, r8
 80076fe:	4798      	blx	r3
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007706:	3b01      	subs	r3, #1
 8007708:	1eb5      	subs	r5, r6, #2
 800770a:	6123      	str	r3, [r4, #16]
 800770c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007710:	463a      	mov	r2, r7
 8007712:	4640      	mov	r0, r8
 8007714:	4798      	blx	r3
 8007716:	462e      	mov	r6, r5
 8007718:	6822      	ldr	r2, [r4, #0]
 800771a:	f012 0210 	ands.w	r2, r2, #16
 800771e:	d001      	beq.n	8007724 <_scanf_float+0x370>
 8007720:	2000      	movs	r0, #0
 8007722:	e68b      	b.n	800743c <_scanf_float+0x88>
 8007724:	7032      	strb	r2, [r6, #0]
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800772c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007730:	d11c      	bne.n	800776c <_scanf_float+0x3b8>
 8007732:	9b02      	ldr	r3, [sp, #8]
 8007734:	454b      	cmp	r3, r9
 8007736:	eba3 0209 	sub.w	r2, r3, r9
 800773a:	d123      	bne.n	8007784 <_scanf_float+0x3d0>
 800773c:	9901      	ldr	r1, [sp, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	4640      	mov	r0, r8
 8007742:	f7ff f9cd 	bl	8006ae0 <_strtod_r>
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	6821      	ldr	r1, [r4, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f011 0f02 	tst.w	r1, #2
 8007750:	ec57 6b10 	vmov	r6, r7, d0
 8007754:	f103 0204 	add.w	r2, r3, #4
 8007758:	d01f      	beq.n	800779a <_scanf_float+0x3e6>
 800775a:	9903      	ldr	r1, [sp, #12]
 800775c:	600a      	str	r2, [r1, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	e9c3 6700 	strd	r6, r7, [r3]
 8007764:	68e3      	ldr	r3, [r4, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60e3      	str	r3, [r4, #12]
 800776a:	e7d9      	b.n	8007720 <_scanf_float+0x36c>
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d0e4      	beq.n	800773c <_scanf_float+0x388>
 8007772:	9905      	ldr	r1, [sp, #20]
 8007774:	230a      	movs	r3, #10
 8007776:	3101      	adds	r1, #1
 8007778:	4640      	mov	r0, r8
 800777a:	f002 faa1 	bl	8009cc0 <_strtol_r>
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	9e05      	ldr	r6, [sp, #20]
 8007782:	1ac2      	subs	r2, r0, r3
 8007784:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007788:	429e      	cmp	r6, r3
 800778a:	bf28      	it	cs
 800778c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007790:	4910      	ldr	r1, [pc, #64]	@ (80077d4 <_scanf_float+0x420>)
 8007792:	4630      	mov	r0, r6
 8007794:	f000 f918 	bl	80079c8 <siprintf>
 8007798:	e7d0      	b.n	800773c <_scanf_float+0x388>
 800779a:	f011 0f04 	tst.w	r1, #4
 800779e:	9903      	ldr	r1, [sp, #12]
 80077a0:	600a      	str	r2, [r1, #0]
 80077a2:	d1dc      	bne.n	800775e <_scanf_float+0x3aa>
 80077a4:	681d      	ldr	r5, [r3, #0]
 80077a6:	4632      	mov	r2, r6
 80077a8:	463b      	mov	r3, r7
 80077aa:	4630      	mov	r0, r6
 80077ac:	4639      	mov	r1, r7
 80077ae:	f7f9 f9c5 	bl	8000b3c <__aeabi_dcmpun>
 80077b2:	b128      	cbz	r0, 80077c0 <_scanf_float+0x40c>
 80077b4:	4808      	ldr	r0, [pc, #32]	@ (80077d8 <_scanf_float+0x424>)
 80077b6:	f000 fa9b 	bl	8007cf0 <nanf>
 80077ba:	ed85 0a00 	vstr	s0, [r5]
 80077be:	e7d1      	b.n	8007764 <_scanf_float+0x3b0>
 80077c0:	4630      	mov	r0, r6
 80077c2:	4639      	mov	r1, r7
 80077c4:	f7f9 fa18 	bl	8000bf8 <__aeabi_d2f>
 80077c8:	6028      	str	r0, [r5, #0]
 80077ca:	e7cb      	b.n	8007764 <_scanf_float+0x3b0>
 80077cc:	f04f 0900 	mov.w	r9, #0
 80077d0:	e629      	b.n	8007426 <_scanf_float+0x72>
 80077d2:	bf00      	nop
 80077d4:	0800ccf2 	.word	0x0800ccf2
 80077d8:	0800cdab 	.word	0x0800cdab

080077dc <std>:
 80077dc:	2300      	movs	r3, #0
 80077de:	b510      	push	{r4, lr}
 80077e0:	4604      	mov	r4, r0
 80077e2:	e9c0 3300 	strd	r3, r3, [r0]
 80077e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ea:	6083      	str	r3, [r0, #8]
 80077ec:	8181      	strh	r1, [r0, #12]
 80077ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80077f0:	81c2      	strh	r2, [r0, #14]
 80077f2:	6183      	str	r3, [r0, #24]
 80077f4:	4619      	mov	r1, r3
 80077f6:	2208      	movs	r2, #8
 80077f8:	305c      	adds	r0, #92	@ 0x5c
 80077fa:	f000 f974 	bl	8007ae6 <memset>
 80077fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <std+0x58>)
 8007800:	6263      	str	r3, [r4, #36]	@ 0x24
 8007802:	4b0d      	ldr	r3, [pc, #52]	@ (8007838 <std+0x5c>)
 8007804:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007806:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <std+0x60>)
 8007808:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <std+0x64>)
 800780c:	6323      	str	r3, [r4, #48]	@ 0x30
 800780e:	4b0d      	ldr	r3, [pc, #52]	@ (8007844 <std+0x68>)
 8007810:	6224      	str	r4, [r4, #32]
 8007812:	429c      	cmp	r4, r3
 8007814:	d006      	beq.n	8007824 <std+0x48>
 8007816:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800781a:	4294      	cmp	r4, r2
 800781c:	d002      	beq.n	8007824 <std+0x48>
 800781e:	33d0      	adds	r3, #208	@ 0xd0
 8007820:	429c      	cmp	r4, r3
 8007822:	d105      	bne.n	8007830 <std+0x54>
 8007824:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800782c:	f000 ba46 	b.w	8007cbc <__retarget_lock_init_recursive>
 8007830:	bd10      	pop	{r4, pc}
 8007832:	bf00      	nop
 8007834:	08007a5d 	.word	0x08007a5d
 8007838:	08007a83 	.word	0x08007a83
 800783c:	08007abb 	.word	0x08007abb
 8007840:	08007adf 	.word	0x08007adf
 8007844:	20000834 	.word	0x20000834

08007848 <stdio_exit_handler>:
 8007848:	4a02      	ldr	r2, [pc, #8]	@ (8007854 <stdio_exit_handler+0xc>)
 800784a:	4903      	ldr	r1, [pc, #12]	@ (8007858 <stdio_exit_handler+0x10>)
 800784c:	4803      	ldr	r0, [pc, #12]	@ (800785c <stdio_exit_handler+0x14>)
 800784e:	f000 b869 	b.w	8007924 <_fwalk_sglue>
 8007852:	bf00      	nop
 8007854:	2000005c 	.word	0x2000005c
 8007858:	0800a6c9 	.word	0x0800a6c9
 800785c:	200001d8 	.word	0x200001d8

08007860 <cleanup_stdio>:
 8007860:	6841      	ldr	r1, [r0, #4]
 8007862:	4b0c      	ldr	r3, [pc, #48]	@ (8007894 <cleanup_stdio+0x34>)
 8007864:	4299      	cmp	r1, r3
 8007866:	b510      	push	{r4, lr}
 8007868:	4604      	mov	r4, r0
 800786a:	d001      	beq.n	8007870 <cleanup_stdio+0x10>
 800786c:	f002 ff2c 	bl	800a6c8 <_fflush_r>
 8007870:	68a1      	ldr	r1, [r4, #8]
 8007872:	4b09      	ldr	r3, [pc, #36]	@ (8007898 <cleanup_stdio+0x38>)
 8007874:	4299      	cmp	r1, r3
 8007876:	d002      	beq.n	800787e <cleanup_stdio+0x1e>
 8007878:	4620      	mov	r0, r4
 800787a:	f002 ff25 	bl	800a6c8 <_fflush_r>
 800787e:	68e1      	ldr	r1, [r4, #12]
 8007880:	4b06      	ldr	r3, [pc, #24]	@ (800789c <cleanup_stdio+0x3c>)
 8007882:	4299      	cmp	r1, r3
 8007884:	d004      	beq.n	8007890 <cleanup_stdio+0x30>
 8007886:	4620      	mov	r0, r4
 8007888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800788c:	f002 bf1c 	b.w	800a6c8 <_fflush_r>
 8007890:	bd10      	pop	{r4, pc}
 8007892:	bf00      	nop
 8007894:	20000834 	.word	0x20000834
 8007898:	2000089c 	.word	0x2000089c
 800789c:	20000904 	.word	0x20000904

080078a0 <global_stdio_init.part.0>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4b0b      	ldr	r3, [pc, #44]	@ (80078d0 <global_stdio_init.part.0+0x30>)
 80078a4:	4c0b      	ldr	r4, [pc, #44]	@ (80078d4 <global_stdio_init.part.0+0x34>)
 80078a6:	4a0c      	ldr	r2, [pc, #48]	@ (80078d8 <global_stdio_init.part.0+0x38>)
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	4620      	mov	r0, r4
 80078ac:	2200      	movs	r2, #0
 80078ae:	2104      	movs	r1, #4
 80078b0:	f7ff ff94 	bl	80077dc <std>
 80078b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078b8:	2201      	movs	r2, #1
 80078ba:	2109      	movs	r1, #9
 80078bc:	f7ff ff8e 	bl	80077dc <std>
 80078c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078c4:	2202      	movs	r2, #2
 80078c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ca:	2112      	movs	r1, #18
 80078cc:	f7ff bf86 	b.w	80077dc <std>
 80078d0:	2000096c 	.word	0x2000096c
 80078d4:	20000834 	.word	0x20000834
 80078d8:	08007849 	.word	0x08007849

080078dc <__sfp_lock_acquire>:
 80078dc:	4801      	ldr	r0, [pc, #4]	@ (80078e4 <__sfp_lock_acquire+0x8>)
 80078de:	f000 b9ee 	b.w	8007cbe <__retarget_lock_acquire_recursive>
 80078e2:	bf00      	nop
 80078e4:	20000975 	.word	0x20000975

080078e8 <__sfp_lock_release>:
 80078e8:	4801      	ldr	r0, [pc, #4]	@ (80078f0 <__sfp_lock_release+0x8>)
 80078ea:	f000 b9e9 	b.w	8007cc0 <__retarget_lock_release_recursive>
 80078ee:	bf00      	nop
 80078f0:	20000975 	.word	0x20000975

080078f4 <__sinit>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	4604      	mov	r4, r0
 80078f8:	f7ff fff0 	bl	80078dc <__sfp_lock_acquire>
 80078fc:	6a23      	ldr	r3, [r4, #32]
 80078fe:	b11b      	cbz	r3, 8007908 <__sinit+0x14>
 8007900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007904:	f7ff bff0 	b.w	80078e8 <__sfp_lock_release>
 8007908:	4b04      	ldr	r3, [pc, #16]	@ (800791c <__sinit+0x28>)
 800790a:	6223      	str	r3, [r4, #32]
 800790c:	4b04      	ldr	r3, [pc, #16]	@ (8007920 <__sinit+0x2c>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1f5      	bne.n	8007900 <__sinit+0xc>
 8007914:	f7ff ffc4 	bl	80078a0 <global_stdio_init.part.0>
 8007918:	e7f2      	b.n	8007900 <__sinit+0xc>
 800791a:	bf00      	nop
 800791c:	08007861 	.word	0x08007861
 8007920:	2000096c 	.word	0x2000096c

08007924 <_fwalk_sglue>:
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	4607      	mov	r7, r0
 800792a:	4688      	mov	r8, r1
 800792c:	4614      	mov	r4, r2
 800792e:	2600      	movs	r6, #0
 8007930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007934:	f1b9 0901 	subs.w	r9, r9, #1
 8007938:	d505      	bpl.n	8007946 <_fwalk_sglue+0x22>
 800793a:	6824      	ldr	r4, [r4, #0]
 800793c:	2c00      	cmp	r4, #0
 800793e:	d1f7      	bne.n	8007930 <_fwalk_sglue+0xc>
 8007940:	4630      	mov	r0, r6
 8007942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d907      	bls.n	800795c <_fwalk_sglue+0x38>
 800794c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007950:	3301      	adds	r3, #1
 8007952:	d003      	beq.n	800795c <_fwalk_sglue+0x38>
 8007954:	4629      	mov	r1, r5
 8007956:	4638      	mov	r0, r7
 8007958:	47c0      	blx	r8
 800795a:	4306      	orrs	r6, r0
 800795c:	3568      	adds	r5, #104	@ 0x68
 800795e:	e7e9      	b.n	8007934 <_fwalk_sglue+0x10>

08007960 <sniprintf>:
 8007960:	b40c      	push	{r2, r3}
 8007962:	b530      	push	{r4, r5, lr}
 8007964:	4b17      	ldr	r3, [pc, #92]	@ (80079c4 <sniprintf+0x64>)
 8007966:	1e0c      	subs	r4, r1, #0
 8007968:	681d      	ldr	r5, [r3, #0]
 800796a:	b09d      	sub	sp, #116	@ 0x74
 800796c:	da08      	bge.n	8007980 <sniprintf+0x20>
 800796e:	238b      	movs	r3, #139	@ 0x8b
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	f04f 30ff 	mov.w	r0, #4294967295
 8007976:	b01d      	add	sp, #116	@ 0x74
 8007978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800797c:	b002      	add	sp, #8
 800797e:	4770      	bx	lr
 8007980:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007984:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007988:	bf14      	ite	ne
 800798a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800798e:	4623      	moveq	r3, r4
 8007990:	9304      	str	r3, [sp, #16]
 8007992:	9307      	str	r3, [sp, #28]
 8007994:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007998:	9002      	str	r0, [sp, #8]
 800799a:	9006      	str	r0, [sp, #24]
 800799c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80079a2:	ab21      	add	r3, sp, #132	@ 0x84
 80079a4:	a902      	add	r1, sp, #8
 80079a6:	4628      	mov	r0, r5
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	f002 f9f3 	bl	8009d94 <_svfiprintf_r>
 80079ae:	1c43      	adds	r3, r0, #1
 80079b0:	bfbc      	itt	lt
 80079b2:	238b      	movlt	r3, #139	@ 0x8b
 80079b4:	602b      	strlt	r3, [r5, #0]
 80079b6:	2c00      	cmp	r4, #0
 80079b8:	d0dd      	beq.n	8007976 <sniprintf+0x16>
 80079ba:	9b02      	ldr	r3, [sp, #8]
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
 80079c0:	e7d9      	b.n	8007976 <sniprintf+0x16>
 80079c2:	bf00      	nop
 80079c4:	200001d4 	.word	0x200001d4

080079c8 <siprintf>:
 80079c8:	b40e      	push	{r1, r2, r3}
 80079ca:	b500      	push	{lr}
 80079cc:	b09c      	sub	sp, #112	@ 0x70
 80079ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80079d0:	9002      	str	r0, [sp, #8]
 80079d2:	9006      	str	r0, [sp, #24]
 80079d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079d8:	4809      	ldr	r0, [pc, #36]	@ (8007a00 <siprintf+0x38>)
 80079da:	9107      	str	r1, [sp, #28]
 80079dc:	9104      	str	r1, [sp, #16]
 80079de:	4909      	ldr	r1, [pc, #36]	@ (8007a04 <siprintf+0x3c>)
 80079e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079e4:	9105      	str	r1, [sp, #20]
 80079e6:	6800      	ldr	r0, [r0, #0]
 80079e8:	9301      	str	r3, [sp, #4]
 80079ea:	a902      	add	r1, sp, #8
 80079ec:	f002 f9d2 	bl	8009d94 <_svfiprintf_r>
 80079f0:	9b02      	ldr	r3, [sp, #8]
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	b01c      	add	sp, #112	@ 0x70
 80079f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079fc:	b003      	add	sp, #12
 80079fe:	4770      	bx	lr
 8007a00:	200001d4 	.word	0x200001d4
 8007a04:	ffff0208 	.word	0xffff0208

08007a08 <siscanf>:
 8007a08:	b40e      	push	{r1, r2, r3}
 8007a0a:	b530      	push	{r4, r5, lr}
 8007a0c:	b09c      	sub	sp, #112	@ 0x70
 8007a0e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007a10:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007a14:	f854 5b04 	ldr.w	r5, [r4], #4
 8007a18:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007a1c:	9002      	str	r0, [sp, #8]
 8007a1e:	9006      	str	r0, [sp, #24]
 8007a20:	f7f8 fc2e 	bl	8000280 <strlen>
 8007a24:	4b0b      	ldr	r3, [pc, #44]	@ (8007a54 <siscanf+0x4c>)
 8007a26:	9003      	str	r0, [sp, #12]
 8007a28:	9007      	str	r0, [sp, #28]
 8007a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a2c:	480a      	ldr	r0, [pc, #40]	@ (8007a58 <siscanf+0x50>)
 8007a2e:	9401      	str	r4, [sp, #4]
 8007a30:	2300      	movs	r3, #0
 8007a32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a34:	9314      	str	r3, [sp, #80]	@ 0x50
 8007a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007a3a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a3e:	462a      	mov	r2, r5
 8007a40:	4623      	mov	r3, r4
 8007a42:	a902      	add	r1, sp, #8
 8007a44:	6800      	ldr	r0, [r0, #0]
 8007a46:	f002 faf9 	bl	800a03c <__ssvfiscanf_r>
 8007a4a:	b01c      	add	sp, #112	@ 0x70
 8007a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a50:	b003      	add	sp, #12
 8007a52:	4770      	bx	lr
 8007a54:	08007a7f 	.word	0x08007a7f
 8007a58:	200001d4 	.word	0x200001d4

08007a5c <__sread>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	460c      	mov	r4, r1
 8007a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a64:	f000 f8dc 	bl	8007c20 <_read_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	bfab      	itete	ge
 8007a6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a70:	181b      	addge	r3, r3, r0
 8007a72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a76:	bfac      	ite	ge
 8007a78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a7a:	81a3      	strhlt	r3, [r4, #12]
 8007a7c:	bd10      	pop	{r4, pc}

08007a7e <__seofread>:
 8007a7e:	2000      	movs	r0, #0
 8007a80:	4770      	bx	lr

08007a82 <__swrite>:
 8007a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a86:	461f      	mov	r7, r3
 8007a88:	898b      	ldrh	r3, [r1, #12]
 8007a8a:	05db      	lsls	r3, r3, #23
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	4616      	mov	r6, r2
 8007a92:	d505      	bpl.n	8007aa0 <__swrite+0x1e>
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	2302      	movs	r3, #2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f000 f8ae 	bl	8007bfc <_lseek_r>
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	f000 b8c5 	b.w	8007c44 <_write_r>

08007aba <__sseek>:
 8007aba:	b510      	push	{r4, lr}
 8007abc:	460c      	mov	r4, r1
 8007abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac2:	f000 f89b 	bl	8007bfc <_lseek_r>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	bf15      	itete	ne
 8007acc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ace:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ad2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ad6:	81a3      	strheq	r3, [r4, #12]
 8007ad8:	bf18      	it	ne
 8007ada:	81a3      	strhne	r3, [r4, #12]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__sclose>:
 8007ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae2:	f000 b87b 	b.w	8007bdc <_close_r>

08007ae6 <memset>:
 8007ae6:	4402      	add	r2, r0
 8007ae8:	4603      	mov	r3, r0
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d100      	bne.n	8007af0 <memset+0xa>
 8007aee:	4770      	bx	lr
 8007af0:	f803 1b01 	strb.w	r1, [r3], #1
 8007af4:	e7f9      	b.n	8007aea <memset+0x4>

08007af6 <strncmp>:
 8007af6:	b510      	push	{r4, lr}
 8007af8:	b16a      	cbz	r2, 8007b16 <strncmp+0x20>
 8007afa:	3901      	subs	r1, #1
 8007afc:	1884      	adds	r4, r0, r2
 8007afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d103      	bne.n	8007b12 <strncmp+0x1c>
 8007b0a:	42a0      	cmp	r0, r4
 8007b0c:	d001      	beq.n	8007b12 <strncmp+0x1c>
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	d1f5      	bne.n	8007afe <strncmp+0x8>
 8007b12:	1ad0      	subs	r0, r2, r3
 8007b14:	bd10      	pop	{r4, pc}
 8007b16:	4610      	mov	r0, r2
 8007b18:	e7fc      	b.n	8007b14 <strncmp+0x1e>
	...

08007b1c <strtok>:
 8007b1c:	4b16      	ldr	r3, [pc, #88]	@ (8007b78 <strtok+0x5c>)
 8007b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b22:	681f      	ldr	r7, [r3, #0]
 8007b24:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007b26:	4605      	mov	r5, r0
 8007b28:	460e      	mov	r6, r1
 8007b2a:	b9ec      	cbnz	r4, 8007b68 <strtok+0x4c>
 8007b2c:	2050      	movs	r0, #80	@ 0x50
 8007b2e:	f001 fad3 	bl	80090d8 <malloc>
 8007b32:	4602      	mov	r2, r0
 8007b34:	6478      	str	r0, [r7, #68]	@ 0x44
 8007b36:	b920      	cbnz	r0, 8007b42 <strtok+0x26>
 8007b38:	4b10      	ldr	r3, [pc, #64]	@ (8007b7c <strtok+0x60>)
 8007b3a:	4811      	ldr	r0, [pc, #68]	@ (8007b80 <strtok+0x64>)
 8007b3c:	215b      	movs	r1, #91	@ 0x5b
 8007b3e:	f000 f8dd 	bl	8007cfc <__assert_func>
 8007b42:	e9c0 4400 	strd	r4, r4, [r0]
 8007b46:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007b4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007b4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007b52:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007b56:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007b5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007b5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007b62:	6184      	str	r4, [r0, #24]
 8007b64:	7704      	strb	r4, [r0, #28]
 8007b66:	6244      	str	r4, [r0, #36]	@ 0x24
 8007b68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b74:	f000 b806 	b.w	8007b84 <__strtok_r>
 8007b78:	200001d4 	.word	0x200001d4
 8007b7c:	0800ccf7 	.word	0x0800ccf7
 8007b80:	0800cd0e 	.word	0x0800cd0e

08007b84 <__strtok_r>:
 8007b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b86:	4604      	mov	r4, r0
 8007b88:	b908      	cbnz	r0, 8007b8e <__strtok_r+0xa>
 8007b8a:	6814      	ldr	r4, [r2, #0]
 8007b8c:	b144      	cbz	r4, 8007ba0 <__strtok_r+0x1c>
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007b94:	460f      	mov	r7, r1
 8007b96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007b9a:	b91e      	cbnz	r6, 8007ba4 <__strtok_r+0x20>
 8007b9c:	b965      	cbnz	r5, 8007bb8 <__strtok_r+0x34>
 8007b9e:	6015      	str	r5, [r2, #0]
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	e005      	b.n	8007bb0 <__strtok_r+0x2c>
 8007ba4:	42b5      	cmp	r5, r6
 8007ba6:	d1f6      	bne.n	8007b96 <__strtok_r+0x12>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1f0      	bne.n	8007b8e <__strtok_r+0xa>
 8007bac:	6014      	str	r4, [r2, #0]
 8007bae:	7003      	strb	r3, [r0, #0]
 8007bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb2:	461c      	mov	r4, r3
 8007bb4:	e00c      	b.n	8007bd0 <__strtok_r+0x4c>
 8007bb6:	b915      	cbnz	r5, 8007bbe <__strtok_r+0x3a>
 8007bb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007bbc:	460e      	mov	r6, r1
 8007bbe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007bc2:	42ab      	cmp	r3, r5
 8007bc4:	d1f7      	bne.n	8007bb6 <__strtok_r+0x32>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0f3      	beq.n	8007bb2 <__strtok_r+0x2e>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007bd0:	6014      	str	r4, [r2, #0]
 8007bd2:	e7ed      	b.n	8007bb0 <__strtok_r+0x2c>

08007bd4 <_localeconv_r>:
 8007bd4:	4800      	ldr	r0, [pc, #0]	@ (8007bd8 <_localeconv_r+0x4>)
 8007bd6:	4770      	bx	lr
 8007bd8:	20000158 	.word	0x20000158

08007bdc <_close_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	4d06      	ldr	r5, [pc, #24]	@ (8007bf8 <_close_r+0x1c>)
 8007be0:	2300      	movs	r3, #0
 8007be2:	4604      	mov	r4, r0
 8007be4:	4608      	mov	r0, r1
 8007be6:	602b      	str	r3, [r5, #0]
 8007be8:	f7fa fbd6 	bl	8002398 <_close>
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	d102      	bne.n	8007bf6 <_close_r+0x1a>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b103      	cbz	r3, 8007bf6 <_close_r+0x1a>
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	20000970 	.word	0x20000970

08007bfc <_lseek_r>:
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4d07      	ldr	r5, [pc, #28]	@ (8007c1c <_lseek_r+0x20>)
 8007c00:	4604      	mov	r4, r0
 8007c02:	4608      	mov	r0, r1
 8007c04:	4611      	mov	r1, r2
 8007c06:	2200      	movs	r2, #0
 8007c08:	602a      	str	r2, [r5, #0]
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	f7fa fbeb 	bl	80023e6 <_lseek>
 8007c10:	1c43      	adds	r3, r0, #1
 8007c12:	d102      	bne.n	8007c1a <_lseek_r+0x1e>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b103      	cbz	r3, 8007c1a <_lseek_r+0x1e>
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	bd38      	pop	{r3, r4, r5, pc}
 8007c1c:	20000970 	.word	0x20000970

08007c20 <_read_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d07      	ldr	r5, [pc, #28]	@ (8007c40 <_read_r+0x20>)
 8007c24:	4604      	mov	r4, r0
 8007c26:	4608      	mov	r0, r1
 8007c28:	4611      	mov	r1, r2
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	602a      	str	r2, [r5, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f7fa fb79 	bl	8002326 <_read>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d102      	bne.n	8007c3e <_read_r+0x1e>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	b103      	cbz	r3, 8007c3e <_read_r+0x1e>
 8007c3c:	6023      	str	r3, [r4, #0]
 8007c3e:	bd38      	pop	{r3, r4, r5, pc}
 8007c40:	20000970 	.word	0x20000970

08007c44 <_write_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d07      	ldr	r5, [pc, #28]	@ (8007c64 <_write_r+0x20>)
 8007c48:	4604      	mov	r4, r0
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	2200      	movs	r2, #0
 8007c50:	602a      	str	r2, [r5, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f7fa fb84 	bl	8002360 <_write>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_write_r+0x1e>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_write_r+0x1e>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	20000970 	.word	0x20000970

08007c68 <__errno>:
 8007c68:	4b01      	ldr	r3, [pc, #4]	@ (8007c70 <__errno+0x8>)
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	200001d4 	.word	0x200001d4

08007c74 <__libc_init_array>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	4d0d      	ldr	r5, [pc, #52]	@ (8007cac <__libc_init_array+0x38>)
 8007c78:	4c0d      	ldr	r4, [pc, #52]	@ (8007cb0 <__libc_init_array+0x3c>)
 8007c7a:	1b64      	subs	r4, r4, r5
 8007c7c:	10a4      	asrs	r4, r4, #2
 8007c7e:	2600      	movs	r6, #0
 8007c80:	42a6      	cmp	r6, r4
 8007c82:	d109      	bne.n	8007c98 <__libc_init_array+0x24>
 8007c84:	4d0b      	ldr	r5, [pc, #44]	@ (8007cb4 <__libc_init_array+0x40>)
 8007c86:	4c0c      	ldr	r4, [pc, #48]	@ (8007cb8 <__libc_init_array+0x44>)
 8007c88:	f004 ff5a 	bl	800cb40 <_init>
 8007c8c:	1b64      	subs	r4, r4, r5
 8007c8e:	10a4      	asrs	r4, r4, #2
 8007c90:	2600      	movs	r6, #0
 8007c92:	42a6      	cmp	r6, r4
 8007c94:	d105      	bne.n	8007ca2 <__libc_init_array+0x2e>
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9c:	4798      	blx	r3
 8007c9e:	3601      	adds	r6, #1
 8007ca0:	e7ee      	b.n	8007c80 <__libc_init_array+0xc>
 8007ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca6:	4798      	blx	r3
 8007ca8:	3601      	adds	r6, #1
 8007caa:	e7f2      	b.n	8007c92 <__libc_init_array+0x1e>
 8007cac:	0800d158 	.word	0x0800d158
 8007cb0:	0800d158 	.word	0x0800d158
 8007cb4:	0800d158 	.word	0x0800d158
 8007cb8:	0800d15c 	.word	0x0800d15c

08007cbc <__retarget_lock_init_recursive>:
 8007cbc:	4770      	bx	lr

08007cbe <__retarget_lock_acquire_recursive>:
 8007cbe:	4770      	bx	lr

08007cc0 <__retarget_lock_release_recursive>:
 8007cc0:	4770      	bx	lr

08007cc2 <memcpy>:
 8007cc2:	440a      	add	r2, r1
 8007cc4:	4291      	cmp	r1, r2
 8007cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cca:	d100      	bne.n	8007cce <memcpy+0xc>
 8007ccc:	4770      	bx	lr
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cd8:	4291      	cmp	r1, r2
 8007cda:	d1f9      	bne.n	8007cd0 <memcpy+0xe>
 8007cdc:	bd10      	pop	{r4, pc}
	...

08007ce0 <nan>:
 8007ce0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007ce8 <nan+0x8>
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	00000000 	.word	0x00000000
 8007cec:	7ff80000 	.word	0x7ff80000

08007cf0 <nanf>:
 8007cf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007cf8 <nanf+0x8>
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	7fc00000 	.word	0x7fc00000

08007cfc <__assert_func>:
 8007cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cfe:	4614      	mov	r4, r2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4b09      	ldr	r3, [pc, #36]	@ (8007d28 <__assert_func+0x2c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4605      	mov	r5, r0
 8007d08:	68d8      	ldr	r0, [r3, #12]
 8007d0a:	b954      	cbnz	r4, 8007d22 <__assert_func+0x26>
 8007d0c:	4b07      	ldr	r3, [pc, #28]	@ (8007d2c <__assert_func+0x30>)
 8007d0e:	461c      	mov	r4, r3
 8007d10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d14:	9100      	str	r1, [sp, #0]
 8007d16:	462b      	mov	r3, r5
 8007d18:	4905      	ldr	r1, [pc, #20]	@ (8007d30 <__assert_func+0x34>)
 8007d1a:	f002 fcfd 	bl	800a718 <fiprintf>
 8007d1e:	f002 fdab 	bl	800a878 <abort>
 8007d22:	4b04      	ldr	r3, [pc, #16]	@ (8007d34 <__assert_func+0x38>)
 8007d24:	e7f4      	b.n	8007d10 <__assert_func+0x14>
 8007d26:	bf00      	nop
 8007d28:	200001d4 	.word	0x200001d4
 8007d2c:	0800cdab 	.word	0x0800cdab
 8007d30:	0800cd7d 	.word	0x0800cd7d
 8007d34:	0800cd70 	.word	0x0800cd70

08007d38 <quorem>:
 8007d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	6903      	ldr	r3, [r0, #16]
 8007d3e:	690c      	ldr	r4, [r1, #16]
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	4607      	mov	r7, r0
 8007d44:	db7e      	blt.n	8007e44 <quorem+0x10c>
 8007d46:	3c01      	subs	r4, #1
 8007d48:	f101 0814 	add.w	r8, r1, #20
 8007d4c:	00a3      	lsls	r3, r4, #2
 8007d4e:	f100 0514 	add.w	r5, r0, #20
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d62:	3301      	adds	r3, #1
 8007d64:	429a      	cmp	r2, r3
 8007d66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d6e:	d32e      	bcc.n	8007dce <quorem+0x96>
 8007d70:	f04f 0a00 	mov.w	sl, #0
 8007d74:	46c4      	mov	ip, r8
 8007d76:	46ae      	mov	lr, r5
 8007d78:	46d3      	mov	fp, sl
 8007d7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d7e:	b298      	uxth	r0, r3
 8007d80:	fb06 a000 	mla	r0, r6, r0, sl
 8007d84:	0c02      	lsrs	r2, r0, #16
 8007d86:	0c1b      	lsrs	r3, r3, #16
 8007d88:	fb06 2303 	mla	r3, r6, r3, r2
 8007d8c:	f8de 2000 	ldr.w	r2, [lr]
 8007d90:	b280      	uxth	r0, r0
 8007d92:	b292      	uxth	r2, r2
 8007d94:	1a12      	subs	r2, r2, r0
 8007d96:	445a      	add	r2, fp
 8007d98:	f8de 0000 	ldr.w	r0, [lr]
 8007d9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007da6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007daa:	b292      	uxth	r2, r2
 8007dac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007db0:	45e1      	cmp	r9, ip
 8007db2:	f84e 2b04 	str.w	r2, [lr], #4
 8007db6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007dba:	d2de      	bcs.n	8007d7a <quorem+0x42>
 8007dbc:	9b00      	ldr	r3, [sp, #0]
 8007dbe:	58eb      	ldr	r3, [r5, r3]
 8007dc0:	b92b      	cbnz	r3, 8007dce <quorem+0x96>
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	3b04      	subs	r3, #4
 8007dc6:	429d      	cmp	r5, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	d32f      	bcc.n	8007e2c <quorem+0xf4>
 8007dcc:	613c      	str	r4, [r7, #16]
 8007dce:	4638      	mov	r0, r7
 8007dd0:	f001 fd0e 	bl	80097f0 <__mcmp>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	db25      	blt.n	8007e24 <quorem+0xec>
 8007dd8:	4629      	mov	r1, r5
 8007dda:	2000      	movs	r0, #0
 8007ddc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007de0:	f8d1 c000 	ldr.w	ip, [r1]
 8007de4:	fa1f fe82 	uxth.w	lr, r2
 8007de8:	fa1f f38c 	uxth.w	r3, ip
 8007dec:	eba3 030e 	sub.w	r3, r3, lr
 8007df0:	4403      	add	r3, r0
 8007df2:	0c12      	lsrs	r2, r2, #16
 8007df4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007df8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e02:	45c1      	cmp	r9, r8
 8007e04:	f841 3b04 	str.w	r3, [r1], #4
 8007e08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e0c:	d2e6      	bcs.n	8007ddc <quorem+0xa4>
 8007e0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e16:	b922      	cbnz	r2, 8007e22 <quorem+0xea>
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	429d      	cmp	r5, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	d30b      	bcc.n	8007e38 <quorem+0x100>
 8007e20:	613c      	str	r4, [r7, #16]
 8007e22:	3601      	adds	r6, #1
 8007e24:	4630      	mov	r0, r6
 8007e26:	b003      	add	sp, #12
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	6812      	ldr	r2, [r2, #0]
 8007e2e:	3b04      	subs	r3, #4
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	d1cb      	bne.n	8007dcc <quorem+0x94>
 8007e34:	3c01      	subs	r4, #1
 8007e36:	e7c6      	b.n	8007dc6 <quorem+0x8e>
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	3b04      	subs	r3, #4
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	d1ef      	bne.n	8007e20 <quorem+0xe8>
 8007e40:	3c01      	subs	r4, #1
 8007e42:	e7ea      	b.n	8007e1a <quorem+0xe2>
 8007e44:	2000      	movs	r0, #0
 8007e46:	e7ee      	b.n	8007e26 <quorem+0xee>

08007e48 <_dtoa_r>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	69c7      	ldr	r7, [r0, #28]
 8007e4e:	b099      	sub	sp, #100	@ 0x64
 8007e50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e54:	ec55 4b10 	vmov	r4, r5, d0
 8007e58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e5c:	4683      	mov	fp, r0
 8007e5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e62:	b97f      	cbnz	r7, 8007e84 <_dtoa_r+0x3c>
 8007e64:	2010      	movs	r0, #16
 8007e66:	f001 f937 	bl	80090d8 <malloc>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007e70:	b920      	cbnz	r0, 8007e7c <_dtoa_r+0x34>
 8007e72:	4ba7      	ldr	r3, [pc, #668]	@ (8008110 <_dtoa_r+0x2c8>)
 8007e74:	21ef      	movs	r1, #239	@ 0xef
 8007e76:	48a7      	ldr	r0, [pc, #668]	@ (8008114 <_dtoa_r+0x2cc>)
 8007e78:	f7ff ff40 	bl	8007cfc <__assert_func>
 8007e7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e80:	6007      	str	r7, [r0, #0]
 8007e82:	60c7      	str	r7, [r0, #12]
 8007e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e88:	6819      	ldr	r1, [r3, #0]
 8007e8a:	b159      	cbz	r1, 8007ea4 <_dtoa_r+0x5c>
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	604a      	str	r2, [r1, #4]
 8007e90:	2301      	movs	r3, #1
 8007e92:	4093      	lsls	r3, r2
 8007e94:	608b      	str	r3, [r1, #8]
 8007e96:	4658      	mov	r0, fp
 8007e98:	f001 fa26 	bl	80092e8 <_Bfree>
 8007e9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	1e2b      	subs	r3, r5, #0
 8007ea6:	bfb9      	ittee	lt
 8007ea8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007eac:	9303      	strlt	r3, [sp, #12]
 8007eae:	2300      	movge	r3, #0
 8007eb0:	6033      	strge	r3, [r6, #0]
 8007eb2:	9f03      	ldr	r7, [sp, #12]
 8007eb4:	4b98      	ldr	r3, [pc, #608]	@ (8008118 <_dtoa_r+0x2d0>)
 8007eb6:	bfbc      	itt	lt
 8007eb8:	2201      	movlt	r2, #1
 8007eba:	6032      	strlt	r2, [r6, #0]
 8007ebc:	43bb      	bics	r3, r7
 8007ebe:	d112      	bne.n	8007ee6 <_dtoa_r+0x9e>
 8007ec0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ec2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007ecc:	4323      	orrs	r3, r4
 8007ece:	f000 854d 	beq.w	800896c <_dtoa_r+0xb24>
 8007ed2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ed4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800812c <_dtoa_r+0x2e4>
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 854f 	beq.w	800897c <_dtoa_r+0xb34>
 8007ede:	f10a 0303 	add.w	r3, sl, #3
 8007ee2:	f000 bd49 	b.w	8008978 <_dtoa_r+0xb30>
 8007ee6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007eea:	2200      	movs	r2, #0
 8007eec:	ec51 0b17 	vmov	r0, r1, d7
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007ef6:	f7f8 fdef 	bl	8000ad8 <__aeabi_dcmpeq>
 8007efa:	4680      	mov	r8, r0
 8007efc:	b158      	cbz	r0, 8007f16 <_dtoa_r+0xce>
 8007efe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007f00:	2301      	movs	r3, #1
 8007f02:	6013      	str	r3, [r2, #0]
 8007f04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f06:	b113      	cbz	r3, 8007f0e <_dtoa_r+0xc6>
 8007f08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f0a:	4b84      	ldr	r3, [pc, #528]	@ (800811c <_dtoa_r+0x2d4>)
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008130 <_dtoa_r+0x2e8>
 8007f12:	f000 bd33 	b.w	800897c <_dtoa_r+0xb34>
 8007f16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007f1a:	aa16      	add	r2, sp, #88	@ 0x58
 8007f1c:	a917      	add	r1, sp, #92	@ 0x5c
 8007f1e:	4658      	mov	r0, fp
 8007f20:	f001 fd86 	bl	8009a30 <__d2b>
 8007f24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f28:	4681      	mov	r9, r0
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	d077      	beq.n	800801e <_dtoa_r+0x1d6>
 8007f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f48:	4619      	mov	r1, r3
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4b74      	ldr	r3, [pc, #464]	@ (8008120 <_dtoa_r+0x2d8>)
 8007f4e:	f7f8 f9a3 	bl	8000298 <__aeabi_dsub>
 8007f52:	a369      	add	r3, pc, #420	@ (adr r3, 80080f8 <_dtoa_r+0x2b0>)
 8007f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f58:	f7f8 fb56 	bl	8000608 <__aeabi_dmul>
 8007f5c:	a368      	add	r3, pc, #416	@ (adr r3, 8008100 <_dtoa_r+0x2b8>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f99b 	bl	800029c <__adddf3>
 8007f66:	4604      	mov	r4, r0
 8007f68:	4630      	mov	r0, r6
 8007f6a:	460d      	mov	r5, r1
 8007f6c:	f7f8 fae2 	bl	8000534 <__aeabi_i2d>
 8007f70:	a365      	add	r3, pc, #404	@ (adr r3, 8008108 <_dtoa_r+0x2c0>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 fb47 	bl	8000608 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 f98b 	bl	800029c <__adddf3>
 8007f86:	4604      	mov	r4, r0
 8007f88:	460d      	mov	r5, r1
 8007f8a:	f7f8 fded 	bl	8000b68 <__aeabi_d2iz>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4607      	mov	r7, r0
 8007f92:	2300      	movs	r3, #0
 8007f94:	4620      	mov	r0, r4
 8007f96:	4629      	mov	r1, r5
 8007f98:	f7f8 fda8 	bl	8000aec <__aeabi_dcmplt>
 8007f9c:	b140      	cbz	r0, 8007fb0 <_dtoa_r+0x168>
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	f7f8 fac8 	bl	8000534 <__aeabi_i2d>
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	462b      	mov	r3, r5
 8007fa8:	f7f8 fd96 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fac:	b900      	cbnz	r0, 8007fb0 <_dtoa_r+0x168>
 8007fae:	3f01      	subs	r7, #1
 8007fb0:	2f16      	cmp	r7, #22
 8007fb2:	d851      	bhi.n	8008058 <_dtoa_r+0x210>
 8007fb4:	4b5b      	ldr	r3, [pc, #364]	@ (8008124 <_dtoa_r+0x2dc>)
 8007fb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fc2:	f7f8 fd93 	bl	8000aec <__aeabi_dcmplt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d048      	beq.n	800805c <_dtoa_r+0x214>
 8007fca:	3f01      	subs	r7, #1
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9312      	str	r3, [sp, #72]	@ 0x48
 8007fd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fd2:	1b9b      	subs	r3, r3, r6
 8007fd4:	1e5a      	subs	r2, r3, #1
 8007fd6:	bf44      	itt	mi
 8007fd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8007fdc:	2300      	movmi	r3, #0
 8007fde:	9208      	str	r2, [sp, #32]
 8007fe0:	bf54      	ite	pl
 8007fe2:	f04f 0800 	movpl.w	r8, #0
 8007fe6:	9308      	strmi	r3, [sp, #32]
 8007fe8:	2f00      	cmp	r7, #0
 8007fea:	db39      	blt.n	8008060 <_dtoa_r+0x218>
 8007fec:	9b08      	ldr	r3, [sp, #32]
 8007fee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ff0:	443b      	add	r3, r7
 8007ff2:	9308      	str	r3, [sp, #32]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	d864      	bhi.n	80080c8 <_dtoa_r+0x280>
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	bfc4      	itt	gt
 8008002:	3b04      	subgt	r3, #4
 8008004:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008008:	f1a3 0302 	sub.w	r3, r3, #2
 800800c:	bfcc      	ite	gt
 800800e:	2400      	movgt	r4, #0
 8008010:	2401      	movle	r4, #1
 8008012:	2b03      	cmp	r3, #3
 8008014:	d863      	bhi.n	80080de <_dtoa_r+0x296>
 8008016:	e8df f003 	tbb	[pc, r3]
 800801a:	372a      	.short	0x372a
 800801c:	5535      	.short	0x5535
 800801e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008022:	441e      	add	r6, r3
 8008024:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008028:	2b20      	cmp	r3, #32
 800802a:	bfc1      	itttt	gt
 800802c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008030:	409f      	lslgt	r7, r3
 8008032:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008036:	fa24 f303 	lsrgt.w	r3, r4, r3
 800803a:	bfd6      	itet	le
 800803c:	f1c3 0320 	rsble	r3, r3, #32
 8008040:	ea47 0003 	orrgt.w	r0, r7, r3
 8008044:	fa04 f003 	lslle.w	r0, r4, r3
 8008048:	f7f8 fa64 	bl	8000514 <__aeabi_ui2d>
 800804c:	2201      	movs	r2, #1
 800804e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008052:	3e01      	subs	r6, #1
 8008054:	9214      	str	r2, [sp, #80]	@ 0x50
 8008056:	e777      	b.n	8007f48 <_dtoa_r+0x100>
 8008058:	2301      	movs	r3, #1
 800805a:	e7b8      	b.n	8007fce <_dtoa_r+0x186>
 800805c:	9012      	str	r0, [sp, #72]	@ 0x48
 800805e:	e7b7      	b.n	8007fd0 <_dtoa_r+0x188>
 8008060:	427b      	negs	r3, r7
 8008062:	930a      	str	r3, [sp, #40]	@ 0x28
 8008064:	2300      	movs	r3, #0
 8008066:	eba8 0807 	sub.w	r8, r8, r7
 800806a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800806c:	e7c4      	b.n	8007ff8 <_dtoa_r+0x1b0>
 800806e:	2300      	movs	r3, #0
 8008070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008074:	2b00      	cmp	r3, #0
 8008076:	dc35      	bgt.n	80080e4 <_dtoa_r+0x29c>
 8008078:	2301      	movs	r3, #1
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	9307      	str	r3, [sp, #28]
 800807e:	461a      	mov	r2, r3
 8008080:	920e      	str	r2, [sp, #56]	@ 0x38
 8008082:	e00b      	b.n	800809c <_dtoa_r+0x254>
 8008084:	2301      	movs	r3, #1
 8008086:	e7f3      	b.n	8008070 <_dtoa_r+0x228>
 8008088:	2300      	movs	r3, #0
 800808a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800808c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800808e:	18fb      	adds	r3, r7, r3
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	3301      	adds	r3, #1
 8008094:	2b01      	cmp	r3, #1
 8008096:	9307      	str	r3, [sp, #28]
 8008098:	bfb8      	it	lt
 800809a:	2301      	movlt	r3, #1
 800809c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80080a0:	2100      	movs	r1, #0
 80080a2:	2204      	movs	r2, #4
 80080a4:	f102 0514 	add.w	r5, r2, #20
 80080a8:	429d      	cmp	r5, r3
 80080aa:	d91f      	bls.n	80080ec <_dtoa_r+0x2a4>
 80080ac:	6041      	str	r1, [r0, #4]
 80080ae:	4658      	mov	r0, fp
 80080b0:	f001 f8da 	bl	8009268 <_Balloc>
 80080b4:	4682      	mov	sl, r0
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d13c      	bne.n	8008134 <_dtoa_r+0x2ec>
 80080ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008128 <_dtoa_r+0x2e0>)
 80080bc:	4602      	mov	r2, r0
 80080be:	f240 11af 	movw	r1, #431	@ 0x1af
 80080c2:	e6d8      	b.n	8007e76 <_dtoa_r+0x2e>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e7e0      	b.n	800808a <_dtoa_r+0x242>
 80080c8:	2401      	movs	r4, #1
 80080ca:	2300      	movs	r3, #0
 80080cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	2200      	movs	r2, #0
 80080da:	2312      	movs	r3, #18
 80080dc:	e7d0      	b.n	8008080 <_dtoa_r+0x238>
 80080de:	2301      	movs	r3, #1
 80080e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e2:	e7f5      	b.n	80080d0 <_dtoa_r+0x288>
 80080e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	9307      	str	r3, [sp, #28]
 80080ea:	e7d7      	b.n	800809c <_dtoa_r+0x254>
 80080ec:	3101      	adds	r1, #1
 80080ee:	0052      	lsls	r2, r2, #1
 80080f0:	e7d8      	b.n	80080a4 <_dtoa_r+0x25c>
 80080f2:	bf00      	nop
 80080f4:	f3af 8000 	nop.w
 80080f8:	636f4361 	.word	0x636f4361
 80080fc:	3fd287a7 	.word	0x3fd287a7
 8008100:	8b60c8b3 	.word	0x8b60c8b3
 8008104:	3fc68a28 	.word	0x3fc68a28
 8008108:	509f79fb 	.word	0x509f79fb
 800810c:	3fd34413 	.word	0x3fd34413
 8008110:	0800ccf7 	.word	0x0800ccf7
 8008114:	0800cdb9 	.word	0x0800cdb9
 8008118:	7ff00000 	.word	0x7ff00000
 800811c:	0800d101 	.word	0x0800d101
 8008120:	3ff80000 	.word	0x3ff80000
 8008124:	0800cf10 	.word	0x0800cf10
 8008128:	0800ce11 	.word	0x0800ce11
 800812c:	0800cdb5 	.word	0x0800cdb5
 8008130:	0800d100 	.word	0x0800d100
 8008134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008138:	6018      	str	r0, [r3, #0]
 800813a:	9b07      	ldr	r3, [sp, #28]
 800813c:	2b0e      	cmp	r3, #14
 800813e:	f200 80a4 	bhi.w	800828a <_dtoa_r+0x442>
 8008142:	2c00      	cmp	r4, #0
 8008144:	f000 80a1 	beq.w	800828a <_dtoa_r+0x442>
 8008148:	2f00      	cmp	r7, #0
 800814a:	dd33      	ble.n	80081b4 <_dtoa_r+0x36c>
 800814c:	4bad      	ldr	r3, [pc, #692]	@ (8008404 <_dtoa_r+0x5bc>)
 800814e:	f007 020f 	and.w	r2, r7, #15
 8008152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008156:	ed93 7b00 	vldr	d7, [r3]
 800815a:	05f8      	lsls	r0, r7, #23
 800815c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008160:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008164:	d516      	bpl.n	8008194 <_dtoa_r+0x34c>
 8008166:	4ba8      	ldr	r3, [pc, #672]	@ (8008408 <_dtoa_r+0x5c0>)
 8008168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800816c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008170:	f7f8 fb74 	bl	800085c <__aeabi_ddiv>
 8008174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008178:	f004 040f 	and.w	r4, r4, #15
 800817c:	2603      	movs	r6, #3
 800817e:	4da2      	ldr	r5, [pc, #648]	@ (8008408 <_dtoa_r+0x5c0>)
 8008180:	b954      	cbnz	r4, 8008198 <_dtoa_r+0x350>
 8008182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800818a:	f7f8 fb67 	bl	800085c <__aeabi_ddiv>
 800818e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008192:	e028      	b.n	80081e6 <_dtoa_r+0x39e>
 8008194:	2602      	movs	r6, #2
 8008196:	e7f2      	b.n	800817e <_dtoa_r+0x336>
 8008198:	07e1      	lsls	r1, r4, #31
 800819a:	d508      	bpl.n	80081ae <_dtoa_r+0x366>
 800819c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081a4:	f7f8 fa30 	bl	8000608 <__aeabi_dmul>
 80081a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ac:	3601      	adds	r6, #1
 80081ae:	1064      	asrs	r4, r4, #1
 80081b0:	3508      	adds	r5, #8
 80081b2:	e7e5      	b.n	8008180 <_dtoa_r+0x338>
 80081b4:	f000 80d2 	beq.w	800835c <_dtoa_r+0x514>
 80081b8:	427c      	negs	r4, r7
 80081ba:	4b92      	ldr	r3, [pc, #584]	@ (8008404 <_dtoa_r+0x5bc>)
 80081bc:	4d92      	ldr	r5, [pc, #584]	@ (8008408 <_dtoa_r+0x5c0>)
 80081be:	f004 020f 	and.w	r2, r4, #15
 80081c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081ce:	f7f8 fa1b 	bl	8000608 <__aeabi_dmul>
 80081d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081d6:	1124      	asrs	r4, r4, #4
 80081d8:	2300      	movs	r3, #0
 80081da:	2602      	movs	r6, #2
 80081dc:	2c00      	cmp	r4, #0
 80081de:	f040 80b2 	bne.w	8008346 <_dtoa_r+0x4fe>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1d3      	bne.n	800818e <_dtoa_r+0x346>
 80081e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 80b7 	beq.w	8008360 <_dtoa_r+0x518>
 80081f2:	4b86      	ldr	r3, [pc, #536]	@ (800840c <_dtoa_r+0x5c4>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	4620      	mov	r0, r4
 80081f8:	4629      	mov	r1, r5
 80081fa:	f7f8 fc77 	bl	8000aec <__aeabi_dcmplt>
 80081fe:	2800      	cmp	r0, #0
 8008200:	f000 80ae 	beq.w	8008360 <_dtoa_r+0x518>
 8008204:	9b07      	ldr	r3, [sp, #28]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 80aa 	beq.w	8008360 <_dtoa_r+0x518>
 800820c:	9b00      	ldr	r3, [sp, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	dd37      	ble.n	8008282 <_dtoa_r+0x43a>
 8008212:	1e7b      	subs	r3, r7, #1
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	4620      	mov	r0, r4
 8008218:	4b7d      	ldr	r3, [pc, #500]	@ (8008410 <_dtoa_r+0x5c8>)
 800821a:	2200      	movs	r2, #0
 800821c:	4629      	mov	r1, r5
 800821e:	f7f8 f9f3 	bl	8000608 <__aeabi_dmul>
 8008222:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008226:	9c00      	ldr	r4, [sp, #0]
 8008228:	3601      	adds	r6, #1
 800822a:	4630      	mov	r0, r6
 800822c:	f7f8 f982 	bl	8000534 <__aeabi_i2d>
 8008230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008234:	f7f8 f9e8 	bl	8000608 <__aeabi_dmul>
 8008238:	4b76      	ldr	r3, [pc, #472]	@ (8008414 <_dtoa_r+0x5cc>)
 800823a:	2200      	movs	r2, #0
 800823c:	f7f8 f82e 	bl	800029c <__adddf3>
 8008240:	4605      	mov	r5, r0
 8008242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008246:	2c00      	cmp	r4, #0
 8008248:	f040 808d 	bne.w	8008366 <_dtoa_r+0x51e>
 800824c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008250:	4b71      	ldr	r3, [pc, #452]	@ (8008418 <_dtoa_r+0x5d0>)
 8008252:	2200      	movs	r2, #0
 8008254:	f7f8 f820 	bl	8000298 <__aeabi_dsub>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008260:	462a      	mov	r2, r5
 8008262:	4633      	mov	r3, r6
 8008264:	f7f8 fc60 	bl	8000b28 <__aeabi_dcmpgt>
 8008268:	2800      	cmp	r0, #0
 800826a:	f040 828b 	bne.w	8008784 <_dtoa_r+0x93c>
 800826e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008272:	462a      	mov	r2, r5
 8008274:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008278:	f7f8 fc38 	bl	8000aec <__aeabi_dcmplt>
 800827c:	2800      	cmp	r0, #0
 800827e:	f040 8128 	bne.w	80084d2 <_dtoa_r+0x68a>
 8008282:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008286:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800828a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800828c:	2b00      	cmp	r3, #0
 800828e:	f2c0 815a 	blt.w	8008546 <_dtoa_r+0x6fe>
 8008292:	2f0e      	cmp	r7, #14
 8008294:	f300 8157 	bgt.w	8008546 <_dtoa_r+0x6fe>
 8008298:	4b5a      	ldr	r3, [pc, #360]	@ (8008404 <_dtoa_r+0x5bc>)
 800829a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800829e:	ed93 7b00 	vldr	d7, [r3]
 80082a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	ed8d 7b00 	vstr	d7, [sp]
 80082aa:	da03      	bge.n	80082b4 <_dtoa_r+0x46c>
 80082ac:	9b07      	ldr	r3, [sp, #28]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f340 8101 	ble.w	80084b6 <_dtoa_r+0x66e>
 80082b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082b8:	4656      	mov	r6, sl
 80082ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082be:	4620      	mov	r0, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	f7f8 facb 	bl	800085c <__aeabi_ddiv>
 80082c6:	f7f8 fc4f 	bl	8000b68 <__aeabi_d2iz>
 80082ca:	4680      	mov	r8, r0
 80082cc:	f7f8 f932 	bl	8000534 <__aeabi_i2d>
 80082d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082d4:	f7f8 f998 	bl	8000608 <__aeabi_dmul>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80082e4:	f7f7 ffd8 	bl	8000298 <__aeabi_dsub>
 80082e8:	f806 4b01 	strb.w	r4, [r6], #1
 80082ec:	9d07      	ldr	r5, [sp, #28]
 80082ee:	eba6 040a 	sub.w	r4, r6, sl
 80082f2:	42a5      	cmp	r5, r4
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	f040 8117 	bne.w	800852a <_dtoa_r+0x6e2>
 80082fc:	f7f7 ffce 	bl	800029c <__adddf3>
 8008300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008304:	4604      	mov	r4, r0
 8008306:	460d      	mov	r5, r1
 8008308:	f7f8 fc0e 	bl	8000b28 <__aeabi_dcmpgt>
 800830c:	2800      	cmp	r0, #0
 800830e:	f040 80f9 	bne.w	8008504 <_dtoa_r+0x6bc>
 8008312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f8 fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800831e:	b118      	cbz	r0, 8008328 <_dtoa_r+0x4e0>
 8008320:	f018 0f01 	tst.w	r8, #1
 8008324:	f040 80ee 	bne.w	8008504 <_dtoa_r+0x6bc>
 8008328:	4649      	mov	r1, r9
 800832a:	4658      	mov	r0, fp
 800832c:	f000 ffdc 	bl	80092e8 <_Bfree>
 8008330:	2300      	movs	r3, #0
 8008332:	7033      	strb	r3, [r6, #0]
 8008334:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008336:	3701      	adds	r7, #1
 8008338:	601f      	str	r7, [r3, #0]
 800833a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 831d 	beq.w	800897c <_dtoa_r+0xb34>
 8008342:	601e      	str	r6, [r3, #0]
 8008344:	e31a      	b.n	800897c <_dtoa_r+0xb34>
 8008346:	07e2      	lsls	r2, r4, #31
 8008348:	d505      	bpl.n	8008356 <_dtoa_r+0x50e>
 800834a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800834e:	f7f8 f95b 	bl	8000608 <__aeabi_dmul>
 8008352:	3601      	adds	r6, #1
 8008354:	2301      	movs	r3, #1
 8008356:	1064      	asrs	r4, r4, #1
 8008358:	3508      	adds	r5, #8
 800835a:	e73f      	b.n	80081dc <_dtoa_r+0x394>
 800835c:	2602      	movs	r6, #2
 800835e:	e742      	b.n	80081e6 <_dtoa_r+0x39e>
 8008360:	9c07      	ldr	r4, [sp, #28]
 8008362:	9704      	str	r7, [sp, #16]
 8008364:	e761      	b.n	800822a <_dtoa_r+0x3e2>
 8008366:	4b27      	ldr	r3, [pc, #156]	@ (8008404 <_dtoa_r+0x5bc>)
 8008368:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800836a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800836e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008372:	4454      	add	r4, sl
 8008374:	2900      	cmp	r1, #0
 8008376:	d053      	beq.n	8008420 <_dtoa_r+0x5d8>
 8008378:	4928      	ldr	r1, [pc, #160]	@ (800841c <_dtoa_r+0x5d4>)
 800837a:	2000      	movs	r0, #0
 800837c:	f7f8 fa6e 	bl	800085c <__aeabi_ddiv>
 8008380:	4633      	mov	r3, r6
 8008382:	462a      	mov	r2, r5
 8008384:	f7f7 ff88 	bl	8000298 <__aeabi_dsub>
 8008388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800838c:	4656      	mov	r6, sl
 800838e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008392:	f7f8 fbe9 	bl	8000b68 <__aeabi_d2iz>
 8008396:	4605      	mov	r5, r0
 8008398:	f7f8 f8cc 	bl	8000534 <__aeabi_i2d>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083a4:	f7f7 ff78 	bl	8000298 <__aeabi_dsub>
 80083a8:	3530      	adds	r5, #48	@ 0x30
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083b2:	f806 5b01 	strb.w	r5, [r6], #1
 80083b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083ba:	f7f8 fb97 	bl	8000aec <__aeabi_dcmplt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d171      	bne.n	80084a6 <_dtoa_r+0x65e>
 80083c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083c6:	4911      	ldr	r1, [pc, #68]	@ (800840c <_dtoa_r+0x5c4>)
 80083c8:	2000      	movs	r0, #0
 80083ca:	f7f7 ff65 	bl	8000298 <__aeabi_dsub>
 80083ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083d2:	f7f8 fb8b 	bl	8000aec <__aeabi_dcmplt>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	f040 8095 	bne.w	8008506 <_dtoa_r+0x6be>
 80083dc:	42a6      	cmp	r6, r4
 80083de:	f43f af50 	beq.w	8008282 <_dtoa_r+0x43a>
 80083e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008410 <_dtoa_r+0x5c8>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	f7f8 f90d 	bl	8000608 <__aeabi_dmul>
 80083ee:	4b08      	ldr	r3, [pc, #32]	@ (8008410 <_dtoa_r+0x5c8>)
 80083f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083f4:	2200      	movs	r2, #0
 80083f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083fa:	f7f8 f905 	bl	8000608 <__aeabi_dmul>
 80083fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008402:	e7c4      	b.n	800838e <_dtoa_r+0x546>
 8008404:	0800cf10 	.word	0x0800cf10
 8008408:	0800cee8 	.word	0x0800cee8
 800840c:	3ff00000 	.word	0x3ff00000
 8008410:	40240000 	.word	0x40240000
 8008414:	401c0000 	.word	0x401c0000
 8008418:	40140000 	.word	0x40140000
 800841c:	3fe00000 	.word	0x3fe00000
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	f7f8 f8f0 	bl	8000608 <__aeabi_dmul>
 8008428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800842c:	9415      	str	r4, [sp, #84]	@ 0x54
 800842e:	4656      	mov	r6, sl
 8008430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008434:	f7f8 fb98 	bl	8000b68 <__aeabi_d2iz>
 8008438:	4605      	mov	r5, r0
 800843a:	f7f8 f87b 	bl	8000534 <__aeabi_i2d>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008446:	f7f7 ff27 	bl	8000298 <__aeabi_dsub>
 800844a:	3530      	adds	r5, #48	@ 0x30
 800844c:	f806 5b01 	strb.w	r5, [r6], #1
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	42a6      	cmp	r6, r4
 8008456:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	d124      	bne.n	80084aa <_dtoa_r+0x662>
 8008460:	4bac      	ldr	r3, [pc, #688]	@ (8008714 <_dtoa_r+0x8cc>)
 8008462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008466:	f7f7 ff19 	bl	800029c <__adddf3>
 800846a:	4602      	mov	r2, r0
 800846c:	460b      	mov	r3, r1
 800846e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008472:	f7f8 fb59 	bl	8000b28 <__aeabi_dcmpgt>
 8008476:	2800      	cmp	r0, #0
 8008478:	d145      	bne.n	8008506 <_dtoa_r+0x6be>
 800847a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800847e:	49a5      	ldr	r1, [pc, #660]	@ (8008714 <_dtoa_r+0x8cc>)
 8008480:	2000      	movs	r0, #0
 8008482:	f7f7 ff09 	bl	8000298 <__aeabi_dsub>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848e:	f7f8 fb2d 	bl	8000aec <__aeabi_dcmplt>
 8008492:	2800      	cmp	r0, #0
 8008494:	f43f aef5 	beq.w	8008282 <_dtoa_r+0x43a>
 8008498:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800849a:	1e73      	subs	r3, r6, #1
 800849c:	9315      	str	r3, [sp, #84]	@ 0x54
 800849e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084a2:	2b30      	cmp	r3, #48	@ 0x30
 80084a4:	d0f8      	beq.n	8008498 <_dtoa_r+0x650>
 80084a6:	9f04      	ldr	r7, [sp, #16]
 80084a8:	e73e      	b.n	8008328 <_dtoa_r+0x4e0>
 80084aa:	4b9b      	ldr	r3, [pc, #620]	@ (8008718 <_dtoa_r+0x8d0>)
 80084ac:	f7f8 f8ac 	bl	8000608 <__aeabi_dmul>
 80084b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b4:	e7bc      	b.n	8008430 <_dtoa_r+0x5e8>
 80084b6:	d10c      	bne.n	80084d2 <_dtoa_r+0x68a>
 80084b8:	4b98      	ldr	r3, [pc, #608]	@ (800871c <_dtoa_r+0x8d4>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084c0:	f7f8 f8a2 	bl	8000608 <__aeabi_dmul>
 80084c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084c8:	f7f8 fb24 	bl	8000b14 <__aeabi_dcmpge>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f000 8157 	beq.w	8008780 <_dtoa_r+0x938>
 80084d2:	2400      	movs	r4, #0
 80084d4:	4625      	mov	r5, r4
 80084d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084d8:	43db      	mvns	r3, r3
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	4656      	mov	r6, sl
 80084de:	2700      	movs	r7, #0
 80084e0:	4621      	mov	r1, r4
 80084e2:	4658      	mov	r0, fp
 80084e4:	f000 ff00 	bl	80092e8 <_Bfree>
 80084e8:	2d00      	cmp	r5, #0
 80084ea:	d0dc      	beq.n	80084a6 <_dtoa_r+0x65e>
 80084ec:	b12f      	cbz	r7, 80084fa <_dtoa_r+0x6b2>
 80084ee:	42af      	cmp	r7, r5
 80084f0:	d003      	beq.n	80084fa <_dtoa_r+0x6b2>
 80084f2:	4639      	mov	r1, r7
 80084f4:	4658      	mov	r0, fp
 80084f6:	f000 fef7 	bl	80092e8 <_Bfree>
 80084fa:	4629      	mov	r1, r5
 80084fc:	4658      	mov	r0, fp
 80084fe:	f000 fef3 	bl	80092e8 <_Bfree>
 8008502:	e7d0      	b.n	80084a6 <_dtoa_r+0x65e>
 8008504:	9704      	str	r7, [sp, #16]
 8008506:	4633      	mov	r3, r6
 8008508:	461e      	mov	r6, r3
 800850a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800850e:	2a39      	cmp	r2, #57	@ 0x39
 8008510:	d107      	bne.n	8008522 <_dtoa_r+0x6da>
 8008512:	459a      	cmp	sl, r3
 8008514:	d1f8      	bne.n	8008508 <_dtoa_r+0x6c0>
 8008516:	9a04      	ldr	r2, [sp, #16]
 8008518:	3201      	adds	r2, #1
 800851a:	9204      	str	r2, [sp, #16]
 800851c:	2230      	movs	r2, #48	@ 0x30
 800851e:	f88a 2000 	strb.w	r2, [sl]
 8008522:	781a      	ldrb	r2, [r3, #0]
 8008524:	3201      	adds	r2, #1
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	e7bd      	b.n	80084a6 <_dtoa_r+0x65e>
 800852a:	4b7b      	ldr	r3, [pc, #492]	@ (8008718 <_dtoa_r+0x8d0>)
 800852c:	2200      	movs	r2, #0
 800852e:	f7f8 f86b 	bl	8000608 <__aeabi_dmul>
 8008532:	2200      	movs	r2, #0
 8008534:	2300      	movs	r3, #0
 8008536:	4604      	mov	r4, r0
 8008538:	460d      	mov	r5, r1
 800853a:	f7f8 facd 	bl	8000ad8 <__aeabi_dcmpeq>
 800853e:	2800      	cmp	r0, #0
 8008540:	f43f aebb 	beq.w	80082ba <_dtoa_r+0x472>
 8008544:	e6f0      	b.n	8008328 <_dtoa_r+0x4e0>
 8008546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008548:	2a00      	cmp	r2, #0
 800854a:	f000 80db 	beq.w	8008704 <_dtoa_r+0x8bc>
 800854e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008550:	2a01      	cmp	r2, #1
 8008552:	f300 80bf 	bgt.w	80086d4 <_dtoa_r+0x88c>
 8008556:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008558:	2a00      	cmp	r2, #0
 800855a:	f000 80b7 	beq.w	80086cc <_dtoa_r+0x884>
 800855e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008562:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008564:	4646      	mov	r6, r8
 8008566:	9a08      	ldr	r2, [sp, #32]
 8008568:	2101      	movs	r1, #1
 800856a:	441a      	add	r2, r3
 800856c:	4658      	mov	r0, fp
 800856e:	4498      	add	r8, r3
 8008570:	9208      	str	r2, [sp, #32]
 8008572:	f000 ffb7 	bl	80094e4 <__i2b>
 8008576:	4605      	mov	r5, r0
 8008578:	b15e      	cbz	r6, 8008592 <_dtoa_r+0x74a>
 800857a:	9b08      	ldr	r3, [sp, #32]
 800857c:	2b00      	cmp	r3, #0
 800857e:	dd08      	ble.n	8008592 <_dtoa_r+0x74a>
 8008580:	42b3      	cmp	r3, r6
 8008582:	9a08      	ldr	r2, [sp, #32]
 8008584:	bfa8      	it	ge
 8008586:	4633      	movge	r3, r6
 8008588:	eba8 0803 	sub.w	r8, r8, r3
 800858c:	1af6      	subs	r6, r6, r3
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	9308      	str	r3, [sp, #32]
 8008592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008594:	b1f3      	cbz	r3, 80085d4 <_dtoa_r+0x78c>
 8008596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80b7 	beq.w	800870c <_dtoa_r+0x8c4>
 800859e:	b18c      	cbz	r4, 80085c4 <_dtoa_r+0x77c>
 80085a0:	4629      	mov	r1, r5
 80085a2:	4622      	mov	r2, r4
 80085a4:	4658      	mov	r0, fp
 80085a6:	f001 f85d 	bl	8009664 <__pow5mult>
 80085aa:	464a      	mov	r2, r9
 80085ac:	4601      	mov	r1, r0
 80085ae:	4605      	mov	r5, r0
 80085b0:	4658      	mov	r0, fp
 80085b2:	f000 ffad 	bl	8009510 <__multiply>
 80085b6:	4649      	mov	r1, r9
 80085b8:	9004      	str	r0, [sp, #16]
 80085ba:	4658      	mov	r0, fp
 80085bc:	f000 fe94 	bl	80092e8 <_Bfree>
 80085c0:	9b04      	ldr	r3, [sp, #16]
 80085c2:	4699      	mov	r9, r3
 80085c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085c6:	1b1a      	subs	r2, r3, r4
 80085c8:	d004      	beq.n	80085d4 <_dtoa_r+0x78c>
 80085ca:	4649      	mov	r1, r9
 80085cc:	4658      	mov	r0, fp
 80085ce:	f001 f849 	bl	8009664 <__pow5mult>
 80085d2:	4681      	mov	r9, r0
 80085d4:	2101      	movs	r1, #1
 80085d6:	4658      	mov	r0, fp
 80085d8:	f000 ff84 	bl	80094e4 <__i2b>
 80085dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085de:	4604      	mov	r4, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 81cf 	beq.w	8008984 <_dtoa_r+0xb3c>
 80085e6:	461a      	mov	r2, r3
 80085e8:	4601      	mov	r1, r0
 80085ea:	4658      	mov	r0, fp
 80085ec:	f001 f83a 	bl	8009664 <__pow5mult>
 80085f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	4604      	mov	r4, r0
 80085f6:	f300 8095 	bgt.w	8008724 <_dtoa_r+0x8dc>
 80085fa:	9b02      	ldr	r3, [sp, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f040 8087 	bne.w	8008710 <_dtoa_r+0x8c8>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008608:	2b00      	cmp	r3, #0
 800860a:	f040 8089 	bne.w	8008720 <_dtoa_r+0x8d8>
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008614:	0d1b      	lsrs	r3, r3, #20
 8008616:	051b      	lsls	r3, r3, #20
 8008618:	b12b      	cbz	r3, 8008626 <_dtoa_r+0x7de>
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	3301      	adds	r3, #1
 800861e:	9308      	str	r3, [sp, #32]
 8008620:	f108 0801 	add.w	r8, r8, #1
 8008624:	2301      	movs	r3, #1
 8008626:	930a      	str	r3, [sp, #40]	@ 0x28
 8008628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 81b0 	beq.w	8008990 <_dtoa_r+0xb48>
 8008630:	6923      	ldr	r3, [r4, #16]
 8008632:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008636:	6918      	ldr	r0, [r3, #16]
 8008638:	f000 ff08 	bl	800944c <__hi0bits>
 800863c:	f1c0 0020 	rsb	r0, r0, #32
 8008640:	9b08      	ldr	r3, [sp, #32]
 8008642:	4418      	add	r0, r3
 8008644:	f010 001f 	ands.w	r0, r0, #31
 8008648:	d077      	beq.n	800873a <_dtoa_r+0x8f2>
 800864a:	f1c0 0320 	rsb	r3, r0, #32
 800864e:	2b04      	cmp	r3, #4
 8008650:	dd6b      	ble.n	800872a <_dtoa_r+0x8e2>
 8008652:	9b08      	ldr	r3, [sp, #32]
 8008654:	f1c0 001c 	rsb	r0, r0, #28
 8008658:	4403      	add	r3, r0
 800865a:	4480      	add	r8, r0
 800865c:	4406      	add	r6, r0
 800865e:	9308      	str	r3, [sp, #32]
 8008660:	f1b8 0f00 	cmp.w	r8, #0
 8008664:	dd05      	ble.n	8008672 <_dtoa_r+0x82a>
 8008666:	4649      	mov	r1, r9
 8008668:	4642      	mov	r2, r8
 800866a:	4658      	mov	r0, fp
 800866c:	f001 f854 	bl	8009718 <__lshift>
 8008670:	4681      	mov	r9, r0
 8008672:	9b08      	ldr	r3, [sp, #32]
 8008674:	2b00      	cmp	r3, #0
 8008676:	dd05      	ble.n	8008684 <_dtoa_r+0x83c>
 8008678:	4621      	mov	r1, r4
 800867a:	461a      	mov	r2, r3
 800867c:	4658      	mov	r0, fp
 800867e:	f001 f84b 	bl	8009718 <__lshift>
 8008682:	4604      	mov	r4, r0
 8008684:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008686:	2b00      	cmp	r3, #0
 8008688:	d059      	beq.n	800873e <_dtoa_r+0x8f6>
 800868a:	4621      	mov	r1, r4
 800868c:	4648      	mov	r0, r9
 800868e:	f001 f8af 	bl	80097f0 <__mcmp>
 8008692:	2800      	cmp	r0, #0
 8008694:	da53      	bge.n	800873e <_dtoa_r+0x8f6>
 8008696:	1e7b      	subs	r3, r7, #1
 8008698:	9304      	str	r3, [sp, #16]
 800869a:	4649      	mov	r1, r9
 800869c:	2300      	movs	r3, #0
 800869e:	220a      	movs	r2, #10
 80086a0:	4658      	mov	r0, fp
 80086a2:	f000 fe43 	bl	800932c <__multadd>
 80086a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086a8:	4681      	mov	r9, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 8172 	beq.w	8008994 <_dtoa_r+0xb4c>
 80086b0:	2300      	movs	r3, #0
 80086b2:	4629      	mov	r1, r5
 80086b4:	220a      	movs	r2, #10
 80086b6:	4658      	mov	r0, fp
 80086b8:	f000 fe38 	bl	800932c <__multadd>
 80086bc:	9b00      	ldr	r3, [sp, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	4605      	mov	r5, r0
 80086c2:	dc67      	bgt.n	8008794 <_dtoa_r+0x94c>
 80086c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	dc41      	bgt.n	800874e <_dtoa_r+0x906>
 80086ca:	e063      	b.n	8008794 <_dtoa_r+0x94c>
 80086cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086d2:	e746      	b.n	8008562 <_dtoa_r+0x71a>
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	1e5c      	subs	r4, r3, #1
 80086d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086da:	42a3      	cmp	r3, r4
 80086dc:	bfbf      	itttt	lt
 80086de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80086e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80086e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80086e4:	1ae3      	sublt	r3, r4, r3
 80086e6:	bfb4      	ite	lt
 80086e8:	18d2      	addlt	r2, r2, r3
 80086ea:	1b1c      	subge	r4, r3, r4
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	bfbc      	itt	lt
 80086f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80086f2:	2400      	movlt	r4, #0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bfb5      	itete	lt
 80086f8:	eba8 0603 	sublt.w	r6, r8, r3
 80086fc:	9b07      	ldrge	r3, [sp, #28]
 80086fe:	2300      	movlt	r3, #0
 8008700:	4646      	movge	r6, r8
 8008702:	e730      	b.n	8008566 <_dtoa_r+0x71e>
 8008704:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008706:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008708:	4646      	mov	r6, r8
 800870a:	e735      	b.n	8008578 <_dtoa_r+0x730>
 800870c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800870e:	e75c      	b.n	80085ca <_dtoa_r+0x782>
 8008710:	2300      	movs	r3, #0
 8008712:	e788      	b.n	8008626 <_dtoa_r+0x7de>
 8008714:	3fe00000 	.word	0x3fe00000
 8008718:	40240000 	.word	0x40240000
 800871c:	40140000 	.word	0x40140000
 8008720:	9b02      	ldr	r3, [sp, #8]
 8008722:	e780      	b.n	8008626 <_dtoa_r+0x7de>
 8008724:	2300      	movs	r3, #0
 8008726:	930a      	str	r3, [sp, #40]	@ 0x28
 8008728:	e782      	b.n	8008630 <_dtoa_r+0x7e8>
 800872a:	d099      	beq.n	8008660 <_dtoa_r+0x818>
 800872c:	9a08      	ldr	r2, [sp, #32]
 800872e:	331c      	adds	r3, #28
 8008730:	441a      	add	r2, r3
 8008732:	4498      	add	r8, r3
 8008734:	441e      	add	r6, r3
 8008736:	9208      	str	r2, [sp, #32]
 8008738:	e792      	b.n	8008660 <_dtoa_r+0x818>
 800873a:	4603      	mov	r3, r0
 800873c:	e7f6      	b.n	800872c <_dtoa_r+0x8e4>
 800873e:	9b07      	ldr	r3, [sp, #28]
 8008740:	9704      	str	r7, [sp, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	dc20      	bgt.n	8008788 <_dtoa_r+0x940>
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800874a:	2b02      	cmp	r3, #2
 800874c:	dd1e      	ble.n	800878c <_dtoa_r+0x944>
 800874e:	9b00      	ldr	r3, [sp, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	f47f aec0 	bne.w	80084d6 <_dtoa_r+0x68e>
 8008756:	4621      	mov	r1, r4
 8008758:	2205      	movs	r2, #5
 800875a:	4658      	mov	r0, fp
 800875c:	f000 fde6 	bl	800932c <__multadd>
 8008760:	4601      	mov	r1, r0
 8008762:	4604      	mov	r4, r0
 8008764:	4648      	mov	r0, r9
 8008766:	f001 f843 	bl	80097f0 <__mcmp>
 800876a:	2800      	cmp	r0, #0
 800876c:	f77f aeb3 	ble.w	80084d6 <_dtoa_r+0x68e>
 8008770:	4656      	mov	r6, sl
 8008772:	2331      	movs	r3, #49	@ 0x31
 8008774:	f806 3b01 	strb.w	r3, [r6], #1
 8008778:	9b04      	ldr	r3, [sp, #16]
 800877a:	3301      	adds	r3, #1
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	e6ae      	b.n	80084de <_dtoa_r+0x696>
 8008780:	9c07      	ldr	r4, [sp, #28]
 8008782:	9704      	str	r7, [sp, #16]
 8008784:	4625      	mov	r5, r4
 8008786:	e7f3      	b.n	8008770 <_dtoa_r+0x928>
 8008788:	9b07      	ldr	r3, [sp, #28]
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 8104 	beq.w	800899c <_dtoa_r+0xb54>
 8008794:	2e00      	cmp	r6, #0
 8008796:	dd05      	ble.n	80087a4 <_dtoa_r+0x95c>
 8008798:	4629      	mov	r1, r5
 800879a:	4632      	mov	r2, r6
 800879c:	4658      	mov	r0, fp
 800879e:	f000 ffbb 	bl	8009718 <__lshift>
 80087a2:	4605      	mov	r5, r0
 80087a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d05a      	beq.n	8008860 <_dtoa_r+0xa18>
 80087aa:	6869      	ldr	r1, [r5, #4]
 80087ac:	4658      	mov	r0, fp
 80087ae:	f000 fd5b 	bl	8009268 <_Balloc>
 80087b2:	4606      	mov	r6, r0
 80087b4:	b928      	cbnz	r0, 80087c2 <_dtoa_r+0x97a>
 80087b6:	4b84      	ldr	r3, [pc, #528]	@ (80089c8 <_dtoa_r+0xb80>)
 80087b8:	4602      	mov	r2, r0
 80087ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087be:	f7ff bb5a 	b.w	8007e76 <_dtoa_r+0x2e>
 80087c2:	692a      	ldr	r2, [r5, #16]
 80087c4:	3202      	adds	r2, #2
 80087c6:	0092      	lsls	r2, r2, #2
 80087c8:	f105 010c 	add.w	r1, r5, #12
 80087cc:	300c      	adds	r0, #12
 80087ce:	f7ff fa78 	bl	8007cc2 <memcpy>
 80087d2:	2201      	movs	r2, #1
 80087d4:	4631      	mov	r1, r6
 80087d6:	4658      	mov	r0, fp
 80087d8:	f000 ff9e 	bl	8009718 <__lshift>
 80087dc:	f10a 0301 	add.w	r3, sl, #1
 80087e0:	9307      	str	r3, [sp, #28]
 80087e2:	9b00      	ldr	r3, [sp, #0]
 80087e4:	4453      	add	r3, sl
 80087e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	462f      	mov	r7, r5
 80087f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f2:	4605      	mov	r5, r0
 80087f4:	9b07      	ldr	r3, [sp, #28]
 80087f6:	4621      	mov	r1, r4
 80087f8:	3b01      	subs	r3, #1
 80087fa:	4648      	mov	r0, r9
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	f7ff fa9b 	bl	8007d38 <quorem>
 8008802:	4639      	mov	r1, r7
 8008804:	9002      	str	r0, [sp, #8]
 8008806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800880a:	4648      	mov	r0, r9
 800880c:	f000 fff0 	bl	80097f0 <__mcmp>
 8008810:	462a      	mov	r2, r5
 8008812:	9008      	str	r0, [sp, #32]
 8008814:	4621      	mov	r1, r4
 8008816:	4658      	mov	r0, fp
 8008818:	f001 f806 	bl	8009828 <__mdiff>
 800881c:	68c2      	ldr	r2, [r0, #12]
 800881e:	4606      	mov	r6, r0
 8008820:	bb02      	cbnz	r2, 8008864 <_dtoa_r+0xa1c>
 8008822:	4601      	mov	r1, r0
 8008824:	4648      	mov	r0, r9
 8008826:	f000 ffe3 	bl	80097f0 <__mcmp>
 800882a:	4602      	mov	r2, r0
 800882c:	4631      	mov	r1, r6
 800882e:	4658      	mov	r0, fp
 8008830:	920e      	str	r2, [sp, #56]	@ 0x38
 8008832:	f000 fd59 	bl	80092e8 <_Bfree>
 8008836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008838:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800883a:	9e07      	ldr	r6, [sp, #28]
 800883c:	ea43 0102 	orr.w	r1, r3, r2
 8008840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008842:	4319      	orrs	r1, r3
 8008844:	d110      	bne.n	8008868 <_dtoa_r+0xa20>
 8008846:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800884a:	d029      	beq.n	80088a0 <_dtoa_r+0xa58>
 800884c:	9b08      	ldr	r3, [sp, #32]
 800884e:	2b00      	cmp	r3, #0
 8008850:	dd02      	ble.n	8008858 <_dtoa_r+0xa10>
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008858:	9b00      	ldr	r3, [sp, #0]
 800885a:	f883 8000 	strb.w	r8, [r3]
 800885e:	e63f      	b.n	80084e0 <_dtoa_r+0x698>
 8008860:	4628      	mov	r0, r5
 8008862:	e7bb      	b.n	80087dc <_dtoa_r+0x994>
 8008864:	2201      	movs	r2, #1
 8008866:	e7e1      	b.n	800882c <_dtoa_r+0x9e4>
 8008868:	9b08      	ldr	r3, [sp, #32]
 800886a:	2b00      	cmp	r3, #0
 800886c:	db04      	blt.n	8008878 <_dtoa_r+0xa30>
 800886e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008870:	430b      	orrs	r3, r1
 8008872:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008874:	430b      	orrs	r3, r1
 8008876:	d120      	bne.n	80088ba <_dtoa_r+0xa72>
 8008878:	2a00      	cmp	r2, #0
 800887a:	dded      	ble.n	8008858 <_dtoa_r+0xa10>
 800887c:	4649      	mov	r1, r9
 800887e:	2201      	movs	r2, #1
 8008880:	4658      	mov	r0, fp
 8008882:	f000 ff49 	bl	8009718 <__lshift>
 8008886:	4621      	mov	r1, r4
 8008888:	4681      	mov	r9, r0
 800888a:	f000 ffb1 	bl	80097f0 <__mcmp>
 800888e:	2800      	cmp	r0, #0
 8008890:	dc03      	bgt.n	800889a <_dtoa_r+0xa52>
 8008892:	d1e1      	bne.n	8008858 <_dtoa_r+0xa10>
 8008894:	f018 0f01 	tst.w	r8, #1
 8008898:	d0de      	beq.n	8008858 <_dtoa_r+0xa10>
 800889a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800889e:	d1d8      	bne.n	8008852 <_dtoa_r+0xa0a>
 80088a0:	9a00      	ldr	r2, [sp, #0]
 80088a2:	2339      	movs	r3, #57	@ 0x39
 80088a4:	7013      	strb	r3, [r2, #0]
 80088a6:	4633      	mov	r3, r6
 80088a8:	461e      	mov	r6, r3
 80088aa:	3b01      	subs	r3, #1
 80088ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80088b0:	2a39      	cmp	r2, #57	@ 0x39
 80088b2:	d052      	beq.n	800895a <_dtoa_r+0xb12>
 80088b4:	3201      	adds	r2, #1
 80088b6:	701a      	strb	r2, [r3, #0]
 80088b8:	e612      	b.n	80084e0 <_dtoa_r+0x698>
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	dd07      	ble.n	80088ce <_dtoa_r+0xa86>
 80088be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088c2:	d0ed      	beq.n	80088a0 <_dtoa_r+0xa58>
 80088c4:	9a00      	ldr	r2, [sp, #0]
 80088c6:	f108 0301 	add.w	r3, r8, #1
 80088ca:	7013      	strb	r3, [r2, #0]
 80088cc:	e608      	b.n	80084e0 <_dtoa_r+0x698>
 80088ce:	9b07      	ldr	r3, [sp, #28]
 80088d0:	9a07      	ldr	r2, [sp, #28]
 80088d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80088d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088d8:	4293      	cmp	r3, r2
 80088da:	d028      	beq.n	800892e <_dtoa_r+0xae6>
 80088dc:	4649      	mov	r1, r9
 80088de:	2300      	movs	r3, #0
 80088e0:	220a      	movs	r2, #10
 80088e2:	4658      	mov	r0, fp
 80088e4:	f000 fd22 	bl	800932c <__multadd>
 80088e8:	42af      	cmp	r7, r5
 80088ea:	4681      	mov	r9, r0
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	f04f 020a 	mov.w	r2, #10
 80088f4:	4639      	mov	r1, r7
 80088f6:	4658      	mov	r0, fp
 80088f8:	d107      	bne.n	800890a <_dtoa_r+0xac2>
 80088fa:	f000 fd17 	bl	800932c <__multadd>
 80088fe:	4607      	mov	r7, r0
 8008900:	4605      	mov	r5, r0
 8008902:	9b07      	ldr	r3, [sp, #28]
 8008904:	3301      	adds	r3, #1
 8008906:	9307      	str	r3, [sp, #28]
 8008908:	e774      	b.n	80087f4 <_dtoa_r+0x9ac>
 800890a:	f000 fd0f 	bl	800932c <__multadd>
 800890e:	4629      	mov	r1, r5
 8008910:	4607      	mov	r7, r0
 8008912:	2300      	movs	r3, #0
 8008914:	220a      	movs	r2, #10
 8008916:	4658      	mov	r0, fp
 8008918:	f000 fd08 	bl	800932c <__multadd>
 800891c:	4605      	mov	r5, r0
 800891e:	e7f0      	b.n	8008902 <_dtoa_r+0xaba>
 8008920:	9b00      	ldr	r3, [sp, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	bfcc      	ite	gt
 8008926:	461e      	movgt	r6, r3
 8008928:	2601      	movle	r6, #1
 800892a:	4456      	add	r6, sl
 800892c:	2700      	movs	r7, #0
 800892e:	4649      	mov	r1, r9
 8008930:	2201      	movs	r2, #1
 8008932:	4658      	mov	r0, fp
 8008934:	f000 fef0 	bl	8009718 <__lshift>
 8008938:	4621      	mov	r1, r4
 800893a:	4681      	mov	r9, r0
 800893c:	f000 ff58 	bl	80097f0 <__mcmp>
 8008940:	2800      	cmp	r0, #0
 8008942:	dcb0      	bgt.n	80088a6 <_dtoa_r+0xa5e>
 8008944:	d102      	bne.n	800894c <_dtoa_r+0xb04>
 8008946:	f018 0f01 	tst.w	r8, #1
 800894a:	d1ac      	bne.n	80088a6 <_dtoa_r+0xa5e>
 800894c:	4633      	mov	r3, r6
 800894e:	461e      	mov	r6, r3
 8008950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008954:	2a30      	cmp	r2, #48	@ 0x30
 8008956:	d0fa      	beq.n	800894e <_dtoa_r+0xb06>
 8008958:	e5c2      	b.n	80084e0 <_dtoa_r+0x698>
 800895a:	459a      	cmp	sl, r3
 800895c:	d1a4      	bne.n	80088a8 <_dtoa_r+0xa60>
 800895e:	9b04      	ldr	r3, [sp, #16]
 8008960:	3301      	adds	r3, #1
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	2331      	movs	r3, #49	@ 0x31
 8008966:	f88a 3000 	strb.w	r3, [sl]
 800896a:	e5b9      	b.n	80084e0 <_dtoa_r+0x698>
 800896c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800896e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80089cc <_dtoa_r+0xb84>
 8008972:	b11b      	cbz	r3, 800897c <_dtoa_r+0xb34>
 8008974:	f10a 0308 	add.w	r3, sl, #8
 8008978:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800897a:	6013      	str	r3, [r2, #0]
 800897c:	4650      	mov	r0, sl
 800897e:	b019      	add	sp, #100	@ 0x64
 8008980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008986:	2b01      	cmp	r3, #1
 8008988:	f77f ae37 	ble.w	80085fa <_dtoa_r+0x7b2>
 800898c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800898e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008990:	2001      	movs	r0, #1
 8008992:	e655      	b.n	8008640 <_dtoa_r+0x7f8>
 8008994:	9b00      	ldr	r3, [sp, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f77f aed6 	ble.w	8008748 <_dtoa_r+0x900>
 800899c:	4656      	mov	r6, sl
 800899e:	4621      	mov	r1, r4
 80089a0:	4648      	mov	r0, r9
 80089a2:	f7ff f9c9 	bl	8007d38 <quorem>
 80089a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80089aa:	f806 8b01 	strb.w	r8, [r6], #1
 80089ae:	9b00      	ldr	r3, [sp, #0]
 80089b0:	eba6 020a 	sub.w	r2, r6, sl
 80089b4:	4293      	cmp	r3, r2
 80089b6:	ddb3      	ble.n	8008920 <_dtoa_r+0xad8>
 80089b8:	4649      	mov	r1, r9
 80089ba:	2300      	movs	r3, #0
 80089bc:	220a      	movs	r2, #10
 80089be:	4658      	mov	r0, fp
 80089c0:	f000 fcb4 	bl	800932c <__multadd>
 80089c4:	4681      	mov	r9, r0
 80089c6:	e7ea      	b.n	800899e <_dtoa_r+0xb56>
 80089c8:	0800ce11 	.word	0x0800ce11
 80089cc:	0800cdac 	.word	0x0800cdac

080089d0 <_free_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4605      	mov	r5, r0
 80089d4:	2900      	cmp	r1, #0
 80089d6:	d041      	beq.n	8008a5c <_free_r+0x8c>
 80089d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089dc:	1f0c      	subs	r4, r1, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bfb8      	it	lt
 80089e2:	18e4      	addlt	r4, r4, r3
 80089e4:	f000 fc34 	bl	8009250 <__malloc_lock>
 80089e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a60 <_free_r+0x90>)
 80089ea:	6813      	ldr	r3, [r2, #0]
 80089ec:	b933      	cbnz	r3, 80089fc <_free_r+0x2c>
 80089ee:	6063      	str	r3, [r4, #4]
 80089f0:	6014      	str	r4, [r2, #0]
 80089f2:	4628      	mov	r0, r5
 80089f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089f8:	f000 bc30 	b.w	800925c <__malloc_unlock>
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	d908      	bls.n	8008a12 <_free_r+0x42>
 8008a00:	6820      	ldr	r0, [r4, #0]
 8008a02:	1821      	adds	r1, r4, r0
 8008a04:	428b      	cmp	r3, r1
 8008a06:	bf01      	itttt	eq
 8008a08:	6819      	ldreq	r1, [r3, #0]
 8008a0a:	685b      	ldreq	r3, [r3, #4]
 8008a0c:	1809      	addeq	r1, r1, r0
 8008a0e:	6021      	streq	r1, [r4, #0]
 8008a10:	e7ed      	b.n	80089ee <_free_r+0x1e>
 8008a12:	461a      	mov	r2, r3
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	b10b      	cbz	r3, 8008a1c <_free_r+0x4c>
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	d9fa      	bls.n	8008a12 <_free_r+0x42>
 8008a1c:	6811      	ldr	r1, [r2, #0]
 8008a1e:	1850      	adds	r0, r2, r1
 8008a20:	42a0      	cmp	r0, r4
 8008a22:	d10b      	bne.n	8008a3c <_free_r+0x6c>
 8008a24:	6820      	ldr	r0, [r4, #0]
 8008a26:	4401      	add	r1, r0
 8008a28:	1850      	adds	r0, r2, r1
 8008a2a:	4283      	cmp	r3, r0
 8008a2c:	6011      	str	r1, [r2, #0]
 8008a2e:	d1e0      	bne.n	80089f2 <_free_r+0x22>
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	6053      	str	r3, [r2, #4]
 8008a36:	4408      	add	r0, r1
 8008a38:	6010      	str	r0, [r2, #0]
 8008a3a:	e7da      	b.n	80089f2 <_free_r+0x22>
 8008a3c:	d902      	bls.n	8008a44 <_free_r+0x74>
 8008a3e:	230c      	movs	r3, #12
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	e7d6      	b.n	80089f2 <_free_r+0x22>
 8008a44:	6820      	ldr	r0, [r4, #0]
 8008a46:	1821      	adds	r1, r4, r0
 8008a48:	428b      	cmp	r3, r1
 8008a4a:	bf04      	itt	eq
 8008a4c:	6819      	ldreq	r1, [r3, #0]
 8008a4e:	685b      	ldreq	r3, [r3, #4]
 8008a50:	6063      	str	r3, [r4, #4]
 8008a52:	bf04      	itt	eq
 8008a54:	1809      	addeq	r1, r1, r0
 8008a56:	6021      	streq	r1, [r4, #0]
 8008a58:	6054      	str	r4, [r2, #4]
 8008a5a:	e7ca      	b.n	80089f2 <_free_r+0x22>
 8008a5c:	bd38      	pop	{r3, r4, r5, pc}
 8008a5e:	bf00      	nop
 8008a60:	2000097c 	.word	0x2000097c

08008a64 <rshift>:
 8008a64:	6903      	ldr	r3, [r0, #16]
 8008a66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a72:	f100 0414 	add.w	r4, r0, #20
 8008a76:	dd45      	ble.n	8008b04 <rshift+0xa0>
 8008a78:	f011 011f 	ands.w	r1, r1, #31
 8008a7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a84:	d10c      	bne.n	8008aa0 <rshift+0x3c>
 8008a86:	f100 0710 	add.w	r7, r0, #16
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	42b1      	cmp	r1, r6
 8008a8e:	d334      	bcc.n	8008afa <rshift+0x96>
 8008a90:	1a9b      	subs	r3, r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	1eea      	subs	r2, r5, #3
 8008a96:	4296      	cmp	r6, r2
 8008a98:	bf38      	it	cc
 8008a9a:	2300      	movcc	r3, #0
 8008a9c:	4423      	add	r3, r4
 8008a9e:	e015      	b.n	8008acc <rshift+0x68>
 8008aa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008aa4:	f1c1 0820 	rsb	r8, r1, #32
 8008aa8:	40cf      	lsrs	r7, r1
 8008aaa:	f105 0e04 	add.w	lr, r5, #4
 8008aae:	46a1      	mov	r9, r4
 8008ab0:	4576      	cmp	r6, lr
 8008ab2:	46f4      	mov	ip, lr
 8008ab4:	d815      	bhi.n	8008ae2 <rshift+0x7e>
 8008ab6:	1a9a      	subs	r2, r3, r2
 8008ab8:	0092      	lsls	r2, r2, #2
 8008aba:	3a04      	subs	r2, #4
 8008abc:	3501      	adds	r5, #1
 8008abe:	42ae      	cmp	r6, r5
 8008ac0:	bf38      	it	cc
 8008ac2:	2200      	movcc	r2, #0
 8008ac4:	18a3      	adds	r3, r4, r2
 8008ac6:	50a7      	str	r7, [r4, r2]
 8008ac8:	b107      	cbz	r7, 8008acc <rshift+0x68>
 8008aca:	3304      	adds	r3, #4
 8008acc:	1b1a      	subs	r2, r3, r4
 8008ace:	42a3      	cmp	r3, r4
 8008ad0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ad4:	bf08      	it	eq
 8008ad6:	2300      	moveq	r3, #0
 8008ad8:	6102      	str	r2, [r0, #16]
 8008ada:	bf08      	it	eq
 8008adc:	6143      	streq	r3, [r0, #20]
 8008ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ae2:	f8dc c000 	ldr.w	ip, [ip]
 8008ae6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008aea:	ea4c 0707 	orr.w	r7, ip, r7
 8008aee:	f849 7b04 	str.w	r7, [r9], #4
 8008af2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008af6:	40cf      	lsrs	r7, r1
 8008af8:	e7da      	b.n	8008ab0 <rshift+0x4c>
 8008afa:	f851 cb04 	ldr.w	ip, [r1], #4
 8008afe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b02:	e7c3      	b.n	8008a8c <rshift+0x28>
 8008b04:	4623      	mov	r3, r4
 8008b06:	e7e1      	b.n	8008acc <rshift+0x68>

08008b08 <__hexdig_fun>:
 8008b08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b0c:	2b09      	cmp	r3, #9
 8008b0e:	d802      	bhi.n	8008b16 <__hexdig_fun+0xe>
 8008b10:	3820      	subs	r0, #32
 8008b12:	b2c0      	uxtb	r0, r0
 8008b14:	4770      	bx	lr
 8008b16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b1a:	2b05      	cmp	r3, #5
 8008b1c:	d801      	bhi.n	8008b22 <__hexdig_fun+0x1a>
 8008b1e:	3847      	subs	r0, #71	@ 0x47
 8008b20:	e7f7      	b.n	8008b12 <__hexdig_fun+0xa>
 8008b22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b26:	2b05      	cmp	r3, #5
 8008b28:	d801      	bhi.n	8008b2e <__hexdig_fun+0x26>
 8008b2a:	3827      	subs	r0, #39	@ 0x27
 8008b2c:	e7f1      	b.n	8008b12 <__hexdig_fun+0xa>
 8008b2e:	2000      	movs	r0, #0
 8008b30:	4770      	bx	lr
	...

08008b34 <__gethex>:
 8008b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b38:	b085      	sub	sp, #20
 8008b3a:	468a      	mov	sl, r1
 8008b3c:	9302      	str	r3, [sp, #8]
 8008b3e:	680b      	ldr	r3, [r1, #0]
 8008b40:	9001      	str	r0, [sp, #4]
 8008b42:	4690      	mov	r8, r2
 8008b44:	1c9c      	adds	r4, r3, #2
 8008b46:	46a1      	mov	r9, r4
 8008b48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008b4c:	2830      	cmp	r0, #48	@ 0x30
 8008b4e:	d0fa      	beq.n	8008b46 <__gethex+0x12>
 8008b50:	eba9 0303 	sub.w	r3, r9, r3
 8008b54:	f1a3 0b02 	sub.w	fp, r3, #2
 8008b58:	f7ff ffd6 	bl	8008b08 <__hexdig_fun>
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d168      	bne.n	8008c34 <__gethex+0x100>
 8008b62:	49a0      	ldr	r1, [pc, #640]	@ (8008de4 <__gethex+0x2b0>)
 8008b64:	2201      	movs	r2, #1
 8008b66:	4648      	mov	r0, r9
 8008b68:	f7fe ffc5 	bl	8007af6 <strncmp>
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d167      	bne.n	8008c42 <__gethex+0x10e>
 8008b72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008b76:	4626      	mov	r6, r4
 8008b78:	f7ff ffc6 	bl	8008b08 <__hexdig_fun>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d062      	beq.n	8008c46 <__gethex+0x112>
 8008b80:	4623      	mov	r3, r4
 8008b82:	7818      	ldrb	r0, [r3, #0]
 8008b84:	2830      	cmp	r0, #48	@ 0x30
 8008b86:	4699      	mov	r9, r3
 8008b88:	f103 0301 	add.w	r3, r3, #1
 8008b8c:	d0f9      	beq.n	8008b82 <__gethex+0x4e>
 8008b8e:	f7ff ffbb 	bl	8008b08 <__hexdig_fun>
 8008b92:	fab0 f580 	clz	r5, r0
 8008b96:	096d      	lsrs	r5, r5, #5
 8008b98:	f04f 0b01 	mov.w	fp, #1
 8008b9c:	464a      	mov	r2, r9
 8008b9e:	4616      	mov	r6, r2
 8008ba0:	3201      	adds	r2, #1
 8008ba2:	7830      	ldrb	r0, [r6, #0]
 8008ba4:	f7ff ffb0 	bl	8008b08 <__hexdig_fun>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d1f8      	bne.n	8008b9e <__gethex+0x6a>
 8008bac:	498d      	ldr	r1, [pc, #564]	@ (8008de4 <__gethex+0x2b0>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f7fe ffa0 	bl	8007af6 <strncmp>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d13f      	bne.n	8008c3a <__gethex+0x106>
 8008bba:	b944      	cbnz	r4, 8008bce <__gethex+0x9a>
 8008bbc:	1c74      	adds	r4, r6, #1
 8008bbe:	4622      	mov	r2, r4
 8008bc0:	4616      	mov	r6, r2
 8008bc2:	3201      	adds	r2, #1
 8008bc4:	7830      	ldrb	r0, [r6, #0]
 8008bc6:	f7ff ff9f 	bl	8008b08 <__hexdig_fun>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d1f8      	bne.n	8008bc0 <__gethex+0x8c>
 8008bce:	1ba4      	subs	r4, r4, r6
 8008bd0:	00a7      	lsls	r7, r4, #2
 8008bd2:	7833      	ldrb	r3, [r6, #0]
 8008bd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008bd8:	2b50      	cmp	r3, #80	@ 0x50
 8008bda:	d13e      	bne.n	8008c5a <__gethex+0x126>
 8008bdc:	7873      	ldrb	r3, [r6, #1]
 8008bde:	2b2b      	cmp	r3, #43	@ 0x2b
 8008be0:	d033      	beq.n	8008c4a <__gethex+0x116>
 8008be2:	2b2d      	cmp	r3, #45	@ 0x2d
 8008be4:	d034      	beq.n	8008c50 <__gethex+0x11c>
 8008be6:	1c71      	adds	r1, r6, #1
 8008be8:	2400      	movs	r4, #0
 8008bea:	7808      	ldrb	r0, [r1, #0]
 8008bec:	f7ff ff8c 	bl	8008b08 <__hexdig_fun>
 8008bf0:	1e43      	subs	r3, r0, #1
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b18      	cmp	r3, #24
 8008bf6:	d830      	bhi.n	8008c5a <__gethex+0x126>
 8008bf8:	f1a0 0210 	sub.w	r2, r0, #16
 8008bfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c00:	f7ff ff82 	bl	8008b08 <__hexdig_fun>
 8008c04:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c08:	fa5f fc8c 	uxtb.w	ip, ip
 8008c0c:	f1bc 0f18 	cmp.w	ip, #24
 8008c10:	f04f 030a 	mov.w	r3, #10
 8008c14:	d91e      	bls.n	8008c54 <__gethex+0x120>
 8008c16:	b104      	cbz	r4, 8008c1a <__gethex+0xe6>
 8008c18:	4252      	negs	r2, r2
 8008c1a:	4417      	add	r7, r2
 8008c1c:	f8ca 1000 	str.w	r1, [sl]
 8008c20:	b1ed      	cbz	r5, 8008c5e <__gethex+0x12a>
 8008c22:	f1bb 0f00 	cmp.w	fp, #0
 8008c26:	bf0c      	ite	eq
 8008c28:	2506      	moveq	r5, #6
 8008c2a:	2500      	movne	r5, #0
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	b005      	add	sp, #20
 8008c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	2500      	movs	r5, #0
 8008c36:	462c      	mov	r4, r5
 8008c38:	e7b0      	b.n	8008b9c <__gethex+0x68>
 8008c3a:	2c00      	cmp	r4, #0
 8008c3c:	d1c7      	bne.n	8008bce <__gethex+0x9a>
 8008c3e:	4627      	mov	r7, r4
 8008c40:	e7c7      	b.n	8008bd2 <__gethex+0x9e>
 8008c42:	464e      	mov	r6, r9
 8008c44:	462f      	mov	r7, r5
 8008c46:	2501      	movs	r5, #1
 8008c48:	e7c3      	b.n	8008bd2 <__gethex+0x9e>
 8008c4a:	2400      	movs	r4, #0
 8008c4c:	1cb1      	adds	r1, r6, #2
 8008c4e:	e7cc      	b.n	8008bea <__gethex+0xb6>
 8008c50:	2401      	movs	r4, #1
 8008c52:	e7fb      	b.n	8008c4c <__gethex+0x118>
 8008c54:	fb03 0002 	mla	r0, r3, r2, r0
 8008c58:	e7ce      	b.n	8008bf8 <__gethex+0xc4>
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	e7de      	b.n	8008c1c <__gethex+0xe8>
 8008c5e:	eba6 0309 	sub.w	r3, r6, r9
 8008c62:	3b01      	subs	r3, #1
 8008c64:	4629      	mov	r1, r5
 8008c66:	2b07      	cmp	r3, #7
 8008c68:	dc0a      	bgt.n	8008c80 <__gethex+0x14c>
 8008c6a:	9801      	ldr	r0, [sp, #4]
 8008c6c:	f000 fafc 	bl	8009268 <_Balloc>
 8008c70:	4604      	mov	r4, r0
 8008c72:	b940      	cbnz	r0, 8008c86 <__gethex+0x152>
 8008c74:	4b5c      	ldr	r3, [pc, #368]	@ (8008de8 <__gethex+0x2b4>)
 8008c76:	4602      	mov	r2, r0
 8008c78:	21e4      	movs	r1, #228	@ 0xe4
 8008c7a:	485c      	ldr	r0, [pc, #368]	@ (8008dec <__gethex+0x2b8>)
 8008c7c:	f7ff f83e 	bl	8007cfc <__assert_func>
 8008c80:	3101      	adds	r1, #1
 8008c82:	105b      	asrs	r3, r3, #1
 8008c84:	e7ef      	b.n	8008c66 <__gethex+0x132>
 8008c86:	f100 0a14 	add.w	sl, r0, #20
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	4655      	mov	r5, sl
 8008c8e:	469b      	mov	fp, r3
 8008c90:	45b1      	cmp	r9, r6
 8008c92:	d337      	bcc.n	8008d04 <__gethex+0x1d0>
 8008c94:	f845 bb04 	str.w	fp, [r5], #4
 8008c98:	eba5 050a 	sub.w	r5, r5, sl
 8008c9c:	10ad      	asrs	r5, r5, #2
 8008c9e:	6125      	str	r5, [r4, #16]
 8008ca0:	4658      	mov	r0, fp
 8008ca2:	f000 fbd3 	bl	800944c <__hi0bits>
 8008ca6:	016d      	lsls	r5, r5, #5
 8008ca8:	f8d8 6000 	ldr.w	r6, [r8]
 8008cac:	1a2d      	subs	r5, r5, r0
 8008cae:	42b5      	cmp	r5, r6
 8008cb0:	dd54      	ble.n	8008d5c <__gethex+0x228>
 8008cb2:	1bad      	subs	r5, r5, r6
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f000 ff67 	bl	8009b8a <__any_on>
 8008cbc:	4681      	mov	r9, r0
 8008cbe:	b178      	cbz	r0, 8008ce0 <__gethex+0x1ac>
 8008cc0:	1e6b      	subs	r3, r5, #1
 8008cc2:	1159      	asrs	r1, r3, #5
 8008cc4:	f003 021f 	and.w	r2, r3, #31
 8008cc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ccc:	f04f 0901 	mov.w	r9, #1
 8008cd0:	fa09 f202 	lsl.w	r2, r9, r2
 8008cd4:	420a      	tst	r2, r1
 8008cd6:	d003      	beq.n	8008ce0 <__gethex+0x1ac>
 8008cd8:	454b      	cmp	r3, r9
 8008cda:	dc36      	bgt.n	8008d4a <__gethex+0x216>
 8008cdc:	f04f 0902 	mov.w	r9, #2
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7ff febe 	bl	8008a64 <rshift>
 8008ce8:	442f      	add	r7, r5
 8008cea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cee:	42bb      	cmp	r3, r7
 8008cf0:	da42      	bge.n	8008d78 <__gethex+0x244>
 8008cf2:	9801      	ldr	r0, [sp, #4]
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	f000 faf7 	bl	80092e8 <_Bfree>
 8008cfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	25a3      	movs	r5, #163	@ 0xa3
 8008d02:	e793      	b.n	8008c2c <__gethex+0xf8>
 8008d04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d08:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d0a:	d012      	beq.n	8008d32 <__gethex+0x1fe>
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d104      	bne.n	8008d1a <__gethex+0x1e6>
 8008d10:	f845 bb04 	str.w	fp, [r5], #4
 8008d14:	f04f 0b00 	mov.w	fp, #0
 8008d18:	465b      	mov	r3, fp
 8008d1a:	7830      	ldrb	r0, [r6, #0]
 8008d1c:	9303      	str	r3, [sp, #12]
 8008d1e:	f7ff fef3 	bl	8008b08 <__hexdig_fun>
 8008d22:	9b03      	ldr	r3, [sp, #12]
 8008d24:	f000 000f 	and.w	r0, r0, #15
 8008d28:	4098      	lsls	r0, r3
 8008d2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d2e:	3304      	adds	r3, #4
 8008d30:	e7ae      	b.n	8008c90 <__gethex+0x15c>
 8008d32:	45b1      	cmp	r9, r6
 8008d34:	d8ea      	bhi.n	8008d0c <__gethex+0x1d8>
 8008d36:	492b      	ldr	r1, [pc, #172]	@ (8008de4 <__gethex+0x2b0>)
 8008d38:	9303      	str	r3, [sp, #12]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7fe feda 	bl	8007af6 <strncmp>
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d1e1      	bne.n	8008d0c <__gethex+0x1d8>
 8008d48:	e7a2      	b.n	8008c90 <__gethex+0x15c>
 8008d4a:	1ea9      	subs	r1, r5, #2
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 ff1c 	bl	8009b8a <__any_on>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d0c2      	beq.n	8008cdc <__gethex+0x1a8>
 8008d56:	f04f 0903 	mov.w	r9, #3
 8008d5a:	e7c1      	b.n	8008ce0 <__gethex+0x1ac>
 8008d5c:	da09      	bge.n	8008d72 <__gethex+0x23e>
 8008d5e:	1b75      	subs	r5, r6, r5
 8008d60:	4621      	mov	r1, r4
 8008d62:	9801      	ldr	r0, [sp, #4]
 8008d64:	462a      	mov	r2, r5
 8008d66:	f000 fcd7 	bl	8009718 <__lshift>
 8008d6a:	1b7f      	subs	r7, r7, r5
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	f100 0a14 	add.w	sl, r0, #20
 8008d72:	f04f 0900 	mov.w	r9, #0
 8008d76:	e7b8      	b.n	8008cea <__gethex+0x1b6>
 8008d78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d7c:	42bd      	cmp	r5, r7
 8008d7e:	dd6f      	ble.n	8008e60 <__gethex+0x32c>
 8008d80:	1bed      	subs	r5, r5, r7
 8008d82:	42ae      	cmp	r6, r5
 8008d84:	dc34      	bgt.n	8008df0 <__gethex+0x2bc>
 8008d86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d022      	beq.n	8008dd4 <__gethex+0x2a0>
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d024      	beq.n	8008ddc <__gethex+0x2a8>
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d115      	bne.n	8008dc2 <__gethex+0x28e>
 8008d96:	42ae      	cmp	r6, r5
 8008d98:	d113      	bne.n	8008dc2 <__gethex+0x28e>
 8008d9a:	2e01      	cmp	r6, #1
 8008d9c:	d10b      	bne.n	8008db6 <__gethex+0x282>
 8008d9e:	9a02      	ldr	r2, [sp, #8]
 8008da0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	2301      	movs	r3, #1
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	f8ca 3000 	str.w	r3, [sl]
 8008dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008db0:	2562      	movs	r5, #98	@ 0x62
 8008db2:	601c      	str	r4, [r3, #0]
 8008db4:	e73a      	b.n	8008c2c <__gethex+0xf8>
 8008db6:	1e71      	subs	r1, r6, #1
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fee6 	bl	8009b8a <__any_on>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d1ed      	bne.n	8008d9e <__gethex+0x26a>
 8008dc2:	9801      	ldr	r0, [sp, #4]
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	f000 fa8f 	bl	80092e8 <_Bfree>
 8008dca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6013      	str	r3, [r2, #0]
 8008dd0:	2550      	movs	r5, #80	@ 0x50
 8008dd2:	e72b      	b.n	8008c2c <__gethex+0xf8>
 8008dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1f3      	bne.n	8008dc2 <__gethex+0x28e>
 8008dda:	e7e0      	b.n	8008d9e <__gethex+0x26a>
 8008ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1dd      	bne.n	8008d9e <__gethex+0x26a>
 8008de2:	e7ee      	b.n	8008dc2 <__gethex+0x28e>
 8008de4:	0800cc68 	.word	0x0800cc68
 8008de8:	0800ce11 	.word	0x0800ce11
 8008dec:	0800ce22 	.word	0x0800ce22
 8008df0:	1e6f      	subs	r7, r5, #1
 8008df2:	f1b9 0f00 	cmp.w	r9, #0
 8008df6:	d130      	bne.n	8008e5a <__gethex+0x326>
 8008df8:	b127      	cbz	r7, 8008e04 <__gethex+0x2d0>
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f000 fec4 	bl	8009b8a <__any_on>
 8008e02:	4681      	mov	r9, r0
 8008e04:	117a      	asrs	r2, r7, #5
 8008e06:	2301      	movs	r3, #1
 8008e08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e0c:	f007 071f 	and.w	r7, r7, #31
 8008e10:	40bb      	lsls	r3, r7
 8008e12:	4213      	tst	r3, r2
 8008e14:	4629      	mov	r1, r5
 8008e16:	4620      	mov	r0, r4
 8008e18:	bf18      	it	ne
 8008e1a:	f049 0902 	orrne.w	r9, r9, #2
 8008e1e:	f7ff fe21 	bl	8008a64 <rshift>
 8008e22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e26:	1b76      	subs	r6, r6, r5
 8008e28:	2502      	movs	r5, #2
 8008e2a:	f1b9 0f00 	cmp.w	r9, #0
 8008e2e:	d047      	beq.n	8008ec0 <__gethex+0x38c>
 8008e30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e34:	2b02      	cmp	r3, #2
 8008e36:	d015      	beq.n	8008e64 <__gethex+0x330>
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	d017      	beq.n	8008e6c <__gethex+0x338>
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d109      	bne.n	8008e54 <__gethex+0x320>
 8008e40:	f019 0f02 	tst.w	r9, #2
 8008e44:	d006      	beq.n	8008e54 <__gethex+0x320>
 8008e46:	f8da 3000 	ldr.w	r3, [sl]
 8008e4a:	ea49 0903 	orr.w	r9, r9, r3
 8008e4e:	f019 0f01 	tst.w	r9, #1
 8008e52:	d10e      	bne.n	8008e72 <__gethex+0x33e>
 8008e54:	f045 0510 	orr.w	r5, r5, #16
 8008e58:	e032      	b.n	8008ec0 <__gethex+0x38c>
 8008e5a:	f04f 0901 	mov.w	r9, #1
 8008e5e:	e7d1      	b.n	8008e04 <__gethex+0x2d0>
 8008e60:	2501      	movs	r5, #1
 8008e62:	e7e2      	b.n	8008e2a <__gethex+0x2f6>
 8008e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e66:	f1c3 0301 	rsb	r3, r3, #1
 8008e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0f0      	beq.n	8008e54 <__gethex+0x320>
 8008e72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e76:	f104 0314 	add.w	r3, r4, #20
 8008e7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e82:	f04f 0c00 	mov.w	ip, #0
 8008e86:	4618      	mov	r0, r3
 8008e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e90:	d01b      	beq.n	8008eca <__gethex+0x396>
 8008e92:	3201      	adds	r2, #1
 8008e94:	6002      	str	r2, [r0, #0]
 8008e96:	2d02      	cmp	r5, #2
 8008e98:	f104 0314 	add.w	r3, r4, #20
 8008e9c:	d13c      	bne.n	8008f18 <__gethex+0x3e4>
 8008e9e:	f8d8 2000 	ldr.w	r2, [r8]
 8008ea2:	3a01      	subs	r2, #1
 8008ea4:	42b2      	cmp	r2, r6
 8008ea6:	d109      	bne.n	8008ebc <__gethex+0x388>
 8008ea8:	1171      	asrs	r1, r6, #5
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008eb0:	f006 061f 	and.w	r6, r6, #31
 8008eb4:	fa02 f606 	lsl.w	r6, r2, r6
 8008eb8:	421e      	tst	r6, r3
 8008eba:	d13a      	bne.n	8008f32 <__gethex+0x3fe>
 8008ebc:	f045 0520 	orr.w	r5, r5, #32
 8008ec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ec2:	601c      	str	r4, [r3, #0]
 8008ec4:	9b02      	ldr	r3, [sp, #8]
 8008ec6:	601f      	str	r7, [r3, #0]
 8008ec8:	e6b0      	b.n	8008c2c <__gethex+0xf8>
 8008eca:	4299      	cmp	r1, r3
 8008ecc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ed0:	d8d9      	bhi.n	8008e86 <__gethex+0x352>
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	459b      	cmp	fp, r3
 8008ed6:	db17      	blt.n	8008f08 <__gethex+0x3d4>
 8008ed8:	6861      	ldr	r1, [r4, #4]
 8008eda:	9801      	ldr	r0, [sp, #4]
 8008edc:	3101      	adds	r1, #1
 8008ede:	f000 f9c3 	bl	8009268 <_Balloc>
 8008ee2:	4681      	mov	r9, r0
 8008ee4:	b918      	cbnz	r0, 8008eee <__gethex+0x3ba>
 8008ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f50 <__gethex+0x41c>)
 8008ee8:	4602      	mov	r2, r0
 8008eea:	2184      	movs	r1, #132	@ 0x84
 8008eec:	e6c5      	b.n	8008c7a <__gethex+0x146>
 8008eee:	6922      	ldr	r2, [r4, #16]
 8008ef0:	3202      	adds	r2, #2
 8008ef2:	f104 010c 	add.w	r1, r4, #12
 8008ef6:	0092      	lsls	r2, r2, #2
 8008ef8:	300c      	adds	r0, #12
 8008efa:	f7fe fee2 	bl	8007cc2 <memcpy>
 8008efe:	4621      	mov	r1, r4
 8008f00:	9801      	ldr	r0, [sp, #4]
 8008f02:	f000 f9f1 	bl	80092e8 <_Bfree>
 8008f06:	464c      	mov	r4, r9
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f10:	6122      	str	r2, [r4, #16]
 8008f12:	2201      	movs	r2, #1
 8008f14:	615a      	str	r2, [r3, #20]
 8008f16:	e7be      	b.n	8008e96 <__gethex+0x362>
 8008f18:	6922      	ldr	r2, [r4, #16]
 8008f1a:	455a      	cmp	r2, fp
 8008f1c:	dd0b      	ble.n	8008f36 <__gethex+0x402>
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4620      	mov	r0, r4
 8008f22:	f7ff fd9f 	bl	8008a64 <rshift>
 8008f26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f2a:	3701      	adds	r7, #1
 8008f2c:	42bb      	cmp	r3, r7
 8008f2e:	f6ff aee0 	blt.w	8008cf2 <__gethex+0x1be>
 8008f32:	2501      	movs	r5, #1
 8008f34:	e7c2      	b.n	8008ebc <__gethex+0x388>
 8008f36:	f016 061f 	ands.w	r6, r6, #31
 8008f3a:	d0fa      	beq.n	8008f32 <__gethex+0x3fe>
 8008f3c:	4453      	add	r3, sl
 8008f3e:	f1c6 0620 	rsb	r6, r6, #32
 8008f42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008f46:	f000 fa81 	bl	800944c <__hi0bits>
 8008f4a:	42b0      	cmp	r0, r6
 8008f4c:	dbe7      	blt.n	8008f1e <__gethex+0x3ea>
 8008f4e:	e7f0      	b.n	8008f32 <__gethex+0x3fe>
 8008f50:	0800ce11 	.word	0x0800ce11

08008f54 <L_shift>:
 8008f54:	f1c2 0208 	rsb	r2, r2, #8
 8008f58:	0092      	lsls	r2, r2, #2
 8008f5a:	b570      	push	{r4, r5, r6, lr}
 8008f5c:	f1c2 0620 	rsb	r6, r2, #32
 8008f60:	6843      	ldr	r3, [r0, #4]
 8008f62:	6804      	ldr	r4, [r0, #0]
 8008f64:	fa03 f506 	lsl.w	r5, r3, r6
 8008f68:	432c      	orrs	r4, r5
 8008f6a:	40d3      	lsrs	r3, r2
 8008f6c:	6004      	str	r4, [r0, #0]
 8008f6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f72:	4288      	cmp	r0, r1
 8008f74:	d3f4      	bcc.n	8008f60 <L_shift+0xc>
 8008f76:	bd70      	pop	{r4, r5, r6, pc}

08008f78 <__match>:
 8008f78:	b530      	push	{r4, r5, lr}
 8008f7a:	6803      	ldr	r3, [r0, #0]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f82:	b914      	cbnz	r4, 8008f8a <__match+0x12>
 8008f84:	6003      	str	r3, [r0, #0]
 8008f86:	2001      	movs	r0, #1
 8008f88:	bd30      	pop	{r4, r5, pc}
 8008f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008f92:	2d19      	cmp	r5, #25
 8008f94:	bf98      	it	ls
 8008f96:	3220      	addls	r2, #32
 8008f98:	42a2      	cmp	r2, r4
 8008f9a:	d0f0      	beq.n	8008f7e <__match+0x6>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e7f3      	b.n	8008f88 <__match+0x10>

08008fa0 <__hexnan>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	680b      	ldr	r3, [r1, #0]
 8008fa6:	6801      	ldr	r1, [r0, #0]
 8008fa8:	115e      	asrs	r6, r3, #5
 8008faa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008fae:	f013 031f 	ands.w	r3, r3, #31
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	bf18      	it	ne
 8008fb6:	3604      	addne	r6, #4
 8008fb8:	2500      	movs	r5, #0
 8008fba:	1f37      	subs	r7, r6, #4
 8008fbc:	4682      	mov	sl, r0
 8008fbe:	4690      	mov	r8, r2
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008fc6:	46b9      	mov	r9, r7
 8008fc8:	463c      	mov	r4, r7
 8008fca:	9502      	str	r5, [sp, #8]
 8008fcc:	46ab      	mov	fp, r5
 8008fce:	784a      	ldrb	r2, [r1, #1]
 8008fd0:	1c4b      	adds	r3, r1, #1
 8008fd2:	9303      	str	r3, [sp, #12]
 8008fd4:	b342      	cbz	r2, 8009028 <__hexnan+0x88>
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	9105      	str	r1, [sp, #20]
 8008fda:	9204      	str	r2, [sp, #16]
 8008fdc:	f7ff fd94 	bl	8008b08 <__hexdig_fun>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d151      	bne.n	8009088 <__hexnan+0xe8>
 8008fe4:	9a04      	ldr	r2, [sp, #16]
 8008fe6:	9905      	ldr	r1, [sp, #20]
 8008fe8:	2a20      	cmp	r2, #32
 8008fea:	d818      	bhi.n	800901e <__hexnan+0x7e>
 8008fec:	9b02      	ldr	r3, [sp, #8]
 8008fee:	459b      	cmp	fp, r3
 8008ff0:	dd13      	ble.n	800901a <__hexnan+0x7a>
 8008ff2:	454c      	cmp	r4, r9
 8008ff4:	d206      	bcs.n	8009004 <__hexnan+0x64>
 8008ff6:	2d07      	cmp	r5, #7
 8008ff8:	dc04      	bgt.n	8009004 <__hexnan+0x64>
 8008ffa:	462a      	mov	r2, r5
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	4620      	mov	r0, r4
 8009000:	f7ff ffa8 	bl	8008f54 <L_shift>
 8009004:	4544      	cmp	r4, r8
 8009006:	d952      	bls.n	80090ae <__hexnan+0x10e>
 8009008:	2300      	movs	r3, #0
 800900a:	f1a4 0904 	sub.w	r9, r4, #4
 800900e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009012:	f8cd b008 	str.w	fp, [sp, #8]
 8009016:	464c      	mov	r4, r9
 8009018:	461d      	mov	r5, r3
 800901a:	9903      	ldr	r1, [sp, #12]
 800901c:	e7d7      	b.n	8008fce <__hexnan+0x2e>
 800901e:	2a29      	cmp	r2, #41	@ 0x29
 8009020:	d157      	bne.n	80090d2 <__hexnan+0x132>
 8009022:	3102      	adds	r1, #2
 8009024:	f8ca 1000 	str.w	r1, [sl]
 8009028:	f1bb 0f00 	cmp.w	fp, #0
 800902c:	d051      	beq.n	80090d2 <__hexnan+0x132>
 800902e:	454c      	cmp	r4, r9
 8009030:	d206      	bcs.n	8009040 <__hexnan+0xa0>
 8009032:	2d07      	cmp	r5, #7
 8009034:	dc04      	bgt.n	8009040 <__hexnan+0xa0>
 8009036:	462a      	mov	r2, r5
 8009038:	4649      	mov	r1, r9
 800903a:	4620      	mov	r0, r4
 800903c:	f7ff ff8a 	bl	8008f54 <L_shift>
 8009040:	4544      	cmp	r4, r8
 8009042:	d936      	bls.n	80090b2 <__hexnan+0x112>
 8009044:	f1a8 0204 	sub.w	r2, r8, #4
 8009048:	4623      	mov	r3, r4
 800904a:	f853 1b04 	ldr.w	r1, [r3], #4
 800904e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009052:	429f      	cmp	r7, r3
 8009054:	d2f9      	bcs.n	800904a <__hexnan+0xaa>
 8009056:	1b3b      	subs	r3, r7, r4
 8009058:	f023 0303 	bic.w	r3, r3, #3
 800905c:	3304      	adds	r3, #4
 800905e:	3401      	adds	r4, #1
 8009060:	3e03      	subs	r6, #3
 8009062:	42b4      	cmp	r4, r6
 8009064:	bf88      	it	hi
 8009066:	2304      	movhi	r3, #4
 8009068:	4443      	add	r3, r8
 800906a:	2200      	movs	r2, #0
 800906c:	f843 2b04 	str.w	r2, [r3], #4
 8009070:	429f      	cmp	r7, r3
 8009072:	d2fb      	bcs.n	800906c <__hexnan+0xcc>
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	b91b      	cbnz	r3, 8009080 <__hexnan+0xe0>
 8009078:	4547      	cmp	r7, r8
 800907a:	d128      	bne.n	80090ce <__hexnan+0x12e>
 800907c:	2301      	movs	r3, #1
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	2005      	movs	r0, #5
 8009082:	b007      	add	sp, #28
 8009084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009088:	3501      	adds	r5, #1
 800908a:	2d08      	cmp	r5, #8
 800908c:	f10b 0b01 	add.w	fp, fp, #1
 8009090:	dd06      	ble.n	80090a0 <__hexnan+0x100>
 8009092:	4544      	cmp	r4, r8
 8009094:	d9c1      	bls.n	800901a <__hexnan+0x7a>
 8009096:	2300      	movs	r3, #0
 8009098:	f844 3c04 	str.w	r3, [r4, #-4]
 800909c:	2501      	movs	r5, #1
 800909e:	3c04      	subs	r4, #4
 80090a0:	6822      	ldr	r2, [r4, #0]
 80090a2:	f000 000f 	and.w	r0, r0, #15
 80090a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80090aa:	6020      	str	r0, [r4, #0]
 80090ac:	e7b5      	b.n	800901a <__hexnan+0x7a>
 80090ae:	2508      	movs	r5, #8
 80090b0:	e7b3      	b.n	800901a <__hexnan+0x7a>
 80090b2:	9b01      	ldr	r3, [sp, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0dd      	beq.n	8009074 <__hexnan+0xd4>
 80090b8:	f1c3 0320 	rsb	r3, r3, #32
 80090bc:	f04f 32ff 	mov.w	r2, #4294967295
 80090c0:	40da      	lsrs	r2, r3
 80090c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80090c6:	4013      	ands	r3, r2
 80090c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80090cc:	e7d2      	b.n	8009074 <__hexnan+0xd4>
 80090ce:	3f04      	subs	r7, #4
 80090d0:	e7d0      	b.n	8009074 <__hexnan+0xd4>
 80090d2:	2004      	movs	r0, #4
 80090d4:	e7d5      	b.n	8009082 <__hexnan+0xe2>
	...

080090d8 <malloc>:
 80090d8:	4b02      	ldr	r3, [pc, #8]	@ (80090e4 <malloc+0xc>)
 80090da:	4601      	mov	r1, r0
 80090dc:	6818      	ldr	r0, [r3, #0]
 80090de:	f000 b825 	b.w	800912c <_malloc_r>
 80090e2:	bf00      	nop
 80090e4:	200001d4 	.word	0x200001d4

080090e8 <sbrk_aligned>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	4e0f      	ldr	r6, [pc, #60]	@ (8009128 <sbrk_aligned+0x40>)
 80090ec:	460c      	mov	r4, r1
 80090ee:	6831      	ldr	r1, [r6, #0]
 80090f0:	4605      	mov	r5, r0
 80090f2:	b911      	cbnz	r1, 80090fa <sbrk_aligned+0x12>
 80090f4:	f001 fbb0 	bl	800a858 <_sbrk_r>
 80090f8:	6030      	str	r0, [r6, #0]
 80090fa:	4621      	mov	r1, r4
 80090fc:	4628      	mov	r0, r5
 80090fe:	f001 fbab 	bl	800a858 <_sbrk_r>
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	d103      	bne.n	800910e <sbrk_aligned+0x26>
 8009106:	f04f 34ff 	mov.w	r4, #4294967295
 800910a:	4620      	mov	r0, r4
 800910c:	bd70      	pop	{r4, r5, r6, pc}
 800910e:	1cc4      	adds	r4, r0, #3
 8009110:	f024 0403 	bic.w	r4, r4, #3
 8009114:	42a0      	cmp	r0, r4
 8009116:	d0f8      	beq.n	800910a <sbrk_aligned+0x22>
 8009118:	1a21      	subs	r1, r4, r0
 800911a:	4628      	mov	r0, r5
 800911c:	f001 fb9c 	bl	800a858 <_sbrk_r>
 8009120:	3001      	adds	r0, #1
 8009122:	d1f2      	bne.n	800910a <sbrk_aligned+0x22>
 8009124:	e7ef      	b.n	8009106 <sbrk_aligned+0x1e>
 8009126:	bf00      	nop
 8009128:	20000978 	.word	0x20000978

0800912c <_malloc_r>:
 800912c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009130:	1ccd      	adds	r5, r1, #3
 8009132:	f025 0503 	bic.w	r5, r5, #3
 8009136:	3508      	adds	r5, #8
 8009138:	2d0c      	cmp	r5, #12
 800913a:	bf38      	it	cc
 800913c:	250c      	movcc	r5, #12
 800913e:	2d00      	cmp	r5, #0
 8009140:	4606      	mov	r6, r0
 8009142:	db01      	blt.n	8009148 <_malloc_r+0x1c>
 8009144:	42a9      	cmp	r1, r5
 8009146:	d904      	bls.n	8009152 <_malloc_r+0x26>
 8009148:	230c      	movs	r3, #12
 800914a:	6033      	str	r3, [r6, #0]
 800914c:	2000      	movs	r0, #0
 800914e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009228 <_malloc_r+0xfc>
 8009156:	f000 f87b 	bl	8009250 <__malloc_lock>
 800915a:	f8d8 3000 	ldr.w	r3, [r8]
 800915e:	461c      	mov	r4, r3
 8009160:	bb44      	cbnz	r4, 80091b4 <_malloc_r+0x88>
 8009162:	4629      	mov	r1, r5
 8009164:	4630      	mov	r0, r6
 8009166:	f7ff ffbf 	bl	80090e8 <sbrk_aligned>
 800916a:	1c43      	adds	r3, r0, #1
 800916c:	4604      	mov	r4, r0
 800916e:	d158      	bne.n	8009222 <_malloc_r+0xf6>
 8009170:	f8d8 4000 	ldr.w	r4, [r8]
 8009174:	4627      	mov	r7, r4
 8009176:	2f00      	cmp	r7, #0
 8009178:	d143      	bne.n	8009202 <_malloc_r+0xd6>
 800917a:	2c00      	cmp	r4, #0
 800917c:	d04b      	beq.n	8009216 <_malloc_r+0xea>
 800917e:	6823      	ldr	r3, [r4, #0]
 8009180:	4639      	mov	r1, r7
 8009182:	4630      	mov	r0, r6
 8009184:	eb04 0903 	add.w	r9, r4, r3
 8009188:	f001 fb66 	bl	800a858 <_sbrk_r>
 800918c:	4581      	cmp	r9, r0
 800918e:	d142      	bne.n	8009216 <_malloc_r+0xea>
 8009190:	6821      	ldr	r1, [r4, #0]
 8009192:	1a6d      	subs	r5, r5, r1
 8009194:	4629      	mov	r1, r5
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff ffa6 	bl	80090e8 <sbrk_aligned>
 800919c:	3001      	adds	r0, #1
 800919e:	d03a      	beq.n	8009216 <_malloc_r+0xea>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	442b      	add	r3, r5
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	f8d8 3000 	ldr.w	r3, [r8]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	bb62      	cbnz	r2, 8009208 <_malloc_r+0xdc>
 80091ae:	f8c8 7000 	str.w	r7, [r8]
 80091b2:	e00f      	b.n	80091d4 <_malloc_r+0xa8>
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	1b52      	subs	r2, r2, r5
 80091b8:	d420      	bmi.n	80091fc <_malloc_r+0xd0>
 80091ba:	2a0b      	cmp	r2, #11
 80091bc:	d917      	bls.n	80091ee <_malloc_r+0xc2>
 80091be:	1961      	adds	r1, r4, r5
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	6025      	str	r5, [r4, #0]
 80091c4:	bf18      	it	ne
 80091c6:	6059      	strne	r1, [r3, #4]
 80091c8:	6863      	ldr	r3, [r4, #4]
 80091ca:	bf08      	it	eq
 80091cc:	f8c8 1000 	streq.w	r1, [r8]
 80091d0:	5162      	str	r2, [r4, r5]
 80091d2:	604b      	str	r3, [r1, #4]
 80091d4:	4630      	mov	r0, r6
 80091d6:	f000 f841 	bl	800925c <__malloc_unlock>
 80091da:	f104 000b 	add.w	r0, r4, #11
 80091de:	1d23      	adds	r3, r4, #4
 80091e0:	f020 0007 	bic.w	r0, r0, #7
 80091e4:	1ac2      	subs	r2, r0, r3
 80091e6:	bf1c      	itt	ne
 80091e8:	1a1b      	subne	r3, r3, r0
 80091ea:	50a3      	strne	r3, [r4, r2]
 80091ec:	e7af      	b.n	800914e <_malloc_r+0x22>
 80091ee:	6862      	ldr	r2, [r4, #4]
 80091f0:	42a3      	cmp	r3, r4
 80091f2:	bf0c      	ite	eq
 80091f4:	f8c8 2000 	streq.w	r2, [r8]
 80091f8:	605a      	strne	r2, [r3, #4]
 80091fa:	e7eb      	b.n	80091d4 <_malloc_r+0xa8>
 80091fc:	4623      	mov	r3, r4
 80091fe:	6864      	ldr	r4, [r4, #4]
 8009200:	e7ae      	b.n	8009160 <_malloc_r+0x34>
 8009202:	463c      	mov	r4, r7
 8009204:	687f      	ldr	r7, [r7, #4]
 8009206:	e7b6      	b.n	8009176 <_malloc_r+0x4a>
 8009208:	461a      	mov	r2, r3
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	42a3      	cmp	r3, r4
 800920e:	d1fb      	bne.n	8009208 <_malloc_r+0xdc>
 8009210:	2300      	movs	r3, #0
 8009212:	6053      	str	r3, [r2, #4]
 8009214:	e7de      	b.n	80091d4 <_malloc_r+0xa8>
 8009216:	230c      	movs	r3, #12
 8009218:	6033      	str	r3, [r6, #0]
 800921a:	4630      	mov	r0, r6
 800921c:	f000 f81e 	bl	800925c <__malloc_unlock>
 8009220:	e794      	b.n	800914c <_malloc_r+0x20>
 8009222:	6005      	str	r5, [r0, #0]
 8009224:	e7d6      	b.n	80091d4 <_malloc_r+0xa8>
 8009226:	bf00      	nop
 8009228:	2000097c 	.word	0x2000097c

0800922c <__ascii_mbtowc>:
 800922c:	b082      	sub	sp, #8
 800922e:	b901      	cbnz	r1, 8009232 <__ascii_mbtowc+0x6>
 8009230:	a901      	add	r1, sp, #4
 8009232:	b142      	cbz	r2, 8009246 <__ascii_mbtowc+0x1a>
 8009234:	b14b      	cbz	r3, 800924a <__ascii_mbtowc+0x1e>
 8009236:	7813      	ldrb	r3, [r2, #0]
 8009238:	600b      	str	r3, [r1, #0]
 800923a:	7812      	ldrb	r2, [r2, #0]
 800923c:	1e10      	subs	r0, r2, #0
 800923e:	bf18      	it	ne
 8009240:	2001      	movne	r0, #1
 8009242:	b002      	add	sp, #8
 8009244:	4770      	bx	lr
 8009246:	4610      	mov	r0, r2
 8009248:	e7fb      	b.n	8009242 <__ascii_mbtowc+0x16>
 800924a:	f06f 0001 	mvn.w	r0, #1
 800924e:	e7f8      	b.n	8009242 <__ascii_mbtowc+0x16>

08009250 <__malloc_lock>:
 8009250:	4801      	ldr	r0, [pc, #4]	@ (8009258 <__malloc_lock+0x8>)
 8009252:	f7fe bd34 	b.w	8007cbe <__retarget_lock_acquire_recursive>
 8009256:	bf00      	nop
 8009258:	20000974 	.word	0x20000974

0800925c <__malloc_unlock>:
 800925c:	4801      	ldr	r0, [pc, #4]	@ (8009264 <__malloc_unlock+0x8>)
 800925e:	f7fe bd2f 	b.w	8007cc0 <__retarget_lock_release_recursive>
 8009262:	bf00      	nop
 8009264:	20000974 	.word	0x20000974

08009268 <_Balloc>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	69c6      	ldr	r6, [r0, #28]
 800926c:	4604      	mov	r4, r0
 800926e:	460d      	mov	r5, r1
 8009270:	b976      	cbnz	r6, 8009290 <_Balloc+0x28>
 8009272:	2010      	movs	r0, #16
 8009274:	f7ff ff30 	bl	80090d8 <malloc>
 8009278:	4602      	mov	r2, r0
 800927a:	61e0      	str	r0, [r4, #28]
 800927c:	b920      	cbnz	r0, 8009288 <_Balloc+0x20>
 800927e:	4b18      	ldr	r3, [pc, #96]	@ (80092e0 <_Balloc+0x78>)
 8009280:	4818      	ldr	r0, [pc, #96]	@ (80092e4 <_Balloc+0x7c>)
 8009282:	216b      	movs	r1, #107	@ 0x6b
 8009284:	f7fe fd3a 	bl	8007cfc <__assert_func>
 8009288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800928c:	6006      	str	r6, [r0, #0]
 800928e:	60c6      	str	r6, [r0, #12]
 8009290:	69e6      	ldr	r6, [r4, #28]
 8009292:	68f3      	ldr	r3, [r6, #12]
 8009294:	b183      	cbz	r3, 80092b8 <_Balloc+0x50>
 8009296:	69e3      	ldr	r3, [r4, #28]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800929e:	b9b8      	cbnz	r0, 80092d0 <_Balloc+0x68>
 80092a0:	2101      	movs	r1, #1
 80092a2:	fa01 f605 	lsl.w	r6, r1, r5
 80092a6:	1d72      	adds	r2, r6, #5
 80092a8:	0092      	lsls	r2, r2, #2
 80092aa:	4620      	mov	r0, r4
 80092ac:	f001 faeb 	bl	800a886 <_calloc_r>
 80092b0:	b160      	cbz	r0, 80092cc <_Balloc+0x64>
 80092b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092b6:	e00e      	b.n	80092d6 <_Balloc+0x6e>
 80092b8:	2221      	movs	r2, #33	@ 0x21
 80092ba:	2104      	movs	r1, #4
 80092bc:	4620      	mov	r0, r4
 80092be:	f001 fae2 	bl	800a886 <_calloc_r>
 80092c2:	69e3      	ldr	r3, [r4, #28]
 80092c4:	60f0      	str	r0, [r6, #12]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e4      	bne.n	8009296 <_Balloc+0x2e>
 80092cc:	2000      	movs	r0, #0
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	6802      	ldr	r2, [r0, #0]
 80092d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092d6:	2300      	movs	r3, #0
 80092d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092dc:	e7f7      	b.n	80092ce <_Balloc+0x66>
 80092de:	bf00      	nop
 80092e0:	0800ccf7 	.word	0x0800ccf7
 80092e4:	0800ce82 	.word	0x0800ce82

080092e8 <_Bfree>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	69c6      	ldr	r6, [r0, #28]
 80092ec:	4605      	mov	r5, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	b976      	cbnz	r6, 8009310 <_Bfree+0x28>
 80092f2:	2010      	movs	r0, #16
 80092f4:	f7ff fef0 	bl	80090d8 <malloc>
 80092f8:	4602      	mov	r2, r0
 80092fa:	61e8      	str	r0, [r5, #28]
 80092fc:	b920      	cbnz	r0, 8009308 <_Bfree+0x20>
 80092fe:	4b09      	ldr	r3, [pc, #36]	@ (8009324 <_Bfree+0x3c>)
 8009300:	4809      	ldr	r0, [pc, #36]	@ (8009328 <_Bfree+0x40>)
 8009302:	218f      	movs	r1, #143	@ 0x8f
 8009304:	f7fe fcfa 	bl	8007cfc <__assert_func>
 8009308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800930c:	6006      	str	r6, [r0, #0]
 800930e:	60c6      	str	r6, [r0, #12]
 8009310:	b13c      	cbz	r4, 8009322 <_Bfree+0x3a>
 8009312:	69eb      	ldr	r3, [r5, #28]
 8009314:	6862      	ldr	r2, [r4, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800931c:	6021      	str	r1, [r4, #0]
 800931e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009322:	bd70      	pop	{r4, r5, r6, pc}
 8009324:	0800ccf7 	.word	0x0800ccf7
 8009328:	0800ce82 	.word	0x0800ce82

0800932c <__multadd>:
 800932c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009330:	690d      	ldr	r5, [r1, #16]
 8009332:	4607      	mov	r7, r0
 8009334:	460c      	mov	r4, r1
 8009336:	461e      	mov	r6, r3
 8009338:	f101 0c14 	add.w	ip, r1, #20
 800933c:	2000      	movs	r0, #0
 800933e:	f8dc 3000 	ldr.w	r3, [ip]
 8009342:	b299      	uxth	r1, r3
 8009344:	fb02 6101 	mla	r1, r2, r1, r6
 8009348:	0c1e      	lsrs	r6, r3, #16
 800934a:	0c0b      	lsrs	r3, r1, #16
 800934c:	fb02 3306 	mla	r3, r2, r6, r3
 8009350:	b289      	uxth	r1, r1
 8009352:	3001      	adds	r0, #1
 8009354:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009358:	4285      	cmp	r5, r0
 800935a:	f84c 1b04 	str.w	r1, [ip], #4
 800935e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009362:	dcec      	bgt.n	800933e <__multadd+0x12>
 8009364:	b30e      	cbz	r6, 80093aa <__multadd+0x7e>
 8009366:	68a3      	ldr	r3, [r4, #8]
 8009368:	42ab      	cmp	r3, r5
 800936a:	dc19      	bgt.n	80093a0 <__multadd+0x74>
 800936c:	6861      	ldr	r1, [r4, #4]
 800936e:	4638      	mov	r0, r7
 8009370:	3101      	adds	r1, #1
 8009372:	f7ff ff79 	bl	8009268 <_Balloc>
 8009376:	4680      	mov	r8, r0
 8009378:	b928      	cbnz	r0, 8009386 <__multadd+0x5a>
 800937a:	4602      	mov	r2, r0
 800937c:	4b0c      	ldr	r3, [pc, #48]	@ (80093b0 <__multadd+0x84>)
 800937e:	480d      	ldr	r0, [pc, #52]	@ (80093b4 <__multadd+0x88>)
 8009380:	21ba      	movs	r1, #186	@ 0xba
 8009382:	f7fe fcbb 	bl	8007cfc <__assert_func>
 8009386:	6922      	ldr	r2, [r4, #16]
 8009388:	3202      	adds	r2, #2
 800938a:	f104 010c 	add.w	r1, r4, #12
 800938e:	0092      	lsls	r2, r2, #2
 8009390:	300c      	adds	r0, #12
 8009392:	f7fe fc96 	bl	8007cc2 <memcpy>
 8009396:	4621      	mov	r1, r4
 8009398:	4638      	mov	r0, r7
 800939a:	f7ff ffa5 	bl	80092e8 <_Bfree>
 800939e:	4644      	mov	r4, r8
 80093a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093a4:	3501      	adds	r5, #1
 80093a6:	615e      	str	r6, [r3, #20]
 80093a8:	6125      	str	r5, [r4, #16]
 80093aa:	4620      	mov	r0, r4
 80093ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b0:	0800ce11 	.word	0x0800ce11
 80093b4:	0800ce82 	.word	0x0800ce82

080093b8 <__s2b>:
 80093b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093bc:	460c      	mov	r4, r1
 80093be:	4615      	mov	r5, r2
 80093c0:	461f      	mov	r7, r3
 80093c2:	2209      	movs	r2, #9
 80093c4:	3308      	adds	r3, #8
 80093c6:	4606      	mov	r6, r0
 80093c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80093cc:	2100      	movs	r1, #0
 80093ce:	2201      	movs	r2, #1
 80093d0:	429a      	cmp	r2, r3
 80093d2:	db09      	blt.n	80093e8 <__s2b+0x30>
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff ff47 	bl	8009268 <_Balloc>
 80093da:	b940      	cbnz	r0, 80093ee <__s2b+0x36>
 80093dc:	4602      	mov	r2, r0
 80093de:	4b19      	ldr	r3, [pc, #100]	@ (8009444 <__s2b+0x8c>)
 80093e0:	4819      	ldr	r0, [pc, #100]	@ (8009448 <__s2b+0x90>)
 80093e2:	21d3      	movs	r1, #211	@ 0xd3
 80093e4:	f7fe fc8a 	bl	8007cfc <__assert_func>
 80093e8:	0052      	lsls	r2, r2, #1
 80093ea:	3101      	adds	r1, #1
 80093ec:	e7f0      	b.n	80093d0 <__s2b+0x18>
 80093ee:	9b08      	ldr	r3, [sp, #32]
 80093f0:	6143      	str	r3, [r0, #20]
 80093f2:	2d09      	cmp	r5, #9
 80093f4:	f04f 0301 	mov.w	r3, #1
 80093f8:	6103      	str	r3, [r0, #16]
 80093fa:	dd16      	ble.n	800942a <__s2b+0x72>
 80093fc:	f104 0909 	add.w	r9, r4, #9
 8009400:	46c8      	mov	r8, r9
 8009402:	442c      	add	r4, r5
 8009404:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009408:	4601      	mov	r1, r0
 800940a:	3b30      	subs	r3, #48	@ 0x30
 800940c:	220a      	movs	r2, #10
 800940e:	4630      	mov	r0, r6
 8009410:	f7ff ff8c 	bl	800932c <__multadd>
 8009414:	45a0      	cmp	r8, r4
 8009416:	d1f5      	bne.n	8009404 <__s2b+0x4c>
 8009418:	f1a5 0408 	sub.w	r4, r5, #8
 800941c:	444c      	add	r4, r9
 800941e:	1b2d      	subs	r5, r5, r4
 8009420:	1963      	adds	r3, r4, r5
 8009422:	42bb      	cmp	r3, r7
 8009424:	db04      	blt.n	8009430 <__s2b+0x78>
 8009426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800942a:	340a      	adds	r4, #10
 800942c:	2509      	movs	r5, #9
 800942e:	e7f6      	b.n	800941e <__s2b+0x66>
 8009430:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009434:	4601      	mov	r1, r0
 8009436:	3b30      	subs	r3, #48	@ 0x30
 8009438:	220a      	movs	r2, #10
 800943a:	4630      	mov	r0, r6
 800943c:	f7ff ff76 	bl	800932c <__multadd>
 8009440:	e7ee      	b.n	8009420 <__s2b+0x68>
 8009442:	bf00      	nop
 8009444:	0800ce11 	.word	0x0800ce11
 8009448:	0800ce82 	.word	0x0800ce82

0800944c <__hi0bits>:
 800944c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009450:	4603      	mov	r3, r0
 8009452:	bf36      	itet	cc
 8009454:	0403      	lslcc	r3, r0, #16
 8009456:	2000      	movcs	r0, #0
 8009458:	2010      	movcc	r0, #16
 800945a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800945e:	bf3c      	itt	cc
 8009460:	021b      	lslcc	r3, r3, #8
 8009462:	3008      	addcc	r0, #8
 8009464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009468:	bf3c      	itt	cc
 800946a:	011b      	lslcc	r3, r3, #4
 800946c:	3004      	addcc	r0, #4
 800946e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009472:	bf3c      	itt	cc
 8009474:	009b      	lslcc	r3, r3, #2
 8009476:	3002      	addcc	r0, #2
 8009478:	2b00      	cmp	r3, #0
 800947a:	db05      	blt.n	8009488 <__hi0bits+0x3c>
 800947c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009480:	f100 0001 	add.w	r0, r0, #1
 8009484:	bf08      	it	eq
 8009486:	2020      	moveq	r0, #32
 8009488:	4770      	bx	lr

0800948a <__lo0bits>:
 800948a:	6803      	ldr	r3, [r0, #0]
 800948c:	4602      	mov	r2, r0
 800948e:	f013 0007 	ands.w	r0, r3, #7
 8009492:	d00b      	beq.n	80094ac <__lo0bits+0x22>
 8009494:	07d9      	lsls	r1, r3, #31
 8009496:	d421      	bmi.n	80094dc <__lo0bits+0x52>
 8009498:	0798      	lsls	r0, r3, #30
 800949a:	bf49      	itett	mi
 800949c:	085b      	lsrmi	r3, r3, #1
 800949e:	089b      	lsrpl	r3, r3, #2
 80094a0:	2001      	movmi	r0, #1
 80094a2:	6013      	strmi	r3, [r2, #0]
 80094a4:	bf5c      	itt	pl
 80094a6:	6013      	strpl	r3, [r2, #0]
 80094a8:	2002      	movpl	r0, #2
 80094aa:	4770      	bx	lr
 80094ac:	b299      	uxth	r1, r3
 80094ae:	b909      	cbnz	r1, 80094b4 <__lo0bits+0x2a>
 80094b0:	0c1b      	lsrs	r3, r3, #16
 80094b2:	2010      	movs	r0, #16
 80094b4:	b2d9      	uxtb	r1, r3
 80094b6:	b909      	cbnz	r1, 80094bc <__lo0bits+0x32>
 80094b8:	3008      	adds	r0, #8
 80094ba:	0a1b      	lsrs	r3, r3, #8
 80094bc:	0719      	lsls	r1, r3, #28
 80094be:	bf04      	itt	eq
 80094c0:	091b      	lsreq	r3, r3, #4
 80094c2:	3004      	addeq	r0, #4
 80094c4:	0799      	lsls	r1, r3, #30
 80094c6:	bf04      	itt	eq
 80094c8:	089b      	lsreq	r3, r3, #2
 80094ca:	3002      	addeq	r0, #2
 80094cc:	07d9      	lsls	r1, r3, #31
 80094ce:	d403      	bmi.n	80094d8 <__lo0bits+0x4e>
 80094d0:	085b      	lsrs	r3, r3, #1
 80094d2:	f100 0001 	add.w	r0, r0, #1
 80094d6:	d003      	beq.n	80094e0 <__lo0bits+0x56>
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	4770      	bx	lr
 80094dc:	2000      	movs	r0, #0
 80094de:	4770      	bx	lr
 80094e0:	2020      	movs	r0, #32
 80094e2:	4770      	bx	lr

080094e4 <__i2b>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	460c      	mov	r4, r1
 80094e8:	2101      	movs	r1, #1
 80094ea:	f7ff febd 	bl	8009268 <_Balloc>
 80094ee:	4602      	mov	r2, r0
 80094f0:	b928      	cbnz	r0, 80094fe <__i2b+0x1a>
 80094f2:	4b05      	ldr	r3, [pc, #20]	@ (8009508 <__i2b+0x24>)
 80094f4:	4805      	ldr	r0, [pc, #20]	@ (800950c <__i2b+0x28>)
 80094f6:	f240 1145 	movw	r1, #325	@ 0x145
 80094fa:	f7fe fbff 	bl	8007cfc <__assert_func>
 80094fe:	2301      	movs	r3, #1
 8009500:	6144      	str	r4, [r0, #20]
 8009502:	6103      	str	r3, [r0, #16]
 8009504:	bd10      	pop	{r4, pc}
 8009506:	bf00      	nop
 8009508:	0800ce11 	.word	0x0800ce11
 800950c:	0800ce82 	.word	0x0800ce82

08009510 <__multiply>:
 8009510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009514:	4614      	mov	r4, r2
 8009516:	690a      	ldr	r2, [r1, #16]
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	429a      	cmp	r2, r3
 800951c:	bfa8      	it	ge
 800951e:	4623      	movge	r3, r4
 8009520:	460f      	mov	r7, r1
 8009522:	bfa4      	itt	ge
 8009524:	460c      	movge	r4, r1
 8009526:	461f      	movge	r7, r3
 8009528:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800952c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009530:	68a3      	ldr	r3, [r4, #8]
 8009532:	6861      	ldr	r1, [r4, #4]
 8009534:	eb0a 0609 	add.w	r6, sl, r9
 8009538:	42b3      	cmp	r3, r6
 800953a:	b085      	sub	sp, #20
 800953c:	bfb8      	it	lt
 800953e:	3101      	addlt	r1, #1
 8009540:	f7ff fe92 	bl	8009268 <_Balloc>
 8009544:	b930      	cbnz	r0, 8009554 <__multiply+0x44>
 8009546:	4602      	mov	r2, r0
 8009548:	4b44      	ldr	r3, [pc, #272]	@ (800965c <__multiply+0x14c>)
 800954a:	4845      	ldr	r0, [pc, #276]	@ (8009660 <__multiply+0x150>)
 800954c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009550:	f7fe fbd4 	bl	8007cfc <__assert_func>
 8009554:	f100 0514 	add.w	r5, r0, #20
 8009558:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800955c:	462b      	mov	r3, r5
 800955e:	2200      	movs	r2, #0
 8009560:	4543      	cmp	r3, r8
 8009562:	d321      	bcc.n	80095a8 <__multiply+0x98>
 8009564:	f107 0114 	add.w	r1, r7, #20
 8009568:	f104 0214 	add.w	r2, r4, #20
 800956c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009570:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009574:	9302      	str	r3, [sp, #8]
 8009576:	1b13      	subs	r3, r2, r4
 8009578:	3b15      	subs	r3, #21
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	3304      	adds	r3, #4
 8009580:	f104 0715 	add.w	r7, r4, #21
 8009584:	42ba      	cmp	r2, r7
 8009586:	bf38      	it	cc
 8009588:	2304      	movcc	r3, #4
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	9b02      	ldr	r3, [sp, #8]
 800958e:	9103      	str	r1, [sp, #12]
 8009590:	428b      	cmp	r3, r1
 8009592:	d80c      	bhi.n	80095ae <__multiply+0x9e>
 8009594:	2e00      	cmp	r6, #0
 8009596:	dd03      	ble.n	80095a0 <__multiply+0x90>
 8009598:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800959c:	2b00      	cmp	r3, #0
 800959e:	d05b      	beq.n	8009658 <__multiply+0x148>
 80095a0:	6106      	str	r6, [r0, #16]
 80095a2:	b005      	add	sp, #20
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	f843 2b04 	str.w	r2, [r3], #4
 80095ac:	e7d8      	b.n	8009560 <__multiply+0x50>
 80095ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80095b2:	f1ba 0f00 	cmp.w	sl, #0
 80095b6:	d024      	beq.n	8009602 <__multiply+0xf2>
 80095b8:	f104 0e14 	add.w	lr, r4, #20
 80095bc:	46a9      	mov	r9, r5
 80095be:	f04f 0c00 	mov.w	ip, #0
 80095c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80095c6:	f8d9 3000 	ldr.w	r3, [r9]
 80095ca:	fa1f fb87 	uxth.w	fp, r7
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80095d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80095d8:	f8d9 7000 	ldr.w	r7, [r9]
 80095dc:	4463      	add	r3, ip
 80095de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80095e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095f0:	4572      	cmp	r2, lr
 80095f2:	f849 3b04 	str.w	r3, [r9], #4
 80095f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095fa:	d8e2      	bhi.n	80095c2 <__multiply+0xb2>
 80095fc:	9b01      	ldr	r3, [sp, #4]
 80095fe:	f845 c003 	str.w	ip, [r5, r3]
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009608:	3104      	adds	r1, #4
 800960a:	f1b9 0f00 	cmp.w	r9, #0
 800960e:	d021      	beq.n	8009654 <__multiply+0x144>
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	f104 0c14 	add.w	ip, r4, #20
 8009616:	46ae      	mov	lr, r5
 8009618:	f04f 0a00 	mov.w	sl, #0
 800961c:	f8bc b000 	ldrh.w	fp, [ip]
 8009620:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009624:	fb09 770b 	mla	r7, r9, fp, r7
 8009628:	4457      	add	r7, sl
 800962a:	b29b      	uxth	r3, r3
 800962c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009630:	f84e 3b04 	str.w	r3, [lr], #4
 8009634:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009638:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800963c:	f8be 3000 	ldrh.w	r3, [lr]
 8009640:	fb09 330a 	mla	r3, r9, sl, r3
 8009644:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009648:	4562      	cmp	r2, ip
 800964a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800964e:	d8e5      	bhi.n	800961c <__multiply+0x10c>
 8009650:	9f01      	ldr	r7, [sp, #4]
 8009652:	51eb      	str	r3, [r5, r7]
 8009654:	3504      	adds	r5, #4
 8009656:	e799      	b.n	800958c <__multiply+0x7c>
 8009658:	3e01      	subs	r6, #1
 800965a:	e79b      	b.n	8009594 <__multiply+0x84>
 800965c:	0800ce11 	.word	0x0800ce11
 8009660:	0800ce82 	.word	0x0800ce82

08009664 <__pow5mult>:
 8009664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009668:	4615      	mov	r5, r2
 800966a:	f012 0203 	ands.w	r2, r2, #3
 800966e:	4607      	mov	r7, r0
 8009670:	460e      	mov	r6, r1
 8009672:	d007      	beq.n	8009684 <__pow5mult+0x20>
 8009674:	4c25      	ldr	r4, [pc, #148]	@ (800970c <__pow5mult+0xa8>)
 8009676:	3a01      	subs	r2, #1
 8009678:	2300      	movs	r3, #0
 800967a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800967e:	f7ff fe55 	bl	800932c <__multadd>
 8009682:	4606      	mov	r6, r0
 8009684:	10ad      	asrs	r5, r5, #2
 8009686:	d03d      	beq.n	8009704 <__pow5mult+0xa0>
 8009688:	69fc      	ldr	r4, [r7, #28]
 800968a:	b97c      	cbnz	r4, 80096ac <__pow5mult+0x48>
 800968c:	2010      	movs	r0, #16
 800968e:	f7ff fd23 	bl	80090d8 <malloc>
 8009692:	4602      	mov	r2, r0
 8009694:	61f8      	str	r0, [r7, #28]
 8009696:	b928      	cbnz	r0, 80096a4 <__pow5mult+0x40>
 8009698:	4b1d      	ldr	r3, [pc, #116]	@ (8009710 <__pow5mult+0xac>)
 800969a:	481e      	ldr	r0, [pc, #120]	@ (8009714 <__pow5mult+0xb0>)
 800969c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80096a0:	f7fe fb2c 	bl	8007cfc <__assert_func>
 80096a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096a8:	6004      	str	r4, [r0, #0]
 80096aa:	60c4      	str	r4, [r0, #12]
 80096ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80096b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096b4:	b94c      	cbnz	r4, 80096ca <__pow5mult+0x66>
 80096b6:	f240 2171 	movw	r1, #625	@ 0x271
 80096ba:	4638      	mov	r0, r7
 80096bc:	f7ff ff12 	bl	80094e4 <__i2b>
 80096c0:	2300      	movs	r3, #0
 80096c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80096c6:	4604      	mov	r4, r0
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	f04f 0900 	mov.w	r9, #0
 80096ce:	07eb      	lsls	r3, r5, #31
 80096d0:	d50a      	bpl.n	80096e8 <__pow5mult+0x84>
 80096d2:	4631      	mov	r1, r6
 80096d4:	4622      	mov	r2, r4
 80096d6:	4638      	mov	r0, r7
 80096d8:	f7ff ff1a 	bl	8009510 <__multiply>
 80096dc:	4631      	mov	r1, r6
 80096de:	4680      	mov	r8, r0
 80096e0:	4638      	mov	r0, r7
 80096e2:	f7ff fe01 	bl	80092e8 <_Bfree>
 80096e6:	4646      	mov	r6, r8
 80096e8:	106d      	asrs	r5, r5, #1
 80096ea:	d00b      	beq.n	8009704 <__pow5mult+0xa0>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	b938      	cbnz	r0, 8009700 <__pow5mult+0x9c>
 80096f0:	4622      	mov	r2, r4
 80096f2:	4621      	mov	r1, r4
 80096f4:	4638      	mov	r0, r7
 80096f6:	f7ff ff0b 	bl	8009510 <__multiply>
 80096fa:	6020      	str	r0, [r4, #0]
 80096fc:	f8c0 9000 	str.w	r9, [r0]
 8009700:	4604      	mov	r4, r0
 8009702:	e7e4      	b.n	80096ce <__pow5mult+0x6a>
 8009704:	4630      	mov	r0, r6
 8009706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800970a:	bf00      	nop
 800970c:	0800cedc 	.word	0x0800cedc
 8009710:	0800ccf7 	.word	0x0800ccf7
 8009714:	0800ce82 	.word	0x0800ce82

08009718 <__lshift>:
 8009718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	460c      	mov	r4, r1
 800971e:	6849      	ldr	r1, [r1, #4]
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009726:	68a3      	ldr	r3, [r4, #8]
 8009728:	4607      	mov	r7, r0
 800972a:	4691      	mov	r9, r2
 800972c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009730:	f108 0601 	add.w	r6, r8, #1
 8009734:	42b3      	cmp	r3, r6
 8009736:	db0b      	blt.n	8009750 <__lshift+0x38>
 8009738:	4638      	mov	r0, r7
 800973a:	f7ff fd95 	bl	8009268 <_Balloc>
 800973e:	4605      	mov	r5, r0
 8009740:	b948      	cbnz	r0, 8009756 <__lshift+0x3e>
 8009742:	4602      	mov	r2, r0
 8009744:	4b28      	ldr	r3, [pc, #160]	@ (80097e8 <__lshift+0xd0>)
 8009746:	4829      	ldr	r0, [pc, #164]	@ (80097ec <__lshift+0xd4>)
 8009748:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800974c:	f7fe fad6 	bl	8007cfc <__assert_func>
 8009750:	3101      	adds	r1, #1
 8009752:	005b      	lsls	r3, r3, #1
 8009754:	e7ee      	b.n	8009734 <__lshift+0x1c>
 8009756:	2300      	movs	r3, #0
 8009758:	f100 0114 	add.w	r1, r0, #20
 800975c:	f100 0210 	add.w	r2, r0, #16
 8009760:	4618      	mov	r0, r3
 8009762:	4553      	cmp	r3, sl
 8009764:	db33      	blt.n	80097ce <__lshift+0xb6>
 8009766:	6920      	ldr	r0, [r4, #16]
 8009768:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800976c:	f104 0314 	add.w	r3, r4, #20
 8009770:	f019 091f 	ands.w	r9, r9, #31
 8009774:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009778:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800977c:	d02b      	beq.n	80097d6 <__lshift+0xbe>
 800977e:	f1c9 0e20 	rsb	lr, r9, #32
 8009782:	468a      	mov	sl, r1
 8009784:	2200      	movs	r2, #0
 8009786:	6818      	ldr	r0, [r3, #0]
 8009788:	fa00 f009 	lsl.w	r0, r0, r9
 800978c:	4310      	orrs	r0, r2
 800978e:	f84a 0b04 	str.w	r0, [sl], #4
 8009792:	f853 2b04 	ldr.w	r2, [r3], #4
 8009796:	459c      	cmp	ip, r3
 8009798:	fa22 f20e 	lsr.w	r2, r2, lr
 800979c:	d8f3      	bhi.n	8009786 <__lshift+0x6e>
 800979e:	ebac 0304 	sub.w	r3, ip, r4
 80097a2:	3b15      	subs	r3, #21
 80097a4:	f023 0303 	bic.w	r3, r3, #3
 80097a8:	3304      	adds	r3, #4
 80097aa:	f104 0015 	add.w	r0, r4, #21
 80097ae:	4584      	cmp	ip, r0
 80097b0:	bf38      	it	cc
 80097b2:	2304      	movcc	r3, #4
 80097b4:	50ca      	str	r2, [r1, r3]
 80097b6:	b10a      	cbz	r2, 80097bc <__lshift+0xa4>
 80097b8:	f108 0602 	add.w	r6, r8, #2
 80097bc:	3e01      	subs	r6, #1
 80097be:	4638      	mov	r0, r7
 80097c0:	612e      	str	r6, [r5, #16]
 80097c2:	4621      	mov	r1, r4
 80097c4:	f7ff fd90 	bl	80092e8 <_Bfree>
 80097c8:	4628      	mov	r0, r5
 80097ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80097d2:	3301      	adds	r3, #1
 80097d4:	e7c5      	b.n	8009762 <__lshift+0x4a>
 80097d6:	3904      	subs	r1, #4
 80097d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80097dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80097e0:	459c      	cmp	ip, r3
 80097e2:	d8f9      	bhi.n	80097d8 <__lshift+0xc0>
 80097e4:	e7ea      	b.n	80097bc <__lshift+0xa4>
 80097e6:	bf00      	nop
 80097e8:	0800ce11 	.word	0x0800ce11
 80097ec:	0800ce82 	.word	0x0800ce82

080097f0 <__mcmp>:
 80097f0:	690a      	ldr	r2, [r1, #16]
 80097f2:	4603      	mov	r3, r0
 80097f4:	6900      	ldr	r0, [r0, #16]
 80097f6:	1a80      	subs	r0, r0, r2
 80097f8:	b530      	push	{r4, r5, lr}
 80097fa:	d10e      	bne.n	800981a <__mcmp+0x2a>
 80097fc:	3314      	adds	r3, #20
 80097fe:	3114      	adds	r1, #20
 8009800:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009804:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009808:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800980c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009810:	4295      	cmp	r5, r2
 8009812:	d003      	beq.n	800981c <__mcmp+0x2c>
 8009814:	d205      	bcs.n	8009822 <__mcmp+0x32>
 8009816:	f04f 30ff 	mov.w	r0, #4294967295
 800981a:	bd30      	pop	{r4, r5, pc}
 800981c:	42a3      	cmp	r3, r4
 800981e:	d3f3      	bcc.n	8009808 <__mcmp+0x18>
 8009820:	e7fb      	b.n	800981a <__mcmp+0x2a>
 8009822:	2001      	movs	r0, #1
 8009824:	e7f9      	b.n	800981a <__mcmp+0x2a>
	...

08009828 <__mdiff>:
 8009828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	4689      	mov	r9, r1
 800982e:	4606      	mov	r6, r0
 8009830:	4611      	mov	r1, r2
 8009832:	4648      	mov	r0, r9
 8009834:	4614      	mov	r4, r2
 8009836:	f7ff ffdb 	bl	80097f0 <__mcmp>
 800983a:	1e05      	subs	r5, r0, #0
 800983c:	d112      	bne.n	8009864 <__mdiff+0x3c>
 800983e:	4629      	mov	r1, r5
 8009840:	4630      	mov	r0, r6
 8009842:	f7ff fd11 	bl	8009268 <_Balloc>
 8009846:	4602      	mov	r2, r0
 8009848:	b928      	cbnz	r0, 8009856 <__mdiff+0x2e>
 800984a:	4b3f      	ldr	r3, [pc, #252]	@ (8009948 <__mdiff+0x120>)
 800984c:	f240 2137 	movw	r1, #567	@ 0x237
 8009850:	483e      	ldr	r0, [pc, #248]	@ (800994c <__mdiff+0x124>)
 8009852:	f7fe fa53 	bl	8007cfc <__assert_func>
 8009856:	2301      	movs	r3, #1
 8009858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800985c:	4610      	mov	r0, r2
 800985e:	b003      	add	sp, #12
 8009860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009864:	bfbc      	itt	lt
 8009866:	464b      	movlt	r3, r9
 8009868:	46a1      	movlt	r9, r4
 800986a:	4630      	mov	r0, r6
 800986c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009870:	bfba      	itte	lt
 8009872:	461c      	movlt	r4, r3
 8009874:	2501      	movlt	r5, #1
 8009876:	2500      	movge	r5, #0
 8009878:	f7ff fcf6 	bl	8009268 <_Balloc>
 800987c:	4602      	mov	r2, r0
 800987e:	b918      	cbnz	r0, 8009888 <__mdiff+0x60>
 8009880:	4b31      	ldr	r3, [pc, #196]	@ (8009948 <__mdiff+0x120>)
 8009882:	f240 2145 	movw	r1, #581	@ 0x245
 8009886:	e7e3      	b.n	8009850 <__mdiff+0x28>
 8009888:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800988c:	6926      	ldr	r6, [r4, #16]
 800988e:	60c5      	str	r5, [r0, #12]
 8009890:	f109 0310 	add.w	r3, r9, #16
 8009894:	f109 0514 	add.w	r5, r9, #20
 8009898:	f104 0e14 	add.w	lr, r4, #20
 800989c:	f100 0b14 	add.w	fp, r0, #20
 80098a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80098a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	46d9      	mov	r9, fp
 80098ac:	f04f 0c00 	mov.w	ip, #0
 80098b0:	9b01      	ldr	r3, [sp, #4]
 80098b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80098b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	fa1f f38a 	uxth.w	r3, sl
 80098c0:	4619      	mov	r1, r3
 80098c2:	b283      	uxth	r3, r0
 80098c4:	1acb      	subs	r3, r1, r3
 80098c6:	0c00      	lsrs	r0, r0, #16
 80098c8:	4463      	add	r3, ip
 80098ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80098ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80098d8:	4576      	cmp	r6, lr
 80098da:	f849 3b04 	str.w	r3, [r9], #4
 80098de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098e2:	d8e5      	bhi.n	80098b0 <__mdiff+0x88>
 80098e4:	1b33      	subs	r3, r6, r4
 80098e6:	3b15      	subs	r3, #21
 80098e8:	f023 0303 	bic.w	r3, r3, #3
 80098ec:	3415      	adds	r4, #21
 80098ee:	3304      	adds	r3, #4
 80098f0:	42a6      	cmp	r6, r4
 80098f2:	bf38      	it	cc
 80098f4:	2304      	movcc	r3, #4
 80098f6:	441d      	add	r5, r3
 80098f8:	445b      	add	r3, fp
 80098fa:	461e      	mov	r6, r3
 80098fc:	462c      	mov	r4, r5
 80098fe:	4544      	cmp	r4, r8
 8009900:	d30e      	bcc.n	8009920 <__mdiff+0xf8>
 8009902:	f108 0103 	add.w	r1, r8, #3
 8009906:	1b49      	subs	r1, r1, r5
 8009908:	f021 0103 	bic.w	r1, r1, #3
 800990c:	3d03      	subs	r5, #3
 800990e:	45a8      	cmp	r8, r5
 8009910:	bf38      	it	cc
 8009912:	2100      	movcc	r1, #0
 8009914:	440b      	add	r3, r1
 8009916:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800991a:	b191      	cbz	r1, 8009942 <__mdiff+0x11a>
 800991c:	6117      	str	r7, [r2, #16]
 800991e:	e79d      	b.n	800985c <__mdiff+0x34>
 8009920:	f854 1b04 	ldr.w	r1, [r4], #4
 8009924:	46e6      	mov	lr, ip
 8009926:	0c08      	lsrs	r0, r1, #16
 8009928:	fa1c fc81 	uxtah	ip, ip, r1
 800992c:	4471      	add	r1, lr
 800992e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009932:	b289      	uxth	r1, r1
 8009934:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009938:	f846 1b04 	str.w	r1, [r6], #4
 800993c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009940:	e7dd      	b.n	80098fe <__mdiff+0xd6>
 8009942:	3f01      	subs	r7, #1
 8009944:	e7e7      	b.n	8009916 <__mdiff+0xee>
 8009946:	bf00      	nop
 8009948:	0800ce11 	.word	0x0800ce11
 800994c:	0800ce82 	.word	0x0800ce82

08009950 <__ulp>:
 8009950:	b082      	sub	sp, #8
 8009952:	ed8d 0b00 	vstr	d0, [sp]
 8009956:	9a01      	ldr	r2, [sp, #4]
 8009958:	4b0f      	ldr	r3, [pc, #60]	@ (8009998 <__ulp+0x48>)
 800995a:	4013      	ands	r3, r2
 800995c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009960:	2b00      	cmp	r3, #0
 8009962:	dc08      	bgt.n	8009976 <__ulp+0x26>
 8009964:	425b      	negs	r3, r3
 8009966:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800996a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800996e:	da04      	bge.n	800997a <__ulp+0x2a>
 8009970:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009974:	4113      	asrs	r3, r2
 8009976:	2200      	movs	r2, #0
 8009978:	e008      	b.n	800998c <__ulp+0x3c>
 800997a:	f1a2 0314 	sub.w	r3, r2, #20
 800997e:	2b1e      	cmp	r3, #30
 8009980:	bfda      	itte	le
 8009982:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009986:	40da      	lsrle	r2, r3
 8009988:	2201      	movgt	r2, #1
 800998a:	2300      	movs	r3, #0
 800998c:	4619      	mov	r1, r3
 800998e:	4610      	mov	r0, r2
 8009990:	ec41 0b10 	vmov	d0, r0, r1
 8009994:	b002      	add	sp, #8
 8009996:	4770      	bx	lr
 8009998:	7ff00000 	.word	0x7ff00000

0800999c <__b2d>:
 800999c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a0:	6906      	ldr	r6, [r0, #16]
 80099a2:	f100 0814 	add.w	r8, r0, #20
 80099a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80099aa:	1f37      	subs	r7, r6, #4
 80099ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80099b0:	4610      	mov	r0, r2
 80099b2:	f7ff fd4b 	bl	800944c <__hi0bits>
 80099b6:	f1c0 0320 	rsb	r3, r0, #32
 80099ba:	280a      	cmp	r0, #10
 80099bc:	600b      	str	r3, [r1, #0]
 80099be:	491b      	ldr	r1, [pc, #108]	@ (8009a2c <__b2d+0x90>)
 80099c0:	dc15      	bgt.n	80099ee <__b2d+0x52>
 80099c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80099c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80099ca:	45b8      	cmp	r8, r7
 80099cc:	ea43 0501 	orr.w	r5, r3, r1
 80099d0:	bf34      	ite	cc
 80099d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80099d6:	2300      	movcs	r3, #0
 80099d8:	3015      	adds	r0, #21
 80099da:	fa02 f000 	lsl.w	r0, r2, r0
 80099de:	fa23 f30c 	lsr.w	r3, r3, ip
 80099e2:	4303      	orrs	r3, r0
 80099e4:	461c      	mov	r4, r3
 80099e6:	ec45 4b10 	vmov	d0, r4, r5
 80099ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ee:	45b8      	cmp	r8, r7
 80099f0:	bf3a      	itte	cc
 80099f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80099f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80099fa:	2300      	movcs	r3, #0
 80099fc:	380b      	subs	r0, #11
 80099fe:	d012      	beq.n	8009a26 <__b2d+0x8a>
 8009a00:	f1c0 0120 	rsb	r1, r0, #32
 8009a04:	fa23 f401 	lsr.w	r4, r3, r1
 8009a08:	4082      	lsls	r2, r0
 8009a0a:	4322      	orrs	r2, r4
 8009a0c:	4547      	cmp	r7, r8
 8009a0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009a12:	bf8c      	ite	hi
 8009a14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009a18:	2200      	movls	r2, #0
 8009a1a:	4083      	lsls	r3, r0
 8009a1c:	40ca      	lsrs	r2, r1
 8009a1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009a22:	4313      	orrs	r3, r2
 8009a24:	e7de      	b.n	80099e4 <__b2d+0x48>
 8009a26:	ea42 0501 	orr.w	r5, r2, r1
 8009a2a:	e7db      	b.n	80099e4 <__b2d+0x48>
 8009a2c:	3ff00000 	.word	0x3ff00000

08009a30 <__d2b>:
 8009a30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	460f      	mov	r7, r1
 8009a36:	2101      	movs	r1, #1
 8009a38:	ec59 8b10 	vmov	r8, r9, d0
 8009a3c:	4616      	mov	r6, r2
 8009a3e:	f7ff fc13 	bl	8009268 <_Balloc>
 8009a42:	4604      	mov	r4, r0
 8009a44:	b930      	cbnz	r0, 8009a54 <__d2b+0x24>
 8009a46:	4602      	mov	r2, r0
 8009a48:	4b23      	ldr	r3, [pc, #140]	@ (8009ad8 <__d2b+0xa8>)
 8009a4a:	4824      	ldr	r0, [pc, #144]	@ (8009adc <__d2b+0xac>)
 8009a4c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a50:	f7fe f954 	bl	8007cfc <__assert_func>
 8009a54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a5c:	b10d      	cbz	r5, 8009a62 <__d2b+0x32>
 8009a5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	f1b8 0300 	subs.w	r3, r8, #0
 8009a68:	d023      	beq.n	8009ab2 <__d2b+0x82>
 8009a6a:	4668      	mov	r0, sp
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	f7ff fd0c 	bl	800948a <__lo0bits>
 8009a72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a76:	b1d0      	cbz	r0, 8009aae <__d2b+0x7e>
 8009a78:	f1c0 0320 	rsb	r3, r0, #32
 8009a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a80:	430b      	orrs	r3, r1
 8009a82:	40c2      	lsrs	r2, r0
 8009a84:	6163      	str	r3, [r4, #20]
 8009a86:	9201      	str	r2, [sp, #4]
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	61a3      	str	r3, [r4, #24]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	bf0c      	ite	eq
 8009a90:	2201      	moveq	r2, #1
 8009a92:	2202      	movne	r2, #2
 8009a94:	6122      	str	r2, [r4, #16]
 8009a96:	b1a5      	cbz	r5, 8009ac2 <__d2b+0x92>
 8009a98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a9c:	4405      	add	r5, r0
 8009a9e:	603d      	str	r5, [r7, #0]
 8009aa0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009aa4:	6030      	str	r0, [r6, #0]
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	b003      	add	sp, #12
 8009aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aae:	6161      	str	r1, [r4, #20]
 8009ab0:	e7ea      	b.n	8009a88 <__d2b+0x58>
 8009ab2:	a801      	add	r0, sp, #4
 8009ab4:	f7ff fce9 	bl	800948a <__lo0bits>
 8009ab8:	9b01      	ldr	r3, [sp, #4]
 8009aba:	6163      	str	r3, [r4, #20]
 8009abc:	3020      	adds	r0, #32
 8009abe:	2201      	movs	r2, #1
 8009ac0:	e7e8      	b.n	8009a94 <__d2b+0x64>
 8009ac2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ac6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009aca:	6038      	str	r0, [r7, #0]
 8009acc:	6918      	ldr	r0, [r3, #16]
 8009ace:	f7ff fcbd 	bl	800944c <__hi0bits>
 8009ad2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ad6:	e7e5      	b.n	8009aa4 <__d2b+0x74>
 8009ad8:	0800ce11 	.word	0x0800ce11
 8009adc:	0800ce82 	.word	0x0800ce82

08009ae0 <__ratio>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	b085      	sub	sp, #20
 8009ae6:	e9cd 1000 	strd	r1, r0, [sp]
 8009aea:	a902      	add	r1, sp, #8
 8009aec:	f7ff ff56 	bl	800999c <__b2d>
 8009af0:	9800      	ldr	r0, [sp, #0]
 8009af2:	a903      	add	r1, sp, #12
 8009af4:	ec55 4b10 	vmov	r4, r5, d0
 8009af8:	f7ff ff50 	bl	800999c <__b2d>
 8009afc:	9b01      	ldr	r3, [sp, #4]
 8009afe:	6919      	ldr	r1, [r3, #16]
 8009b00:	9b00      	ldr	r3, [sp, #0]
 8009b02:	691b      	ldr	r3, [r3, #16]
 8009b04:	1ac9      	subs	r1, r1, r3
 8009b06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	ec5b ab10 	vmov	sl, fp, d0
 8009b10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	bfce      	itee	gt
 8009b18:	462a      	movgt	r2, r5
 8009b1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b1e:	465a      	movle	r2, fp
 8009b20:	462f      	mov	r7, r5
 8009b22:	46d9      	mov	r9, fp
 8009b24:	bfcc      	ite	gt
 8009b26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009b2e:	464b      	mov	r3, r9
 8009b30:	4652      	mov	r2, sl
 8009b32:	4620      	mov	r0, r4
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 fe91 	bl	800085c <__aeabi_ddiv>
 8009b3a:	ec41 0b10 	vmov	d0, r0, r1
 8009b3e:	b005      	add	sp, #20
 8009b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b44 <__copybits>:
 8009b44:	3901      	subs	r1, #1
 8009b46:	b570      	push	{r4, r5, r6, lr}
 8009b48:	1149      	asrs	r1, r1, #5
 8009b4a:	6914      	ldr	r4, [r2, #16]
 8009b4c:	3101      	adds	r1, #1
 8009b4e:	f102 0314 	add.w	r3, r2, #20
 8009b52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b5a:	1f05      	subs	r5, r0, #4
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	d30c      	bcc.n	8009b7a <__copybits+0x36>
 8009b60:	1aa3      	subs	r3, r4, r2
 8009b62:	3b11      	subs	r3, #17
 8009b64:	f023 0303 	bic.w	r3, r3, #3
 8009b68:	3211      	adds	r2, #17
 8009b6a:	42a2      	cmp	r2, r4
 8009b6c:	bf88      	it	hi
 8009b6e:	2300      	movhi	r3, #0
 8009b70:	4418      	add	r0, r3
 8009b72:	2300      	movs	r3, #0
 8009b74:	4288      	cmp	r0, r1
 8009b76:	d305      	bcc.n	8009b84 <__copybits+0x40>
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b82:	e7eb      	b.n	8009b5c <__copybits+0x18>
 8009b84:	f840 3b04 	str.w	r3, [r0], #4
 8009b88:	e7f4      	b.n	8009b74 <__copybits+0x30>

08009b8a <__any_on>:
 8009b8a:	f100 0214 	add.w	r2, r0, #20
 8009b8e:	6900      	ldr	r0, [r0, #16]
 8009b90:	114b      	asrs	r3, r1, #5
 8009b92:	4298      	cmp	r0, r3
 8009b94:	b510      	push	{r4, lr}
 8009b96:	db11      	blt.n	8009bbc <__any_on+0x32>
 8009b98:	dd0a      	ble.n	8009bb0 <__any_on+0x26>
 8009b9a:	f011 011f 	ands.w	r1, r1, #31
 8009b9e:	d007      	beq.n	8009bb0 <__any_on+0x26>
 8009ba0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ba4:	fa24 f001 	lsr.w	r0, r4, r1
 8009ba8:	fa00 f101 	lsl.w	r1, r0, r1
 8009bac:	428c      	cmp	r4, r1
 8009bae:	d10b      	bne.n	8009bc8 <__any_on+0x3e>
 8009bb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d803      	bhi.n	8009bc0 <__any_on+0x36>
 8009bb8:	2000      	movs	r0, #0
 8009bba:	bd10      	pop	{r4, pc}
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	e7f7      	b.n	8009bb0 <__any_on+0x26>
 8009bc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	d0f5      	beq.n	8009bb4 <__any_on+0x2a>
 8009bc8:	2001      	movs	r0, #1
 8009bca:	e7f6      	b.n	8009bba <__any_on+0x30>

08009bcc <_strtol_l.constprop.0>:
 8009bcc:	2b24      	cmp	r3, #36	@ 0x24
 8009bce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd2:	4686      	mov	lr, r0
 8009bd4:	4690      	mov	r8, r2
 8009bd6:	d801      	bhi.n	8009bdc <_strtol_l.constprop.0+0x10>
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d106      	bne.n	8009bea <_strtol_l.constprop.0+0x1e>
 8009bdc:	f7fe f844 	bl	8007c68 <__errno>
 8009be0:	2316      	movs	r3, #22
 8009be2:	6003      	str	r3, [r0, #0]
 8009be4:	2000      	movs	r0, #0
 8009be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bea:	4834      	ldr	r0, [pc, #208]	@ (8009cbc <_strtol_l.constprop.0+0xf0>)
 8009bec:	460d      	mov	r5, r1
 8009bee:	462a      	mov	r2, r5
 8009bf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bf4:	5d06      	ldrb	r6, [r0, r4]
 8009bf6:	f016 0608 	ands.w	r6, r6, #8
 8009bfa:	d1f8      	bne.n	8009bee <_strtol_l.constprop.0+0x22>
 8009bfc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009bfe:	d12d      	bne.n	8009c5c <_strtol_l.constprop.0+0x90>
 8009c00:	782c      	ldrb	r4, [r5, #0]
 8009c02:	2601      	movs	r6, #1
 8009c04:	1c95      	adds	r5, r2, #2
 8009c06:	f033 0210 	bics.w	r2, r3, #16
 8009c0a:	d109      	bne.n	8009c20 <_strtol_l.constprop.0+0x54>
 8009c0c:	2c30      	cmp	r4, #48	@ 0x30
 8009c0e:	d12a      	bne.n	8009c66 <_strtol_l.constprop.0+0x9a>
 8009c10:	782a      	ldrb	r2, [r5, #0]
 8009c12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009c16:	2a58      	cmp	r2, #88	@ 0x58
 8009c18:	d125      	bne.n	8009c66 <_strtol_l.constprop.0+0x9a>
 8009c1a:	786c      	ldrb	r4, [r5, #1]
 8009c1c:	2310      	movs	r3, #16
 8009c1e:	3502      	adds	r5, #2
 8009c20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c28:	2200      	movs	r2, #0
 8009c2a:	fbbc f9f3 	udiv	r9, ip, r3
 8009c2e:	4610      	mov	r0, r2
 8009c30:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c38:	2f09      	cmp	r7, #9
 8009c3a:	d81b      	bhi.n	8009c74 <_strtol_l.constprop.0+0xa8>
 8009c3c:	463c      	mov	r4, r7
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	dd27      	ble.n	8009c92 <_strtol_l.constprop.0+0xc6>
 8009c42:	1c57      	adds	r7, r2, #1
 8009c44:	d007      	beq.n	8009c56 <_strtol_l.constprop.0+0x8a>
 8009c46:	4581      	cmp	r9, r0
 8009c48:	d320      	bcc.n	8009c8c <_strtol_l.constprop.0+0xc0>
 8009c4a:	d101      	bne.n	8009c50 <_strtol_l.constprop.0+0x84>
 8009c4c:	45a2      	cmp	sl, r4
 8009c4e:	db1d      	blt.n	8009c8c <_strtol_l.constprop.0+0xc0>
 8009c50:	fb00 4003 	mla	r0, r0, r3, r4
 8009c54:	2201      	movs	r2, #1
 8009c56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c5a:	e7eb      	b.n	8009c34 <_strtol_l.constprop.0+0x68>
 8009c5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009c5e:	bf04      	itt	eq
 8009c60:	782c      	ldrbeq	r4, [r5, #0]
 8009c62:	1c95      	addeq	r5, r2, #2
 8009c64:	e7cf      	b.n	8009c06 <_strtol_l.constprop.0+0x3a>
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1da      	bne.n	8009c20 <_strtol_l.constprop.0+0x54>
 8009c6a:	2c30      	cmp	r4, #48	@ 0x30
 8009c6c:	bf0c      	ite	eq
 8009c6e:	2308      	moveq	r3, #8
 8009c70:	230a      	movne	r3, #10
 8009c72:	e7d5      	b.n	8009c20 <_strtol_l.constprop.0+0x54>
 8009c74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c78:	2f19      	cmp	r7, #25
 8009c7a:	d801      	bhi.n	8009c80 <_strtol_l.constprop.0+0xb4>
 8009c7c:	3c37      	subs	r4, #55	@ 0x37
 8009c7e:	e7de      	b.n	8009c3e <_strtol_l.constprop.0+0x72>
 8009c80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c84:	2f19      	cmp	r7, #25
 8009c86:	d804      	bhi.n	8009c92 <_strtol_l.constprop.0+0xc6>
 8009c88:	3c57      	subs	r4, #87	@ 0x57
 8009c8a:	e7d8      	b.n	8009c3e <_strtol_l.constprop.0+0x72>
 8009c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c90:	e7e1      	b.n	8009c56 <_strtol_l.constprop.0+0x8a>
 8009c92:	1c53      	adds	r3, r2, #1
 8009c94:	d108      	bne.n	8009ca8 <_strtol_l.constprop.0+0xdc>
 8009c96:	2322      	movs	r3, #34	@ 0x22
 8009c98:	f8ce 3000 	str.w	r3, [lr]
 8009c9c:	4660      	mov	r0, ip
 8009c9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ca2:	d0a0      	beq.n	8009be6 <_strtol_l.constprop.0+0x1a>
 8009ca4:	1e69      	subs	r1, r5, #1
 8009ca6:	e006      	b.n	8009cb6 <_strtol_l.constprop.0+0xea>
 8009ca8:	b106      	cbz	r6, 8009cac <_strtol_l.constprop.0+0xe0>
 8009caa:	4240      	negs	r0, r0
 8009cac:	f1b8 0f00 	cmp.w	r8, #0
 8009cb0:	d099      	beq.n	8009be6 <_strtol_l.constprop.0+0x1a>
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	d1f6      	bne.n	8009ca4 <_strtol_l.constprop.0+0xd8>
 8009cb6:	f8c8 1000 	str.w	r1, [r8]
 8009cba:	e794      	b.n	8009be6 <_strtol_l.constprop.0+0x1a>
 8009cbc:	0800cfd9 	.word	0x0800cfd9

08009cc0 <_strtol_r>:
 8009cc0:	f7ff bf84 	b.w	8009bcc <_strtol_l.constprop.0>

08009cc4 <__ascii_wctomb>:
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	b141      	cbz	r1, 8009cdc <__ascii_wctomb+0x18>
 8009cca:	2aff      	cmp	r2, #255	@ 0xff
 8009ccc:	d904      	bls.n	8009cd8 <__ascii_wctomb+0x14>
 8009cce:	228a      	movs	r2, #138	@ 0x8a
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd6:	4770      	bx	lr
 8009cd8:	700a      	strb	r2, [r1, #0]
 8009cda:	2001      	movs	r0, #1
 8009cdc:	4770      	bx	lr

08009cde <__ssputs_r>:
 8009cde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce2:	688e      	ldr	r6, [r1, #8]
 8009ce4:	461f      	mov	r7, r3
 8009ce6:	42be      	cmp	r6, r7
 8009ce8:	680b      	ldr	r3, [r1, #0]
 8009cea:	4682      	mov	sl, r0
 8009cec:	460c      	mov	r4, r1
 8009cee:	4690      	mov	r8, r2
 8009cf0:	d82d      	bhi.n	8009d4e <__ssputs_r+0x70>
 8009cf2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cf6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cfa:	d026      	beq.n	8009d4a <__ssputs_r+0x6c>
 8009cfc:	6965      	ldr	r5, [r4, #20]
 8009cfe:	6909      	ldr	r1, [r1, #16]
 8009d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d04:	eba3 0901 	sub.w	r9, r3, r1
 8009d08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d0c:	1c7b      	adds	r3, r7, #1
 8009d0e:	444b      	add	r3, r9
 8009d10:	106d      	asrs	r5, r5, #1
 8009d12:	429d      	cmp	r5, r3
 8009d14:	bf38      	it	cc
 8009d16:	461d      	movcc	r5, r3
 8009d18:	0553      	lsls	r3, r2, #21
 8009d1a:	d527      	bpl.n	8009d6c <__ssputs_r+0x8e>
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	f7ff fa05 	bl	800912c <_malloc_r>
 8009d22:	4606      	mov	r6, r0
 8009d24:	b360      	cbz	r0, 8009d80 <__ssputs_r+0xa2>
 8009d26:	6921      	ldr	r1, [r4, #16]
 8009d28:	464a      	mov	r2, r9
 8009d2a:	f7fd ffca 	bl	8007cc2 <memcpy>
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	6126      	str	r6, [r4, #16]
 8009d3c:	6165      	str	r5, [r4, #20]
 8009d3e:	444e      	add	r6, r9
 8009d40:	eba5 0509 	sub.w	r5, r5, r9
 8009d44:	6026      	str	r6, [r4, #0]
 8009d46:	60a5      	str	r5, [r4, #8]
 8009d48:	463e      	mov	r6, r7
 8009d4a:	42be      	cmp	r6, r7
 8009d4c:	d900      	bls.n	8009d50 <__ssputs_r+0x72>
 8009d4e:	463e      	mov	r6, r7
 8009d50:	6820      	ldr	r0, [r4, #0]
 8009d52:	4632      	mov	r2, r6
 8009d54:	4641      	mov	r1, r8
 8009d56:	f000 fd64 	bl	800a822 <memmove>
 8009d5a:	68a3      	ldr	r3, [r4, #8]
 8009d5c:	1b9b      	subs	r3, r3, r6
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	4433      	add	r3, r6
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	2000      	movs	r0, #0
 8009d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6c:	462a      	mov	r2, r5
 8009d6e:	f000 fd9e 	bl	800a8ae <_realloc_r>
 8009d72:	4606      	mov	r6, r0
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d1e0      	bne.n	8009d3a <__ssputs_r+0x5c>
 8009d78:	6921      	ldr	r1, [r4, #16]
 8009d7a:	4650      	mov	r0, sl
 8009d7c:	f7fe fe28 	bl	80089d0 <_free_r>
 8009d80:	230c      	movs	r3, #12
 8009d82:	f8ca 3000 	str.w	r3, [sl]
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d92:	e7e9      	b.n	8009d68 <__ssputs_r+0x8a>

08009d94 <_svfiprintf_r>:
 8009d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d98:	4698      	mov	r8, r3
 8009d9a:	898b      	ldrh	r3, [r1, #12]
 8009d9c:	061b      	lsls	r3, r3, #24
 8009d9e:	b09d      	sub	sp, #116	@ 0x74
 8009da0:	4607      	mov	r7, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	4614      	mov	r4, r2
 8009da6:	d510      	bpl.n	8009dca <_svfiprintf_r+0x36>
 8009da8:	690b      	ldr	r3, [r1, #16]
 8009daa:	b973      	cbnz	r3, 8009dca <_svfiprintf_r+0x36>
 8009dac:	2140      	movs	r1, #64	@ 0x40
 8009dae:	f7ff f9bd 	bl	800912c <_malloc_r>
 8009db2:	6028      	str	r0, [r5, #0]
 8009db4:	6128      	str	r0, [r5, #16]
 8009db6:	b930      	cbnz	r0, 8009dc6 <_svfiprintf_r+0x32>
 8009db8:	230c      	movs	r3, #12
 8009dba:	603b      	str	r3, [r7, #0]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	b01d      	add	sp, #116	@ 0x74
 8009dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc6:	2340      	movs	r3, #64	@ 0x40
 8009dc8:	616b      	str	r3, [r5, #20]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dce:	2320      	movs	r3, #32
 8009dd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dd8:	2330      	movs	r3, #48	@ 0x30
 8009dda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f78 <_svfiprintf_r+0x1e4>
 8009dde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009de2:	f04f 0901 	mov.w	r9, #1
 8009de6:	4623      	mov	r3, r4
 8009de8:	469a      	mov	sl, r3
 8009dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dee:	b10a      	cbz	r2, 8009df4 <_svfiprintf_r+0x60>
 8009df0:	2a25      	cmp	r2, #37	@ 0x25
 8009df2:	d1f9      	bne.n	8009de8 <_svfiprintf_r+0x54>
 8009df4:	ebba 0b04 	subs.w	fp, sl, r4
 8009df8:	d00b      	beq.n	8009e12 <_svfiprintf_r+0x7e>
 8009dfa:	465b      	mov	r3, fp
 8009dfc:	4622      	mov	r2, r4
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff ff6c 	bl	8009cde <__ssputs_r>
 8009e06:	3001      	adds	r0, #1
 8009e08:	f000 80a7 	beq.w	8009f5a <_svfiprintf_r+0x1c6>
 8009e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e0e:	445a      	add	r2, fp
 8009e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e12:	f89a 3000 	ldrb.w	r3, [sl]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 809f 	beq.w	8009f5a <_svfiprintf_r+0x1c6>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e26:	f10a 0a01 	add.w	sl, sl, #1
 8009e2a:	9304      	str	r3, [sp, #16]
 8009e2c:	9307      	str	r3, [sp, #28]
 8009e2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e32:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e34:	4654      	mov	r4, sl
 8009e36:	2205      	movs	r2, #5
 8009e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e3c:	484e      	ldr	r0, [pc, #312]	@ (8009f78 <_svfiprintf_r+0x1e4>)
 8009e3e:	f7f6 f9cf 	bl	80001e0 <memchr>
 8009e42:	9a04      	ldr	r2, [sp, #16]
 8009e44:	b9d8      	cbnz	r0, 8009e7e <_svfiprintf_r+0xea>
 8009e46:	06d0      	lsls	r0, r2, #27
 8009e48:	bf44      	itt	mi
 8009e4a:	2320      	movmi	r3, #32
 8009e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e50:	0711      	lsls	r1, r2, #28
 8009e52:	bf44      	itt	mi
 8009e54:	232b      	movmi	r3, #43	@ 0x2b
 8009e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e60:	d015      	beq.n	8009e8e <_svfiprintf_r+0xfa>
 8009e62:	9a07      	ldr	r2, [sp, #28]
 8009e64:	4654      	mov	r4, sl
 8009e66:	2000      	movs	r0, #0
 8009e68:	f04f 0c0a 	mov.w	ip, #10
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e72:	3b30      	subs	r3, #48	@ 0x30
 8009e74:	2b09      	cmp	r3, #9
 8009e76:	d94b      	bls.n	8009f10 <_svfiprintf_r+0x17c>
 8009e78:	b1b0      	cbz	r0, 8009ea8 <_svfiprintf_r+0x114>
 8009e7a:	9207      	str	r2, [sp, #28]
 8009e7c:	e014      	b.n	8009ea8 <_svfiprintf_r+0x114>
 8009e7e:	eba0 0308 	sub.w	r3, r0, r8
 8009e82:	fa09 f303 	lsl.w	r3, r9, r3
 8009e86:	4313      	orrs	r3, r2
 8009e88:	9304      	str	r3, [sp, #16]
 8009e8a:	46a2      	mov	sl, r4
 8009e8c:	e7d2      	b.n	8009e34 <_svfiprintf_r+0xa0>
 8009e8e:	9b03      	ldr	r3, [sp, #12]
 8009e90:	1d19      	adds	r1, r3, #4
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	9103      	str	r1, [sp, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	bfbb      	ittet	lt
 8009e9a:	425b      	neglt	r3, r3
 8009e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009ea0:	9307      	strge	r3, [sp, #28]
 8009ea2:	9307      	strlt	r3, [sp, #28]
 8009ea4:	bfb8      	it	lt
 8009ea6:	9204      	strlt	r2, [sp, #16]
 8009ea8:	7823      	ldrb	r3, [r4, #0]
 8009eaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eac:	d10a      	bne.n	8009ec4 <_svfiprintf_r+0x130>
 8009eae:	7863      	ldrb	r3, [r4, #1]
 8009eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eb2:	d132      	bne.n	8009f1a <_svfiprintf_r+0x186>
 8009eb4:	9b03      	ldr	r3, [sp, #12]
 8009eb6:	1d1a      	adds	r2, r3, #4
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	9203      	str	r2, [sp, #12]
 8009ebc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ec0:	3402      	adds	r4, #2
 8009ec2:	9305      	str	r3, [sp, #20]
 8009ec4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f88 <_svfiprintf_r+0x1f4>
 8009ec8:	7821      	ldrb	r1, [r4, #0]
 8009eca:	2203      	movs	r2, #3
 8009ecc:	4650      	mov	r0, sl
 8009ece:	f7f6 f987 	bl	80001e0 <memchr>
 8009ed2:	b138      	cbz	r0, 8009ee4 <_svfiprintf_r+0x150>
 8009ed4:	9b04      	ldr	r3, [sp, #16]
 8009ed6:	eba0 000a 	sub.w	r0, r0, sl
 8009eda:	2240      	movs	r2, #64	@ 0x40
 8009edc:	4082      	lsls	r2, r0
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	3401      	adds	r4, #1
 8009ee2:	9304      	str	r3, [sp, #16]
 8009ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ee8:	4824      	ldr	r0, [pc, #144]	@ (8009f7c <_svfiprintf_r+0x1e8>)
 8009eea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009eee:	2206      	movs	r2, #6
 8009ef0:	f7f6 f976 	bl	80001e0 <memchr>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d036      	beq.n	8009f66 <_svfiprintf_r+0x1d2>
 8009ef8:	4b21      	ldr	r3, [pc, #132]	@ (8009f80 <_svfiprintf_r+0x1ec>)
 8009efa:	bb1b      	cbnz	r3, 8009f44 <_svfiprintf_r+0x1b0>
 8009efc:	9b03      	ldr	r3, [sp, #12]
 8009efe:	3307      	adds	r3, #7
 8009f00:	f023 0307 	bic.w	r3, r3, #7
 8009f04:	3308      	adds	r3, #8
 8009f06:	9303      	str	r3, [sp, #12]
 8009f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f0a:	4433      	add	r3, r6
 8009f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f0e:	e76a      	b.n	8009de6 <_svfiprintf_r+0x52>
 8009f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f14:	460c      	mov	r4, r1
 8009f16:	2001      	movs	r0, #1
 8009f18:	e7a8      	b.n	8009e6c <_svfiprintf_r+0xd8>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	3401      	adds	r4, #1
 8009f1e:	9305      	str	r3, [sp, #20]
 8009f20:	4619      	mov	r1, r3
 8009f22:	f04f 0c0a 	mov.w	ip, #10
 8009f26:	4620      	mov	r0, r4
 8009f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f2c:	3a30      	subs	r2, #48	@ 0x30
 8009f2e:	2a09      	cmp	r2, #9
 8009f30:	d903      	bls.n	8009f3a <_svfiprintf_r+0x1a6>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0c6      	beq.n	8009ec4 <_svfiprintf_r+0x130>
 8009f36:	9105      	str	r1, [sp, #20]
 8009f38:	e7c4      	b.n	8009ec4 <_svfiprintf_r+0x130>
 8009f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f3e:	4604      	mov	r4, r0
 8009f40:	2301      	movs	r3, #1
 8009f42:	e7f0      	b.n	8009f26 <_svfiprintf_r+0x192>
 8009f44:	ab03      	add	r3, sp, #12
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	462a      	mov	r2, r5
 8009f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f84 <_svfiprintf_r+0x1f0>)
 8009f4c:	a904      	add	r1, sp, #16
 8009f4e:	4638      	mov	r0, r7
 8009f50:	f7fc fe78 	bl	8006c44 <_printf_float>
 8009f54:	1c42      	adds	r2, r0, #1
 8009f56:	4606      	mov	r6, r0
 8009f58:	d1d6      	bne.n	8009f08 <_svfiprintf_r+0x174>
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	065b      	lsls	r3, r3, #25
 8009f5e:	f53f af2d 	bmi.w	8009dbc <_svfiprintf_r+0x28>
 8009f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f64:	e72c      	b.n	8009dc0 <_svfiprintf_r+0x2c>
 8009f66:	ab03      	add	r3, sp, #12
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	4b05      	ldr	r3, [pc, #20]	@ (8009f84 <_svfiprintf_r+0x1f0>)
 8009f6e:	a904      	add	r1, sp, #16
 8009f70:	4638      	mov	r0, r7
 8009f72:	f7fd f8ff 	bl	8007174 <_printf_i>
 8009f76:	e7ed      	b.n	8009f54 <_svfiprintf_r+0x1c0>
 8009f78:	0800d0d9 	.word	0x0800d0d9
 8009f7c:	0800d0e3 	.word	0x0800d0e3
 8009f80:	08006c45 	.word	0x08006c45
 8009f84:	08009cdf 	.word	0x08009cdf
 8009f88:	0800d0df 	.word	0x0800d0df

08009f8c <_sungetc_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	1c4b      	adds	r3, r1, #1
 8009f90:	4614      	mov	r4, r2
 8009f92:	d103      	bne.n	8009f9c <_sungetc_r+0x10>
 8009f94:	f04f 35ff 	mov.w	r5, #4294967295
 8009f98:	4628      	mov	r0, r5
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	8993      	ldrh	r3, [r2, #12]
 8009f9e:	f023 0320 	bic.w	r3, r3, #32
 8009fa2:	8193      	strh	r3, [r2, #12]
 8009fa4:	6853      	ldr	r3, [r2, #4]
 8009fa6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009fa8:	b2cd      	uxtb	r5, r1
 8009faa:	b18a      	cbz	r2, 8009fd0 <_sungetc_r+0x44>
 8009fac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	dd08      	ble.n	8009fc4 <_sungetc_r+0x38>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	1e5a      	subs	r2, r3, #1
 8009fb6:	6022      	str	r2, [r4, #0]
 8009fb8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009fbc:	6863      	ldr	r3, [r4, #4]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	6063      	str	r3, [r4, #4]
 8009fc2:	e7e9      	b.n	8009f98 <_sungetc_r+0xc>
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	f000 fbf2 	bl	800a7ae <__submore>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d0f1      	beq.n	8009fb2 <_sungetc_r+0x26>
 8009fce:	e7e1      	b.n	8009f94 <_sungetc_r+0x8>
 8009fd0:	6921      	ldr	r1, [r4, #16]
 8009fd2:	6822      	ldr	r2, [r4, #0]
 8009fd4:	b141      	cbz	r1, 8009fe8 <_sungetc_r+0x5c>
 8009fd6:	4291      	cmp	r1, r2
 8009fd8:	d206      	bcs.n	8009fe8 <_sungetc_r+0x5c>
 8009fda:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009fde:	42a9      	cmp	r1, r5
 8009fe0:	d102      	bne.n	8009fe8 <_sungetc_r+0x5c>
 8009fe2:	3a01      	subs	r2, #1
 8009fe4:	6022      	str	r2, [r4, #0]
 8009fe6:	e7ea      	b.n	8009fbe <_sungetc_r+0x32>
 8009fe8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009fec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ff0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009ff6:	4623      	mov	r3, r4
 8009ff8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	2301      	movs	r3, #1
 800a000:	e7de      	b.n	8009fc0 <_sungetc_r+0x34>

0800a002 <__ssrefill_r>:
 800a002:	b510      	push	{r4, lr}
 800a004:	460c      	mov	r4, r1
 800a006:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a008:	b169      	cbz	r1, 800a026 <__ssrefill_r+0x24>
 800a00a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a00e:	4299      	cmp	r1, r3
 800a010:	d001      	beq.n	800a016 <__ssrefill_r+0x14>
 800a012:	f7fe fcdd 	bl	80089d0 <_free_r>
 800a016:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a018:	6063      	str	r3, [r4, #4]
 800a01a:	2000      	movs	r0, #0
 800a01c:	6360      	str	r0, [r4, #52]	@ 0x34
 800a01e:	b113      	cbz	r3, 800a026 <__ssrefill_r+0x24>
 800a020:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	bd10      	pop	{r4, pc}
 800a026:	6923      	ldr	r3, [r4, #16]
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	2300      	movs	r3, #0
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f043 0320 	orr.w	r3, r3, #32
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	f04f 30ff 	mov.w	r0, #4294967295
 800a03a:	e7f3      	b.n	800a024 <__ssrefill_r+0x22>

0800a03c <__ssvfiscanf_r>:
 800a03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a040:	460c      	mov	r4, r1
 800a042:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a046:	2100      	movs	r1, #0
 800a048:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a04c:	49a5      	ldr	r1, [pc, #660]	@ (800a2e4 <__ssvfiscanf_r+0x2a8>)
 800a04e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a050:	f10d 0804 	add.w	r8, sp, #4
 800a054:	49a4      	ldr	r1, [pc, #656]	@ (800a2e8 <__ssvfiscanf_r+0x2ac>)
 800a056:	4fa5      	ldr	r7, [pc, #660]	@ (800a2ec <__ssvfiscanf_r+0x2b0>)
 800a058:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a05c:	4606      	mov	r6, r0
 800a05e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	7813      	ldrb	r3, [r2, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 8158 	beq.w	800a31a <__ssvfiscanf_r+0x2de>
 800a06a:	5cf9      	ldrb	r1, [r7, r3]
 800a06c:	f011 0108 	ands.w	r1, r1, #8
 800a070:	f102 0501 	add.w	r5, r2, #1
 800a074:	d019      	beq.n	800a0aa <__ssvfiscanf_r+0x6e>
 800a076:	6863      	ldr	r3, [r4, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dd0f      	ble.n	800a09c <__ssvfiscanf_r+0x60>
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	781a      	ldrb	r2, [r3, #0]
 800a080:	5cba      	ldrb	r2, [r7, r2]
 800a082:	0712      	lsls	r2, r2, #28
 800a084:	d401      	bmi.n	800a08a <__ssvfiscanf_r+0x4e>
 800a086:	462a      	mov	r2, r5
 800a088:	e7eb      	b.n	800a062 <__ssvfiscanf_r+0x26>
 800a08a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a08c:	3201      	adds	r2, #1
 800a08e:	9245      	str	r2, [sp, #276]	@ 0x114
 800a090:	6862      	ldr	r2, [r4, #4]
 800a092:	3301      	adds	r3, #1
 800a094:	3a01      	subs	r2, #1
 800a096:	6062      	str	r2, [r4, #4]
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	e7ec      	b.n	800a076 <__ssvfiscanf_r+0x3a>
 800a09c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a09e:	4621      	mov	r1, r4
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4798      	blx	r3
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d0e9      	beq.n	800a07c <__ssvfiscanf_r+0x40>
 800a0a8:	e7ed      	b.n	800a086 <__ssvfiscanf_r+0x4a>
 800a0aa:	2b25      	cmp	r3, #37	@ 0x25
 800a0ac:	d012      	beq.n	800a0d4 <__ssvfiscanf_r+0x98>
 800a0ae:	4699      	mov	r9, r3
 800a0b0:	6863      	ldr	r3, [r4, #4]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	f340 8093 	ble.w	800a1de <__ssvfiscanf_r+0x1a2>
 800a0b8:	6822      	ldr	r2, [r4, #0]
 800a0ba:	7813      	ldrb	r3, [r2, #0]
 800a0bc:	454b      	cmp	r3, r9
 800a0be:	f040 812c 	bne.w	800a31a <__ssvfiscanf_r+0x2de>
 800a0c2:	6863      	ldr	r3, [r4, #4]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	6063      	str	r3, [r4, #4]
 800a0c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a0ca:	3201      	adds	r2, #1
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	6022      	str	r2, [r4, #0]
 800a0d0:	9345      	str	r3, [sp, #276]	@ 0x114
 800a0d2:	e7d8      	b.n	800a086 <__ssvfiscanf_r+0x4a>
 800a0d4:	9141      	str	r1, [sp, #260]	@ 0x104
 800a0d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a0d8:	7853      	ldrb	r3, [r2, #1]
 800a0da:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0dc:	bf02      	ittt	eq
 800a0de:	2310      	moveq	r3, #16
 800a0e0:	1c95      	addeq	r5, r2, #2
 800a0e2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	46a9      	mov	r9, r5
 800a0e8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a0ec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a0f0:	2b09      	cmp	r3, #9
 800a0f2:	d91e      	bls.n	800a132 <__ssvfiscanf_r+0xf6>
 800a0f4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a2f0 <__ssvfiscanf_r+0x2b4>
 800a0f8:	2203      	movs	r2, #3
 800a0fa:	4650      	mov	r0, sl
 800a0fc:	f7f6 f870 	bl	80001e0 <memchr>
 800a100:	b138      	cbz	r0, 800a112 <__ssvfiscanf_r+0xd6>
 800a102:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a104:	eba0 000a 	sub.w	r0, r0, sl
 800a108:	2301      	movs	r3, #1
 800a10a:	4083      	lsls	r3, r0
 800a10c:	4313      	orrs	r3, r2
 800a10e:	9341      	str	r3, [sp, #260]	@ 0x104
 800a110:	464d      	mov	r5, r9
 800a112:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a116:	2b78      	cmp	r3, #120	@ 0x78
 800a118:	d806      	bhi.n	800a128 <__ssvfiscanf_r+0xec>
 800a11a:	2b57      	cmp	r3, #87	@ 0x57
 800a11c:	d810      	bhi.n	800a140 <__ssvfiscanf_r+0x104>
 800a11e:	2b25      	cmp	r3, #37	@ 0x25
 800a120:	d0c5      	beq.n	800a0ae <__ssvfiscanf_r+0x72>
 800a122:	d857      	bhi.n	800a1d4 <__ssvfiscanf_r+0x198>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d065      	beq.n	800a1f4 <__ssvfiscanf_r+0x1b8>
 800a128:	2303      	movs	r3, #3
 800a12a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a12c:	230a      	movs	r3, #10
 800a12e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a130:	e078      	b.n	800a224 <__ssvfiscanf_r+0x1e8>
 800a132:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a134:	fb02 1103 	mla	r1, r2, r3, r1
 800a138:	3930      	subs	r1, #48	@ 0x30
 800a13a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a13c:	464d      	mov	r5, r9
 800a13e:	e7d2      	b.n	800a0e6 <__ssvfiscanf_r+0xaa>
 800a140:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a144:	2a20      	cmp	r2, #32
 800a146:	d8ef      	bhi.n	800a128 <__ssvfiscanf_r+0xec>
 800a148:	a101      	add	r1, pc, #4	@ (adr r1, 800a150 <__ssvfiscanf_r+0x114>)
 800a14a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a14e:	bf00      	nop
 800a150:	0800a203 	.word	0x0800a203
 800a154:	0800a129 	.word	0x0800a129
 800a158:	0800a129 	.word	0x0800a129
 800a15c:	0800a25d 	.word	0x0800a25d
 800a160:	0800a129 	.word	0x0800a129
 800a164:	0800a129 	.word	0x0800a129
 800a168:	0800a129 	.word	0x0800a129
 800a16c:	0800a129 	.word	0x0800a129
 800a170:	0800a129 	.word	0x0800a129
 800a174:	0800a129 	.word	0x0800a129
 800a178:	0800a129 	.word	0x0800a129
 800a17c:	0800a273 	.word	0x0800a273
 800a180:	0800a259 	.word	0x0800a259
 800a184:	0800a1db 	.word	0x0800a1db
 800a188:	0800a1db 	.word	0x0800a1db
 800a18c:	0800a1db 	.word	0x0800a1db
 800a190:	0800a129 	.word	0x0800a129
 800a194:	0800a215 	.word	0x0800a215
 800a198:	0800a129 	.word	0x0800a129
 800a19c:	0800a129 	.word	0x0800a129
 800a1a0:	0800a129 	.word	0x0800a129
 800a1a4:	0800a129 	.word	0x0800a129
 800a1a8:	0800a283 	.word	0x0800a283
 800a1ac:	0800a21d 	.word	0x0800a21d
 800a1b0:	0800a1fb 	.word	0x0800a1fb
 800a1b4:	0800a129 	.word	0x0800a129
 800a1b8:	0800a129 	.word	0x0800a129
 800a1bc:	0800a27f 	.word	0x0800a27f
 800a1c0:	0800a129 	.word	0x0800a129
 800a1c4:	0800a259 	.word	0x0800a259
 800a1c8:	0800a129 	.word	0x0800a129
 800a1cc:	0800a129 	.word	0x0800a129
 800a1d0:	0800a203 	.word	0x0800a203
 800a1d4:	3b45      	subs	r3, #69	@ 0x45
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d8a6      	bhi.n	800a128 <__ssvfiscanf_r+0xec>
 800a1da:	2305      	movs	r3, #5
 800a1dc:	e021      	b.n	800a222 <__ssvfiscanf_r+0x1e6>
 800a1de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	4798      	blx	r3
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	f43f af66 	beq.w	800a0b8 <__ssvfiscanf_r+0x7c>
 800a1ec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f040 808b 	bne.w	800a30a <__ssvfiscanf_r+0x2ce>
 800a1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f8:	e08b      	b.n	800a312 <__ssvfiscanf_r+0x2d6>
 800a1fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a1fc:	f042 0220 	orr.w	r2, r2, #32
 800a200:	9241      	str	r2, [sp, #260]	@ 0x104
 800a202:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a204:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a208:	9241      	str	r2, [sp, #260]	@ 0x104
 800a20a:	2210      	movs	r2, #16
 800a20c:	2b6e      	cmp	r3, #110	@ 0x6e
 800a20e:	9242      	str	r2, [sp, #264]	@ 0x108
 800a210:	d902      	bls.n	800a218 <__ssvfiscanf_r+0x1dc>
 800a212:	e005      	b.n	800a220 <__ssvfiscanf_r+0x1e4>
 800a214:	2300      	movs	r3, #0
 800a216:	9342      	str	r3, [sp, #264]	@ 0x108
 800a218:	2303      	movs	r3, #3
 800a21a:	e002      	b.n	800a222 <__ssvfiscanf_r+0x1e6>
 800a21c:	2308      	movs	r3, #8
 800a21e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a220:	2304      	movs	r3, #4
 800a222:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a224:	6863      	ldr	r3, [r4, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	dd39      	ble.n	800a29e <__ssvfiscanf_r+0x262>
 800a22a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a22c:	0659      	lsls	r1, r3, #25
 800a22e:	d404      	bmi.n	800a23a <__ssvfiscanf_r+0x1fe>
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	781a      	ldrb	r2, [r3, #0]
 800a234:	5cba      	ldrb	r2, [r7, r2]
 800a236:	0712      	lsls	r2, r2, #28
 800a238:	d438      	bmi.n	800a2ac <__ssvfiscanf_r+0x270>
 800a23a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	dc47      	bgt.n	800a2d0 <__ssvfiscanf_r+0x294>
 800a240:	466b      	mov	r3, sp
 800a242:	4622      	mov	r2, r4
 800a244:	a941      	add	r1, sp, #260	@ 0x104
 800a246:	4630      	mov	r0, r6
 800a248:	f000 f86c 	bl	800a324 <_scanf_chars>
 800a24c:	2801      	cmp	r0, #1
 800a24e:	d064      	beq.n	800a31a <__ssvfiscanf_r+0x2de>
 800a250:	2802      	cmp	r0, #2
 800a252:	f47f af18 	bne.w	800a086 <__ssvfiscanf_r+0x4a>
 800a256:	e7c9      	b.n	800a1ec <__ssvfiscanf_r+0x1b0>
 800a258:	220a      	movs	r2, #10
 800a25a:	e7d7      	b.n	800a20c <__ssvfiscanf_r+0x1d0>
 800a25c:	4629      	mov	r1, r5
 800a25e:	4640      	mov	r0, r8
 800a260:	f000 fa6c 	bl	800a73c <__sccl>
 800a264:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a26a:	9341      	str	r3, [sp, #260]	@ 0x104
 800a26c:	4605      	mov	r5, r0
 800a26e:	2301      	movs	r3, #1
 800a270:	e7d7      	b.n	800a222 <__ssvfiscanf_r+0x1e6>
 800a272:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a278:	9341      	str	r3, [sp, #260]	@ 0x104
 800a27a:	2300      	movs	r3, #0
 800a27c:	e7d1      	b.n	800a222 <__ssvfiscanf_r+0x1e6>
 800a27e:	2302      	movs	r3, #2
 800a280:	e7cf      	b.n	800a222 <__ssvfiscanf_r+0x1e6>
 800a282:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a284:	06c3      	lsls	r3, r0, #27
 800a286:	f53f aefe 	bmi.w	800a086 <__ssvfiscanf_r+0x4a>
 800a28a:	9b00      	ldr	r3, [sp, #0]
 800a28c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a28e:	1d19      	adds	r1, r3, #4
 800a290:	9100      	str	r1, [sp, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	07c0      	lsls	r0, r0, #31
 800a296:	bf4c      	ite	mi
 800a298:	801a      	strhmi	r2, [r3, #0]
 800a29a:	601a      	strpl	r2, [r3, #0]
 800a29c:	e6f3      	b.n	800a086 <__ssvfiscanf_r+0x4a>
 800a29e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4798      	blx	r3
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d0bf      	beq.n	800a22a <__ssvfiscanf_r+0x1ee>
 800a2aa:	e79f      	b.n	800a1ec <__ssvfiscanf_r+0x1b0>
 800a2ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a2ae:	3201      	adds	r2, #1
 800a2b0:	9245      	str	r2, [sp, #276]	@ 0x114
 800a2b2:	6862      	ldr	r2, [r4, #4]
 800a2b4:	3a01      	subs	r2, #1
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	6062      	str	r2, [r4, #4]
 800a2ba:	dd02      	ble.n	800a2c2 <__ssvfiscanf_r+0x286>
 800a2bc:	3301      	adds	r3, #1
 800a2be:	6023      	str	r3, [r4, #0]
 800a2c0:	e7b6      	b.n	800a230 <__ssvfiscanf_r+0x1f4>
 800a2c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	4798      	blx	r3
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d0b0      	beq.n	800a230 <__ssvfiscanf_r+0x1f4>
 800a2ce:	e78d      	b.n	800a1ec <__ssvfiscanf_r+0x1b0>
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	dc0f      	bgt.n	800a2f4 <__ssvfiscanf_r+0x2b8>
 800a2d4:	466b      	mov	r3, sp
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	a941      	add	r1, sp, #260	@ 0x104
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f000 f87c 	bl	800a3d8 <_scanf_i>
 800a2e0:	e7b4      	b.n	800a24c <__ssvfiscanf_r+0x210>
 800a2e2:	bf00      	nop
 800a2e4:	08009f8d 	.word	0x08009f8d
 800a2e8:	0800a003 	.word	0x0800a003
 800a2ec:	0800cfd9 	.word	0x0800cfd9
 800a2f0:	0800d0df 	.word	0x0800d0df
 800a2f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a320 <__ssvfiscanf_r+0x2e4>)
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f43f aec5 	beq.w	800a086 <__ssvfiscanf_r+0x4a>
 800a2fc:	466b      	mov	r3, sp
 800a2fe:	4622      	mov	r2, r4
 800a300:	a941      	add	r1, sp, #260	@ 0x104
 800a302:	4630      	mov	r0, r6
 800a304:	f7fd f856 	bl	80073b4 <_scanf_float>
 800a308:	e7a0      	b.n	800a24c <__ssvfiscanf_r+0x210>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	065b      	lsls	r3, r3, #25
 800a30e:	f53f af71 	bmi.w	800a1f4 <__ssvfiscanf_r+0x1b8>
 800a312:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a31a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a31c:	e7f9      	b.n	800a312 <__ssvfiscanf_r+0x2d6>
 800a31e:	bf00      	nop
 800a320:	080073b5 	.word	0x080073b5

0800a324 <_scanf_chars>:
 800a324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a328:	4615      	mov	r5, r2
 800a32a:	688a      	ldr	r2, [r1, #8]
 800a32c:	4680      	mov	r8, r0
 800a32e:	460c      	mov	r4, r1
 800a330:	b932      	cbnz	r2, 800a340 <_scanf_chars+0x1c>
 800a332:	698a      	ldr	r2, [r1, #24]
 800a334:	2a00      	cmp	r2, #0
 800a336:	bf14      	ite	ne
 800a338:	f04f 32ff 	movne.w	r2, #4294967295
 800a33c:	2201      	moveq	r2, #1
 800a33e:	608a      	str	r2, [r1, #8]
 800a340:	6822      	ldr	r2, [r4, #0]
 800a342:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a3d4 <_scanf_chars+0xb0>
 800a346:	06d1      	lsls	r1, r2, #27
 800a348:	bf5f      	itttt	pl
 800a34a:	681a      	ldrpl	r2, [r3, #0]
 800a34c:	1d11      	addpl	r1, r2, #4
 800a34e:	6019      	strpl	r1, [r3, #0]
 800a350:	6816      	ldrpl	r6, [r2, #0]
 800a352:	2700      	movs	r7, #0
 800a354:	69a0      	ldr	r0, [r4, #24]
 800a356:	b188      	cbz	r0, 800a37c <_scanf_chars+0x58>
 800a358:	2801      	cmp	r0, #1
 800a35a:	d107      	bne.n	800a36c <_scanf_chars+0x48>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	6963      	ldr	r3, [r4, #20]
 800a362:	5c9b      	ldrb	r3, [r3, r2]
 800a364:	b953      	cbnz	r3, 800a37c <_scanf_chars+0x58>
 800a366:	2f00      	cmp	r7, #0
 800a368:	d031      	beq.n	800a3ce <_scanf_chars+0xaa>
 800a36a:	e022      	b.n	800a3b2 <_scanf_chars+0x8e>
 800a36c:	2802      	cmp	r0, #2
 800a36e:	d120      	bne.n	800a3b2 <_scanf_chars+0x8e>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a378:	071b      	lsls	r3, r3, #28
 800a37a:	d41a      	bmi.n	800a3b2 <_scanf_chars+0x8e>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	06da      	lsls	r2, r3, #27
 800a380:	bf5e      	ittt	pl
 800a382:	682b      	ldrpl	r3, [r5, #0]
 800a384:	781b      	ldrbpl	r3, [r3, #0]
 800a386:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a38a:	682a      	ldr	r2, [r5, #0]
 800a38c:	686b      	ldr	r3, [r5, #4]
 800a38e:	3201      	adds	r2, #1
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	68a2      	ldr	r2, [r4, #8]
 800a394:	3b01      	subs	r3, #1
 800a396:	3a01      	subs	r2, #1
 800a398:	606b      	str	r3, [r5, #4]
 800a39a:	3701      	adds	r7, #1
 800a39c:	60a2      	str	r2, [r4, #8]
 800a39e:	b142      	cbz	r2, 800a3b2 <_scanf_chars+0x8e>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dcd7      	bgt.n	800a354 <_scanf_chars+0x30>
 800a3a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	4798      	blx	r3
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d0d0      	beq.n	800a354 <_scanf_chars+0x30>
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	f013 0310 	ands.w	r3, r3, #16
 800a3b8:	d105      	bne.n	800a3c6 <_scanf_chars+0xa2>
 800a3ba:	68e2      	ldr	r2, [r4, #12]
 800a3bc:	3201      	adds	r2, #1
 800a3be:	60e2      	str	r2, [r4, #12]
 800a3c0:	69a2      	ldr	r2, [r4, #24]
 800a3c2:	b102      	cbz	r2, 800a3c6 <_scanf_chars+0xa2>
 800a3c4:	7033      	strb	r3, [r6, #0]
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	443b      	add	r3, r7
 800a3ca:	6123      	str	r3, [r4, #16]
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d2:	bf00      	nop
 800a3d4:	0800cfd9 	.word	0x0800cfd9

0800a3d8 <_scanf_i>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	4698      	mov	r8, r3
 800a3de:	4b74      	ldr	r3, [pc, #464]	@ (800a5b0 <_scanf_i+0x1d8>)
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	4682      	mov	sl, r0
 800a3e4:	4616      	mov	r6, r2
 800a3e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	ab03      	add	r3, sp, #12
 800a3ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a3f2:	4b70      	ldr	r3, [pc, #448]	@ (800a5b4 <_scanf_i+0x1dc>)
 800a3f4:	69a1      	ldr	r1, [r4, #24]
 800a3f6:	4a70      	ldr	r2, [pc, #448]	@ (800a5b8 <_scanf_i+0x1e0>)
 800a3f8:	2903      	cmp	r1, #3
 800a3fa:	bf08      	it	eq
 800a3fc:	461a      	moveq	r2, r3
 800a3fe:	68a3      	ldr	r3, [r4, #8]
 800a400:	9201      	str	r2, [sp, #4]
 800a402:	1e5a      	subs	r2, r3, #1
 800a404:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a408:	bf88      	it	hi
 800a40a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a40e:	4627      	mov	r7, r4
 800a410:	bf82      	ittt	hi
 800a412:	eb03 0905 	addhi.w	r9, r3, r5
 800a416:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a41a:	60a3      	strhi	r3, [r4, #8]
 800a41c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a420:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a424:	bf98      	it	ls
 800a426:	f04f 0900 	movls.w	r9, #0
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	463d      	mov	r5, r7
 800a42e:	f04f 0b00 	mov.w	fp, #0
 800a432:	6831      	ldr	r1, [r6, #0]
 800a434:	ab03      	add	r3, sp, #12
 800a436:	7809      	ldrb	r1, [r1, #0]
 800a438:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a43c:	2202      	movs	r2, #2
 800a43e:	f7f5 fecf 	bl	80001e0 <memchr>
 800a442:	b328      	cbz	r0, 800a490 <_scanf_i+0xb8>
 800a444:	f1bb 0f01 	cmp.w	fp, #1
 800a448:	d159      	bne.n	800a4fe <_scanf_i+0x126>
 800a44a:	6862      	ldr	r2, [r4, #4]
 800a44c:	b92a      	cbnz	r2, 800a45a <_scanf_i+0x82>
 800a44e:	6822      	ldr	r2, [r4, #0]
 800a450:	2108      	movs	r1, #8
 800a452:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a456:	6061      	str	r1, [r4, #4]
 800a458:	6022      	str	r2, [r4, #0]
 800a45a:	6822      	ldr	r2, [r4, #0]
 800a45c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a460:	6022      	str	r2, [r4, #0]
 800a462:	68a2      	ldr	r2, [r4, #8]
 800a464:	1e51      	subs	r1, r2, #1
 800a466:	60a1      	str	r1, [r4, #8]
 800a468:	b192      	cbz	r2, 800a490 <_scanf_i+0xb8>
 800a46a:	6832      	ldr	r2, [r6, #0]
 800a46c:	1c51      	adds	r1, r2, #1
 800a46e:	6031      	str	r1, [r6, #0]
 800a470:	7812      	ldrb	r2, [r2, #0]
 800a472:	f805 2b01 	strb.w	r2, [r5], #1
 800a476:	6872      	ldr	r2, [r6, #4]
 800a478:	3a01      	subs	r2, #1
 800a47a:	2a00      	cmp	r2, #0
 800a47c:	6072      	str	r2, [r6, #4]
 800a47e:	dc07      	bgt.n	800a490 <_scanf_i+0xb8>
 800a480:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a484:	4631      	mov	r1, r6
 800a486:	4650      	mov	r0, sl
 800a488:	4790      	blx	r2
 800a48a:	2800      	cmp	r0, #0
 800a48c:	f040 8085 	bne.w	800a59a <_scanf_i+0x1c2>
 800a490:	f10b 0b01 	add.w	fp, fp, #1
 800a494:	f1bb 0f03 	cmp.w	fp, #3
 800a498:	d1cb      	bne.n	800a432 <_scanf_i+0x5a>
 800a49a:	6863      	ldr	r3, [r4, #4]
 800a49c:	b90b      	cbnz	r3, 800a4a2 <_scanf_i+0xca>
 800a49e:	230a      	movs	r3, #10
 800a4a0:	6063      	str	r3, [r4, #4]
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	4945      	ldr	r1, [pc, #276]	@ (800a5bc <_scanf_i+0x1e4>)
 800a4a6:	6960      	ldr	r0, [r4, #20]
 800a4a8:	1ac9      	subs	r1, r1, r3
 800a4aa:	f000 f947 	bl	800a73c <__sccl>
 800a4ae:	f04f 0b00 	mov.w	fp, #0
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	6822      	ldr	r2, [r4, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d03d      	beq.n	800a536 <_scanf_i+0x15e>
 800a4ba:	6831      	ldr	r1, [r6, #0]
 800a4bc:	6960      	ldr	r0, [r4, #20]
 800a4be:	f891 c000 	ldrb.w	ip, [r1]
 800a4c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d035      	beq.n	800a536 <_scanf_i+0x15e>
 800a4ca:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a4ce:	d124      	bne.n	800a51a <_scanf_i+0x142>
 800a4d0:	0510      	lsls	r0, r2, #20
 800a4d2:	d522      	bpl.n	800a51a <_scanf_i+0x142>
 800a4d4:	f10b 0b01 	add.w	fp, fp, #1
 800a4d8:	f1b9 0f00 	cmp.w	r9, #0
 800a4dc:	d003      	beq.n	800a4e6 <_scanf_i+0x10e>
 800a4de:	3301      	adds	r3, #1
 800a4e0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a4e4:	60a3      	str	r3, [r4, #8]
 800a4e6:	6873      	ldr	r3, [r6, #4]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	6073      	str	r3, [r6, #4]
 800a4ee:	dd1b      	ble.n	800a528 <_scanf_i+0x150>
 800a4f0:	6833      	ldr	r3, [r6, #0]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	6033      	str	r3, [r6, #0]
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	60a3      	str	r3, [r4, #8]
 800a4fc:	e7d9      	b.n	800a4b2 <_scanf_i+0xda>
 800a4fe:	f1bb 0f02 	cmp.w	fp, #2
 800a502:	d1ae      	bne.n	800a462 <_scanf_i+0x8a>
 800a504:	6822      	ldr	r2, [r4, #0]
 800a506:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a50a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a50e:	d1bf      	bne.n	800a490 <_scanf_i+0xb8>
 800a510:	2110      	movs	r1, #16
 800a512:	6061      	str	r1, [r4, #4]
 800a514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a518:	e7a2      	b.n	800a460 <_scanf_i+0x88>
 800a51a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a51e:	6022      	str	r2, [r4, #0]
 800a520:	780b      	ldrb	r3, [r1, #0]
 800a522:	f805 3b01 	strb.w	r3, [r5], #1
 800a526:	e7de      	b.n	800a4e6 <_scanf_i+0x10e>
 800a528:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a52c:	4631      	mov	r1, r6
 800a52e:	4650      	mov	r0, sl
 800a530:	4798      	blx	r3
 800a532:	2800      	cmp	r0, #0
 800a534:	d0df      	beq.n	800a4f6 <_scanf_i+0x11e>
 800a536:	6823      	ldr	r3, [r4, #0]
 800a538:	05d9      	lsls	r1, r3, #23
 800a53a:	d50d      	bpl.n	800a558 <_scanf_i+0x180>
 800a53c:	42bd      	cmp	r5, r7
 800a53e:	d909      	bls.n	800a554 <_scanf_i+0x17c>
 800a540:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a544:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a548:	4632      	mov	r2, r6
 800a54a:	4650      	mov	r0, sl
 800a54c:	4798      	blx	r3
 800a54e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a552:	464d      	mov	r5, r9
 800a554:	42bd      	cmp	r5, r7
 800a556:	d028      	beq.n	800a5aa <_scanf_i+0x1d2>
 800a558:	6822      	ldr	r2, [r4, #0]
 800a55a:	f012 0210 	ands.w	r2, r2, #16
 800a55e:	d113      	bne.n	800a588 <_scanf_i+0x1b0>
 800a560:	702a      	strb	r2, [r5, #0]
 800a562:	6863      	ldr	r3, [r4, #4]
 800a564:	9e01      	ldr	r6, [sp, #4]
 800a566:	4639      	mov	r1, r7
 800a568:	4650      	mov	r0, sl
 800a56a:	47b0      	blx	r6
 800a56c:	f8d8 3000 	ldr.w	r3, [r8]
 800a570:	6821      	ldr	r1, [r4, #0]
 800a572:	1d1a      	adds	r2, r3, #4
 800a574:	f8c8 2000 	str.w	r2, [r8]
 800a578:	f011 0f20 	tst.w	r1, #32
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	d00f      	beq.n	800a5a0 <_scanf_i+0x1c8>
 800a580:	6018      	str	r0, [r3, #0]
 800a582:	68e3      	ldr	r3, [r4, #12]
 800a584:	3301      	adds	r3, #1
 800a586:	60e3      	str	r3, [r4, #12]
 800a588:	6923      	ldr	r3, [r4, #16]
 800a58a:	1bed      	subs	r5, r5, r7
 800a58c:	445d      	add	r5, fp
 800a58e:	442b      	add	r3, r5
 800a590:	6123      	str	r3, [r4, #16]
 800a592:	2000      	movs	r0, #0
 800a594:	b007      	add	sp, #28
 800a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59a:	f04f 0b00 	mov.w	fp, #0
 800a59e:	e7ca      	b.n	800a536 <_scanf_i+0x15e>
 800a5a0:	07ca      	lsls	r2, r1, #31
 800a5a2:	bf4c      	ite	mi
 800a5a4:	8018      	strhmi	r0, [r3, #0]
 800a5a6:	6018      	strpl	r0, [r3, #0]
 800a5a8:	e7eb      	b.n	800a582 <_scanf_i+0x1aa>
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	e7f2      	b.n	800a594 <_scanf_i+0x1bc>
 800a5ae:	bf00      	nop
 800a5b0:	0800cc44 	.word	0x0800cc44
 800a5b4:	08009cc1 	.word	0x08009cc1
 800a5b8:	0800a9e9 	.word	0x0800a9e9
 800a5bc:	0800d0fa 	.word	0x0800d0fa

0800a5c0 <__sflush_r>:
 800a5c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	0716      	lsls	r6, r2, #28
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	d454      	bmi.n	800a67a <__sflush_r+0xba>
 800a5d0:	684b      	ldr	r3, [r1, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	dc02      	bgt.n	800a5dc <__sflush_r+0x1c>
 800a5d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	dd48      	ble.n	800a66e <__sflush_r+0xae>
 800a5dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5de:	2e00      	cmp	r6, #0
 800a5e0:	d045      	beq.n	800a66e <__sflush_r+0xae>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a5e8:	682f      	ldr	r7, [r5, #0]
 800a5ea:	6a21      	ldr	r1, [r4, #32]
 800a5ec:	602b      	str	r3, [r5, #0]
 800a5ee:	d030      	beq.n	800a652 <__sflush_r+0x92>
 800a5f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	0759      	lsls	r1, r3, #29
 800a5f6:	d505      	bpl.n	800a604 <__sflush_r+0x44>
 800a5f8:	6863      	ldr	r3, [r4, #4]
 800a5fa:	1ad2      	subs	r2, r2, r3
 800a5fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5fe:	b10b      	cbz	r3, 800a604 <__sflush_r+0x44>
 800a600:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a602:	1ad2      	subs	r2, r2, r3
 800a604:	2300      	movs	r3, #0
 800a606:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a608:	6a21      	ldr	r1, [r4, #32]
 800a60a:	4628      	mov	r0, r5
 800a60c:	47b0      	blx	r6
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	d106      	bne.n	800a622 <__sflush_r+0x62>
 800a614:	6829      	ldr	r1, [r5, #0]
 800a616:	291d      	cmp	r1, #29
 800a618:	d82b      	bhi.n	800a672 <__sflush_r+0xb2>
 800a61a:	4a2a      	ldr	r2, [pc, #168]	@ (800a6c4 <__sflush_r+0x104>)
 800a61c:	410a      	asrs	r2, r1
 800a61e:	07d6      	lsls	r6, r2, #31
 800a620:	d427      	bmi.n	800a672 <__sflush_r+0xb2>
 800a622:	2200      	movs	r2, #0
 800a624:	6062      	str	r2, [r4, #4]
 800a626:	04d9      	lsls	r1, r3, #19
 800a628:	6922      	ldr	r2, [r4, #16]
 800a62a:	6022      	str	r2, [r4, #0]
 800a62c:	d504      	bpl.n	800a638 <__sflush_r+0x78>
 800a62e:	1c42      	adds	r2, r0, #1
 800a630:	d101      	bne.n	800a636 <__sflush_r+0x76>
 800a632:	682b      	ldr	r3, [r5, #0]
 800a634:	b903      	cbnz	r3, 800a638 <__sflush_r+0x78>
 800a636:	6560      	str	r0, [r4, #84]	@ 0x54
 800a638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a63a:	602f      	str	r7, [r5, #0]
 800a63c:	b1b9      	cbz	r1, 800a66e <__sflush_r+0xae>
 800a63e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a642:	4299      	cmp	r1, r3
 800a644:	d002      	beq.n	800a64c <__sflush_r+0x8c>
 800a646:	4628      	mov	r0, r5
 800a648:	f7fe f9c2 	bl	80089d0 <_free_r>
 800a64c:	2300      	movs	r3, #0
 800a64e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a650:	e00d      	b.n	800a66e <__sflush_r+0xae>
 800a652:	2301      	movs	r3, #1
 800a654:	4628      	mov	r0, r5
 800a656:	47b0      	blx	r6
 800a658:	4602      	mov	r2, r0
 800a65a:	1c50      	adds	r0, r2, #1
 800a65c:	d1c9      	bne.n	800a5f2 <__sflush_r+0x32>
 800a65e:	682b      	ldr	r3, [r5, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d0c6      	beq.n	800a5f2 <__sflush_r+0x32>
 800a664:	2b1d      	cmp	r3, #29
 800a666:	d001      	beq.n	800a66c <__sflush_r+0xac>
 800a668:	2b16      	cmp	r3, #22
 800a66a:	d11e      	bne.n	800a6aa <__sflush_r+0xea>
 800a66c:	602f      	str	r7, [r5, #0]
 800a66e:	2000      	movs	r0, #0
 800a670:	e022      	b.n	800a6b8 <__sflush_r+0xf8>
 800a672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a676:	b21b      	sxth	r3, r3
 800a678:	e01b      	b.n	800a6b2 <__sflush_r+0xf2>
 800a67a:	690f      	ldr	r7, [r1, #16]
 800a67c:	2f00      	cmp	r7, #0
 800a67e:	d0f6      	beq.n	800a66e <__sflush_r+0xae>
 800a680:	0793      	lsls	r3, r2, #30
 800a682:	680e      	ldr	r6, [r1, #0]
 800a684:	bf08      	it	eq
 800a686:	694b      	ldreq	r3, [r1, #20]
 800a688:	600f      	str	r7, [r1, #0]
 800a68a:	bf18      	it	ne
 800a68c:	2300      	movne	r3, #0
 800a68e:	eba6 0807 	sub.w	r8, r6, r7
 800a692:	608b      	str	r3, [r1, #8]
 800a694:	f1b8 0f00 	cmp.w	r8, #0
 800a698:	dde9      	ble.n	800a66e <__sflush_r+0xae>
 800a69a:	6a21      	ldr	r1, [r4, #32]
 800a69c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a69e:	4643      	mov	r3, r8
 800a6a0:	463a      	mov	r2, r7
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	47b0      	blx	r6
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	dc08      	bgt.n	800a6bc <__sflush_r+0xfc>
 800a6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6b2:	81a3      	strh	r3, [r4, #12]
 800a6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6bc:	4407      	add	r7, r0
 800a6be:	eba8 0800 	sub.w	r8, r8, r0
 800a6c2:	e7e7      	b.n	800a694 <__sflush_r+0xd4>
 800a6c4:	dfbffffe 	.word	0xdfbffffe

0800a6c8 <_fflush_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	690b      	ldr	r3, [r1, #16]
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	b913      	cbnz	r3, 800a6d8 <_fflush_r+0x10>
 800a6d2:	2500      	movs	r5, #0
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	b118      	cbz	r0, 800a6e2 <_fflush_r+0x1a>
 800a6da:	6a03      	ldr	r3, [r0, #32]
 800a6dc:	b90b      	cbnz	r3, 800a6e2 <_fflush_r+0x1a>
 800a6de:	f7fd f909 	bl	80078f4 <__sinit>
 800a6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0f3      	beq.n	800a6d2 <_fflush_r+0xa>
 800a6ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a6ec:	07d0      	lsls	r0, r2, #31
 800a6ee:	d404      	bmi.n	800a6fa <_fflush_r+0x32>
 800a6f0:	0599      	lsls	r1, r3, #22
 800a6f2:	d402      	bmi.n	800a6fa <_fflush_r+0x32>
 800a6f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6f6:	f7fd fae2 	bl	8007cbe <__retarget_lock_acquire_recursive>
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f7ff ff5f 	bl	800a5c0 <__sflush_r>
 800a702:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a704:	07da      	lsls	r2, r3, #31
 800a706:	4605      	mov	r5, r0
 800a708:	d4e4      	bmi.n	800a6d4 <_fflush_r+0xc>
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	059b      	lsls	r3, r3, #22
 800a70e:	d4e1      	bmi.n	800a6d4 <_fflush_r+0xc>
 800a710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a712:	f7fd fad5 	bl	8007cc0 <__retarget_lock_release_recursive>
 800a716:	e7dd      	b.n	800a6d4 <_fflush_r+0xc>

0800a718 <fiprintf>:
 800a718:	b40e      	push	{r1, r2, r3}
 800a71a:	b503      	push	{r0, r1, lr}
 800a71c:	4601      	mov	r1, r0
 800a71e:	ab03      	add	r3, sp, #12
 800a720:	4805      	ldr	r0, [pc, #20]	@ (800a738 <fiprintf+0x20>)
 800a722:	f853 2b04 	ldr.w	r2, [r3], #4
 800a726:	6800      	ldr	r0, [r0, #0]
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	f000 f989 	bl	800aa40 <_vfiprintf_r>
 800a72e:	b002      	add	sp, #8
 800a730:	f85d eb04 	ldr.w	lr, [sp], #4
 800a734:	b003      	add	sp, #12
 800a736:	4770      	bx	lr
 800a738:	200001d4 	.word	0x200001d4

0800a73c <__sccl>:
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	780b      	ldrb	r3, [r1, #0]
 800a740:	4604      	mov	r4, r0
 800a742:	2b5e      	cmp	r3, #94	@ 0x5e
 800a744:	bf0b      	itete	eq
 800a746:	784b      	ldrbeq	r3, [r1, #1]
 800a748:	1c4a      	addne	r2, r1, #1
 800a74a:	1c8a      	addeq	r2, r1, #2
 800a74c:	2100      	movne	r1, #0
 800a74e:	bf08      	it	eq
 800a750:	2101      	moveq	r1, #1
 800a752:	3801      	subs	r0, #1
 800a754:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a758:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a75c:	42a8      	cmp	r0, r5
 800a75e:	d1fb      	bne.n	800a758 <__sccl+0x1c>
 800a760:	b90b      	cbnz	r3, 800a766 <__sccl+0x2a>
 800a762:	1e50      	subs	r0, r2, #1
 800a764:	bd70      	pop	{r4, r5, r6, pc}
 800a766:	f081 0101 	eor.w	r1, r1, #1
 800a76a:	54e1      	strb	r1, [r4, r3]
 800a76c:	4610      	mov	r0, r2
 800a76e:	4602      	mov	r2, r0
 800a770:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a774:	2d2d      	cmp	r5, #45	@ 0x2d
 800a776:	d005      	beq.n	800a784 <__sccl+0x48>
 800a778:	2d5d      	cmp	r5, #93	@ 0x5d
 800a77a:	d016      	beq.n	800a7aa <__sccl+0x6e>
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	d0f1      	beq.n	800a764 <__sccl+0x28>
 800a780:	462b      	mov	r3, r5
 800a782:	e7f2      	b.n	800a76a <__sccl+0x2e>
 800a784:	7846      	ldrb	r6, [r0, #1]
 800a786:	2e5d      	cmp	r6, #93	@ 0x5d
 800a788:	d0fa      	beq.n	800a780 <__sccl+0x44>
 800a78a:	42b3      	cmp	r3, r6
 800a78c:	dcf8      	bgt.n	800a780 <__sccl+0x44>
 800a78e:	3002      	adds	r0, #2
 800a790:	461a      	mov	r2, r3
 800a792:	3201      	adds	r2, #1
 800a794:	4296      	cmp	r6, r2
 800a796:	54a1      	strb	r1, [r4, r2]
 800a798:	dcfb      	bgt.n	800a792 <__sccl+0x56>
 800a79a:	1af2      	subs	r2, r6, r3
 800a79c:	3a01      	subs	r2, #1
 800a79e:	1c5d      	adds	r5, r3, #1
 800a7a0:	42b3      	cmp	r3, r6
 800a7a2:	bfa8      	it	ge
 800a7a4:	2200      	movge	r2, #0
 800a7a6:	18ab      	adds	r3, r5, r2
 800a7a8:	e7e1      	b.n	800a76e <__sccl+0x32>
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	e7da      	b.n	800a764 <__sccl+0x28>

0800a7ae <__submore>:
 800a7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a7b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7ba:	4299      	cmp	r1, r3
 800a7bc:	d11d      	bne.n	800a7fa <__submore+0x4c>
 800a7be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a7c2:	f7fe fcb3 	bl	800912c <_malloc_r>
 800a7c6:	b918      	cbnz	r0, 800a7d0 <__submore+0x22>
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7d4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a7d6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a7da:	6360      	str	r0, [r4, #52]	@ 0x34
 800a7dc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a7e0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a7e4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a7e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a7ec:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a7f0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a7f4:	6020      	str	r0, [r4, #0]
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	e7e8      	b.n	800a7cc <__submore+0x1e>
 800a7fa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a7fc:	0077      	lsls	r7, r6, #1
 800a7fe:	463a      	mov	r2, r7
 800a800:	f000 f855 	bl	800a8ae <_realloc_r>
 800a804:	4605      	mov	r5, r0
 800a806:	2800      	cmp	r0, #0
 800a808:	d0de      	beq.n	800a7c8 <__submore+0x1a>
 800a80a:	eb00 0806 	add.w	r8, r0, r6
 800a80e:	4601      	mov	r1, r0
 800a810:	4632      	mov	r2, r6
 800a812:	4640      	mov	r0, r8
 800a814:	f7fd fa55 	bl	8007cc2 <memcpy>
 800a818:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a81c:	f8c4 8000 	str.w	r8, [r4]
 800a820:	e7e9      	b.n	800a7f6 <__submore+0x48>

0800a822 <memmove>:
 800a822:	4288      	cmp	r0, r1
 800a824:	b510      	push	{r4, lr}
 800a826:	eb01 0402 	add.w	r4, r1, r2
 800a82a:	d902      	bls.n	800a832 <memmove+0x10>
 800a82c:	4284      	cmp	r4, r0
 800a82e:	4623      	mov	r3, r4
 800a830:	d807      	bhi.n	800a842 <memmove+0x20>
 800a832:	1e43      	subs	r3, r0, #1
 800a834:	42a1      	cmp	r1, r4
 800a836:	d008      	beq.n	800a84a <memmove+0x28>
 800a838:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a83c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a840:	e7f8      	b.n	800a834 <memmove+0x12>
 800a842:	4402      	add	r2, r0
 800a844:	4601      	mov	r1, r0
 800a846:	428a      	cmp	r2, r1
 800a848:	d100      	bne.n	800a84c <memmove+0x2a>
 800a84a:	bd10      	pop	{r4, pc}
 800a84c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a850:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a854:	e7f7      	b.n	800a846 <memmove+0x24>
	...

0800a858 <_sbrk_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4d06      	ldr	r5, [pc, #24]	@ (800a874 <_sbrk_r+0x1c>)
 800a85c:	2300      	movs	r3, #0
 800a85e:	4604      	mov	r4, r0
 800a860:	4608      	mov	r0, r1
 800a862:	602b      	str	r3, [r5, #0]
 800a864:	f7f7 fdcc 	bl	8002400 <_sbrk>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d102      	bne.n	800a872 <_sbrk_r+0x1a>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	b103      	cbz	r3, 800a872 <_sbrk_r+0x1a>
 800a870:	6023      	str	r3, [r4, #0]
 800a872:	bd38      	pop	{r3, r4, r5, pc}
 800a874:	20000970 	.word	0x20000970

0800a878 <abort>:
 800a878:	b508      	push	{r3, lr}
 800a87a:	2006      	movs	r0, #6
 800a87c:	f000 fab4 	bl	800ade8 <raise>
 800a880:	2001      	movs	r0, #1
 800a882:	f7f7 fd45 	bl	8002310 <_exit>

0800a886 <_calloc_r>:
 800a886:	b570      	push	{r4, r5, r6, lr}
 800a888:	fba1 5402 	umull	r5, r4, r1, r2
 800a88c:	b93c      	cbnz	r4, 800a89e <_calloc_r+0x18>
 800a88e:	4629      	mov	r1, r5
 800a890:	f7fe fc4c 	bl	800912c <_malloc_r>
 800a894:	4606      	mov	r6, r0
 800a896:	b928      	cbnz	r0, 800a8a4 <_calloc_r+0x1e>
 800a898:	2600      	movs	r6, #0
 800a89a:	4630      	mov	r0, r6
 800a89c:	bd70      	pop	{r4, r5, r6, pc}
 800a89e:	220c      	movs	r2, #12
 800a8a0:	6002      	str	r2, [r0, #0]
 800a8a2:	e7f9      	b.n	800a898 <_calloc_r+0x12>
 800a8a4:	462a      	mov	r2, r5
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	f7fd f91d 	bl	8007ae6 <memset>
 800a8ac:	e7f5      	b.n	800a89a <_calloc_r+0x14>

0800a8ae <_realloc_r>:
 800a8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b2:	4680      	mov	r8, r0
 800a8b4:	4615      	mov	r5, r2
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	b921      	cbnz	r1, 800a8c4 <_realloc_r+0x16>
 800a8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8be:	4611      	mov	r1, r2
 800a8c0:	f7fe bc34 	b.w	800912c <_malloc_r>
 800a8c4:	b92a      	cbnz	r2, 800a8d2 <_realloc_r+0x24>
 800a8c6:	f7fe f883 	bl	80089d0 <_free_r>
 800a8ca:	2400      	movs	r4, #0
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d2:	f000 faa5 	bl	800ae20 <_malloc_usable_size_r>
 800a8d6:	4285      	cmp	r5, r0
 800a8d8:	4606      	mov	r6, r0
 800a8da:	d802      	bhi.n	800a8e2 <_realloc_r+0x34>
 800a8dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8e0:	d8f4      	bhi.n	800a8cc <_realloc_r+0x1e>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	f7fe fc21 	bl	800912c <_malloc_r>
 800a8ea:	4607      	mov	r7, r0
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d0ec      	beq.n	800a8ca <_realloc_r+0x1c>
 800a8f0:	42b5      	cmp	r5, r6
 800a8f2:	462a      	mov	r2, r5
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	bf28      	it	cs
 800a8f8:	4632      	movcs	r2, r6
 800a8fa:	f7fd f9e2 	bl	8007cc2 <memcpy>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4640      	mov	r0, r8
 800a902:	f7fe f865 	bl	80089d0 <_free_r>
 800a906:	463c      	mov	r4, r7
 800a908:	e7e0      	b.n	800a8cc <_realloc_r+0x1e>
	...

0800a90c <_strtoul_l.constprop.0>:
 800a90c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a910:	4e34      	ldr	r6, [pc, #208]	@ (800a9e4 <_strtoul_l.constprop.0+0xd8>)
 800a912:	4686      	mov	lr, r0
 800a914:	460d      	mov	r5, r1
 800a916:	4628      	mov	r0, r5
 800a918:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a91c:	5d37      	ldrb	r7, [r6, r4]
 800a91e:	f017 0708 	ands.w	r7, r7, #8
 800a922:	d1f8      	bne.n	800a916 <_strtoul_l.constprop.0+0xa>
 800a924:	2c2d      	cmp	r4, #45	@ 0x2d
 800a926:	d12f      	bne.n	800a988 <_strtoul_l.constprop.0+0x7c>
 800a928:	782c      	ldrb	r4, [r5, #0]
 800a92a:	2701      	movs	r7, #1
 800a92c:	1c85      	adds	r5, r0, #2
 800a92e:	f033 0010 	bics.w	r0, r3, #16
 800a932:	d109      	bne.n	800a948 <_strtoul_l.constprop.0+0x3c>
 800a934:	2c30      	cmp	r4, #48	@ 0x30
 800a936:	d12c      	bne.n	800a992 <_strtoul_l.constprop.0+0x86>
 800a938:	7828      	ldrb	r0, [r5, #0]
 800a93a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a93e:	2858      	cmp	r0, #88	@ 0x58
 800a940:	d127      	bne.n	800a992 <_strtoul_l.constprop.0+0x86>
 800a942:	786c      	ldrb	r4, [r5, #1]
 800a944:	2310      	movs	r3, #16
 800a946:	3502      	adds	r5, #2
 800a948:	f04f 38ff 	mov.w	r8, #4294967295
 800a94c:	2600      	movs	r6, #0
 800a94e:	fbb8 f8f3 	udiv	r8, r8, r3
 800a952:	fb03 f908 	mul.w	r9, r3, r8
 800a956:	ea6f 0909 	mvn.w	r9, r9
 800a95a:	4630      	mov	r0, r6
 800a95c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a960:	f1bc 0f09 	cmp.w	ip, #9
 800a964:	d81c      	bhi.n	800a9a0 <_strtoul_l.constprop.0+0x94>
 800a966:	4664      	mov	r4, ip
 800a968:	42a3      	cmp	r3, r4
 800a96a:	dd2a      	ble.n	800a9c2 <_strtoul_l.constprop.0+0xb6>
 800a96c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a970:	d007      	beq.n	800a982 <_strtoul_l.constprop.0+0x76>
 800a972:	4580      	cmp	r8, r0
 800a974:	d322      	bcc.n	800a9bc <_strtoul_l.constprop.0+0xb0>
 800a976:	d101      	bne.n	800a97c <_strtoul_l.constprop.0+0x70>
 800a978:	45a1      	cmp	r9, r4
 800a97a:	db1f      	blt.n	800a9bc <_strtoul_l.constprop.0+0xb0>
 800a97c:	fb00 4003 	mla	r0, r0, r3, r4
 800a980:	2601      	movs	r6, #1
 800a982:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a986:	e7e9      	b.n	800a95c <_strtoul_l.constprop.0+0x50>
 800a988:	2c2b      	cmp	r4, #43	@ 0x2b
 800a98a:	bf04      	itt	eq
 800a98c:	782c      	ldrbeq	r4, [r5, #0]
 800a98e:	1c85      	addeq	r5, r0, #2
 800a990:	e7cd      	b.n	800a92e <_strtoul_l.constprop.0+0x22>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d1d8      	bne.n	800a948 <_strtoul_l.constprop.0+0x3c>
 800a996:	2c30      	cmp	r4, #48	@ 0x30
 800a998:	bf0c      	ite	eq
 800a99a:	2308      	moveq	r3, #8
 800a99c:	230a      	movne	r3, #10
 800a99e:	e7d3      	b.n	800a948 <_strtoul_l.constprop.0+0x3c>
 800a9a0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a9a4:	f1bc 0f19 	cmp.w	ip, #25
 800a9a8:	d801      	bhi.n	800a9ae <_strtoul_l.constprop.0+0xa2>
 800a9aa:	3c37      	subs	r4, #55	@ 0x37
 800a9ac:	e7dc      	b.n	800a968 <_strtoul_l.constprop.0+0x5c>
 800a9ae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a9b2:	f1bc 0f19 	cmp.w	ip, #25
 800a9b6:	d804      	bhi.n	800a9c2 <_strtoul_l.constprop.0+0xb6>
 800a9b8:	3c57      	subs	r4, #87	@ 0x57
 800a9ba:	e7d5      	b.n	800a968 <_strtoul_l.constprop.0+0x5c>
 800a9bc:	f04f 36ff 	mov.w	r6, #4294967295
 800a9c0:	e7df      	b.n	800a982 <_strtoul_l.constprop.0+0x76>
 800a9c2:	1c73      	adds	r3, r6, #1
 800a9c4:	d106      	bne.n	800a9d4 <_strtoul_l.constprop.0+0xc8>
 800a9c6:	2322      	movs	r3, #34	@ 0x22
 800a9c8:	f8ce 3000 	str.w	r3, [lr]
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	b932      	cbnz	r2, 800a9de <_strtoul_l.constprop.0+0xd2>
 800a9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9d4:	b107      	cbz	r7, 800a9d8 <_strtoul_l.constprop.0+0xcc>
 800a9d6:	4240      	negs	r0, r0
 800a9d8:	2a00      	cmp	r2, #0
 800a9da:	d0f9      	beq.n	800a9d0 <_strtoul_l.constprop.0+0xc4>
 800a9dc:	b106      	cbz	r6, 800a9e0 <_strtoul_l.constprop.0+0xd4>
 800a9de:	1e69      	subs	r1, r5, #1
 800a9e0:	6011      	str	r1, [r2, #0]
 800a9e2:	e7f5      	b.n	800a9d0 <_strtoul_l.constprop.0+0xc4>
 800a9e4:	0800cfd9 	.word	0x0800cfd9

0800a9e8 <_strtoul_r>:
 800a9e8:	f7ff bf90 	b.w	800a90c <_strtoul_l.constprop.0>

0800a9ec <__sfputc_r>:
 800a9ec:	6893      	ldr	r3, [r2, #8]
 800a9ee:	3b01      	subs	r3, #1
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	b410      	push	{r4}
 800a9f4:	6093      	str	r3, [r2, #8]
 800a9f6:	da08      	bge.n	800aa0a <__sfputc_r+0x1e>
 800a9f8:	6994      	ldr	r4, [r2, #24]
 800a9fa:	42a3      	cmp	r3, r4
 800a9fc:	db01      	blt.n	800aa02 <__sfputc_r+0x16>
 800a9fe:	290a      	cmp	r1, #10
 800aa00:	d103      	bne.n	800aa0a <__sfputc_r+0x1e>
 800aa02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa06:	f000 b933 	b.w	800ac70 <__swbuf_r>
 800aa0a:	6813      	ldr	r3, [r2, #0]
 800aa0c:	1c58      	adds	r0, r3, #1
 800aa0e:	6010      	str	r0, [r2, #0]
 800aa10:	7019      	strb	r1, [r3, #0]
 800aa12:	4608      	mov	r0, r1
 800aa14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <__sfputs_r>:
 800aa1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	460f      	mov	r7, r1
 800aa20:	4614      	mov	r4, r2
 800aa22:	18d5      	adds	r5, r2, r3
 800aa24:	42ac      	cmp	r4, r5
 800aa26:	d101      	bne.n	800aa2c <__sfputs_r+0x12>
 800aa28:	2000      	movs	r0, #0
 800aa2a:	e007      	b.n	800aa3c <__sfputs_r+0x22>
 800aa2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa30:	463a      	mov	r2, r7
 800aa32:	4630      	mov	r0, r6
 800aa34:	f7ff ffda 	bl	800a9ec <__sfputc_r>
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	d1f3      	bne.n	800aa24 <__sfputs_r+0xa>
 800aa3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa40 <_vfiprintf_r>:
 800aa40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa44:	460d      	mov	r5, r1
 800aa46:	b09d      	sub	sp, #116	@ 0x74
 800aa48:	4614      	mov	r4, r2
 800aa4a:	4698      	mov	r8, r3
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	b118      	cbz	r0, 800aa58 <_vfiprintf_r+0x18>
 800aa50:	6a03      	ldr	r3, [r0, #32]
 800aa52:	b90b      	cbnz	r3, 800aa58 <_vfiprintf_r+0x18>
 800aa54:	f7fc ff4e 	bl	80078f4 <__sinit>
 800aa58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa5a:	07d9      	lsls	r1, r3, #31
 800aa5c:	d405      	bmi.n	800aa6a <_vfiprintf_r+0x2a>
 800aa5e:	89ab      	ldrh	r3, [r5, #12]
 800aa60:	059a      	lsls	r2, r3, #22
 800aa62:	d402      	bmi.n	800aa6a <_vfiprintf_r+0x2a>
 800aa64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa66:	f7fd f92a 	bl	8007cbe <__retarget_lock_acquire_recursive>
 800aa6a:	89ab      	ldrh	r3, [r5, #12]
 800aa6c:	071b      	lsls	r3, r3, #28
 800aa6e:	d501      	bpl.n	800aa74 <_vfiprintf_r+0x34>
 800aa70:	692b      	ldr	r3, [r5, #16]
 800aa72:	b99b      	cbnz	r3, 800aa9c <_vfiprintf_r+0x5c>
 800aa74:	4629      	mov	r1, r5
 800aa76:	4630      	mov	r0, r6
 800aa78:	f000 f938 	bl	800acec <__swsetup_r>
 800aa7c:	b170      	cbz	r0, 800aa9c <_vfiprintf_r+0x5c>
 800aa7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa80:	07dc      	lsls	r4, r3, #31
 800aa82:	d504      	bpl.n	800aa8e <_vfiprintf_r+0x4e>
 800aa84:	f04f 30ff 	mov.w	r0, #4294967295
 800aa88:	b01d      	add	sp, #116	@ 0x74
 800aa8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8e:	89ab      	ldrh	r3, [r5, #12]
 800aa90:	0598      	lsls	r0, r3, #22
 800aa92:	d4f7      	bmi.n	800aa84 <_vfiprintf_r+0x44>
 800aa94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa96:	f7fd f913 	bl	8007cc0 <__retarget_lock_release_recursive>
 800aa9a:	e7f3      	b.n	800aa84 <_vfiprintf_r+0x44>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaa0:	2320      	movs	r3, #32
 800aaa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aaa6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aaaa:	2330      	movs	r3, #48	@ 0x30
 800aaac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac5c <_vfiprintf_r+0x21c>
 800aab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aab4:	f04f 0901 	mov.w	r9, #1
 800aab8:	4623      	mov	r3, r4
 800aaba:	469a      	mov	sl, r3
 800aabc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aac0:	b10a      	cbz	r2, 800aac6 <_vfiprintf_r+0x86>
 800aac2:	2a25      	cmp	r2, #37	@ 0x25
 800aac4:	d1f9      	bne.n	800aaba <_vfiprintf_r+0x7a>
 800aac6:	ebba 0b04 	subs.w	fp, sl, r4
 800aaca:	d00b      	beq.n	800aae4 <_vfiprintf_r+0xa4>
 800aacc:	465b      	mov	r3, fp
 800aace:	4622      	mov	r2, r4
 800aad0:	4629      	mov	r1, r5
 800aad2:	4630      	mov	r0, r6
 800aad4:	f7ff ffa1 	bl	800aa1a <__sfputs_r>
 800aad8:	3001      	adds	r0, #1
 800aada:	f000 80a7 	beq.w	800ac2c <_vfiprintf_r+0x1ec>
 800aade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aae0:	445a      	add	r2, fp
 800aae2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aae4:	f89a 3000 	ldrb.w	r3, [sl]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 809f 	beq.w	800ac2c <_vfiprintf_r+0x1ec>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaf8:	f10a 0a01 	add.w	sl, sl, #1
 800aafc:	9304      	str	r3, [sp, #16]
 800aafe:	9307      	str	r3, [sp, #28]
 800ab00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab04:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab06:	4654      	mov	r4, sl
 800ab08:	2205      	movs	r2, #5
 800ab0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0e:	4853      	ldr	r0, [pc, #332]	@ (800ac5c <_vfiprintf_r+0x21c>)
 800ab10:	f7f5 fb66 	bl	80001e0 <memchr>
 800ab14:	9a04      	ldr	r2, [sp, #16]
 800ab16:	b9d8      	cbnz	r0, 800ab50 <_vfiprintf_r+0x110>
 800ab18:	06d1      	lsls	r1, r2, #27
 800ab1a:	bf44      	itt	mi
 800ab1c:	2320      	movmi	r3, #32
 800ab1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab22:	0713      	lsls	r3, r2, #28
 800ab24:	bf44      	itt	mi
 800ab26:	232b      	movmi	r3, #43	@ 0x2b
 800ab28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab2c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab30:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab32:	d015      	beq.n	800ab60 <_vfiprintf_r+0x120>
 800ab34:	9a07      	ldr	r2, [sp, #28]
 800ab36:	4654      	mov	r4, sl
 800ab38:	2000      	movs	r0, #0
 800ab3a:	f04f 0c0a 	mov.w	ip, #10
 800ab3e:	4621      	mov	r1, r4
 800ab40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab44:	3b30      	subs	r3, #48	@ 0x30
 800ab46:	2b09      	cmp	r3, #9
 800ab48:	d94b      	bls.n	800abe2 <_vfiprintf_r+0x1a2>
 800ab4a:	b1b0      	cbz	r0, 800ab7a <_vfiprintf_r+0x13a>
 800ab4c:	9207      	str	r2, [sp, #28]
 800ab4e:	e014      	b.n	800ab7a <_vfiprintf_r+0x13a>
 800ab50:	eba0 0308 	sub.w	r3, r0, r8
 800ab54:	fa09 f303 	lsl.w	r3, r9, r3
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	46a2      	mov	sl, r4
 800ab5e:	e7d2      	b.n	800ab06 <_vfiprintf_r+0xc6>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	1d19      	adds	r1, r3, #4
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	9103      	str	r1, [sp, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	bfbb      	ittet	lt
 800ab6c:	425b      	neglt	r3, r3
 800ab6e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab72:	9307      	strge	r3, [sp, #28]
 800ab74:	9307      	strlt	r3, [sp, #28]
 800ab76:	bfb8      	it	lt
 800ab78:	9204      	strlt	r2, [sp, #16]
 800ab7a:	7823      	ldrb	r3, [r4, #0]
 800ab7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab7e:	d10a      	bne.n	800ab96 <_vfiprintf_r+0x156>
 800ab80:	7863      	ldrb	r3, [r4, #1]
 800ab82:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab84:	d132      	bne.n	800abec <_vfiprintf_r+0x1ac>
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	1d1a      	adds	r2, r3, #4
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	9203      	str	r2, [sp, #12]
 800ab8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab92:	3402      	adds	r4, #2
 800ab94:	9305      	str	r3, [sp, #20]
 800ab96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac6c <_vfiprintf_r+0x22c>
 800ab9a:	7821      	ldrb	r1, [r4, #0]
 800ab9c:	2203      	movs	r2, #3
 800ab9e:	4650      	mov	r0, sl
 800aba0:	f7f5 fb1e 	bl	80001e0 <memchr>
 800aba4:	b138      	cbz	r0, 800abb6 <_vfiprintf_r+0x176>
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	eba0 000a 	sub.w	r0, r0, sl
 800abac:	2240      	movs	r2, #64	@ 0x40
 800abae:	4082      	lsls	r2, r0
 800abb0:	4313      	orrs	r3, r2
 800abb2:	3401      	adds	r4, #1
 800abb4:	9304      	str	r3, [sp, #16]
 800abb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abba:	4829      	ldr	r0, [pc, #164]	@ (800ac60 <_vfiprintf_r+0x220>)
 800abbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abc0:	2206      	movs	r2, #6
 800abc2:	f7f5 fb0d 	bl	80001e0 <memchr>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d03f      	beq.n	800ac4a <_vfiprintf_r+0x20a>
 800abca:	4b26      	ldr	r3, [pc, #152]	@ (800ac64 <_vfiprintf_r+0x224>)
 800abcc:	bb1b      	cbnz	r3, 800ac16 <_vfiprintf_r+0x1d6>
 800abce:	9b03      	ldr	r3, [sp, #12]
 800abd0:	3307      	adds	r3, #7
 800abd2:	f023 0307 	bic.w	r3, r3, #7
 800abd6:	3308      	adds	r3, #8
 800abd8:	9303      	str	r3, [sp, #12]
 800abda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abdc:	443b      	add	r3, r7
 800abde:	9309      	str	r3, [sp, #36]	@ 0x24
 800abe0:	e76a      	b.n	800aab8 <_vfiprintf_r+0x78>
 800abe2:	fb0c 3202 	mla	r2, ip, r2, r3
 800abe6:	460c      	mov	r4, r1
 800abe8:	2001      	movs	r0, #1
 800abea:	e7a8      	b.n	800ab3e <_vfiprintf_r+0xfe>
 800abec:	2300      	movs	r3, #0
 800abee:	3401      	adds	r4, #1
 800abf0:	9305      	str	r3, [sp, #20]
 800abf2:	4619      	mov	r1, r3
 800abf4:	f04f 0c0a 	mov.w	ip, #10
 800abf8:	4620      	mov	r0, r4
 800abfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abfe:	3a30      	subs	r2, #48	@ 0x30
 800ac00:	2a09      	cmp	r2, #9
 800ac02:	d903      	bls.n	800ac0c <_vfiprintf_r+0x1cc>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0c6      	beq.n	800ab96 <_vfiprintf_r+0x156>
 800ac08:	9105      	str	r1, [sp, #20]
 800ac0a:	e7c4      	b.n	800ab96 <_vfiprintf_r+0x156>
 800ac0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac10:	4604      	mov	r4, r0
 800ac12:	2301      	movs	r3, #1
 800ac14:	e7f0      	b.n	800abf8 <_vfiprintf_r+0x1b8>
 800ac16:	ab03      	add	r3, sp, #12
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	462a      	mov	r2, r5
 800ac1c:	4b12      	ldr	r3, [pc, #72]	@ (800ac68 <_vfiprintf_r+0x228>)
 800ac1e:	a904      	add	r1, sp, #16
 800ac20:	4630      	mov	r0, r6
 800ac22:	f7fc f80f 	bl	8006c44 <_printf_float>
 800ac26:	4607      	mov	r7, r0
 800ac28:	1c78      	adds	r0, r7, #1
 800ac2a:	d1d6      	bne.n	800abda <_vfiprintf_r+0x19a>
 800ac2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac2e:	07d9      	lsls	r1, r3, #31
 800ac30:	d405      	bmi.n	800ac3e <_vfiprintf_r+0x1fe>
 800ac32:	89ab      	ldrh	r3, [r5, #12]
 800ac34:	059a      	lsls	r2, r3, #22
 800ac36:	d402      	bmi.n	800ac3e <_vfiprintf_r+0x1fe>
 800ac38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac3a:	f7fd f841 	bl	8007cc0 <__retarget_lock_release_recursive>
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	065b      	lsls	r3, r3, #25
 800ac42:	f53f af1f 	bmi.w	800aa84 <_vfiprintf_r+0x44>
 800ac46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac48:	e71e      	b.n	800aa88 <_vfiprintf_r+0x48>
 800ac4a:	ab03      	add	r3, sp, #12
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4b05      	ldr	r3, [pc, #20]	@ (800ac68 <_vfiprintf_r+0x228>)
 800ac52:	a904      	add	r1, sp, #16
 800ac54:	4630      	mov	r0, r6
 800ac56:	f7fc fa8d 	bl	8007174 <_printf_i>
 800ac5a:	e7e4      	b.n	800ac26 <_vfiprintf_r+0x1e6>
 800ac5c:	0800d0d9 	.word	0x0800d0d9
 800ac60:	0800d0e3 	.word	0x0800d0e3
 800ac64:	08006c45 	.word	0x08006c45
 800ac68:	0800aa1b 	.word	0x0800aa1b
 800ac6c:	0800d0df 	.word	0x0800d0df

0800ac70 <__swbuf_r>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	460e      	mov	r6, r1
 800ac74:	4614      	mov	r4, r2
 800ac76:	4605      	mov	r5, r0
 800ac78:	b118      	cbz	r0, 800ac82 <__swbuf_r+0x12>
 800ac7a:	6a03      	ldr	r3, [r0, #32]
 800ac7c:	b90b      	cbnz	r3, 800ac82 <__swbuf_r+0x12>
 800ac7e:	f7fc fe39 	bl	80078f4 <__sinit>
 800ac82:	69a3      	ldr	r3, [r4, #24]
 800ac84:	60a3      	str	r3, [r4, #8]
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	071a      	lsls	r2, r3, #28
 800ac8a:	d501      	bpl.n	800ac90 <__swbuf_r+0x20>
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	b943      	cbnz	r3, 800aca2 <__swbuf_r+0x32>
 800ac90:	4621      	mov	r1, r4
 800ac92:	4628      	mov	r0, r5
 800ac94:	f000 f82a 	bl	800acec <__swsetup_r>
 800ac98:	b118      	cbz	r0, 800aca2 <__swbuf_r+0x32>
 800ac9a:	f04f 37ff 	mov.w	r7, #4294967295
 800ac9e:	4638      	mov	r0, r7
 800aca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	6922      	ldr	r2, [r4, #16]
 800aca6:	1a98      	subs	r0, r3, r2
 800aca8:	6963      	ldr	r3, [r4, #20]
 800acaa:	b2f6      	uxtb	r6, r6
 800acac:	4283      	cmp	r3, r0
 800acae:	4637      	mov	r7, r6
 800acb0:	dc05      	bgt.n	800acbe <__swbuf_r+0x4e>
 800acb2:	4621      	mov	r1, r4
 800acb4:	4628      	mov	r0, r5
 800acb6:	f7ff fd07 	bl	800a6c8 <_fflush_r>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d1ed      	bne.n	800ac9a <__swbuf_r+0x2a>
 800acbe:	68a3      	ldr	r3, [r4, #8]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	60a3      	str	r3, [r4, #8]
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	6022      	str	r2, [r4, #0]
 800acca:	701e      	strb	r6, [r3, #0]
 800accc:	6962      	ldr	r2, [r4, #20]
 800acce:	1c43      	adds	r3, r0, #1
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d004      	beq.n	800acde <__swbuf_r+0x6e>
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	07db      	lsls	r3, r3, #31
 800acd8:	d5e1      	bpl.n	800ac9e <__swbuf_r+0x2e>
 800acda:	2e0a      	cmp	r6, #10
 800acdc:	d1df      	bne.n	800ac9e <__swbuf_r+0x2e>
 800acde:	4621      	mov	r1, r4
 800ace0:	4628      	mov	r0, r5
 800ace2:	f7ff fcf1 	bl	800a6c8 <_fflush_r>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	d0d9      	beq.n	800ac9e <__swbuf_r+0x2e>
 800acea:	e7d6      	b.n	800ac9a <__swbuf_r+0x2a>

0800acec <__swsetup_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4b29      	ldr	r3, [pc, #164]	@ (800ad94 <__swsetup_r+0xa8>)
 800acf0:	4605      	mov	r5, r0
 800acf2:	6818      	ldr	r0, [r3, #0]
 800acf4:	460c      	mov	r4, r1
 800acf6:	b118      	cbz	r0, 800ad00 <__swsetup_r+0x14>
 800acf8:	6a03      	ldr	r3, [r0, #32]
 800acfa:	b90b      	cbnz	r3, 800ad00 <__swsetup_r+0x14>
 800acfc:	f7fc fdfa 	bl	80078f4 <__sinit>
 800ad00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad04:	0719      	lsls	r1, r3, #28
 800ad06:	d422      	bmi.n	800ad4e <__swsetup_r+0x62>
 800ad08:	06da      	lsls	r2, r3, #27
 800ad0a:	d407      	bmi.n	800ad1c <__swsetup_r+0x30>
 800ad0c:	2209      	movs	r2, #9
 800ad0e:	602a      	str	r2, [r5, #0]
 800ad10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1a:	e033      	b.n	800ad84 <__swsetup_r+0x98>
 800ad1c:	0758      	lsls	r0, r3, #29
 800ad1e:	d512      	bpl.n	800ad46 <__swsetup_r+0x5a>
 800ad20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad22:	b141      	cbz	r1, 800ad36 <__swsetup_r+0x4a>
 800ad24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad28:	4299      	cmp	r1, r3
 800ad2a:	d002      	beq.n	800ad32 <__swsetup_r+0x46>
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	f7fd fe4f 	bl	80089d0 <_free_r>
 800ad32:	2300      	movs	r3, #0
 800ad34:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad3c:	81a3      	strh	r3, [r4, #12]
 800ad3e:	2300      	movs	r3, #0
 800ad40:	6063      	str	r3, [r4, #4]
 800ad42:	6923      	ldr	r3, [r4, #16]
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	89a3      	ldrh	r3, [r4, #12]
 800ad48:	f043 0308 	orr.w	r3, r3, #8
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	6923      	ldr	r3, [r4, #16]
 800ad50:	b94b      	cbnz	r3, 800ad66 <__swsetup_r+0x7a>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad5c:	d003      	beq.n	800ad66 <__swsetup_r+0x7a>
 800ad5e:	4621      	mov	r1, r4
 800ad60:	4628      	mov	r0, r5
 800ad62:	f000 f88b 	bl	800ae7c <__smakebuf_r>
 800ad66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad6a:	f013 0201 	ands.w	r2, r3, #1
 800ad6e:	d00a      	beq.n	800ad86 <__swsetup_r+0x9a>
 800ad70:	2200      	movs	r2, #0
 800ad72:	60a2      	str	r2, [r4, #8]
 800ad74:	6962      	ldr	r2, [r4, #20]
 800ad76:	4252      	negs	r2, r2
 800ad78:	61a2      	str	r2, [r4, #24]
 800ad7a:	6922      	ldr	r2, [r4, #16]
 800ad7c:	b942      	cbnz	r2, 800ad90 <__swsetup_r+0xa4>
 800ad7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad82:	d1c5      	bne.n	800ad10 <__swsetup_r+0x24>
 800ad84:	bd38      	pop	{r3, r4, r5, pc}
 800ad86:	0799      	lsls	r1, r3, #30
 800ad88:	bf58      	it	pl
 800ad8a:	6962      	ldrpl	r2, [r4, #20]
 800ad8c:	60a2      	str	r2, [r4, #8]
 800ad8e:	e7f4      	b.n	800ad7a <__swsetup_r+0x8e>
 800ad90:	2000      	movs	r0, #0
 800ad92:	e7f7      	b.n	800ad84 <__swsetup_r+0x98>
 800ad94:	200001d4 	.word	0x200001d4

0800ad98 <_raise_r>:
 800ad98:	291f      	cmp	r1, #31
 800ad9a:	b538      	push	{r3, r4, r5, lr}
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	460c      	mov	r4, r1
 800ada0:	d904      	bls.n	800adac <_raise_r+0x14>
 800ada2:	2316      	movs	r3, #22
 800ada4:	6003      	str	r3, [r0, #0]
 800ada6:	f04f 30ff 	mov.w	r0, #4294967295
 800adaa:	bd38      	pop	{r3, r4, r5, pc}
 800adac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800adae:	b112      	cbz	r2, 800adb6 <_raise_r+0x1e>
 800adb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adb4:	b94b      	cbnz	r3, 800adca <_raise_r+0x32>
 800adb6:	4628      	mov	r0, r5
 800adb8:	f000 f830 	bl	800ae1c <_getpid_r>
 800adbc:	4622      	mov	r2, r4
 800adbe:	4601      	mov	r1, r0
 800adc0:	4628      	mov	r0, r5
 800adc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adc6:	f000 b817 	b.w	800adf8 <_kill_r>
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d00a      	beq.n	800ade4 <_raise_r+0x4c>
 800adce:	1c59      	adds	r1, r3, #1
 800add0:	d103      	bne.n	800adda <_raise_r+0x42>
 800add2:	2316      	movs	r3, #22
 800add4:	6003      	str	r3, [r0, #0]
 800add6:	2001      	movs	r0, #1
 800add8:	e7e7      	b.n	800adaa <_raise_r+0x12>
 800adda:	2100      	movs	r1, #0
 800addc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ade0:	4620      	mov	r0, r4
 800ade2:	4798      	blx	r3
 800ade4:	2000      	movs	r0, #0
 800ade6:	e7e0      	b.n	800adaa <_raise_r+0x12>

0800ade8 <raise>:
 800ade8:	4b02      	ldr	r3, [pc, #8]	@ (800adf4 <raise+0xc>)
 800adea:	4601      	mov	r1, r0
 800adec:	6818      	ldr	r0, [r3, #0]
 800adee:	f7ff bfd3 	b.w	800ad98 <_raise_r>
 800adf2:	bf00      	nop
 800adf4:	200001d4 	.word	0x200001d4

0800adf8 <_kill_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d07      	ldr	r5, [pc, #28]	@ (800ae18 <_kill_r+0x20>)
 800adfc:	2300      	movs	r3, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	4611      	mov	r1, r2
 800ae04:	602b      	str	r3, [r5, #0]
 800ae06:	f7f7 fa73 	bl	80022f0 <_kill>
 800ae0a:	1c43      	adds	r3, r0, #1
 800ae0c:	d102      	bne.n	800ae14 <_kill_r+0x1c>
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	b103      	cbz	r3, 800ae14 <_kill_r+0x1c>
 800ae12:	6023      	str	r3, [r4, #0]
 800ae14:	bd38      	pop	{r3, r4, r5, pc}
 800ae16:	bf00      	nop
 800ae18:	20000970 	.word	0x20000970

0800ae1c <_getpid_r>:
 800ae1c:	f7f7 ba60 	b.w	80022e0 <_getpid>

0800ae20 <_malloc_usable_size_r>:
 800ae20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae24:	1f18      	subs	r0, r3, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfbc      	itt	lt
 800ae2a:	580b      	ldrlt	r3, [r1, r0]
 800ae2c:	18c0      	addlt	r0, r0, r3
 800ae2e:	4770      	bx	lr

0800ae30 <__swhatbuf_r>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	460c      	mov	r4, r1
 800ae34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae38:	2900      	cmp	r1, #0
 800ae3a:	b096      	sub	sp, #88	@ 0x58
 800ae3c:	4615      	mov	r5, r2
 800ae3e:	461e      	mov	r6, r3
 800ae40:	da0d      	bge.n	800ae5e <__swhatbuf_r+0x2e>
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae48:	f04f 0100 	mov.w	r1, #0
 800ae4c:	bf14      	ite	ne
 800ae4e:	2340      	movne	r3, #64	@ 0x40
 800ae50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae54:	2000      	movs	r0, #0
 800ae56:	6031      	str	r1, [r6, #0]
 800ae58:	602b      	str	r3, [r5, #0]
 800ae5a:	b016      	add	sp, #88	@ 0x58
 800ae5c:	bd70      	pop	{r4, r5, r6, pc}
 800ae5e:	466a      	mov	r2, sp
 800ae60:	f000 f848 	bl	800aef4 <_fstat_r>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	dbec      	blt.n	800ae42 <__swhatbuf_r+0x12>
 800ae68:	9901      	ldr	r1, [sp, #4]
 800ae6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae72:	4259      	negs	r1, r3
 800ae74:	4159      	adcs	r1, r3
 800ae76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae7a:	e7eb      	b.n	800ae54 <__swhatbuf_r+0x24>

0800ae7c <__smakebuf_r>:
 800ae7c:	898b      	ldrh	r3, [r1, #12]
 800ae7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae80:	079d      	lsls	r5, r3, #30
 800ae82:	4606      	mov	r6, r0
 800ae84:	460c      	mov	r4, r1
 800ae86:	d507      	bpl.n	800ae98 <__smakebuf_r+0x1c>
 800ae88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	6123      	str	r3, [r4, #16]
 800ae90:	2301      	movs	r3, #1
 800ae92:	6163      	str	r3, [r4, #20]
 800ae94:	b003      	add	sp, #12
 800ae96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae98:	ab01      	add	r3, sp, #4
 800ae9a:	466a      	mov	r2, sp
 800ae9c:	f7ff ffc8 	bl	800ae30 <__swhatbuf_r>
 800aea0:	9f00      	ldr	r7, [sp, #0]
 800aea2:	4605      	mov	r5, r0
 800aea4:	4639      	mov	r1, r7
 800aea6:	4630      	mov	r0, r6
 800aea8:	f7fe f940 	bl	800912c <_malloc_r>
 800aeac:	b948      	cbnz	r0, 800aec2 <__smakebuf_r+0x46>
 800aeae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb2:	059a      	lsls	r2, r3, #22
 800aeb4:	d4ee      	bmi.n	800ae94 <__smakebuf_r+0x18>
 800aeb6:	f023 0303 	bic.w	r3, r3, #3
 800aeba:	f043 0302 	orr.w	r3, r3, #2
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	e7e2      	b.n	800ae88 <__smakebuf_r+0xc>
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	6020      	str	r0, [r4, #0]
 800aec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	9b01      	ldr	r3, [sp, #4]
 800aece:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aed2:	b15b      	cbz	r3, 800aeec <__smakebuf_r+0x70>
 800aed4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed8:	4630      	mov	r0, r6
 800aeda:	f000 f81d 	bl	800af18 <_isatty_r>
 800aede:	b128      	cbz	r0, 800aeec <__smakebuf_r+0x70>
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	f023 0303 	bic.w	r3, r3, #3
 800aee6:	f043 0301 	orr.w	r3, r3, #1
 800aeea:	81a3      	strh	r3, [r4, #12]
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	431d      	orrs	r5, r3
 800aef0:	81a5      	strh	r5, [r4, #12]
 800aef2:	e7cf      	b.n	800ae94 <__smakebuf_r+0x18>

0800aef4 <_fstat_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	@ (800af14 <_fstat_r+0x20>)
 800aef8:	2300      	movs	r3, #0
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	f7f7 fa55 	bl	80023b0 <_fstat>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d102      	bne.n	800af10 <_fstat_r+0x1c>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b103      	cbz	r3, 800af10 <_fstat_r+0x1c>
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	bd38      	pop	{r3, r4, r5, pc}
 800af12:	bf00      	nop
 800af14:	20000970 	.word	0x20000970

0800af18 <_isatty_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d06      	ldr	r5, [pc, #24]	@ (800af34 <_isatty_r+0x1c>)
 800af1c:	2300      	movs	r3, #0
 800af1e:	4604      	mov	r4, r0
 800af20:	4608      	mov	r0, r1
 800af22:	602b      	str	r3, [r5, #0]
 800af24:	f7f7 fa54 	bl	80023d0 <_isatty>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_isatty_r+0x1a>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_isatty_r+0x1a>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	20000970 	.word	0x20000970

0800af38 <acos>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	ed2d 8b02 	vpush	{d8}
 800af3e:	ec55 4b10 	vmov	r4, r5, d0
 800af42:	f000 fa3d 	bl	800b3c0 <__ieee754_acos>
 800af46:	4622      	mov	r2, r4
 800af48:	462b      	mov	r3, r5
 800af4a:	4620      	mov	r0, r4
 800af4c:	4629      	mov	r1, r5
 800af4e:	eeb0 8a40 	vmov.f32	s16, s0
 800af52:	eef0 8a60 	vmov.f32	s17, s1
 800af56:	f7f5 fdf1 	bl	8000b3c <__aeabi_dcmpun>
 800af5a:	b9a8      	cbnz	r0, 800af88 <acos+0x50>
 800af5c:	ec45 4b10 	vmov	d0, r4, r5
 800af60:	f000 f8ba 	bl	800b0d8 <fabs>
 800af64:	4b0c      	ldr	r3, [pc, #48]	@ (800af98 <acos+0x60>)
 800af66:	ec51 0b10 	vmov	r0, r1, d0
 800af6a:	2200      	movs	r2, #0
 800af6c:	f7f5 fddc 	bl	8000b28 <__aeabi_dcmpgt>
 800af70:	b150      	cbz	r0, 800af88 <acos+0x50>
 800af72:	f7fc fe79 	bl	8007c68 <__errno>
 800af76:	ecbd 8b02 	vpop	{d8}
 800af7a:	2321      	movs	r3, #33	@ 0x21
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af82:	4806      	ldr	r0, [pc, #24]	@ (800af9c <acos+0x64>)
 800af84:	f7fc beac 	b.w	8007ce0 <nan>
 800af88:	eeb0 0a48 	vmov.f32	s0, s16
 800af8c:	eef0 0a68 	vmov.f32	s1, s17
 800af90:	ecbd 8b02 	vpop	{d8}
 800af94:	bd38      	pop	{r3, r4, r5, pc}
 800af96:	bf00      	nop
 800af98:	3ff00000 	.word	0x3ff00000
 800af9c:	0800cdab 	.word	0x0800cdab

0800afa0 <pow>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	ed2d 8b02 	vpush	{d8}
 800afa6:	eeb0 8a40 	vmov.f32	s16, s0
 800afaa:	eef0 8a60 	vmov.f32	s17, s1
 800afae:	ec55 4b11 	vmov	r4, r5, d1
 800afb2:	f000 fc61 	bl	800b878 <__ieee754_pow>
 800afb6:	4622      	mov	r2, r4
 800afb8:	462b      	mov	r3, r5
 800afba:	4620      	mov	r0, r4
 800afbc:	4629      	mov	r1, r5
 800afbe:	ec57 6b10 	vmov	r6, r7, d0
 800afc2:	f7f5 fdbb 	bl	8000b3c <__aeabi_dcmpun>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d13b      	bne.n	800b042 <pow+0xa2>
 800afca:	ec51 0b18 	vmov	r0, r1, d8
 800afce:	2200      	movs	r2, #0
 800afd0:	2300      	movs	r3, #0
 800afd2:	f7f5 fd81 	bl	8000ad8 <__aeabi_dcmpeq>
 800afd6:	b1b8      	cbz	r0, 800b008 <pow+0x68>
 800afd8:	2200      	movs	r2, #0
 800afda:	2300      	movs	r3, #0
 800afdc:	4620      	mov	r0, r4
 800afde:	4629      	mov	r1, r5
 800afe0:	f7f5 fd7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d146      	bne.n	800b076 <pow+0xd6>
 800afe8:	ec45 4b10 	vmov	d0, r4, r5
 800afec:	f000 f8f2 	bl	800b1d4 <finite>
 800aff0:	b338      	cbz	r0, 800b042 <pow+0xa2>
 800aff2:	2200      	movs	r2, #0
 800aff4:	2300      	movs	r3, #0
 800aff6:	4620      	mov	r0, r4
 800aff8:	4629      	mov	r1, r5
 800affa:	f7f5 fd77 	bl	8000aec <__aeabi_dcmplt>
 800affe:	b300      	cbz	r0, 800b042 <pow+0xa2>
 800b000:	f7fc fe32 	bl	8007c68 <__errno>
 800b004:	2322      	movs	r3, #34	@ 0x22
 800b006:	e01b      	b.n	800b040 <pow+0xa0>
 800b008:	ec47 6b10 	vmov	d0, r6, r7
 800b00c:	f000 f8e2 	bl	800b1d4 <finite>
 800b010:	b9e0      	cbnz	r0, 800b04c <pow+0xac>
 800b012:	eeb0 0a48 	vmov.f32	s0, s16
 800b016:	eef0 0a68 	vmov.f32	s1, s17
 800b01a:	f000 f8db 	bl	800b1d4 <finite>
 800b01e:	b1a8      	cbz	r0, 800b04c <pow+0xac>
 800b020:	ec45 4b10 	vmov	d0, r4, r5
 800b024:	f000 f8d6 	bl	800b1d4 <finite>
 800b028:	b180      	cbz	r0, 800b04c <pow+0xac>
 800b02a:	4632      	mov	r2, r6
 800b02c:	463b      	mov	r3, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	4639      	mov	r1, r7
 800b032:	f7f5 fd83 	bl	8000b3c <__aeabi_dcmpun>
 800b036:	2800      	cmp	r0, #0
 800b038:	d0e2      	beq.n	800b000 <pow+0x60>
 800b03a:	f7fc fe15 	bl	8007c68 <__errno>
 800b03e:	2321      	movs	r3, #33	@ 0x21
 800b040:	6003      	str	r3, [r0, #0]
 800b042:	ecbd 8b02 	vpop	{d8}
 800b046:	ec47 6b10 	vmov	d0, r6, r7
 800b04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b04c:	2200      	movs	r2, #0
 800b04e:	2300      	movs	r3, #0
 800b050:	4630      	mov	r0, r6
 800b052:	4639      	mov	r1, r7
 800b054:	f7f5 fd40 	bl	8000ad8 <__aeabi_dcmpeq>
 800b058:	2800      	cmp	r0, #0
 800b05a:	d0f2      	beq.n	800b042 <pow+0xa2>
 800b05c:	eeb0 0a48 	vmov.f32	s0, s16
 800b060:	eef0 0a68 	vmov.f32	s1, s17
 800b064:	f000 f8b6 	bl	800b1d4 <finite>
 800b068:	2800      	cmp	r0, #0
 800b06a:	d0ea      	beq.n	800b042 <pow+0xa2>
 800b06c:	ec45 4b10 	vmov	d0, r4, r5
 800b070:	f000 f8b0 	bl	800b1d4 <finite>
 800b074:	e7c3      	b.n	800affe <pow+0x5e>
 800b076:	4f01      	ldr	r7, [pc, #4]	@ (800b07c <pow+0xdc>)
 800b078:	2600      	movs	r6, #0
 800b07a:	e7e2      	b.n	800b042 <pow+0xa2>
 800b07c:	3ff00000 	.word	0x3ff00000

0800b080 <sqrt>:
 800b080:	b538      	push	{r3, r4, r5, lr}
 800b082:	ed2d 8b02 	vpush	{d8}
 800b086:	ec55 4b10 	vmov	r4, r5, d0
 800b08a:	f000 f8b9 	bl	800b200 <__ieee754_sqrt>
 800b08e:	4622      	mov	r2, r4
 800b090:	462b      	mov	r3, r5
 800b092:	4620      	mov	r0, r4
 800b094:	4629      	mov	r1, r5
 800b096:	eeb0 8a40 	vmov.f32	s16, s0
 800b09a:	eef0 8a60 	vmov.f32	s17, s1
 800b09e:	f7f5 fd4d 	bl	8000b3c <__aeabi_dcmpun>
 800b0a2:	b990      	cbnz	r0, 800b0ca <sqrt+0x4a>
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	f7f5 fd1e 	bl	8000aec <__aeabi_dcmplt>
 800b0b0:	b158      	cbz	r0, 800b0ca <sqrt+0x4a>
 800b0b2:	f7fc fdd9 	bl	8007c68 <__errno>
 800b0b6:	2321      	movs	r3, #33	@ 0x21
 800b0b8:	6003      	str	r3, [r0, #0]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	2300      	movs	r3, #0
 800b0be:	4610      	mov	r0, r2
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f7f5 fbcb 	bl	800085c <__aeabi_ddiv>
 800b0c6:	ec41 0b18 	vmov	d8, r0, r1
 800b0ca:	eeb0 0a48 	vmov.f32	s0, s16
 800b0ce:	eef0 0a68 	vmov.f32	s1, s17
 800b0d2:	ecbd 8b02 	vpop	{d8}
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}

0800b0d8 <fabs>:
 800b0d8:	ec51 0b10 	vmov	r0, r1, d0
 800b0dc:	4602      	mov	r2, r0
 800b0de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b0e2:	ec43 2b10 	vmov	d0, r2, r3
 800b0e6:	4770      	bx	lr

0800b0e8 <powf>:
 800b0e8:	b508      	push	{r3, lr}
 800b0ea:	ed2d 8b04 	vpush	{d8-d9}
 800b0ee:	eeb0 8a60 	vmov.f32	s16, s1
 800b0f2:	eeb0 9a40 	vmov.f32	s18, s0
 800b0f6:	f001 f903 	bl	800c300 <__ieee754_powf>
 800b0fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800b0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b102:	eef0 8a40 	vmov.f32	s17, s0
 800b106:	d63e      	bvs.n	800b186 <powf+0x9e>
 800b108:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b110:	d112      	bne.n	800b138 <powf+0x50>
 800b112:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11a:	d039      	beq.n	800b190 <powf+0xa8>
 800b11c:	eeb0 0a48 	vmov.f32	s0, s16
 800b120:	f000 f863 	bl	800b1ea <finitef>
 800b124:	b378      	cbz	r0, 800b186 <powf+0x9e>
 800b126:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12e:	d52a      	bpl.n	800b186 <powf+0x9e>
 800b130:	f7fc fd9a 	bl	8007c68 <__errno>
 800b134:	2322      	movs	r3, #34	@ 0x22
 800b136:	e014      	b.n	800b162 <powf+0x7a>
 800b138:	f000 f857 	bl	800b1ea <finitef>
 800b13c:	b998      	cbnz	r0, 800b166 <powf+0x7e>
 800b13e:	eeb0 0a49 	vmov.f32	s0, s18
 800b142:	f000 f852 	bl	800b1ea <finitef>
 800b146:	b170      	cbz	r0, 800b166 <powf+0x7e>
 800b148:	eeb0 0a48 	vmov.f32	s0, s16
 800b14c:	f000 f84d 	bl	800b1ea <finitef>
 800b150:	b148      	cbz	r0, 800b166 <powf+0x7e>
 800b152:	eef4 8a68 	vcmp.f32	s17, s17
 800b156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15a:	d7e9      	bvc.n	800b130 <powf+0x48>
 800b15c:	f7fc fd84 	bl	8007c68 <__errno>
 800b160:	2321      	movs	r3, #33	@ 0x21
 800b162:	6003      	str	r3, [r0, #0]
 800b164:	e00f      	b.n	800b186 <powf+0x9e>
 800b166:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16e:	d10a      	bne.n	800b186 <powf+0x9e>
 800b170:	eeb0 0a49 	vmov.f32	s0, s18
 800b174:	f000 f839 	bl	800b1ea <finitef>
 800b178:	b128      	cbz	r0, 800b186 <powf+0x9e>
 800b17a:	eeb0 0a48 	vmov.f32	s0, s16
 800b17e:	f000 f834 	bl	800b1ea <finitef>
 800b182:	2800      	cmp	r0, #0
 800b184:	d1d4      	bne.n	800b130 <powf+0x48>
 800b186:	eeb0 0a68 	vmov.f32	s0, s17
 800b18a:	ecbd 8b04 	vpop	{d8-d9}
 800b18e:	bd08      	pop	{r3, pc}
 800b190:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b194:	e7f7      	b.n	800b186 <powf+0x9e>
	...

0800b198 <sqrtf>:
 800b198:	b508      	push	{r3, lr}
 800b19a:	ed2d 8b02 	vpush	{d8}
 800b19e:	eeb0 8a40 	vmov.f32	s16, s0
 800b1a2:	f000 f907 	bl	800b3b4 <__ieee754_sqrtf>
 800b1a6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ae:	d60c      	bvs.n	800b1ca <sqrtf+0x32>
 800b1b0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b1d0 <sqrtf+0x38>
 800b1b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1bc:	d505      	bpl.n	800b1ca <sqrtf+0x32>
 800b1be:	f7fc fd53 	bl	8007c68 <__errno>
 800b1c2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b1c6:	2321      	movs	r3, #33	@ 0x21
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	ecbd 8b02 	vpop	{d8}
 800b1ce:	bd08      	pop	{r3, pc}
 800b1d0:	00000000 	.word	0x00000000

0800b1d4 <finite>:
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	ed8d 0b00 	vstr	d0, [sp]
 800b1da:	9801      	ldr	r0, [sp, #4]
 800b1dc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b1e0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b1e4:	0fc0      	lsrs	r0, r0, #31
 800b1e6:	b002      	add	sp, #8
 800b1e8:	4770      	bx	lr

0800b1ea <finitef>:
 800b1ea:	ee10 3a10 	vmov	r3, s0
 800b1ee:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b1f2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b1f6:	bfac      	ite	ge
 800b1f8:	2000      	movge	r0, #0
 800b1fa:	2001      	movlt	r0, #1
 800b1fc:	4770      	bx	lr
	...

0800b200 <__ieee754_sqrt>:
 800b200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	4a68      	ldr	r2, [pc, #416]	@ (800b3a8 <__ieee754_sqrt+0x1a8>)
 800b206:	ec55 4b10 	vmov	r4, r5, d0
 800b20a:	43aa      	bics	r2, r5
 800b20c:	462b      	mov	r3, r5
 800b20e:	4621      	mov	r1, r4
 800b210:	d110      	bne.n	800b234 <__ieee754_sqrt+0x34>
 800b212:	4622      	mov	r2, r4
 800b214:	4620      	mov	r0, r4
 800b216:	4629      	mov	r1, r5
 800b218:	f7f5 f9f6 	bl	8000608 <__aeabi_dmul>
 800b21c:	4602      	mov	r2, r0
 800b21e:	460b      	mov	r3, r1
 800b220:	4620      	mov	r0, r4
 800b222:	4629      	mov	r1, r5
 800b224:	f7f5 f83a 	bl	800029c <__adddf3>
 800b228:	4604      	mov	r4, r0
 800b22a:	460d      	mov	r5, r1
 800b22c:	ec45 4b10 	vmov	d0, r4, r5
 800b230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b234:	2d00      	cmp	r5, #0
 800b236:	dc0e      	bgt.n	800b256 <__ieee754_sqrt+0x56>
 800b238:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b23c:	4322      	orrs	r2, r4
 800b23e:	d0f5      	beq.n	800b22c <__ieee754_sqrt+0x2c>
 800b240:	b19d      	cbz	r5, 800b26a <__ieee754_sqrt+0x6a>
 800b242:	4622      	mov	r2, r4
 800b244:	4620      	mov	r0, r4
 800b246:	4629      	mov	r1, r5
 800b248:	f7f5 f826 	bl	8000298 <__aeabi_dsub>
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	f7f5 fb04 	bl	800085c <__aeabi_ddiv>
 800b254:	e7e8      	b.n	800b228 <__ieee754_sqrt+0x28>
 800b256:	152a      	asrs	r2, r5, #20
 800b258:	d115      	bne.n	800b286 <__ieee754_sqrt+0x86>
 800b25a:	2000      	movs	r0, #0
 800b25c:	e009      	b.n	800b272 <__ieee754_sqrt+0x72>
 800b25e:	0acb      	lsrs	r3, r1, #11
 800b260:	3a15      	subs	r2, #21
 800b262:	0549      	lsls	r1, r1, #21
 800b264:	2b00      	cmp	r3, #0
 800b266:	d0fa      	beq.n	800b25e <__ieee754_sqrt+0x5e>
 800b268:	e7f7      	b.n	800b25a <__ieee754_sqrt+0x5a>
 800b26a:	462a      	mov	r2, r5
 800b26c:	e7fa      	b.n	800b264 <__ieee754_sqrt+0x64>
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	3001      	adds	r0, #1
 800b272:	02dc      	lsls	r4, r3, #11
 800b274:	d5fb      	bpl.n	800b26e <__ieee754_sqrt+0x6e>
 800b276:	1e44      	subs	r4, r0, #1
 800b278:	1b12      	subs	r2, r2, r4
 800b27a:	f1c0 0420 	rsb	r4, r0, #32
 800b27e:	fa21 f404 	lsr.w	r4, r1, r4
 800b282:	4323      	orrs	r3, r4
 800b284:	4081      	lsls	r1, r0
 800b286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b28a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b28e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b292:	07d2      	lsls	r2, r2, #31
 800b294:	bf5c      	itt	pl
 800b296:	005b      	lslpl	r3, r3, #1
 800b298:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b29c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b2a0:	bf58      	it	pl
 800b2a2:	0049      	lslpl	r1, r1, #1
 800b2a4:	2600      	movs	r6, #0
 800b2a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b2aa:	106d      	asrs	r5, r5, #1
 800b2ac:	0049      	lsls	r1, r1, #1
 800b2ae:	2016      	movs	r0, #22
 800b2b0:	4632      	mov	r2, r6
 800b2b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b2b6:	1917      	adds	r7, r2, r4
 800b2b8:	429f      	cmp	r7, r3
 800b2ba:	bfde      	ittt	le
 800b2bc:	193a      	addle	r2, r7, r4
 800b2be:	1bdb      	suble	r3, r3, r7
 800b2c0:	1936      	addle	r6, r6, r4
 800b2c2:	0fcf      	lsrs	r7, r1, #31
 800b2c4:	3801      	subs	r0, #1
 800b2c6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b2ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b2ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b2d2:	d1f0      	bne.n	800b2b6 <__ieee754_sqrt+0xb6>
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	2720      	movs	r7, #32
 800b2d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	eb00 0e0c 	add.w	lr, r0, ip
 800b2e2:	db02      	blt.n	800b2ea <__ieee754_sqrt+0xea>
 800b2e4:	d113      	bne.n	800b30e <__ieee754_sqrt+0x10e>
 800b2e6:	458e      	cmp	lr, r1
 800b2e8:	d811      	bhi.n	800b30e <__ieee754_sqrt+0x10e>
 800b2ea:	f1be 0f00 	cmp.w	lr, #0
 800b2ee:	eb0e 000c 	add.w	r0, lr, ip
 800b2f2:	da42      	bge.n	800b37a <__ieee754_sqrt+0x17a>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	db40      	blt.n	800b37a <__ieee754_sqrt+0x17a>
 800b2f8:	f102 0801 	add.w	r8, r2, #1
 800b2fc:	1a9b      	subs	r3, r3, r2
 800b2fe:	458e      	cmp	lr, r1
 800b300:	bf88      	it	hi
 800b302:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b306:	eba1 010e 	sub.w	r1, r1, lr
 800b30a:	4464      	add	r4, ip
 800b30c:	4642      	mov	r2, r8
 800b30e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b312:	3f01      	subs	r7, #1
 800b314:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b318:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b31c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b320:	d1dc      	bne.n	800b2dc <__ieee754_sqrt+0xdc>
 800b322:	4319      	orrs	r1, r3
 800b324:	d01b      	beq.n	800b35e <__ieee754_sqrt+0x15e>
 800b326:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b3ac <__ieee754_sqrt+0x1ac>
 800b32a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b3b0 <__ieee754_sqrt+0x1b0>
 800b32e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b332:	e9db 2300 	ldrd	r2, r3, [fp]
 800b336:	f7f4 ffaf 	bl	8000298 <__aeabi_dsub>
 800b33a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b33e:	4602      	mov	r2, r0
 800b340:	460b      	mov	r3, r1
 800b342:	4640      	mov	r0, r8
 800b344:	4649      	mov	r1, r9
 800b346:	f7f5 fbdb 	bl	8000b00 <__aeabi_dcmple>
 800b34a:	b140      	cbz	r0, 800b35e <__ieee754_sqrt+0x15e>
 800b34c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b350:	e9da 0100 	ldrd	r0, r1, [sl]
 800b354:	e9db 2300 	ldrd	r2, r3, [fp]
 800b358:	d111      	bne.n	800b37e <__ieee754_sqrt+0x17e>
 800b35a:	3601      	adds	r6, #1
 800b35c:	463c      	mov	r4, r7
 800b35e:	1072      	asrs	r2, r6, #1
 800b360:	0863      	lsrs	r3, r4, #1
 800b362:	07f1      	lsls	r1, r6, #31
 800b364:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b368:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b36c:	bf48      	it	mi
 800b36e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b372:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b376:	4618      	mov	r0, r3
 800b378:	e756      	b.n	800b228 <__ieee754_sqrt+0x28>
 800b37a:	4690      	mov	r8, r2
 800b37c:	e7be      	b.n	800b2fc <__ieee754_sqrt+0xfc>
 800b37e:	f7f4 ff8d 	bl	800029c <__adddf3>
 800b382:	e9da 8900 	ldrd	r8, r9, [sl]
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4640      	mov	r0, r8
 800b38c:	4649      	mov	r1, r9
 800b38e:	f7f5 fbad 	bl	8000aec <__aeabi_dcmplt>
 800b392:	b120      	cbz	r0, 800b39e <__ieee754_sqrt+0x19e>
 800b394:	1ca0      	adds	r0, r4, #2
 800b396:	bf08      	it	eq
 800b398:	3601      	addeq	r6, #1
 800b39a:	3402      	adds	r4, #2
 800b39c:	e7df      	b.n	800b35e <__ieee754_sqrt+0x15e>
 800b39e:	1c63      	adds	r3, r4, #1
 800b3a0:	f023 0401 	bic.w	r4, r3, #1
 800b3a4:	e7db      	b.n	800b35e <__ieee754_sqrt+0x15e>
 800b3a6:	bf00      	nop
 800b3a8:	7ff00000 	.word	0x7ff00000
 800b3ac:	20000230 	.word	0x20000230
 800b3b0:	20000228 	.word	0x20000228

0800b3b4 <__ieee754_sqrtf>:
 800b3b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b3b8:	4770      	bx	lr
 800b3ba:	0000      	movs	r0, r0
 800b3bc:	0000      	movs	r0, r0
	...

0800b3c0 <__ieee754_acos>:
 800b3c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	ec55 4b10 	vmov	r4, r5, d0
 800b3c8:	49b7      	ldr	r1, [pc, #732]	@ (800b6a8 <__ieee754_acos+0x2e8>)
 800b3ca:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b3ce:	428b      	cmp	r3, r1
 800b3d0:	d919      	bls.n	800b406 <__ieee754_acos+0x46>
 800b3d2:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800b3d6:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b3da:	4323      	orrs	r3, r4
 800b3dc:	d106      	bne.n	800b3ec <__ieee754_acos+0x2c>
 800b3de:	2d00      	cmp	r5, #0
 800b3e0:	f340 8210 	ble.w	800b804 <__ieee754_acos+0x444>
 800b3e4:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800b638 <__ieee754_acos+0x278>
 800b3e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ec:	4622      	mov	r2, r4
 800b3ee:	462b      	mov	r3, r5
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f7f4 ff50 	bl	8000298 <__aeabi_dsub>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	f7f5 fa2e 	bl	800085c <__aeabi_ddiv>
 800b400:	ec41 0b10 	vmov	d0, r0, r1
 800b404:	e7f0      	b.n	800b3e8 <__ieee754_acos+0x28>
 800b406:	49a9      	ldr	r1, [pc, #676]	@ (800b6ac <__ieee754_acos+0x2ec>)
 800b408:	428b      	cmp	r3, r1
 800b40a:	f200 8085 	bhi.w	800b518 <__ieee754_acos+0x158>
 800b40e:	4aa8      	ldr	r2, [pc, #672]	@ (800b6b0 <__ieee754_acos+0x2f0>)
 800b410:	4293      	cmp	r3, r2
 800b412:	f240 81fa 	bls.w	800b80a <__ieee754_acos+0x44a>
 800b416:	4622      	mov	r2, r4
 800b418:	462b      	mov	r3, r5
 800b41a:	4620      	mov	r0, r4
 800b41c:	4629      	mov	r1, r5
 800b41e:	f7f5 f8f3 	bl	8000608 <__aeabi_dmul>
 800b422:	a387      	add	r3, pc, #540	@ (adr r3, 800b640 <__ieee754_acos+0x280>)
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	4606      	mov	r6, r0
 800b42a:	460f      	mov	r7, r1
 800b42c:	f7f5 f8ec 	bl	8000608 <__aeabi_dmul>
 800b430:	a385      	add	r3, pc, #532	@ (adr r3, 800b648 <__ieee754_acos+0x288>)
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	f7f4 ff31 	bl	800029c <__adddf3>
 800b43a:	4632      	mov	r2, r6
 800b43c:	463b      	mov	r3, r7
 800b43e:	f7f5 f8e3 	bl	8000608 <__aeabi_dmul>
 800b442:	a383      	add	r3, pc, #524	@ (adr r3, 800b650 <__ieee754_acos+0x290>)
 800b444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b448:	f7f4 ff26 	bl	8000298 <__aeabi_dsub>
 800b44c:	4632      	mov	r2, r6
 800b44e:	463b      	mov	r3, r7
 800b450:	f7f5 f8da 	bl	8000608 <__aeabi_dmul>
 800b454:	a380      	add	r3, pc, #512	@ (adr r3, 800b658 <__ieee754_acos+0x298>)
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	f7f4 ff1f 	bl	800029c <__adddf3>
 800b45e:	4632      	mov	r2, r6
 800b460:	463b      	mov	r3, r7
 800b462:	f7f5 f8d1 	bl	8000608 <__aeabi_dmul>
 800b466:	a37e      	add	r3, pc, #504	@ (adr r3, 800b660 <__ieee754_acos+0x2a0>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f7f4 ff14 	bl	8000298 <__aeabi_dsub>
 800b470:	4632      	mov	r2, r6
 800b472:	463b      	mov	r3, r7
 800b474:	f7f5 f8c8 	bl	8000608 <__aeabi_dmul>
 800b478:	a37b      	add	r3, pc, #492	@ (adr r3, 800b668 <__ieee754_acos+0x2a8>)
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	f7f4 ff0d 	bl	800029c <__adddf3>
 800b482:	4632      	mov	r2, r6
 800b484:	463b      	mov	r3, r7
 800b486:	f7f5 f8bf 	bl	8000608 <__aeabi_dmul>
 800b48a:	a379      	add	r3, pc, #484	@ (adr r3, 800b670 <__ieee754_acos+0x2b0>)
 800b48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b490:	4680      	mov	r8, r0
 800b492:	4689      	mov	r9, r1
 800b494:	4630      	mov	r0, r6
 800b496:	4639      	mov	r1, r7
 800b498:	f7f5 f8b6 	bl	8000608 <__aeabi_dmul>
 800b49c:	a376      	add	r3, pc, #472	@ (adr r3, 800b678 <__ieee754_acos+0x2b8>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	f7f4 fef9 	bl	8000298 <__aeabi_dsub>
 800b4a6:	4632      	mov	r2, r6
 800b4a8:	463b      	mov	r3, r7
 800b4aa:	f7f5 f8ad 	bl	8000608 <__aeabi_dmul>
 800b4ae:	a374      	add	r3, pc, #464	@ (adr r3, 800b680 <__ieee754_acos+0x2c0>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	f7f4 fef2 	bl	800029c <__adddf3>
 800b4b8:	4632      	mov	r2, r6
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	f7f5 f8a4 	bl	8000608 <__aeabi_dmul>
 800b4c0:	a371      	add	r3, pc, #452	@ (adr r3, 800b688 <__ieee754_acos+0x2c8>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	f7f4 fee7 	bl	8000298 <__aeabi_dsub>
 800b4ca:	4632      	mov	r2, r6
 800b4cc:	463b      	mov	r3, r7
 800b4ce:	f7f5 f89b 	bl	8000608 <__aeabi_dmul>
 800b4d2:	4b78      	ldr	r3, [pc, #480]	@ (800b6b4 <__ieee754_acos+0x2f4>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f7f4 fee1 	bl	800029c <__adddf3>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	4640      	mov	r0, r8
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	f7f5 f9bb 	bl	800085c <__aeabi_ddiv>
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	f7f5 f88d 	bl	8000608 <__aeabi_dmul>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	a167      	add	r1, pc, #412	@ (adr r1, 800b690 <__ieee754_acos+0x2d0>)
 800b4f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4f8:	f7f4 fece 	bl	8000298 <__aeabi_dsub>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	460b      	mov	r3, r1
 800b500:	4620      	mov	r0, r4
 800b502:	4629      	mov	r1, r5
 800b504:	f7f4 fec8 	bl	8000298 <__aeabi_dsub>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	a162      	add	r1, pc, #392	@ (adr r1, 800b698 <__ieee754_acos+0x2d8>)
 800b50e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b512:	f7f4 fec1 	bl	8000298 <__aeabi_dsub>
 800b516:	e773      	b.n	800b400 <__ieee754_acos+0x40>
 800b518:	2d00      	cmp	r5, #0
 800b51a:	f280 80cf 	bge.w	800b6bc <__ieee754_acos+0x2fc>
 800b51e:	4b65      	ldr	r3, [pc, #404]	@ (800b6b4 <__ieee754_acos+0x2f4>)
 800b520:	2200      	movs	r2, #0
 800b522:	4620      	mov	r0, r4
 800b524:	4629      	mov	r1, r5
 800b526:	f7f4 feb9 	bl	800029c <__adddf3>
 800b52a:	4b63      	ldr	r3, [pc, #396]	@ (800b6b8 <__ieee754_acos+0x2f8>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	f7f5 f86b 	bl	8000608 <__aeabi_dmul>
 800b532:	a343      	add	r3, pc, #268	@ (adr r3, 800b640 <__ieee754_acos+0x280>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	f7f5 f864 	bl	8000608 <__aeabi_dmul>
 800b540:	a341      	add	r3, pc, #260	@ (adr r3, 800b648 <__ieee754_acos+0x288>)
 800b542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b546:	f7f4 fea9 	bl	800029c <__adddf3>
 800b54a:	4622      	mov	r2, r4
 800b54c:	462b      	mov	r3, r5
 800b54e:	f7f5 f85b 	bl	8000608 <__aeabi_dmul>
 800b552:	a33f      	add	r3, pc, #252	@ (adr r3, 800b650 <__ieee754_acos+0x290>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	f7f4 fe9e 	bl	8000298 <__aeabi_dsub>
 800b55c:	4622      	mov	r2, r4
 800b55e:	462b      	mov	r3, r5
 800b560:	f7f5 f852 	bl	8000608 <__aeabi_dmul>
 800b564:	a33c      	add	r3, pc, #240	@ (adr r3, 800b658 <__ieee754_acos+0x298>)
 800b566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56a:	f7f4 fe97 	bl	800029c <__adddf3>
 800b56e:	4622      	mov	r2, r4
 800b570:	462b      	mov	r3, r5
 800b572:	f7f5 f849 	bl	8000608 <__aeabi_dmul>
 800b576:	a33a      	add	r3, pc, #232	@ (adr r3, 800b660 <__ieee754_acos+0x2a0>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	f7f4 fe8c 	bl	8000298 <__aeabi_dsub>
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	f7f5 f840 	bl	8000608 <__aeabi_dmul>
 800b588:	a337      	add	r3, pc, #220	@ (adr r3, 800b668 <__ieee754_acos+0x2a8>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	f7f4 fe85 	bl	800029c <__adddf3>
 800b592:	4622      	mov	r2, r4
 800b594:	462b      	mov	r3, r5
 800b596:	f7f5 f837 	bl	8000608 <__aeabi_dmul>
 800b59a:	a335      	add	r3, pc, #212	@ (adr r3, 800b670 <__ieee754_acos+0x2b0>)
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	4606      	mov	r6, r0
 800b5a2:	460f      	mov	r7, r1
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	f7f5 f82e 	bl	8000608 <__aeabi_dmul>
 800b5ac:	a332      	add	r3, pc, #200	@ (adr r3, 800b678 <__ieee754_acos+0x2b8>)
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f7f4 fe71 	bl	8000298 <__aeabi_dsub>
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	462b      	mov	r3, r5
 800b5ba:	f7f5 f825 	bl	8000608 <__aeabi_dmul>
 800b5be:	a330      	add	r3, pc, #192	@ (adr r3, 800b680 <__ieee754_acos+0x2c0>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f4 fe6a 	bl	800029c <__adddf3>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	f7f5 f81c 	bl	8000608 <__aeabi_dmul>
 800b5d0:	a32d      	add	r3, pc, #180	@ (adr r3, 800b688 <__ieee754_acos+0x2c8>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	f7f4 fe5f 	bl	8000298 <__aeabi_dsub>
 800b5da:	4622      	mov	r2, r4
 800b5dc:	462b      	mov	r3, r5
 800b5de:	f7f5 f813 	bl	8000608 <__aeabi_dmul>
 800b5e2:	4b34      	ldr	r3, [pc, #208]	@ (800b6b4 <__ieee754_acos+0x2f4>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f7f4 fe59 	bl	800029c <__adddf3>
 800b5ea:	ec45 4b10 	vmov	d0, r4, r5
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	4689      	mov	r9, r1
 800b5f2:	f7ff fe05 	bl	800b200 <__ieee754_sqrt>
 800b5f6:	ec55 4b10 	vmov	r4, r5, d0
 800b5fa:	4642      	mov	r2, r8
 800b5fc:	464b      	mov	r3, r9
 800b5fe:	4630      	mov	r0, r6
 800b600:	4639      	mov	r1, r7
 800b602:	f7f5 f92b 	bl	800085c <__aeabi_ddiv>
 800b606:	4622      	mov	r2, r4
 800b608:	462b      	mov	r3, r5
 800b60a:	f7f4 fffd 	bl	8000608 <__aeabi_dmul>
 800b60e:	a320      	add	r3, pc, #128	@ (adr r3, 800b690 <__ieee754_acos+0x2d0>)
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	f7f4 fe40 	bl	8000298 <__aeabi_dsub>
 800b618:	4622      	mov	r2, r4
 800b61a:	462b      	mov	r3, r5
 800b61c:	f7f4 fe3e 	bl	800029c <__adddf3>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	f7f4 fe3a 	bl	800029c <__adddf3>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	a11c      	add	r1, pc, #112	@ (adr r1, 800b6a0 <__ieee754_acos+0x2e0>)
 800b62e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b632:	e76e      	b.n	800b512 <__ieee754_acos+0x152>
 800b634:	f3af 8000 	nop.w
	...
 800b640:	0dfdf709 	.word	0x0dfdf709
 800b644:	3f023de1 	.word	0x3f023de1
 800b648:	7501b288 	.word	0x7501b288
 800b64c:	3f49efe0 	.word	0x3f49efe0
 800b650:	b5688f3b 	.word	0xb5688f3b
 800b654:	3fa48228 	.word	0x3fa48228
 800b658:	0e884455 	.word	0x0e884455
 800b65c:	3fc9c155 	.word	0x3fc9c155
 800b660:	03eb6f7d 	.word	0x03eb6f7d
 800b664:	3fd4d612 	.word	0x3fd4d612
 800b668:	55555555 	.word	0x55555555
 800b66c:	3fc55555 	.word	0x3fc55555
 800b670:	b12e9282 	.word	0xb12e9282
 800b674:	3fb3b8c5 	.word	0x3fb3b8c5
 800b678:	1b8d0159 	.word	0x1b8d0159
 800b67c:	3fe6066c 	.word	0x3fe6066c
 800b680:	9c598ac8 	.word	0x9c598ac8
 800b684:	40002ae5 	.word	0x40002ae5
 800b688:	1c8a2d4b 	.word	0x1c8a2d4b
 800b68c:	40033a27 	.word	0x40033a27
 800b690:	33145c07 	.word	0x33145c07
 800b694:	3c91a626 	.word	0x3c91a626
 800b698:	54442d18 	.word	0x54442d18
 800b69c:	3ff921fb 	.word	0x3ff921fb
 800b6a0:	54442d18 	.word	0x54442d18
 800b6a4:	400921fb 	.word	0x400921fb
 800b6a8:	3fefffff 	.word	0x3fefffff
 800b6ac:	3fdfffff 	.word	0x3fdfffff
 800b6b0:	3c600000 	.word	0x3c600000
 800b6b4:	3ff00000 	.word	0x3ff00000
 800b6b8:	3fe00000 	.word	0x3fe00000
 800b6bc:	4622      	mov	r2, r4
 800b6be:	462b      	mov	r3, r5
 800b6c0:	496b      	ldr	r1, [pc, #428]	@ (800b870 <__ieee754_acos+0x4b0>)
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	f7f4 fde8 	bl	8000298 <__aeabi_dsub>
 800b6c8:	4b6a      	ldr	r3, [pc, #424]	@ (800b874 <__ieee754_acos+0x4b4>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f7f4 ff9c 	bl	8000608 <__aeabi_dmul>
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	460d      	mov	r5, r1
 800b6d4:	ec45 4b10 	vmov	d0, r4, r5
 800b6d8:	f7ff fd92 	bl	800b200 <__ieee754_sqrt>
 800b6dc:	a34c      	add	r3, pc, #304	@ (adr r3, 800b810 <__ieee754_acos+0x450>)
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	ec59 8b10 	vmov	r8, r9, d0
 800b6ea:	f7f4 ff8d 	bl	8000608 <__aeabi_dmul>
 800b6ee:	a34a      	add	r3, pc, #296	@ (adr r3, 800b818 <__ieee754_acos+0x458>)
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	f7f4 fdd2 	bl	800029c <__adddf3>
 800b6f8:	4622      	mov	r2, r4
 800b6fa:	462b      	mov	r3, r5
 800b6fc:	f7f4 ff84 	bl	8000608 <__aeabi_dmul>
 800b700:	a347      	add	r3, pc, #284	@ (adr r3, 800b820 <__ieee754_acos+0x460>)
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	f7f4 fdc7 	bl	8000298 <__aeabi_dsub>
 800b70a:	4622      	mov	r2, r4
 800b70c:	462b      	mov	r3, r5
 800b70e:	f7f4 ff7b 	bl	8000608 <__aeabi_dmul>
 800b712:	a345      	add	r3, pc, #276	@ (adr r3, 800b828 <__ieee754_acos+0x468>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	f7f4 fdc0 	bl	800029c <__adddf3>
 800b71c:	4622      	mov	r2, r4
 800b71e:	462b      	mov	r3, r5
 800b720:	f7f4 ff72 	bl	8000608 <__aeabi_dmul>
 800b724:	a342      	add	r3, pc, #264	@ (adr r3, 800b830 <__ieee754_acos+0x470>)
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	f7f4 fdb5 	bl	8000298 <__aeabi_dsub>
 800b72e:	4622      	mov	r2, r4
 800b730:	462b      	mov	r3, r5
 800b732:	f7f4 ff69 	bl	8000608 <__aeabi_dmul>
 800b736:	a340      	add	r3, pc, #256	@ (adr r3, 800b838 <__ieee754_acos+0x478>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f7f4 fdae 	bl	800029c <__adddf3>
 800b740:	4622      	mov	r2, r4
 800b742:	462b      	mov	r3, r5
 800b744:	f7f4 ff60 	bl	8000608 <__aeabi_dmul>
 800b748:	a33d      	add	r3, pc, #244	@ (adr r3, 800b840 <__ieee754_acos+0x480>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	4682      	mov	sl, r0
 800b750:	468b      	mov	fp, r1
 800b752:	4620      	mov	r0, r4
 800b754:	4629      	mov	r1, r5
 800b756:	f7f4 ff57 	bl	8000608 <__aeabi_dmul>
 800b75a:	a33b      	add	r3, pc, #236	@ (adr r3, 800b848 <__ieee754_acos+0x488>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f7f4 fd9a 	bl	8000298 <__aeabi_dsub>
 800b764:	4622      	mov	r2, r4
 800b766:	462b      	mov	r3, r5
 800b768:	f7f4 ff4e 	bl	8000608 <__aeabi_dmul>
 800b76c:	a338      	add	r3, pc, #224	@ (adr r3, 800b850 <__ieee754_acos+0x490>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f7f4 fd93 	bl	800029c <__adddf3>
 800b776:	4622      	mov	r2, r4
 800b778:	462b      	mov	r3, r5
 800b77a:	f7f4 ff45 	bl	8000608 <__aeabi_dmul>
 800b77e:	a336      	add	r3, pc, #216	@ (adr r3, 800b858 <__ieee754_acos+0x498>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	f7f4 fd88 	bl	8000298 <__aeabi_dsub>
 800b788:	4622      	mov	r2, r4
 800b78a:	462b      	mov	r3, r5
 800b78c:	f7f4 ff3c 	bl	8000608 <__aeabi_dmul>
 800b790:	4b37      	ldr	r3, [pc, #220]	@ (800b870 <__ieee754_acos+0x4b0>)
 800b792:	2200      	movs	r2, #0
 800b794:	f7f4 fd82 	bl	800029c <__adddf3>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4650      	mov	r0, sl
 800b79e:	4659      	mov	r1, fp
 800b7a0:	f7f5 f85c 	bl	800085c <__aeabi_ddiv>
 800b7a4:	4642      	mov	r2, r8
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	f7f4 ff2e 	bl	8000608 <__aeabi_dmul>
 800b7ac:	2600      	movs	r6, #0
 800b7ae:	4682      	mov	sl, r0
 800b7b0:	468b      	mov	fp, r1
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	464b      	mov	r3, r9
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	f7f4 ff25 	bl	8000608 <__aeabi_dmul>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	f7f4 fd67 	bl	8000298 <__aeabi_dsub>
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	464b      	mov	r3, r9
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	f7f4 fd61 	bl	800029c <__adddf3>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	4620      	mov	r0, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	f7f5 f83b 	bl	800085c <__aeabi_ddiv>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4650      	mov	r0, sl
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	f7f4 fd55 	bl	800029c <__adddf3>
 800b7f2:	4632      	mov	r2, r6
 800b7f4:	464b      	mov	r3, r9
 800b7f6:	f7f4 fd51 	bl	800029c <__adddf3>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	f7f4 fd4d 	bl	800029c <__adddf3>
 800b802:	e5fd      	b.n	800b400 <__ieee754_acos+0x40>
 800b804:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b860 <__ieee754_acos+0x4a0>
 800b808:	e5ee      	b.n	800b3e8 <__ieee754_acos+0x28>
 800b80a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b868 <__ieee754_acos+0x4a8>
 800b80e:	e5eb      	b.n	800b3e8 <__ieee754_acos+0x28>
 800b810:	0dfdf709 	.word	0x0dfdf709
 800b814:	3f023de1 	.word	0x3f023de1
 800b818:	7501b288 	.word	0x7501b288
 800b81c:	3f49efe0 	.word	0x3f49efe0
 800b820:	b5688f3b 	.word	0xb5688f3b
 800b824:	3fa48228 	.word	0x3fa48228
 800b828:	0e884455 	.word	0x0e884455
 800b82c:	3fc9c155 	.word	0x3fc9c155
 800b830:	03eb6f7d 	.word	0x03eb6f7d
 800b834:	3fd4d612 	.word	0x3fd4d612
 800b838:	55555555 	.word	0x55555555
 800b83c:	3fc55555 	.word	0x3fc55555
 800b840:	b12e9282 	.word	0xb12e9282
 800b844:	3fb3b8c5 	.word	0x3fb3b8c5
 800b848:	1b8d0159 	.word	0x1b8d0159
 800b84c:	3fe6066c 	.word	0x3fe6066c
 800b850:	9c598ac8 	.word	0x9c598ac8
 800b854:	40002ae5 	.word	0x40002ae5
 800b858:	1c8a2d4b 	.word	0x1c8a2d4b
 800b85c:	40033a27 	.word	0x40033a27
 800b860:	54442d18 	.word	0x54442d18
 800b864:	400921fb 	.word	0x400921fb
 800b868:	54442d18 	.word	0x54442d18
 800b86c:	3ff921fb 	.word	0x3ff921fb
 800b870:	3ff00000 	.word	0x3ff00000
 800b874:	3fe00000 	.word	0x3fe00000

0800b878 <__ieee754_pow>:
 800b878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	b091      	sub	sp, #68	@ 0x44
 800b87e:	ed8d 1b00 	vstr	d1, [sp]
 800b882:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b886:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b88a:	ea5a 0001 	orrs.w	r0, sl, r1
 800b88e:	ec57 6b10 	vmov	r6, r7, d0
 800b892:	d113      	bne.n	800b8bc <__ieee754_pow+0x44>
 800b894:	19b3      	adds	r3, r6, r6
 800b896:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b89a:	4152      	adcs	r2, r2
 800b89c:	4298      	cmp	r0, r3
 800b89e:	4b98      	ldr	r3, [pc, #608]	@ (800bb00 <__ieee754_pow+0x288>)
 800b8a0:	4193      	sbcs	r3, r2
 800b8a2:	f080 84ea 	bcs.w	800c27a <__ieee754_pow+0xa02>
 800b8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	4639      	mov	r1, r7
 800b8ae:	f7f4 fcf5 	bl	800029c <__adddf3>
 800b8b2:	ec41 0b10 	vmov	d0, r0, r1
 800b8b6:	b011      	add	sp, #68	@ 0x44
 800b8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8bc:	4a91      	ldr	r2, [pc, #580]	@ (800bb04 <__ieee754_pow+0x28c>)
 800b8be:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b8c2:	4590      	cmp	r8, r2
 800b8c4:	463d      	mov	r5, r7
 800b8c6:	4633      	mov	r3, r6
 800b8c8:	d806      	bhi.n	800b8d8 <__ieee754_pow+0x60>
 800b8ca:	d101      	bne.n	800b8d0 <__ieee754_pow+0x58>
 800b8cc:	2e00      	cmp	r6, #0
 800b8ce:	d1ea      	bne.n	800b8a6 <__ieee754_pow+0x2e>
 800b8d0:	4592      	cmp	sl, r2
 800b8d2:	d801      	bhi.n	800b8d8 <__ieee754_pow+0x60>
 800b8d4:	d10e      	bne.n	800b8f4 <__ieee754_pow+0x7c>
 800b8d6:	b169      	cbz	r1, 800b8f4 <__ieee754_pow+0x7c>
 800b8d8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b8dc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b8e0:	431d      	orrs	r5, r3
 800b8e2:	d1e0      	bne.n	800b8a6 <__ieee754_pow+0x2e>
 800b8e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8e8:	18db      	adds	r3, r3, r3
 800b8ea:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b8ee:	4152      	adcs	r2, r2
 800b8f0:	429d      	cmp	r5, r3
 800b8f2:	e7d4      	b.n	800b89e <__ieee754_pow+0x26>
 800b8f4:	2d00      	cmp	r5, #0
 800b8f6:	46c3      	mov	fp, r8
 800b8f8:	da3a      	bge.n	800b970 <__ieee754_pow+0xf8>
 800b8fa:	4a83      	ldr	r2, [pc, #524]	@ (800bb08 <__ieee754_pow+0x290>)
 800b8fc:	4592      	cmp	sl, r2
 800b8fe:	d84d      	bhi.n	800b99c <__ieee754_pow+0x124>
 800b900:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b904:	4592      	cmp	sl, r2
 800b906:	f240 84c7 	bls.w	800c298 <__ieee754_pow+0xa20>
 800b90a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b90e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b912:	2a14      	cmp	r2, #20
 800b914:	dd0f      	ble.n	800b936 <__ieee754_pow+0xbe>
 800b916:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b91a:	fa21 f402 	lsr.w	r4, r1, r2
 800b91e:	fa04 f202 	lsl.w	r2, r4, r2
 800b922:	428a      	cmp	r2, r1
 800b924:	f040 84b8 	bne.w	800c298 <__ieee754_pow+0xa20>
 800b928:	f004 0401 	and.w	r4, r4, #1
 800b92c:	f1c4 0402 	rsb	r4, r4, #2
 800b930:	2900      	cmp	r1, #0
 800b932:	d158      	bne.n	800b9e6 <__ieee754_pow+0x16e>
 800b934:	e00e      	b.n	800b954 <__ieee754_pow+0xdc>
 800b936:	2900      	cmp	r1, #0
 800b938:	d154      	bne.n	800b9e4 <__ieee754_pow+0x16c>
 800b93a:	f1c2 0214 	rsb	r2, r2, #20
 800b93e:	fa4a f402 	asr.w	r4, sl, r2
 800b942:	fa04 f202 	lsl.w	r2, r4, r2
 800b946:	4552      	cmp	r2, sl
 800b948:	f040 84a3 	bne.w	800c292 <__ieee754_pow+0xa1a>
 800b94c:	f004 0401 	and.w	r4, r4, #1
 800b950:	f1c4 0402 	rsb	r4, r4, #2
 800b954:	4a6d      	ldr	r2, [pc, #436]	@ (800bb0c <__ieee754_pow+0x294>)
 800b956:	4592      	cmp	sl, r2
 800b958:	d12e      	bne.n	800b9b8 <__ieee754_pow+0x140>
 800b95a:	f1b9 0f00 	cmp.w	r9, #0
 800b95e:	f280 8494 	bge.w	800c28a <__ieee754_pow+0xa12>
 800b962:	496a      	ldr	r1, [pc, #424]	@ (800bb0c <__ieee754_pow+0x294>)
 800b964:	4632      	mov	r2, r6
 800b966:	463b      	mov	r3, r7
 800b968:	2000      	movs	r0, #0
 800b96a:	f7f4 ff77 	bl	800085c <__aeabi_ddiv>
 800b96e:	e7a0      	b.n	800b8b2 <__ieee754_pow+0x3a>
 800b970:	2400      	movs	r4, #0
 800b972:	bbc1      	cbnz	r1, 800b9e6 <__ieee754_pow+0x16e>
 800b974:	4a63      	ldr	r2, [pc, #396]	@ (800bb04 <__ieee754_pow+0x28c>)
 800b976:	4592      	cmp	sl, r2
 800b978:	d1ec      	bne.n	800b954 <__ieee754_pow+0xdc>
 800b97a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b97e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b982:	431a      	orrs	r2, r3
 800b984:	f000 8479 	beq.w	800c27a <__ieee754_pow+0xa02>
 800b988:	4b61      	ldr	r3, [pc, #388]	@ (800bb10 <__ieee754_pow+0x298>)
 800b98a:	4598      	cmp	r8, r3
 800b98c:	d908      	bls.n	800b9a0 <__ieee754_pow+0x128>
 800b98e:	f1b9 0f00 	cmp.w	r9, #0
 800b992:	f2c0 8476 	blt.w	800c282 <__ieee754_pow+0xa0a>
 800b996:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b99a:	e78a      	b.n	800b8b2 <__ieee754_pow+0x3a>
 800b99c:	2402      	movs	r4, #2
 800b99e:	e7e8      	b.n	800b972 <__ieee754_pow+0xfa>
 800b9a0:	f1b9 0f00 	cmp.w	r9, #0
 800b9a4:	f04f 0000 	mov.w	r0, #0
 800b9a8:	f04f 0100 	mov.w	r1, #0
 800b9ac:	da81      	bge.n	800b8b2 <__ieee754_pow+0x3a>
 800b9ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b9b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b9b6:	e77c      	b.n	800b8b2 <__ieee754_pow+0x3a>
 800b9b8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b9bc:	d106      	bne.n	800b9cc <__ieee754_pow+0x154>
 800b9be:	4632      	mov	r2, r6
 800b9c0:	463b      	mov	r3, r7
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	f7f4 fe1f 	bl	8000608 <__aeabi_dmul>
 800b9ca:	e772      	b.n	800b8b2 <__ieee754_pow+0x3a>
 800b9cc:	4a51      	ldr	r2, [pc, #324]	@ (800bb14 <__ieee754_pow+0x29c>)
 800b9ce:	4591      	cmp	r9, r2
 800b9d0:	d109      	bne.n	800b9e6 <__ieee754_pow+0x16e>
 800b9d2:	2d00      	cmp	r5, #0
 800b9d4:	db07      	blt.n	800b9e6 <__ieee754_pow+0x16e>
 800b9d6:	ec47 6b10 	vmov	d0, r6, r7
 800b9da:	b011      	add	sp, #68	@ 0x44
 800b9dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	f7ff bc0e 	b.w	800b200 <__ieee754_sqrt>
 800b9e4:	2400      	movs	r4, #0
 800b9e6:	ec47 6b10 	vmov	d0, r6, r7
 800b9ea:	9302      	str	r3, [sp, #8]
 800b9ec:	f7ff fb74 	bl	800b0d8 <fabs>
 800b9f0:	9b02      	ldr	r3, [sp, #8]
 800b9f2:	ec51 0b10 	vmov	r0, r1, d0
 800b9f6:	bb53      	cbnz	r3, 800ba4e <__ieee754_pow+0x1d6>
 800b9f8:	4b44      	ldr	r3, [pc, #272]	@ (800bb0c <__ieee754_pow+0x294>)
 800b9fa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d002      	beq.n	800ba08 <__ieee754_pow+0x190>
 800ba02:	f1b8 0f00 	cmp.w	r8, #0
 800ba06:	d122      	bne.n	800ba4e <__ieee754_pow+0x1d6>
 800ba08:	f1b9 0f00 	cmp.w	r9, #0
 800ba0c:	da05      	bge.n	800ba1a <__ieee754_pow+0x1a2>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	2000      	movs	r0, #0
 800ba14:	493d      	ldr	r1, [pc, #244]	@ (800bb0c <__ieee754_pow+0x294>)
 800ba16:	f7f4 ff21 	bl	800085c <__aeabi_ddiv>
 800ba1a:	2d00      	cmp	r5, #0
 800ba1c:	f6bf af49 	bge.w	800b8b2 <__ieee754_pow+0x3a>
 800ba20:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ba24:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ba28:	ea58 0804 	orrs.w	r8, r8, r4
 800ba2c:	d108      	bne.n	800ba40 <__ieee754_pow+0x1c8>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	4610      	mov	r0, r2
 800ba34:	4619      	mov	r1, r3
 800ba36:	f7f4 fc2f 	bl	8000298 <__aeabi_dsub>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	e794      	b.n	800b96a <__ieee754_pow+0xf2>
 800ba40:	2c01      	cmp	r4, #1
 800ba42:	f47f af36 	bne.w	800b8b2 <__ieee754_pow+0x3a>
 800ba46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	e731      	b.n	800b8b2 <__ieee754_pow+0x3a>
 800ba4e:	0feb      	lsrs	r3, r5, #31
 800ba50:	3b01      	subs	r3, #1
 800ba52:	ea53 0204 	orrs.w	r2, r3, r4
 800ba56:	d102      	bne.n	800ba5e <__ieee754_pow+0x1e6>
 800ba58:	4632      	mov	r2, r6
 800ba5a:	463b      	mov	r3, r7
 800ba5c:	e7e9      	b.n	800ba32 <__ieee754_pow+0x1ba>
 800ba5e:	3c01      	subs	r4, #1
 800ba60:	431c      	orrs	r4, r3
 800ba62:	d016      	beq.n	800ba92 <__ieee754_pow+0x21a>
 800ba64:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800baf0 <__ieee754_pow+0x278>
 800ba68:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ba6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba70:	f240 8112 	bls.w	800bc98 <__ieee754_pow+0x420>
 800ba74:	4b28      	ldr	r3, [pc, #160]	@ (800bb18 <__ieee754_pow+0x2a0>)
 800ba76:	459a      	cmp	sl, r3
 800ba78:	4b25      	ldr	r3, [pc, #148]	@ (800bb10 <__ieee754_pow+0x298>)
 800ba7a:	d916      	bls.n	800baaa <__ieee754_pow+0x232>
 800ba7c:	4598      	cmp	r8, r3
 800ba7e:	d80b      	bhi.n	800ba98 <__ieee754_pow+0x220>
 800ba80:	f1b9 0f00 	cmp.w	r9, #0
 800ba84:	da0b      	bge.n	800ba9e <__ieee754_pow+0x226>
 800ba86:	2000      	movs	r0, #0
 800ba88:	b011      	add	sp, #68	@ 0x44
 800ba8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8e:	f000 bfc3 	b.w	800ca18 <__math_oflow>
 800ba92:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800baf8 <__ieee754_pow+0x280>
 800ba96:	e7e7      	b.n	800ba68 <__ieee754_pow+0x1f0>
 800ba98:	f1b9 0f00 	cmp.w	r9, #0
 800ba9c:	dcf3      	bgt.n	800ba86 <__ieee754_pow+0x20e>
 800ba9e:	2000      	movs	r0, #0
 800baa0:	b011      	add	sp, #68	@ 0x44
 800baa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa6:	f000 bfaf 	b.w	800ca08 <__math_uflow>
 800baaa:	4598      	cmp	r8, r3
 800baac:	d20c      	bcs.n	800bac8 <__ieee754_pow+0x250>
 800baae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bab2:	2200      	movs	r2, #0
 800bab4:	2300      	movs	r3, #0
 800bab6:	f7f5 f819 	bl	8000aec <__aeabi_dcmplt>
 800baba:	3800      	subs	r0, #0
 800babc:	bf18      	it	ne
 800babe:	2001      	movne	r0, #1
 800bac0:	f1b9 0f00 	cmp.w	r9, #0
 800bac4:	daec      	bge.n	800baa0 <__ieee754_pow+0x228>
 800bac6:	e7df      	b.n	800ba88 <__ieee754_pow+0x210>
 800bac8:	4b10      	ldr	r3, [pc, #64]	@ (800bb0c <__ieee754_pow+0x294>)
 800baca:	4598      	cmp	r8, r3
 800bacc:	f04f 0200 	mov.w	r2, #0
 800bad0:	d924      	bls.n	800bb1c <__ieee754_pow+0x2a4>
 800bad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bad6:	2300      	movs	r3, #0
 800bad8:	f7f5 f808 	bl	8000aec <__aeabi_dcmplt>
 800badc:	3800      	subs	r0, #0
 800bade:	bf18      	it	ne
 800bae0:	2001      	movne	r0, #1
 800bae2:	f1b9 0f00 	cmp.w	r9, #0
 800bae6:	dccf      	bgt.n	800ba88 <__ieee754_pow+0x210>
 800bae8:	e7da      	b.n	800baa0 <__ieee754_pow+0x228>
 800baea:	bf00      	nop
 800baec:	f3af 8000 	nop.w
 800baf0:	00000000 	.word	0x00000000
 800baf4:	3ff00000 	.word	0x3ff00000
 800baf8:	00000000 	.word	0x00000000
 800bafc:	bff00000 	.word	0xbff00000
 800bb00:	fff00000 	.word	0xfff00000
 800bb04:	7ff00000 	.word	0x7ff00000
 800bb08:	433fffff 	.word	0x433fffff
 800bb0c:	3ff00000 	.word	0x3ff00000
 800bb10:	3fefffff 	.word	0x3fefffff
 800bb14:	3fe00000 	.word	0x3fe00000
 800bb18:	43f00000 	.word	0x43f00000
 800bb1c:	4b5a      	ldr	r3, [pc, #360]	@ (800bc88 <__ieee754_pow+0x410>)
 800bb1e:	f7f4 fbbb 	bl	8000298 <__aeabi_dsub>
 800bb22:	a351      	add	r3, pc, #324	@ (adr r3, 800bc68 <__ieee754_pow+0x3f0>)
 800bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb28:	4604      	mov	r4, r0
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	f7f4 fd6c 	bl	8000608 <__aeabi_dmul>
 800bb30:	a34f      	add	r3, pc, #316	@ (adr r3, 800bc70 <__ieee754_pow+0x3f8>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	4606      	mov	r6, r0
 800bb38:	460f      	mov	r7, r1
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	f7f4 fd63 	bl	8000608 <__aeabi_dmul>
 800bb42:	4b52      	ldr	r3, [pc, #328]	@ (800bc8c <__ieee754_pow+0x414>)
 800bb44:	4682      	mov	sl, r0
 800bb46:	468b      	mov	fp, r1
 800bb48:	2200      	movs	r2, #0
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	f7f4 fd5b 	bl	8000608 <__aeabi_dmul>
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	a148      	add	r1, pc, #288	@ (adr r1, 800bc78 <__ieee754_pow+0x400>)
 800bb58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb5c:	f7f4 fb9c 	bl	8000298 <__aeabi_dsub>
 800bb60:	4622      	mov	r2, r4
 800bb62:	462b      	mov	r3, r5
 800bb64:	f7f4 fd50 	bl	8000608 <__aeabi_dmul>
 800bb68:	4602      	mov	r2, r0
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	4948      	ldr	r1, [pc, #288]	@ (800bc90 <__ieee754_pow+0x418>)
 800bb70:	f7f4 fb92 	bl	8000298 <__aeabi_dsub>
 800bb74:	4622      	mov	r2, r4
 800bb76:	4680      	mov	r8, r0
 800bb78:	4689      	mov	r9, r1
 800bb7a:	462b      	mov	r3, r5
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	4629      	mov	r1, r5
 800bb80:	f7f4 fd42 	bl	8000608 <__aeabi_dmul>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4640      	mov	r0, r8
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	f7f4 fd3c 	bl	8000608 <__aeabi_dmul>
 800bb90:	a33b      	add	r3, pc, #236	@ (adr r3, 800bc80 <__ieee754_pow+0x408>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fd37 	bl	8000608 <__aeabi_dmul>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	4650      	mov	r0, sl
 800bba0:	4659      	mov	r1, fp
 800bba2:	f7f4 fb79 	bl	8000298 <__aeabi_dsub>
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	4680      	mov	r8, r0
 800bbac:	4689      	mov	r9, r1
 800bbae:	4630      	mov	r0, r6
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	f7f4 fb73 	bl	800029c <__adddf3>
 800bbb6:	2400      	movs	r4, #0
 800bbb8:	4632      	mov	r2, r6
 800bbba:	463b      	mov	r3, r7
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	460d      	mov	r5, r1
 800bbc0:	f7f4 fb6a 	bl	8000298 <__aeabi_dsub>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4640      	mov	r0, r8
 800bbca:	4649      	mov	r1, r9
 800bbcc:	f7f4 fb64 	bl	8000298 <__aeabi_dsub>
 800bbd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	460f      	mov	r7, r1
 800bbe4:	4652      	mov	r2, sl
 800bbe6:	465b      	mov	r3, fp
 800bbe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbec:	f7f4 fb54 	bl	8000298 <__aeabi_dsub>
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	462b      	mov	r3, r5
 800bbf4:	f7f4 fd08 	bl	8000608 <__aeabi_dmul>
 800bbf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	4689      	mov	r9, r1
 800bc00:	4630      	mov	r0, r6
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 fd00 	bl	8000608 <__aeabi_dmul>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	4640      	mov	r0, r8
 800bc0e:	4649      	mov	r1, r9
 800bc10:	f7f4 fb44 	bl	800029c <__adddf3>
 800bc14:	4652      	mov	r2, sl
 800bc16:	465b      	mov	r3, fp
 800bc18:	4606      	mov	r6, r0
 800bc1a:	460f      	mov	r7, r1
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	4629      	mov	r1, r5
 800bc20:	f7f4 fcf2 	bl	8000608 <__aeabi_dmul>
 800bc24:	460b      	mov	r3, r1
 800bc26:	4602      	mov	r2, r0
 800bc28:	4680      	mov	r8, r0
 800bc2a:	4689      	mov	r9, r1
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	4639      	mov	r1, r7
 800bc30:	f7f4 fb34 	bl	800029c <__adddf3>
 800bc34:	4b17      	ldr	r3, [pc, #92]	@ (800bc94 <__ieee754_pow+0x41c>)
 800bc36:	4299      	cmp	r1, r3
 800bc38:	4604      	mov	r4, r0
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	468a      	mov	sl, r1
 800bc3e:	468b      	mov	fp, r1
 800bc40:	f340 82ef 	ble.w	800c222 <__ieee754_pow+0x9aa>
 800bc44:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bc48:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bc4c:	4303      	orrs	r3, r0
 800bc4e:	f000 81e8 	beq.w	800c022 <__ieee754_pow+0x7aa>
 800bc52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc56:	2200      	movs	r2, #0
 800bc58:	2300      	movs	r3, #0
 800bc5a:	f7f4 ff47 	bl	8000aec <__aeabi_dcmplt>
 800bc5e:	3800      	subs	r0, #0
 800bc60:	bf18      	it	ne
 800bc62:	2001      	movne	r0, #1
 800bc64:	e710      	b.n	800ba88 <__ieee754_pow+0x210>
 800bc66:	bf00      	nop
 800bc68:	60000000 	.word	0x60000000
 800bc6c:	3ff71547 	.word	0x3ff71547
 800bc70:	f85ddf44 	.word	0xf85ddf44
 800bc74:	3e54ae0b 	.word	0x3e54ae0b
 800bc78:	55555555 	.word	0x55555555
 800bc7c:	3fd55555 	.word	0x3fd55555
 800bc80:	652b82fe 	.word	0x652b82fe
 800bc84:	3ff71547 	.word	0x3ff71547
 800bc88:	3ff00000 	.word	0x3ff00000
 800bc8c:	3fd00000 	.word	0x3fd00000
 800bc90:	3fe00000 	.word	0x3fe00000
 800bc94:	408fffff 	.word	0x408fffff
 800bc98:	4bd5      	ldr	r3, [pc, #852]	@ (800bff0 <__ieee754_pow+0x778>)
 800bc9a:	402b      	ands	r3, r5
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	b92b      	cbnz	r3, 800bcac <__ieee754_pow+0x434>
 800bca0:	4bd4      	ldr	r3, [pc, #848]	@ (800bff4 <__ieee754_pow+0x77c>)
 800bca2:	f7f4 fcb1 	bl	8000608 <__aeabi_dmul>
 800bca6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800bcaa:	468b      	mov	fp, r1
 800bcac:	ea4f 532b 	mov.w	r3, fp, asr #20
 800bcb0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bcb4:	4413      	add	r3, r2
 800bcb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcb8:	4bcf      	ldr	r3, [pc, #828]	@ (800bff8 <__ieee754_pow+0x780>)
 800bcba:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800bcbe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bcc2:	459b      	cmp	fp, r3
 800bcc4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bcc8:	dd08      	ble.n	800bcdc <__ieee754_pow+0x464>
 800bcca:	4bcc      	ldr	r3, [pc, #816]	@ (800bffc <__ieee754_pow+0x784>)
 800bccc:	459b      	cmp	fp, r3
 800bcce:	f340 81a5 	ble.w	800c01c <__ieee754_pow+0x7a4>
 800bcd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcd8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bcdc:	f04f 0a00 	mov.w	sl, #0
 800bce0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bce6:	4bc6      	ldr	r3, [pc, #792]	@ (800c000 <__ieee754_pow+0x788>)
 800bce8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bcec:	ed93 7b00 	vldr	d7, [r3]
 800bcf0:	4629      	mov	r1, r5
 800bcf2:	ec53 2b17 	vmov	r2, r3, d7
 800bcf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcfa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bcfe:	f7f4 facb 	bl	8000298 <__aeabi_dsub>
 800bd02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd06:	4606      	mov	r6, r0
 800bd08:	460f      	mov	r7, r1
 800bd0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd0e:	f7f4 fac5 	bl	800029c <__adddf3>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	2000      	movs	r0, #0
 800bd18:	49ba      	ldr	r1, [pc, #744]	@ (800c004 <__ieee754_pow+0x78c>)
 800bd1a:	f7f4 fd9f 	bl	800085c <__aeabi_ddiv>
 800bd1e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4630      	mov	r0, r6
 800bd28:	4639      	mov	r1, r7
 800bd2a:	f7f4 fc6d 	bl	8000608 <__aeabi_dmul>
 800bd2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd32:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bd36:	106d      	asrs	r5, r5, #1
 800bd38:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bd3c:	f04f 0b00 	mov.w	fp, #0
 800bd40:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bd44:	4661      	mov	r1, ip
 800bd46:	2200      	movs	r2, #0
 800bd48:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bd4c:	4658      	mov	r0, fp
 800bd4e:	46e1      	mov	r9, ip
 800bd50:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bd54:	4614      	mov	r4, r2
 800bd56:	461d      	mov	r5, r3
 800bd58:	f7f4 fc56 	bl	8000608 <__aeabi_dmul>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4630      	mov	r0, r6
 800bd62:	4639      	mov	r1, r7
 800bd64:	f7f4 fa98 	bl	8000298 <__aeabi_dsub>
 800bd68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd6c:	4606      	mov	r6, r0
 800bd6e:	460f      	mov	r7, r1
 800bd70:	4620      	mov	r0, r4
 800bd72:	4629      	mov	r1, r5
 800bd74:	f7f4 fa90 	bl	8000298 <__aeabi_dsub>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd80:	f7f4 fa8a 	bl	8000298 <__aeabi_dsub>
 800bd84:	465a      	mov	r2, fp
 800bd86:	464b      	mov	r3, r9
 800bd88:	f7f4 fc3e 	bl	8000608 <__aeabi_dmul>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	4630      	mov	r0, r6
 800bd92:	4639      	mov	r1, r7
 800bd94:	f7f4 fa80 	bl	8000298 <__aeabi_dsub>
 800bd98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bd9c:	f7f4 fc34 	bl	8000608 <__aeabi_dmul>
 800bda0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bda8:	4610      	mov	r0, r2
 800bdaa:	4619      	mov	r1, r3
 800bdac:	f7f4 fc2c 	bl	8000608 <__aeabi_dmul>
 800bdb0:	a37d      	add	r3, pc, #500	@ (adr r3, 800bfa8 <__ieee754_pow+0x730>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	4604      	mov	r4, r0
 800bdb8:	460d      	mov	r5, r1
 800bdba:	f7f4 fc25 	bl	8000608 <__aeabi_dmul>
 800bdbe:	a37c      	add	r3, pc, #496	@ (adr r3, 800bfb0 <__ieee754_pow+0x738>)
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	f7f4 fa6a 	bl	800029c <__adddf3>
 800bdc8:	4622      	mov	r2, r4
 800bdca:	462b      	mov	r3, r5
 800bdcc:	f7f4 fc1c 	bl	8000608 <__aeabi_dmul>
 800bdd0:	a379      	add	r3, pc, #484	@ (adr r3, 800bfb8 <__ieee754_pow+0x740>)
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	f7f4 fa61 	bl	800029c <__adddf3>
 800bdda:	4622      	mov	r2, r4
 800bddc:	462b      	mov	r3, r5
 800bdde:	f7f4 fc13 	bl	8000608 <__aeabi_dmul>
 800bde2:	a377      	add	r3, pc, #476	@ (adr r3, 800bfc0 <__ieee754_pow+0x748>)
 800bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde8:	f7f4 fa58 	bl	800029c <__adddf3>
 800bdec:	4622      	mov	r2, r4
 800bdee:	462b      	mov	r3, r5
 800bdf0:	f7f4 fc0a 	bl	8000608 <__aeabi_dmul>
 800bdf4:	a374      	add	r3, pc, #464	@ (adr r3, 800bfc8 <__ieee754_pow+0x750>)
 800bdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfa:	f7f4 fa4f 	bl	800029c <__adddf3>
 800bdfe:	4622      	mov	r2, r4
 800be00:	462b      	mov	r3, r5
 800be02:	f7f4 fc01 	bl	8000608 <__aeabi_dmul>
 800be06:	a372      	add	r3, pc, #456	@ (adr r3, 800bfd0 <__ieee754_pow+0x758>)
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	f7f4 fa46 	bl	800029c <__adddf3>
 800be10:	4622      	mov	r2, r4
 800be12:	4606      	mov	r6, r0
 800be14:	460f      	mov	r7, r1
 800be16:	462b      	mov	r3, r5
 800be18:	4620      	mov	r0, r4
 800be1a:	4629      	mov	r1, r5
 800be1c:	f7f4 fbf4 	bl	8000608 <__aeabi_dmul>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4630      	mov	r0, r6
 800be26:	4639      	mov	r1, r7
 800be28:	f7f4 fbee 	bl	8000608 <__aeabi_dmul>
 800be2c:	465a      	mov	r2, fp
 800be2e:	4604      	mov	r4, r0
 800be30:	460d      	mov	r5, r1
 800be32:	464b      	mov	r3, r9
 800be34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be38:	f7f4 fa30 	bl	800029c <__adddf3>
 800be3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be40:	f7f4 fbe2 	bl	8000608 <__aeabi_dmul>
 800be44:	4622      	mov	r2, r4
 800be46:	462b      	mov	r3, r5
 800be48:	f7f4 fa28 	bl	800029c <__adddf3>
 800be4c:	465a      	mov	r2, fp
 800be4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be52:	464b      	mov	r3, r9
 800be54:	4658      	mov	r0, fp
 800be56:	4649      	mov	r1, r9
 800be58:	f7f4 fbd6 	bl	8000608 <__aeabi_dmul>
 800be5c:	4b6a      	ldr	r3, [pc, #424]	@ (800c008 <__ieee754_pow+0x790>)
 800be5e:	2200      	movs	r2, #0
 800be60:	4606      	mov	r6, r0
 800be62:	460f      	mov	r7, r1
 800be64:	f7f4 fa1a 	bl	800029c <__adddf3>
 800be68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be6c:	f7f4 fa16 	bl	800029c <__adddf3>
 800be70:	46d8      	mov	r8, fp
 800be72:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800be76:	460d      	mov	r5, r1
 800be78:	465a      	mov	r2, fp
 800be7a:	460b      	mov	r3, r1
 800be7c:	4640      	mov	r0, r8
 800be7e:	4649      	mov	r1, r9
 800be80:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800be84:	f7f4 fbc0 	bl	8000608 <__aeabi_dmul>
 800be88:	465c      	mov	r4, fp
 800be8a:	4680      	mov	r8, r0
 800be8c:	4689      	mov	r9, r1
 800be8e:	4b5e      	ldr	r3, [pc, #376]	@ (800c008 <__ieee754_pow+0x790>)
 800be90:	2200      	movs	r2, #0
 800be92:	4620      	mov	r0, r4
 800be94:	4629      	mov	r1, r5
 800be96:	f7f4 f9ff 	bl	8000298 <__aeabi_dsub>
 800be9a:	4632      	mov	r2, r6
 800be9c:	463b      	mov	r3, r7
 800be9e:	f7f4 f9fb 	bl	8000298 <__aeabi_dsub>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800beaa:	f7f4 f9f5 	bl	8000298 <__aeabi_dsub>
 800beae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beb2:	f7f4 fba9 	bl	8000608 <__aeabi_dmul>
 800beb6:	4622      	mov	r2, r4
 800beb8:	4606      	mov	r6, r0
 800beba:	460f      	mov	r7, r1
 800bebc:	462b      	mov	r3, r5
 800bebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bec2:	f7f4 fba1 	bl	8000608 <__aeabi_dmul>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	4630      	mov	r0, r6
 800becc:	4639      	mov	r1, r7
 800bece:	f7f4 f9e5 	bl	800029c <__adddf3>
 800bed2:	4606      	mov	r6, r0
 800bed4:	460f      	mov	r7, r1
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	4640      	mov	r0, r8
 800bedc:	4649      	mov	r1, r9
 800bede:	f7f4 f9dd 	bl	800029c <__adddf3>
 800bee2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800bee6:	a33c      	add	r3, pc, #240	@ (adr r3, 800bfd8 <__ieee754_pow+0x760>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	4658      	mov	r0, fp
 800beee:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800bef2:	460d      	mov	r5, r1
 800bef4:	f7f4 fb88 	bl	8000608 <__aeabi_dmul>
 800bef8:	465c      	mov	r4, fp
 800befa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800befe:	4642      	mov	r2, r8
 800bf00:	464b      	mov	r3, r9
 800bf02:	4620      	mov	r0, r4
 800bf04:	4629      	mov	r1, r5
 800bf06:	f7f4 f9c7 	bl	8000298 <__aeabi_dsub>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4630      	mov	r0, r6
 800bf10:	4639      	mov	r1, r7
 800bf12:	f7f4 f9c1 	bl	8000298 <__aeabi_dsub>
 800bf16:	a332      	add	r3, pc, #200	@ (adr r3, 800bfe0 <__ieee754_pow+0x768>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	f7f4 fb74 	bl	8000608 <__aeabi_dmul>
 800bf20:	a331      	add	r3, pc, #196	@ (adr r3, 800bfe8 <__ieee754_pow+0x770>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	4606      	mov	r6, r0
 800bf28:	460f      	mov	r7, r1
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	f7f4 fb6b 	bl	8000608 <__aeabi_dmul>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	4630      	mov	r0, r6
 800bf38:	4639      	mov	r1, r7
 800bf3a:	f7f4 f9af 	bl	800029c <__adddf3>
 800bf3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf40:	4b32      	ldr	r3, [pc, #200]	@ (800c00c <__ieee754_pow+0x794>)
 800bf42:	4413      	add	r3, r2
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	f7f4 f9a8 	bl	800029c <__adddf3>
 800bf4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf52:	f7f4 faef 	bl	8000534 <__aeabi_i2d>
 800bf56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf58:	4b2d      	ldr	r3, [pc, #180]	@ (800c010 <__ieee754_pow+0x798>)
 800bf5a:	4413      	add	r3, r2
 800bf5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf60:	4606      	mov	r6, r0
 800bf62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf66:	460f      	mov	r7, r1
 800bf68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf6c:	f7f4 f996 	bl	800029c <__adddf3>
 800bf70:	4642      	mov	r2, r8
 800bf72:	464b      	mov	r3, r9
 800bf74:	f7f4 f992 	bl	800029c <__adddf3>
 800bf78:	4632      	mov	r2, r6
 800bf7a:	463b      	mov	r3, r7
 800bf7c:	f7f4 f98e 	bl	800029c <__adddf3>
 800bf80:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800bf84:	4632      	mov	r2, r6
 800bf86:	463b      	mov	r3, r7
 800bf88:	4658      	mov	r0, fp
 800bf8a:	460d      	mov	r5, r1
 800bf8c:	f7f4 f984 	bl	8000298 <__aeabi_dsub>
 800bf90:	4642      	mov	r2, r8
 800bf92:	464b      	mov	r3, r9
 800bf94:	f7f4 f980 	bl	8000298 <__aeabi_dsub>
 800bf98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf9c:	f7f4 f97c 	bl	8000298 <__aeabi_dsub>
 800bfa0:	465c      	mov	r4, fp
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	e036      	b.n	800c014 <__ieee754_pow+0x79c>
 800bfa6:	bf00      	nop
 800bfa8:	4a454eef 	.word	0x4a454eef
 800bfac:	3fca7e28 	.word	0x3fca7e28
 800bfb0:	93c9db65 	.word	0x93c9db65
 800bfb4:	3fcd864a 	.word	0x3fcd864a
 800bfb8:	a91d4101 	.word	0xa91d4101
 800bfbc:	3fd17460 	.word	0x3fd17460
 800bfc0:	518f264d 	.word	0x518f264d
 800bfc4:	3fd55555 	.word	0x3fd55555
 800bfc8:	db6fabff 	.word	0xdb6fabff
 800bfcc:	3fdb6db6 	.word	0x3fdb6db6
 800bfd0:	33333303 	.word	0x33333303
 800bfd4:	3fe33333 	.word	0x3fe33333
 800bfd8:	e0000000 	.word	0xe0000000
 800bfdc:	3feec709 	.word	0x3feec709
 800bfe0:	dc3a03fd 	.word	0xdc3a03fd
 800bfe4:	3feec709 	.word	0x3feec709
 800bfe8:	145b01f5 	.word	0x145b01f5
 800bfec:	be3e2fe0 	.word	0xbe3e2fe0
 800bff0:	7ff00000 	.word	0x7ff00000
 800bff4:	43400000 	.word	0x43400000
 800bff8:	0003988e 	.word	0x0003988e
 800bffc:	000bb679 	.word	0x000bb679
 800c000:	0800d128 	.word	0x0800d128
 800c004:	3ff00000 	.word	0x3ff00000
 800c008:	40080000 	.word	0x40080000
 800c00c:	0800d108 	.word	0x0800d108
 800c010:	0800d118 	.word	0x0800d118
 800c014:	460b      	mov	r3, r1
 800c016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c01a:	e5d7      	b.n	800bbcc <__ieee754_pow+0x354>
 800c01c:	f04f 0a01 	mov.w	sl, #1
 800c020:	e65e      	b.n	800bce0 <__ieee754_pow+0x468>
 800c022:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c2f4 <__ieee754_pow+0xa7c>)
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	f7f4 f936 	bl	800029c <__adddf3>
 800c030:	4642      	mov	r2, r8
 800c032:	e9cd 0100 	strd	r0, r1, [sp]
 800c036:	464b      	mov	r3, r9
 800c038:	4620      	mov	r0, r4
 800c03a:	4629      	mov	r1, r5
 800c03c:	f7f4 f92c 	bl	8000298 <__aeabi_dsub>
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c048:	f7f4 fd6e 	bl	8000b28 <__aeabi_dcmpgt>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	f47f ae00 	bne.w	800bc52 <__ieee754_pow+0x3da>
 800c052:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c056:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c05a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c05e:	fa43 fa0a 	asr.w	sl, r3, sl
 800c062:	44da      	add	sl, fp
 800c064:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c068:	489d      	ldr	r0, [pc, #628]	@ (800c2e0 <__ieee754_pow+0xa68>)
 800c06a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c06e:	4108      	asrs	r0, r1
 800c070:	ea00 030a 	and.w	r3, r0, sl
 800c074:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c078:	f1c1 0114 	rsb	r1, r1, #20
 800c07c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c080:	fa4a fa01 	asr.w	sl, sl, r1
 800c084:	f1bb 0f00 	cmp.w	fp, #0
 800c088:	4640      	mov	r0, r8
 800c08a:	4649      	mov	r1, r9
 800c08c:	f04f 0200 	mov.w	r2, #0
 800c090:	bfb8      	it	lt
 800c092:	f1ca 0a00 	rsblt	sl, sl, #0
 800c096:	f7f4 f8ff 	bl	8000298 <__aeabi_dsub>
 800c09a:	4680      	mov	r8, r0
 800c09c:	4689      	mov	r9, r1
 800c09e:	4632      	mov	r2, r6
 800c0a0:	463b      	mov	r3, r7
 800c0a2:	4640      	mov	r0, r8
 800c0a4:	4649      	mov	r1, r9
 800c0a6:	f7f4 f8f9 	bl	800029c <__adddf3>
 800c0aa:	2400      	movs	r4, #0
 800c0ac:	a37c      	add	r3, pc, #496	@ (adr r3, 800c2a0 <__ieee754_pow+0xa28>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	460d      	mov	r5, r1
 800c0b6:	f7f4 faa7 	bl	8000608 <__aeabi_dmul>
 800c0ba:	4642      	mov	r2, r8
 800c0bc:	e9cd 0100 	strd	r0, r1, [sp]
 800c0c0:	464b      	mov	r3, r9
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	4629      	mov	r1, r5
 800c0c6:	f7f4 f8e7 	bl	8000298 <__aeabi_dsub>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	f7f4 f8e1 	bl	8000298 <__aeabi_dsub>
 800c0d6:	a374      	add	r3, pc, #464	@ (adr r3, 800c2a8 <__ieee754_pow+0xa30>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	f7f4 fa94 	bl	8000608 <__aeabi_dmul>
 800c0e0:	a373      	add	r3, pc, #460	@ (adr r3, 800c2b0 <__ieee754_pow+0xa38>)
 800c0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e6:	4680      	mov	r8, r0
 800c0e8:	4689      	mov	r9, r1
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	f7f4 fa8b 	bl	8000608 <__aeabi_dmul>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	f7f4 f8cf 	bl	800029c <__adddf3>
 800c0fe:	4604      	mov	r4, r0
 800c100:	460d      	mov	r5, r1
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c10a:	f7f4 f8c7 	bl	800029c <__adddf3>
 800c10e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c112:	4680      	mov	r8, r0
 800c114:	4689      	mov	r9, r1
 800c116:	f7f4 f8bf 	bl	8000298 <__aeabi_dsub>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4620      	mov	r0, r4
 800c120:	4629      	mov	r1, r5
 800c122:	f7f4 f8b9 	bl	8000298 <__aeabi_dsub>
 800c126:	4642      	mov	r2, r8
 800c128:	4606      	mov	r6, r0
 800c12a:	460f      	mov	r7, r1
 800c12c:	464b      	mov	r3, r9
 800c12e:	4640      	mov	r0, r8
 800c130:	4649      	mov	r1, r9
 800c132:	f7f4 fa69 	bl	8000608 <__aeabi_dmul>
 800c136:	a360      	add	r3, pc, #384	@ (adr r3, 800c2b8 <__ieee754_pow+0xa40>)
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	4604      	mov	r4, r0
 800c13e:	460d      	mov	r5, r1
 800c140:	f7f4 fa62 	bl	8000608 <__aeabi_dmul>
 800c144:	a35e      	add	r3, pc, #376	@ (adr r3, 800c2c0 <__ieee754_pow+0xa48>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	f7f4 f8a5 	bl	8000298 <__aeabi_dsub>
 800c14e:	4622      	mov	r2, r4
 800c150:	462b      	mov	r3, r5
 800c152:	f7f4 fa59 	bl	8000608 <__aeabi_dmul>
 800c156:	a35c      	add	r3, pc, #368	@ (adr r3, 800c2c8 <__ieee754_pow+0xa50>)
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f7f4 f89e 	bl	800029c <__adddf3>
 800c160:	4622      	mov	r2, r4
 800c162:	462b      	mov	r3, r5
 800c164:	f7f4 fa50 	bl	8000608 <__aeabi_dmul>
 800c168:	a359      	add	r3, pc, #356	@ (adr r3, 800c2d0 <__ieee754_pow+0xa58>)
 800c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16e:	f7f4 f893 	bl	8000298 <__aeabi_dsub>
 800c172:	4622      	mov	r2, r4
 800c174:	462b      	mov	r3, r5
 800c176:	f7f4 fa47 	bl	8000608 <__aeabi_dmul>
 800c17a:	a357      	add	r3, pc, #348	@ (adr r3, 800c2d8 <__ieee754_pow+0xa60>)
 800c17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c180:	f7f4 f88c 	bl	800029c <__adddf3>
 800c184:	4622      	mov	r2, r4
 800c186:	462b      	mov	r3, r5
 800c188:	f7f4 fa3e 	bl	8000608 <__aeabi_dmul>
 800c18c:	4602      	mov	r2, r0
 800c18e:	460b      	mov	r3, r1
 800c190:	4640      	mov	r0, r8
 800c192:	4649      	mov	r1, r9
 800c194:	f7f4 f880 	bl	8000298 <__aeabi_dsub>
 800c198:	4604      	mov	r4, r0
 800c19a:	460d      	mov	r5, r1
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4640      	mov	r0, r8
 800c1a2:	4649      	mov	r1, r9
 800c1a4:	f7f4 fa30 	bl	8000608 <__aeabi_dmul>
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	e9cd 0100 	strd	r0, r1, [sp]
 800c1ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7f4 f86f 	bl	8000298 <__aeabi_dsub>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	460b      	mov	r3, r1
 800c1be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1c2:	f7f4 fb4b 	bl	800085c <__aeabi_ddiv>
 800c1c6:	4632      	mov	r2, r6
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	460d      	mov	r5, r1
 800c1cc:	463b      	mov	r3, r7
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	f7f4 fa19 	bl	8000608 <__aeabi_dmul>
 800c1d6:	4632      	mov	r2, r6
 800c1d8:	463b      	mov	r3, r7
 800c1da:	f7f4 f85f 	bl	800029c <__adddf3>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	f7f4 f857 	bl	8000298 <__aeabi_dsub>
 800c1ea:	4642      	mov	r2, r8
 800c1ec:	464b      	mov	r3, r9
 800c1ee:	f7f4 f853 	bl	8000298 <__aeabi_dsub>
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	493b      	ldr	r1, [pc, #236]	@ (800c2e4 <__ieee754_pow+0xa6c>)
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	f7f4 f84d 	bl	8000298 <__aeabi_dsub>
 800c1fe:	ec41 0b10 	vmov	d0, r0, r1
 800c202:	ee10 3a90 	vmov	r3, s1
 800c206:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c20a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c20e:	da30      	bge.n	800c272 <__ieee754_pow+0x9fa>
 800c210:	4650      	mov	r0, sl
 800c212:	f000 fb4d 	bl	800c8b0 <scalbn>
 800c216:	ec51 0b10 	vmov	r0, r1, d0
 800c21a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c21e:	f7ff bbd2 	b.w	800b9c6 <__ieee754_pow+0x14e>
 800c222:	4c31      	ldr	r4, [pc, #196]	@ (800c2e8 <__ieee754_pow+0xa70>)
 800c224:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c228:	42a3      	cmp	r3, r4
 800c22a:	d91a      	bls.n	800c262 <__ieee754_pow+0x9ea>
 800c22c:	4b2f      	ldr	r3, [pc, #188]	@ (800c2ec <__ieee754_pow+0xa74>)
 800c22e:	440b      	add	r3, r1
 800c230:	4303      	orrs	r3, r0
 800c232:	d009      	beq.n	800c248 <__ieee754_pow+0x9d0>
 800c234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c238:	2200      	movs	r2, #0
 800c23a:	2300      	movs	r3, #0
 800c23c:	f7f4 fc56 	bl	8000aec <__aeabi_dcmplt>
 800c240:	3800      	subs	r0, #0
 800c242:	bf18      	it	ne
 800c244:	2001      	movne	r0, #1
 800c246:	e42b      	b.n	800baa0 <__ieee754_pow+0x228>
 800c248:	4642      	mov	r2, r8
 800c24a:	464b      	mov	r3, r9
 800c24c:	f7f4 f824 	bl	8000298 <__aeabi_dsub>
 800c250:	4632      	mov	r2, r6
 800c252:	463b      	mov	r3, r7
 800c254:	f7f4 fc5e 	bl	8000b14 <__aeabi_dcmpge>
 800c258:	2800      	cmp	r0, #0
 800c25a:	d1eb      	bne.n	800c234 <__ieee754_pow+0x9bc>
 800c25c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c2fc <__ieee754_pow+0xa84>
 800c260:	e6f7      	b.n	800c052 <__ieee754_pow+0x7da>
 800c262:	469a      	mov	sl, r3
 800c264:	4b22      	ldr	r3, [pc, #136]	@ (800c2f0 <__ieee754_pow+0xa78>)
 800c266:	459a      	cmp	sl, r3
 800c268:	f63f aef3 	bhi.w	800c052 <__ieee754_pow+0x7da>
 800c26c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c270:	e715      	b.n	800c09e <__ieee754_pow+0x826>
 800c272:	ec51 0b10 	vmov	r0, r1, d0
 800c276:	4619      	mov	r1, r3
 800c278:	e7cf      	b.n	800c21a <__ieee754_pow+0x9a2>
 800c27a:	491a      	ldr	r1, [pc, #104]	@ (800c2e4 <__ieee754_pow+0xa6c>)
 800c27c:	2000      	movs	r0, #0
 800c27e:	f7ff bb18 	b.w	800b8b2 <__ieee754_pow+0x3a>
 800c282:	2000      	movs	r0, #0
 800c284:	2100      	movs	r1, #0
 800c286:	f7ff bb14 	b.w	800b8b2 <__ieee754_pow+0x3a>
 800c28a:	4630      	mov	r0, r6
 800c28c:	4639      	mov	r1, r7
 800c28e:	f7ff bb10 	b.w	800b8b2 <__ieee754_pow+0x3a>
 800c292:	460c      	mov	r4, r1
 800c294:	f7ff bb5e 	b.w	800b954 <__ieee754_pow+0xdc>
 800c298:	2400      	movs	r4, #0
 800c29a:	f7ff bb49 	b.w	800b930 <__ieee754_pow+0xb8>
 800c29e:	bf00      	nop
 800c2a0:	00000000 	.word	0x00000000
 800c2a4:	3fe62e43 	.word	0x3fe62e43
 800c2a8:	fefa39ef 	.word	0xfefa39ef
 800c2ac:	3fe62e42 	.word	0x3fe62e42
 800c2b0:	0ca86c39 	.word	0x0ca86c39
 800c2b4:	be205c61 	.word	0xbe205c61
 800c2b8:	72bea4d0 	.word	0x72bea4d0
 800c2bc:	3e663769 	.word	0x3e663769
 800c2c0:	c5d26bf1 	.word	0xc5d26bf1
 800c2c4:	3ebbbd41 	.word	0x3ebbbd41
 800c2c8:	af25de2c 	.word	0xaf25de2c
 800c2cc:	3f11566a 	.word	0x3f11566a
 800c2d0:	16bebd93 	.word	0x16bebd93
 800c2d4:	3f66c16c 	.word	0x3f66c16c
 800c2d8:	5555553e 	.word	0x5555553e
 800c2dc:	3fc55555 	.word	0x3fc55555
 800c2e0:	fff00000 	.word	0xfff00000
 800c2e4:	3ff00000 	.word	0x3ff00000
 800c2e8:	4090cbff 	.word	0x4090cbff
 800c2ec:	3f6f3400 	.word	0x3f6f3400
 800c2f0:	3fe00000 	.word	0x3fe00000
 800c2f4:	652b82fe 	.word	0x652b82fe
 800c2f8:	3c971547 	.word	0x3c971547
 800c2fc:	4090cc00 	.word	0x4090cc00

0800c300 <__ieee754_powf>:
 800c300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c304:	ee10 4a90 	vmov	r4, s1
 800c308:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800c30c:	ed2d 8b02 	vpush	{d8}
 800c310:	ee10 6a10 	vmov	r6, s0
 800c314:	eeb0 8a40 	vmov.f32	s16, s0
 800c318:	eef0 8a60 	vmov.f32	s17, s1
 800c31c:	d10c      	bne.n	800c338 <__ieee754_powf+0x38>
 800c31e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800c322:	0076      	lsls	r6, r6, #1
 800c324:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800c328:	f240 829c 	bls.w	800c864 <__ieee754_powf+0x564>
 800c32c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c330:	ecbd 8b02 	vpop	{d8}
 800c334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c338:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800c33c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800c340:	d802      	bhi.n	800c348 <__ieee754_powf+0x48>
 800c342:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c346:	d908      	bls.n	800c35a <__ieee754_powf+0x5a>
 800c348:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800c34c:	d1ee      	bne.n	800c32c <__ieee754_powf+0x2c>
 800c34e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800c352:	0064      	lsls	r4, r4, #1
 800c354:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800c358:	e7e6      	b.n	800c328 <__ieee754_powf+0x28>
 800c35a:	2e00      	cmp	r6, #0
 800c35c:	da1e      	bge.n	800c39c <__ieee754_powf+0x9c>
 800c35e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800c362:	d22b      	bcs.n	800c3bc <__ieee754_powf+0xbc>
 800c364:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800c368:	d332      	bcc.n	800c3d0 <__ieee754_powf+0xd0>
 800c36a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800c36e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800c372:	fa49 f503 	asr.w	r5, r9, r3
 800c376:	fa05 f303 	lsl.w	r3, r5, r3
 800c37a:	454b      	cmp	r3, r9
 800c37c:	d126      	bne.n	800c3cc <__ieee754_powf+0xcc>
 800c37e:	f005 0501 	and.w	r5, r5, #1
 800c382:	f1c5 0502 	rsb	r5, r5, #2
 800c386:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800c38a:	d122      	bne.n	800c3d2 <__ieee754_powf+0xd2>
 800c38c:	2c00      	cmp	r4, #0
 800c38e:	f280 826f 	bge.w	800c870 <__ieee754_powf+0x570>
 800c392:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c396:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c39a:	e7c9      	b.n	800c330 <__ieee754_powf+0x30>
 800c39c:	2500      	movs	r5, #0
 800c39e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c3a2:	d1f0      	bne.n	800c386 <__ieee754_powf+0x86>
 800c3a4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800c3a8:	f000 825c 	beq.w	800c864 <__ieee754_powf+0x564>
 800c3ac:	d908      	bls.n	800c3c0 <__ieee754_powf+0xc0>
 800c3ae:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800c710 <__ieee754_powf+0x410>
 800c3b2:	2c00      	cmp	r4, #0
 800c3b4:	bfa8      	it	ge
 800c3b6:	eeb0 0a68 	vmovge.f32	s0, s17
 800c3ba:	e7b9      	b.n	800c330 <__ieee754_powf+0x30>
 800c3bc:	2502      	movs	r5, #2
 800c3be:	e7ee      	b.n	800c39e <__ieee754_powf+0x9e>
 800c3c0:	2c00      	cmp	r4, #0
 800c3c2:	f280 8252 	bge.w	800c86a <__ieee754_powf+0x56a>
 800c3c6:	eeb1 0a68 	vneg.f32	s0, s17
 800c3ca:	e7b1      	b.n	800c330 <__ieee754_powf+0x30>
 800c3cc:	2500      	movs	r5, #0
 800c3ce:	e7da      	b.n	800c386 <__ieee754_powf+0x86>
 800c3d0:	2500      	movs	r5, #0
 800c3d2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800c3d6:	d102      	bne.n	800c3de <__ieee754_powf+0xde>
 800c3d8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c3dc:	e7a8      	b.n	800c330 <__ieee754_powf+0x30>
 800c3de:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800c3e2:	d109      	bne.n	800c3f8 <__ieee754_powf+0xf8>
 800c3e4:	2e00      	cmp	r6, #0
 800c3e6:	db07      	blt.n	800c3f8 <__ieee754_powf+0xf8>
 800c3e8:	eeb0 0a48 	vmov.f32	s0, s16
 800c3ec:	ecbd 8b02 	vpop	{d8}
 800c3f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3f4:	f7fe bfde 	b.w	800b3b4 <__ieee754_sqrtf>
 800c3f8:	eeb0 0a48 	vmov.f32	s0, s16
 800c3fc:	f000 fa50 	bl	800c8a0 <fabsf>
 800c400:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800c404:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800c408:	4647      	mov	r7, r8
 800c40a:	d002      	beq.n	800c412 <__ieee754_powf+0x112>
 800c40c:	f1b8 0f00 	cmp.w	r8, #0
 800c410:	d117      	bne.n	800c442 <__ieee754_powf+0x142>
 800c412:	2c00      	cmp	r4, #0
 800c414:	bfbc      	itt	lt
 800c416:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800c41a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c41e:	2e00      	cmp	r6, #0
 800c420:	da86      	bge.n	800c330 <__ieee754_powf+0x30>
 800c422:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800c426:	ea58 0805 	orrs.w	r8, r8, r5
 800c42a:	d104      	bne.n	800c436 <__ieee754_powf+0x136>
 800c42c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c430:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c434:	e77c      	b.n	800c330 <__ieee754_powf+0x30>
 800c436:	2d01      	cmp	r5, #1
 800c438:	f47f af7a 	bne.w	800c330 <__ieee754_powf+0x30>
 800c43c:	eeb1 0a40 	vneg.f32	s0, s0
 800c440:	e776      	b.n	800c330 <__ieee754_powf+0x30>
 800c442:	0ff0      	lsrs	r0, r6, #31
 800c444:	3801      	subs	r0, #1
 800c446:	ea55 0300 	orrs.w	r3, r5, r0
 800c44a:	d104      	bne.n	800c456 <__ieee754_powf+0x156>
 800c44c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c450:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c454:	e76c      	b.n	800c330 <__ieee754_powf+0x30>
 800c456:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800c45a:	d973      	bls.n	800c544 <__ieee754_powf+0x244>
 800c45c:	4bad      	ldr	r3, [pc, #692]	@ (800c714 <__ieee754_powf+0x414>)
 800c45e:	4598      	cmp	r8, r3
 800c460:	d808      	bhi.n	800c474 <__ieee754_powf+0x174>
 800c462:	2c00      	cmp	r4, #0
 800c464:	da0b      	bge.n	800c47e <__ieee754_powf+0x17e>
 800c466:	2000      	movs	r0, #0
 800c468:	ecbd 8b02 	vpop	{d8}
 800c46c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c470:	f000 bb60 	b.w	800cb34 <__math_oflowf>
 800c474:	4ba8      	ldr	r3, [pc, #672]	@ (800c718 <__ieee754_powf+0x418>)
 800c476:	4598      	cmp	r8, r3
 800c478:	d908      	bls.n	800c48c <__ieee754_powf+0x18c>
 800c47a:	2c00      	cmp	r4, #0
 800c47c:	dcf3      	bgt.n	800c466 <__ieee754_powf+0x166>
 800c47e:	2000      	movs	r0, #0
 800c480:	ecbd 8b02 	vpop	{d8}
 800c484:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c488:	f000 bb4e 	b.w	800cb28 <__math_uflowf>
 800c48c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c490:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c494:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800c71c <__ieee754_powf+0x41c>
 800c498:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800c49c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c4a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c4a4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c4a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c4ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4b0:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800c720 <__ieee754_powf+0x420>
 800c4b4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c4b8:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800c724 <__ieee754_powf+0x424>
 800c4bc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c4c0:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800c728 <__ieee754_powf+0x428>
 800c4c4:	eef0 6a67 	vmov.f32	s13, s15
 800c4c8:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c4cc:	ee16 3a90 	vmov	r3, s13
 800c4d0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c4d4:	f023 030f 	bic.w	r3, r3, #15
 800c4d8:	ee06 3a90 	vmov	s13, r3
 800c4dc:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c4e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c4e4:	3d01      	subs	r5, #1
 800c4e6:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800c4ea:	4305      	orrs	r5, r0
 800c4ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4f0:	f024 040f 	bic.w	r4, r4, #15
 800c4f4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800c4f8:	bf18      	it	ne
 800c4fa:	eeb0 8a47 	vmovne.f32	s16, s14
 800c4fe:	ee07 4a10 	vmov	s14, r4
 800c502:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c506:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c50a:	ee07 3a90 	vmov	s15, r3
 800c50e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c512:	ee07 4a10 	vmov	s14, r4
 800c516:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c51a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c51e:	ee17 1a10 	vmov	r1, s14
 800c522:	2900      	cmp	r1, #0
 800c524:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c528:	f340 80dd 	ble.w	800c6e6 <__ieee754_powf+0x3e6>
 800c52c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800c530:	f240 80ca 	bls.w	800c6c8 <__ieee754_powf+0x3c8>
 800c534:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c53c:	bf4c      	ite	mi
 800c53e:	2001      	movmi	r0, #1
 800c540:	2000      	movpl	r0, #0
 800c542:	e791      	b.n	800c468 <__ieee754_powf+0x168>
 800c544:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c548:	bf01      	itttt	eq
 800c54a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c72c <__ieee754_powf+0x42c>
 800c54e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c552:	f06f 0317 	mvneq.w	r3, #23
 800c556:	ee17 7a90 	vmoveq	r7, s15
 800c55a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800c55e:	bf18      	it	ne
 800c560:	2300      	movne	r3, #0
 800c562:	3a7f      	subs	r2, #127	@ 0x7f
 800c564:	441a      	add	r2, r3
 800c566:	4b72      	ldr	r3, [pc, #456]	@ (800c730 <__ieee754_powf+0x430>)
 800c568:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c56c:	429f      	cmp	r7, r3
 800c56e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c572:	dd06      	ble.n	800c582 <__ieee754_powf+0x282>
 800c574:	4b6f      	ldr	r3, [pc, #444]	@ (800c734 <__ieee754_powf+0x434>)
 800c576:	429f      	cmp	r7, r3
 800c578:	f340 80a4 	ble.w	800c6c4 <__ieee754_powf+0x3c4>
 800c57c:	3201      	adds	r2, #1
 800c57e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c582:	2600      	movs	r6, #0
 800c584:	4b6c      	ldr	r3, [pc, #432]	@ (800c738 <__ieee754_powf+0x438>)
 800c586:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c58a:	ee07 1a10 	vmov	s14, r1
 800c58e:	edd3 5a00 	vldr	s11, [r3]
 800c592:	4b6a      	ldr	r3, [pc, #424]	@ (800c73c <__ieee754_powf+0x43c>)
 800c594:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c59c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c5a0:	1049      	asrs	r1, r1, #1
 800c5a2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c5a6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c5aa:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c5ae:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c5b2:	ee07 1a90 	vmov	s15, r1
 800c5b6:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c5ba:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c5be:	ee15 7a10 	vmov	r7, s10
 800c5c2:	401f      	ands	r7, r3
 800c5c4:	ee06 7a90 	vmov	s13, r7
 800c5c8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c5cc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c5d0:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c5d4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c5d8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c740 <__ieee754_powf+0x440>
 800c5dc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c744 <__ieee754_powf+0x444>
 800c5e0:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c5e4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c748 <__ieee754_powf+0x448>
 800c5e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c5ec:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c71c <__ieee754_powf+0x41c>
 800c5f0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c5f4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c74c <__ieee754_powf+0x44c>
 800c5f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c5fc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c750 <__ieee754_powf+0x450>
 800c600:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c604:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c608:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c60c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c610:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c614:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c618:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c61c:	eef0 5a67 	vmov.f32	s11, s15
 800c620:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c624:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c628:	ee15 1a90 	vmov	r1, s11
 800c62c:	4019      	ands	r1, r3
 800c62e:	ee05 1a90 	vmov	s11, r1
 800c632:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c636:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c63a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c63e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c642:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c646:	eeb0 6a67 	vmov.f32	s12, s15
 800c64a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c64e:	ee16 1a10 	vmov	r1, s12
 800c652:	4019      	ands	r1, r3
 800c654:	ee06 1a10 	vmov	s12, r1
 800c658:	eeb0 7a46 	vmov.f32	s14, s12
 800c65c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c660:	493c      	ldr	r1, [pc, #240]	@ (800c754 <__ieee754_powf+0x454>)
 800c662:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c666:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c66a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c758 <__ieee754_powf+0x458>
 800c66e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c75c <__ieee754_powf+0x45c>
 800c672:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c676:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c760 <__ieee754_powf+0x460>
 800c67a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c67e:	ed91 7a00 	vldr	s14, [r1]
 800c682:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c686:	ee07 2a10 	vmov	s14, r2
 800c68a:	eef0 6a67 	vmov.f32	s13, s15
 800c68e:	4a35      	ldr	r2, [pc, #212]	@ (800c764 <__ieee754_powf+0x464>)
 800c690:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c694:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c698:	ed92 5a00 	vldr	s10, [r2]
 800c69c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c6a0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c6a4:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c6a8:	ee16 2a90 	vmov	r2, s13
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	ee06 3a90 	vmov	s13, r3
 800c6b2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c6b6:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c6ba:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c6be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6c2:	e70f      	b.n	800c4e4 <__ieee754_powf+0x1e4>
 800c6c4:	2601      	movs	r6, #1
 800c6c6:	e75d      	b.n	800c584 <__ieee754_powf+0x284>
 800c6c8:	d152      	bne.n	800c770 <__ieee754_powf+0x470>
 800c6ca:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c768 <__ieee754_powf+0x468>
 800c6ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6d2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c6d6:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6de:	f73f af29 	bgt.w	800c534 <__ieee754_powf+0x234>
 800c6e2:	2386      	movs	r3, #134	@ 0x86
 800c6e4:	e048      	b.n	800c778 <__ieee754_powf+0x478>
 800c6e6:	4a21      	ldr	r2, [pc, #132]	@ (800c76c <__ieee754_powf+0x46c>)
 800c6e8:	4293      	cmp	r3, r2
 800c6ea:	d907      	bls.n	800c6fc <__ieee754_powf+0x3fc>
 800c6ec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f4:	bf4c      	ite	mi
 800c6f6:	2001      	movmi	r0, #1
 800c6f8:	2000      	movpl	r0, #0
 800c6fa:	e6c1      	b.n	800c480 <__ieee754_powf+0x180>
 800c6fc:	d138      	bne.n	800c770 <__ieee754_powf+0x470>
 800c6fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c702:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c70a:	dbea      	blt.n	800c6e2 <__ieee754_powf+0x3e2>
 800c70c:	e7ee      	b.n	800c6ec <__ieee754_powf+0x3ec>
 800c70e:	bf00      	nop
 800c710:	00000000 	.word	0x00000000
 800c714:	3f7ffff3 	.word	0x3f7ffff3
 800c718:	3f800007 	.word	0x3f800007
 800c71c:	3eaaaaab 	.word	0x3eaaaaab
 800c720:	3fb8aa3b 	.word	0x3fb8aa3b
 800c724:	36eca570 	.word	0x36eca570
 800c728:	3fb8aa00 	.word	0x3fb8aa00
 800c72c:	4b800000 	.word	0x4b800000
 800c730:	001cc471 	.word	0x001cc471
 800c734:	005db3d6 	.word	0x005db3d6
 800c738:	0800d148 	.word	0x0800d148
 800c73c:	fffff000 	.word	0xfffff000
 800c740:	3e6c3255 	.word	0x3e6c3255
 800c744:	3e53f142 	.word	0x3e53f142
 800c748:	3e8ba305 	.word	0x3e8ba305
 800c74c:	3edb6db7 	.word	0x3edb6db7
 800c750:	3f19999a 	.word	0x3f19999a
 800c754:	0800d138 	.word	0x0800d138
 800c758:	3f76384f 	.word	0x3f76384f
 800c75c:	3f763800 	.word	0x3f763800
 800c760:	369dc3a0 	.word	0x369dc3a0
 800c764:	0800d140 	.word	0x0800d140
 800c768:	3338aa3c 	.word	0x3338aa3c
 800c76c:	43160000 	.word	0x43160000
 800c770:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c774:	d971      	bls.n	800c85a <__ieee754_powf+0x55a>
 800c776:	15db      	asrs	r3, r3, #23
 800c778:	3b7e      	subs	r3, #126	@ 0x7e
 800c77a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c77e:	4118      	asrs	r0, r3
 800c780:	4408      	add	r0, r1
 800c782:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c786:	4a3c      	ldr	r2, [pc, #240]	@ (800c878 <__ieee754_powf+0x578>)
 800c788:	3b7f      	subs	r3, #127	@ 0x7f
 800c78a:	411a      	asrs	r2, r3
 800c78c:	4002      	ands	r2, r0
 800c78e:	ee07 2a10 	vmov	s14, r2
 800c792:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c796:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c79a:	f1c3 0317 	rsb	r3, r3, #23
 800c79e:	4118      	asrs	r0, r3
 800c7a0:	2900      	cmp	r1, #0
 800c7a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7a6:	bfb8      	it	lt
 800c7a8:	4240      	neglt	r0, r0
 800c7aa:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c7ae:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c87c <__ieee754_powf+0x57c>
 800c7b2:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800c880 <__ieee754_powf+0x580>
 800c7b6:	ee17 3a10 	vmov	r3, s14
 800c7ba:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c7be:	f023 030f 	bic.w	r3, r3, #15
 800c7c2:	ee07 3a10 	vmov	s14, r3
 800c7c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7ca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c7ce:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c7d2:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800c884 <__ieee754_powf+0x584>
 800c7d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7da:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c7de:	eef0 6a67 	vmov.f32	s13, s15
 800c7e2:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c7e6:	eef0 5a66 	vmov.f32	s11, s13
 800c7ea:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c7ee:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c7f2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c7f6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800c888 <__ieee754_powf+0x588>
 800c7fa:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800c88c <__ieee754_powf+0x58c>
 800c7fe:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c802:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800c890 <__ieee754_powf+0x590>
 800c806:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c80a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800c894 <__ieee754_powf+0x594>
 800c80e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c812:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c898 <__ieee754_powf+0x598>
 800c816:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c81a:	eeb0 6a66 	vmov.f32	s12, s13
 800c81e:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c822:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c826:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c82a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c82e:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c832:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c83a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c83e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c842:	ee10 3a10 	vmov	r3, s0
 800c846:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c84a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c84e:	da06      	bge.n	800c85e <__ieee754_powf+0x55e>
 800c850:	f000 f8ea 	bl	800ca28 <scalbnf>
 800c854:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c858:	e56a      	b.n	800c330 <__ieee754_powf+0x30>
 800c85a:	2000      	movs	r0, #0
 800c85c:	e7a5      	b.n	800c7aa <__ieee754_powf+0x4aa>
 800c85e:	ee00 3a10 	vmov	s0, r3
 800c862:	e7f7      	b.n	800c854 <__ieee754_powf+0x554>
 800c864:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c868:	e562      	b.n	800c330 <__ieee754_powf+0x30>
 800c86a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800c89c <__ieee754_powf+0x59c>
 800c86e:	e55f      	b.n	800c330 <__ieee754_powf+0x30>
 800c870:	eeb0 0a48 	vmov.f32	s0, s16
 800c874:	e55c      	b.n	800c330 <__ieee754_powf+0x30>
 800c876:	bf00      	nop
 800c878:	ff800000 	.word	0xff800000
 800c87c:	3f317218 	.word	0x3f317218
 800c880:	3f317200 	.word	0x3f317200
 800c884:	35bfbe8c 	.word	0x35bfbe8c
 800c888:	b5ddea0e 	.word	0xb5ddea0e
 800c88c:	3331bb4c 	.word	0x3331bb4c
 800c890:	388ab355 	.word	0x388ab355
 800c894:	bb360b61 	.word	0xbb360b61
 800c898:	3e2aaaab 	.word	0x3e2aaaab
 800c89c:	00000000 	.word	0x00000000

0800c8a0 <fabsf>:
 800c8a0:	ee10 3a10 	vmov	r3, s0
 800c8a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c8a8:	ee00 3a10 	vmov	s0, r3
 800c8ac:	4770      	bx	lr
	...

0800c8b0 <scalbn>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	ec55 4b10 	vmov	r4, r5, d0
 800c8b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	462b      	mov	r3, r5
 800c8be:	b991      	cbnz	r1, 800c8e6 <scalbn+0x36>
 800c8c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c8c4:	4323      	orrs	r3, r4
 800c8c6:	d03d      	beq.n	800c944 <scalbn+0x94>
 800c8c8:	4b35      	ldr	r3, [pc, #212]	@ (800c9a0 <scalbn+0xf0>)
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f7f3 fe9a 	bl	8000608 <__aeabi_dmul>
 800c8d4:	4b33      	ldr	r3, [pc, #204]	@ (800c9a4 <scalbn+0xf4>)
 800c8d6:	429e      	cmp	r6, r3
 800c8d8:	4604      	mov	r4, r0
 800c8da:	460d      	mov	r5, r1
 800c8dc:	da0f      	bge.n	800c8fe <scalbn+0x4e>
 800c8de:	a328      	add	r3, pc, #160	@ (adr r3, 800c980 <scalbn+0xd0>)
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	e01e      	b.n	800c924 <scalbn+0x74>
 800c8e6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c8ea:	4291      	cmp	r1, r2
 800c8ec:	d10b      	bne.n	800c906 <scalbn+0x56>
 800c8ee:	4622      	mov	r2, r4
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	f7f3 fcd2 	bl	800029c <__adddf3>
 800c8f8:	4604      	mov	r4, r0
 800c8fa:	460d      	mov	r5, r1
 800c8fc:	e022      	b.n	800c944 <scalbn+0x94>
 800c8fe:	460b      	mov	r3, r1
 800c900:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c904:	3936      	subs	r1, #54	@ 0x36
 800c906:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c90a:	4296      	cmp	r6, r2
 800c90c:	dd0d      	ble.n	800c92a <scalbn+0x7a>
 800c90e:	2d00      	cmp	r5, #0
 800c910:	a11d      	add	r1, pc, #116	@ (adr r1, 800c988 <scalbn+0xd8>)
 800c912:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c916:	da02      	bge.n	800c91e <scalbn+0x6e>
 800c918:	a11d      	add	r1, pc, #116	@ (adr r1, 800c990 <scalbn+0xe0>)
 800c91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c91e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c988 <scalbn+0xd8>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	f7f3 fe70 	bl	8000608 <__aeabi_dmul>
 800c928:	e7e6      	b.n	800c8f8 <scalbn+0x48>
 800c92a:	1872      	adds	r2, r6, r1
 800c92c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c930:	428a      	cmp	r2, r1
 800c932:	dcec      	bgt.n	800c90e <scalbn+0x5e>
 800c934:	2a00      	cmp	r2, #0
 800c936:	dd08      	ble.n	800c94a <scalbn+0x9a>
 800c938:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c93c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c940:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c944:	ec45 4b10 	vmov	d0, r4, r5
 800c948:	bd70      	pop	{r4, r5, r6, pc}
 800c94a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c94e:	da08      	bge.n	800c962 <scalbn+0xb2>
 800c950:	2d00      	cmp	r5, #0
 800c952:	a10b      	add	r1, pc, #44	@ (adr r1, 800c980 <scalbn+0xd0>)
 800c954:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c958:	dac1      	bge.n	800c8de <scalbn+0x2e>
 800c95a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c998 <scalbn+0xe8>)
 800c95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c960:	e7bd      	b.n	800c8de <scalbn+0x2e>
 800c962:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c966:	3236      	adds	r2, #54	@ 0x36
 800c968:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c96c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c970:	4620      	mov	r0, r4
 800c972:	4b0d      	ldr	r3, [pc, #52]	@ (800c9a8 <scalbn+0xf8>)
 800c974:	4629      	mov	r1, r5
 800c976:	2200      	movs	r2, #0
 800c978:	e7d4      	b.n	800c924 <scalbn+0x74>
 800c97a:	bf00      	nop
 800c97c:	f3af 8000 	nop.w
 800c980:	c2f8f359 	.word	0xc2f8f359
 800c984:	01a56e1f 	.word	0x01a56e1f
 800c988:	8800759c 	.word	0x8800759c
 800c98c:	7e37e43c 	.word	0x7e37e43c
 800c990:	8800759c 	.word	0x8800759c
 800c994:	fe37e43c 	.word	0xfe37e43c
 800c998:	c2f8f359 	.word	0xc2f8f359
 800c99c:	81a56e1f 	.word	0x81a56e1f
 800c9a0:	43500000 	.word	0x43500000
 800c9a4:	ffff3cb0 	.word	0xffff3cb0
 800c9a8:	3c900000 	.word	0x3c900000

0800c9ac <with_errno>:
 800c9ac:	b510      	push	{r4, lr}
 800c9ae:	ed2d 8b02 	vpush	{d8}
 800c9b2:	eeb0 8a40 	vmov.f32	s16, s0
 800c9b6:	eef0 8a60 	vmov.f32	s17, s1
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	f7fb f954 	bl	8007c68 <__errno>
 800c9c0:	eeb0 0a48 	vmov.f32	s0, s16
 800c9c4:	eef0 0a68 	vmov.f32	s1, s17
 800c9c8:	ecbd 8b02 	vpop	{d8}
 800c9cc:	6004      	str	r4, [r0, #0]
 800c9ce:	bd10      	pop	{r4, pc}

0800c9d0 <xflow>:
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	b507      	push	{r0, r1, r2, lr}
 800c9d4:	ec51 0b10 	vmov	r0, r1, d0
 800c9d8:	b183      	cbz	r3, 800c9fc <xflow+0x2c>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c9e0:	e9cd 2300 	strd	r2, r3, [sp]
 800c9e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9e8:	f7f3 fe0e 	bl	8000608 <__aeabi_dmul>
 800c9ec:	ec41 0b10 	vmov	d0, r0, r1
 800c9f0:	2022      	movs	r0, #34	@ 0x22
 800c9f2:	b003      	add	sp, #12
 800c9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9f8:	f7ff bfd8 	b.w	800c9ac <with_errno>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	460b      	mov	r3, r1
 800ca00:	e7ee      	b.n	800c9e0 <xflow+0x10>
 800ca02:	0000      	movs	r0, r0
 800ca04:	0000      	movs	r0, r0
	...

0800ca08 <__math_uflow>:
 800ca08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ca10 <__math_uflow+0x8>
 800ca0c:	f7ff bfe0 	b.w	800c9d0 <xflow>
 800ca10:	00000000 	.word	0x00000000
 800ca14:	10000000 	.word	0x10000000

0800ca18 <__math_oflow>:
 800ca18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ca20 <__math_oflow+0x8>
 800ca1c:	f7ff bfd8 	b.w	800c9d0 <xflow>
 800ca20:	00000000 	.word	0x00000000
 800ca24:	70000000 	.word	0x70000000

0800ca28 <scalbnf>:
 800ca28:	ee10 3a10 	vmov	r3, s0
 800ca2c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ca30:	d02b      	beq.n	800ca8a <scalbnf+0x62>
 800ca32:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ca36:	d302      	bcc.n	800ca3e <scalbnf+0x16>
 800ca38:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ca3c:	4770      	bx	lr
 800ca3e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ca42:	d123      	bne.n	800ca8c <scalbnf+0x64>
 800ca44:	4b24      	ldr	r3, [pc, #144]	@ (800cad8 <scalbnf+0xb0>)
 800ca46:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800cadc <scalbnf+0xb4>
 800ca4a:	4298      	cmp	r0, r3
 800ca4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ca50:	db17      	blt.n	800ca82 <scalbnf+0x5a>
 800ca52:	ee10 3a10 	vmov	r3, s0
 800ca56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ca5a:	3a19      	subs	r2, #25
 800ca5c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ca60:	4288      	cmp	r0, r1
 800ca62:	dd15      	ble.n	800ca90 <scalbnf+0x68>
 800ca64:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800cae0 <scalbnf+0xb8>
 800ca68:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800cae4 <scalbnf+0xbc>
 800ca6c:	ee10 3a10 	vmov	r3, s0
 800ca70:	eeb0 7a67 	vmov.f32	s14, s15
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	bfb8      	it	lt
 800ca78:	eef0 7a66 	vmovlt.f32	s15, s13
 800ca7c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ca80:	4770      	bx	lr
 800ca82:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cae8 <scalbnf+0xc0>
 800ca86:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ca8a:	4770      	bx	lr
 800ca8c:	0dd2      	lsrs	r2, r2, #23
 800ca8e:	e7e5      	b.n	800ca5c <scalbnf+0x34>
 800ca90:	4410      	add	r0, r2
 800ca92:	28fe      	cmp	r0, #254	@ 0xfe
 800ca94:	dce6      	bgt.n	800ca64 <scalbnf+0x3c>
 800ca96:	2800      	cmp	r0, #0
 800ca98:	dd06      	ble.n	800caa8 <scalbnf+0x80>
 800ca9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ca9e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800caa2:	ee00 3a10 	vmov	s0, r3
 800caa6:	4770      	bx	lr
 800caa8:	f110 0f16 	cmn.w	r0, #22
 800caac:	da09      	bge.n	800cac2 <scalbnf+0x9a>
 800caae:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800cae8 <scalbnf+0xc0>
 800cab2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800caec <scalbnf+0xc4>
 800cab6:	ee10 3a10 	vmov	r3, s0
 800caba:	eeb0 7a67 	vmov.f32	s14, s15
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	e7d9      	b.n	800ca76 <scalbnf+0x4e>
 800cac2:	3019      	adds	r0, #25
 800cac4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800cac8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800cacc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800caf0 <scalbnf+0xc8>
 800cad0:	ee07 3a90 	vmov	s15, r3
 800cad4:	e7d7      	b.n	800ca86 <scalbnf+0x5e>
 800cad6:	bf00      	nop
 800cad8:	ffff3cb0 	.word	0xffff3cb0
 800cadc:	4c000000 	.word	0x4c000000
 800cae0:	7149f2ca 	.word	0x7149f2ca
 800cae4:	f149f2ca 	.word	0xf149f2ca
 800cae8:	0da24260 	.word	0x0da24260
 800caec:	8da24260 	.word	0x8da24260
 800caf0:	33000000 	.word	0x33000000

0800caf4 <with_errnof>:
 800caf4:	b510      	push	{r4, lr}
 800caf6:	ed2d 8b02 	vpush	{d8}
 800cafa:	eeb0 8a40 	vmov.f32	s16, s0
 800cafe:	4604      	mov	r4, r0
 800cb00:	f7fb f8b2 	bl	8007c68 <__errno>
 800cb04:	eeb0 0a48 	vmov.f32	s0, s16
 800cb08:	ecbd 8b02 	vpop	{d8}
 800cb0c:	6004      	str	r4, [r0, #0]
 800cb0e:	bd10      	pop	{r4, pc}

0800cb10 <xflowf>:
 800cb10:	b130      	cbz	r0, 800cb20 <xflowf+0x10>
 800cb12:	eef1 7a40 	vneg.f32	s15, s0
 800cb16:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cb1a:	2022      	movs	r0, #34	@ 0x22
 800cb1c:	f7ff bfea 	b.w	800caf4 <with_errnof>
 800cb20:	eef0 7a40 	vmov.f32	s15, s0
 800cb24:	e7f7      	b.n	800cb16 <xflowf+0x6>
	...

0800cb28 <__math_uflowf>:
 800cb28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cb30 <__math_uflowf+0x8>
 800cb2c:	f7ff bff0 	b.w	800cb10 <xflowf>
 800cb30:	10000000 	.word	0x10000000

0800cb34 <__math_oflowf>:
 800cb34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cb3c <__math_oflowf+0x8>
 800cb38:	f7ff bfea 	b.w	800cb10 <xflowf>
 800cb3c:	70000000 	.word	0x70000000

0800cb40 <_init>:
 800cb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb42:	bf00      	nop
 800cb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb46:	bc08      	pop	{r3}
 800cb48:	469e      	mov	lr, r3
 800cb4a:	4770      	bx	lr

0800cb4c <_fini>:
 800cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4e:	bf00      	nop
 800cb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb52:	bc08      	pop	{r3}
 800cb54:	469e      	mov	lr, r3
 800cb56:	4770      	bx	lr
