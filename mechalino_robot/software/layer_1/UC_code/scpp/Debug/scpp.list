
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab64  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800ad08  0800ad08  0000bd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1c0  0800b1c0  0000d278  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1c0  0800b1c0  0000c1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1c8  0800b1c8  0000d278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1c8  0800b1c8  0000c1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1cc  0800b1cc  0000c1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800b1d0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000278  0800b448  0000d278  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  0800b448  0000d5a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d278  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f4c  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a14  00000000  00000000  0001f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00021c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cea  00000000  00000000  00022c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001842e  00000000  00000000  00023962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156cb  00000000  00000000  0003bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092395  00000000  00000000  0005145b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e37f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b48  00000000  00000000  000e3834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e937c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000278 	.word	0x20000278
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acec 	.word	0x0800acec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000027c 	.word	0x2000027c
 80001dc:	0800acec 	.word	0x0800acec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a26      	ldr	r2, [pc, #152]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <MX_GPIO_Init+0xb8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <MX_GPIO_Init+0xb8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a18      	ldr	r2, [pc, #96]	@ (80010ac <MX_GPIO_Init+0xb8>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001080:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <MX_GPIO_Init+0xbc>)
 8001082:	f001 fd45 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001086:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_GPIO_Init+0xbc>)
 80010a0:	f001 fb9a 	bl	80027d8 <HAL_GPIO_Init>

}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	@ 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020800 	.word	0x40020800

080010b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010ba:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <MX_I2C1_Init+0x54>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010c0:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_I2C1_Init+0x58>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010f2:	f001 fd27 	bl	8002b44 <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 fa04 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000294 	.word	0x20000294
 8001108:	40005400 	.word	0x40005400
 800110c:	00061a80 	.word	0x00061a80

08001110 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <HAL_I2C_MspInit+0x94>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d134      	bne.n	800119c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b1c      	ldr	r3, [pc, #112]	@ (80011a8 <HAL_I2C_MspInit+0x98>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a1b      	ldr	r2, [pc, #108]	@ (80011a8 <HAL_I2C_MspInit+0x98>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <HAL_I2C_MspInit+0x98>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800114e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001154:	2312      	movs	r3, #18
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001160:	2304      	movs	r3, #4
 8001162:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4810      	ldr	r0, [pc, #64]	@ (80011ac <HAL_I2C_MspInit+0x9c>)
 800116c:	f001 fb34 	bl	80027d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <HAL_I2C_MspInit+0x98>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <HAL_I2C_MspInit+0x98>)
 800117a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800117e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <HAL_I2C_MspInit+0x98>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	201f      	movs	r0, #31
 8001192:	f001 fa58 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001196:	201f      	movs	r0, #31
 8001198:	f001 fa71 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40005400 	.word	0x40005400
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020400 	.word	0x40020400

080011b0 <select_mux_channel>:
void rotate(float angle);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void select_mux_channel(uint8_t channel) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
    // Set A, B, C inputs of the multiplexers
    HAL_GPIO_WritePin(MUX_A_GPIO, MUX_A_PIN, (channel & 0x01) ? GPIO_PIN_RESET : GPIO_PIN_SET);  // A
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	bf0c      	ite	eq
 80011c4:	2301      	moveq	r3, #1
 80011c6:	2300      	movne	r3, #0
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	2108      	movs	r1, #8
 80011ce:	4810      	ldr	r0, [pc, #64]	@ (8001210 <select_mux_channel+0x60>)
 80011d0:	f001 fc9e 	bl	8002b10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_B_GPIO, MUX_B_PIN, (channel & 0x02) ? GPIO_PIN_RESET : GPIO_PIN_SET);  // B
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf0c      	ite	eq
 80011de:	2301      	moveq	r3, #1
 80011e0:	2300      	movne	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	461a      	mov	r2, r3
 80011e6:	2110      	movs	r1, #16
 80011e8:	4809      	ldr	r0, [pc, #36]	@ (8001210 <select_mux_channel+0x60>)
 80011ea:	f001 fc91 	bl	8002b10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_C_GPIO, MUX_C_PIN, (channel & 0x04) ? GPIO_PIN_RESET : GPIO_PIN_SET);  // C
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	461a      	mov	r2, r3
 8001200:	2120      	movs	r1, #32
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <select_mux_channel+0x60>)
 8001204:	f001 fc84 	bl	8002b10 <HAL_GPIO_WritePin>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40020400 	.word	0x40020400

08001214 <enable_multiplexers>:

void enable_multiplexers(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MUX_RC_EN_GPIO, MUX_RC_EN_PIN, GPIO_PIN_RESET); // Enable CD74HC237E (assuming active high)
 8001218:	2200      	movs	r2, #0
 800121a:	2101      	movs	r1, #1
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <enable_multiplexers+0x1c>)
 800121e:	f001 fc77 	bl	8002b10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_EN_GPIO, MUX_EN_PIN, GPIO_PIN_RESET); // Enable SN74HC138N (assuming active high)
 8001222:	2200      	movs	r2, #0
 8001224:	2102      	movs	r1, #2
 8001226:	4802      	ldr	r0, [pc, #8]	@ (8001230 <enable_multiplexers+0x1c>)
 8001228:	f001 fc72 	bl	8002b10 <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40020400 	.word	0x40020400

08001234 <disable_multiplexers>:

void disable_multiplexers(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MUX_RC_EN_GPIO, MUX_RC_EN_PIN, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2101      	movs	r1, #1
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <disable_multiplexers+0x1c>)
 800123e:	f001 fc67 	bl	8002b10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_EN_GPIO, MUX_EN_PIN, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2102      	movs	r1, #2
 8001246:	4802      	ldr	r0, [pc, #8]	@ (8001250 <disable_multiplexers+0x1c>)
 8001248:	f001 fc62 	bl	8002b10 <HAL_GPIO_WritePin>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40020400 	.word	0x40020400

08001254 <read_IR_sensors>:

uint8_t read_IR_sensors(uint8_t channel) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
	select_mux_channel(channel); // Select each IR sender and receiver
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffa5 	bl	80011b0 <select_mux_channel>
	HAL_Delay(100); // Allow time for the IR signal to be sent and received
 8001266:	2064      	movs	r0, #100	@ 0x64
 8001268:	f001 f8ee 	bl	8002448 <HAL_Delay>
    enable_multiplexers();  // Ensure the multiplexers are enabled before testing
 800126c:	f7ff ffd2 	bl	8001214 <enable_multiplexers>
	HAL_Delay(100); // Allow time for the IR signal to be sent and received
 8001270:	2064      	movs	r0, #100	@ 0x64
 8001272:	f001 f8e9 	bl	8002448 <HAL_Delay>
	uint8_t received = HAL_GPIO_ReadPin(IR_PHOTO_READ_GPIO, IR_PHOTO_READ_PIN);
 8001276:	2101      	movs	r1, #1
 8001278:	4808      	ldr	r0, [pc, #32]	@ (800129c <read_IR_sensors+0x48>)
 800127a:	f001 fc31 	bl	8002ae0 <HAL_GPIO_ReadPin>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(100); // Wait some time before testing next IR pair
 8001282:	2064      	movs	r0, #100	@ 0x64
 8001284:	f001 f8e0 	bl	8002448 <HAL_Delay>
    disable_multiplexers();  // Disable multiplexers after testing to save power and avoid interference
 8001288:	f7ff ffd4 	bl	8001234 <disable_multiplexers>
	HAL_Delay(100); // Allow time for the IR signal to be sent and received
 800128c:	2064      	movs	r0, #100	@ 0x64
 800128e:	f001 f8db 	bl	8002448 <HAL_Delay>
	return received;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40020000 	.word	0x40020000

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a6:	f001 f85d 	bl	8002364 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012aa:	f000 f893 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ae:	f7ff fea1 	bl	8000ff4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80012b2:	f000 fe05 	bl	8001ec0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012b6:	f000 fea3 	bl	8002000 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012ba:	f000 ffaf 	bl	800221c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80012be:	f7ff fef9 	bl	80010b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012c8:	4837      	ldr	r0, [pc, #220]	@ (80013a8 <main+0x108>)
 80012ca:	f001 fc21 	bl	8002b10 <HAL_GPIO_WritePin>
  HAL_Delay(5000);
 80012ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012d2:	f001 f8b9 	bl	8002448 <HAL_Delay>

  while (MPU6050_Init(&hi2c1) == 1); //Initialise the MPU6050
 80012d6:	bf00      	nop
 80012d8:	4834      	ldr	r0, [pc, #208]	@ (80013ac <main+0x10c>)
 80012da:	f000 f91b 	bl	8001514 <MPU6050_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d0f9      	beq.n	80012d8 <main+0x38>
  // calibrate MPU6050
  for(int interations = 0; interations < CALIB; interations++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	e016      	b.n	8001318 <main+0x78>
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80012ea:	4931      	ldr	r1, [pc, #196]	@ (80013b0 <main+0x110>)
 80012ec:	482f      	ldr	r0, [pc, #188]	@ (80013ac <main+0x10c>)
 80012ee:	f000 f96b 	bl	80015c8 <MPU6050_Read_All>
	  Gz_mean += MPU6050.Gz;
 80012f2:	4b2f      	ldr	r3, [pc, #188]	@ (80013b0 <main+0x110>)
 80012f4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80012f8:	4b2e      	ldr	r3, [pc, #184]	@ (80013b4 <main+0x114>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7fe ffcd 	bl	800029c <__adddf3>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	492b      	ldr	r1, [pc, #172]	@ (80013b4 <main+0x114>)
 8001308:	e9c1 2300 	strd	r2, r3, [r1]
	  HAL_Delay(50);
 800130c:	2032      	movs	r0, #50	@ 0x32
 800130e:	f001 f89b 	bl	8002448 <HAL_Delay>
  for(int interations = 0; interations < CALIB; interations++)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b31      	cmp	r3, #49	@ 0x31
 800131c:	dde5      	ble.n	80012ea <main+0x4a>
  }
  Gz_mean /= CALIB;
 800131e:	4b25      	ldr	r3, [pc, #148]	@ (80013b4 <main+0x114>)
 8001320:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <main+0x118>)
 800132a:	f7ff fa97 	bl	800085c <__aeabi_ddiv>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4920      	ldr	r1, [pc, #128]	@ (80013b4 <main+0x114>)
 8001334:	e9c1 2300 	strd	r2, r3, [r1]

  HAL_TIM_PWM_Init(&htim1);
 8001338:	4820      	ldr	r0, [pc, #128]	@ (80013bc <main+0x11c>)
 800133a:	f003 f86a 	bl	8004412 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 800133e:	4820      	ldr	r0, [pc, #128]	@ (80013c0 <main+0x120>)
 8001340:	f003 f867 	bl	8004412 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001344:	2100      	movs	r1, #0
 8001346:	481d      	ldr	r0, [pc, #116]	@ (80013bc <main+0x11c>)
 8001348:	f003 f8bc 	bl	80044c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800134c:	2108      	movs	r1, #8
 800134e:	481c      	ldr	r0, [pc, #112]	@ (80013c0 <main+0x120>)
 8001350:	f003 f8b8 	bl	80044c4 <HAL_TIM_PWM_Start>
  TIM1->CR1 = 0x01;
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <main+0x124>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
  TIM2->CR1 = 0x01;
 800135a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 8001362:	2201      	movs	r2, #1
 8001364:	4918      	ldr	r1, [pc, #96]	@ (80013c8 <main+0x128>)
 8001366:	4819      	ldr	r0, [pc, #100]	@ (80013cc <main+0x12c>)
 8001368:	f003 febf 	bl	80050ea <HAL_UART_Receive_IT>

  HAL_GPIO_WritePin (GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <main+0x108>)
 8001374:	f001 fbcc 	bl	8002b10 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  disable_multiplexers();
 8001378:	f7ff ff5c 	bl	8001234 <disable_multiplexers>
  while (1)
  {
	  for (uint8_t i = 0; i < NUM_SENSORS; i++){
 800137c:	2300      	movs	r3, #0
 800137e:	70fb      	strb	r3, [r7, #3]
 8001380:	e00e      	b.n	80013a0 <main+0x100>
		  IR_sensor_readings[i] = read_IR_sensors(i);
 8001382:	78fc      	ldrb	r4, [r7, #3]
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff ff64 	bl	8001254 <read_IR_sensors>
 800138c:	4603      	mov	r3, r0
 800138e:	461a      	mov	r2, r3
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <main+0x130>)
 8001392:	551a      	strb	r2, [r3, r4]
		  HAL_Delay(100);
 8001394:	2064      	movs	r0, #100	@ 0x64
 8001396:	f001 f857 	bl	8002448 <HAL_Delay>
	  for (uint8_t i = 0; i < NUM_SENSORS; i++){
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	3301      	adds	r3, #1
 800139e:	70fb      	strb	r3, [r7, #3]
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	2b07      	cmp	r3, #7
 80013a4:	d9ed      	bls.n	8001382 <main+0xe2>
 80013a6:	e7e9      	b.n	800137c <main+0xdc>
 80013a8:	40020800 	.word	0x40020800
 80013ac:	20000294 	.word	0x20000294
 80013b0:	200002f0 	.word	0x200002f0
 80013b4:	20000350 	.word	0x20000350
 80013b8:	40490000 	.word	0x40490000
 80013bc:	20000384 	.word	0x20000384
 80013c0:	200003cc 	.word	0x200003cc
 80013c4:	40010000 	.word	0x40010000
 80013c8:	20000378 	.word	0x20000378
 80013cc:	20000414 	.word	0x20000414
 80013d0:	200002e8 	.word	0x200002e8

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	@ 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	@ 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f005 fd3d 	bl	8006e62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <SystemClock_Config+0xcc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
 8001408:	4b25      	ldr	r3, [pc, #148]	@ (80014a0 <SystemClock_Config+0xcc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001420:	4a20      	ldr	r2, [pc, #128]	@ (80014a4 <SystemClock_Config+0xd0>)
 8001422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <SystemClock_Config+0xd0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001434:	2301      	movs	r3, #1
 8001436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001438:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143e:	2302      	movs	r3, #2
 8001440:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001442:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8001448:	2314      	movs	r3, #20
 800144a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001450:	2302      	movs	r3, #2
 8001452:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001454:	2304      	movs	r3, #4
 8001456:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4618      	mov	r0, r3
 800145e:	f002 fb31 	bl	8003ac4 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001468:	f000 f84e 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	2102      	movs	r1, #2
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fd93 	bl	8003fb4 <HAL_RCC_ClockConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001494:	f000 f838 	bl	8001508 <Error_Handler>
  }
}
 8001498:	bf00      	nop
 800149a:	3750      	adds	r7, #80	@ 0x50
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000

080014a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);


  rx_buffer[rx_buffer_index++] = UART1_rxBuffer[0];
 80014b0:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_UART_RxCpltCallback+0x4c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	b2d1      	uxtb	r1, r2
 80014b8:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <HAL_UART_RxCpltCallback+0x4c>)
 80014ba:	7011      	strb	r1, [r2, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_UART_RxCpltCallback+0x50>)
 80014c0:	7819      	ldrb	r1, [r3, #0]
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <HAL_UART_RxCpltCallback+0x54>)
 80014c4:	5499      	strb	r1, [r3, r2]

  if ((UART1_rxBuffer[0] == '\r') || rx_buffer_index > 30) // end of data
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <HAL_UART_RxCpltCallback+0x50>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b0d      	cmp	r3, #13
 80014cc:	d003      	beq.n	80014d6 <HAL_UART_RxCpltCallback+0x2e>
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_UART_RxCpltCallback+0x4c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b1e      	cmp	r3, #30
 80014d4:	d905      	bls.n	80014e2 <HAL_UART_RxCpltCallback+0x3a>
  {
	  rx_buffer_index = 0;
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <HAL_UART_RxCpltCallback+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
	  USART_recive = 1;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <HAL_UART_RxCpltCallback+0x58>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 80014e2:	2201      	movs	r2, #1
 80014e4:	4904      	ldr	r1, [pc, #16]	@ (80014f8 <HAL_UART_RxCpltCallback+0x50>)
 80014e6:	4807      	ldr	r0, [pc, #28]	@ (8001504 <HAL_UART_RxCpltCallback+0x5c>)
 80014e8:	f003 fdff 	bl	80050ea <HAL_UART_Receive_IT>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000376 	.word	0x20000376
 80014f8:	20000378 	.word	0x20000378
 80014fc:	20000358 	.word	0x20000358
 8001500:	20000377 	.word	0x20000377
 8001504:	20000414 	.word	0x20000414

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <Error_Handler+0x8>

08001514 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af04      	add	r7, sp, #16
 800151a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 800151c:	2364      	movs	r3, #100	@ 0x64
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	2301      	movs	r3, #1
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	f107 030f 	add.w	r3, r7, #15
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	2275      	movs	r2, #117	@ 0x75
 800152e:	21d0      	movs	r1, #208	@ 0xd0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f001 fd45 	bl	8002fc0 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b68      	cmp	r3, #104	@ 0x68
 800153a:	d13d      	bne.n	80015b8 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001540:	2364      	movs	r3, #100	@ 0x64
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2301      	movs	r3, #1
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	f107 030e 	add.w	r3, r7, #14
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	226b      	movs	r2, #107	@ 0x6b
 8001552:	21d0      	movs	r1, #208	@ 0xd0
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f001 fc39 	bl	8002dcc <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800155a:	2307      	movs	r3, #7
 800155c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800155e:	2364      	movs	r3, #100	@ 0x64
 8001560:	9302      	str	r3, [sp, #8]
 8001562:	2301      	movs	r3, #1
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f107 030e 	add.w	r3, r7, #14
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	2219      	movs	r2, #25
 8001570:	21d0      	movs	r1, #208	@ 0xd0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f001 fc2a 	bl	8002dcc <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001578:	2300      	movs	r3, #0
 800157a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800157c:	2364      	movs	r3, #100	@ 0x64
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2301      	movs	r3, #1
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	f107 030e 	add.w	r3, r7, #14
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2301      	movs	r3, #1
 800158c:	221c      	movs	r2, #28
 800158e:	21d0      	movs	r1, #208	@ 0xd0
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f001 fc1b 	bl	8002dcc <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001596:	2300      	movs	r3, #0
 8001598:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800159a:	2364      	movs	r3, #100	@ 0x64
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	2301      	movs	r3, #1
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	f107 030e 	add.w	r3, r7, #14
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2301      	movs	r3, #1
 80015aa:	221b      	movs	r2, #27
 80015ac:	21d0      	movs	r1, #208	@ 0xd0
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f001 fc0c 	bl	8002dcc <HAL_I2C_Mem_Write>
        return 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e000      	b.n	80015ba <MPU6050_Init+0xa6>
    }
    return 1;
 80015b8:	2301      	movs	r3, #1
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	0000      	movs	r0, r0
 80015c4:	0000      	movs	r0, r0
	...

080015c8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80015c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015cc:	b094      	sub	sp, #80	@ 0x50
 80015ce:	af04      	add	r7, sp, #16
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80015d4:	2364      	movs	r3, #100	@ 0x64
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	230e      	movs	r3, #14
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2301      	movs	r3, #1
 80015e4:	223b      	movs	r2, #59	@ 0x3b
 80015e6:	21d0      	movs	r1, #208	@ 0xd0
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f001 fce9 	bl	8002fc0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80015ee:	7a3b      	ldrb	r3, [r7, #8]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	7a7b      	ldrb	r3, [r7, #9]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001600:	7abb      	ldrb	r3, [r7, #10]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	7afb      	ldrb	r3, [r7, #11]
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21a      	sxth	r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001612:	7b3b      	ldrb	r3, [r7, #12]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7b7b      	ldrb	r3, [r7, #13]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001632:	7c3b      	ldrb	r3, [r7, #16]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	7c7b      	ldrb	r3, [r7, #17]
 800163a:	b21b      	sxth	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b21a      	sxth	r2, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001644:	7cbb      	ldrb	r3, [r7, #18]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	7cfb      	ldrb	r3, [r7, #19]
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21a      	sxth	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001656:	7d3b      	ldrb	r3, [r7, #20]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	b21a      	sxth	r2, r3
 800165c:	7d7b      	ldrb	r3, [r7, #21]
 800165e:	b21b      	sxth	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b21a      	sxth	r2, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe ff60 	bl	8000534 <__aeabi_i2d>
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4bbd      	ldr	r3, [pc, #756]	@ (8001970 <MPU6050_Read_All+0x3a8>)
 800167a:	f7ff f8ef 	bl	800085c <__aeabi_ddiv>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff50 	bl	8000534 <__aeabi_i2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4bb5      	ldr	r3, [pc, #724]	@ (8001970 <MPU6050_Read_All+0x3a8>)
 800169a:	f7ff f8df 	bl	800085c <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff40 	bl	8000534 <__aeabi_i2d>
 80016b4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001958 <MPU6050_Read_All+0x390>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7ff f8cf 	bl	800085c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	6839      	ldr	r1, [r7, #0]
 80016c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80016c8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d4:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8001974 <MPU6050_Read_All+0x3ac>
 80016d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016dc:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001978 <MPU6050_Read_All+0x3b0>
 80016e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff1f 	bl	8000534 <__aeabi_i2d>
 80016f6:	a39a      	add	r3, pc, #616	@ (adr r3, 8001960 <MPU6050_Read_All+0x398>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7ff f8ae 	bl	800085c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff0f 	bl	8000534 <__aeabi_i2d>
 8001716:	a392      	add	r3, pc, #584	@ (adr r3, 8001960 <MPU6050_Read_All+0x398>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7ff f89e 	bl	800085c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe feff 	bl	8000534 <__aeabi_i2d>
 8001736:	a38a      	add	r3, pc, #552	@ (adr r3, 8001960 <MPU6050_Read_All+0x398>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7ff f88e 	bl	800085c <__aeabi_ddiv>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800174a:	f000 fe71 	bl	8002430 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	4b8a      	ldr	r3, [pc, #552]	@ (800197c <MPU6050_Read_All+0x3b4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fedc 	bl	8000514 <__aeabi_ui2d>
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b87      	ldr	r3, [pc, #540]	@ (8001980 <MPU6050_Read_All+0x3b8>)
 8001762:	f7ff f87b 	bl	800085c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 800176e:	f000 fe5f 	bl	8002430 <HAL_GetTick>
 8001772:	4603      	mov	r3, r0
 8001774:	4a81      	ldr	r2, [pc, #516]	@ (800197c <MPU6050_Read_All+0x3b4>)
 8001776:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	461a      	mov	r2, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001786:	fb03 f202 	mul.w	r2, r3, r2
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001790:	4619      	mov	r1, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fec8 	bl	8000534 <__aeabi_i2d>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	ec43 2b10 	vmov	d0, r2, r3
 80017ac:	f008 ff30 	bl	800a610 <sqrt>
 80017b0:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017c0:	f7ff f98a 	bl	8000ad8 <__aeabi_dcmpeq>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d11f      	bne.n	800180a <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe feaf 	bl	8000534 <__aeabi_i2d>
 80017d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017da:	f7ff f83f 	bl	800085c <__aeabi_ddiv>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	ec43 2b17 	vmov	d7, r2, r3
 80017e6:	eeb0 0a47 	vmov.f32	s0, s14
 80017ea:	eef0 0a67 	vmov.f32	s1, s15
 80017ee:	f008 ff3b 	bl	800a668 <atan>
 80017f2:	ec51 0b10 	vmov	r0, r1, d0
 80017f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8001968 <MPU6050_Read_All+0x3a0>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe ff04 	bl	8000608 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001808:	e005      	b.n	8001816 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181c:	425b      	negs	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe88 	bl	8000534 <__aeabi_i2d>
 8001824:	4682      	mov	sl, r0
 8001826:	468b      	mov	fp, r1
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe80 	bl	8000534 <__aeabi_i2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	ec43 2b11 	vmov	d1, r2, r3
 800183c:	ec4b ab10 	vmov	d0, sl, fp
 8001840:	f008 fee4 	bl	800a60c <atan2>
 8001844:	ec51 0b10 	vmov	r0, r1, d0
 8001848:	a347      	add	r3, pc, #284	@ (adr r3, 8001968 <MPU6050_Read_All+0x3a0>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fedb 	bl	8000608 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	4b49      	ldr	r3, [pc, #292]	@ (8001984 <MPU6050_Read_All+0x3bc>)
 8001860:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001864:	f7ff f942 	bl	8000aec <__aeabi_dcmplt>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00a      	beq.n	8001884 <MPU6050_Read_All+0x2bc>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b43      	ldr	r3, [pc, #268]	@ (8001988 <MPU6050_Read_All+0x3c0>)
 800187a:	f7ff f955 	bl	8000b28 <__aeabi_dcmpgt>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d114      	bne.n	80018ae <MPU6050_Read_All+0x2e6>
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4b3f      	ldr	r3, [pc, #252]	@ (8001988 <MPU6050_Read_All+0x3c0>)
 800188a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800188e:	f7ff f94b 	bl	8000b28 <__aeabi_dcmpgt>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d015      	beq.n	80018c4 <MPU6050_Read_All+0x2fc>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	4b38      	ldr	r3, [pc, #224]	@ (8001984 <MPU6050_Read_All+0x3bc>)
 80018a4:	f7ff f922 	bl	8000aec <__aeabi_dcmplt>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 80018ae:	4937      	ldr	r1, [pc, #220]	@ (800198c <MPU6050_Read_All+0x3c4>)
 80018b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018be:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80018c2:	e014      	b.n	80018ee <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80018ca:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80018ce:	eeb0 1a47 	vmov.f32	s2, s14
 80018d2:	eef0 1a67 	vmov.f32	s3, s15
 80018d6:	ed97 0b06 	vldr	d0, [r7, #24]
 80018da:	482c      	ldr	r0, [pc, #176]	@ (800198c <MPU6050_Read_All+0x3c4>)
 80018dc:	f000 f85a 	bl	8001994 <Kalman_getAngle>
 80018e0:	eeb0 7a40 	vmov.f32	s14, s0
 80018e4:	eef0 7a60 	vmov.f32	s15, s1
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80018f4:	4690      	mov	r8, r2
 80018f6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <MPU6050_Read_All+0x3c0>)
 8001900:	4640      	mov	r0, r8
 8001902:	4649      	mov	r1, r9
 8001904:	f7ff f910 	bl	8000b28 <__aeabi_dcmpgt>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d008      	beq.n	8001920 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001914:	4614      	mov	r4, r2
 8001916:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8001926:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800192a:	eeb0 1a47 	vmov.f32	s2, s14
 800192e:	eef0 1a67 	vmov.f32	s3, s15
 8001932:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8001936:	4816      	ldr	r0, [pc, #88]	@ (8001990 <MPU6050_Read_All+0x3c8>)
 8001938:	f000 f82c 	bl	8001994 <Kalman_getAngle>
 800193c:	eeb0 7a40 	vmov.f32	s14, s0
 8001940:	eef0 7a60 	vmov.f32	s15, s1
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800194a:	bf00      	nop
 800194c:	3740      	adds	r7, #64	@ 0x40
 800194e:	46bd      	mov	sp, r7
 8001950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001954:	f3af 8000 	nop.w
 8001958:	00000000 	.word	0x00000000
 800195c:	40cc2900 	.word	0x40cc2900
 8001960:	00000000 	.word	0x00000000
 8001964:	40606000 	.word	0x40606000
 8001968:	1a63c1f8 	.word	0x1a63c1f8
 800196c:	404ca5dc 	.word	0x404ca5dc
 8001970:	40d00000 	.word	0x40d00000
 8001974:	43aa0000 	.word	0x43aa0000
 8001978:	42121eb8 	.word	0x42121eb8
 800197c:	2000037c 	.word	0x2000037c
 8001980:	408f4000 	.word	0x408f4000
 8001984:	c0568000 	.word	0xc0568000
 8001988:	40568000 	.word	0x40568000
 800198c:	20000048 	.word	0x20000048
 8001990:	20000000 	.word	0x20000000

08001994 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b096      	sub	sp, #88	@ 0x58
 8001998:	af00      	add	r7, sp, #0
 800199a:	61f8      	str	r0, [r7, #28]
 800199c:	ed87 0b04 	vstr	d0, [r7, #16]
 80019a0:	ed87 1b02 	vstr	d1, [r7, #8]
 80019a4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80019ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019b2:	f7fe fc71 	bl	8000298 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019cc:	f7fe fe1c 	bl	8000608 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7fe fc60 	bl	800029c <__adddf3>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	69f9      	ldr	r1, [r7, #28]
 80019e2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80019f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019f6:	f7fe fe07 	bl	8000608 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001a08:	f7fe fc46 	bl	8000298 <__aeabi_dsub>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a1a:	f7fe fc3d 	bl	8000298 <__aeabi_dsub>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fc36 	bl	800029c <__adddf3>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a3c:	f7fe fde4 	bl	8000608 <__aeabi_dmul>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4620      	mov	r0, r4
 8001a46:	4629      	mov	r1, r5
 8001a48:	f7fe fc28 	bl	800029c <__adddf3>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	69f9      	ldr	r1, [r7, #28]
 8001a52:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a66:	f7fe fdcf 	bl	8000608 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7fe fc11 	bl	8000298 <__aeabi_dsub>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	69f9      	ldr	r1, [r7, #28]
 8001a7c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8001a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a90:	f7fe fdba 	bl	8000608 <__aeabi_dmul>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4629      	mov	r1, r5
 8001a9c:	f7fe fbfc 	bl	8000298 <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001aba:	f7fe fda5 	bl	8000608 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fbe9 	bl	800029c <__adddf3>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	69f9      	ldr	r1, [r7, #28]
 8001ad0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ae0:	f7fe fbdc 	bl	800029c <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001af2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001af6:	f7fe feb1 	bl	800085c <__aeabi_ddiv>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001b08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b0c:	f7fe fea6 	bl	800085c <__aeabi_ddiv>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b22:	f7fe fbb9 	bl	8000298 <__aeabi_dsub>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001b34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b3c:	f7fe fd64 	bl	8000608 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4620      	mov	r0, r4
 8001b46:	4629      	mov	r1, r5
 8001b48:	f7fe fba8 	bl	800029c <__adddf3>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	69f9      	ldr	r1, [r7, #28]
 8001b52:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001b5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b64:	f7fe fd50 	bl	8000608 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fb94 	bl	800029c <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	69f9      	ldr	r1, [r7, #28]
 8001b7a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001b84:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001b98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ba0:	f7fe fd32 	bl	8000608 <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7fe fb74 	bl	8000298 <__aeabi_dsub>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	69f9      	ldr	r1, [r7, #28]
 8001bb6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8001bc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bc8:	f7fe fd1e 	bl	8000608 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fb60 	bl	8000298 <__aeabi_dsub>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	69f9      	ldr	r1, [r7, #28]
 8001bde:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8001be8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001bf0:	f7fe fd0a 	bl	8000608 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	f7fe fb4c 	bl	8000298 <__aeabi_dsub>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	69f9      	ldr	r1, [r7, #28]
 8001c06:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8001c10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c18:	f7fe fcf6 	bl	8000608 <__aeabi_dmul>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4620      	mov	r0, r4
 8001c22:	4629      	mov	r1, r5
 8001c24:	f7fe fb38 	bl	8000298 <__aeabi_dsub>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	69f9      	ldr	r1, [r7, #28]
 8001c2e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c38:	ec43 2b17 	vmov	d7, r2, r3
};
 8001c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c40:	eef0 0a67 	vmov.f32	s1, s15
 8001c44:	3758      	adds	r7, #88	@ 0x58
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf2:	f000 fb89 	bl	8002408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <USART1_IRQHandler+0x10>)
 8001d02:	f003 fa23 	bl	800514c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000414 	.word	0x20000414

08001d10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_kill>:

int _kill(int pid, int sig)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d2a:	f005 f8ed 	bl	8006f08 <__errno>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2216      	movs	r2, #22
 8001d32:	601a      	str	r2, [r3, #0]
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_exit>:

void _exit (int status)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffe7 	bl	8001d20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d52:	bf00      	nop
 8001d54:	e7fd      	b.n	8001d52 <_exit+0x12>

08001d56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e00a      	b.n	8001d7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d68:	f3af 8000 	nop.w
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	60ba      	str	r2, [r7, #8]
 8001d74:	b2ca      	uxtb	r2, r1
 8001d76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	dbf0      	blt.n	8001d68 <_read+0x12>
  }

  return len;
 8001d86:	687b      	ldr	r3, [r7, #4]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e009      	b.n	8001db6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	60ba      	str	r2, [r7, #8]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	dbf1      	blt.n	8001da2 <_write+0x12>
  }
  return len;
 8001dbe:	687b      	ldr	r3, [r7, #4]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_close>:

int _close(int file)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001df0:	605a      	str	r2, [r3, #4]
  return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_isatty>:

int _isatty(int file)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e38:	4a14      	ldr	r2, [pc, #80]	@ (8001e8c <_sbrk+0x5c>)
 8001e3a:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <_sbrk+0x60>)
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <_sbrk+0x64>)
 8001e4e:	4a12      	ldr	r2, [pc, #72]	@ (8001e98 <_sbrk+0x68>)
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d207      	bcs.n	8001e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e60:	f005 f852 	bl	8006f08 <__errno>
 8001e64:	4603      	mov	r3, r0
 8001e66:	220c      	movs	r2, #12
 8001e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6e:	e009      	b.n	8001e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <_sbrk+0x64>)
 8001e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20010000 	.word	0x20010000
 8001e90:	00000400 	.word	0x00000400
 8001e94:	20000380 	.word	0x20000380
 8001e98:	200005a8 	.word	0x200005a8

08001e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <SystemInit+0x20>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <SystemInit+0x20>)
 8001ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b096      	sub	sp, #88	@ 0x58
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 ffb2 	bl	8006e62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001efe:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f00:	4a3e      	ldr	r2, [pc, #248]	@ (8001ffc <MX_TIM1_Init+0x13c>)
 8001f02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8001f04:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f06:	2227      	movs	r2, #39	@ 0x27
 8001f08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 8001f10:	4b39      	ldr	r3, [pc, #228]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f12:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001f16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f18:	4b37      	ldr	r3, [pc, #220]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f1e:	4b36      	ldr	r3, [pc, #216]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f24:	4b34      	ldr	r3, [pc, #208]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f2a:	4833      	ldr	r0, [pc, #204]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f2c:	f002 fa22 	bl	8004374 <HAL_TIM_Base_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f36:	f7ff fae7 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f40:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f44:	4619      	mov	r1, r3
 8001f46:	482c      	ldr	r0, [pc, #176]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f48:	f002 fc2e 	bl	80047a8 <HAL_TIM_ConfigClockSource>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f52:	f7ff fad9 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f56:	4828      	ldr	r0, [pc, #160]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f58:	f002 fa5b 	bl	8004412 <HAL_TIM_PWM_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f62:	f7ff fad1 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f72:	4619      	mov	r1, r3
 8001f74:	4820      	ldr	r0, [pc, #128]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001f76:	f002 ffab 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f80:	f7ff fac2 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f84:	2360      	movs	r3, #96	@ 0x60
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f90:	2300      	movs	r3, #0
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4813      	ldr	r0, [pc, #76]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001faa:	f002 fb3b 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001fb4:	f7ff faa8 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4807      	ldr	r0, [pc, #28]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001fdc:	f002 ffe6 	bl	8004fac <HAL_TIMEx_ConfigBreakDeadTime>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001fe6:	f7ff fa8f 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fea:	4803      	ldr	r0, [pc, #12]	@ (8001ff8 <MX_TIM1_Init+0x138>)
 8001fec:	f000 f8b4 	bl	8002158 <HAL_TIM_MspPostInit>

}
 8001ff0:	bf00      	nop
 8001ff2:	3758      	adds	r7, #88	@ 0x58
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000384 	.word	0x20000384
 8001ffc:	40010000 	.word	0x40010000

08002000 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08e      	sub	sp, #56	@ 0x38
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002014:	f107 0320 	add.w	r3, r7, #32
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
 800202c:	615a      	str	r2, [r3, #20]
 800202e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002030:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 8002032:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002036:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8002038:	4b2b      	ldr	r3, [pc, #172]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 800203a:	2227      	movs	r2, #39	@ 0x27
 800203c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203e:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 8002040:	2200      	movs	r2, #0
 8002042:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8002044:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 8002046:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800204a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800204c:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002052:	4b25      	ldr	r3, [pc, #148]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002058:	4823      	ldr	r0, [pc, #140]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 800205a:	f002 f98b 	bl	8004374 <HAL_TIM_Base_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002064:	f7ff fa50 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002068:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800206e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002072:	4619      	mov	r1, r3
 8002074:	481c      	ldr	r0, [pc, #112]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 8002076:	f002 fb97 	bl	80047a8 <HAL_TIM_ConfigClockSource>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002080:	f7ff fa42 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002084:	4818      	ldr	r0, [pc, #96]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 8002086:	f002 f9c4 	bl	8004412 <HAL_TIM_PWM_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002090:	f7ff fa3a 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	4619      	mov	r1, r3
 80020a2:	4811      	ldr	r0, [pc, #68]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 80020a4:	f002 ff14 	bl	8004ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020ae:	f7ff fa2b 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b2:	2360      	movs	r3, #96	@ 0x60
 80020b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	2208      	movs	r2, #8
 80020c6:	4619      	mov	r1, r3
 80020c8:	4807      	ldr	r0, [pc, #28]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 80020ca:	f002 faab 	bl	8004624 <HAL_TIM_PWM_ConfigChannel>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80020d4:	f7ff fa18 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020d8:	4803      	ldr	r0, [pc, #12]	@ (80020e8 <MX_TIM2_Init+0xe8>)
 80020da:	f000 f83d 	bl	8002158 <HAL_TIM_MspPostInit>

}
 80020de:	bf00      	nop
 80020e0:	3738      	adds	r7, #56	@ 0x38
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200003cc 	.word	0x200003cc

080020ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a15      	ldr	r2, [pc, #84]	@ (8002150 <HAL_TIM_Base_MspInit+0x64>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10e      	bne.n	800211c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <HAL_TIM_Base_MspInit+0x68>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	4a13      	ldr	r2, [pc, #76]	@ (8002154 <HAL_TIM_Base_MspInit+0x68>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6453      	str	r3, [r2, #68]	@ 0x44
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <HAL_TIM_Base_MspInit+0x68>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800211a:	e012      	b.n	8002142 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002124:	d10d      	bne.n	8002142 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <HAL_TIM_Base_MspInit+0x68>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	4a09      	ldr	r2, [pc, #36]	@ (8002154 <HAL_TIM_Base_MspInit+0x68>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6413      	str	r3, [r2, #64]	@ 0x40
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <HAL_TIM_Base_MspInit+0x68>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40023800 	.word	0x40023800

08002158 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	@ 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a25      	ldr	r2, [pc, #148]	@ (800220c <HAL_TIM_MspPostInit+0xb4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d11f      	bne.n	80021ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b24      	ldr	r3, [pc, #144]	@ (8002210 <HAL_TIM_MspPostInit+0xb8>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	4a23      	ldr	r2, [pc, #140]	@ (8002210 <HAL_TIM_MspPostInit+0xb8>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6313      	str	r3, [r2, #48]	@ 0x30
 800218a:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <HAL_TIM_MspPostInit+0xb8>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002196:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800219a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	4818      	ldr	r0, [pc, #96]	@ (8002214 <HAL_TIM_MspPostInit+0xbc>)
 80021b4:	f000 fb10 	bl	80027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80021b8:	e023      	b.n	8002202 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c2:	d11e      	bne.n	8002202 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <HAL_TIM_MspPostInit+0xb8>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021cc:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <HAL_TIM_MspPostInit+0xb8>)
 80021ce:	f043 0302 	orr.w	r3, r3, #2
 80021d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_TIM_MspPostInit+0xb8>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021f2:	2301      	movs	r3, #1
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4806      	ldr	r0, [pc, #24]	@ (8002218 <HAL_TIM_MspPostInit+0xc0>)
 80021fe:	f000 faeb 	bl	80027d8 <HAL_GPIO_Init>
}
 8002202:	bf00      	nop
 8002204:	3728      	adds	r7, #40	@ 0x28
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40010000 	.word	0x40010000
 8002210:	40023800 	.word	0x40023800
 8002214:	40020000 	.word	0x40020000
 8002218:	40020400 	.word	0x40020400

0800221c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <MX_USART1_UART_Init+0x4c>)
 8002222:	4a12      	ldr	r2, [pc, #72]	@ (800226c <MX_USART1_UART_Init+0x50>)
 8002224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <MX_USART1_UART_Init+0x4c>)
 8002228:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800222c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <MX_USART1_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <MX_USART1_UART_Init+0x4c>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <MX_USART1_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <MX_USART1_UART_Init+0x4c>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <MX_USART1_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <MX_USART1_UART_Init+0x4c>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002252:	4805      	ldr	r0, [pc, #20]	@ (8002268 <MX_USART1_UART_Init+0x4c>)
 8002254:	f002 fefc 	bl	8005050 <HAL_UART_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800225e:	f7ff f953 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000414 	.word	0x20000414
 800226c:	40011000 	.word	0x40011000

08002270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <HAL_UART_MspInit+0x94>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d134      	bne.n	80022fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_UART_MspInit+0x98>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	4a1b      	ldr	r2, [pc, #108]	@ (8002308 <HAL_UART_MspInit+0x98>)
 800229c:	f043 0310 	orr.w	r3, r3, #16
 80022a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HAL_UART_MspInit+0x98>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]


    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <HAL_UART_MspInit+0x98>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a14      	ldr	r2, [pc, #80]	@ (8002308 <HAL_UART_MspInit+0x98>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b12      	ldr	r3, [pc, #72]	@ (8002308 <HAL_UART_MspInit+0x98>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022dc:	2307      	movs	r3, #7
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4809      	ldr	r0, [pc, #36]	@ (800230c <HAL_UART_MspInit+0x9c>)
 80022e8:	f000 fa76 	bl	80027d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	2025      	movs	r0, #37	@ 0x25
 80022f2:	f000 f9a8 	bl	8002646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022f6:	2025      	movs	r0, #37	@ 0x25
 80022f8:	f000 f9c1 	bl	800267e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022fc:	bf00      	nop
 80022fe:	3728      	adds	r7, #40	@ 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40011000 	.word	0x40011000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020000 	.word	0x40020000

08002310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002314:	480d      	ldr	r0, [pc, #52]	@ (800234c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002316:	490e      	ldr	r1, [pc, #56]	@ (8002350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002318:	4a0e      	ldr	r2, [pc, #56]	@ (8002354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232a:	4a0b      	ldr	r2, [pc, #44]	@ (8002358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800232c:	4c0b      	ldr	r4, [pc, #44]	@ (800235c <LoopFillZerobss+0x26>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800233a:	f7ff fdaf 	bl	8001e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800233e:	f004 fde9 	bl	8006f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002342:	f7fe ffad 	bl	80012a0 <main>
  bx  lr    
 8002346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002348:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002350:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002354:	0800b1d0 	.word	0x0800b1d0
  ldr r2, =_sbss
 8002358:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 800235c:	200005a8 	.word	0x200005a8

08002360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC_IRQHandler>
	...

08002364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002368:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a0d      	ldr	r2, [pc, #52]	@ (80023a4 <HAL_Init+0x40>)
 800236e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002372:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_Init+0x40>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <HAL_Init+0x40>)
 800237a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800237e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002380:	4b08      	ldr	r3, [pc, #32]	@ (80023a4 <HAL_Init+0x40>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a07      	ldr	r2, [pc, #28]	@ (80023a4 <HAL_Init+0x40>)
 8002386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800238c:	2003      	movs	r0, #3
 800238e:	f000 f94f 	bl	8002630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002392:	200f      	movs	r0, #15
 8002394:	f000 f808 	bl	80023a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002398:	f7ff fc58 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00

080023a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <HAL_InitTick+0x54>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <HAL_InitTick+0x58>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023be:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f967 	bl	800269a <HAL_SYSTICK_Config>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00e      	b.n	80023f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b0f      	cmp	r3, #15
 80023da:	d80a      	bhi.n	80023f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023dc:	2200      	movs	r2, #0
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f000 f92f 	bl	8002646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e8:	4a06      	ldr	r2, [pc, #24]	@ (8002404 <HAL_InitTick+0x5c>)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
 80023f0:	e000      	b.n	80023f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20000090 	.word	0x20000090
 8002400:	20000098 	.word	0x20000098
 8002404:	20000094 	.word	0x20000094

08002408 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_IncTick+0x20>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_IncTick+0x24>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4413      	add	r3, r2
 8002418:	4a04      	ldr	r2, [pc, #16]	@ (800242c <HAL_IncTick+0x24>)
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000098 	.word	0x20000098
 800242c:	20000458 	.word	0x20000458

08002430 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return uwTick;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_GetTick+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000458 	.word	0x20000458

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff ffee 	bl	8002430 <HAL_GetTick>
 8002454:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d005      	beq.n	800246e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_Delay+0x44>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246e:	bf00      	nop
 8002470:	f7ff ffde 	bl	8002430 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8f7      	bhi.n	8002470 <HAL_Delay+0x28>
  {
  }
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000098 	.word	0x20000098

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c2:	4a04      	ldr	r2, [pc, #16]	@ (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	60d3      	str	r3, [r2, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	db0b      	blt.n	800251e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	f003 021f 	and.w	r2, r3, #31
 800250c:	4907      	ldr	r1, [pc, #28]	@ (800252c <__NVIC_EnableIRQ+0x38>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2001      	movs	r0, #1
 8002516:	fa00 f202 	lsl.w	r2, r0, r2
 800251a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e100 	.word	0xe000e100

08002530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	6039      	str	r1, [r7, #0]
 800253a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db0a      	blt.n	800255a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	b2da      	uxtb	r2, r3
 8002548:	490c      	ldr	r1, [pc, #48]	@ (800257c <__NVIC_SetPriority+0x4c>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	0112      	lsls	r2, r2, #4
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	440b      	add	r3, r1
 8002554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002558:	e00a      	b.n	8002570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4908      	ldr	r1, [pc, #32]	@ (8002580 <__NVIC_SetPriority+0x50>)
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	3b04      	subs	r3, #4
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	440b      	add	r3, r1
 800256e:	761a      	strb	r2, [r3, #24]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000e100 	.word	0xe000e100
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	@ 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f1c3 0307 	rsb	r3, r3, #7
 800259e:	2b04      	cmp	r3, #4
 80025a0:	bf28      	it	cs
 80025a2:	2304      	movcs	r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3304      	adds	r3, #4
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d902      	bls.n	80025b4 <NVIC_EncodePriority+0x30>
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3b03      	subs	r3, #3
 80025b2:	e000      	b.n	80025b6 <NVIC_EncodePriority+0x32>
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	f04f 32ff 	mov.w	r2, #4294967295
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	401a      	ands	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43d9      	mvns	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	4313      	orrs	r3, r2
         );
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	@ 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025fc:	d301      	bcc.n	8002602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025fe:	2301      	movs	r3, #1
 8002600:	e00f      	b.n	8002622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002602:	4a0a      	ldr	r2, [pc, #40]	@ (800262c <SysTick_Config+0x40>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b01      	subs	r3, #1
 8002608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260a:	210f      	movs	r1, #15
 800260c:	f04f 30ff 	mov.w	r0, #4294967295
 8002610:	f7ff ff8e 	bl	8002530 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002614:	4b05      	ldr	r3, [pc, #20]	@ (800262c <SysTick_Config+0x40>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	4b04      	ldr	r3, [pc, #16]	@ (800262c <SysTick_Config+0x40>)
 800261c:	2207      	movs	r2, #7
 800261e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	e000e010 	.word	0xe000e010

08002630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff29 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002646:	b580      	push	{r7, lr}
 8002648:	b086      	sub	sp, #24
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002658:	f7ff ff3e 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 800265c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	f7ff ff8e 	bl	8002584 <NVIC_EncodePriority>
 8002668:	4602      	mov	r2, r0
 800266a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266e:	4611      	mov	r1, r2
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff5d 	bl	8002530 <__NVIC_SetPriority>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff31 	bl	80024f4 <__NVIC_EnableIRQ>
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffa2 	bl	80025ec <SysTick_Config>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7ff feb6 	bl	8002430 <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d008      	beq.n	80026e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e052      	b.n	800278a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0216 	bic.w	r2, r2, #22
 80026f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002702:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <HAL_DMA_Abort+0x62>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0208 	bic.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002734:	e013      	b.n	800275e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002736:	f7ff fe7b 	bl	8002430 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b05      	cmp	r3, #5
 8002742:	d90c      	bls.n	800275e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2203      	movs	r2, #3
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e015      	b.n	800278a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e4      	bne.n	8002736 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	223f      	movs	r2, #63	@ 0x3f
 8002772:	409a      	lsls	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d004      	beq.n	80027b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e00c      	b.n	80027ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2205      	movs	r2, #5
 80027b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	@ 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e159      	b.n	8002aa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	429a      	cmp	r2, r3
 800280e:	f040 8148 	bne.w	8002aa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b01      	cmp	r3, #1
 800281c:	d005      	beq.n	800282a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002826:	2b02      	cmp	r3, #2
 8002828:	d130      	bne.n	800288c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	2203      	movs	r2, #3
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002860:	2201      	movs	r2, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 0201 	and.w	r2, r3, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b03      	cmp	r3, #3
 8002896:	d017      	beq.n	80028c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0303 	and.w	r3, r3, #3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d123      	bne.n	800291c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	08da      	lsrs	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3208      	adds	r2, #8
 80028dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	220f      	movs	r2, #15
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	08da      	lsrs	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3208      	adds	r2, #8
 8002916:	69b9      	ldr	r1, [r7, #24]
 8002918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 80a2 	beq.w	8002aa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	4b57      	ldr	r3, [pc, #348]	@ (8002ac0 <HAL_GPIO_Init+0x2e8>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	4a56      	ldr	r2, [pc, #344]	@ (8002ac0 <HAL_GPIO_Init+0x2e8>)
 8002968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800296c:	6453      	str	r3, [r2, #68]	@ 0x44
 800296e:	4b54      	ldr	r3, [pc, #336]	@ (8002ac0 <HAL_GPIO_Init+0x2e8>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800297a:	4a52      	ldr	r2, [pc, #328]	@ (8002ac4 <HAL_GPIO_Init+0x2ec>)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	3302      	adds	r3, #2
 8002982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	220f      	movs	r2, #15
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a49      	ldr	r2, [pc, #292]	@ (8002ac8 <HAL_GPIO_Init+0x2f0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d019      	beq.n	80029da <HAL_GPIO_Init+0x202>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a48      	ldr	r2, [pc, #288]	@ (8002acc <HAL_GPIO_Init+0x2f4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <HAL_GPIO_Init+0x1fe>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a47      	ldr	r2, [pc, #284]	@ (8002ad0 <HAL_GPIO_Init+0x2f8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00d      	beq.n	80029d2 <HAL_GPIO_Init+0x1fa>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a46      	ldr	r2, [pc, #280]	@ (8002ad4 <HAL_GPIO_Init+0x2fc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <HAL_GPIO_Init+0x1f6>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a45      	ldr	r2, [pc, #276]	@ (8002ad8 <HAL_GPIO_Init+0x300>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d101      	bne.n	80029ca <HAL_GPIO_Init+0x1f2>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e008      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029ce:	2303      	movs	r3, #3
 80029d0:	e004      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e002      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x204>
 80029da:	2300      	movs	r3, #0
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f002 0203 	and.w	r2, r2, #3
 80029e2:	0092      	lsls	r2, r2, #2
 80029e4:	4093      	lsls	r3, r2
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ec:	4935      	ldr	r1, [pc, #212]	@ (8002ac4 <HAL_GPIO_Init+0x2ec>)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	3302      	adds	r3, #2
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029fa:	4b38      	ldr	r3, [pc, #224]	@ (8002adc <HAL_GPIO_Init+0x304>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8002adc <HAL_GPIO_Init+0x304>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a24:	4b2d      	ldr	r3, [pc, #180]	@ (8002adc <HAL_GPIO_Init+0x304>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a48:	4a24      	ldr	r2, [pc, #144]	@ (8002adc <HAL_GPIO_Init+0x304>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a4e:	4b23      	ldr	r3, [pc, #140]	@ (8002adc <HAL_GPIO_Init+0x304>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a72:	4a1a      	ldr	r2, [pc, #104]	@ (8002adc <HAL_GPIO_Init+0x304>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a78:	4b18      	ldr	r3, [pc, #96]	@ (8002adc <HAL_GPIO_Init+0x304>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8002adc <HAL_GPIO_Init+0x304>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	2b0f      	cmp	r3, #15
 8002aac:	f67f aea2 	bls.w	80027f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	bf00      	nop
 8002ab4:	3724      	adds	r7, #36	@ 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40013800 	.word	0x40013800
 8002ac8:	40020000 	.word	0x40020000
 8002acc:	40020400 	.word	0x40020400
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020c00 	.word	0x40020c00
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40013c00 	.word	0x40013c00

08002ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
 8002afc:	e001      	b.n	8002b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b2c:	e003      	b.n	8002b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	041a      	lsls	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	619a      	str	r2, [r3, #24]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e12b      	b.n	8002dae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe fad0 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	@ 0x24
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f001 fbbc 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8002bac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4a81      	ldr	r2, [pc, #516]	@ (8002db8 <HAL_I2C_Init+0x274>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d807      	bhi.n	8002bc8 <HAL_I2C_Init+0x84>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a80      	ldr	r2, [pc, #512]	@ (8002dbc <HAL_I2C_Init+0x278>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	bf94      	ite	ls
 8002bc0:	2301      	movls	r3, #1
 8002bc2:	2300      	movhi	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e006      	b.n	8002bd6 <HAL_I2C_Init+0x92>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4a7d      	ldr	r2, [pc, #500]	@ (8002dc0 <HAL_I2C_Init+0x27c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	bf94      	ite	ls
 8002bd0:	2301      	movls	r3, #1
 8002bd2:	2300      	movhi	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0e7      	b.n	8002dae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4a78      	ldr	r2, [pc, #480]	@ (8002dc4 <HAL_I2C_Init+0x280>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0c9b      	lsrs	r3, r3, #18
 8002be8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	4a6a      	ldr	r2, [pc, #424]	@ (8002db8 <HAL_I2C_Init+0x274>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d802      	bhi.n	8002c18 <HAL_I2C_Init+0xd4>
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3301      	adds	r3, #1
 8002c16:	e009      	b.n	8002c2c <HAL_I2C_Init+0xe8>
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c1e:	fb02 f303 	mul.w	r3, r2, r3
 8002c22:	4a69      	ldr	r2, [pc, #420]	@ (8002dc8 <HAL_I2C_Init+0x284>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	099b      	lsrs	r3, r3, #6
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	495c      	ldr	r1, [pc, #368]	@ (8002db8 <HAL_I2C_Init+0x274>)
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	d819      	bhi.n	8002c80 <HAL_I2C_Init+0x13c>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e59      	subs	r1, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c60:	400b      	ands	r3, r1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_I2C_Init+0x138>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1e59      	subs	r1, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c74:	3301      	adds	r3, #1
 8002c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7a:	e051      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	e04f      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d111      	bne.n	8002cac <HAL_I2C_Init+0x168>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	440b      	add	r3, r1
 8002c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e012      	b.n	8002cd2 <HAL_I2C_Init+0x18e>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e58      	subs	r0, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	0099      	lsls	r1, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Init+0x196>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e022      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10e      	bne.n	8002d00 <HAL_I2C_Init+0x1bc>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1e58      	subs	r0, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	460b      	mov	r3, r1
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	440b      	add	r3, r1
 8002cf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cfe:	e00f      	b.n	8002d20 <HAL_I2C_Init+0x1dc>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e58      	subs	r0, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	6809      	ldr	r1, [r1, #0]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69da      	ldr	r2, [r3, #28]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6911      	ldr	r1, [r2, #16]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	68d2      	ldr	r2, [r2, #12]
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	430b      	orrs	r3, r1
 8002d62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	000186a0 	.word	0x000186a0
 8002dbc:	001e847f 	.word	0x001e847f
 8002dc0:	003d08ff 	.word	0x003d08ff
 8002dc4:	431bde83 	.word	0x431bde83
 8002dc8:	10624dd3 	.word	0x10624dd3

08002dcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	4608      	mov	r0, r1
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	817b      	strh	r3, [r7, #10]
 8002dde:	460b      	mov	r3, r1
 8002de0:	813b      	strh	r3, [r7, #8]
 8002de2:	4613      	mov	r3, r2
 8002de4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002de6:	f7ff fb23 	bl	8002430 <HAL_GetTick>
 8002dea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	f040 80d9 	bne.w	8002fac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2319      	movs	r3, #25
 8002e00:	2201      	movs	r2, #1
 8002e02:	496d      	ldr	r1, [pc, #436]	@ (8002fb8 <HAL_I2C_Mem_Write+0x1ec>)
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fc7f 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
 8002e12:	e0cc      	b.n	8002fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2C_Mem_Write+0x56>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0c5      	b.n	8002fae <HAL_I2C_Mem_Write+0x1e2>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d007      	beq.n	8002e48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2221      	movs	r2, #33	@ 0x21
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2240      	movs	r2, #64	@ 0x40
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a4d      	ldr	r2, [pc, #308]	@ (8002fbc <HAL_I2C_Mem_Write+0x1f0>)
 8002e88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e8a:	88f8      	ldrh	r0, [r7, #6]
 8002e8c:	893a      	ldrh	r2, [r7, #8]
 8002e8e:	8979      	ldrh	r1, [r7, #10]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	4603      	mov	r3, r0
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fab6 	bl	800340c <I2C_RequestMemoryWrite>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d052      	beq.n	8002f4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e081      	b.n	8002fae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fd00 	bl	80038b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d107      	bne.n	8002ed2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e06b      	b.n	8002fae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11b      	bne.n	8002f4c <HAL_I2C_Mem_Write+0x180>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1aa      	bne.n	8002eaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fcec 	bl	8003936 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d107      	bne.n	8002f7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e016      	b.n	8002fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	00100002 	.word	0x00100002
 8002fbc:	ffff0000 	.word	0xffff0000

08002fc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08c      	sub	sp, #48	@ 0x30
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	4608      	mov	r0, r1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4603      	mov	r3, r0
 8002fd0:	817b      	strh	r3, [r7, #10]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	813b      	strh	r3, [r7, #8]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fda:	f7ff fa29 	bl	8002430 <HAL_GetTick>
 8002fde:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	f040 8208 	bne.w	80033fe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2319      	movs	r3, #25
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	497b      	ldr	r1, [pc, #492]	@ (80031e4 <HAL_I2C_Mem_Read+0x224>)
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fb85 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
 8003006:	e1fb      	b.n	8003400 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_I2C_Mem_Read+0x56>
 8003012:	2302      	movs	r3, #2
 8003014:	e1f4      	b.n	8003400 <HAL_I2C_Mem_Read+0x440>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d007      	beq.n	800303c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800304a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2222      	movs	r2, #34	@ 0x22
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2240      	movs	r2, #64	@ 0x40
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800306c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a5b      	ldr	r2, [pc, #364]	@ (80031e8 <HAL_I2C_Mem_Read+0x228>)
 800307c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800307e:	88f8      	ldrh	r0, [r7, #6]
 8003080:	893a      	ldrh	r2, [r7, #8]
 8003082:	8979      	ldrh	r1, [r7, #10]
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	4603      	mov	r3, r0
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fa52 	bl	8003538 <I2C_RequestMemoryRead>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e1b0      	b.n	8003400 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d113      	bne.n	80030ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	623b      	str	r3, [r7, #32]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	e184      	b.n	80033d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d11b      	bne.n	800310e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	61fb      	str	r3, [r7, #28]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e164      	b.n	80033d8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003112:	2b02      	cmp	r3, #2
 8003114:	d11b      	bne.n	800314e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003124:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	61bb      	str	r3, [r7, #24]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	e144      	b.n	80033d8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003164:	e138      	b.n	80033d8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316a:	2b03      	cmp	r3, #3
 800316c:	f200 80f1 	bhi.w	8003352 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003174:	2b01      	cmp	r3, #1
 8003176:	d123      	bne.n	80031c0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fc1b 	bl	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e139      	b.n	8003400 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031be:	e10b      	b.n	80033d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d14e      	bne.n	8003266 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ce:	2200      	movs	r2, #0
 80031d0:	4906      	ldr	r1, [pc, #24]	@ (80031ec <HAL_I2C_Mem_Read+0x22c>)
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fa98 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e10e      	b.n	8003400 <HAL_I2C_Mem_Read+0x440>
 80031e2:	bf00      	nop
 80031e4:	00100002 	.word	0x00100002
 80031e8:	ffff0000 	.word	0xffff0000
 80031ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003264:	e0b8      	b.n	80033d8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326c:	2200      	movs	r2, #0
 800326e:	4966      	ldr	r1, [pc, #408]	@ (8003408 <HAL_I2C_Mem_Read+0x448>)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fa49 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0bf      	b.n	8003400 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800328e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c8:	2200      	movs	r2, #0
 80032ca:	494f      	ldr	r1, [pc, #316]	@ (8003408 <HAL_I2C_Mem_Read+0x448>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 fa1b 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e091      	b.n	8003400 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003350:	e042      	b.n	80033d8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003354:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fb2e 	bl	80039b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e04c      	b.n	8003400 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d118      	bne.n	80033d8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f47f aec2 	bne.w	8003166 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3728      	adds	r7, #40	@ 0x28
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	00010004 	.word	0x00010004

0800340c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	4608      	mov	r0, r1
 8003416:	4611      	mov	r1, r2
 8003418:	461a      	mov	r2, r3
 800341a:	4603      	mov	r3, r0
 800341c:	817b      	strh	r3, [r7, #10]
 800341e:	460b      	mov	r3, r1
 8003420:	813b      	strh	r3, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003434:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	2200      	movs	r2, #0
 800343e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f960 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800345c:	d103      	bne.n	8003466 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003464:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e05f      	b.n	800352a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003478:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	492d      	ldr	r1, [pc, #180]	@ (8003534 <I2C_RequestMemoryWrite+0x128>)
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f998 	bl	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e04c      	b.n	800352a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a8:	6a39      	ldr	r1, [r7, #32]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa02 	bl	80038b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00d      	beq.n	80034d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d107      	bne.n	80034ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e02b      	b.n	800352a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034d8:	893b      	ldrh	r3, [r7, #8]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	611a      	str	r2, [r3, #16]
 80034e2:	e021      	b.n	8003528 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034e4:	893b      	ldrh	r3, [r7, #8]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f4:	6a39      	ldr	r1, [r7, #32]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f9dc 	bl	80038b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	2b04      	cmp	r3, #4
 8003508:	d107      	bne.n	800351a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003518:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e005      	b.n	800352a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800351e:	893b      	ldrh	r3, [r7, #8]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	00010002 	.word	0x00010002

08003538 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4603      	mov	r3, r0
 8003548:	817b      	strh	r3, [r7, #10]
 800354a:	460b      	mov	r3, r1
 800354c:	813b      	strh	r3, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003560:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003570:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	2200      	movs	r2, #0
 800357a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f8c2 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003598:	d103      	bne.n	80035a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0aa      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	4952      	ldr	r1, [pc, #328]	@ (8003704 <I2C_RequestMemoryRead+0x1cc>)
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f8fa 	bl	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e097      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e4:	6a39      	ldr	r1, [r7, #32]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f964 	bl	80038b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d107      	bne.n	800360a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003608:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e076      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003614:	893b      	ldrh	r3, [r7, #8]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]
 800361e:	e021      	b.n	8003664 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003620:	893b      	ldrh	r3, [r7, #8]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	b29b      	uxth	r3, r3
 8003626:	b2da      	uxtb	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f93e 	bl	80038b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d107      	bne.n	8003656 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003654:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e050      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800365a:	893b      	ldrh	r3, [r7, #8]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003666:	6a39      	ldr	r1, [r7, #32]
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f923 	bl	80038b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	2b04      	cmp	r3, #4
 800367a:	d107      	bne.n	800368c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e035      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800369e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f82b 	bl	8003708 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00d      	beq.n	80036d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c6:	d103      	bne.n	80036d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e013      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036d4:	897b      	ldrh	r3, [r7, #10]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	6a3a      	ldr	r2, [r7, #32]
 80036e8:	4906      	ldr	r1, [pc, #24]	@ (8003704 <I2C_RequestMemoryRead+0x1cc>)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f863 	bl	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	00010002 	.word	0x00010002

08003708 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	4613      	mov	r3, r2
 8003716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003718:	e025      	b.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d021      	beq.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003722:	f7fe fe85 	bl	8002430 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d116      	bne.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e023      	b.n	80037ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d10d      	bne.n	800378c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	e00c      	b.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	43da      	mvns	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4013      	ands	r3, r2
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	461a      	mov	r2, r3
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d0b6      	beq.n	800371a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c4:	e051      	b.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d4:	d123      	bne.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f043 0204 	orr.w	r2, r3, #4
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e046      	b.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d021      	beq.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003826:	f7fe fe03 	bl	8002430 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d116      	bne.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e020      	b.n	80038ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d10c      	bne.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4013      	ands	r3, r2
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	e00b      	b.n	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	43da      	mvns	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	4013      	ands	r3, r2
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf14      	ite	ne
 80038a0:	2301      	movne	r3, #1
 80038a2:	2300      	moveq	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d18d      	bne.n	80037c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038c0:	e02d      	b.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f8ce 	bl	8003a64 <I2C_IsAcknowledgeFailed>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e02d      	b.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d021      	beq.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038da:	f7fe fda9 	bl	8002430 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d302      	bcc.n	80038f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d116      	bne.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e007      	b.n	800392e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003928:	2b80      	cmp	r3, #128	@ 0x80
 800392a:	d1ca      	bne.n	80038c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003942:	e02d      	b.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f88d 	bl	8003a64 <I2C_IsAcknowledgeFailed>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e02d      	b.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395a:	d021      	beq.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395c:	f7fe fd68 	bl	8002430 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	429a      	cmp	r2, r3
 800396a:	d302      	bcc.n	8003972 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d116      	bne.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e007      	b.n	80039b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d1ca      	bne.n	8003944 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039c4:	e042      	b.n	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b10      	cmp	r3, #16
 80039d2:	d119      	bne.n	8003a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0210 	mvn.w	r2, #16
 80039dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e029      	b.n	8003a5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a08:	f7fe fd12 	bl	8002430 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d302      	bcc.n	8003a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d116      	bne.n	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f043 0220 	orr.w	r2, r3, #32
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e007      	b.n	8003a5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a56:	2b40      	cmp	r3, #64	@ 0x40
 8003a58:	d1b5      	bne.n	80039c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a7a:	d11b      	bne.n	8003ab4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa0:	f043 0204 	orr.w	r2, r3, #4
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e267      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d075      	beq.n	8003bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae2:	4b88      	ldr	r3, [pc, #544]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d00c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aee:	4b85      	ldr	r3, [pc, #532]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d112      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afa:	4b82      	ldr	r3, [pc, #520]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b06:	d10b      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b08:	4b7e      	ldr	r3, [pc, #504]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d05b      	beq.n	8003bcc <HAL_RCC_OscConfig+0x108>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d157      	bne.n	8003bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e242      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x74>
 8003b2a:	4b76      	ldr	r3, [pc, #472]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a75      	ldr	r2, [pc, #468]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e01d      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x98>
 8003b42:	4b70      	ldr	r3, [pc, #448]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6f      	ldr	r2, [pc, #444]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6c      	ldr	r2, [pc, #432]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00b      	b.n	8003b74 <HAL_RCC_OscConfig+0xb0>
 8003b5c:	4b69      	ldr	r3, [pc, #420]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a68      	ldr	r2, [pc, #416]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4b66      	ldr	r3, [pc, #408]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a65      	ldr	r2, [pc, #404]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fc58 	bl	8002430 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fe fc54 	bl	8002430 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	@ 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e207      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	4b5b      	ldr	r3, [pc, #364]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0xc0>
 8003ba2:	e014      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fc44 	bl	8002430 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fe fc40 	bl	8002430 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	@ 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1f3      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	4b51      	ldr	r3, [pc, #324]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0xe8>
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d063      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bda:	4b4a      	ldr	r3, [pc, #296]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be6:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf2:	4b44      	ldr	r3, [pc, #272]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d116      	bne.n	8003c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	4b41      	ldr	r3, [pc, #260]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e1c7      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	4b3b      	ldr	r3, [pc, #236]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4937      	ldr	r1, [pc, #220]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	e03a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c34:	4b34      	ldr	r3, [pc, #208]	@ (8003d08 <HAL_RCC_OscConfig+0x244>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3a:	f7fe fbf9 	bl	8002430 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c42:	f7fe fbf5 	bl	8002430 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e1a8      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	4b2b      	ldr	r3, [pc, #172]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0f0      	beq.n	8003c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b28      	ldr	r3, [pc, #160]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4925      	ldr	r1, [pc, #148]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c76:	4b24      	ldr	r3, [pc, #144]	@ (8003d08 <HAL_RCC_OscConfig+0x244>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe fbd8 	bl	8002430 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c84:	f7fe fbd4 	bl	8002430 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e187      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	4b1b      	ldr	r3, [pc, #108]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d036      	beq.n	8003d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb6:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <HAL_RCC_OscConfig+0x248>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fe fbb8 	bl	8002430 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fe fbb4 	bl	8002430 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e167      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <HAL_RCC_OscConfig+0x240>)
 8003cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x200>
 8003ce2:	e01b      	b.n	8003d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce4:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <HAL_RCC_OscConfig+0x248>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fe fba1 	bl	8002430 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	e00e      	b.n	8003d10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf2:	f7fe fb9d 	bl	8002430 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d907      	bls.n	8003d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e150      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
 8003d04:	40023800 	.word	0x40023800
 8003d08:	42470000 	.word	0x42470000
 8003d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	4b88      	ldr	r3, [pc, #544]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ea      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8097 	beq.w	8003e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2e:	4b81      	ldr	r3, [pc, #516]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d42:	4a7c      	ldr	r2, [pc, #496]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b77      	ldr	r3, [pc, #476]	@ (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d118      	bne.n	8003d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d66:	4b74      	ldr	r3, [pc, #464]	@ (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a73      	ldr	r2, [pc, #460]	@ (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d72:	f7fe fb5d 	bl	8002430 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fe fb59 	bl	8002430 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e10c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f38 <HAL_RCC_OscConfig+0x474>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x2ea>
 8003da0:	4b64      	ldr	r3, [pc, #400]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da4:	4a63      	ldr	r2, [pc, #396]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x324>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x30c>
 8003db6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	4a5e      	ldr	r2, [pc, #376]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0x324>
 8003dd0:	4b58      	ldr	r3, [pc, #352]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd4:	4a57      	ldr	r2, [pc, #348]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ddc:	4b55      	ldr	r3, [pc, #340]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de0:	4a54      	ldr	r2, [pc, #336]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f023 0304 	bic.w	r3, r3, #4
 8003de6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fe fb1e 	bl	8002430 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fe fb1a 	bl	8002430 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0cb      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0e:	4b49      	ldr	r3, [pc, #292]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ee      	beq.n	8003df8 <HAL_RCC_OscConfig+0x334>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1c:	f7fe fb08 	bl	8002430 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	f7fe fb04 	bl	8002430 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0b5      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1ee      	bne.n	8003e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b39      	ldr	r3, [pc, #228]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	4a38      	ldr	r2, [pc, #224]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80a1 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e62:	4b34      	ldr	r3, [pc, #208]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d05c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d141      	bne.n	8003efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e76:	4b31      	ldr	r3, [pc, #196]	@ (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fad8 	bl	8002430 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fe fad4 	bl	8002430 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e087      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	4b27      	ldr	r3, [pc, #156]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	019b      	lsls	r3, r3, #6
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	085b      	lsrs	r3, r3, #1
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	041b      	lsls	r3, r3, #16
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	061b      	lsls	r3, r3, #24
 8003ec6:	491b      	ldr	r1, [pc, #108]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fe faad 	bl	8002430 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fe faa9 	bl	8002430 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e05c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eec:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x416>
 8003ef8:	e054      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <HAL_RCC_OscConfig+0x478>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f00:	f7fe fa96 	bl	8002430 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f08:	f7fe fa92 	bl	8002430 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e045      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x444>
 8003f26:	e03d      	b.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e038      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40007000 	.word	0x40007000
 8003f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f40:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <HAL_RCC_OscConfig+0x4ec>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d028      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d121      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d11a      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023800 	.word	0x40023800

08003fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0cc      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc8:	4b68      	ldr	r3, [pc, #416]	@ (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d90c      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd6:	4b65      	ldr	r3, [pc, #404]	@ (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b63      	ldr	r3, [pc, #396]	@ (800416c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0b8      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d020      	beq.n	800403e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004008:	4b59      	ldr	r3, [pc, #356]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	4a58      	ldr	r2, [pc, #352]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004020:	4b53      	ldr	r3, [pc, #332]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	4a52      	ldr	r2, [pc, #328]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800402a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402c:	4b50      	ldr	r3, [pc, #320]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	494d      	ldr	r1, [pc, #308]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d044      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b47      	ldr	r3, [pc, #284]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d119      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d003      	beq.n	8004072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	2b03      	cmp	r3, #3
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004072:	4b3f      	ldr	r3, [pc, #252]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e06f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004082:	4b3b      	ldr	r3, [pc, #236]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e067      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004092:	4b37      	ldr	r3, [pc, #220]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f023 0203 	bic.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4934      	ldr	r1, [pc, #208]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a4:	f7fe f9c4 	bl	8002430 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040aa:	e00a      	b.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ac:	f7fe f9c0 	bl	8002430 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e04f      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 020c 	and.w	r2, r3, #12
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d1eb      	bne.n	80040ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d4:	4b25      	ldr	r3, [pc, #148]	@ (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d20c      	bcs.n	80040fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b22      	ldr	r3, [pc, #136]	@ (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b20      	ldr	r3, [pc, #128]	@ (800416c <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e032      	b.n	8004162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004108:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4916      	ldr	r1, [pc, #88]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004126:	4b12      	ldr	r3, [pc, #72]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	490e      	ldr	r1, [pc, #56]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413a:	f000 f821 	bl	8004180 <HAL_RCC_GetSysClockFreq>
 800413e:	4602      	mov	r2, r0
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	490a      	ldr	r1, [pc, #40]	@ (8004174 <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	5ccb      	ldrb	r3, [r1, r3]
 800414e:	fa22 f303 	lsr.w	r3, r2, r3
 8004152:	4a09      	ldr	r2, [pc, #36]	@ (8004178 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004156:	4b09      	ldr	r3, [pc, #36]	@ (800417c <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe f924 	bl	80023a8 <HAL_InitTick>

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023c00 	.word	0x40023c00
 8004170:	40023800 	.word	0x40023800
 8004174:	0800ad08 	.word	0x0800ad08
 8004178:	20000090 	.word	0x20000090
 800417c:	20000094 	.word	0x20000094

08004180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b090      	sub	sp, #64	@ 0x40
 8004186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	637b      	str	r3, [r7, #52]	@ 0x34
 800418c:	2300      	movs	r3, #0
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004190:	2300      	movs	r3, #0
 8004192:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004198:	4b59      	ldr	r3, [pc, #356]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d00d      	beq.n	80041c0 <HAL_RCC_GetSysClockFreq+0x40>
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	f200 80a1 	bhi.w	80042ec <HAL_RCC_GetSysClockFreq+0x16c>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x34>
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_GetSysClockFreq+0x3a>
 80041b2:	e09b      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b4:	4b53      	ldr	r3, [pc, #332]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x184>)
 80041b6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80041b8:	e09b      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ba:	4b53      	ldr	r3, [pc, #332]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x188>)
 80041bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041be:	e098      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d028      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	099b      	lsrs	r3, r3, #6
 80041dc:	2200      	movs	r2, #0
 80041de:	623b      	str	r3, [r7, #32]
 80041e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041e8:	2100      	movs	r1, #0
 80041ea:	4b47      	ldr	r3, [pc, #284]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x188>)
 80041ec:	fb03 f201 	mul.w	r2, r3, r1
 80041f0:	2300      	movs	r3, #0
 80041f2:	fb00 f303 	mul.w	r3, r0, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	4a43      	ldr	r2, [pc, #268]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x188>)
 80041fa:	fba0 1202 	umull	r1, r2, r0, r2
 80041fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004200:	460a      	mov	r2, r1
 8004202:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004206:	4413      	add	r3, r2
 8004208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420c:	2200      	movs	r2, #0
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	61fa      	str	r2, [r7, #28]
 8004212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004216:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800421a:	f7fc fd3d 	bl	8000c98 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4613      	mov	r3, r2
 8004224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004226:	e053      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004228:	4b35      	ldr	r3, [pc, #212]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	2200      	movs	r2, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	617a      	str	r2, [r7, #20]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800423a:	f04f 0b00 	mov.w	fp, #0
 800423e:	4652      	mov	r2, sl
 8004240:	465b      	mov	r3, fp
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f04f 0100 	mov.w	r1, #0
 800424a:	0159      	lsls	r1, r3, #5
 800424c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004250:	0150      	lsls	r0, r2, #5
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	ebb2 080a 	subs.w	r8, r2, sl
 800425a:	eb63 090b 	sbc.w	r9, r3, fp
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800426a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800426e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004272:	ebb2 0408 	subs.w	r4, r2, r8
 8004276:	eb63 0509 	sbc.w	r5, r3, r9
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	00eb      	lsls	r3, r5, #3
 8004284:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004288:	00e2      	lsls	r2, r4, #3
 800428a:	4614      	mov	r4, r2
 800428c:	461d      	mov	r5, r3
 800428e:	eb14 030a 	adds.w	r3, r4, sl
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	eb45 030b 	adc.w	r3, r5, fp
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042a6:	4629      	mov	r1, r5
 80042a8:	028b      	lsls	r3, r1, #10
 80042aa:	4621      	mov	r1, r4
 80042ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b0:	4621      	mov	r1, r4
 80042b2:	028a      	lsls	r2, r1, #10
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ba:	2200      	movs	r2, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	60fa      	str	r2, [r7, #12]
 80042c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c4:	f7fc fce8 	bl	8000c98 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	0c1b      	lsrs	r3, r3, #16
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	3301      	adds	r3, #1
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80042e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042ea:	e002      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b05      	ldr	r3, [pc, #20]	@ (8004304 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3740      	adds	r7, #64	@ 0x40
 80042f8:	46bd      	mov	sp, r7
 80042fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	00f42400 	.word	0x00f42400
 8004308:	017d7840 	.word	0x017d7840

0800430c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004310:	4b03      	ldr	r3, [pc, #12]	@ (8004320 <HAL_RCC_GetHCLKFreq+0x14>)
 8004312:	681b      	ldr	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20000090 	.word	0x20000090

08004324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004328:	f7ff fff0 	bl	800430c <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0a9b      	lsrs	r3, r3, #10
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4903      	ldr	r1, [pc, #12]	@ (8004348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	0800ad18 	.word	0x0800ad18

0800434c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004350:	f7ff ffdc 	bl	800430c <HAL_RCC_GetHCLKFreq>
 8004354:	4602      	mov	r2, r0
 8004356:	4b05      	ldr	r3, [pc, #20]	@ (800436c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	0b5b      	lsrs	r3, r3, #13
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4903      	ldr	r1, [pc, #12]	@ (8004370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004362:	5ccb      	ldrb	r3, [r1, r3]
 8004364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	0800ad18 	.word	0x0800ad18

08004374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e041      	b.n	800440a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd fea6 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3304      	adds	r3, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	4610      	mov	r0, r2
 80043b4:	f000 fac0 	bl	8004938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e041      	b.n	80044a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f839 	bl	80044b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3304      	adds	r3, #4
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f000 fa71 	bl	8004938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_TIM_PWM_Start+0x24>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e022      	b.n	800452e <HAL_TIM_PWM_Start+0x6a>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d109      	bne.n	8004502 <HAL_TIM_PWM_Start+0x3e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e015      	b.n	800452e <HAL_TIM_PWM_Start+0x6a>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b08      	cmp	r3, #8
 8004506:	d109      	bne.n	800451c <HAL_TIM_PWM_Start+0x58>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	bf14      	ite	ne
 8004514:	2301      	movne	r3, #1
 8004516:	2300      	moveq	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	e008      	b.n	800452e <HAL_TIM_PWM_Start+0x6a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b01      	cmp	r3, #1
 8004526:	bf14      	ite	ne
 8004528:	2301      	movne	r3, #1
 800452a:	2300      	moveq	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e068      	b.n	8004608 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0x82>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004544:	e013      	b.n	800456e <HAL_TIM_PWM_Start+0xaa>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d104      	bne.n	8004556 <HAL_TIM_PWM_Start+0x92>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004554:	e00b      	b.n	800456e <HAL_TIM_PWM_Start+0xaa>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d104      	bne.n	8004566 <HAL_TIM_PWM_Start+0xa2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004564:	e003      	b.n	800456e <HAL_TIM_PWM_Start+0xaa>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	6839      	ldr	r1, [r7, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fc84 	bl	8004e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a23      	ldr	r2, [pc, #140]	@ (8004610 <HAL_TIM_PWM_Start+0x14c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d107      	bne.n	8004596 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1d      	ldr	r2, [pc, #116]	@ (8004610 <HAL_TIM_PWM_Start+0x14c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d018      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x10e>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a8:	d013      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x10e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a19      	ldr	r2, [pc, #100]	@ (8004614 <HAL_TIM_PWM_Start+0x150>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00e      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x10e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a17      	ldr	r2, [pc, #92]	@ (8004618 <HAL_TIM_PWM_Start+0x154>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d009      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x10e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a16      	ldr	r2, [pc, #88]	@ (800461c <HAL_TIM_PWM_Start+0x158>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d004      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x10e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a14      	ldr	r2, [pc, #80]	@ (8004620 <HAL_TIM_PWM_Start+0x15c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d111      	bne.n	80045f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	d010      	beq.n	8004606 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0201 	orr.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f4:	e007      	b.n	8004606 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40010000 	.word	0x40010000
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800
 800461c:	40000c00 	.word	0x40000c00
 8004620:	40014000 	.word	0x40014000

08004624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800463e:	2302      	movs	r3, #2
 8004640:	e0ae      	b.n	80047a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b0c      	cmp	r3, #12
 800464e:	f200 809f 	bhi.w	8004790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004652:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800468d 	.word	0x0800468d
 800465c:	08004791 	.word	0x08004791
 8004660:	08004791 	.word	0x08004791
 8004664:	08004791 	.word	0x08004791
 8004668:	080046cd 	.word	0x080046cd
 800466c:	08004791 	.word	0x08004791
 8004670:	08004791 	.word	0x08004791
 8004674:	08004791 	.word	0x08004791
 8004678:	0800470f 	.word	0x0800470f
 800467c:	08004791 	.word	0x08004791
 8004680:	08004791 	.word	0x08004791
 8004684:	08004791 	.word	0x08004791
 8004688:	0800474f 	.word	0x0800474f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f9d0 	bl	8004a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0208 	orr.w	r2, r2, #8
 80046a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0204 	bic.w	r2, r2, #4
 80046b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6999      	ldr	r1, [r3, #24]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	619a      	str	r2, [r3, #24]
      break;
 80046ca:	e064      	b.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68b9      	ldr	r1, [r7, #8]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fa16 	bl	8004b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6999      	ldr	r1, [r3, #24]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	619a      	str	r2, [r3, #24]
      break;
 800470c:	e043      	b.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fa61 	bl	8004bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0208 	orr.w	r2, r2, #8
 8004728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0204 	bic.w	r2, r2, #4
 8004738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	61da      	str	r2, [r3, #28]
      break;
 800474c:	e023      	b.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	4618      	mov	r0, r3
 8004756:	f000 faab 	bl	8004cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69d9      	ldr	r1, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	021a      	lsls	r2, r3, #8
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	61da      	str	r2, [r3, #28]
      break;
 800478e:	e002      	b.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	75fb      	strb	r3, [r7, #23]
      break;
 8004794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d101      	bne.n	80047c4 <HAL_TIM_ConfigClockSource+0x1c>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e0b4      	b.n	800492e <HAL_TIM_ConfigClockSource+0x186>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80047e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047fc:	d03e      	beq.n	800487c <HAL_TIM_ConfigClockSource+0xd4>
 80047fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004802:	f200 8087 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800480a:	f000 8086 	beq.w	800491a <HAL_TIM_ConfigClockSource+0x172>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004812:	d87f      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b70      	cmp	r3, #112	@ 0x70
 8004816:	d01a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0xa6>
 8004818:	2b70      	cmp	r3, #112	@ 0x70
 800481a:	d87b      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b60      	cmp	r3, #96	@ 0x60
 800481e:	d050      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004820:	2b60      	cmp	r3, #96	@ 0x60
 8004822:	d877      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b50      	cmp	r3, #80	@ 0x50
 8004826:	d03c      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004828:	2b50      	cmp	r3, #80	@ 0x50
 800482a:	d873      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b40      	cmp	r3, #64	@ 0x40
 800482e:	d058      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004830:	2b40      	cmp	r3, #64	@ 0x40
 8004832:	d86f      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004834:	2b30      	cmp	r3, #48	@ 0x30
 8004836:	d064      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x15a>
 8004838:	2b30      	cmp	r3, #48	@ 0x30
 800483a:	d86b      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 800483c:	2b20      	cmp	r3, #32
 800483e:	d060      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x15a>
 8004840:	2b20      	cmp	r3, #32
 8004842:	d867      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d05c      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x15a>
 8004848:	2b10      	cmp	r3, #16
 800484a:	d05a      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x15a>
 800484c:	e062      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6899      	ldr	r1, [r3, #8]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f000 faf1 	bl	8004e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	609a      	str	r2, [r3, #8]
      break;
 800487a:	e04f      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6899      	ldr	r1, [r3, #8]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f000 fada 	bl	8004e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800489e:	609a      	str	r2, [r3, #8]
      break;
 80048a0:	e03c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 fa4e 	bl	8004d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2150      	movs	r1, #80	@ 0x50
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 faa7 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 80048c0:	e02c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 fa6d 	bl	8004dae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2160      	movs	r1, #96	@ 0x60
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fa97 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 80048e0:	e01c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 fa2e 	bl	8004d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2140      	movs	r1, #64	@ 0x40
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fa87 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 8004900:	e00c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f000 fa7e 	bl	8004e0e <TIM_ITRx_SetConfig>
      break;
 8004912:	e003      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e000      	b.n	800491c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800491a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a34      	ldr	r2, [pc, #208]	@ (8004a1c <TIM_Base_SetConfig+0xe4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00f      	beq.n	8004970 <TIM_Base_SetConfig+0x38>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004956:	d00b      	beq.n	8004970 <TIM_Base_SetConfig+0x38>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a31      	ldr	r2, [pc, #196]	@ (8004a20 <TIM_Base_SetConfig+0xe8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0x38>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a30      	ldr	r2, [pc, #192]	@ (8004a24 <TIM_Base_SetConfig+0xec>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0x38>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a28 <TIM_Base_SetConfig+0xf0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d108      	bne.n	8004982 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a25      	ldr	r2, [pc, #148]	@ (8004a1c <TIM_Base_SetConfig+0xe4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d01b      	beq.n	80049c2 <TIM_Base_SetConfig+0x8a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004990:	d017      	beq.n	80049c2 <TIM_Base_SetConfig+0x8a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a22      	ldr	r2, [pc, #136]	@ (8004a20 <TIM_Base_SetConfig+0xe8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d013      	beq.n	80049c2 <TIM_Base_SetConfig+0x8a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a21      	ldr	r2, [pc, #132]	@ (8004a24 <TIM_Base_SetConfig+0xec>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00f      	beq.n	80049c2 <TIM_Base_SetConfig+0x8a>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a20      	ldr	r2, [pc, #128]	@ (8004a28 <TIM_Base_SetConfig+0xf0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00b      	beq.n	80049c2 <TIM_Base_SetConfig+0x8a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1f      	ldr	r2, [pc, #124]	@ (8004a2c <TIM_Base_SetConfig+0xf4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d007      	beq.n	80049c2 <TIM_Base_SetConfig+0x8a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1e      	ldr	r2, [pc, #120]	@ (8004a30 <TIM_Base_SetConfig+0xf8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d003      	beq.n	80049c2 <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a34 <TIM_Base_SetConfig+0xfc>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d108      	bne.n	80049d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a08      	ldr	r2, [pc, #32]	@ (8004a1c <TIM_Base_SetConfig+0xe4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d103      	bne.n	8004a08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	615a      	str	r2, [r3, #20]
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	40000c00 	.word	0x40000c00
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40014400 	.word	0x40014400
 8004a34:	40014800 	.word	0x40014800

08004a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f023 0201 	bic.w	r2, r3, #1
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0303 	bic.w	r3, r3, #3
 8004a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f023 0302 	bic.w	r3, r3, #2
 8004a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <TIM_OC1_SetConfig+0xc8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10c      	bne.n	8004aae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0308 	bic.w	r3, r3, #8
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 0304 	bic.w	r3, r3, #4
 8004aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a13      	ldr	r2, [pc, #76]	@ (8004b00 <TIM_OC1_SetConfig+0xc8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d111      	bne.n	8004ada <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	621a      	str	r2, [r3, #32]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	40010000 	.word	0x40010000

08004b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0210 	bic.w	r2, r3, #16
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f023 0320 	bic.w	r3, r3, #32
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd8 <TIM_OC2_SetConfig+0xd4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d10d      	bne.n	8004b80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a15      	ldr	r2, [pc, #84]	@ (8004bd8 <TIM_OC2_SetConfig+0xd4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d113      	bne.n	8004bb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000

08004bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <TIM_OC3_SetConfig+0xd0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d10d      	bne.n	8004c56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <TIM_OC3_SetConfig+0xd0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d113      	bne.n	8004c86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40010000 	.word	0x40010000

08004cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	031b      	lsls	r3, r3, #12
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a10      	ldr	r2, [pc, #64]	@ (8004d4c <TIM_OC4_SetConfig+0x9c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d109      	bne.n	8004d24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	019b      	lsls	r3, r3, #6
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	bf00      	nop
 8004d40:	371c      	adds	r7, #28
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	40010000 	.word	0x40010000

08004d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f023 030a 	bic.w	r3, r3, #10
 8004d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b087      	sub	sp, #28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0210 	bic.w	r2, r3, #16
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	031b      	lsls	r3, r3, #12
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	621a      	str	r2, [r3, #32]
}
 8004e02:	bf00      	nop
 8004e04:	371c      	adds	r7, #28
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f043 0307 	orr.w	r3, r3, #7
 8004e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	609a      	str	r2, [r3, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	021a      	lsls	r2, r3, #8
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	609a      	str	r2, [r3, #8]
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	2201      	movs	r2, #1
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1a      	ldr	r2, [r3, #32]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	401a      	ands	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a1a      	ldr	r2, [r3, #32]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
}
 8004ec2:	bf00      	nop
 8004ec4:	371c      	adds	r7, #28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e050      	b.n	8004f8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1c      	ldr	r2, [pc, #112]	@ (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f34:	d013      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a18      	ldr	r2, [pc, #96]	@ (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a16      	ldr	r2, [pc, #88]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a15      	ldr	r2, [pc, #84]	@ (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a13      	ldr	r2, [pc, #76]	@ (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10c      	bne.n	8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40014000 	.word	0x40014000

08004fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e03d      	b.n	8005044 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4313      	orrs	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e03f      	b.n	80050e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fd f8fa 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	@ 0x24
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fcdf 	bl	8005a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	4613      	mov	r3, r2
 80050f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b20      	cmp	r3, #32
 8005102:	d11d      	bne.n	8005140 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_UART_Receive_IT+0x26>
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e016      	b.n	8005142 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_UART_Receive_IT+0x38>
 800511e:	2302      	movs	r3, #2
 8005120:	e00f      	b.n	8005142 <HAL_UART_Receive_IT+0x58>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	461a      	mov	r2, r3
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fab6 	bl	80056a8 <UART_Start_Receive_IT>
 800513c:	4603      	mov	r3, r0
 800513e:	e000      	b.n	8005142 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b0ba      	sub	sp, #232	@ 0xe8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005172:	2300      	movs	r3, #0
 8005174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005178:	2300      	movs	r3, #0
 800517a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800518a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_UART_IRQHandler+0x66>
 800519e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fb99 	bl	80058e2 <UART_Receive_IT>
      return;
 80051b0:	e256      	b.n	8005660 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80de 	beq.w	8005378 <HAL_UART_IRQHandler+0x22c>
 80051bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80d1 	beq.w	8005378 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_IRQHandler+0xae>
 80051e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_UART_IRQHandler+0xd2>
 8005206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	f043 0202 	orr.w	r2, r3, #2
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <HAL_UART_IRQHandler+0xf6>
 800522a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	f043 0204 	orr.w	r2, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d011      	beq.n	8005272 <HAL_UART_IRQHandler+0x126>
 800524e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d105      	bne.n	8005266 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800525a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	f043 0208 	orr.w	r2, r3, #8
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 81ed 	beq.w	8005656 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_UART_IRQHandler+0x14e>
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fb24 	bl	80058e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b40      	cmp	r3, #64	@ 0x40
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d103      	bne.n	80052c6 <HAL_UART_IRQHandler+0x17a>
 80052be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d04f      	beq.n	8005366 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa2c 	bl	8005724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d6:	2b40      	cmp	r3, #64	@ 0x40
 80052d8:	d141      	bne.n	800535e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3314      	adds	r3, #20
 8005302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005306:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800530a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800531e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1d9      	bne.n	80052da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532a:	2b00      	cmp	r3, #0
 800532c:	d013      	beq.n	8005356 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005332:	4a7d      	ldr	r2, [pc, #500]	@ (8005528 <HAL_UART_IRQHandler+0x3dc>)
 8005334:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	4618      	mov	r0, r3
 800533c:	f7fd fa29 	bl	8002792 <HAL_DMA_Abort_IT>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800534a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005350:	4610      	mov	r0, r2
 8005352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	e00e      	b.n	8005374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f990 	bl	800567c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	e00a      	b.n	8005374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f98c 	bl	800567c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	e006      	b.n	8005374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f988 	bl	800567c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8005372:	e170      	b.n	8005656 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	bf00      	nop
    return;
 8005376:	e16e      	b.n	8005656 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 814a 	bne.w	8005616 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8143 	beq.w	8005616 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 813c 	beq.w	8005616 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053be:	2b40      	cmp	r3, #64	@ 0x40
 80053c0:	f040 80b4 	bne.w	800552c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 8140 	beq.w	800565a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053e2:	429a      	cmp	r2, r3
 80053e4:	f080 8139 	bcs.w	800565a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053fa:	f000 8088 	beq.w	800550e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800541c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800542a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800542e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005436:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1d9      	bne.n	80053fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3314      	adds	r3, #20
 8005450:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800545a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800545c:	f023 0301 	bic.w	r3, r3, #1
 8005460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3314      	adds	r3, #20
 800546a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800546e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005472:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005476:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e1      	bne.n	800544a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3314      	adds	r3, #20
 800548c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800549c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3314      	adds	r3, #20
 80054a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e3      	bne.n	8005486 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054de:	f023 0310 	bic.w	r3, r3, #16
 80054e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e3      	bne.n	80054cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005508:	4618      	mov	r0, r3
 800550a:	f7fd f8d2 	bl	80026b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005516:	b29b      	uxth	r3, r3
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	b29b      	uxth	r3, r3
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f8b6 	bl	8005690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005524:	e099      	b.n	800565a <HAL_UART_IRQHandler+0x50e>
 8005526:	bf00      	nop
 8005528:	080057eb 	.word	0x080057eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005534:	b29b      	uxth	r3, r3
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005540:	b29b      	uxth	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 808b 	beq.w	800565e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8086 	beq.w	800565e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005568:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	330c      	adds	r3, #12
 8005572:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005576:	647a      	str	r2, [r7, #68]	@ 0x44
 8005578:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800557c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e3      	bne.n	8005552 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3314      	adds	r3, #20
 8005590:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	623b      	str	r3, [r7, #32]
   return(result);
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3314      	adds	r3, #20
 80055aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80055b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e3      	bne.n	800558a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0310 	bic.w	r3, r3, #16
 80055e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055f4:	61fa      	str	r2, [r7, #28]
 80055f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	69b9      	ldr	r1, [r7, #24]
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	617b      	str	r3, [r7, #20]
   return(result);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e3      	bne.n	80055d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f83e 	bl	8005690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005614:	e023      	b.n	800565e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <HAL_UART_IRQHandler+0x4ea>
 8005622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f8ef 	bl	8005812 <UART_Transmit_IT>
    return;
 8005634:	e014      	b.n	8005660 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800563a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00e      	beq.n	8005660 <HAL_UART_IRQHandler+0x514>
 8005642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f92f 	bl	80058b2 <UART_EndTransmit_IT>
    return;
 8005654:	e004      	b.n	8005660 <HAL_UART_IRQHandler+0x514>
    return;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <HAL_UART_IRQHandler+0x514>
      return;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <HAL_UART_IRQHandler+0x514>
      return;
 800565e:	bf00      	nop
  }
}
 8005660:	37e8      	adds	r7, #232	@ 0xe8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop

08005668 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	88fa      	ldrh	r2, [r7, #6]
 80056c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2222      	movs	r2, #34	@ 0x22
 80056d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d007      	beq.n	80056f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0201 	orr.w	r2, r2, #1
 8005704:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0220 	orr.w	r2, r2, #32
 8005714:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b095      	sub	sp, #84	@ 0x54
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	330c      	adds	r3, #12
 8005732:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800573c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005742:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	330c      	adds	r3, #12
 800574a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800574c:	643a      	str	r2, [r7, #64]	@ 0x40
 800574e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005752:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800575a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e5      	bne.n	800572c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3314      	adds	r3, #20
 8005766:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f023 0301 	bic.w	r3, r3, #1
 8005776:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3314      	adds	r3, #20
 800577e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005780:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e5      	bne.n	8005760 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005798:	2b01      	cmp	r3, #1
 800579a:	d119      	bne.n	80057d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f023 0310 	bic.w	r3, r3, #16
 80057b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057bc:	61ba      	str	r2, [r7, #24]
 80057be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6979      	ldr	r1, [r7, #20]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	613b      	str	r3, [r7, #16]
   return(result);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e5      	bne.n	800579c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057de:	bf00      	nop
 80057e0:	3754      	adds	r7, #84	@ 0x54
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f7ff ff39 	bl	800567c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b21      	cmp	r3, #33	@ 0x21
 8005824:	d13e      	bne.n	80058a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582e:	d114      	bne.n	800585a <UART_Transmit_IT+0x48>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d110      	bne.n	800585a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800584c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	1c9a      	adds	r2, r3, #2
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]
 8005858:	e008      	b.n	800586c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	1c59      	adds	r1, r3, #1
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6211      	str	r1, [r2, #32]
 8005864:	781a      	ldrb	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b29b      	uxth	r3, r3
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	4619      	mov	r1, r3
 800587a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10f      	bne.n	80058a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800588e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800589e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	e000      	b.n	80058a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058a4:	2302      	movs	r3, #2
  }
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fec8 	bl	8005668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b08c      	sub	sp, #48	@ 0x30
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b22      	cmp	r3, #34	@ 0x22
 80058f4:	f040 80ab 	bne.w	8005a4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005900:	d117      	bne.n	8005932 <UART_Receive_IT+0x50>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d113      	bne.n	8005932 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005920:	b29a      	uxth	r2, r3
 8005922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	1c9a      	adds	r2, r3, #2
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005930:	e026      	b.n	8005980 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005936:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005944:	d007      	beq.n	8005956 <UART_Receive_IT+0x74>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <UART_Receive_IT+0x82>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	b2da      	uxtb	r2, r3
 800595e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	e008      	b.n	8005976 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005970:	b2da      	uxtb	r2, r3
 8005972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005974:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29b      	uxth	r3, r3
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4619      	mov	r1, r3
 800598e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005990:	2b00      	cmp	r3, #0
 8005992:	d15a      	bne.n	8005a4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0220 	bic.w	r2, r2, #32
 80059a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d135      	bne.n	8005a40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	330c      	adds	r3, #12
 80059e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f023 0310 	bic.w	r3, r3, #16
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059fa:	623a      	str	r2, [r7, #32]
 80059fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	69f9      	ldr	r1, [r7, #28]
 8005a00:	6a3a      	ldr	r2, [r7, #32]
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e5      	bne.n	80059da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d10a      	bne.n	8005a32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fe29 	bl	8005690 <HAL_UARTEx_RxEventCallback>
 8005a3e:	e002      	b.n	8005a46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fb fd31 	bl	80014a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e002      	b.n	8005a50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3730      	adds	r7, #48	@ 0x30
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a5c:	b0c0      	sub	sp, #256	@ 0x100
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a74:	68d9      	ldr	r1, [r3, #12]
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	ea40 0301 	orr.w	r3, r0, r1
 8005a80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ab0:	f021 010c 	bic.w	r1, r1, #12
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad2:	6999      	ldr	r1, [r3, #24]
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	ea40 0301 	orr.w	r3, r0, r1
 8005ade:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b8f      	ldr	r3, [pc, #572]	@ (8005d24 <UART_SetConfig+0x2cc>)
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d005      	beq.n	8005af8 <UART_SetConfig+0xa0>
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b8d      	ldr	r3, [pc, #564]	@ (8005d28 <UART_SetConfig+0x2d0>)
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d104      	bne.n	8005b02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005af8:	f7fe fc28 	bl	800434c <HAL_RCC_GetPCLK2Freq>
 8005afc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b00:	e003      	b.n	8005b0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b02:	f7fe fc0f 	bl	8004324 <HAL_RCC_GetPCLK1Freq>
 8005b06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0e:	69db      	ldr	r3, [r3, #28]
 8005b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b14:	f040 810c 	bne.w	8005d30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	1891      	adds	r1, r2, r2
 8005b30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b32:	415b      	adcs	r3, r3
 8005b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	eb12 0801 	adds.w	r8, r2, r1
 8005b40:	4629      	mov	r1, r5
 8005b42:	eb43 0901 	adc.w	r9, r3, r1
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b5a:	4690      	mov	r8, r2
 8005b5c:	4699      	mov	r9, r3
 8005b5e:	4623      	mov	r3, r4
 8005b60:	eb18 0303 	adds.w	r3, r8, r3
 8005b64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b68:	462b      	mov	r3, r5
 8005b6a:	eb49 0303 	adc.w	r3, r9, r3
 8005b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b86:	460b      	mov	r3, r1
 8005b88:	18db      	adds	r3, r3, r3
 8005b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	eb42 0303 	adc.w	r3, r2, r3
 8005b92:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b9c:	f7fb f87c 	bl	8000c98 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4b61      	ldr	r3, [pc, #388]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	011c      	lsls	r4, r3, #4
 8005bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bc0:	4642      	mov	r2, r8
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	1891      	adds	r1, r2, r2
 8005bc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bc8:	415b      	adcs	r3, r3
 8005bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	eb12 0a01 	adds.w	sl, r2, r1
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	eb43 0b01 	adc.w	fp, r3, r1
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005be8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf0:	4692      	mov	sl, r2
 8005bf2:	469b      	mov	fp, r3
 8005bf4:	4643      	mov	r3, r8
 8005bf6:	eb1a 0303 	adds.w	r3, sl, r3
 8005bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	eb4b 0303 	adc.w	r3, fp, r3
 8005c04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	18db      	adds	r3, r3, r3
 8005c20:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c22:	4613      	mov	r3, r2
 8005c24:	eb42 0303 	adc.w	r3, r2, r3
 8005c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c32:	f7fb f831 	bl	8000c98 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c42:	095b      	lsrs	r3, r3, #5
 8005c44:	2264      	movs	r2, #100	@ 0x64
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	1acb      	subs	r3, r1, r3
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c52:	4b36      	ldr	r3, [pc, #216]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005c54:	fba3 2302 	umull	r2, r3, r3, r2
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c60:	441c      	add	r4, r3
 8005c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	1891      	adds	r1, r2, r2
 8005c7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c7c:	415b      	adcs	r3, r3
 8005c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c84:	4641      	mov	r1, r8
 8005c86:	1851      	adds	r1, r2, r1
 8005c88:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	414b      	adcs	r3, r1
 8005c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c9c:	4659      	mov	r1, fp
 8005c9e:	00cb      	lsls	r3, r1, #3
 8005ca0:	4651      	mov	r1, sl
 8005ca2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ca6:	4651      	mov	r1, sl
 8005ca8:	00ca      	lsls	r2, r1, #3
 8005caa:	4610      	mov	r0, r2
 8005cac:	4619      	mov	r1, r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	189b      	adds	r3, r3, r2
 8005cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cb8:	464b      	mov	r3, r9
 8005cba:	460a      	mov	r2, r1
 8005cbc:	eb42 0303 	adc.w	r3, r2, r3
 8005cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005cd8:	460b      	mov	r3, r1
 8005cda:	18db      	adds	r3, r3, r3
 8005cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cde:	4613      	mov	r3, r2
 8005ce0:	eb42 0303 	adc.w	r3, r2, r3
 8005ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cee:	f7fa ffd3 	bl	8000c98 <__aeabi_uldivmod>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cfc:	095b      	lsrs	r3, r3, #5
 8005cfe:	2164      	movs	r1, #100	@ 0x64
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	3332      	adds	r3, #50	@ 0x32
 8005d0a:	4a08      	ldr	r2, [pc, #32]	@ (8005d2c <UART_SetConfig+0x2d4>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	095b      	lsrs	r3, r3, #5
 8005d12:	f003 0207 	and.w	r2, r3, #7
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4422      	add	r2, r4
 8005d1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d20:	e106      	b.n	8005f30 <UART_SetConfig+0x4d8>
 8005d22:	bf00      	nop
 8005d24:	40011000 	.word	0x40011000
 8005d28:	40011400 	.word	0x40011400
 8005d2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d34:	2200      	movs	r2, #0
 8005d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d42:	4642      	mov	r2, r8
 8005d44:	464b      	mov	r3, r9
 8005d46:	1891      	adds	r1, r2, r2
 8005d48:	6239      	str	r1, [r7, #32]
 8005d4a:	415b      	adcs	r3, r3
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d52:	4641      	mov	r1, r8
 8005d54:	1854      	adds	r4, r2, r1
 8005d56:	4649      	mov	r1, r9
 8005d58:	eb43 0501 	adc.w	r5, r3, r1
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	00eb      	lsls	r3, r5, #3
 8005d66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d6a:	00e2      	lsls	r2, r4, #3
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	461d      	mov	r5, r3
 8005d70:	4643      	mov	r3, r8
 8005d72:	18e3      	adds	r3, r4, r3
 8005d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d78:	464b      	mov	r3, r9
 8005d7a:	eb45 0303 	adc.w	r3, r5, r3
 8005d7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d9e:	4629      	mov	r1, r5
 8005da0:	008b      	lsls	r3, r1, #2
 8005da2:	4621      	mov	r1, r4
 8005da4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da8:	4621      	mov	r1, r4
 8005daa:	008a      	lsls	r2, r1, #2
 8005dac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005db0:	f7fa ff72 	bl	8000c98 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4b60      	ldr	r3, [pc, #384]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005dba:	fba3 2302 	umull	r2, r3, r3, r2
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	011c      	lsls	r4, r3, #4
 8005dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005dcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005dd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	1891      	adds	r1, r2, r2
 8005dda:	61b9      	str	r1, [r7, #24]
 8005ddc:	415b      	adcs	r3, r3
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005de4:	4641      	mov	r1, r8
 8005de6:	1851      	adds	r1, r2, r1
 8005de8:	6139      	str	r1, [r7, #16]
 8005dea:	4649      	mov	r1, r9
 8005dec:	414b      	adcs	r3, r1
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dfc:	4659      	mov	r1, fp
 8005dfe:	00cb      	lsls	r3, r1, #3
 8005e00:	4651      	mov	r1, sl
 8005e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e06:	4651      	mov	r1, sl
 8005e08:	00ca      	lsls	r2, r1, #3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	4642      	mov	r2, r8
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e18:	464b      	mov	r3, r9
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	eb42 0303 	adc.w	r3, r2, r3
 8005e20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e30:	f04f 0200 	mov.w	r2, #0
 8005e34:	f04f 0300 	mov.w	r3, #0
 8005e38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	008b      	lsls	r3, r1, #2
 8005e40:	4641      	mov	r1, r8
 8005e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e46:	4641      	mov	r1, r8
 8005e48:	008a      	lsls	r2, r1, #2
 8005e4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e4e:	f7fa ff23 	bl	8000c98 <__aeabi_uldivmod>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	4b38      	ldr	r3, [pc, #224]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005e5a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	2264      	movs	r2, #100	@ 0x64
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	1acb      	subs	r3, r1, r3
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	3332      	adds	r3, #50	@ 0x32
 8005e6c:	4a33      	ldr	r2, [pc, #204]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e78:	441c      	add	r4, r3
 8005e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e7e:	2200      	movs	r2, #0
 8005e80:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e82:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e88:	4642      	mov	r2, r8
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	1891      	adds	r1, r2, r2
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	415b      	adcs	r3, r3
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e98:	4641      	mov	r1, r8
 8005e9a:	1851      	adds	r1, r2, r1
 8005e9c:	6039      	str	r1, [r7, #0]
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	414b      	adcs	r3, r1
 8005ea2:	607b      	str	r3, [r7, #4]
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005eb0:	4659      	mov	r1, fp
 8005eb2:	00cb      	lsls	r3, r1, #3
 8005eb4:	4651      	mov	r1, sl
 8005eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eba:	4651      	mov	r1, sl
 8005ebc:	00ca      	lsls	r2, r1, #3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	189b      	adds	r3, r3, r2
 8005ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eca:	464b      	mov	r3, r9
 8005ecc:	460a      	mov	r2, r1
 8005ece:	eb42 0303 	adc.w	r3, r2, r3
 8005ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ede:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005eec:	4649      	mov	r1, r9
 8005eee:	008b      	lsls	r3, r1, #2
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef6:	4641      	mov	r1, r8
 8005ef8:	008a      	lsls	r2, r1, #2
 8005efa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005efe:	f7fa fecb 	bl	8000c98 <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005f08:	fba3 1302 	umull	r1, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	2164      	movs	r1, #100	@ 0x64
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	3332      	adds	r3, #50	@ 0x32
 8005f1a:	4a08      	ldr	r2, [pc, #32]	@ (8005f3c <UART_SetConfig+0x4e4>)
 8005f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f003 020f 	and.w	r2, r3, #15
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4422      	add	r2, r4
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f36:	46bd      	mov	sp, r7
 8005f38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f3c:	51eb851f 	.word	0x51eb851f

08005f40 <__cvt>:
 8005f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	ec57 6b10 	vmov	r6, r7, d0
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	463b      	mov	r3, r7
 8005f50:	bfbb      	ittet	lt
 8005f52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f56:	461f      	movlt	r7, r3
 8005f58:	2300      	movge	r3, #0
 8005f5a:	232d      	movlt	r3, #45	@ 0x2d
 8005f5c:	700b      	strb	r3, [r1, #0]
 8005f5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f64:	4691      	mov	r9, r2
 8005f66:	f023 0820 	bic.w	r8, r3, #32
 8005f6a:	bfbc      	itt	lt
 8005f6c:	4632      	movlt	r2, r6
 8005f6e:	4616      	movlt	r6, r2
 8005f70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f74:	d005      	beq.n	8005f82 <__cvt+0x42>
 8005f76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f7a:	d100      	bne.n	8005f7e <__cvt+0x3e>
 8005f7c:	3401      	adds	r4, #1
 8005f7e:	2102      	movs	r1, #2
 8005f80:	e000      	b.n	8005f84 <__cvt+0x44>
 8005f82:	2103      	movs	r1, #3
 8005f84:	ab03      	add	r3, sp, #12
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	ab02      	add	r3, sp, #8
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	ec47 6b10 	vmov	d0, r6, r7
 8005f90:	4653      	mov	r3, sl
 8005f92:	4622      	mov	r2, r4
 8005f94:	f001 f874 	bl	8007080 <_dtoa_r>
 8005f98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	d119      	bne.n	8005fd4 <__cvt+0x94>
 8005fa0:	f019 0f01 	tst.w	r9, #1
 8005fa4:	d00e      	beq.n	8005fc4 <__cvt+0x84>
 8005fa6:	eb00 0904 	add.w	r9, r0, r4
 8005faa:	2200      	movs	r2, #0
 8005fac:	2300      	movs	r3, #0
 8005fae:	4630      	mov	r0, r6
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	f7fa fd91 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fb6:	b108      	cbz	r0, 8005fbc <__cvt+0x7c>
 8005fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fbc:	2230      	movs	r2, #48	@ 0x30
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	454b      	cmp	r3, r9
 8005fc2:	d31e      	bcc.n	8006002 <__cvt+0xc2>
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fc8:	1b5b      	subs	r3, r3, r5
 8005fca:	4628      	mov	r0, r5
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	b004      	add	sp, #16
 8005fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fd8:	eb00 0904 	add.w	r9, r0, r4
 8005fdc:	d1e5      	bne.n	8005faa <__cvt+0x6a>
 8005fde:	7803      	ldrb	r3, [r0, #0]
 8005fe0:	2b30      	cmp	r3, #48	@ 0x30
 8005fe2:	d10a      	bne.n	8005ffa <__cvt+0xba>
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	4630      	mov	r0, r6
 8005fea:	4639      	mov	r1, r7
 8005fec:	f7fa fd74 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ff0:	b918      	cbnz	r0, 8005ffa <__cvt+0xba>
 8005ff2:	f1c4 0401 	rsb	r4, r4, #1
 8005ff6:	f8ca 4000 	str.w	r4, [sl]
 8005ffa:	f8da 3000 	ldr.w	r3, [sl]
 8005ffe:	4499      	add	r9, r3
 8006000:	e7d3      	b.n	8005faa <__cvt+0x6a>
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	9103      	str	r1, [sp, #12]
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e7d9      	b.n	8005fbe <__cvt+0x7e>

0800600a <__exponent>:
 800600a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800600c:	2900      	cmp	r1, #0
 800600e:	bfba      	itte	lt
 8006010:	4249      	neglt	r1, r1
 8006012:	232d      	movlt	r3, #45	@ 0x2d
 8006014:	232b      	movge	r3, #43	@ 0x2b
 8006016:	2909      	cmp	r1, #9
 8006018:	7002      	strb	r2, [r0, #0]
 800601a:	7043      	strb	r3, [r0, #1]
 800601c:	dd29      	ble.n	8006072 <__exponent+0x68>
 800601e:	f10d 0307 	add.w	r3, sp, #7
 8006022:	461d      	mov	r5, r3
 8006024:	270a      	movs	r7, #10
 8006026:	461a      	mov	r2, r3
 8006028:	fbb1 f6f7 	udiv	r6, r1, r7
 800602c:	fb07 1416 	mls	r4, r7, r6, r1
 8006030:	3430      	adds	r4, #48	@ 0x30
 8006032:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006036:	460c      	mov	r4, r1
 8006038:	2c63      	cmp	r4, #99	@ 0x63
 800603a:	f103 33ff 	add.w	r3, r3, #4294967295
 800603e:	4631      	mov	r1, r6
 8006040:	dcf1      	bgt.n	8006026 <__exponent+0x1c>
 8006042:	3130      	adds	r1, #48	@ 0x30
 8006044:	1e94      	subs	r4, r2, #2
 8006046:	f803 1c01 	strb.w	r1, [r3, #-1]
 800604a:	1c41      	adds	r1, r0, #1
 800604c:	4623      	mov	r3, r4
 800604e:	42ab      	cmp	r3, r5
 8006050:	d30a      	bcc.n	8006068 <__exponent+0x5e>
 8006052:	f10d 0309 	add.w	r3, sp, #9
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	42ac      	cmp	r4, r5
 800605a:	bf88      	it	hi
 800605c:	2300      	movhi	r3, #0
 800605e:	3302      	adds	r3, #2
 8006060:	4403      	add	r3, r0
 8006062:	1a18      	subs	r0, r3, r0
 8006064:	b003      	add	sp, #12
 8006066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006068:	f813 6b01 	ldrb.w	r6, [r3], #1
 800606c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006070:	e7ed      	b.n	800604e <__exponent+0x44>
 8006072:	2330      	movs	r3, #48	@ 0x30
 8006074:	3130      	adds	r1, #48	@ 0x30
 8006076:	7083      	strb	r3, [r0, #2]
 8006078:	70c1      	strb	r1, [r0, #3]
 800607a:	1d03      	adds	r3, r0, #4
 800607c:	e7f1      	b.n	8006062 <__exponent+0x58>
	...

08006080 <_printf_float>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	b08d      	sub	sp, #52	@ 0x34
 8006086:	460c      	mov	r4, r1
 8006088:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800608c:	4616      	mov	r6, r2
 800608e:	461f      	mov	r7, r3
 8006090:	4605      	mov	r5, r0
 8006092:	f000 feef 	bl	8006e74 <_localeconv_r>
 8006096:	6803      	ldr	r3, [r0, #0]
 8006098:	9304      	str	r3, [sp, #16]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fa f8f0 	bl	8000280 <strlen>
 80060a0:	2300      	movs	r3, #0
 80060a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060a4:	f8d8 3000 	ldr.w	r3, [r8]
 80060a8:	9005      	str	r0, [sp, #20]
 80060aa:	3307      	adds	r3, #7
 80060ac:	f023 0307 	bic.w	r3, r3, #7
 80060b0:	f103 0208 	add.w	r2, r3, #8
 80060b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060b8:	f8d4 b000 	ldr.w	fp, [r4]
 80060bc:	f8c8 2000 	str.w	r2, [r8]
 80060c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060c8:	9307      	str	r3, [sp, #28]
 80060ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80060ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060d6:	4b9c      	ldr	r3, [pc, #624]	@ (8006348 <_printf_float+0x2c8>)
 80060d8:	f04f 32ff 	mov.w	r2, #4294967295
 80060dc:	f7fa fd2e 	bl	8000b3c <__aeabi_dcmpun>
 80060e0:	bb70      	cbnz	r0, 8006140 <_printf_float+0xc0>
 80060e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060e6:	4b98      	ldr	r3, [pc, #608]	@ (8006348 <_printf_float+0x2c8>)
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ec:	f7fa fd08 	bl	8000b00 <__aeabi_dcmple>
 80060f0:	bb30      	cbnz	r0, 8006140 <_printf_float+0xc0>
 80060f2:	2200      	movs	r2, #0
 80060f4:	2300      	movs	r3, #0
 80060f6:	4640      	mov	r0, r8
 80060f8:	4649      	mov	r1, r9
 80060fa:	f7fa fcf7 	bl	8000aec <__aeabi_dcmplt>
 80060fe:	b110      	cbz	r0, 8006106 <_printf_float+0x86>
 8006100:	232d      	movs	r3, #45	@ 0x2d
 8006102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006106:	4a91      	ldr	r2, [pc, #580]	@ (800634c <_printf_float+0x2cc>)
 8006108:	4b91      	ldr	r3, [pc, #580]	@ (8006350 <_printf_float+0x2d0>)
 800610a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800610e:	bf94      	ite	ls
 8006110:	4690      	movls	r8, r2
 8006112:	4698      	movhi	r8, r3
 8006114:	2303      	movs	r3, #3
 8006116:	6123      	str	r3, [r4, #16]
 8006118:	f02b 0304 	bic.w	r3, fp, #4
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	f04f 0900 	mov.w	r9, #0
 8006122:	9700      	str	r7, [sp, #0]
 8006124:	4633      	mov	r3, r6
 8006126:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006128:	4621      	mov	r1, r4
 800612a:	4628      	mov	r0, r5
 800612c:	f000 f9d2 	bl	80064d4 <_printf_common>
 8006130:	3001      	adds	r0, #1
 8006132:	f040 808d 	bne.w	8006250 <_printf_float+0x1d0>
 8006136:	f04f 30ff 	mov.w	r0, #4294967295
 800613a:	b00d      	add	sp, #52	@ 0x34
 800613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006140:	4642      	mov	r2, r8
 8006142:	464b      	mov	r3, r9
 8006144:	4640      	mov	r0, r8
 8006146:	4649      	mov	r1, r9
 8006148:	f7fa fcf8 	bl	8000b3c <__aeabi_dcmpun>
 800614c:	b140      	cbz	r0, 8006160 <_printf_float+0xe0>
 800614e:	464b      	mov	r3, r9
 8006150:	2b00      	cmp	r3, #0
 8006152:	bfbc      	itt	lt
 8006154:	232d      	movlt	r3, #45	@ 0x2d
 8006156:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800615a:	4a7e      	ldr	r2, [pc, #504]	@ (8006354 <_printf_float+0x2d4>)
 800615c:	4b7e      	ldr	r3, [pc, #504]	@ (8006358 <_printf_float+0x2d8>)
 800615e:	e7d4      	b.n	800610a <_printf_float+0x8a>
 8006160:	6863      	ldr	r3, [r4, #4]
 8006162:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006166:	9206      	str	r2, [sp, #24]
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	d13b      	bne.n	80061e4 <_printf_float+0x164>
 800616c:	2306      	movs	r3, #6
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006174:	2300      	movs	r3, #0
 8006176:	6022      	str	r2, [r4, #0]
 8006178:	9303      	str	r3, [sp, #12]
 800617a:	ab0a      	add	r3, sp, #40	@ 0x28
 800617c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006180:	ab09      	add	r3, sp, #36	@ 0x24
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	6861      	ldr	r1, [r4, #4]
 8006186:	ec49 8b10 	vmov	d0, r8, r9
 800618a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800618e:	4628      	mov	r0, r5
 8006190:	f7ff fed6 	bl	8005f40 <__cvt>
 8006194:	9b06      	ldr	r3, [sp, #24]
 8006196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006198:	2b47      	cmp	r3, #71	@ 0x47
 800619a:	4680      	mov	r8, r0
 800619c:	d129      	bne.n	80061f2 <_printf_float+0x172>
 800619e:	1cc8      	adds	r0, r1, #3
 80061a0:	db02      	blt.n	80061a8 <_printf_float+0x128>
 80061a2:	6863      	ldr	r3, [r4, #4]
 80061a4:	4299      	cmp	r1, r3
 80061a6:	dd41      	ble.n	800622c <_printf_float+0x1ac>
 80061a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80061ac:	fa5f fa8a 	uxtb.w	sl, sl
 80061b0:	3901      	subs	r1, #1
 80061b2:	4652      	mov	r2, sl
 80061b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80061ba:	f7ff ff26 	bl	800600a <__exponent>
 80061be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061c0:	1813      	adds	r3, r2, r0
 80061c2:	2a01      	cmp	r2, #1
 80061c4:	4681      	mov	r9, r0
 80061c6:	6123      	str	r3, [r4, #16]
 80061c8:	dc02      	bgt.n	80061d0 <_printf_float+0x150>
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	07d2      	lsls	r2, r2, #31
 80061ce:	d501      	bpl.n	80061d4 <_printf_float+0x154>
 80061d0:	3301      	adds	r3, #1
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0a2      	beq.n	8006122 <_printf_float+0xa2>
 80061dc:	232d      	movs	r3, #45	@ 0x2d
 80061de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e2:	e79e      	b.n	8006122 <_printf_float+0xa2>
 80061e4:	9a06      	ldr	r2, [sp, #24]
 80061e6:	2a47      	cmp	r2, #71	@ 0x47
 80061e8:	d1c2      	bne.n	8006170 <_printf_float+0xf0>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1c0      	bne.n	8006170 <_printf_float+0xf0>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e7bd      	b.n	800616e <_printf_float+0xee>
 80061f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061f6:	d9db      	bls.n	80061b0 <_printf_float+0x130>
 80061f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061fc:	d118      	bne.n	8006230 <_printf_float+0x1b0>
 80061fe:	2900      	cmp	r1, #0
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	dd0b      	ble.n	800621c <_printf_float+0x19c>
 8006204:	6121      	str	r1, [r4, #16]
 8006206:	b913      	cbnz	r3, 800620e <_printf_float+0x18e>
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	07d0      	lsls	r0, r2, #31
 800620c:	d502      	bpl.n	8006214 <_printf_float+0x194>
 800620e:	3301      	adds	r3, #1
 8006210:	440b      	add	r3, r1
 8006212:	6123      	str	r3, [r4, #16]
 8006214:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006216:	f04f 0900 	mov.w	r9, #0
 800621a:	e7db      	b.n	80061d4 <_printf_float+0x154>
 800621c:	b913      	cbnz	r3, 8006224 <_printf_float+0x1a4>
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	07d2      	lsls	r2, r2, #31
 8006222:	d501      	bpl.n	8006228 <_printf_float+0x1a8>
 8006224:	3302      	adds	r3, #2
 8006226:	e7f4      	b.n	8006212 <_printf_float+0x192>
 8006228:	2301      	movs	r3, #1
 800622a:	e7f2      	b.n	8006212 <_printf_float+0x192>
 800622c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006232:	4299      	cmp	r1, r3
 8006234:	db05      	blt.n	8006242 <_printf_float+0x1c2>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	6121      	str	r1, [r4, #16]
 800623a:	07d8      	lsls	r0, r3, #31
 800623c:	d5ea      	bpl.n	8006214 <_printf_float+0x194>
 800623e:	1c4b      	adds	r3, r1, #1
 8006240:	e7e7      	b.n	8006212 <_printf_float+0x192>
 8006242:	2900      	cmp	r1, #0
 8006244:	bfd4      	ite	le
 8006246:	f1c1 0202 	rsble	r2, r1, #2
 800624a:	2201      	movgt	r2, #1
 800624c:	4413      	add	r3, r2
 800624e:	e7e0      	b.n	8006212 <_printf_float+0x192>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	055a      	lsls	r2, r3, #21
 8006254:	d407      	bmi.n	8006266 <_printf_float+0x1e6>
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	4642      	mov	r2, r8
 800625a:	4631      	mov	r1, r6
 800625c:	4628      	mov	r0, r5
 800625e:	47b8      	blx	r7
 8006260:	3001      	adds	r0, #1
 8006262:	d12b      	bne.n	80062bc <_printf_float+0x23c>
 8006264:	e767      	b.n	8006136 <_printf_float+0xb6>
 8006266:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800626a:	f240 80dd 	bls.w	8006428 <_printf_float+0x3a8>
 800626e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006272:	2200      	movs	r2, #0
 8006274:	2300      	movs	r3, #0
 8006276:	f7fa fc2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800627a:	2800      	cmp	r0, #0
 800627c:	d033      	beq.n	80062e6 <_printf_float+0x266>
 800627e:	4a37      	ldr	r2, [pc, #220]	@ (800635c <_printf_float+0x2dc>)
 8006280:	2301      	movs	r3, #1
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	f43f af54 	beq.w	8006136 <_printf_float+0xb6>
 800628e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006292:	4543      	cmp	r3, r8
 8006294:	db02      	blt.n	800629c <_printf_float+0x21c>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	07d8      	lsls	r0, r3, #31
 800629a:	d50f      	bpl.n	80062bc <_printf_float+0x23c>
 800629c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a0:	4631      	mov	r1, r6
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	f43f af45 	beq.w	8006136 <_printf_float+0xb6>
 80062ac:	f04f 0900 	mov.w	r9, #0
 80062b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80062b4:	f104 0a1a 	add.w	sl, r4, #26
 80062b8:	45c8      	cmp	r8, r9
 80062ba:	dc09      	bgt.n	80062d0 <_printf_float+0x250>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	079b      	lsls	r3, r3, #30
 80062c0:	f100 8103 	bmi.w	80064ca <_printf_float+0x44a>
 80062c4:	68e0      	ldr	r0, [r4, #12]
 80062c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062c8:	4298      	cmp	r0, r3
 80062ca:	bfb8      	it	lt
 80062cc:	4618      	movlt	r0, r3
 80062ce:	e734      	b.n	800613a <_printf_float+0xba>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4652      	mov	r2, sl
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af2b 	beq.w	8006136 <_printf_float+0xb6>
 80062e0:	f109 0901 	add.w	r9, r9, #1
 80062e4:	e7e8      	b.n	80062b8 <_printf_float+0x238>
 80062e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	dc39      	bgt.n	8006360 <_printf_float+0x2e0>
 80062ec:	4a1b      	ldr	r2, [pc, #108]	@ (800635c <_printf_float+0x2dc>)
 80062ee:	2301      	movs	r3, #1
 80062f0:	4631      	mov	r1, r6
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	f43f af1d 	beq.w	8006136 <_printf_float+0xb6>
 80062fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006300:	ea59 0303 	orrs.w	r3, r9, r3
 8006304:	d102      	bne.n	800630c <_printf_float+0x28c>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	07d9      	lsls	r1, r3, #31
 800630a:	d5d7      	bpl.n	80062bc <_printf_float+0x23c>
 800630c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f af0d 	beq.w	8006136 <_printf_float+0xb6>
 800631c:	f04f 0a00 	mov.w	sl, #0
 8006320:	f104 0b1a 	add.w	fp, r4, #26
 8006324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006326:	425b      	negs	r3, r3
 8006328:	4553      	cmp	r3, sl
 800632a:	dc01      	bgt.n	8006330 <_printf_float+0x2b0>
 800632c:	464b      	mov	r3, r9
 800632e:	e793      	b.n	8006258 <_printf_float+0x1d8>
 8006330:	2301      	movs	r3, #1
 8006332:	465a      	mov	r2, fp
 8006334:	4631      	mov	r1, r6
 8006336:	4628      	mov	r0, r5
 8006338:	47b8      	blx	r7
 800633a:	3001      	adds	r0, #1
 800633c:	f43f aefb 	beq.w	8006136 <_printf_float+0xb6>
 8006340:	f10a 0a01 	add.w	sl, sl, #1
 8006344:	e7ee      	b.n	8006324 <_printf_float+0x2a4>
 8006346:	bf00      	nop
 8006348:	7fefffff 	.word	0x7fefffff
 800634c:	0800ad20 	.word	0x0800ad20
 8006350:	0800ad24 	.word	0x0800ad24
 8006354:	0800ad28 	.word	0x0800ad28
 8006358:	0800ad2c 	.word	0x0800ad2c
 800635c:	0800ad30 	.word	0x0800ad30
 8006360:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006362:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006366:	4553      	cmp	r3, sl
 8006368:	bfa8      	it	ge
 800636a:	4653      	movge	r3, sl
 800636c:	2b00      	cmp	r3, #0
 800636e:	4699      	mov	r9, r3
 8006370:	dc36      	bgt.n	80063e0 <_printf_float+0x360>
 8006372:	f04f 0b00 	mov.w	fp, #0
 8006376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800637a:	f104 021a 	add.w	r2, r4, #26
 800637e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006380:	9306      	str	r3, [sp, #24]
 8006382:	eba3 0309 	sub.w	r3, r3, r9
 8006386:	455b      	cmp	r3, fp
 8006388:	dc31      	bgt.n	80063ee <_printf_float+0x36e>
 800638a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638c:	459a      	cmp	sl, r3
 800638e:	dc3a      	bgt.n	8006406 <_printf_float+0x386>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	07da      	lsls	r2, r3, #31
 8006394:	d437      	bmi.n	8006406 <_printf_float+0x386>
 8006396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006398:	ebaa 0903 	sub.w	r9, sl, r3
 800639c:	9b06      	ldr	r3, [sp, #24]
 800639e:	ebaa 0303 	sub.w	r3, sl, r3
 80063a2:	4599      	cmp	r9, r3
 80063a4:	bfa8      	it	ge
 80063a6:	4699      	movge	r9, r3
 80063a8:	f1b9 0f00 	cmp.w	r9, #0
 80063ac:	dc33      	bgt.n	8006416 <_printf_float+0x396>
 80063ae:	f04f 0800 	mov.w	r8, #0
 80063b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063b6:	f104 0b1a 	add.w	fp, r4, #26
 80063ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063bc:	ebaa 0303 	sub.w	r3, sl, r3
 80063c0:	eba3 0309 	sub.w	r3, r3, r9
 80063c4:	4543      	cmp	r3, r8
 80063c6:	f77f af79 	ble.w	80062bc <_printf_float+0x23c>
 80063ca:	2301      	movs	r3, #1
 80063cc:	465a      	mov	r2, fp
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f aeae 	beq.w	8006136 <_printf_float+0xb6>
 80063da:	f108 0801 	add.w	r8, r8, #1
 80063de:	e7ec      	b.n	80063ba <_printf_float+0x33a>
 80063e0:	4642      	mov	r2, r8
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	47b8      	blx	r7
 80063e8:	3001      	adds	r0, #1
 80063ea:	d1c2      	bne.n	8006372 <_printf_float+0x2f2>
 80063ec:	e6a3      	b.n	8006136 <_printf_float+0xb6>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4631      	mov	r1, r6
 80063f2:	4628      	mov	r0, r5
 80063f4:	9206      	str	r2, [sp, #24]
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	f43f ae9c 	beq.w	8006136 <_printf_float+0xb6>
 80063fe:	9a06      	ldr	r2, [sp, #24]
 8006400:	f10b 0b01 	add.w	fp, fp, #1
 8006404:	e7bb      	b.n	800637e <_printf_float+0x2fe>
 8006406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800640a:	4631      	mov	r1, r6
 800640c:	4628      	mov	r0, r5
 800640e:	47b8      	blx	r7
 8006410:	3001      	adds	r0, #1
 8006412:	d1c0      	bne.n	8006396 <_printf_float+0x316>
 8006414:	e68f      	b.n	8006136 <_printf_float+0xb6>
 8006416:	9a06      	ldr	r2, [sp, #24]
 8006418:	464b      	mov	r3, r9
 800641a:	4442      	add	r2, r8
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	d1c3      	bne.n	80063ae <_printf_float+0x32e>
 8006426:	e686      	b.n	8006136 <_printf_float+0xb6>
 8006428:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800642c:	f1ba 0f01 	cmp.w	sl, #1
 8006430:	dc01      	bgt.n	8006436 <_printf_float+0x3b6>
 8006432:	07db      	lsls	r3, r3, #31
 8006434:	d536      	bpl.n	80064a4 <_printf_float+0x424>
 8006436:	2301      	movs	r3, #1
 8006438:	4642      	mov	r2, r8
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	47b8      	blx	r7
 8006440:	3001      	adds	r0, #1
 8006442:	f43f ae78 	beq.w	8006136 <_printf_float+0xb6>
 8006446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	f43f ae70 	beq.w	8006136 <_printf_float+0xb6>
 8006456:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800645a:	2200      	movs	r2, #0
 800645c:	2300      	movs	r3, #0
 800645e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006462:	f7fa fb39 	bl	8000ad8 <__aeabi_dcmpeq>
 8006466:	b9c0      	cbnz	r0, 800649a <_printf_float+0x41a>
 8006468:	4653      	mov	r3, sl
 800646a:	f108 0201 	add.w	r2, r8, #1
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	d10c      	bne.n	8006492 <_printf_float+0x412>
 8006478:	e65d      	b.n	8006136 <_printf_float+0xb6>
 800647a:	2301      	movs	r3, #1
 800647c:	465a      	mov	r2, fp
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f ae56 	beq.w	8006136 <_printf_float+0xb6>
 800648a:	f108 0801 	add.w	r8, r8, #1
 800648e:	45d0      	cmp	r8, sl
 8006490:	dbf3      	blt.n	800647a <_printf_float+0x3fa>
 8006492:	464b      	mov	r3, r9
 8006494:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006498:	e6df      	b.n	800625a <_printf_float+0x1da>
 800649a:	f04f 0800 	mov.w	r8, #0
 800649e:	f104 0b1a 	add.w	fp, r4, #26
 80064a2:	e7f4      	b.n	800648e <_printf_float+0x40e>
 80064a4:	2301      	movs	r3, #1
 80064a6:	4642      	mov	r2, r8
 80064a8:	e7e1      	b.n	800646e <_printf_float+0x3ee>
 80064aa:	2301      	movs	r3, #1
 80064ac:	464a      	mov	r2, r9
 80064ae:	4631      	mov	r1, r6
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b8      	blx	r7
 80064b4:	3001      	adds	r0, #1
 80064b6:	f43f ae3e 	beq.w	8006136 <_printf_float+0xb6>
 80064ba:	f108 0801 	add.w	r8, r8, #1
 80064be:	68e3      	ldr	r3, [r4, #12]
 80064c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064c2:	1a5b      	subs	r3, r3, r1
 80064c4:	4543      	cmp	r3, r8
 80064c6:	dcf0      	bgt.n	80064aa <_printf_float+0x42a>
 80064c8:	e6fc      	b.n	80062c4 <_printf_float+0x244>
 80064ca:	f04f 0800 	mov.w	r8, #0
 80064ce:	f104 0919 	add.w	r9, r4, #25
 80064d2:	e7f4      	b.n	80064be <_printf_float+0x43e>

080064d4 <_printf_common>:
 80064d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	4616      	mov	r6, r2
 80064da:	4698      	mov	r8, r3
 80064dc:	688a      	ldr	r2, [r1, #8]
 80064de:	690b      	ldr	r3, [r1, #16]
 80064e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	bfb8      	it	lt
 80064e8:	4613      	movlt	r3, r2
 80064ea:	6033      	str	r3, [r6, #0]
 80064ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064f0:	4607      	mov	r7, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	b10a      	cbz	r2, 80064fa <_printf_common+0x26>
 80064f6:	3301      	adds	r3, #1
 80064f8:	6033      	str	r3, [r6, #0]
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	0699      	lsls	r1, r3, #26
 80064fe:	bf42      	ittt	mi
 8006500:	6833      	ldrmi	r3, [r6, #0]
 8006502:	3302      	addmi	r3, #2
 8006504:	6033      	strmi	r3, [r6, #0]
 8006506:	6825      	ldr	r5, [r4, #0]
 8006508:	f015 0506 	ands.w	r5, r5, #6
 800650c:	d106      	bne.n	800651c <_printf_common+0x48>
 800650e:	f104 0a19 	add.w	sl, r4, #25
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	6832      	ldr	r2, [r6, #0]
 8006516:	1a9b      	subs	r3, r3, r2
 8006518:	42ab      	cmp	r3, r5
 800651a:	dc26      	bgt.n	800656a <_printf_common+0x96>
 800651c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	3b00      	subs	r3, #0
 8006524:	bf18      	it	ne
 8006526:	2301      	movne	r3, #1
 8006528:	0692      	lsls	r2, r2, #26
 800652a:	d42b      	bmi.n	8006584 <_printf_common+0xb0>
 800652c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006530:	4641      	mov	r1, r8
 8006532:	4638      	mov	r0, r7
 8006534:	47c8      	blx	r9
 8006536:	3001      	adds	r0, #1
 8006538:	d01e      	beq.n	8006578 <_printf_common+0xa4>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	6922      	ldr	r2, [r4, #16]
 800653e:	f003 0306 	and.w	r3, r3, #6
 8006542:	2b04      	cmp	r3, #4
 8006544:	bf02      	ittt	eq
 8006546:	68e5      	ldreq	r5, [r4, #12]
 8006548:	6833      	ldreq	r3, [r6, #0]
 800654a:	1aed      	subeq	r5, r5, r3
 800654c:	68a3      	ldr	r3, [r4, #8]
 800654e:	bf0c      	ite	eq
 8006550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006554:	2500      	movne	r5, #0
 8006556:	4293      	cmp	r3, r2
 8006558:	bfc4      	itt	gt
 800655a:	1a9b      	subgt	r3, r3, r2
 800655c:	18ed      	addgt	r5, r5, r3
 800655e:	2600      	movs	r6, #0
 8006560:	341a      	adds	r4, #26
 8006562:	42b5      	cmp	r5, r6
 8006564:	d11a      	bne.n	800659c <_printf_common+0xc8>
 8006566:	2000      	movs	r0, #0
 8006568:	e008      	b.n	800657c <_printf_common+0xa8>
 800656a:	2301      	movs	r3, #1
 800656c:	4652      	mov	r2, sl
 800656e:	4641      	mov	r1, r8
 8006570:	4638      	mov	r0, r7
 8006572:	47c8      	blx	r9
 8006574:	3001      	adds	r0, #1
 8006576:	d103      	bne.n	8006580 <_printf_common+0xac>
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006580:	3501      	adds	r5, #1
 8006582:	e7c6      	b.n	8006512 <_printf_common+0x3e>
 8006584:	18e1      	adds	r1, r4, r3
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	2030      	movs	r0, #48	@ 0x30
 800658a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800658e:	4422      	add	r2, r4
 8006590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006598:	3302      	adds	r3, #2
 800659a:	e7c7      	b.n	800652c <_printf_common+0x58>
 800659c:	2301      	movs	r3, #1
 800659e:	4622      	mov	r2, r4
 80065a0:	4641      	mov	r1, r8
 80065a2:	4638      	mov	r0, r7
 80065a4:	47c8      	blx	r9
 80065a6:	3001      	adds	r0, #1
 80065a8:	d0e6      	beq.n	8006578 <_printf_common+0xa4>
 80065aa:	3601      	adds	r6, #1
 80065ac:	e7d9      	b.n	8006562 <_printf_common+0x8e>
	...

080065b0 <_printf_i>:
 80065b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b4:	7e0f      	ldrb	r7, [r1, #24]
 80065b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065b8:	2f78      	cmp	r7, #120	@ 0x78
 80065ba:	4691      	mov	r9, r2
 80065bc:	4680      	mov	r8, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	469a      	mov	sl, r3
 80065c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065c6:	d807      	bhi.n	80065d8 <_printf_i+0x28>
 80065c8:	2f62      	cmp	r7, #98	@ 0x62
 80065ca:	d80a      	bhi.n	80065e2 <_printf_i+0x32>
 80065cc:	2f00      	cmp	r7, #0
 80065ce:	f000 80d2 	beq.w	8006776 <_printf_i+0x1c6>
 80065d2:	2f58      	cmp	r7, #88	@ 0x58
 80065d4:	f000 80b9 	beq.w	800674a <_printf_i+0x19a>
 80065d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065e0:	e03a      	b.n	8006658 <_printf_i+0xa8>
 80065e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065e6:	2b15      	cmp	r3, #21
 80065e8:	d8f6      	bhi.n	80065d8 <_printf_i+0x28>
 80065ea:	a101      	add	r1, pc, #4	@ (adr r1, 80065f0 <_printf_i+0x40>)
 80065ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065f0:	08006649 	.word	0x08006649
 80065f4:	0800665d 	.word	0x0800665d
 80065f8:	080065d9 	.word	0x080065d9
 80065fc:	080065d9 	.word	0x080065d9
 8006600:	080065d9 	.word	0x080065d9
 8006604:	080065d9 	.word	0x080065d9
 8006608:	0800665d 	.word	0x0800665d
 800660c:	080065d9 	.word	0x080065d9
 8006610:	080065d9 	.word	0x080065d9
 8006614:	080065d9 	.word	0x080065d9
 8006618:	080065d9 	.word	0x080065d9
 800661c:	0800675d 	.word	0x0800675d
 8006620:	08006687 	.word	0x08006687
 8006624:	08006717 	.word	0x08006717
 8006628:	080065d9 	.word	0x080065d9
 800662c:	080065d9 	.word	0x080065d9
 8006630:	0800677f 	.word	0x0800677f
 8006634:	080065d9 	.word	0x080065d9
 8006638:	08006687 	.word	0x08006687
 800663c:	080065d9 	.word	0x080065d9
 8006640:	080065d9 	.word	0x080065d9
 8006644:	0800671f 	.word	0x0800671f
 8006648:	6833      	ldr	r3, [r6, #0]
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6032      	str	r2, [r6, #0]
 8006650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006658:	2301      	movs	r3, #1
 800665a:	e09d      	b.n	8006798 <_printf_i+0x1e8>
 800665c:	6833      	ldr	r3, [r6, #0]
 800665e:	6820      	ldr	r0, [r4, #0]
 8006660:	1d19      	adds	r1, r3, #4
 8006662:	6031      	str	r1, [r6, #0]
 8006664:	0606      	lsls	r6, r0, #24
 8006666:	d501      	bpl.n	800666c <_printf_i+0xbc>
 8006668:	681d      	ldr	r5, [r3, #0]
 800666a:	e003      	b.n	8006674 <_printf_i+0xc4>
 800666c:	0645      	lsls	r5, r0, #25
 800666e:	d5fb      	bpl.n	8006668 <_printf_i+0xb8>
 8006670:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006674:	2d00      	cmp	r5, #0
 8006676:	da03      	bge.n	8006680 <_printf_i+0xd0>
 8006678:	232d      	movs	r3, #45	@ 0x2d
 800667a:	426d      	negs	r5, r5
 800667c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006680:	4859      	ldr	r0, [pc, #356]	@ (80067e8 <_printf_i+0x238>)
 8006682:	230a      	movs	r3, #10
 8006684:	e011      	b.n	80066aa <_printf_i+0xfa>
 8006686:	6821      	ldr	r1, [r4, #0]
 8006688:	6833      	ldr	r3, [r6, #0]
 800668a:	0608      	lsls	r0, r1, #24
 800668c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006690:	d402      	bmi.n	8006698 <_printf_i+0xe8>
 8006692:	0649      	lsls	r1, r1, #25
 8006694:	bf48      	it	mi
 8006696:	b2ad      	uxthmi	r5, r5
 8006698:	2f6f      	cmp	r7, #111	@ 0x6f
 800669a:	4853      	ldr	r0, [pc, #332]	@ (80067e8 <_printf_i+0x238>)
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	bf14      	ite	ne
 80066a0:	230a      	movne	r3, #10
 80066a2:	2308      	moveq	r3, #8
 80066a4:	2100      	movs	r1, #0
 80066a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066aa:	6866      	ldr	r6, [r4, #4]
 80066ac:	60a6      	str	r6, [r4, #8]
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	bfa2      	ittt	ge
 80066b2:	6821      	ldrge	r1, [r4, #0]
 80066b4:	f021 0104 	bicge.w	r1, r1, #4
 80066b8:	6021      	strge	r1, [r4, #0]
 80066ba:	b90d      	cbnz	r5, 80066c0 <_printf_i+0x110>
 80066bc:	2e00      	cmp	r6, #0
 80066be:	d04b      	beq.n	8006758 <_printf_i+0x1a8>
 80066c0:	4616      	mov	r6, r2
 80066c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80066c6:	fb03 5711 	mls	r7, r3, r1, r5
 80066ca:	5dc7      	ldrb	r7, [r0, r7]
 80066cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066d0:	462f      	mov	r7, r5
 80066d2:	42bb      	cmp	r3, r7
 80066d4:	460d      	mov	r5, r1
 80066d6:	d9f4      	bls.n	80066c2 <_printf_i+0x112>
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d10b      	bne.n	80066f4 <_printf_i+0x144>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	07df      	lsls	r7, r3, #31
 80066e0:	d508      	bpl.n	80066f4 <_printf_i+0x144>
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	6861      	ldr	r1, [r4, #4]
 80066e6:	4299      	cmp	r1, r3
 80066e8:	bfde      	ittt	le
 80066ea:	2330      	movle	r3, #48	@ 0x30
 80066ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066f4:	1b92      	subs	r2, r2, r6
 80066f6:	6122      	str	r2, [r4, #16]
 80066f8:	f8cd a000 	str.w	sl, [sp]
 80066fc:	464b      	mov	r3, r9
 80066fe:	aa03      	add	r2, sp, #12
 8006700:	4621      	mov	r1, r4
 8006702:	4640      	mov	r0, r8
 8006704:	f7ff fee6 	bl	80064d4 <_printf_common>
 8006708:	3001      	adds	r0, #1
 800670a:	d14a      	bne.n	80067a2 <_printf_i+0x1f2>
 800670c:	f04f 30ff 	mov.w	r0, #4294967295
 8006710:	b004      	add	sp, #16
 8006712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	f043 0320 	orr.w	r3, r3, #32
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	4833      	ldr	r0, [pc, #204]	@ (80067ec <_printf_i+0x23c>)
 8006720:	2778      	movs	r7, #120	@ 0x78
 8006722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	6831      	ldr	r1, [r6, #0]
 800672a:	061f      	lsls	r7, r3, #24
 800672c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006730:	d402      	bmi.n	8006738 <_printf_i+0x188>
 8006732:	065f      	lsls	r7, r3, #25
 8006734:	bf48      	it	mi
 8006736:	b2ad      	uxthmi	r5, r5
 8006738:	6031      	str	r1, [r6, #0]
 800673a:	07d9      	lsls	r1, r3, #31
 800673c:	bf44      	itt	mi
 800673e:	f043 0320 	orrmi.w	r3, r3, #32
 8006742:	6023      	strmi	r3, [r4, #0]
 8006744:	b11d      	cbz	r5, 800674e <_printf_i+0x19e>
 8006746:	2310      	movs	r3, #16
 8006748:	e7ac      	b.n	80066a4 <_printf_i+0xf4>
 800674a:	4827      	ldr	r0, [pc, #156]	@ (80067e8 <_printf_i+0x238>)
 800674c:	e7e9      	b.n	8006722 <_printf_i+0x172>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	f023 0320 	bic.w	r3, r3, #32
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	e7f6      	b.n	8006746 <_printf_i+0x196>
 8006758:	4616      	mov	r6, r2
 800675a:	e7bd      	b.n	80066d8 <_printf_i+0x128>
 800675c:	6833      	ldr	r3, [r6, #0]
 800675e:	6825      	ldr	r5, [r4, #0]
 8006760:	6961      	ldr	r1, [r4, #20]
 8006762:	1d18      	adds	r0, r3, #4
 8006764:	6030      	str	r0, [r6, #0]
 8006766:	062e      	lsls	r6, r5, #24
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	d501      	bpl.n	8006770 <_printf_i+0x1c0>
 800676c:	6019      	str	r1, [r3, #0]
 800676e:	e002      	b.n	8006776 <_printf_i+0x1c6>
 8006770:	0668      	lsls	r0, r5, #25
 8006772:	d5fb      	bpl.n	800676c <_printf_i+0x1bc>
 8006774:	8019      	strh	r1, [r3, #0]
 8006776:	2300      	movs	r3, #0
 8006778:	6123      	str	r3, [r4, #16]
 800677a:	4616      	mov	r6, r2
 800677c:	e7bc      	b.n	80066f8 <_printf_i+0x148>
 800677e:	6833      	ldr	r3, [r6, #0]
 8006780:	1d1a      	adds	r2, r3, #4
 8006782:	6032      	str	r2, [r6, #0]
 8006784:	681e      	ldr	r6, [r3, #0]
 8006786:	6862      	ldr	r2, [r4, #4]
 8006788:	2100      	movs	r1, #0
 800678a:	4630      	mov	r0, r6
 800678c:	f7f9 fd28 	bl	80001e0 <memchr>
 8006790:	b108      	cbz	r0, 8006796 <_printf_i+0x1e6>
 8006792:	1b80      	subs	r0, r0, r6
 8006794:	6060      	str	r0, [r4, #4]
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	6123      	str	r3, [r4, #16]
 800679a:	2300      	movs	r3, #0
 800679c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067a0:	e7aa      	b.n	80066f8 <_printf_i+0x148>
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	4632      	mov	r2, r6
 80067a6:	4649      	mov	r1, r9
 80067a8:	4640      	mov	r0, r8
 80067aa:	47d0      	blx	sl
 80067ac:	3001      	adds	r0, #1
 80067ae:	d0ad      	beq.n	800670c <_printf_i+0x15c>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	079b      	lsls	r3, r3, #30
 80067b4:	d413      	bmi.n	80067de <_printf_i+0x22e>
 80067b6:	68e0      	ldr	r0, [r4, #12]
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	4298      	cmp	r0, r3
 80067bc:	bfb8      	it	lt
 80067be:	4618      	movlt	r0, r3
 80067c0:	e7a6      	b.n	8006710 <_printf_i+0x160>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4632      	mov	r2, r6
 80067c6:	4649      	mov	r1, r9
 80067c8:	4640      	mov	r0, r8
 80067ca:	47d0      	blx	sl
 80067cc:	3001      	adds	r0, #1
 80067ce:	d09d      	beq.n	800670c <_printf_i+0x15c>
 80067d0:	3501      	adds	r5, #1
 80067d2:	68e3      	ldr	r3, [r4, #12]
 80067d4:	9903      	ldr	r1, [sp, #12]
 80067d6:	1a5b      	subs	r3, r3, r1
 80067d8:	42ab      	cmp	r3, r5
 80067da:	dcf2      	bgt.n	80067c2 <_printf_i+0x212>
 80067dc:	e7eb      	b.n	80067b6 <_printf_i+0x206>
 80067de:	2500      	movs	r5, #0
 80067e0:	f104 0619 	add.w	r6, r4, #25
 80067e4:	e7f5      	b.n	80067d2 <_printf_i+0x222>
 80067e6:	bf00      	nop
 80067e8:	0800ad32 	.word	0x0800ad32
 80067ec:	0800ad43 	.word	0x0800ad43

080067f0 <_scanf_float>:
 80067f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f4:	b087      	sub	sp, #28
 80067f6:	4617      	mov	r7, r2
 80067f8:	9303      	str	r3, [sp, #12]
 80067fa:	688b      	ldr	r3, [r1, #8]
 80067fc:	1e5a      	subs	r2, r3, #1
 80067fe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006802:	bf81      	itttt	hi
 8006804:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006808:	eb03 0b05 	addhi.w	fp, r3, r5
 800680c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006810:	608b      	strhi	r3, [r1, #8]
 8006812:	680b      	ldr	r3, [r1, #0]
 8006814:	460a      	mov	r2, r1
 8006816:	f04f 0500 	mov.w	r5, #0
 800681a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800681e:	f842 3b1c 	str.w	r3, [r2], #28
 8006822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006826:	4680      	mov	r8, r0
 8006828:	460c      	mov	r4, r1
 800682a:	bf98      	it	ls
 800682c:	f04f 0b00 	movls.w	fp, #0
 8006830:	9201      	str	r2, [sp, #4]
 8006832:	4616      	mov	r6, r2
 8006834:	46aa      	mov	sl, r5
 8006836:	46a9      	mov	r9, r5
 8006838:	9502      	str	r5, [sp, #8]
 800683a:	68a2      	ldr	r2, [r4, #8]
 800683c:	b152      	cbz	r2, 8006854 <_scanf_float+0x64>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b4e      	cmp	r3, #78	@ 0x4e
 8006844:	d864      	bhi.n	8006910 <_scanf_float+0x120>
 8006846:	2b40      	cmp	r3, #64	@ 0x40
 8006848:	d83c      	bhi.n	80068c4 <_scanf_float+0xd4>
 800684a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800684e:	b2c8      	uxtb	r0, r1
 8006850:	280e      	cmp	r0, #14
 8006852:	d93a      	bls.n	80068ca <_scanf_float+0xda>
 8006854:	f1b9 0f00 	cmp.w	r9, #0
 8006858:	d003      	beq.n	8006862 <_scanf_float+0x72>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006866:	f1ba 0f01 	cmp.w	sl, #1
 800686a:	f200 8117 	bhi.w	8006a9c <_scanf_float+0x2ac>
 800686e:	9b01      	ldr	r3, [sp, #4]
 8006870:	429e      	cmp	r6, r3
 8006872:	f200 8108 	bhi.w	8006a86 <_scanf_float+0x296>
 8006876:	2001      	movs	r0, #1
 8006878:	b007      	add	sp, #28
 800687a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006882:	2a0d      	cmp	r2, #13
 8006884:	d8e6      	bhi.n	8006854 <_scanf_float+0x64>
 8006886:	a101      	add	r1, pc, #4	@ (adr r1, 800688c <_scanf_float+0x9c>)
 8006888:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800688c:	080069d3 	.word	0x080069d3
 8006890:	08006855 	.word	0x08006855
 8006894:	08006855 	.word	0x08006855
 8006898:	08006855 	.word	0x08006855
 800689c:	08006a33 	.word	0x08006a33
 80068a0:	08006a0b 	.word	0x08006a0b
 80068a4:	08006855 	.word	0x08006855
 80068a8:	08006855 	.word	0x08006855
 80068ac:	080069e1 	.word	0x080069e1
 80068b0:	08006855 	.word	0x08006855
 80068b4:	08006855 	.word	0x08006855
 80068b8:	08006855 	.word	0x08006855
 80068bc:	08006855 	.word	0x08006855
 80068c0:	08006999 	.word	0x08006999
 80068c4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80068c8:	e7db      	b.n	8006882 <_scanf_float+0x92>
 80068ca:	290e      	cmp	r1, #14
 80068cc:	d8c2      	bhi.n	8006854 <_scanf_float+0x64>
 80068ce:	a001      	add	r0, pc, #4	@ (adr r0, 80068d4 <_scanf_float+0xe4>)
 80068d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80068d4:	08006989 	.word	0x08006989
 80068d8:	08006855 	.word	0x08006855
 80068dc:	08006989 	.word	0x08006989
 80068e0:	08006a1f 	.word	0x08006a1f
 80068e4:	08006855 	.word	0x08006855
 80068e8:	08006931 	.word	0x08006931
 80068ec:	0800696f 	.word	0x0800696f
 80068f0:	0800696f 	.word	0x0800696f
 80068f4:	0800696f 	.word	0x0800696f
 80068f8:	0800696f 	.word	0x0800696f
 80068fc:	0800696f 	.word	0x0800696f
 8006900:	0800696f 	.word	0x0800696f
 8006904:	0800696f 	.word	0x0800696f
 8006908:	0800696f 	.word	0x0800696f
 800690c:	0800696f 	.word	0x0800696f
 8006910:	2b6e      	cmp	r3, #110	@ 0x6e
 8006912:	d809      	bhi.n	8006928 <_scanf_float+0x138>
 8006914:	2b60      	cmp	r3, #96	@ 0x60
 8006916:	d8b2      	bhi.n	800687e <_scanf_float+0x8e>
 8006918:	2b54      	cmp	r3, #84	@ 0x54
 800691a:	d07b      	beq.n	8006a14 <_scanf_float+0x224>
 800691c:	2b59      	cmp	r3, #89	@ 0x59
 800691e:	d199      	bne.n	8006854 <_scanf_float+0x64>
 8006920:	2d07      	cmp	r5, #7
 8006922:	d197      	bne.n	8006854 <_scanf_float+0x64>
 8006924:	2508      	movs	r5, #8
 8006926:	e02c      	b.n	8006982 <_scanf_float+0x192>
 8006928:	2b74      	cmp	r3, #116	@ 0x74
 800692a:	d073      	beq.n	8006a14 <_scanf_float+0x224>
 800692c:	2b79      	cmp	r3, #121	@ 0x79
 800692e:	e7f6      	b.n	800691e <_scanf_float+0x12e>
 8006930:	6821      	ldr	r1, [r4, #0]
 8006932:	05c8      	lsls	r0, r1, #23
 8006934:	d51b      	bpl.n	800696e <_scanf_float+0x17e>
 8006936:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800693a:	6021      	str	r1, [r4, #0]
 800693c:	f109 0901 	add.w	r9, r9, #1
 8006940:	f1bb 0f00 	cmp.w	fp, #0
 8006944:	d003      	beq.n	800694e <_scanf_float+0x15e>
 8006946:	3201      	adds	r2, #1
 8006948:	f10b 3bff 	add.w	fp, fp, #4294967295
 800694c:	60a2      	str	r2, [r4, #8]
 800694e:	68a3      	ldr	r3, [r4, #8]
 8006950:	3b01      	subs	r3, #1
 8006952:	60a3      	str	r3, [r4, #8]
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	3301      	adds	r3, #1
 8006958:	6123      	str	r3, [r4, #16]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3b01      	subs	r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	607b      	str	r3, [r7, #4]
 8006962:	f340 8087 	ble.w	8006a74 <_scanf_float+0x284>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	e765      	b.n	800683a <_scanf_float+0x4a>
 800696e:	eb1a 0105 	adds.w	r1, sl, r5
 8006972:	f47f af6f 	bne.w	8006854 <_scanf_float+0x64>
 8006976:	6822      	ldr	r2, [r4, #0]
 8006978:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800697c:	6022      	str	r2, [r4, #0]
 800697e:	460d      	mov	r5, r1
 8006980:	468a      	mov	sl, r1
 8006982:	f806 3b01 	strb.w	r3, [r6], #1
 8006986:	e7e2      	b.n	800694e <_scanf_float+0x15e>
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	0610      	lsls	r0, r2, #24
 800698c:	f57f af62 	bpl.w	8006854 <_scanf_float+0x64>
 8006990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006994:	6022      	str	r2, [r4, #0]
 8006996:	e7f4      	b.n	8006982 <_scanf_float+0x192>
 8006998:	f1ba 0f00 	cmp.w	sl, #0
 800699c:	d10e      	bne.n	80069bc <_scanf_float+0x1cc>
 800699e:	f1b9 0f00 	cmp.w	r9, #0
 80069a2:	d10e      	bne.n	80069c2 <_scanf_float+0x1d2>
 80069a4:	6822      	ldr	r2, [r4, #0]
 80069a6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069aa:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80069ae:	d108      	bne.n	80069c2 <_scanf_float+0x1d2>
 80069b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80069b4:	6022      	str	r2, [r4, #0]
 80069b6:	f04f 0a01 	mov.w	sl, #1
 80069ba:	e7e2      	b.n	8006982 <_scanf_float+0x192>
 80069bc:	f1ba 0f02 	cmp.w	sl, #2
 80069c0:	d055      	beq.n	8006a6e <_scanf_float+0x27e>
 80069c2:	2d01      	cmp	r5, #1
 80069c4:	d002      	beq.n	80069cc <_scanf_float+0x1dc>
 80069c6:	2d04      	cmp	r5, #4
 80069c8:	f47f af44 	bne.w	8006854 <_scanf_float+0x64>
 80069cc:	3501      	adds	r5, #1
 80069ce:	b2ed      	uxtb	r5, r5
 80069d0:	e7d7      	b.n	8006982 <_scanf_float+0x192>
 80069d2:	f1ba 0f01 	cmp.w	sl, #1
 80069d6:	f47f af3d 	bne.w	8006854 <_scanf_float+0x64>
 80069da:	f04f 0a02 	mov.w	sl, #2
 80069de:	e7d0      	b.n	8006982 <_scanf_float+0x192>
 80069e0:	b97d      	cbnz	r5, 8006a02 <_scanf_float+0x212>
 80069e2:	f1b9 0f00 	cmp.w	r9, #0
 80069e6:	f47f af38 	bne.w	800685a <_scanf_float+0x6a>
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80069f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80069f4:	f040 8108 	bne.w	8006c08 <_scanf_float+0x418>
 80069f8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80069fc:	6022      	str	r2, [r4, #0]
 80069fe:	2501      	movs	r5, #1
 8006a00:	e7bf      	b.n	8006982 <_scanf_float+0x192>
 8006a02:	2d03      	cmp	r5, #3
 8006a04:	d0e2      	beq.n	80069cc <_scanf_float+0x1dc>
 8006a06:	2d05      	cmp	r5, #5
 8006a08:	e7de      	b.n	80069c8 <_scanf_float+0x1d8>
 8006a0a:	2d02      	cmp	r5, #2
 8006a0c:	f47f af22 	bne.w	8006854 <_scanf_float+0x64>
 8006a10:	2503      	movs	r5, #3
 8006a12:	e7b6      	b.n	8006982 <_scanf_float+0x192>
 8006a14:	2d06      	cmp	r5, #6
 8006a16:	f47f af1d 	bne.w	8006854 <_scanf_float+0x64>
 8006a1a:	2507      	movs	r5, #7
 8006a1c:	e7b1      	b.n	8006982 <_scanf_float+0x192>
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	0591      	lsls	r1, r2, #22
 8006a22:	f57f af17 	bpl.w	8006854 <_scanf_float+0x64>
 8006a26:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006a2a:	6022      	str	r2, [r4, #0]
 8006a2c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a30:	e7a7      	b.n	8006982 <_scanf_float+0x192>
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006a38:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006a3c:	d006      	beq.n	8006a4c <_scanf_float+0x25c>
 8006a3e:	0550      	lsls	r0, r2, #21
 8006a40:	f57f af08 	bpl.w	8006854 <_scanf_float+0x64>
 8006a44:	f1b9 0f00 	cmp.w	r9, #0
 8006a48:	f000 80de 	beq.w	8006c08 <_scanf_float+0x418>
 8006a4c:	0591      	lsls	r1, r2, #22
 8006a4e:	bf58      	it	pl
 8006a50:	9902      	ldrpl	r1, [sp, #8]
 8006a52:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a56:	bf58      	it	pl
 8006a58:	eba9 0101 	subpl.w	r1, r9, r1
 8006a5c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006a60:	bf58      	it	pl
 8006a62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a66:	6022      	str	r2, [r4, #0]
 8006a68:	f04f 0900 	mov.w	r9, #0
 8006a6c:	e789      	b.n	8006982 <_scanf_float+0x192>
 8006a6e:	f04f 0a03 	mov.w	sl, #3
 8006a72:	e786      	b.n	8006982 <_scanf_float+0x192>
 8006a74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006a78:	4639      	mov	r1, r7
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4798      	blx	r3
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	f43f aedb 	beq.w	800683a <_scanf_float+0x4a>
 8006a84:	e6e6      	b.n	8006854 <_scanf_float+0x64>
 8006a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a8e:	463a      	mov	r2, r7
 8006a90:	4640      	mov	r0, r8
 8006a92:	4798      	blx	r3
 8006a94:	6923      	ldr	r3, [r4, #16]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	6123      	str	r3, [r4, #16]
 8006a9a:	e6e8      	b.n	800686e <_scanf_float+0x7e>
 8006a9c:	1e6b      	subs	r3, r5, #1
 8006a9e:	2b06      	cmp	r3, #6
 8006aa0:	d824      	bhi.n	8006aec <_scanf_float+0x2fc>
 8006aa2:	2d02      	cmp	r5, #2
 8006aa4:	d836      	bhi.n	8006b14 <_scanf_float+0x324>
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	429e      	cmp	r6, r3
 8006aaa:	f67f aee4 	bls.w	8006876 <_scanf_float+0x86>
 8006aae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ab2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ab6:	463a      	mov	r2, r7
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4798      	blx	r3
 8006abc:	6923      	ldr	r3, [r4, #16]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	6123      	str	r3, [r4, #16]
 8006ac2:	e7f0      	b.n	8006aa6 <_scanf_float+0x2b6>
 8006ac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ac8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006acc:	463a      	mov	r2, r7
 8006ace:	4640      	mov	r0, r8
 8006ad0:	4798      	blx	r3
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	6123      	str	r3, [r4, #16]
 8006ad8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006adc:	fa5f fa8a 	uxtb.w	sl, sl
 8006ae0:	f1ba 0f02 	cmp.w	sl, #2
 8006ae4:	d1ee      	bne.n	8006ac4 <_scanf_float+0x2d4>
 8006ae6:	3d03      	subs	r5, #3
 8006ae8:	b2ed      	uxtb	r5, r5
 8006aea:	1b76      	subs	r6, r6, r5
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	05da      	lsls	r2, r3, #23
 8006af0:	d530      	bpl.n	8006b54 <_scanf_float+0x364>
 8006af2:	055b      	lsls	r3, r3, #21
 8006af4:	d511      	bpl.n	8006b1a <_scanf_float+0x32a>
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	429e      	cmp	r6, r3
 8006afa:	f67f aebc 	bls.w	8006876 <_scanf_float+0x86>
 8006afe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b06:	463a      	mov	r2, r7
 8006b08:	4640      	mov	r0, r8
 8006b0a:	4798      	blx	r3
 8006b0c:	6923      	ldr	r3, [r4, #16]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	6123      	str	r3, [r4, #16]
 8006b12:	e7f0      	b.n	8006af6 <_scanf_float+0x306>
 8006b14:	46aa      	mov	sl, r5
 8006b16:	46b3      	mov	fp, r6
 8006b18:	e7de      	b.n	8006ad8 <_scanf_float+0x2e8>
 8006b1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	2965      	cmp	r1, #101	@ 0x65
 8006b22:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b26:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b2a:	6123      	str	r3, [r4, #16]
 8006b2c:	d00c      	beq.n	8006b48 <_scanf_float+0x358>
 8006b2e:	2945      	cmp	r1, #69	@ 0x45
 8006b30:	d00a      	beq.n	8006b48 <_scanf_float+0x358>
 8006b32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b36:	463a      	mov	r2, r7
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4798      	blx	r3
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	1eb5      	subs	r5, r6, #2
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b4c:	463a      	mov	r2, r7
 8006b4e:	4640      	mov	r0, r8
 8006b50:	4798      	blx	r3
 8006b52:	462e      	mov	r6, r5
 8006b54:	6822      	ldr	r2, [r4, #0]
 8006b56:	f012 0210 	ands.w	r2, r2, #16
 8006b5a:	d001      	beq.n	8006b60 <_scanf_float+0x370>
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	e68b      	b.n	8006878 <_scanf_float+0x88>
 8006b60:	7032      	strb	r2, [r6, #0]
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b6c:	d11c      	bne.n	8006ba8 <_scanf_float+0x3b8>
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	454b      	cmp	r3, r9
 8006b72:	eba3 0209 	sub.w	r2, r3, r9
 8006b76:	d123      	bne.n	8006bc0 <_scanf_float+0x3d0>
 8006b78:	9901      	ldr	r1, [sp, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	f002 fbf7 	bl	8009370 <_strtod_r>
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	6821      	ldr	r1, [r4, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f011 0f02 	tst.w	r1, #2
 8006b8c:	ec57 6b10 	vmov	r6, r7, d0
 8006b90:	f103 0204 	add.w	r2, r3, #4
 8006b94:	d01f      	beq.n	8006bd6 <_scanf_float+0x3e6>
 8006b96:	9903      	ldr	r1, [sp, #12]
 8006b98:	600a      	str	r2, [r1, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	e9c3 6700 	strd	r6, r7, [r3]
 8006ba0:	68e3      	ldr	r3, [r4, #12]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	60e3      	str	r3, [r4, #12]
 8006ba6:	e7d9      	b.n	8006b5c <_scanf_float+0x36c>
 8006ba8:	9b04      	ldr	r3, [sp, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0e4      	beq.n	8006b78 <_scanf_float+0x388>
 8006bae:	9905      	ldr	r1, [sp, #20]
 8006bb0:	230a      	movs	r3, #10
 8006bb2:	3101      	adds	r1, #1
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	f002 fc5b 	bl	8009470 <_strtol_r>
 8006bba:	9b04      	ldr	r3, [sp, #16]
 8006bbc:	9e05      	ldr	r6, [sp, #20]
 8006bbe:	1ac2      	subs	r2, r0, r3
 8006bc0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006bc4:	429e      	cmp	r6, r3
 8006bc6:	bf28      	it	cs
 8006bc8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006bcc:	4910      	ldr	r1, [pc, #64]	@ (8006c10 <_scanf_float+0x420>)
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f000 f8e4 	bl	8006d9c <siprintf>
 8006bd4:	e7d0      	b.n	8006b78 <_scanf_float+0x388>
 8006bd6:	f011 0f04 	tst.w	r1, #4
 8006bda:	9903      	ldr	r1, [sp, #12]
 8006bdc:	600a      	str	r2, [r1, #0]
 8006bde:	d1dc      	bne.n	8006b9a <_scanf_float+0x3aa>
 8006be0:	681d      	ldr	r5, [r3, #0]
 8006be2:	4632      	mov	r2, r6
 8006be4:	463b      	mov	r3, r7
 8006be6:	4630      	mov	r0, r6
 8006be8:	4639      	mov	r1, r7
 8006bea:	f7f9 ffa7 	bl	8000b3c <__aeabi_dcmpun>
 8006bee:	b128      	cbz	r0, 8006bfc <_scanf_float+0x40c>
 8006bf0:	4808      	ldr	r0, [pc, #32]	@ (8006c14 <_scanf_float+0x424>)
 8006bf2:	f000 f9b7 	bl	8006f64 <nanf>
 8006bf6:	ed85 0a00 	vstr	s0, [r5]
 8006bfa:	e7d1      	b.n	8006ba0 <_scanf_float+0x3b0>
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	4639      	mov	r1, r7
 8006c00:	f7f9 fffa 	bl	8000bf8 <__aeabi_d2f>
 8006c04:	6028      	str	r0, [r5, #0]
 8006c06:	e7cb      	b.n	8006ba0 <_scanf_float+0x3b0>
 8006c08:	f04f 0900 	mov.w	r9, #0
 8006c0c:	e629      	b.n	8006862 <_scanf_float+0x72>
 8006c0e:	bf00      	nop
 8006c10:	0800ad54 	.word	0x0800ad54
 8006c14:	0800b0ed 	.word	0x0800b0ed

08006c18 <std>:
 8006c18:	2300      	movs	r3, #0
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c26:	6083      	str	r3, [r0, #8]
 8006c28:	8181      	strh	r1, [r0, #12]
 8006c2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c2c:	81c2      	strh	r2, [r0, #14]
 8006c2e:	6183      	str	r3, [r0, #24]
 8006c30:	4619      	mov	r1, r3
 8006c32:	2208      	movs	r2, #8
 8006c34:	305c      	adds	r0, #92	@ 0x5c
 8006c36:	f000 f914 	bl	8006e62 <memset>
 8006c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <std+0x58>)
 8006c3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c74 <std+0x5c>)
 8006c40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c42:	4b0d      	ldr	r3, [pc, #52]	@ (8006c78 <std+0x60>)
 8006c44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c46:	4b0d      	ldr	r3, [pc, #52]	@ (8006c7c <std+0x64>)
 8006c48:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c80 <std+0x68>)
 8006c4c:	6224      	str	r4, [r4, #32]
 8006c4e:	429c      	cmp	r4, r3
 8006c50:	d006      	beq.n	8006c60 <std+0x48>
 8006c52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c56:	4294      	cmp	r4, r2
 8006c58:	d002      	beq.n	8006c60 <std+0x48>
 8006c5a:	33d0      	adds	r3, #208	@ 0xd0
 8006c5c:	429c      	cmp	r4, r3
 8006c5e:	d105      	bne.n	8006c6c <std+0x54>
 8006c60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c68:	f000 b978 	b.w	8006f5c <__retarget_lock_init_recursive>
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	bf00      	nop
 8006c70:	08006ddd 	.word	0x08006ddd
 8006c74:	08006dff 	.word	0x08006dff
 8006c78:	08006e37 	.word	0x08006e37
 8006c7c:	08006e5b 	.word	0x08006e5b
 8006c80:	2000045c 	.word	0x2000045c

08006c84 <stdio_exit_handler>:
 8006c84:	4a02      	ldr	r2, [pc, #8]	@ (8006c90 <stdio_exit_handler+0xc>)
 8006c86:	4903      	ldr	r1, [pc, #12]	@ (8006c94 <stdio_exit_handler+0x10>)
 8006c88:	4803      	ldr	r0, [pc, #12]	@ (8006c98 <stdio_exit_handler+0x14>)
 8006c8a:	f000 b869 	b.w	8006d60 <_fwalk_sglue>
 8006c8e:	bf00      	nop
 8006c90:	2000009c 	.word	0x2000009c
 8006c94:	0800982d 	.word	0x0800982d
 8006c98:	200000ac 	.word	0x200000ac

08006c9c <cleanup_stdio>:
 8006c9c:	6841      	ldr	r1, [r0, #4]
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd0 <cleanup_stdio+0x34>)
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	b510      	push	{r4, lr}
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	d001      	beq.n	8006cac <cleanup_stdio+0x10>
 8006ca8:	f002 fdc0 	bl	800982c <_fflush_r>
 8006cac:	68a1      	ldr	r1, [r4, #8]
 8006cae:	4b09      	ldr	r3, [pc, #36]	@ (8006cd4 <cleanup_stdio+0x38>)
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	d002      	beq.n	8006cba <cleanup_stdio+0x1e>
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f002 fdb9 	bl	800982c <_fflush_r>
 8006cba:	68e1      	ldr	r1, [r4, #12]
 8006cbc:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <cleanup_stdio+0x3c>)
 8006cbe:	4299      	cmp	r1, r3
 8006cc0:	d004      	beq.n	8006ccc <cleanup_stdio+0x30>
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	f002 bdb0 	b.w	800982c <_fflush_r>
 8006ccc:	bd10      	pop	{r4, pc}
 8006cce:	bf00      	nop
 8006cd0:	2000045c 	.word	0x2000045c
 8006cd4:	200004c4 	.word	0x200004c4
 8006cd8:	2000052c 	.word	0x2000052c

08006cdc <global_stdio_init.part.0>:
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	4b0b      	ldr	r3, [pc, #44]	@ (8006d0c <global_stdio_init.part.0+0x30>)
 8006ce0:	4c0b      	ldr	r4, [pc, #44]	@ (8006d10 <global_stdio_init.part.0+0x34>)
 8006ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8006d14 <global_stdio_init.part.0+0x38>)
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2104      	movs	r1, #4
 8006cec:	f7ff ff94 	bl	8006c18 <std>
 8006cf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	2109      	movs	r1, #9
 8006cf8:	f7ff ff8e 	bl	8006c18 <std>
 8006cfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d00:	2202      	movs	r2, #2
 8006d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d06:	2112      	movs	r1, #18
 8006d08:	f7ff bf86 	b.w	8006c18 <std>
 8006d0c:	20000594 	.word	0x20000594
 8006d10:	2000045c 	.word	0x2000045c
 8006d14:	08006c85 	.word	0x08006c85

08006d18 <__sfp_lock_acquire>:
 8006d18:	4801      	ldr	r0, [pc, #4]	@ (8006d20 <__sfp_lock_acquire+0x8>)
 8006d1a:	f000 b920 	b.w	8006f5e <__retarget_lock_acquire_recursive>
 8006d1e:	bf00      	nop
 8006d20:	2000059d 	.word	0x2000059d

08006d24 <__sfp_lock_release>:
 8006d24:	4801      	ldr	r0, [pc, #4]	@ (8006d2c <__sfp_lock_release+0x8>)
 8006d26:	f000 b91b 	b.w	8006f60 <__retarget_lock_release_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	2000059d 	.word	0x2000059d

08006d30 <__sinit>:
 8006d30:	b510      	push	{r4, lr}
 8006d32:	4604      	mov	r4, r0
 8006d34:	f7ff fff0 	bl	8006d18 <__sfp_lock_acquire>
 8006d38:	6a23      	ldr	r3, [r4, #32]
 8006d3a:	b11b      	cbz	r3, 8006d44 <__sinit+0x14>
 8006d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d40:	f7ff bff0 	b.w	8006d24 <__sfp_lock_release>
 8006d44:	4b04      	ldr	r3, [pc, #16]	@ (8006d58 <__sinit+0x28>)
 8006d46:	6223      	str	r3, [r4, #32]
 8006d48:	4b04      	ldr	r3, [pc, #16]	@ (8006d5c <__sinit+0x2c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f5      	bne.n	8006d3c <__sinit+0xc>
 8006d50:	f7ff ffc4 	bl	8006cdc <global_stdio_init.part.0>
 8006d54:	e7f2      	b.n	8006d3c <__sinit+0xc>
 8006d56:	bf00      	nop
 8006d58:	08006c9d 	.word	0x08006c9d
 8006d5c:	20000594 	.word	0x20000594

08006d60 <_fwalk_sglue>:
 8006d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d64:	4607      	mov	r7, r0
 8006d66:	4688      	mov	r8, r1
 8006d68:	4614      	mov	r4, r2
 8006d6a:	2600      	movs	r6, #0
 8006d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d70:	f1b9 0901 	subs.w	r9, r9, #1
 8006d74:	d505      	bpl.n	8006d82 <_fwalk_sglue+0x22>
 8006d76:	6824      	ldr	r4, [r4, #0]
 8006d78:	2c00      	cmp	r4, #0
 8006d7a:	d1f7      	bne.n	8006d6c <_fwalk_sglue+0xc>
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d82:	89ab      	ldrh	r3, [r5, #12]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d907      	bls.n	8006d98 <_fwalk_sglue+0x38>
 8006d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	d003      	beq.n	8006d98 <_fwalk_sglue+0x38>
 8006d90:	4629      	mov	r1, r5
 8006d92:	4638      	mov	r0, r7
 8006d94:	47c0      	blx	r8
 8006d96:	4306      	orrs	r6, r0
 8006d98:	3568      	adds	r5, #104	@ 0x68
 8006d9a:	e7e9      	b.n	8006d70 <_fwalk_sglue+0x10>

08006d9c <siprintf>:
 8006d9c:	b40e      	push	{r1, r2, r3}
 8006d9e:	b500      	push	{lr}
 8006da0:	b09c      	sub	sp, #112	@ 0x70
 8006da2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006da4:	9002      	str	r0, [sp, #8]
 8006da6:	9006      	str	r0, [sp, #24]
 8006da8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006dac:	4809      	ldr	r0, [pc, #36]	@ (8006dd4 <siprintf+0x38>)
 8006dae:	9107      	str	r1, [sp, #28]
 8006db0:	9104      	str	r1, [sp, #16]
 8006db2:	4909      	ldr	r1, [pc, #36]	@ (8006dd8 <siprintf+0x3c>)
 8006db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db8:	9105      	str	r1, [sp, #20]
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	9301      	str	r3, [sp, #4]
 8006dbe:	a902      	add	r1, sp, #8
 8006dc0:	f002 fbb4 	bl	800952c <_svfiprintf_r>
 8006dc4:	9b02      	ldr	r3, [sp, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	b01c      	add	sp, #112	@ 0x70
 8006dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd0:	b003      	add	sp, #12
 8006dd2:	4770      	bx	lr
 8006dd4:	200000a8 	.word	0x200000a8
 8006dd8:	ffff0208 	.word	0xffff0208

08006ddc <__sread>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	460c      	mov	r4, r1
 8006de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de4:	f000 f86c 	bl	8006ec0 <_read_r>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	bfab      	itete	ge
 8006dec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dee:	89a3      	ldrhlt	r3, [r4, #12]
 8006df0:	181b      	addge	r3, r3, r0
 8006df2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006df6:	bfac      	ite	ge
 8006df8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dfa:	81a3      	strhlt	r3, [r4, #12]
 8006dfc:	bd10      	pop	{r4, pc}

08006dfe <__swrite>:
 8006dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e02:	461f      	mov	r7, r3
 8006e04:	898b      	ldrh	r3, [r1, #12]
 8006e06:	05db      	lsls	r3, r3, #23
 8006e08:	4605      	mov	r5, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	d505      	bpl.n	8006e1c <__swrite+0x1e>
 8006e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e14:	2302      	movs	r3, #2
 8006e16:	2200      	movs	r2, #0
 8006e18:	f000 f840 	bl	8006e9c <_lseek_r>
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e26:	81a3      	strh	r3, [r4, #12]
 8006e28:	4632      	mov	r2, r6
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e32:	f000 b857 	b.w	8006ee4 <_write_r>

08006e36 <__sseek>:
 8006e36:	b510      	push	{r4, lr}
 8006e38:	460c      	mov	r4, r1
 8006e3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3e:	f000 f82d 	bl	8006e9c <_lseek_r>
 8006e42:	1c43      	adds	r3, r0, #1
 8006e44:	89a3      	ldrh	r3, [r4, #12]
 8006e46:	bf15      	itete	ne
 8006e48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e52:	81a3      	strheq	r3, [r4, #12]
 8006e54:	bf18      	it	ne
 8006e56:	81a3      	strhne	r3, [r4, #12]
 8006e58:	bd10      	pop	{r4, pc}

08006e5a <__sclose>:
 8006e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e5e:	f000 b80d 	b.w	8006e7c <_close_r>

08006e62 <memset>:
 8006e62:	4402      	add	r2, r0
 8006e64:	4603      	mov	r3, r0
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d100      	bne.n	8006e6c <memset+0xa>
 8006e6a:	4770      	bx	lr
 8006e6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e70:	e7f9      	b.n	8006e66 <memset+0x4>
	...

08006e74 <_localeconv_r>:
 8006e74:	4800      	ldr	r0, [pc, #0]	@ (8006e78 <_localeconv_r+0x4>)
 8006e76:	4770      	bx	lr
 8006e78:	200001e8 	.word	0x200001e8

08006e7c <_close_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d06      	ldr	r5, [pc, #24]	@ (8006e98 <_close_r+0x1c>)
 8006e80:	2300      	movs	r3, #0
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	602b      	str	r3, [r5, #0]
 8006e88:	f7fa ff9e 	bl	8001dc8 <_close>
 8006e8c:	1c43      	adds	r3, r0, #1
 8006e8e:	d102      	bne.n	8006e96 <_close_r+0x1a>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	b103      	cbz	r3, 8006e96 <_close_r+0x1a>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
 8006e98:	20000598 	.word	0x20000598

08006e9c <_lseek_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d07      	ldr	r5, [pc, #28]	@ (8006ebc <_lseek_r+0x20>)
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	4608      	mov	r0, r1
 8006ea4:	4611      	mov	r1, r2
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	602a      	str	r2, [r5, #0]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f7fa ffb3 	bl	8001e16 <_lseek>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_lseek_r+0x1e>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_lseek_r+0x1e>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	20000598 	.word	0x20000598

08006ec0 <_read_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d07      	ldr	r5, [pc, #28]	@ (8006ee0 <_read_r+0x20>)
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	4611      	mov	r1, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	602a      	str	r2, [r5, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f7fa ff41 	bl	8001d56 <_read>
 8006ed4:	1c43      	adds	r3, r0, #1
 8006ed6:	d102      	bne.n	8006ede <_read_r+0x1e>
 8006ed8:	682b      	ldr	r3, [r5, #0]
 8006eda:	b103      	cbz	r3, 8006ede <_read_r+0x1e>
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	20000598 	.word	0x20000598

08006ee4 <_write_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4d07      	ldr	r5, [pc, #28]	@ (8006f04 <_write_r+0x20>)
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	2200      	movs	r2, #0
 8006ef0:	602a      	str	r2, [r5, #0]
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f7fa ff4c 	bl	8001d90 <_write>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_write_r+0x1e>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_write_r+0x1e>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	20000598 	.word	0x20000598

08006f08 <__errno>:
 8006f08:	4b01      	ldr	r3, [pc, #4]	@ (8006f10 <__errno+0x8>)
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	200000a8 	.word	0x200000a8

08006f14 <__libc_init_array>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	4d0d      	ldr	r5, [pc, #52]	@ (8006f4c <__libc_init_array+0x38>)
 8006f18:	4c0d      	ldr	r4, [pc, #52]	@ (8006f50 <__libc_init_array+0x3c>)
 8006f1a:	1b64      	subs	r4, r4, r5
 8006f1c:	10a4      	asrs	r4, r4, #2
 8006f1e:	2600      	movs	r6, #0
 8006f20:	42a6      	cmp	r6, r4
 8006f22:	d109      	bne.n	8006f38 <__libc_init_array+0x24>
 8006f24:	4d0b      	ldr	r5, [pc, #44]	@ (8006f54 <__libc_init_array+0x40>)
 8006f26:	4c0c      	ldr	r4, [pc, #48]	@ (8006f58 <__libc_init_array+0x44>)
 8006f28:	f003 fee0 	bl	800acec <_init>
 8006f2c:	1b64      	subs	r4, r4, r5
 8006f2e:	10a4      	asrs	r4, r4, #2
 8006f30:	2600      	movs	r6, #0
 8006f32:	42a6      	cmp	r6, r4
 8006f34:	d105      	bne.n	8006f42 <__libc_init_array+0x2e>
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
 8006f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f3c:	4798      	blx	r3
 8006f3e:	3601      	adds	r6, #1
 8006f40:	e7ee      	b.n	8006f20 <__libc_init_array+0xc>
 8006f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f46:	4798      	blx	r3
 8006f48:	3601      	adds	r6, #1
 8006f4a:	e7f2      	b.n	8006f32 <__libc_init_array+0x1e>
 8006f4c:	0800b1c8 	.word	0x0800b1c8
 8006f50:	0800b1c8 	.word	0x0800b1c8
 8006f54:	0800b1c8 	.word	0x0800b1c8
 8006f58:	0800b1cc 	.word	0x0800b1cc

08006f5c <__retarget_lock_init_recursive>:
 8006f5c:	4770      	bx	lr

08006f5e <__retarget_lock_acquire_recursive>:
 8006f5e:	4770      	bx	lr

08006f60 <__retarget_lock_release_recursive>:
 8006f60:	4770      	bx	lr
	...

08006f64 <nanf>:
 8006f64:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006f6c <nanf+0x8>
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	7fc00000 	.word	0x7fc00000

08006f70 <quorem>:
 8006f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	6903      	ldr	r3, [r0, #16]
 8006f76:	690c      	ldr	r4, [r1, #16]
 8006f78:	42a3      	cmp	r3, r4
 8006f7a:	4607      	mov	r7, r0
 8006f7c:	db7e      	blt.n	800707c <quorem+0x10c>
 8006f7e:	3c01      	subs	r4, #1
 8006f80:	f101 0814 	add.w	r8, r1, #20
 8006f84:	00a3      	lsls	r3, r4, #2
 8006f86:	f100 0514 	add.w	r5, r0, #20
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fa2:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fa6:	d32e      	bcc.n	8007006 <quorem+0x96>
 8006fa8:	f04f 0a00 	mov.w	sl, #0
 8006fac:	46c4      	mov	ip, r8
 8006fae:	46ae      	mov	lr, r5
 8006fb0:	46d3      	mov	fp, sl
 8006fb2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fb6:	b298      	uxth	r0, r3
 8006fb8:	fb06 a000 	mla	r0, r6, r0, sl
 8006fbc:	0c02      	lsrs	r2, r0, #16
 8006fbe:	0c1b      	lsrs	r3, r3, #16
 8006fc0:	fb06 2303 	mla	r3, r6, r3, r2
 8006fc4:	f8de 2000 	ldr.w	r2, [lr]
 8006fc8:	b280      	uxth	r0, r0
 8006fca:	b292      	uxth	r2, r2
 8006fcc:	1a12      	subs	r2, r2, r0
 8006fce:	445a      	add	r2, fp
 8006fd0:	f8de 0000 	ldr.w	r0, [lr]
 8006fd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006fde:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fe8:	45e1      	cmp	r9, ip
 8006fea:	f84e 2b04 	str.w	r2, [lr], #4
 8006fee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ff2:	d2de      	bcs.n	8006fb2 <quorem+0x42>
 8006ff4:	9b00      	ldr	r3, [sp, #0]
 8006ff6:	58eb      	ldr	r3, [r5, r3]
 8006ff8:	b92b      	cbnz	r3, 8007006 <quorem+0x96>
 8006ffa:	9b01      	ldr	r3, [sp, #4]
 8006ffc:	3b04      	subs	r3, #4
 8006ffe:	429d      	cmp	r5, r3
 8007000:	461a      	mov	r2, r3
 8007002:	d32f      	bcc.n	8007064 <quorem+0xf4>
 8007004:	613c      	str	r4, [r7, #16]
 8007006:	4638      	mov	r0, r7
 8007008:	f001 f9c2 	bl	8008390 <__mcmp>
 800700c:	2800      	cmp	r0, #0
 800700e:	db25      	blt.n	800705c <quorem+0xec>
 8007010:	4629      	mov	r1, r5
 8007012:	2000      	movs	r0, #0
 8007014:	f858 2b04 	ldr.w	r2, [r8], #4
 8007018:	f8d1 c000 	ldr.w	ip, [r1]
 800701c:	fa1f fe82 	uxth.w	lr, r2
 8007020:	fa1f f38c 	uxth.w	r3, ip
 8007024:	eba3 030e 	sub.w	r3, r3, lr
 8007028:	4403      	add	r3, r0
 800702a:	0c12      	lsrs	r2, r2, #16
 800702c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007030:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007034:	b29b      	uxth	r3, r3
 8007036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800703a:	45c1      	cmp	r9, r8
 800703c:	f841 3b04 	str.w	r3, [r1], #4
 8007040:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007044:	d2e6      	bcs.n	8007014 <quorem+0xa4>
 8007046:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800704a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800704e:	b922      	cbnz	r2, 800705a <quorem+0xea>
 8007050:	3b04      	subs	r3, #4
 8007052:	429d      	cmp	r5, r3
 8007054:	461a      	mov	r2, r3
 8007056:	d30b      	bcc.n	8007070 <quorem+0x100>
 8007058:	613c      	str	r4, [r7, #16]
 800705a:	3601      	adds	r6, #1
 800705c:	4630      	mov	r0, r6
 800705e:	b003      	add	sp, #12
 8007060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	3b04      	subs	r3, #4
 8007068:	2a00      	cmp	r2, #0
 800706a:	d1cb      	bne.n	8007004 <quorem+0x94>
 800706c:	3c01      	subs	r4, #1
 800706e:	e7c6      	b.n	8006ffe <quorem+0x8e>
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	3b04      	subs	r3, #4
 8007074:	2a00      	cmp	r2, #0
 8007076:	d1ef      	bne.n	8007058 <quorem+0xe8>
 8007078:	3c01      	subs	r4, #1
 800707a:	e7ea      	b.n	8007052 <quorem+0xe2>
 800707c:	2000      	movs	r0, #0
 800707e:	e7ee      	b.n	800705e <quorem+0xee>

08007080 <_dtoa_r>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	69c7      	ldr	r7, [r0, #28]
 8007086:	b099      	sub	sp, #100	@ 0x64
 8007088:	ed8d 0b02 	vstr	d0, [sp, #8]
 800708c:	ec55 4b10 	vmov	r4, r5, d0
 8007090:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007092:	9109      	str	r1, [sp, #36]	@ 0x24
 8007094:	4683      	mov	fp, r0
 8007096:	920e      	str	r2, [sp, #56]	@ 0x38
 8007098:	9313      	str	r3, [sp, #76]	@ 0x4c
 800709a:	b97f      	cbnz	r7, 80070bc <_dtoa_r+0x3c>
 800709c:	2010      	movs	r0, #16
 800709e:	f000 fdfd 	bl	8007c9c <malloc>
 80070a2:	4602      	mov	r2, r0
 80070a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80070a8:	b920      	cbnz	r0, 80070b4 <_dtoa_r+0x34>
 80070aa:	4ba7      	ldr	r3, [pc, #668]	@ (8007348 <_dtoa_r+0x2c8>)
 80070ac:	21ef      	movs	r1, #239	@ 0xef
 80070ae:	48a7      	ldr	r0, [pc, #668]	@ (800734c <_dtoa_r+0x2cc>)
 80070b0:	f002 fc36 	bl	8009920 <__assert_func>
 80070b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80070b8:	6007      	str	r7, [r0, #0]
 80070ba:	60c7      	str	r7, [r0, #12]
 80070bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	b159      	cbz	r1, 80070dc <_dtoa_r+0x5c>
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	604a      	str	r2, [r1, #4]
 80070c8:	2301      	movs	r3, #1
 80070ca:	4093      	lsls	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
 80070ce:	4658      	mov	r0, fp
 80070d0:	f000 feda 	bl	8007e88 <_Bfree>
 80070d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	1e2b      	subs	r3, r5, #0
 80070de:	bfb9      	ittee	lt
 80070e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070e4:	9303      	strlt	r3, [sp, #12]
 80070e6:	2300      	movge	r3, #0
 80070e8:	6033      	strge	r3, [r6, #0]
 80070ea:	9f03      	ldr	r7, [sp, #12]
 80070ec:	4b98      	ldr	r3, [pc, #608]	@ (8007350 <_dtoa_r+0x2d0>)
 80070ee:	bfbc      	itt	lt
 80070f0:	2201      	movlt	r2, #1
 80070f2:	6032      	strlt	r2, [r6, #0]
 80070f4:	43bb      	bics	r3, r7
 80070f6:	d112      	bne.n	800711e <_dtoa_r+0x9e>
 80070f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007104:	4323      	orrs	r3, r4
 8007106:	f000 854d 	beq.w	8007ba4 <_dtoa_r+0xb24>
 800710a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800710c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007364 <_dtoa_r+0x2e4>
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 854f 	beq.w	8007bb4 <_dtoa_r+0xb34>
 8007116:	f10a 0303 	add.w	r3, sl, #3
 800711a:	f000 bd49 	b.w	8007bb0 <_dtoa_r+0xb30>
 800711e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	ec51 0b17 	vmov	r0, r1, d7
 8007128:	2300      	movs	r3, #0
 800712a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800712e:	f7f9 fcd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007132:	4680      	mov	r8, r0
 8007134:	b158      	cbz	r0, 800714e <_dtoa_r+0xce>
 8007136:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007138:	2301      	movs	r3, #1
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800713e:	b113      	cbz	r3, 8007146 <_dtoa_r+0xc6>
 8007140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007142:	4b84      	ldr	r3, [pc, #528]	@ (8007354 <_dtoa_r+0x2d4>)
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007368 <_dtoa_r+0x2e8>
 800714a:	f000 bd33 	b.w	8007bb4 <_dtoa_r+0xb34>
 800714e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007152:	aa16      	add	r2, sp, #88	@ 0x58
 8007154:	a917      	add	r1, sp, #92	@ 0x5c
 8007156:	4658      	mov	r0, fp
 8007158:	f001 fa3a 	bl	80085d0 <__d2b>
 800715c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007160:	4681      	mov	r9, r0
 8007162:	2e00      	cmp	r6, #0
 8007164:	d077      	beq.n	8007256 <_dtoa_r+0x1d6>
 8007166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007168:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800716c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007174:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007178:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800717c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007180:	4619      	mov	r1, r3
 8007182:	2200      	movs	r2, #0
 8007184:	4b74      	ldr	r3, [pc, #464]	@ (8007358 <_dtoa_r+0x2d8>)
 8007186:	f7f9 f887 	bl	8000298 <__aeabi_dsub>
 800718a:	a369      	add	r3, pc, #420	@ (adr r3, 8007330 <_dtoa_r+0x2b0>)
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	f7f9 fa3a 	bl	8000608 <__aeabi_dmul>
 8007194:	a368      	add	r3, pc, #416	@ (adr r3, 8007338 <_dtoa_r+0x2b8>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f7f9 f87f 	bl	800029c <__adddf3>
 800719e:	4604      	mov	r4, r0
 80071a0:	4630      	mov	r0, r6
 80071a2:	460d      	mov	r5, r1
 80071a4:	f7f9 f9c6 	bl	8000534 <__aeabi_i2d>
 80071a8:	a365      	add	r3, pc, #404	@ (adr r3, 8007340 <_dtoa_r+0x2c0>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 fa2b 	bl	8000608 <__aeabi_dmul>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7f9 f86f 	bl	800029c <__adddf3>
 80071be:	4604      	mov	r4, r0
 80071c0:	460d      	mov	r5, r1
 80071c2:	f7f9 fcd1 	bl	8000b68 <__aeabi_d2iz>
 80071c6:	2200      	movs	r2, #0
 80071c8:	4607      	mov	r7, r0
 80071ca:	2300      	movs	r3, #0
 80071cc:	4620      	mov	r0, r4
 80071ce:	4629      	mov	r1, r5
 80071d0:	f7f9 fc8c 	bl	8000aec <__aeabi_dcmplt>
 80071d4:	b140      	cbz	r0, 80071e8 <_dtoa_r+0x168>
 80071d6:	4638      	mov	r0, r7
 80071d8:	f7f9 f9ac 	bl	8000534 <__aeabi_i2d>
 80071dc:	4622      	mov	r2, r4
 80071de:	462b      	mov	r3, r5
 80071e0:	f7f9 fc7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80071e4:	b900      	cbnz	r0, 80071e8 <_dtoa_r+0x168>
 80071e6:	3f01      	subs	r7, #1
 80071e8:	2f16      	cmp	r7, #22
 80071ea:	d851      	bhi.n	8007290 <_dtoa_r+0x210>
 80071ec:	4b5b      	ldr	r3, [pc, #364]	@ (800735c <_dtoa_r+0x2dc>)
 80071ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071fa:	f7f9 fc77 	bl	8000aec <__aeabi_dcmplt>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d048      	beq.n	8007294 <_dtoa_r+0x214>
 8007202:	3f01      	subs	r7, #1
 8007204:	2300      	movs	r3, #0
 8007206:	9312      	str	r3, [sp, #72]	@ 0x48
 8007208:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800720a:	1b9b      	subs	r3, r3, r6
 800720c:	1e5a      	subs	r2, r3, #1
 800720e:	bf44      	itt	mi
 8007210:	f1c3 0801 	rsbmi	r8, r3, #1
 8007214:	2300      	movmi	r3, #0
 8007216:	9208      	str	r2, [sp, #32]
 8007218:	bf54      	ite	pl
 800721a:	f04f 0800 	movpl.w	r8, #0
 800721e:	9308      	strmi	r3, [sp, #32]
 8007220:	2f00      	cmp	r7, #0
 8007222:	db39      	blt.n	8007298 <_dtoa_r+0x218>
 8007224:	9b08      	ldr	r3, [sp, #32]
 8007226:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007228:	443b      	add	r3, r7
 800722a:	9308      	str	r3, [sp, #32]
 800722c:	2300      	movs	r3, #0
 800722e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007232:	2b09      	cmp	r3, #9
 8007234:	d864      	bhi.n	8007300 <_dtoa_r+0x280>
 8007236:	2b05      	cmp	r3, #5
 8007238:	bfc4      	itt	gt
 800723a:	3b04      	subgt	r3, #4
 800723c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800723e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007240:	f1a3 0302 	sub.w	r3, r3, #2
 8007244:	bfcc      	ite	gt
 8007246:	2400      	movgt	r4, #0
 8007248:	2401      	movle	r4, #1
 800724a:	2b03      	cmp	r3, #3
 800724c:	d863      	bhi.n	8007316 <_dtoa_r+0x296>
 800724e:	e8df f003 	tbb	[pc, r3]
 8007252:	372a      	.short	0x372a
 8007254:	5535      	.short	0x5535
 8007256:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800725a:	441e      	add	r6, r3
 800725c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007260:	2b20      	cmp	r3, #32
 8007262:	bfc1      	itttt	gt
 8007264:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007268:	409f      	lslgt	r7, r3
 800726a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800726e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007272:	bfd6      	itet	le
 8007274:	f1c3 0320 	rsble	r3, r3, #32
 8007278:	ea47 0003 	orrgt.w	r0, r7, r3
 800727c:	fa04 f003 	lslle.w	r0, r4, r3
 8007280:	f7f9 f948 	bl	8000514 <__aeabi_ui2d>
 8007284:	2201      	movs	r2, #1
 8007286:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800728a:	3e01      	subs	r6, #1
 800728c:	9214      	str	r2, [sp, #80]	@ 0x50
 800728e:	e777      	b.n	8007180 <_dtoa_r+0x100>
 8007290:	2301      	movs	r3, #1
 8007292:	e7b8      	b.n	8007206 <_dtoa_r+0x186>
 8007294:	9012      	str	r0, [sp, #72]	@ 0x48
 8007296:	e7b7      	b.n	8007208 <_dtoa_r+0x188>
 8007298:	427b      	negs	r3, r7
 800729a:	930a      	str	r3, [sp, #40]	@ 0x28
 800729c:	2300      	movs	r3, #0
 800729e:	eba8 0807 	sub.w	r8, r8, r7
 80072a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072a4:	e7c4      	b.n	8007230 <_dtoa_r+0x1b0>
 80072a6:	2300      	movs	r3, #0
 80072a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dc35      	bgt.n	800731c <_dtoa_r+0x29c>
 80072b0:	2301      	movs	r3, #1
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	9307      	str	r3, [sp, #28]
 80072b6:	461a      	mov	r2, r3
 80072b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80072ba:	e00b      	b.n	80072d4 <_dtoa_r+0x254>
 80072bc:	2301      	movs	r3, #1
 80072be:	e7f3      	b.n	80072a8 <_dtoa_r+0x228>
 80072c0:	2300      	movs	r3, #0
 80072c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072c6:	18fb      	adds	r3, r7, r3
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	3301      	adds	r3, #1
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	9307      	str	r3, [sp, #28]
 80072d0:	bfb8      	it	lt
 80072d2:	2301      	movlt	r3, #1
 80072d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80072d8:	2100      	movs	r1, #0
 80072da:	2204      	movs	r2, #4
 80072dc:	f102 0514 	add.w	r5, r2, #20
 80072e0:	429d      	cmp	r5, r3
 80072e2:	d91f      	bls.n	8007324 <_dtoa_r+0x2a4>
 80072e4:	6041      	str	r1, [r0, #4]
 80072e6:	4658      	mov	r0, fp
 80072e8:	f000 fd8e 	bl	8007e08 <_Balloc>
 80072ec:	4682      	mov	sl, r0
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d13c      	bne.n	800736c <_dtoa_r+0x2ec>
 80072f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007360 <_dtoa_r+0x2e0>)
 80072f4:	4602      	mov	r2, r0
 80072f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80072fa:	e6d8      	b.n	80070ae <_dtoa_r+0x2e>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e7e0      	b.n	80072c2 <_dtoa_r+0x242>
 8007300:	2401      	movs	r4, #1
 8007302:	2300      	movs	r3, #0
 8007304:	9309      	str	r3, [sp, #36]	@ 0x24
 8007306:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007308:	f04f 33ff 	mov.w	r3, #4294967295
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	9307      	str	r3, [sp, #28]
 8007310:	2200      	movs	r2, #0
 8007312:	2312      	movs	r3, #18
 8007314:	e7d0      	b.n	80072b8 <_dtoa_r+0x238>
 8007316:	2301      	movs	r3, #1
 8007318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800731a:	e7f5      	b.n	8007308 <_dtoa_r+0x288>
 800731c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	e7d7      	b.n	80072d4 <_dtoa_r+0x254>
 8007324:	3101      	adds	r1, #1
 8007326:	0052      	lsls	r2, r2, #1
 8007328:	e7d8      	b.n	80072dc <_dtoa_r+0x25c>
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w
 8007330:	636f4361 	.word	0x636f4361
 8007334:	3fd287a7 	.word	0x3fd287a7
 8007338:	8b60c8b3 	.word	0x8b60c8b3
 800733c:	3fc68a28 	.word	0x3fc68a28
 8007340:	509f79fb 	.word	0x509f79fb
 8007344:	3fd34413 	.word	0x3fd34413
 8007348:	0800ad66 	.word	0x0800ad66
 800734c:	0800ad7d 	.word	0x0800ad7d
 8007350:	7ff00000 	.word	0x7ff00000
 8007354:	0800ad31 	.word	0x0800ad31
 8007358:	3ff80000 	.word	0x3ff80000
 800735c:	0800ae78 	.word	0x0800ae78
 8007360:	0800add5 	.word	0x0800add5
 8007364:	0800ad62 	.word	0x0800ad62
 8007368:	0800ad30 	.word	0x0800ad30
 800736c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007370:	6018      	str	r0, [r3, #0]
 8007372:	9b07      	ldr	r3, [sp, #28]
 8007374:	2b0e      	cmp	r3, #14
 8007376:	f200 80a4 	bhi.w	80074c2 <_dtoa_r+0x442>
 800737a:	2c00      	cmp	r4, #0
 800737c:	f000 80a1 	beq.w	80074c2 <_dtoa_r+0x442>
 8007380:	2f00      	cmp	r7, #0
 8007382:	dd33      	ble.n	80073ec <_dtoa_r+0x36c>
 8007384:	4bad      	ldr	r3, [pc, #692]	@ (800763c <_dtoa_r+0x5bc>)
 8007386:	f007 020f 	and.w	r2, r7, #15
 800738a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800738e:	ed93 7b00 	vldr	d7, [r3]
 8007392:	05f8      	lsls	r0, r7, #23
 8007394:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007398:	ea4f 1427 	mov.w	r4, r7, asr #4
 800739c:	d516      	bpl.n	80073cc <_dtoa_r+0x34c>
 800739e:	4ba8      	ldr	r3, [pc, #672]	@ (8007640 <_dtoa_r+0x5c0>)
 80073a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073a8:	f7f9 fa58 	bl	800085c <__aeabi_ddiv>
 80073ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073b0:	f004 040f 	and.w	r4, r4, #15
 80073b4:	2603      	movs	r6, #3
 80073b6:	4da2      	ldr	r5, [pc, #648]	@ (8007640 <_dtoa_r+0x5c0>)
 80073b8:	b954      	cbnz	r4, 80073d0 <_dtoa_r+0x350>
 80073ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c2:	f7f9 fa4b 	bl	800085c <__aeabi_ddiv>
 80073c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ca:	e028      	b.n	800741e <_dtoa_r+0x39e>
 80073cc:	2602      	movs	r6, #2
 80073ce:	e7f2      	b.n	80073b6 <_dtoa_r+0x336>
 80073d0:	07e1      	lsls	r1, r4, #31
 80073d2:	d508      	bpl.n	80073e6 <_dtoa_r+0x366>
 80073d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073dc:	f7f9 f914 	bl	8000608 <__aeabi_dmul>
 80073e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073e4:	3601      	adds	r6, #1
 80073e6:	1064      	asrs	r4, r4, #1
 80073e8:	3508      	adds	r5, #8
 80073ea:	e7e5      	b.n	80073b8 <_dtoa_r+0x338>
 80073ec:	f000 80d2 	beq.w	8007594 <_dtoa_r+0x514>
 80073f0:	427c      	negs	r4, r7
 80073f2:	4b92      	ldr	r3, [pc, #584]	@ (800763c <_dtoa_r+0x5bc>)
 80073f4:	4d92      	ldr	r5, [pc, #584]	@ (8007640 <_dtoa_r+0x5c0>)
 80073f6:	f004 020f 	and.w	r2, r4, #15
 80073fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007406:	f7f9 f8ff 	bl	8000608 <__aeabi_dmul>
 800740a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800740e:	1124      	asrs	r4, r4, #4
 8007410:	2300      	movs	r3, #0
 8007412:	2602      	movs	r6, #2
 8007414:	2c00      	cmp	r4, #0
 8007416:	f040 80b2 	bne.w	800757e <_dtoa_r+0x4fe>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1d3      	bne.n	80073c6 <_dtoa_r+0x346>
 800741e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007420:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80b7 	beq.w	8007598 <_dtoa_r+0x518>
 800742a:	4b86      	ldr	r3, [pc, #536]	@ (8007644 <_dtoa_r+0x5c4>)
 800742c:	2200      	movs	r2, #0
 800742e:	4620      	mov	r0, r4
 8007430:	4629      	mov	r1, r5
 8007432:	f7f9 fb5b 	bl	8000aec <__aeabi_dcmplt>
 8007436:	2800      	cmp	r0, #0
 8007438:	f000 80ae 	beq.w	8007598 <_dtoa_r+0x518>
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80aa 	beq.w	8007598 <_dtoa_r+0x518>
 8007444:	9b00      	ldr	r3, [sp, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	dd37      	ble.n	80074ba <_dtoa_r+0x43a>
 800744a:	1e7b      	subs	r3, r7, #1
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	4620      	mov	r0, r4
 8007450:	4b7d      	ldr	r3, [pc, #500]	@ (8007648 <_dtoa_r+0x5c8>)
 8007452:	2200      	movs	r2, #0
 8007454:	4629      	mov	r1, r5
 8007456:	f7f9 f8d7 	bl	8000608 <__aeabi_dmul>
 800745a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800745e:	9c00      	ldr	r4, [sp, #0]
 8007460:	3601      	adds	r6, #1
 8007462:	4630      	mov	r0, r6
 8007464:	f7f9 f866 	bl	8000534 <__aeabi_i2d>
 8007468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800746c:	f7f9 f8cc 	bl	8000608 <__aeabi_dmul>
 8007470:	4b76      	ldr	r3, [pc, #472]	@ (800764c <_dtoa_r+0x5cc>)
 8007472:	2200      	movs	r2, #0
 8007474:	f7f8 ff12 	bl	800029c <__adddf3>
 8007478:	4605      	mov	r5, r0
 800747a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800747e:	2c00      	cmp	r4, #0
 8007480:	f040 808d 	bne.w	800759e <_dtoa_r+0x51e>
 8007484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007488:	4b71      	ldr	r3, [pc, #452]	@ (8007650 <_dtoa_r+0x5d0>)
 800748a:	2200      	movs	r2, #0
 800748c:	f7f8 ff04 	bl	8000298 <__aeabi_dsub>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007498:	462a      	mov	r2, r5
 800749a:	4633      	mov	r3, r6
 800749c:	f7f9 fb44 	bl	8000b28 <__aeabi_dcmpgt>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f040 828b 	bne.w	80079bc <_dtoa_r+0x93c>
 80074a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074aa:	462a      	mov	r2, r5
 80074ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80074b0:	f7f9 fb1c 	bl	8000aec <__aeabi_dcmplt>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	f040 8128 	bne.w	800770a <_dtoa_r+0x68a>
 80074ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80074be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80074c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f2c0 815a 	blt.w	800777e <_dtoa_r+0x6fe>
 80074ca:	2f0e      	cmp	r7, #14
 80074cc:	f300 8157 	bgt.w	800777e <_dtoa_r+0x6fe>
 80074d0:	4b5a      	ldr	r3, [pc, #360]	@ (800763c <_dtoa_r+0x5bc>)
 80074d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074d6:	ed93 7b00 	vldr	d7, [r3]
 80074da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074dc:	2b00      	cmp	r3, #0
 80074de:	ed8d 7b00 	vstr	d7, [sp]
 80074e2:	da03      	bge.n	80074ec <_dtoa_r+0x46c>
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f340 8101 	ble.w	80076ee <_dtoa_r+0x66e>
 80074ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074f0:	4656      	mov	r6, sl
 80074f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074f6:	4620      	mov	r0, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7f9 f9af 	bl	800085c <__aeabi_ddiv>
 80074fe:	f7f9 fb33 	bl	8000b68 <__aeabi_d2iz>
 8007502:	4680      	mov	r8, r0
 8007504:	f7f9 f816 	bl	8000534 <__aeabi_i2d>
 8007508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800750c:	f7f9 f87c 	bl	8000608 <__aeabi_dmul>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4620      	mov	r0, r4
 8007516:	4629      	mov	r1, r5
 8007518:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800751c:	f7f8 febc 	bl	8000298 <__aeabi_dsub>
 8007520:	f806 4b01 	strb.w	r4, [r6], #1
 8007524:	9d07      	ldr	r5, [sp, #28]
 8007526:	eba6 040a 	sub.w	r4, r6, sl
 800752a:	42a5      	cmp	r5, r4
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	f040 8117 	bne.w	8007762 <_dtoa_r+0x6e2>
 8007534:	f7f8 feb2 	bl	800029c <__adddf3>
 8007538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800753c:	4604      	mov	r4, r0
 800753e:	460d      	mov	r5, r1
 8007540:	f7f9 faf2 	bl	8000b28 <__aeabi_dcmpgt>
 8007544:	2800      	cmp	r0, #0
 8007546:	f040 80f9 	bne.w	800773c <_dtoa_r+0x6bc>
 800754a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f9 fac1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007556:	b118      	cbz	r0, 8007560 <_dtoa_r+0x4e0>
 8007558:	f018 0f01 	tst.w	r8, #1
 800755c:	f040 80ee 	bne.w	800773c <_dtoa_r+0x6bc>
 8007560:	4649      	mov	r1, r9
 8007562:	4658      	mov	r0, fp
 8007564:	f000 fc90 	bl	8007e88 <_Bfree>
 8007568:	2300      	movs	r3, #0
 800756a:	7033      	strb	r3, [r6, #0]
 800756c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800756e:	3701      	adds	r7, #1
 8007570:	601f      	str	r7, [r3, #0]
 8007572:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 831d 	beq.w	8007bb4 <_dtoa_r+0xb34>
 800757a:	601e      	str	r6, [r3, #0]
 800757c:	e31a      	b.n	8007bb4 <_dtoa_r+0xb34>
 800757e:	07e2      	lsls	r2, r4, #31
 8007580:	d505      	bpl.n	800758e <_dtoa_r+0x50e>
 8007582:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007586:	f7f9 f83f 	bl	8000608 <__aeabi_dmul>
 800758a:	3601      	adds	r6, #1
 800758c:	2301      	movs	r3, #1
 800758e:	1064      	asrs	r4, r4, #1
 8007590:	3508      	adds	r5, #8
 8007592:	e73f      	b.n	8007414 <_dtoa_r+0x394>
 8007594:	2602      	movs	r6, #2
 8007596:	e742      	b.n	800741e <_dtoa_r+0x39e>
 8007598:	9c07      	ldr	r4, [sp, #28]
 800759a:	9704      	str	r7, [sp, #16]
 800759c:	e761      	b.n	8007462 <_dtoa_r+0x3e2>
 800759e:	4b27      	ldr	r3, [pc, #156]	@ (800763c <_dtoa_r+0x5bc>)
 80075a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075aa:	4454      	add	r4, sl
 80075ac:	2900      	cmp	r1, #0
 80075ae:	d053      	beq.n	8007658 <_dtoa_r+0x5d8>
 80075b0:	4928      	ldr	r1, [pc, #160]	@ (8007654 <_dtoa_r+0x5d4>)
 80075b2:	2000      	movs	r0, #0
 80075b4:	f7f9 f952 	bl	800085c <__aeabi_ddiv>
 80075b8:	4633      	mov	r3, r6
 80075ba:	462a      	mov	r2, r5
 80075bc:	f7f8 fe6c 	bl	8000298 <__aeabi_dsub>
 80075c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075c4:	4656      	mov	r6, sl
 80075c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ca:	f7f9 facd 	bl	8000b68 <__aeabi_d2iz>
 80075ce:	4605      	mov	r5, r0
 80075d0:	f7f8 ffb0 	bl	8000534 <__aeabi_i2d>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075dc:	f7f8 fe5c 	bl	8000298 <__aeabi_dsub>
 80075e0:	3530      	adds	r5, #48	@ 0x30
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075ea:	f806 5b01 	strb.w	r5, [r6], #1
 80075ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075f2:	f7f9 fa7b 	bl	8000aec <__aeabi_dcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d171      	bne.n	80076de <_dtoa_r+0x65e>
 80075fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075fe:	4911      	ldr	r1, [pc, #68]	@ (8007644 <_dtoa_r+0x5c4>)
 8007600:	2000      	movs	r0, #0
 8007602:	f7f8 fe49 	bl	8000298 <__aeabi_dsub>
 8007606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800760a:	f7f9 fa6f 	bl	8000aec <__aeabi_dcmplt>
 800760e:	2800      	cmp	r0, #0
 8007610:	f040 8095 	bne.w	800773e <_dtoa_r+0x6be>
 8007614:	42a6      	cmp	r6, r4
 8007616:	f43f af50 	beq.w	80074ba <_dtoa_r+0x43a>
 800761a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800761e:	4b0a      	ldr	r3, [pc, #40]	@ (8007648 <_dtoa_r+0x5c8>)
 8007620:	2200      	movs	r2, #0
 8007622:	f7f8 fff1 	bl	8000608 <__aeabi_dmul>
 8007626:	4b08      	ldr	r3, [pc, #32]	@ (8007648 <_dtoa_r+0x5c8>)
 8007628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800762c:	2200      	movs	r2, #0
 800762e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007632:	f7f8 ffe9 	bl	8000608 <__aeabi_dmul>
 8007636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800763a:	e7c4      	b.n	80075c6 <_dtoa_r+0x546>
 800763c:	0800ae78 	.word	0x0800ae78
 8007640:	0800ae50 	.word	0x0800ae50
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	40240000 	.word	0x40240000
 800764c:	401c0000 	.word	0x401c0000
 8007650:	40140000 	.word	0x40140000
 8007654:	3fe00000 	.word	0x3fe00000
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	f7f8 ffd4 	bl	8000608 <__aeabi_dmul>
 8007660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007664:	9415      	str	r4, [sp, #84]	@ 0x54
 8007666:	4656      	mov	r6, sl
 8007668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800766c:	f7f9 fa7c 	bl	8000b68 <__aeabi_d2iz>
 8007670:	4605      	mov	r5, r0
 8007672:	f7f8 ff5f 	bl	8000534 <__aeabi_i2d>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800767e:	f7f8 fe0b 	bl	8000298 <__aeabi_dsub>
 8007682:	3530      	adds	r5, #48	@ 0x30
 8007684:	f806 5b01 	strb.w	r5, [r6], #1
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	42a6      	cmp	r6, r4
 800768e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	d124      	bne.n	80076e2 <_dtoa_r+0x662>
 8007698:	4bac      	ldr	r3, [pc, #688]	@ (800794c <_dtoa_r+0x8cc>)
 800769a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800769e:	f7f8 fdfd 	bl	800029c <__adddf3>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076aa:	f7f9 fa3d 	bl	8000b28 <__aeabi_dcmpgt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d145      	bne.n	800773e <_dtoa_r+0x6be>
 80076b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076b6:	49a5      	ldr	r1, [pc, #660]	@ (800794c <_dtoa_r+0x8cc>)
 80076b8:	2000      	movs	r0, #0
 80076ba:	f7f8 fded 	bl	8000298 <__aeabi_dsub>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c6:	f7f9 fa11 	bl	8000aec <__aeabi_dcmplt>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	f43f aef5 	beq.w	80074ba <_dtoa_r+0x43a>
 80076d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80076d2:	1e73      	subs	r3, r6, #1
 80076d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80076d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076da:	2b30      	cmp	r3, #48	@ 0x30
 80076dc:	d0f8      	beq.n	80076d0 <_dtoa_r+0x650>
 80076de:	9f04      	ldr	r7, [sp, #16]
 80076e0:	e73e      	b.n	8007560 <_dtoa_r+0x4e0>
 80076e2:	4b9b      	ldr	r3, [pc, #620]	@ (8007950 <_dtoa_r+0x8d0>)
 80076e4:	f7f8 ff90 	bl	8000608 <__aeabi_dmul>
 80076e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ec:	e7bc      	b.n	8007668 <_dtoa_r+0x5e8>
 80076ee:	d10c      	bne.n	800770a <_dtoa_r+0x68a>
 80076f0:	4b98      	ldr	r3, [pc, #608]	@ (8007954 <_dtoa_r+0x8d4>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076f8:	f7f8 ff86 	bl	8000608 <__aeabi_dmul>
 80076fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007700:	f7f9 fa08 	bl	8000b14 <__aeabi_dcmpge>
 8007704:	2800      	cmp	r0, #0
 8007706:	f000 8157 	beq.w	80079b8 <_dtoa_r+0x938>
 800770a:	2400      	movs	r4, #0
 800770c:	4625      	mov	r5, r4
 800770e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007710:	43db      	mvns	r3, r3
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	4656      	mov	r6, sl
 8007716:	2700      	movs	r7, #0
 8007718:	4621      	mov	r1, r4
 800771a:	4658      	mov	r0, fp
 800771c:	f000 fbb4 	bl	8007e88 <_Bfree>
 8007720:	2d00      	cmp	r5, #0
 8007722:	d0dc      	beq.n	80076de <_dtoa_r+0x65e>
 8007724:	b12f      	cbz	r7, 8007732 <_dtoa_r+0x6b2>
 8007726:	42af      	cmp	r7, r5
 8007728:	d003      	beq.n	8007732 <_dtoa_r+0x6b2>
 800772a:	4639      	mov	r1, r7
 800772c:	4658      	mov	r0, fp
 800772e:	f000 fbab 	bl	8007e88 <_Bfree>
 8007732:	4629      	mov	r1, r5
 8007734:	4658      	mov	r0, fp
 8007736:	f000 fba7 	bl	8007e88 <_Bfree>
 800773a:	e7d0      	b.n	80076de <_dtoa_r+0x65e>
 800773c:	9704      	str	r7, [sp, #16]
 800773e:	4633      	mov	r3, r6
 8007740:	461e      	mov	r6, r3
 8007742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007746:	2a39      	cmp	r2, #57	@ 0x39
 8007748:	d107      	bne.n	800775a <_dtoa_r+0x6da>
 800774a:	459a      	cmp	sl, r3
 800774c:	d1f8      	bne.n	8007740 <_dtoa_r+0x6c0>
 800774e:	9a04      	ldr	r2, [sp, #16]
 8007750:	3201      	adds	r2, #1
 8007752:	9204      	str	r2, [sp, #16]
 8007754:	2230      	movs	r2, #48	@ 0x30
 8007756:	f88a 2000 	strb.w	r2, [sl]
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	3201      	adds	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e7bd      	b.n	80076de <_dtoa_r+0x65e>
 8007762:	4b7b      	ldr	r3, [pc, #492]	@ (8007950 <_dtoa_r+0x8d0>)
 8007764:	2200      	movs	r2, #0
 8007766:	f7f8 ff4f 	bl	8000608 <__aeabi_dmul>
 800776a:	2200      	movs	r2, #0
 800776c:	2300      	movs	r3, #0
 800776e:	4604      	mov	r4, r0
 8007770:	460d      	mov	r5, r1
 8007772:	f7f9 f9b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007776:	2800      	cmp	r0, #0
 8007778:	f43f aebb 	beq.w	80074f2 <_dtoa_r+0x472>
 800777c:	e6f0      	b.n	8007560 <_dtoa_r+0x4e0>
 800777e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007780:	2a00      	cmp	r2, #0
 8007782:	f000 80db 	beq.w	800793c <_dtoa_r+0x8bc>
 8007786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007788:	2a01      	cmp	r2, #1
 800778a:	f300 80bf 	bgt.w	800790c <_dtoa_r+0x88c>
 800778e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007790:	2a00      	cmp	r2, #0
 8007792:	f000 80b7 	beq.w	8007904 <_dtoa_r+0x884>
 8007796:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800779a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800779c:	4646      	mov	r6, r8
 800779e:	9a08      	ldr	r2, [sp, #32]
 80077a0:	2101      	movs	r1, #1
 80077a2:	441a      	add	r2, r3
 80077a4:	4658      	mov	r0, fp
 80077a6:	4498      	add	r8, r3
 80077a8:	9208      	str	r2, [sp, #32]
 80077aa:	f000 fc6b 	bl	8008084 <__i2b>
 80077ae:	4605      	mov	r5, r0
 80077b0:	b15e      	cbz	r6, 80077ca <_dtoa_r+0x74a>
 80077b2:	9b08      	ldr	r3, [sp, #32]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd08      	ble.n	80077ca <_dtoa_r+0x74a>
 80077b8:	42b3      	cmp	r3, r6
 80077ba:	9a08      	ldr	r2, [sp, #32]
 80077bc:	bfa8      	it	ge
 80077be:	4633      	movge	r3, r6
 80077c0:	eba8 0803 	sub.w	r8, r8, r3
 80077c4:	1af6      	subs	r6, r6, r3
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	9308      	str	r3, [sp, #32]
 80077ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077cc:	b1f3      	cbz	r3, 800780c <_dtoa_r+0x78c>
 80077ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80b7 	beq.w	8007944 <_dtoa_r+0x8c4>
 80077d6:	b18c      	cbz	r4, 80077fc <_dtoa_r+0x77c>
 80077d8:	4629      	mov	r1, r5
 80077da:	4622      	mov	r2, r4
 80077dc:	4658      	mov	r0, fp
 80077de:	f000 fd11 	bl	8008204 <__pow5mult>
 80077e2:	464a      	mov	r2, r9
 80077e4:	4601      	mov	r1, r0
 80077e6:	4605      	mov	r5, r0
 80077e8:	4658      	mov	r0, fp
 80077ea:	f000 fc61 	bl	80080b0 <__multiply>
 80077ee:	4649      	mov	r1, r9
 80077f0:	9004      	str	r0, [sp, #16]
 80077f2:	4658      	mov	r0, fp
 80077f4:	f000 fb48 	bl	8007e88 <_Bfree>
 80077f8:	9b04      	ldr	r3, [sp, #16]
 80077fa:	4699      	mov	r9, r3
 80077fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077fe:	1b1a      	subs	r2, r3, r4
 8007800:	d004      	beq.n	800780c <_dtoa_r+0x78c>
 8007802:	4649      	mov	r1, r9
 8007804:	4658      	mov	r0, fp
 8007806:	f000 fcfd 	bl	8008204 <__pow5mult>
 800780a:	4681      	mov	r9, r0
 800780c:	2101      	movs	r1, #1
 800780e:	4658      	mov	r0, fp
 8007810:	f000 fc38 	bl	8008084 <__i2b>
 8007814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007816:	4604      	mov	r4, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 81cf 	beq.w	8007bbc <_dtoa_r+0xb3c>
 800781e:	461a      	mov	r2, r3
 8007820:	4601      	mov	r1, r0
 8007822:	4658      	mov	r0, fp
 8007824:	f000 fcee 	bl	8008204 <__pow5mult>
 8007828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800782a:	2b01      	cmp	r3, #1
 800782c:	4604      	mov	r4, r0
 800782e:	f300 8095 	bgt.w	800795c <_dtoa_r+0x8dc>
 8007832:	9b02      	ldr	r3, [sp, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 8087 	bne.w	8007948 <_dtoa_r+0x8c8>
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007840:	2b00      	cmp	r3, #0
 8007842:	f040 8089 	bne.w	8007958 <_dtoa_r+0x8d8>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800784c:	0d1b      	lsrs	r3, r3, #20
 800784e:	051b      	lsls	r3, r3, #20
 8007850:	b12b      	cbz	r3, 800785e <_dtoa_r+0x7de>
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	3301      	adds	r3, #1
 8007856:	9308      	str	r3, [sp, #32]
 8007858:	f108 0801 	add.w	r8, r8, #1
 800785c:	2301      	movs	r3, #1
 800785e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 81b0 	beq.w	8007bc8 <_dtoa_r+0xb48>
 8007868:	6923      	ldr	r3, [r4, #16]
 800786a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800786e:	6918      	ldr	r0, [r3, #16]
 8007870:	f000 fbbc 	bl	8007fec <__hi0bits>
 8007874:	f1c0 0020 	rsb	r0, r0, #32
 8007878:	9b08      	ldr	r3, [sp, #32]
 800787a:	4418      	add	r0, r3
 800787c:	f010 001f 	ands.w	r0, r0, #31
 8007880:	d077      	beq.n	8007972 <_dtoa_r+0x8f2>
 8007882:	f1c0 0320 	rsb	r3, r0, #32
 8007886:	2b04      	cmp	r3, #4
 8007888:	dd6b      	ble.n	8007962 <_dtoa_r+0x8e2>
 800788a:	9b08      	ldr	r3, [sp, #32]
 800788c:	f1c0 001c 	rsb	r0, r0, #28
 8007890:	4403      	add	r3, r0
 8007892:	4480      	add	r8, r0
 8007894:	4406      	add	r6, r0
 8007896:	9308      	str	r3, [sp, #32]
 8007898:	f1b8 0f00 	cmp.w	r8, #0
 800789c:	dd05      	ble.n	80078aa <_dtoa_r+0x82a>
 800789e:	4649      	mov	r1, r9
 80078a0:	4642      	mov	r2, r8
 80078a2:	4658      	mov	r0, fp
 80078a4:	f000 fd08 	bl	80082b8 <__lshift>
 80078a8:	4681      	mov	r9, r0
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd05      	ble.n	80078bc <_dtoa_r+0x83c>
 80078b0:	4621      	mov	r1, r4
 80078b2:	461a      	mov	r2, r3
 80078b4:	4658      	mov	r0, fp
 80078b6:	f000 fcff 	bl	80082b8 <__lshift>
 80078ba:	4604      	mov	r4, r0
 80078bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d059      	beq.n	8007976 <_dtoa_r+0x8f6>
 80078c2:	4621      	mov	r1, r4
 80078c4:	4648      	mov	r0, r9
 80078c6:	f000 fd63 	bl	8008390 <__mcmp>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	da53      	bge.n	8007976 <_dtoa_r+0x8f6>
 80078ce:	1e7b      	subs	r3, r7, #1
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	4649      	mov	r1, r9
 80078d4:	2300      	movs	r3, #0
 80078d6:	220a      	movs	r2, #10
 80078d8:	4658      	mov	r0, fp
 80078da:	f000 faf7 	bl	8007ecc <__multadd>
 80078de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078e0:	4681      	mov	r9, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8172 	beq.w	8007bcc <_dtoa_r+0xb4c>
 80078e8:	2300      	movs	r3, #0
 80078ea:	4629      	mov	r1, r5
 80078ec:	220a      	movs	r2, #10
 80078ee:	4658      	mov	r0, fp
 80078f0:	f000 faec 	bl	8007ecc <__multadd>
 80078f4:	9b00      	ldr	r3, [sp, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	4605      	mov	r5, r0
 80078fa:	dc67      	bgt.n	80079cc <_dtoa_r+0x94c>
 80078fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dc41      	bgt.n	8007986 <_dtoa_r+0x906>
 8007902:	e063      	b.n	80079cc <_dtoa_r+0x94c>
 8007904:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007906:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800790a:	e746      	b.n	800779a <_dtoa_r+0x71a>
 800790c:	9b07      	ldr	r3, [sp, #28]
 800790e:	1e5c      	subs	r4, r3, #1
 8007910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007912:	42a3      	cmp	r3, r4
 8007914:	bfbf      	itttt	lt
 8007916:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007918:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800791a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800791c:	1ae3      	sublt	r3, r4, r3
 800791e:	bfb4      	ite	lt
 8007920:	18d2      	addlt	r2, r2, r3
 8007922:	1b1c      	subge	r4, r3, r4
 8007924:	9b07      	ldr	r3, [sp, #28]
 8007926:	bfbc      	itt	lt
 8007928:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800792a:	2400      	movlt	r4, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	bfb5      	itete	lt
 8007930:	eba8 0603 	sublt.w	r6, r8, r3
 8007934:	9b07      	ldrge	r3, [sp, #28]
 8007936:	2300      	movlt	r3, #0
 8007938:	4646      	movge	r6, r8
 800793a:	e730      	b.n	800779e <_dtoa_r+0x71e>
 800793c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800793e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007940:	4646      	mov	r6, r8
 8007942:	e735      	b.n	80077b0 <_dtoa_r+0x730>
 8007944:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007946:	e75c      	b.n	8007802 <_dtoa_r+0x782>
 8007948:	2300      	movs	r3, #0
 800794a:	e788      	b.n	800785e <_dtoa_r+0x7de>
 800794c:	3fe00000 	.word	0x3fe00000
 8007950:	40240000 	.word	0x40240000
 8007954:	40140000 	.word	0x40140000
 8007958:	9b02      	ldr	r3, [sp, #8]
 800795a:	e780      	b.n	800785e <_dtoa_r+0x7de>
 800795c:	2300      	movs	r3, #0
 800795e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007960:	e782      	b.n	8007868 <_dtoa_r+0x7e8>
 8007962:	d099      	beq.n	8007898 <_dtoa_r+0x818>
 8007964:	9a08      	ldr	r2, [sp, #32]
 8007966:	331c      	adds	r3, #28
 8007968:	441a      	add	r2, r3
 800796a:	4498      	add	r8, r3
 800796c:	441e      	add	r6, r3
 800796e:	9208      	str	r2, [sp, #32]
 8007970:	e792      	b.n	8007898 <_dtoa_r+0x818>
 8007972:	4603      	mov	r3, r0
 8007974:	e7f6      	b.n	8007964 <_dtoa_r+0x8e4>
 8007976:	9b07      	ldr	r3, [sp, #28]
 8007978:	9704      	str	r7, [sp, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	dc20      	bgt.n	80079c0 <_dtoa_r+0x940>
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007982:	2b02      	cmp	r3, #2
 8007984:	dd1e      	ble.n	80079c4 <_dtoa_r+0x944>
 8007986:	9b00      	ldr	r3, [sp, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f47f aec0 	bne.w	800770e <_dtoa_r+0x68e>
 800798e:	4621      	mov	r1, r4
 8007990:	2205      	movs	r2, #5
 8007992:	4658      	mov	r0, fp
 8007994:	f000 fa9a 	bl	8007ecc <__multadd>
 8007998:	4601      	mov	r1, r0
 800799a:	4604      	mov	r4, r0
 800799c:	4648      	mov	r0, r9
 800799e:	f000 fcf7 	bl	8008390 <__mcmp>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	f77f aeb3 	ble.w	800770e <_dtoa_r+0x68e>
 80079a8:	4656      	mov	r6, sl
 80079aa:	2331      	movs	r3, #49	@ 0x31
 80079ac:	f806 3b01 	strb.w	r3, [r6], #1
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	3301      	adds	r3, #1
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	e6ae      	b.n	8007716 <_dtoa_r+0x696>
 80079b8:	9c07      	ldr	r4, [sp, #28]
 80079ba:	9704      	str	r7, [sp, #16]
 80079bc:	4625      	mov	r5, r4
 80079be:	e7f3      	b.n	80079a8 <_dtoa_r+0x928>
 80079c0:	9b07      	ldr	r3, [sp, #28]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8104 	beq.w	8007bd4 <_dtoa_r+0xb54>
 80079cc:	2e00      	cmp	r6, #0
 80079ce:	dd05      	ble.n	80079dc <_dtoa_r+0x95c>
 80079d0:	4629      	mov	r1, r5
 80079d2:	4632      	mov	r2, r6
 80079d4:	4658      	mov	r0, fp
 80079d6:	f000 fc6f 	bl	80082b8 <__lshift>
 80079da:	4605      	mov	r5, r0
 80079dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d05a      	beq.n	8007a98 <_dtoa_r+0xa18>
 80079e2:	6869      	ldr	r1, [r5, #4]
 80079e4:	4658      	mov	r0, fp
 80079e6:	f000 fa0f 	bl	8007e08 <_Balloc>
 80079ea:	4606      	mov	r6, r0
 80079ec:	b928      	cbnz	r0, 80079fa <_dtoa_r+0x97a>
 80079ee:	4b84      	ldr	r3, [pc, #528]	@ (8007c00 <_dtoa_r+0xb80>)
 80079f0:	4602      	mov	r2, r0
 80079f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80079f6:	f7ff bb5a 	b.w	80070ae <_dtoa_r+0x2e>
 80079fa:	692a      	ldr	r2, [r5, #16]
 80079fc:	3202      	adds	r2, #2
 80079fe:	0092      	lsls	r2, r2, #2
 8007a00:	f105 010c 	add.w	r1, r5, #12
 8007a04:	300c      	adds	r0, #12
 8007a06:	f001 ff75 	bl	80098f4 <memcpy>
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4658      	mov	r0, fp
 8007a10:	f000 fc52 	bl	80082b8 <__lshift>
 8007a14:	f10a 0301 	add.w	r3, sl, #1
 8007a18:	9307      	str	r3, [sp, #28]
 8007a1a:	9b00      	ldr	r3, [sp, #0]
 8007a1c:	4453      	add	r3, sl
 8007a1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	462f      	mov	r7, r5
 8007a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	9b07      	ldr	r3, [sp, #28]
 8007a2e:	4621      	mov	r1, r4
 8007a30:	3b01      	subs	r3, #1
 8007a32:	4648      	mov	r0, r9
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	f7ff fa9b 	bl	8006f70 <quorem>
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	9002      	str	r0, [sp, #8]
 8007a3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a42:	4648      	mov	r0, r9
 8007a44:	f000 fca4 	bl	8008390 <__mcmp>
 8007a48:	462a      	mov	r2, r5
 8007a4a:	9008      	str	r0, [sp, #32]
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4658      	mov	r0, fp
 8007a50:	f000 fcba 	bl	80083c8 <__mdiff>
 8007a54:	68c2      	ldr	r2, [r0, #12]
 8007a56:	4606      	mov	r6, r0
 8007a58:	bb02      	cbnz	r2, 8007a9c <_dtoa_r+0xa1c>
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	4648      	mov	r0, r9
 8007a5e:	f000 fc97 	bl	8008390 <__mcmp>
 8007a62:	4602      	mov	r2, r0
 8007a64:	4631      	mov	r1, r6
 8007a66:	4658      	mov	r0, fp
 8007a68:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a6a:	f000 fa0d 	bl	8007e88 <_Bfree>
 8007a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a72:	9e07      	ldr	r6, [sp, #28]
 8007a74:	ea43 0102 	orr.w	r1, r3, r2
 8007a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7a:	4319      	orrs	r1, r3
 8007a7c:	d110      	bne.n	8007aa0 <_dtoa_r+0xa20>
 8007a7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a82:	d029      	beq.n	8007ad8 <_dtoa_r+0xa58>
 8007a84:	9b08      	ldr	r3, [sp, #32]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dd02      	ble.n	8007a90 <_dtoa_r+0xa10>
 8007a8a:	9b02      	ldr	r3, [sp, #8]
 8007a8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007a90:	9b00      	ldr	r3, [sp, #0]
 8007a92:	f883 8000 	strb.w	r8, [r3]
 8007a96:	e63f      	b.n	8007718 <_dtoa_r+0x698>
 8007a98:	4628      	mov	r0, r5
 8007a9a:	e7bb      	b.n	8007a14 <_dtoa_r+0x994>
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	e7e1      	b.n	8007a64 <_dtoa_r+0x9e4>
 8007aa0:	9b08      	ldr	r3, [sp, #32]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	db04      	blt.n	8007ab0 <_dtoa_r+0xa30>
 8007aa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007aac:	430b      	orrs	r3, r1
 8007aae:	d120      	bne.n	8007af2 <_dtoa_r+0xa72>
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	dded      	ble.n	8007a90 <_dtoa_r+0xa10>
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	4658      	mov	r0, fp
 8007aba:	f000 fbfd 	bl	80082b8 <__lshift>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4681      	mov	r9, r0
 8007ac2:	f000 fc65 	bl	8008390 <__mcmp>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	dc03      	bgt.n	8007ad2 <_dtoa_r+0xa52>
 8007aca:	d1e1      	bne.n	8007a90 <_dtoa_r+0xa10>
 8007acc:	f018 0f01 	tst.w	r8, #1
 8007ad0:	d0de      	beq.n	8007a90 <_dtoa_r+0xa10>
 8007ad2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ad6:	d1d8      	bne.n	8007a8a <_dtoa_r+0xa0a>
 8007ad8:	9a00      	ldr	r2, [sp, #0]
 8007ada:	2339      	movs	r3, #57	@ 0x39
 8007adc:	7013      	strb	r3, [r2, #0]
 8007ade:	4633      	mov	r3, r6
 8007ae0:	461e      	mov	r6, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ae8:	2a39      	cmp	r2, #57	@ 0x39
 8007aea:	d052      	beq.n	8007b92 <_dtoa_r+0xb12>
 8007aec:	3201      	adds	r2, #1
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	e612      	b.n	8007718 <_dtoa_r+0x698>
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	dd07      	ble.n	8007b06 <_dtoa_r+0xa86>
 8007af6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007afa:	d0ed      	beq.n	8007ad8 <_dtoa_r+0xa58>
 8007afc:	9a00      	ldr	r2, [sp, #0]
 8007afe:	f108 0301 	add.w	r3, r8, #1
 8007b02:	7013      	strb	r3, [r2, #0]
 8007b04:	e608      	b.n	8007718 <_dtoa_r+0x698>
 8007b06:	9b07      	ldr	r3, [sp, #28]
 8007b08:	9a07      	ldr	r2, [sp, #28]
 8007b0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d028      	beq.n	8007b66 <_dtoa_r+0xae6>
 8007b14:	4649      	mov	r1, r9
 8007b16:	2300      	movs	r3, #0
 8007b18:	220a      	movs	r2, #10
 8007b1a:	4658      	mov	r0, fp
 8007b1c:	f000 f9d6 	bl	8007ecc <__multadd>
 8007b20:	42af      	cmp	r7, r5
 8007b22:	4681      	mov	r9, r0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	f04f 020a 	mov.w	r2, #10
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	4658      	mov	r0, fp
 8007b30:	d107      	bne.n	8007b42 <_dtoa_r+0xac2>
 8007b32:	f000 f9cb 	bl	8007ecc <__multadd>
 8007b36:	4607      	mov	r7, r0
 8007b38:	4605      	mov	r5, r0
 8007b3a:	9b07      	ldr	r3, [sp, #28]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	e774      	b.n	8007a2c <_dtoa_r+0x9ac>
 8007b42:	f000 f9c3 	bl	8007ecc <__multadd>
 8007b46:	4629      	mov	r1, r5
 8007b48:	4607      	mov	r7, r0
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	4658      	mov	r0, fp
 8007b50:	f000 f9bc 	bl	8007ecc <__multadd>
 8007b54:	4605      	mov	r5, r0
 8007b56:	e7f0      	b.n	8007b3a <_dtoa_r+0xaba>
 8007b58:	9b00      	ldr	r3, [sp, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfcc      	ite	gt
 8007b5e:	461e      	movgt	r6, r3
 8007b60:	2601      	movle	r6, #1
 8007b62:	4456      	add	r6, sl
 8007b64:	2700      	movs	r7, #0
 8007b66:	4649      	mov	r1, r9
 8007b68:	2201      	movs	r2, #1
 8007b6a:	4658      	mov	r0, fp
 8007b6c:	f000 fba4 	bl	80082b8 <__lshift>
 8007b70:	4621      	mov	r1, r4
 8007b72:	4681      	mov	r9, r0
 8007b74:	f000 fc0c 	bl	8008390 <__mcmp>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	dcb0      	bgt.n	8007ade <_dtoa_r+0xa5e>
 8007b7c:	d102      	bne.n	8007b84 <_dtoa_r+0xb04>
 8007b7e:	f018 0f01 	tst.w	r8, #1
 8007b82:	d1ac      	bne.n	8007ade <_dtoa_r+0xa5e>
 8007b84:	4633      	mov	r3, r6
 8007b86:	461e      	mov	r6, r3
 8007b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b8c:	2a30      	cmp	r2, #48	@ 0x30
 8007b8e:	d0fa      	beq.n	8007b86 <_dtoa_r+0xb06>
 8007b90:	e5c2      	b.n	8007718 <_dtoa_r+0x698>
 8007b92:	459a      	cmp	sl, r3
 8007b94:	d1a4      	bne.n	8007ae0 <_dtoa_r+0xa60>
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	2331      	movs	r3, #49	@ 0x31
 8007b9e:	f88a 3000 	strb.w	r3, [sl]
 8007ba2:	e5b9      	b.n	8007718 <_dtoa_r+0x698>
 8007ba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ba6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c04 <_dtoa_r+0xb84>
 8007baa:	b11b      	cbz	r3, 8007bb4 <_dtoa_r+0xb34>
 8007bac:	f10a 0308 	add.w	r3, sl, #8
 8007bb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	b019      	add	sp, #100	@ 0x64
 8007bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	f77f ae37 	ble.w	8007832 <_dtoa_r+0x7b2>
 8007bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bc8:	2001      	movs	r0, #1
 8007bca:	e655      	b.n	8007878 <_dtoa_r+0x7f8>
 8007bcc:	9b00      	ldr	r3, [sp, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f77f aed6 	ble.w	8007980 <_dtoa_r+0x900>
 8007bd4:	4656      	mov	r6, sl
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4648      	mov	r0, r9
 8007bda:	f7ff f9c9 	bl	8006f70 <quorem>
 8007bde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007be2:	f806 8b01 	strb.w	r8, [r6], #1
 8007be6:	9b00      	ldr	r3, [sp, #0]
 8007be8:	eba6 020a 	sub.w	r2, r6, sl
 8007bec:	4293      	cmp	r3, r2
 8007bee:	ddb3      	ble.n	8007b58 <_dtoa_r+0xad8>
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	220a      	movs	r2, #10
 8007bf6:	4658      	mov	r0, fp
 8007bf8:	f000 f968 	bl	8007ecc <__multadd>
 8007bfc:	4681      	mov	r9, r0
 8007bfe:	e7ea      	b.n	8007bd6 <_dtoa_r+0xb56>
 8007c00:	0800add5 	.word	0x0800add5
 8007c04:	0800ad59 	.word	0x0800ad59

08007c08 <_free_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d041      	beq.n	8007c94 <_free_r+0x8c>
 8007c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c14:	1f0c      	subs	r4, r1, #4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bfb8      	it	lt
 8007c1a:	18e4      	addlt	r4, r4, r3
 8007c1c:	f000 f8e8 	bl	8007df0 <__malloc_lock>
 8007c20:	4a1d      	ldr	r2, [pc, #116]	@ (8007c98 <_free_r+0x90>)
 8007c22:	6813      	ldr	r3, [r2, #0]
 8007c24:	b933      	cbnz	r3, 8007c34 <_free_r+0x2c>
 8007c26:	6063      	str	r3, [r4, #4]
 8007c28:	6014      	str	r4, [r2, #0]
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c30:	f000 b8e4 	b.w	8007dfc <__malloc_unlock>
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	d908      	bls.n	8007c4a <_free_r+0x42>
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	1821      	adds	r1, r4, r0
 8007c3c:	428b      	cmp	r3, r1
 8007c3e:	bf01      	itttt	eq
 8007c40:	6819      	ldreq	r1, [r3, #0]
 8007c42:	685b      	ldreq	r3, [r3, #4]
 8007c44:	1809      	addeq	r1, r1, r0
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	e7ed      	b.n	8007c26 <_free_r+0x1e>
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	b10b      	cbz	r3, 8007c54 <_free_r+0x4c>
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d9fa      	bls.n	8007c4a <_free_r+0x42>
 8007c54:	6811      	ldr	r1, [r2, #0]
 8007c56:	1850      	adds	r0, r2, r1
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d10b      	bne.n	8007c74 <_free_r+0x6c>
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	4401      	add	r1, r0
 8007c60:	1850      	adds	r0, r2, r1
 8007c62:	4283      	cmp	r3, r0
 8007c64:	6011      	str	r1, [r2, #0]
 8007c66:	d1e0      	bne.n	8007c2a <_free_r+0x22>
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	6053      	str	r3, [r2, #4]
 8007c6e:	4408      	add	r0, r1
 8007c70:	6010      	str	r0, [r2, #0]
 8007c72:	e7da      	b.n	8007c2a <_free_r+0x22>
 8007c74:	d902      	bls.n	8007c7c <_free_r+0x74>
 8007c76:	230c      	movs	r3, #12
 8007c78:	602b      	str	r3, [r5, #0]
 8007c7a:	e7d6      	b.n	8007c2a <_free_r+0x22>
 8007c7c:	6820      	ldr	r0, [r4, #0]
 8007c7e:	1821      	adds	r1, r4, r0
 8007c80:	428b      	cmp	r3, r1
 8007c82:	bf04      	itt	eq
 8007c84:	6819      	ldreq	r1, [r3, #0]
 8007c86:	685b      	ldreq	r3, [r3, #4]
 8007c88:	6063      	str	r3, [r4, #4]
 8007c8a:	bf04      	itt	eq
 8007c8c:	1809      	addeq	r1, r1, r0
 8007c8e:	6021      	streq	r1, [r4, #0]
 8007c90:	6054      	str	r4, [r2, #4]
 8007c92:	e7ca      	b.n	8007c2a <_free_r+0x22>
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	bf00      	nop
 8007c98:	200005a4 	.word	0x200005a4

08007c9c <malloc>:
 8007c9c:	4b02      	ldr	r3, [pc, #8]	@ (8007ca8 <malloc+0xc>)
 8007c9e:	4601      	mov	r1, r0
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	f000 b825 	b.w	8007cf0 <_malloc_r>
 8007ca6:	bf00      	nop
 8007ca8:	200000a8 	.word	0x200000a8

08007cac <sbrk_aligned>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	4e0f      	ldr	r6, [pc, #60]	@ (8007cec <sbrk_aligned+0x40>)
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	6831      	ldr	r1, [r6, #0]
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	b911      	cbnz	r1, 8007cbe <sbrk_aligned+0x12>
 8007cb8:	f001 fe0c 	bl	80098d4 <_sbrk_r>
 8007cbc:	6030      	str	r0, [r6, #0]
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f001 fe07 	bl	80098d4 <_sbrk_r>
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	d103      	bne.n	8007cd2 <sbrk_aligned+0x26>
 8007cca:	f04f 34ff 	mov.w	r4, #4294967295
 8007cce:	4620      	mov	r0, r4
 8007cd0:	bd70      	pop	{r4, r5, r6, pc}
 8007cd2:	1cc4      	adds	r4, r0, #3
 8007cd4:	f024 0403 	bic.w	r4, r4, #3
 8007cd8:	42a0      	cmp	r0, r4
 8007cda:	d0f8      	beq.n	8007cce <sbrk_aligned+0x22>
 8007cdc:	1a21      	subs	r1, r4, r0
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f001 fdf8 	bl	80098d4 <_sbrk_r>
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	d1f2      	bne.n	8007cce <sbrk_aligned+0x22>
 8007ce8:	e7ef      	b.n	8007cca <sbrk_aligned+0x1e>
 8007cea:	bf00      	nop
 8007cec:	200005a0 	.word	0x200005a0

08007cf0 <_malloc_r>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	1ccd      	adds	r5, r1, #3
 8007cf6:	f025 0503 	bic.w	r5, r5, #3
 8007cfa:	3508      	adds	r5, #8
 8007cfc:	2d0c      	cmp	r5, #12
 8007cfe:	bf38      	it	cc
 8007d00:	250c      	movcc	r5, #12
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	4606      	mov	r6, r0
 8007d06:	db01      	blt.n	8007d0c <_malloc_r+0x1c>
 8007d08:	42a9      	cmp	r1, r5
 8007d0a:	d904      	bls.n	8007d16 <_malloc_r+0x26>
 8007d0c:	230c      	movs	r3, #12
 8007d0e:	6033      	str	r3, [r6, #0]
 8007d10:	2000      	movs	r0, #0
 8007d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007dec <_malloc_r+0xfc>
 8007d1a:	f000 f869 	bl	8007df0 <__malloc_lock>
 8007d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d22:	461c      	mov	r4, r3
 8007d24:	bb44      	cbnz	r4, 8007d78 <_malloc_r+0x88>
 8007d26:	4629      	mov	r1, r5
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7ff ffbf 	bl	8007cac <sbrk_aligned>
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	4604      	mov	r4, r0
 8007d32:	d158      	bne.n	8007de6 <_malloc_r+0xf6>
 8007d34:	f8d8 4000 	ldr.w	r4, [r8]
 8007d38:	4627      	mov	r7, r4
 8007d3a:	2f00      	cmp	r7, #0
 8007d3c:	d143      	bne.n	8007dc6 <_malloc_r+0xd6>
 8007d3e:	2c00      	cmp	r4, #0
 8007d40:	d04b      	beq.n	8007dda <_malloc_r+0xea>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	4639      	mov	r1, r7
 8007d46:	4630      	mov	r0, r6
 8007d48:	eb04 0903 	add.w	r9, r4, r3
 8007d4c:	f001 fdc2 	bl	80098d4 <_sbrk_r>
 8007d50:	4581      	cmp	r9, r0
 8007d52:	d142      	bne.n	8007dda <_malloc_r+0xea>
 8007d54:	6821      	ldr	r1, [r4, #0]
 8007d56:	1a6d      	subs	r5, r5, r1
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f7ff ffa6 	bl	8007cac <sbrk_aligned>
 8007d60:	3001      	adds	r0, #1
 8007d62:	d03a      	beq.n	8007dda <_malloc_r+0xea>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	442b      	add	r3, r5
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	bb62      	cbnz	r2, 8007dcc <_malloc_r+0xdc>
 8007d72:	f8c8 7000 	str.w	r7, [r8]
 8007d76:	e00f      	b.n	8007d98 <_malloc_r+0xa8>
 8007d78:	6822      	ldr	r2, [r4, #0]
 8007d7a:	1b52      	subs	r2, r2, r5
 8007d7c:	d420      	bmi.n	8007dc0 <_malloc_r+0xd0>
 8007d7e:	2a0b      	cmp	r2, #11
 8007d80:	d917      	bls.n	8007db2 <_malloc_r+0xc2>
 8007d82:	1961      	adds	r1, r4, r5
 8007d84:	42a3      	cmp	r3, r4
 8007d86:	6025      	str	r5, [r4, #0]
 8007d88:	bf18      	it	ne
 8007d8a:	6059      	strne	r1, [r3, #4]
 8007d8c:	6863      	ldr	r3, [r4, #4]
 8007d8e:	bf08      	it	eq
 8007d90:	f8c8 1000 	streq.w	r1, [r8]
 8007d94:	5162      	str	r2, [r4, r5]
 8007d96:	604b      	str	r3, [r1, #4]
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f000 f82f 	bl	8007dfc <__malloc_unlock>
 8007d9e:	f104 000b 	add.w	r0, r4, #11
 8007da2:	1d23      	adds	r3, r4, #4
 8007da4:	f020 0007 	bic.w	r0, r0, #7
 8007da8:	1ac2      	subs	r2, r0, r3
 8007daa:	bf1c      	itt	ne
 8007dac:	1a1b      	subne	r3, r3, r0
 8007dae:	50a3      	strne	r3, [r4, r2]
 8007db0:	e7af      	b.n	8007d12 <_malloc_r+0x22>
 8007db2:	6862      	ldr	r2, [r4, #4]
 8007db4:	42a3      	cmp	r3, r4
 8007db6:	bf0c      	ite	eq
 8007db8:	f8c8 2000 	streq.w	r2, [r8]
 8007dbc:	605a      	strne	r2, [r3, #4]
 8007dbe:	e7eb      	b.n	8007d98 <_malloc_r+0xa8>
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	6864      	ldr	r4, [r4, #4]
 8007dc4:	e7ae      	b.n	8007d24 <_malloc_r+0x34>
 8007dc6:	463c      	mov	r4, r7
 8007dc8:	687f      	ldr	r7, [r7, #4]
 8007dca:	e7b6      	b.n	8007d3a <_malloc_r+0x4a>
 8007dcc:	461a      	mov	r2, r3
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d1fb      	bne.n	8007dcc <_malloc_r+0xdc>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	6053      	str	r3, [r2, #4]
 8007dd8:	e7de      	b.n	8007d98 <_malloc_r+0xa8>
 8007dda:	230c      	movs	r3, #12
 8007ddc:	6033      	str	r3, [r6, #0]
 8007dde:	4630      	mov	r0, r6
 8007de0:	f000 f80c 	bl	8007dfc <__malloc_unlock>
 8007de4:	e794      	b.n	8007d10 <_malloc_r+0x20>
 8007de6:	6005      	str	r5, [r0, #0]
 8007de8:	e7d6      	b.n	8007d98 <_malloc_r+0xa8>
 8007dea:	bf00      	nop
 8007dec:	200005a4 	.word	0x200005a4

08007df0 <__malloc_lock>:
 8007df0:	4801      	ldr	r0, [pc, #4]	@ (8007df8 <__malloc_lock+0x8>)
 8007df2:	f7ff b8b4 	b.w	8006f5e <__retarget_lock_acquire_recursive>
 8007df6:	bf00      	nop
 8007df8:	2000059c 	.word	0x2000059c

08007dfc <__malloc_unlock>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	@ (8007e04 <__malloc_unlock+0x8>)
 8007dfe:	f7ff b8af 	b.w	8006f60 <__retarget_lock_release_recursive>
 8007e02:	bf00      	nop
 8007e04:	2000059c 	.word	0x2000059c

08007e08 <_Balloc>:
 8007e08:	b570      	push	{r4, r5, r6, lr}
 8007e0a:	69c6      	ldr	r6, [r0, #28]
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	b976      	cbnz	r6, 8007e30 <_Balloc+0x28>
 8007e12:	2010      	movs	r0, #16
 8007e14:	f7ff ff42 	bl	8007c9c <malloc>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	61e0      	str	r0, [r4, #28]
 8007e1c:	b920      	cbnz	r0, 8007e28 <_Balloc+0x20>
 8007e1e:	4b18      	ldr	r3, [pc, #96]	@ (8007e80 <_Balloc+0x78>)
 8007e20:	4818      	ldr	r0, [pc, #96]	@ (8007e84 <_Balloc+0x7c>)
 8007e22:	216b      	movs	r1, #107	@ 0x6b
 8007e24:	f001 fd7c 	bl	8009920 <__assert_func>
 8007e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e2c:	6006      	str	r6, [r0, #0]
 8007e2e:	60c6      	str	r6, [r0, #12]
 8007e30:	69e6      	ldr	r6, [r4, #28]
 8007e32:	68f3      	ldr	r3, [r6, #12]
 8007e34:	b183      	cbz	r3, 8007e58 <_Balloc+0x50>
 8007e36:	69e3      	ldr	r3, [r4, #28]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e3e:	b9b8      	cbnz	r0, 8007e70 <_Balloc+0x68>
 8007e40:	2101      	movs	r1, #1
 8007e42:	fa01 f605 	lsl.w	r6, r1, r5
 8007e46:	1d72      	adds	r2, r6, #5
 8007e48:	0092      	lsls	r2, r2, #2
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f001 fd86 	bl	800995c <_calloc_r>
 8007e50:	b160      	cbz	r0, 8007e6c <_Balloc+0x64>
 8007e52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e56:	e00e      	b.n	8007e76 <_Balloc+0x6e>
 8007e58:	2221      	movs	r2, #33	@ 0x21
 8007e5a:	2104      	movs	r1, #4
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f001 fd7d 	bl	800995c <_calloc_r>
 8007e62:	69e3      	ldr	r3, [r4, #28]
 8007e64:	60f0      	str	r0, [r6, #12]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1e4      	bne.n	8007e36 <_Balloc+0x2e>
 8007e6c:	2000      	movs	r0, #0
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}
 8007e70:	6802      	ldr	r2, [r0, #0]
 8007e72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e76:	2300      	movs	r3, #0
 8007e78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e7c:	e7f7      	b.n	8007e6e <_Balloc+0x66>
 8007e7e:	bf00      	nop
 8007e80:	0800ad66 	.word	0x0800ad66
 8007e84:	0800ade6 	.word	0x0800ade6

08007e88 <_Bfree>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	69c6      	ldr	r6, [r0, #28]
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	b976      	cbnz	r6, 8007eb0 <_Bfree+0x28>
 8007e92:	2010      	movs	r0, #16
 8007e94:	f7ff ff02 	bl	8007c9c <malloc>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	61e8      	str	r0, [r5, #28]
 8007e9c:	b920      	cbnz	r0, 8007ea8 <_Bfree+0x20>
 8007e9e:	4b09      	ldr	r3, [pc, #36]	@ (8007ec4 <_Bfree+0x3c>)
 8007ea0:	4809      	ldr	r0, [pc, #36]	@ (8007ec8 <_Bfree+0x40>)
 8007ea2:	218f      	movs	r1, #143	@ 0x8f
 8007ea4:	f001 fd3c 	bl	8009920 <__assert_func>
 8007ea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eac:	6006      	str	r6, [r0, #0]
 8007eae:	60c6      	str	r6, [r0, #12]
 8007eb0:	b13c      	cbz	r4, 8007ec2 <_Bfree+0x3a>
 8007eb2:	69eb      	ldr	r3, [r5, #28]
 8007eb4:	6862      	ldr	r2, [r4, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ebc:	6021      	str	r1, [r4, #0]
 8007ebe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	0800ad66 	.word	0x0800ad66
 8007ec8:	0800ade6 	.word	0x0800ade6

08007ecc <__multadd>:
 8007ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed0:	690d      	ldr	r5, [r1, #16]
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	460c      	mov	r4, r1
 8007ed6:	461e      	mov	r6, r3
 8007ed8:	f101 0c14 	add.w	ip, r1, #20
 8007edc:	2000      	movs	r0, #0
 8007ede:	f8dc 3000 	ldr.w	r3, [ip]
 8007ee2:	b299      	uxth	r1, r3
 8007ee4:	fb02 6101 	mla	r1, r2, r1, r6
 8007ee8:	0c1e      	lsrs	r6, r3, #16
 8007eea:	0c0b      	lsrs	r3, r1, #16
 8007eec:	fb02 3306 	mla	r3, r2, r6, r3
 8007ef0:	b289      	uxth	r1, r1
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ef8:	4285      	cmp	r5, r0
 8007efa:	f84c 1b04 	str.w	r1, [ip], #4
 8007efe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f02:	dcec      	bgt.n	8007ede <__multadd+0x12>
 8007f04:	b30e      	cbz	r6, 8007f4a <__multadd+0x7e>
 8007f06:	68a3      	ldr	r3, [r4, #8]
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	dc19      	bgt.n	8007f40 <__multadd+0x74>
 8007f0c:	6861      	ldr	r1, [r4, #4]
 8007f0e:	4638      	mov	r0, r7
 8007f10:	3101      	adds	r1, #1
 8007f12:	f7ff ff79 	bl	8007e08 <_Balloc>
 8007f16:	4680      	mov	r8, r0
 8007f18:	b928      	cbnz	r0, 8007f26 <__multadd+0x5a>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8007f50 <__multadd+0x84>)
 8007f1e:	480d      	ldr	r0, [pc, #52]	@ (8007f54 <__multadd+0x88>)
 8007f20:	21ba      	movs	r1, #186	@ 0xba
 8007f22:	f001 fcfd 	bl	8009920 <__assert_func>
 8007f26:	6922      	ldr	r2, [r4, #16]
 8007f28:	3202      	adds	r2, #2
 8007f2a:	f104 010c 	add.w	r1, r4, #12
 8007f2e:	0092      	lsls	r2, r2, #2
 8007f30:	300c      	adds	r0, #12
 8007f32:	f001 fcdf 	bl	80098f4 <memcpy>
 8007f36:	4621      	mov	r1, r4
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f7ff ffa5 	bl	8007e88 <_Bfree>
 8007f3e:	4644      	mov	r4, r8
 8007f40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f44:	3501      	adds	r5, #1
 8007f46:	615e      	str	r6, [r3, #20]
 8007f48:	6125      	str	r5, [r4, #16]
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f50:	0800add5 	.word	0x0800add5
 8007f54:	0800ade6 	.word	0x0800ade6

08007f58 <__s2b>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	4615      	mov	r5, r2
 8007f60:	461f      	mov	r7, r3
 8007f62:	2209      	movs	r2, #9
 8007f64:	3308      	adds	r3, #8
 8007f66:	4606      	mov	r6, r0
 8007f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	2201      	movs	r2, #1
 8007f70:	429a      	cmp	r2, r3
 8007f72:	db09      	blt.n	8007f88 <__s2b+0x30>
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7ff ff47 	bl	8007e08 <_Balloc>
 8007f7a:	b940      	cbnz	r0, 8007f8e <__s2b+0x36>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b19      	ldr	r3, [pc, #100]	@ (8007fe4 <__s2b+0x8c>)
 8007f80:	4819      	ldr	r0, [pc, #100]	@ (8007fe8 <__s2b+0x90>)
 8007f82:	21d3      	movs	r1, #211	@ 0xd3
 8007f84:	f001 fccc 	bl	8009920 <__assert_func>
 8007f88:	0052      	lsls	r2, r2, #1
 8007f8a:	3101      	adds	r1, #1
 8007f8c:	e7f0      	b.n	8007f70 <__s2b+0x18>
 8007f8e:	9b08      	ldr	r3, [sp, #32]
 8007f90:	6143      	str	r3, [r0, #20]
 8007f92:	2d09      	cmp	r5, #9
 8007f94:	f04f 0301 	mov.w	r3, #1
 8007f98:	6103      	str	r3, [r0, #16]
 8007f9a:	dd16      	ble.n	8007fca <__s2b+0x72>
 8007f9c:	f104 0909 	add.w	r9, r4, #9
 8007fa0:	46c8      	mov	r8, r9
 8007fa2:	442c      	add	r4, r5
 8007fa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007fa8:	4601      	mov	r1, r0
 8007faa:	3b30      	subs	r3, #48	@ 0x30
 8007fac:	220a      	movs	r2, #10
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ff8c 	bl	8007ecc <__multadd>
 8007fb4:	45a0      	cmp	r8, r4
 8007fb6:	d1f5      	bne.n	8007fa4 <__s2b+0x4c>
 8007fb8:	f1a5 0408 	sub.w	r4, r5, #8
 8007fbc:	444c      	add	r4, r9
 8007fbe:	1b2d      	subs	r5, r5, r4
 8007fc0:	1963      	adds	r3, r4, r5
 8007fc2:	42bb      	cmp	r3, r7
 8007fc4:	db04      	blt.n	8007fd0 <__s2b+0x78>
 8007fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fca:	340a      	adds	r4, #10
 8007fcc:	2509      	movs	r5, #9
 8007fce:	e7f6      	b.n	8007fbe <__s2b+0x66>
 8007fd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007fd4:	4601      	mov	r1, r0
 8007fd6:	3b30      	subs	r3, #48	@ 0x30
 8007fd8:	220a      	movs	r2, #10
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff ff76 	bl	8007ecc <__multadd>
 8007fe0:	e7ee      	b.n	8007fc0 <__s2b+0x68>
 8007fe2:	bf00      	nop
 8007fe4:	0800add5 	.word	0x0800add5
 8007fe8:	0800ade6 	.word	0x0800ade6

08007fec <__hi0bits>:
 8007fec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	bf36      	itet	cc
 8007ff4:	0403      	lslcc	r3, r0, #16
 8007ff6:	2000      	movcs	r0, #0
 8007ff8:	2010      	movcc	r0, #16
 8007ffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ffe:	bf3c      	itt	cc
 8008000:	021b      	lslcc	r3, r3, #8
 8008002:	3008      	addcc	r0, #8
 8008004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008008:	bf3c      	itt	cc
 800800a:	011b      	lslcc	r3, r3, #4
 800800c:	3004      	addcc	r0, #4
 800800e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008012:	bf3c      	itt	cc
 8008014:	009b      	lslcc	r3, r3, #2
 8008016:	3002      	addcc	r0, #2
 8008018:	2b00      	cmp	r3, #0
 800801a:	db05      	blt.n	8008028 <__hi0bits+0x3c>
 800801c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008020:	f100 0001 	add.w	r0, r0, #1
 8008024:	bf08      	it	eq
 8008026:	2020      	moveq	r0, #32
 8008028:	4770      	bx	lr

0800802a <__lo0bits>:
 800802a:	6803      	ldr	r3, [r0, #0]
 800802c:	4602      	mov	r2, r0
 800802e:	f013 0007 	ands.w	r0, r3, #7
 8008032:	d00b      	beq.n	800804c <__lo0bits+0x22>
 8008034:	07d9      	lsls	r1, r3, #31
 8008036:	d421      	bmi.n	800807c <__lo0bits+0x52>
 8008038:	0798      	lsls	r0, r3, #30
 800803a:	bf49      	itett	mi
 800803c:	085b      	lsrmi	r3, r3, #1
 800803e:	089b      	lsrpl	r3, r3, #2
 8008040:	2001      	movmi	r0, #1
 8008042:	6013      	strmi	r3, [r2, #0]
 8008044:	bf5c      	itt	pl
 8008046:	6013      	strpl	r3, [r2, #0]
 8008048:	2002      	movpl	r0, #2
 800804a:	4770      	bx	lr
 800804c:	b299      	uxth	r1, r3
 800804e:	b909      	cbnz	r1, 8008054 <__lo0bits+0x2a>
 8008050:	0c1b      	lsrs	r3, r3, #16
 8008052:	2010      	movs	r0, #16
 8008054:	b2d9      	uxtb	r1, r3
 8008056:	b909      	cbnz	r1, 800805c <__lo0bits+0x32>
 8008058:	3008      	adds	r0, #8
 800805a:	0a1b      	lsrs	r3, r3, #8
 800805c:	0719      	lsls	r1, r3, #28
 800805e:	bf04      	itt	eq
 8008060:	091b      	lsreq	r3, r3, #4
 8008062:	3004      	addeq	r0, #4
 8008064:	0799      	lsls	r1, r3, #30
 8008066:	bf04      	itt	eq
 8008068:	089b      	lsreq	r3, r3, #2
 800806a:	3002      	addeq	r0, #2
 800806c:	07d9      	lsls	r1, r3, #31
 800806e:	d403      	bmi.n	8008078 <__lo0bits+0x4e>
 8008070:	085b      	lsrs	r3, r3, #1
 8008072:	f100 0001 	add.w	r0, r0, #1
 8008076:	d003      	beq.n	8008080 <__lo0bits+0x56>
 8008078:	6013      	str	r3, [r2, #0]
 800807a:	4770      	bx	lr
 800807c:	2000      	movs	r0, #0
 800807e:	4770      	bx	lr
 8008080:	2020      	movs	r0, #32
 8008082:	4770      	bx	lr

08008084 <__i2b>:
 8008084:	b510      	push	{r4, lr}
 8008086:	460c      	mov	r4, r1
 8008088:	2101      	movs	r1, #1
 800808a:	f7ff febd 	bl	8007e08 <_Balloc>
 800808e:	4602      	mov	r2, r0
 8008090:	b928      	cbnz	r0, 800809e <__i2b+0x1a>
 8008092:	4b05      	ldr	r3, [pc, #20]	@ (80080a8 <__i2b+0x24>)
 8008094:	4805      	ldr	r0, [pc, #20]	@ (80080ac <__i2b+0x28>)
 8008096:	f240 1145 	movw	r1, #325	@ 0x145
 800809a:	f001 fc41 	bl	8009920 <__assert_func>
 800809e:	2301      	movs	r3, #1
 80080a0:	6144      	str	r4, [r0, #20]
 80080a2:	6103      	str	r3, [r0, #16]
 80080a4:	bd10      	pop	{r4, pc}
 80080a6:	bf00      	nop
 80080a8:	0800add5 	.word	0x0800add5
 80080ac:	0800ade6 	.word	0x0800ade6

080080b0 <__multiply>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	4614      	mov	r4, r2
 80080b6:	690a      	ldr	r2, [r1, #16]
 80080b8:	6923      	ldr	r3, [r4, #16]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	bfa8      	it	ge
 80080be:	4623      	movge	r3, r4
 80080c0:	460f      	mov	r7, r1
 80080c2:	bfa4      	itt	ge
 80080c4:	460c      	movge	r4, r1
 80080c6:	461f      	movge	r7, r3
 80080c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80080cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80080d0:	68a3      	ldr	r3, [r4, #8]
 80080d2:	6861      	ldr	r1, [r4, #4]
 80080d4:	eb0a 0609 	add.w	r6, sl, r9
 80080d8:	42b3      	cmp	r3, r6
 80080da:	b085      	sub	sp, #20
 80080dc:	bfb8      	it	lt
 80080de:	3101      	addlt	r1, #1
 80080e0:	f7ff fe92 	bl	8007e08 <_Balloc>
 80080e4:	b930      	cbnz	r0, 80080f4 <__multiply+0x44>
 80080e6:	4602      	mov	r2, r0
 80080e8:	4b44      	ldr	r3, [pc, #272]	@ (80081fc <__multiply+0x14c>)
 80080ea:	4845      	ldr	r0, [pc, #276]	@ (8008200 <__multiply+0x150>)
 80080ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80080f0:	f001 fc16 	bl	8009920 <__assert_func>
 80080f4:	f100 0514 	add.w	r5, r0, #20
 80080f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80080fc:	462b      	mov	r3, r5
 80080fe:	2200      	movs	r2, #0
 8008100:	4543      	cmp	r3, r8
 8008102:	d321      	bcc.n	8008148 <__multiply+0x98>
 8008104:	f107 0114 	add.w	r1, r7, #20
 8008108:	f104 0214 	add.w	r2, r4, #20
 800810c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008110:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008114:	9302      	str	r3, [sp, #8]
 8008116:	1b13      	subs	r3, r2, r4
 8008118:	3b15      	subs	r3, #21
 800811a:	f023 0303 	bic.w	r3, r3, #3
 800811e:	3304      	adds	r3, #4
 8008120:	f104 0715 	add.w	r7, r4, #21
 8008124:	42ba      	cmp	r2, r7
 8008126:	bf38      	it	cc
 8008128:	2304      	movcc	r3, #4
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	9b02      	ldr	r3, [sp, #8]
 800812e:	9103      	str	r1, [sp, #12]
 8008130:	428b      	cmp	r3, r1
 8008132:	d80c      	bhi.n	800814e <__multiply+0x9e>
 8008134:	2e00      	cmp	r6, #0
 8008136:	dd03      	ble.n	8008140 <__multiply+0x90>
 8008138:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800813c:	2b00      	cmp	r3, #0
 800813e:	d05b      	beq.n	80081f8 <__multiply+0x148>
 8008140:	6106      	str	r6, [r0, #16]
 8008142:	b005      	add	sp, #20
 8008144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008148:	f843 2b04 	str.w	r2, [r3], #4
 800814c:	e7d8      	b.n	8008100 <__multiply+0x50>
 800814e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008152:	f1ba 0f00 	cmp.w	sl, #0
 8008156:	d024      	beq.n	80081a2 <__multiply+0xf2>
 8008158:	f104 0e14 	add.w	lr, r4, #20
 800815c:	46a9      	mov	r9, r5
 800815e:	f04f 0c00 	mov.w	ip, #0
 8008162:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008166:	f8d9 3000 	ldr.w	r3, [r9]
 800816a:	fa1f fb87 	uxth.w	fp, r7
 800816e:	b29b      	uxth	r3, r3
 8008170:	fb0a 330b 	mla	r3, sl, fp, r3
 8008174:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008178:	f8d9 7000 	ldr.w	r7, [r9]
 800817c:	4463      	add	r3, ip
 800817e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008182:	fb0a c70b 	mla	r7, sl, fp, ip
 8008186:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800818a:	b29b      	uxth	r3, r3
 800818c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008190:	4572      	cmp	r2, lr
 8008192:	f849 3b04 	str.w	r3, [r9], #4
 8008196:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800819a:	d8e2      	bhi.n	8008162 <__multiply+0xb2>
 800819c:	9b01      	ldr	r3, [sp, #4]
 800819e:	f845 c003 	str.w	ip, [r5, r3]
 80081a2:	9b03      	ldr	r3, [sp, #12]
 80081a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80081a8:	3104      	adds	r1, #4
 80081aa:	f1b9 0f00 	cmp.w	r9, #0
 80081ae:	d021      	beq.n	80081f4 <__multiply+0x144>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	f104 0c14 	add.w	ip, r4, #20
 80081b6:	46ae      	mov	lr, r5
 80081b8:	f04f 0a00 	mov.w	sl, #0
 80081bc:	f8bc b000 	ldrh.w	fp, [ip]
 80081c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80081c4:	fb09 770b 	mla	r7, r9, fp, r7
 80081c8:	4457      	add	r7, sl
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80081d0:	f84e 3b04 	str.w	r3, [lr], #4
 80081d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80081d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081dc:	f8be 3000 	ldrh.w	r3, [lr]
 80081e0:	fb09 330a 	mla	r3, r9, sl, r3
 80081e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80081e8:	4562      	cmp	r2, ip
 80081ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081ee:	d8e5      	bhi.n	80081bc <__multiply+0x10c>
 80081f0:	9f01      	ldr	r7, [sp, #4]
 80081f2:	51eb      	str	r3, [r5, r7]
 80081f4:	3504      	adds	r5, #4
 80081f6:	e799      	b.n	800812c <__multiply+0x7c>
 80081f8:	3e01      	subs	r6, #1
 80081fa:	e79b      	b.n	8008134 <__multiply+0x84>
 80081fc:	0800add5 	.word	0x0800add5
 8008200:	0800ade6 	.word	0x0800ade6

08008204 <__pow5mult>:
 8008204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008208:	4615      	mov	r5, r2
 800820a:	f012 0203 	ands.w	r2, r2, #3
 800820e:	4607      	mov	r7, r0
 8008210:	460e      	mov	r6, r1
 8008212:	d007      	beq.n	8008224 <__pow5mult+0x20>
 8008214:	4c25      	ldr	r4, [pc, #148]	@ (80082ac <__pow5mult+0xa8>)
 8008216:	3a01      	subs	r2, #1
 8008218:	2300      	movs	r3, #0
 800821a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800821e:	f7ff fe55 	bl	8007ecc <__multadd>
 8008222:	4606      	mov	r6, r0
 8008224:	10ad      	asrs	r5, r5, #2
 8008226:	d03d      	beq.n	80082a4 <__pow5mult+0xa0>
 8008228:	69fc      	ldr	r4, [r7, #28]
 800822a:	b97c      	cbnz	r4, 800824c <__pow5mult+0x48>
 800822c:	2010      	movs	r0, #16
 800822e:	f7ff fd35 	bl	8007c9c <malloc>
 8008232:	4602      	mov	r2, r0
 8008234:	61f8      	str	r0, [r7, #28]
 8008236:	b928      	cbnz	r0, 8008244 <__pow5mult+0x40>
 8008238:	4b1d      	ldr	r3, [pc, #116]	@ (80082b0 <__pow5mult+0xac>)
 800823a:	481e      	ldr	r0, [pc, #120]	@ (80082b4 <__pow5mult+0xb0>)
 800823c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008240:	f001 fb6e 	bl	8009920 <__assert_func>
 8008244:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008248:	6004      	str	r4, [r0, #0]
 800824a:	60c4      	str	r4, [r0, #12]
 800824c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008250:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008254:	b94c      	cbnz	r4, 800826a <__pow5mult+0x66>
 8008256:	f240 2171 	movw	r1, #625	@ 0x271
 800825a:	4638      	mov	r0, r7
 800825c:	f7ff ff12 	bl	8008084 <__i2b>
 8008260:	2300      	movs	r3, #0
 8008262:	f8c8 0008 	str.w	r0, [r8, #8]
 8008266:	4604      	mov	r4, r0
 8008268:	6003      	str	r3, [r0, #0]
 800826a:	f04f 0900 	mov.w	r9, #0
 800826e:	07eb      	lsls	r3, r5, #31
 8008270:	d50a      	bpl.n	8008288 <__pow5mult+0x84>
 8008272:	4631      	mov	r1, r6
 8008274:	4622      	mov	r2, r4
 8008276:	4638      	mov	r0, r7
 8008278:	f7ff ff1a 	bl	80080b0 <__multiply>
 800827c:	4631      	mov	r1, r6
 800827e:	4680      	mov	r8, r0
 8008280:	4638      	mov	r0, r7
 8008282:	f7ff fe01 	bl	8007e88 <_Bfree>
 8008286:	4646      	mov	r6, r8
 8008288:	106d      	asrs	r5, r5, #1
 800828a:	d00b      	beq.n	80082a4 <__pow5mult+0xa0>
 800828c:	6820      	ldr	r0, [r4, #0]
 800828e:	b938      	cbnz	r0, 80082a0 <__pow5mult+0x9c>
 8008290:	4622      	mov	r2, r4
 8008292:	4621      	mov	r1, r4
 8008294:	4638      	mov	r0, r7
 8008296:	f7ff ff0b 	bl	80080b0 <__multiply>
 800829a:	6020      	str	r0, [r4, #0]
 800829c:	f8c0 9000 	str.w	r9, [r0]
 80082a0:	4604      	mov	r4, r0
 80082a2:	e7e4      	b.n	800826e <__pow5mult+0x6a>
 80082a4:	4630      	mov	r0, r6
 80082a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082aa:	bf00      	nop
 80082ac:	0800ae40 	.word	0x0800ae40
 80082b0:	0800ad66 	.word	0x0800ad66
 80082b4:	0800ade6 	.word	0x0800ade6

080082b8 <__lshift>:
 80082b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	6849      	ldr	r1, [r1, #4]
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082c6:	68a3      	ldr	r3, [r4, #8]
 80082c8:	4607      	mov	r7, r0
 80082ca:	4691      	mov	r9, r2
 80082cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082d0:	f108 0601 	add.w	r6, r8, #1
 80082d4:	42b3      	cmp	r3, r6
 80082d6:	db0b      	blt.n	80082f0 <__lshift+0x38>
 80082d8:	4638      	mov	r0, r7
 80082da:	f7ff fd95 	bl	8007e08 <_Balloc>
 80082de:	4605      	mov	r5, r0
 80082e0:	b948      	cbnz	r0, 80082f6 <__lshift+0x3e>
 80082e2:	4602      	mov	r2, r0
 80082e4:	4b28      	ldr	r3, [pc, #160]	@ (8008388 <__lshift+0xd0>)
 80082e6:	4829      	ldr	r0, [pc, #164]	@ (800838c <__lshift+0xd4>)
 80082e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80082ec:	f001 fb18 	bl	8009920 <__assert_func>
 80082f0:	3101      	adds	r1, #1
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	e7ee      	b.n	80082d4 <__lshift+0x1c>
 80082f6:	2300      	movs	r3, #0
 80082f8:	f100 0114 	add.w	r1, r0, #20
 80082fc:	f100 0210 	add.w	r2, r0, #16
 8008300:	4618      	mov	r0, r3
 8008302:	4553      	cmp	r3, sl
 8008304:	db33      	blt.n	800836e <__lshift+0xb6>
 8008306:	6920      	ldr	r0, [r4, #16]
 8008308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800830c:	f104 0314 	add.w	r3, r4, #20
 8008310:	f019 091f 	ands.w	r9, r9, #31
 8008314:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008318:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800831c:	d02b      	beq.n	8008376 <__lshift+0xbe>
 800831e:	f1c9 0e20 	rsb	lr, r9, #32
 8008322:	468a      	mov	sl, r1
 8008324:	2200      	movs	r2, #0
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	fa00 f009 	lsl.w	r0, r0, r9
 800832c:	4310      	orrs	r0, r2
 800832e:	f84a 0b04 	str.w	r0, [sl], #4
 8008332:	f853 2b04 	ldr.w	r2, [r3], #4
 8008336:	459c      	cmp	ip, r3
 8008338:	fa22 f20e 	lsr.w	r2, r2, lr
 800833c:	d8f3      	bhi.n	8008326 <__lshift+0x6e>
 800833e:	ebac 0304 	sub.w	r3, ip, r4
 8008342:	3b15      	subs	r3, #21
 8008344:	f023 0303 	bic.w	r3, r3, #3
 8008348:	3304      	adds	r3, #4
 800834a:	f104 0015 	add.w	r0, r4, #21
 800834e:	4584      	cmp	ip, r0
 8008350:	bf38      	it	cc
 8008352:	2304      	movcc	r3, #4
 8008354:	50ca      	str	r2, [r1, r3]
 8008356:	b10a      	cbz	r2, 800835c <__lshift+0xa4>
 8008358:	f108 0602 	add.w	r6, r8, #2
 800835c:	3e01      	subs	r6, #1
 800835e:	4638      	mov	r0, r7
 8008360:	612e      	str	r6, [r5, #16]
 8008362:	4621      	mov	r1, r4
 8008364:	f7ff fd90 	bl	8007e88 <_Bfree>
 8008368:	4628      	mov	r0, r5
 800836a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800836e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008372:	3301      	adds	r3, #1
 8008374:	e7c5      	b.n	8008302 <__lshift+0x4a>
 8008376:	3904      	subs	r1, #4
 8008378:	f853 2b04 	ldr.w	r2, [r3], #4
 800837c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008380:	459c      	cmp	ip, r3
 8008382:	d8f9      	bhi.n	8008378 <__lshift+0xc0>
 8008384:	e7ea      	b.n	800835c <__lshift+0xa4>
 8008386:	bf00      	nop
 8008388:	0800add5 	.word	0x0800add5
 800838c:	0800ade6 	.word	0x0800ade6

08008390 <__mcmp>:
 8008390:	690a      	ldr	r2, [r1, #16]
 8008392:	4603      	mov	r3, r0
 8008394:	6900      	ldr	r0, [r0, #16]
 8008396:	1a80      	subs	r0, r0, r2
 8008398:	b530      	push	{r4, r5, lr}
 800839a:	d10e      	bne.n	80083ba <__mcmp+0x2a>
 800839c:	3314      	adds	r3, #20
 800839e:	3114      	adds	r1, #20
 80083a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083b0:	4295      	cmp	r5, r2
 80083b2:	d003      	beq.n	80083bc <__mcmp+0x2c>
 80083b4:	d205      	bcs.n	80083c2 <__mcmp+0x32>
 80083b6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ba:	bd30      	pop	{r4, r5, pc}
 80083bc:	42a3      	cmp	r3, r4
 80083be:	d3f3      	bcc.n	80083a8 <__mcmp+0x18>
 80083c0:	e7fb      	b.n	80083ba <__mcmp+0x2a>
 80083c2:	2001      	movs	r0, #1
 80083c4:	e7f9      	b.n	80083ba <__mcmp+0x2a>
	...

080083c8 <__mdiff>:
 80083c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083cc:	4689      	mov	r9, r1
 80083ce:	4606      	mov	r6, r0
 80083d0:	4611      	mov	r1, r2
 80083d2:	4648      	mov	r0, r9
 80083d4:	4614      	mov	r4, r2
 80083d6:	f7ff ffdb 	bl	8008390 <__mcmp>
 80083da:	1e05      	subs	r5, r0, #0
 80083dc:	d112      	bne.n	8008404 <__mdiff+0x3c>
 80083de:	4629      	mov	r1, r5
 80083e0:	4630      	mov	r0, r6
 80083e2:	f7ff fd11 	bl	8007e08 <_Balloc>
 80083e6:	4602      	mov	r2, r0
 80083e8:	b928      	cbnz	r0, 80083f6 <__mdiff+0x2e>
 80083ea:	4b3f      	ldr	r3, [pc, #252]	@ (80084e8 <__mdiff+0x120>)
 80083ec:	f240 2137 	movw	r1, #567	@ 0x237
 80083f0:	483e      	ldr	r0, [pc, #248]	@ (80084ec <__mdiff+0x124>)
 80083f2:	f001 fa95 	bl	8009920 <__assert_func>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083fc:	4610      	mov	r0, r2
 80083fe:	b003      	add	sp, #12
 8008400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008404:	bfbc      	itt	lt
 8008406:	464b      	movlt	r3, r9
 8008408:	46a1      	movlt	r9, r4
 800840a:	4630      	mov	r0, r6
 800840c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008410:	bfba      	itte	lt
 8008412:	461c      	movlt	r4, r3
 8008414:	2501      	movlt	r5, #1
 8008416:	2500      	movge	r5, #0
 8008418:	f7ff fcf6 	bl	8007e08 <_Balloc>
 800841c:	4602      	mov	r2, r0
 800841e:	b918      	cbnz	r0, 8008428 <__mdiff+0x60>
 8008420:	4b31      	ldr	r3, [pc, #196]	@ (80084e8 <__mdiff+0x120>)
 8008422:	f240 2145 	movw	r1, #581	@ 0x245
 8008426:	e7e3      	b.n	80083f0 <__mdiff+0x28>
 8008428:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800842c:	6926      	ldr	r6, [r4, #16]
 800842e:	60c5      	str	r5, [r0, #12]
 8008430:	f109 0310 	add.w	r3, r9, #16
 8008434:	f109 0514 	add.w	r5, r9, #20
 8008438:	f104 0e14 	add.w	lr, r4, #20
 800843c:	f100 0b14 	add.w	fp, r0, #20
 8008440:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008444:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	46d9      	mov	r9, fp
 800844c:	f04f 0c00 	mov.w	ip, #0
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008456:	f853 af04 	ldr.w	sl, [r3, #4]!
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	fa1f f38a 	uxth.w	r3, sl
 8008460:	4619      	mov	r1, r3
 8008462:	b283      	uxth	r3, r0
 8008464:	1acb      	subs	r3, r1, r3
 8008466:	0c00      	lsrs	r0, r0, #16
 8008468:	4463      	add	r3, ip
 800846a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800846e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008472:	b29b      	uxth	r3, r3
 8008474:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008478:	4576      	cmp	r6, lr
 800847a:	f849 3b04 	str.w	r3, [r9], #4
 800847e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008482:	d8e5      	bhi.n	8008450 <__mdiff+0x88>
 8008484:	1b33      	subs	r3, r6, r4
 8008486:	3b15      	subs	r3, #21
 8008488:	f023 0303 	bic.w	r3, r3, #3
 800848c:	3415      	adds	r4, #21
 800848e:	3304      	adds	r3, #4
 8008490:	42a6      	cmp	r6, r4
 8008492:	bf38      	it	cc
 8008494:	2304      	movcc	r3, #4
 8008496:	441d      	add	r5, r3
 8008498:	445b      	add	r3, fp
 800849a:	461e      	mov	r6, r3
 800849c:	462c      	mov	r4, r5
 800849e:	4544      	cmp	r4, r8
 80084a0:	d30e      	bcc.n	80084c0 <__mdiff+0xf8>
 80084a2:	f108 0103 	add.w	r1, r8, #3
 80084a6:	1b49      	subs	r1, r1, r5
 80084a8:	f021 0103 	bic.w	r1, r1, #3
 80084ac:	3d03      	subs	r5, #3
 80084ae:	45a8      	cmp	r8, r5
 80084b0:	bf38      	it	cc
 80084b2:	2100      	movcc	r1, #0
 80084b4:	440b      	add	r3, r1
 80084b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084ba:	b191      	cbz	r1, 80084e2 <__mdiff+0x11a>
 80084bc:	6117      	str	r7, [r2, #16]
 80084be:	e79d      	b.n	80083fc <__mdiff+0x34>
 80084c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80084c4:	46e6      	mov	lr, ip
 80084c6:	0c08      	lsrs	r0, r1, #16
 80084c8:	fa1c fc81 	uxtah	ip, ip, r1
 80084cc:	4471      	add	r1, lr
 80084ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80084d2:	b289      	uxth	r1, r1
 80084d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80084d8:	f846 1b04 	str.w	r1, [r6], #4
 80084dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084e0:	e7dd      	b.n	800849e <__mdiff+0xd6>
 80084e2:	3f01      	subs	r7, #1
 80084e4:	e7e7      	b.n	80084b6 <__mdiff+0xee>
 80084e6:	bf00      	nop
 80084e8:	0800add5 	.word	0x0800add5
 80084ec:	0800ade6 	.word	0x0800ade6

080084f0 <__ulp>:
 80084f0:	b082      	sub	sp, #8
 80084f2:	ed8d 0b00 	vstr	d0, [sp]
 80084f6:	9a01      	ldr	r2, [sp, #4]
 80084f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008538 <__ulp+0x48>)
 80084fa:	4013      	ands	r3, r2
 80084fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008500:	2b00      	cmp	r3, #0
 8008502:	dc08      	bgt.n	8008516 <__ulp+0x26>
 8008504:	425b      	negs	r3, r3
 8008506:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800850a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800850e:	da04      	bge.n	800851a <__ulp+0x2a>
 8008510:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008514:	4113      	asrs	r3, r2
 8008516:	2200      	movs	r2, #0
 8008518:	e008      	b.n	800852c <__ulp+0x3c>
 800851a:	f1a2 0314 	sub.w	r3, r2, #20
 800851e:	2b1e      	cmp	r3, #30
 8008520:	bfda      	itte	le
 8008522:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008526:	40da      	lsrle	r2, r3
 8008528:	2201      	movgt	r2, #1
 800852a:	2300      	movs	r3, #0
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	ec41 0b10 	vmov	d0, r0, r1
 8008534:	b002      	add	sp, #8
 8008536:	4770      	bx	lr
 8008538:	7ff00000 	.word	0x7ff00000

0800853c <__b2d>:
 800853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008540:	6906      	ldr	r6, [r0, #16]
 8008542:	f100 0814 	add.w	r8, r0, #20
 8008546:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800854a:	1f37      	subs	r7, r6, #4
 800854c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008550:	4610      	mov	r0, r2
 8008552:	f7ff fd4b 	bl	8007fec <__hi0bits>
 8008556:	f1c0 0320 	rsb	r3, r0, #32
 800855a:	280a      	cmp	r0, #10
 800855c:	600b      	str	r3, [r1, #0]
 800855e:	491b      	ldr	r1, [pc, #108]	@ (80085cc <__b2d+0x90>)
 8008560:	dc15      	bgt.n	800858e <__b2d+0x52>
 8008562:	f1c0 0c0b 	rsb	ip, r0, #11
 8008566:	fa22 f30c 	lsr.w	r3, r2, ip
 800856a:	45b8      	cmp	r8, r7
 800856c:	ea43 0501 	orr.w	r5, r3, r1
 8008570:	bf34      	ite	cc
 8008572:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008576:	2300      	movcs	r3, #0
 8008578:	3015      	adds	r0, #21
 800857a:	fa02 f000 	lsl.w	r0, r2, r0
 800857e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008582:	4303      	orrs	r3, r0
 8008584:	461c      	mov	r4, r3
 8008586:	ec45 4b10 	vmov	d0, r4, r5
 800858a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858e:	45b8      	cmp	r8, r7
 8008590:	bf3a      	itte	cc
 8008592:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008596:	f1a6 0708 	subcc.w	r7, r6, #8
 800859a:	2300      	movcs	r3, #0
 800859c:	380b      	subs	r0, #11
 800859e:	d012      	beq.n	80085c6 <__b2d+0x8a>
 80085a0:	f1c0 0120 	rsb	r1, r0, #32
 80085a4:	fa23 f401 	lsr.w	r4, r3, r1
 80085a8:	4082      	lsls	r2, r0
 80085aa:	4322      	orrs	r2, r4
 80085ac:	4547      	cmp	r7, r8
 80085ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80085b2:	bf8c      	ite	hi
 80085b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80085b8:	2200      	movls	r2, #0
 80085ba:	4083      	lsls	r3, r0
 80085bc:	40ca      	lsrs	r2, r1
 80085be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80085c2:	4313      	orrs	r3, r2
 80085c4:	e7de      	b.n	8008584 <__b2d+0x48>
 80085c6:	ea42 0501 	orr.w	r5, r2, r1
 80085ca:	e7db      	b.n	8008584 <__b2d+0x48>
 80085cc:	3ff00000 	.word	0x3ff00000

080085d0 <__d2b>:
 80085d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085d4:	460f      	mov	r7, r1
 80085d6:	2101      	movs	r1, #1
 80085d8:	ec59 8b10 	vmov	r8, r9, d0
 80085dc:	4616      	mov	r6, r2
 80085de:	f7ff fc13 	bl	8007e08 <_Balloc>
 80085e2:	4604      	mov	r4, r0
 80085e4:	b930      	cbnz	r0, 80085f4 <__d2b+0x24>
 80085e6:	4602      	mov	r2, r0
 80085e8:	4b23      	ldr	r3, [pc, #140]	@ (8008678 <__d2b+0xa8>)
 80085ea:	4824      	ldr	r0, [pc, #144]	@ (800867c <__d2b+0xac>)
 80085ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80085f0:	f001 f996 	bl	8009920 <__assert_func>
 80085f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085fc:	b10d      	cbz	r5, 8008602 <__d2b+0x32>
 80085fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	f1b8 0300 	subs.w	r3, r8, #0
 8008608:	d023      	beq.n	8008652 <__d2b+0x82>
 800860a:	4668      	mov	r0, sp
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	f7ff fd0c 	bl	800802a <__lo0bits>
 8008612:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008616:	b1d0      	cbz	r0, 800864e <__d2b+0x7e>
 8008618:	f1c0 0320 	rsb	r3, r0, #32
 800861c:	fa02 f303 	lsl.w	r3, r2, r3
 8008620:	430b      	orrs	r3, r1
 8008622:	40c2      	lsrs	r2, r0
 8008624:	6163      	str	r3, [r4, #20]
 8008626:	9201      	str	r2, [sp, #4]
 8008628:	9b01      	ldr	r3, [sp, #4]
 800862a:	61a3      	str	r3, [r4, #24]
 800862c:	2b00      	cmp	r3, #0
 800862e:	bf0c      	ite	eq
 8008630:	2201      	moveq	r2, #1
 8008632:	2202      	movne	r2, #2
 8008634:	6122      	str	r2, [r4, #16]
 8008636:	b1a5      	cbz	r5, 8008662 <__d2b+0x92>
 8008638:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800863c:	4405      	add	r5, r0
 800863e:	603d      	str	r5, [r7, #0]
 8008640:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008644:	6030      	str	r0, [r6, #0]
 8008646:	4620      	mov	r0, r4
 8008648:	b003      	add	sp, #12
 800864a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800864e:	6161      	str	r1, [r4, #20]
 8008650:	e7ea      	b.n	8008628 <__d2b+0x58>
 8008652:	a801      	add	r0, sp, #4
 8008654:	f7ff fce9 	bl	800802a <__lo0bits>
 8008658:	9b01      	ldr	r3, [sp, #4]
 800865a:	6163      	str	r3, [r4, #20]
 800865c:	3020      	adds	r0, #32
 800865e:	2201      	movs	r2, #1
 8008660:	e7e8      	b.n	8008634 <__d2b+0x64>
 8008662:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008666:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800866a:	6038      	str	r0, [r7, #0]
 800866c:	6918      	ldr	r0, [r3, #16]
 800866e:	f7ff fcbd 	bl	8007fec <__hi0bits>
 8008672:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008676:	e7e5      	b.n	8008644 <__d2b+0x74>
 8008678:	0800add5 	.word	0x0800add5
 800867c:	0800ade6 	.word	0x0800ade6

08008680 <__ratio>:
 8008680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	b085      	sub	sp, #20
 8008686:	e9cd 1000 	strd	r1, r0, [sp]
 800868a:	a902      	add	r1, sp, #8
 800868c:	f7ff ff56 	bl	800853c <__b2d>
 8008690:	9800      	ldr	r0, [sp, #0]
 8008692:	a903      	add	r1, sp, #12
 8008694:	ec55 4b10 	vmov	r4, r5, d0
 8008698:	f7ff ff50 	bl	800853c <__b2d>
 800869c:	9b01      	ldr	r3, [sp, #4]
 800869e:	6919      	ldr	r1, [r3, #16]
 80086a0:	9b00      	ldr	r3, [sp, #0]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	1ac9      	subs	r1, r1, r3
 80086a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	ec5b ab10 	vmov	sl, fp, d0
 80086b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bfce      	itee	gt
 80086b8:	462a      	movgt	r2, r5
 80086ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80086be:	465a      	movle	r2, fp
 80086c0:	462f      	mov	r7, r5
 80086c2:	46d9      	mov	r9, fp
 80086c4:	bfcc      	ite	gt
 80086c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80086ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80086ce:	464b      	mov	r3, r9
 80086d0:	4652      	mov	r2, sl
 80086d2:	4620      	mov	r0, r4
 80086d4:	4639      	mov	r1, r7
 80086d6:	f7f8 f8c1 	bl	800085c <__aeabi_ddiv>
 80086da:	ec41 0b10 	vmov	d0, r0, r1
 80086de:	b005      	add	sp, #20
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080086e4 <__copybits>:
 80086e4:	3901      	subs	r1, #1
 80086e6:	b570      	push	{r4, r5, r6, lr}
 80086e8:	1149      	asrs	r1, r1, #5
 80086ea:	6914      	ldr	r4, [r2, #16]
 80086ec:	3101      	adds	r1, #1
 80086ee:	f102 0314 	add.w	r3, r2, #20
 80086f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80086f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80086fa:	1f05      	subs	r5, r0, #4
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	d30c      	bcc.n	800871a <__copybits+0x36>
 8008700:	1aa3      	subs	r3, r4, r2
 8008702:	3b11      	subs	r3, #17
 8008704:	f023 0303 	bic.w	r3, r3, #3
 8008708:	3211      	adds	r2, #17
 800870a:	42a2      	cmp	r2, r4
 800870c:	bf88      	it	hi
 800870e:	2300      	movhi	r3, #0
 8008710:	4418      	add	r0, r3
 8008712:	2300      	movs	r3, #0
 8008714:	4288      	cmp	r0, r1
 8008716:	d305      	bcc.n	8008724 <__copybits+0x40>
 8008718:	bd70      	pop	{r4, r5, r6, pc}
 800871a:	f853 6b04 	ldr.w	r6, [r3], #4
 800871e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008722:	e7eb      	b.n	80086fc <__copybits+0x18>
 8008724:	f840 3b04 	str.w	r3, [r0], #4
 8008728:	e7f4      	b.n	8008714 <__copybits+0x30>

0800872a <__any_on>:
 800872a:	f100 0214 	add.w	r2, r0, #20
 800872e:	6900      	ldr	r0, [r0, #16]
 8008730:	114b      	asrs	r3, r1, #5
 8008732:	4298      	cmp	r0, r3
 8008734:	b510      	push	{r4, lr}
 8008736:	db11      	blt.n	800875c <__any_on+0x32>
 8008738:	dd0a      	ble.n	8008750 <__any_on+0x26>
 800873a:	f011 011f 	ands.w	r1, r1, #31
 800873e:	d007      	beq.n	8008750 <__any_on+0x26>
 8008740:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008744:	fa24 f001 	lsr.w	r0, r4, r1
 8008748:	fa00 f101 	lsl.w	r1, r0, r1
 800874c:	428c      	cmp	r4, r1
 800874e:	d10b      	bne.n	8008768 <__any_on+0x3e>
 8008750:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008754:	4293      	cmp	r3, r2
 8008756:	d803      	bhi.n	8008760 <__any_on+0x36>
 8008758:	2000      	movs	r0, #0
 800875a:	bd10      	pop	{r4, pc}
 800875c:	4603      	mov	r3, r0
 800875e:	e7f7      	b.n	8008750 <__any_on+0x26>
 8008760:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008764:	2900      	cmp	r1, #0
 8008766:	d0f5      	beq.n	8008754 <__any_on+0x2a>
 8008768:	2001      	movs	r0, #1
 800876a:	e7f6      	b.n	800875a <__any_on+0x30>

0800876c <sulp>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4604      	mov	r4, r0
 8008770:	460d      	mov	r5, r1
 8008772:	ec45 4b10 	vmov	d0, r4, r5
 8008776:	4616      	mov	r6, r2
 8008778:	f7ff feba 	bl	80084f0 <__ulp>
 800877c:	ec51 0b10 	vmov	r0, r1, d0
 8008780:	b17e      	cbz	r6, 80087a2 <sulp+0x36>
 8008782:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008786:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800878a:	2b00      	cmp	r3, #0
 800878c:	dd09      	ble.n	80087a2 <sulp+0x36>
 800878e:	051b      	lsls	r3, r3, #20
 8008790:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008794:	2400      	movs	r4, #0
 8008796:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800879a:	4622      	mov	r2, r4
 800879c:	462b      	mov	r3, r5
 800879e:	f7f7 ff33 	bl	8000608 <__aeabi_dmul>
 80087a2:	ec41 0b10 	vmov	d0, r0, r1
 80087a6:	bd70      	pop	{r4, r5, r6, pc}

080087a8 <_strtod_l>:
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	b09f      	sub	sp, #124	@ 0x7c
 80087ae:	460c      	mov	r4, r1
 80087b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80087b2:	2200      	movs	r2, #0
 80087b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80087b6:	9005      	str	r0, [sp, #20]
 80087b8:	f04f 0a00 	mov.w	sl, #0
 80087bc:	f04f 0b00 	mov.w	fp, #0
 80087c0:	460a      	mov	r2, r1
 80087c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80087c4:	7811      	ldrb	r1, [r2, #0]
 80087c6:	292b      	cmp	r1, #43	@ 0x2b
 80087c8:	d04a      	beq.n	8008860 <_strtod_l+0xb8>
 80087ca:	d838      	bhi.n	800883e <_strtod_l+0x96>
 80087cc:	290d      	cmp	r1, #13
 80087ce:	d832      	bhi.n	8008836 <_strtod_l+0x8e>
 80087d0:	2908      	cmp	r1, #8
 80087d2:	d832      	bhi.n	800883a <_strtod_l+0x92>
 80087d4:	2900      	cmp	r1, #0
 80087d6:	d03b      	beq.n	8008850 <_strtod_l+0xa8>
 80087d8:	2200      	movs	r2, #0
 80087da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80087dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80087de:	782a      	ldrb	r2, [r5, #0]
 80087e0:	2a30      	cmp	r2, #48	@ 0x30
 80087e2:	f040 80b3 	bne.w	800894c <_strtod_l+0x1a4>
 80087e6:	786a      	ldrb	r2, [r5, #1]
 80087e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80087ec:	2a58      	cmp	r2, #88	@ 0x58
 80087ee:	d16e      	bne.n	80088ce <_strtod_l+0x126>
 80087f0:	9302      	str	r3, [sp, #8]
 80087f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	4a8e      	ldr	r2, [pc, #568]	@ (8008a34 <_strtod_l+0x28c>)
 80087fc:	9805      	ldr	r0, [sp, #20]
 80087fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008800:	a919      	add	r1, sp, #100	@ 0x64
 8008802:	f001 f927 	bl	8009a54 <__gethex>
 8008806:	f010 060f 	ands.w	r6, r0, #15
 800880a:	4604      	mov	r4, r0
 800880c:	d005      	beq.n	800881a <_strtod_l+0x72>
 800880e:	2e06      	cmp	r6, #6
 8008810:	d128      	bne.n	8008864 <_strtod_l+0xbc>
 8008812:	3501      	adds	r5, #1
 8008814:	2300      	movs	r3, #0
 8008816:	9519      	str	r5, [sp, #100]	@ 0x64
 8008818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800881a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800881c:	2b00      	cmp	r3, #0
 800881e:	f040 858e 	bne.w	800933e <_strtod_l+0xb96>
 8008822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008824:	b1cb      	cbz	r3, 800885a <_strtod_l+0xb2>
 8008826:	4652      	mov	r2, sl
 8008828:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800882c:	ec43 2b10 	vmov	d0, r2, r3
 8008830:	b01f      	add	sp, #124	@ 0x7c
 8008832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008836:	2920      	cmp	r1, #32
 8008838:	d1ce      	bne.n	80087d8 <_strtod_l+0x30>
 800883a:	3201      	adds	r2, #1
 800883c:	e7c1      	b.n	80087c2 <_strtod_l+0x1a>
 800883e:	292d      	cmp	r1, #45	@ 0x2d
 8008840:	d1ca      	bne.n	80087d8 <_strtod_l+0x30>
 8008842:	2101      	movs	r1, #1
 8008844:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008846:	1c51      	adds	r1, r2, #1
 8008848:	9119      	str	r1, [sp, #100]	@ 0x64
 800884a:	7852      	ldrb	r2, [r2, #1]
 800884c:	2a00      	cmp	r2, #0
 800884e:	d1c5      	bne.n	80087dc <_strtod_l+0x34>
 8008850:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008852:	9419      	str	r4, [sp, #100]	@ 0x64
 8008854:	2b00      	cmp	r3, #0
 8008856:	f040 8570 	bne.w	800933a <_strtod_l+0xb92>
 800885a:	4652      	mov	r2, sl
 800885c:	465b      	mov	r3, fp
 800885e:	e7e5      	b.n	800882c <_strtod_l+0x84>
 8008860:	2100      	movs	r1, #0
 8008862:	e7ef      	b.n	8008844 <_strtod_l+0x9c>
 8008864:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008866:	b13a      	cbz	r2, 8008878 <_strtod_l+0xd0>
 8008868:	2135      	movs	r1, #53	@ 0x35
 800886a:	a81c      	add	r0, sp, #112	@ 0x70
 800886c:	f7ff ff3a 	bl	80086e4 <__copybits>
 8008870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008872:	9805      	ldr	r0, [sp, #20]
 8008874:	f7ff fb08 	bl	8007e88 <_Bfree>
 8008878:	3e01      	subs	r6, #1
 800887a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800887c:	2e04      	cmp	r6, #4
 800887e:	d806      	bhi.n	800888e <_strtod_l+0xe6>
 8008880:	e8df f006 	tbb	[pc, r6]
 8008884:	201d0314 	.word	0x201d0314
 8008888:	14          	.byte	0x14
 8008889:	00          	.byte	0x00
 800888a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800888e:	05e1      	lsls	r1, r4, #23
 8008890:	bf48      	it	mi
 8008892:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008896:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800889a:	0d1b      	lsrs	r3, r3, #20
 800889c:	051b      	lsls	r3, r3, #20
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1bb      	bne.n	800881a <_strtod_l+0x72>
 80088a2:	f7fe fb31 	bl	8006f08 <__errno>
 80088a6:	2322      	movs	r3, #34	@ 0x22
 80088a8:	6003      	str	r3, [r0, #0]
 80088aa:	e7b6      	b.n	800881a <_strtod_l+0x72>
 80088ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80088b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80088b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80088b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80088bc:	e7e7      	b.n	800888e <_strtod_l+0xe6>
 80088be:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008a3c <_strtod_l+0x294>
 80088c2:	e7e4      	b.n	800888e <_strtod_l+0xe6>
 80088c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80088c8:	f04f 3aff 	mov.w	sl, #4294967295
 80088cc:	e7df      	b.n	800888e <_strtod_l+0xe6>
 80088ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088d0:	1c5a      	adds	r2, r3, #1
 80088d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2b30      	cmp	r3, #48	@ 0x30
 80088d8:	d0f9      	beq.n	80088ce <_strtod_l+0x126>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d09d      	beq.n	800881a <_strtod_l+0x72>
 80088de:	2301      	movs	r3, #1
 80088e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80088e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80088e6:	2300      	movs	r3, #0
 80088e8:	9308      	str	r3, [sp, #32]
 80088ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80088ec:	461f      	mov	r7, r3
 80088ee:	220a      	movs	r2, #10
 80088f0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80088f2:	7805      	ldrb	r5, [r0, #0]
 80088f4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80088f8:	b2d9      	uxtb	r1, r3
 80088fa:	2909      	cmp	r1, #9
 80088fc:	d928      	bls.n	8008950 <_strtod_l+0x1a8>
 80088fe:	494e      	ldr	r1, [pc, #312]	@ (8008a38 <_strtod_l+0x290>)
 8008900:	2201      	movs	r2, #1
 8008902:	f000 ffd5 	bl	80098b0 <strncmp>
 8008906:	2800      	cmp	r0, #0
 8008908:	d032      	beq.n	8008970 <_strtod_l+0x1c8>
 800890a:	2000      	movs	r0, #0
 800890c:	462a      	mov	r2, r5
 800890e:	4681      	mov	r9, r0
 8008910:	463d      	mov	r5, r7
 8008912:	4603      	mov	r3, r0
 8008914:	2a65      	cmp	r2, #101	@ 0x65
 8008916:	d001      	beq.n	800891c <_strtod_l+0x174>
 8008918:	2a45      	cmp	r2, #69	@ 0x45
 800891a:	d114      	bne.n	8008946 <_strtod_l+0x19e>
 800891c:	b91d      	cbnz	r5, 8008926 <_strtod_l+0x17e>
 800891e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008920:	4302      	orrs	r2, r0
 8008922:	d095      	beq.n	8008850 <_strtod_l+0xa8>
 8008924:	2500      	movs	r5, #0
 8008926:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008928:	1c62      	adds	r2, r4, #1
 800892a:	9219      	str	r2, [sp, #100]	@ 0x64
 800892c:	7862      	ldrb	r2, [r4, #1]
 800892e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008930:	d077      	beq.n	8008a22 <_strtod_l+0x27a>
 8008932:	2a2d      	cmp	r2, #45	@ 0x2d
 8008934:	d07b      	beq.n	8008a2e <_strtod_l+0x286>
 8008936:	f04f 0c00 	mov.w	ip, #0
 800893a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800893e:	2909      	cmp	r1, #9
 8008940:	f240 8082 	bls.w	8008a48 <_strtod_l+0x2a0>
 8008944:	9419      	str	r4, [sp, #100]	@ 0x64
 8008946:	f04f 0800 	mov.w	r8, #0
 800894a:	e0a2      	b.n	8008a92 <_strtod_l+0x2ea>
 800894c:	2300      	movs	r3, #0
 800894e:	e7c7      	b.n	80088e0 <_strtod_l+0x138>
 8008950:	2f08      	cmp	r7, #8
 8008952:	bfd5      	itete	le
 8008954:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008956:	9908      	ldrgt	r1, [sp, #32]
 8008958:	fb02 3301 	mlale	r3, r2, r1, r3
 800895c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008960:	f100 0001 	add.w	r0, r0, #1
 8008964:	bfd4      	ite	le
 8008966:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008968:	9308      	strgt	r3, [sp, #32]
 800896a:	3701      	adds	r7, #1
 800896c:	9019      	str	r0, [sp, #100]	@ 0x64
 800896e:	e7bf      	b.n	80088f0 <_strtod_l+0x148>
 8008970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008972:	1c5a      	adds	r2, r3, #1
 8008974:	9219      	str	r2, [sp, #100]	@ 0x64
 8008976:	785a      	ldrb	r2, [r3, #1]
 8008978:	b37f      	cbz	r7, 80089da <_strtod_l+0x232>
 800897a:	4681      	mov	r9, r0
 800897c:	463d      	mov	r5, r7
 800897e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008982:	2b09      	cmp	r3, #9
 8008984:	d912      	bls.n	80089ac <_strtod_l+0x204>
 8008986:	2301      	movs	r3, #1
 8008988:	e7c4      	b.n	8008914 <_strtod_l+0x16c>
 800898a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008990:	785a      	ldrb	r2, [r3, #1]
 8008992:	3001      	adds	r0, #1
 8008994:	2a30      	cmp	r2, #48	@ 0x30
 8008996:	d0f8      	beq.n	800898a <_strtod_l+0x1e2>
 8008998:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800899c:	2b08      	cmp	r3, #8
 800899e:	f200 84d3 	bhi.w	8009348 <_strtod_l+0xba0>
 80089a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80089a6:	4681      	mov	r9, r0
 80089a8:	2000      	movs	r0, #0
 80089aa:	4605      	mov	r5, r0
 80089ac:	3a30      	subs	r2, #48	@ 0x30
 80089ae:	f100 0301 	add.w	r3, r0, #1
 80089b2:	d02a      	beq.n	8008a0a <_strtod_l+0x262>
 80089b4:	4499      	add	r9, r3
 80089b6:	eb00 0c05 	add.w	ip, r0, r5
 80089ba:	462b      	mov	r3, r5
 80089bc:	210a      	movs	r1, #10
 80089be:	4563      	cmp	r3, ip
 80089c0:	d10d      	bne.n	80089de <_strtod_l+0x236>
 80089c2:	1c69      	adds	r1, r5, #1
 80089c4:	4401      	add	r1, r0
 80089c6:	4428      	add	r0, r5
 80089c8:	2808      	cmp	r0, #8
 80089ca:	dc16      	bgt.n	80089fa <_strtod_l+0x252>
 80089cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80089ce:	230a      	movs	r3, #10
 80089d0:	fb03 2300 	mla	r3, r3, r0, r2
 80089d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80089d6:	2300      	movs	r3, #0
 80089d8:	e018      	b.n	8008a0c <_strtod_l+0x264>
 80089da:	4638      	mov	r0, r7
 80089dc:	e7da      	b.n	8008994 <_strtod_l+0x1ec>
 80089de:	2b08      	cmp	r3, #8
 80089e0:	f103 0301 	add.w	r3, r3, #1
 80089e4:	dc03      	bgt.n	80089ee <_strtod_l+0x246>
 80089e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80089e8:	434e      	muls	r6, r1
 80089ea:	960a      	str	r6, [sp, #40]	@ 0x28
 80089ec:	e7e7      	b.n	80089be <_strtod_l+0x216>
 80089ee:	2b10      	cmp	r3, #16
 80089f0:	bfde      	ittt	le
 80089f2:	9e08      	ldrle	r6, [sp, #32]
 80089f4:	434e      	mulle	r6, r1
 80089f6:	9608      	strle	r6, [sp, #32]
 80089f8:	e7e1      	b.n	80089be <_strtod_l+0x216>
 80089fa:	280f      	cmp	r0, #15
 80089fc:	dceb      	bgt.n	80089d6 <_strtod_l+0x22e>
 80089fe:	9808      	ldr	r0, [sp, #32]
 8008a00:	230a      	movs	r3, #10
 8008a02:	fb03 2300 	mla	r3, r3, r0, r2
 8008a06:	9308      	str	r3, [sp, #32]
 8008a08:	e7e5      	b.n	80089d6 <_strtod_l+0x22e>
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a0e:	1c50      	adds	r0, r2, #1
 8008a10:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a12:	7852      	ldrb	r2, [r2, #1]
 8008a14:	4618      	mov	r0, r3
 8008a16:	460d      	mov	r5, r1
 8008a18:	e7b1      	b.n	800897e <_strtod_l+0x1d6>
 8008a1a:	f04f 0900 	mov.w	r9, #0
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e77d      	b.n	800891e <_strtod_l+0x176>
 8008a22:	f04f 0c00 	mov.w	ip, #0
 8008a26:	1ca2      	adds	r2, r4, #2
 8008a28:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a2a:	78a2      	ldrb	r2, [r4, #2]
 8008a2c:	e785      	b.n	800893a <_strtod_l+0x192>
 8008a2e:	f04f 0c01 	mov.w	ip, #1
 8008a32:	e7f8      	b.n	8008a26 <_strtod_l+0x27e>
 8008a34:	0800af58 	.word	0x0800af58
 8008a38:	0800af40 	.word	0x0800af40
 8008a3c:	7ff00000 	.word	0x7ff00000
 8008a40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a42:	1c51      	adds	r1, r2, #1
 8008a44:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a46:	7852      	ldrb	r2, [r2, #1]
 8008a48:	2a30      	cmp	r2, #48	@ 0x30
 8008a4a:	d0f9      	beq.n	8008a40 <_strtod_l+0x298>
 8008a4c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008a50:	2908      	cmp	r1, #8
 8008a52:	f63f af78 	bhi.w	8008946 <_strtod_l+0x19e>
 8008a56:	3a30      	subs	r2, #48	@ 0x30
 8008a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008a5e:	f04f 080a 	mov.w	r8, #10
 8008a62:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a64:	1c56      	adds	r6, r2, #1
 8008a66:	9619      	str	r6, [sp, #100]	@ 0x64
 8008a68:	7852      	ldrb	r2, [r2, #1]
 8008a6a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008a6e:	f1be 0f09 	cmp.w	lr, #9
 8008a72:	d939      	bls.n	8008ae8 <_strtod_l+0x340>
 8008a74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008a76:	1a76      	subs	r6, r6, r1
 8008a78:	2e08      	cmp	r6, #8
 8008a7a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008a7e:	dc03      	bgt.n	8008a88 <_strtod_l+0x2e0>
 8008a80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008a82:	4588      	cmp	r8, r1
 8008a84:	bfa8      	it	ge
 8008a86:	4688      	movge	r8, r1
 8008a88:	f1bc 0f00 	cmp.w	ip, #0
 8008a8c:	d001      	beq.n	8008a92 <_strtod_l+0x2ea>
 8008a8e:	f1c8 0800 	rsb	r8, r8, #0
 8008a92:	2d00      	cmp	r5, #0
 8008a94:	d14e      	bne.n	8008b34 <_strtod_l+0x38c>
 8008a96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a98:	4308      	orrs	r0, r1
 8008a9a:	f47f aebe 	bne.w	800881a <_strtod_l+0x72>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f47f aed6 	bne.w	8008850 <_strtod_l+0xa8>
 8008aa4:	2a69      	cmp	r2, #105	@ 0x69
 8008aa6:	d028      	beq.n	8008afa <_strtod_l+0x352>
 8008aa8:	dc25      	bgt.n	8008af6 <_strtod_l+0x34e>
 8008aaa:	2a49      	cmp	r2, #73	@ 0x49
 8008aac:	d025      	beq.n	8008afa <_strtod_l+0x352>
 8008aae:	2a4e      	cmp	r2, #78	@ 0x4e
 8008ab0:	f47f aece 	bne.w	8008850 <_strtod_l+0xa8>
 8008ab4:	499b      	ldr	r1, [pc, #620]	@ (8008d24 <_strtod_l+0x57c>)
 8008ab6:	a819      	add	r0, sp, #100	@ 0x64
 8008ab8:	f001 f9ee 	bl	8009e98 <__match>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f43f aec7 	beq.w	8008850 <_strtod_l+0xa8>
 8008ac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b28      	cmp	r3, #40	@ 0x28
 8008ac8:	d12e      	bne.n	8008b28 <_strtod_l+0x380>
 8008aca:	4997      	ldr	r1, [pc, #604]	@ (8008d28 <_strtod_l+0x580>)
 8008acc:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ace:	a819      	add	r0, sp, #100	@ 0x64
 8008ad0:	f001 f9f6 	bl	8009ec0 <__hexnan>
 8008ad4:	2805      	cmp	r0, #5
 8008ad6:	d127      	bne.n	8008b28 <_strtod_l+0x380>
 8008ad8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ada:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008ade:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008ae2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008ae6:	e698      	b.n	800881a <_strtod_l+0x72>
 8008ae8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008aea:	fb08 2101 	mla	r1, r8, r1, r2
 8008aee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008af2:	920e      	str	r2, [sp, #56]	@ 0x38
 8008af4:	e7b5      	b.n	8008a62 <_strtod_l+0x2ba>
 8008af6:	2a6e      	cmp	r2, #110	@ 0x6e
 8008af8:	e7da      	b.n	8008ab0 <_strtod_l+0x308>
 8008afa:	498c      	ldr	r1, [pc, #560]	@ (8008d2c <_strtod_l+0x584>)
 8008afc:	a819      	add	r0, sp, #100	@ 0x64
 8008afe:	f001 f9cb 	bl	8009e98 <__match>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	f43f aea4 	beq.w	8008850 <_strtod_l+0xa8>
 8008b08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b0a:	4989      	ldr	r1, [pc, #548]	@ (8008d30 <_strtod_l+0x588>)
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	a819      	add	r0, sp, #100	@ 0x64
 8008b10:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b12:	f001 f9c1 	bl	8009e98 <__match>
 8008b16:	b910      	cbnz	r0, 8008b1e <_strtod_l+0x376>
 8008b18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b1e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008d40 <_strtod_l+0x598>
 8008b22:	f04f 0a00 	mov.w	sl, #0
 8008b26:	e678      	b.n	800881a <_strtod_l+0x72>
 8008b28:	4882      	ldr	r0, [pc, #520]	@ (8008d34 <_strtod_l+0x58c>)
 8008b2a:	f000 fef1 	bl	8009910 <nan>
 8008b2e:	ec5b ab10 	vmov	sl, fp, d0
 8008b32:	e672      	b.n	800881a <_strtod_l+0x72>
 8008b34:	eba8 0309 	sub.w	r3, r8, r9
 8008b38:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b3c:	2f00      	cmp	r7, #0
 8008b3e:	bf08      	it	eq
 8008b40:	462f      	moveq	r7, r5
 8008b42:	2d10      	cmp	r5, #16
 8008b44:	462c      	mov	r4, r5
 8008b46:	bfa8      	it	ge
 8008b48:	2410      	movge	r4, #16
 8008b4a:	f7f7 fce3 	bl	8000514 <__aeabi_ui2d>
 8008b4e:	2d09      	cmp	r5, #9
 8008b50:	4682      	mov	sl, r0
 8008b52:	468b      	mov	fp, r1
 8008b54:	dc13      	bgt.n	8008b7e <_strtod_l+0x3d6>
 8008b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f43f ae5e 	beq.w	800881a <_strtod_l+0x72>
 8008b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b60:	dd78      	ble.n	8008c54 <_strtod_l+0x4ac>
 8008b62:	2b16      	cmp	r3, #22
 8008b64:	dc5f      	bgt.n	8008c26 <_strtod_l+0x47e>
 8008b66:	4974      	ldr	r1, [pc, #464]	@ (8008d38 <_strtod_l+0x590>)
 8008b68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b70:	4652      	mov	r2, sl
 8008b72:	465b      	mov	r3, fp
 8008b74:	f7f7 fd48 	bl	8000608 <__aeabi_dmul>
 8008b78:	4682      	mov	sl, r0
 8008b7a:	468b      	mov	fp, r1
 8008b7c:	e64d      	b.n	800881a <_strtod_l+0x72>
 8008b7e:	4b6e      	ldr	r3, [pc, #440]	@ (8008d38 <_strtod_l+0x590>)
 8008b80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008b88:	f7f7 fd3e 	bl	8000608 <__aeabi_dmul>
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	9808      	ldr	r0, [sp, #32]
 8008b90:	468b      	mov	fp, r1
 8008b92:	f7f7 fcbf 	bl	8000514 <__aeabi_ui2d>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	f7f7 fb7d 	bl	800029c <__adddf3>
 8008ba2:	2d0f      	cmp	r5, #15
 8008ba4:	4682      	mov	sl, r0
 8008ba6:	468b      	mov	fp, r1
 8008ba8:	ddd5      	ble.n	8008b56 <_strtod_l+0x3ae>
 8008baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bac:	1b2c      	subs	r4, r5, r4
 8008bae:	441c      	add	r4, r3
 8008bb0:	2c00      	cmp	r4, #0
 8008bb2:	f340 8096 	ble.w	8008ce2 <_strtod_l+0x53a>
 8008bb6:	f014 030f 	ands.w	r3, r4, #15
 8008bba:	d00a      	beq.n	8008bd2 <_strtod_l+0x42a>
 8008bbc:	495e      	ldr	r1, [pc, #376]	@ (8008d38 <_strtod_l+0x590>)
 8008bbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bc2:	4652      	mov	r2, sl
 8008bc4:	465b      	mov	r3, fp
 8008bc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bca:	f7f7 fd1d 	bl	8000608 <__aeabi_dmul>
 8008bce:	4682      	mov	sl, r0
 8008bd0:	468b      	mov	fp, r1
 8008bd2:	f034 040f 	bics.w	r4, r4, #15
 8008bd6:	d073      	beq.n	8008cc0 <_strtod_l+0x518>
 8008bd8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008bdc:	dd48      	ble.n	8008c70 <_strtod_l+0x4c8>
 8008bde:	2400      	movs	r4, #0
 8008be0:	46a0      	mov	r8, r4
 8008be2:	940a      	str	r4, [sp, #40]	@ 0x28
 8008be4:	46a1      	mov	r9, r4
 8008be6:	9a05      	ldr	r2, [sp, #20]
 8008be8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008d40 <_strtod_l+0x598>
 8008bec:	2322      	movs	r3, #34	@ 0x22
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	f04f 0a00 	mov.w	sl, #0
 8008bf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f43f ae0f 	beq.w	800881a <_strtod_l+0x72>
 8008bfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bfe:	9805      	ldr	r0, [sp, #20]
 8008c00:	f7ff f942 	bl	8007e88 <_Bfree>
 8008c04:	9805      	ldr	r0, [sp, #20]
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7ff f93e 	bl	8007e88 <_Bfree>
 8008c0c:	9805      	ldr	r0, [sp, #20]
 8008c0e:	4641      	mov	r1, r8
 8008c10:	f7ff f93a 	bl	8007e88 <_Bfree>
 8008c14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c16:	9805      	ldr	r0, [sp, #20]
 8008c18:	f7ff f936 	bl	8007e88 <_Bfree>
 8008c1c:	9805      	ldr	r0, [sp, #20]
 8008c1e:	4621      	mov	r1, r4
 8008c20:	f7ff f932 	bl	8007e88 <_Bfree>
 8008c24:	e5f9      	b.n	800881a <_strtod_l+0x72>
 8008c26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c28:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	dbbc      	blt.n	8008baa <_strtod_l+0x402>
 8008c30:	4c41      	ldr	r4, [pc, #260]	@ (8008d38 <_strtod_l+0x590>)
 8008c32:	f1c5 050f 	rsb	r5, r5, #15
 8008c36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c3a:	4652      	mov	r2, sl
 8008c3c:	465b      	mov	r3, fp
 8008c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c42:	f7f7 fce1 	bl	8000608 <__aeabi_dmul>
 8008c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c48:	1b5d      	subs	r5, r3, r5
 8008c4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008c4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c52:	e78f      	b.n	8008b74 <_strtod_l+0x3cc>
 8008c54:	3316      	adds	r3, #22
 8008c56:	dba8      	blt.n	8008baa <_strtod_l+0x402>
 8008c58:	4b37      	ldr	r3, [pc, #220]	@ (8008d38 <_strtod_l+0x590>)
 8008c5a:	eba9 0808 	sub.w	r8, r9, r8
 8008c5e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008c62:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008c66:	4650      	mov	r0, sl
 8008c68:	4659      	mov	r1, fp
 8008c6a:	f7f7 fdf7 	bl	800085c <__aeabi_ddiv>
 8008c6e:	e783      	b.n	8008b78 <_strtod_l+0x3d0>
 8008c70:	4b32      	ldr	r3, [pc, #200]	@ (8008d3c <_strtod_l+0x594>)
 8008c72:	9308      	str	r3, [sp, #32]
 8008c74:	2300      	movs	r3, #0
 8008c76:	1124      	asrs	r4, r4, #4
 8008c78:	4650      	mov	r0, sl
 8008c7a:	4659      	mov	r1, fp
 8008c7c:	461e      	mov	r6, r3
 8008c7e:	2c01      	cmp	r4, #1
 8008c80:	dc21      	bgt.n	8008cc6 <_strtod_l+0x51e>
 8008c82:	b10b      	cbz	r3, 8008c88 <_strtod_l+0x4e0>
 8008c84:	4682      	mov	sl, r0
 8008c86:	468b      	mov	fp, r1
 8008c88:	492c      	ldr	r1, [pc, #176]	@ (8008d3c <_strtod_l+0x594>)
 8008c8a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008c8e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008c92:	4652      	mov	r2, sl
 8008c94:	465b      	mov	r3, fp
 8008c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c9a:	f7f7 fcb5 	bl	8000608 <__aeabi_dmul>
 8008c9e:	4b28      	ldr	r3, [pc, #160]	@ (8008d40 <_strtod_l+0x598>)
 8008ca0:	460a      	mov	r2, r1
 8008ca2:	400b      	ands	r3, r1
 8008ca4:	4927      	ldr	r1, [pc, #156]	@ (8008d44 <_strtod_l+0x59c>)
 8008ca6:	428b      	cmp	r3, r1
 8008ca8:	4682      	mov	sl, r0
 8008caa:	d898      	bhi.n	8008bde <_strtod_l+0x436>
 8008cac:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf86      	itte	hi
 8008cb4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008d48 <_strtod_l+0x5a0>
 8008cb8:	f04f 3aff 	movhi.w	sl, #4294967295
 8008cbc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	9308      	str	r3, [sp, #32]
 8008cc4:	e07a      	b.n	8008dbc <_strtod_l+0x614>
 8008cc6:	07e2      	lsls	r2, r4, #31
 8008cc8:	d505      	bpl.n	8008cd6 <_strtod_l+0x52e>
 8008cca:	9b08      	ldr	r3, [sp, #32]
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fc9a 	bl	8000608 <__aeabi_dmul>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	9a08      	ldr	r2, [sp, #32]
 8008cd8:	3208      	adds	r2, #8
 8008cda:	3601      	adds	r6, #1
 8008cdc:	1064      	asrs	r4, r4, #1
 8008cde:	9208      	str	r2, [sp, #32]
 8008ce0:	e7cd      	b.n	8008c7e <_strtod_l+0x4d6>
 8008ce2:	d0ed      	beq.n	8008cc0 <_strtod_l+0x518>
 8008ce4:	4264      	negs	r4, r4
 8008ce6:	f014 020f 	ands.w	r2, r4, #15
 8008cea:	d00a      	beq.n	8008d02 <_strtod_l+0x55a>
 8008cec:	4b12      	ldr	r3, [pc, #72]	@ (8008d38 <_strtod_l+0x590>)
 8008cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cf2:	4650      	mov	r0, sl
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 fdaf 	bl	800085c <__aeabi_ddiv>
 8008cfe:	4682      	mov	sl, r0
 8008d00:	468b      	mov	fp, r1
 8008d02:	1124      	asrs	r4, r4, #4
 8008d04:	d0dc      	beq.n	8008cc0 <_strtod_l+0x518>
 8008d06:	2c1f      	cmp	r4, #31
 8008d08:	dd20      	ble.n	8008d4c <_strtod_l+0x5a4>
 8008d0a:	2400      	movs	r4, #0
 8008d0c:	46a0      	mov	r8, r4
 8008d0e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d10:	46a1      	mov	r9, r4
 8008d12:	9a05      	ldr	r2, [sp, #20]
 8008d14:	2322      	movs	r3, #34	@ 0x22
 8008d16:	f04f 0a00 	mov.w	sl, #0
 8008d1a:	f04f 0b00 	mov.w	fp, #0
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	e768      	b.n	8008bf4 <_strtod_l+0x44c>
 8008d22:	bf00      	nop
 8008d24:	0800ad2d 	.word	0x0800ad2d
 8008d28:	0800af44 	.word	0x0800af44
 8008d2c:	0800ad25 	.word	0x0800ad25
 8008d30:	0800ad5c 	.word	0x0800ad5c
 8008d34:	0800b0ed 	.word	0x0800b0ed
 8008d38:	0800ae78 	.word	0x0800ae78
 8008d3c:	0800ae50 	.word	0x0800ae50
 8008d40:	7ff00000 	.word	0x7ff00000
 8008d44:	7ca00000 	.word	0x7ca00000
 8008d48:	7fefffff 	.word	0x7fefffff
 8008d4c:	f014 0310 	ands.w	r3, r4, #16
 8008d50:	bf18      	it	ne
 8008d52:	236a      	movne	r3, #106	@ 0x6a
 8008d54:	4ea9      	ldr	r6, [pc, #676]	@ (8008ffc <_strtod_l+0x854>)
 8008d56:	9308      	str	r3, [sp, #32]
 8008d58:	4650      	mov	r0, sl
 8008d5a:	4659      	mov	r1, fp
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	07e2      	lsls	r2, r4, #31
 8008d60:	d504      	bpl.n	8008d6c <_strtod_l+0x5c4>
 8008d62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d66:	f7f7 fc4f 	bl	8000608 <__aeabi_dmul>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	1064      	asrs	r4, r4, #1
 8008d6e:	f106 0608 	add.w	r6, r6, #8
 8008d72:	d1f4      	bne.n	8008d5e <_strtod_l+0x5b6>
 8008d74:	b10b      	cbz	r3, 8008d7a <_strtod_l+0x5d2>
 8008d76:	4682      	mov	sl, r0
 8008d78:	468b      	mov	fp, r1
 8008d7a:	9b08      	ldr	r3, [sp, #32]
 8008d7c:	b1b3      	cbz	r3, 8008dac <_strtod_l+0x604>
 8008d7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008d82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	4659      	mov	r1, fp
 8008d8a:	dd0f      	ble.n	8008dac <_strtod_l+0x604>
 8008d8c:	2b1f      	cmp	r3, #31
 8008d8e:	dd55      	ble.n	8008e3c <_strtod_l+0x694>
 8008d90:	2b34      	cmp	r3, #52	@ 0x34
 8008d92:	bfde      	ittt	le
 8008d94:	f04f 33ff 	movle.w	r3, #4294967295
 8008d98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008d9c:	4093      	lslle	r3, r2
 8008d9e:	f04f 0a00 	mov.w	sl, #0
 8008da2:	bfcc      	ite	gt
 8008da4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008da8:	ea03 0b01 	andle.w	fp, r3, r1
 8008dac:	2200      	movs	r2, #0
 8008dae:	2300      	movs	r3, #0
 8008db0:	4650      	mov	r0, sl
 8008db2:	4659      	mov	r1, fp
 8008db4:	f7f7 fe90 	bl	8000ad8 <__aeabi_dcmpeq>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d1a6      	bne.n	8008d0a <_strtod_l+0x562>
 8008dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008dc2:	9805      	ldr	r0, [sp, #20]
 8008dc4:	462b      	mov	r3, r5
 8008dc6:	463a      	mov	r2, r7
 8008dc8:	f7ff f8c6 	bl	8007f58 <__s2b>
 8008dcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f43f af05 	beq.w	8008bde <_strtod_l+0x436>
 8008dd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dd6:	2a00      	cmp	r2, #0
 8008dd8:	eba9 0308 	sub.w	r3, r9, r8
 8008ddc:	bfa8      	it	ge
 8008dde:	2300      	movge	r3, #0
 8008de0:	9312      	str	r3, [sp, #72]	@ 0x48
 8008de2:	2400      	movs	r4, #0
 8008de4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008de8:	9316      	str	r3, [sp, #88]	@ 0x58
 8008dea:	46a0      	mov	r8, r4
 8008dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dee:	9805      	ldr	r0, [sp, #20]
 8008df0:	6859      	ldr	r1, [r3, #4]
 8008df2:	f7ff f809 	bl	8007e08 <_Balloc>
 8008df6:	4681      	mov	r9, r0
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	f43f aef4 	beq.w	8008be6 <_strtod_l+0x43e>
 8008dfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e00:	691a      	ldr	r2, [r3, #16]
 8008e02:	3202      	adds	r2, #2
 8008e04:	f103 010c 	add.w	r1, r3, #12
 8008e08:	0092      	lsls	r2, r2, #2
 8008e0a:	300c      	adds	r0, #12
 8008e0c:	f000 fd72 	bl	80098f4 <memcpy>
 8008e10:	ec4b ab10 	vmov	d0, sl, fp
 8008e14:	9805      	ldr	r0, [sp, #20]
 8008e16:	aa1c      	add	r2, sp, #112	@ 0x70
 8008e18:	a91b      	add	r1, sp, #108	@ 0x6c
 8008e1a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008e1e:	f7ff fbd7 	bl	80085d0 <__d2b>
 8008e22:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f43f aede 	beq.w	8008be6 <_strtod_l+0x43e>
 8008e2a:	9805      	ldr	r0, [sp, #20]
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	f7ff f929 	bl	8008084 <__i2b>
 8008e32:	4680      	mov	r8, r0
 8008e34:	b948      	cbnz	r0, 8008e4a <_strtod_l+0x6a2>
 8008e36:	f04f 0800 	mov.w	r8, #0
 8008e3a:	e6d4      	b.n	8008be6 <_strtod_l+0x43e>
 8008e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	ea03 0a0a 	and.w	sl, r3, sl
 8008e48:	e7b0      	b.n	8008dac <_strtod_l+0x604>
 8008e4a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008e4c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	bfab      	itete	ge
 8008e52:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008e54:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008e56:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008e58:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008e5a:	bfac      	ite	ge
 8008e5c:	18ef      	addge	r7, r5, r3
 8008e5e:	1b5e      	sublt	r6, r3, r5
 8008e60:	9b08      	ldr	r3, [sp, #32]
 8008e62:	1aed      	subs	r5, r5, r3
 8008e64:	4415      	add	r5, r2
 8008e66:	4b66      	ldr	r3, [pc, #408]	@ (8009000 <_strtod_l+0x858>)
 8008e68:	3d01      	subs	r5, #1
 8008e6a:	429d      	cmp	r5, r3
 8008e6c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008e70:	da50      	bge.n	8008f14 <_strtod_l+0x76c>
 8008e72:	1b5b      	subs	r3, r3, r5
 8008e74:	2b1f      	cmp	r3, #31
 8008e76:	eba2 0203 	sub.w	r2, r2, r3
 8008e7a:	f04f 0101 	mov.w	r1, #1
 8008e7e:	dc3d      	bgt.n	8008efc <_strtod_l+0x754>
 8008e80:	fa01 f303 	lsl.w	r3, r1, r3
 8008e84:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e86:	2300      	movs	r3, #0
 8008e88:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e8a:	18bd      	adds	r5, r7, r2
 8008e8c:	9b08      	ldr	r3, [sp, #32]
 8008e8e:	42af      	cmp	r7, r5
 8008e90:	4416      	add	r6, r2
 8008e92:	441e      	add	r6, r3
 8008e94:	463b      	mov	r3, r7
 8008e96:	bfa8      	it	ge
 8008e98:	462b      	movge	r3, r5
 8008e9a:	42b3      	cmp	r3, r6
 8008e9c:	bfa8      	it	ge
 8008e9e:	4633      	movge	r3, r6
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	bfc2      	ittt	gt
 8008ea4:	1aed      	subgt	r5, r5, r3
 8008ea6:	1af6      	subgt	r6, r6, r3
 8008ea8:	1aff      	subgt	r7, r7, r3
 8008eaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dd16      	ble.n	8008ede <_strtod_l+0x736>
 8008eb0:	4641      	mov	r1, r8
 8008eb2:	9805      	ldr	r0, [sp, #20]
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f7ff f9a5 	bl	8008204 <__pow5mult>
 8008eba:	4680      	mov	r8, r0
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d0ba      	beq.n	8008e36 <_strtod_l+0x68e>
 8008ec0:	4601      	mov	r1, r0
 8008ec2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ec4:	9805      	ldr	r0, [sp, #20]
 8008ec6:	f7ff f8f3 	bl	80080b0 <__multiply>
 8008eca:	900e      	str	r0, [sp, #56]	@ 0x38
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f43f ae8a 	beq.w	8008be6 <_strtod_l+0x43e>
 8008ed2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ed4:	9805      	ldr	r0, [sp, #20]
 8008ed6:	f7fe ffd7 	bl	8007e88 <_Bfree>
 8008eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008edc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	dc1d      	bgt.n	8008f1e <_strtod_l+0x776>
 8008ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dd23      	ble.n	8008f30 <_strtod_l+0x788>
 8008ee8:	4649      	mov	r1, r9
 8008eea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008eec:	9805      	ldr	r0, [sp, #20]
 8008eee:	f7ff f989 	bl	8008204 <__pow5mult>
 8008ef2:	4681      	mov	r9, r0
 8008ef4:	b9e0      	cbnz	r0, 8008f30 <_strtod_l+0x788>
 8008ef6:	f04f 0900 	mov.w	r9, #0
 8008efa:	e674      	b.n	8008be6 <_strtod_l+0x43e>
 8008efc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008f00:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008f04:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008f08:	35e2      	adds	r5, #226	@ 0xe2
 8008f0a:	fa01 f305 	lsl.w	r3, r1, r5
 8008f0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f10:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008f12:	e7ba      	b.n	8008e8a <_strtod_l+0x6e2>
 8008f14:	2300      	movs	r3, #0
 8008f16:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f18:	2301      	movs	r3, #1
 8008f1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f1c:	e7b5      	b.n	8008e8a <_strtod_l+0x6e2>
 8008f1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f20:	9805      	ldr	r0, [sp, #20]
 8008f22:	462a      	mov	r2, r5
 8008f24:	f7ff f9c8 	bl	80082b8 <__lshift>
 8008f28:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d1d9      	bne.n	8008ee2 <_strtod_l+0x73a>
 8008f2e:	e65a      	b.n	8008be6 <_strtod_l+0x43e>
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	dd07      	ble.n	8008f44 <_strtod_l+0x79c>
 8008f34:	4649      	mov	r1, r9
 8008f36:	9805      	ldr	r0, [sp, #20]
 8008f38:	4632      	mov	r2, r6
 8008f3a:	f7ff f9bd 	bl	80082b8 <__lshift>
 8008f3e:	4681      	mov	r9, r0
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d0d8      	beq.n	8008ef6 <_strtod_l+0x74e>
 8008f44:	2f00      	cmp	r7, #0
 8008f46:	dd08      	ble.n	8008f5a <_strtod_l+0x7b2>
 8008f48:	4641      	mov	r1, r8
 8008f4a:	9805      	ldr	r0, [sp, #20]
 8008f4c:	463a      	mov	r2, r7
 8008f4e:	f7ff f9b3 	bl	80082b8 <__lshift>
 8008f52:	4680      	mov	r8, r0
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f43f ae46 	beq.w	8008be6 <_strtod_l+0x43e>
 8008f5a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f5c:	9805      	ldr	r0, [sp, #20]
 8008f5e:	464a      	mov	r2, r9
 8008f60:	f7ff fa32 	bl	80083c8 <__mdiff>
 8008f64:	4604      	mov	r4, r0
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f ae3d 	beq.w	8008be6 <_strtod_l+0x43e>
 8008f6c:	68c3      	ldr	r3, [r0, #12]
 8008f6e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f70:	2300      	movs	r3, #0
 8008f72:	60c3      	str	r3, [r0, #12]
 8008f74:	4641      	mov	r1, r8
 8008f76:	f7ff fa0b 	bl	8008390 <__mcmp>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	da46      	bge.n	800900c <_strtod_l+0x864>
 8008f7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f80:	ea53 030a 	orrs.w	r3, r3, sl
 8008f84:	d16c      	bne.n	8009060 <_strtod_l+0x8b8>
 8008f86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d168      	bne.n	8009060 <_strtod_l+0x8b8>
 8008f8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f92:	0d1b      	lsrs	r3, r3, #20
 8008f94:	051b      	lsls	r3, r3, #20
 8008f96:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008f9a:	d961      	bls.n	8009060 <_strtod_l+0x8b8>
 8008f9c:	6963      	ldr	r3, [r4, #20]
 8008f9e:	b913      	cbnz	r3, 8008fa6 <_strtod_l+0x7fe>
 8008fa0:	6923      	ldr	r3, [r4, #16]
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	dd5c      	ble.n	8009060 <_strtod_l+0x8b8>
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	2201      	movs	r2, #1
 8008faa:	9805      	ldr	r0, [sp, #20]
 8008fac:	f7ff f984 	bl	80082b8 <__lshift>
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	f7ff f9ec 	bl	8008390 <__mcmp>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	dd51      	ble.n	8009060 <_strtod_l+0x8b8>
 8008fbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fc0:	9a08      	ldr	r2, [sp, #32]
 8008fc2:	0d1b      	lsrs	r3, r3, #20
 8008fc4:	051b      	lsls	r3, r3, #20
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d06b      	beq.n	80090a2 <_strtod_l+0x8fa>
 8008fca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008fce:	d868      	bhi.n	80090a2 <_strtod_l+0x8fa>
 8008fd0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008fd4:	f67f ae9d 	bls.w	8008d12 <_strtod_l+0x56a>
 8008fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8009004 <_strtod_l+0x85c>)
 8008fda:	4650      	mov	r0, sl
 8008fdc:	4659      	mov	r1, fp
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f7f7 fb12 	bl	8000608 <__aeabi_dmul>
 8008fe4:	4b08      	ldr	r3, [pc, #32]	@ (8009008 <_strtod_l+0x860>)
 8008fe6:	400b      	ands	r3, r1
 8008fe8:	4682      	mov	sl, r0
 8008fea:	468b      	mov	fp, r1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f47f ae05 	bne.w	8008bfc <_strtod_l+0x454>
 8008ff2:	9a05      	ldr	r2, [sp, #20]
 8008ff4:	2322      	movs	r3, #34	@ 0x22
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	e600      	b.n	8008bfc <_strtod_l+0x454>
 8008ffa:	bf00      	nop
 8008ffc:	0800af70 	.word	0x0800af70
 8009000:	fffffc02 	.word	0xfffffc02
 8009004:	39500000 	.word	0x39500000
 8009008:	7ff00000 	.word	0x7ff00000
 800900c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009010:	d165      	bne.n	80090de <_strtod_l+0x936>
 8009012:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009014:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009018:	b35a      	cbz	r2, 8009072 <_strtod_l+0x8ca>
 800901a:	4a9f      	ldr	r2, [pc, #636]	@ (8009298 <_strtod_l+0xaf0>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d12b      	bne.n	8009078 <_strtod_l+0x8d0>
 8009020:	9b08      	ldr	r3, [sp, #32]
 8009022:	4651      	mov	r1, sl
 8009024:	b303      	cbz	r3, 8009068 <_strtod_l+0x8c0>
 8009026:	4b9d      	ldr	r3, [pc, #628]	@ (800929c <_strtod_l+0xaf4>)
 8009028:	465a      	mov	r2, fp
 800902a:	4013      	ands	r3, r2
 800902c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009030:	f04f 32ff 	mov.w	r2, #4294967295
 8009034:	d81b      	bhi.n	800906e <_strtod_l+0x8c6>
 8009036:	0d1b      	lsrs	r3, r3, #20
 8009038:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800903c:	fa02 f303 	lsl.w	r3, r2, r3
 8009040:	4299      	cmp	r1, r3
 8009042:	d119      	bne.n	8009078 <_strtod_l+0x8d0>
 8009044:	4b96      	ldr	r3, [pc, #600]	@ (80092a0 <_strtod_l+0xaf8>)
 8009046:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009048:	429a      	cmp	r2, r3
 800904a:	d102      	bne.n	8009052 <_strtod_l+0x8aa>
 800904c:	3101      	adds	r1, #1
 800904e:	f43f adca 	beq.w	8008be6 <_strtod_l+0x43e>
 8009052:	4b92      	ldr	r3, [pc, #584]	@ (800929c <_strtod_l+0xaf4>)
 8009054:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009056:	401a      	ands	r2, r3
 8009058:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800905c:	f04f 0a00 	mov.w	sl, #0
 8009060:	9b08      	ldr	r3, [sp, #32]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1b8      	bne.n	8008fd8 <_strtod_l+0x830>
 8009066:	e5c9      	b.n	8008bfc <_strtod_l+0x454>
 8009068:	f04f 33ff 	mov.w	r3, #4294967295
 800906c:	e7e8      	b.n	8009040 <_strtod_l+0x898>
 800906e:	4613      	mov	r3, r2
 8009070:	e7e6      	b.n	8009040 <_strtod_l+0x898>
 8009072:	ea53 030a 	orrs.w	r3, r3, sl
 8009076:	d0a1      	beq.n	8008fbc <_strtod_l+0x814>
 8009078:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800907a:	b1db      	cbz	r3, 80090b4 <_strtod_l+0x90c>
 800907c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800907e:	4213      	tst	r3, r2
 8009080:	d0ee      	beq.n	8009060 <_strtod_l+0x8b8>
 8009082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009084:	9a08      	ldr	r2, [sp, #32]
 8009086:	4650      	mov	r0, sl
 8009088:	4659      	mov	r1, fp
 800908a:	b1bb      	cbz	r3, 80090bc <_strtod_l+0x914>
 800908c:	f7ff fb6e 	bl	800876c <sulp>
 8009090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009094:	ec53 2b10 	vmov	r2, r3, d0
 8009098:	f7f7 f900 	bl	800029c <__adddf3>
 800909c:	4682      	mov	sl, r0
 800909e:	468b      	mov	fp, r1
 80090a0:	e7de      	b.n	8009060 <_strtod_l+0x8b8>
 80090a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80090a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80090aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80090ae:	f04f 3aff 	mov.w	sl, #4294967295
 80090b2:	e7d5      	b.n	8009060 <_strtod_l+0x8b8>
 80090b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80090b6:	ea13 0f0a 	tst.w	r3, sl
 80090ba:	e7e1      	b.n	8009080 <_strtod_l+0x8d8>
 80090bc:	f7ff fb56 	bl	800876c <sulp>
 80090c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090c4:	ec53 2b10 	vmov	r2, r3, d0
 80090c8:	f7f7 f8e6 	bl	8000298 <__aeabi_dsub>
 80090cc:	2200      	movs	r2, #0
 80090ce:	2300      	movs	r3, #0
 80090d0:	4682      	mov	sl, r0
 80090d2:	468b      	mov	fp, r1
 80090d4:	f7f7 fd00 	bl	8000ad8 <__aeabi_dcmpeq>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d0c1      	beq.n	8009060 <_strtod_l+0x8b8>
 80090dc:	e619      	b.n	8008d12 <_strtod_l+0x56a>
 80090de:	4641      	mov	r1, r8
 80090e0:	4620      	mov	r0, r4
 80090e2:	f7ff facd 	bl	8008680 <__ratio>
 80090e6:	ec57 6b10 	vmov	r6, r7, d0
 80090ea:	2200      	movs	r2, #0
 80090ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80090f0:	4630      	mov	r0, r6
 80090f2:	4639      	mov	r1, r7
 80090f4:	f7f7 fd04 	bl	8000b00 <__aeabi_dcmple>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	d06f      	beq.n	80091dc <_strtod_l+0xa34>
 80090fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d17a      	bne.n	80091f8 <_strtod_l+0xa50>
 8009102:	f1ba 0f00 	cmp.w	sl, #0
 8009106:	d158      	bne.n	80091ba <_strtod_l+0xa12>
 8009108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800910a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800910e:	2b00      	cmp	r3, #0
 8009110:	d15a      	bne.n	80091c8 <_strtod_l+0xa20>
 8009112:	4b64      	ldr	r3, [pc, #400]	@ (80092a4 <_strtod_l+0xafc>)
 8009114:	2200      	movs	r2, #0
 8009116:	4630      	mov	r0, r6
 8009118:	4639      	mov	r1, r7
 800911a:	f7f7 fce7 	bl	8000aec <__aeabi_dcmplt>
 800911e:	2800      	cmp	r0, #0
 8009120:	d159      	bne.n	80091d6 <_strtod_l+0xa2e>
 8009122:	4630      	mov	r0, r6
 8009124:	4639      	mov	r1, r7
 8009126:	4b60      	ldr	r3, [pc, #384]	@ (80092a8 <_strtod_l+0xb00>)
 8009128:	2200      	movs	r2, #0
 800912a:	f7f7 fa6d 	bl	8000608 <__aeabi_dmul>
 800912e:	4606      	mov	r6, r0
 8009130:	460f      	mov	r7, r1
 8009132:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009136:	9606      	str	r6, [sp, #24]
 8009138:	9307      	str	r3, [sp, #28]
 800913a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800913e:	4d57      	ldr	r5, [pc, #348]	@ (800929c <_strtod_l+0xaf4>)
 8009140:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009146:	401d      	ands	r5, r3
 8009148:	4b58      	ldr	r3, [pc, #352]	@ (80092ac <_strtod_l+0xb04>)
 800914a:	429d      	cmp	r5, r3
 800914c:	f040 80b2 	bne.w	80092b4 <_strtod_l+0xb0c>
 8009150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009152:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009156:	ec4b ab10 	vmov	d0, sl, fp
 800915a:	f7ff f9c9 	bl	80084f0 <__ulp>
 800915e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009162:	ec51 0b10 	vmov	r0, r1, d0
 8009166:	f7f7 fa4f 	bl	8000608 <__aeabi_dmul>
 800916a:	4652      	mov	r2, sl
 800916c:	465b      	mov	r3, fp
 800916e:	f7f7 f895 	bl	800029c <__adddf3>
 8009172:	460b      	mov	r3, r1
 8009174:	4949      	ldr	r1, [pc, #292]	@ (800929c <_strtod_l+0xaf4>)
 8009176:	4a4e      	ldr	r2, [pc, #312]	@ (80092b0 <_strtod_l+0xb08>)
 8009178:	4019      	ands	r1, r3
 800917a:	4291      	cmp	r1, r2
 800917c:	4682      	mov	sl, r0
 800917e:	d942      	bls.n	8009206 <_strtod_l+0xa5e>
 8009180:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009182:	4b47      	ldr	r3, [pc, #284]	@ (80092a0 <_strtod_l+0xaf8>)
 8009184:	429a      	cmp	r2, r3
 8009186:	d103      	bne.n	8009190 <_strtod_l+0x9e8>
 8009188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800918a:	3301      	adds	r3, #1
 800918c:	f43f ad2b 	beq.w	8008be6 <_strtod_l+0x43e>
 8009190:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80092a0 <_strtod_l+0xaf8>
 8009194:	f04f 3aff 	mov.w	sl, #4294967295
 8009198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800919a:	9805      	ldr	r0, [sp, #20]
 800919c:	f7fe fe74 	bl	8007e88 <_Bfree>
 80091a0:	9805      	ldr	r0, [sp, #20]
 80091a2:	4649      	mov	r1, r9
 80091a4:	f7fe fe70 	bl	8007e88 <_Bfree>
 80091a8:	9805      	ldr	r0, [sp, #20]
 80091aa:	4641      	mov	r1, r8
 80091ac:	f7fe fe6c 	bl	8007e88 <_Bfree>
 80091b0:	9805      	ldr	r0, [sp, #20]
 80091b2:	4621      	mov	r1, r4
 80091b4:	f7fe fe68 	bl	8007e88 <_Bfree>
 80091b8:	e618      	b.n	8008dec <_strtod_l+0x644>
 80091ba:	f1ba 0f01 	cmp.w	sl, #1
 80091be:	d103      	bne.n	80091c8 <_strtod_l+0xa20>
 80091c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f43f ada5 	beq.w	8008d12 <_strtod_l+0x56a>
 80091c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009278 <_strtod_l+0xad0>
 80091cc:	4f35      	ldr	r7, [pc, #212]	@ (80092a4 <_strtod_l+0xafc>)
 80091ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80091d2:	2600      	movs	r6, #0
 80091d4:	e7b1      	b.n	800913a <_strtod_l+0x992>
 80091d6:	4f34      	ldr	r7, [pc, #208]	@ (80092a8 <_strtod_l+0xb00>)
 80091d8:	2600      	movs	r6, #0
 80091da:	e7aa      	b.n	8009132 <_strtod_l+0x98a>
 80091dc:	4b32      	ldr	r3, [pc, #200]	@ (80092a8 <_strtod_l+0xb00>)
 80091de:	4630      	mov	r0, r6
 80091e0:	4639      	mov	r1, r7
 80091e2:	2200      	movs	r2, #0
 80091e4:	f7f7 fa10 	bl	8000608 <__aeabi_dmul>
 80091e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ea:	4606      	mov	r6, r0
 80091ec:	460f      	mov	r7, r1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d09f      	beq.n	8009132 <_strtod_l+0x98a>
 80091f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80091f6:	e7a0      	b.n	800913a <_strtod_l+0x992>
 80091f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009280 <_strtod_l+0xad8>
 80091fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009200:	ec57 6b17 	vmov	r6, r7, d7
 8009204:	e799      	b.n	800913a <_strtod_l+0x992>
 8009206:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800920a:	9b08      	ldr	r3, [sp, #32]
 800920c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1c1      	bne.n	8009198 <_strtod_l+0x9f0>
 8009214:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009218:	0d1b      	lsrs	r3, r3, #20
 800921a:	051b      	lsls	r3, r3, #20
 800921c:	429d      	cmp	r5, r3
 800921e:	d1bb      	bne.n	8009198 <_strtod_l+0x9f0>
 8009220:	4630      	mov	r0, r6
 8009222:	4639      	mov	r1, r7
 8009224:	f7f7 fd50 	bl	8000cc8 <__aeabi_d2lz>
 8009228:	f7f7 f9c0 	bl	80005ac <__aeabi_l2d>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f7 f830 	bl	8000298 <__aeabi_dsub>
 8009238:	460b      	mov	r3, r1
 800923a:	4602      	mov	r2, r0
 800923c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009240:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009246:	ea46 060a 	orr.w	r6, r6, sl
 800924a:	431e      	orrs	r6, r3
 800924c:	d06f      	beq.n	800932e <_strtod_l+0xb86>
 800924e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009288 <_strtod_l+0xae0>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f7 fc4a 	bl	8000aec <__aeabi_dcmplt>
 8009258:	2800      	cmp	r0, #0
 800925a:	f47f accf 	bne.w	8008bfc <_strtod_l+0x454>
 800925e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009290 <_strtod_l+0xae8>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009268:	f7f7 fc5e 	bl	8000b28 <__aeabi_dcmpgt>
 800926c:	2800      	cmp	r0, #0
 800926e:	d093      	beq.n	8009198 <_strtod_l+0x9f0>
 8009270:	e4c4      	b.n	8008bfc <_strtod_l+0x454>
 8009272:	bf00      	nop
 8009274:	f3af 8000 	nop.w
 8009278:	00000000 	.word	0x00000000
 800927c:	bff00000 	.word	0xbff00000
 8009280:	00000000 	.word	0x00000000
 8009284:	3ff00000 	.word	0x3ff00000
 8009288:	94a03595 	.word	0x94a03595
 800928c:	3fdfffff 	.word	0x3fdfffff
 8009290:	35afe535 	.word	0x35afe535
 8009294:	3fe00000 	.word	0x3fe00000
 8009298:	000fffff 	.word	0x000fffff
 800929c:	7ff00000 	.word	0x7ff00000
 80092a0:	7fefffff 	.word	0x7fefffff
 80092a4:	3ff00000 	.word	0x3ff00000
 80092a8:	3fe00000 	.word	0x3fe00000
 80092ac:	7fe00000 	.word	0x7fe00000
 80092b0:	7c9fffff 	.word	0x7c9fffff
 80092b4:	9b08      	ldr	r3, [sp, #32]
 80092b6:	b323      	cbz	r3, 8009302 <_strtod_l+0xb5a>
 80092b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80092bc:	d821      	bhi.n	8009302 <_strtod_l+0xb5a>
 80092be:	a328      	add	r3, pc, #160	@ (adr r3, 8009360 <_strtod_l+0xbb8>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	4630      	mov	r0, r6
 80092c6:	4639      	mov	r1, r7
 80092c8:	f7f7 fc1a 	bl	8000b00 <__aeabi_dcmple>
 80092cc:	b1a0      	cbz	r0, 80092f8 <_strtod_l+0xb50>
 80092ce:	4639      	mov	r1, r7
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7f7 fc71 	bl	8000bb8 <__aeabi_d2uiz>
 80092d6:	2801      	cmp	r0, #1
 80092d8:	bf38      	it	cc
 80092da:	2001      	movcc	r0, #1
 80092dc:	f7f7 f91a 	bl	8000514 <__aeabi_ui2d>
 80092e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e2:	4606      	mov	r6, r0
 80092e4:	460f      	mov	r7, r1
 80092e6:	b9fb      	cbnz	r3, 8009328 <_strtod_l+0xb80>
 80092e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80092ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80092f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80092f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80092f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80092fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80092fe:	1b5b      	subs	r3, r3, r5
 8009300:	9311      	str	r3, [sp, #68]	@ 0x44
 8009302:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009306:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800930a:	f7ff f8f1 	bl	80084f0 <__ulp>
 800930e:	4650      	mov	r0, sl
 8009310:	ec53 2b10 	vmov	r2, r3, d0
 8009314:	4659      	mov	r1, fp
 8009316:	f7f7 f977 	bl	8000608 <__aeabi_dmul>
 800931a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800931e:	f7f6 ffbd 	bl	800029c <__adddf3>
 8009322:	4682      	mov	sl, r0
 8009324:	468b      	mov	fp, r1
 8009326:	e770      	b.n	800920a <_strtod_l+0xa62>
 8009328:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800932c:	e7e0      	b.n	80092f0 <_strtod_l+0xb48>
 800932e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009368 <_strtod_l+0xbc0>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f7 fbda 	bl	8000aec <__aeabi_dcmplt>
 8009338:	e798      	b.n	800926c <_strtod_l+0xac4>
 800933a:	2300      	movs	r3, #0
 800933c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800933e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009342:	6013      	str	r3, [r2, #0]
 8009344:	f7ff ba6d 	b.w	8008822 <_strtod_l+0x7a>
 8009348:	2a65      	cmp	r2, #101	@ 0x65
 800934a:	f43f ab66 	beq.w	8008a1a <_strtod_l+0x272>
 800934e:	2a45      	cmp	r2, #69	@ 0x45
 8009350:	f43f ab63 	beq.w	8008a1a <_strtod_l+0x272>
 8009354:	2301      	movs	r3, #1
 8009356:	f7ff bb9e 	b.w	8008a96 <_strtod_l+0x2ee>
 800935a:	bf00      	nop
 800935c:	f3af 8000 	nop.w
 8009360:	ffc00000 	.word	0xffc00000
 8009364:	41dfffff 	.word	0x41dfffff
 8009368:	94a03595 	.word	0x94a03595
 800936c:	3fcfffff 	.word	0x3fcfffff

08009370 <_strtod_r>:
 8009370:	4b01      	ldr	r3, [pc, #4]	@ (8009378 <_strtod_r+0x8>)
 8009372:	f7ff ba19 	b.w	80087a8 <_strtod_l>
 8009376:	bf00      	nop
 8009378:	200000f8 	.word	0x200000f8

0800937c <_strtol_l.constprop.0>:
 800937c:	2b24      	cmp	r3, #36	@ 0x24
 800937e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009382:	4686      	mov	lr, r0
 8009384:	4690      	mov	r8, r2
 8009386:	d801      	bhi.n	800938c <_strtol_l.constprop.0+0x10>
 8009388:	2b01      	cmp	r3, #1
 800938a:	d106      	bne.n	800939a <_strtol_l.constprop.0+0x1e>
 800938c:	f7fd fdbc 	bl	8006f08 <__errno>
 8009390:	2316      	movs	r3, #22
 8009392:	6003      	str	r3, [r0, #0]
 8009394:	2000      	movs	r0, #0
 8009396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800939a:	4834      	ldr	r0, [pc, #208]	@ (800946c <_strtol_l.constprop.0+0xf0>)
 800939c:	460d      	mov	r5, r1
 800939e:	462a      	mov	r2, r5
 80093a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093a4:	5d06      	ldrb	r6, [r0, r4]
 80093a6:	f016 0608 	ands.w	r6, r6, #8
 80093aa:	d1f8      	bne.n	800939e <_strtol_l.constprop.0+0x22>
 80093ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80093ae:	d12d      	bne.n	800940c <_strtol_l.constprop.0+0x90>
 80093b0:	782c      	ldrb	r4, [r5, #0]
 80093b2:	2601      	movs	r6, #1
 80093b4:	1c95      	adds	r5, r2, #2
 80093b6:	f033 0210 	bics.w	r2, r3, #16
 80093ba:	d109      	bne.n	80093d0 <_strtol_l.constprop.0+0x54>
 80093bc:	2c30      	cmp	r4, #48	@ 0x30
 80093be:	d12a      	bne.n	8009416 <_strtol_l.constprop.0+0x9a>
 80093c0:	782a      	ldrb	r2, [r5, #0]
 80093c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80093c6:	2a58      	cmp	r2, #88	@ 0x58
 80093c8:	d125      	bne.n	8009416 <_strtol_l.constprop.0+0x9a>
 80093ca:	786c      	ldrb	r4, [r5, #1]
 80093cc:	2310      	movs	r3, #16
 80093ce:	3502      	adds	r5, #2
 80093d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80093d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80093d8:	2200      	movs	r2, #0
 80093da:	fbbc f9f3 	udiv	r9, ip, r3
 80093de:	4610      	mov	r0, r2
 80093e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80093e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80093e8:	2f09      	cmp	r7, #9
 80093ea:	d81b      	bhi.n	8009424 <_strtol_l.constprop.0+0xa8>
 80093ec:	463c      	mov	r4, r7
 80093ee:	42a3      	cmp	r3, r4
 80093f0:	dd27      	ble.n	8009442 <_strtol_l.constprop.0+0xc6>
 80093f2:	1c57      	adds	r7, r2, #1
 80093f4:	d007      	beq.n	8009406 <_strtol_l.constprop.0+0x8a>
 80093f6:	4581      	cmp	r9, r0
 80093f8:	d320      	bcc.n	800943c <_strtol_l.constprop.0+0xc0>
 80093fa:	d101      	bne.n	8009400 <_strtol_l.constprop.0+0x84>
 80093fc:	45a2      	cmp	sl, r4
 80093fe:	db1d      	blt.n	800943c <_strtol_l.constprop.0+0xc0>
 8009400:	fb00 4003 	mla	r0, r0, r3, r4
 8009404:	2201      	movs	r2, #1
 8009406:	f815 4b01 	ldrb.w	r4, [r5], #1
 800940a:	e7eb      	b.n	80093e4 <_strtol_l.constprop.0+0x68>
 800940c:	2c2b      	cmp	r4, #43	@ 0x2b
 800940e:	bf04      	itt	eq
 8009410:	782c      	ldrbeq	r4, [r5, #0]
 8009412:	1c95      	addeq	r5, r2, #2
 8009414:	e7cf      	b.n	80093b6 <_strtol_l.constprop.0+0x3a>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1da      	bne.n	80093d0 <_strtol_l.constprop.0+0x54>
 800941a:	2c30      	cmp	r4, #48	@ 0x30
 800941c:	bf0c      	ite	eq
 800941e:	2308      	moveq	r3, #8
 8009420:	230a      	movne	r3, #10
 8009422:	e7d5      	b.n	80093d0 <_strtol_l.constprop.0+0x54>
 8009424:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009428:	2f19      	cmp	r7, #25
 800942a:	d801      	bhi.n	8009430 <_strtol_l.constprop.0+0xb4>
 800942c:	3c37      	subs	r4, #55	@ 0x37
 800942e:	e7de      	b.n	80093ee <_strtol_l.constprop.0+0x72>
 8009430:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009434:	2f19      	cmp	r7, #25
 8009436:	d804      	bhi.n	8009442 <_strtol_l.constprop.0+0xc6>
 8009438:	3c57      	subs	r4, #87	@ 0x57
 800943a:	e7d8      	b.n	80093ee <_strtol_l.constprop.0+0x72>
 800943c:	f04f 32ff 	mov.w	r2, #4294967295
 8009440:	e7e1      	b.n	8009406 <_strtol_l.constprop.0+0x8a>
 8009442:	1c53      	adds	r3, r2, #1
 8009444:	d108      	bne.n	8009458 <_strtol_l.constprop.0+0xdc>
 8009446:	2322      	movs	r3, #34	@ 0x22
 8009448:	f8ce 3000 	str.w	r3, [lr]
 800944c:	4660      	mov	r0, ip
 800944e:	f1b8 0f00 	cmp.w	r8, #0
 8009452:	d0a0      	beq.n	8009396 <_strtol_l.constprop.0+0x1a>
 8009454:	1e69      	subs	r1, r5, #1
 8009456:	e006      	b.n	8009466 <_strtol_l.constprop.0+0xea>
 8009458:	b106      	cbz	r6, 800945c <_strtol_l.constprop.0+0xe0>
 800945a:	4240      	negs	r0, r0
 800945c:	f1b8 0f00 	cmp.w	r8, #0
 8009460:	d099      	beq.n	8009396 <_strtol_l.constprop.0+0x1a>
 8009462:	2a00      	cmp	r2, #0
 8009464:	d1f6      	bne.n	8009454 <_strtol_l.constprop.0+0xd8>
 8009466:	f8c8 1000 	str.w	r1, [r8]
 800946a:	e794      	b.n	8009396 <_strtol_l.constprop.0+0x1a>
 800946c:	0800af99 	.word	0x0800af99

08009470 <_strtol_r>:
 8009470:	f7ff bf84 	b.w	800937c <_strtol_l.constprop.0>

08009474 <__ssputs_r>:
 8009474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	688e      	ldr	r6, [r1, #8]
 800947a:	461f      	mov	r7, r3
 800947c:	42be      	cmp	r6, r7
 800947e:	680b      	ldr	r3, [r1, #0]
 8009480:	4682      	mov	sl, r0
 8009482:	460c      	mov	r4, r1
 8009484:	4690      	mov	r8, r2
 8009486:	d82d      	bhi.n	80094e4 <__ssputs_r+0x70>
 8009488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800948c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009490:	d026      	beq.n	80094e0 <__ssputs_r+0x6c>
 8009492:	6965      	ldr	r5, [r4, #20]
 8009494:	6909      	ldr	r1, [r1, #16]
 8009496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800949a:	eba3 0901 	sub.w	r9, r3, r1
 800949e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094a2:	1c7b      	adds	r3, r7, #1
 80094a4:	444b      	add	r3, r9
 80094a6:	106d      	asrs	r5, r5, #1
 80094a8:	429d      	cmp	r5, r3
 80094aa:	bf38      	it	cc
 80094ac:	461d      	movcc	r5, r3
 80094ae:	0553      	lsls	r3, r2, #21
 80094b0:	d527      	bpl.n	8009502 <__ssputs_r+0x8e>
 80094b2:	4629      	mov	r1, r5
 80094b4:	f7fe fc1c 	bl	8007cf0 <_malloc_r>
 80094b8:	4606      	mov	r6, r0
 80094ba:	b360      	cbz	r0, 8009516 <__ssputs_r+0xa2>
 80094bc:	6921      	ldr	r1, [r4, #16]
 80094be:	464a      	mov	r2, r9
 80094c0:	f000 fa18 	bl	80098f4 <memcpy>
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80094ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ce:	81a3      	strh	r3, [r4, #12]
 80094d0:	6126      	str	r6, [r4, #16]
 80094d2:	6165      	str	r5, [r4, #20]
 80094d4:	444e      	add	r6, r9
 80094d6:	eba5 0509 	sub.w	r5, r5, r9
 80094da:	6026      	str	r6, [r4, #0]
 80094dc:	60a5      	str	r5, [r4, #8]
 80094de:	463e      	mov	r6, r7
 80094e0:	42be      	cmp	r6, r7
 80094e2:	d900      	bls.n	80094e6 <__ssputs_r+0x72>
 80094e4:	463e      	mov	r6, r7
 80094e6:	6820      	ldr	r0, [r4, #0]
 80094e8:	4632      	mov	r2, r6
 80094ea:	4641      	mov	r1, r8
 80094ec:	f000 f9c6 	bl	800987c <memmove>
 80094f0:	68a3      	ldr	r3, [r4, #8]
 80094f2:	1b9b      	subs	r3, r3, r6
 80094f4:	60a3      	str	r3, [r4, #8]
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	4433      	add	r3, r6
 80094fa:	6023      	str	r3, [r4, #0]
 80094fc:	2000      	movs	r0, #0
 80094fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009502:	462a      	mov	r2, r5
 8009504:	f000 fd89 	bl	800a01a <_realloc_r>
 8009508:	4606      	mov	r6, r0
 800950a:	2800      	cmp	r0, #0
 800950c:	d1e0      	bne.n	80094d0 <__ssputs_r+0x5c>
 800950e:	6921      	ldr	r1, [r4, #16]
 8009510:	4650      	mov	r0, sl
 8009512:	f7fe fb79 	bl	8007c08 <_free_r>
 8009516:	230c      	movs	r3, #12
 8009518:	f8ca 3000 	str.w	r3, [sl]
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009522:	81a3      	strh	r3, [r4, #12]
 8009524:	f04f 30ff 	mov.w	r0, #4294967295
 8009528:	e7e9      	b.n	80094fe <__ssputs_r+0x8a>
	...

0800952c <_svfiprintf_r>:
 800952c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	4698      	mov	r8, r3
 8009532:	898b      	ldrh	r3, [r1, #12]
 8009534:	061b      	lsls	r3, r3, #24
 8009536:	b09d      	sub	sp, #116	@ 0x74
 8009538:	4607      	mov	r7, r0
 800953a:	460d      	mov	r5, r1
 800953c:	4614      	mov	r4, r2
 800953e:	d510      	bpl.n	8009562 <_svfiprintf_r+0x36>
 8009540:	690b      	ldr	r3, [r1, #16]
 8009542:	b973      	cbnz	r3, 8009562 <_svfiprintf_r+0x36>
 8009544:	2140      	movs	r1, #64	@ 0x40
 8009546:	f7fe fbd3 	bl	8007cf0 <_malloc_r>
 800954a:	6028      	str	r0, [r5, #0]
 800954c:	6128      	str	r0, [r5, #16]
 800954e:	b930      	cbnz	r0, 800955e <_svfiprintf_r+0x32>
 8009550:	230c      	movs	r3, #12
 8009552:	603b      	str	r3, [r7, #0]
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	b01d      	add	sp, #116	@ 0x74
 800955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955e:	2340      	movs	r3, #64	@ 0x40
 8009560:	616b      	str	r3, [r5, #20]
 8009562:	2300      	movs	r3, #0
 8009564:	9309      	str	r3, [sp, #36]	@ 0x24
 8009566:	2320      	movs	r3, #32
 8009568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800956c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009570:	2330      	movs	r3, #48	@ 0x30
 8009572:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009710 <_svfiprintf_r+0x1e4>
 8009576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800957a:	f04f 0901 	mov.w	r9, #1
 800957e:	4623      	mov	r3, r4
 8009580:	469a      	mov	sl, r3
 8009582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009586:	b10a      	cbz	r2, 800958c <_svfiprintf_r+0x60>
 8009588:	2a25      	cmp	r2, #37	@ 0x25
 800958a:	d1f9      	bne.n	8009580 <_svfiprintf_r+0x54>
 800958c:	ebba 0b04 	subs.w	fp, sl, r4
 8009590:	d00b      	beq.n	80095aa <_svfiprintf_r+0x7e>
 8009592:	465b      	mov	r3, fp
 8009594:	4622      	mov	r2, r4
 8009596:	4629      	mov	r1, r5
 8009598:	4638      	mov	r0, r7
 800959a:	f7ff ff6b 	bl	8009474 <__ssputs_r>
 800959e:	3001      	adds	r0, #1
 80095a0:	f000 80a7 	beq.w	80096f2 <_svfiprintf_r+0x1c6>
 80095a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095a6:	445a      	add	r2, fp
 80095a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80095aa:	f89a 3000 	ldrb.w	r3, [sl]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 809f 	beq.w	80096f2 <_svfiprintf_r+0x1c6>
 80095b4:	2300      	movs	r3, #0
 80095b6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095be:	f10a 0a01 	add.w	sl, sl, #1
 80095c2:	9304      	str	r3, [sp, #16]
 80095c4:	9307      	str	r3, [sp, #28]
 80095c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80095cc:	4654      	mov	r4, sl
 80095ce:	2205      	movs	r2, #5
 80095d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d4:	484e      	ldr	r0, [pc, #312]	@ (8009710 <_svfiprintf_r+0x1e4>)
 80095d6:	f7f6 fe03 	bl	80001e0 <memchr>
 80095da:	9a04      	ldr	r2, [sp, #16]
 80095dc:	b9d8      	cbnz	r0, 8009616 <_svfiprintf_r+0xea>
 80095de:	06d0      	lsls	r0, r2, #27
 80095e0:	bf44      	itt	mi
 80095e2:	2320      	movmi	r3, #32
 80095e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095e8:	0711      	lsls	r1, r2, #28
 80095ea:	bf44      	itt	mi
 80095ec:	232b      	movmi	r3, #43	@ 0x2b
 80095ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095f2:	f89a 3000 	ldrb.w	r3, [sl]
 80095f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80095f8:	d015      	beq.n	8009626 <_svfiprintf_r+0xfa>
 80095fa:	9a07      	ldr	r2, [sp, #28]
 80095fc:	4654      	mov	r4, sl
 80095fe:	2000      	movs	r0, #0
 8009600:	f04f 0c0a 	mov.w	ip, #10
 8009604:	4621      	mov	r1, r4
 8009606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800960a:	3b30      	subs	r3, #48	@ 0x30
 800960c:	2b09      	cmp	r3, #9
 800960e:	d94b      	bls.n	80096a8 <_svfiprintf_r+0x17c>
 8009610:	b1b0      	cbz	r0, 8009640 <_svfiprintf_r+0x114>
 8009612:	9207      	str	r2, [sp, #28]
 8009614:	e014      	b.n	8009640 <_svfiprintf_r+0x114>
 8009616:	eba0 0308 	sub.w	r3, r0, r8
 800961a:	fa09 f303 	lsl.w	r3, r9, r3
 800961e:	4313      	orrs	r3, r2
 8009620:	9304      	str	r3, [sp, #16]
 8009622:	46a2      	mov	sl, r4
 8009624:	e7d2      	b.n	80095cc <_svfiprintf_r+0xa0>
 8009626:	9b03      	ldr	r3, [sp, #12]
 8009628:	1d19      	adds	r1, r3, #4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	9103      	str	r1, [sp, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	bfbb      	ittet	lt
 8009632:	425b      	neglt	r3, r3
 8009634:	f042 0202 	orrlt.w	r2, r2, #2
 8009638:	9307      	strge	r3, [sp, #28]
 800963a:	9307      	strlt	r3, [sp, #28]
 800963c:	bfb8      	it	lt
 800963e:	9204      	strlt	r2, [sp, #16]
 8009640:	7823      	ldrb	r3, [r4, #0]
 8009642:	2b2e      	cmp	r3, #46	@ 0x2e
 8009644:	d10a      	bne.n	800965c <_svfiprintf_r+0x130>
 8009646:	7863      	ldrb	r3, [r4, #1]
 8009648:	2b2a      	cmp	r3, #42	@ 0x2a
 800964a:	d132      	bne.n	80096b2 <_svfiprintf_r+0x186>
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	1d1a      	adds	r2, r3, #4
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	9203      	str	r2, [sp, #12]
 8009654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009658:	3402      	adds	r4, #2
 800965a:	9305      	str	r3, [sp, #20]
 800965c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009720 <_svfiprintf_r+0x1f4>
 8009660:	7821      	ldrb	r1, [r4, #0]
 8009662:	2203      	movs	r2, #3
 8009664:	4650      	mov	r0, sl
 8009666:	f7f6 fdbb 	bl	80001e0 <memchr>
 800966a:	b138      	cbz	r0, 800967c <_svfiprintf_r+0x150>
 800966c:	9b04      	ldr	r3, [sp, #16]
 800966e:	eba0 000a 	sub.w	r0, r0, sl
 8009672:	2240      	movs	r2, #64	@ 0x40
 8009674:	4082      	lsls	r2, r0
 8009676:	4313      	orrs	r3, r2
 8009678:	3401      	adds	r4, #1
 800967a:	9304      	str	r3, [sp, #16]
 800967c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009680:	4824      	ldr	r0, [pc, #144]	@ (8009714 <_svfiprintf_r+0x1e8>)
 8009682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009686:	2206      	movs	r2, #6
 8009688:	f7f6 fdaa 	bl	80001e0 <memchr>
 800968c:	2800      	cmp	r0, #0
 800968e:	d036      	beq.n	80096fe <_svfiprintf_r+0x1d2>
 8009690:	4b21      	ldr	r3, [pc, #132]	@ (8009718 <_svfiprintf_r+0x1ec>)
 8009692:	bb1b      	cbnz	r3, 80096dc <_svfiprintf_r+0x1b0>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	3307      	adds	r3, #7
 8009698:	f023 0307 	bic.w	r3, r3, #7
 800969c:	3308      	adds	r3, #8
 800969e:	9303      	str	r3, [sp, #12]
 80096a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096a2:	4433      	add	r3, r6
 80096a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096a6:	e76a      	b.n	800957e <_svfiprintf_r+0x52>
 80096a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80096ac:	460c      	mov	r4, r1
 80096ae:	2001      	movs	r0, #1
 80096b0:	e7a8      	b.n	8009604 <_svfiprintf_r+0xd8>
 80096b2:	2300      	movs	r3, #0
 80096b4:	3401      	adds	r4, #1
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	4619      	mov	r1, r3
 80096ba:	f04f 0c0a 	mov.w	ip, #10
 80096be:	4620      	mov	r0, r4
 80096c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096c4:	3a30      	subs	r2, #48	@ 0x30
 80096c6:	2a09      	cmp	r2, #9
 80096c8:	d903      	bls.n	80096d2 <_svfiprintf_r+0x1a6>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d0c6      	beq.n	800965c <_svfiprintf_r+0x130>
 80096ce:	9105      	str	r1, [sp, #20]
 80096d0:	e7c4      	b.n	800965c <_svfiprintf_r+0x130>
 80096d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80096d6:	4604      	mov	r4, r0
 80096d8:	2301      	movs	r3, #1
 80096da:	e7f0      	b.n	80096be <_svfiprintf_r+0x192>
 80096dc:	ab03      	add	r3, sp, #12
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	462a      	mov	r2, r5
 80096e2:	4b0e      	ldr	r3, [pc, #56]	@ (800971c <_svfiprintf_r+0x1f0>)
 80096e4:	a904      	add	r1, sp, #16
 80096e6:	4638      	mov	r0, r7
 80096e8:	f7fc fcca 	bl	8006080 <_printf_float>
 80096ec:	1c42      	adds	r2, r0, #1
 80096ee:	4606      	mov	r6, r0
 80096f0:	d1d6      	bne.n	80096a0 <_svfiprintf_r+0x174>
 80096f2:	89ab      	ldrh	r3, [r5, #12]
 80096f4:	065b      	lsls	r3, r3, #25
 80096f6:	f53f af2d 	bmi.w	8009554 <_svfiprintf_r+0x28>
 80096fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096fc:	e72c      	b.n	8009558 <_svfiprintf_r+0x2c>
 80096fe:	ab03      	add	r3, sp, #12
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	462a      	mov	r2, r5
 8009704:	4b05      	ldr	r3, [pc, #20]	@ (800971c <_svfiprintf_r+0x1f0>)
 8009706:	a904      	add	r1, sp, #16
 8009708:	4638      	mov	r0, r7
 800970a:	f7fc ff51 	bl	80065b0 <_printf_i>
 800970e:	e7ed      	b.n	80096ec <_svfiprintf_r+0x1c0>
 8009710:	0800b099 	.word	0x0800b099
 8009714:	0800b0a3 	.word	0x0800b0a3
 8009718:	08006081 	.word	0x08006081
 800971c:	08009475 	.word	0x08009475
 8009720:	0800b09f 	.word	0x0800b09f

08009724 <__sflush_r>:
 8009724:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800972c:	0716      	lsls	r6, r2, #28
 800972e:	4605      	mov	r5, r0
 8009730:	460c      	mov	r4, r1
 8009732:	d454      	bmi.n	80097de <__sflush_r+0xba>
 8009734:	684b      	ldr	r3, [r1, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	dc02      	bgt.n	8009740 <__sflush_r+0x1c>
 800973a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	dd48      	ble.n	80097d2 <__sflush_r+0xae>
 8009740:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009742:	2e00      	cmp	r6, #0
 8009744:	d045      	beq.n	80097d2 <__sflush_r+0xae>
 8009746:	2300      	movs	r3, #0
 8009748:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800974c:	682f      	ldr	r7, [r5, #0]
 800974e:	6a21      	ldr	r1, [r4, #32]
 8009750:	602b      	str	r3, [r5, #0]
 8009752:	d030      	beq.n	80097b6 <__sflush_r+0x92>
 8009754:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	0759      	lsls	r1, r3, #29
 800975a:	d505      	bpl.n	8009768 <__sflush_r+0x44>
 800975c:	6863      	ldr	r3, [r4, #4]
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009762:	b10b      	cbz	r3, 8009768 <__sflush_r+0x44>
 8009764:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	2300      	movs	r3, #0
 800976a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800976c:	6a21      	ldr	r1, [r4, #32]
 800976e:	4628      	mov	r0, r5
 8009770:	47b0      	blx	r6
 8009772:	1c43      	adds	r3, r0, #1
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	d106      	bne.n	8009786 <__sflush_r+0x62>
 8009778:	6829      	ldr	r1, [r5, #0]
 800977a:	291d      	cmp	r1, #29
 800977c:	d82b      	bhi.n	80097d6 <__sflush_r+0xb2>
 800977e:	4a2a      	ldr	r2, [pc, #168]	@ (8009828 <__sflush_r+0x104>)
 8009780:	410a      	asrs	r2, r1
 8009782:	07d6      	lsls	r6, r2, #31
 8009784:	d427      	bmi.n	80097d6 <__sflush_r+0xb2>
 8009786:	2200      	movs	r2, #0
 8009788:	6062      	str	r2, [r4, #4]
 800978a:	04d9      	lsls	r1, r3, #19
 800978c:	6922      	ldr	r2, [r4, #16]
 800978e:	6022      	str	r2, [r4, #0]
 8009790:	d504      	bpl.n	800979c <__sflush_r+0x78>
 8009792:	1c42      	adds	r2, r0, #1
 8009794:	d101      	bne.n	800979a <__sflush_r+0x76>
 8009796:	682b      	ldr	r3, [r5, #0]
 8009798:	b903      	cbnz	r3, 800979c <__sflush_r+0x78>
 800979a:	6560      	str	r0, [r4, #84]	@ 0x54
 800979c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800979e:	602f      	str	r7, [r5, #0]
 80097a0:	b1b9      	cbz	r1, 80097d2 <__sflush_r+0xae>
 80097a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097a6:	4299      	cmp	r1, r3
 80097a8:	d002      	beq.n	80097b0 <__sflush_r+0x8c>
 80097aa:	4628      	mov	r0, r5
 80097ac:	f7fe fa2c 	bl	8007c08 <_free_r>
 80097b0:	2300      	movs	r3, #0
 80097b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80097b4:	e00d      	b.n	80097d2 <__sflush_r+0xae>
 80097b6:	2301      	movs	r3, #1
 80097b8:	4628      	mov	r0, r5
 80097ba:	47b0      	blx	r6
 80097bc:	4602      	mov	r2, r0
 80097be:	1c50      	adds	r0, r2, #1
 80097c0:	d1c9      	bne.n	8009756 <__sflush_r+0x32>
 80097c2:	682b      	ldr	r3, [r5, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d0c6      	beq.n	8009756 <__sflush_r+0x32>
 80097c8:	2b1d      	cmp	r3, #29
 80097ca:	d001      	beq.n	80097d0 <__sflush_r+0xac>
 80097cc:	2b16      	cmp	r3, #22
 80097ce:	d11e      	bne.n	800980e <__sflush_r+0xea>
 80097d0:	602f      	str	r7, [r5, #0]
 80097d2:	2000      	movs	r0, #0
 80097d4:	e022      	b.n	800981c <__sflush_r+0xf8>
 80097d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097da:	b21b      	sxth	r3, r3
 80097dc:	e01b      	b.n	8009816 <__sflush_r+0xf2>
 80097de:	690f      	ldr	r7, [r1, #16]
 80097e0:	2f00      	cmp	r7, #0
 80097e2:	d0f6      	beq.n	80097d2 <__sflush_r+0xae>
 80097e4:	0793      	lsls	r3, r2, #30
 80097e6:	680e      	ldr	r6, [r1, #0]
 80097e8:	bf08      	it	eq
 80097ea:	694b      	ldreq	r3, [r1, #20]
 80097ec:	600f      	str	r7, [r1, #0]
 80097ee:	bf18      	it	ne
 80097f0:	2300      	movne	r3, #0
 80097f2:	eba6 0807 	sub.w	r8, r6, r7
 80097f6:	608b      	str	r3, [r1, #8]
 80097f8:	f1b8 0f00 	cmp.w	r8, #0
 80097fc:	dde9      	ble.n	80097d2 <__sflush_r+0xae>
 80097fe:	6a21      	ldr	r1, [r4, #32]
 8009800:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009802:	4643      	mov	r3, r8
 8009804:	463a      	mov	r2, r7
 8009806:	4628      	mov	r0, r5
 8009808:	47b0      	blx	r6
 800980a:	2800      	cmp	r0, #0
 800980c:	dc08      	bgt.n	8009820 <__sflush_r+0xfc>
 800980e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	f04f 30ff 	mov.w	r0, #4294967295
 800981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009820:	4407      	add	r7, r0
 8009822:	eba8 0800 	sub.w	r8, r8, r0
 8009826:	e7e7      	b.n	80097f8 <__sflush_r+0xd4>
 8009828:	dfbffffe 	.word	0xdfbffffe

0800982c <_fflush_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	690b      	ldr	r3, [r1, #16]
 8009830:	4605      	mov	r5, r0
 8009832:	460c      	mov	r4, r1
 8009834:	b913      	cbnz	r3, 800983c <_fflush_r+0x10>
 8009836:	2500      	movs	r5, #0
 8009838:	4628      	mov	r0, r5
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	b118      	cbz	r0, 8009846 <_fflush_r+0x1a>
 800983e:	6a03      	ldr	r3, [r0, #32]
 8009840:	b90b      	cbnz	r3, 8009846 <_fflush_r+0x1a>
 8009842:	f7fd fa75 	bl	8006d30 <__sinit>
 8009846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0f3      	beq.n	8009836 <_fflush_r+0xa>
 800984e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009850:	07d0      	lsls	r0, r2, #31
 8009852:	d404      	bmi.n	800985e <_fflush_r+0x32>
 8009854:	0599      	lsls	r1, r3, #22
 8009856:	d402      	bmi.n	800985e <_fflush_r+0x32>
 8009858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800985a:	f7fd fb80 	bl	8006f5e <__retarget_lock_acquire_recursive>
 800985e:	4628      	mov	r0, r5
 8009860:	4621      	mov	r1, r4
 8009862:	f7ff ff5f 	bl	8009724 <__sflush_r>
 8009866:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009868:	07da      	lsls	r2, r3, #31
 800986a:	4605      	mov	r5, r0
 800986c:	d4e4      	bmi.n	8009838 <_fflush_r+0xc>
 800986e:	89a3      	ldrh	r3, [r4, #12]
 8009870:	059b      	lsls	r3, r3, #22
 8009872:	d4e1      	bmi.n	8009838 <_fflush_r+0xc>
 8009874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009876:	f7fd fb73 	bl	8006f60 <__retarget_lock_release_recursive>
 800987a:	e7dd      	b.n	8009838 <_fflush_r+0xc>

0800987c <memmove>:
 800987c:	4288      	cmp	r0, r1
 800987e:	b510      	push	{r4, lr}
 8009880:	eb01 0402 	add.w	r4, r1, r2
 8009884:	d902      	bls.n	800988c <memmove+0x10>
 8009886:	4284      	cmp	r4, r0
 8009888:	4623      	mov	r3, r4
 800988a:	d807      	bhi.n	800989c <memmove+0x20>
 800988c:	1e43      	subs	r3, r0, #1
 800988e:	42a1      	cmp	r1, r4
 8009890:	d008      	beq.n	80098a4 <memmove+0x28>
 8009892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800989a:	e7f8      	b.n	800988e <memmove+0x12>
 800989c:	4402      	add	r2, r0
 800989e:	4601      	mov	r1, r0
 80098a0:	428a      	cmp	r2, r1
 80098a2:	d100      	bne.n	80098a6 <memmove+0x2a>
 80098a4:	bd10      	pop	{r4, pc}
 80098a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098ae:	e7f7      	b.n	80098a0 <memmove+0x24>

080098b0 <strncmp>:
 80098b0:	b510      	push	{r4, lr}
 80098b2:	b16a      	cbz	r2, 80098d0 <strncmp+0x20>
 80098b4:	3901      	subs	r1, #1
 80098b6:	1884      	adds	r4, r0, r2
 80098b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d103      	bne.n	80098cc <strncmp+0x1c>
 80098c4:	42a0      	cmp	r0, r4
 80098c6:	d001      	beq.n	80098cc <strncmp+0x1c>
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	d1f5      	bne.n	80098b8 <strncmp+0x8>
 80098cc:	1ad0      	subs	r0, r2, r3
 80098ce:	bd10      	pop	{r4, pc}
 80098d0:	4610      	mov	r0, r2
 80098d2:	e7fc      	b.n	80098ce <strncmp+0x1e>

080098d4 <_sbrk_r>:
 80098d4:	b538      	push	{r3, r4, r5, lr}
 80098d6:	4d06      	ldr	r5, [pc, #24]	@ (80098f0 <_sbrk_r+0x1c>)
 80098d8:	2300      	movs	r3, #0
 80098da:	4604      	mov	r4, r0
 80098dc:	4608      	mov	r0, r1
 80098de:	602b      	str	r3, [r5, #0]
 80098e0:	f7f8 faa6 	bl	8001e30 <_sbrk>
 80098e4:	1c43      	adds	r3, r0, #1
 80098e6:	d102      	bne.n	80098ee <_sbrk_r+0x1a>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b103      	cbz	r3, 80098ee <_sbrk_r+0x1a>
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	bd38      	pop	{r3, r4, r5, pc}
 80098f0:	20000598 	.word	0x20000598

080098f4 <memcpy>:
 80098f4:	440a      	add	r2, r1
 80098f6:	4291      	cmp	r1, r2
 80098f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80098fc:	d100      	bne.n	8009900 <memcpy+0xc>
 80098fe:	4770      	bx	lr
 8009900:	b510      	push	{r4, lr}
 8009902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800990a:	4291      	cmp	r1, r2
 800990c:	d1f9      	bne.n	8009902 <memcpy+0xe>
 800990e:	bd10      	pop	{r4, pc}

08009910 <nan>:
 8009910:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009918 <nan+0x8>
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	00000000 	.word	0x00000000
 800991c:	7ff80000 	.word	0x7ff80000

08009920 <__assert_func>:
 8009920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009922:	4614      	mov	r4, r2
 8009924:	461a      	mov	r2, r3
 8009926:	4b09      	ldr	r3, [pc, #36]	@ (800994c <__assert_func+0x2c>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4605      	mov	r5, r0
 800992c:	68d8      	ldr	r0, [r3, #12]
 800992e:	b954      	cbnz	r4, 8009946 <__assert_func+0x26>
 8009930:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <__assert_func+0x30>)
 8009932:	461c      	mov	r4, r3
 8009934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009938:	9100      	str	r1, [sp, #0]
 800993a:	462b      	mov	r3, r5
 800993c:	4905      	ldr	r1, [pc, #20]	@ (8009954 <__assert_func+0x34>)
 800993e:	f000 fba7 	bl	800a090 <fiprintf>
 8009942:	f000 fbb7 	bl	800a0b4 <abort>
 8009946:	4b04      	ldr	r3, [pc, #16]	@ (8009958 <__assert_func+0x38>)
 8009948:	e7f4      	b.n	8009934 <__assert_func+0x14>
 800994a:	bf00      	nop
 800994c:	200000a8 	.word	0x200000a8
 8009950:	0800b0ed 	.word	0x0800b0ed
 8009954:	0800b0bf 	.word	0x0800b0bf
 8009958:	0800b0b2 	.word	0x0800b0b2

0800995c <_calloc_r>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	fba1 5402 	umull	r5, r4, r1, r2
 8009962:	b93c      	cbnz	r4, 8009974 <_calloc_r+0x18>
 8009964:	4629      	mov	r1, r5
 8009966:	f7fe f9c3 	bl	8007cf0 <_malloc_r>
 800996a:	4606      	mov	r6, r0
 800996c:	b928      	cbnz	r0, 800997a <_calloc_r+0x1e>
 800996e:	2600      	movs	r6, #0
 8009970:	4630      	mov	r0, r6
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	220c      	movs	r2, #12
 8009976:	6002      	str	r2, [r0, #0]
 8009978:	e7f9      	b.n	800996e <_calloc_r+0x12>
 800997a:	462a      	mov	r2, r5
 800997c:	4621      	mov	r1, r4
 800997e:	f7fd fa70 	bl	8006e62 <memset>
 8009982:	e7f5      	b.n	8009970 <_calloc_r+0x14>

08009984 <rshift>:
 8009984:	6903      	ldr	r3, [r0, #16]
 8009986:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800998a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800998e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009992:	f100 0414 	add.w	r4, r0, #20
 8009996:	dd45      	ble.n	8009a24 <rshift+0xa0>
 8009998:	f011 011f 	ands.w	r1, r1, #31
 800999c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099a4:	d10c      	bne.n	80099c0 <rshift+0x3c>
 80099a6:	f100 0710 	add.w	r7, r0, #16
 80099aa:	4629      	mov	r1, r5
 80099ac:	42b1      	cmp	r1, r6
 80099ae:	d334      	bcc.n	8009a1a <rshift+0x96>
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	1eea      	subs	r2, r5, #3
 80099b6:	4296      	cmp	r6, r2
 80099b8:	bf38      	it	cc
 80099ba:	2300      	movcc	r3, #0
 80099bc:	4423      	add	r3, r4
 80099be:	e015      	b.n	80099ec <rshift+0x68>
 80099c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80099c4:	f1c1 0820 	rsb	r8, r1, #32
 80099c8:	40cf      	lsrs	r7, r1
 80099ca:	f105 0e04 	add.w	lr, r5, #4
 80099ce:	46a1      	mov	r9, r4
 80099d0:	4576      	cmp	r6, lr
 80099d2:	46f4      	mov	ip, lr
 80099d4:	d815      	bhi.n	8009a02 <rshift+0x7e>
 80099d6:	1a9a      	subs	r2, r3, r2
 80099d8:	0092      	lsls	r2, r2, #2
 80099da:	3a04      	subs	r2, #4
 80099dc:	3501      	adds	r5, #1
 80099de:	42ae      	cmp	r6, r5
 80099e0:	bf38      	it	cc
 80099e2:	2200      	movcc	r2, #0
 80099e4:	18a3      	adds	r3, r4, r2
 80099e6:	50a7      	str	r7, [r4, r2]
 80099e8:	b107      	cbz	r7, 80099ec <rshift+0x68>
 80099ea:	3304      	adds	r3, #4
 80099ec:	1b1a      	subs	r2, r3, r4
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099f4:	bf08      	it	eq
 80099f6:	2300      	moveq	r3, #0
 80099f8:	6102      	str	r2, [r0, #16]
 80099fa:	bf08      	it	eq
 80099fc:	6143      	streq	r3, [r0, #20]
 80099fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a02:	f8dc c000 	ldr.w	ip, [ip]
 8009a06:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a0a:	ea4c 0707 	orr.w	r7, ip, r7
 8009a0e:	f849 7b04 	str.w	r7, [r9], #4
 8009a12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a16:	40cf      	lsrs	r7, r1
 8009a18:	e7da      	b.n	80099d0 <rshift+0x4c>
 8009a1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a22:	e7c3      	b.n	80099ac <rshift+0x28>
 8009a24:	4623      	mov	r3, r4
 8009a26:	e7e1      	b.n	80099ec <rshift+0x68>

08009a28 <__hexdig_fun>:
 8009a28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009a2c:	2b09      	cmp	r3, #9
 8009a2e:	d802      	bhi.n	8009a36 <__hexdig_fun+0xe>
 8009a30:	3820      	subs	r0, #32
 8009a32:	b2c0      	uxtb	r0, r0
 8009a34:	4770      	bx	lr
 8009a36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009a3a:	2b05      	cmp	r3, #5
 8009a3c:	d801      	bhi.n	8009a42 <__hexdig_fun+0x1a>
 8009a3e:	3847      	subs	r0, #71	@ 0x47
 8009a40:	e7f7      	b.n	8009a32 <__hexdig_fun+0xa>
 8009a42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d801      	bhi.n	8009a4e <__hexdig_fun+0x26>
 8009a4a:	3827      	subs	r0, #39	@ 0x27
 8009a4c:	e7f1      	b.n	8009a32 <__hexdig_fun+0xa>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	4770      	bx	lr
	...

08009a54 <__gethex>:
 8009a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	468a      	mov	sl, r1
 8009a5c:	9302      	str	r3, [sp, #8]
 8009a5e:	680b      	ldr	r3, [r1, #0]
 8009a60:	9001      	str	r0, [sp, #4]
 8009a62:	4690      	mov	r8, r2
 8009a64:	1c9c      	adds	r4, r3, #2
 8009a66:	46a1      	mov	r9, r4
 8009a68:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009a6c:	2830      	cmp	r0, #48	@ 0x30
 8009a6e:	d0fa      	beq.n	8009a66 <__gethex+0x12>
 8009a70:	eba9 0303 	sub.w	r3, r9, r3
 8009a74:	f1a3 0b02 	sub.w	fp, r3, #2
 8009a78:	f7ff ffd6 	bl	8009a28 <__hexdig_fun>
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d168      	bne.n	8009b54 <__gethex+0x100>
 8009a82:	49a0      	ldr	r1, [pc, #640]	@ (8009d04 <__gethex+0x2b0>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	4648      	mov	r0, r9
 8009a88:	f7ff ff12 	bl	80098b0 <strncmp>
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d167      	bne.n	8009b62 <__gethex+0x10e>
 8009a92:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009a96:	4626      	mov	r6, r4
 8009a98:	f7ff ffc6 	bl	8009a28 <__hexdig_fun>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d062      	beq.n	8009b66 <__gethex+0x112>
 8009aa0:	4623      	mov	r3, r4
 8009aa2:	7818      	ldrb	r0, [r3, #0]
 8009aa4:	2830      	cmp	r0, #48	@ 0x30
 8009aa6:	4699      	mov	r9, r3
 8009aa8:	f103 0301 	add.w	r3, r3, #1
 8009aac:	d0f9      	beq.n	8009aa2 <__gethex+0x4e>
 8009aae:	f7ff ffbb 	bl	8009a28 <__hexdig_fun>
 8009ab2:	fab0 f580 	clz	r5, r0
 8009ab6:	096d      	lsrs	r5, r5, #5
 8009ab8:	f04f 0b01 	mov.w	fp, #1
 8009abc:	464a      	mov	r2, r9
 8009abe:	4616      	mov	r6, r2
 8009ac0:	3201      	adds	r2, #1
 8009ac2:	7830      	ldrb	r0, [r6, #0]
 8009ac4:	f7ff ffb0 	bl	8009a28 <__hexdig_fun>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d1f8      	bne.n	8009abe <__gethex+0x6a>
 8009acc:	498d      	ldr	r1, [pc, #564]	@ (8009d04 <__gethex+0x2b0>)
 8009ace:	2201      	movs	r2, #1
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f7ff feed 	bl	80098b0 <strncmp>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d13f      	bne.n	8009b5a <__gethex+0x106>
 8009ada:	b944      	cbnz	r4, 8009aee <__gethex+0x9a>
 8009adc:	1c74      	adds	r4, r6, #1
 8009ade:	4622      	mov	r2, r4
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	3201      	adds	r2, #1
 8009ae4:	7830      	ldrb	r0, [r6, #0]
 8009ae6:	f7ff ff9f 	bl	8009a28 <__hexdig_fun>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d1f8      	bne.n	8009ae0 <__gethex+0x8c>
 8009aee:	1ba4      	subs	r4, r4, r6
 8009af0:	00a7      	lsls	r7, r4, #2
 8009af2:	7833      	ldrb	r3, [r6, #0]
 8009af4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009af8:	2b50      	cmp	r3, #80	@ 0x50
 8009afa:	d13e      	bne.n	8009b7a <__gethex+0x126>
 8009afc:	7873      	ldrb	r3, [r6, #1]
 8009afe:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b00:	d033      	beq.n	8009b6a <__gethex+0x116>
 8009b02:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b04:	d034      	beq.n	8009b70 <__gethex+0x11c>
 8009b06:	1c71      	adds	r1, r6, #1
 8009b08:	2400      	movs	r4, #0
 8009b0a:	7808      	ldrb	r0, [r1, #0]
 8009b0c:	f7ff ff8c 	bl	8009a28 <__hexdig_fun>
 8009b10:	1e43      	subs	r3, r0, #1
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b18      	cmp	r3, #24
 8009b16:	d830      	bhi.n	8009b7a <__gethex+0x126>
 8009b18:	f1a0 0210 	sub.w	r2, r0, #16
 8009b1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b20:	f7ff ff82 	bl	8009a28 <__hexdig_fun>
 8009b24:	f100 3cff 	add.w	ip, r0, #4294967295
 8009b28:	fa5f fc8c 	uxtb.w	ip, ip
 8009b2c:	f1bc 0f18 	cmp.w	ip, #24
 8009b30:	f04f 030a 	mov.w	r3, #10
 8009b34:	d91e      	bls.n	8009b74 <__gethex+0x120>
 8009b36:	b104      	cbz	r4, 8009b3a <__gethex+0xe6>
 8009b38:	4252      	negs	r2, r2
 8009b3a:	4417      	add	r7, r2
 8009b3c:	f8ca 1000 	str.w	r1, [sl]
 8009b40:	b1ed      	cbz	r5, 8009b7e <__gethex+0x12a>
 8009b42:	f1bb 0f00 	cmp.w	fp, #0
 8009b46:	bf0c      	ite	eq
 8009b48:	2506      	moveq	r5, #6
 8009b4a:	2500      	movne	r5, #0
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	b005      	add	sp, #20
 8009b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b54:	2500      	movs	r5, #0
 8009b56:	462c      	mov	r4, r5
 8009b58:	e7b0      	b.n	8009abc <__gethex+0x68>
 8009b5a:	2c00      	cmp	r4, #0
 8009b5c:	d1c7      	bne.n	8009aee <__gethex+0x9a>
 8009b5e:	4627      	mov	r7, r4
 8009b60:	e7c7      	b.n	8009af2 <__gethex+0x9e>
 8009b62:	464e      	mov	r6, r9
 8009b64:	462f      	mov	r7, r5
 8009b66:	2501      	movs	r5, #1
 8009b68:	e7c3      	b.n	8009af2 <__gethex+0x9e>
 8009b6a:	2400      	movs	r4, #0
 8009b6c:	1cb1      	adds	r1, r6, #2
 8009b6e:	e7cc      	b.n	8009b0a <__gethex+0xb6>
 8009b70:	2401      	movs	r4, #1
 8009b72:	e7fb      	b.n	8009b6c <__gethex+0x118>
 8009b74:	fb03 0002 	mla	r0, r3, r2, r0
 8009b78:	e7ce      	b.n	8009b18 <__gethex+0xc4>
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	e7de      	b.n	8009b3c <__gethex+0xe8>
 8009b7e:	eba6 0309 	sub.w	r3, r6, r9
 8009b82:	3b01      	subs	r3, #1
 8009b84:	4629      	mov	r1, r5
 8009b86:	2b07      	cmp	r3, #7
 8009b88:	dc0a      	bgt.n	8009ba0 <__gethex+0x14c>
 8009b8a:	9801      	ldr	r0, [sp, #4]
 8009b8c:	f7fe f93c 	bl	8007e08 <_Balloc>
 8009b90:	4604      	mov	r4, r0
 8009b92:	b940      	cbnz	r0, 8009ba6 <__gethex+0x152>
 8009b94:	4b5c      	ldr	r3, [pc, #368]	@ (8009d08 <__gethex+0x2b4>)
 8009b96:	4602      	mov	r2, r0
 8009b98:	21e4      	movs	r1, #228	@ 0xe4
 8009b9a:	485c      	ldr	r0, [pc, #368]	@ (8009d0c <__gethex+0x2b8>)
 8009b9c:	f7ff fec0 	bl	8009920 <__assert_func>
 8009ba0:	3101      	adds	r1, #1
 8009ba2:	105b      	asrs	r3, r3, #1
 8009ba4:	e7ef      	b.n	8009b86 <__gethex+0x132>
 8009ba6:	f100 0a14 	add.w	sl, r0, #20
 8009baa:	2300      	movs	r3, #0
 8009bac:	4655      	mov	r5, sl
 8009bae:	469b      	mov	fp, r3
 8009bb0:	45b1      	cmp	r9, r6
 8009bb2:	d337      	bcc.n	8009c24 <__gethex+0x1d0>
 8009bb4:	f845 bb04 	str.w	fp, [r5], #4
 8009bb8:	eba5 050a 	sub.w	r5, r5, sl
 8009bbc:	10ad      	asrs	r5, r5, #2
 8009bbe:	6125      	str	r5, [r4, #16]
 8009bc0:	4658      	mov	r0, fp
 8009bc2:	f7fe fa13 	bl	8007fec <__hi0bits>
 8009bc6:	016d      	lsls	r5, r5, #5
 8009bc8:	f8d8 6000 	ldr.w	r6, [r8]
 8009bcc:	1a2d      	subs	r5, r5, r0
 8009bce:	42b5      	cmp	r5, r6
 8009bd0:	dd54      	ble.n	8009c7c <__gethex+0x228>
 8009bd2:	1bad      	subs	r5, r5, r6
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f7fe fda7 	bl	800872a <__any_on>
 8009bdc:	4681      	mov	r9, r0
 8009bde:	b178      	cbz	r0, 8009c00 <__gethex+0x1ac>
 8009be0:	1e6b      	subs	r3, r5, #1
 8009be2:	1159      	asrs	r1, r3, #5
 8009be4:	f003 021f 	and.w	r2, r3, #31
 8009be8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009bec:	f04f 0901 	mov.w	r9, #1
 8009bf0:	fa09 f202 	lsl.w	r2, r9, r2
 8009bf4:	420a      	tst	r2, r1
 8009bf6:	d003      	beq.n	8009c00 <__gethex+0x1ac>
 8009bf8:	454b      	cmp	r3, r9
 8009bfa:	dc36      	bgt.n	8009c6a <__gethex+0x216>
 8009bfc:	f04f 0902 	mov.w	r9, #2
 8009c00:	4629      	mov	r1, r5
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7ff febe 	bl	8009984 <rshift>
 8009c08:	442f      	add	r7, r5
 8009c0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c0e:	42bb      	cmp	r3, r7
 8009c10:	da42      	bge.n	8009c98 <__gethex+0x244>
 8009c12:	9801      	ldr	r0, [sp, #4]
 8009c14:	4621      	mov	r1, r4
 8009c16:	f7fe f937 	bl	8007e88 <_Bfree>
 8009c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	25a3      	movs	r5, #163	@ 0xa3
 8009c22:	e793      	b.n	8009b4c <__gethex+0xf8>
 8009c24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009c28:	2a2e      	cmp	r2, #46	@ 0x2e
 8009c2a:	d012      	beq.n	8009c52 <__gethex+0x1fe>
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d104      	bne.n	8009c3a <__gethex+0x1e6>
 8009c30:	f845 bb04 	str.w	fp, [r5], #4
 8009c34:	f04f 0b00 	mov.w	fp, #0
 8009c38:	465b      	mov	r3, fp
 8009c3a:	7830      	ldrb	r0, [r6, #0]
 8009c3c:	9303      	str	r3, [sp, #12]
 8009c3e:	f7ff fef3 	bl	8009a28 <__hexdig_fun>
 8009c42:	9b03      	ldr	r3, [sp, #12]
 8009c44:	f000 000f 	and.w	r0, r0, #15
 8009c48:	4098      	lsls	r0, r3
 8009c4a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009c4e:	3304      	adds	r3, #4
 8009c50:	e7ae      	b.n	8009bb0 <__gethex+0x15c>
 8009c52:	45b1      	cmp	r9, r6
 8009c54:	d8ea      	bhi.n	8009c2c <__gethex+0x1d8>
 8009c56:	492b      	ldr	r1, [pc, #172]	@ (8009d04 <__gethex+0x2b0>)
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f7ff fe27 	bl	80098b0 <strncmp>
 8009c62:	9b03      	ldr	r3, [sp, #12]
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d1e1      	bne.n	8009c2c <__gethex+0x1d8>
 8009c68:	e7a2      	b.n	8009bb0 <__gethex+0x15c>
 8009c6a:	1ea9      	subs	r1, r5, #2
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f7fe fd5c 	bl	800872a <__any_on>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d0c2      	beq.n	8009bfc <__gethex+0x1a8>
 8009c76:	f04f 0903 	mov.w	r9, #3
 8009c7a:	e7c1      	b.n	8009c00 <__gethex+0x1ac>
 8009c7c:	da09      	bge.n	8009c92 <__gethex+0x23e>
 8009c7e:	1b75      	subs	r5, r6, r5
 8009c80:	4621      	mov	r1, r4
 8009c82:	9801      	ldr	r0, [sp, #4]
 8009c84:	462a      	mov	r2, r5
 8009c86:	f7fe fb17 	bl	80082b8 <__lshift>
 8009c8a:	1b7f      	subs	r7, r7, r5
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	f100 0a14 	add.w	sl, r0, #20
 8009c92:	f04f 0900 	mov.w	r9, #0
 8009c96:	e7b8      	b.n	8009c0a <__gethex+0x1b6>
 8009c98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c9c:	42bd      	cmp	r5, r7
 8009c9e:	dd6f      	ble.n	8009d80 <__gethex+0x32c>
 8009ca0:	1bed      	subs	r5, r5, r7
 8009ca2:	42ae      	cmp	r6, r5
 8009ca4:	dc34      	bgt.n	8009d10 <__gethex+0x2bc>
 8009ca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d022      	beq.n	8009cf4 <__gethex+0x2a0>
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d024      	beq.n	8009cfc <__gethex+0x2a8>
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d115      	bne.n	8009ce2 <__gethex+0x28e>
 8009cb6:	42ae      	cmp	r6, r5
 8009cb8:	d113      	bne.n	8009ce2 <__gethex+0x28e>
 8009cba:	2e01      	cmp	r6, #1
 8009cbc:	d10b      	bne.n	8009cd6 <__gethex+0x282>
 8009cbe:	9a02      	ldr	r2, [sp, #8]
 8009cc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	6123      	str	r3, [r4, #16]
 8009cca:	f8ca 3000 	str.w	r3, [sl]
 8009cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd0:	2562      	movs	r5, #98	@ 0x62
 8009cd2:	601c      	str	r4, [r3, #0]
 8009cd4:	e73a      	b.n	8009b4c <__gethex+0xf8>
 8009cd6:	1e71      	subs	r1, r6, #1
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7fe fd26 	bl	800872a <__any_on>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d1ed      	bne.n	8009cbe <__gethex+0x26a>
 8009ce2:	9801      	ldr	r0, [sp, #4]
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	f7fe f8cf 	bl	8007e88 <_Bfree>
 8009cea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cec:	2300      	movs	r3, #0
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	2550      	movs	r5, #80	@ 0x50
 8009cf2:	e72b      	b.n	8009b4c <__gethex+0xf8>
 8009cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1f3      	bne.n	8009ce2 <__gethex+0x28e>
 8009cfa:	e7e0      	b.n	8009cbe <__gethex+0x26a>
 8009cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1dd      	bne.n	8009cbe <__gethex+0x26a>
 8009d02:	e7ee      	b.n	8009ce2 <__gethex+0x28e>
 8009d04:	0800af40 	.word	0x0800af40
 8009d08:	0800add5 	.word	0x0800add5
 8009d0c:	0800b0ee 	.word	0x0800b0ee
 8009d10:	1e6f      	subs	r7, r5, #1
 8009d12:	f1b9 0f00 	cmp.w	r9, #0
 8009d16:	d130      	bne.n	8009d7a <__gethex+0x326>
 8009d18:	b127      	cbz	r7, 8009d24 <__gethex+0x2d0>
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f7fe fd04 	bl	800872a <__any_on>
 8009d22:	4681      	mov	r9, r0
 8009d24:	117a      	asrs	r2, r7, #5
 8009d26:	2301      	movs	r3, #1
 8009d28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d2c:	f007 071f 	and.w	r7, r7, #31
 8009d30:	40bb      	lsls	r3, r7
 8009d32:	4213      	tst	r3, r2
 8009d34:	4629      	mov	r1, r5
 8009d36:	4620      	mov	r0, r4
 8009d38:	bf18      	it	ne
 8009d3a:	f049 0902 	orrne.w	r9, r9, #2
 8009d3e:	f7ff fe21 	bl	8009984 <rshift>
 8009d42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009d46:	1b76      	subs	r6, r6, r5
 8009d48:	2502      	movs	r5, #2
 8009d4a:	f1b9 0f00 	cmp.w	r9, #0
 8009d4e:	d047      	beq.n	8009de0 <__gethex+0x38c>
 8009d50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d015      	beq.n	8009d84 <__gethex+0x330>
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d017      	beq.n	8009d8c <__gethex+0x338>
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d109      	bne.n	8009d74 <__gethex+0x320>
 8009d60:	f019 0f02 	tst.w	r9, #2
 8009d64:	d006      	beq.n	8009d74 <__gethex+0x320>
 8009d66:	f8da 3000 	ldr.w	r3, [sl]
 8009d6a:	ea49 0903 	orr.w	r9, r9, r3
 8009d6e:	f019 0f01 	tst.w	r9, #1
 8009d72:	d10e      	bne.n	8009d92 <__gethex+0x33e>
 8009d74:	f045 0510 	orr.w	r5, r5, #16
 8009d78:	e032      	b.n	8009de0 <__gethex+0x38c>
 8009d7a:	f04f 0901 	mov.w	r9, #1
 8009d7e:	e7d1      	b.n	8009d24 <__gethex+0x2d0>
 8009d80:	2501      	movs	r5, #1
 8009d82:	e7e2      	b.n	8009d4a <__gethex+0x2f6>
 8009d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d86:	f1c3 0301 	rsb	r3, r3, #1
 8009d8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0f0      	beq.n	8009d74 <__gethex+0x320>
 8009d92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d96:	f104 0314 	add.w	r3, r4, #20
 8009d9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009d9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009da2:	f04f 0c00 	mov.w	ip, #0
 8009da6:	4618      	mov	r0, r3
 8009da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dac:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009db0:	d01b      	beq.n	8009dea <__gethex+0x396>
 8009db2:	3201      	adds	r2, #1
 8009db4:	6002      	str	r2, [r0, #0]
 8009db6:	2d02      	cmp	r5, #2
 8009db8:	f104 0314 	add.w	r3, r4, #20
 8009dbc:	d13c      	bne.n	8009e38 <__gethex+0x3e4>
 8009dbe:	f8d8 2000 	ldr.w	r2, [r8]
 8009dc2:	3a01      	subs	r2, #1
 8009dc4:	42b2      	cmp	r2, r6
 8009dc6:	d109      	bne.n	8009ddc <__gethex+0x388>
 8009dc8:	1171      	asrs	r1, r6, #5
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009dd0:	f006 061f 	and.w	r6, r6, #31
 8009dd4:	fa02 f606 	lsl.w	r6, r2, r6
 8009dd8:	421e      	tst	r6, r3
 8009dda:	d13a      	bne.n	8009e52 <__gethex+0x3fe>
 8009ddc:	f045 0520 	orr.w	r5, r5, #32
 8009de0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009de2:	601c      	str	r4, [r3, #0]
 8009de4:	9b02      	ldr	r3, [sp, #8]
 8009de6:	601f      	str	r7, [r3, #0]
 8009de8:	e6b0      	b.n	8009b4c <__gethex+0xf8>
 8009dea:	4299      	cmp	r1, r3
 8009dec:	f843 cc04 	str.w	ip, [r3, #-4]
 8009df0:	d8d9      	bhi.n	8009da6 <__gethex+0x352>
 8009df2:	68a3      	ldr	r3, [r4, #8]
 8009df4:	459b      	cmp	fp, r3
 8009df6:	db17      	blt.n	8009e28 <__gethex+0x3d4>
 8009df8:	6861      	ldr	r1, [r4, #4]
 8009dfa:	9801      	ldr	r0, [sp, #4]
 8009dfc:	3101      	adds	r1, #1
 8009dfe:	f7fe f803 	bl	8007e08 <_Balloc>
 8009e02:	4681      	mov	r9, r0
 8009e04:	b918      	cbnz	r0, 8009e0e <__gethex+0x3ba>
 8009e06:	4b1a      	ldr	r3, [pc, #104]	@ (8009e70 <__gethex+0x41c>)
 8009e08:	4602      	mov	r2, r0
 8009e0a:	2184      	movs	r1, #132	@ 0x84
 8009e0c:	e6c5      	b.n	8009b9a <__gethex+0x146>
 8009e0e:	6922      	ldr	r2, [r4, #16]
 8009e10:	3202      	adds	r2, #2
 8009e12:	f104 010c 	add.w	r1, r4, #12
 8009e16:	0092      	lsls	r2, r2, #2
 8009e18:	300c      	adds	r0, #12
 8009e1a:	f7ff fd6b 	bl	80098f4 <memcpy>
 8009e1e:	4621      	mov	r1, r4
 8009e20:	9801      	ldr	r0, [sp, #4]
 8009e22:	f7fe f831 	bl	8007e88 <_Bfree>
 8009e26:	464c      	mov	r4, r9
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	1c5a      	adds	r2, r3, #1
 8009e2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e30:	6122      	str	r2, [r4, #16]
 8009e32:	2201      	movs	r2, #1
 8009e34:	615a      	str	r2, [r3, #20]
 8009e36:	e7be      	b.n	8009db6 <__gethex+0x362>
 8009e38:	6922      	ldr	r2, [r4, #16]
 8009e3a:	455a      	cmp	r2, fp
 8009e3c:	dd0b      	ble.n	8009e56 <__gethex+0x402>
 8009e3e:	2101      	movs	r1, #1
 8009e40:	4620      	mov	r0, r4
 8009e42:	f7ff fd9f 	bl	8009984 <rshift>
 8009e46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e4a:	3701      	adds	r7, #1
 8009e4c:	42bb      	cmp	r3, r7
 8009e4e:	f6ff aee0 	blt.w	8009c12 <__gethex+0x1be>
 8009e52:	2501      	movs	r5, #1
 8009e54:	e7c2      	b.n	8009ddc <__gethex+0x388>
 8009e56:	f016 061f 	ands.w	r6, r6, #31
 8009e5a:	d0fa      	beq.n	8009e52 <__gethex+0x3fe>
 8009e5c:	4453      	add	r3, sl
 8009e5e:	f1c6 0620 	rsb	r6, r6, #32
 8009e62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e66:	f7fe f8c1 	bl	8007fec <__hi0bits>
 8009e6a:	42b0      	cmp	r0, r6
 8009e6c:	dbe7      	blt.n	8009e3e <__gethex+0x3ea>
 8009e6e:	e7f0      	b.n	8009e52 <__gethex+0x3fe>
 8009e70:	0800add5 	.word	0x0800add5

08009e74 <L_shift>:
 8009e74:	f1c2 0208 	rsb	r2, r2, #8
 8009e78:	0092      	lsls	r2, r2, #2
 8009e7a:	b570      	push	{r4, r5, r6, lr}
 8009e7c:	f1c2 0620 	rsb	r6, r2, #32
 8009e80:	6843      	ldr	r3, [r0, #4]
 8009e82:	6804      	ldr	r4, [r0, #0]
 8009e84:	fa03 f506 	lsl.w	r5, r3, r6
 8009e88:	432c      	orrs	r4, r5
 8009e8a:	40d3      	lsrs	r3, r2
 8009e8c:	6004      	str	r4, [r0, #0]
 8009e8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e92:	4288      	cmp	r0, r1
 8009e94:	d3f4      	bcc.n	8009e80 <L_shift+0xc>
 8009e96:	bd70      	pop	{r4, r5, r6, pc}

08009e98 <__match>:
 8009e98:	b530      	push	{r4, r5, lr}
 8009e9a:	6803      	ldr	r3, [r0, #0]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ea2:	b914      	cbnz	r4, 8009eaa <__match+0x12>
 8009ea4:	6003      	str	r3, [r0, #0]
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	bd30      	pop	{r4, r5, pc}
 8009eaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009eb2:	2d19      	cmp	r5, #25
 8009eb4:	bf98      	it	ls
 8009eb6:	3220      	addls	r2, #32
 8009eb8:	42a2      	cmp	r2, r4
 8009eba:	d0f0      	beq.n	8009e9e <__match+0x6>
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	e7f3      	b.n	8009ea8 <__match+0x10>

08009ec0 <__hexnan>:
 8009ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec4:	680b      	ldr	r3, [r1, #0]
 8009ec6:	6801      	ldr	r1, [r0, #0]
 8009ec8:	115e      	asrs	r6, r3, #5
 8009eca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ece:	f013 031f 	ands.w	r3, r3, #31
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	bf18      	it	ne
 8009ed6:	3604      	addne	r6, #4
 8009ed8:	2500      	movs	r5, #0
 8009eda:	1f37      	subs	r7, r6, #4
 8009edc:	4682      	mov	sl, r0
 8009ede:	4690      	mov	r8, r2
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ee6:	46b9      	mov	r9, r7
 8009ee8:	463c      	mov	r4, r7
 8009eea:	9502      	str	r5, [sp, #8]
 8009eec:	46ab      	mov	fp, r5
 8009eee:	784a      	ldrb	r2, [r1, #1]
 8009ef0:	1c4b      	adds	r3, r1, #1
 8009ef2:	9303      	str	r3, [sp, #12]
 8009ef4:	b342      	cbz	r2, 8009f48 <__hexnan+0x88>
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	9105      	str	r1, [sp, #20]
 8009efa:	9204      	str	r2, [sp, #16]
 8009efc:	f7ff fd94 	bl	8009a28 <__hexdig_fun>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d151      	bne.n	8009fa8 <__hexnan+0xe8>
 8009f04:	9a04      	ldr	r2, [sp, #16]
 8009f06:	9905      	ldr	r1, [sp, #20]
 8009f08:	2a20      	cmp	r2, #32
 8009f0a:	d818      	bhi.n	8009f3e <__hexnan+0x7e>
 8009f0c:	9b02      	ldr	r3, [sp, #8]
 8009f0e:	459b      	cmp	fp, r3
 8009f10:	dd13      	ble.n	8009f3a <__hexnan+0x7a>
 8009f12:	454c      	cmp	r4, r9
 8009f14:	d206      	bcs.n	8009f24 <__hexnan+0x64>
 8009f16:	2d07      	cmp	r5, #7
 8009f18:	dc04      	bgt.n	8009f24 <__hexnan+0x64>
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f7ff ffa8 	bl	8009e74 <L_shift>
 8009f24:	4544      	cmp	r4, r8
 8009f26:	d952      	bls.n	8009fce <__hexnan+0x10e>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f1a4 0904 	sub.w	r9, r4, #4
 8009f2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f32:	f8cd b008 	str.w	fp, [sp, #8]
 8009f36:	464c      	mov	r4, r9
 8009f38:	461d      	mov	r5, r3
 8009f3a:	9903      	ldr	r1, [sp, #12]
 8009f3c:	e7d7      	b.n	8009eee <__hexnan+0x2e>
 8009f3e:	2a29      	cmp	r2, #41	@ 0x29
 8009f40:	d157      	bne.n	8009ff2 <__hexnan+0x132>
 8009f42:	3102      	adds	r1, #2
 8009f44:	f8ca 1000 	str.w	r1, [sl]
 8009f48:	f1bb 0f00 	cmp.w	fp, #0
 8009f4c:	d051      	beq.n	8009ff2 <__hexnan+0x132>
 8009f4e:	454c      	cmp	r4, r9
 8009f50:	d206      	bcs.n	8009f60 <__hexnan+0xa0>
 8009f52:	2d07      	cmp	r5, #7
 8009f54:	dc04      	bgt.n	8009f60 <__hexnan+0xa0>
 8009f56:	462a      	mov	r2, r5
 8009f58:	4649      	mov	r1, r9
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f7ff ff8a 	bl	8009e74 <L_shift>
 8009f60:	4544      	cmp	r4, r8
 8009f62:	d936      	bls.n	8009fd2 <__hexnan+0x112>
 8009f64:	f1a8 0204 	sub.w	r2, r8, #4
 8009f68:	4623      	mov	r3, r4
 8009f6a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f6e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f72:	429f      	cmp	r7, r3
 8009f74:	d2f9      	bcs.n	8009f6a <__hexnan+0xaa>
 8009f76:	1b3b      	subs	r3, r7, r4
 8009f78:	f023 0303 	bic.w	r3, r3, #3
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	3401      	adds	r4, #1
 8009f80:	3e03      	subs	r6, #3
 8009f82:	42b4      	cmp	r4, r6
 8009f84:	bf88      	it	hi
 8009f86:	2304      	movhi	r3, #4
 8009f88:	4443      	add	r3, r8
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f843 2b04 	str.w	r2, [r3], #4
 8009f90:	429f      	cmp	r7, r3
 8009f92:	d2fb      	bcs.n	8009f8c <__hexnan+0xcc>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	b91b      	cbnz	r3, 8009fa0 <__hexnan+0xe0>
 8009f98:	4547      	cmp	r7, r8
 8009f9a:	d128      	bne.n	8009fee <__hexnan+0x12e>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	2005      	movs	r0, #5
 8009fa2:	b007      	add	sp, #28
 8009fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa8:	3501      	adds	r5, #1
 8009faa:	2d08      	cmp	r5, #8
 8009fac:	f10b 0b01 	add.w	fp, fp, #1
 8009fb0:	dd06      	ble.n	8009fc0 <__hexnan+0x100>
 8009fb2:	4544      	cmp	r4, r8
 8009fb4:	d9c1      	bls.n	8009f3a <__hexnan+0x7a>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fbc:	2501      	movs	r5, #1
 8009fbe:	3c04      	subs	r4, #4
 8009fc0:	6822      	ldr	r2, [r4, #0]
 8009fc2:	f000 000f 	and.w	r0, r0, #15
 8009fc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009fca:	6020      	str	r0, [r4, #0]
 8009fcc:	e7b5      	b.n	8009f3a <__hexnan+0x7a>
 8009fce:	2508      	movs	r5, #8
 8009fd0:	e7b3      	b.n	8009f3a <__hexnan+0x7a>
 8009fd2:	9b01      	ldr	r3, [sp, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d0dd      	beq.n	8009f94 <__hexnan+0xd4>
 8009fd8:	f1c3 0320 	rsb	r3, r3, #32
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	40da      	lsrs	r2, r3
 8009fe2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	f846 3c04 	str.w	r3, [r6, #-4]
 8009fec:	e7d2      	b.n	8009f94 <__hexnan+0xd4>
 8009fee:	3f04      	subs	r7, #4
 8009ff0:	e7d0      	b.n	8009f94 <__hexnan+0xd4>
 8009ff2:	2004      	movs	r0, #4
 8009ff4:	e7d5      	b.n	8009fa2 <__hexnan+0xe2>

08009ff6 <__ascii_mbtowc>:
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	b901      	cbnz	r1, 8009ffc <__ascii_mbtowc+0x6>
 8009ffa:	a901      	add	r1, sp, #4
 8009ffc:	b142      	cbz	r2, 800a010 <__ascii_mbtowc+0x1a>
 8009ffe:	b14b      	cbz	r3, 800a014 <__ascii_mbtowc+0x1e>
 800a000:	7813      	ldrb	r3, [r2, #0]
 800a002:	600b      	str	r3, [r1, #0]
 800a004:	7812      	ldrb	r2, [r2, #0]
 800a006:	1e10      	subs	r0, r2, #0
 800a008:	bf18      	it	ne
 800a00a:	2001      	movne	r0, #1
 800a00c:	b002      	add	sp, #8
 800a00e:	4770      	bx	lr
 800a010:	4610      	mov	r0, r2
 800a012:	e7fb      	b.n	800a00c <__ascii_mbtowc+0x16>
 800a014:	f06f 0001 	mvn.w	r0, #1
 800a018:	e7f8      	b.n	800a00c <__ascii_mbtowc+0x16>

0800a01a <_realloc_r>:
 800a01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a01e:	4680      	mov	r8, r0
 800a020:	4615      	mov	r5, r2
 800a022:	460c      	mov	r4, r1
 800a024:	b921      	cbnz	r1, 800a030 <_realloc_r+0x16>
 800a026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a02a:	4611      	mov	r1, r2
 800a02c:	f7fd be60 	b.w	8007cf0 <_malloc_r>
 800a030:	b92a      	cbnz	r2, 800a03e <_realloc_r+0x24>
 800a032:	f7fd fde9 	bl	8007c08 <_free_r>
 800a036:	2400      	movs	r4, #0
 800a038:	4620      	mov	r0, r4
 800a03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a03e:	f000 f840 	bl	800a0c2 <_malloc_usable_size_r>
 800a042:	4285      	cmp	r5, r0
 800a044:	4606      	mov	r6, r0
 800a046:	d802      	bhi.n	800a04e <_realloc_r+0x34>
 800a048:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a04c:	d8f4      	bhi.n	800a038 <_realloc_r+0x1e>
 800a04e:	4629      	mov	r1, r5
 800a050:	4640      	mov	r0, r8
 800a052:	f7fd fe4d 	bl	8007cf0 <_malloc_r>
 800a056:	4607      	mov	r7, r0
 800a058:	2800      	cmp	r0, #0
 800a05a:	d0ec      	beq.n	800a036 <_realloc_r+0x1c>
 800a05c:	42b5      	cmp	r5, r6
 800a05e:	462a      	mov	r2, r5
 800a060:	4621      	mov	r1, r4
 800a062:	bf28      	it	cs
 800a064:	4632      	movcs	r2, r6
 800a066:	f7ff fc45 	bl	80098f4 <memcpy>
 800a06a:	4621      	mov	r1, r4
 800a06c:	4640      	mov	r0, r8
 800a06e:	f7fd fdcb 	bl	8007c08 <_free_r>
 800a072:	463c      	mov	r4, r7
 800a074:	e7e0      	b.n	800a038 <_realloc_r+0x1e>

0800a076 <__ascii_wctomb>:
 800a076:	4603      	mov	r3, r0
 800a078:	4608      	mov	r0, r1
 800a07a:	b141      	cbz	r1, 800a08e <__ascii_wctomb+0x18>
 800a07c:	2aff      	cmp	r2, #255	@ 0xff
 800a07e:	d904      	bls.n	800a08a <__ascii_wctomb+0x14>
 800a080:	228a      	movs	r2, #138	@ 0x8a
 800a082:	601a      	str	r2, [r3, #0]
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	4770      	bx	lr
 800a08a:	700a      	strb	r2, [r1, #0]
 800a08c:	2001      	movs	r0, #1
 800a08e:	4770      	bx	lr

0800a090 <fiprintf>:
 800a090:	b40e      	push	{r1, r2, r3}
 800a092:	b503      	push	{r0, r1, lr}
 800a094:	4601      	mov	r1, r0
 800a096:	ab03      	add	r3, sp, #12
 800a098:	4805      	ldr	r0, [pc, #20]	@ (800a0b0 <fiprintf+0x20>)
 800a09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a09e:	6800      	ldr	r0, [r0, #0]
 800a0a0:	9301      	str	r3, [sp, #4]
 800a0a2:	f000 f83f 	bl	800a124 <_vfiprintf_r>
 800a0a6:	b002      	add	sp, #8
 800a0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0ac:	b003      	add	sp, #12
 800a0ae:	4770      	bx	lr
 800a0b0:	200000a8 	.word	0x200000a8

0800a0b4 <abort>:
 800a0b4:	b508      	push	{r3, lr}
 800a0b6:	2006      	movs	r0, #6
 800a0b8:	f000 fa08 	bl	800a4cc <raise>
 800a0bc:	2001      	movs	r0, #1
 800a0be:	f7f7 fe3f 	bl	8001d40 <_exit>

0800a0c2 <_malloc_usable_size_r>:
 800a0c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0c6:	1f18      	subs	r0, r3, #4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bfbc      	itt	lt
 800a0cc:	580b      	ldrlt	r3, [r1, r0]
 800a0ce:	18c0      	addlt	r0, r0, r3
 800a0d0:	4770      	bx	lr

0800a0d2 <__sfputc_r>:
 800a0d2:	6893      	ldr	r3, [r2, #8]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	b410      	push	{r4}
 800a0da:	6093      	str	r3, [r2, #8]
 800a0dc:	da08      	bge.n	800a0f0 <__sfputc_r+0x1e>
 800a0de:	6994      	ldr	r4, [r2, #24]
 800a0e0:	42a3      	cmp	r3, r4
 800a0e2:	db01      	blt.n	800a0e8 <__sfputc_r+0x16>
 800a0e4:	290a      	cmp	r1, #10
 800a0e6:	d103      	bne.n	800a0f0 <__sfputc_r+0x1e>
 800a0e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ec:	f000 b932 	b.w	800a354 <__swbuf_r>
 800a0f0:	6813      	ldr	r3, [r2, #0]
 800a0f2:	1c58      	adds	r0, r3, #1
 800a0f4:	6010      	str	r0, [r2, #0]
 800a0f6:	7019      	strb	r1, [r3, #0]
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <__sfputs_r>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	4614      	mov	r4, r2
 800a108:	18d5      	adds	r5, r2, r3
 800a10a:	42ac      	cmp	r4, r5
 800a10c:	d101      	bne.n	800a112 <__sfputs_r+0x12>
 800a10e:	2000      	movs	r0, #0
 800a110:	e007      	b.n	800a122 <__sfputs_r+0x22>
 800a112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a116:	463a      	mov	r2, r7
 800a118:	4630      	mov	r0, r6
 800a11a:	f7ff ffda 	bl	800a0d2 <__sfputc_r>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	d1f3      	bne.n	800a10a <__sfputs_r+0xa>
 800a122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a124 <_vfiprintf_r>:
 800a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	460d      	mov	r5, r1
 800a12a:	b09d      	sub	sp, #116	@ 0x74
 800a12c:	4614      	mov	r4, r2
 800a12e:	4698      	mov	r8, r3
 800a130:	4606      	mov	r6, r0
 800a132:	b118      	cbz	r0, 800a13c <_vfiprintf_r+0x18>
 800a134:	6a03      	ldr	r3, [r0, #32]
 800a136:	b90b      	cbnz	r3, 800a13c <_vfiprintf_r+0x18>
 800a138:	f7fc fdfa 	bl	8006d30 <__sinit>
 800a13c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a13e:	07d9      	lsls	r1, r3, #31
 800a140:	d405      	bmi.n	800a14e <_vfiprintf_r+0x2a>
 800a142:	89ab      	ldrh	r3, [r5, #12]
 800a144:	059a      	lsls	r2, r3, #22
 800a146:	d402      	bmi.n	800a14e <_vfiprintf_r+0x2a>
 800a148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a14a:	f7fc ff08 	bl	8006f5e <__retarget_lock_acquire_recursive>
 800a14e:	89ab      	ldrh	r3, [r5, #12]
 800a150:	071b      	lsls	r3, r3, #28
 800a152:	d501      	bpl.n	800a158 <_vfiprintf_r+0x34>
 800a154:	692b      	ldr	r3, [r5, #16]
 800a156:	b99b      	cbnz	r3, 800a180 <_vfiprintf_r+0x5c>
 800a158:	4629      	mov	r1, r5
 800a15a:	4630      	mov	r0, r6
 800a15c:	f000 f938 	bl	800a3d0 <__swsetup_r>
 800a160:	b170      	cbz	r0, 800a180 <_vfiprintf_r+0x5c>
 800a162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a164:	07dc      	lsls	r4, r3, #31
 800a166:	d504      	bpl.n	800a172 <_vfiprintf_r+0x4e>
 800a168:	f04f 30ff 	mov.w	r0, #4294967295
 800a16c:	b01d      	add	sp, #116	@ 0x74
 800a16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a172:	89ab      	ldrh	r3, [r5, #12]
 800a174:	0598      	lsls	r0, r3, #22
 800a176:	d4f7      	bmi.n	800a168 <_vfiprintf_r+0x44>
 800a178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a17a:	f7fc fef1 	bl	8006f60 <__retarget_lock_release_recursive>
 800a17e:	e7f3      	b.n	800a168 <_vfiprintf_r+0x44>
 800a180:	2300      	movs	r3, #0
 800a182:	9309      	str	r3, [sp, #36]	@ 0x24
 800a184:	2320      	movs	r3, #32
 800a186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a18a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a18e:	2330      	movs	r3, #48	@ 0x30
 800a190:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a340 <_vfiprintf_r+0x21c>
 800a194:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a198:	f04f 0901 	mov.w	r9, #1
 800a19c:	4623      	mov	r3, r4
 800a19e:	469a      	mov	sl, r3
 800a1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1a4:	b10a      	cbz	r2, 800a1aa <_vfiprintf_r+0x86>
 800a1a6:	2a25      	cmp	r2, #37	@ 0x25
 800a1a8:	d1f9      	bne.n	800a19e <_vfiprintf_r+0x7a>
 800a1aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ae:	d00b      	beq.n	800a1c8 <_vfiprintf_r+0xa4>
 800a1b0:	465b      	mov	r3, fp
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7ff ffa2 	bl	800a100 <__sfputs_r>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	f000 80a7 	beq.w	800a310 <_vfiprintf_r+0x1ec>
 800a1c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1c4:	445a      	add	r2, fp
 800a1c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f000 809f 	beq.w	800a310 <_vfiprintf_r+0x1ec>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1dc:	f10a 0a01 	add.w	sl, sl, #1
 800a1e0:	9304      	str	r3, [sp, #16]
 800a1e2:	9307      	str	r3, [sp, #28]
 800a1e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1ea:	4654      	mov	r4, sl
 800a1ec:	2205      	movs	r2, #5
 800a1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f2:	4853      	ldr	r0, [pc, #332]	@ (800a340 <_vfiprintf_r+0x21c>)
 800a1f4:	f7f5 fff4 	bl	80001e0 <memchr>
 800a1f8:	9a04      	ldr	r2, [sp, #16]
 800a1fa:	b9d8      	cbnz	r0, 800a234 <_vfiprintf_r+0x110>
 800a1fc:	06d1      	lsls	r1, r2, #27
 800a1fe:	bf44      	itt	mi
 800a200:	2320      	movmi	r3, #32
 800a202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a206:	0713      	lsls	r3, r2, #28
 800a208:	bf44      	itt	mi
 800a20a:	232b      	movmi	r3, #43	@ 0x2b
 800a20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a210:	f89a 3000 	ldrb.w	r3, [sl]
 800a214:	2b2a      	cmp	r3, #42	@ 0x2a
 800a216:	d015      	beq.n	800a244 <_vfiprintf_r+0x120>
 800a218:	9a07      	ldr	r2, [sp, #28]
 800a21a:	4654      	mov	r4, sl
 800a21c:	2000      	movs	r0, #0
 800a21e:	f04f 0c0a 	mov.w	ip, #10
 800a222:	4621      	mov	r1, r4
 800a224:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a228:	3b30      	subs	r3, #48	@ 0x30
 800a22a:	2b09      	cmp	r3, #9
 800a22c:	d94b      	bls.n	800a2c6 <_vfiprintf_r+0x1a2>
 800a22e:	b1b0      	cbz	r0, 800a25e <_vfiprintf_r+0x13a>
 800a230:	9207      	str	r2, [sp, #28]
 800a232:	e014      	b.n	800a25e <_vfiprintf_r+0x13a>
 800a234:	eba0 0308 	sub.w	r3, r0, r8
 800a238:	fa09 f303 	lsl.w	r3, r9, r3
 800a23c:	4313      	orrs	r3, r2
 800a23e:	9304      	str	r3, [sp, #16]
 800a240:	46a2      	mov	sl, r4
 800a242:	e7d2      	b.n	800a1ea <_vfiprintf_r+0xc6>
 800a244:	9b03      	ldr	r3, [sp, #12]
 800a246:	1d19      	adds	r1, r3, #4
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	9103      	str	r1, [sp, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	bfbb      	ittet	lt
 800a250:	425b      	neglt	r3, r3
 800a252:	f042 0202 	orrlt.w	r2, r2, #2
 800a256:	9307      	strge	r3, [sp, #28]
 800a258:	9307      	strlt	r3, [sp, #28]
 800a25a:	bfb8      	it	lt
 800a25c:	9204      	strlt	r2, [sp, #16]
 800a25e:	7823      	ldrb	r3, [r4, #0]
 800a260:	2b2e      	cmp	r3, #46	@ 0x2e
 800a262:	d10a      	bne.n	800a27a <_vfiprintf_r+0x156>
 800a264:	7863      	ldrb	r3, [r4, #1]
 800a266:	2b2a      	cmp	r3, #42	@ 0x2a
 800a268:	d132      	bne.n	800a2d0 <_vfiprintf_r+0x1ac>
 800a26a:	9b03      	ldr	r3, [sp, #12]
 800a26c:	1d1a      	adds	r2, r3, #4
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	9203      	str	r2, [sp, #12]
 800a272:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a276:	3402      	adds	r4, #2
 800a278:	9305      	str	r3, [sp, #20]
 800a27a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a350 <_vfiprintf_r+0x22c>
 800a27e:	7821      	ldrb	r1, [r4, #0]
 800a280:	2203      	movs	r2, #3
 800a282:	4650      	mov	r0, sl
 800a284:	f7f5 ffac 	bl	80001e0 <memchr>
 800a288:	b138      	cbz	r0, 800a29a <_vfiprintf_r+0x176>
 800a28a:	9b04      	ldr	r3, [sp, #16]
 800a28c:	eba0 000a 	sub.w	r0, r0, sl
 800a290:	2240      	movs	r2, #64	@ 0x40
 800a292:	4082      	lsls	r2, r0
 800a294:	4313      	orrs	r3, r2
 800a296:	3401      	adds	r4, #1
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29e:	4829      	ldr	r0, [pc, #164]	@ (800a344 <_vfiprintf_r+0x220>)
 800a2a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2a4:	2206      	movs	r2, #6
 800a2a6:	f7f5 ff9b 	bl	80001e0 <memchr>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d03f      	beq.n	800a32e <_vfiprintf_r+0x20a>
 800a2ae:	4b26      	ldr	r3, [pc, #152]	@ (800a348 <_vfiprintf_r+0x224>)
 800a2b0:	bb1b      	cbnz	r3, 800a2fa <_vfiprintf_r+0x1d6>
 800a2b2:	9b03      	ldr	r3, [sp, #12]
 800a2b4:	3307      	adds	r3, #7
 800a2b6:	f023 0307 	bic.w	r3, r3, #7
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	9303      	str	r3, [sp, #12]
 800a2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c0:	443b      	add	r3, r7
 800a2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2c4:	e76a      	b.n	800a19c <_vfiprintf_r+0x78>
 800a2c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	2001      	movs	r0, #1
 800a2ce:	e7a8      	b.n	800a222 <_vfiprintf_r+0xfe>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	3401      	adds	r4, #1
 800a2d4:	9305      	str	r3, [sp, #20]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	f04f 0c0a 	mov.w	ip, #10
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2e2:	3a30      	subs	r2, #48	@ 0x30
 800a2e4:	2a09      	cmp	r2, #9
 800a2e6:	d903      	bls.n	800a2f0 <_vfiprintf_r+0x1cc>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d0c6      	beq.n	800a27a <_vfiprintf_r+0x156>
 800a2ec:	9105      	str	r1, [sp, #20]
 800a2ee:	e7c4      	b.n	800a27a <_vfiprintf_r+0x156>
 800a2f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e7f0      	b.n	800a2dc <_vfiprintf_r+0x1b8>
 800a2fa:	ab03      	add	r3, sp, #12
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	462a      	mov	r2, r5
 800a300:	4b12      	ldr	r3, [pc, #72]	@ (800a34c <_vfiprintf_r+0x228>)
 800a302:	a904      	add	r1, sp, #16
 800a304:	4630      	mov	r0, r6
 800a306:	f7fb febb 	bl	8006080 <_printf_float>
 800a30a:	4607      	mov	r7, r0
 800a30c:	1c78      	adds	r0, r7, #1
 800a30e:	d1d6      	bne.n	800a2be <_vfiprintf_r+0x19a>
 800a310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a312:	07d9      	lsls	r1, r3, #31
 800a314:	d405      	bmi.n	800a322 <_vfiprintf_r+0x1fe>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	059a      	lsls	r2, r3, #22
 800a31a:	d402      	bmi.n	800a322 <_vfiprintf_r+0x1fe>
 800a31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a31e:	f7fc fe1f 	bl	8006f60 <__retarget_lock_release_recursive>
 800a322:	89ab      	ldrh	r3, [r5, #12]
 800a324:	065b      	lsls	r3, r3, #25
 800a326:	f53f af1f 	bmi.w	800a168 <_vfiprintf_r+0x44>
 800a32a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a32c:	e71e      	b.n	800a16c <_vfiprintf_r+0x48>
 800a32e:	ab03      	add	r3, sp, #12
 800a330:	9300      	str	r3, [sp, #0]
 800a332:	462a      	mov	r2, r5
 800a334:	4b05      	ldr	r3, [pc, #20]	@ (800a34c <_vfiprintf_r+0x228>)
 800a336:	a904      	add	r1, sp, #16
 800a338:	4630      	mov	r0, r6
 800a33a:	f7fc f939 	bl	80065b0 <_printf_i>
 800a33e:	e7e4      	b.n	800a30a <_vfiprintf_r+0x1e6>
 800a340:	0800b099 	.word	0x0800b099
 800a344:	0800b0a3 	.word	0x0800b0a3
 800a348:	08006081 	.word	0x08006081
 800a34c:	0800a101 	.word	0x0800a101
 800a350:	0800b09f 	.word	0x0800b09f

0800a354 <__swbuf_r>:
 800a354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a356:	460e      	mov	r6, r1
 800a358:	4614      	mov	r4, r2
 800a35a:	4605      	mov	r5, r0
 800a35c:	b118      	cbz	r0, 800a366 <__swbuf_r+0x12>
 800a35e:	6a03      	ldr	r3, [r0, #32]
 800a360:	b90b      	cbnz	r3, 800a366 <__swbuf_r+0x12>
 800a362:	f7fc fce5 	bl	8006d30 <__sinit>
 800a366:	69a3      	ldr	r3, [r4, #24]
 800a368:	60a3      	str	r3, [r4, #8]
 800a36a:	89a3      	ldrh	r3, [r4, #12]
 800a36c:	071a      	lsls	r2, r3, #28
 800a36e:	d501      	bpl.n	800a374 <__swbuf_r+0x20>
 800a370:	6923      	ldr	r3, [r4, #16]
 800a372:	b943      	cbnz	r3, 800a386 <__swbuf_r+0x32>
 800a374:	4621      	mov	r1, r4
 800a376:	4628      	mov	r0, r5
 800a378:	f000 f82a 	bl	800a3d0 <__swsetup_r>
 800a37c:	b118      	cbz	r0, 800a386 <__swbuf_r+0x32>
 800a37e:	f04f 37ff 	mov.w	r7, #4294967295
 800a382:	4638      	mov	r0, r7
 800a384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	6922      	ldr	r2, [r4, #16]
 800a38a:	1a98      	subs	r0, r3, r2
 800a38c:	6963      	ldr	r3, [r4, #20]
 800a38e:	b2f6      	uxtb	r6, r6
 800a390:	4283      	cmp	r3, r0
 800a392:	4637      	mov	r7, r6
 800a394:	dc05      	bgt.n	800a3a2 <__swbuf_r+0x4e>
 800a396:	4621      	mov	r1, r4
 800a398:	4628      	mov	r0, r5
 800a39a:	f7ff fa47 	bl	800982c <_fflush_r>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d1ed      	bne.n	800a37e <__swbuf_r+0x2a>
 800a3a2:	68a3      	ldr	r3, [r4, #8]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	60a3      	str	r3, [r4, #8]
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	6022      	str	r2, [r4, #0]
 800a3ae:	701e      	strb	r6, [r3, #0]
 800a3b0:	6962      	ldr	r2, [r4, #20]
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d004      	beq.n	800a3c2 <__swbuf_r+0x6e>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	07db      	lsls	r3, r3, #31
 800a3bc:	d5e1      	bpl.n	800a382 <__swbuf_r+0x2e>
 800a3be:	2e0a      	cmp	r6, #10
 800a3c0:	d1df      	bne.n	800a382 <__swbuf_r+0x2e>
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f7ff fa31 	bl	800982c <_fflush_r>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d0d9      	beq.n	800a382 <__swbuf_r+0x2e>
 800a3ce:	e7d6      	b.n	800a37e <__swbuf_r+0x2a>

0800a3d0 <__swsetup_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4b29      	ldr	r3, [pc, #164]	@ (800a478 <__swsetup_r+0xa8>)
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	6818      	ldr	r0, [r3, #0]
 800a3d8:	460c      	mov	r4, r1
 800a3da:	b118      	cbz	r0, 800a3e4 <__swsetup_r+0x14>
 800a3dc:	6a03      	ldr	r3, [r0, #32]
 800a3de:	b90b      	cbnz	r3, 800a3e4 <__swsetup_r+0x14>
 800a3e0:	f7fc fca6 	bl	8006d30 <__sinit>
 800a3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e8:	0719      	lsls	r1, r3, #28
 800a3ea:	d422      	bmi.n	800a432 <__swsetup_r+0x62>
 800a3ec:	06da      	lsls	r2, r3, #27
 800a3ee:	d407      	bmi.n	800a400 <__swsetup_r+0x30>
 800a3f0:	2209      	movs	r2, #9
 800a3f2:	602a      	str	r2, [r5, #0]
 800a3f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3f8:	81a3      	strh	r3, [r4, #12]
 800a3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fe:	e033      	b.n	800a468 <__swsetup_r+0x98>
 800a400:	0758      	lsls	r0, r3, #29
 800a402:	d512      	bpl.n	800a42a <__swsetup_r+0x5a>
 800a404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a406:	b141      	cbz	r1, 800a41a <__swsetup_r+0x4a>
 800a408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a40c:	4299      	cmp	r1, r3
 800a40e:	d002      	beq.n	800a416 <__swsetup_r+0x46>
 800a410:	4628      	mov	r0, r5
 800a412:	f7fd fbf9 	bl	8007c08 <_free_r>
 800a416:	2300      	movs	r3, #0
 800a418:	6363      	str	r3, [r4, #52]	@ 0x34
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	2300      	movs	r3, #0
 800a424:	6063      	str	r3, [r4, #4]
 800a426:	6923      	ldr	r3, [r4, #16]
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	f043 0308 	orr.w	r3, r3, #8
 800a430:	81a3      	strh	r3, [r4, #12]
 800a432:	6923      	ldr	r3, [r4, #16]
 800a434:	b94b      	cbnz	r3, 800a44a <__swsetup_r+0x7a>
 800a436:	89a3      	ldrh	r3, [r4, #12]
 800a438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a43c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a440:	d003      	beq.n	800a44a <__swsetup_r+0x7a>
 800a442:	4621      	mov	r1, r4
 800a444:	4628      	mov	r0, r5
 800a446:	f000 f883 	bl	800a550 <__smakebuf_r>
 800a44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a44e:	f013 0201 	ands.w	r2, r3, #1
 800a452:	d00a      	beq.n	800a46a <__swsetup_r+0x9a>
 800a454:	2200      	movs	r2, #0
 800a456:	60a2      	str	r2, [r4, #8]
 800a458:	6962      	ldr	r2, [r4, #20]
 800a45a:	4252      	negs	r2, r2
 800a45c:	61a2      	str	r2, [r4, #24]
 800a45e:	6922      	ldr	r2, [r4, #16]
 800a460:	b942      	cbnz	r2, 800a474 <__swsetup_r+0xa4>
 800a462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a466:	d1c5      	bne.n	800a3f4 <__swsetup_r+0x24>
 800a468:	bd38      	pop	{r3, r4, r5, pc}
 800a46a:	0799      	lsls	r1, r3, #30
 800a46c:	bf58      	it	pl
 800a46e:	6962      	ldrpl	r2, [r4, #20]
 800a470:	60a2      	str	r2, [r4, #8]
 800a472:	e7f4      	b.n	800a45e <__swsetup_r+0x8e>
 800a474:	2000      	movs	r0, #0
 800a476:	e7f7      	b.n	800a468 <__swsetup_r+0x98>
 800a478:	200000a8 	.word	0x200000a8

0800a47c <_raise_r>:
 800a47c:	291f      	cmp	r1, #31
 800a47e:	b538      	push	{r3, r4, r5, lr}
 800a480:	4605      	mov	r5, r0
 800a482:	460c      	mov	r4, r1
 800a484:	d904      	bls.n	800a490 <_raise_r+0x14>
 800a486:	2316      	movs	r3, #22
 800a488:	6003      	str	r3, [r0, #0]
 800a48a:	f04f 30ff 	mov.w	r0, #4294967295
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a492:	b112      	cbz	r2, 800a49a <_raise_r+0x1e>
 800a494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a498:	b94b      	cbnz	r3, 800a4ae <_raise_r+0x32>
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 f830 	bl	800a500 <_getpid_r>
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4601      	mov	r1, r0
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4aa:	f000 b817 	b.w	800a4dc <_kill_r>
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d00a      	beq.n	800a4c8 <_raise_r+0x4c>
 800a4b2:	1c59      	adds	r1, r3, #1
 800a4b4:	d103      	bne.n	800a4be <_raise_r+0x42>
 800a4b6:	2316      	movs	r3, #22
 800a4b8:	6003      	str	r3, [r0, #0]
 800a4ba:	2001      	movs	r0, #1
 800a4bc:	e7e7      	b.n	800a48e <_raise_r+0x12>
 800a4be:	2100      	movs	r1, #0
 800a4c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	4798      	blx	r3
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	e7e0      	b.n	800a48e <_raise_r+0x12>

0800a4cc <raise>:
 800a4cc:	4b02      	ldr	r3, [pc, #8]	@ (800a4d8 <raise+0xc>)
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f7ff bfd3 	b.w	800a47c <_raise_r>
 800a4d6:	bf00      	nop
 800a4d8:	200000a8 	.word	0x200000a8

0800a4dc <_kill_r>:
 800a4dc:	b538      	push	{r3, r4, r5, lr}
 800a4de:	4d07      	ldr	r5, [pc, #28]	@ (800a4fc <_kill_r+0x20>)
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4604      	mov	r4, r0
 800a4e4:	4608      	mov	r0, r1
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	602b      	str	r3, [r5, #0]
 800a4ea:	f7f7 fc19 	bl	8001d20 <_kill>
 800a4ee:	1c43      	adds	r3, r0, #1
 800a4f0:	d102      	bne.n	800a4f8 <_kill_r+0x1c>
 800a4f2:	682b      	ldr	r3, [r5, #0]
 800a4f4:	b103      	cbz	r3, 800a4f8 <_kill_r+0x1c>
 800a4f6:	6023      	str	r3, [r4, #0]
 800a4f8:	bd38      	pop	{r3, r4, r5, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20000598 	.word	0x20000598

0800a500 <_getpid_r>:
 800a500:	f7f7 bc06 	b.w	8001d10 <_getpid>

0800a504 <__swhatbuf_r>:
 800a504:	b570      	push	{r4, r5, r6, lr}
 800a506:	460c      	mov	r4, r1
 800a508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a50c:	2900      	cmp	r1, #0
 800a50e:	b096      	sub	sp, #88	@ 0x58
 800a510:	4615      	mov	r5, r2
 800a512:	461e      	mov	r6, r3
 800a514:	da0d      	bge.n	800a532 <__swhatbuf_r+0x2e>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a51c:	f04f 0100 	mov.w	r1, #0
 800a520:	bf14      	ite	ne
 800a522:	2340      	movne	r3, #64	@ 0x40
 800a524:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a528:	2000      	movs	r0, #0
 800a52a:	6031      	str	r1, [r6, #0]
 800a52c:	602b      	str	r3, [r5, #0]
 800a52e:	b016      	add	sp, #88	@ 0x58
 800a530:	bd70      	pop	{r4, r5, r6, pc}
 800a532:	466a      	mov	r2, sp
 800a534:	f000 f848 	bl	800a5c8 <_fstat_r>
 800a538:	2800      	cmp	r0, #0
 800a53a:	dbec      	blt.n	800a516 <__swhatbuf_r+0x12>
 800a53c:	9901      	ldr	r1, [sp, #4]
 800a53e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a542:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a546:	4259      	negs	r1, r3
 800a548:	4159      	adcs	r1, r3
 800a54a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a54e:	e7eb      	b.n	800a528 <__swhatbuf_r+0x24>

0800a550 <__smakebuf_r>:
 800a550:	898b      	ldrh	r3, [r1, #12]
 800a552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a554:	079d      	lsls	r5, r3, #30
 800a556:	4606      	mov	r6, r0
 800a558:	460c      	mov	r4, r1
 800a55a:	d507      	bpl.n	800a56c <__smakebuf_r+0x1c>
 800a55c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	6123      	str	r3, [r4, #16]
 800a564:	2301      	movs	r3, #1
 800a566:	6163      	str	r3, [r4, #20]
 800a568:	b003      	add	sp, #12
 800a56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a56c:	ab01      	add	r3, sp, #4
 800a56e:	466a      	mov	r2, sp
 800a570:	f7ff ffc8 	bl	800a504 <__swhatbuf_r>
 800a574:	9f00      	ldr	r7, [sp, #0]
 800a576:	4605      	mov	r5, r0
 800a578:	4639      	mov	r1, r7
 800a57a:	4630      	mov	r0, r6
 800a57c:	f7fd fbb8 	bl	8007cf0 <_malloc_r>
 800a580:	b948      	cbnz	r0, 800a596 <__smakebuf_r+0x46>
 800a582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a586:	059a      	lsls	r2, r3, #22
 800a588:	d4ee      	bmi.n	800a568 <__smakebuf_r+0x18>
 800a58a:	f023 0303 	bic.w	r3, r3, #3
 800a58e:	f043 0302 	orr.w	r3, r3, #2
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	e7e2      	b.n	800a55c <__smakebuf_r+0xc>
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	6020      	str	r0, [r4, #0]
 800a59a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a59e:	81a3      	strh	r3, [r4, #12]
 800a5a0:	9b01      	ldr	r3, [sp, #4]
 800a5a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a5a6:	b15b      	cbz	r3, 800a5c0 <__smakebuf_r+0x70>
 800a5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f000 f81d 	bl	800a5ec <_isatty_r>
 800a5b2:	b128      	cbz	r0, 800a5c0 <__smakebuf_r+0x70>
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	f023 0303 	bic.w	r3, r3, #3
 800a5ba:	f043 0301 	orr.w	r3, r3, #1
 800a5be:	81a3      	strh	r3, [r4, #12]
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	431d      	orrs	r5, r3
 800a5c4:	81a5      	strh	r5, [r4, #12]
 800a5c6:	e7cf      	b.n	800a568 <__smakebuf_r+0x18>

0800a5c8 <_fstat_r>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	4d07      	ldr	r5, [pc, #28]	@ (800a5e8 <_fstat_r+0x20>)
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	602b      	str	r3, [r5, #0]
 800a5d6:	f7f7 fc03 	bl	8001de0 <_fstat>
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	d102      	bne.n	800a5e4 <_fstat_r+0x1c>
 800a5de:	682b      	ldr	r3, [r5, #0]
 800a5e0:	b103      	cbz	r3, 800a5e4 <_fstat_r+0x1c>
 800a5e2:	6023      	str	r3, [r4, #0]
 800a5e4:	bd38      	pop	{r3, r4, r5, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000598 	.word	0x20000598

0800a5ec <_isatty_r>:
 800a5ec:	b538      	push	{r3, r4, r5, lr}
 800a5ee:	4d06      	ldr	r5, [pc, #24]	@ (800a608 <_isatty_r+0x1c>)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	602b      	str	r3, [r5, #0]
 800a5f8:	f7f7 fc02 	bl	8001e00 <_isatty>
 800a5fc:	1c43      	adds	r3, r0, #1
 800a5fe:	d102      	bne.n	800a606 <_isatty_r+0x1a>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	b103      	cbz	r3, 800a606 <_isatty_r+0x1a>
 800a604:	6023      	str	r3, [r4, #0]
 800a606:	bd38      	pop	{r3, r4, r5, pc}
 800a608:	20000598 	.word	0x20000598

0800a60c <atan2>:
 800a60c:	f000 baa8 	b.w	800ab60 <__ieee754_atan2>

0800a610 <sqrt>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	ed2d 8b02 	vpush	{d8}
 800a616:	ec55 4b10 	vmov	r4, r5, d0
 800a61a:	f000 f9c5 	bl	800a9a8 <__ieee754_sqrt>
 800a61e:	4622      	mov	r2, r4
 800a620:	462b      	mov	r3, r5
 800a622:	4620      	mov	r0, r4
 800a624:	4629      	mov	r1, r5
 800a626:	eeb0 8a40 	vmov.f32	s16, s0
 800a62a:	eef0 8a60 	vmov.f32	s17, s1
 800a62e:	f7f6 fa85 	bl	8000b3c <__aeabi_dcmpun>
 800a632:	b990      	cbnz	r0, 800a65a <sqrt+0x4a>
 800a634:	2200      	movs	r2, #0
 800a636:	2300      	movs	r3, #0
 800a638:	4620      	mov	r0, r4
 800a63a:	4629      	mov	r1, r5
 800a63c:	f7f6 fa56 	bl	8000aec <__aeabi_dcmplt>
 800a640:	b158      	cbz	r0, 800a65a <sqrt+0x4a>
 800a642:	f7fc fc61 	bl	8006f08 <__errno>
 800a646:	2321      	movs	r3, #33	@ 0x21
 800a648:	6003      	str	r3, [r0, #0]
 800a64a:	2200      	movs	r2, #0
 800a64c:	2300      	movs	r3, #0
 800a64e:	4610      	mov	r0, r2
 800a650:	4619      	mov	r1, r3
 800a652:	f7f6 f903 	bl	800085c <__aeabi_ddiv>
 800a656:	ec41 0b18 	vmov	d8, r0, r1
 800a65a:	eeb0 0a48 	vmov.f32	s0, s16
 800a65e:	eef0 0a68 	vmov.f32	s1, s17
 800a662:	ecbd 8b02 	vpop	{d8}
 800a666:	bd38      	pop	{r3, r4, r5, pc}

0800a668 <atan>:
 800a668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	ec55 4b10 	vmov	r4, r5, d0
 800a670:	4bbf      	ldr	r3, [pc, #764]	@ (800a970 <atan+0x308>)
 800a672:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a676:	429e      	cmp	r6, r3
 800a678:	46ab      	mov	fp, r5
 800a67a:	d918      	bls.n	800a6ae <atan+0x46>
 800a67c:	4bbd      	ldr	r3, [pc, #756]	@ (800a974 <atan+0x30c>)
 800a67e:	429e      	cmp	r6, r3
 800a680:	d801      	bhi.n	800a686 <atan+0x1e>
 800a682:	d109      	bne.n	800a698 <atan+0x30>
 800a684:	b144      	cbz	r4, 800a698 <atan+0x30>
 800a686:	4622      	mov	r2, r4
 800a688:	462b      	mov	r3, r5
 800a68a:	4620      	mov	r0, r4
 800a68c:	4629      	mov	r1, r5
 800a68e:	f7f5 fe05 	bl	800029c <__adddf3>
 800a692:	4604      	mov	r4, r0
 800a694:	460d      	mov	r5, r1
 800a696:	e006      	b.n	800a6a6 <atan+0x3e>
 800a698:	f1bb 0f00 	cmp.w	fp, #0
 800a69c:	f340 812b 	ble.w	800a8f6 <atan+0x28e>
 800a6a0:	a597      	add	r5, pc, #604	@ (adr r5, 800a900 <atan+0x298>)
 800a6a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a6a6:	ec45 4b10 	vmov	d0, r4, r5
 800a6aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ae:	4bb2      	ldr	r3, [pc, #712]	@ (800a978 <atan+0x310>)
 800a6b0:	429e      	cmp	r6, r3
 800a6b2:	d813      	bhi.n	800a6dc <atan+0x74>
 800a6b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a6b8:	429e      	cmp	r6, r3
 800a6ba:	d80c      	bhi.n	800a6d6 <atan+0x6e>
 800a6bc:	a392      	add	r3, pc, #584	@ (adr r3, 800a908 <atan+0x2a0>)
 800a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	f7f5 fde9 	bl	800029c <__adddf3>
 800a6ca:	4bac      	ldr	r3, [pc, #688]	@ (800a97c <atan+0x314>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f7f6 fa2b 	bl	8000b28 <__aeabi_dcmpgt>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d1e7      	bne.n	800a6a6 <atan+0x3e>
 800a6d6:	f04f 3aff 	mov.w	sl, #4294967295
 800a6da:	e029      	b.n	800a730 <atan+0xc8>
 800a6dc:	f000 f95c 	bl	800a998 <fabs>
 800a6e0:	4ba7      	ldr	r3, [pc, #668]	@ (800a980 <atan+0x318>)
 800a6e2:	429e      	cmp	r6, r3
 800a6e4:	ec55 4b10 	vmov	r4, r5, d0
 800a6e8:	f200 80bc 	bhi.w	800a864 <atan+0x1fc>
 800a6ec:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a6f0:	429e      	cmp	r6, r3
 800a6f2:	f200 809e 	bhi.w	800a832 <atan+0x1ca>
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	462b      	mov	r3, r5
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	f7f5 fdcd 	bl	800029c <__adddf3>
 800a702:	4b9e      	ldr	r3, [pc, #632]	@ (800a97c <atan+0x314>)
 800a704:	2200      	movs	r2, #0
 800a706:	f7f5 fdc7 	bl	8000298 <__aeabi_dsub>
 800a70a:	2200      	movs	r2, #0
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a714:	4620      	mov	r0, r4
 800a716:	4629      	mov	r1, r5
 800a718:	f7f5 fdc0 	bl	800029c <__adddf3>
 800a71c:	4602      	mov	r2, r0
 800a71e:	460b      	mov	r3, r1
 800a720:	4630      	mov	r0, r6
 800a722:	4639      	mov	r1, r7
 800a724:	f7f6 f89a 	bl	800085c <__aeabi_ddiv>
 800a728:	f04f 0a00 	mov.w	sl, #0
 800a72c:	4604      	mov	r4, r0
 800a72e:	460d      	mov	r5, r1
 800a730:	4622      	mov	r2, r4
 800a732:	462b      	mov	r3, r5
 800a734:	4620      	mov	r0, r4
 800a736:	4629      	mov	r1, r5
 800a738:	f7f5 ff66 	bl	8000608 <__aeabi_dmul>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	4680      	mov	r8, r0
 800a742:	4689      	mov	r9, r1
 800a744:	f7f5 ff60 	bl	8000608 <__aeabi_dmul>
 800a748:	a371      	add	r3, pc, #452	@ (adr r3, 800a910 <atan+0x2a8>)
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	4606      	mov	r6, r0
 800a750:	460f      	mov	r7, r1
 800a752:	f7f5 ff59 	bl	8000608 <__aeabi_dmul>
 800a756:	a370      	add	r3, pc, #448	@ (adr r3, 800a918 <atan+0x2b0>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f7f5 fd9e 	bl	800029c <__adddf3>
 800a760:	4632      	mov	r2, r6
 800a762:	463b      	mov	r3, r7
 800a764:	f7f5 ff50 	bl	8000608 <__aeabi_dmul>
 800a768:	a36d      	add	r3, pc, #436	@ (adr r3, 800a920 <atan+0x2b8>)
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	f7f5 fd95 	bl	800029c <__adddf3>
 800a772:	4632      	mov	r2, r6
 800a774:	463b      	mov	r3, r7
 800a776:	f7f5 ff47 	bl	8000608 <__aeabi_dmul>
 800a77a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a928 <atan+0x2c0>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f7f5 fd8c 	bl	800029c <__adddf3>
 800a784:	4632      	mov	r2, r6
 800a786:	463b      	mov	r3, r7
 800a788:	f7f5 ff3e 	bl	8000608 <__aeabi_dmul>
 800a78c:	a368      	add	r3, pc, #416	@ (adr r3, 800a930 <atan+0x2c8>)
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	f7f5 fd83 	bl	800029c <__adddf3>
 800a796:	4632      	mov	r2, r6
 800a798:	463b      	mov	r3, r7
 800a79a:	f7f5 ff35 	bl	8000608 <__aeabi_dmul>
 800a79e:	a366      	add	r3, pc, #408	@ (adr r3, 800a938 <atan+0x2d0>)
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	f7f5 fd7a 	bl	800029c <__adddf3>
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	464b      	mov	r3, r9
 800a7ac:	f7f5 ff2c 	bl	8000608 <__aeabi_dmul>
 800a7b0:	a363      	add	r3, pc, #396	@ (adr r3, 800a940 <atan+0x2d8>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	4689      	mov	r9, r1
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f5 ff23 	bl	8000608 <__aeabi_dmul>
 800a7c2:	a361      	add	r3, pc, #388	@ (adr r3, 800a948 <atan+0x2e0>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f5 fd66 	bl	8000298 <__aeabi_dsub>
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	f7f5 ff1a 	bl	8000608 <__aeabi_dmul>
 800a7d4:	a35e      	add	r3, pc, #376	@ (adr r3, 800a950 <atan+0x2e8>)
 800a7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7da:	f7f5 fd5d 	bl	8000298 <__aeabi_dsub>
 800a7de:	4632      	mov	r2, r6
 800a7e0:	463b      	mov	r3, r7
 800a7e2:	f7f5 ff11 	bl	8000608 <__aeabi_dmul>
 800a7e6:	a35c      	add	r3, pc, #368	@ (adr r3, 800a958 <atan+0x2f0>)
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f7f5 fd54 	bl	8000298 <__aeabi_dsub>
 800a7f0:	4632      	mov	r2, r6
 800a7f2:	463b      	mov	r3, r7
 800a7f4:	f7f5 ff08 	bl	8000608 <__aeabi_dmul>
 800a7f8:	a359      	add	r3, pc, #356	@ (adr r3, 800a960 <atan+0x2f8>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	f7f5 fd4b 	bl	8000298 <__aeabi_dsub>
 800a802:	4632      	mov	r2, r6
 800a804:	463b      	mov	r3, r7
 800a806:	f7f5 feff 	bl	8000608 <__aeabi_dmul>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4640      	mov	r0, r8
 800a810:	4649      	mov	r1, r9
 800a812:	f7f5 fd43 	bl	800029c <__adddf3>
 800a816:	4622      	mov	r2, r4
 800a818:	462b      	mov	r3, r5
 800a81a:	f7f5 fef5 	bl	8000608 <__aeabi_dmul>
 800a81e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	d148      	bne.n	800a8ba <atan+0x252>
 800a828:	4620      	mov	r0, r4
 800a82a:	4629      	mov	r1, r5
 800a82c:	f7f5 fd34 	bl	8000298 <__aeabi_dsub>
 800a830:	e72f      	b.n	800a692 <atan+0x2a>
 800a832:	4b52      	ldr	r3, [pc, #328]	@ (800a97c <atan+0x314>)
 800a834:	2200      	movs	r2, #0
 800a836:	4620      	mov	r0, r4
 800a838:	4629      	mov	r1, r5
 800a83a:	f7f5 fd2d 	bl	8000298 <__aeabi_dsub>
 800a83e:	4b4f      	ldr	r3, [pc, #316]	@ (800a97c <atan+0x314>)
 800a840:	4606      	mov	r6, r0
 800a842:	460f      	mov	r7, r1
 800a844:	2200      	movs	r2, #0
 800a846:	4620      	mov	r0, r4
 800a848:	4629      	mov	r1, r5
 800a84a:	f7f5 fd27 	bl	800029c <__adddf3>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4630      	mov	r0, r6
 800a854:	4639      	mov	r1, r7
 800a856:	f7f6 f801 	bl	800085c <__aeabi_ddiv>
 800a85a:	f04f 0a01 	mov.w	sl, #1
 800a85e:	4604      	mov	r4, r0
 800a860:	460d      	mov	r5, r1
 800a862:	e765      	b.n	800a730 <atan+0xc8>
 800a864:	4b47      	ldr	r3, [pc, #284]	@ (800a984 <atan+0x31c>)
 800a866:	429e      	cmp	r6, r3
 800a868:	d21c      	bcs.n	800a8a4 <atan+0x23c>
 800a86a:	4b47      	ldr	r3, [pc, #284]	@ (800a988 <atan+0x320>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	4620      	mov	r0, r4
 800a870:	4629      	mov	r1, r5
 800a872:	f7f5 fd11 	bl	8000298 <__aeabi_dsub>
 800a876:	4b44      	ldr	r3, [pc, #272]	@ (800a988 <atan+0x320>)
 800a878:	4606      	mov	r6, r0
 800a87a:	460f      	mov	r7, r1
 800a87c:	2200      	movs	r2, #0
 800a87e:	4620      	mov	r0, r4
 800a880:	4629      	mov	r1, r5
 800a882:	f7f5 fec1 	bl	8000608 <__aeabi_dmul>
 800a886:	4b3d      	ldr	r3, [pc, #244]	@ (800a97c <atan+0x314>)
 800a888:	2200      	movs	r2, #0
 800a88a:	f7f5 fd07 	bl	800029c <__adddf3>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4630      	mov	r0, r6
 800a894:	4639      	mov	r1, r7
 800a896:	f7f5 ffe1 	bl	800085c <__aeabi_ddiv>
 800a89a:	f04f 0a02 	mov.w	sl, #2
 800a89e:	4604      	mov	r4, r0
 800a8a0:	460d      	mov	r5, r1
 800a8a2:	e745      	b.n	800a730 <atan+0xc8>
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	4938      	ldr	r1, [pc, #224]	@ (800a98c <atan+0x324>)
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	f7f5 ffd6 	bl	800085c <__aeabi_ddiv>
 800a8b0:	f04f 0a03 	mov.w	sl, #3
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	460d      	mov	r5, r1
 800a8b8:	e73a      	b.n	800a730 <atan+0xc8>
 800a8ba:	4b35      	ldr	r3, [pc, #212]	@ (800a990 <atan+0x328>)
 800a8bc:	4e35      	ldr	r6, [pc, #212]	@ (800a994 <atan+0x32c>)
 800a8be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f7f5 fce7 	bl	8000298 <__aeabi_dsub>
 800a8ca:	4622      	mov	r2, r4
 800a8cc:	462b      	mov	r3, r5
 800a8ce:	f7f5 fce3 	bl	8000298 <__aeabi_dsub>
 800a8d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a8de:	f7f5 fcdb 	bl	8000298 <__aeabi_dsub>
 800a8e2:	f1bb 0f00 	cmp.w	fp, #0
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	f6bf aedc 	bge.w	800a6a6 <atan+0x3e>
 800a8ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8f2:	461d      	mov	r5, r3
 800a8f4:	e6d7      	b.n	800a6a6 <atan+0x3e>
 800a8f6:	a51c      	add	r5, pc, #112	@ (adr r5, 800a968 <atan+0x300>)
 800a8f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8fc:	e6d3      	b.n	800a6a6 <atan+0x3e>
 800a8fe:	bf00      	nop
 800a900:	54442d18 	.word	0x54442d18
 800a904:	3ff921fb 	.word	0x3ff921fb
 800a908:	8800759c 	.word	0x8800759c
 800a90c:	7e37e43c 	.word	0x7e37e43c
 800a910:	e322da11 	.word	0xe322da11
 800a914:	3f90ad3a 	.word	0x3f90ad3a
 800a918:	24760deb 	.word	0x24760deb
 800a91c:	3fa97b4b 	.word	0x3fa97b4b
 800a920:	a0d03d51 	.word	0xa0d03d51
 800a924:	3fb10d66 	.word	0x3fb10d66
 800a928:	c54c206e 	.word	0xc54c206e
 800a92c:	3fb745cd 	.word	0x3fb745cd
 800a930:	920083ff 	.word	0x920083ff
 800a934:	3fc24924 	.word	0x3fc24924
 800a938:	5555550d 	.word	0x5555550d
 800a93c:	3fd55555 	.word	0x3fd55555
 800a940:	2c6a6c2f 	.word	0x2c6a6c2f
 800a944:	bfa2b444 	.word	0xbfa2b444
 800a948:	52defd9a 	.word	0x52defd9a
 800a94c:	3fadde2d 	.word	0x3fadde2d
 800a950:	af749a6d 	.word	0xaf749a6d
 800a954:	3fb3b0f2 	.word	0x3fb3b0f2
 800a958:	fe231671 	.word	0xfe231671
 800a95c:	3fbc71c6 	.word	0x3fbc71c6
 800a960:	9998ebc4 	.word	0x9998ebc4
 800a964:	3fc99999 	.word	0x3fc99999
 800a968:	54442d18 	.word	0x54442d18
 800a96c:	bff921fb 	.word	0xbff921fb
 800a970:	440fffff 	.word	0x440fffff
 800a974:	7ff00000 	.word	0x7ff00000
 800a978:	3fdbffff 	.word	0x3fdbffff
 800a97c:	3ff00000 	.word	0x3ff00000
 800a980:	3ff2ffff 	.word	0x3ff2ffff
 800a984:	40038000 	.word	0x40038000
 800a988:	3ff80000 	.word	0x3ff80000
 800a98c:	bff00000 	.word	0xbff00000
 800a990:	0800b150 	.word	0x0800b150
 800a994:	0800b170 	.word	0x0800b170

0800a998 <fabs>:
 800a998:	ec51 0b10 	vmov	r0, r1, d0
 800a99c:	4602      	mov	r2, r0
 800a99e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a9a2:	ec43 2b10 	vmov	d0, r2, r3
 800a9a6:	4770      	bx	lr

0800a9a8 <__ieee754_sqrt>:
 800a9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	4a68      	ldr	r2, [pc, #416]	@ (800ab50 <__ieee754_sqrt+0x1a8>)
 800a9ae:	ec55 4b10 	vmov	r4, r5, d0
 800a9b2:	43aa      	bics	r2, r5
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	d110      	bne.n	800a9dc <__ieee754_sqrt+0x34>
 800a9ba:	4622      	mov	r2, r4
 800a9bc:	4620      	mov	r0, r4
 800a9be:	4629      	mov	r1, r5
 800a9c0:	f7f5 fe22 	bl	8000608 <__aeabi_dmul>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7f5 fc66 	bl	800029c <__adddf3>
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	ec45 4b10 	vmov	d0, r4, r5
 800a9d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9dc:	2d00      	cmp	r5, #0
 800a9de:	dc0e      	bgt.n	800a9fe <__ieee754_sqrt+0x56>
 800a9e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a9e4:	4322      	orrs	r2, r4
 800a9e6:	d0f5      	beq.n	800a9d4 <__ieee754_sqrt+0x2c>
 800a9e8:	b19d      	cbz	r5, 800aa12 <__ieee754_sqrt+0x6a>
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	f7f5 fc52 	bl	8000298 <__aeabi_dsub>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	f7f5 ff30 	bl	800085c <__aeabi_ddiv>
 800a9fc:	e7e8      	b.n	800a9d0 <__ieee754_sqrt+0x28>
 800a9fe:	152a      	asrs	r2, r5, #20
 800aa00:	d115      	bne.n	800aa2e <__ieee754_sqrt+0x86>
 800aa02:	2000      	movs	r0, #0
 800aa04:	e009      	b.n	800aa1a <__ieee754_sqrt+0x72>
 800aa06:	0acb      	lsrs	r3, r1, #11
 800aa08:	3a15      	subs	r2, #21
 800aa0a:	0549      	lsls	r1, r1, #21
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0fa      	beq.n	800aa06 <__ieee754_sqrt+0x5e>
 800aa10:	e7f7      	b.n	800aa02 <__ieee754_sqrt+0x5a>
 800aa12:	462a      	mov	r2, r5
 800aa14:	e7fa      	b.n	800aa0c <__ieee754_sqrt+0x64>
 800aa16:	005b      	lsls	r3, r3, #1
 800aa18:	3001      	adds	r0, #1
 800aa1a:	02dc      	lsls	r4, r3, #11
 800aa1c:	d5fb      	bpl.n	800aa16 <__ieee754_sqrt+0x6e>
 800aa1e:	1e44      	subs	r4, r0, #1
 800aa20:	1b12      	subs	r2, r2, r4
 800aa22:	f1c0 0420 	rsb	r4, r0, #32
 800aa26:	fa21 f404 	lsr.w	r4, r1, r4
 800aa2a:	4323      	orrs	r3, r4
 800aa2c:	4081      	lsls	r1, r0
 800aa2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa32:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800aa36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa3a:	07d2      	lsls	r2, r2, #31
 800aa3c:	bf5c      	itt	pl
 800aa3e:	005b      	lslpl	r3, r3, #1
 800aa40:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800aa44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa48:	bf58      	it	pl
 800aa4a:	0049      	lslpl	r1, r1, #1
 800aa4c:	2600      	movs	r6, #0
 800aa4e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800aa52:	106d      	asrs	r5, r5, #1
 800aa54:	0049      	lsls	r1, r1, #1
 800aa56:	2016      	movs	r0, #22
 800aa58:	4632      	mov	r2, r6
 800aa5a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800aa5e:	1917      	adds	r7, r2, r4
 800aa60:	429f      	cmp	r7, r3
 800aa62:	bfde      	ittt	le
 800aa64:	193a      	addle	r2, r7, r4
 800aa66:	1bdb      	suble	r3, r3, r7
 800aa68:	1936      	addle	r6, r6, r4
 800aa6a:	0fcf      	lsrs	r7, r1, #31
 800aa6c:	3801      	subs	r0, #1
 800aa6e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800aa72:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aa76:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800aa7a:	d1f0      	bne.n	800aa5e <__ieee754_sqrt+0xb6>
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	2720      	movs	r7, #32
 800aa80:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800aa84:	429a      	cmp	r2, r3
 800aa86:	eb00 0e0c 	add.w	lr, r0, ip
 800aa8a:	db02      	blt.n	800aa92 <__ieee754_sqrt+0xea>
 800aa8c:	d113      	bne.n	800aab6 <__ieee754_sqrt+0x10e>
 800aa8e:	458e      	cmp	lr, r1
 800aa90:	d811      	bhi.n	800aab6 <__ieee754_sqrt+0x10e>
 800aa92:	f1be 0f00 	cmp.w	lr, #0
 800aa96:	eb0e 000c 	add.w	r0, lr, ip
 800aa9a:	da42      	bge.n	800ab22 <__ieee754_sqrt+0x17a>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	db40      	blt.n	800ab22 <__ieee754_sqrt+0x17a>
 800aaa0:	f102 0801 	add.w	r8, r2, #1
 800aaa4:	1a9b      	subs	r3, r3, r2
 800aaa6:	458e      	cmp	lr, r1
 800aaa8:	bf88      	it	hi
 800aaaa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aaae:	eba1 010e 	sub.w	r1, r1, lr
 800aab2:	4464      	add	r4, ip
 800aab4:	4642      	mov	r2, r8
 800aab6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800aaba:	3f01      	subs	r7, #1
 800aabc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800aac0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aac4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800aac8:	d1dc      	bne.n	800aa84 <__ieee754_sqrt+0xdc>
 800aaca:	4319      	orrs	r1, r3
 800aacc:	d01b      	beq.n	800ab06 <__ieee754_sqrt+0x15e>
 800aace:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ab54 <__ieee754_sqrt+0x1ac>
 800aad2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ab58 <__ieee754_sqrt+0x1b0>
 800aad6:	e9da 0100 	ldrd	r0, r1, [sl]
 800aada:	e9db 2300 	ldrd	r2, r3, [fp]
 800aade:	f7f5 fbdb 	bl	8000298 <__aeabi_dsub>
 800aae2:	e9da 8900 	ldrd	r8, r9, [sl]
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	4640      	mov	r0, r8
 800aaec:	4649      	mov	r1, r9
 800aaee:	f7f6 f807 	bl	8000b00 <__aeabi_dcmple>
 800aaf2:	b140      	cbz	r0, 800ab06 <__ieee754_sqrt+0x15e>
 800aaf4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800aaf8:	e9da 0100 	ldrd	r0, r1, [sl]
 800aafc:	e9db 2300 	ldrd	r2, r3, [fp]
 800ab00:	d111      	bne.n	800ab26 <__ieee754_sqrt+0x17e>
 800ab02:	3601      	adds	r6, #1
 800ab04:	463c      	mov	r4, r7
 800ab06:	1072      	asrs	r2, r6, #1
 800ab08:	0863      	lsrs	r3, r4, #1
 800ab0a:	07f1      	lsls	r1, r6, #31
 800ab0c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ab10:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ab14:	bf48      	it	mi
 800ab16:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ab1a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ab1e:	4618      	mov	r0, r3
 800ab20:	e756      	b.n	800a9d0 <__ieee754_sqrt+0x28>
 800ab22:	4690      	mov	r8, r2
 800ab24:	e7be      	b.n	800aaa4 <__ieee754_sqrt+0xfc>
 800ab26:	f7f5 fbb9 	bl	800029c <__adddf3>
 800ab2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab2e:	4602      	mov	r2, r0
 800ab30:	460b      	mov	r3, r1
 800ab32:	4640      	mov	r0, r8
 800ab34:	4649      	mov	r1, r9
 800ab36:	f7f5 ffd9 	bl	8000aec <__aeabi_dcmplt>
 800ab3a:	b120      	cbz	r0, 800ab46 <__ieee754_sqrt+0x19e>
 800ab3c:	1ca0      	adds	r0, r4, #2
 800ab3e:	bf08      	it	eq
 800ab40:	3601      	addeq	r6, #1
 800ab42:	3402      	adds	r4, #2
 800ab44:	e7df      	b.n	800ab06 <__ieee754_sqrt+0x15e>
 800ab46:	1c63      	adds	r3, r4, #1
 800ab48:	f023 0401 	bic.w	r4, r3, #1
 800ab4c:	e7db      	b.n	800ab06 <__ieee754_sqrt+0x15e>
 800ab4e:	bf00      	nop
 800ab50:	7ff00000 	.word	0x7ff00000
 800ab54:	20000270 	.word	0x20000270
 800ab58:	20000268 	.word	0x20000268
 800ab5c:	00000000 	.word	0x00000000

0800ab60 <__ieee754_atan2>:
 800ab60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab64:	ec57 6b11 	vmov	r6, r7, d1
 800ab68:	4273      	negs	r3, r6
 800ab6a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ace8 <__ieee754_atan2+0x188>
 800ab6e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ab72:	4333      	orrs	r3, r6
 800ab74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ab78:	4543      	cmp	r3, r8
 800ab7a:	ec51 0b10 	vmov	r0, r1, d0
 800ab7e:	4635      	mov	r5, r6
 800ab80:	d809      	bhi.n	800ab96 <__ieee754_atan2+0x36>
 800ab82:	4244      	negs	r4, r0
 800ab84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab88:	4304      	orrs	r4, r0
 800ab8a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ab8e:	4544      	cmp	r4, r8
 800ab90:	468e      	mov	lr, r1
 800ab92:	4681      	mov	r9, r0
 800ab94:	d907      	bls.n	800aba6 <__ieee754_atan2+0x46>
 800ab96:	4632      	mov	r2, r6
 800ab98:	463b      	mov	r3, r7
 800ab9a:	f7f5 fb7f 	bl	800029c <__adddf3>
 800ab9e:	ec41 0b10 	vmov	d0, r0, r1
 800aba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800abaa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800abae:	4334      	orrs	r4, r6
 800abb0:	d103      	bne.n	800abba <__ieee754_atan2+0x5a>
 800abb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb6:	f7ff bd57 	b.w	800a668 <atan>
 800abba:	17bc      	asrs	r4, r7, #30
 800abbc:	f004 0402 	and.w	r4, r4, #2
 800abc0:	ea53 0909 	orrs.w	r9, r3, r9
 800abc4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800abc8:	d107      	bne.n	800abda <__ieee754_atan2+0x7a>
 800abca:	2c02      	cmp	r4, #2
 800abcc:	d05f      	beq.n	800ac8e <__ieee754_atan2+0x12e>
 800abce:	2c03      	cmp	r4, #3
 800abd0:	d1e5      	bne.n	800ab9e <__ieee754_atan2+0x3e>
 800abd2:	a141      	add	r1, pc, #260	@ (adr r1, 800acd8 <__ieee754_atan2+0x178>)
 800abd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abd8:	e7e1      	b.n	800ab9e <__ieee754_atan2+0x3e>
 800abda:	4315      	orrs	r5, r2
 800abdc:	d106      	bne.n	800abec <__ieee754_atan2+0x8c>
 800abde:	f1be 0f00 	cmp.w	lr, #0
 800abe2:	da5f      	bge.n	800aca4 <__ieee754_atan2+0x144>
 800abe4:	a13e      	add	r1, pc, #248	@ (adr r1, 800ace0 <__ieee754_atan2+0x180>)
 800abe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abea:	e7d8      	b.n	800ab9e <__ieee754_atan2+0x3e>
 800abec:	4542      	cmp	r2, r8
 800abee:	d10f      	bne.n	800ac10 <__ieee754_atan2+0xb0>
 800abf0:	4293      	cmp	r3, r2
 800abf2:	f104 34ff 	add.w	r4, r4, #4294967295
 800abf6:	d107      	bne.n	800ac08 <__ieee754_atan2+0xa8>
 800abf8:	2c02      	cmp	r4, #2
 800abfa:	d84c      	bhi.n	800ac96 <__ieee754_atan2+0x136>
 800abfc:	4b34      	ldr	r3, [pc, #208]	@ (800acd0 <__ieee754_atan2+0x170>)
 800abfe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac06:	e7ca      	b.n	800ab9e <__ieee754_atan2+0x3e>
 800ac08:	2c02      	cmp	r4, #2
 800ac0a:	d848      	bhi.n	800ac9e <__ieee754_atan2+0x13e>
 800ac0c:	4b31      	ldr	r3, [pc, #196]	@ (800acd4 <__ieee754_atan2+0x174>)
 800ac0e:	e7f6      	b.n	800abfe <__ieee754_atan2+0x9e>
 800ac10:	4543      	cmp	r3, r8
 800ac12:	d0e4      	beq.n	800abde <__ieee754_atan2+0x7e>
 800ac14:	1a9b      	subs	r3, r3, r2
 800ac16:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ac1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ac1e:	da1e      	bge.n	800ac5e <__ieee754_atan2+0xfe>
 800ac20:	2f00      	cmp	r7, #0
 800ac22:	da01      	bge.n	800ac28 <__ieee754_atan2+0xc8>
 800ac24:	323c      	adds	r2, #60	@ 0x3c
 800ac26:	db1e      	blt.n	800ac66 <__ieee754_atan2+0x106>
 800ac28:	4632      	mov	r2, r6
 800ac2a:	463b      	mov	r3, r7
 800ac2c:	f7f5 fe16 	bl	800085c <__aeabi_ddiv>
 800ac30:	ec41 0b10 	vmov	d0, r0, r1
 800ac34:	f7ff feb0 	bl	800a998 <fabs>
 800ac38:	f7ff fd16 	bl	800a668 <atan>
 800ac3c:	ec51 0b10 	vmov	r0, r1, d0
 800ac40:	2c01      	cmp	r4, #1
 800ac42:	d013      	beq.n	800ac6c <__ieee754_atan2+0x10c>
 800ac44:	2c02      	cmp	r4, #2
 800ac46:	d015      	beq.n	800ac74 <__ieee754_atan2+0x114>
 800ac48:	2c00      	cmp	r4, #0
 800ac4a:	d0a8      	beq.n	800ab9e <__ieee754_atan2+0x3e>
 800ac4c:	a318      	add	r3, pc, #96	@ (adr r3, 800acb0 <__ieee754_atan2+0x150>)
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	f7f5 fb21 	bl	8000298 <__aeabi_dsub>
 800ac56:	a318      	add	r3, pc, #96	@ (adr r3, 800acb8 <__ieee754_atan2+0x158>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	e014      	b.n	800ac88 <__ieee754_atan2+0x128>
 800ac5e:	a118      	add	r1, pc, #96	@ (adr r1, 800acc0 <__ieee754_atan2+0x160>)
 800ac60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac64:	e7ec      	b.n	800ac40 <__ieee754_atan2+0xe0>
 800ac66:	2000      	movs	r0, #0
 800ac68:	2100      	movs	r1, #0
 800ac6a:	e7e9      	b.n	800ac40 <__ieee754_atan2+0xe0>
 800ac6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac70:	4619      	mov	r1, r3
 800ac72:	e794      	b.n	800ab9e <__ieee754_atan2+0x3e>
 800ac74:	a30e      	add	r3, pc, #56	@ (adr r3, 800acb0 <__ieee754_atan2+0x150>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fb0d 	bl	8000298 <__aeabi_dsub>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	a10d      	add	r1, pc, #52	@ (adr r1, 800acb8 <__ieee754_atan2+0x158>)
 800ac84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac88:	f7f5 fb06 	bl	8000298 <__aeabi_dsub>
 800ac8c:	e787      	b.n	800ab9e <__ieee754_atan2+0x3e>
 800ac8e:	a10a      	add	r1, pc, #40	@ (adr r1, 800acb8 <__ieee754_atan2+0x158>)
 800ac90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac94:	e783      	b.n	800ab9e <__ieee754_atan2+0x3e>
 800ac96:	a10c      	add	r1, pc, #48	@ (adr r1, 800acc8 <__ieee754_atan2+0x168>)
 800ac98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac9c:	e77f      	b.n	800ab9e <__ieee754_atan2+0x3e>
 800ac9e:	2000      	movs	r0, #0
 800aca0:	2100      	movs	r1, #0
 800aca2:	e77c      	b.n	800ab9e <__ieee754_atan2+0x3e>
 800aca4:	a106      	add	r1, pc, #24	@ (adr r1, 800acc0 <__ieee754_atan2+0x160>)
 800aca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acaa:	e778      	b.n	800ab9e <__ieee754_atan2+0x3e>
 800acac:	f3af 8000 	nop.w
 800acb0:	33145c07 	.word	0x33145c07
 800acb4:	3ca1a626 	.word	0x3ca1a626
 800acb8:	54442d18 	.word	0x54442d18
 800acbc:	400921fb 	.word	0x400921fb
 800acc0:	54442d18 	.word	0x54442d18
 800acc4:	3ff921fb 	.word	0x3ff921fb
 800acc8:	54442d18 	.word	0x54442d18
 800accc:	3fe921fb 	.word	0x3fe921fb
 800acd0:	0800b1a8 	.word	0x0800b1a8
 800acd4:	0800b190 	.word	0x0800b190
 800acd8:	54442d18 	.word	0x54442d18
 800acdc:	c00921fb 	.word	0xc00921fb
 800ace0:	54442d18 	.word	0x54442d18
 800ace4:	bff921fb 	.word	0xbff921fb
 800ace8:	7ff00000 	.word	0x7ff00000

0800acec <_init>:
 800acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acee:	bf00      	nop
 800acf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acf2:	bc08      	pop	{r3}
 800acf4:	469e      	mov	lr, r3
 800acf6:	4770      	bx	lr

0800acf8 <_fini>:
 800acf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfa:	bf00      	nop
 800acfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfe:	bc08      	pop	{r3}
 800ad00:	469e      	mov	lr, r3
 800ad02:	4770      	bx	lr
