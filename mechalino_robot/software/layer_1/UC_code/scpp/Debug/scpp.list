
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c968  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  0800cb08  0800cb08  0000db08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d100  0800d100  0000f238  2**0
                  CONTENTS
  4 .ARM          00000008  0800d100  0800d100  0000e100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d108  0800d108  0000f238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d108  0800d108  0000e108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d10c  0800d10c  0000e10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800d110  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000748  20000238  0800d348  0000f238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  0800d348  0000f980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a41  00000000  00000000  0000f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c14  00000000  00000000  00021ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  000248c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dba  00000000  00000000  00025a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b08  00000000  00000000  000267e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b0c  00000000  00000000  000402ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f512  00000000  00000000  00056df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000f6308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006764  00000000  00000000  000f6390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000fcaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800caf0 	.word	0x0800caf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	0800caf0 	.word	0x0800caf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_ADC1_Init+0xa0>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001016:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001024:	2201      	movs	r2, #1
 8001026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <MX_ADC1_Init+0xa4>)
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001058:	f001 fcdc 	bl	8002a14 <HAL_ADC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001062:	f001 f8ad 	bl	80021c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001078:	f001 fd10 	bl	8002a9c <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001082:	f001 f89d 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000254 	.word	0x20000254
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f002 f889 	bl	8003220 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b0:	4815      	ldr	r0, [pc, #84]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011b2:	f002 f9b9 	bl	8003528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011b6:	2200      	movs	r2, #0
 80011b8:	213b      	movs	r1, #59	@ 0x3b
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011bc:	f002 f9b4 	bl	8003528 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011da:	f002 f821 	bl	8003220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011de:	233b      	movs	r3, #59	@ 0x3b
 80011e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011f6:	f002 f813 	bl	8003220 <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020400 	.word	0x40020400

08001210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f002 f985 	bl	800355c <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 ffb2 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000029c 	.word	0x2000029c
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f001 ffaa 	bl	8003220 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_UART_RxCpltCallback>:

/**
 * @brief UART Receive Complete Callback.
 * @param huart Pointer to UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_UART_RxCpltCallback+0x5c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d120      	bne.n	8001350 <HAL_UART_RxCpltCallback+0x54>
		if (UART1_rxBuffer[0] == '\n') { // Assuming commands are newline terminated
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d10c      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x34>
			rx_buffer[rx_index] = '\0'; // Null terminate the string
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]
			rx_complete = 1; // Set flag for command complete
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_RxCpltCallback+0x6c>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
			rx_index = 0; // Reset index
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e00a      	b.n	8001346 <HAL_UART_RxCpltCallback+0x4a>
		} else {
			rx_buffer[rx_index++] = UART1_rxBuffer[0]; // Store character in buffer
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800133a:	7011      	strb	r1, [r2, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 8001344:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1); // Listen for next character
 8001346:	2201      	movs	r2, #1
 8001348:	4904      	ldr	r1, [pc, #16]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 800134a:	4808      	ldr	r0, [pc, #32]	@ (800136c <HAL_UART_RxCpltCallback+0x70>)
 800134c:	f003 fe1f 	bl	8004f8e <HAL_UART_Receive_IT>
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	200003fc 	.word	0x200003fc
 8001360:	200003f4 	.word	0x200003f4
 8001364:	200002f4 	.word	0x200002f4
 8001368:	200003f8 	.word	0x200003f8
 800136c:	200007e8 	.word	0x200007e8

08001370 <pid_controller>:
 * @param pid Pointer to PIDController structure.
 * @param setpoint Desired setpoint.
 * @param measured_value Current measured value.
 * @return Control output.
 */
float pid_controller(PIDController *pid, float setpoint, float measured_value) {
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	ed87 0a02 	vstr	s0, [r7, #8]
 800137c:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measured_value;
 8001380:	ed97 7a02 	vldr	s14, [r7, #8]
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->integral += error;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	ed93 7a00 	vldr	s14, [r3]
 8001396:	edd7 7a06 	vldr	s15, [r7, #24]
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	edc3 7a00 	vstr	s15, [r3]

	// Anti-windup: Limit the integral term
	if (pid->integral > pid->integral_limit)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80013b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	dd03      	ble.n	80013c2 <pid_controller+0x52>
		pid->integral = pid->integral_limit;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	695a      	ldr	r2, [r3, #20]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	601a      	str	r2, [r3, #0]
	if (pid->integral < -pid->integral_limit)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	ed93 7a00 	vldr	s14, [r3]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80013ce:	eef1 7a67 	vneg.f32	s15, s15
 80013d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	d507      	bpl.n	80013ec <pid_controller+0x7c>
		pid->integral = -pid->integral_limit;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	edd3 7a05 	vldr	s15, [r3, #20]
 80013e2:	eef1 7a67 	vneg.f32	s15, s15
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	edc3 7a00 	vstr	s15, [r3]

	float derivative = error - pid->previous_error;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80013f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fa:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->previous_error = error;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]

	float output = pid->kp * error + pid->ki * pid->integral
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	ed93 7a02 	vldr	s14, [r3, #8]
 800140a:	edd7 7a06 	vldr	s15, [r7, #24]
 800140e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	edd3 6a03 	vldr	s13, [r3, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001422:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->kd * derivative;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	edd3 6a04 	vldr	s13, [r3, #16]
 800142c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001430:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float output = pid->kp * error + pid->ki * pid->integral
 8001434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001438:	edc7 7a07 	vstr	s15, [r7, #28]

	// Limit the output to the maximum correction factor
	if (output > pid->output_limit)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001442:	ed97 7a07 	vldr	s14, [r7, #28]
 8001446:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144e:	dd02      	ble.n	8001456 <pid_controller+0xe6>
		output = pid->output_limit;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	61fb      	str	r3, [r7, #28]
	if (output < -pid->output_limit)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	edd3 7a06 	vldr	s15, [r3, #24]
 800145c:	eef1 7a67 	vneg.f32	s15, s15
 8001460:	ed97 7a07 	vldr	s14, [r7, #28]
 8001464:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	d506      	bpl.n	800147c <pid_controller+0x10c>
		output = -pid->output_limit;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	edd3 7a06 	vldr	s15, [r3, #24]
 8001474:	eef1 7a67 	vneg.f32	s15, s15
 8001478:	edc7 7a07 	vstr	s15, [r7, #28]

	return output;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	ee07 3a90 	vmov	s15, r3
}
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	3724      	adds	r7, #36	@ 0x24
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <handle_rotation>:

/**
 * @brief Handle the rotation of the robot towards the target angle.
 */
void handle_rotation() {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
	float target_angle = calculate_angle(current_x, current_y, target_x,
 8001496:	4b5b      	ldr	r3, [pc, #364]	@ (8001604 <handle_rotation+0x174>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	4b5a      	ldr	r3, [pc, #360]	@ (8001608 <handle_rotation+0x178>)
 800149e:	ed93 7a00 	vldr	s14, [r3]
 80014a2:	4b5a      	ldr	r3, [pc, #360]	@ (800160c <handle_rotation+0x17c>)
 80014a4:	edd3 6a00 	vldr	s13, [r3]
 80014a8:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <handle_rotation+0x180>)
 80014aa:	ed93 6a00 	vldr	s12, [r3]
 80014ae:	eef0 1a46 	vmov.f32	s3, s12
 80014b2:	eeb0 1a66 	vmov.f32	s2, s13
 80014b6:	eef0 0a47 	vmov.f32	s1, s14
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	f000 fa63 	bl	8001988 <calculate_angle>
 80014c2:	ed87 0a02 	vstr	s0, [r7, #8]
			target_y);
	angle_error = target_angle - current_yaw;
 80014c6:	4b53      	ldr	r3, [pc, #332]	@ (8001614 <handle_rotation+0x184>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d4:	4b50      	ldr	r3, [pc, #320]	@ (8001618 <handle_rotation+0x188>)
 80014d6:	edc3 7a00 	vstr	s15, [r3]

	// Normalize the angle error to always choose the shortest rotation path
	if (angle_error > 180) {
 80014da:	4b4f      	ldr	r3, [pc, #316]	@ (8001618 <handle_rotation+0x188>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800161c <handle_rotation+0x18c>
 80014e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ec:	dd0a      	ble.n	8001504 <handle_rotation+0x74>
		angle_error -= 360;
 80014ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001618 <handle_rotation+0x188>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001620 <handle_rotation+0x190>
 80014f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014fc:	4b46      	ldr	r3, [pc, #280]	@ (8001618 <handle_rotation+0x188>)
 80014fe:	edc3 7a00 	vstr	s15, [r3]
 8001502:	e013      	b.n	800152c <handle_rotation+0x9c>
	} else if (angle_error < -180) {
 8001504:	4b44      	ldr	r3, [pc, #272]	@ (8001618 <handle_rotation+0x188>)
 8001506:	edd3 7a00 	vldr	s15, [r3]
 800150a:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001624 <handle_rotation+0x194>
 800150e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d509      	bpl.n	800152c <handle_rotation+0x9c>
		angle_error += 360;
 8001518:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <handle_rotation+0x188>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001620 <handle_rotation+0x190>
 8001522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001526:	4b3c      	ldr	r3, [pc, #240]	@ (8001618 <handle_rotation+0x188>)
 8001528:	edc3 7a00 	vstr	s15, [r3]
	}

	if (fabsf(angle_error) > ANGLE_THRESHOLD_ROTATE_TO_MOVE) {
 800152c:	4b3a      	ldr	r3, [pc, #232]	@ (8001618 <handle_rotation+0x188>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	eef0 7ae7 	vabs.f32	s15, s15
 8001536:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800153a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	dd4e      	ble.n	80015e2 <handle_rotation+0x152>
		// Normalize the angle error for rotation
		float normalized_angle_error = angle_error / 180.0f;
 8001544:	4b34      	ldr	r3, [pc, #208]	@ (8001618 <handle_rotation+0x188>)
 8001546:	ed93 7a00 	vldr	s14, [r3]
 800154a:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800161c <handle_rotation+0x18c>
 800154e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001552:	edc7 7a01 	vstr	s15, [r7, #4]

		// PID-based correction for rotation
		calculated_correction = pid_controller(&rotation_pid, 0.0f,
 8001556:	edd7 0a01 	vldr	s1, [r7, #4]
 800155a:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001628 <handle_rotation+0x198>
 800155e:	4833      	ldr	r0, [pc, #204]	@ (800162c <handle_rotation+0x19c>)
 8001560:	f7ff ff06 	bl	8001370 <pid_controller>
 8001564:	eef0 7a40 	vmov.f32	s15, s0
 8001568:	4b31      	ldr	r3, [pc, #196]	@ (8001630 <handle_rotation+0x1a0>)
 800156a:	edc3 7a00 	vstr	s15, [r3]
				normalized_angle_error);

		uint32_t left_right_pwm;

		if (angle_error > 0) {
 800156e:	4b2a      	ldr	r3, [pc, #168]	@ (8001618 <handle_rotation+0x188>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd13      	ble.n	80015a6 <handle_rotation+0x116>
			// Rotate right: Both motors move forward speed
			left_right_pwm = FORWARD_SLOW;
 800157e:	f640 43b2 	movw	r3, #3250	@ 0xcb2
 8001582:	60fb      	str	r3, [r7, #12]

			// Ensure PWM values are within valid ranges
			if (left_right_pwm > FORWARD_MAX)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 800158a:	4293      	cmp	r3, r2
 800158c:	d902      	bls.n	8001594 <handle_rotation+0x104>
				left_right_pwm = FORWARD_MAX;
 800158e:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8001592:	60fb      	str	r3, [r7, #12]
			if (left_right_pwm < FORWARD_SLOW)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f640 42b1 	movw	r2, #3249	@ 0xcb1
 800159a:	4293      	cmp	r3, r2
 800159c:	d814      	bhi.n	80015c8 <handle_rotation+0x138>
				left_right_pwm = FORWARD_SLOW;
 800159e:	f640 43b2 	movw	r3, #3250	@ 0xcb2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	e010      	b.n	80015c8 <handle_rotation+0x138>
		} else {
			// Rotate left: Both motors move backward speed
			left_right_pwm = BACKWARD_SLOW;
 80015a6:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80015aa:	60fb      	str	r3, [r7, #12]

			// Ensure PWM values are within valid ranges
			if (left_right_pwm < BACKWARD_MAX)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80015b2:	d202      	bcs.n	80015ba <handle_rotation+0x12a>
				left_right_pwm = BACKWARD_MAX;
 80015b4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80015b8:	60fb      	str	r3, [r7, #12]
			if (left_right_pwm > BACKWARD_SLOW)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 80015c0:	d902      	bls.n	80015c8 <handle_rotation+0x138>
				left_right_pwm = BACKWARD_SLOW;
 80015c2:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 80015c6:	60fb      	str	r3, [r7, #12]
		}

		angle_error = 0.0f; // reset angle error for better performance monitoring over udp as only handle_movement angle_error should be captured
 80015c8:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <handle_rotation+0x188>)
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

		set_servo_pwm(&servo_left, left_right_pwm);
 80015d0:	68f9      	ldr	r1, [r7, #12]
 80015d2:	4818      	ldr	r0, [pc, #96]	@ (8001634 <handle_rotation+0x1a4>)
 80015d4:	f000 fc48 	bl	8001e68 <set_servo_pwm>
		set_servo_pwm(&servo_right, left_right_pwm);
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	4817      	ldr	r0, [pc, #92]	@ (8001638 <handle_rotation+0x1a8>)
 80015dc:	f000 fc44 	bl	8001e68 <set_servo_pwm>
		// Stop rotating and switch to moving state
		set_servo_pwm(&servo_left, SERVO_STOP);
		set_servo_pwm(&servo_right, SERVO_STOP);
		current_state = MOVING;
	}
}
 80015e0:	e00c      	b.n	80015fc <handle_rotation+0x16c>
		set_servo_pwm(&servo_left, SERVO_STOP);
 80015e2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80015e6:	4813      	ldr	r0, [pc, #76]	@ (8001634 <handle_rotation+0x1a4>)
 80015e8:	f000 fc3e 	bl	8001e68 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 80015ec:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80015f0:	4811      	ldr	r0, [pc, #68]	@ (8001638 <handle_rotation+0x1a8>)
 80015f2:	f000 fc39 	bl	8001e68 <set_servo_pwm>
		current_state = MOVING;
 80015f6:	4b11      	ldr	r3, [pc, #68]	@ (800163c <handle_rotation+0x1ac>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	701a      	strb	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000400 	.word	0x20000400
 8001608:	20000404 	.word	0x20000404
 800160c:	2000040c 	.word	0x2000040c
 8001610:	20000410 	.word	0x20000410
 8001614:	20000408 	.word	0x20000408
 8001618:	2000073c 	.word	0x2000073c
 800161c:	43340000 	.word	0x43340000
 8001620:	43b40000 	.word	0x43b40000
 8001624:	c3340000 	.word	0xc3340000
 8001628:	00000000 	.word	0x00000000
 800162c:	20000018 	.word	0x20000018
 8001630:	20000740 	.word	0x20000740
 8001634:	20000000 	.word	0x20000000
 8001638:	2000000c 	.word	0x2000000c
 800163c:	200002f0 	.word	0x200002f0

08001640 <handle_movement>:

/**
 * @brief Handle the movement of the robot towards the target position.
 */
void handle_movement() {
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
	target_distance = distance_to_target(current_x, current_y, target_x,
 8001646:	4bb4      	ldr	r3, [pc, #720]	@ (8001918 <handle_movement+0x2d8>)
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	4bb3      	ldr	r3, [pc, #716]	@ (800191c <handle_movement+0x2dc>)
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	4bb3      	ldr	r3, [pc, #716]	@ (8001920 <handle_movement+0x2e0>)
 8001654:	edd3 6a00 	vldr	s13, [r3]
 8001658:	4bb2      	ldr	r3, [pc, #712]	@ (8001924 <handle_movement+0x2e4>)
 800165a:	ed93 6a00 	vldr	s12, [r3]
 800165e:	eef0 1a46 	vmov.f32	s3, s12
 8001662:	eeb0 1a66 	vmov.f32	s2, s13
 8001666:	eef0 0a47 	vmov.f32	s1, s14
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	f000 fa4d 	bl	8001b0c <distance_to_target>
 8001672:	eef0 7a40 	vmov.f32	s15, s0
 8001676:	4bac      	ldr	r3, [pc, #688]	@ (8001928 <handle_movement+0x2e8>)
 8001678:	edc3 7a00 	vstr	s15, [r3]
			target_y);
	float target_angle = calculate_angle(current_x, current_y, target_x,
 800167c:	4ba6      	ldr	r3, [pc, #664]	@ (8001918 <handle_movement+0x2d8>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	4ba6      	ldr	r3, [pc, #664]	@ (800191c <handle_movement+0x2dc>)
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	4ba5      	ldr	r3, [pc, #660]	@ (8001920 <handle_movement+0x2e0>)
 800168a:	edd3 6a00 	vldr	s13, [r3]
 800168e:	4ba5      	ldr	r3, [pc, #660]	@ (8001924 <handle_movement+0x2e4>)
 8001690:	ed93 6a00 	vldr	s12, [r3]
 8001694:	eef0 1a46 	vmov.f32	s3, s12
 8001698:	eeb0 1a66 	vmov.f32	s2, s13
 800169c:	eef0 0a47 	vmov.f32	s1, s14
 80016a0:	eeb0 0a67 	vmov.f32	s0, s15
 80016a4:	f000 f970 	bl	8001988 <calculate_angle>
 80016a8:	ed87 0a03 	vstr	s0, [r7, #12]
			target_y);
	angle_error = target_angle - current_yaw;
 80016ac:	4b9f      	ldr	r3, [pc, #636]	@ (800192c <handle_movement+0x2ec>)
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ba:	4b9d      	ldr	r3, [pc, #628]	@ (8001930 <handle_movement+0x2f0>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]

	// Normalize the angle error to [-180, 180]
	if (angle_error > 180.0f) {
 80016c0:	4b9b      	ldr	r3, [pc, #620]	@ (8001930 <handle_movement+0x2f0>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 8001934 <handle_movement+0x2f4>
 80016ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d2:	dd0a      	ble.n	80016ea <handle_movement+0xaa>
		angle_error -= 360.0f;
 80016d4:	4b96      	ldr	r3, [pc, #600]	@ (8001930 <handle_movement+0x2f0>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8001938 <handle_movement+0x2f8>
 80016de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016e2:	4b93      	ldr	r3, [pc, #588]	@ (8001930 <handle_movement+0x2f0>)
 80016e4:	edc3 7a00 	vstr	s15, [r3]
 80016e8:	e013      	b.n	8001712 <handle_movement+0xd2>
	} else if (angle_error < -180.0f) {
 80016ea:	4b91      	ldr	r3, [pc, #580]	@ (8001930 <handle_movement+0x2f0>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 800193c <handle_movement+0x2fc>
 80016f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	d509      	bpl.n	8001712 <handle_movement+0xd2>
		angle_error += 360.0f;
 80016fe:	4b8c      	ldr	r3, [pc, #560]	@ (8001930 <handle_movement+0x2f0>)
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001938 <handle_movement+0x2f8>
 8001708:	ee77 7a87 	vadd.f32	s15, s15, s14
 800170c:	4b88      	ldr	r3, [pc, #544]	@ (8001930 <handle_movement+0x2f0>)
 800170e:	edc3 7a00 	vstr	s15, [r3]
	}

	if (target_distance > DISTANCE_THRESHOLD_MOVE_TO_STOP) {
 8001712:	4b85      	ldr	r3, [pc, #532]	@ (8001928 <handle_movement+0x2e8>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8001940 <handle_movement+0x300>
 800171c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	f340 808a 	ble.w	800183c <handle_movement+0x1fc>
		if (fabsf(angle_error) > ANGLE_THRESHOLD_MOVE_TO_ROTATE) {
 8001728:	4b81      	ldr	r3, [pc, #516]	@ (8001930 <handle_movement+0x2f0>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eef0 7ae7 	vabs.f32	s15, s15
 8001732:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173e:	dd0d      	ble.n	800175c <handle_movement+0x11c>
			// If the angle error is too large, switch to rotating state
			set_servo_pwm(&servo_left, SERVO_STOP);
 8001740:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001744:	487f      	ldr	r0, [pc, #508]	@ (8001944 <handle_movement+0x304>)
 8001746:	f000 fb8f 	bl	8001e68 <set_servo_pwm>
			set_servo_pwm(&servo_right, SERVO_STOP);
 800174a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800174e:	487e      	ldr	r0, [pc, #504]	@ (8001948 <handle_movement+0x308>)
 8001750:	f000 fb8a 	bl	8001e68 <set_servo_pwm>
			current_state = ROTATING;
 8001754:	4b7d      	ldr	r3, [pc, #500]	@ (800194c <handle_movement+0x30c>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
			return;
 800175a:	e0d9      	b.n	8001910 <handle_movement+0x2d0>
		}

		// Normalize the angle error
		float normalized_angle_error = angle_error
				/ ANGLE_THRESHOLD_MOVE_TO_ROTATE;
 800175c:	4b74      	ldr	r3, [pc, #464]	@ (8001930 <handle_movement+0x2f0>)
 800175e:	ed93 7a00 	vldr	s14, [r3]
		float normalized_angle_error = angle_error
 8001762:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8001766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800176a:	edc7 7a01 	vstr	s15, [r7, #4]

		// PID-based correction for forward movement
		calculated_correction = pid_controller(&movement_pid, 0.0f,
 800176e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001772:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8001950 <handle_movement+0x310>
 8001776:	4877      	ldr	r0, [pc, #476]	@ (8001954 <handle_movement+0x314>)
 8001778:	f7ff fdfa 	bl	8001370 <pid_controller>
 800177c:	eef0 7a40 	vmov.f32	s15, s0
 8001780:	4b75      	ldr	r3, [pc, #468]	@ (8001958 <handle_movement+0x318>)
 8001782:	edc3 7a00 	vstr	s15, [r3]
				normalized_angle_error);

		// Base speeds for both motors
		uint32_t left_pwm = BASE_SPEED_FORWARD;
 8001786:	f241 034f 	movw	r3, #4175	@ 0x104f
 800178a:	617b      	str	r3, [r7, #20]
		uint32_t right_pwm = BASE_SPEED_BACKWARD;
 800178c:	f44f 63e1 	mov.w	r3, #1800	@ 0x708
 8001790:	613b      	str	r3, [r7, #16]

		// Limit the correction to prevent excessive adjustments
		if (calculated_correction > MAX_CORRECTION)
 8001792:	4b71      	ldr	r3, [pc, #452]	@ (8001958 <handle_movement+0x318>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800195c <handle_movement+0x31c>
 800179c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	dd02      	ble.n	80017ac <handle_movement+0x16c>
			calculated_correction = MAX_CORRECTION;
 80017a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001958 <handle_movement+0x318>)
 80017a8:	4a6d      	ldr	r2, [pc, #436]	@ (8001960 <handle_movement+0x320>)
 80017aa:	601a      	str	r2, [r3, #0]
		if (calculated_correction < -MAX_CORRECTION)
 80017ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001958 <handle_movement+0x318>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001964 <handle_movement+0x324>
 80017b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d502      	bpl.n	80017c6 <handle_movement+0x186>
			calculated_correction = -MAX_CORRECTION;
 80017c0:	4b65      	ldr	r3, [pc, #404]	@ (8001958 <handle_movement+0x318>)
 80017c2:	4a69      	ldr	r2, [pc, #420]	@ (8001968 <handle_movement+0x328>)
 80017c4:	601a      	str	r2, [r3, #0]

		// Adjust PWM values based on the correction
		left_pwm += (int32_t) (calculated_correction); // Left motor PWM increases with speed
 80017c6:	4b64      	ldr	r3, [pc, #400]	@ (8001958 <handle_movement+0x318>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d0:	ee17 2a90 	vmov	r2, s15
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	4413      	add	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]
		right_pwm -= (int32_t) (calculated_correction); // Right motor PWM decreases with speed
 80017da:	4b5f      	ldr	r3, [pc, #380]	@ (8001958 <handle_movement+0x318>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e4:	ee17 2a90 	vmov	r2, s15
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	613b      	str	r3, [r7, #16]

		// Ensure PWM values are within valid ranges
		if (left_pwm > FORWARD_MAX)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d902      	bls.n	80017fe <handle_movement+0x1be>
			left_pwm = FORWARD_MAX;
 80017f8:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 80017fc:	617b      	str	r3, [r7, #20]
		if (left_pwm < FORWARD_SLOW)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f640 42b1 	movw	r2, #3249	@ 0xcb1
 8001804:	4293      	cmp	r3, r2
 8001806:	d802      	bhi.n	800180e <handle_movement+0x1ce>
			left_pwm = FORWARD_SLOW;
 8001808:	f640 43b2 	movw	r3, #3250	@ 0xcb2
 800180c:	617b      	str	r3, [r7, #20]

		if (right_pwm < BACKWARD_MAX)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001814:	d202      	bcs.n	800181c <handle_movement+0x1dc>
			right_pwm = BACKWARD_MAX;
 8001816:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800181a:	613b      	str	r3, [r7, #16]
		if (right_pwm > BACKWARD_SLOW)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8001822:	d902      	bls.n	800182a <handle_movement+0x1ea>
			right_pwm = BACKWARD_SLOW;
 8001824:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001828:	613b      	str	r3, [r7, #16]

		set_servo_pwm(&servo_left, left_pwm);
 800182a:	6979      	ldr	r1, [r7, #20]
 800182c:	4845      	ldr	r0, [pc, #276]	@ (8001944 <handle_movement+0x304>)
 800182e:	f000 fb1b 	bl	8001e68 <set_servo_pwm>
		set_servo_pwm(&servo_right, right_pwm);
 8001832:	6939      	ldr	r1, [r7, #16]
 8001834:	4844      	ldr	r0, [pc, #272]	@ (8001948 <handle_movement+0x308>)
 8001836:	f000 fb17 	bl	8001e68 <set_servo_pwm>
 800183a:	e069      	b.n	8001910 <handle_movement+0x2d0>
	} else {
		// Stop the robot when it reaches the target
		set_servo_pwm(&servo_left, SERVO_STOP);
 800183c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001840:	4840      	ldr	r0, [pc, #256]	@ (8001944 <handle_movement+0x304>)
 8001842:	f000 fb11 	bl	8001e68 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001846:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800184a:	483f      	ldr	r0, [pc, #252]	@ (8001948 <handle_movement+0x308>)
 800184c:	f000 fb0c 	bl	8001e68 <set_servo_pwm>

		current_state = ROTATING;
 8001850:	4b3e      	ldr	r3, [pc, #248]	@ (800194c <handle_movement+0x30c>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]

		// Hysteresis for distance threshold
		if (target_distance < DISTANCE_THRESHOLD_STOP_TO_MOVE) {
 8001856:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <handle_movement+0x2e8>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800196c <handle_movement+0x32c>
 8001860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001868:	d552      	bpl.n	8001910 <handle_movement+0x2d0>
			currentTargetIndex++;
 800186a:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <handle_movement+0x330>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a3f      	ldr	r2, [pc, #252]	@ (8001970 <handle_movement+0x330>)
 8001872:	6013      	str	r3, [r2, #0]
			if (currentTargetIndex < totalCoords) {
 8001874:	4b3e      	ldr	r3, [pc, #248]	@ (8001970 <handle_movement+0x330>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b3e      	ldr	r3, [pc, #248]	@ (8001974 <handle_movement+0x334>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	da41      	bge.n	8001904 <handle_movement+0x2c4>
				target_x = xCoords[currentTargetIndex];
 8001880:	4b3b      	ldr	r3, [pc, #236]	@ (8001970 <handle_movement+0x330>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a3c      	ldr	r2, [pc, #240]	@ (8001978 <handle_movement+0x338>)
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a24      	ldr	r2, [pc, #144]	@ (8001920 <handle_movement+0x2e0>)
 800188e:	6013      	str	r3, [r2, #0]
				target_y = yCoords[currentTargetIndex];
 8001890:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <handle_movement+0x330>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a39      	ldr	r2, [pc, #228]	@ (800197c <handle_movement+0x33c>)
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a21      	ldr	r2, [pc, #132]	@ (8001924 <handle_movement+0x2e4>)
 800189e:	6013      	str	r3, [r2, #0]
				float target_angle = calculate_angle(current_x, current_y,
 80018a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <handle_movement+0x2d8>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <handle_movement+0x2dc>)
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <handle_movement+0x2e0>)
 80018ae:	edd3 6a00 	vldr	s13, [r3]
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <handle_movement+0x2e4>)
 80018b4:	ed93 6a00 	vldr	s12, [r3]
 80018b8:	eef0 1a46 	vmov.f32	s3, s12
 80018bc:	eeb0 1a66 	vmov.f32	s2, s13
 80018c0:	eef0 0a47 	vmov.f32	s1, s14
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	f000 f85e 	bl	8001988 <calculate_angle>
 80018cc:	ed87 0a02 	vstr	s0, [r7, #8]
						target_x, target_y);
				angle_error = target_angle - current_yaw;
 80018d0:	4b16      	ldr	r3, [pc, #88]	@ (800192c <handle_movement+0x2ec>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80018da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018de:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <handle_movement+0x2f0>)
 80018e0:	edc3 7a00 	vstr	s15, [r3]
				if (fabsf(angle_error) < ANGLE_THRESHOLD_MOVE_TO_ROTATE) {
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <handle_movement+0x2f0>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	eef0 7ae7 	vabs.f32	s15, s15
 80018ee:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80018f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fa:	d509      	bpl.n	8001910 <handle_movement+0x2d0>
					current_state = MOVING;
 80018fc:	4b13      	ldr	r3, [pc, #76]	@ (800194c <handle_movement+0x30c>)
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
					return;
 8001902:	e005      	b.n	8001910 <handle_movement+0x2d0>
				}
			} else {
				current_state = IDLE;
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <handle_movement+0x30c>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
				path_set = 0;
 800190a:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <handle_movement+0x340>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000400 	.word	0x20000400
 800191c:	20000404 	.word	0x20000404
 8001920:	2000040c 	.word	0x2000040c
 8001924:	20000410 	.word	0x20000410
 8001928:	20000744 	.word	0x20000744
 800192c:	20000408 	.word	0x20000408
 8001930:	2000073c 	.word	0x2000073c
 8001934:	43340000 	.word	0x43340000
 8001938:	43b40000 	.word	0x43b40000
 800193c:	c3340000 	.word	0xc3340000
 8001940:	3da3d70a 	.word	0x3da3d70a
 8001944:	20000000 	.word	0x20000000
 8001948:	2000000c 	.word	0x2000000c
 800194c:	200002f0 	.word	0x200002f0
 8001950:	00000000 	.word	0x00000000
 8001954:	20000034 	.word	0x20000034
 8001958:	20000740 	.word	0x20000740
 800195c:	44610000 	.word	0x44610000
 8001960:	44610000 	.word	0x44610000
 8001964:	c4610000 	.word	0xc4610000
 8001968:	c4610000 	.word	0xc4610000
 800196c:	3de147ae 	.word	0x3de147ae
 8001970:	20000738 	.word	0x20000738
 8001974:	20000734 	.word	0x20000734
 8001978:	20000414 	.word	0x20000414
 800197c:	200005a4 	.word	0x200005a4
 8001980:	2000074c 	.word	0x2000074c
 8001984:	00000000 	.word	0x00000000

08001988 <calculate_angle>:
 * @param y Current y position.
 * @param x_next Target x position.
 * @param y_next Target y position.
 * @return Angle in degrees.
 */
float calculate_angle(float x, float y, float x_next, float y_next) {
 8001988:	b5b0      	push	{r4, r5, r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001992:	edc7 0a02 	vstr	s1, [r7, #8]
 8001996:	ed87 1a01 	vstr	s2, [r7, #4]
 800199a:	edc7 1a00 	vstr	s3, [r7]
	// Calculation of the scalar product
	float dot_product = -y * (y_next - y);
 800199e:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a2:	eeb1 7a67 	vneg.f32	s14, s15
 80019a6:	edd7 6a00 	vldr	s13, [r7]
 80019aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	edc7 7a07 	vstr	s15, [r7, #28]

	// Length of vectors
	float length_v1 = fabsf(y); // Since v1 is the length of (0, -y), the length corresponds to |y|
 80019ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80019be:	eef0 7ae7 	vabs.f32	s15, s15
 80019c2:	edc7 7a06 	vstr	s15, [r7, #24]
	float length_v2 = (float) sqrt(pow(x_next - x, 2) + pow(y_next - y, 2));
 80019c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80019ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d2:	ee17 0a90 	vmov	r0, s15
 80019d6:	f7fe fdbf 	bl	8000558 <__aeabi_f2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8001af8 <calculate_angle+0x170>
 80019e2:	ec43 2b10 	vmov	d0, r2, r3
 80019e6:	f009 fab3 	bl	800af50 <pow>
 80019ea:	ec55 4b10 	vmov	r4, r5, d0
 80019ee:	ed97 7a00 	vldr	s14, [r7]
 80019f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fa:	ee17 0a90 	vmov	r0, s15
 80019fe:	f7fe fdab 	bl	8000558 <__aeabi_f2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001af8 <calculate_angle+0x170>
 8001a0a:	ec43 2b10 	vmov	d0, r2, r3
 8001a0e:	f009 fa9f 	bl	800af50 <pow>
 8001a12:	ec53 2b10 	vmov	r2, r3, d0
 8001a16:	4620      	mov	r0, r4
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f7fe fc3f 	bl	800029c <__adddf3>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	ec43 2b17 	vmov	d7, r2, r3
 8001a26:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2a:	eef0 0a67 	vmov.f32	s1, s15
 8001a2e:	f009 faff 	bl	800b030 <sqrt>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f8dd 	bl	8000bf8 <__aeabi_d2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	617b      	str	r3, [r7, #20]

	// Calculating the cosine of the angle
	float cos_theta = dot_product / (length_v1 * length_v2);
 8001a42:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a46:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Clamp cos_theta to [-1, 1] to avoid NaNs due to floating point errors
	if (cos_theta > 1.0f)
 8001a5a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	dd02      	ble.n	8001a72 <calculate_angle+0xea>
		cos_theta = 1.0f;
 8001a6c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
	if (cos_theta < -1.0f)
 8001a72:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a76:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a82:	d501      	bpl.n	8001a88 <calculate_angle+0x100>
		cos_theta = -1.0f;
 8001a84:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <calculate_angle+0x180>)
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24

	// Calculation of the angle in radians and conversion to degrees
	float theta_rad = (float) acos(cos_theta);
 8001a88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a8a:	f7fe fd65 	bl	8000558 <__aeabi_f2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	ec43 2b10 	vmov	d0, r2, r3
 8001a96:	f009 fa27 	bl	800aee8 <acos>
 8001a9a:	ec53 2b10 	vmov	r2, r3, d0
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff f8a9 	bl	8000bf8 <__aeabi_d2f>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	613b      	str	r3, [r7, #16]
	float theta_deg = (float) (theta_rad * (180.0 / M_PI));
 8001aaa:	6938      	ldr	r0, [r7, #16]
 8001aac:	f7fe fd54 	bl	8000558 <__aeabi_f2d>
 8001ab0:	a313      	add	r3, pc, #76	@ (adr r3, 8001b00 <calculate_angle+0x178>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe fda7 	bl	8000608 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f899 	bl	8000bf8 <__aeabi_d2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	623b      	str	r3, [r7, #32]

	// Determining the direction
	if (x_next < x) {
 8001aca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ace:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	d505      	bpl.n	8001ae8 <calculate_angle+0x160>
		theta_deg = -theta_deg; // Negative angle if x_next is to the left of x
 8001adc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ae0:	eef1 7a67 	vneg.f32	s15, s15
 8001ae4:	edc7 7a08 	vstr	s15, [r7, #32]
	}

	return theta_deg;
 8001ae8:	6a3b      	ldr	r3, [r7, #32]
 8001aea:	ee07 3a90 	vmov	s15, r3
}
 8001aee:	eeb0 0a67 	vmov.f32	s0, s15
 8001af2:	3728      	adds	r7, #40	@ 0x28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bdb0      	pop	{r4, r5, r7, pc}
 8001af8:	00000000 	.word	0x00000000
 8001afc:	40000000 	.word	0x40000000
 8001b00:	1a63c1f8 	.word	0x1a63c1f8
 8001b04:	404ca5dc 	.word	0x404ca5dc
 8001b08:	bf800000 	.word	0xbf800000

08001b0c <distance_to_target>:
 * @param target_x Target x position.
 * @param target_y Target y position.
 * @return Distance to target.
 */
float distance_to_target(float current_x, float current_y, float target_x,
		float target_y) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	ed2d 8b02 	vpush	{d8}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b1e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001b22:	edc7 1a00 	vstr	s3, [r7]
	return sqrtf(
			powf(target_x - current_x, 2.0f) + powf(target_y - current_y, 2.0f));
 8001b26:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b32:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	f009 faad 	bl	800b098 <powf>
 8001b3e:	eeb0 8a40 	vmov.f32	s16, s0
 8001b42:	ed97 7a00 	vldr	s14, [r7]
 8001b46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	f009 fa9f 	bl	800b098 <powf>
 8001b5a:	eef0 7a40 	vmov.f32	s15, s0
	return sqrtf(
 8001b5e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001b62:	eeb0 0a67 	vmov.f32	s0, s15
 8001b66:	f009 faef 	bl	800b148 <sqrtf>
 8001b6a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	ecbd 8b02 	vpop	{d8}
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <execute_command>:

/**
 * @brief Execute received command from ESP8266.
 * @param cmd The command string.
 */
void execute_command(const char *cmd) {
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8001b82:	af02      	add	r7, sp, #8
 8001b84:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b88:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b8c:	6018      	str	r0, [r3, #0]
	if (strncmp(cmd, "STOP", 4) == 0) {
 8001b8e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b92:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b96:	2204      	movs	r2, #4
 8001b98:	499d      	ldr	r1, [pc, #628]	@ (8001e10 <execute_command+0x294>)
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	f005 ff83 	bl	8007aa6 <strncmp>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <execute_command+0x46>
		set_servo_pwm(&servo_left, SERVO_STOP);
 8001ba6:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001baa:	489a      	ldr	r0, [pc, #616]	@ (8001e14 <execute_command+0x298>)
 8001bac:	f000 f95c 	bl	8001e68 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001bb0:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001bb4:	4898      	ldr	r0, [pc, #608]	@ (8001e18 <execute_command+0x29c>)
 8001bb6:	f000 f957 	bl	8001e68 <set_servo_pwm>
		current_state = IDLE;
 8001bba:	4b98      	ldr	r3, [pc, #608]	@ (8001e1c <execute_command+0x2a0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
 8001bc0:	e10b      	b.n	8001dda <execute_command+0x25e>
	} else if (strncmp(cmd, "START_SPINNING", 14) == 0) {
 8001bc2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001bc6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001bca:	220e      	movs	r2, #14
 8001bcc:	4994      	ldr	r1, [pc, #592]	@ (8001e20 <execute_command+0x2a4>)
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	f005 ff69 	bl	8007aa6 <strncmp>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d110      	bne.n	8001bfc <execute_command+0x80>
		set_servo_pwm(&servo_left, FORWARD_MAX);
 8001bda:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 8001bde:	488d      	ldr	r0, [pc, #564]	@ (8001e14 <execute_command+0x298>)
 8001be0:	f000 f942 	bl	8001e68 <set_servo_pwm>
		set_servo_pwm(&servo_right, FORWARD_MAX);
 8001be4:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 8001be8:	488b      	ldr	r0, [pc, #556]	@ (8001e18 <execute_command+0x29c>)
 8001bea:	f000 f93d 	bl	8001e68 <set_servo_pwm>
		path_set = 0; 								// Set the path flag
 8001bee:	4b8d      	ldr	r3, [pc, #564]	@ (8001e24 <execute_command+0x2a8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
		current_state = SPINNING;
 8001bf4:	4b89      	ldr	r3, [pc, #548]	@ (8001e1c <execute_command+0x2a0>)
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	e0ee      	b.n	8001dda <execute_command+0x25e>
	} else if (strncmp(cmd, "LOCATION_UPDATE", 15) == 0) {
 8001bfc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001c00:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001c04:	220f      	movs	r2, #15
 8001c06:	4988      	ldr	r1, [pc, #544]	@ (8001e28 <execute_command+0x2ac>)
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f005 ff4c 	bl	8007aa6 <strncmp>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d12f      	bne.n	8001c74 <execute_command+0xf8>
		sscanf(cmd + 16, "%f;%f;%f", &current_x, &current_y, &current_yaw);
 8001c14:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001c18:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f103 0010 	add.w	r0, r3, #16
 8001c22:	4b82      	ldr	r3, [pc, #520]	@ (8001e2c <execute_command+0x2b0>)
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	4b82      	ldr	r3, [pc, #520]	@ (8001e30 <execute_command+0x2b4>)
 8001c28:	4a82      	ldr	r2, [pc, #520]	@ (8001e34 <execute_command+0x2b8>)
 8001c2a:	4983      	ldr	r1, [pc, #524]	@ (8001e38 <execute_command+0x2bc>)
 8001c2c:	f005 fec4 	bl	80079b8 <siscanf>
		locationReceived = 1;
 8001c30:	4b82      	ldr	r3, [pc, #520]	@ (8001e3c <execute_command+0x2c0>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
		if (path_set && current_state == IDLE) {
 8001c36:	4b7b      	ldr	r3, [pc, #492]	@ (8001e24 <execute_command+0x2a8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80cd 	beq.w	8001dda <execute_command+0x25e>
 8001c40:	4b76      	ldr	r3, [pc, #472]	@ (8001e1c <execute_command+0x2a0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 80c7 	bne.w	8001dda <execute_command+0x25e>
			target_x = xCoords[currentTargetIndex];
 8001c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e40 <execute_command+0x2c4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7c      	ldr	r2, [pc, #496]	@ (8001e44 <execute_command+0x2c8>)
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a7b      	ldr	r2, [pc, #492]	@ (8001e48 <execute_command+0x2cc>)
 8001c5a:	6013      	str	r3, [r2, #0]
			target_y = yCoords[currentTargetIndex];
 8001c5c:	4b78      	ldr	r3, [pc, #480]	@ (8001e40 <execute_command+0x2c4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a7a      	ldr	r2, [pc, #488]	@ (8001e4c <execute_command+0x2d0>)
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a79      	ldr	r2, [pc, #484]	@ (8001e50 <execute_command+0x2d4>)
 8001c6a:	6013      	str	r3, [r2, #0]
			current_state = ROTATING;
 8001c6c:	4b6b      	ldr	r3, [pc, #428]	@ (8001e1c <execute_command+0x2a0>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	e0b2      	b.n	8001dda <execute_command+0x25e>
		}
	} else if (strncmp(cmd, "PATH_UPDATE", 11) == 0) {
 8001c74:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001c78:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001c7c:	220b      	movs	r2, #11
 8001c7e:	4975      	ldr	r1, [pc, #468]	@ (8001e54 <execute_command+0x2d8>)
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	f005 ff10 	bl	8007aa6 <strncmp>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 80a6 	bne.w	8001dda <execute_command+0x25e>
		memset(xCoords, 0, sizeof(xCoords));
 8001c8e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001c92:	2100      	movs	r1, #0
 8001c94:	486b      	ldr	r0, [pc, #428]	@ (8001e44 <execute_command+0x2c8>)
 8001c96:	f005 fefe 	bl	8007a96 <memset>
		memset(yCoords, 0, sizeof(yCoords));
 8001c9a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	486a      	ldr	r0, [pc, #424]	@ (8001e4c <execute_command+0x2d0>)
 8001ca2:	f005 fef8 	bl	8007a96 <memset>
		totalCoords = 0;
 8001ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8001e58 <execute_command+0x2dc>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
		currentTargetIndex = 0;
 8001cac:	4b64      	ldr	r3, [pc, #400]	@ (8001e40 <execute_command+0x2c4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

		// Extract x and y coordinates and the amount of coordinates
		char x_values[256];  // Buffer for x values
		char y_values[256];  // Buffer for y values
		int amount_of_coordinates = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

		// Extract the x values, y values, and the number of coordinates
		sscanf(cmd + 12, "%[^;];%[^;];%d", x_values, y_values,
 8001cb8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001cbc:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f103 000c 	add.w	r0, r3, #12
 8001cc6:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8001cca:	f107 0208 	add.w	r2, r7, #8
 8001cce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4961      	ldr	r1, [pc, #388]	@ (8001e5c <execute_command+0x2e0>)
 8001cd8:	f005 fe6e 	bl	80079b8 <siscanf>
				&amount_of_coordinates);

		amount_of_coordinates = amount_of_coordinates / 2;
 8001cdc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001ce0:	0fda      	lsrs	r2, r3, #31
 8001ce2:	4413      	add	r3, r2
 8001ce4:	105b      	asrs	r3, r3, #1
 8001ce6:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208

		// Now, x_values contains "x0:x1:x2:...", y_values contains "y0:y1:y2:...", and amount_of_coordinates is an integer
		// Ensure that the number of coordinates does not exceed MAX_COORDS
		totalCoords =
				(amount_of_coordinates > MAX_COORDS) ?
				MAX_COORDS :
 8001cea:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	bfa8      	it	ge
 8001cf2:	2364      	movge	r3, #100	@ 0x64
		totalCoords =
 8001cf4:	4a58      	ldr	r2, [pc, #352]	@ (8001e58 <execute_command+0x2dc>)
 8001cf6:	6013      	str	r3, [r2, #0]
														amount_of_coordinates;

		char *token;
		int index = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

		// Split x values by ':' and store them in an array
		token = strtok(x_values, ":");
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	4957      	ldr	r1, [pc, #348]	@ (8001e60 <execute_command+0x2e4>)
 8001d04:	4618      	mov	r0, r3
 8001d06:	f005 fee1 	bl	8007acc <strtok>
 8001d0a:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001d0e:	e017      	b.n	8001d40 <execute_command+0x1c4>
			xCoords[index++] = atof(token);
 8001d10:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001d14:	f004 f8b6 	bl	8005e84 <atof>
 8001d18:	ec51 0b10 	vmov	r0, r1, d0
 8001d1c:	f8d7 4210 	ldr.w	r4, [r7, #528]	@ 0x210
 8001d20:	1c63      	adds	r3, r4, #1
 8001d22:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001d26:	f7fe ff67 	bl	8000bf8 <__aeabi_d2f>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	4945      	ldr	r1, [pc, #276]	@ (8001e44 <execute_command+0x2c8>)
 8001d2e:	00a3      	lsls	r3, r4, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	601a      	str	r2, [r3, #0]
			token = strtok(NULL, ":");
 8001d34:	494a      	ldr	r1, [pc, #296]	@ (8001e60 <execute_command+0x2e4>)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f005 fec8 	bl	8007acc <strtok>
 8001d3c:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001d40:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <execute_command+0x1d8>
 8001d48:	4b43      	ldr	r3, [pc, #268]	@ (8001e58 <execute_command+0x2dc>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbdd      	blt.n	8001d10 <execute_command+0x194>
		}
		if (index != totalCoords) {
 8001d54:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <execute_command+0x2dc>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d14f      	bne.n	8001e00 <execute_command+0x284>
			return;
		}

		// Split y values by ':' and store them in an array
		index = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		token = strtok(y_values, ":");
 8001d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d6a:	493d      	ldr	r1, [pc, #244]	@ (8001e60 <execute_command+0x2e4>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 fead 	bl	8007acc <strtok>
 8001d72:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001d76:	e017      	b.n	8001da8 <execute_command+0x22c>
			yCoords[index++] = atof(token);
 8001d78:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001d7c:	f004 f882 	bl	8005e84 <atof>
 8001d80:	ec51 0b10 	vmov	r0, r1, d0
 8001d84:	f8d7 4210 	ldr.w	r4, [r7, #528]	@ 0x210
 8001d88:	1c63      	adds	r3, r4, #1
 8001d8a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001d8e:	f7fe ff33 	bl	8000bf8 <__aeabi_d2f>
 8001d92:	4602      	mov	r2, r0
 8001d94:	492d      	ldr	r1, [pc, #180]	@ (8001e4c <execute_command+0x2d0>)
 8001d96:	00a3      	lsls	r3, r4, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	601a      	str	r2, [r3, #0]
			token = strtok(NULL, ":");
 8001d9c:	4930      	ldr	r1, [pc, #192]	@ (8001e60 <execute_command+0x2e4>)
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f005 fe94 	bl	8007acc <strtok>
 8001da4:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001da8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <execute_command+0x240>
 8001db0:	4b29      	ldr	r3, [pc, #164]	@ (8001e58 <execute_command+0x2dc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbdd      	blt.n	8001d78 <execute_command+0x1fc>
		}
		if (index != totalCoords) {
 8001dbc:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <execute_command+0x2dc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d11d      	bne.n	8001e04 <execute_command+0x288>
			return;
		}

		path_set = 1; 				// Set the target flag
 8001dc8:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <execute_command+0x2a8>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
		currentTargetIndex = 0;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <execute_command+0x2c4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
		current_state = ROTATING;  	// Start with rotating to face the target
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <execute_command+0x2a0>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	701a      	strb	r2, [r3, #0]
	}

	// Send status to ESP8266 every 500ms
	uint32_t current_time = HAL_GetTick();
 8001dda:	f000 fdeb 	bl	80029b4 <HAL_GetTick>
 8001dde:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (current_time - last_status_send_time >= SERIAL_SEND_INTERVAL) {
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <execute_command+0x2e8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001df0:	d309      	bcc.n	8001e06 <execute_command+0x28a>
		last_status_send_time = current_time;
 8001df2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e64 <execute_command+0x2e8>)
 8001df4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001df8:	6013      	str	r3, [r2, #0]
		send_status_to_esp();
 8001dfa:	f000 f867 	bl	8001ecc <send_status_to_esp>
 8001dfe:	e002      	b.n	8001e06 <execute_command+0x28a>
			return;
 8001e00:	bf00      	nop
 8001e02:	e000      	b.n	8001e06 <execute_command+0x28a>
			return;
 8001e04:	bf00      	nop
	}
}
 8001e06:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0800cb08 	.word	0x0800cb08
 8001e14:	20000000 	.word	0x20000000
 8001e18:	2000000c 	.word	0x2000000c
 8001e1c:	200002f0 	.word	0x200002f0
 8001e20:	0800cb10 	.word	0x0800cb10
 8001e24:	2000074c 	.word	0x2000074c
 8001e28:	0800cb20 	.word	0x0800cb20
 8001e2c:	20000408 	.word	0x20000408
 8001e30:	20000404 	.word	0x20000404
 8001e34:	20000400 	.word	0x20000400
 8001e38:	0800cb30 	.word	0x0800cb30
 8001e3c:	20000750 	.word	0x20000750
 8001e40:	20000738 	.word	0x20000738
 8001e44:	20000414 	.word	0x20000414
 8001e48:	2000040c 	.word	0x2000040c
 8001e4c:	200005a4 	.word	0x200005a4
 8001e50:	20000410 	.word	0x20000410
 8001e54:	0800cb3c 	.word	0x0800cb3c
 8001e58:	20000734 	.word	0x20000734
 8001e5c:	0800cb48 	.word	0x0800cb48
 8001e60:	0800cb58 	.word	0x0800cb58
 8001e64:	20000748 	.word	0x20000748

08001e68 <set_servo_pwm>:
/**
 * @brief Set the PWM value for a servo motor.
 * @param servo Pointer to the Servo structure.
 * @param pulse PWM value to set.
 */
void set_servo_pwm(Servo *servo, uint32_t pulse) {
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
	servo->current_pwm = pulse;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <set_servo_pwm+0x24>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001e8a:	e018      	b.n	8001ebe <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d105      	bne.n	8001ea0 <set_servo_pwm+0x38>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001e9e:	e00e      	b.n	8001ebe <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d105      	bne.n	8001eb4 <set_servo_pwm+0x4c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001eb2:	e004      	b.n	8001ebe <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <send_status_to_esp>:

/**
 * @brief Send the robot's status to ESP8266.
 */
void send_status_to_esp() {
 8001ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed0:	b0d6      	sub	sp, #344	@ 0x158
 8001ed2:	af0a      	add	r7, sp, #40	@ 0x28
	// Increase buffer size to accommodate arrays
	char status_message[256];

	// Append basic status information
	int len =
			snprintf(status_message, sizeof(status_message),
 8001ed4:	4b37      	ldr	r3, [pc, #220]	@ (8001fb4 <send_status_to_esp+0xe8>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	469a      	mov	sl, r3
 8001edc:	4b36      	ldr	r3, [pc, #216]	@ (8001fb8 <send_status_to_esp+0xec>)
 8001ede:	681e      	ldr	r6, [r3, #0]
					"STATE:%d;CURRENT_TARGET_INDEX:%d;MOTOR_L:%lu;MOTOR_R:%lu;ANGLE_ERROR:%.4f;CALCULATED_PID:%.4f;TARGET_DISTANCE:%.4f\n",
					current_state, currentTargetIndex,
					(unsigned long) servo_left.current_pwm,
 8001ee0:	4b36      	ldr	r3, [pc, #216]	@ (8001fbc <send_status_to_esp+0xf0>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	607b      	str	r3, [r7, #4]
					(unsigned long) servo_right.current_pwm, angle_error,
 8001ee6:	4b36      	ldr	r3, [pc, #216]	@ (8001fc0 <send_status_to_esp+0xf4>)
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	603a      	str	r2, [r7, #0]
			snprintf(status_message, sizeof(status_message),
 8001eec:	4b35      	ldr	r3, [pc, #212]	@ (8001fc4 <send_status_to_esp+0xf8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb31 	bl	8000558 <__aeabi_f2d>
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	460d      	mov	r5, r1
 8001efa:	4b33      	ldr	r3, [pc, #204]	@ (8001fc8 <send_status_to_esp+0xfc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb2a 	bl	8000558 <__aeabi_f2d>
 8001f04:	4680      	mov	r8, r0
 8001f06:	4689      	mov	r9, r1
 8001f08:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <send_status_to_esp+0x100>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fb23 	bl	8000558 <__aeabi_f2d>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001f1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001f1e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001f22:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	9202      	str	r2, [sp, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	9600      	str	r6, [sp, #0]
 8001f30:	4653      	mov	r3, sl
 8001f32:	4a27      	ldr	r2, [pc, #156]	@ (8001fd0 <send_status_to_esp+0x104>)
 8001f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f38:	f005 fcea 	bl	8007910 <sniprintf>
 8001f3c:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
					calculated_correction, target_distance);

	// Ensure null-termination
	status_message[sizeof(status_message) - 1] = '\0';
 8001f40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

	// Check for truncation
	if (len >= sizeof(status_message)) {
 8001f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f52:	2bff      	cmp	r3, #255	@ 0xff
 8001f54:	d91a      	bls.n	8001f8c <send_status_to_esp+0xc0>
		// Handle the error: truncate, log, etc.
		char error_message[] = "ERROR: Status message truncated.\n";
 8001f56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f5a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd4 <send_status_to_esp+0x108>)
 8001f60:	461c      	mov	r4, r3
 8001f62:	4615      	mov	r5, r2
 8001f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f6c:	682b      	ldr	r3, [r5, #0]
 8001f6e:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) error_message,
				strlen(error_message), HAL_MAX_DELAY);
 8001f70:	f107 0308 	add.w	r3, r7, #8
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe f983 	bl	8000280 <strlen>
 8001f7a:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart1, (uint8_t*) error_message,
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f107 0108 	add.w	r1, r7, #8
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
 8001f86:	4814      	ldr	r0, [pc, #80]	@ (8001fd8 <send_status_to_esp+0x10c>)
 8001f88:	f002 ff76 	bl	8004e78 <HAL_UART_Transmit>
	}

	// Transmit the status message over UART
	HAL_UART_Transmit(&huart1, (uint8_t*) status_message,
			strlen(status_message), HAL_MAX_DELAY);
 8001f8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe f975 	bl	8000280 <strlen>
 8001f96:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart1, (uint8_t*) status_message,
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa2:	480d      	ldr	r0, [pc, #52]	@ (8001fd8 <send_status_to_esp+0x10c>)
 8001fa4:	f002 ff68 	bl	8004e78 <HAL_UART_Transmit>
}
 8001fa8:	bf00      	nop
 8001faa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fb4:	200002f0 	.word	0x200002f0
 8001fb8:	20000738 	.word	0x20000738
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	2000073c 	.word	0x2000073c
 8001fc8:	20000740 	.word	0x20000740
 8001fcc:	20000744 	.word	0x20000744
 8001fd0:	0800cb5c 	.word	0x0800cb5c
 8001fd4:	0800cbd0 	.word	0x0800cbd0
 8001fd8:	200007e8 	.word	0x200007e8

08001fdc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001fe0:	f000 fc82 	bl	80028e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001fe4:	f000 f880 	bl	80020e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001fe8:	f7ff f89c 	bl	8001124 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001fec:	f000 fa2a 	bl	8002444 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001ff0:	f000 fac8 	bl	8002584 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001ff4:	f000 fbd4 	bl	80027a0 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8001ff8:	f7ff f90a 	bl	8001210 <MX_I2C1_Init>
	MX_ADC1_Init();
 8001ffc:	f7fe fffa 	bl	8000ff4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002000:	2201      	movs	r2, #1
 8002002:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002006:	482e      	ldr	r0, [pc, #184]	@ (80020c0 <main+0xe4>)
 8002008:	f001 fa8e 	bl	8003528 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800200c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002010:	f000 fcdc 	bl	80029cc <HAL_Delay>
	 }
	 Gz_mean /= CALIB;
	 Ax_mean /= CALIB;
	 Ay_mean /= CALIB;*/

	HAL_TIM_PWM_Init(&htim1);
 8002014:	482b      	ldr	r0, [pc, #172]	@ (80020c4 <main+0xe8>)
 8002016:	f002 f8b3 	bl	8004180 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 800201a:	482b      	ldr	r0, [pc, #172]	@ (80020c8 <main+0xec>)
 800201c:	f002 f8b0 	bl	8004180 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002020:	2100      	movs	r1, #0
 8002022:	4828      	ldr	r0, [pc, #160]	@ (80020c4 <main+0xe8>)
 8002024:	f002 f906 	bl	8004234 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002028:	2108      	movs	r1, #8
 800202a:	4827      	ldr	r0, [pc, #156]	@ (80020c8 <main+0xec>)
 800202c:	f002 f902 	bl	8004234 <HAL_TIM_PWM_Start>
	TIM1->CR1 = 0x01;
 8002030:	4b26      	ldr	r3, [pc, #152]	@ (80020cc <main+0xf0>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]
	TIM2->CR1 = 0x01;
 8002036:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer)); // interrupt based
 800203e:	2201      	movs	r2, #1
 8002040:	4923      	ldr	r1, [pc, #140]	@ (80020d0 <main+0xf4>)
 8002042:	4824      	ldr	r0, [pc, #144]	@ (80020d4 <main+0xf8>)
 8002044:	f002 ffa3 	bl	8004f8e <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800204e:	481c      	ldr	r0, [pc, #112]	@ (80020c0 <main+0xe4>)
 8002050:	f001 fa6a 	bl	8003528 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (rx_complete) {
 8002054:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <main+0xfc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <main+0x8c>
			execute_command(rx_buffer); // Process the command
 800205c:	481f      	ldr	r0, [pc, #124]	@ (80020dc <main+0x100>)
 800205e:	f7ff fd8d 	bl	8001b7c <execute_command>
			rx_complete = 0; // Reset the completion flag
 8002062:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <main+0xfc>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
		}
		switch (current_state) {
 8002068:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <main+0x104>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b03      	cmp	r3, #3
 8002070:	d821      	bhi.n	80020b6 <main+0xda>
 8002072:	a201      	add	r2, pc, #4	@ (adr r2, 8002078 <main+0x9c>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	080020b7 	.word	0x080020b7
 800207c:	08002089 	.word	0x08002089
 8002080:	0800209d 	.word	0x0800209d
 8002084:	080020b7 	.word	0x080020b7
		case ROTATING:
			if (locationReceived) {
 8002088:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <main+0x108>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00f      	beq.n	80020b0 <main+0xd4>
				handle_rotation();
 8002090:	f7ff f9fe 	bl	8001490 <handle_rotation>
				locationReceived = 0;
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <main+0x108>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
			}
			break;
 800209a:	e009      	b.n	80020b0 <main+0xd4>
		case MOVING:
			if (locationReceived) {
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <main+0x108>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <main+0xd8>
				handle_movement();
 80020a4:	f7ff facc 	bl	8001640 <handle_movement>
				locationReceived = 0;
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <main+0x108>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
			}
			break;
 80020ae:	e001      	b.n	80020b4 <main+0xd8>
			break;
 80020b0:	bf00      	nop
 80020b2:	e000      	b.n	80020b6 <main+0xda>
			break;
 80020b4:	bf00      	nop
		case IDLE:
			break;
		default:
		}

		HAL_Delay(10);
 80020b6:	200a      	movs	r0, #10
 80020b8:	f000 fc88 	bl	80029cc <HAL_Delay>
		if (rx_complete) {
 80020bc:	e7ca      	b.n	8002054 <main+0x78>
 80020be:	bf00      	nop
 80020c0:	40020800 	.word	0x40020800
 80020c4:	20000758 	.word	0x20000758
 80020c8:	200007a0 	.word	0x200007a0
 80020cc:	40010000 	.word	0x40010000
 80020d0:	200003fc 	.word	0x200003fc
 80020d4:	200007e8 	.word	0x200007e8
 80020d8:	200003f8 	.word	0x200003f8
 80020dc:	200002f4 	.word	0x200002f4
 80020e0:	200002f0 	.word	0x200002f0
 80020e4:	20000750 	.word	0x20000750

080020e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b094      	sub	sp, #80	@ 0x50
 80020ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80020ee:	f107 0320 	add.w	r3, r7, #32
 80020f2:	2230      	movs	r2, #48	@ 0x30
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f005 fccd 	bl	8007a96 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <SystemClock_Config+0xd0>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	4a28      	ldr	r2, [pc, #160]	@ (80021b8 <SystemClock_Config+0xd0>)
 8002116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800211a:	6413      	str	r3, [r2, #64]	@ 0x40
 800211c:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <SystemClock_Config+0xd0>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <SystemClock_Config+0xd4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002134:	4a21      	ldr	r2, [pc, #132]	@ (80021bc <SystemClock_Config+0xd4>)
 8002136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b1f      	ldr	r3, [pc, #124]	@ (80021bc <SystemClock_Config+0xd4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002148:	2301      	movs	r3, #1
 800214a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800214c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002152:	2302      	movs	r3, #2
 8002154:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002156:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800215a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 20;
 800215c:	2314      	movs	r3, #20
 800215e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 128;
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002164:	2302      	movs	r3, #2
 8002166:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002168:	2304      	movs	r3, #4
 800216a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800216c:	f107 0320 	add.w	r3, r7, #32
 8002170:	4618      	mov	r0, r3
 8002172:	f001 fb37 	bl	80037e4 <HAL_RCC_OscConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SystemClock_Config+0x98>
		Error_Handler();
 800217c:	f000 f820 	bl	80021c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002180:	230f      	movs	r3, #15
 8002182:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002184:	2302      	movs	r3, #2
 8002186:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800218c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002190:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	2102      	movs	r1, #2
 800219c:	4618      	mov	r0, r3
 800219e:	f001 fd99 	bl	8003cd4 <HAL_RCC_ClockConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <SystemClock_Config+0xc4>
		Error_Handler();
 80021a8:	f000 f80a 	bl	80021c0 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 80021ac:	f001 fe78 	bl	8003ea0 <HAL_RCC_EnableCSS>
}
 80021b0:	bf00      	nop
 80021b2:	3750      	adds	r7, #80	@ 0x50
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40007000 	.word	0x40007000

080021c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c4:	b672      	cpsid	i
}
 80021c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <Error_Handler+0x8>

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <HAL_MspInit+0x4c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	4a0f      	ldr	r2, [pc, #60]	@ (8002218 <HAL_MspInit+0x4c>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002218 <HAL_MspInit+0x4c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_MspInit+0x4c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <HAL_MspInit+0x4c>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_MspInit+0x4c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002220:	f001 ff44 	bl	80040ac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <NMI_Handler+0x8>

08002228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <MemManage_Handler+0x4>

08002238 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <UsageFault_Handler+0x4>

08002248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002276:	f000 fb89 	bl	800298c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <USART1_IRQHandler+0x10>)
 8002286:	f002 fea7 	bl	8004fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200007e8 	.word	0x200007e8

08002294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return 1;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_kill>:

int _kill(int pid, int sig)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ae:	f005 fcb3 	bl	8007c18 <__errno>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2216      	movs	r2, #22
 80022b6:	601a      	str	r2, [r3, #0]
  return -1;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_exit>:

void _exit (int status)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022cc:	f04f 31ff 	mov.w	r1, #4294967295
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ffe7 	bl	80022a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022d6:	bf00      	nop
 80022d8:	e7fd      	b.n	80022d6 <_exit+0x12>

080022da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e00a      	b.n	8002302 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ec:	f3af 8000 	nop.w
 80022f0:	4601      	mov	r1, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	60ba      	str	r2, [r7, #8]
 80022f8:	b2ca      	uxtb	r2, r1
 80022fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	dbf0      	blt.n	80022ec <_read+0x12>
  }

  return len;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e009      	b.n	800233a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	60ba      	str	r2, [r7, #8]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	dbf1      	blt.n	8002326 <_write+0x12>
  }
  return len;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_close>:

int _close(int file)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002374:	605a      	str	r2, [r3, #4]
  return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_isatty>:

int _isatty(int file)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800238c:	2301      	movs	r3, #1
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023bc:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <_sbrk+0x5c>)
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <_sbrk+0x60>)
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c8:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <_sbrk+0x64>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d102      	bne.n	80023d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <_sbrk+0x64>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	@ (800241c <_sbrk+0x68>)
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <_sbrk+0x64>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d207      	bcs.n	80023f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e4:	f005 fc18 	bl	8007c18 <__errno>
 80023e8:	4603      	mov	r3, r0
 80023ea:	220c      	movs	r2, #12
 80023ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295
 80023f2:	e009      	b.n	8002408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fa:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <_sbrk+0x64>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	4a05      	ldr	r2, [pc, #20]	@ (8002418 <_sbrk+0x64>)
 8002404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20010000 	.word	0x20010000
 8002414:	00000400 	.word	0x00000400
 8002418:	20000754 	.word	0x20000754
 800241c:	20000980 	.word	0x20000980

08002420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <SystemInit+0x20>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242a:	4a05      	ldr	r2, [pc, #20]	@ (8002440 <SystemInit+0x20>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b096      	sub	sp, #88	@ 0x58
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]
 8002472:	615a      	str	r2, [r3, #20]
 8002474:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	2220      	movs	r2, #32
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f005 fb0a 	bl	8007a96 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002482:	4b3e      	ldr	r3, [pc, #248]	@ (800257c <MX_TIM1_Init+0x138>)
 8002484:	4a3e      	ldr	r2, [pc, #248]	@ (8002580 <MX_TIM1_Init+0x13c>)
 8002486:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8002488:	4b3c      	ldr	r3, [pc, #240]	@ (800257c <MX_TIM1_Init+0x138>)
 800248a:	2227      	movs	r2, #39	@ 0x27
 800248c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b3b      	ldr	r3, [pc, #236]	@ (800257c <MX_TIM1_Init+0x138>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 8002494:	4b39      	ldr	r3, [pc, #228]	@ (800257c <MX_TIM1_Init+0x138>)
 8002496:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 800249a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249c:	4b37      	ldr	r3, [pc, #220]	@ (800257c <MX_TIM1_Init+0x138>)
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024a2:	4b36      	ldr	r3, [pc, #216]	@ (800257c <MX_TIM1_Init+0x138>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a8:	4b34      	ldr	r3, [pc, #208]	@ (800257c <MX_TIM1_Init+0x138>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ae:	4833      	ldr	r0, [pc, #204]	@ (800257c <MX_TIM1_Init+0x138>)
 80024b0:	f001 fe17 	bl	80040e2 <HAL_TIM_Base_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80024ba:	f7ff fe81 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024c4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024c8:	4619      	mov	r1, r3
 80024ca:	482c      	ldr	r0, [pc, #176]	@ (800257c <MX_TIM1_Init+0x138>)
 80024cc:	f002 f824 	bl	8004518 <HAL_TIM_ConfigClockSource>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80024d6:	f7ff fe73 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024da:	4828      	ldr	r0, [pc, #160]	@ (800257c <MX_TIM1_Init+0x138>)
 80024dc:	f001 fe50 	bl	8004180 <HAL_TIM_PWM_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80024e6:	f7ff fe6b 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ea:	2300      	movs	r3, #0
 80024ec:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80024f6:	4619      	mov	r1, r3
 80024f8:	4820      	ldr	r0, [pc, #128]	@ (800257c <MX_TIM1_Init+0x138>)
 80024fa:	f002 fbad 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002504:	f7ff fe5c 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002508:	2360      	movs	r3, #96	@ 0x60
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002514:	2300      	movs	r3, #0
 8002516:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002528:	2200      	movs	r2, #0
 800252a:	4619      	mov	r1, r3
 800252c:	4813      	ldr	r0, [pc, #76]	@ (800257c <MX_TIM1_Init+0x138>)
 800252e:	f001 ff31 	bl	8004394 <HAL_TIM_PWM_ConfigChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002538:	f7ff fe42 	bl	80021c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002554:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	4619      	mov	r1, r3
 800255e:	4807      	ldr	r0, [pc, #28]	@ (800257c <MX_TIM1_Init+0x138>)
 8002560:	f002 fbe8 	bl	8004d34 <HAL_TIMEx_ConfigBreakDeadTime>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800256a:	f7ff fe29 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800256e:	4803      	ldr	r0, [pc, #12]	@ (800257c <MX_TIM1_Init+0x138>)
 8002570:	f000 f8b4 	bl	80026dc <HAL_TIM_MspPostInit>

}
 8002574:	bf00      	nop
 8002576:	3758      	adds	r7, #88	@ 0x58
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000758 	.word	0x20000758
 8002580:	40010000 	.word	0x40010000

08002584 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	@ 0x38
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800258a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002598:	f107 0320 	add.w	r3, r7, #32
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
 80025b0:	615a      	str	r2, [r3, #20]
 80025b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025b4:	4b2d      	ldr	r3, [pc, #180]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 80025bc:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025be:	2227      	movs	r2, #39	@ 0x27
 80025c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c2:	4b2a      	ldr	r3, [pc, #168]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80025c8:	4b28      	ldr	r3, [pc, #160]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025ca:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80025ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d0:	4b26      	ldr	r3, [pc, #152]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d6:	4b25      	ldr	r3, [pc, #148]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025d8:	2200      	movs	r2, #0
 80025da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025dc:	4823      	ldr	r0, [pc, #140]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025de:	f001 fd80 	bl	80040e2 <HAL_TIM_Base_Init>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025e8:	f7ff fdea 	bl	80021c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025f6:	4619      	mov	r1, r3
 80025f8:	481c      	ldr	r0, [pc, #112]	@ (800266c <MX_TIM2_Init+0xe8>)
 80025fa:	f001 ff8d 	bl	8004518 <HAL_TIM_ConfigClockSource>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002604:	f7ff fddc 	bl	80021c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002608:	4818      	ldr	r0, [pc, #96]	@ (800266c <MX_TIM2_Init+0xe8>)
 800260a:	f001 fdb9 	bl	8004180 <HAL_TIM_PWM_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002614:	f7ff fdd4 	bl	80021c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002620:	f107 0320 	add.w	r3, r7, #32
 8002624:	4619      	mov	r1, r3
 8002626:	4811      	ldr	r0, [pc, #68]	@ (800266c <MX_TIM2_Init+0xe8>)
 8002628:	f002 fb16 	bl	8004c58 <HAL_TIMEx_MasterConfigSynchronization>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002632:	f7ff fdc5 	bl	80021c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002636:	2360      	movs	r3, #96	@ 0x60
 8002638:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	2208      	movs	r2, #8
 800264a:	4619      	mov	r1, r3
 800264c:	4807      	ldr	r0, [pc, #28]	@ (800266c <MX_TIM2_Init+0xe8>)
 800264e:	f001 fea1 	bl	8004394 <HAL_TIM_PWM_ConfigChannel>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002658:	f7ff fdb2 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800265c:	4803      	ldr	r0, [pc, #12]	@ (800266c <MX_TIM2_Init+0xe8>)
 800265e:	f000 f83d 	bl	80026dc <HAL_TIM_MspPostInit>

}
 8002662:	bf00      	nop
 8002664:	3738      	adds	r7, #56	@ 0x38
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200007a0 	.word	0x200007a0

08002670 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a15      	ldr	r2, [pc, #84]	@ (80026d4 <HAL_TIM_Base_MspInit+0x64>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	4b14      	ldr	r3, [pc, #80]	@ (80026d8 <HAL_TIM_Base_MspInit+0x68>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	4a13      	ldr	r2, [pc, #76]	@ (80026d8 <HAL_TIM_Base_MspInit+0x68>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6453      	str	r3, [r2, #68]	@ 0x44
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_TIM_Base_MspInit+0x68>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800269e:	e012      	b.n	80026c6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a8:	d10d      	bne.n	80026c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <HAL_TIM_Base_MspInit+0x68>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	4a09      	ldr	r2, [pc, #36]	@ (80026d8 <HAL_TIM_Base_MspInit+0x68>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <HAL_TIM_Base_MspInit+0x68>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a25      	ldr	r2, [pc, #148]	@ (8002790 <HAL_TIM_MspPostInit+0xb4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d11f      	bne.n	800273e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_TIM_MspPostInit+0xb8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	4a23      	ldr	r2, [pc, #140]	@ (8002794 <HAL_TIM_MspPostInit+0xb8>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6313      	str	r3, [r2, #48]	@ 0x30
 800270e:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <HAL_TIM_MspPostInit+0xb8>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800271a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4818      	ldr	r0, [pc, #96]	@ (8002798 <HAL_TIM_MspPostInit+0xbc>)
 8002738:	f000 fd72 	bl	8003220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800273c:	e023      	b.n	8002786 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002746:	d11e      	bne.n	8002786 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_TIM_MspPostInit+0xb8>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	4a10      	ldr	r2, [pc, #64]	@ (8002794 <HAL_TIM_MspPostInit+0xb8>)
 8002752:	f043 0302 	orr.w	r3, r3, #2
 8002756:	6313      	str	r3, [r2, #48]	@ 0x30
 8002758:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <HAL_TIM_MspPostInit+0xb8>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002764:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002776:	2301      	movs	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	4806      	ldr	r0, [pc, #24]	@ (800279c <HAL_TIM_MspPostInit+0xc0>)
 8002782:	f000 fd4d 	bl	8003220 <HAL_GPIO_Init>
}
 8002786:	bf00      	nop
 8002788:	3728      	adds	r7, #40	@ 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40010000 	.word	0x40010000
 8002794:	40023800 	.word	0x40023800
 8002798:	40020000 	.word	0x40020000
 800279c:	40020400 	.word	0x40020400

080027a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a4:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <MX_USART1_UART_Init+0x48>)
 80027a6:	4a11      	ldr	r2, [pc, #68]	@ (80027ec <MX_USART1_UART_Init+0x4c>)
 80027a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 500000;
 80027aa:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <MX_USART1_UART_Init+0x48>)
 80027ac:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <MX_USART1_UART_Init+0x50>)
 80027ae:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <MX_USART1_UART_Init+0x48>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b6:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <MX_USART1_UART_Init+0x48>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <MX_USART1_UART_Init+0x48>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <MX_USART1_UART_Init+0x48>)
 80027c4:	220c      	movs	r2, #12
 80027c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c8:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <MX_USART1_UART_Init+0x48>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <MX_USART1_UART_Init+0x48>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027d4:	4804      	ldr	r0, [pc, #16]	@ (80027e8 <MX_USART1_UART_Init+0x48>)
 80027d6:	f002 faff 	bl	8004dd8 <HAL_UART_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80027e0:	f7ff fcee 	bl	80021c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200007e8 	.word	0x200007e8
 80027ec:	40011000 	.word	0x40011000
 80027f0:	0007a120 	.word	0x0007a120

080027f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	@ 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1d      	ldr	r2, [pc, #116]	@ (8002888 <HAL_UART_MspInit+0x94>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d134      	bne.n	8002880 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	4b1c      	ldr	r3, [pc, #112]	@ (800288c <HAL_UART_MspInit+0x98>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <HAL_UART_MspInit+0x98>)
 8002820:	f043 0310 	orr.w	r3, r3, #16
 8002824:	6453      	str	r3, [r2, #68]	@ 0x44
 8002826:	4b19      	ldr	r3, [pc, #100]	@ (800288c <HAL_UART_MspInit+0x98>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <HAL_UART_MspInit+0x98>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	4a14      	ldr	r2, [pc, #80]	@ (800288c <HAL_UART_MspInit+0x98>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6313      	str	r3, [r2, #48]	@ 0x30
 8002842:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_UART_MspInit+0x98>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800284e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002854:	2302      	movs	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002860:	2307      	movs	r3, #7
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	4809      	ldr	r0, [pc, #36]	@ (8002890 <HAL_UART_MspInit+0x9c>)
 800286c:	f000 fcd8 	bl	8003220 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	2100      	movs	r1, #0
 8002874:	2025      	movs	r0, #37	@ 0x25
 8002876:	f000 fc0a 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800287a:	2025      	movs	r0, #37	@ 0x25
 800287c:	f000 fc23 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002880:	bf00      	nop
 8002882:	3728      	adds	r7, #40	@ 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40011000 	.word	0x40011000
 800288c:	40023800 	.word	0x40023800
 8002890:	40020000 	.word	0x40020000

08002894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002898:	480d      	ldr	r0, [pc, #52]	@ (80028d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800289a:	490e      	ldr	r1, [pc, #56]	@ (80028d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800289c:	4a0e      	ldr	r2, [pc, #56]	@ (80028d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028a0:	e002      	b.n	80028a8 <LoopCopyDataInit>

080028a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a6:	3304      	adds	r3, #4

080028a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ac:	d3f9      	bcc.n	80028a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ae:	4a0b      	ldr	r2, [pc, #44]	@ (80028dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028b0:	4c0b      	ldr	r4, [pc, #44]	@ (80028e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b4:	e001      	b.n	80028ba <LoopFillZerobss>

080028b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b8:	3204      	adds	r2, #4

080028ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028bc:	d3fb      	bcc.n	80028b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028be:	f7ff fdaf 	bl	8002420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028c2:	f005 f9af 	bl	8007c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028c6:	f7ff fb89 	bl	8001fdc <main>
  bx  lr    
 80028ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80028d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d4:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 80028d8:	0800d110 	.word	0x0800d110
  ldr r2, =_sbss
 80028dc:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80028e0:	20000980 	.word	0x20000980

080028e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028e4:	e7fe      	b.n	80028e4 <ADC_IRQHandler>
	...

080028e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <HAL_Init+0x40>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002928 <HAL_Init+0x40>)
 80028f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <HAL_Init+0x40>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002928 <HAL_Init+0x40>)
 80028fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <HAL_Init+0x40>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a07      	ldr	r2, [pc, #28]	@ (8002928 <HAL_Init+0x40>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002910:	2003      	movs	r0, #3
 8002912:	f000 fbb1 	bl	8003078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002916:	200f      	movs	r0, #15
 8002918:	f000 f808 	bl	800292c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800291c:	f7ff fc56 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00

0800292c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002934:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <HAL_InitTick+0x54>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <HAL_InitTick+0x58>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002942:	fbb3 f3f1 	udiv	r3, r3, r1
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fbc9 	bl	80030e2 <HAL_SYSTICK_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e00e      	b.n	8002978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b0f      	cmp	r3, #15
 800295e:	d80a      	bhi.n	8002976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002960:	2200      	movs	r2, #0
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f000 fb91 	bl	800308e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800296c:	4a06      	ldr	r2, [pc, #24]	@ (8002988 <HAL_InitTick+0x5c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000050 	.word	0x20000050
 8002984:	20000058 	.word	0x20000058
 8002988:	20000054 	.word	0x20000054

0800298c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_IncTick+0x20>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_IncTick+0x24>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	@ (80029b0 <HAL_IncTick+0x24>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000058 	.word	0x20000058
 80029b0:	20000830 	.word	0x20000830

080029b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <HAL_GetTick+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000830 	.word	0x20000830

080029cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff ffee 	bl	80029b4 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d005      	beq.n	80029f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_Delay+0x44>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029f2:	bf00      	nop
 80029f4:	f7ff ffde 	bl	80029b4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d8f7      	bhi.n	80029f4 <HAL_Delay+0x28>
  {
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000058 	.word	0x20000058

08002a14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e033      	b.n	8002a92 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe fb32 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d118      	bne.n	8002a84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a5a:	f023 0302 	bic.w	r3, r3, #2
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f93a 	bl	8002ce0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f023 0303 	bic.w	r3, r3, #3
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a82:	e001      	b.n	8002a88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x1c>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e105      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x228>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b09      	cmp	r3, #9
 8002ac6:	d925      	bls.n	8002b14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68d9      	ldr	r1, [r3, #12]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4413      	add	r3, r2
 8002adc:	3b1e      	subs	r3, #30
 8002ade:	2207      	movs	r2, #7
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43da      	mvns	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	400a      	ands	r2, r1
 8002aec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68d9      	ldr	r1, [r3, #12]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	4618      	mov	r0, r3
 8002b00:	4603      	mov	r3, r0
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4403      	add	r3, r0
 8002b06:	3b1e      	subs	r3, #30
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	e022      	b.n	8002b5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6919      	ldr	r1, [r3, #16]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	2207      	movs	r2, #7
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43da      	mvns	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	400a      	ands	r2, r1
 8002b36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6919      	ldr	r1, [r3, #16]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	4618      	mov	r0, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4403      	add	r3, r0
 8002b50:	409a      	lsls	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d824      	bhi.n	8002bac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	3b05      	subs	r3, #5
 8002b74:	221f      	movs	r2, #31
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	400a      	ands	r2, r1
 8002b82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4618      	mov	r0, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b05      	subs	r3, #5
 8002b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002baa:	e04c      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	2b0c      	cmp	r3, #12
 8002bb2:	d824      	bhi.n	8002bfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3b23      	subs	r3, #35	@ 0x23
 8002bc6:	221f      	movs	r2, #31
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43da      	mvns	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3b23      	subs	r3, #35	@ 0x23
 8002bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bfc:	e023      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3b41      	subs	r3, #65	@ 0x41
 8002c10:	221f      	movs	r2, #31
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	3b41      	subs	r3, #65	@ 0x41
 8002c3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c46:	4b22      	ldr	r3, [pc, #136]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x234>)
 8002c48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a21      	ldr	r2, [pc, #132]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x238>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d109      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x1cc>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b12      	cmp	r3, #18
 8002c5a:	d105      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a19      	ldr	r2, [pc, #100]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x238>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d123      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x21e>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d003      	beq.n	8002c82 <HAL_ADC_ConfigChannel+0x1e6>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b11      	cmp	r3, #17
 8002c80:	d11b      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d111      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c96:	4b10      	ldr	r3, [pc, #64]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x23c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a10      	ldr	r2, [pc, #64]	@ (8002cdc <HAL_ADC_ConfigChannel+0x240>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	0c9a      	lsrs	r2, r3, #18
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cac:	e002      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f9      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40012300 	.word	0x40012300
 8002cd4:	40012000 	.word	0x40012000
 8002cd8:	20000050 	.word	0x20000050
 8002cdc:	431bde83 	.word	0x431bde83

08002ce0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce8:	4b79      	ldr	r3, [pc, #484]	@ (8002ed0 <ADC_Init+0x1f0>)
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	431a      	orrs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	021a      	lsls	r2, r3, #8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6899      	ldr	r1, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	4a58      	ldr	r2, [pc, #352]	@ (8002ed4 <ADC_Init+0x1f4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6899      	ldr	r1, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e00f      	b.n	8002dde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ddc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0202 	bic.w	r2, r2, #2
 8002dec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6899      	ldr	r1, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	7e1b      	ldrb	r3, [r3, #24]
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	3b01      	subs	r3, #1
 8002e38:	035a      	lsls	r2, r3, #13
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	e007      	b.n	8002e54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	051a      	lsls	r2, r3, #20
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6899      	ldr	r1, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e96:	025a      	lsls	r2, r3, #9
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	029a      	lsls	r2, r3, #10
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	609a      	str	r2, [r3, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40012300 	.word	0x40012300
 8002ed4:	0f000001 	.word	0x0f000001

08002ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0a:	4a04      	ldr	r2, [pc, #16]	@ (8002f1c <__NVIC_SetPriorityGrouping+0x44>)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	60d3      	str	r3, [r2, #12]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f24:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <__NVIC_GetPriorityGrouping+0x18>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 0307 	and.w	r3, r3, #7
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	db0b      	blt.n	8002f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4907      	ldr	r1, [pc, #28]	@ (8002f74 <__NVIC_EnableIRQ+0x38>)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000e100 	.word	0xe000e100

08002f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db0a      	blt.n	8002fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	490c      	ldr	r1, [pc, #48]	@ (8002fc4 <__NVIC_SetPriority+0x4c>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa0:	e00a      	b.n	8002fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4908      	ldr	r1, [pc, #32]	@ (8002fc8 <__NVIC_SetPriority+0x50>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	3b04      	subs	r3, #4
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	761a      	strb	r2, [r3, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	@ 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	bf28      	it	cs
 8002fea:	2304      	movcs	r3, #4
 8002fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d902      	bls.n	8002ffc <NVIC_EncodePriority+0x30>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3b03      	subs	r3, #3
 8002ffa:	e000      	b.n	8002ffe <NVIC_EncodePriority+0x32>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	401a      	ands	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003014:	f04f 31ff 	mov.w	r1, #4294967295
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43d9      	mvns	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	4313      	orrs	r3, r2
         );
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	@ 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003044:	d301      	bcc.n	800304a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003046:	2301      	movs	r3, #1
 8003048:	e00f      	b.n	800306a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304a:	4a0a      	ldr	r2, [pc, #40]	@ (8003074 <SysTick_Config+0x40>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003052:	210f      	movs	r1, #15
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	f7ff ff8e 	bl	8002f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800305c:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <SysTick_Config+0x40>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003062:	4b04      	ldr	r3, [pc, #16]	@ (8003074 <SysTick_Config+0x40>)
 8003064:	2207      	movs	r2, #7
 8003066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000e010 	.word	0xe000e010

08003078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff29 	bl	8002ed8 <__NVIC_SetPriorityGrouping>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a0:	f7ff ff3e 	bl	8002f20 <__NVIC_GetPriorityGrouping>
 80030a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff ff8e 	bl	8002fcc <NVIC_EncodePriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff5d 	bl	8002f78 <__NVIC_SetPriority>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff31 	bl	8002f3c <__NVIC_EnableIRQ>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ffa2 	bl	8003034 <SysTick_Config>
 80030f0:	4603      	mov	r3, r0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003106:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff fc54 	bl	80029b4 <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d008      	beq.n	800312c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2280      	movs	r2, #128	@ 0x80
 800311e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e052      	b.n	80031d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0216 	bic.w	r2, r2, #22
 800313a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800314a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d103      	bne.n	800315c <HAL_DMA_Abort+0x62>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0208 	bic.w	r2, r2, #8
 800316a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317c:	e013      	b.n	80031a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800317e:	f7ff fc19 	bl	80029b4 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b05      	cmp	r3, #5
 800318a:	d90c      	bls.n	80031a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2203      	movs	r2, #3
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e015      	b.n	80031d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e4      	bne.n	800317e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b8:	223f      	movs	r2, #63	@ 0x3f
 80031ba:	409a      	lsls	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d004      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2280      	movs	r2, #128	@ 0x80
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e00c      	b.n	8003212 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2205      	movs	r2, #5
 80031fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	@ 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e159      	b.n	80034f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800323c:	2201      	movs	r2, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	429a      	cmp	r2, r3
 8003256:	f040 8148 	bne.w	80034ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d005      	beq.n	8003272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800326e:	2b02      	cmp	r3, #2
 8003270:	d130      	bne.n	80032d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	2203      	movs	r2, #3
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032a8:	2201      	movs	r2, #1
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 0201 	and.w	r2, r3, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d017      	beq.n	8003310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d123      	bne.n	8003364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	08da      	lsrs	r2, r3, #3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3208      	adds	r2, #8
 8003324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	220f      	movs	r2, #15
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3208      	adds	r2, #8
 800335e:	69b9      	ldr	r1, [r7, #24]
 8003360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2203      	movs	r2, #3
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 0203 	and.w	r2, r3, #3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a2 	beq.w	80034ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b57      	ldr	r3, [pc, #348]	@ (8003508 <HAL_GPIO_Init+0x2e8>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	4a56      	ldr	r2, [pc, #344]	@ (8003508 <HAL_GPIO_Init+0x2e8>)
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033b6:	4b54      	ldr	r3, [pc, #336]	@ (8003508 <HAL_GPIO_Init+0x2e8>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c2:	4a52      	ldr	r2, [pc, #328]	@ (800350c <HAL_GPIO_Init+0x2ec>)
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	3302      	adds	r3, #2
 80033ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	220f      	movs	r2, #15
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a49      	ldr	r2, [pc, #292]	@ (8003510 <HAL_GPIO_Init+0x2f0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0x202>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a48      	ldr	r2, [pc, #288]	@ (8003514 <HAL_GPIO_Init+0x2f4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_GPIO_Init+0x1fe>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a47      	ldr	r2, [pc, #284]	@ (8003518 <HAL_GPIO_Init+0x2f8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00d      	beq.n	800341a <HAL_GPIO_Init+0x1fa>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a46      	ldr	r2, [pc, #280]	@ (800351c <HAL_GPIO_Init+0x2fc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_Init+0x1f6>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a45      	ldr	r2, [pc, #276]	@ (8003520 <HAL_GPIO_Init+0x300>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_GPIO_Init+0x1f2>
 800340e:	2304      	movs	r3, #4
 8003410:	e008      	b.n	8003424 <HAL_GPIO_Init+0x204>
 8003412:	2307      	movs	r3, #7
 8003414:	e006      	b.n	8003424 <HAL_GPIO_Init+0x204>
 8003416:	2303      	movs	r3, #3
 8003418:	e004      	b.n	8003424 <HAL_GPIO_Init+0x204>
 800341a:	2302      	movs	r3, #2
 800341c:	e002      	b.n	8003424 <HAL_GPIO_Init+0x204>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_GPIO_Init+0x204>
 8003422:	2300      	movs	r3, #0
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f002 0203 	and.w	r2, r2, #3
 800342a:	0092      	lsls	r2, r2, #2
 800342c:	4093      	lsls	r3, r2
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003434:	4935      	ldr	r1, [pc, #212]	@ (800350c <HAL_GPIO_Init+0x2ec>)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	3302      	adds	r3, #2
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003442:	4b38      	ldr	r3, [pc, #224]	@ (8003524 <HAL_GPIO_Init+0x304>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003466:	4a2f      	ldr	r2, [pc, #188]	@ (8003524 <HAL_GPIO_Init+0x304>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800346c:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <HAL_GPIO_Init+0x304>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003490:	4a24      	ldr	r2, [pc, #144]	@ (8003524 <HAL_GPIO_Init+0x304>)
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003496:	4b23      	ldr	r3, [pc, #140]	@ (8003524 <HAL_GPIO_Init+0x304>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003524 <HAL_GPIO_Init+0x304>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c0:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <HAL_GPIO_Init+0x304>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003524 <HAL_GPIO_Init+0x304>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3301      	adds	r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	f67f aea2 	bls.w	800323c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3724      	adds	r7, #36	@ 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800
 800350c:	40013800 	.word	0x40013800
 8003510:	40020000 	.word	0x40020000
 8003514:	40020400 	.word	0x40020400
 8003518:	40020800 	.word	0x40020800
 800351c:	40020c00 	.word	0x40020c00
 8003520:	40021000 	.word	0x40021000
 8003524:	40013c00 	.word	0x40013c00

08003528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
 8003534:	4613      	mov	r3, r2
 8003536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003544:	e003      	b.n	800354e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	041a      	lsls	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e12b      	b.n	80037c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fe72 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2224      	movs	r2, #36	@ 0x24
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0201 	bic.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035c0:	f000 fd4c 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 80035c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4a81      	ldr	r2, [pc, #516]	@ (80037d0 <HAL_I2C_Init+0x274>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d807      	bhi.n	80035e0 <HAL_I2C_Init+0x84>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a80      	ldr	r2, [pc, #512]	@ (80037d4 <HAL_I2C_Init+0x278>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	bf94      	ite	ls
 80035d8:	2301      	movls	r3, #1
 80035da:	2300      	movhi	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e006      	b.n	80035ee <HAL_I2C_Init+0x92>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a7d      	ldr	r2, [pc, #500]	@ (80037d8 <HAL_I2C_Init+0x27c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bf94      	ite	ls
 80035e8:	2301      	movls	r3, #1
 80035ea:	2300      	movhi	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0e7      	b.n	80037c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4a78      	ldr	r2, [pc, #480]	@ (80037dc <HAL_I2C_Init+0x280>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	0c9b      	lsrs	r3, r3, #18
 8003600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a6a      	ldr	r2, [pc, #424]	@ (80037d0 <HAL_I2C_Init+0x274>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d802      	bhi.n	8003630 <HAL_I2C_Init+0xd4>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3301      	adds	r3, #1
 800362e:	e009      	b.n	8003644 <HAL_I2C_Init+0xe8>
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	4a69      	ldr	r2, [pc, #420]	@ (80037e0 <HAL_I2C_Init+0x284>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	099b      	lsrs	r3, r3, #6
 8003642:	3301      	adds	r3, #1
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	430b      	orrs	r3, r1
 800364a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003656:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	495c      	ldr	r1, [pc, #368]	@ (80037d0 <HAL_I2C_Init+0x274>)
 8003660:	428b      	cmp	r3, r1
 8003662:	d819      	bhi.n	8003698 <HAL_I2C_Init+0x13c>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1e59      	subs	r1, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003672:	1c59      	adds	r1, r3, #1
 8003674:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003678:	400b      	ands	r3, r1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_I2C_Init+0x138>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1e59      	subs	r1, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fbb1 f3f3 	udiv	r3, r1, r3
 800368c:	3301      	adds	r3, #1
 800368e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003692:	e051      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 8003694:	2304      	movs	r3, #4
 8003696:	e04f      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d111      	bne.n	80036c4 <HAL_I2C_Init+0x168>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1e58      	subs	r0, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	440b      	add	r3, r1
 80036ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	e012      	b.n	80036ea <HAL_I2C_Init+0x18e>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	1e58      	subs	r0, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	0099      	lsls	r1, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_I2C_Init+0x196>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e022      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10e      	bne.n	8003718 <HAL_I2C_Init+0x1bc>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1e58      	subs	r0, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	440b      	add	r3, r1
 8003708:	fbb0 f3f3 	udiv	r3, r0, r3
 800370c:	3301      	adds	r3, #1
 800370e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003716:	e00f      	b.n	8003738 <HAL_I2C_Init+0x1dc>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1e58      	subs	r0, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	0099      	lsls	r1, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	fbb0 f3f3 	udiv	r3, r0, r3
 800372e:	3301      	adds	r3, #1
 8003730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003734:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	6809      	ldr	r1, [r1, #0]
 800373c:	4313      	orrs	r3, r2
 800373e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003766:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6911      	ldr	r1, [r2, #16]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68d2      	ldr	r2, [r2, #12]
 8003772:	4311      	orrs	r1, r2
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	430b      	orrs	r3, r1
 800377a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	000186a0 	.word	0x000186a0
 80037d4:	001e847f 	.word	0x001e847f
 80037d8:	003d08ff 	.word	0x003d08ff
 80037dc:	431bde83 	.word	0x431bde83
 80037e0:	10624dd3 	.word	0x10624dd3

080037e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e267      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d075      	beq.n	80038ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003802:	4b88      	ldr	r3, [pc, #544]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b04      	cmp	r3, #4
 800380c:	d00c      	beq.n	8003828 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800380e:	4b85      	ldr	r3, [pc, #532]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003816:	2b08      	cmp	r3, #8
 8003818:	d112      	bne.n	8003840 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381a:	4b82      	ldr	r3, [pc, #520]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003826:	d10b      	bne.n	8003840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	4b7e      	ldr	r3, [pc, #504]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d05b      	beq.n	80038ec <HAL_RCC_OscConfig+0x108>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d157      	bne.n	80038ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e242      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003848:	d106      	bne.n	8003858 <HAL_RCC_OscConfig+0x74>
 800384a:	4b76      	ldr	r3, [pc, #472]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a75      	ldr	r2, [pc, #468]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	e01d      	b.n	8003894 <HAL_RCC_OscConfig+0xb0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x98>
 8003862:	4b70      	ldr	r3, [pc, #448]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a6f      	ldr	r2, [pc, #444]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6c      	ldr	r2, [pc, #432]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0xb0>
 800387c:	4b69      	ldr	r3, [pc, #420]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a68      	ldr	r2, [pc, #416]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b66      	ldr	r3, [pc, #408]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a65      	ldr	r2, [pc, #404]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 800388e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d013      	beq.n	80038c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7ff f88a 	bl	80029b4 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a4:	f7ff f886 	bl	80029b4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	@ 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e207      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0xc0>
 80038c2:	e014      	b.n	80038ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7ff f876 	bl	80029b4 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038cc:	f7ff f872 	bl	80029b4 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	@ 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1f3      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038de:	4b51      	ldr	r3, [pc, #324]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0xe8>
 80038ea:	e000      	b.n	80038ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d063      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800390e:	2b08      	cmp	r3, #8
 8003910:	d11c      	bne.n	800394c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003912:	4b44      	ldr	r3, [pc, #272]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d116      	bne.n	800394c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391e:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d005      	beq.n	8003936 <HAL_RCC_OscConfig+0x152>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d001      	beq.n	8003936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e1c7      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003936:	4b3b      	ldr	r3, [pc, #236]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4937      	ldr	r1, [pc, #220]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	e03a      	b.n	80039c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003954:	4b34      	ldr	r3, [pc, #208]	@ (8003a28 <HAL_RCC_OscConfig+0x244>)
 8003956:	2201      	movs	r2, #1
 8003958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7ff f82b 	bl	80029b4 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003962:	f7ff f827 	bl	80029b4 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e1a8      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003974:	4b2b      	ldr	r3, [pc, #172]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003980:	4b28      	ldr	r3, [pc, #160]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4925      	ldr	r1, [pc, #148]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 8003990:	4313      	orrs	r3, r2
 8003992:	600b      	str	r3, [r1, #0]
 8003994:	e015      	b.n	80039c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003996:	4b24      	ldr	r3, [pc, #144]	@ (8003a28 <HAL_RCC_OscConfig+0x244>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7ff f80a 	bl	80029b4 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7ff f806 	bl	80029b4 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e187      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d036      	beq.n	8003a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <HAL_RCC_OscConfig+0x248>)
 80039d8:	2201      	movs	r2, #1
 80039da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe ffea 	bl	80029b4 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e4:	f7fe ffe6 	bl	80029b4 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e167      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_OscConfig+0x240>)
 80039f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x200>
 8003a02:	e01b      	b.n	8003a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a04:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_RCC_OscConfig+0x248>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe ffd3 	bl	80029b4 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a10:	e00e      	b.n	8003a30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a12:	f7fe ffcf 	bl	80029b4 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d907      	bls.n	8003a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e150      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
 8003a24:	40023800 	.word	0x40023800
 8003a28:	42470000 	.word	0x42470000
 8003a2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a30:	4b88      	ldr	r3, [pc, #544]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1ea      	bne.n	8003a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8097 	beq.w	8003b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4e:	4b81      	ldr	r3, [pc, #516]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10f      	bne.n	8003a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	4a7c      	ldr	r2, [pc, #496]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7a:	4b77      	ldr	r3, [pc, #476]	@ (8003c58 <HAL_RCC_OscConfig+0x474>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d118      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a86:	4b74      	ldr	r3, [pc, #464]	@ (8003c58 <HAL_RCC_OscConfig+0x474>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a73      	ldr	r2, [pc, #460]	@ (8003c58 <HAL_RCC_OscConfig+0x474>)
 8003a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a92:	f7fe ff8f 	bl	80029b4 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9a:	f7fe ff8b 	bl	80029b4 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e10c      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aac:	4b6a      	ldr	r3, [pc, #424]	@ (8003c58 <HAL_RCC_OscConfig+0x474>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d106      	bne.n	8003ace <HAL_RCC_OscConfig+0x2ea>
 8003ac0:	4b64      	ldr	r3, [pc, #400]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac4:	4a63      	ldr	r2, [pc, #396]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003acc:	e01c      	b.n	8003b08 <HAL_RCC_OscConfig+0x324>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b05      	cmp	r3, #5
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x30c>
 8003ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ada:	4a5e      	ldr	r2, [pc, #376]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aee:	e00b      	b.n	8003b08 <HAL_RCC_OscConfig+0x324>
 8003af0:	4b58      	ldr	r3, [pc, #352]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af4:	4a57      	ldr	r2, [pc, #348]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003afc:	4b55      	ldr	r3, [pc, #340]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b00:	4a54      	ldr	r2, [pc, #336]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f023 0304 	bic.w	r3, r3, #4
 8003b06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d015      	beq.n	8003b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7fe ff50 	bl	80029b4 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fe ff4c 	bl	80029b4 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0cb      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	4b49      	ldr	r3, [pc, #292]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0ee      	beq.n	8003b18 <HAL_RCC_OscConfig+0x334>
 8003b3a:	e014      	b.n	8003b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3c:	f7fe ff3a 	bl	80029b4 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fe ff36 	bl	80029b4 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e0b5      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1ee      	bne.n	8003b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6c:	4b39      	ldr	r3, [pc, #228]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b70:	4a38      	ldr	r2, [pc, #224]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 80a1 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b82:	4b34      	ldr	r3, [pc, #208]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d05c      	beq.n	8003c48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d141      	bne.n	8003c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b96:	4b31      	ldr	r3, [pc, #196]	@ (8003c5c <HAL_RCC_OscConfig+0x478>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fe ff0a 	bl	80029b4 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba4:	f7fe ff06 	bl	80029b4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e087      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	4b27      	ldr	r3, [pc, #156]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	019b      	lsls	r3, r3, #6
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	085b      	lsrs	r3, r3, #1
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	491b      	ldr	r1, [pc, #108]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bec:	4b1b      	ldr	r3, [pc, #108]	@ (8003c5c <HAL_RCC_OscConfig+0x478>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf2:	f7fe fedf 	bl	80029b4 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fe fedb 	bl	80029b4 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e05c      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c0c:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x416>
 8003c18:	e054      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <HAL_RCC_OscConfig+0x478>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe fec8 	bl	80029b4 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe fec4 	bl	80029b4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e045      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x444>
 8003c46:	e03d      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e038      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c60:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd0 <HAL_RCC_OscConfig+0x4ec>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d028      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d121      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d11a      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c90:	4013      	ands	r3, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d111      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800

08003cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0cc      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b68      	ldr	r3, [pc, #416]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d90c      	bls.n	8003d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b65      	ldr	r3, [pc, #404]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfe:	4b63      	ldr	r3, [pc, #396]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0b8      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d020      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d28:	4b59      	ldr	r3, [pc, #356]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4a58      	ldr	r2, [pc, #352]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d40:	4b53      	ldr	r3, [pc, #332]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	4a52      	ldr	r2, [pc, #328]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d4c:	4b50      	ldr	r3, [pc, #320]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	494d      	ldr	r1, [pc, #308]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d044      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	4b47      	ldr	r3, [pc, #284]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d119      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e07f      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d003      	beq.n	8003d92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d107      	bne.n	8003da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d92:	4b3f      	ldr	r3, [pc, #252]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e06f      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da2:	4b3b      	ldr	r3, [pc, #236]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e067      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003db2:	4b37      	ldr	r3, [pc, #220]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 0203 	bic.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4934      	ldr	r1, [pc, #208]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dc4:	f7fe fdf6 	bl	80029b4 <HAL_GetTick>
 8003dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dcc:	f7fe fdf2 	bl	80029b4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e04f      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 020c 	and.w	r2, r3, #12
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d1eb      	bne.n	8003dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003df4:	4b25      	ldr	r3, [pc, #148]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d20c      	bcs.n	8003e1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b22      	ldr	r3, [pc, #136]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b20      	ldr	r3, [pc, #128]	@ (8003e8c <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e032      	b.n	8003e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0304 	and.w	r3, r3, #4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e28:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4916      	ldr	r1, [pc, #88]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d009      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e46:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	490e      	ldr	r1, [pc, #56]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e5a:	f000 f82d 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	490a      	ldr	r1, [pc, #40]	@ (8003e94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	5ccb      	ldrb	r3, [r1, r3]
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	4a09      	ldr	r2, [pc, #36]	@ (8003e98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e76:	4b09      	ldr	r3, [pc, #36]	@ (8003e9c <HAL_RCC_ClockConfig+0x1c8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fd56 	bl	800292c <HAL_InitTick>

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40023c00 	.word	0x40023c00
 8003e90:	40023800 	.word	0x40023800
 8003e94:	0800cc00 	.word	0x0800cc00
 8003e98:	20000050 	.word	0x20000050
 8003e9c:	20000054 	.word	0x20000054

08003ea0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	@ (8003eb4 <HAL_RCC_EnableCSS+0x14>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	4247004c 	.word	0x4247004c

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ebc:	b090      	sub	sp, #64	@ 0x40
 8003ebe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ed0:	4b59      	ldr	r3, [pc, #356]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d00d      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	f200 80a1 	bhi.w	8004024 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x34>
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003eea:	e09b      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eec:	4b53      	ldr	r3, [pc, #332]	@ (800403c <HAL_RCC_GetSysClockFreq+0x184>)
 8003eee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ef0:	e09b      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ef2:	4b53      	ldr	r3, [pc, #332]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ef6:	e098      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ef8:	4b4f      	ldr	r3, [pc, #316]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f02:	4b4d      	ldr	r3, [pc, #308]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d028      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	099b      	lsrs	r3, r3, #6
 8003f14:	2200      	movs	r2, #0
 8003f16:	623b      	str	r3, [r7, #32]
 8003f18:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f20:	2100      	movs	r1, #0
 8003f22:	4b47      	ldr	r3, [pc, #284]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f24:	fb03 f201 	mul.w	r2, r3, r1
 8003f28:	2300      	movs	r3, #0
 8003f2a:	fb00 f303 	mul.w	r3, r0, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	4a43      	ldr	r2, [pc, #268]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f32:	fba0 1202 	umull	r1, r2, r0, r2
 8003f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f38:	460a      	mov	r2, r1
 8003f3a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f3e:	4413      	add	r3, r2
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f44:	2200      	movs	r2, #0
 8003f46:	61bb      	str	r3, [r7, #24]
 8003f48:	61fa      	str	r2, [r7, #28]
 8003f4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f52:	f7fc fea1 	bl	8000c98 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f5e:	e053      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f60:	4b35      	ldr	r3, [pc, #212]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	2200      	movs	r2, #0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	617a      	str	r2, [r7, #20]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f72:	f04f 0b00 	mov.w	fp, #0
 8003f76:	4652      	mov	r2, sl
 8003f78:	465b      	mov	r3, fp
 8003f7a:	f04f 0000 	mov.w	r0, #0
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	0159      	lsls	r1, r3, #5
 8003f84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f88:	0150      	lsls	r0, r2, #5
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	ebb2 080a 	subs.w	r8, r2, sl
 8003f92:	eb63 090b 	sbc.w	r9, r3, fp
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003faa:	ebb2 0408 	subs.w	r4, r2, r8
 8003fae:	eb63 0509 	sbc.w	r5, r3, r9
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	00eb      	lsls	r3, r5, #3
 8003fbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fc0:	00e2      	lsls	r2, r4, #3
 8003fc2:	4614      	mov	r4, r2
 8003fc4:	461d      	mov	r5, r3
 8003fc6:	eb14 030a 	adds.w	r3, r4, sl
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	eb45 030b 	adc.w	r3, r5, fp
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fde:	4629      	mov	r1, r5
 8003fe0:	028b      	lsls	r3, r1, #10
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fe8:	4621      	mov	r1, r4
 8003fea:	028a      	lsls	r2, r1, #10
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	60fa      	str	r2, [r7, #12]
 8003ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ffc:	f7fc fe4c 	bl	8000c98 <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4613      	mov	r3, r2
 8004006:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004008:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x180>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	3301      	adds	r3, #1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004018:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004022:	e002      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_RCC_GetSysClockFreq+0x184>)
 8004026:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800402c:	4618      	mov	r0, r3
 800402e:	3740      	adds	r7, #64	@ 0x40
 8004030:	46bd      	mov	sp, r7
 8004032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800
 800403c:	00f42400 	.word	0x00f42400
 8004040:	017d7840 	.word	0x017d7840

08004044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004048:	4b03      	ldr	r3, [pc, #12]	@ (8004058 <HAL_RCC_GetHCLKFreq+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000050 	.word	0x20000050

0800405c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004060:	f7ff fff0 	bl	8004044 <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b05      	ldr	r3, [pc, #20]	@ (800407c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0a9b      	lsrs	r3, r3, #10
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4903      	ldr	r1, [pc, #12]	@ (8004080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	0800cc10 	.word	0x0800cc10

08004084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004088:	f7ff ffdc 	bl	8004044 <HAL_RCC_GetHCLKFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	0b5b      	lsrs	r3, r3, #13
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4903      	ldr	r1, [pc, #12]	@ (80040a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	0800cc10 	.word	0x0800cc10

080040ac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <HAL_RCC_NMI_IRQHandler+0x20>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b8:	2b80      	cmp	r3, #128	@ 0x80
 80040ba:	d104      	bne.n	80040c6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80040bc:	f000 f80a 	bl	80040d4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80040c0:	4b03      	ldr	r3, [pc, #12]	@ (80040d0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80040c2:	2280      	movs	r2, #128	@ 0x80
 80040c4:	701a      	strb	r2, [r3, #0]
  }
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	4002380e 	.word	0x4002380e

080040d4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b082      	sub	sp, #8
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e041      	b.n	8004178 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d106      	bne.n	800410e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7fe fab1 	bl	8002670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	3304      	adds	r3, #4
 800411e:	4619      	mov	r1, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f000 fac1 	bl	80046a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e041      	b.n	8004216 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f839 	bl	800421e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f000 fa72 	bl	80046a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
	...

08004234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <HAL_TIM_PWM_Start+0x24>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e022      	b.n	800429e <HAL_TIM_PWM_Start+0x6a>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d109      	bne.n	8004272 <HAL_TIM_PWM_Start+0x3e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b01      	cmp	r3, #1
 8004268:	bf14      	ite	ne
 800426a:	2301      	movne	r3, #1
 800426c:	2300      	moveq	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	e015      	b.n	800429e <HAL_TIM_PWM_Start+0x6a>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d109      	bne.n	800428c <HAL_TIM_PWM_Start+0x58>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b01      	cmp	r3, #1
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	e008      	b.n	800429e <HAL_TIM_PWM_Start+0x6a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e068      	b.n	8004378 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_PWM_Start+0x82>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b4:	e013      	b.n	80042de <HAL_TIM_PWM_Start+0xaa>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_PWM_Start+0x92>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042c4:	e00b      	b.n	80042de <HAL_TIM_PWM_Start+0xaa>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_PWM_Start+0xa2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042d4:	e003      	b.n	80042de <HAL_TIM_PWM_Start+0xaa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fc90 	bl	8004c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a23      	ldr	r2, [pc, #140]	@ (8004380 <HAL_TIM_PWM_Start+0x14c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d107      	bne.n	8004306 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004304:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1d      	ldr	r2, [pc, #116]	@ (8004380 <HAL_TIM_PWM_Start+0x14c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <HAL_TIM_PWM_Start+0x10e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004318:	d013      	beq.n	8004342 <HAL_TIM_PWM_Start+0x10e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <HAL_TIM_PWM_Start+0x150>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <HAL_TIM_PWM_Start+0x10e>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a17      	ldr	r2, [pc, #92]	@ (8004388 <HAL_TIM_PWM_Start+0x154>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_TIM_PWM_Start+0x10e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a16      	ldr	r2, [pc, #88]	@ (800438c <HAL_TIM_PWM_Start+0x158>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_TIM_PWM_Start+0x10e>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a14      	ldr	r2, [pc, #80]	@ (8004390 <HAL_TIM_PWM_Start+0x15c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d111      	bne.n	8004366 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d010      	beq.n	8004376 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004364:	e007      	b.n	8004376 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0201 	orr.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40010000 	.word	0x40010000
 8004384:	40000400 	.word	0x40000400
 8004388:	40000800 	.word	0x40000800
 800438c:	40000c00 	.word	0x40000c00
 8004390:	40014000 	.word	0x40014000

08004394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e0ae      	b.n	8004510 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	f200 809f 	bhi.w	8004500 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043c2:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	08004501 	.word	0x08004501
 80043d0:	08004501 	.word	0x08004501
 80043d4:	08004501 	.word	0x08004501
 80043d8:	0800443d 	.word	0x0800443d
 80043dc:	08004501 	.word	0x08004501
 80043e0:	08004501 	.word	0x08004501
 80043e4:	08004501 	.word	0x08004501
 80043e8:	0800447f 	.word	0x0800447f
 80043ec:	08004501 	.word	0x08004501
 80043f0:	08004501 	.word	0x08004501
 80043f4:	08004501 	.word	0x08004501
 80043f8:	080044bf 	.word	0x080044bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f9dc 	bl	80047c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0208 	orr.w	r2, r2, #8
 8004416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0204 	bic.w	r2, r2, #4
 8004426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6999      	ldr	r1, [r3, #24]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	619a      	str	r2, [r3, #24]
      break;
 800443a:	e064      	b.n	8004506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fa22 	bl	800488c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6999      	ldr	r1, [r3, #24]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	021a      	lsls	r2, r3, #8
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	619a      	str	r2, [r3, #24]
      break;
 800447c:	e043      	b.n	8004506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fa6d 	bl	8004964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0208 	orr.w	r2, r2, #8
 8004498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0204 	bic.w	r2, r2, #4
 80044a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69d9      	ldr	r1, [r3, #28]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	61da      	str	r2, [r3, #28]
      break;
 80044bc:	e023      	b.n	8004506 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fab7 	bl	8004a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69d9      	ldr	r1, [r3, #28]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	021a      	lsls	r2, r3, #8
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	61da      	str	r2, [r3, #28]
      break;
 80044fe:	e002      	b.n	8004506 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	75fb      	strb	r3, [r7, #23]
      break;
 8004504:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800450e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_TIM_ConfigClockSource+0x1c>
 8004530:	2302      	movs	r3, #2
 8004532:	e0b4      	b.n	800469e <HAL_TIM_ConfigClockSource+0x186>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800455a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456c:	d03e      	beq.n	80045ec <HAL_TIM_ConfigClockSource+0xd4>
 800456e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004572:	f200 8087 	bhi.w	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 8004576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457a:	f000 8086 	beq.w	800468a <HAL_TIM_ConfigClockSource+0x172>
 800457e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004582:	d87f      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 8004584:	2b70      	cmp	r3, #112	@ 0x70
 8004586:	d01a      	beq.n	80045be <HAL_TIM_ConfigClockSource+0xa6>
 8004588:	2b70      	cmp	r3, #112	@ 0x70
 800458a:	d87b      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 800458c:	2b60      	cmp	r3, #96	@ 0x60
 800458e:	d050      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0x11a>
 8004590:	2b60      	cmp	r3, #96	@ 0x60
 8004592:	d877      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 8004594:	2b50      	cmp	r3, #80	@ 0x50
 8004596:	d03c      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0xfa>
 8004598:	2b50      	cmp	r3, #80	@ 0x50
 800459a:	d873      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 800459c:	2b40      	cmp	r3, #64	@ 0x40
 800459e:	d058      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x13a>
 80045a0:	2b40      	cmp	r3, #64	@ 0x40
 80045a2:	d86f      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b30      	cmp	r3, #48	@ 0x30
 80045a6:	d064      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045a8:	2b30      	cmp	r3, #48	@ 0x30
 80045aa:	d86b      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d060      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d867      	bhi.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d05c      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d05a      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	e062      	b.n	8004684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045ce:	f000 fafd 	bl	8004bcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	609a      	str	r2, [r3, #8]
      break;
 80045ea:	e04f      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045fc:	f000 fae6 	bl	8004bcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800460e:	609a      	str	r2, [r3, #8]
      break;
 8004610:	e03c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	461a      	mov	r2, r3
 8004620:	f000 fa5a 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2150      	movs	r1, #80	@ 0x50
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fab3 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 8004630:	e02c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800463e:	461a      	mov	r2, r3
 8004640:	f000 fa79 	bl	8004b36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2160      	movs	r1, #96	@ 0x60
 800464a:	4618      	mov	r0, r3
 800464c:	f000 faa3 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 8004650:	e01c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800465e:	461a      	mov	r2, r3
 8004660:	f000 fa3a 	bl	8004ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2140      	movs	r1, #64	@ 0x40
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fa93 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 8004670:	e00c      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4619      	mov	r1, r3
 800467c:	4610      	mov	r0, r2
 800467e:	f000 fa8a 	bl	8004b96 <TIM_ITRx_SetConfig>
      break;
 8004682:	e003      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	e000      	b.n	800468c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800468a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3a      	ldr	r2, [pc, #232]	@ (80047a4 <TIM_Base_SetConfig+0xfc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00f      	beq.n	80046e0 <TIM_Base_SetConfig+0x38>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0x38>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a37      	ldr	r2, [pc, #220]	@ (80047a8 <TIM_Base_SetConfig+0x100>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0x38>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a36      	ldr	r2, [pc, #216]	@ (80047ac <TIM_Base_SetConfig+0x104>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0x38>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a35      	ldr	r2, [pc, #212]	@ (80047b0 <TIM_Base_SetConfig+0x108>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d108      	bne.n	80046f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2b      	ldr	r2, [pc, #172]	@ (80047a4 <TIM_Base_SetConfig+0xfc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01b      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004700:	d017      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a28      	ldr	r2, [pc, #160]	@ (80047a8 <TIM_Base_SetConfig+0x100>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a27      	ldr	r2, [pc, #156]	@ (80047ac <TIM_Base_SetConfig+0x104>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00f      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a26      	ldr	r2, [pc, #152]	@ (80047b0 <TIM_Base_SetConfig+0x108>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a25      	ldr	r2, [pc, #148]	@ (80047b4 <TIM_Base_SetConfig+0x10c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a24      	ldr	r2, [pc, #144]	@ (80047b8 <TIM_Base_SetConfig+0x110>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0x8a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a23      	ldr	r2, [pc, #140]	@ (80047bc <TIM_Base_SetConfig+0x114>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0e      	ldr	r2, [pc, #56]	@ (80047a4 <TIM_Base_SetConfig+0xfc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d103      	bne.n	8004778 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d105      	bne.n	8004796 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]
  }
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40010000 	.word	0x40010000
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800
 80047b0:	40000c00 	.word	0x40000c00
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800

080047c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f023 0201 	bic.w	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f023 0302 	bic.w	r3, r3, #2
 8004808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a1c      	ldr	r2, [pc, #112]	@ (8004888 <TIM_OC1_SetConfig+0xc8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d10c      	bne.n	8004836 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0308 	bic.w	r3, r3, #8
 8004822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f023 0304 	bic.w	r3, r3, #4
 8004834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <TIM_OC1_SetConfig+0xc8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d111      	bne.n	8004862 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40010000 	.word	0x40010000

0800488c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f023 0210 	bic.w	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0320 	bic.w	r3, r3, #32
 80048d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004960 <TIM_OC2_SetConfig+0xd4>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d10d      	bne.n	8004908 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004906:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a15      	ldr	r2, [pc, #84]	@ (8004960 <TIM_OC2_SetConfig+0xd4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d113      	bne.n	8004938 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800491e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000

08004964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a34 <TIM_OC3_SetConfig+0xd0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d10d      	bne.n	80049de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a14      	ldr	r2, [pc, #80]	@ (8004a34 <TIM_OC3_SetConfig+0xd0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d113      	bne.n	8004a0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	621a      	str	r2, [r3, #32]
}
 8004a28:	bf00      	nop
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40010000 	.word	0x40010000

08004a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b087      	sub	sp, #28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	031b      	lsls	r3, r3, #12
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a10      	ldr	r2, [pc, #64]	@ (8004ad4 <TIM_OC4_SetConfig+0x9c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d109      	bne.n	8004aac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	019b      	lsls	r3, r3, #6
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000

08004ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f023 0201 	bic.w	r2, r3, #1
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 030a 	bic.w	r3, r3, #10
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	621a      	str	r2, [r3, #32]
}
 8004b2a:	bf00      	nop
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b087      	sub	sp, #28
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f023 0210 	bic.w	r2, r3, #16
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	031b      	lsls	r3, r3, #12
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f043 0307 	orr.w	r3, r3, #7
 8004bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	609a      	str	r2, [r3, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	021a      	lsls	r2, r3, #8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	609a      	str	r2, [r3, #8]
}
 8004c00:	bf00      	nop
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	2201      	movs	r2, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a1a      	ldr	r2, [r3, #32]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	401a      	ands	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	431a      	orrs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e050      	b.n	8004d12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	@ (8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d018      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbc:	d013      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a18      	ldr	r2, [pc, #96]	@ (8004d24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00e      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	@ (8004d28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a15      	ldr	r2, [pc, #84]	@ (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d004      	beq.n	8004ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a13      	ldr	r2, [pc, #76]	@ (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d10c      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000

08004d34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e03d      	b.n	8004dcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e042      	b.n	8004e70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fd fcf8 	bl	80027f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	@ 0x24
 8004e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fdbd 	bl	800599c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08a      	sub	sp, #40	@ 0x28
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d175      	bne.n	8004f84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_UART_Transmit+0x2c>
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e06e      	b.n	8004f86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2221      	movs	r2, #33	@ 0x21
 8004eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eb6:	f7fd fd7d 	bl	80029b4 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed0:	d108      	bne.n	8004ee4 <HAL_UART_Transmit+0x6c>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	e003      	b.n	8004eec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004eec:	e02e      	b.n	8004f4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2180      	movs	r1, #128	@ 0x80
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fb1f 	bl	800553c <UART_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e03a      	b.n	8004f86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10b      	bne.n	8004f2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	3302      	adds	r3, #2
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e007      	b.n	8004f3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	781a      	ldrb	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1cb      	bne.n	8004eee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2140      	movs	r1, #64	@ 0x40
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 faeb 	bl	800553c <UART_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e006      	b.n	8004f86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e000      	b.n	8004f86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
  }
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3720      	adds	r7, #32
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d112      	bne.n	8004fce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_UART_Receive_IT+0x26>
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e00b      	b.n	8004fd0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 fb12 	bl	80055ee <UART_Start_Receive_IT>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	e000      	b.n	8004fd0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b0ba      	sub	sp, #232	@ 0xe8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005004:	2300      	movs	r3, #0
 8005006:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10f      	bne.n	800503e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <HAL_UART_IRQHandler+0x66>
 800502a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fbf2 	bl	8005820 <UART_Receive_IT>
      return;
 800503c:	e25b      	b.n	80054f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800503e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 80de 	beq.w	8005204 <HAL_UART_IRQHandler+0x22c>
 8005048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005058:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80d1 	beq.w	8005204 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <HAL_UART_IRQHandler+0xae>
 800506e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507e:	f043 0201 	orr.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00b      	beq.n	80050aa <HAL_UART_IRQHandler+0xd2>
 8005092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	f043 0202 	orr.w	r2, r3, #2
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_UART_IRQHandler+0xf6>
 80050b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c6:	f043 0204 	orr.w	r2, r3, #4
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d011      	beq.n	80050fe <HAL_UART_IRQHandler+0x126>
 80050da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d105      	bne.n	80050f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f6:	f043 0208 	orr.w	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 81f2 	beq.w	80054ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_UART_IRQHandler+0x14e>
 8005114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fb7d 	bl	8005820 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005130:	2b40      	cmp	r3, #64	@ 0x40
 8005132:	bf0c      	ite	eq
 8005134:	2301      	moveq	r3, #1
 8005136:	2300      	movne	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_UART_IRQHandler+0x17a>
 800514a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d04f      	beq.n	80051f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa85 	bl	8005662 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005162:	2b40      	cmp	r3, #64	@ 0x40
 8005164:	d141      	bne.n	80051ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	3314      	adds	r3, #20
 800516c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800517c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3314      	adds	r3, #20
 800518e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005192:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005196:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800519e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1d9      	bne.n	8005166 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d013      	beq.n	80051e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051be:	4a7e      	ldr	r2, [pc, #504]	@ (80053b8 <HAL_UART_IRQHandler+0x3e0>)
 80051c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fe f807 	bl	80031da <HAL_DMA_Abort_IT>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051dc:	4610      	mov	r0, r2
 80051de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	e00e      	b.n	8005200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f994 	bl	8005510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e8:	e00a      	b.n	8005200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f990 	bl	8005510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051f0:	e006      	b.n	8005200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f98c 	bl	8005510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051fe:	e175      	b.n	80054ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005200:	bf00      	nop
    return;
 8005202:	e173      	b.n	80054ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	2b01      	cmp	r3, #1
 800520a:	f040 814f 	bne.w	80054ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800520e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8148 	beq.w	80054ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800521c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8141 	beq.w	80054ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800522a:	2300      	movs	r3, #0
 800522c:	60bb      	str	r3, [r7, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	f040 80b6 	bne.w	80053bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800525c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8145 	beq.w	80054f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800526a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800526e:	429a      	cmp	r2, r3
 8005270:	f080 813e 	bcs.w	80054f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800527a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005286:	f000 8088 	beq.w	800539a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	330c      	adds	r3, #12
 8005290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80052a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80052b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1d9      	bne.n	800528a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3314      	adds	r3, #20
 80052dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3314      	adds	r3, #20
 80052f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005302:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005306:	e841 2300 	strex	r3, r2, [r1]
 800530a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800530c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e1      	bne.n	80052d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3314      	adds	r3, #20
 8005318:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3314      	adds	r3, #20
 8005332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005336:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005338:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800533c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e3      	bne.n	8005312 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005368:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800536a:	f023 0310 	bic.w	r3, r3, #16
 800536e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800537c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800537e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005382:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800538a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e3      	bne.n	8005358 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005394:	4618      	mov	r0, r3
 8005396:	f7fd feb0 	bl	80030fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f8b7 	bl	8005524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053b6:	e09b      	b.n	80054f0 <HAL_UART_IRQHandler+0x518>
 80053b8:	08005729 	.word	0x08005729
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 808e 	beq.w	80054f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f000 8089 	beq.w	80054f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	330c      	adds	r3, #12
 80053e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005406:	647a      	str	r2, [r7, #68]	@ 0x44
 8005408:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800540c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e3      	bne.n	80053e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3314      	adds	r3, #20
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	623b      	str	r3, [r7, #32]
   return(result);
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3314      	adds	r3, #20
 800543a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800543e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005440:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e3      	bne.n	800541a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	e853 3f00 	ldrex	r3, [r3]
 800546e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0310 	bic.w	r3, r3, #16
 8005476:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	330c      	adds	r3, #12
 8005480:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005484:	61fa      	str	r2, [r7, #28]
 8005486:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	617b      	str	r3, [r7, #20]
   return(result);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e3      	bne.n	8005460 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800549e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054a2:	4619      	mov	r1, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 f83d 	bl	8005524 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054aa:	e023      	b.n	80054f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <HAL_UART_IRQHandler+0x4f4>
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f943 	bl	8005750 <UART_Transmit_IT>
    return;
 80054ca:	e014      	b.n	80054f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00e      	beq.n	80054f6 <HAL_UART_IRQHandler+0x51e>
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f983 	bl	80057f0 <UART_EndTransmit_IT>
    return;
 80054ea:	e004      	b.n	80054f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80054ec:	bf00      	nop
 80054ee:	e002      	b.n	80054f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80054f4:	bf00      	nop
  }
}
 80054f6:	37e8      	adds	r7, #232	@ 0xe8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800554c:	e03b      	b.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d037      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005556:	f7fd fa2d 	bl	80029b4 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	6a3a      	ldr	r2, [r7, #32]
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <UART_WaitOnFlagUntilTimeout+0x30>
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e03a      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d023      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2b80      	cmp	r3, #128	@ 0x80
 8005582:	d020      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	d01d      	beq.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b08      	cmp	r3, #8
 8005596:	d116      	bne.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f857 	bl	8005662 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2208      	movs	r2, #8
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e00f      	b.n	80055e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4013      	ands	r3, r2
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	bf0c      	ite	eq
 80055d6:	2301      	moveq	r3, #1
 80055d8:	2300      	movne	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d0b4      	beq.n	800554e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	4613      	mov	r3, r2
 80055fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	88fa      	ldrh	r2, [r7, #6]
 8005606:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2222      	movs	r2, #34	@ 0x22
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005632:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0220 	orr.w	r2, r2, #32
 8005652:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005662:	b480      	push	{r7}
 8005664:	b095      	sub	sp, #84	@ 0x54
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	330c      	adds	r3, #12
 8005670:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005680:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800568a:	643a      	str	r2, [r7, #64]	@ 0x40
 800568c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005690:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e5      	bne.n	800566a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e5      	bne.n	800569e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d119      	bne.n	800570e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f023 0310 	bic.w	r3, r3, #16
 80056f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056fa:	61ba      	str	r2, [r7, #24]
 80056fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fe:	6979      	ldr	r1, [r7, #20]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	613b      	str	r3, [r7, #16]
   return(result);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e5      	bne.n	80056da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800571c:	bf00      	nop
 800571e:	3754      	adds	r7, #84	@ 0x54
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff fee4 	bl	8005510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005748:	bf00      	nop
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b21      	cmp	r3, #33	@ 0x21
 8005762:	d13e      	bne.n	80057e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576c:	d114      	bne.n	8005798 <UART_Transmit_IT+0x48>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d110      	bne.n	8005798 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800578a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	1c9a      	adds	r2, r3, #2
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	621a      	str	r2, [r3, #32]
 8005796:	e008      	b.n	80057aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	1c59      	adds	r1, r3, #1
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6211      	str	r1, [r2, #32]
 80057a2:	781a      	ldrb	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4619      	mov	r1, r3
 80057b8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10f      	bne.n	80057de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e000      	b.n	80057e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057e2:	2302      	movs	r3, #2
  }
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005806:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7ff fe73 	bl	80054fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	@ 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b22      	cmp	r3, #34	@ 0x22
 8005832:	f040 80ae 	bne.w	8005992 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800583e:	d117      	bne.n	8005870 <UART_Receive_IT+0x50>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d113      	bne.n	8005870 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005848:	2300      	movs	r3, #0
 800584a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	b29b      	uxth	r3, r3
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	b29a      	uxth	r2, r3
 8005860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005862:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	629a      	str	r2, [r3, #40]	@ 0x28
 800586e:	e026      	b.n	80058be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005874:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005882:	d007      	beq.n	8005894 <UART_Receive_IT+0x74>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <UART_Receive_IT+0x82>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e008      	b.n	80058b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	4619      	mov	r1, r3
 80058cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d15d      	bne.n	800598e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0220 	bic.w	r2, r2, #32
 80058e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005914:	2b01      	cmp	r3, #1
 8005916:	d135      	bne.n	8005984 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	330c      	adds	r3, #12
 8005924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	613b      	str	r3, [r7, #16]
   return(result);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f023 0310 	bic.w	r3, r3, #16
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800593e:	623a      	str	r2, [r7, #32]
 8005940:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	69f9      	ldr	r1, [r7, #28]
 8005944:	6a3a      	ldr	r2, [r7, #32]
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	61bb      	str	r3, [r7, #24]
   return(result);
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e5      	bne.n	800591e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b10      	cmp	r3, #16
 800595e:	d10a      	bne.n	8005976 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff fdd1 	bl	8005524 <HAL_UARTEx_RxEventCallback>
 8005982:	e002      	b.n	800598a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fb fcb9 	bl	80012fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	e002      	b.n	8005994 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	e000      	b.n	8005994 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
  }
}
 8005994:	4618      	mov	r0, r3
 8005996:	3730      	adds	r7, #48	@ 0x30
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800599c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a0:	b0c0      	sub	sp, #256	@ 0x100
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	68d9      	ldr	r1, [r3, #12]
 80059ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	ea40 0301 	orr.w	r3, r0, r1
 80059c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	431a      	orrs	r2, r3
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059f4:	f021 010c 	bic.w	r1, r1, #12
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a02:	430b      	orrs	r3, r1
 8005a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a16:	6999      	ldr	r1, [r3, #24]
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	ea40 0301 	orr.w	r3, r0, r1
 8005a22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4b8f      	ldr	r3, [pc, #572]	@ (8005c68 <UART_SetConfig+0x2cc>)
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d005      	beq.n	8005a3c <UART_SetConfig+0xa0>
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b8d      	ldr	r3, [pc, #564]	@ (8005c6c <UART_SetConfig+0x2d0>)
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d104      	bne.n	8005a46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a3c:	f7fe fb22 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 8005a40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a44:	e003      	b.n	8005a4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a46:	f7fe fb09 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 8005a4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a58:	f040 810c 	bne.w	8005c74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a6e:	4622      	mov	r2, r4
 8005a70:	462b      	mov	r3, r5
 8005a72:	1891      	adds	r1, r2, r2
 8005a74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a76:	415b      	adcs	r3, r3
 8005a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a7e:	4621      	mov	r1, r4
 8005a80:	eb12 0801 	adds.w	r8, r2, r1
 8005a84:	4629      	mov	r1, r5
 8005a86:	eb43 0901 	adc.w	r9, r3, r1
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a9e:	4690      	mov	r8, r2
 8005aa0:	4699      	mov	r9, r3
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	eb18 0303 	adds.w	r3, r8, r3
 8005aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005aac:	462b      	mov	r3, r5
 8005aae:	eb49 0303 	adc.w	r3, r9, r3
 8005ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ac2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ac6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005aca:	460b      	mov	r3, r1
 8005acc:	18db      	adds	r3, r3, r3
 8005ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	eb42 0303 	adc.w	r3, r2, r3
 8005ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ad8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005adc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ae0:	f7fb f8da 	bl	8000c98 <__aeabi_uldivmod>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	4b61      	ldr	r3, [pc, #388]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005aea:	fba3 2302 	umull	r2, r3, r3, r2
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	011c      	lsls	r4, r3, #4
 8005af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005afc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b04:	4642      	mov	r2, r8
 8005b06:	464b      	mov	r3, r9
 8005b08:	1891      	adds	r1, r2, r2
 8005b0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b0c:	415b      	adcs	r3, r3
 8005b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b14:	4641      	mov	r1, r8
 8005b16:	eb12 0a01 	adds.w	sl, r2, r1
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b34:	4692      	mov	sl, r2
 8005b36:	469b      	mov	fp, r3
 8005b38:	4643      	mov	r3, r8
 8005b3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b42:	464b      	mov	r3, r9
 8005b44:	eb4b 0303 	adc.w	r3, fp, r3
 8005b48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b60:	460b      	mov	r3, r1
 8005b62:	18db      	adds	r3, r3, r3
 8005b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b66:	4613      	mov	r3, r2
 8005b68:	eb42 0303 	adc.w	r3, r2, r3
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b76:	f7fb f88f 	bl	8000c98 <__aeabi_uldivmod>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4b3b      	ldr	r3, [pc, #236]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005b82:	fba3 2301 	umull	r2, r3, r3, r1
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2264      	movs	r2, #100	@ 0x64
 8005b8a:	fb02 f303 	mul.w	r3, r2, r3
 8005b8e:	1acb      	subs	r3, r1, r3
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b96:	4b36      	ldr	r3, [pc, #216]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005b98:	fba3 2302 	umull	r2, r3, r3, r2
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ba4:	441c      	add	r4, r3
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bb8:	4642      	mov	r2, r8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	1891      	adds	r1, r2, r2
 8005bbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bc0:	415b      	adcs	r3, r3
 8005bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bc8:	4641      	mov	r1, r8
 8005bca:	1851      	adds	r1, r2, r1
 8005bcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bce:	4649      	mov	r1, r9
 8005bd0:	414b      	adcs	r3, r1
 8005bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bd4:	f04f 0200 	mov.w	r2, #0
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005be0:	4659      	mov	r1, fp
 8005be2:	00cb      	lsls	r3, r1, #3
 8005be4:	4651      	mov	r1, sl
 8005be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bea:	4651      	mov	r1, sl
 8005bec:	00ca      	lsls	r2, r1, #3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4642      	mov	r2, r8
 8005bf6:	189b      	adds	r3, r3, r2
 8005bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	460a      	mov	r2, r1
 8005c00:	eb42 0303 	adc.w	r3, r2, r3
 8005c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	18db      	adds	r3, r3, r3
 8005c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c22:	4613      	mov	r3, r2
 8005c24:	eb42 0303 	adc.w	r3, r2, r3
 8005c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c32:	f7fb f831 	bl	8000c98 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	2164      	movs	r1, #100	@ 0x64
 8005c44:	fb01 f303 	mul.w	r3, r1, r3
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	3332      	adds	r3, #50	@ 0x32
 8005c4e:	4a08      	ldr	r2, [pc, #32]	@ (8005c70 <UART_SetConfig+0x2d4>)
 8005c50:	fba2 2303 	umull	r2, r3, r2, r3
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	f003 0207 	and.w	r2, r3, #7
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4422      	add	r2, r4
 8005c62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c64:	e106      	b.n	8005e74 <UART_SetConfig+0x4d8>
 8005c66:	bf00      	nop
 8005c68:	40011000 	.word	0x40011000
 8005c6c:	40011400 	.word	0x40011400
 8005c70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c86:	4642      	mov	r2, r8
 8005c88:	464b      	mov	r3, r9
 8005c8a:	1891      	adds	r1, r2, r2
 8005c8c:	6239      	str	r1, [r7, #32]
 8005c8e:	415b      	adcs	r3, r3
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c96:	4641      	mov	r1, r8
 8005c98:	1854      	adds	r4, r2, r1
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	eb43 0501 	adc.w	r5, r3, r1
 8005ca0:	f04f 0200 	mov.w	r2, #0
 8005ca4:	f04f 0300 	mov.w	r3, #0
 8005ca8:	00eb      	lsls	r3, r5, #3
 8005caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cae:	00e2      	lsls	r2, r4, #3
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	18e3      	adds	r3, r4, r3
 8005cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	eb45 0303 	adc.w	r3, r5, r3
 8005cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cd6:	f04f 0200 	mov.w	r2, #0
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	008b      	lsls	r3, r1, #2
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cec:	4621      	mov	r1, r4
 8005cee:	008a      	lsls	r2, r1, #2
 8005cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cf4:	f7fa ffd0 	bl	8000c98 <__aeabi_uldivmod>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	4b60      	ldr	r3, [pc, #384]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	011c      	lsls	r4, r3, #4
 8005d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d18:	4642      	mov	r2, r8
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	1891      	adds	r1, r2, r2
 8005d1e:	61b9      	str	r1, [r7, #24]
 8005d20:	415b      	adcs	r3, r3
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d28:	4641      	mov	r1, r8
 8005d2a:	1851      	adds	r1, r2, r1
 8005d2c:	6139      	str	r1, [r7, #16]
 8005d2e:	4649      	mov	r1, r9
 8005d30:	414b      	adcs	r3, r1
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d40:	4659      	mov	r1, fp
 8005d42:	00cb      	lsls	r3, r1, #3
 8005d44:	4651      	mov	r1, sl
 8005d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	00ca      	lsls	r2, r1, #3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	4619      	mov	r1, r3
 8005d52:	4603      	mov	r3, r0
 8005d54:	4642      	mov	r2, r8
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	460a      	mov	r2, r1
 8005d60:	eb42 0303 	adc.w	r3, r2, r3
 8005d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d80:	4649      	mov	r1, r9
 8005d82:	008b      	lsls	r3, r1, #2
 8005d84:	4641      	mov	r1, r8
 8005d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	008a      	lsls	r2, r1, #2
 8005d8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d92:	f7fa ff81 	bl	8000c98 <__aeabi_uldivmod>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4b38      	ldr	r3, [pc, #224]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	2264      	movs	r2, #100	@ 0x64
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	1acb      	subs	r3, r1, r3
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	3332      	adds	r3, #50	@ 0x32
 8005db0:	4a33      	ldr	r2, [pc, #204]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dbc:	441c      	add	r4, r3
 8005dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005dcc:	4642      	mov	r2, r8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	1891      	adds	r1, r2, r2
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	415b      	adcs	r3, r3
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ddc:	4641      	mov	r1, r8
 8005dde:	1851      	adds	r1, r2, r1
 8005de0:	6039      	str	r1, [r7, #0]
 8005de2:	4649      	mov	r1, r9
 8005de4:	414b      	adcs	r3, r1
 8005de6:	607b      	str	r3, [r7, #4]
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005df4:	4659      	mov	r1, fp
 8005df6:	00cb      	lsls	r3, r1, #3
 8005df8:	4651      	mov	r1, sl
 8005dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dfe:	4651      	mov	r1, sl
 8005e00:	00ca      	lsls	r2, r1, #3
 8005e02:	4610      	mov	r0, r2
 8005e04:	4619      	mov	r1, r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	4642      	mov	r2, r8
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e0e:	464b      	mov	r3, r9
 8005e10:	460a      	mov	r2, r1
 8005e12:	eb42 0303 	adc.w	r3, r2, r3
 8005e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e22:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e30:	4649      	mov	r1, r9
 8005e32:	008b      	lsls	r3, r1, #2
 8005e34:	4641      	mov	r1, r8
 8005e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	008a      	lsls	r2, r1, #2
 8005e3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e42:	f7fa ff29 	bl	8000c98 <__aeabi_uldivmod>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e50:	095b      	lsrs	r3, r3, #5
 8005e52:	2164      	movs	r1, #100	@ 0x64
 8005e54:	fb01 f303 	mul.w	r3, r1, r3
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	3332      	adds	r3, #50	@ 0x32
 8005e5e:	4a08      	ldr	r2, [pc, #32]	@ (8005e80 <UART_SetConfig+0x4e4>)
 8005e60:	fba2 2303 	umull	r2, r3, r2, r3
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	f003 020f 	and.w	r2, r3, #15
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4422      	add	r2, r4
 8005e72:	609a      	str	r2, [r3, #8]
}
 8005e74:	bf00      	nop
 8005e76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e80:	51eb851f 	.word	0x51eb851f

08005e84 <atof>:
 8005e84:	2100      	movs	r1, #0
 8005e86:	f000 be09 	b.w	8006a9c <strtod>

08005e8a <sulp>:
 8005e8a:	b570      	push	{r4, r5, r6, lr}
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	460d      	mov	r5, r1
 8005e90:	ec45 4b10 	vmov	d0, r4, r5
 8005e94:	4616      	mov	r6, r2
 8005e96:	f003 fd33 	bl	8009900 <__ulp>
 8005e9a:	ec51 0b10 	vmov	r0, r1, d0
 8005e9e:	b17e      	cbz	r6, 8005ec0 <sulp+0x36>
 8005ea0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ea4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dd09      	ble.n	8005ec0 <sulp+0x36>
 8005eac:	051b      	lsls	r3, r3, #20
 8005eae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005eb2:	2400      	movs	r4, #0
 8005eb4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005eb8:	4622      	mov	r2, r4
 8005eba:	462b      	mov	r3, r5
 8005ebc:	f7fa fba4 	bl	8000608 <__aeabi_dmul>
 8005ec0:	ec41 0b10 	vmov	d0, r0, r1
 8005ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ec8 <_strtod_l>:
 8005ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ecc:	b09f      	sub	sp, #124	@ 0x7c
 8005ece:	460c      	mov	r4, r1
 8005ed0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	921a      	str	r2, [sp, #104]	@ 0x68
 8005ed6:	9005      	str	r0, [sp, #20]
 8005ed8:	f04f 0a00 	mov.w	sl, #0
 8005edc:	f04f 0b00 	mov.w	fp, #0
 8005ee0:	460a      	mov	r2, r1
 8005ee2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ee4:	7811      	ldrb	r1, [r2, #0]
 8005ee6:	292b      	cmp	r1, #43	@ 0x2b
 8005ee8:	d04a      	beq.n	8005f80 <_strtod_l+0xb8>
 8005eea:	d838      	bhi.n	8005f5e <_strtod_l+0x96>
 8005eec:	290d      	cmp	r1, #13
 8005eee:	d832      	bhi.n	8005f56 <_strtod_l+0x8e>
 8005ef0:	2908      	cmp	r1, #8
 8005ef2:	d832      	bhi.n	8005f5a <_strtod_l+0x92>
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	d03b      	beq.n	8005f70 <_strtod_l+0xa8>
 8005ef8:	2200      	movs	r2, #0
 8005efa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005efc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005efe:	782a      	ldrb	r2, [r5, #0]
 8005f00:	2a30      	cmp	r2, #48	@ 0x30
 8005f02:	f040 80b3 	bne.w	800606c <_strtod_l+0x1a4>
 8005f06:	786a      	ldrb	r2, [r5, #1]
 8005f08:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f0c:	2a58      	cmp	r2, #88	@ 0x58
 8005f0e:	d16e      	bne.n	8005fee <_strtod_l+0x126>
 8005f10:	9302      	str	r3, [sp, #8]
 8005f12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	ab1a      	add	r3, sp, #104	@ 0x68
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4a8e      	ldr	r2, [pc, #568]	@ (8006154 <_strtod_l+0x28c>)
 8005f1c:	9805      	ldr	r0, [sp, #20]
 8005f1e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005f20:	a919      	add	r1, sp, #100	@ 0x64
 8005f22:	f002 fddf 	bl	8008ae4 <__gethex>
 8005f26:	f010 060f 	ands.w	r6, r0, #15
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	d005      	beq.n	8005f3a <_strtod_l+0x72>
 8005f2e:	2e06      	cmp	r6, #6
 8005f30:	d128      	bne.n	8005f84 <_strtod_l+0xbc>
 8005f32:	3501      	adds	r5, #1
 8005f34:	2300      	movs	r3, #0
 8005f36:	9519      	str	r5, [sp, #100]	@ 0x64
 8005f38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f040 858e 	bne.w	8006a5e <_strtod_l+0xb96>
 8005f42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f44:	b1cb      	cbz	r3, 8005f7a <_strtod_l+0xb2>
 8005f46:	4652      	mov	r2, sl
 8005f48:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005f4c:	ec43 2b10 	vmov	d0, r2, r3
 8005f50:	b01f      	add	sp, #124	@ 0x7c
 8005f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f56:	2920      	cmp	r1, #32
 8005f58:	d1ce      	bne.n	8005ef8 <_strtod_l+0x30>
 8005f5a:	3201      	adds	r2, #1
 8005f5c:	e7c1      	b.n	8005ee2 <_strtod_l+0x1a>
 8005f5e:	292d      	cmp	r1, #45	@ 0x2d
 8005f60:	d1ca      	bne.n	8005ef8 <_strtod_l+0x30>
 8005f62:	2101      	movs	r1, #1
 8005f64:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005f66:	1c51      	adds	r1, r2, #1
 8005f68:	9119      	str	r1, [sp, #100]	@ 0x64
 8005f6a:	7852      	ldrb	r2, [r2, #1]
 8005f6c:	2a00      	cmp	r2, #0
 8005f6e:	d1c5      	bne.n	8005efc <_strtod_l+0x34>
 8005f70:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005f72:	9419      	str	r4, [sp, #100]	@ 0x64
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 8570 	bne.w	8006a5a <_strtod_l+0xb92>
 8005f7a:	4652      	mov	r2, sl
 8005f7c:	465b      	mov	r3, fp
 8005f7e:	e7e5      	b.n	8005f4c <_strtod_l+0x84>
 8005f80:	2100      	movs	r1, #0
 8005f82:	e7ef      	b.n	8005f64 <_strtod_l+0x9c>
 8005f84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005f86:	b13a      	cbz	r2, 8005f98 <_strtod_l+0xd0>
 8005f88:	2135      	movs	r1, #53	@ 0x35
 8005f8a:	a81c      	add	r0, sp, #112	@ 0x70
 8005f8c:	f003 fdb2 	bl	8009af4 <__copybits>
 8005f90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f92:	9805      	ldr	r0, [sp, #20]
 8005f94:	f003 f980 	bl	8009298 <_Bfree>
 8005f98:	3e01      	subs	r6, #1
 8005f9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005f9c:	2e04      	cmp	r6, #4
 8005f9e:	d806      	bhi.n	8005fae <_strtod_l+0xe6>
 8005fa0:	e8df f006 	tbb	[pc, r6]
 8005fa4:	201d0314 	.word	0x201d0314
 8005fa8:	14          	.byte	0x14
 8005fa9:	00          	.byte	0x00
 8005faa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005fae:	05e1      	lsls	r1, r4, #23
 8005fb0:	bf48      	it	mi
 8005fb2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005fb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005fba:	0d1b      	lsrs	r3, r3, #20
 8005fbc:	051b      	lsls	r3, r3, #20
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1bb      	bne.n	8005f3a <_strtod_l+0x72>
 8005fc2:	f001 fe29 	bl	8007c18 <__errno>
 8005fc6:	2322      	movs	r3, #34	@ 0x22
 8005fc8:	6003      	str	r3, [r0, #0]
 8005fca:	e7b6      	b.n	8005f3a <_strtod_l+0x72>
 8005fcc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005fd0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005fd4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005fd8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005fdc:	e7e7      	b.n	8005fae <_strtod_l+0xe6>
 8005fde:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800615c <_strtod_l+0x294>
 8005fe2:	e7e4      	b.n	8005fae <_strtod_l+0xe6>
 8005fe4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005fe8:	f04f 3aff 	mov.w	sl, #4294967295
 8005fec:	e7df      	b.n	8005fae <_strtod_l+0xe6>
 8005fee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b30      	cmp	r3, #48	@ 0x30
 8005ff8:	d0f9      	beq.n	8005fee <_strtod_l+0x126>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d09d      	beq.n	8005f3a <_strtod_l+0x72>
 8005ffe:	2301      	movs	r3, #1
 8006000:	9309      	str	r3, [sp, #36]	@ 0x24
 8006002:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006004:	930c      	str	r3, [sp, #48]	@ 0x30
 8006006:	2300      	movs	r3, #0
 8006008:	9308      	str	r3, [sp, #32]
 800600a:	930a      	str	r3, [sp, #40]	@ 0x28
 800600c:	461f      	mov	r7, r3
 800600e:	220a      	movs	r2, #10
 8006010:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006012:	7805      	ldrb	r5, [r0, #0]
 8006014:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006018:	b2d9      	uxtb	r1, r3
 800601a:	2909      	cmp	r1, #9
 800601c:	d928      	bls.n	8006070 <_strtod_l+0x1a8>
 800601e:	494e      	ldr	r1, [pc, #312]	@ (8006158 <_strtod_l+0x290>)
 8006020:	2201      	movs	r2, #1
 8006022:	f001 fd40 	bl	8007aa6 <strncmp>
 8006026:	2800      	cmp	r0, #0
 8006028:	d032      	beq.n	8006090 <_strtod_l+0x1c8>
 800602a:	2000      	movs	r0, #0
 800602c:	462a      	mov	r2, r5
 800602e:	4681      	mov	r9, r0
 8006030:	463d      	mov	r5, r7
 8006032:	4603      	mov	r3, r0
 8006034:	2a65      	cmp	r2, #101	@ 0x65
 8006036:	d001      	beq.n	800603c <_strtod_l+0x174>
 8006038:	2a45      	cmp	r2, #69	@ 0x45
 800603a:	d114      	bne.n	8006066 <_strtod_l+0x19e>
 800603c:	b91d      	cbnz	r5, 8006046 <_strtod_l+0x17e>
 800603e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006040:	4302      	orrs	r2, r0
 8006042:	d095      	beq.n	8005f70 <_strtod_l+0xa8>
 8006044:	2500      	movs	r5, #0
 8006046:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006048:	1c62      	adds	r2, r4, #1
 800604a:	9219      	str	r2, [sp, #100]	@ 0x64
 800604c:	7862      	ldrb	r2, [r4, #1]
 800604e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006050:	d077      	beq.n	8006142 <_strtod_l+0x27a>
 8006052:	2a2d      	cmp	r2, #45	@ 0x2d
 8006054:	d07b      	beq.n	800614e <_strtod_l+0x286>
 8006056:	f04f 0c00 	mov.w	ip, #0
 800605a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800605e:	2909      	cmp	r1, #9
 8006060:	f240 8082 	bls.w	8006168 <_strtod_l+0x2a0>
 8006064:	9419      	str	r4, [sp, #100]	@ 0x64
 8006066:	f04f 0800 	mov.w	r8, #0
 800606a:	e0a2      	b.n	80061b2 <_strtod_l+0x2ea>
 800606c:	2300      	movs	r3, #0
 800606e:	e7c7      	b.n	8006000 <_strtod_l+0x138>
 8006070:	2f08      	cmp	r7, #8
 8006072:	bfd5      	itete	le
 8006074:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006076:	9908      	ldrgt	r1, [sp, #32]
 8006078:	fb02 3301 	mlale	r3, r2, r1, r3
 800607c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006080:	f100 0001 	add.w	r0, r0, #1
 8006084:	bfd4      	ite	le
 8006086:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006088:	9308      	strgt	r3, [sp, #32]
 800608a:	3701      	adds	r7, #1
 800608c:	9019      	str	r0, [sp, #100]	@ 0x64
 800608e:	e7bf      	b.n	8006010 <_strtod_l+0x148>
 8006090:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	9219      	str	r2, [sp, #100]	@ 0x64
 8006096:	785a      	ldrb	r2, [r3, #1]
 8006098:	b37f      	cbz	r7, 80060fa <_strtod_l+0x232>
 800609a:	4681      	mov	r9, r0
 800609c:	463d      	mov	r5, r7
 800609e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80060a2:	2b09      	cmp	r3, #9
 80060a4:	d912      	bls.n	80060cc <_strtod_l+0x204>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e7c4      	b.n	8006034 <_strtod_l+0x16c>
 80060aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80060b0:	785a      	ldrb	r2, [r3, #1]
 80060b2:	3001      	adds	r0, #1
 80060b4:	2a30      	cmp	r2, #48	@ 0x30
 80060b6:	d0f8      	beq.n	80060aa <_strtod_l+0x1e2>
 80060b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80060bc:	2b08      	cmp	r3, #8
 80060be:	f200 84d3 	bhi.w	8006a68 <_strtod_l+0xba0>
 80060c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80060c6:	4681      	mov	r9, r0
 80060c8:	2000      	movs	r0, #0
 80060ca:	4605      	mov	r5, r0
 80060cc:	3a30      	subs	r2, #48	@ 0x30
 80060ce:	f100 0301 	add.w	r3, r0, #1
 80060d2:	d02a      	beq.n	800612a <_strtod_l+0x262>
 80060d4:	4499      	add	r9, r3
 80060d6:	eb00 0c05 	add.w	ip, r0, r5
 80060da:	462b      	mov	r3, r5
 80060dc:	210a      	movs	r1, #10
 80060de:	4563      	cmp	r3, ip
 80060e0:	d10d      	bne.n	80060fe <_strtod_l+0x236>
 80060e2:	1c69      	adds	r1, r5, #1
 80060e4:	4401      	add	r1, r0
 80060e6:	4428      	add	r0, r5
 80060e8:	2808      	cmp	r0, #8
 80060ea:	dc16      	bgt.n	800611a <_strtod_l+0x252>
 80060ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80060ee:	230a      	movs	r3, #10
 80060f0:	fb03 2300 	mla	r3, r3, r0, r2
 80060f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80060f6:	2300      	movs	r3, #0
 80060f8:	e018      	b.n	800612c <_strtod_l+0x264>
 80060fa:	4638      	mov	r0, r7
 80060fc:	e7da      	b.n	80060b4 <_strtod_l+0x1ec>
 80060fe:	2b08      	cmp	r3, #8
 8006100:	f103 0301 	add.w	r3, r3, #1
 8006104:	dc03      	bgt.n	800610e <_strtod_l+0x246>
 8006106:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006108:	434e      	muls	r6, r1
 800610a:	960a      	str	r6, [sp, #40]	@ 0x28
 800610c:	e7e7      	b.n	80060de <_strtod_l+0x216>
 800610e:	2b10      	cmp	r3, #16
 8006110:	bfde      	ittt	le
 8006112:	9e08      	ldrle	r6, [sp, #32]
 8006114:	434e      	mulle	r6, r1
 8006116:	9608      	strle	r6, [sp, #32]
 8006118:	e7e1      	b.n	80060de <_strtod_l+0x216>
 800611a:	280f      	cmp	r0, #15
 800611c:	dceb      	bgt.n	80060f6 <_strtod_l+0x22e>
 800611e:	9808      	ldr	r0, [sp, #32]
 8006120:	230a      	movs	r3, #10
 8006122:	fb03 2300 	mla	r3, r3, r0, r2
 8006126:	9308      	str	r3, [sp, #32]
 8006128:	e7e5      	b.n	80060f6 <_strtod_l+0x22e>
 800612a:	4629      	mov	r1, r5
 800612c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800612e:	1c50      	adds	r0, r2, #1
 8006130:	9019      	str	r0, [sp, #100]	@ 0x64
 8006132:	7852      	ldrb	r2, [r2, #1]
 8006134:	4618      	mov	r0, r3
 8006136:	460d      	mov	r5, r1
 8006138:	e7b1      	b.n	800609e <_strtod_l+0x1d6>
 800613a:	f04f 0900 	mov.w	r9, #0
 800613e:	2301      	movs	r3, #1
 8006140:	e77d      	b.n	800603e <_strtod_l+0x176>
 8006142:	f04f 0c00 	mov.w	ip, #0
 8006146:	1ca2      	adds	r2, r4, #2
 8006148:	9219      	str	r2, [sp, #100]	@ 0x64
 800614a:	78a2      	ldrb	r2, [r4, #2]
 800614c:	e785      	b.n	800605a <_strtod_l+0x192>
 800614e:	f04f 0c01 	mov.w	ip, #1
 8006152:	e7f8      	b.n	8006146 <_strtod_l+0x27e>
 8006154:	0800cc30 	.word	0x0800cc30
 8006158:	0800cc18 	.word	0x0800cc18
 800615c:	7ff00000 	.word	0x7ff00000
 8006160:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006162:	1c51      	adds	r1, r2, #1
 8006164:	9119      	str	r1, [sp, #100]	@ 0x64
 8006166:	7852      	ldrb	r2, [r2, #1]
 8006168:	2a30      	cmp	r2, #48	@ 0x30
 800616a:	d0f9      	beq.n	8006160 <_strtod_l+0x298>
 800616c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006170:	2908      	cmp	r1, #8
 8006172:	f63f af78 	bhi.w	8006066 <_strtod_l+0x19e>
 8006176:	3a30      	subs	r2, #48	@ 0x30
 8006178:	920e      	str	r2, [sp, #56]	@ 0x38
 800617a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800617c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800617e:	f04f 080a 	mov.w	r8, #10
 8006182:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006184:	1c56      	adds	r6, r2, #1
 8006186:	9619      	str	r6, [sp, #100]	@ 0x64
 8006188:	7852      	ldrb	r2, [r2, #1]
 800618a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800618e:	f1be 0f09 	cmp.w	lr, #9
 8006192:	d939      	bls.n	8006208 <_strtod_l+0x340>
 8006194:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006196:	1a76      	subs	r6, r6, r1
 8006198:	2e08      	cmp	r6, #8
 800619a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800619e:	dc03      	bgt.n	80061a8 <_strtod_l+0x2e0>
 80061a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80061a2:	4588      	cmp	r8, r1
 80061a4:	bfa8      	it	ge
 80061a6:	4688      	movge	r8, r1
 80061a8:	f1bc 0f00 	cmp.w	ip, #0
 80061ac:	d001      	beq.n	80061b2 <_strtod_l+0x2ea>
 80061ae:	f1c8 0800 	rsb	r8, r8, #0
 80061b2:	2d00      	cmp	r5, #0
 80061b4:	d14e      	bne.n	8006254 <_strtod_l+0x38c>
 80061b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061b8:	4308      	orrs	r0, r1
 80061ba:	f47f aebe 	bne.w	8005f3a <_strtod_l+0x72>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f47f aed6 	bne.w	8005f70 <_strtod_l+0xa8>
 80061c4:	2a69      	cmp	r2, #105	@ 0x69
 80061c6:	d028      	beq.n	800621a <_strtod_l+0x352>
 80061c8:	dc25      	bgt.n	8006216 <_strtod_l+0x34e>
 80061ca:	2a49      	cmp	r2, #73	@ 0x49
 80061cc:	d025      	beq.n	800621a <_strtod_l+0x352>
 80061ce:	2a4e      	cmp	r2, #78	@ 0x4e
 80061d0:	f47f aece 	bne.w	8005f70 <_strtod_l+0xa8>
 80061d4:	499b      	ldr	r1, [pc, #620]	@ (8006444 <_strtod_l+0x57c>)
 80061d6:	a819      	add	r0, sp, #100	@ 0x64
 80061d8:	f002 fea6 	bl	8008f28 <__match>
 80061dc:	2800      	cmp	r0, #0
 80061de:	f43f aec7 	beq.w	8005f70 <_strtod_l+0xa8>
 80061e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	2b28      	cmp	r3, #40	@ 0x28
 80061e8:	d12e      	bne.n	8006248 <_strtod_l+0x380>
 80061ea:	4997      	ldr	r1, [pc, #604]	@ (8006448 <_strtod_l+0x580>)
 80061ec:	aa1c      	add	r2, sp, #112	@ 0x70
 80061ee:	a819      	add	r0, sp, #100	@ 0x64
 80061f0:	f002 feae 	bl	8008f50 <__hexnan>
 80061f4:	2805      	cmp	r0, #5
 80061f6:	d127      	bne.n	8006248 <_strtod_l+0x380>
 80061f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80061fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80061fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006202:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006206:	e698      	b.n	8005f3a <_strtod_l+0x72>
 8006208:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800620a:	fb08 2101 	mla	r1, r8, r1, r2
 800620e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006212:	920e      	str	r2, [sp, #56]	@ 0x38
 8006214:	e7b5      	b.n	8006182 <_strtod_l+0x2ba>
 8006216:	2a6e      	cmp	r2, #110	@ 0x6e
 8006218:	e7da      	b.n	80061d0 <_strtod_l+0x308>
 800621a:	498c      	ldr	r1, [pc, #560]	@ (800644c <_strtod_l+0x584>)
 800621c:	a819      	add	r0, sp, #100	@ 0x64
 800621e:	f002 fe83 	bl	8008f28 <__match>
 8006222:	2800      	cmp	r0, #0
 8006224:	f43f aea4 	beq.w	8005f70 <_strtod_l+0xa8>
 8006228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800622a:	4989      	ldr	r1, [pc, #548]	@ (8006450 <_strtod_l+0x588>)
 800622c:	3b01      	subs	r3, #1
 800622e:	a819      	add	r0, sp, #100	@ 0x64
 8006230:	9319      	str	r3, [sp, #100]	@ 0x64
 8006232:	f002 fe79 	bl	8008f28 <__match>
 8006236:	b910      	cbnz	r0, 800623e <_strtod_l+0x376>
 8006238:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800623a:	3301      	adds	r3, #1
 800623c:	9319      	str	r3, [sp, #100]	@ 0x64
 800623e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006460 <_strtod_l+0x598>
 8006242:	f04f 0a00 	mov.w	sl, #0
 8006246:	e678      	b.n	8005f3a <_strtod_l+0x72>
 8006248:	4882      	ldr	r0, [pc, #520]	@ (8006454 <_strtod_l+0x58c>)
 800624a:	f001 fd21 	bl	8007c90 <nan>
 800624e:	ec5b ab10 	vmov	sl, fp, d0
 8006252:	e672      	b.n	8005f3a <_strtod_l+0x72>
 8006254:	eba8 0309 	sub.w	r3, r8, r9
 8006258:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800625a:	9309      	str	r3, [sp, #36]	@ 0x24
 800625c:	2f00      	cmp	r7, #0
 800625e:	bf08      	it	eq
 8006260:	462f      	moveq	r7, r5
 8006262:	2d10      	cmp	r5, #16
 8006264:	462c      	mov	r4, r5
 8006266:	bfa8      	it	ge
 8006268:	2410      	movge	r4, #16
 800626a:	f7fa f953 	bl	8000514 <__aeabi_ui2d>
 800626e:	2d09      	cmp	r5, #9
 8006270:	4682      	mov	sl, r0
 8006272:	468b      	mov	fp, r1
 8006274:	dc13      	bgt.n	800629e <_strtod_l+0x3d6>
 8006276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006278:	2b00      	cmp	r3, #0
 800627a:	f43f ae5e 	beq.w	8005f3a <_strtod_l+0x72>
 800627e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006280:	dd78      	ble.n	8006374 <_strtod_l+0x4ac>
 8006282:	2b16      	cmp	r3, #22
 8006284:	dc5f      	bgt.n	8006346 <_strtod_l+0x47e>
 8006286:	4974      	ldr	r1, [pc, #464]	@ (8006458 <_strtod_l+0x590>)
 8006288:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800628c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006290:	4652      	mov	r2, sl
 8006292:	465b      	mov	r3, fp
 8006294:	f7fa f9b8 	bl	8000608 <__aeabi_dmul>
 8006298:	4682      	mov	sl, r0
 800629a:	468b      	mov	fp, r1
 800629c:	e64d      	b.n	8005f3a <_strtod_l+0x72>
 800629e:	4b6e      	ldr	r3, [pc, #440]	@ (8006458 <_strtod_l+0x590>)
 80062a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80062a8:	f7fa f9ae 	bl	8000608 <__aeabi_dmul>
 80062ac:	4682      	mov	sl, r0
 80062ae:	9808      	ldr	r0, [sp, #32]
 80062b0:	468b      	mov	fp, r1
 80062b2:	f7fa f92f 	bl	8000514 <__aeabi_ui2d>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4650      	mov	r0, sl
 80062bc:	4659      	mov	r1, fp
 80062be:	f7f9 ffed 	bl	800029c <__adddf3>
 80062c2:	2d0f      	cmp	r5, #15
 80062c4:	4682      	mov	sl, r0
 80062c6:	468b      	mov	fp, r1
 80062c8:	ddd5      	ble.n	8006276 <_strtod_l+0x3ae>
 80062ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062cc:	1b2c      	subs	r4, r5, r4
 80062ce:	441c      	add	r4, r3
 80062d0:	2c00      	cmp	r4, #0
 80062d2:	f340 8096 	ble.w	8006402 <_strtod_l+0x53a>
 80062d6:	f014 030f 	ands.w	r3, r4, #15
 80062da:	d00a      	beq.n	80062f2 <_strtod_l+0x42a>
 80062dc:	495e      	ldr	r1, [pc, #376]	@ (8006458 <_strtod_l+0x590>)
 80062de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062e2:	4652      	mov	r2, sl
 80062e4:	465b      	mov	r3, fp
 80062e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ea:	f7fa f98d 	bl	8000608 <__aeabi_dmul>
 80062ee:	4682      	mov	sl, r0
 80062f0:	468b      	mov	fp, r1
 80062f2:	f034 040f 	bics.w	r4, r4, #15
 80062f6:	d073      	beq.n	80063e0 <_strtod_l+0x518>
 80062f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80062fc:	dd48      	ble.n	8006390 <_strtod_l+0x4c8>
 80062fe:	2400      	movs	r4, #0
 8006300:	46a0      	mov	r8, r4
 8006302:	940a      	str	r4, [sp, #40]	@ 0x28
 8006304:	46a1      	mov	r9, r4
 8006306:	9a05      	ldr	r2, [sp, #20]
 8006308:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006460 <_strtod_l+0x598>
 800630c:	2322      	movs	r3, #34	@ 0x22
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	f04f 0a00 	mov.w	sl, #0
 8006314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006316:	2b00      	cmp	r3, #0
 8006318:	f43f ae0f 	beq.w	8005f3a <_strtod_l+0x72>
 800631c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800631e:	9805      	ldr	r0, [sp, #20]
 8006320:	f002 ffba 	bl	8009298 <_Bfree>
 8006324:	9805      	ldr	r0, [sp, #20]
 8006326:	4649      	mov	r1, r9
 8006328:	f002 ffb6 	bl	8009298 <_Bfree>
 800632c:	9805      	ldr	r0, [sp, #20]
 800632e:	4641      	mov	r1, r8
 8006330:	f002 ffb2 	bl	8009298 <_Bfree>
 8006334:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006336:	9805      	ldr	r0, [sp, #20]
 8006338:	f002 ffae 	bl	8009298 <_Bfree>
 800633c:	9805      	ldr	r0, [sp, #20]
 800633e:	4621      	mov	r1, r4
 8006340:	f002 ffaa 	bl	8009298 <_Bfree>
 8006344:	e5f9      	b.n	8005f3a <_strtod_l+0x72>
 8006346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006348:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800634c:	4293      	cmp	r3, r2
 800634e:	dbbc      	blt.n	80062ca <_strtod_l+0x402>
 8006350:	4c41      	ldr	r4, [pc, #260]	@ (8006458 <_strtod_l+0x590>)
 8006352:	f1c5 050f 	rsb	r5, r5, #15
 8006356:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800635a:	4652      	mov	r2, sl
 800635c:	465b      	mov	r3, fp
 800635e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006362:	f7fa f951 	bl	8000608 <__aeabi_dmul>
 8006366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006368:	1b5d      	subs	r5, r3, r5
 800636a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800636e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006372:	e78f      	b.n	8006294 <_strtod_l+0x3cc>
 8006374:	3316      	adds	r3, #22
 8006376:	dba8      	blt.n	80062ca <_strtod_l+0x402>
 8006378:	4b37      	ldr	r3, [pc, #220]	@ (8006458 <_strtod_l+0x590>)
 800637a:	eba9 0808 	sub.w	r8, r9, r8
 800637e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006382:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006386:	4650      	mov	r0, sl
 8006388:	4659      	mov	r1, fp
 800638a:	f7fa fa67 	bl	800085c <__aeabi_ddiv>
 800638e:	e783      	b.n	8006298 <_strtod_l+0x3d0>
 8006390:	4b32      	ldr	r3, [pc, #200]	@ (800645c <_strtod_l+0x594>)
 8006392:	9308      	str	r3, [sp, #32]
 8006394:	2300      	movs	r3, #0
 8006396:	1124      	asrs	r4, r4, #4
 8006398:	4650      	mov	r0, sl
 800639a:	4659      	mov	r1, fp
 800639c:	461e      	mov	r6, r3
 800639e:	2c01      	cmp	r4, #1
 80063a0:	dc21      	bgt.n	80063e6 <_strtod_l+0x51e>
 80063a2:	b10b      	cbz	r3, 80063a8 <_strtod_l+0x4e0>
 80063a4:	4682      	mov	sl, r0
 80063a6:	468b      	mov	fp, r1
 80063a8:	492c      	ldr	r1, [pc, #176]	@ (800645c <_strtod_l+0x594>)
 80063aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80063ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80063b2:	4652      	mov	r2, sl
 80063b4:	465b      	mov	r3, fp
 80063b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063ba:	f7fa f925 	bl	8000608 <__aeabi_dmul>
 80063be:	4b28      	ldr	r3, [pc, #160]	@ (8006460 <_strtod_l+0x598>)
 80063c0:	460a      	mov	r2, r1
 80063c2:	400b      	ands	r3, r1
 80063c4:	4927      	ldr	r1, [pc, #156]	@ (8006464 <_strtod_l+0x59c>)
 80063c6:	428b      	cmp	r3, r1
 80063c8:	4682      	mov	sl, r0
 80063ca:	d898      	bhi.n	80062fe <_strtod_l+0x436>
 80063cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80063d0:	428b      	cmp	r3, r1
 80063d2:	bf86      	itte	hi
 80063d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006468 <_strtod_l+0x5a0>
 80063d8:	f04f 3aff 	movhi.w	sl, #4294967295
 80063dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80063e0:	2300      	movs	r3, #0
 80063e2:	9308      	str	r3, [sp, #32]
 80063e4:	e07a      	b.n	80064dc <_strtod_l+0x614>
 80063e6:	07e2      	lsls	r2, r4, #31
 80063e8:	d505      	bpl.n	80063f6 <_strtod_l+0x52e>
 80063ea:	9b08      	ldr	r3, [sp, #32]
 80063ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f0:	f7fa f90a 	bl	8000608 <__aeabi_dmul>
 80063f4:	2301      	movs	r3, #1
 80063f6:	9a08      	ldr	r2, [sp, #32]
 80063f8:	3208      	adds	r2, #8
 80063fa:	3601      	adds	r6, #1
 80063fc:	1064      	asrs	r4, r4, #1
 80063fe:	9208      	str	r2, [sp, #32]
 8006400:	e7cd      	b.n	800639e <_strtod_l+0x4d6>
 8006402:	d0ed      	beq.n	80063e0 <_strtod_l+0x518>
 8006404:	4264      	negs	r4, r4
 8006406:	f014 020f 	ands.w	r2, r4, #15
 800640a:	d00a      	beq.n	8006422 <_strtod_l+0x55a>
 800640c:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <_strtod_l+0x590>)
 800640e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006412:	4650      	mov	r0, sl
 8006414:	4659      	mov	r1, fp
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f7fa fa1f 	bl	800085c <__aeabi_ddiv>
 800641e:	4682      	mov	sl, r0
 8006420:	468b      	mov	fp, r1
 8006422:	1124      	asrs	r4, r4, #4
 8006424:	d0dc      	beq.n	80063e0 <_strtod_l+0x518>
 8006426:	2c1f      	cmp	r4, #31
 8006428:	dd20      	ble.n	800646c <_strtod_l+0x5a4>
 800642a:	2400      	movs	r4, #0
 800642c:	46a0      	mov	r8, r4
 800642e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006430:	46a1      	mov	r9, r4
 8006432:	9a05      	ldr	r2, [sp, #20]
 8006434:	2322      	movs	r3, #34	@ 0x22
 8006436:	f04f 0a00 	mov.w	sl, #0
 800643a:	f04f 0b00 	mov.w	fp, #0
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	e768      	b.n	8006314 <_strtod_l+0x44c>
 8006442:	bf00      	nop
 8006444:	0800cc7d 	.word	0x0800cc7d
 8006448:	0800cc1c 	.word	0x0800cc1c
 800644c:	0800cc75 	.word	0x0800cc75
 8006450:	0800cd5f 	.word	0x0800cd5f
 8006454:	0800cd5b 	.word	0x0800cd5b
 8006458:	0800cec0 	.word	0x0800cec0
 800645c:	0800ce98 	.word	0x0800ce98
 8006460:	7ff00000 	.word	0x7ff00000
 8006464:	7ca00000 	.word	0x7ca00000
 8006468:	7fefffff 	.word	0x7fefffff
 800646c:	f014 0310 	ands.w	r3, r4, #16
 8006470:	bf18      	it	ne
 8006472:	236a      	movne	r3, #106	@ 0x6a
 8006474:	4ea9      	ldr	r6, [pc, #676]	@ (800671c <_strtod_l+0x854>)
 8006476:	9308      	str	r3, [sp, #32]
 8006478:	4650      	mov	r0, sl
 800647a:	4659      	mov	r1, fp
 800647c:	2300      	movs	r3, #0
 800647e:	07e2      	lsls	r2, r4, #31
 8006480:	d504      	bpl.n	800648c <_strtod_l+0x5c4>
 8006482:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006486:	f7fa f8bf 	bl	8000608 <__aeabi_dmul>
 800648a:	2301      	movs	r3, #1
 800648c:	1064      	asrs	r4, r4, #1
 800648e:	f106 0608 	add.w	r6, r6, #8
 8006492:	d1f4      	bne.n	800647e <_strtod_l+0x5b6>
 8006494:	b10b      	cbz	r3, 800649a <_strtod_l+0x5d2>
 8006496:	4682      	mov	sl, r0
 8006498:	468b      	mov	fp, r1
 800649a:	9b08      	ldr	r3, [sp, #32]
 800649c:	b1b3      	cbz	r3, 80064cc <_strtod_l+0x604>
 800649e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80064a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	4659      	mov	r1, fp
 80064aa:	dd0f      	ble.n	80064cc <_strtod_l+0x604>
 80064ac:	2b1f      	cmp	r3, #31
 80064ae:	dd55      	ble.n	800655c <_strtod_l+0x694>
 80064b0:	2b34      	cmp	r3, #52	@ 0x34
 80064b2:	bfde      	ittt	le
 80064b4:	f04f 33ff 	movle.w	r3, #4294967295
 80064b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80064bc:	4093      	lslle	r3, r2
 80064be:	f04f 0a00 	mov.w	sl, #0
 80064c2:	bfcc      	ite	gt
 80064c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80064c8:	ea03 0b01 	andle.w	fp, r3, r1
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	4650      	mov	r0, sl
 80064d2:	4659      	mov	r1, fp
 80064d4:	f7fa fb00 	bl	8000ad8 <__aeabi_dcmpeq>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d1a6      	bne.n	800642a <_strtod_l+0x562>
 80064dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80064e2:	9805      	ldr	r0, [sp, #20]
 80064e4:	462b      	mov	r3, r5
 80064e6:	463a      	mov	r2, r7
 80064e8:	f002 ff3e 	bl	8009368 <__s2b>
 80064ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f43f af05 	beq.w	80062fe <_strtod_l+0x436>
 80064f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	eba9 0308 	sub.w	r3, r9, r8
 80064fc:	bfa8      	it	ge
 80064fe:	2300      	movge	r3, #0
 8006500:	9312      	str	r3, [sp, #72]	@ 0x48
 8006502:	2400      	movs	r4, #0
 8006504:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006508:	9316      	str	r3, [sp, #88]	@ 0x58
 800650a:	46a0      	mov	r8, r4
 800650c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800650e:	9805      	ldr	r0, [sp, #20]
 8006510:	6859      	ldr	r1, [r3, #4]
 8006512:	f002 fe81 	bl	8009218 <_Balloc>
 8006516:	4681      	mov	r9, r0
 8006518:	2800      	cmp	r0, #0
 800651a:	f43f aef4 	beq.w	8006306 <_strtod_l+0x43e>
 800651e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	3202      	adds	r2, #2
 8006524:	f103 010c 	add.w	r1, r3, #12
 8006528:	0092      	lsls	r2, r2, #2
 800652a:	300c      	adds	r0, #12
 800652c:	f001 fba1 	bl	8007c72 <memcpy>
 8006530:	ec4b ab10 	vmov	d0, sl, fp
 8006534:	9805      	ldr	r0, [sp, #20]
 8006536:	aa1c      	add	r2, sp, #112	@ 0x70
 8006538:	a91b      	add	r1, sp, #108	@ 0x6c
 800653a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800653e:	f003 fa4f 	bl	80099e0 <__d2b>
 8006542:	901a      	str	r0, [sp, #104]	@ 0x68
 8006544:	2800      	cmp	r0, #0
 8006546:	f43f aede 	beq.w	8006306 <_strtod_l+0x43e>
 800654a:	9805      	ldr	r0, [sp, #20]
 800654c:	2101      	movs	r1, #1
 800654e:	f002 ffa1 	bl	8009494 <__i2b>
 8006552:	4680      	mov	r8, r0
 8006554:	b948      	cbnz	r0, 800656a <_strtod_l+0x6a2>
 8006556:	f04f 0800 	mov.w	r8, #0
 800655a:	e6d4      	b.n	8006306 <_strtod_l+0x43e>
 800655c:	f04f 32ff 	mov.w	r2, #4294967295
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	ea03 0a0a 	and.w	sl, r3, sl
 8006568:	e7b0      	b.n	80064cc <_strtod_l+0x604>
 800656a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800656c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800656e:	2d00      	cmp	r5, #0
 8006570:	bfab      	itete	ge
 8006572:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006574:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006576:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006578:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800657a:	bfac      	ite	ge
 800657c:	18ef      	addge	r7, r5, r3
 800657e:	1b5e      	sublt	r6, r3, r5
 8006580:	9b08      	ldr	r3, [sp, #32]
 8006582:	1aed      	subs	r5, r5, r3
 8006584:	4415      	add	r5, r2
 8006586:	4b66      	ldr	r3, [pc, #408]	@ (8006720 <_strtod_l+0x858>)
 8006588:	3d01      	subs	r5, #1
 800658a:	429d      	cmp	r5, r3
 800658c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006590:	da50      	bge.n	8006634 <_strtod_l+0x76c>
 8006592:	1b5b      	subs	r3, r3, r5
 8006594:	2b1f      	cmp	r3, #31
 8006596:	eba2 0203 	sub.w	r2, r2, r3
 800659a:	f04f 0101 	mov.w	r1, #1
 800659e:	dc3d      	bgt.n	800661c <_strtod_l+0x754>
 80065a0:	fa01 f303 	lsl.w	r3, r1, r3
 80065a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065a6:	2300      	movs	r3, #0
 80065a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80065aa:	18bd      	adds	r5, r7, r2
 80065ac:	9b08      	ldr	r3, [sp, #32]
 80065ae:	42af      	cmp	r7, r5
 80065b0:	4416      	add	r6, r2
 80065b2:	441e      	add	r6, r3
 80065b4:	463b      	mov	r3, r7
 80065b6:	bfa8      	it	ge
 80065b8:	462b      	movge	r3, r5
 80065ba:	42b3      	cmp	r3, r6
 80065bc:	bfa8      	it	ge
 80065be:	4633      	movge	r3, r6
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bfc2      	ittt	gt
 80065c4:	1aed      	subgt	r5, r5, r3
 80065c6:	1af6      	subgt	r6, r6, r3
 80065c8:	1aff      	subgt	r7, r7, r3
 80065ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dd16      	ble.n	80065fe <_strtod_l+0x736>
 80065d0:	4641      	mov	r1, r8
 80065d2:	9805      	ldr	r0, [sp, #20]
 80065d4:	461a      	mov	r2, r3
 80065d6:	f003 f81d 	bl	8009614 <__pow5mult>
 80065da:	4680      	mov	r8, r0
 80065dc:	2800      	cmp	r0, #0
 80065de:	d0ba      	beq.n	8006556 <_strtod_l+0x68e>
 80065e0:	4601      	mov	r1, r0
 80065e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80065e4:	9805      	ldr	r0, [sp, #20]
 80065e6:	f002 ff6b 	bl	80094c0 <__multiply>
 80065ea:	900e      	str	r0, [sp, #56]	@ 0x38
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f43f ae8a 	beq.w	8006306 <_strtod_l+0x43e>
 80065f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065f4:	9805      	ldr	r0, [sp, #20]
 80065f6:	f002 fe4f 	bl	8009298 <_Bfree>
 80065fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80065fe:	2d00      	cmp	r5, #0
 8006600:	dc1d      	bgt.n	800663e <_strtod_l+0x776>
 8006602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006604:	2b00      	cmp	r3, #0
 8006606:	dd23      	ble.n	8006650 <_strtod_l+0x788>
 8006608:	4649      	mov	r1, r9
 800660a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800660c:	9805      	ldr	r0, [sp, #20]
 800660e:	f003 f801 	bl	8009614 <__pow5mult>
 8006612:	4681      	mov	r9, r0
 8006614:	b9e0      	cbnz	r0, 8006650 <_strtod_l+0x788>
 8006616:	f04f 0900 	mov.w	r9, #0
 800661a:	e674      	b.n	8006306 <_strtod_l+0x43e>
 800661c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006620:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006624:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006628:	35e2      	adds	r5, #226	@ 0xe2
 800662a:	fa01 f305 	lsl.w	r3, r1, r5
 800662e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006630:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006632:	e7ba      	b.n	80065aa <_strtod_l+0x6e2>
 8006634:	2300      	movs	r3, #0
 8006636:	9310      	str	r3, [sp, #64]	@ 0x40
 8006638:	2301      	movs	r3, #1
 800663a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800663c:	e7b5      	b.n	80065aa <_strtod_l+0x6e2>
 800663e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006640:	9805      	ldr	r0, [sp, #20]
 8006642:	462a      	mov	r2, r5
 8006644:	f003 f840 	bl	80096c8 <__lshift>
 8006648:	901a      	str	r0, [sp, #104]	@ 0x68
 800664a:	2800      	cmp	r0, #0
 800664c:	d1d9      	bne.n	8006602 <_strtod_l+0x73a>
 800664e:	e65a      	b.n	8006306 <_strtod_l+0x43e>
 8006650:	2e00      	cmp	r6, #0
 8006652:	dd07      	ble.n	8006664 <_strtod_l+0x79c>
 8006654:	4649      	mov	r1, r9
 8006656:	9805      	ldr	r0, [sp, #20]
 8006658:	4632      	mov	r2, r6
 800665a:	f003 f835 	bl	80096c8 <__lshift>
 800665e:	4681      	mov	r9, r0
 8006660:	2800      	cmp	r0, #0
 8006662:	d0d8      	beq.n	8006616 <_strtod_l+0x74e>
 8006664:	2f00      	cmp	r7, #0
 8006666:	dd08      	ble.n	800667a <_strtod_l+0x7b2>
 8006668:	4641      	mov	r1, r8
 800666a:	9805      	ldr	r0, [sp, #20]
 800666c:	463a      	mov	r2, r7
 800666e:	f003 f82b 	bl	80096c8 <__lshift>
 8006672:	4680      	mov	r8, r0
 8006674:	2800      	cmp	r0, #0
 8006676:	f43f ae46 	beq.w	8006306 <_strtod_l+0x43e>
 800667a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800667c:	9805      	ldr	r0, [sp, #20]
 800667e:	464a      	mov	r2, r9
 8006680:	f003 f8aa 	bl	80097d8 <__mdiff>
 8006684:	4604      	mov	r4, r0
 8006686:	2800      	cmp	r0, #0
 8006688:	f43f ae3d 	beq.w	8006306 <_strtod_l+0x43e>
 800668c:	68c3      	ldr	r3, [r0, #12]
 800668e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006690:	2300      	movs	r3, #0
 8006692:	60c3      	str	r3, [r0, #12]
 8006694:	4641      	mov	r1, r8
 8006696:	f003 f883 	bl	80097a0 <__mcmp>
 800669a:	2800      	cmp	r0, #0
 800669c:	da46      	bge.n	800672c <_strtod_l+0x864>
 800669e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066a0:	ea53 030a 	orrs.w	r3, r3, sl
 80066a4:	d16c      	bne.n	8006780 <_strtod_l+0x8b8>
 80066a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d168      	bne.n	8006780 <_strtod_l+0x8b8>
 80066ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066b2:	0d1b      	lsrs	r3, r3, #20
 80066b4:	051b      	lsls	r3, r3, #20
 80066b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80066ba:	d961      	bls.n	8006780 <_strtod_l+0x8b8>
 80066bc:	6963      	ldr	r3, [r4, #20]
 80066be:	b913      	cbnz	r3, 80066c6 <_strtod_l+0x7fe>
 80066c0:	6923      	ldr	r3, [r4, #16]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	dd5c      	ble.n	8006780 <_strtod_l+0x8b8>
 80066c6:	4621      	mov	r1, r4
 80066c8:	2201      	movs	r2, #1
 80066ca:	9805      	ldr	r0, [sp, #20]
 80066cc:	f002 fffc 	bl	80096c8 <__lshift>
 80066d0:	4641      	mov	r1, r8
 80066d2:	4604      	mov	r4, r0
 80066d4:	f003 f864 	bl	80097a0 <__mcmp>
 80066d8:	2800      	cmp	r0, #0
 80066da:	dd51      	ble.n	8006780 <_strtod_l+0x8b8>
 80066dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80066e0:	9a08      	ldr	r2, [sp, #32]
 80066e2:	0d1b      	lsrs	r3, r3, #20
 80066e4:	051b      	lsls	r3, r3, #20
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	d06b      	beq.n	80067c2 <_strtod_l+0x8fa>
 80066ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80066ee:	d868      	bhi.n	80067c2 <_strtod_l+0x8fa>
 80066f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80066f4:	f67f ae9d 	bls.w	8006432 <_strtod_l+0x56a>
 80066f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <_strtod_l+0x85c>)
 80066fa:	4650      	mov	r0, sl
 80066fc:	4659      	mov	r1, fp
 80066fe:	2200      	movs	r2, #0
 8006700:	f7f9 ff82 	bl	8000608 <__aeabi_dmul>
 8006704:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <_strtod_l+0x860>)
 8006706:	400b      	ands	r3, r1
 8006708:	4682      	mov	sl, r0
 800670a:	468b      	mov	fp, r1
 800670c:	2b00      	cmp	r3, #0
 800670e:	f47f ae05 	bne.w	800631c <_strtod_l+0x454>
 8006712:	9a05      	ldr	r2, [sp, #20]
 8006714:	2322      	movs	r3, #34	@ 0x22
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	e600      	b.n	800631c <_strtod_l+0x454>
 800671a:	bf00      	nop
 800671c:	0800cc48 	.word	0x0800cc48
 8006720:	fffffc02 	.word	0xfffffc02
 8006724:	39500000 	.word	0x39500000
 8006728:	7ff00000 	.word	0x7ff00000
 800672c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006730:	d165      	bne.n	80067fe <_strtod_l+0x936>
 8006732:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006738:	b35a      	cbz	r2, 8006792 <_strtod_l+0x8ca>
 800673a:	4a9f      	ldr	r2, [pc, #636]	@ (80069b8 <_strtod_l+0xaf0>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d12b      	bne.n	8006798 <_strtod_l+0x8d0>
 8006740:	9b08      	ldr	r3, [sp, #32]
 8006742:	4651      	mov	r1, sl
 8006744:	b303      	cbz	r3, 8006788 <_strtod_l+0x8c0>
 8006746:	4b9d      	ldr	r3, [pc, #628]	@ (80069bc <_strtod_l+0xaf4>)
 8006748:	465a      	mov	r2, fp
 800674a:	4013      	ands	r3, r2
 800674c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006750:	f04f 32ff 	mov.w	r2, #4294967295
 8006754:	d81b      	bhi.n	800678e <_strtod_l+0x8c6>
 8006756:	0d1b      	lsrs	r3, r3, #20
 8006758:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800675c:	fa02 f303 	lsl.w	r3, r2, r3
 8006760:	4299      	cmp	r1, r3
 8006762:	d119      	bne.n	8006798 <_strtod_l+0x8d0>
 8006764:	4b96      	ldr	r3, [pc, #600]	@ (80069c0 <_strtod_l+0xaf8>)
 8006766:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006768:	429a      	cmp	r2, r3
 800676a:	d102      	bne.n	8006772 <_strtod_l+0x8aa>
 800676c:	3101      	adds	r1, #1
 800676e:	f43f adca 	beq.w	8006306 <_strtod_l+0x43e>
 8006772:	4b92      	ldr	r3, [pc, #584]	@ (80069bc <_strtod_l+0xaf4>)
 8006774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006776:	401a      	ands	r2, r3
 8006778:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800677c:	f04f 0a00 	mov.w	sl, #0
 8006780:	9b08      	ldr	r3, [sp, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1b8      	bne.n	80066f8 <_strtod_l+0x830>
 8006786:	e5c9      	b.n	800631c <_strtod_l+0x454>
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	e7e8      	b.n	8006760 <_strtod_l+0x898>
 800678e:	4613      	mov	r3, r2
 8006790:	e7e6      	b.n	8006760 <_strtod_l+0x898>
 8006792:	ea53 030a 	orrs.w	r3, r3, sl
 8006796:	d0a1      	beq.n	80066dc <_strtod_l+0x814>
 8006798:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800679a:	b1db      	cbz	r3, 80067d4 <_strtod_l+0x90c>
 800679c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800679e:	4213      	tst	r3, r2
 80067a0:	d0ee      	beq.n	8006780 <_strtod_l+0x8b8>
 80067a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067a4:	9a08      	ldr	r2, [sp, #32]
 80067a6:	4650      	mov	r0, sl
 80067a8:	4659      	mov	r1, fp
 80067aa:	b1bb      	cbz	r3, 80067dc <_strtod_l+0x914>
 80067ac:	f7ff fb6d 	bl	8005e8a <sulp>
 80067b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067b4:	ec53 2b10 	vmov	r2, r3, d0
 80067b8:	f7f9 fd70 	bl	800029c <__adddf3>
 80067bc:	4682      	mov	sl, r0
 80067be:	468b      	mov	fp, r1
 80067c0:	e7de      	b.n	8006780 <_strtod_l+0x8b8>
 80067c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80067c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80067ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80067ce:	f04f 3aff 	mov.w	sl, #4294967295
 80067d2:	e7d5      	b.n	8006780 <_strtod_l+0x8b8>
 80067d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067d6:	ea13 0f0a 	tst.w	r3, sl
 80067da:	e7e1      	b.n	80067a0 <_strtod_l+0x8d8>
 80067dc:	f7ff fb55 	bl	8005e8a <sulp>
 80067e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067e4:	ec53 2b10 	vmov	r2, r3, d0
 80067e8:	f7f9 fd56 	bl	8000298 <__aeabi_dsub>
 80067ec:	2200      	movs	r2, #0
 80067ee:	2300      	movs	r3, #0
 80067f0:	4682      	mov	sl, r0
 80067f2:	468b      	mov	fp, r1
 80067f4:	f7fa f970 	bl	8000ad8 <__aeabi_dcmpeq>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d0c1      	beq.n	8006780 <_strtod_l+0x8b8>
 80067fc:	e619      	b.n	8006432 <_strtod_l+0x56a>
 80067fe:	4641      	mov	r1, r8
 8006800:	4620      	mov	r0, r4
 8006802:	f003 f945 	bl	8009a90 <__ratio>
 8006806:	ec57 6b10 	vmov	r6, r7, d0
 800680a:	2200      	movs	r2, #0
 800680c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006810:	4630      	mov	r0, r6
 8006812:	4639      	mov	r1, r7
 8006814:	f7fa f974 	bl	8000b00 <__aeabi_dcmple>
 8006818:	2800      	cmp	r0, #0
 800681a:	d06f      	beq.n	80068fc <_strtod_l+0xa34>
 800681c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d17a      	bne.n	8006918 <_strtod_l+0xa50>
 8006822:	f1ba 0f00 	cmp.w	sl, #0
 8006826:	d158      	bne.n	80068da <_strtod_l+0xa12>
 8006828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800682a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800682e:	2b00      	cmp	r3, #0
 8006830:	d15a      	bne.n	80068e8 <_strtod_l+0xa20>
 8006832:	4b64      	ldr	r3, [pc, #400]	@ (80069c4 <_strtod_l+0xafc>)
 8006834:	2200      	movs	r2, #0
 8006836:	4630      	mov	r0, r6
 8006838:	4639      	mov	r1, r7
 800683a:	f7fa f957 	bl	8000aec <__aeabi_dcmplt>
 800683e:	2800      	cmp	r0, #0
 8006840:	d159      	bne.n	80068f6 <_strtod_l+0xa2e>
 8006842:	4630      	mov	r0, r6
 8006844:	4639      	mov	r1, r7
 8006846:	4b60      	ldr	r3, [pc, #384]	@ (80069c8 <_strtod_l+0xb00>)
 8006848:	2200      	movs	r2, #0
 800684a:	f7f9 fedd 	bl	8000608 <__aeabi_dmul>
 800684e:	4606      	mov	r6, r0
 8006850:	460f      	mov	r7, r1
 8006852:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006856:	9606      	str	r6, [sp, #24]
 8006858:	9307      	str	r3, [sp, #28]
 800685a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800685e:	4d57      	ldr	r5, [pc, #348]	@ (80069bc <_strtod_l+0xaf4>)
 8006860:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006866:	401d      	ands	r5, r3
 8006868:	4b58      	ldr	r3, [pc, #352]	@ (80069cc <_strtod_l+0xb04>)
 800686a:	429d      	cmp	r5, r3
 800686c:	f040 80b2 	bne.w	80069d4 <_strtod_l+0xb0c>
 8006870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006872:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006876:	ec4b ab10 	vmov	d0, sl, fp
 800687a:	f003 f841 	bl	8009900 <__ulp>
 800687e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006882:	ec51 0b10 	vmov	r0, r1, d0
 8006886:	f7f9 febf 	bl	8000608 <__aeabi_dmul>
 800688a:	4652      	mov	r2, sl
 800688c:	465b      	mov	r3, fp
 800688e:	f7f9 fd05 	bl	800029c <__adddf3>
 8006892:	460b      	mov	r3, r1
 8006894:	4949      	ldr	r1, [pc, #292]	@ (80069bc <_strtod_l+0xaf4>)
 8006896:	4a4e      	ldr	r2, [pc, #312]	@ (80069d0 <_strtod_l+0xb08>)
 8006898:	4019      	ands	r1, r3
 800689a:	4291      	cmp	r1, r2
 800689c:	4682      	mov	sl, r0
 800689e:	d942      	bls.n	8006926 <_strtod_l+0xa5e>
 80068a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068a2:	4b47      	ldr	r3, [pc, #284]	@ (80069c0 <_strtod_l+0xaf8>)
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d103      	bne.n	80068b0 <_strtod_l+0x9e8>
 80068a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068aa:	3301      	adds	r3, #1
 80068ac:	f43f ad2b 	beq.w	8006306 <_strtod_l+0x43e>
 80068b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80069c0 <_strtod_l+0xaf8>
 80068b4:	f04f 3aff 	mov.w	sl, #4294967295
 80068b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80068ba:	9805      	ldr	r0, [sp, #20]
 80068bc:	f002 fcec 	bl	8009298 <_Bfree>
 80068c0:	9805      	ldr	r0, [sp, #20]
 80068c2:	4649      	mov	r1, r9
 80068c4:	f002 fce8 	bl	8009298 <_Bfree>
 80068c8:	9805      	ldr	r0, [sp, #20]
 80068ca:	4641      	mov	r1, r8
 80068cc:	f002 fce4 	bl	8009298 <_Bfree>
 80068d0:	9805      	ldr	r0, [sp, #20]
 80068d2:	4621      	mov	r1, r4
 80068d4:	f002 fce0 	bl	8009298 <_Bfree>
 80068d8:	e618      	b.n	800650c <_strtod_l+0x644>
 80068da:	f1ba 0f01 	cmp.w	sl, #1
 80068de:	d103      	bne.n	80068e8 <_strtod_l+0xa20>
 80068e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f43f ada5 	beq.w	8006432 <_strtod_l+0x56a>
 80068e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006998 <_strtod_l+0xad0>
 80068ec:	4f35      	ldr	r7, [pc, #212]	@ (80069c4 <_strtod_l+0xafc>)
 80068ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80068f2:	2600      	movs	r6, #0
 80068f4:	e7b1      	b.n	800685a <_strtod_l+0x992>
 80068f6:	4f34      	ldr	r7, [pc, #208]	@ (80069c8 <_strtod_l+0xb00>)
 80068f8:	2600      	movs	r6, #0
 80068fa:	e7aa      	b.n	8006852 <_strtod_l+0x98a>
 80068fc:	4b32      	ldr	r3, [pc, #200]	@ (80069c8 <_strtod_l+0xb00>)
 80068fe:	4630      	mov	r0, r6
 8006900:	4639      	mov	r1, r7
 8006902:	2200      	movs	r2, #0
 8006904:	f7f9 fe80 	bl	8000608 <__aeabi_dmul>
 8006908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800690a:	4606      	mov	r6, r0
 800690c:	460f      	mov	r7, r1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d09f      	beq.n	8006852 <_strtod_l+0x98a>
 8006912:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006916:	e7a0      	b.n	800685a <_strtod_l+0x992>
 8006918:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80069a0 <_strtod_l+0xad8>
 800691c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006920:	ec57 6b17 	vmov	r6, r7, d7
 8006924:	e799      	b.n	800685a <_strtod_l+0x992>
 8006926:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800692a:	9b08      	ldr	r3, [sp, #32]
 800692c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1c1      	bne.n	80068b8 <_strtod_l+0x9f0>
 8006934:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006938:	0d1b      	lsrs	r3, r3, #20
 800693a:	051b      	lsls	r3, r3, #20
 800693c:	429d      	cmp	r5, r3
 800693e:	d1bb      	bne.n	80068b8 <_strtod_l+0x9f0>
 8006940:	4630      	mov	r0, r6
 8006942:	4639      	mov	r1, r7
 8006944:	f7fa f9c0 	bl	8000cc8 <__aeabi_d2lz>
 8006948:	f7f9 fe30 	bl	80005ac <__aeabi_l2d>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4630      	mov	r0, r6
 8006952:	4639      	mov	r1, r7
 8006954:	f7f9 fca0 	bl	8000298 <__aeabi_dsub>
 8006958:	460b      	mov	r3, r1
 800695a:	4602      	mov	r2, r0
 800695c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006960:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006966:	ea46 060a 	orr.w	r6, r6, sl
 800696a:	431e      	orrs	r6, r3
 800696c:	d06f      	beq.n	8006a4e <_strtod_l+0xb86>
 800696e:	a30e      	add	r3, pc, #56	@ (adr r3, 80069a8 <_strtod_l+0xae0>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f7fa f8ba 	bl	8000aec <__aeabi_dcmplt>
 8006978:	2800      	cmp	r0, #0
 800697a:	f47f accf 	bne.w	800631c <_strtod_l+0x454>
 800697e:	a30c      	add	r3, pc, #48	@ (adr r3, 80069b0 <_strtod_l+0xae8>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006988:	f7fa f8ce 	bl	8000b28 <__aeabi_dcmpgt>
 800698c:	2800      	cmp	r0, #0
 800698e:	d093      	beq.n	80068b8 <_strtod_l+0x9f0>
 8006990:	e4c4      	b.n	800631c <_strtod_l+0x454>
 8006992:	bf00      	nop
 8006994:	f3af 8000 	nop.w
 8006998:	00000000 	.word	0x00000000
 800699c:	bff00000 	.word	0xbff00000
 80069a0:	00000000 	.word	0x00000000
 80069a4:	3ff00000 	.word	0x3ff00000
 80069a8:	94a03595 	.word	0x94a03595
 80069ac:	3fdfffff 	.word	0x3fdfffff
 80069b0:	35afe535 	.word	0x35afe535
 80069b4:	3fe00000 	.word	0x3fe00000
 80069b8:	000fffff 	.word	0x000fffff
 80069bc:	7ff00000 	.word	0x7ff00000
 80069c0:	7fefffff 	.word	0x7fefffff
 80069c4:	3ff00000 	.word	0x3ff00000
 80069c8:	3fe00000 	.word	0x3fe00000
 80069cc:	7fe00000 	.word	0x7fe00000
 80069d0:	7c9fffff 	.word	0x7c9fffff
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	b323      	cbz	r3, 8006a22 <_strtod_l+0xb5a>
 80069d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80069dc:	d821      	bhi.n	8006a22 <_strtod_l+0xb5a>
 80069de:	a328      	add	r3, pc, #160	@ (adr r3, 8006a80 <_strtod_l+0xbb8>)
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	4630      	mov	r0, r6
 80069e6:	4639      	mov	r1, r7
 80069e8:	f7fa f88a 	bl	8000b00 <__aeabi_dcmple>
 80069ec:	b1a0      	cbz	r0, 8006a18 <_strtod_l+0xb50>
 80069ee:	4639      	mov	r1, r7
 80069f0:	4630      	mov	r0, r6
 80069f2:	f7fa f8e1 	bl	8000bb8 <__aeabi_d2uiz>
 80069f6:	2801      	cmp	r0, #1
 80069f8:	bf38      	it	cc
 80069fa:	2001      	movcc	r0, #1
 80069fc:	f7f9 fd8a 	bl	8000514 <__aeabi_ui2d>
 8006a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	b9fb      	cbnz	r3, 8006a48 <_strtod_l+0xb80>
 8006a08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a0c:	9014      	str	r0, [sp, #80]	@ 0x50
 8006a0e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006a14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006a18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006a1e:	1b5b      	subs	r3, r3, r5
 8006a20:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006a2a:	f002 ff69 	bl	8009900 <__ulp>
 8006a2e:	4650      	mov	r0, sl
 8006a30:	ec53 2b10 	vmov	r2, r3, d0
 8006a34:	4659      	mov	r1, fp
 8006a36:	f7f9 fde7 	bl	8000608 <__aeabi_dmul>
 8006a3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006a3e:	f7f9 fc2d 	bl	800029c <__adddf3>
 8006a42:	4682      	mov	sl, r0
 8006a44:	468b      	mov	fp, r1
 8006a46:	e770      	b.n	800692a <_strtod_l+0xa62>
 8006a48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006a4c:	e7e0      	b.n	8006a10 <_strtod_l+0xb48>
 8006a4e:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a88 <_strtod_l+0xbc0>)
 8006a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a54:	f7fa f84a 	bl	8000aec <__aeabi_dcmplt>
 8006a58:	e798      	b.n	800698c <_strtod_l+0xac4>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006a60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	f7ff ba6d 	b.w	8005f42 <_strtod_l+0x7a>
 8006a68:	2a65      	cmp	r2, #101	@ 0x65
 8006a6a:	f43f ab66 	beq.w	800613a <_strtod_l+0x272>
 8006a6e:	2a45      	cmp	r2, #69	@ 0x45
 8006a70:	f43f ab63 	beq.w	800613a <_strtod_l+0x272>
 8006a74:	2301      	movs	r3, #1
 8006a76:	f7ff bb9e 	b.w	80061b6 <_strtod_l+0x2ee>
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w
 8006a80:	ffc00000 	.word	0xffc00000
 8006a84:	41dfffff 	.word	0x41dfffff
 8006a88:	94a03595 	.word	0x94a03595
 8006a8c:	3fcfffff 	.word	0x3fcfffff

08006a90 <_strtod_r>:
 8006a90:	4b01      	ldr	r3, [pc, #4]	@ (8006a98 <_strtod_r+0x8>)
 8006a92:	f7ff ba19 	b.w	8005ec8 <_strtod_l>
 8006a96:	bf00      	nop
 8006a98:	20000068 	.word	0x20000068

08006a9c <strtod>:
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	4802      	ldr	r0, [pc, #8]	@ (8006aac <strtod+0x10>)
 8006aa2:	4b03      	ldr	r3, [pc, #12]	@ (8006ab0 <strtod+0x14>)
 8006aa4:	6800      	ldr	r0, [r0, #0]
 8006aa6:	f7ff ba0f 	b.w	8005ec8 <_strtod_l>
 8006aaa:	bf00      	nop
 8006aac:	200001d4 	.word	0x200001d4
 8006ab0:	20000068 	.word	0x20000068

08006ab4 <__cvt>:
 8006ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	ec57 6b10 	vmov	r6, r7, d0
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	460c      	mov	r4, r1
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	bfbb      	ittet	lt
 8006ac6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006aca:	461f      	movlt	r7, r3
 8006acc:	2300      	movge	r3, #0
 8006ace:	232d      	movlt	r3, #45	@ 0x2d
 8006ad0:	700b      	strb	r3, [r1, #0]
 8006ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ad4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006ad8:	4691      	mov	r9, r2
 8006ada:	f023 0820 	bic.w	r8, r3, #32
 8006ade:	bfbc      	itt	lt
 8006ae0:	4632      	movlt	r2, r6
 8006ae2:	4616      	movlt	r6, r2
 8006ae4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ae8:	d005      	beq.n	8006af6 <__cvt+0x42>
 8006aea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006aee:	d100      	bne.n	8006af2 <__cvt+0x3e>
 8006af0:	3401      	adds	r4, #1
 8006af2:	2102      	movs	r1, #2
 8006af4:	e000      	b.n	8006af8 <__cvt+0x44>
 8006af6:	2103      	movs	r1, #3
 8006af8:	ab03      	add	r3, sp, #12
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	ab02      	add	r3, sp, #8
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	ec47 6b10 	vmov	d0, r6, r7
 8006b04:	4653      	mov	r3, sl
 8006b06:	4622      	mov	r2, r4
 8006b08:	f001 f976 	bl	8007df8 <_dtoa_r>
 8006b0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b10:	4605      	mov	r5, r0
 8006b12:	d119      	bne.n	8006b48 <__cvt+0x94>
 8006b14:	f019 0f01 	tst.w	r9, #1
 8006b18:	d00e      	beq.n	8006b38 <__cvt+0x84>
 8006b1a:	eb00 0904 	add.w	r9, r0, r4
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2300      	movs	r3, #0
 8006b22:	4630      	mov	r0, r6
 8006b24:	4639      	mov	r1, r7
 8006b26:	f7f9 ffd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b2a:	b108      	cbz	r0, 8006b30 <__cvt+0x7c>
 8006b2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b30:	2230      	movs	r2, #48	@ 0x30
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	454b      	cmp	r3, r9
 8006b36:	d31e      	bcc.n	8006b76 <__cvt+0xc2>
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b3c:	1b5b      	subs	r3, r3, r5
 8006b3e:	4628      	mov	r0, r5
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	b004      	add	sp, #16
 8006b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b4c:	eb00 0904 	add.w	r9, r0, r4
 8006b50:	d1e5      	bne.n	8006b1e <__cvt+0x6a>
 8006b52:	7803      	ldrb	r3, [r0, #0]
 8006b54:	2b30      	cmp	r3, #48	@ 0x30
 8006b56:	d10a      	bne.n	8006b6e <__cvt+0xba>
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	4639      	mov	r1, r7
 8006b60:	f7f9 ffba 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b64:	b918      	cbnz	r0, 8006b6e <__cvt+0xba>
 8006b66:	f1c4 0401 	rsb	r4, r4, #1
 8006b6a:	f8ca 4000 	str.w	r4, [sl]
 8006b6e:	f8da 3000 	ldr.w	r3, [sl]
 8006b72:	4499      	add	r9, r3
 8006b74:	e7d3      	b.n	8006b1e <__cvt+0x6a>
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	9103      	str	r1, [sp, #12]
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	e7d9      	b.n	8006b32 <__cvt+0x7e>

08006b7e <__exponent>:
 8006b7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b80:	2900      	cmp	r1, #0
 8006b82:	bfba      	itte	lt
 8006b84:	4249      	neglt	r1, r1
 8006b86:	232d      	movlt	r3, #45	@ 0x2d
 8006b88:	232b      	movge	r3, #43	@ 0x2b
 8006b8a:	2909      	cmp	r1, #9
 8006b8c:	7002      	strb	r2, [r0, #0]
 8006b8e:	7043      	strb	r3, [r0, #1]
 8006b90:	dd29      	ble.n	8006be6 <__exponent+0x68>
 8006b92:	f10d 0307 	add.w	r3, sp, #7
 8006b96:	461d      	mov	r5, r3
 8006b98:	270a      	movs	r7, #10
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ba0:	fb07 1416 	mls	r4, r7, r6, r1
 8006ba4:	3430      	adds	r4, #48	@ 0x30
 8006ba6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006baa:	460c      	mov	r4, r1
 8006bac:	2c63      	cmp	r4, #99	@ 0x63
 8006bae:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	dcf1      	bgt.n	8006b9a <__exponent+0x1c>
 8006bb6:	3130      	adds	r1, #48	@ 0x30
 8006bb8:	1e94      	subs	r4, r2, #2
 8006bba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bbe:	1c41      	adds	r1, r0, #1
 8006bc0:	4623      	mov	r3, r4
 8006bc2:	42ab      	cmp	r3, r5
 8006bc4:	d30a      	bcc.n	8006bdc <__exponent+0x5e>
 8006bc6:	f10d 0309 	add.w	r3, sp, #9
 8006bca:	1a9b      	subs	r3, r3, r2
 8006bcc:	42ac      	cmp	r4, r5
 8006bce:	bf88      	it	hi
 8006bd0:	2300      	movhi	r3, #0
 8006bd2:	3302      	adds	r3, #2
 8006bd4:	4403      	add	r3, r0
 8006bd6:	1a18      	subs	r0, r3, r0
 8006bd8:	b003      	add	sp, #12
 8006bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bdc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006be0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006be4:	e7ed      	b.n	8006bc2 <__exponent+0x44>
 8006be6:	2330      	movs	r3, #48	@ 0x30
 8006be8:	3130      	adds	r1, #48	@ 0x30
 8006bea:	7083      	strb	r3, [r0, #2]
 8006bec:	70c1      	strb	r1, [r0, #3]
 8006bee:	1d03      	adds	r3, r0, #4
 8006bf0:	e7f1      	b.n	8006bd6 <__exponent+0x58>
	...

08006bf4 <_printf_float>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	b08d      	sub	sp, #52	@ 0x34
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c00:	4616      	mov	r6, r2
 8006c02:	461f      	mov	r7, r3
 8006c04:	4605      	mov	r5, r0
 8006c06:	f000 ffbd 	bl	8007b84 <_localeconv_r>
 8006c0a:	6803      	ldr	r3, [r0, #0]
 8006c0c:	9304      	str	r3, [sp, #16]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7f9 fb36 	bl	8000280 <strlen>
 8006c14:	2300      	movs	r3, #0
 8006c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c18:	f8d8 3000 	ldr.w	r3, [r8]
 8006c1c:	9005      	str	r0, [sp, #20]
 8006c1e:	3307      	adds	r3, #7
 8006c20:	f023 0307 	bic.w	r3, r3, #7
 8006c24:	f103 0208 	add.w	r2, r3, #8
 8006c28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c2c:	f8d4 b000 	ldr.w	fp, [r4]
 8006c30:	f8c8 2000 	str.w	r2, [r8]
 8006c34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c3c:	9307      	str	r3, [sp, #28]
 8006c3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c4a:	4b9c      	ldr	r3, [pc, #624]	@ (8006ebc <_printf_float+0x2c8>)
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c50:	f7f9 ff74 	bl	8000b3c <__aeabi_dcmpun>
 8006c54:	bb70      	cbnz	r0, 8006cb4 <_printf_float+0xc0>
 8006c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c5a:	4b98      	ldr	r3, [pc, #608]	@ (8006ebc <_printf_float+0x2c8>)
 8006c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c60:	f7f9 ff4e 	bl	8000b00 <__aeabi_dcmple>
 8006c64:	bb30      	cbnz	r0, 8006cb4 <_printf_float+0xc0>
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	f7f9 ff3d 	bl	8000aec <__aeabi_dcmplt>
 8006c72:	b110      	cbz	r0, 8006c7a <_printf_float+0x86>
 8006c74:	232d      	movs	r3, #45	@ 0x2d
 8006c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c7a:	4a91      	ldr	r2, [pc, #580]	@ (8006ec0 <_printf_float+0x2cc>)
 8006c7c:	4b91      	ldr	r3, [pc, #580]	@ (8006ec4 <_printf_float+0x2d0>)
 8006c7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c82:	bf94      	ite	ls
 8006c84:	4690      	movls	r8, r2
 8006c86:	4698      	movhi	r8, r3
 8006c88:	2303      	movs	r3, #3
 8006c8a:	6123      	str	r3, [r4, #16]
 8006c8c:	f02b 0304 	bic.w	r3, fp, #4
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	f04f 0900 	mov.w	r9, #0
 8006c96:	9700      	str	r7, [sp, #0]
 8006c98:	4633      	mov	r3, r6
 8006c9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 f9d2 	bl	8007048 <_printf_common>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	f040 808d 	bne.w	8006dc4 <_printf_float+0x1d0>
 8006caa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cae:	b00d      	add	sp, #52	@ 0x34
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 ff3e 	bl	8000b3c <__aeabi_dcmpun>
 8006cc0:	b140      	cbz	r0, 8006cd4 <_printf_float+0xe0>
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfbc      	itt	lt
 8006cc8:	232d      	movlt	r3, #45	@ 0x2d
 8006cca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006cce:	4a7e      	ldr	r2, [pc, #504]	@ (8006ec8 <_printf_float+0x2d4>)
 8006cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8006ecc <_printf_float+0x2d8>)
 8006cd2:	e7d4      	b.n	8006c7e <_printf_float+0x8a>
 8006cd4:	6863      	ldr	r3, [r4, #4]
 8006cd6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006cda:	9206      	str	r2, [sp, #24]
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	d13b      	bne.n	8006d58 <_printf_float+0x164>
 8006ce0:	2306      	movs	r3, #6
 8006ce2:	6063      	str	r3, [r4, #4]
 8006ce4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006ce8:	2300      	movs	r3, #0
 8006cea:	6022      	str	r2, [r4, #0]
 8006cec:	9303      	str	r3, [sp, #12]
 8006cee:	ab0a      	add	r3, sp, #40	@ 0x28
 8006cf0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006cf4:	ab09      	add	r3, sp, #36	@ 0x24
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	6861      	ldr	r1, [r4, #4]
 8006cfa:	ec49 8b10 	vmov	d0, r8, r9
 8006cfe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006d02:	4628      	mov	r0, r5
 8006d04:	f7ff fed6 	bl	8006ab4 <__cvt>
 8006d08:	9b06      	ldr	r3, [sp, #24]
 8006d0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d0c:	2b47      	cmp	r3, #71	@ 0x47
 8006d0e:	4680      	mov	r8, r0
 8006d10:	d129      	bne.n	8006d66 <_printf_float+0x172>
 8006d12:	1cc8      	adds	r0, r1, #3
 8006d14:	db02      	blt.n	8006d1c <_printf_float+0x128>
 8006d16:	6863      	ldr	r3, [r4, #4]
 8006d18:	4299      	cmp	r1, r3
 8006d1a:	dd41      	ble.n	8006da0 <_printf_float+0x1ac>
 8006d1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d20:	fa5f fa8a 	uxtb.w	sl, sl
 8006d24:	3901      	subs	r1, #1
 8006d26:	4652      	mov	r2, sl
 8006d28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d2e:	f7ff ff26 	bl	8006b7e <__exponent>
 8006d32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d34:	1813      	adds	r3, r2, r0
 8006d36:	2a01      	cmp	r2, #1
 8006d38:	4681      	mov	r9, r0
 8006d3a:	6123      	str	r3, [r4, #16]
 8006d3c:	dc02      	bgt.n	8006d44 <_printf_float+0x150>
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	07d2      	lsls	r2, r2, #31
 8006d42:	d501      	bpl.n	8006d48 <_printf_float+0x154>
 8006d44:	3301      	adds	r3, #1
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0a2      	beq.n	8006c96 <_printf_float+0xa2>
 8006d50:	232d      	movs	r3, #45	@ 0x2d
 8006d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d56:	e79e      	b.n	8006c96 <_printf_float+0xa2>
 8006d58:	9a06      	ldr	r2, [sp, #24]
 8006d5a:	2a47      	cmp	r2, #71	@ 0x47
 8006d5c:	d1c2      	bne.n	8006ce4 <_printf_float+0xf0>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1c0      	bne.n	8006ce4 <_printf_float+0xf0>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e7bd      	b.n	8006ce2 <_printf_float+0xee>
 8006d66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d6a:	d9db      	bls.n	8006d24 <_printf_float+0x130>
 8006d6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d70:	d118      	bne.n	8006da4 <_printf_float+0x1b0>
 8006d72:	2900      	cmp	r1, #0
 8006d74:	6863      	ldr	r3, [r4, #4]
 8006d76:	dd0b      	ble.n	8006d90 <_printf_float+0x19c>
 8006d78:	6121      	str	r1, [r4, #16]
 8006d7a:	b913      	cbnz	r3, 8006d82 <_printf_float+0x18e>
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	07d0      	lsls	r0, r2, #31
 8006d80:	d502      	bpl.n	8006d88 <_printf_float+0x194>
 8006d82:	3301      	adds	r3, #1
 8006d84:	440b      	add	r3, r1
 8006d86:	6123      	str	r3, [r4, #16]
 8006d88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d8a:	f04f 0900 	mov.w	r9, #0
 8006d8e:	e7db      	b.n	8006d48 <_printf_float+0x154>
 8006d90:	b913      	cbnz	r3, 8006d98 <_printf_float+0x1a4>
 8006d92:	6822      	ldr	r2, [r4, #0]
 8006d94:	07d2      	lsls	r2, r2, #31
 8006d96:	d501      	bpl.n	8006d9c <_printf_float+0x1a8>
 8006d98:	3302      	adds	r3, #2
 8006d9a:	e7f4      	b.n	8006d86 <_printf_float+0x192>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e7f2      	b.n	8006d86 <_printf_float+0x192>
 8006da0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006da6:	4299      	cmp	r1, r3
 8006da8:	db05      	blt.n	8006db6 <_printf_float+0x1c2>
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	6121      	str	r1, [r4, #16]
 8006dae:	07d8      	lsls	r0, r3, #31
 8006db0:	d5ea      	bpl.n	8006d88 <_printf_float+0x194>
 8006db2:	1c4b      	adds	r3, r1, #1
 8006db4:	e7e7      	b.n	8006d86 <_printf_float+0x192>
 8006db6:	2900      	cmp	r1, #0
 8006db8:	bfd4      	ite	le
 8006dba:	f1c1 0202 	rsble	r2, r1, #2
 8006dbe:	2201      	movgt	r2, #1
 8006dc0:	4413      	add	r3, r2
 8006dc2:	e7e0      	b.n	8006d86 <_printf_float+0x192>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	055a      	lsls	r2, r3, #21
 8006dc8:	d407      	bmi.n	8006dda <_printf_float+0x1e6>
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	4642      	mov	r2, r8
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	47b8      	blx	r7
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d12b      	bne.n	8006e30 <_printf_float+0x23c>
 8006dd8:	e767      	b.n	8006caa <_printf_float+0xb6>
 8006dda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dde:	f240 80dd 	bls.w	8006f9c <_printf_float+0x3a8>
 8006de2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006de6:	2200      	movs	r2, #0
 8006de8:	2300      	movs	r3, #0
 8006dea:	f7f9 fe75 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d033      	beq.n	8006e5a <_printf_float+0x266>
 8006df2:	4a37      	ldr	r2, [pc, #220]	@ (8006ed0 <_printf_float+0x2dc>)
 8006df4:	2301      	movs	r3, #1
 8006df6:	4631      	mov	r1, r6
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b8      	blx	r7
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	f43f af54 	beq.w	8006caa <_printf_float+0xb6>
 8006e02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006e06:	4543      	cmp	r3, r8
 8006e08:	db02      	blt.n	8006e10 <_printf_float+0x21c>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	07d8      	lsls	r0, r3, #31
 8006e0e:	d50f      	bpl.n	8006e30 <_printf_float+0x23c>
 8006e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f43f af45 	beq.w	8006caa <_printf_float+0xb6>
 8006e20:	f04f 0900 	mov.w	r9, #0
 8006e24:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e28:	f104 0a1a 	add.w	sl, r4, #26
 8006e2c:	45c8      	cmp	r8, r9
 8006e2e:	dc09      	bgt.n	8006e44 <_printf_float+0x250>
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	079b      	lsls	r3, r3, #30
 8006e34:	f100 8103 	bmi.w	800703e <_printf_float+0x44a>
 8006e38:	68e0      	ldr	r0, [r4, #12]
 8006e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e3c:	4298      	cmp	r0, r3
 8006e3e:	bfb8      	it	lt
 8006e40:	4618      	movlt	r0, r3
 8006e42:	e734      	b.n	8006cae <_printf_float+0xba>
 8006e44:	2301      	movs	r3, #1
 8006e46:	4652      	mov	r2, sl
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f43f af2b 	beq.w	8006caa <_printf_float+0xb6>
 8006e54:	f109 0901 	add.w	r9, r9, #1
 8006e58:	e7e8      	b.n	8006e2c <_printf_float+0x238>
 8006e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	dc39      	bgt.n	8006ed4 <_printf_float+0x2e0>
 8006e60:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed0 <_printf_float+0x2dc>)
 8006e62:	2301      	movs	r3, #1
 8006e64:	4631      	mov	r1, r6
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	f43f af1d 	beq.w	8006caa <_printf_float+0xb6>
 8006e70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e74:	ea59 0303 	orrs.w	r3, r9, r3
 8006e78:	d102      	bne.n	8006e80 <_printf_float+0x28c>
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	07d9      	lsls	r1, r3, #31
 8006e7e:	d5d7      	bpl.n	8006e30 <_printf_float+0x23c>
 8006e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	47b8      	blx	r7
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f43f af0d 	beq.w	8006caa <_printf_float+0xb6>
 8006e90:	f04f 0a00 	mov.w	sl, #0
 8006e94:	f104 0b1a 	add.w	fp, r4, #26
 8006e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e9a:	425b      	negs	r3, r3
 8006e9c:	4553      	cmp	r3, sl
 8006e9e:	dc01      	bgt.n	8006ea4 <_printf_float+0x2b0>
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	e793      	b.n	8006dcc <_printf_float+0x1d8>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	465a      	mov	r2, fp
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4628      	mov	r0, r5
 8006eac:	47b8      	blx	r7
 8006eae:	3001      	adds	r0, #1
 8006eb0:	f43f aefb 	beq.w	8006caa <_printf_float+0xb6>
 8006eb4:	f10a 0a01 	add.w	sl, sl, #1
 8006eb8:	e7ee      	b.n	8006e98 <_printf_float+0x2a4>
 8006eba:	bf00      	nop
 8006ebc:	7fefffff 	.word	0x7fefffff
 8006ec0:	0800cc70 	.word	0x0800cc70
 8006ec4:	0800cc74 	.word	0x0800cc74
 8006ec8:	0800cc78 	.word	0x0800cc78
 8006ecc:	0800cc7c 	.word	0x0800cc7c
 8006ed0:	0800d0b0 	.word	0x0800d0b0
 8006ed4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ed6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006eda:	4553      	cmp	r3, sl
 8006edc:	bfa8      	it	ge
 8006ede:	4653      	movge	r3, sl
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	4699      	mov	r9, r3
 8006ee4:	dc36      	bgt.n	8006f54 <_printf_float+0x360>
 8006ee6:	f04f 0b00 	mov.w	fp, #0
 8006eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eee:	f104 021a 	add.w	r2, r4, #26
 8006ef2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ef4:	9306      	str	r3, [sp, #24]
 8006ef6:	eba3 0309 	sub.w	r3, r3, r9
 8006efa:	455b      	cmp	r3, fp
 8006efc:	dc31      	bgt.n	8006f62 <_printf_float+0x36e>
 8006efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f00:	459a      	cmp	sl, r3
 8006f02:	dc3a      	bgt.n	8006f7a <_printf_float+0x386>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	07da      	lsls	r2, r3, #31
 8006f08:	d437      	bmi.n	8006f7a <_printf_float+0x386>
 8006f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0c:	ebaa 0903 	sub.w	r9, sl, r3
 8006f10:	9b06      	ldr	r3, [sp, #24]
 8006f12:	ebaa 0303 	sub.w	r3, sl, r3
 8006f16:	4599      	cmp	r9, r3
 8006f18:	bfa8      	it	ge
 8006f1a:	4699      	movge	r9, r3
 8006f1c:	f1b9 0f00 	cmp.w	r9, #0
 8006f20:	dc33      	bgt.n	8006f8a <_printf_float+0x396>
 8006f22:	f04f 0800 	mov.w	r8, #0
 8006f26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f2a:	f104 0b1a 	add.w	fp, r4, #26
 8006f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f30:	ebaa 0303 	sub.w	r3, sl, r3
 8006f34:	eba3 0309 	sub.w	r3, r3, r9
 8006f38:	4543      	cmp	r3, r8
 8006f3a:	f77f af79 	ble.w	8006e30 <_printf_float+0x23c>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	465a      	mov	r2, fp
 8006f42:	4631      	mov	r1, r6
 8006f44:	4628      	mov	r0, r5
 8006f46:	47b8      	blx	r7
 8006f48:	3001      	adds	r0, #1
 8006f4a:	f43f aeae 	beq.w	8006caa <_printf_float+0xb6>
 8006f4e:	f108 0801 	add.w	r8, r8, #1
 8006f52:	e7ec      	b.n	8006f2e <_printf_float+0x33a>
 8006f54:	4642      	mov	r2, r8
 8006f56:	4631      	mov	r1, r6
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b8      	blx	r7
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d1c2      	bne.n	8006ee6 <_printf_float+0x2f2>
 8006f60:	e6a3      	b.n	8006caa <_printf_float+0xb6>
 8006f62:	2301      	movs	r3, #1
 8006f64:	4631      	mov	r1, r6
 8006f66:	4628      	mov	r0, r5
 8006f68:	9206      	str	r2, [sp, #24]
 8006f6a:	47b8      	blx	r7
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f43f ae9c 	beq.w	8006caa <_printf_float+0xb6>
 8006f72:	9a06      	ldr	r2, [sp, #24]
 8006f74:	f10b 0b01 	add.w	fp, fp, #1
 8006f78:	e7bb      	b.n	8006ef2 <_printf_float+0x2fe>
 8006f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b8      	blx	r7
 8006f84:	3001      	adds	r0, #1
 8006f86:	d1c0      	bne.n	8006f0a <_printf_float+0x316>
 8006f88:	e68f      	b.n	8006caa <_printf_float+0xb6>
 8006f8a:	9a06      	ldr	r2, [sp, #24]
 8006f8c:	464b      	mov	r3, r9
 8006f8e:	4442      	add	r2, r8
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	47b8      	blx	r7
 8006f96:	3001      	adds	r0, #1
 8006f98:	d1c3      	bne.n	8006f22 <_printf_float+0x32e>
 8006f9a:	e686      	b.n	8006caa <_printf_float+0xb6>
 8006f9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006fa0:	f1ba 0f01 	cmp.w	sl, #1
 8006fa4:	dc01      	bgt.n	8006faa <_printf_float+0x3b6>
 8006fa6:	07db      	lsls	r3, r3, #31
 8006fa8:	d536      	bpl.n	8007018 <_printf_float+0x424>
 8006faa:	2301      	movs	r3, #1
 8006fac:	4642      	mov	r2, r8
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f ae78 	beq.w	8006caa <_printf_float+0xb6>
 8006fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b8      	blx	r7
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	f43f ae70 	beq.w	8006caa <_printf_float+0xb6>
 8006fca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fd6:	f7f9 fd7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fda:	b9c0      	cbnz	r0, 800700e <_printf_float+0x41a>
 8006fdc:	4653      	mov	r3, sl
 8006fde:	f108 0201 	add.w	r2, r8, #1
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d10c      	bne.n	8007006 <_printf_float+0x412>
 8006fec:	e65d      	b.n	8006caa <_printf_float+0xb6>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	465a      	mov	r2, fp
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b8      	blx	r7
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	f43f ae56 	beq.w	8006caa <_printf_float+0xb6>
 8006ffe:	f108 0801 	add.w	r8, r8, #1
 8007002:	45d0      	cmp	r8, sl
 8007004:	dbf3      	blt.n	8006fee <_printf_float+0x3fa>
 8007006:	464b      	mov	r3, r9
 8007008:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800700c:	e6df      	b.n	8006dce <_printf_float+0x1da>
 800700e:	f04f 0800 	mov.w	r8, #0
 8007012:	f104 0b1a 	add.w	fp, r4, #26
 8007016:	e7f4      	b.n	8007002 <_printf_float+0x40e>
 8007018:	2301      	movs	r3, #1
 800701a:	4642      	mov	r2, r8
 800701c:	e7e1      	b.n	8006fe2 <_printf_float+0x3ee>
 800701e:	2301      	movs	r3, #1
 8007020:	464a      	mov	r2, r9
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f ae3e 	beq.w	8006caa <_printf_float+0xb6>
 800702e:	f108 0801 	add.w	r8, r8, #1
 8007032:	68e3      	ldr	r3, [r4, #12]
 8007034:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007036:	1a5b      	subs	r3, r3, r1
 8007038:	4543      	cmp	r3, r8
 800703a:	dcf0      	bgt.n	800701e <_printf_float+0x42a>
 800703c:	e6fc      	b.n	8006e38 <_printf_float+0x244>
 800703e:	f04f 0800 	mov.w	r8, #0
 8007042:	f104 0919 	add.w	r9, r4, #25
 8007046:	e7f4      	b.n	8007032 <_printf_float+0x43e>

08007048 <_printf_common>:
 8007048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	4616      	mov	r6, r2
 800704e:	4698      	mov	r8, r3
 8007050:	688a      	ldr	r2, [r1, #8]
 8007052:	690b      	ldr	r3, [r1, #16]
 8007054:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007058:	4293      	cmp	r3, r2
 800705a:	bfb8      	it	lt
 800705c:	4613      	movlt	r3, r2
 800705e:	6033      	str	r3, [r6, #0]
 8007060:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007064:	4607      	mov	r7, r0
 8007066:	460c      	mov	r4, r1
 8007068:	b10a      	cbz	r2, 800706e <_printf_common+0x26>
 800706a:	3301      	adds	r3, #1
 800706c:	6033      	str	r3, [r6, #0]
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	0699      	lsls	r1, r3, #26
 8007072:	bf42      	ittt	mi
 8007074:	6833      	ldrmi	r3, [r6, #0]
 8007076:	3302      	addmi	r3, #2
 8007078:	6033      	strmi	r3, [r6, #0]
 800707a:	6825      	ldr	r5, [r4, #0]
 800707c:	f015 0506 	ands.w	r5, r5, #6
 8007080:	d106      	bne.n	8007090 <_printf_common+0x48>
 8007082:	f104 0a19 	add.w	sl, r4, #25
 8007086:	68e3      	ldr	r3, [r4, #12]
 8007088:	6832      	ldr	r2, [r6, #0]
 800708a:	1a9b      	subs	r3, r3, r2
 800708c:	42ab      	cmp	r3, r5
 800708e:	dc26      	bgt.n	80070de <_printf_common+0x96>
 8007090:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007094:	6822      	ldr	r2, [r4, #0]
 8007096:	3b00      	subs	r3, #0
 8007098:	bf18      	it	ne
 800709a:	2301      	movne	r3, #1
 800709c:	0692      	lsls	r2, r2, #26
 800709e:	d42b      	bmi.n	80070f8 <_printf_common+0xb0>
 80070a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070a4:	4641      	mov	r1, r8
 80070a6:	4638      	mov	r0, r7
 80070a8:	47c8      	blx	r9
 80070aa:	3001      	adds	r0, #1
 80070ac:	d01e      	beq.n	80070ec <_printf_common+0xa4>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	6922      	ldr	r2, [r4, #16]
 80070b2:	f003 0306 	and.w	r3, r3, #6
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	bf02      	ittt	eq
 80070ba:	68e5      	ldreq	r5, [r4, #12]
 80070bc:	6833      	ldreq	r3, [r6, #0]
 80070be:	1aed      	subeq	r5, r5, r3
 80070c0:	68a3      	ldr	r3, [r4, #8]
 80070c2:	bf0c      	ite	eq
 80070c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070c8:	2500      	movne	r5, #0
 80070ca:	4293      	cmp	r3, r2
 80070cc:	bfc4      	itt	gt
 80070ce:	1a9b      	subgt	r3, r3, r2
 80070d0:	18ed      	addgt	r5, r5, r3
 80070d2:	2600      	movs	r6, #0
 80070d4:	341a      	adds	r4, #26
 80070d6:	42b5      	cmp	r5, r6
 80070d8:	d11a      	bne.n	8007110 <_printf_common+0xc8>
 80070da:	2000      	movs	r0, #0
 80070dc:	e008      	b.n	80070f0 <_printf_common+0xa8>
 80070de:	2301      	movs	r3, #1
 80070e0:	4652      	mov	r2, sl
 80070e2:	4641      	mov	r1, r8
 80070e4:	4638      	mov	r0, r7
 80070e6:	47c8      	blx	r9
 80070e8:	3001      	adds	r0, #1
 80070ea:	d103      	bne.n	80070f4 <_printf_common+0xac>
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f4:	3501      	adds	r5, #1
 80070f6:	e7c6      	b.n	8007086 <_printf_common+0x3e>
 80070f8:	18e1      	adds	r1, r4, r3
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	2030      	movs	r0, #48	@ 0x30
 80070fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007102:	4422      	add	r2, r4
 8007104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007108:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800710c:	3302      	adds	r3, #2
 800710e:	e7c7      	b.n	80070a0 <_printf_common+0x58>
 8007110:	2301      	movs	r3, #1
 8007112:	4622      	mov	r2, r4
 8007114:	4641      	mov	r1, r8
 8007116:	4638      	mov	r0, r7
 8007118:	47c8      	blx	r9
 800711a:	3001      	adds	r0, #1
 800711c:	d0e6      	beq.n	80070ec <_printf_common+0xa4>
 800711e:	3601      	adds	r6, #1
 8007120:	e7d9      	b.n	80070d6 <_printf_common+0x8e>
	...

08007124 <_printf_i>:
 8007124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007128:	7e0f      	ldrb	r7, [r1, #24]
 800712a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800712c:	2f78      	cmp	r7, #120	@ 0x78
 800712e:	4691      	mov	r9, r2
 8007130:	4680      	mov	r8, r0
 8007132:	460c      	mov	r4, r1
 8007134:	469a      	mov	sl, r3
 8007136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800713a:	d807      	bhi.n	800714c <_printf_i+0x28>
 800713c:	2f62      	cmp	r7, #98	@ 0x62
 800713e:	d80a      	bhi.n	8007156 <_printf_i+0x32>
 8007140:	2f00      	cmp	r7, #0
 8007142:	f000 80d2 	beq.w	80072ea <_printf_i+0x1c6>
 8007146:	2f58      	cmp	r7, #88	@ 0x58
 8007148:	f000 80b9 	beq.w	80072be <_printf_i+0x19a>
 800714c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007154:	e03a      	b.n	80071cc <_printf_i+0xa8>
 8007156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800715a:	2b15      	cmp	r3, #21
 800715c:	d8f6      	bhi.n	800714c <_printf_i+0x28>
 800715e:	a101      	add	r1, pc, #4	@ (adr r1, 8007164 <_printf_i+0x40>)
 8007160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007164:	080071bd 	.word	0x080071bd
 8007168:	080071d1 	.word	0x080071d1
 800716c:	0800714d 	.word	0x0800714d
 8007170:	0800714d 	.word	0x0800714d
 8007174:	0800714d 	.word	0x0800714d
 8007178:	0800714d 	.word	0x0800714d
 800717c:	080071d1 	.word	0x080071d1
 8007180:	0800714d 	.word	0x0800714d
 8007184:	0800714d 	.word	0x0800714d
 8007188:	0800714d 	.word	0x0800714d
 800718c:	0800714d 	.word	0x0800714d
 8007190:	080072d1 	.word	0x080072d1
 8007194:	080071fb 	.word	0x080071fb
 8007198:	0800728b 	.word	0x0800728b
 800719c:	0800714d 	.word	0x0800714d
 80071a0:	0800714d 	.word	0x0800714d
 80071a4:	080072f3 	.word	0x080072f3
 80071a8:	0800714d 	.word	0x0800714d
 80071ac:	080071fb 	.word	0x080071fb
 80071b0:	0800714d 	.word	0x0800714d
 80071b4:	0800714d 	.word	0x0800714d
 80071b8:	08007293 	.word	0x08007293
 80071bc:	6833      	ldr	r3, [r6, #0]
 80071be:	1d1a      	adds	r2, r3, #4
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6032      	str	r2, [r6, #0]
 80071c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071cc:	2301      	movs	r3, #1
 80071ce:	e09d      	b.n	800730c <_printf_i+0x1e8>
 80071d0:	6833      	ldr	r3, [r6, #0]
 80071d2:	6820      	ldr	r0, [r4, #0]
 80071d4:	1d19      	adds	r1, r3, #4
 80071d6:	6031      	str	r1, [r6, #0]
 80071d8:	0606      	lsls	r6, r0, #24
 80071da:	d501      	bpl.n	80071e0 <_printf_i+0xbc>
 80071dc:	681d      	ldr	r5, [r3, #0]
 80071de:	e003      	b.n	80071e8 <_printf_i+0xc4>
 80071e0:	0645      	lsls	r5, r0, #25
 80071e2:	d5fb      	bpl.n	80071dc <_printf_i+0xb8>
 80071e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	da03      	bge.n	80071f4 <_printf_i+0xd0>
 80071ec:	232d      	movs	r3, #45	@ 0x2d
 80071ee:	426d      	negs	r5, r5
 80071f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f4:	4859      	ldr	r0, [pc, #356]	@ (800735c <_printf_i+0x238>)
 80071f6:	230a      	movs	r3, #10
 80071f8:	e011      	b.n	800721e <_printf_i+0xfa>
 80071fa:	6821      	ldr	r1, [r4, #0]
 80071fc:	6833      	ldr	r3, [r6, #0]
 80071fe:	0608      	lsls	r0, r1, #24
 8007200:	f853 5b04 	ldr.w	r5, [r3], #4
 8007204:	d402      	bmi.n	800720c <_printf_i+0xe8>
 8007206:	0649      	lsls	r1, r1, #25
 8007208:	bf48      	it	mi
 800720a:	b2ad      	uxthmi	r5, r5
 800720c:	2f6f      	cmp	r7, #111	@ 0x6f
 800720e:	4853      	ldr	r0, [pc, #332]	@ (800735c <_printf_i+0x238>)
 8007210:	6033      	str	r3, [r6, #0]
 8007212:	bf14      	ite	ne
 8007214:	230a      	movne	r3, #10
 8007216:	2308      	moveq	r3, #8
 8007218:	2100      	movs	r1, #0
 800721a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800721e:	6866      	ldr	r6, [r4, #4]
 8007220:	60a6      	str	r6, [r4, #8]
 8007222:	2e00      	cmp	r6, #0
 8007224:	bfa2      	ittt	ge
 8007226:	6821      	ldrge	r1, [r4, #0]
 8007228:	f021 0104 	bicge.w	r1, r1, #4
 800722c:	6021      	strge	r1, [r4, #0]
 800722e:	b90d      	cbnz	r5, 8007234 <_printf_i+0x110>
 8007230:	2e00      	cmp	r6, #0
 8007232:	d04b      	beq.n	80072cc <_printf_i+0x1a8>
 8007234:	4616      	mov	r6, r2
 8007236:	fbb5 f1f3 	udiv	r1, r5, r3
 800723a:	fb03 5711 	mls	r7, r3, r1, r5
 800723e:	5dc7      	ldrb	r7, [r0, r7]
 8007240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007244:	462f      	mov	r7, r5
 8007246:	42bb      	cmp	r3, r7
 8007248:	460d      	mov	r5, r1
 800724a:	d9f4      	bls.n	8007236 <_printf_i+0x112>
 800724c:	2b08      	cmp	r3, #8
 800724e:	d10b      	bne.n	8007268 <_printf_i+0x144>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	07df      	lsls	r7, r3, #31
 8007254:	d508      	bpl.n	8007268 <_printf_i+0x144>
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	6861      	ldr	r1, [r4, #4]
 800725a:	4299      	cmp	r1, r3
 800725c:	bfde      	ittt	le
 800725e:	2330      	movle	r3, #48	@ 0x30
 8007260:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007264:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007268:	1b92      	subs	r2, r2, r6
 800726a:	6122      	str	r2, [r4, #16]
 800726c:	f8cd a000 	str.w	sl, [sp]
 8007270:	464b      	mov	r3, r9
 8007272:	aa03      	add	r2, sp, #12
 8007274:	4621      	mov	r1, r4
 8007276:	4640      	mov	r0, r8
 8007278:	f7ff fee6 	bl	8007048 <_printf_common>
 800727c:	3001      	adds	r0, #1
 800727e:	d14a      	bne.n	8007316 <_printf_i+0x1f2>
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	b004      	add	sp, #16
 8007286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	f043 0320 	orr.w	r3, r3, #32
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	4833      	ldr	r0, [pc, #204]	@ (8007360 <_printf_i+0x23c>)
 8007294:	2778      	movs	r7, #120	@ 0x78
 8007296:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	6831      	ldr	r1, [r6, #0]
 800729e:	061f      	lsls	r7, r3, #24
 80072a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80072a4:	d402      	bmi.n	80072ac <_printf_i+0x188>
 80072a6:	065f      	lsls	r7, r3, #25
 80072a8:	bf48      	it	mi
 80072aa:	b2ad      	uxthmi	r5, r5
 80072ac:	6031      	str	r1, [r6, #0]
 80072ae:	07d9      	lsls	r1, r3, #31
 80072b0:	bf44      	itt	mi
 80072b2:	f043 0320 	orrmi.w	r3, r3, #32
 80072b6:	6023      	strmi	r3, [r4, #0]
 80072b8:	b11d      	cbz	r5, 80072c2 <_printf_i+0x19e>
 80072ba:	2310      	movs	r3, #16
 80072bc:	e7ac      	b.n	8007218 <_printf_i+0xf4>
 80072be:	4827      	ldr	r0, [pc, #156]	@ (800735c <_printf_i+0x238>)
 80072c0:	e7e9      	b.n	8007296 <_printf_i+0x172>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	f023 0320 	bic.w	r3, r3, #32
 80072c8:	6023      	str	r3, [r4, #0]
 80072ca:	e7f6      	b.n	80072ba <_printf_i+0x196>
 80072cc:	4616      	mov	r6, r2
 80072ce:	e7bd      	b.n	800724c <_printf_i+0x128>
 80072d0:	6833      	ldr	r3, [r6, #0]
 80072d2:	6825      	ldr	r5, [r4, #0]
 80072d4:	6961      	ldr	r1, [r4, #20]
 80072d6:	1d18      	adds	r0, r3, #4
 80072d8:	6030      	str	r0, [r6, #0]
 80072da:	062e      	lsls	r6, r5, #24
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	d501      	bpl.n	80072e4 <_printf_i+0x1c0>
 80072e0:	6019      	str	r1, [r3, #0]
 80072e2:	e002      	b.n	80072ea <_printf_i+0x1c6>
 80072e4:	0668      	lsls	r0, r5, #25
 80072e6:	d5fb      	bpl.n	80072e0 <_printf_i+0x1bc>
 80072e8:	8019      	strh	r1, [r3, #0]
 80072ea:	2300      	movs	r3, #0
 80072ec:	6123      	str	r3, [r4, #16]
 80072ee:	4616      	mov	r6, r2
 80072f0:	e7bc      	b.n	800726c <_printf_i+0x148>
 80072f2:	6833      	ldr	r3, [r6, #0]
 80072f4:	1d1a      	adds	r2, r3, #4
 80072f6:	6032      	str	r2, [r6, #0]
 80072f8:	681e      	ldr	r6, [r3, #0]
 80072fa:	6862      	ldr	r2, [r4, #4]
 80072fc:	2100      	movs	r1, #0
 80072fe:	4630      	mov	r0, r6
 8007300:	f7f8 ff6e 	bl	80001e0 <memchr>
 8007304:	b108      	cbz	r0, 800730a <_printf_i+0x1e6>
 8007306:	1b80      	subs	r0, r0, r6
 8007308:	6060      	str	r0, [r4, #4]
 800730a:	6863      	ldr	r3, [r4, #4]
 800730c:	6123      	str	r3, [r4, #16]
 800730e:	2300      	movs	r3, #0
 8007310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007314:	e7aa      	b.n	800726c <_printf_i+0x148>
 8007316:	6923      	ldr	r3, [r4, #16]
 8007318:	4632      	mov	r2, r6
 800731a:	4649      	mov	r1, r9
 800731c:	4640      	mov	r0, r8
 800731e:	47d0      	blx	sl
 8007320:	3001      	adds	r0, #1
 8007322:	d0ad      	beq.n	8007280 <_printf_i+0x15c>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	079b      	lsls	r3, r3, #30
 8007328:	d413      	bmi.n	8007352 <_printf_i+0x22e>
 800732a:	68e0      	ldr	r0, [r4, #12]
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	4298      	cmp	r0, r3
 8007330:	bfb8      	it	lt
 8007332:	4618      	movlt	r0, r3
 8007334:	e7a6      	b.n	8007284 <_printf_i+0x160>
 8007336:	2301      	movs	r3, #1
 8007338:	4632      	mov	r2, r6
 800733a:	4649      	mov	r1, r9
 800733c:	4640      	mov	r0, r8
 800733e:	47d0      	blx	sl
 8007340:	3001      	adds	r0, #1
 8007342:	d09d      	beq.n	8007280 <_printf_i+0x15c>
 8007344:	3501      	adds	r5, #1
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	9903      	ldr	r1, [sp, #12]
 800734a:	1a5b      	subs	r3, r3, r1
 800734c:	42ab      	cmp	r3, r5
 800734e:	dcf2      	bgt.n	8007336 <_printf_i+0x212>
 8007350:	e7eb      	b.n	800732a <_printf_i+0x206>
 8007352:	2500      	movs	r5, #0
 8007354:	f104 0619 	add.w	r6, r4, #25
 8007358:	e7f5      	b.n	8007346 <_printf_i+0x222>
 800735a:	bf00      	nop
 800735c:	0800cc80 	.word	0x0800cc80
 8007360:	0800cc91 	.word	0x0800cc91

08007364 <_scanf_float>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	b087      	sub	sp, #28
 800736a:	4617      	mov	r7, r2
 800736c:	9303      	str	r3, [sp, #12]
 800736e:	688b      	ldr	r3, [r1, #8]
 8007370:	1e5a      	subs	r2, r3, #1
 8007372:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007376:	bf81      	itttt	hi
 8007378:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800737c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007380:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007384:	608b      	strhi	r3, [r1, #8]
 8007386:	680b      	ldr	r3, [r1, #0]
 8007388:	460a      	mov	r2, r1
 800738a:	f04f 0500 	mov.w	r5, #0
 800738e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007392:	f842 3b1c 	str.w	r3, [r2], #28
 8007396:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800739a:	4680      	mov	r8, r0
 800739c:	460c      	mov	r4, r1
 800739e:	bf98      	it	ls
 80073a0:	f04f 0b00 	movls.w	fp, #0
 80073a4:	9201      	str	r2, [sp, #4]
 80073a6:	4616      	mov	r6, r2
 80073a8:	46aa      	mov	sl, r5
 80073aa:	46a9      	mov	r9, r5
 80073ac:	9502      	str	r5, [sp, #8]
 80073ae:	68a2      	ldr	r2, [r4, #8]
 80073b0:	b152      	cbz	r2, 80073c8 <_scanf_float+0x64>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b4e      	cmp	r3, #78	@ 0x4e
 80073b8:	d864      	bhi.n	8007484 <_scanf_float+0x120>
 80073ba:	2b40      	cmp	r3, #64	@ 0x40
 80073bc:	d83c      	bhi.n	8007438 <_scanf_float+0xd4>
 80073be:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80073c2:	b2c8      	uxtb	r0, r1
 80073c4:	280e      	cmp	r0, #14
 80073c6:	d93a      	bls.n	800743e <_scanf_float+0xda>
 80073c8:	f1b9 0f00 	cmp.w	r9, #0
 80073cc:	d003      	beq.n	80073d6 <_scanf_float+0x72>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073da:	f1ba 0f01 	cmp.w	sl, #1
 80073de:	f200 8117 	bhi.w	8007610 <_scanf_float+0x2ac>
 80073e2:	9b01      	ldr	r3, [sp, #4]
 80073e4:	429e      	cmp	r6, r3
 80073e6:	f200 8108 	bhi.w	80075fa <_scanf_float+0x296>
 80073ea:	2001      	movs	r0, #1
 80073ec:	b007      	add	sp, #28
 80073ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80073f6:	2a0d      	cmp	r2, #13
 80073f8:	d8e6      	bhi.n	80073c8 <_scanf_float+0x64>
 80073fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007400 <_scanf_float+0x9c>)
 80073fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007400:	08007547 	.word	0x08007547
 8007404:	080073c9 	.word	0x080073c9
 8007408:	080073c9 	.word	0x080073c9
 800740c:	080073c9 	.word	0x080073c9
 8007410:	080075a7 	.word	0x080075a7
 8007414:	0800757f 	.word	0x0800757f
 8007418:	080073c9 	.word	0x080073c9
 800741c:	080073c9 	.word	0x080073c9
 8007420:	08007555 	.word	0x08007555
 8007424:	080073c9 	.word	0x080073c9
 8007428:	080073c9 	.word	0x080073c9
 800742c:	080073c9 	.word	0x080073c9
 8007430:	080073c9 	.word	0x080073c9
 8007434:	0800750d 	.word	0x0800750d
 8007438:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800743c:	e7db      	b.n	80073f6 <_scanf_float+0x92>
 800743e:	290e      	cmp	r1, #14
 8007440:	d8c2      	bhi.n	80073c8 <_scanf_float+0x64>
 8007442:	a001      	add	r0, pc, #4	@ (adr r0, 8007448 <_scanf_float+0xe4>)
 8007444:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007448:	080074fd 	.word	0x080074fd
 800744c:	080073c9 	.word	0x080073c9
 8007450:	080074fd 	.word	0x080074fd
 8007454:	08007593 	.word	0x08007593
 8007458:	080073c9 	.word	0x080073c9
 800745c:	080074a5 	.word	0x080074a5
 8007460:	080074e3 	.word	0x080074e3
 8007464:	080074e3 	.word	0x080074e3
 8007468:	080074e3 	.word	0x080074e3
 800746c:	080074e3 	.word	0x080074e3
 8007470:	080074e3 	.word	0x080074e3
 8007474:	080074e3 	.word	0x080074e3
 8007478:	080074e3 	.word	0x080074e3
 800747c:	080074e3 	.word	0x080074e3
 8007480:	080074e3 	.word	0x080074e3
 8007484:	2b6e      	cmp	r3, #110	@ 0x6e
 8007486:	d809      	bhi.n	800749c <_scanf_float+0x138>
 8007488:	2b60      	cmp	r3, #96	@ 0x60
 800748a:	d8b2      	bhi.n	80073f2 <_scanf_float+0x8e>
 800748c:	2b54      	cmp	r3, #84	@ 0x54
 800748e:	d07b      	beq.n	8007588 <_scanf_float+0x224>
 8007490:	2b59      	cmp	r3, #89	@ 0x59
 8007492:	d199      	bne.n	80073c8 <_scanf_float+0x64>
 8007494:	2d07      	cmp	r5, #7
 8007496:	d197      	bne.n	80073c8 <_scanf_float+0x64>
 8007498:	2508      	movs	r5, #8
 800749a:	e02c      	b.n	80074f6 <_scanf_float+0x192>
 800749c:	2b74      	cmp	r3, #116	@ 0x74
 800749e:	d073      	beq.n	8007588 <_scanf_float+0x224>
 80074a0:	2b79      	cmp	r3, #121	@ 0x79
 80074a2:	e7f6      	b.n	8007492 <_scanf_float+0x12e>
 80074a4:	6821      	ldr	r1, [r4, #0]
 80074a6:	05c8      	lsls	r0, r1, #23
 80074a8:	d51b      	bpl.n	80074e2 <_scanf_float+0x17e>
 80074aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80074ae:	6021      	str	r1, [r4, #0]
 80074b0:	f109 0901 	add.w	r9, r9, #1
 80074b4:	f1bb 0f00 	cmp.w	fp, #0
 80074b8:	d003      	beq.n	80074c2 <_scanf_float+0x15e>
 80074ba:	3201      	adds	r2, #1
 80074bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074c0:	60a2      	str	r2, [r4, #8]
 80074c2:	68a3      	ldr	r3, [r4, #8]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	60a3      	str	r3, [r4, #8]
 80074c8:	6923      	ldr	r3, [r4, #16]
 80074ca:	3301      	adds	r3, #1
 80074cc:	6123      	str	r3, [r4, #16]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	f340 8087 	ble.w	80075e8 <_scanf_float+0x284>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	3301      	adds	r3, #1
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	e765      	b.n	80073ae <_scanf_float+0x4a>
 80074e2:	eb1a 0105 	adds.w	r1, sl, r5
 80074e6:	f47f af6f 	bne.w	80073c8 <_scanf_float+0x64>
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80074f0:	6022      	str	r2, [r4, #0]
 80074f2:	460d      	mov	r5, r1
 80074f4:	468a      	mov	sl, r1
 80074f6:	f806 3b01 	strb.w	r3, [r6], #1
 80074fa:	e7e2      	b.n	80074c2 <_scanf_float+0x15e>
 80074fc:	6822      	ldr	r2, [r4, #0]
 80074fe:	0610      	lsls	r0, r2, #24
 8007500:	f57f af62 	bpl.w	80073c8 <_scanf_float+0x64>
 8007504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	e7f4      	b.n	80074f6 <_scanf_float+0x192>
 800750c:	f1ba 0f00 	cmp.w	sl, #0
 8007510:	d10e      	bne.n	8007530 <_scanf_float+0x1cc>
 8007512:	f1b9 0f00 	cmp.w	r9, #0
 8007516:	d10e      	bne.n	8007536 <_scanf_float+0x1d2>
 8007518:	6822      	ldr	r2, [r4, #0]
 800751a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800751e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007522:	d108      	bne.n	8007536 <_scanf_float+0x1d2>
 8007524:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007528:	6022      	str	r2, [r4, #0]
 800752a:	f04f 0a01 	mov.w	sl, #1
 800752e:	e7e2      	b.n	80074f6 <_scanf_float+0x192>
 8007530:	f1ba 0f02 	cmp.w	sl, #2
 8007534:	d055      	beq.n	80075e2 <_scanf_float+0x27e>
 8007536:	2d01      	cmp	r5, #1
 8007538:	d002      	beq.n	8007540 <_scanf_float+0x1dc>
 800753a:	2d04      	cmp	r5, #4
 800753c:	f47f af44 	bne.w	80073c8 <_scanf_float+0x64>
 8007540:	3501      	adds	r5, #1
 8007542:	b2ed      	uxtb	r5, r5
 8007544:	e7d7      	b.n	80074f6 <_scanf_float+0x192>
 8007546:	f1ba 0f01 	cmp.w	sl, #1
 800754a:	f47f af3d 	bne.w	80073c8 <_scanf_float+0x64>
 800754e:	f04f 0a02 	mov.w	sl, #2
 8007552:	e7d0      	b.n	80074f6 <_scanf_float+0x192>
 8007554:	b97d      	cbnz	r5, 8007576 <_scanf_float+0x212>
 8007556:	f1b9 0f00 	cmp.w	r9, #0
 800755a:	f47f af38 	bne.w	80073ce <_scanf_float+0x6a>
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007564:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007568:	f040 8108 	bne.w	800777c <_scanf_float+0x418>
 800756c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	2501      	movs	r5, #1
 8007574:	e7bf      	b.n	80074f6 <_scanf_float+0x192>
 8007576:	2d03      	cmp	r5, #3
 8007578:	d0e2      	beq.n	8007540 <_scanf_float+0x1dc>
 800757a:	2d05      	cmp	r5, #5
 800757c:	e7de      	b.n	800753c <_scanf_float+0x1d8>
 800757e:	2d02      	cmp	r5, #2
 8007580:	f47f af22 	bne.w	80073c8 <_scanf_float+0x64>
 8007584:	2503      	movs	r5, #3
 8007586:	e7b6      	b.n	80074f6 <_scanf_float+0x192>
 8007588:	2d06      	cmp	r5, #6
 800758a:	f47f af1d 	bne.w	80073c8 <_scanf_float+0x64>
 800758e:	2507      	movs	r5, #7
 8007590:	e7b1      	b.n	80074f6 <_scanf_float+0x192>
 8007592:	6822      	ldr	r2, [r4, #0]
 8007594:	0591      	lsls	r1, r2, #22
 8007596:	f57f af17 	bpl.w	80073c8 <_scanf_float+0x64>
 800759a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800759e:	6022      	str	r2, [r4, #0]
 80075a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80075a4:	e7a7      	b.n	80074f6 <_scanf_float+0x192>
 80075a6:	6822      	ldr	r2, [r4, #0]
 80075a8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80075ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80075b0:	d006      	beq.n	80075c0 <_scanf_float+0x25c>
 80075b2:	0550      	lsls	r0, r2, #21
 80075b4:	f57f af08 	bpl.w	80073c8 <_scanf_float+0x64>
 80075b8:	f1b9 0f00 	cmp.w	r9, #0
 80075bc:	f000 80de 	beq.w	800777c <_scanf_float+0x418>
 80075c0:	0591      	lsls	r1, r2, #22
 80075c2:	bf58      	it	pl
 80075c4:	9902      	ldrpl	r1, [sp, #8]
 80075c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80075ca:	bf58      	it	pl
 80075cc:	eba9 0101 	subpl.w	r1, r9, r1
 80075d0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80075d4:	bf58      	it	pl
 80075d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80075da:	6022      	str	r2, [r4, #0]
 80075dc:	f04f 0900 	mov.w	r9, #0
 80075e0:	e789      	b.n	80074f6 <_scanf_float+0x192>
 80075e2:	f04f 0a03 	mov.w	sl, #3
 80075e6:	e786      	b.n	80074f6 <_scanf_float+0x192>
 80075e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80075ec:	4639      	mov	r1, r7
 80075ee:	4640      	mov	r0, r8
 80075f0:	4798      	blx	r3
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f43f aedb 	beq.w	80073ae <_scanf_float+0x4a>
 80075f8:	e6e6      	b.n	80073c8 <_scanf_float+0x64>
 80075fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007602:	463a      	mov	r2, r7
 8007604:	4640      	mov	r0, r8
 8007606:	4798      	blx	r3
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	3b01      	subs	r3, #1
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	e6e8      	b.n	80073e2 <_scanf_float+0x7e>
 8007610:	1e6b      	subs	r3, r5, #1
 8007612:	2b06      	cmp	r3, #6
 8007614:	d824      	bhi.n	8007660 <_scanf_float+0x2fc>
 8007616:	2d02      	cmp	r5, #2
 8007618:	d836      	bhi.n	8007688 <_scanf_float+0x324>
 800761a:	9b01      	ldr	r3, [sp, #4]
 800761c:	429e      	cmp	r6, r3
 800761e:	f67f aee4 	bls.w	80073ea <_scanf_float+0x86>
 8007622:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007626:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800762a:	463a      	mov	r2, r7
 800762c:	4640      	mov	r0, r8
 800762e:	4798      	blx	r3
 8007630:	6923      	ldr	r3, [r4, #16]
 8007632:	3b01      	subs	r3, #1
 8007634:	6123      	str	r3, [r4, #16]
 8007636:	e7f0      	b.n	800761a <_scanf_float+0x2b6>
 8007638:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800763c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007640:	463a      	mov	r2, r7
 8007642:	4640      	mov	r0, r8
 8007644:	4798      	blx	r3
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	3b01      	subs	r3, #1
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007650:	fa5f fa8a 	uxtb.w	sl, sl
 8007654:	f1ba 0f02 	cmp.w	sl, #2
 8007658:	d1ee      	bne.n	8007638 <_scanf_float+0x2d4>
 800765a:	3d03      	subs	r5, #3
 800765c:	b2ed      	uxtb	r5, r5
 800765e:	1b76      	subs	r6, r6, r5
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	05da      	lsls	r2, r3, #23
 8007664:	d530      	bpl.n	80076c8 <_scanf_float+0x364>
 8007666:	055b      	lsls	r3, r3, #21
 8007668:	d511      	bpl.n	800768e <_scanf_float+0x32a>
 800766a:	9b01      	ldr	r3, [sp, #4]
 800766c:	429e      	cmp	r6, r3
 800766e:	f67f aebc 	bls.w	80073ea <_scanf_float+0x86>
 8007672:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007676:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800767a:	463a      	mov	r2, r7
 800767c:	4640      	mov	r0, r8
 800767e:	4798      	blx	r3
 8007680:	6923      	ldr	r3, [r4, #16]
 8007682:	3b01      	subs	r3, #1
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	e7f0      	b.n	800766a <_scanf_float+0x306>
 8007688:	46aa      	mov	sl, r5
 800768a:	46b3      	mov	fp, r6
 800768c:	e7de      	b.n	800764c <_scanf_float+0x2e8>
 800768e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007692:	6923      	ldr	r3, [r4, #16]
 8007694:	2965      	cmp	r1, #101	@ 0x65
 8007696:	f103 33ff 	add.w	r3, r3, #4294967295
 800769a:	f106 35ff 	add.w	r5, r6, #4294967295
 800769e:	6123      	str	r3, [r4, #16]
 80076a0:	d00c      	beq.n	80076bc <_scanf_float+0x358>
 80076a2:	2945      	cmp	r1, #69	@ 0x45
 80076a4:	d00a      	beq.n	80076bc <_scanf_float+0x358>
 80076a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076aa:	463a      	mov	r2, r7
 80076ac:	4640      	mov	r0, r8
 80076ae:	4798      	blx	r3
 80076b0:	6923      	ldr	r3, [r4, #16]
 80076b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	1eb5      	subs	r5, r6, #2
 80076ba:	6123      	str	r3, [r4, #16]
 80076bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076c0:	463a      	mov	r2, r7
 80076c2:	4640      	mov	r0, r8
 80076c4:	4798      	blx	r3
 80076c6:	462e      	mov	r6, r5
 80076c8:	6822      	ldr	r2, [r4, #0]
 80076ca:	f012 0210 	ands.w	r2, r2, #16
 80076ce:	d001      	beq.n	80076d4 <_scanf_float+0x370>
 80076d0:	2000      	movs	r0, #0
 80076d2:	e68b      	b.n	80073ec <_scanf_float+0x88>
 80076d4:	7032      	strb	r2, [r6, #0]
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80076dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e0:	d11c      	bne.n	800771c <_scanf_float+0x3b8>
 80076e2:	9b02      	ldr	r3, [sp, #8]
 80076e4:	454b      	cmp	r3, r9
 80076e6:	eba3 0209 	sub.w	r2, r3, r9
 80076ea:	d123      	bne.n	8007734 <_scanf_float+0x3d0>
 80076ec:	9901      	ldr	r1, [sp, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	4640      	mov	r0, r8
 80076f2:	f7ff f9cd 	bl	8006a90 <_strtod_r>
 80076f6:	9b03      	ldr	r3, [sp, #12]
 80076f8:	6821      	ldr	r1, [r4, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f011 0f02 	tst.w	r1, #2
 8007700:	ec57 6b10 	vmov	r6, r7, d0
 8007704:	f103 0204 	add.w	r2, r3, #4
 8007708:	d01f      	beq.n	800774a <_scanf_float+0x3e6>
 800770a:	9903      	ldr	r1, [sp, #12]
 800770c:	600a      	str	r2, [r1, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	e9c3 6700 	strd	r6, r7, [r3]
 8007714:	68e3      	ldr	r3, [r4, #12]
 8007716:	3301      	adds	r3, #1
 8007718:	60e3      	str	r3, [r4, #12]
 800771a:	e7d9      	b.n	80076d0 <_scanf_float+0x36c>
 800771c:	9b04      	ldr	r3, [sp, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0e4      	beq.n	80076ec <_scanf_float+0x388>
 8007722:	9905      	ldr	r1, [sp, #20]
 8007724:	230a      	movs	r3, #10
 8007726:	3101      	adds	r1, #1
 8007728:	4640      	mov	r0, r8
 800772a:	f002 faa1 	bl	8009c70 <_strtol_r>
 800772e:	9b04      	ldr	r3, [sp, #16]
 8007730:	9e05      	ldr	r6, [sp, #20]
 8007732:	1ac2      	subs	r2, r0, r3
 8007734:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007738:	429e      	cmp	r6, r3
 800773a:	bf28      	it	cs
 800773c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007740:	4910      	ldr	r1, [pc, #64]	@ (8007784 <_scanf_float+0x420>)
 8007742:	4630      	mov	r0, r6
 8007744:	f000 f918 	bl	8007978 <siprintf>
 8007748:	e7d0      	b.n	80076ec <_scanf_float+0x388>
 800774a:	f011 0f04 	tst.w	r1, #4
 800774e:	9903      	ldr	r1, [sp, #12]
 8007750:	600a      	str	r2, [r1, #0]
 8007752:	d1dc      	bne.n	800770e <_scanf_float+0x3aa>
 8007754:	681d      	ldr	r5, [r3, #0]
 8007756:	4632      	mov	r2, r6
 8007758:	463b      	mov	r3, r7
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f9 f9ed 	bl	8000b3c <__aeabi_dcmpun>
 8007762:	b128      	cbz	r0, 8007770 <_scanf_float+0x40c>
 8007764:	4808      	ldr	r0, [pc, #32]	@ (8007788 <_scanf_float+0x424>)
 8007766:	f000 fa9b 	bl	8007ca0 <nanf>
 800776a:	ed85 0a00 	vstr	s0, [r5]
 800776e:	e7d1      	b.n	8007714 <_scanf_float+0x3b0>
 8007770:	4630      	mov	r0, r6
 8007772:	4639      	mov	r1, r7
 8007774:	f7f9 fa40 	bl	8000bf8 <__aeabi_d2f>
 8007778:	6028      	str	r0, [r5, #0]
 800777a:	e7cb      	b.n	8007714 <_scanf_float+0x3b0>
 800777c:	f04f 0900 	mov.w	r9, #0
 8007780:	e629      	b.n	80073d6 <_scanf_float+0x72>
 8007782:	bf00      	nop
 8007784:	0800cca2 	.word	0x0800cca2
 8007788:	0800cd5b 	.word	0x0800cd5b

0800778c <std>:
 800778c:	2300      	movs	r3, #0
 800778e:	b510      	push	{r4, lr}
 8007790:	4604      	mov	r4, r0
 8007792:	e9c0 3300 	strd	r3, r3, [r0]
 8007796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800779a:	6083      	str	r3, [r0, #8]
 800779c:	8181      	strh	r1, [r0, #12]
 800779e:	6643      	str	r3, [r0, #100]	@ 0x64
 80077a0:	81c2      	strh	r2, [r0, #14]
 80077a2:	6183      	str	r3, [r0, #24]
 80077a4:	4619      	mov	r1, r3
 80077a6:	2208      	movs	r2, #8
 80077a8:	305c      	adds	r0, #92	@ 0x5c
 80077aa:	f000 f974 	bl	8007a96 <memset>
 80077ae:	4b0d      	ldr	r3, [pc, #52]	@ (80077e4 <std+0x58>)
 80077b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80077b2:	4b0d      	ldr	r3, [pc, #52]	@ (80077e8 <std+0x5c>)
 80077b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077b6:	4b0d      	ldr	r3, [pc, #52]	@ (80077ec <std+0x60>)
 80077b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077ba:	4b0d      	ldr	r3, [pc, #52]	@ (80077f0 <std+0x64>)
 80077bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80077be:	4b0d      	ldr	r3, [pc, #52]	@ (80077f4 <std+0x68>)
 80077c0:	6224      	str	r4, [r4, #32]
 80077c2:	429c      	cmp	r4, r3
 80077c4:	d006      	beq.n	80077d4 <std+0x48>
 80077c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077ca:	4294      	cmp	r4, r2
 80077cc:	d002      	beq.n	80077d4 <std+0x48>
 80077ce:	33d0      	adds	r3, #208	@ 0xd0
 80077d0:	429c      	cmp	r4, r3
 80077d2:	d105      	bne.n	80077e0 <std+0x54>
 80077d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077dc:	f000 ba46 	b.w	8007c6c <__retarget_lock_init_recursive>
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	bf00      	nop
 80077e4:	08007a0d 	.word	0x08007a0d
 80077e8:	08007a33 	.word	0x08007a33
 80077ec:	08007a6b 	.word	0x08007a6b
 80077f0:	08007a8f 	.word	0x08007a8f
 80077f4:	20000834 	.word	0x20000834

080077f8 <stdio_exit_handler>:
 80077f8:	4a02      	ldr	r2, [pc, #8]	@ (8007804 <stdio_exit_handler+0xc>)
 80077fa:	4903      	ldr	r1, [pc, #12]	@ (8007808 <stdio_exit_handler+0x10>)
 80077fc:	4803      	ldr	r0, [pc, #12]	@ (800780c <stdio_exit_handler+0x14>)
 80077fe:	f000 b869 	b.w	80078d4 <_fwalk_sglue>
 8007802:	bf00      	nop
 8007804:	2000005c 	.word	0x2000005c
 8007808:	0800a679 	.word	0x0800a679
 800780c:	200001d8 	.word	0x200001d8

08007810 <cleanup_stdio>:
 8007810:	6841      	ldr	r1, [r0, #4]
 8007812:	4b0c      	ldr	r3, [pc, #48]	@ (8007844 <cleanup_stdio+0x34>)
 8007814:	4299      	cmp	r1, r3
 8007816:	b510      	push	{r4, lr}
 8007818:	4604      	mov	r4, r0
 800781a:	d001      	beq.n	8007820 <cleanup_stdio+0x10>
 800781c:	f002 ff2c 	bl	800a678 <_fflush_r>
 8007820:	68a1      	ldr	r1, [r4, #8]
 8007822:	4b09      	ldr	r3, [pc, #36]	@ (8007848 <cleanup_stdio+0x38>)
 8007824:	4299      	cmp	r1, r3
 8007826:	d002      	beq.n	800782e <cleanup_stdio+0x1e>
 8007828:	4620      	mov	r0, r4
 800782a:	f002 ff25 	bl	800a678 <_fflush_r>
 800782e:	68e1      	ldr	r1, [r4, #12]
 8007830:	4b06      	ldr	r3, [pc, #24]	@ (800784c <cleanup_stdio+0x3c>)
 8007832:	4299      	cmp	r1, r3
 8007834:	d004      	beq.n	8007840 <cleanup_stdio+0x30>
 8007836:	4620      	mov	r0, r4
 8007838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800783c:	f002 bf1c 	b.w	800a678 <_fflush_r>
 8007840:	bd10      	pop	{r4, pc}
 8007842:	bf00      	nop
 8007844:	20000834 	.word	0x20000834
 8007848:	2000089c 	.word	0x2000089c
 800784c:	20000904 	.word	0x20000904

08007850 <global_stdio_init.part.0>:
 8007850:	b510      	push	{r4, lr}
 8007852:	4b0b      	ldr	r3, [pc, #44]	@ (8007880 <global_stdio_init.part.0+0x30>)
 8007854:	4c0b      	ldr	r4, [pc, #44]	@ (8007884 <global_stdio_init.part.0+0x34>)
 8007856:	4a0c      	ldr	r2, [pc, #48]	@ (8007888 <global_stdio_init.part.0+0x38>)
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	4620      	mov	r0, r4
 800785c:	2200      	movs	r2, #0
 800785e:	2104      	movs	r1, #4
 8007860:	f7ff ff94 	bl	800778c <std>
 8007864:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007868:	2201      	movs	r2, #1
 800786a:	2109      	movs	r1, #9
 800786c:	f7ff ff8e 	bl	800778c <std>
 8007870:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007874:	2202      	movs	r2, #2
 8007876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800787a:	2112      	movs	r1, #18
 800787c:	f7ff bf86 	b.w	800778c <std>
 8007880:	2000096c 	.word	0x2000096c
 8007884:	20000834 	.word	0x20000834
 8007888:	080077f9 	.word	0x080077f9

0800788c <__sfp_lock_acquire>:
 800788c:	4801      	ldr	r0, [pc, #4]	@ (8007894 <__sfp_lock_acquire+0x8>)
 800788e:	f000 b9ee 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8007892:	bf00      	nop
 8007894:	20000975 	.word	0x20000975

08007898 <__sfp_lock_release>:
 8007898:	4801      	ldr	r0, [pc, #4]	@ (80078a0 <__sfp_lock_release+0x8>)
 800789a:	f000 b9e9 	b.w	8007c70 <__retarget_lock_release_recursive>
 800789e:	bf00      	nop
 80078a0:	20000975 	.word	0x20000975

080078a4 <__sinit>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	4604      	mov	r4, r0
 80078a8:	f7ff fff0 	bl	800788c <__sfp_lock_acquire>
 80078ac:	6a23      	ldr	r3, [r4, #32]
 80078ae:	b11b      	cbz	r3, 80078b8 <__sinit+0x14>
 80078b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b4:	f7ff bff0 	b.w	8007898 <__sfp_lock_release>
 80078b8:	4b04      	ldr	r3, [pc, #16]	@ (80078cc <__sinit+0x28>)
 80078ba:	6223      	str	r3, [r4, #32]
 80078bc:	4b04      	ldr	r3, [pc, #16]	@ (80078d0 <__sinit+0x2c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1f5      	bne.n	80078b0 <__sinit+0xc>
 80078c4:	f7ff ffc4 	bl	8007850 <global_stdio_init.part.0>
 80078c8:	e7f2      	b.n	80078b0 <__sinit+0xc>
 80078ca:	bf00      	nop
 80078cc:	08007811 	.word	0x08007811
 80078d0:	2000096c 	.word	0x2000096c

080078d4 <_fwalk_sglue>:
 80078d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d8:	4607      	mov	r7, r0
 80078da:	4688      	mov	r8, r1
 80078dc:	4614      	mov	r4, r2
 80078de:	2600      	movs	r6, #0
 80078e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078e4:	f1b9 0901 	subs.w	r9, r9, #1
 80078e8:	d505      	bpl.n	80078f6 <_fwalk_sglue+0x22>
 80078ea:	6824      	ldr	r4, [r4, #0]
 80078ec:	2c00      	cmp	r4, #0
 80078ee:	d1f7      	bne.n	80078e0 <_fwalk_sglue+0xc>
 80078f0:	4630      	mov	r0, r6
 80078f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f6:	89ab      	ldrh	r3, [r5, #12]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d907      	bls.n	800790c <_fwalk_sglue+0x38>
 80078fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007900:	3301      	adds	r3, #1
 8007902:	d003      	beq.n	800790c <_fwalk_sglue+0x38>
 8007904:	4629      	mov	r1, r5
 8007906:	4638      	mov	r0, r7
 8007908:	47c0      	blx	r8
 800790a:	4306      	orrs	r6, r0
 800790c:	3568      	adds	r5, #104	@ 0x68
 800790e:	e7e9      	b.n	80078e4 <_fwalk_sglue+0x10>

08007910 <sniprintf>:
 8007910:	b40c      	push	{r2, r3}
 8007912:	b530      	push	{r4, r5, lr}
 8007914:	4b17      	ldr	r3, [pc, #92]	@ (8007974 <sniprintf+0x64>)
 8007916:	1e0c      	subs	r4, r1, #0
 8007918:	681d      	ldr	r5, [r3, #0]
 800791a:	b09d      	sub	sp, #116	@ 0x74
 800791c:	da08      	bge.n	8007930 <sniprintf+0x20>
 800791e:	238b      	movs	r3, #139	@ 0x8b
 8007920:	602b      	str	r3, [r5, #0]
 8007922:	f04f 30ff 	mov.w	r0, #4294967295
 8007926:	b01d      	add	sp, #116	@ 0x74
 8007928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800792c:	b002      	add	sp, #8
 800792e:	4770      	bx	lr
 8007930:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007934:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007938:	bf14      	ite	ne
 800793a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800793e:	4623      	moveq	r3, r4
 8007940:	9304      	str	r3, [sp, #16]
 8007942:	9307      	str	r3, [sp, #28]
 8007944:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007948:	9002      	str	r0, [sp, #8]
 800794a:	9006      	str	r0, [sp, #24]
 800794c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007950:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007952:	ab21      	add	r3, sp, #132	@ 0x84
 8007954:	a902      	add	r1, sp, #8
 8007956:	4628      	mov	r0, r5
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	f002 f9f3 	bl	8009d44 <_svfiprintf_r>
 800795e:	1c43      	adds	r3, r0, #1
 8007960:	bfbc      	itt	lt
 8007962:	238b      	movlt	r3, #139	@ 0x8b
 8007964:	602b      	strlt	r3, [r5, #0]
 8007966:	2c00      	cmp	r4, #0
 8007968:	d0dd      	beq.n	8007926 <sniprintf+0x16>
 800796a:	9b02      	ldr	r3, [sp, #8]
 800796c:	2200      	movs	r2, #0
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e7d9      	b.n	8007926 <sniprintf+0x16>
 8007972:	bf00      	nop
 8007974:	200001d4 	.word	0x200001d4

08007978 <siprintf>:
 8007978:	b40e      	push	{r1, r2, r3}
 800797a:	b500      	push	{lr}
 800797c:	b09c      	sub	sp, #112	@ 0x70
 800797e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007980:	9002      	str	r0, [sp, #8]
 8007982:	9006      	str	r0, [sp, #24]
 8007984:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007988:	4809      	ldr	r0, [pc, #36]	@ (80079b0 <siprintf+0x38>)
 800798a:	9107      	str	r1, [sp, #28]
 800798c:	9104      	str	r1, [sp, #16]
 800798e:	4909      	ldr	r1, [pc, #36]	@ (80079b4 <siprintf+0x3c>)
 8007990:	f853 2b04 	ldr.w	r2, [r3], #4
 8007994:	9105      	str	r1, [sp, #20]
 8007996:	6800      	ldr	r0, [r0, #0]
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	a902      	add	r1, sp, #8
 800799c:	f002 f9d2 	bl	8009d44 <_svfiprintf_r>
 80079a0:	9b02      	ldr	r3, [sp, #8]
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	b01c      	add	sp, #112	@ 0x70
 80079a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079ac:	b003      	add	sp, #12
 80079ae:	4770      	bx	lr
 80079b0:	200001d4 	.word	0x200001d4
 80079b4:	ffff0208 	.word	0xffff0208

080079b8 <siscanf>:
 80079b8:	b40e      	push	{r1, r2, r3}
 80079ba:	b530      	push	{r4, r5, lr}
 80079bc:	b09c      	sub	sp, #112	@ 0x70
 80079be:	ac1f      	add	r4, sp, #124	@ 0x7c
 80079c0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80079c4:	f854 5b04 	ldr.w	r5, [r4], #4
 80079c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80079cc:	9002      	str	r0, [sp, #8]
 80079ce:	9006      	str	r0, [sp, #24]
 80079d0:	f7f8 fc56 	bl	8000280 <strlen>
 80079d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007a04 <siscanf+0x4c>)
 80079d6:	9003      	str	r0, [sp, #12]
 80079d8:	9007      	str	r0, [sp, #28]
 80079da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079dc:	480a      	ldr	r0, [pc, #40]	@ (8007a08 <siscanf+0x50>)
 80079de:	9401      	str	r4, [sp, #4]
 80079e0:	2300      	movs	r3, #0
 80079e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079e4:	9314      	str	r3, [sp, #80]	@ 0x50
 80079e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079ee:	462a      	mov	r2, r5
 80079f0:	4623      	mov	r3, r4
 80079f2:	a902      	add	r1, sp, #8
 80079f4:	6800      	ldr	r0, [r0, #0]
 80079f6:	f002 faf9 	bl	8009fec <__ssvfiscanf_r>
 80079fa:	b01c      	add	sp, #112	@ 0x70
 80079fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a00:	b003      	add	sp, #12
 8007a02:	4770      	bx	lr
 8007a04:	08007a2f 	.word	0x08007a2f
 8007a08:	200001d4 	.word	0x200001d4

08007a0c <__sread>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	460c      	mov	r4, r1
 8007a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a14:	f000 f8dc 	bl	8007bd0 <_read_r>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	bfab      	itete	ge
 8007a1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a20:	181b      	addge	r3, r3, r0
 8007a22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a26:	bfac      	ite	ge
 8007a28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a2a:	81a3      	strhlt	r3, [r4, #12]
 8007a2c:	bd10      	pop	{r4, pc}

08007a2e <__seofread>:
 8007a2e:	2000      	movs	r0, #0
 8007a30:	4770      	bx	lr

08007a32 <__swrite>:
 8007a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	461f      	mov	r7, r3
 8007a38:	898b      	ldrh	r3, [r1, #12]
 8007a3a:	05db      	lsls	r3, r3, #23
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	4616      	mov	r6, r2
 8007a42:	d505      	bpl.n	8007a50 <__swrite+0x1e>
 8007a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a48:	2302      	movs	r3, #2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f000 f8ae 	bl	8007bac <_lseek_r>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	463b      	mov	r3, r7
 8007a60:	4628      	mov	r0, r5
 8007a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a66:	f000 b8c5 	b.w	8007bf4 <_write_r>

08007a6a <__sseek>:
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a72:	f000 f89b 	bl	8007bac <_lseek_r>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	bf15      	itete	ne
 8007a7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a86:	81a3      	strheq	r3, [r4, #12]
 8007a88:	bf18      	it	ne
 8007a8a:	81a3      	strhne	r3, [r4, #12]
 8007a8c:	bd10      	pop	{r4, pc}

08007a8e <__sclose>:
 8007a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a92:	f000 b87b 	b.w	8007b8c <_close_r>

08007a96 <memset>:
 8007a96:	4402      	add	r2, r0
 8007a98:	4603      	mov	r3, r0
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d100      	bne.n	8007aa0 <memset+0xa>
 8007a9e:	4770      	bx	lr
 8007aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8007aa4:	e7f9      	b.n	8007a9a <memset+0x4>

08007aa6 <strncmp>:
 8007aa6:	b510      	push	{r4, lr}
 8007aa8:	b16a      	cbz	r2, 8007ac6 <strncmp+0x20>
 8007aaa:	3901      	subs	r1, #1
 8007aac:	1884      	adds	r4, r0, r2
 8007aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d103      	bne.n	8007ac2 <strncmp+0x1c>
 8007aba:	42a0      	cmp	r0, r4
 8007abc:	d001      	beq.n	8007ac2 <strncmp+0x1c>
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d1f5      	bne.n	8007aae <strncmp+0x8>
 8007ac2:	1ad0      	subs	r0, r2, r3
 8007ac4:	bd10      	pop	{r4, pc}
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	e7fc      	b.n	8007ac4 <strncmp+0x1e>
	...

08007acc <strtok>:
 8007acc:	4b16      	ldr	r3, [pc, #88]	@ (8007b28 <strtok+0x5c>)
 8007ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad2:	681f      	ldr	r7, [r3, #0]
 8007ad4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	460e      	mov	r6, r1
 8007ada:	b9ec      	cbnz	r4, 8007b18 <strtok+0x4c>
 8007adc:	2050      	movs	r0, #80	@ 0x50
 8007ade:	f001 fad3 	bl	8009088 <malloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6478      	str	r0, [r7, #68]	@ 0x44
 8007ae6:	b920      	cbnz	r0, 8007af2 <strtok+0x26>
 8007ae8:	4b10      	ldr	r3, [pc, #64]	@ (8007b2c <strtok+0x60>)
 8007aea:	4811      	ldr	r0, [pc, #68]	@ (8007b30 <strtok+0x64>)
 8007aec:	215b      	movs	r1, #91	@ 0x5b
 8007aee:	f000 f8dd 	bl	8007cac <__assert_func>
 8007af2:	e9c0 4400 	strd	r4, r4, [r0]
 8007af6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007afa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007afe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007b02:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007b06:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007b0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8007b0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007b12:	6184      	str	r4, [r0, #24]
 8007b14:	7704      	strb	r4, [r0, #28]
 8007b16:	6244      	str	r4, [r0, #36]	@ 0x24
 8007b18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b24:	f000 b806 	b.w	8007b34 <__strtok_r>
 8007b28:	200001d4 	.word	0x200001d4
 8007b2c:	0800cca7 	.word	0x0800cca7
 8007b30:	0800ccbe 	.word	0x0800ccbe

08007b34 <__strtok_r>:
 8007b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b36:	4604      	mov	r4, r0
 8007b38:	b908      	cbnz	r0, 8007b3e <__strtok_r+0xa>
 8007b3a:	6814      	ldr	r4, [r2, #0]
 8007b3c:	b144      	cbz	r4, 8007b50 <__strtok_r+0x1c>
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007b44:	460f      	mov	r7, r1
 8007b46:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007b4a:	b91e      	cbnz	r6, 8007b54 <__strtok_r+0x20>
 8007b4c:	b965      	cbnz	r5, 8007b68 <__strtok_r+0x34>
 8007b4e:	6015      	str	r5, [r2, #0]
 8007b50:	2000      	movs	r0, #0
 8007b52:	e005      	b.n	8007b60 <__strtok_r+0x2c>
 8007b54:	42b5      	cmp	r5, r6
 8007b56:	d1f6      	bne.n	8007b46 <__strtok_r+0x12>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1f0      	bne.n	8007b3e <__strtok_r+0xa>
 8007b5c:	6014      	str	r4, [r2, #0]
 8007b5e:	7003      	strb	r3, [r0, #0]
 8007b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b62:	461c      	mov	r4, r3
 8007b64:	e00c      	b.n	8007b80 <__strtok_r+0x4c>
 8007b66:	b915      	cbnz	r5, 8007b6e <__strtok_r+0x3a>
 8007b68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b6c:	460e      	mov	r6, r1
 8007b6e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007b72:	42ab      	cmp	r3, r5
 8007b74:	d1f7      	bne.n	8007b66 <__strtok_r+0x32>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f3      	beq.n	8007b62 <__strtok_r+0x2e>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007b80:	6014      	str	r4, [r2, #0]
 8007b82:	e7ed      	b.n	8007b60 <__strtok_r+0x2c>

08007b84 <_localeconv_r>:
 8007b84:	4800      	ldr	r0, [pc, #0]	@ (8007b88 <_localeconv_r+0x4>)
 8007b86:	4770      	bx	lr
 8007b88:	20000158 	.word	0x20000158

08007b8c <_close_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ba8 <_close_r+0x1c>)
 8007b90:	2300      	movs	r3, #0
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	602b      	str	r3, [r5, #0]
 8007b98:	f7fa fbd8 	bl	800234c <_close>
 8007b9c:	1c43      	adds	r3, r0, #1
 8007b9e:	d102      	bne.n	8007ba6 <_close_r+0x1a>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	b103      	cbz	r3, 8007ba6 <_close_r+0x1a>
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	bd38      	pop	{r3, r4, r5, pc}
 8007ba8:	20000970 	.word	0x20000970

08007bac <_lseek_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d07      	ldr	r5, [pc, #28]	@ (8007bcc <_lseek_r+0x20>)
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	4608      	mov	r0, r1
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	602a      	str	r2, [r5, #0]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f7fa fbed 	bl	800239a <_lseek>
 8007bc0:	1c43      	adds	r3, r0, #1
 8007bc2:	d102      	bne.n	8007bca <_lseek_r+0x1e>
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	b103      	cbz	r3, 8007bca <_lseek_r+0x1e>
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	bd38      	pop	{r3, r4, r5, pc}
 8007bcc:	20000970 	.word	0x20000970

08007bd0 <_read_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d07      	ldr	r5, [pc, #28]	@ (8007bf0 <_read_r+0x20>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4611      	mov	r1, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	602a      	str	r2, [r5, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	f7fa fb7b 	bl	80022da <_read>
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d102      	bne.n	8007bee <_read_r+0x1e>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	b103      	cbz	r3, 8007bee <_read_r+0x1e>
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	bd38      	pop	{r3, r4, r5, pc}
 8007bf0:	20000970 	.word	0x20000970

08007bf4 <_write_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4d07      	ldr	r5, [pc, #28]	@ (8007c14 <_write_r+0x20>)
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f7fa fb86 	bl	8002314 <_write>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_write_r+0x1e>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_write_r+0x1e>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	20000970 	.word	0x20000970

08007c18 <__errno>:
 8007c18:	4b01      	ldr	r3, [pc, #4]	@ (8007c20 <__errno+0x8>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	200001d4 	.word	0x200001d4

08007c24 <__libc_init_array>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	4d0d      	ldr	r5, [pc, #52]	@ (8007c5c <__libc_init_array+0x38>)
 8007c28:	4c0d      	ldr	r4, [pc, #52]	@ (8007c60 <__libc_init_array+0x3c>)
 8007c2a:	1b64      	subs	r4, r4, r5
 8007c2c:	10a4      	asrs	r4, r4, #2
 8007c2e:	2600      	movs	r6, #0
 8007c30:	42a6      	cmp	r6, r4
 8007c32:	d109      	bne.n	8007c48 <__libc_init_array+0x24>
 8007c34:	4d0b      	ldr	r5, [pc, #44]	@ (8007c64 <__libc_init_array+0x40>)
 8007c36:	4c0c      	ldr	r4, [pc, #48]	@ (8007c68 <__libc_init_array+0x44>)
 8007c38:	f004 ff5a 	bl	800caf0 <_init>
 8007c3c:	1b64      	subs	r4, r4, r5
 8007c3e:	10a4      	asrs	r4, r4, #2
 8007c40:	2600      	movs	r6, #0
 8007c42:	42a6      	cmp	r6, r4
 8007c44:	d105      	bne.n	8007c52 <__libc_init_array+0x2e>
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4c:	4798      	blx	r3
 8007c4e:	3601      	adds	r6, #1
 8007c50:	e7ee      	b.n	8007c30 <__libc_init_array+0xc>
 8007c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c56:	4798      	blx	r3
 8007c58:	3601      	adds	r6, #1
 8007c5a:	e7f2      	b.n	8007c42 <__libc_init_array+0x1e>
 8007c5c:	0800d108 	.word	0x0800d108
 8007c60:	0800d108 	.word	0x0800d108
 8007c64:	0800d108 	.word	0x0800d108
 8007c68:	0800d10c 	.word	0x0800d10c

08007c6c <__retarget_lock_init_recursive>:
 8007c6c:	4770      	bx	lr

08007c6e <__retarget_lock_acquire_recursive>:
 8007c6e:	4770      	bx	lr

08007c70 <__retarget_lock_release_recursive>:
 8007c70:	4770      	bx	lr

08007c72 <memcpy>:
 8007c72:	440a      	add	r2, r1
 8007c74:	4291      	cmp	r1, r2
 8007c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c7a:	d100      	bne.n	8007c7e <memcpy+0xc>
 8007c7c:	4770      	bx	lr
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c88:	4291      	cmp	r1, r2
 8007c8a:	d1f9      	bne.n	8007c80 <memcpy+0xe>
 8007c8c:	bd10      	pop	{r4, pc}
	...

08007c90 <nan>:
 8007c90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007c98 <nan+0x8>
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	00000000 	.word	0x00000000
 8007c9c:	7ff80000 	.word	0x7ff80000

08007ca0 <nanf>:
 8007ca0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007ca8 <nanf+0x8>
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	7fc00000 	.word	0x7fc00000

08007cac <__assert_func>:
 8007cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cae:	4614      	mov	r4, r2
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4b09      	ldr	r3, [pc, #36]	@ (8007cd8 <__assert_func+0x2c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	68d8      	ldr	r0, [r3, #12]
 8007cba:	b954      	cbnz	r4, 8007cd2 <__assert_func+0x26>
 8007cbc:	4b07      	ldr	r3, [pc, #28]	@ (8007cdc <__assert_func+0x30>)
 8007cbe:	461c      	mov	r4, r3
 8007cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cc4:	9100      	str	r1, [sp, #0]
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	4905      	ldr	r1, [pc, #20]	@ (8007ce0 <__assert_func+0x34>)
 8007cca:	f002 fcfd 	bl	800a6c8 <fiprintf>
 8007cce:	f002 fdab 	bl	800a828 <abort>
 8007cd2:	4b04      	ldr	r3, [pc, #16]	@ (8007ce4 <__assert_func+0x38>)
 8007cd4:	e7f4      	b.n	8007cc0 <__assert_func+0x14>
 8007cd6:	bf00      	nop
 8007cd8:	200001d4 	.word	0x200001d4
 8007cdc:	0800cd5b 	.word	0x0800cd5b
 8007ce0:	0800cd2d 	.word	0x0800cd2d
 8007ce4:	0800cd20 	.word	0x0800cd20

08007ce8 <quorem>:
 8007ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	6903      	ldr	r3, [r0, #16]
 8007cee:	690c      	ldr	r4, [r1, #16]
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	4607      	mov	r7, r0
 8007cf4:	db7e      	blt.n	8007df4 <quorem+0x10c>
 8007cf6:	3c01      	subs	r4, #1
 8007cf8:	f101 0814 	add.w	r8, r1, #20
 8007cfc:	00a3      	lsls	r3, r4, #2
 8007cfe:	f100 0514 	add.w	r5, r0, #20
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d12:	3301      	adds	r3, #1
 8007d14:	429a      	cmp	r2, r3
 8007d16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d1e:	d32e      	bcc.n	8007d7e <quorem+0x96>
 8007d20:	f04f 0a00 	mov.w	sl, #0
 8007d24:	46c4      	mov	ip, r8
 8007d26:	46ae      	mov	lr, r5
 8007d28:	46d3      	mov	fp, sl
 8007d2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d2e:	b298      	uxth	r0, r3
 8007d30:	fb06 a000 	mla	r0, r6, r0, sl
 8007d34:	0c02      	lsrs	r2, r0, #16
 8007d36:	0c1b      	lsrs	r3, r3, #16
 8007d38:	fb06 2303 	mla	r3, r6, r3, r2
 8007d3c:	f8de 2000 	ldr.w	r2, [lr]
 8007d40:	b280      	uxth	r0, r0
 8007d42:	b292      	uxth	r2, r2
 8007d44:	1a12      	subs	r2, r2, r0
 8007d46:	445a      	add	r2, fp
 8007d48:	f8de 0000 	ldr.w	r0, [lr]
 8007d4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d5a:	b292      	uxth	r2, r2
 8007d5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d60:	45e1      	cmp	r9, ip
 8007d62:	f84e 2b04 	str.w	r2, [lr], #4
 8007d66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d6a:	d2de      	bcs.n	8007d2a <quorem+0x42>
 8007d6c:	9b00      	ldr	r3, [sp, #0]
 8007d6e:	58eb      	ldr	r3, [r5, r3]
 8007d70:	b92b      	cbnz	r3, 8007d7e <quorem+0x96>
 8007d72:	9b01      	ldr	r3, [sp, #4]
 8007d74:	3b04      	subs	r3, #4
 8007d76:	429d      	cmp	r5, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	d32f      	bcc.n	8007ddc <quorem+0xf4>
 8007d7c:	613c      	str	r4, [r7, #16]
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f001 fd0e 	bl	80097a0 <__mcmp>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	db25      	blt.n	8007dd4 <quorem+0xec>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	2000      	movs	r0, #0
 8007d8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d90:	f8d1 c000 	ldr.w	ip, [r1]
 8007d94:	fa1f fe82 	uxth.w	lr, r2
 8007d98:	fa1f f38c 	uxth.w	r3, ip
 8007d9c:	eba3 030e 	sub.w	r3, r3, lr
 8007da0:	4403      	add	r3, r0
 8007da2:	0c12      	lsrs	r2, r2, #16
 8007da4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007da8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007db2:	45c1      	cmp	r9, r8
 8007db4:	f841 3b04 	str.w	r3, [r1], #4
 8007db8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007dbc:	d2e6      	bcs.n	8007d8c <quorem+0xa4>
 8007dbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dc6:	b922      	cbnz	r2, 8007dd2 <quorem+0xea>
 8007dc8:	3b04      	subs	r3, #4
 8007dca:	429d      	cmp	r5, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	d30b      	bcc.n	8007de8 <quorem+0x100>
 8007dd0:	613c      	str	r4, [r7, #16]
 8007dd2:	3601      	adds	r6, #1
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	b003      	add	sp, #12
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	3b04      	subs	r3, #4
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d1cb      	bne.n	8007d7c <quorem+0x94>
 8007de4:	3c01      	subs	r4, #1
 8007de6:	e7c6      	b.n	8007d76 <quorem+0x8e>
 8007de8:	6812      	ldr	r2, [r2, #0]
 8007dea:	3b04      	subs	r3, #4
 8007dec:	2a00      	cmp	r2, #0
 8007dee:	d1ef      	bne.n	8007dd0 <quorem+0xe8>
 8007df0:	3c01      	subs	r4, #1
 8007df2:	e7ea      	b.n	8007dca <quorem+0xe2>
 8007df4:	2000      	movs	r0, #0
 8007df6:	e7ee      	b.n	8007dd6 <quorem+0xee>

08007df8 <_dtoa_r>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	69c7      	ldr	r7, [r0, #28]
 8007dfe:	b099      	sub	sp, #100	@ 0x64
 8007e00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e04:	ec55 4b10 	vmov	r4, r5, d0
 8007e08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e0c:	4683      	mov	fp, r0
 8007e0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e12:	b97f      	cbnz	r7, 8007e34 <_dtoa_r+0x3c>
 8007e14:	2010      	movs	r0, #16
 8007e16:	f001 f937 	bl	8009088 <malloc>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007e20:	b920      	cbnz	r0, 8007e2c <_dtoa_r+0x34>
 8007e22:	4ba7      	ldr	r3, [pc, #668]	@ (80080c0 <_dtoa_r+0x2c8>)
 8007e24:	21ef      	movs	r1, #239	@ 0xef
 8007e26:	48a7      	ldr	r0, [pc, #668]	@ (80080c4 <_dtoa_r+0x2cc>)
 8007e28:	f7ff ff40 	bl	8007cac <__assert_func>
 8007e2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e30:	6007      	str	r7, [r0, #0]
 8007e32:	60c7      	str	r7, [r0, #12]
 8007e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e38:	6819      	ldr	r1, [r3, #0]
 8007e3a:	b159      	cbz	r1, 8007e54 <_dtoa_r+0x5c>
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	604a      	str	r2, [r1, #4]
 8007e40:	2301      	movs	r3, #1
 8007e42:	4093      	lsls	r3, r2
 8007e44:	608b      	str	r3, [r1, #8]
 8007e46:	4658      	mov	r0, fp
 8007e48:	f001 fa26 	bl	8009298 <_Bfree>
 8007e4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	1e2b      	subs	r3, r5, #0
 8007e56:	bfb9      	ittee	lt
 8007e58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e5c:	9303      	strlt	r3, [sp, #12]
 8007e5e:	2300      	movge	r3, #0
 8007e60:	6033      	strge	r3, [r6, #0]
 8007e62:	9f03      	ldr	r7, [sp, #12]
 8007e64:	4b98      	ldr	r3, [pc, #608]	@ (80080c8 <_dtoa_r+0x2d0>)
 8007e66:	bfbc      	itt	lt
 8007e68:	2201      	movlt	r2, #1
 8007e6a:	6032      	strlt	r2, [r6, #0]
 8007e6c:	43bb      	bics	r3, r7
 8007e6e:	d112      	bne.n	8007e96 <_dtoa_r+0x9e>
 8007e70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e7c:	4323      	orrs	r3, r4
 8007e7e:	f000 854d 	beq.w	800891c <_dtoa_r+0xb24>
 8007e82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80080dc <_dtoa_r+0x2e4>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 854f 	beq.w	800892c <_dtoa_r+0xb34>
 8007e8e:	f10a 0303 	add.w	r3, sl, #3
 8007e92:	f000 bd49 	b.w	8008928 <_dtoa_r+0xb30>
 8007e96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	ec51 0b17 	vmov	r0, r1, d7
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007ea6:	f7f8 fe17 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eaa:	4680      	mov	r8, r0
 8007eac:	b158      	cbz	r0, 8007ec6 <_dtoa_r+0xce>
 8007eae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007eb6:	b113      	cbz	r3, 8007ebe <_dtoa_r+0xc6>
 8007eb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007eba:	4b84      	ldr	r3, [pc, #528]	@ (80080cc <_dtoa_r+0x2d4>)
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80080e0 <_dtoa_r+0x2e8>
 8007ec2:	f000 bd33 	b.w	800892c <_dtoa_r+0xb34>
 8007ec6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007eca:	aa16      	add	r2, sp, #88	@ 0x58
 8007ecc:	a917      	add	r1, sp, #92	@ 0x5c
 8007ece:	4658      	mov	r0, fp
 8007ed0:	f001 fd86 	bl	80099e0 <__d2b>
 8007ed4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ed8:	4681      	mov	r9, r0
 8007eda:	2e00      	cmp	r6, #0
 8007edc:	d077      	beq.n	8007fce <_dtoa_r+0x1d6>
 8007ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ee0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ef0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ef4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ef8:	4619      	mov	r1, r3
 8007efa:	2200      	movs	r2, #0
 8007efc:	4b74      	ldr	r3, [pc, #464]	@ (80080d0 <_dtoa_r+0x2d8>)
 8007efe:	f7f8 f9cb 	bl	8000298 <__aeabi_dsub>
 8007f02:	a369      	add	r3, pc, #420	@ (adr r3, 80080a8 <_dtoa_r+0x2b0>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 fb7e 	bl	8000608 <__aeabi_dmul>
 8007f0c:	a368      	add	r3, pc, #416	@ (adr r3, 80080b0 <_dtoa_r+0x2b8>)
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	f7f8 f9c3 	bl	800029c <__adddf3>
 8007f16:	4604      	mov	r4, r0
 8007f18:	4630      	mov	r0, r6
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	f7f8 fb0a 	bl	8000534 <__aeabi_i2d>
 8007f20:	a365      	add	r3, pc, #404	@ (adr r3, 80080b8 <_dtoa_r+0x2c0>)
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f7f8 fb6f 	bl	8000608 <__aeabi_dmul>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4620      	mov	r0, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	f7f8 f9b3 	bl	800029c <__adddf3>
 8007f36:	4604      	mov	r4, r0
 8007f38:	460d      	mov	r5, r1
 8007f3a:	f7f8 fe15 	bl	8000b68 <__aeabi_d2iz>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4607      	mov	r7, r0
 8007f42:	2300      	movs	r3, #0
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 fdd0 	bl	8000aec <__aeabi_dcmplt>
 8007f4c:	b140      	cbz	r0, 8007f60 <_dtoa_r+0x168>
 8007f4e:	4638      	mov	r0, r7
 8007f50:	f7f8 faf0 	bl	8000534 <__aeabi_i2d>
 8007f54:	4622      	mov	r2, r4
 8007f56:	462b      	mov	r3, r5
 8007f58:	f7f8 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f5c:	b900      	cbnz	r0, 8007f60 <_dtoa_r+0x168>
 8007f5e:	3f01      	subs	r7, #1
 8007f60:	2f16      	cmp	r7, #22
 8007f62:	d851      	bhi.n	8008008 <_dtoa_r+0x210>
 8007f64:	4b5b      	ldr	r3, [pc, #364]	@ (80080d4 <_dtoa_r+0x2dc>)
 8007f66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f72:	f7f8 fdbb 	bl	8000aec <__aeabi_dcmplt>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d048      	beq.n	800800c <_dtoa_r+0x214>
 8007f7a:	3f01      	subs	r7, #1
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f82:	1b9b      	subs	r3, r3, r6
 8007f84:	1e5a      	subs	r2, r3, #1
 8007f86:	bf44      	itt	mi
 8007f88:	f1c3 0801 	rsbmi	r8, r3, #1
 8007f8c:	2300      	movmi	r3, #0
 8007f8e:	9208      	str	r2, [sp, #32]
 8007f90:	bf54      	ite	pl
 8007f92:	f04f 0800 	movpl.w	r8, #0
 8007f96:	9308      	strmi	r3, [sp, #32]
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	db39      	blt.n	8008010 <_dtoa_r+0x218>
 8007f9c:	9b08      	ldr	r3, [sp, #32]
 8007f9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007fa0:	443b      	add	r3, r7
 8007fa2:	9308      	str	r3, [sp, #32]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007faa:	2b09      	cmp	r3, #9
 8007fac:	d864      	bhi.n	8008078 <_dtoa_r+0x280>
 8007fae:	2b05      	cmp	r3, #5
 8007fb0:	bfc4      	itt	gt
 8007fb2:	3b04      	subgt	r3, #4
 8007fb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb8:	f1a3 0302 	sub.w	r3, r3, #2
 8007fbc:	bfcc      	ite	gt
 8007fbe:	2400      	movgt	r4, #0
 8007fc0:	2401      	movle	r4, #1
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d863      	bhi.n	800808e <_dtoa_r+0x296>
 8007fc6:	e8df f003 	tbb	[pc, r3]
 8007fca:	372a      	.short	0x372a
 8007fcc:	5535      	.short	0x5535
 8007fce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007fd2:	441e      	add	r6, r3
 8007fd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	bfc1      	itttt	gt
 8007fdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007fe0:	409f      	lslgt	r7, r3
 8007fe2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007fe6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007fea:	bfd6      	itet	le
 8007fec:	f1c3 0320 	rsble	r3, r3, #32
 8007ff0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ff4:	fa04 f003 	lslle.w	r0, r4, r3
 8007ff8:	f7f8 fa8c 	bl	8000514 <__aeabi_ui2d>
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008002:	3e01      	subs	r6, #1
 8008004:	9214      	str	r2, [sp, #80]	@ 0x50
 8008006:	e777      	b.n	8007ef8 <_dtoa_r+0x100>
 8008008:	2301      	movs	r3, #1
 800800a:	e7b8      	b.n	8007f7e <_dtoa_r+0x186>
 800800c:	9012      	str	r0, [sp, #72]	@ 0x48
 800800e:	e7b7      	b.n	8007f80 <_dtoa_r+0x188>
 8008010:	427b      	negs	r3, r7
 8008012:	930a      	str	r3, [sp, #40]	@ 0x28
 8008014:	2300      	movs	r3, #0
 8008016:	eba8 0807 	sub.w	r8, r8, r7
 800801a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800801c:	e7c4      	b.n	8007fa8 <_dtoa_r+0x1b0>
 800801e:	2300      	movs	r3, #0
 8008020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008022:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	dc35      	bgt.n	8008094 <_dtoa_r+0x29c>
 8008028:	2301      	movs	r3, #1
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	9307      	str	r3, [sp, #28]
 800802e:	461a      	mov	r2, r3
 8008030:	920e      	str	r2, [sp, #56]	@ 0x38
 8008032:	e00b      	b.n	800804c <_dtoa_r+0x254>
 8008034:	2301      	movs	r3, #1
 8008036:	e7f3      	b.n	8008020 <_dtoa_r+0x228>
 8008038:	2300      	movs	r3, #0
 800803a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800803c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800803e:	18fb      	adds	r3, r7, r3
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	2b01      	cmp	r3, #1
 8008046:	9307      	str	r3, [sp, #28]
 8008048:	bfb8      	it	lt
 800804a:	2301      	movlt	r3, #1
 800804c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008050:	2100      	movs	r1, #0
 8008052:	2204      	movs	r2, #4
 8008054:	f102 0514 	add.w	r5, r2, #20
 8008058:	429d      	cmp	r5, r3
 800805a:	d91f      	bls.n	800809c <_dtoa_r+0x2a4>
 800805c:	6041      	str	r1, [r0, #4]
 800805e:	4658      	mov	r0, fp
 8008060:	f001 f8da 	bl	8009218 <_Balloc>
 8008064:	4682      	mov	sl, r0
 8008066:	2800      	cmp	r0, #0
 8008068:	d13c      	bne.n	80080e4 <_dtoa_r+0x2ec>
 800806a:	4b1b      	ldr	r3, [pc, #108]	@ (80080d8 <_dtoa_r+0x2e0>)
 800806c:	4602      	mov	r2, r0
 800806e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008072:	e6d8      	b.n	8007e26 <_dtoa_r+0x2e>
 8008074:	2301      	movs	r3, #1
 8008076:	e7e0      	b.n	800803a <_dtoa_r+0x242>
 8008078:	2401      	movs	r4, #1
 800807a:	2300      	movs	r3, #0
 800807c:	9309      	str	r3, [sp, #36]	@ 0x24
 800807e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008080:	f04f 33ff 	mov.w	r3, #4294967295
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	9307      	str	r3, [sp, #28]
 8008088:	2200      	movs	r2, #0
 800808a:	2312      	movs	r3, #18
 800808c:	e7d0      	b.n	8008030 <_dtoa_r+0x238>
 800808e:	2301      	movs	r3, #1
 8008090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008092:	e7f5      	b.n	8008080 <_dtoa_r+0x288>
 8008094:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	9307      	str	r3, [sp, #28]
 800809a:	e7d7      	b.n	800804c <_dtoa_r+0x254>
 800809c:	3101      	adds	r1, #1
 800809e:	0052      	lsls	r2, r2, #1
 80080a0:	e7d8      	b.n	8008054 <_dtoa_r+0x25c>
 80080a2:	bf00      	nop
 80080a4:	f3af 8000 	nop.w
 80080a8:	636f4361 	.word	0x636f4361
 80080ac:	3fd287a7 	.word	0x3fd287a7
 80080b0:	8b60c8b3 	.word	0x8b60c8b3
 80080b4:	3fc68a28 	.word	0x3fc68a28
 80080b8:	509f79fb 	.word	0x509f79fb
 80080bc:	3fd34413 	.word	0x3fd34413
 80080c0:	0800cca7 	.word	0x0800cca7
 80080c4:	0800cd69 	.word	0x0800cd69
 80080c8:	7ff00000 	.word	0x7ff00000
 80080cc:	0800d0b1 	.word	0x0800d0b1
 80080d0:	3ff80000 	.word	0x3ff80000
 80080d4:	0800cec0 	.word	0x0800cec0
 80080d8:	0800cdc1 	.word	0x0800cdc1
 80080dc:	0800cd65 	.word	0x0800cd65
 80080e0:	0800d0b0 	.word	0x0800d0b0
 80080e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080e8:	6018      	str	r0, [r3, #0]
 80080ea:	9b07      	ldr	r3, [sp, #28]
 80080ec:	2b0e      	cmp	r3, #14
 80080ee:	f200 80a4 	bhi.w	800823a <_dtoa_r+0x442>
 80080f2:	2c00      	cmp	r4, #0
 80080f4:	f000 80a1 	beq.w	800823a <_dtoa_r+0x442>
 80080f8:	2f00      	cmp	r7, #0
 80080fa:	dd33      	ble.n	8008164 <_dtoa_r+0x36c>
 80080fc:	4bad      	ldr	r3, [pc, #692]	@ (80083b4 <_dtoa_r+0x5bc>)
 80080fe:	f007 020f 	and.w	r2, r7, #15
 8008102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008106:	ed93 7b00 	vldr	d7, [r3]
 800810a:	05f8      	lsls	r0, r7, #23
 800810c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008110:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008114:	d516      	bpl.n	8008144 <_dtoa_r+0x34c>
 8008116:	4ba8      	ldr	r3, [pc, #672]	@ (80083b8 <_dtoa_r+0x5c0>)
 8008118:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800811c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008120:	f7f8 fb9c 	bl	800085c <__aeabi_ddiv>
 8008124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008128:	f004 040f 	and.w	r4, r4, #15
 800812c:	2603      	movs	r6, #3
 800812e:	4da2      	ldr	r5, [pc, #648]	@ (80083b8 <_dtoa_r+0x5c0>)
 8008130:	b954      	cbnz	r4, 8008148 <_dtoa_r+0x350>
 8008132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800813a:	f7f8 fb8f 	bl	800085c <__aeabi_ddiv>
 800813e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008142:	e028      	b.n	8008196 <_dtoa_r+0x39e>
 8008144:	2602      	movs	r6, #2
 8008146:	e7f2      	b.n	800812e <_dtoa_r+0x336>
 8008148:	07e1      	lsls	r1, r4, #31
 800814a:	d508      	bpl.n	800815e <_dtoa_r+0x366>
 800814c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008150:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008154:	f7f8 fa58 	bl	8000608 <__aeabi_dmul>
 8008158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800815c:	3601      	adds	r6, #1
 800815e:	1064      	asrs	r4, r4, #1
 8008160:	3508      	adds	r5, #8
 8008162:	e7e5      	b.n	8008130 <_dtoa_r+0x338>
 8008164:	f000 80d2 	beq.w	800830c <_dtoa_r+0x514>
 8008168:	427c      	negs	r4, r7
 800816a:	4b92      	ldr	r3, [pc, #584]	@ (80083b4 <_dtoa_r+0x5bc>)
 800816c:	4d92      	ldr	r5, [pc, #584]	@ (80083b8 <_dtoa_r+0x5c0>)
 800816e:	f004 020f 	and.w	r2, r4, #15
 8008172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800817e:	f7f8 fa43 	bl	8000608 <__aeabi_dmul>
 8008182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008186:	1124      	asrs	r4, r4, #4
 8008188:	2300      	movs	r3, #0
 800818a:	2602      	movs	r6, #2
 800818c:	2c00      	cmp	r4, #0
 800818e:	f040 80b2 	bne.w	80082f6 <_dtoa_r+0x4fe>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1d3      	bne.n	800813e <_dtoa_r+0x346>
 8008196:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008198:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 80b7 	beq.w	8008310 <_dtoa_r+0x518>
 80081a2:	4b86      	ldr	r3, [pc, #536]	@ (80083bc <_dtoa_r+0x5c4>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	4620      	mov	r0, r4
 80081a8:	4629      	mov	r1, r5
 80081aa:	f7f8 fc9f 	bl	8000aec <__aeabi_dcmplt>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f000 80ae 	beq.w	8008310 <_dtoa_r+0x518>
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 80aa 	beq.w	8008310 <_dtoa_r+0x518>
 80081bc:	9b00      	ldr	r3, [sp, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	dd37      	ble.n	8008232 <_dtoa_r+0x43a>
 80081c2:	1e7b      	subs	r3, r7, #1
 80081c4:	9304      	str	r3, [sp, #16]
 80081c6:	4620      	mov	r0, r4
 80081c8:	4b7d      	ldr	r3, [pc, #500]	@ (80083c0 <_dtoa_r+0x5c8>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7f8 fa1b 	bl	8000608 <__aeabi_dmul>
 80081d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081d6:	9c00      	ldr	r4, [sp, #0]
 80081d8:	3601      	adds	r6, #1
 80081da:	4630      	mov	r0, r6
 80081dc:	f7f8 f9aa 	bl	8000534 <__aeabi_i2d>
 80081e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081e4:	f7f8 fa10 	bl	8000608 <__aeabi_dmul>
 80081e8:	4b76      	ldr	r3, [pc, #472]	@ (80083c4 <_dtoa_r+0x5cc>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	f7f8 f856 	bl	800029c <__adddf3>
 80081f0:	4605      	mov	r5, r0
 80081f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80081f6:	2c00      	cmp	r4, #0
 80081f8:	f040 808d 	bne.w	8008316 <_dtoa_r+0x51e>
 80081fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008200:	4b71      	ldr	r3, [pc, #452]	@ (80083c8 <_dtoa_r+0x5d0>)
 8008202:	2200      	movs	r2, #0
 8008204:	f7f8 f848 	bl	8000298 <__aeabi_dsub>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008210:	462a      	mov	r2, r5
 8008212:	4633      	mov	r3, r6
 8008214:	f7f8 fc88 	bl	8000b28 <__aeabi_dcmpgt>
 8008218:	2800      	cmp	r0, #0
 800821a:	f040 828b 	bne.w	8008734 <_dtoa_r+0x93c>
 800821e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008222:	462a      	mov	r2, r5
 8008224:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008228:	f7f8 fc60 	bl	8000aec <__aeabi_dcmplt>
 800822c:	2800      	cmp	r0, #0
 800822e:	f040 8128 	bne.w	8008482 <_dtoa_r+0x68a>
 8008232:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008236:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800823a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800823c:	2b00      	cmp	r3, #0
 800823e:	f2c0 815a 	blt.w	80084f6 <_dtoa_r+0x6fe>
 8008242:	2f0e      	cmp	r7, #14
 8008244:	f300 8157 	bgt.w	80084f6 <_dtoa_r+0x6fe>
 8008248:	4b5a      	ldr	r3, [pc, #360]	@ (80083b4 <_dtoa_r+0x5bc>)
 800824a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800824e:	ed93 7b00 	vldr	d7, [r3]
 8008252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008254:	2b00      	cmp	r3, #0
 8008256:	ed8d 7b00 	vstr	d7, [sp]
 800825a:	da03      	bge.n	8008264 <_dtoa_r+0x46c>
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f340 8101 	ble.w	8008466 <_dtoa_r+0x66e>
 8008264:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008268:	4656      	mov	r6, sl
 800826a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800826e:	4620      	mov	r0, r4
 8008270:	4629      	mov	r1, r5
 8008272:	f7f8 faf3 	bl	800085c <__aeabi_ddiv>
 8008276:	f7f8 fc77 	bl	8000b68 <__aeabi_d2iz>
 800827a:	4680      	mov	r8, r0
 800827c:	f7f8 f95a 	bl	8000534 <__aeabi_i2d>
 8008280:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008284:	f7f8 f9c0 	bl	8000608 <__aeabi_dmul>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4620      	mov	r0, r4
 800828e:	4629      	mov	r1, r5
 8008290:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008294:	f7f8 f800 	bl	8000298 <__aeabi_dsub>
 8008298:	f806 4b01 	strb.w	r4, [r6], #1
 800829c:	9d07      	ldr	r5, [sp, #28]
 800829e:	eba6 040a 	sub.w	r4, r6, sl
 80082a2:	42a5      	cmp	r5, r4
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	f040 8117 	bne.w	80084da <_dtoa_r+0x6e2>
 80082ac:	f7f7 fff6 	bl	800029c <__adddf3>
 80082b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082b4:	4604      	mov	r4, r0
 80082b6:	460d      	mov	r5, r1
 80082b8:	f7f8 fc36 	bl	8000b28 <__aeabi_dcmpgt>
 80082bc:	2800      	cmp	r0, #0
 80082be:	f040 80f9 	bne.w	80084b4 <_dtoa_r+0x6bc>
 80082c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082c6:	4620      	mov	r0, r4
 80082c8:	4629      	mov	r1, r5
 80082ca:	f7f8 fc05 	bl	8000ad8 <__aeabi_dcmpeq>
 80082ce:	b118      	cbz	r0, 80082d8 <_dtoa_r+0x4e0>
 80082d0:	f018 0f01 	tst.w	r8, #1
 80082d4:	f040 80ee 	bne.w	80084b4 <_dtoa_r+0x6bc>
 80082d8:	4649      	mov	r1, r9
 80082da:	4658      	mov	r0, fp
 80082dc:	f000 ffdc 	bl	8009298 <_Bfree>
 80082e0:	2300      	movs	r3, #0
 80082e2:	7033      	strb	r3, [r6, #0]
 80082e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082e6:	3701      	adds	r7, #1
 80082e8:	601f      	str	r7, [r3, #0]
 80082ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 831d 	beq.w	800892c <_dtoa_r+0xb34>
 80082f2:	601e      	str	r6, [r3, #0]
 80082f4:	e31a      	b.n	800892c <_dtoa_r+0xb34>
 80082f6:	07e2      	lsls	r2, r4, #31
 80082f8:	d505      	bpl.n	8008306 <_dtoa_r+0x50e>
 80082fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082fe:	f7f8 f983 	bl	8000608 <__aeabi_dmul>
 8008302:	3601      	adds	r6, #1
 8008304:	2301      	movs	r3, #1
 8008306:	1064      	asrs	r4, r4, #1
 8008308:	3508      	adds	r5, #8
 800830a:	e73f      	b.n	800818c <_dtoa_r+0x394>
 800830c:	2602      	movs	r6, #2
 800830e:	e742      	b.n	8008196 <_dtoa_r+0x39e>
 8008310:	9c07      	ldr	r4, [sp, #28]
 8008312:	9704      	str	r7, [sp, #16]
 8008314:	e761      	b.n	80081da <_dtoa_r+0x3e2>
 8008316:	4b27      	ldr	r3, [pc, #156]	@ (80083b4 <_dtoa_r+0x5bc>)
 8008318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800831a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800831e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008322:	4454      	add	r4, sl
 8008324:	2900      	cmp	r1, #0
 8008326:	d053      	beq.n	80083d0 <_dtoa_r+0x5d8>
 8008328:	4928      	ldr	r1, [pc, #160]	@ (80083cc <_dtoa_r+0x5d4>)
 800832a:	2000      	movs	r0, #0
 800832c:	f7f8 fa96 	bl	800085c <__aeabi_ddiv>
 8008330:	4633      	mov	r3, r6
 8008332:	462a      	mov	r2, r5
 8008334:	f7f7 ffb0 	bl	8000298 <__aeabi_dsub>
 8008338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800833c:	4656      	mov	r6, sl
 800833e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008342:	f7f8 fc11 	bl	8000b68 <__aeabi_d2iz>
 8008346:	4605      	mov	r5, r0
 8008348:	f7f8 f8f4 	bl	8000534 <__aeabi_i2d>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008354:	f7f7 ffa0 	bl	8000298 <__aeabi_dsub>
 8008358:	3530      	adds	r5, #48	@ 0x30
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008362:	f806 5b01 	strb.w	r5, [r6], #1
 8008366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800836a:	f7f8 fbbf 	bl	8000aec <__aeabi_dcmplt>
 800836e:	2800      	cmp	r0, #0
 8008370:	d171      	bne.n	8008456 <_dtoa_r+0x65e>
 8008372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008376:	4911      	ldr	r1, [pc, #68]	@ (80083bc <_dtoa_r+0x5c4>)
 8008378:	2000      	movs	r0, #0
 800837a:	f7f7 ff8d 	bl	8000298 <__aeabi_dsub>
 800837e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008382:	f7f8 fbb3 	bl	8000aec <__aeabi_dcmplt>
 8008386:	2800      	cmp	r0, #0
 8008388:	f040 8095 	bne.w	80084b6 <_dtoa_r+0x6be>
 800838c:	42a6      	cmp	r6, r4
 800838e:	f43f af50 	beq.w	8008232 <_dtoa_r+0x43a>
 8008392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008396:	4b0a      	ldr	r3, [pc, #40]	@ (80083c0 <_dtoa_r+0x5c8>)
 8008398:	2200      	movs	r2, #0
 800839a:	f7f8 f935 	bl	8000608 <__aeabi_dmul>
 800839e:	4b08      	ldr	r3, [pc, #32]	@ (80083c0 <_dtoa_r+0x5c8>)
 80083a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083a4:	2200      	movs	r2, #0
 80083a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083aa:	f7f8 f92d 	bl	8000608 <__aeabi_dmul>
 80083ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083b2:	e7c4      	b.n	800833e <_dtoa_r+0x546>
 80083b4:	0800cec0 	.word	0x0800cec0
 80083b8:	0800ce98 	.word	0x0800ce98
 80083bc:	3ff00000 	.word	0x3ff00000
 80083c0:	40240000 	.word	0x40240000
 80083c4:	401c0000 	.word	0x401c0000
 80083c8:	40140000 	.word	0x40140000
 80083cc:	3fe00000 	.word	0x3fe00000
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	f7f8 f918 	bl	8000608 <__aeabi_dmul>
 80083d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80083de:	4656      	mov	r6, sl
 80083e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083e4:	f7f8 fbc0 	bl	8000b68 <__aeabi_d2iz>
 80083e8:	4605      	mov	r5, r0
 80083ea:	f7f8 f8a3 	bl	8000534 <__aeabi_i2d>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083f6:	f7f7 ff4f 	bl	8000298 <__aeabi_dsub>
 80083fa:	3530      	adds	r5, #48	@ 0x30
 80083fc:	f806 5b01 	strb.w	r5, [r6], #1
 8008400:	4602      	mov	r2, r0
 8008402:	460b      	mov	r3, r1
 8008404:	42a6      	cmp	r6, r4
 8008406:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800840a:	f04f 0200 	mov.w	r2, #0
 800840e:	d124      	bne.n	800845a <_dtoa_r+0x662>
 8008410:	4bac      	ldr	r3, [pc, #688]	@ (80086c4 <_dtoa_r+0x8cc>)
 8008412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008416:	f7f7 ff41 	bl	800029c <__adddf3>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008422:	f7f8 fb81 	bl	8000b28 <__aeabi_dcmpgt>
 8008426:	2800      	cmp	r0, #0
 8008428:	d145      	bne.n	80084b6 <_dtoa_r+0x6be>
 800842a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800842e:	49a5      	ldr	r1, [pc, #660]	@ (80086c4 <_dtoa_r+0x8cc>)
 8008430:	2000      	movs	r0, #0
 8008432:	f7f7 ff31 	bl	8000298 <__aeabi_dsub>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800843e:	f7f8 fb55 	bl	8000aec <__aeabi_dcmplt>
 8008442:	2800      	cmp	r0, #0
 8008444:	f43f aef5 	beq.w	8008232 <_dtoa_r+0x43a>
 8008448:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800844a:	1e73      	subs	r3, r6, #1
 800844c:	9315      	str	r3, [sp, #84]	@ 0x54
 800844e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008452:	2b30      	cmp	r3, #48	@ 0x30
 8008454:	d0f8      	beq.n	8008448 <_dtoa_r+0x650>
 8008456:	9f04      	ldr	r7, [sp, #16]
 8008458:	e73e      	b.n	80082d8 <_dtoa_r+0x4e0>
 800845a:	4b9b      	ldr	r3, [pc, #620]	@ (80086c8 <_dtoa_r+0x8d0>)
 800845c:	f7f8 f8d4 	bl	8000608 <__aeabi_dmul>
 8008460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008464:	e7bc      	b.n	80083e0 <_dtoa_r+0x5e8>
 8008466:	d10c      	bne.n	8008482 <_dtoa_r+0x68a>
 8008468:	4b98      	ldr	r3, [pc, #608]	@ (80086cc <_dtoa_r+0x8d4>)
 800846a:	2200      	movs	r2, #0
 800846c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008470:	f7f8 f8ca 	bl	8000608 <__aeabi_dmul>
 8008474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008478:	f7f8 fb4c 	bl	8000b14 <__aeabi_dcmpge>
 800847c:	2800      	cmp	r0, #0
 800847e:	f000 8157 	beq.w	8008730 <_dtoa_r+0x938>
 8008482:	2400      	movs	r4, #0
 8008484:	4625      	mov	r5, r4
 8008486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008488:	43db      	mvns	r3, r3
 800848a:	9304      	str	r3, [sp, #16]
 800848c:	4656      	mov	r6, sl
 800848e:	2700      	movs	r7, #0
 8008490:	4621      	mov	r1, r4
 8008492:	4658      	mov	r0, fp
 8008494:	f000 ff00 	bl	8009298 <_Bfree>
 8008498:	2d00      	cmp	r5, #0
 800849a:	d0dc      	beq.n	8008456 <_dtoa_r+0x65e>
 800849c:	b12f      	cbz	r7, 80084aa <_dtoa_r+0x6b2>
 800849e:	42af      	cmp	r7, r5
 80084a0:	d003      	beq.n	80084aa <_dtoa_r+0x6b2>
 80084a2:	4639      	mov	r1, r7
 80084a4:	4658      	mov	r0, fp
 80084a6:	f000 fef7 	bl	8009298 <_Bfree>
 80084aa:	4629      	mov	r1, r5
 80084ac:	4658      	mov	r0, fp
 80084ae:	f000 fef3 	bl	8009298 <_Bfree>
 80084b2:	e7d0      	b.n	8008456 <_dtoa_r+0x65e>
 80084b4:	9704      	str	r7, [sp, #16]
 80084b6:	4633      	mov	r3, r6
 80084b8:	461e      	mov	r6, r3
 80084ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084be:	2a39      	cmp	r2, #57	@ 0x39
 80084c0:	d107      	bne.n	80084d2 <_dtoa_r+0x6da>
 80084c2:	459a      	cmp	sl, r3
 80084c4:	d1f8      	bne.n	80084b8 <_dtoa_r+0x6c0>
 80084c6:	9a04      	ldr	r2, [sp, #16]
 80084c8:	3201      	adds	r2, #1
 80084ca:	9204      	str	r2, [sp, #16]
 80084cc:	2230      	movs	r2, #48	@ 0x30
 80084ce:	f88a 2000 	strb.w	r2, [sl]
 80084d2:	781a      	ldrb	r2, [r3, #0]
 80084d4:	3201      	adds	r2, #1
 80084d6:	701a      	strb	r2, [r3, #0]
 80084d8:	e7bd      	b.n	8008456 <_dtoa_r+0x65e>
 80084da:	4b7b      	ldr	r3, [pc, #492]	@ (80086c8 <_dtoa_r+0x8d0>)
 80084dc:	2200      	movs	r2, #0
 80084de:	f7f8 f893 	bl	8000608 <__aeabi_dmul>
 80084e2:	2200      	movs	r2, #0
 80084e4:	2300      	movs	r3, #0
 80084e6:	4604      	mov	r4, r0
 80084e8:	460d      	mov	r5, r1
 80084ea:	f7f8 faf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f43f aebb 	beq.w	800826a <_dtoa_r+0x472>
 80084f4:	e6f0      	b.n	80082d8 <_dtoa_r+0x4e0>
 80084f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	f000 80db 	beq.w	80086b4 <_dtoa_r+0x8bc>
 80084fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008500:	2a01      	cmp	r2, #1
 8008502:	f300 80bf 	bgt.w	8008684 <_dtoa_r+0x88c>
 8008506:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008508:	2a00      	cmp	r2, #0
 800850a:	f000 80b7 	beq.w	800867c <_dtoa_r+0x884>
 800850e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008512:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008514:	4646      	mov	r6, r8
 8008516:	9a08      	ldr	r2, [sp, #32]
 8008518:	2101      	movs	r1, #1
 800851a:	441a      	add	r2, r3
 800851c:	4658      	mov	r0, fp
 800851e:	4498      	add	r8, r3
 8008520:	9208      	str	r2, [sp, #32]
 8008522:	f000 ffb7 	bl	8009494 <__i2b>
 8008526:	4605      	mov	r5, r0
 8008528:	b15e      	cbz	r6, 8008542 <_dtoa_r+0x74a>
 800852a:	9b08      	ldr	r3, [sp, #32]
 800852c:	2b00      	cmp	r3, #0
 800852e:	dd08      	ble.n	8008542 <_dtoa_r+0x74a>
 8008530:	42b3      	cmp	r3, r6
 8008532:	9a08      	ldr	r2, [sp, #32]
 8008534:	bfa8      	it	ge
 8008536:	4633      	movge	r3, r6
 8008538:	eba8 0803 	sub.w	r8, r8, r3
 800853c:	1af6      	subs	r6, r6, r3
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008544:	b1f3      	cbz	r3, 8008584 <_dtoa_r+0x78c>
 8008546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 80b7 	beq.w	80086bc <_dtoa_r+0x8c4>
 800854e:	b18c      	cbz	r4, 8008574 <_dtoa_r+0x77c>
 8008550:	4629      	mov	r1, r5
 8008552:	4622      	mov	r2, r4
 8008554:	4658      	mov	r0, fp
 8008556:	f001 f85d 	bl	8009614 <__pow5mult>
 800855a:	464a      	mov	r2, r9
 800855c:	4601      	mov	r1, r0
 800855e:	4605      	mov	r5, r0
 8008560:	4658      	mov	r0, fp
 8008562:	f000 ffad 	bl	80094c0 <__multiply>
 8008566:	4649      	mov	r1, r9
 8008568:	9004      	str	r0, [sp, #16]
 800856a:	4658      	mov	r0, fp
 800856c:	f000 fe94 	bl	8009298 <_Bfree>
 8008570:	9b04      	ldr	r3, [sp, #16]
 8008572:	4699      	mov	r9, r3
 8008574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008576:	1b1a      	subs	r2, r3, r4
 8008578:	d004      	beq.n	8008584 <_dtoa_r+0x78c>
 800857a:	4649      	mov	r1, r9
 800857c:	4658      	mov	r0, fp
 800857e:	f001 f849 	bl	8009614 <__pow5mult>
 8008582:	4681      	mov	r9, r0
 8008584:	2101      	movs	r1, #1
 8008586:	4658      	mov	r0, fp
 8008588:	f000 ff84 	bl	8009494 <__i2b>
 800858c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800858e:	4604      	mov	r4, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 81cf 	beq.w	8008934 <_dtoa_r+0xb3c>
 8008596:	461a      	mov	r2, r3
 8008598:	4601      	mov	r1, r0
 800859a:	4658      	mov	r0, fp
 800859c:	f001 f83a 	bl	8009614 <__pow5mult>
 80085a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	4604      	mov	r4, r0
 80085a6:	f300 8095 	bgt.w	80086d4 <_dtoa_r+0x8dc>
 80085aa:	9b02      	ldr	r3, [sp, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 8087 	bne.w	80086c0 <_dtoa_r+0x8c8>
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f040 8089 	bne.w	80086d0 <_dtoa_r+0x8d8>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085c4:	0d1b      	lsrs	r3, r3, #20
 80085c6:	051b      	lsls	r3, r3, #20
 80085c8:	b12b      	cbz	r3, 80085d6 <_dtoa_r+0x7de>
 80085ca:	9b08      	ldr	r3, [sp, #32]
 80085cc:	3301      	adds	r3, #1
 80085ce:	9308      	str	r3, [sp, #32]
 80085d0:	f108 0801 	add.w	r8, r8, #1
 80085d4:	2301      	movs	r3, #1
 80085d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 81b0 	beq.w	8008940 <_dtoa_r+0xb48>
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085e6:	6918      	ldr	r0, [r3, #16]
 80085e8:	f000 ff08 	bl	80093fc <__hi0bits>
 80085ec:	f1c0 0020 	rsb	r0, r0, #32
 80085f0:	9b08      	ldr	r3, [sp, #32]
 80085f2:	4418      	add	r0, r3
 80085f4:	f010 001f 	ands.w	r0, r0, #31
 80085f8:	d077      	beq.n	80086ea <_dtoa_r+0x8f2>
 80085fa:	f1c0 0320 	rsb	r3, r0, #32
 80085fe:	2b04      	cmp	r3, #4
 8008600:	dd6b      	ble.n	80086da <_dtoa_r+0x8e2>
 8008602:	9b08      	ldr	r3, [sp, #32]
 8008604:	f1c0 001c 	rsb	r0, r0, #28
 8008608:	4403      	add	r3, r0
 800860a:	4480      	add	r8, r0
 800860c:	4406      	add	r6, r0
 800860e:	9308      	str	r3, [sp, #32]
 8008610:	f1b8 0f00 	cmp.w	r8, #0
 8008614:	dd05      	ble.n	8008622 <_dtoa_r+0x82a>
 8008616:	4649      	mov	r1, r9
 8008618:	4642      	mov	r2, r8
 800861a:	4658      	mov	r0, fp
 800861c:	f001 f854 	bl	80096c8 <__lshift>
 8008620:	4681      	mov	r9, r0
 8008622:	9b08      	ldr	r3, [sp, #32]
 8008624:	2b00      	cmp	r3, #0
 8008626:	dd05      	ble.n	8008634 <_dtoa_r+0x83c>
 8008628:	4621      	mov	r1, r4
 800862a:	461a      	mov	r2, r3
 800862c:	4658      	mov	r0, fp
 800862e:	f001 f84b 	bl	80096c8 <__lshift>
 8008632:	4604      	mov	r4, r0
 8008634:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008636:	2b00      	cmp	r3, #0
 8008638:	d059      	beq.n	80086ee <_dtoa_r+0x8f6>
 800863a:	4621      	mov	r1, r4
 800863c:	4648      	mov	r0, r9
 800863e:	f001 f8af 	bl	80097a0 <__mcmp>
 8008642:	2800      	cmp	r0, #0
 8008644:	da53      	bge.n	80086ee <_dtoa_r+0x8f6>
 8008646:	1e7b      	subs	r3, r7, #1
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	4649      	mov	r1, r9
 800864c:	2300      	movs	r3, #0
 800864e:	220a      	movs	r2, #10
 8008650:	4658      	mov	r0, fp
 8008652:	f000 fe43 	bl	80092dc <__multadd>
 8008656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008658:	4681      	mov	r9, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 8172 	beq.w	8008944 <_dtoa_r+0xb4c>
 8008660:	2300      	movs	r3, #0
 8008662:	4629      	mov	r1, r5
 8008664:	220a      	movs	r2, #10
 8008666:	4658      	mov	r0, fp
 8008668:	f000 fe38 	bl	80092dc <__multadd>
 800866c:	9b00      	ldr	r3, [sp, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	4605      	mov	r5, r0
 8008672:	dc67      	bgt.n	8008744 <_dtoa_r+0x94c>
 8008674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008676:	2b02      	cmp	r3, #2
 8008678:	dc41      	bgt.n	80086fe <_dtoa_r+0x906>
 800867a:	e063      	b.n	8008744 <_dtoa_r+0x94c>
 800867c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800867e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008682:	e746      	b.n	8008512 <_dtoa_r+0x71a>
 8008684:	9b07      	ldr	r3, [sp, #28]
 8008686:	1e5c      	subs	r4, r3, #1
 8008688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800868a:	42a3      	cmp	r3, r4
 800868c:	bfbf      	itttt	lt
 800868e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008690:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008692:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008694:	1ae3      	sublt	r3, r4, r3
 8008696:	bfb4      	ite	lt
 8008698:	18d2      	addlt	r2, r2, r3
 800869a:	1b1c      	subge	r4, r3, r4
 800869c:	9b07      	ldr	r3, [sp, #28]
 800869e:	bfbc      	itt	lt
 80086a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80086a2:	2400      	movlt	r4, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	bfb5      	itete	lt
 80086a8:	eba8 0603 	sublt.w	r6, r8, r3
 80086ac:	9b07      	ldrge	r3, [sp, #28]
 80086ae:	2300      	movlt	r3, #0
 80086b0:	4646      	movge	r6, r8
 80086b2:	e730      	b.n	8008516 <_dtoa_r+0x71e>
 80086b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80086b8:	4646      	mov	r6, r8
 80086ba:	e735      	b.n	8008528 <_dtoa_r+0x730>
 80086bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086be:	e75c      	b.n	800857a <_dtoa_r+0x782>
 80086c0:	2300      	movs	r3, #0
 80086c2:	e788      	b.n	80085d6 <_dtoa_r+0x7de>
 80086c4:	3fe00000 	.word	0x3fe00000
 80086c8:	40240000 	.word	0x40240000
 80086cc:	40140000 	.word	0x40140000
 80086d0:	9b02      	ldr	r3, [sp, #8]
 80086d2:	e780      	b.n	80085d6 <_dtoa_r+0x7de>
 80086d4:	2300      	movs	r3, #0
 80086d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80086d8:	e782      	b.n	80085e0 <_dtoa_r+0x7e8>
 80086da:	d099      	beq.n	8008610 <_dtoa_r+0x818>
 80086dc:	9a08      	ldr	r2, [sp, #32]
 80086de:	331c      	adds	r3, #28
 80086e0:	441a      	add	r2, r3
 80086e2:	4498      	add	r8, r3
 80086e4:	441e      	add	r6, r3
 80086e6:	9208      	str	r2, [sp, #32]
 80086e8:	e792      	b.n	8008610 <_dtoa_r+0x818>
 80086ea:	4603      	mov	r3, r0
 80086ec:	e7f6      	b.n	80086dc <_dtoa_r+0x8e4>
 80086ee:	9b07      	ldr	r3, [sp, #28]
 80086f0:	9704      	str	r7, [sp, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dc20      	bgt.n	8008738 <_dtoa_r+0x940>
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	dd1e      	ble.n	800873c <_dtoa_r+0x944>
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	f47f aec0 	bne.w	8008486 <_dtoa_r+0x68e>
 8008706:	4621      	mov	r1, r4
 8008708:	2205      	movs	r2, #5
 800870a:	4658      	mov	r0, fp
 800870c:	f000 fde6 	bl	80092dc <__multadd>
 8008710:	4601      	mov	r1, r0
 8008712:	4604      	mov	r4, r0
 8008714:	4648      	mov	r0, r9
 8008716:	f001 f843 	bl	80097a0 <__mcmp>
 800871a:	2800      	cmp	r0, #0
 800871c:	f77f aeb3 	ble.w	8008486 <_dtoa_r+0x68e>
 8008720:	4656      	mov	r6, sl
 8008722:	2331      	movs	r3, #49	@ 0x31
 8008724:	f806 3b01 	strb.w	r3, [r6], #1
 8008728:	9b04      	ldr	r3, [sp, #16]
 800872a:	3301      	adds	r3, #1
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	e6ae      	b.n	800848e <_dtoa_r+0x696>
 8008730:	9c07      	ldr	r4, [sp, #28]
 8008732:	9704      	str	r7, [sp, #16]
 8008734:	4625      	mov	r5, r4
 8008736:	e7f3      	b.n	8008720 <_dtoa_r+0x928>
 8008738:	9b07      	ldr	r3, [sp, #28]
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 8104 	beq.w	800894c <_dtoa_r+0xb54>
 8008744:	2e00      	cmp	r6, #0
 8008746:	dd05      	ble.n	8008754 <_dtoa_r+0x95c>
 8008748:	4629      	mov	r1, r5
 800874a:	4632      	mov	r2, r6
 800874c:	4658      	mov	r0, fp
 800874e:	f000 ffbb 	bl	80096c8 <__lshift>
 8008752:	4605      	mov	r5, r0
 8008754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d05a      	beq.n	8008810 <_dtoa_r+0xa18>
 800875a:	6869      	ldr	r1, [r5, #4]
 800875c:	4658      	mov	r0, fp
 800875e:	f000 fd5b 	bl	8009218 <_Balloc>
 8008762:	4606      	mov	r6, r0
 8008764:	b928      	cbnz	r0, 8008772 <_dtoa_r+0x97a>
 8008766:	4b84      	ldr	r3, [pc, #528]	@ (8008978 <_dtoa_r+0xb80>)
 8008768:	4602      	mov	r2, r0
 800876a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800876e:	f7ff bb5a 	b.w	8007e26 <_dtoa_r+0x2e>
 8008772:	692a      	ldr	r2, [r5, #16]
 8008774:	3202      	adds	r2, #2
 8008776:	0092      	lsls	r2, r2, #2
 8008778:	f105 010c 	add.w	r1, r5, #12
 800877c:	300c      	adds	r0, #12
 800877e:	f7ff fa78 	bl	8007c72 <memcpy>
 8008782:	2201      	movs	r2, #1
 8008784:	4631      	mov	r1, r6
 8008786:	4658      	mov	r0, fp
 8008788:	f000 ff9e 	bl	80096c8 <__lshift>
 800878c:	f10a 0301 	add.w	r3, sl, #1
 8008790:	9307      	str	r3, [sp, #28]
 8008792:	9b00      	ldr	r3, [sp, #0]
 8008794:	4453      	add	r3, sl
 8008796:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008798:	9b02      	ldr	r3, [sp, #8]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	462f      	mov	r7, r5
 80087a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80087a2:	4605      	mov	r5, r0
 80087a4:	9b07      	ldr	r3, [sp, #28]
 80087a6:	4621      	mov	r1, r4
 80087a8:	3b01      	subs	r3, #1
 80087aa:	4648      	mov	r0, r9
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	f7ff fa9b 	bl	8007ce8 <quorem>
 80087b2:	4639      	mov	r1, r7
 80087b4:	9002      	str	r0, [sp, #8]
 80087b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087ba:	4648      	mov	r0, r9
 80087bc:	f000 fff0 	bl	80097a0 <__mcmp>
 80087c0:	462a      	mov	r2, r5
 80087c2:	9008      	str	r0, [sp, #32]
 80087c4:	4621      	mov	r1, r4
 80087c6:	4658      	mov	r0, fp
 80087c8:	f001 f806 	bl	80097d8 <__mdiff>
 80087cc:	68c2      	ldr	r2, [r0, #12]
 80087ce:	4606      	mov	r6, r0
 80087d0:	bb02      	cbnz	r2, 8008814 <_dtoa_r+0xa1c>
 80087d2:	4601      	mov	r1, r0
 80087d4:	4648      	mov	r0, r9
 80087d6:	f000 ffe3 	bl	80097a0 <__mcmp>
 80087da:	4602      	mov	r2, r0
 80087dc:	4631      	mov	r1, r6
 80087de:	4658      	mov	r0, fp
 80087e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80087e2:	f000 fd59 	bl	8009298 <_Bfree>
 80087e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ea:	9e07      	ldr	r6, [sp, #28]
 80087ec:	ea43 0102 	orr.w	r1, r3, r2
 80087f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f2:	4319      	orrs	r1, r3
 80087f4:	d110      	bne.n	8008818 <_dtoa_r+0xa20>
 80087f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087fa:	d029      	beq.n	8008850 <_dtoa_r+0xa58>
 80087fc:	9b08      	ldr	r3, [sp, #32]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	dd02      	ble.n	8008808 <_dtoa_r+0xa10>
 8008802:	9b02      	ldr	r3, [sp, #8]
 8008804:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008808:	9b00      	ldr	r3, [sp, #0]
 800880a:	f883 8000 	strb.w	r8, [r3]
 800880e:	e63f      	b.n	8008490 <_dtoa_r+0x698>
 8008810:	4628      	mov	r0, r5
 8008812:	e7bb      	b.n	800878c <_dtoa_r+0x994>
 8008814:	2201      	movs	r2, #1
 8008816:	e7e1      	b.n	80087dc <_dtoa_r+0x9e4>
 8008818:	9b08      	ldr	r3, [sp, #32]
 800881a:	2b00      	cmp	r3, #0
 800881c:	db04      	blt.n	8008828 <_dtoa_r+0xa30>
 800881e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008820:	430b      	orrs	r3, r1
 8008822:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008824:	430b      	orrs	r3, r1
 8008826:	d120      	bne.n	800886a <_dtoa_r+0xa72>
 8008828:	2a00      	cmp	r2, #0
 800882a:	dded      	ble.n	8008808 <_dtoa_r+0xa10>
 800882c:	4649      	mov	r1, r9
 800882e:	2201      	movs	r2, #1
 8008830:	4658      	mov	r0, fp
 8008832:	f000 ff49 	bl	80096c8 <__lshift>
 8008836:	4621      	mov	r1, r4
 8008838:	4681      	mov	r9, r0
 800883a:	f000 ffb1 	bl	80097a0 <__mcmp>
 800883e:	2800      	cmp	r0, #0
 8008840:	dc03      	bgt.n	800884a <_dtoa_r+0xa52>
 8008842:	d1e1      	bne.n	8008808 <_dtoa_r+0xa10>
 8008844:	f018 0f01 	tst.w	r8, #1
 8008848:	d0de      	beq.n	8008808 <_dtoa_r+0xa10>
 800884a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800884e:	d1d8      	bne.n	8008802 <_dtoa_r+0xa0a>
 8008850:	9a00      	ldr	r2, [sp, #0]
 8008852:	2339      	movs	r3, #57	@ 0x39
 8008854:	7013      	strb	r3, [r2, #0]
 8008856:	4633      	mov	r3, r6
 8008858:	461e      	mov	r6, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008860:	2a39      	cmp	r2, #57	@ 0x39
 8008862:	d052      	beq.n	800890a <_dtoa_r+0xb12>
 8008864:	3201      	adds	r2, #1
 8008866:	701a      	strb	r2, [r3, #0]
 8008868:	e612      	b.n	8008490 <_dtoa_r+0x698>
 800886a:	2a00      	cmp	r2, #0
 800886c:	dd07      	ble.n	800887e <_dtoa_r+0xa86>
 800886e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008872:	d0ed      	beq.n	8008850 <_dtoa_r+0xa58>
 8008874:	9a00      	ldr	r2, [sp, #0]
 8008876:	f108 0301 	add.w	r3, r8, #1
 800887a:	7013      	strb	r3, [r2, #0]
 800887c:	e608      	b.n	8008490 <_dtoa_r+0x698>
 800887e:	9b07      	ldr	r3, [sp, #28]
 8008880:	9a07      	ldr	r2, [sp, #28]
 8008882:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008888:	4293      	cmp	r3, r2
 800888a:	d028      	beq.n	80088de <_dtoa_r+0xae6>
 800888c:	4649      	mov	r1, r9
 800888e:	2300      	movs	r3, #0
 8008890:	220a      	movs	r2, #10
 8008892:	4658      	mov	r0, fp
 8008894:	f000 fd22 	bl	80092dc <__multadd>
 8008898:	42af      	cmp	r7, r5
 800889a:	4681      	mov	r9, r0
 800889c:	f04f 0300 	mov.w	r3, #0
 80088a0:	f04f 020a 	mov.w	r2, #10
 80088a4:	4639      	mov	r1, r7
 80088a6:	4658      	mov	r0, fp
 80088a8:	d107      	bne.n	80088ba <_dtoa_r+0xac2>
 80088aa:	f000 fd17 	bl	80092dc <__multadd>
 80088ae:	4607      	mov	r7, r0
 80088b0:	4605      	mov	r5, r0
 80088b2:	9b07      	ldr	r3, [sp, #28]
 80088b4:	3301      	adds	r3, #1
 80088b6:	9307      	str	r3, [sp, #28]
 80088b8:	e774      	b.n	80087a4 <_dtoa_r+0x9ac>
 80088ba:	f000 fd0f 	bl	80092dc <__multadd>
 80088be:	4629      	mov	r1, r5
 80088c0:	4607      	mov	r7, r0
 80088c2:	2300      	movs	r3, #0
 80088c4:	220a      	movs	r2, #10
 80088c6:	4658      	mov	r0, fp
 80088c8:	f000 fd08 	bl	80092dc <__multadd>
 80088cc:	4605      	mov	r5, r0
 80088ce:	e7f0      	b.n	80088b2 <_dtoa_r+0xaba>
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bfcc      	ite	gt
 80088d6:	461e      	movgt	r6, r3
 80088d8:	2601      	movle	r6, #1
 80088da:	4456      	add	r6, sl
 80088dc:	2700      	movs	r7, #0
 80088de:	4649      	mov	r1, r9
 80088e0:	2201      	movs	r2, #1
 80088e2:	4658      	mov	r0, fp
 80088e4:	f000 fef0 	bl	80096c8 <__lshift>
 80088e8:	4621      	mov	r1, r4
 80088ea:	4681      	mov	r9, r0
 80088ec:	f000 ff58 	bl	80097a0 <__mcmp>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	dcb0      	bgt.n	8008856 <_dtoa_r+0xa5e>
 80088f4:	d102      	bne.n	80088fc <_dtoa_r+0xb04>
 80088f6:	f018 0f01 	tst.w	r8, #1
 80088fa:	d1ac      	bne.n	8008856 <_dtoa_r+0xa5e>
 80088fc:	4633      	mov	r3, r6
 80088fe:	461e      	mov	r6, r3
 8008900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008904:	2a30      	cmp	r2, #48	@ 0x30
 8008906:	d0fa      	beq.n	80088fe <_dtoa_r+0xb06>
 8008908:	e5c2      	b.n	8008490 <_dtoa_r+0x698>
 800890a:	459a      	cmp	sl, r3
 800890c:	d1a4      	bne.n	8008858 <_dtoa_r+0xa60>
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	3301      	adds	r3, #1
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	2331      	movs	r3, #49	@ 0x31
 8008916:	f88a 3000 	strb.w	r3, [sl]
 800891a:	e5b9      	b.n	8008490 <_dtoa_r+0x698>
 800891c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800891e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800897c <_dtoa_r+0xb84>
 8008922:	b11b      	cbz	r3, 800892c <_dtoa_r+0xb34>
 8008924:	f10a 0308 	add.w	r3, sl, #8
 8008928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800892a:	6013      	str	r3, [r2, #0]
 800892c:	4650      	mov	r0, sl
 800892e:	b019      	add	sp, #100	@ 0x64
 8008930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008936:	2b01      	cmp	r3, #1
 8008938:	f77f ae37 	ble.w	80085aa <_dtoa_r+0x7b2>
 800893c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800893e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008940:	2001      	movs	r0, #1
 8008942:	e655      	b.n	80085f0 <_dtoa_r+0x7f8>
 8008944:	9b00      	ldr	r3, [sp, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f77f aed6 	ble.w	80086f8 <_dtoa_r+0x900>
 800894c:	4656      	mov	r6, sl
 800894e:	4621      	mov	r1, r4
 8008950:	4648      	mov	r0, r9
 8008952:	f7ff f9c9 	bl	8007ce8 <quorem>
 8008956:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800895a:	f806 8b01 	strb.w	r8, [r6], #1
 800895e:	9b00      	ldr	r3, [sp, #0]
 8008960:	eba6 020a 	sub.w	r2, r6, sl
 8008964:	4293      	cmp	r3, r2
 8008966:	ddb3      	ble.n	80088d0 <_dtoa_r+0xad8>
 8008968:	4649      	mov	r1, r9
 800896a:	2300      	movs	r3, #0
 800896c:	220a      	movs	r2, #10
 800896e:	4658      	mov	r0, fp
 8008970:	f000 fcb4 	bl	80092dc <__multadd>
 8008974:	4681      	mov	r9, r0
 8008976:	e7ea      	b.n	800894e <_dtoa_r+0xb56>
 8008978:	0800cdc1 	.word	0x0800cdc1
 800897c:	0800cd5c 	.word	0x0800cd5c

08008980 <_free_r>:
 8008980:	b538      	push	{r3, r4, r5, lr}
 8008982:	4605      	mov	r5, r0
 8008984:	2900      	cmp	r1, #0
 8008986:	d041      	beq.n	8008a0c <_free_r+0x8c>
 8008988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800898c:	1f0c      	subs	r4, r1, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	bfb8      	it	lt
 8008992:	18e4      	addlt	r4, r4, r3
 8008994:	f000 fc34 	bl	8009200 <__malloc_lock>
 8008998:	4a1d      	ldr	r2, [pc, #116]	@ (8008a10 <_free_r+0x90>)
 800899a:	6813      	ldr	r3, [r2, #0]
 800899c:	b933      	cbnz	r3, 80089ac <_free_r+0x2c>
 800899e:	6063      	str	r3, [r4, #4]
 80089a0:	6014      	str	r4, [r2, #0]
 80089a2:	4628      	mov	r0, r5
 80089a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089a8:	f000 bc30 	b.w	800920c <__malloc_unlock>
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	d908      	bls.n	80089c2 <_free_r+0x42>
 80089b0:	6820      	ldr	r0, [r4, #0]
 80089b2:	1821      	adds	r1, r4, r0
 80089b4:	428b      	cmp	r3, r1
 80089b6:	bf01      	itttt	eq
 80089b8:	6819      	ldreq	r1, [r3, #0]
 80089ba:	685b      	ldreq	r3, [r3, #4]
 80089bc:	1809      	addeq	r1, r1, r0
 80089be:	6021      	streq	r1, [r4, #0]
 80089c0:	e7ed      	b.n	800899e <_free_r+0x1e>
 80089c2:	461a      	mov	r2, r3
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	b10b      	cbz	r3, 80089cc <_free_r+0x4c>
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d9fa      	bls.n	80089c2 <_free_r+0x42>
 80089cc:	6811      	ldr	r1, [r2, #0]
 80089ce:	1850      	adds	r0, r2, r1
 80089d0:	42a0      	cmp	r0, r4
 80089d2:	d10b      	bne.n	80089ec <_free_r+0x6c>
 80089d4:	6820      	ldr	r0, [r4, #0]
 80089d6:	4401      	add	r1, r0
 80089d8:	1850      	adds	r0, r2, r1
 80089da:	4283      	cmp	r3, r0
 80089dc:	6011      	str	r1, [r2, #0]
 80089de:	d1e0      	bne.n	80089a2 <_free_r+0x22>
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	6053      	str	r3, [r2, #4]
 80089e6:	4408      	add	r0, r1
 80089e8:	6010      	str	r0, [r2, #0]
 80089ea:	e7da      	b.n	80089a2 <_free_r+0x22>
 80089ec:	d902      	bls.n	80089f4 <_free_r+0x74>
 80089ee:	230c      	movs	r3, #12
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	e7d6      	b.n	80089a2 <_free_r+0x22>
 80089f4:	6820      	ldr	r0, [r4, #0]
 80089f6:	1821      	adds	r1, r4, r0
 80089f8:	428b      	cmp	r3, r1
 80089fa:	bf04      	itt	eq
 80089fc:	6819      	ldreq	r1, [r3, #0]
 80089fe:	685b      	ldreq	r3, [r3, #4]
 8008a00:	6063      	str	r3, [r4, #4]
 8008a02:	bf04      	itt	eq
 8008a04:	1809      	addeq	r1, r1, r0
 8008a06:	6021      	streq	r1, [r4, #0]
 8008a08:	6054      	str	r4, [r2, #4]
 8008a0a:	e7ca      	b.n	80089a2 <_free_r+0x22>
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
 8008a0e:	bf00      	nop
 8008a10:	2000097c 	.word	0x2000097c

08008a14 <rshift>:
 8008a14:	6903      	ldr	r3, [r0, #16]
 8008a16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a22:	f100 0414 	add.w	r4, r0, #20
 8008a26:	dd45      	ble.n	8008ab4 <rshift+0xa0>
 8008a28:	f011 011f 	ands.w	r1, r1, #31
 8008a2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a34:	d10c      	bne.n	8008a50 <rshift+0x3c>
 8008a36:	f100 0710 	add.w	r7, r0, #16
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	42b1      	cmp	r1, r6
 8008a3e:	d334      	bcc.n	8008aaa <rshift+0x96>
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	1eea      	subs	r2, r5, #3
 8008a46:	4296      	cmp	r6, r2
 8008a48:	bf38      	it	cc
 8008a4a:	2300      	movcc	r3, #0
 8008a4c:	4423      	add	r3, r4
 8008a4e:	e015      	b.n	8008a7c <rshift+0x68>
 8008a50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a54:	f1c1 0820 	rsb	r8, r1, #32
 8008a58:	40cf      	lsrs	r7, r1
 8008a5a:	f105 0e04 	add.w	lr, r5, #4
 8008a5e:	46a1      	mov	r9, r4
 8008a60:	4576      	cmp	r6, lr
 8008a62:	46f4      	mov	ip, lr
 8008a64:	d815      	bhi.n	8008a92 <rshift+0x7e>
 8008a66:	1a9a      	subs	r2, r3, r2
 8008a68:	0092      	lsls	r2, r2, #2
 8008a6a:	3a04      	subs	r2, #4
 8008a6c:	3501      	adds	r5, #1
 8008a6e:	42ae      	cmp	r6, r5
 8008a70:	bf38      	it	cc
 8008a72:	2200      	movcc	r2, #0
 8008a74:	18a3      	adds	r3, r4, r2
 8008a76:	50a7      	str	r7, [r4, r2]
 8008a78:	b107      	cbz	r7, 8008a7c <rshift+0x68>
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	1b1a      	subs	r2, r3, r4
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a84:	bf08      	it	eq
 8008a86:	2300      	moveq	r3, #0
 8008a88:	6102      	str	r2, [r0, #16]
 8008a8a:	bf08      	it	eq
 8008a8c:	6143      	streq	r3, [r0, #20]
 8008a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a92:	f8dc c000 	ldr.w	ip, [ip]
 8008a96:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a9a:	ea4c 0707 	orr.w	r7, ip, r7
 8008a9e:	f849 7b04 	str.w	r7, [r9], #4
 8008aa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008aa6:	40cf      	lsrs	r7, r1
 8008aa8:	e7da      	b.n	8008a60 <rshift+0x4c>
 8008aaa:	f851 cb04 	ldr.w	ip, [r1], #4
 8008aae:	f847 cf04 	str.w	ip, [r7, #4]!
 8008ab2:	e7c3      	b.n	8008a3c <rshift+0x28>
 8008ab4:	4623      	mov	r3, r4
 8008ab6:	e7e1      	b.n	8008a7c <rshift+0x68>

08008ab8 <__hexdig_fun>:
 8008ab8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	d802      	bhi.n	8008ac6 <__hexdig_fun+0xe>
 8008ac0:	3820      	subs	r0, #32
 8008ac2:	b2c0      	uxtb	r0, r0
 8008ac4:	4770      	bx	lr
 8008ac6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008aca:	2b05      	cmp	r3, #5
 8008acc:	d801      	bhi.n	8008ad2 <__hexdig_fun+0x1a>
 8008ace:	3847      	subs	r0, #71	@ 0x47
 8008ad0:	e7f7      	b.n	8008ac2 <__hexdig_fun+0xa>
 8008ad2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008ad6:	2b05      	cmp	r3, #5
 8008ad8:	d801      	bhi.n	8008ade <__hexdig_fun+0x26>
 8008ada:	3827      	subs	r0, #39	@ 0x27
 8008adc:	e7f1      	b.n	8008ac2 <__hexdig_fun+0xa>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	4770      	bx	lr
	...

08008ae4 <__gethex>:
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	b085      	sub	sp, #20
 8008aea:	468a      	mov	sl, r1
 8008aec:	9302      	str	r3, [sp, #8]
 8008aee:	680b      	ldr	r3, [r1, #0]
 8008af0:	9001      	str	r0, [sp, #4]
 8008af2:	4690      	mov	r8, r2
 8008af4:	1c9c      	adds	r4, r3, #2
 8008af6:	46a1      	mov	r9, r4
 8008af8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008afc:	2830      	cmp	r0, #48	@ 0x30
 8008afe:	d0fa      	beq.n	8008af6 <__gethex+0x12>
 8008b00:	eba9 0303 	sub.w	r3, r9, r3
 8008b04:	f1a3 0b02 	sub.w	fp, r3, #2
 8008b08:	f7ff ffd6 	bl	8008ab8 <__hexdig_fun>
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d168      	bne.n	8008be4 <__gethex+0x100>
 8008b12:	49a0      	ldr	r1, [pc, #640]	@ (8008d94 <__gethex+0x2b0>)
 8008b14:	2201      	movs	r2, #1
 8008b16:	4648      	mov	r0, r9
 8008b18:	f7fe ffc5 	bl	8007aa6 <strncmp>
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	d167      	bne.n	8008bf2 <__gethex+0x10e>
 8008b22:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008b26:	4626      	mov	r6, r4
 8008b28:	f7ff ffc6 	bl	8008ab8 <__hexdig_fun>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d062      	beq.n	8008bf6 <__gethex+0x112>
 8008b30:	4623      	mov	r3, r4
 8008b32:	7818      	ldrb	r0, [r3, #0]
 8008b34:	2830      	cmp	r0, #48	@ 0x30
 8008b36:	4699      	mov	r9, r3
 8008b38:	f103 0301 	add.w	r3, r3, #1
 8008b3c:	d0f9      	beq.n	8008b32 <__gethex+0x4e>
 8008b3e:	f7ff ffbb 	bl	8008ab8 <__hexdig_fun>
 8008b42:	fab0 f580 	clz	r5, r0
 8008b46:	096d      	lsrs	r5, r5, #5
 8008b48:	f04f 0b01 	mov.w	fp, #1
 8008b4c:	464a      	mov	r2, r9
 8008b4e:	4616      	mov	r6, r2
 8008b50:	3201      	adds	r2, #1
 8008b52:	7830      	ldrb	r0, [r6, #0]
 8008b54:	f7ff ffb0 	bl	8008ab8 <__hexdig_fun>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d1f8      	bne.n	8008b4e <__gethex+0x6a>
 8008b5c:	498d      	ldr	r1, [pc, #564]	@ (8008d94 <__gethex+0x2b0>)
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7fe ffa0 	bl	8007aa6 <strncmp>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d13f      	bne.n	8008bea <__gethex+0x106>
 8008b6a:	b944      	cbnz	r4, 8008b7e <__gethex+0x9a>
 8008b6c:	1c74      	adds	r4, r6, #1
 8008b6e:	4622      	mov	r2, r4
 8008b70:	4616      	mov	r6, r2
 8008b72:	3201      	adds	r2, #1
 8008b74:	7830      	ldrb	r0, [r6, #0]
 8008b76:	f7ff ff9f 	bl	8008ab8 <__hexdig_fun>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d1f8      	bne.n	8008b70 <__gethex+0x8c>
 8008b7e:	1ba4      	subs	r4, r4, r6
 8008b80:	00a7      	lsls	r7, r4, #2
 8008b82:	7833      	ldrb	r3, [r6, #0]
 8008b84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008b88:	2b50      	cmp	r3, #80	@ 0x50
 8008b8a:	d13e      	bne.n	8008c0a <__gethex+0x126>
 8008b8c:	7873      	ldrb	r3, [r6, #1]
 8008b8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b90:	d033      	beq.n	8008bfa <__gethex+0x116>
 8008b92:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b94:	d034      	beq.n	8008c00 <__gethex+0x11c>
 8008b96:	1c71      	adds	r1, r6, #1
 8008b98:	2400      	movs	r4, #0
 8008b9a:	7808      	ldrb	r0, [r1, #0]
 8008b9c:	f7ff ff8c 	bl	8008ab8 <__hexdig_fun>
 8008ba0:	1e43      	subs	r3, r0, #1
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b18      	cmp	r3, #24
 8008ba6:	d830      	bhi.n	8008c0a <__gethex+0x126>
 8008ba8:	f1a0 0210 	sub.w	r2, r0, #16
 8008bac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008bb0:	f7ff ff82 	bl	8008ab8 <__hexdig_fun>
 8008bb4:	f100 3cff 	add.w	ip, r0, #4294967295
 8008bb8:	fa5f fc8c 	uxtb.w	ip, ip
 8008bbc:	f1bc 0f18 	cmp.w	ip, #24
 8008bc0:	f04f 030a 	mov.w	r3, #10
 8008bc4:	d91e      	bls.n	8008c04 <__gethex+0x120>
 8008bc6:	b104      	cbz	r4, 8008bca <__gethex+0xe6>
 8008bc8:	4252      	negs	r2, r2
 8008bca:	4417      	add	r7, r2
 8008bcc:	f8ca 1000 	str.w	r1, [sl]
 8008bd0:	b1ed      	cbz	r5, 8008c0e <__gethex+0x12a>
 8008bd2:	f1bb 0f00 	cmp.w	fp, #0
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2506      	moveq	r5, #6
 8008bda:	2500      	movne	r5, #0
 8008bdc:	4628      	mov	r0, r5
 8008bde:	b005      	add	sp, #20
 8008be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be4:	2500      	movs	r5, #0
 8008be6:	462c      	mov	r4, r5
 8008be8:	e7b0      	b.n	8008b4c <__gethex+0x68>
 8008bea:	2c00      	cmp	r4, #0
 8008bec:	d1c7      	bne.n	8008b7e <__gethex+0x9a>
 8008bee:	4627      	mov	r7, r4
 8008bf0:	e7c7      	b.n	8008b82 <__gethex+0x9e>
 8008bf2:	464e      	mov	r6, r9
 8008bf4:	462f      	mov	r7, r5
 8008bf6:	2501      	movs	r5, #1
 8008bf8:	e7c3      	b.n	8008b82 <__gethex+0x9e>
 8008bfa:	2400      	movs	r4, #0
 8008bfc:	1cb1      	adds	r1, r6, #2
 8008bfe:	e7cc      	b.n	8008b9a <__gethex+0xb6>
 8008c00:	2401      	movs	r4, #1
 8008c02:	e7fb      	b.n	8008bfc <__gethex+0x118>
 8008c04:	fb03 0002 	mla	r0, r3, r2, r0
 8008c08:	e7ce      	b.n	8008ba8 <__gethex+0xc4>
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	e7de      	b.n	8008bcc <__gethex+0xe8>
 8008c0e:	eba6 0309 	sub.w	r3, r6, r9
 8008c12:	3b01      	subs	r3, #1
 8008c14:	4629      	mov	r1, r5
 8008c16:	2b07      	cmp	r3, #7
 8008c18:	dc0a      	bgt.n	8008c30 <__gethex+0x14c>
 8008c1a:	9801      	ldr	r0, [sp, #4]
 8008c1c:	f000 fafc 	bl	8009218 <_Balloc>
 8008c20:	4604      	mov	r4, r0
 8008c22:	b940      	cbnz	r0, 8008c36 <__gethex+0x152>
 8008c24:	4b5c      	ldr	r3, [pc, #368]	@ (8008d98 <__gethex+0x2b4>)
 8008c26:	4602      	mov	r2, r0
 8008c28:	21e4      	movs	r1, #228	@ 0xe4
 8008c2a:	485c      	ldr	r0, [pc, #368]	@ (8008d9c <__gethex+0x2b8>)
 8008c2c:	f7ff f83e 	bl	8007cac <__assert_func>
 8008c30:	3101      	adds	r1, #1
 8008c32:	105b      	asrs	r3, r3, #1
 8008c34:	e7ef      	b.n	8008c16 <__gethex+0x132>
 8008c36:	f100 0a14 	add.w	sl, r0, #20
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	4655      	mov	r5, sl
 8008c3e:	469b      	mov	fp, r3
 8008c40:	45b1      	cmp	r9, r6
 8008c42:	d337      	bcc.n	8008cb4 <__gethex+0x1d0>
 8008c44:	f845 bb04 	str.w	fp, [r5], #4
 8008c48:	eba5 050a 	sub.w	r5, r5, sl
 8008c4c:	10ad      	asrs	r5, r5, #2
 8008c4e:	6125      	str	r5, [r4, #16]
 8008c50:	4658      	mov	r0, fp
 8008c52:	f000 fbd3 	bl	80093fc <__hi0bits>
 8008c56:	016d      	lsls	r5, r5, #5
 8008c58:	f8d8 6000 	ldr.w	r6, [r8]
 8008c5c:	1a2d      	subs	r5, r5, r0
 8008c5e:	42b5      	cmp	r5, r6
 8008c60:	dd54      	ble.n	8008d0c <__gethex+0x228>
 8008c62:	1bad      	subs	r5, r5, r6
 8008c64:	4629      	mov	r1, r5
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 ff67 	bl	8009b3a <__any_on>
 8008c6c:	4681      	mov	r9, r0
 8008c6e:	b178      	cbz	r0, 8008c90 <__gethex+0x1ac>
 8008c70:	1e6b      	subs	r3, r5, #1
 8008c72:	1159      	asrs	r1, r3, #5
 8008c74:	f003 021f 	and.w	r2, r3, #31
 8008c78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008c7c:	f04f 0901 	mov.w	r9, #1
 8008c80:	fa09 f202 	lsl.w	r2, r9, r2
 8008c84:	420a      	tst	r2, r1
 8008c86:	d003      	beq.n	8008c90 <__gethex+0x1ac>
 8008c88:	454b      	cmp	r3, r9
 8008c8a:	dc36      	bgt.n	8008cfa <__gethex+0x216>
 8008c8c:	f04f 0902 	mov.w	r9, #2
 8008c90:	4629      	mov	r1, r5
 8008c92:	4620      	mov	r0, r4
 8008c94:	f7ff febe 	bl	8008a14 <rshift>
 8008c98:	442f      	add	r7, r5
 8008c9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c9e:	42bb      	cmp	r3, r7
 8008ca0:	da42      	bge.n	8008d28 <__gethex+0x244>
 8008ca2:	9801      	ldr	r0, [sp, #4]
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	f000 faf7 	bl	8009298 <_Bfree>
 8008caa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cac:	2300      	movs	r3, #0
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	25a3      	movs	r5, #163	@ 0xa3
 8008cb2:	e793      	b.n	8008bdc <__gethex+0xf8>
 8008cb4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008cb8:	2a2e      	cmp	r2, #46	@ 0x2e
 8008cba:	d012      	beq.n	8008ce2 <__gethex+0x1fe>
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	d104      	bne.n	8008cca <__gethex+0x1e6>
 8008cc0:	f845 bb04 	str.w	fp, [r5], #4
 8008cc4:	f04f 0b00 	mov.w	fp, #0
 8008cc8:	465b      	mov	r3, fp
 8008cca:	7830      	ldrb	r0, [r6, #0]
 8008ccc:	9303      	str	r3, [sp, #12]
 8008cce:	f7ff fef3 	bl	8008ab8 <__hexdig_fun>
 8008cd2:	9b03      	ldr	r3, [sp, #12]
 8008cd4:	f000 000f 	and.w	r0, r0, #15
 8008cd8:	4098      	lsls	r0, r3
 8008cda:	ea4b 0b00 	orr.w	fp, fp, r0
 8008cde:	3304      	adds	r3, #4
 8008ce0:	e7ae      	b.n	8008c40 <__gethex+0x15c>
 8008ce2:	45b1      	cmp	r9, r6
 8008ce4:	d8ea      	bhi.n	8008cbc <__gethex+0x1d8>
 8008ce6:	492b      	ldr	r1, [pc, #172]	@ (8008d94 <__gethex+0x2b0>)
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	2201      	movs	r2, #1
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7fe feda 	bl	8007aa6 <strncmp>
 8008cf2:	9b03      	ldr	r3, [sp, #12]
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1e1      	bne.n	8008cbc <__gethex+0x1d8>
 8008cf8:	e7a2      	b.n	8008c40 <__gethex+0x15c>
 8008cfa:	1ea9      	subs	r1, r5, #2
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 ff1c 	bl	8009b3a <__any_on>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	d0c2      	beq.n	8008c8c <__gethex+0x1a8>
 8008d06:	f04f 0903 	mov.w	r9, #3
 8008d0a:	e7c1      	b.n	8008c90 <__gethex+0x1ac>
 8008d0c:	da09      	bge.n	8008d22 <__gethex+0x23e>
 8008d0e:	1b75      	subs	r5, r6, r5
 8008d10:	4621      	mov	r1, r4
 8008d12:	9801      	ldr	r0, [sp, #4]
 8008d14:	462a      	mov	r2, r5
 8008d16:	f000 fcd7 	bl	80096c8 <__lshift>
 8008d1a:	1b7f      	subs	r7, r7, r5
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	f100 0a14 	add.w	sl, r0, #20
 8008d22:	f04f 0900 	mov.w	r9, #0
 8008d26:	e7b8      	b.n	8008c9a <__gethex+0x1b6>
 8008d28:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d2c:	42bd      	cmp	r5, r7
 8008d2e:	dd6f      	ble.n	8008e10 <__gethex+0x32c>
 8008d30:	1bed      	subs	r5, r5, r7
 8008d32:	42ae      	cmp	r6, r5
 8008d34:	dc34      	bgt.n	8008da0 <__gethex+0x2bc>
 8008d36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d022      	beq.n	8008d84 <__gethex+0x2a0>
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	d024      	beq.n	8008d8c <__gethex+0x2a8>
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d115      	bne.n	8008d72 <__gethex+0x28e>
 8008d46:	42ae      	cmp	r6, r5
 8008d48:	d113      	bne.n	8008d72 <__gethex+0x28e>
 8008d4a:	2e01      	cmp	r6, #1
 8008d4c:	d10b      	bne.n	8008d66 <__gethex+0x282>
 8008d4e:	9a02      	ldr	r2, [sp, #8]
 8008d50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	2301      	movs	r3, #1
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	f8ca 3000 	str.w	r3, [sl]
 8008d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d60:	2562      	movs	r5, #98	@ 0x62
 8008d62:	601c      	str	r4, [r3, #0]
 8008d64:	e73a      	b.n	8008bdc <__gethex+0xf8>
 8008d66:	1e71      	subs	r1, r6, #1
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f000 fee6 	bl	8009b3a <__any_on>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d1ed      	bne.n	8008d4e <__gethex+0x26a>
 8008d72:	9801      	ldr	r0, [sp, #4]
 8008d74:	4621      	mov	r1, r4
 8008d76:	f000 fa8f 	bl	8009298 <_Bfree>
 8008d7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	2550      	movs	r5, #80	@ 0x50
 8008d82:	e72b      	b.n	8008bdc <__gethex+0xf8>
 8008d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f3      	bne.n	8008d72 <__gethex+0x28e>
 8008d8a:	e7e0      	b.n	8008d4e <__gethex+0x26a>
 8008d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1dd      	bne.n	8008d4e <__gethex+0x26a>
 8008d92:	e7ee      	b.n	8008d72 <__gethex+0x28e>
 8008d94:	0800cc18 	.word	0x0800cc18
 8008d98:	0800cdc1 	.word	0x0800cdc1
 8008d9c:	0800cdd2 	.word	0x0800cdd2
 8008da0:	1e6f      	subs	r7, r5, #1
 8008da2:	f1b9 0f00 	cmp.w	r9, #0
 8008da6:	d130      	bne.n	8008e0a <__gethex+0x326>
 8008da8:	b127      	cbz	r7, 8008db4 <__gethex+0x2d0>
 8008daa:	4639      	mov	r1, r7
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 fec4 	bl	8009b3a <__any_on>
 8008db2:	4681      	mov	r9, r0
 8008db4:	117a      	asrs	r2, r7, #5
 8008db6:	2301      	movs	r3, #1
 8008db8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008dbc:	f007 071f 	and.w	r7, r7, #31
 8008dc0:	40bb      	lsls	r3, r7
 8008dc2:	4213      	tst	r3, r2
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	bf18      	it	ne
 8008dca:	f049 0902 	orrne.w	r9, r9, #2
 8008dce:	f7ff fe21 	bl	8008a14 <rshift>
 8008dd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008dd6:	1b76      	subs	r6, r6, r5
 8008dd8:	2502      	movs	r5, #2
 8008dda:	f1b9 0f00 	cmp.w	r9, #0
 8008dde:	d047      	beq.n	8008e70 <__gethex+0x38c>
 8008de0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d015      	beq.n	8008e14 <__gethex+0x330>
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d017      	beq.n	8008e1c <__gethex+0x338>
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d109      	bne.n	8008e04 <__gethex+0x320>
 8008df0:	f019 0f02 	tst.w	r9, #2
 8008df4:	d006      	beq.n	8008e04 <__gethex+0x320>
 8008df6:	f8da 3000 	ldr.w	r3, [sl]
 8008dfa:	ea49 0903 	orr.w	r9, r9, r3
 8008dfe:	f019 0f01 	tst.w	r9, #1
 8008e02:	d10e      	bne.n	8008e22 <__gethex+0x33e>
 8008e04:	f045 0510 	orr.w	r5, r5, #16
 8008e08:	e032      	b.n	8008e70 <__gethex+0x38c>
 8008e0a:	f04f 0901 	mov.w	r9, #1
 8008e0e:	e7d1      	b.n	8008db4 <__gethex+0x2d0>
 8008e10:	2501      	movs	r5, #1
 8008e12:	e7e2      	b.n	8008dda <__gethex+0x2f6>
 8008e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e16:	f1c3 0301 	rsb	r3, r3, #1
 8008e1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f0      	beq.n	8008e04 <__gethex+0x320>
 8008e22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e26:	f104 0314 	add.w	r3, r4, #20
 8008e2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e32:	f04f 0c00 	mov.w	ip, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e40:	d01b      	beq.n	8008e7a <__gethex+0x396>
 8008e42:	3201      	adds	r2, #1
 8008e44:	6002      	str	r2, [r0, #0]
 8008e46:	2d02      	cmp	r5, #2
 8008e48:	f104 0314 	add.w	r3, r4, #20
 8008e4c:	d13c      	bne.n	8008ec8 <__gethex+0x3e4>
 8008e4e:	f8d8 2000 	ldr.w	r2, [r8]
 8008e52:	3a01      	subs	r2, #1
 8008e54:	42b2      	cmp	r2, r6
 8008e56:	d109      	bne.n	8008e6c <__gethex+0x388>
 8008e58:	1171      	asrs	r1, r6, #5
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e60:	f006 061f 	and.w	r6, r6, #31
 8008e64:	fa02 f606 	lsl.w	r6, r2, r6
 8008e68:	421e      	tst	r6, r3
 8008e6a:	d13a      	bne.n	8008ee2 <__gethex+0x3fe>
 8008e6c:	f045 0520 	orr.w	r5, r5, #32
 8008e70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e72:	601c      	str	r4, [r3, #0]
 8008e74:	9b02      	ldr	r3, [sp, #8]
 8008e76:	601f      	str	r7, [r3, #0]
 8008e78:	e6b0      	b.n	8008bdc <__gethex+0xf8>
 8008e7a:	4299      	cmp	r1, r3
 8008e7c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e80:	d8d9      	bhi.n	8008e36 <__gethex+0x352>
 8008e82:	68a3      	ldr	r3, [r4, #8]
 8008e84:	459b      	cmp	fp, r3
 8008e86:	db17      	blt.n	8008eb8 <__gethex+0x3d4>
 8008e88:	6861      	ldr	r1, [r4, #4]
 8008e8a:	9801      	ldr	r0, [sp, #4]
 8008e8c:	3101      	adds	r1, #1
 8008e8e:	f000 f9c3 	bl	8009218 <_Balloc>
 8008e92:	4681      	mov	r9, r0
 8008e94:	b918      	cbnz	r0, 8008e9e <__gethex+0x3ba>
 8008e96:	4b1a      	ldr	r3, [pc, #104]	@ (8008f00 <__gethex+0x41c>)
 8008e98:	4602      	mov	r2, r0
 8008e9a:	2184      	movs	r1, #132	@ 0x84
 8008e9c:	e6c5      	b.n	8008c2a <__gethex+0x146>
 8008e9e:	6922      	ldr	r2, [r4, #16]
 8008ea0:	3202      	adds	r2, #2
 8008ea2:	f104 010c 	add.w	r1, r4, #12
 8008ea6:	0092      	lsls	r2, r2, #2
 8008ea8:	300c      	adds	r0, #12
 8008eaa:	f7fe fee2 	bl	8007c72 <memcpy>
 8008eae:	4621      	mov	r1, r4
 8008eb0:	9801      	ldr	r0, [sp, #4]
 8008eb2:	f000 f9f1 	bl	8009298 <_Bfree>
 8008eb6:	464c      	mov	r4, r9
 8008eb8:	6923      	ldr	r3, [r4, #16]
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ec0:	6122      	str	r2, [r4, #16]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	615a      	str	r2, [r3, #20]
 8008ec6:	e7be      	b.n	8008e46 <__gethex+0x362>
 8008ec8:	6922      	ldr	r2, [r4, #16]
 8008eca:	455a      	cmp	r2, fp
 8008ecc:	dd0b      	ble.n	8008ee6 <__gethex+0x402>
 8008ece:	2101      	movs	r1, #1
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f7ff fd9f 	bl	8008a14 <rshift>
 8008ed6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008eda:	3701      	adds	r7, #1
 8008edc:	42bb      	cmp	r3, r7
 8008ede:	f6ff aee0 	blt.w	8008ca2 <__gethex+0x1be>
 8008ee2:	2501      	movs	r5, #1
 8008ee4:	e7c2      	b.n	8008e6c <__gethex+0x388>
 8008ee6:	f016 061f 	ands.w	r6, r6, #31
 8008eea:	d0fa      	beq.n	8008ee2 <__gethex+0x3fe>
 8008eec:	4453      	add	r3, sl
 8008eee:	f1c6 0620 	rsb	r6, r6, #32
 8008ef2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008ef6:	f000 fa81 	bl	80093fc <__hi0bits>
 8008efa:	42b0      	cmp	r0, r6
 8008efc:	dbe7      	blt.n	8008ece <__gethex+0x3ea>
 8008efe:	e7f0      	b.n	8008ee2 <__gethex+0x3fe>
 8008f00:	0800cdc1 	.word	0x0800cdc1

08008f04 <L_shift>:
 8008f04:	f1c2 0208 	rsb	r2, r2, #8
 8008f08:	0092      	lsls	r2, r2, #2
 8008f0a:	b570      	push	{r4, r5, r6, lr}
 8008f0c:	f1c2 0620 	rsb	r6, r2, #32
 8008f10:	6843      	ldr	r3, [r0, #4]
 8008f12:	6804      	ldr	r4, [r0, #0]
 8008f14:	fa03 f506 	lsl.w	r5, r3, r6
 8008f18:	432c      	orrs	r4, r5
 8008f1a:	40d3      	lsrs	r3, r2
 8008f1c:	6004      	str	r4, [r0, #0]
 8008f1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f22:	4288      	cmp	r0, r1
 8008f24:	d3f4      	bcc.n	8008f10 <L_shift+0xc>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}

08008f28 <__match>:
 8008f28:	b530      	push	{r4, r5, lr}
 8008f2a:	6803      	ldr	r3, [r0, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f32:	b914      	cbnz	r4, 8008f3a <__match+0x12>
 8008f34:	6003      	str	r3, [r0, #0]
 8008f36:	2001      	movs	r0, #1
 8008f38:	bd30      	pop	{r4, r5, pc}
 8008f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008f42:	2d19      	cmp	r5, #25
 8008f44:	bf98      	it	ls
 8008f46:	3220      	addls	r2, #32
 8008f48:	42a2      	cmp	r2, r4
 8008f4a:	d0f0      	beq.n	8008f2e <__match+0x6>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	e7f3      	b.n	8008f38 <__match+0x10>

08008f50 <__hexnan>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	680b      	ldr	r3, [r1, #0]
 8008f56:	6801      	ldr	r1, [r0, #0]
 8008f58:	115e      	asrs	r6, r3, #5
 8008f5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f5e:	f013 031f 	ands.w	r3, r3, #31
 8008f62:	b087      	sub	sp, #28
 8008f64:	bf18      	it	ne
 8008f66:	3604      	addne	r6, #4
 8008f68:	2500      	movs	r5, #0
 8008f6a:	1f37      	subs	r7, r6, #4
 8008f6c:	4682      	mov	sl, r0
 8008f6e:	4690      	mov	r8, r2
 8008f70:	9301      	str	r3, [sp, #4]
 8008f72:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f76:	46b9      	mov	r9, r7
 8008f78:	463c      	mov	r4, r7
 8008f7a:	9502      	str	r5, [sp, #8]
 8008f7c:	46ab      	mov	fp, r5
 8008f7e:	784a      	ldrb	r2, [r1, #1]
 8008f80:	1c4b      	adds	r3, r1, #1
 8008f82:	9303      	str	r3, [sp, #12]
 8008f84:	b342      	cbz	r2, 8008fd8 <__hexnan+0x88>
 8008f86:	4610      	mov	r0, r2
 8008f88:	9105      	str	r1, [sp, #20]
 8008f8a:	9204      	str	r2, [sp, #16]
 8008f8c:	f7ff fd94 	bl	8008ab8 <__hexdig_fun>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d151      	bne.n	8009038 <__hexnan+0xe8>
 8008f94:	9a04      	ldr	r2, [sp, #16]
 8008f96:	9905      	ldr	r1, [sp, #20]
 8008f98:	2a20      	cmp	r2, #32
 8008f9a:	d818      	bhi.n	8008fce <__hexnan+0x7e>
 8008f9c:	9b02      	ldr	r3, [sp, #8]
 8008f9e:	459b      	cmp	fp, r3
 8008fa0:	dd13      	ble.n	8008fca <__hexnan+0x7a>
 8008fa2:	454c      	cmp	r4, r9
 8008fa4:	d206      	bcs.n	8008fb4 <__hexnan+0x64>
 8008fa6:	2d07      	cmp	r5, #7
 8008fa8:	dc04      	bgt.n	8008fb4 <__hexnan+0x64>
 8008faa:	462a      	mov	r2, r5
 8008fac:	4649      	mov	r1, r9
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f7ff ffa8 	bl	8008f04 <L_shift>
 8008fb4:	4544      	cmp	r4, r8
 8008fb6:	d952      	bls.n	800905e <__hexnan+0x10e>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f1a4 0904 	sub.w	r9, r4, #4
 8008fbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fc2:	f8cd b008 	str.w	fp, [sp, #8]
 8008fc6:	464c      	mov	r4, r9
 8008fc8:	461d      	mov	r5, r3
 8008fca:	9903      	ldr	r1, [sp, #12]
 8008fcc:	e7d7      	b.n	8008f7e <__hexnan+0x2e>
 8008fce:	2a29      	cmp	r2, #41	@ 0x29
 8008fd0:	d157      	bne.n	8009082 <__hexnan+0x132>
 8008fd2:	3102      	adds	r1, #2
 8008fd4:	f8ca 1000 	str.w	r1, [sl]
 8008fd8:	f1bb 0f00 	cmp.w	fp, #0
 8008fdc:	d051      	beq.n	8009082 <__hexnan+0x132>
 8008fde:	454c      	cmp	r4, r9
 8008fe0:	d206      	bcs.n	8008ff0 <__hexnan+0xa0>
 8008fe2:	2d07      	cmp	r5, #7
 8008fe4:	dc04      	bgt.n	8008ff0 <__hexnan+0xa0>
 8008fe6:	462a      	mov	r2, r5
 8008fe8:	4649      	mov	r1, r9
 8008fea:	4620      	mov	r0, r4
 8008fec:	f7ff ff8a 	bl	8008f04 <L_shift>
 8008ff0:	4544      	cmp	r4, r8
 8008ff2:	d936      	bls.n	8009062 <__hexnan+0x112>
 8008ff4:	f1a8 0204 	sub.w	r2, r8, #4
 8008ff8:	4623      	mov	r3, r4
 8008ffa:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ffe:	f842 1f04 	str.w	r1, [r2, #4]!
 8009002:	429f      	cmp	r7, r3
 8009004:	d2f9      	bcs.n	8008ffa <__hexnan+0xaa>
 8009006:	1b3b      	subs	r3, r7, r4
 8009008:	f023 0303 	bic.w	r3, r3, #3
 800900c:	3304      	adds	r3, #4
 800900e:	3401      	adds	r4, #1
 8009010:	3e03      	subs	r6, #3
 8009012:	42b4      	cmp	r4, r6
 8009014:	bf88      	it	hi
 8009016:	2304      	movhi	r3, #4
 8009018:	4443      	add	r3, r8
 800901a:	2200      	movs	r2, #0
 800901c:	f843 2b04 	str.w	r2, [r3], #4
 8009020:	429f      	cmp	r7, r3
 8009022:	d2fb      	bcs.n	800901c <__hexnan+0xcc>
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	b91b      	cbnz	r3, 8009030 <__hexnan+0xe0>
 8009028:	4547      	cmp	r7, r8
 800902a:	d128      	bne.n	800907e <__hexnan+0x12e>
 800902c:	2301      	movs	r3, #1
 800902e:	603b      	str	r3, [r7, #0]
 8009030:	2005      	movs	r0, #5
 8009032:	b007      	add	sp, #28
 8009034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009038:	3501      	adds	r5, #1
 800903a:	2d08      	cmp	r5, #8
 800903c:	f10b 0b01 	add.w	fp, fp, #1
 8009040:	dd06      	ble.n	8009050 <__hexnan+0x100>
 8009042:	4544      	cmp	r4, r8
 8009044:	d9c1      	bls.n	8008fca <__hexnan+0x7a>
 8009046:	2300      	movs	r3, #0
 8009048:	f844 3c04 	str.w	r3, [r4, #-4]
 800904c:	2501      	movs	r5, #1
 800904e:	3c04      	subs	r4, #4
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	f000 000f 	and.w	r0, r0, #15
 8009056:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800905a:	6020      	str	r0, [r4, #0]
 800905c:	e7b5      	b.n	8008fca <__hexnan+0x7a>
 800905e:	2508      	movs	r5, #8
 8009060:	e7b3      	b.n	8008fca <__hexnan+0x7a>
 8009062:	9b01      	ldr	r3, [sp, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d0dd      	beq.n	8009024 <__hexnan+0xd4>
 8009068:	f1c3 0320 	rsb	r3, r3, #32
 800906c:	f04f 32ff 	mov.w	r2, #4294967295
 8009070:	40da      	lsrs	r2, r3
 8009072:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009076:	4013      	ands	r3, r2
 8009078:	f846 3c04 	str.w	r3, [r6, #-4]
 800907c:	e7d2      	b.n	8009024 <__hexnan+0xd4>
 800907e:	3f04      	subs	r7, #4
 8009080:	e7d0      	b.n	8009024 <__hexnan+0xd4>
 8009082:	2004      	movs	r0, #4
 8009084:	e7d5      	b.n	8009032 <__hexnan+0xe2>
	...

08009088 <malloc>:
 8009088:	4b02      	ldr	r3, [pc, #8]	@ (8009094 <malloc+0xc>)
 800908a:	4601      	mov	r1, r0
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	f000 b825 	b.w	80090dc <_malloc_r>
 8009092:	bf00      	nop
 8009094:	200001d4 	.word	0x200001d4

08009098 <sbrk_aligned>:
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	4e0f      	ldr	r6, [pc, #60]	@ (80090d8 <sbrk_aligned+0x40>)
 800909c:	460c      	mov	r4, r1
 800909e:	6831      	ldr	r1, [r6, #0]
 80090a0:	4605      	mov	r5, r0
 80090a2:	b911      	cbnz	r1, 80090aa <sbrk_aligned+0x12>
 80090a4:	f001 fbb0 	bl	800a808 <_sbrk_r>
 80090a8:	6030      	str	r0, [r6, #0]
 80090aa:	4621      	mov	r1, r4
 80090ac:	4628      	mov	r0, r5
 80090ae:	f001 fbab 	bl	800a808 <_sbrk_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	d103      	bne.n	80090be <sbrk_aligned+0x26>
 80090b6:	f04f 34ff 	mov.w	r4, #4294967295
 80090ba:	4620      	mov	r0, r4
 80090bc:	bd70      	pop	{r4, r5, r6, pc}
 80090be:	1cc4      	adds	r4, r0, #3
 80090c0:	f024 0403 	bic.w	r4, r4, #3
 80090c4:	42a0      	cmp	r0, r4
 80090c6:	d0f8      	beq.n	80090ba <sbrk_aligned+0x22>
 80090c8:	1a21      	subs	r1, r4, r0
 80090ca:	4628      	mov	r0, r5
 80090cc:	f001 fb9c 	bl	800a808 <_sbrk_r>
 80090d0:	3001      	adds	r0, #1
 80090d2:	d1f2      	bne.n	80090ba <sbrk_aligned+0x22>
 80090d4:	e7ef      	b.n	80090b6 <sbrk_aligned+0x1e>
 80090d6:	bf00      	nop
 80090d8:	20000978 	.word	0x20000978

080090dc <_malloc_r>:
 80090dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090e0:	1ccd      	adds	r5, r1, #3
 80090e2:	f025 0503 	bic.w	r5, r5, #3
 80090e6:	3508      	adds	r5, #8
 80090e8:	2d0c      	cmp	r5, #12
 80090ea:	bf38      	it	cc
 80090ec:	250c      	movcc	r5, #12
 80090ee:	2d00      	cmp	r5, #0
 80090f0:	4606      	mov	r6, r0
 80090f2:	db01      	blt.n	80090f8 <_malloc_r+0x1c>
 80090f4:	42a9      	cmp	r1, r5
 80090f6:	d904      	bls.n	8009102 <_malloc_r+0x26>
 80090f8:	230c      	movs	r3, #12
 80090fa:	6033      	str	r3, [r6, #0]
 80090fc:	2000      	movs	r0, #0
 80090fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091d8 <_malloc_r+0xfc>
 8009106:	f000 f87b 	bl	8009200 <__malloc_lock>
 800910a:	f8d8 3000 	ldr.w	r3, [r8]
 800910e:	461c      	mov	r4, r3
 8009110:	bb44      	cbnz	r4, 8009164 <_malloc_r+0x88>
 8009112:	4629      	mov	r1, r5
 8009114:	4630      	mov	r0, r6
 8009116:	f7ff ffbf 	bl	8009098 <sbrk_aligned>
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	4604      	mov	r4, r0
 800911e:	d158      	bne.n	80091d2 <_malloc_r+0xf6>
 8009120:	f8d8 4000 	ldr.w	r4, [r8]
 8009124:	4627      	mov	r7, r4
 8009126:	2f00      	cmp	r7, #0
 8009128:	d143      	bne.n	80091b2 <_malloc_r+0xd6>
 800912a:	2c00      	cmp	r4, #0
 800912c:	d04b      	beq.n	80091c6 <_malloc_r+0xea>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	4639      	mov	r1, r7
 8009132:	4630      	mov	r0, r6
 8009134:	eb04 0903 	add.w	r9, r4, r3
 8009138:	f001 fb66 	bl	800a808 <_sbrk_r>
 800913c:	4581      	cmp	r9, r0
 800913e:	d142      	bne.n	80091c6 <_malloc_r+0xea>
 8009140:	6821      	ldr	r1, [r4, #0]
 8009142:	1a6d      	subs	r5, r5, r1
 8009144:	4629      	mov	r1, r5
 8009146:	4630      	mov	r0, r6
 8009148:	f7ff ffa6 	bl	8009098 <sbrk_aligned>
 800914c:	3001      	adds	r0, #1
 800914e:	d03a      	beq.n	80091c6 <_malloc_r+0xea>
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	442b      	add	r3, r5
 8009154:	6023      	str	r3, [r4, #0]
 8009156:	f8d8 3000 	ldr.w	r3, [r8]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	bb62      	cbnz	r2, 80091b8 <_malloc_r+0xdc>
 800915e:	f8c8 7000 	str.w	r7, [r8]
 8009162:	e00f      	b.n	8009184 <_malloc_r+0xa8>
 8009164:	6822      	ldr	r2, [r4, #0]
 8009166:	1b52      	subs	r2, r2, r5
 8009168:	d420      	bmi.n	80091ac <_malloc_r+0xd0>
 800916a:	2a0b      	cmp	r2, #11
 800916c:	d917      	bls.n	800919e <_malloc_r+0xc2>
 800916e:	1961      	adds	r1, r4, r5
 8009170:	42a3      	cmp	r3, r4
 8009172:	6025      	str	r5, [r4, #0]
 8009174:	bf18      	it	ne
 8009176:	6059      	strne	r1, [r3, #4]
 8009178:	6863      	ldr	r3, [r4, #4]
 800917a:	bf08      	it	eq
 800917c:	f8c8 1000 	streq.w	r1, [r8]
 8009180:	5162      	str	r2, [r4, r5]
 8009182:	604b      	str	r3, [r1, #4]
 8009184:	4630      	mov	r0, r6
 8009186:	f000 f841 	bl	800920c <__malloc_unlock>
 800918a:	f104 000b 	add.w	r0, r4, #11
 800918e:	1d23      	adds	r3, r4, #4
 8009190:	f020 0007 	bic.w	r0, r0, #7
 8009194:	1ac2      	subs	r2, r0, r3
 8009196:	bf1c      	itt	ne
 8009198:	1a1b      	subne	r3, r3, r0
 800919a:	50a3      	strne	r3, [r4, r2]
 800919c:	e7af      	b.n	80090fe <_malloc_r+0x22>
 800919e:	6862      	ldr	r2, [r4, #4]
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	bf0c      	ite	eq
 80091a4:	f8c8 2000 	streq.w	r2, [r8]
 80091a8:	605a      	strne	r2, [r3, #4]
 80091aa:	e7eb      	b.n	8009184 <_malloc_r+0xa8>
 80091ac:	4623      	mov	r3, r4
 80091ae:	6864      	ldr	r4, [r4, #4]
 80091b0:	e7ae      	b.n	8009110 <_malloc_r+0x34>
 80091b2:	463c      	mov	r4, r7
 80091b4:	687f      	ldr	r7, [r7, #4]
 80091b6:	e7b6      	b.n	8009126 <_malloc_r+0x4a>
 80091b8:	461a      	mov	r2, r3
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	42a3      	cmp	r3, r4
 80091be:	d1fb      	bne.n	80091b8 <_malloc_r+0xdc>
 80091c0:	2300      	movs	r3, #0
 80091c2:	6053      	str	r3, [r2, #4]
 80091c4:	e7de      	b.n	8009184 <_malloc_r+0xa8>
 80091c6:	230c      	movs	r3, #12
 80091c8:	6033      	str	r3, [r6, #0]
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 f81e 	bl	800920c <__malloc_unlock>
 80091d0:	e794      	b.n	80090fc <_malloc_r+0x20>
 80091d2:	6005      	str	r5, [r0, #0]
 80091d4:	e7d6      	b.n	8009184 <_malloc_r+0xa8>
 80091d6:	bf00      	nop
 80091d8:	2000097c 	.word	0x2000097c

080091dc <__ascii_mbtowc>:
 80091dc:	b082      	sub	sp, #8
 80091de:	b901      	cbnz	r1, 80091e2 <__ascii_mbtowc+0x6>
 80091e0:	a901      	add	r1, sp, #4
 80091e2:	b142      	cbz	r2, 80091f6 <__ascii_mbtowc+0x1a>
 80091e4:	b14b      	cbz	r3, 80091fa <__ascii_mbtowc+0x1e>
 80091e6:	7813      	ldrb	r3, [r2, #0]
 80091e8:	600b      	str	r3, [r1, #0]
 80091ea:	7812      	ldrb	r2, [r2, #0]
 80091ec:	1e10      	subs	r0, r2, #0
 80091ee:	bf18      	it	ne
 80091f0:	2001      	movne	r0, #1
 80091f2:	b002      	add	sp, #8
 80091f4:	4770      	bx	lr
 80091f6:	4610      	mov	r0, r2
 80091f8:	e7fb      	b.n	80091f2 <__ascii_mbtowc+0x16>
 80091fa:	f06f 0001 	mvn.w	r0, #1
 80091fe:	e7f8      	b.n	80091f2 <__ascii_mbtowc+0x16>

08009200 <__malloc_lock>:
 8009200:	4801      	ldr	r0, [pc, #4]	@ (8009208 <__malloc_lock+0x8>)
 8009202:	f7fe bd34 	b.w	8007c6e <__retarget_lock_acquire_recursive>
 8009206:	bf00      	nop
 8009208:	20000974 	.word	0x20000974

0800920c <__malloc_unlock>:
 800920c:	4801      	ldr	r0, [pc, #4]	@ (8009214 <__malloc_unlock+0x8>)
 800920e:	f7fe bd2f 	b.w	8007c70 <__retarget_lock_release_recursive>
 8009212:	bf00      	nop
 8009214:	20000974 	.word	0x20000974

08009218 <_Balloc>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	69c6      	ldr	r6, [r0, #28]
 800921c:	4604      	mov	r4, r0
 800921e:	460d      	mov	r5, r1
 8009220:	b976      	cbnz	r6, 8009240 <_Balloc+0x28>
 8009222:	2010      	movs	r0, #16
 8009224:	f7ff ff30 	bl	8009088 <malloc>
 8009228:	4602      	mov	r2, r0
 800922a:	61e0      	str	r0, [r4, #28]
 800922c:	b920      	cbnz	r0, 8009238 <_Balloc+0x20>
 800922e:	4b18      	ldr	r3, [pc, #96]	@ (8009290 <_Balloc+0x78>)
 8009230:	4818      	ldr	r0, [pc, #96]	@ (8009294 <_Balloc+0x7c>)
 8009232:	216b      	movs	r1, #107	@ 0x6b
 8009234:	f7fe fd3a 	bl	8007cac <__assert_func>
 8009238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800923c:	6006      	str	r6, [r0, #0]
 800923e:	60c6      	str	r6, [r0, #12]
 8009240:	69e6      	ldr	r6, [r4, #28]
 8009242:	68f3      	ldr	r3, [r6, #12]
 8009244:	b183      	cbz	r3, 8009268 <_Balloc+0x50>
 8009246:	69e3      	ldr	r3, [r4, #28]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800924e:	b9b8      	cbnz	r0, 8009280 <_Balloc+0x68>
 8009250:	2101      	movs	r1, #1
 8009252:	fa01 f605 	lsl.w	r6, r1, r5
 8009256:	1d72      	adds	r2, r6, #5
 8009258:	0092      	lsls	r2, r2, #2
 800925a:	4620      	mov	r0, r4
 800925c:	f001 faeb 	bl	800a836 <_calloc_r>
 8009260:	b160      	cbz	r0, 800927c <_Balloc+0x64>
 8009262:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009266:	e00e      	b.n	8009286 <_Balloc+0x6e>
 8009268:	2221      	movs	r2, #33	@ 0x21
 800926a:	2104      	movs	r1, #4
 800926c:	4620      	mov	r0, r4
 800926e:	f001 fae2 	bl	800a836 <_calloc_r>
 8009272:	69e3      	ldr	r3, [r4, #28]
 8009274:	60f0      	str	r0, [r6, #12]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e4      	bne.n	8009246 <_Balloc+0x2e>
 800927c:	2000      	movs	r0, #0
 800927e:	bd70      	pop	{r4, r5, r6, pc}
 8009280:	6802      	ldr	r2, [r0, #0]
 8009282:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009286:	2300      	movs	r3, #0
 8009288:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800928c:	e7f7      	b.n	800927e <_Balloc+0x66>
 800928e:	bf00      	nop
 8009290:	0800cca7 	.word	0x0800cca7
 8009294:	0800ce32 	.word	0x0800ce32

08009298 <_Bfree>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	69c6      	ldr	r6, [r0, #28]
 800929c:	4605      	mov	r5, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	b976      	cbnz	r6, 80092c0 <_Bfree+0x28>
 80092a2:	2010      	movs	r0, #16
 80092a4:	f7ff fef0 	bl	8009088 <malloc>
 80092a8:	4602      	mov	r2, r0
 80092aa:	61e8      	str	r0, [r5, #28]
 80092ac:	b920      	cbnz	r0, 80092b8 <_Bfree+0x20>
 80092ae:	4b09      	ldr	r3, [pc, #36]	@ (80092d4 <_Bfree+0x3c>)
 80092b0:	4809      	ldr	r0, [pc, #36]	@ (80092d8 <_Bfree+0x40>)
 80092b2:	218f      	movs	r1, #143	@ 0x8f
 80092b4:	f7fe fcfa 	bl	8007cac <__assert_func>
 80092b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092bc:	6006      	str	r6, [r0, #0]
 80092be:	60c6      	str	r6, [r0, #12]
 80092c0:	b13c      	cbz	r4, 80092d2 <_Bfree+0x3a>
 80092c2:	69eb      	ldr	r3, [r5, #28]
 80092c4:	6862      	ldr	r2, [r4, #4]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092cc:	6021      	str	r1, [r4, #0]
 80092ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092d2:	bd70      	pop	{r4, r5, r6, pc}
 80092d4:	0800cca7 	.word	0x0800cca7
 80092d8:	0800ce32 	.word	0x0800ce32

080092dc <__multadd>:
 80092dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e0:	690d      	ldr	r5, [r1, #16]
 80092e2:	4607      	mov	r7, r0
 80092e4:	460c      	mov	r4, r1
 80092e6:	461e      	mov	r6, r3
 80092e8:	f101 0c14 	add.w	ip, r1, #20
 80092ec:	2000      	movs	r0, #0
 80092ee:	f8dc 3000 	ldr.w	r3, [ip]
 80092f2:	b299      	uxth	r1, r3
 80092f4:	fb02 6101 	mla	r1, r2, r1, r6
 80092f8:	0c1e      	lsrs	r6, r3, #16
 80092fa:	0c0b      	lsrs	r3, r1, #16
 80092fc:	fb02 3306 	mla	r3, r2, r6, r3
 8009300:	b289      	uxth	r1, r1
 8009302:	3001      	adds	r0, #1
 8009304:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009308:	4285      	cmp	r5, r0
 800930a:	f84c 1b04 	str.w	r1, [ip], #4
 800930e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009312:	dcec      	bgt.n	80092ee <__multadd+0x12>
 8009314:	b30e      	cbz	r6, 800935a <__multadd+0x7e>
 8009316:	68a3      	ldr	r3, [r4, #8]
 8009318:	42ab      	cmp	r3, r5
 800931a:	dc19      	bgt.n	8009350 <__multadd+0x74>
 800931c:	6861      	ldr	r1, [r4, #4]
 800931e:	4638      	mov	r0, r7
 8009320:	3101      	adds	r1, #1
 8009322:	f7ff ff79 	bl	8009218 <_Balloc>
 8009326:	4680      	mov	r8, r0
 8009328:	b928      	cbnz	r0, 8009336 <__multadd+0x5a>
 800932a:	4602      	mov	r2, r0
 800932c:	4b0c      	ldr	r3, [pc, #48]	@ (8009360 <__multadd+0x84>)
 800932e:	480d      	ldr	r0, [pc, #52]	@ (8009364 <__multadd+0x88>)
 8009330:	21ba      	movs	r1, #186	@ 0xba
 8009332:	f7fe fcbb 	bl	8007cac <__assert_func>
 8009336:	6922      	ldr	r2, [r4, #16]
 8009338:	3202      	adds	r2, #2
 800933a:	f104 010c 	add.w	r1, r4, #12
 800933e:	0092      	lsls	r2, r2, #2
 8009340:	300c      	adds	r0, #12
 8009342:	f7fe fc96 	bl	8007c72 <memcpy>
 8009346:	4621      	mov	r1, r4
 8009348:	4638      	mov	r0, r7
 800934a:	f7ff ffa5 	bl	8009298 <_Bfree>
 800934e:	4644      	mov	r4, r8
 8009350:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009354:	3501      	adds	r5, #1
 8009356:	615e      	str	r6, [r3, #20]
 8009358:	6125      	str	r5, [r4, #16]
 800935a:	4620      	mov	r0, r4
 800935c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009360:	0800cdc1 	.word	0x0800cdc1
 8009364:	0800ce32 	.word	0x0800ce32

08009368 <__s2b>:
 8009368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800936c:	460c      	mov	r4, r1
 800936e:	4615      	mov	r5, r2
 8009370:	461f      	mov	r7, r3
 8009372:	2209      	movs	r2, #9
 8009374:	3308      	adds	r3, #8
 8009376:	4606      	mov	r6, r0
 8009378:	fb93 f3f2 	sdiv	r3, r3, r2
 800937c:	2100      	movs	r1, #0
 800937e:	2201      	movs	r2, #1
 8009380:	429a      	cmp	r2, r3
 8009382:	db09      	blt.n	8009398 <__s2b+0x30>
 8009384:	4630      	mov	r0, r6
 8009386:	f7ff ff47 	bl	8009218 <_Balloc>
 800938a:	b940      	cbnz	r0, 800939e <__s2b+0x36>
 800938c:	4602      	mov	r2, r0
 800938e:	4b19      	ldr	r3, [pc, #100]	@ (80093f4 <__s2b+0x8c>)
 8009390:	4819      	ldr	r0, [pc, #100]	@ (80093f8 <__s2b+0x90>)
 8009392:	21d3      	movs	r1, #211	@ 0xd3
 8009394:	f7fe fc8a 	bl	8007cac <__assert_func>
 8009398:	0052      	lsls	r2, r2, #1
 800939a:	3101      	adds	r1, #1
 800939c:	e7f0      	b.n	8009380 <__s2b+0x18>
 800939e:	9b08      	ldr	r3, [sp, #32]
 80093a0:	6143      	str	r3, [r0, #20]
 80093a2:	2d09      	cmp	r5, #9
 80093a4:	f04f 0301 	mov.w	r3, #1
 80093a8:	6103      	str	r3, [r0, #16]
 80093aa:	dd16      	ble.n	80093da <__s2b+0x72>
 80093ac:	f104 0909 	add.w	r9, r4, #9
 80093b0:	46c8      	mov	r8, r9
 80093b2:	442c      	add	r4, r5
 80093b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80093b8:	4601      	mov	r1, r0
 80093ba:	3b30      	subs	r3, #48	@ 0x30
 80093bc:	220a      	movs	r2, #10
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff ff8c 	bl	80092dc <__multadd>
 80093c4:	45a0      	cmp	r8, r4
 80093c6:	d1f5      	bne.n	80093b4 <__s2b+0x4c>
 80093c8:	f1a5 0408 	sub.w	r4, r5, #8
 80093cc:	444c      	add	r4, r9
 80093ce:	1b2d      	subs	r5, r5, r4
 80093d0:	1963      	adds	r3, r4, r5
 80093d2:	42bb      	cmp	r3, r7
 80093d4:	db04      	blt.n	80093e0 <__s2b+0x78>
 80093d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093da:	340a      	adds	r4, #10
 80093dc:	2509      	movs	r5, #9
 80093de:	e7f6      	b.n	80093ce <__s2b+0x66>
 80093e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093e4:	4601      	mov	r1, r0
 80093e6:	3b30      	subs	r3, #48	@ 0x30
 80093e8:	220a      	movs	r2, #10
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7ff ff76 	bl	80092dc <__multadd>
 80093f0:	e7ee      	b.n	80093d0 <__s2b+0x68>
 80093f2:	bf00      	nop
 80093f4:	0800cdc1 	.word	0x0800cdc1
 80093f8:	0800ce32 	.word	0x0800ce32

080093fc <__hi0bits>:
 80093fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009400:	4603      	mov	r3, r0
 8009402:	bf36      	itet	cc
 8009404:	0403      	lslcc	r3, r0, #16
 8009406:	2000      	movcs	r0, #0
 8009408:	2010      	movcc	r0, #16
 800940a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800940e:	bf3c      	itt	cc
 8009410:	021b      	lslcc	r3, r3, #8
 8009412:	3008      	addcc	r0, #8
 8009414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009418:	bf3c      	itt	cc
 800941a:	011b      	lslcc	r3, r3, #4
 800941c:	3004      	addcc	r0, #4
 800941e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009422:	bf3c      	itt	cc
 8009424:	009b      	lslcc	r3, r3, #2
 8009426:	3002      	addcc	r0, #2
 8009428:	2b00      	cmp	r3, #0
 800942a:	db05      	blt.n	8009438 <__hi0bits+0x3c>
 800942c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009430:	f100 0001 	add.w	r0, r0, #1
 8009434:	bf08      	it	eq
 8009436:	2020      	moveq	r0, #32
 8009438:	4770      	bx	lr

0800943a <__lo0bits>:
 800943a:	6803      	ldr	r3, [r0, #0]
 800943c:	4602      	mov	r2, r0
 800943e:	f013 0007 	ands.w	r0, r3, #7
 8009442:	d00b      	beq.n	800945c <__lo0bits+0x22>
 8009444:	07d9      	lsls	r1, r3, #31
 8009446:	d421      	bmi.n	800948c <__lo0bits+0x52>
 8009448:	0798      	lsls	r0, r3, #30
 800944a:	bf49      	itett	mi
 800944c:	085b      	lsrmi	r3, r3, #1
 800944e:	089b      	lsrpl	r3, r3, #2
 8009450:	2001      	movmi	r0, #1
 8009452:	6013      	strmi	r3, [r2, #0]
 8009454:	bf5c      	itt	pl
 8009456:	6013      	strpl	r3, [r2, #0]
 8009458:	2002      	movpl	r0, #2
 800945a:	4770      	bx	lr
 800945c:	b299      	uxth	r1, r3
 800945e:	b909      	cbnz	r1, 8009464 <__lo0bits+0x2a>
 8009460:	0c1b      	lsrs	r3, r3, #16
 8009462:	2010      	movs	r0, #16
 8009464:	b2d9      	uxtb	r1, r3
 8009466:	b909      	cbnz	r1, 800946c <__lo0bits+0x32>
 8009468:	3008      	adds	r0, #8
 800946a:	0a1b      	lsrs	r3, r3, #8
 800946c:	0719      	lsls	r1, r3, #28
 800946e:	bf04      	itt	eq
 8009470:	091b      	lsreq	r3, r3, #4
 8009472:	3004      	addeq	r0, #4
 8009474:	0799      	lsls	r1, r3, #30
 8009476:	bf04      	itt	eq
 8009478:	089b      	lsreq	r3, r3, #2
 800947a:	3002      	addeq	r0, #2
 800947c:	07d9      	lsls	r1, r3, #31
 800947e:	d403      	bmi.n	8009488 <__lo0bits+0x4e>
 8009480:	085b      	lsrs	r3, r3, #1
 8009482:	f100 0001 	add.w	r0, r0, #1
 8009486:	d003      	beq.n	8009490 <__lo0bits+0x56>
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	4770      	bx	lr
 800948c:	2000      	movs	r0, #0
 800948e:	4770      	bx	lr
 8009490:	2020      	movs	r0, #32
 8009492:	4770      	bx	lr

08009494 <__i2b>:
 8009494:	b510      	push	{r4, lr}
 8009496:	460c      	mov	r4, r1
 8009498:	2101      	movs	r1, #1
 800949a:	f7ff febd 	bl	8009218 <_Balloc>
 800949e:	4602      	mov	r2, r0
 80094a0:	b928      	cbnz	r0, 80094ae <__i2b+0x1a>
 80094a2:	4b05      	ldr	r3, [pc, #20]	@ (80094b8 <__i2b+0x24>)
 80094a4:	4805      	ldr	r0, [pc, #20]	@ (80094bc <__i2b+0x28>)
 80094a6:	f240 1145 	movw	r1, #325	@ 0x145
 80094aa:	f7fe fbff 	bl	8007cac <__assert_func>
 80094ae:	2301      	movs	r3, #1
 80094b0:	6144      	str	r4, [r0, #20]
 80094b2:	6103      	str	r3, [r0, #16]
 80094b4:	bd10      	pop	{r4, pc}
 80094b6:	bf00      	nop
 80094b8:	0800cdc1 	.word	0x0800cdc1
 80094bc:	0800ce32 	.word	0x0800ce32

080094c0 <__multiply>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	4614      	mov	r4, r2
 80094c6:	690a      	ldr	r2, [r1, #16]
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	bfa8      	it	ge
 80094ce:	4623      	movge	r3, r4
 80094d0:	460f      	mov	r7, r1
 80094d2:	bfa4      	itt	ge
 80094d4:	460c      	movge	r4, r1
 80094d6:	461f      	movge	r7, r3
 80094d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80094dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80094e0:	68a3      	ldr	r3, [r4, #8]
 80094e2:	6861      	ldr	r1, [r4, #4]
 80094e4:	eb0a 0609 	add.w	r6, sl, r9
 80094e8:	42b3      	cmp	r3, r6
 80094ea:	b085      	sub	sp, #20
 80094ec:	bfb8      	it	lt
 80094ee:	3101      	addlt	r1, #1
 80094f0:	f7ff fe92 	bl	8009218 <_Balloc>
 80094f4:	b930      	cbnz	r0, 8009504 <__multiply+0x44>
 80094f6:	4602      	mov	r2, r0
 80094f8:	4b44      	ldr	r3, [pc, #272]	@ (800960c <__multiply+0x14c>)
 80094fa:	4845      	ldr	r0, [pc, #276]	@ (8009610 <__multiply+0x150>)
 80094fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009500:	f7fe fbd4 	bl	8007cac <__assert_func>
 8009504:	f100 0514 	add.w	r5, r0, #20
 8009508:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800950c:	462b      	mov	r3, r5
 800950e:	2200      	movs	r2, #0
 8009510:	4543      	cmp	r3, r8
 8009512:	d321      	bcc.n	8009558 <__multiply+0x98>
 8009514:	f107 0114 	add.w	r1, r7, #20
 8009518:	f104 0214 	add.w	r2, r4, #20
 800951c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009520:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	1b13      	subs	r3, r2, r4
 8009528:	3b15      	subs	r3, #21
 800952a:	f023 0303 	bic.w	r3, r3, #3
 800952e:	3304      	adds	r3, #4
 8009530:	f104 0715 	add.w	r7, r4, #21
 8009534:	42ba      	cmp	r2, r7
 8009536:	bf38      	it	cc
 8009538:	2304      	movcc	r3, #4
 800953a:	9301      	str	r3, [sp, #4]
 800953c:	9b02      	ldr	r3, [sp, #8]
 800953e:	9103      	str	r1, [sp, #12]
 8009540:	428b      	cmp	r3, r1
 8009542:	d80c      	bhi.n	800955e <__multiply+0x9e>
 8009544:	2e00      	cmp	r6, #0
 8009546:	dd03      	ble.n	8009550 <__multiply+0x90>
 8009548:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800954c:	2b00      	cmp	r3, #0
 800954e:	d05b      	beq.n	8009608 <__multiply+0x148>
 8009550:	6106      	str	r6, [r0, #16]
 8009552:	b005      	add	sp, #20
 8009554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009558:	f843 2b04 	str.w	r2, [r3], #4
 800955c:	e7d8      	b.n	8009510 <__multiply+0x50>
 800955e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009562:	f1ba 0f00 	cmp.w	sl, #0
 8009566:	d024      	beq.n	80095b2 <__multiply+0xf2>
 8009568:	f104 0e14 	add.w	lr, r4, #20
 800956c:	46a9      	mov	r9, r5
 800956e:	f04f 0c00 	mov.w	ip, #0
 8009572:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009576:	f8d9 3000 	ldr.w	r3, [r9]
 800957a:	fa1f fb87 	uxth.w	fp, r7
 800957e:	b29b      	uxth	r3, r3
 8009580:	fb0a 330b 	mla	r3, sl, fp, r3
 8009584:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009588:	f8d9 7000 	ldr.w	r7, [r9]
 800958c:	4463      	add	r3, ip
 800958e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009592:	fb0a c70b 	mla	r7, sl, fp, ip
 8009596:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800959a:	b29b      	uxth	r3, r3
 800959c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095a0:	4572      	cmp	r2, lr
 80095a2:	f849 3b04 	str.w	r3, [r9], #4
 80095a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095aa:	d8e2      	bhi.n	8009572 <__multiply+0xb2>
 80095ac:	9b01      	ldr	r3, [sp, #4]
 80095ae:	f845 c003 	str.w	ip, [r5, r3]
 80095b2:	9b03      	ldr	r3, [sp, #12]
 80095b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80095b8:	3104      	adds	r1, #4
 80095ba:	f1b9 0f00 	cmp.w	r9, #0
 80095be:	d021      	beq.n	8009604 <__multiply+0x144>
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	f104 0c14 	add.w	ip, r4, #20
 80095c6:	46ae      	mov	lr, r5
 80095c8:	f04f 0a00 	mov.w	sl, #0
 80095cc:	f8bc b000 	ldrh.w	fp, [ip]
 80095d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80095d4:	fb09 770b 	mla	r7, r9, fp, r7
 80095d8:	4457      	add	r7, sl
 80095da:	b29b      	uxth	r3, r3
 80095dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095e0:	f84e 3b04 	str.w	r3, [lr], #4
 80095e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095ec:	f8be 3000 	ldrh.w	r3, [lr]
 80095f0:	fb09 330a 	mla	r3, r9, sl, r3
 80095f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80095f8:	4562      	cmp	r2, ip
 80095fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095fe:	d8e5      	bhi.n	80095cc <__multiply+0x10c>
 8009600:	9f01      	ldr	r7, [sp, #4]
 8009602:	51eb      	str	r3, [r5, r7]
 8009604:	3504      	adds	r5, #4
 8009606:	e799      	b.n	800953c <__multiply+0x7c>
 8009608:	3e01      	subs	r6, #1
 800960a:	e79b      	b.n	8009544 <__multiply+0x84>
 800960c:	0800cdc1 	.word	0x0800cdc1
 8009610:	0800ce32 	.word	0x0800ce32

08009614 <__pow5mult>:
 8009614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009618:	4615      	mov	r5, r2
 800961a:	f012 0203 	ands.w	r2, r2, #3
 800961e:	4607      	mov	r7, r0
 8009620:	460e      	mov	r6, r1
 8009622:	d007      	beq.n	8009634 <__pow5mult+0x20>
 8009624:	4c25      	ldr	r4, [pc, #148]	@ (80096bc <__pow5mult+0xa8>)
 8009626:	3a01      	subs	r2, #1
 8009628:	2300      	movs	r3, #0
 800962a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800962e:	f7ff fe55 	bl	80092dc <__multadd>
 8009632:	4606      	mov	r6, r0
 8009634:	10ad      	asrs	r5, r5, #2
 8009636:	d03d      	beq.n	80096b4 <__pow5mult+0xa0>
 8009638:	69fc      	ldr	r4, [r7, #28]
 800963a:	b97c      	cbnz	r4, 800965c <__pow5mult+0x48>
 800963c:	2010      	movs	r0, #16
 800963e:	f7ff fd23 	bl	8009088 <malloc>
 8009642:	4602      	mov	r2, r0
 8009644:	61f8      	str	r0, [r7, #28]
 8009646:	b928      	cbnz	r0, 8009654 <__pow5mult+0x40>
 8009648:	4b1d      	ldr	r3, [pc, #116]	@ (80096c0 <__pow5mult+0xac>)
 800964a:	481e      	ldr	r0, [pc, #120]	@ (80096c4 <__pow5mult+0xb0>)
 800964c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009650:	f7fe fb2c 	bl	8007cac <__assert_func>
 8009654:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009658:	6004      	str	r4, [r0, #0]
 800965a:	60c4      	str	r4, [r0, #12]
 800965c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009660:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009664:	b94c      	cbnz	r4, 800967a <__pow5mult+0x66>
 8009666:	f240 2171 	movw	r1, #625	@ 0x271
 800966a:	4638      	mov	r0, r7
 800966c:	f7ff ff12 	bl	8009494 <__i2b>
 8009670:	2300      	movs	r3, #0
 8009672:	f8c8 0008 	str.w	r0, [r8, #8]
 8009676:	4604      	mov	r4, r0
 8009678:	6003      	str	r3, [r0, #0]
 800967a:	f04f 0900 	mov.w	r9, #0
 800967e:	07eb      	lsls	r3, r5, #31
 8009680:	d50a      	bpl.n	8009698 <__pow5mult+0x84>
 8009682:	4631      	mov	r1, r6
 8009684:	4622      	mov	r2, r4
 8009686:	4638      	mov	r0, r7
 8009688:	f7ff ff1a 	bl	80094c0 <__multiply>
 800968c:	4631      	mov	r1, r6
 800968e:	4680      	mov	r8, r0
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff fe01 	bl	8009298 <_Bfree>
 8009696:	4646      	mov	r6, r8
 8009698:	106d      	asrs	r5, r5, #1
 800969a:	d00b      	beq.n	80096b4 <__pow5mult+0xa0>
 800969c:	6820      	ldr	r0, [r4, #0]
 800969e:	b938      	cbnz	r0, 80096b0 <__pow5mult+0x9c>
 80096a0:	4622      	mov	r2, r4
 80096a2:	4621      	mov	r1, r4
 80096a4:	4638      	mov	r0, r7
 80096a6:	f7ff ff0b 	bl	80094c0 <__multiply>
 80096aa:	6020      	str	r0, [r4, #0]
 80096ac:	f8c0 9000 	str.w	r9, [r0]
 80096b0:	4604      	mov	r4, r0
 80096b2:	e7e4      	b.n	800967e <__pow5mult+0x6a>
 80096b4:	4630      	mov	r0, r6
 80096b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ba:	bf00      	nop
 80096bc:	0800ce8c 	.word	0x0800ce8c
 80096c0:	0800cca7 	.word	0x0800cca7
 80096c4:	0800ce32 	.word	0x0800ce32

080096c8 <__lshift>:
 80096c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096cc:	460c      	mov	r4, r1
 80096ce:	6849      	ldr	r1, [r1, #4]
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	4607      	mov	r7, r0
 80096da:	4691      	mov	r9, r2
 80096dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096e0:	f108 0601 	add.w	r6, r8, #1
 80096e4:	42b3      	cmp	r3, r6
 80096e6:	db0b      	blt.n	8009700 <__lshift+0x38>
 80096e8:	4638      	mov	r0, r7
 80096ea:	f7ff fd95 	bl	8009218 <_Balloc>
 80096ee:	4605      	mov	r5, r0
 80096f0:	b948      	cbnz	r0, 8009706 <__lshift+0x3e>
 80096f2:	4602      	mov	r2, r0
 80096f4:	4b28      	ldr	r3, [pc, #160]	@ (8009798 <__lshift+0xd0>)
 80096f6:	4829      	ldr	r0, [pc, #164]	@ (800979c <__lshift+0xd4>)
 80096f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80096fc:	f7fe fad6 	bl	8007cac <__assert_func>
 8009700:	3101      	adds	r1, #1
 8009702:	005b      	lsls	r3, r3, #1
 8009704:	e7ee      	b.n	80096e4 <__lshift+0x1c>
 8009706:	2300      	movs	r3, #0
 8009708:	f100 0114 	add.w	r1, r0, #20
 800970c:	f100 0210 	add.w	r2, r0, #16
 8009710:	4618      	mov	r0, r3
 8009712:	4553      	cmp	r3, sl
 8009714:	db33      	blt.n	800977e <__lshift+0xb6>
 8009716:	6920      	ldr	r0, [r4, #16]
 8009718:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800971c:	f104 0314 	add.w	r3, r4, #20
 8009720:	f019 091f 	ands.w	r9, r9, #31
 8009724:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009728:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800972c:	d02b      	beq.n	8009786 <__lshift+0xbe>
 800972e:	f1c9 0e20 	rsb	lr, r9, #32
 8009732:	468a      	mov	sl, r1
 8009734:	2200      	movs	r2, #0
 8009736:	6818      	ldr	r0, [r3, #0]
 8009738:	fa00 f009 	lsl.w	r0, r0, r9
 800973c:	4310      	orrs	r0, r2
 800973e:	f84a 0b04 	str.w	r0, [sl], #4
 8009742:	f853 2b04 	ldr.w	r2, [r3], #4
 8009746:	459c      	cmp	ip, r3
 8009748:	fa22 f20e 	lsr.w	r2, r2, lr
 800974c:	d8f3      	bhi.n	8009736 <__lshift+0x6e>
 800974e:	ebac 0304 	sub.w	r3, ip, r4
 8009752:	3b15      	subs	r3, #21
 8009754:	f023 0303 	bic.w	r3, r3, #3
 8009758:	3304      	adds	r3, #4
 800975a:	f104 0015 	add.w	r0, r4, #21
 800975e:	4584      	cmp	ip, r0
 8009760:	bf38      	it	cc
 8009762:	2304      	movcc	r3, #4
 8009764:	50ca      	str	r2, [r1, r3]
 8009766:	b10a      	cbz	r2, 800976c <__lshift+0xa4>
 8009768:	f108 0602 	add.w	r6, r8, #2
 800976c:	3e01      	subs	r6, #1
 800976e:	4638      	mov	r0, r7
 8009770:	612e      	str	r6, [r5, #16]
 8009772:	4621      	mov	r1, r4
 8009774:	f7ff fd90 	bl	8009298 <_Bfree>
 8009778:	4628      	mov	r0, r5
 800977a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800977e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009782:	3301      	adds	r3, #1
 8009784:	e7c5      	b.n	8009712 <__lshift+0x4a>
 8009786:	3904      	subs	r1, #4
 8009788:	f853 2b04 	ldr.w	r2, [r3], #4
 800978c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009790:	459c      	cmp	ip, r3
 8009792:	d8f9      	bhi.n	8009788 <__lshift+0xc0>
 8009794:	e7ea      	b.n	800976c <__lshift+0xa4>
 8009796:	bf00      	nop
 8009798:	0800cdc1 	.word	0x0800cdc1
 800979c:	0800ce32 	.word	0x0800ce32

080097a0 <__mcmp>:
 80097a0:	690a      	ldr	r2, [r1, #16]
 80097a2:	4603      	mov	r3, r0
 80097a4:	6900      	ldr	r0, [r0, #16]
 80097a6:	1a80      	subs	r0, r0, r2
 80097a8:	b530      	push	{r4, r5, lr}
 80097aa:	d10e      	bne.n	80097ca <__mcmp+0x2a>
 80097ac:	3314      	adds	r3, #20
 80097ae:	3114      	adds	r1, #20
 80097b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80097b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097c0:	4295      	cmp	r5, r2
 80097c2:	d003      	beq.n	80097cc <__mcmp+0x2c>
 80097c4:	d205      	bcs.n	80097d2 <__mcmp+0x32>
 80097c6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ca:	bd30      	pop	{r4, r5, pc}
 80097cc:	42a3      	cmp	r3, r4
 80097ce:	d3f3      	bcc.n	80097b8 <__mcmp+0x18>
 80097d0:	e7fb      	b.n	80097ca <__mcmp+0x2a>
 80097d2:	2001      	movs	r0, #1
 80097d4:	e7f9      	b.n	80097ca <__mcmp+0x2a>
	...

080097d8 <__mdiff>:
 80097d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	4689      	mov	r9, r1
 80097de:	4606      	mov	r6, r0
 80097e0:	4611      	mov	r1, r2
 80097e2:	4648      	mov	r0, r9
 80097e4:	4614      	mov	r4, r2
 80097e6:	f7ff ffdb 	bl	80097a0 <__mcmp>
 80097ea:	1e05      	subs	r5, r0, #0
 80097ec:	d112      	bne.n	8009814 <__mdiff+0x3c>
 80097ee:	4629      	mov	r1, r5
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff fd11 	bl	8009218 <_Balloc>
 80097f6:	4602      	mov	r2, r0
 80097f8:	b928      	cbnz	r0, 8009806 <__mdiff+0x2e>
 80097fa:	4b3f      	ldr	r3, [pc, #252]	@ (80098f8 <__mdiff+0x120>)
 80097fc:	f240 2137 	movw	r1, #567	@ 0x237
 8009800:	483e      	ldr	r0, [pc, #248]	@ (80098fc <__mdiff+0x124>)
 8009802:	f7fe fa53 	bl	8007cac <__assert_func>
 8009806:	2301      	movs	r3, #1
 8009808:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800980c:	4610      	mov	r0, r2
 800980e:	b003      	add	sp, #12
 8009810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009814:	bfbc      	itt	lt
 8009816:	464b      	movlt	r3, r9
 8009818:	46a1      	movlt	r9, r4
 800981a:	4630      	mov	r0, r6
 800981c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009820:	bfba      	itte	lt
 8009822:	461c      	movlt	r4, r3
 8009824:	2501      	movlt	r5, #1
 8009826:	2500      	movge	r5, #0
 8009828:	f7ff fcf6 	bl	8009218 <_Balloc>
 800982c:	4602      	mov	r2, r0
 800982e:	b918      	cbnz	r0, 8009838 <__mdiff+0x60>
 8009830:	4b31      	ldr	r3, [pc, #196]	@ (80098f8 <__mdiff+0x120>)
 8009832:	f240 2145 	movw	r1, #581	@ 0x245
 8009836:	e7e3      	b.n	8009800 <__mdiff+0x28>
 8009838:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800983c:	6926      	ldr	r6, [r4, #16]
 800983e:	60c5      	str	r5, [r0, #12]
 8009840:	f109 0310 	add.w	r3, r9, #16
 8009844:	f109 0514 	add.w	r5, r9, #20
 8009848:	f104 0e14 	add.w	lr, r4, #20
 800984c:	f100 0b14 	add.w	fp, r0, #20
 8009850:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009854:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	46d9      	mov	r9, fp
 800985c:	f04f 0c00 	mov.w	ip, #0
 8009860:	9b01      	ldr	r3, [sp, #4]
 8009862:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009866:	f853 af04 	ldr.w	sl, [r3, #4]!
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	fa1f f38a 	uxth.w	r3, sl
 8009870:	4619      	mov	r1, r3
 8009872:	b283      	uxth	r3, r0
 8009874:	1acb      	subs	r3, r1, r3
 8009876:	0c00      	lsrs	r0, r0, #16
 8009878:	4463      	add	r3, ip
 800987a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800987e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009882:	b29b      	uxth	r3, r3
 8009884:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009888:	4576      	cmp	r6, lr
 800988a:	f849 3b04 	str.w	r3, [r9], #4
 800988e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009892:	d8e5      	bhi.n	8009860 <__mdiff+0x88>
 8009894:	1b33      	subs	r3, r6, r4
 8009896:	3b15      	subs	r3, #21
 8009898:	f023 0303 	bic.w	r3, r3, #3
 800989c:	3415      	adds	r4, #21
 800989e:	3304      	adds	r3, #4
 80098a0:	42a6      	cmp	r6, r4
 80098a2:	bf38      	it	cc
 80098a4:	2304      	movcc	r3, #4
 80098a6:	441d      	add	r5, r3
 80098a8:	445b      	add	r3, fp
 80098aa:	461e      	mov	r6, r3
 80098ac:	462c      	mov	r4, r5
 80098ae:	4544      	cmp	r4, r8
 80098b0:	d30e      	bcc.n	80098d0 <__mdiff+0xf8>
 80098b2:	f108 0103 	add.w	r1, r8, #3
 80098b6:	1b49      	subs	r1, r1, r5
 80098b8:	f021 0103 	bic.w	r1, r1, #3
 80098bc:	3d03      	subs	r5, #3
 80098be:	45a8      	cmp	r8, r5
 80098c0:	bf38      	it	cc
 80098c2:	2100      	movcc	r1, #0
 80098c4:	440b      	add	r3, r1
 80098c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098ca:	b191      	cbz	r1, 80098f2 <__mdiff+0x11a>
 80098cc:	6117      	str	r7, [r2, #16]
 80098ce:	e79d      	b.n	800980c <__mdiff+0x34>
 80098d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80098d4:	46e6      	mov	lr, ip
 80098d6:	0c08      	lsrs	r0, r1, #16
 80098d8:	fa1c fc81 	uxtah	ip, ip, r1
 80098dc:	4471      	add	r1, lr
 80098de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80098e2:	b289      	uxth	r1, r1
 80098e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80098e8:	f846 1b04 	str.w	r1, [r6], #4
 80098ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098f0:	e7dd      	b.n	80098ae <__mdiff+0xd6>
 80098f2:	3f01      	subs	r7, #1
 80098f4:	e7e7      	b.n	80098c6 <__mdiff+0xee>
 80098f6:	bf00      	nop
 80098f8:	0800cdc1 	.word	0x0800cdc1
 80098fc:	0800ce32 	.word	0x0800ce32

08009900 <__ulp>:
 8009900:	b082      	sub	sp, #8
 8009902:	ed8d 0b00 	vstr	d0, [sp]
 8009906:	9a01      	ldr	r2, [sp, #4]
 8009908:	4b0f      	ldr	r3, [pc, #60]	@ (8009948 <__ulp+0x48>)
 800990a:	4013      	ands	r3, r2
 800990c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009910:	2b00      	cmp	r3, #0
 8009912:	dc08      	bgt.n	8009926 <__ulp+0x26>
 8009914:	425b      	negs	r3, r3
 8009916:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800991a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800991e:	da04      	bge.n	800992a <__ulp+0x2a>
 8009920:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009924:	4113      	asrs	r3, r2
 8009926:	2200      	movs	r2, #0
 8009928:	e008      	b.n	800993c <__ulp+0x3c>
 800992a:	f1a2 0314 	sub.w	r3, r2, #20
 800992e:	2b1e      	cmp	r3, #30
 8009930:	bfda      	itte	le
 8009932:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009936:	40da      	lsrle	r2, r3
 8009938:	2201      	movgt	r2, #1
 800993a:	2300      	movs	r3, #0
 800993c:	4619      	mov	r1, r3
 800993e:	4610      	mov	r0, r2
 8009940:	ec41 0b10 	vmov	d0, r0, r1
 8009944:	b002      	add	sp, #8
 8009946:	4770      	bx	lr
 8009948:	7ff00000 	.word	0x7ff00000

0800994c <__b2d>:
 800994c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009950:	6906      	ldr	r6, [r0, #16]
 8009952:	f100 0814 	add.w	r8, r0, #20
 8009956:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800995a:	1f37      	subs	r7, r6, #4
 800995c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009960:	4610      	mov	r0, r2
 8009962:	f7ff fd4b 	bl	80093fc <__hi0bits>
 8009966:	f1c0 0320 	rsb	r3, r0, #32
 800996a:	280a      	cmp	r0, #10
 800996c:	600b      	str	r3, [r1, #0]
 800996e:	491b      	ldr	r1, [pc, #108]	@ (80099dc <__b2d+0x90>)
 8009970:	dc15      	bgt.n	800999e <__b2d+0x52>
 8009972:	f1c0 0c0b 	rsb	ip, r0, #11
 8009976:	fa22 f30c 	lsr.w	r3, r2, ip
 800997a:	45b8      	cmp	r8, r7
 800997c:	ea43 0501 	orr.w	r5, r3, r1
 8009980:	bf34      	ite	cc
 8009982:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009986:	2300      	movcs	r3, #0
 8009988:	3015      	adds	r0, #21
 800998a:	fa02 f000 	lsl.w	r0, r2, r0
 800998e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009992:	4303      	orrs	r3, r0
 8009994:	461c      	mov	r4, r3
 8009996:	ec45 4b10 	vmov	d0, r4, r5
 800999a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999e:	45b8      	cmp	r8, r7
 80099a0:	bf3a      	itte	cc
 80099a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80099a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80099aa:	2300      	movcs	r3, #0
 80099ac:	380b      	subs	r0, #11
 80099ae:	d012      	beq.n	80099d6 <__b2d+0x8a>
 80099b0:	f1c0 0120 	rsb	r1, r0, #32
 80099b4:	fa23 f401 	lsr.w	r4, r3, r1
 80099b8:	4082      	lsls	r2, r0
 80099ba:	4322      	orrs	r2, r4
 80099bc:	4547      	cmp	r7, r8
 80099be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80099c2:	bf8c      	ite	hi
 80099c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80099c8:	2200      	movls	r2, #0
 80099ca:	4083      	lsls	r3, r0
 80099cc:	40ca      	lsrs	r2, r1
 80099ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80099d2:	4313      	orrs	r3, r2
 80099d4:	e7de      	b.n	8009994 <__b2d+0x48>
 80099d6:	ea42 0501 	orr.w	r5, r2, r1
 80099da:	e7db      	b.n	8009994 <__b2d+0x48>
 80099dc:	3ff00000 	.word	0x3ff00000

080099e0 <__d2b>:
 80099e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099e4:	460f      	mov	r7, r1
 80099e6:	2101      	movs	r1, #1
 80099e8:	ec59 8b10 	vmov	r8, r9, d0
 80099ec:	4616      	mov	r6, r2
 80099ee:	f7ff fc13 	bl	8009218 <_Balloc>
 80099f2:	4604      	mov	r4, r0
 80099f4:	b930      	cbnz	r0, 8009a04 <__d2b+0x24>
 80099f6:	4602      	mov	r2, r0
 80099f8:	4b23      	ldr	r3, [pc, #140]	@ (8009a88 <__d2b+0xa8>)
 80099fa:	4824      	ldr	r0, [pc, #144]	@ (8009a8c <__d2b+0xac>)
 80099fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a00:	f7fe f954 	bl	8007cac <__assert_func>
 8009a04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a0c:	b10d      	cbz	r5, 8009a12 <__d2b+0x32>
 8009a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	f1b8 0300 	subs.w	r3, r8, #0
 8009a18:	d023      	beq.n	8009a62 <__d2b+0x82>
 8009a1a:	4668      	mov	r0, sp
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	f7ff fd0c 	bl	800943a <__lo0bits>
 8009a22:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a26:	b1d0      	cbz	r0, 8009a5e <__d2b+0x7e>
 8009a28:	f1c0 0320 	rsb	r3, r0, #32
 8009a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a30:	430b      	orrs	r3, r1
 8009a32:	40c2      	lsrs	r2, r0
 8009a34:	6163      	str	r3, [r4, #20]
 8009a36:	9201      	str	r2, [sp, #4]
 8009a38:	9b01      	ldr	r3, [sp, #4]
 8009a3a:	61a3      	str	r3, [r4, #24]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	bf0c      	ite	eq
 8009a40:	2201      	moveq	r2, #1
 8009a42:	2202      	movne	r2, #2
 8009a44:	6122      	str	r2, [r4, #16]
 8009a46:	b1a5      	cbz	r5, 8009a72 <__d2b+0x92>
 8009a48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a4c:	4405      	add	r5, r0
 8009a4e:	603d      	str	r5, [r7, #0]
 8009a50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a54:	6030      	str	r0, [r6, #0]
 8009a56:	4620      	mov	r0, r4
 8009a58:	b003      	add	sp, #12
 8009a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a5e:	6161      	str	r1, [r4, #20]
 8009a60:	e7ea      	b.n	8009a38 <__d2b+0x58>
 8009a62:	a801      	add	r0, sp, #4
 8009a64:	f7ff fce9 	bl	800943a <__lo0bits>
 8009a68:	9b01      	ldr	r3, [sp, #4]
 8009a6a:	6163      	str	r3, [r4, #20]
 8009a6c:	3020      	adds	r0, #32
 8009a6e:	2201      	movs	r2, #1
 8009a70:	e7e8      	b.n	8009a44 <__d2b+0x64>
 8009a72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a7a:	6038      	str	r0, [r7, #0]
 8009a7c:	6918      	ldr	r0, [r3, #16]
 8009a7e:	f7ff fcbd 	bl	80093fc <__hi0bits>
 8009a82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a86:	e7e5      	b.n	8009a54 <__d2b+0x74>
 8009a88:	0800cdc1 	.word	0x0800cdc1
 8009a8c:	0800ce32 	.word	0x0800ce32

08009a90 <__ratio>:
 8009a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	b085      	sub	sp, #20
 8009a96:	e9cd 1000 	strd	r1, r0, [sp]
 8009a9a:	a902      	add	r1, sp, #8
 8009a9c:	f7ff ff56 	bl	800994c <__b2d>
 8009aa0:	9800      	ldr	r0, [sp, #0]
 8009aa2:	a903      	add	r1, sp, #12
 8009aa4:	ec55 4b10 	vmov	r4, r5, d0
 8009aa8:	f7ff ff50 	bl	800994c <__b2d>
 8009aac:	9b01      	ldr	r3, [sp, #4]
 8009aae:	6919      	ldr	r1, [r3, #16]
 8009ab0:	9b00      	ldr	r3, [sp, #0]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	1ac9      	subs	r1, r1, r3
 8009ab6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009aba:	1a9b      	subs	r3, r3, r2
 8009abc:	ec5b ab10 	vmov	sl, fp, d0
 8009ac0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	bfce      	itee	gt
 8009ac8:	462a      	movgt	r2, r5
 8009aca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ace:	465a      	movle	r2, fp
 8009ad0:	462f      	mov	r7, r5
 8009ad2:	46d9      	mov	r9, fp
 8009ad4:	bfcc      	ite	gt
 8009ad6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ada:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009ade:	464b      	mov	r3, r9
 8009ae0:	4652      	mov	r2, sl
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	f7f6 feb9 	bl	800085c <__aeabi_ddiv>
 8009aea:	ec41 0b10 	vmov	d0, r0, r1
 8009aee:	b005      	add	sp, #20
 8009af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009af4 <__copybits>:
 8009af4:	3901      	subs	r1, #1
 8009af6:	b570      	push	{r4, r5, r6, lr}
 8009af8:	1149      	asrs	r1, r1, #5
 8009afa:	6914      	ldr	r4, [r2, #16]
 8009afc:	3101      	adds	r1, #1
 8009afe:	f102 0314 	add.w	r3, r2, #20
 8009b02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009b06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009b0a:	1f05      	subs	r5, r0, #4
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	d30c      	bcc.n	8009b2a <__copybits+0x36>
 8009b10:	1aa3      	subs	r3, r4, r2
 8009b12:	3b11      	subs	r3, #17
 8009b14:	f023 0303 	bic.w	r3, r3, #3
 8009b18:	3211      	adds	r2, #17
 8009b1a:	42a2      	cmp	r2, r4
 8009b1c:	bf88      	it	hi
 8009b1e:	2300      	movhi	r3, #0
 8009b20:	4418      	add	r0, r3
 8009b22:	2300      	movs	r3, #0
 8009b24:	4288      	cmp	r0, r1
 8009b26:	d305      	bcc.n	8009b34 <__copybits+0x40>
 8009b28:	bd70      	pop	{r4, r5, r6, pc}
 8009b2a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009b2e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009b32:	e7eb      	b.n	8009b0c <__copybits+0x18>
 8009b34:	f840 3b04 	str.w	r3, [r0], #4
 8009b38:	e7f4      	b.n	8009b24 <__copybits+0x30>

08009b3a <__any_on>:
 8009b3a:	f100 0214 	add.w	r2, r0, #20
 8009b3e:	6900      	ldr	r0, [r0, #16]
 8009b40:	114b      	asrs	r3, r1, #5
 8009b42:	4298      	cmp	r0, r3
 8009b44:	b510      	push	{r4, lr}
 8009b46:	db11      	blt.n	8009b6c <__any_on+0x32>
 8009b48:	dd0a      	ble.n	8009b60 <__any_on+0x26>
 8009b4a:	f011 011f 	ands.w	r1, r1, #31
 8009b4e:	d007      	beq.n	8009b60 <__any_on+0x26>
 8009b50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009b54:	fa24 f001 	lsr.w	r0, r4, r1
 8009b58:	fa00 f101 	lsl.w	r1, r0, r1
 8009b5c:	428c      	cmp	r4, r1
 8009b5e:	d10b      	bne.n	8009b78 <__any_on+0x3e>
 8009b60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d803      	bhi.n	8009b70 <__any_on+0x36>
 8009b68:	2000      	movs	r0, #0
 8009b6a:	bd10      	pop	{r4, pc}
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	e7f7      	b.n	8009b60 <__any_on+0x26>
 8009b70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b74:	2900      	cmp	r1, #0
 8009b76:	d0f5      	beq.n	8009b64 <__any_on+0x2a>
 8009b78:	2001      	movs	r0, #1
 8009b7a:	e7f6      	b.n	8009b6a <__any_on+0x30>

08009b7c <_strtol_l.constprop.0>:
 8009b7c:	2b24      	cmp	r3, #36	@ 0x24
 8009b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b82:	4686      	mov	lr, r0
 8009b84:	4690      	mov	r8, r2
 8009b86:	d801      	bhi.n	8009b8c <_strtol_l.constprop.0+0x10>
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d106      	bne.n	8009b9a <_strtol_l.constprop.0+0x1e>
 8009b8c:	f7fe f844 	bl	8007c18 <__errno>
 8009b90:	2316      	movs	r3, #22
 8009b92:	6003      	str	r3, [r0, #0]
 8009b94:	2000      	movs	r0, #0
 8009b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9a:	4834      	ldr	r0, [pc, #208]	@ (8009c6c <_strtol_l.constprop.0+0xf0>)
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	462a      	mov	r2, r5
 8009ba0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ba4:	5d06      	ldrb	r6, [r0, r4]
 8009ba6:	f016 0608 	ands.w	r6, r6, #8
 8009baa:	d1f8      	bne.n	8009b9e <_strtol_l.constprop.0+0x22>
 8009bac:	2c2d      	cmp	r4, #45	@ 0x2d
 8009bae:	d12d      	bne.n	8009c0c <_strtol_l.constprop.0+0x90>
 8009bb0:	782c      	ldrb	r4, [r5, #0]
 8009bb2:	2601      	movs	r6, #1
 8009bb4:	1c95      	adds	r5, r2, #2
 8009bb6:	f033 0210 	bics.w	r2, r3, #16
 8009bba:	d109      	bne.n	8009bd0 <_strtol_l.constprop.0+0x54>
 8009bbc:	2c30      	cmp	r4, #48	@ 0x30
 8009bbe:	d12a      	bne.n	8009c16 <_strtol_l.constprop.0+0x9a>
 8009bc0:	782a      	ldrb	r2, [r5, #0]
 8009bc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009bc6:	2a58      	cmp	r2, #88	@ 0x58
 8009bc8:	d125      	bne.n	8009c16 <_strtol_l.constprop.0+0x9a>
 8009bca:	786c      	ldrb	r4, [r5, #1]
 8009bcc:	2310      	movs	r3, #16
 8009bce:	3502      	adds	r5, #2
 8009bd0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009bd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009bd8:	2200      	movs	r2, #0
 8009bda:	fbbc f9f3 	udiv	r9, ip, r3
 8009bde:	4610      	mov	r0, r2
 8009be0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009be4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009be8:	2f09      	cmp	r7, #9
 8009bea:	d81b      	bhi.n	8009c24 <_strtol_l.constprop.0+0xa8>
 8009bec:	463c      	mov	r4, r7
 8009bee:	42a3      	cmp	r3, r4
 8009bf0:	dd27      	ble.n	8009c42 <_strtol_l.constprop.0+0xc6>
 8009bf2:	1c57      	adds	r7, r2, #1
 8009bf4:	d007      	beq.n	8009c06 <_strtol_l.constprop.0+0x8a>
 8009bf6:	4581      	cmp	r9, r0
 8009bf8:	d320      	bcc.n	8009c3c <_strtol_l.constprop.0+0xc0>
 8009bfa:	d101      	bne.n	8009c00 <_strtol_l.constprop.0+0x84>
 8009bfc:	45a2      	cmp	sl, r4
 8009bfe:	db1d      	blt.n	8009c3c <_strtol_l.constprop.0+0xc0>
 8009c00:	fb00 4003 	mla	r0, r0, r3, r4
 8009c04:	2201      	movs	r2, #1
 8009c06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c0a:	e7eb      	b.n	8009be4 <_strtol_l.constprop.0+0x68>
 8009c0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009c0e:	bf04      	itt	eq
 8009c10:	782c      	ldrbeq	r4, [r5, #0]
 8009c12:	1c95      	addeq	r5, r2, #2
 8009c14:	e7cf      	b.n	8009bb6 <_strtol_l.constprop.0+0x3a>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d1da      	bne.n	8009bd0 <_strtol_l.constprop.0+0x54>
 8009c1a:	2c30      	cmp	r4, #48	@ 0x30
 8009c1c:	bf0c      	ite	eq
 8009c1e:	2308      	moveq	r3, #8
 8009c20:	230a      	movne	r3, #10
 8009c22:	e7d5      	b.n	8009bd0 <_strtol_l.constprop.0+0x54>
 8009c24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c28:	2f19      	cmp	r7, #25
 8009c2a:	d801      	bhi.n	8009c30 <_strtol_l.constprop.0+0xb4>
 8009c2c:	3c37      	subs	r4, #55	@ 0x37
 8009c2e:	e7de      	b.n	8009bee <_strtol_l.constprop.0+0x72>
 8009c30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c34:	2f19      	cmp	r7, #25
 8009c36:	d804      	bhi.n	8009c42 <_strtol_l.constprop.0+0xc6>
 8009c38:	3c57      	subs	r4, #87	@ 0x57
 8009c3a:	e7d8      	b.n	8009bee <_strtol_l.constprop.0+0x72>
 8009c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c40:	e7e1      	b.n	8009c06 <_strtol_l.constprop.0+0x8a>
 8009c42:	1c53      	adds	r3, r2, #1
 8009c44:	d108      	bne.n	8009c58 <_strtol_l.constprop.0+0xdc>
 8009c46:	2322      	movs	r3, #34	@ 0x22
 8009c48:	f8ce 3000 	str.w	r3, [lr]
 8009c4c:	4660      	mov	r0, ip
 8009c4e:	f1b8 0f00 	cmp.w	r8, #0
 8009c52:	d0a0      	beq.n	8009b96 <_strtol_l.constprop.0+0x1a>
 8009c54:	1e69      	subs	r1, r5, #1
 8009c56:	e006      	b.n	8009c66 <_strtol_l.constprop.0+0xea>
 8009c58:	b106      	cbz	r6, 8009c5c <_strtol_l.constprop.0+0xe0>
 8009c5a:	4240      	negs	r0, r0
 8009c5c:	f1b8 0f00 	cmp.w	r8, #0
 8009c60:	d099      	beq.n	8009b96 <_strtol_l.constprop.0+0x1a>
 8009c62:	2a00      	cmp	r2, #0
 8009c64:	d1f6      	bne.n	8009c54 <_strtol_l.constprop.0+0xd8>
 8009c66:	f8c8 1000 	str.w	r1, [r8]
 8009c6a:	e794      	b.n	8009b96 <_strtol_l.constprop.0+0x1a>
 8009c6c:	0800cf89 	.word	0x0800cf89

08009c70 <_strtol_r>:
 8009c70:	f7ff bf84 	b.w	8009b7c <_strtol_l.constprop.0>

08009c74 <__ascii_wctomb>:
 8009c74:	4603      	mov	r3, r0
 8009c76:	4608      	mov	r0, r1
 8009c78:	b141      	cbz	r1, 8009c8c <__ascii_wctomb+0x18>
 8009c7a:	2aff      	cmp	r2, #255	@ 0xff
 8009c7c:	d904      	bls.n	8009c88 <__ascii_wctomb+0x14>
 8009c7e:	228a      	movs	r2, #138	@ 0x8a
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	f04f 30ff 	mov.w	r0, #4294967295
 8009c86:	4770      	bx	lr
 8009c88:	700a      	strb	r2, [r1, #0]
 8009c8a:	2001      	movs	r0, #1
 8009c8c:	4770      	bx	lr

08009c8e <__ssputs_r>:
 8009c8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c92:	688e      	ldr	r6, [r1, #8]
 8009c94:	461f      	mov	r7, r3
 8009c96:	42be      	cmp	r6, r7
 8009c98:	680b      	ldr	r3, [r1, #0]
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	4690      	mov	r8, r2
 8009ca0:	d82d      	bhi.n	8009cfe <__ssputs_r+0x70>
 8009ca2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ca6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009caa:	d026      	beq.n	8009cfa <__ssputs_r+0x6c>
 8009cac:	6965      	ldr	r5, [r4, #20]
 8009cae:	6909      	ldr	r1, [r1, #16]
 8009cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cb4:	eba3 0901 	sub.w	r9, r3, r1
 8009cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cbc:	1c7b      	adds	r3, r7, #1
 8009cbe:	444b      	add	r3, r9
 8009cc0:	106d      	asrs	r5, r5, #1
 8009cc2:	429d      	cmp	r5, r3
 8009cc4:	bf38      	it	cc
 8009cc6:	461d      	movcc	r5, r3
 8009cc8:	0553      	lsls	r3, r2, #21
 8009cca:	d527      	bpl.n	8009d1c <__ssputs_r+0x8e>
 8009ccc:	4629      	mov	r1, r5
 8009cce:	f7ff fa05 	bl	80090dc <_malloc_r>
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	b360      	cbz	r0, 8009d30 <__ssputs_r+0xa2>
 8009cd6:	6921      	ldr	r1, [r4, #16]
 8009cd8:	464a      	mov	r2, r9
 8009cda:	f7fd ffca 	bl	8007c72 <memcpy>
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ce8:	81a3      	strh	r3, [r4, #12]
 8009cea:	6126      	str	r6, [r4, #16]
 8009cec:	6165      	str	r5, [r4, #20]
 8009cee:	444e      	add	r6, r9
 8009cf0:	eba5 0509 	sub.w	r5, r5, r9
 8009cf4:	6026      	str	r6, [r4, #0]
 8009cf6:	60a5      	str	r5, [r4, #8]
 8009cf8:	463e      	mov	r6, r7
 8009cfa:	42be      	cmp	r6, r7
 8009cfc:	d900      	bls.n	8009d00 <__ssputs_r+0x72>
 8009cfe:	463e      	mov	r6, r7
 8009d00:	6820      	ldr	r0, [r4, #0]
 8009d02:	4632      	mov	r2, r6
 8009d04:	4641      	mov	r1, r8
 8009d06:	f000 fd64 	bl	800a7d2 <memmove>
 8009d0a:	68a3      	ldr	r3, [r4, #8]
 8009d0c:	1b9b      	subs	r3, r3, r6
 8009d0e:	60a3      	str	r3, [r4, #8]
 8009d10:	6823      	ldr	r3, [r4, #0]
 8009d12:	4433      	add	r3, r6
 8009d14:	6023      	str	r3, [r4, #0]
 8009d16:	2000      	movs	r0, #0
 8009d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1c:	462a      	mov	r2, r5
 8009d1e:	f000 fd9e 	bl	800a85e <_realloc_r>
 8009d22:	4606      	mov	r6, r0
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d1e0      	bne.n	8009cea <__ssputs_r+0x5c>
 8009d28:	6921      	ldr	r1, [r4, #16]
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f7fe fe28 	bl	8008980 <_free_r>
 8009d30:	230c      	movs	r3, #12
 8009d32:	f8ca 3000 	str.w	r3, [sl]
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d42:	e7e9      	b.n	8009d18 <__ssputs_r+0x8a>

08009d44 <_svfiprintf_r>:
 8009d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d48:	4698      	mov	r8, r3
 8009d4a:	898b      	ldrh	r3, [r1, #12]
 8009d4c:	061b      	lsls	r3, r3, #24
 8009d4e:	b09d      	sub	sp, #116	@ 0x74
 8009d50:	4607      	mov	r7, r0
 8009d52:	460d      	mov	r5, r1
 8009d54:	4614      	mov	r4, r2
 8009d56:	d510      	bpl.n	8009d7a <_svfiprintf_r+0x36>
 8009d58:	690b      	ldr	r3, [r1, #16]
 8009d5a:	b973      	cbnz	r3, 8009d7a <_svfiprintf_r+0x36>
 8009d5c:	2140      	movs	r1, #64	@ 0x40
 8009d5e:	f7ff f9bd 	bl	80090dc <_malloc_r>
 8009d62:	6028      	str	r0, [r5, #0]
 8009d64:	6128      	str	r0, [r5, #16]
 8009d66:	b930      	cbnz	r0, 8009d76 <_svfiprintf_r+0x32>
 8009d68:	230c      	movs	r3, #12
 8009d6a:	603b      	str	r3, [r7, #0]
 8009d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d70:	b01d      	add	sp, #116	@ 0x74
 8009d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d76:	2340      	movs	r3, #64	@ 0x40
 8009d78:	616b      	str	r3, [r5, #20]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d7e:	2320      	movs	r3, #32
 8009d80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d88:	2330      	movs	r3, #48	@ 0x30
 8009d8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f28 <_svfiprintf_r+0x1e4>
 8009d8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d92:	f04f 0901 	mov.w	r9, #1
 8009d96:	4623      	mov	r3, r4
 8009d98:	469a      	mov	sl, r3
 8009d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9e:	b10a      	cbz	r2, 8009da4 <_svfiprintf_r+0x60>
 8009da0:	2a25      	cmp	r2, #37	@ 0x25
 8009da2:	d1f9      	bne.n	8009d98 <_svfiprintf_r+0x54>
 8009da4:	ebba 0b04 	subs.w	fp, sl, r4
 8009da8:	d00b      	beq.n	8009dc2 <_svfiprintf_r+0x7e>
 8009daa:	465b      	mov	r3, fp
 8009dac:	4622      	mov	r2, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7ff ff6c 	bl	8009c8e <__ssputs_r>
 8009db6:	3001      	adds	r0, #1
 8009db8:	f000 80a7 	beq.w	8009f0a <_svfiprintf_r+0x1c6>
 8009dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dbe:	445a      	add	r2, fp
 8009dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f000 809f 	beq.w	8009f0a <_svfiprintf_r+0x1c6>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd6:	f10a 0a01 	add.w	sl, sl, #1
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	9307      	str	r3, [sp, #28]
 8009dde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009de2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009de4:	4654      	mov	r4, sl
 8009de6:	2205      	movs	r2, #5
 8009de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dec:	484e      	ldr	r0, [pc, #312]	@ (8009f28 <_svfiprintf_r+0x1e4>)
 8009dee:	f7f6 f9f7 	bl	80001e0 <memchr>
 8009df2:	9a04      	ldr	r2, [sp, #16]
 8009df4:	b9d8      	cbnz	r0, 8009e2e <_svfiprintf_r+0xea>
 8009df6:	06d0      	lsls	r0, r2, #27
 8009df8:	bf44      	itt	mi
 8009dfa:	2320      	movmi	r3, #32
 8009dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e00:	0711      	lsls	r1, r2, #28
 8009e02:	bf44      	itt	mi
 8009e04:	232b      	movmi	r3, #43	@ 0x2b
 8009e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e10:	d015      	beq.n	8009e3e <_svfiprintf_r+0xfa>
 8009e12:	9a07      	ldr	r2, [sp, #28]
 8009e14:	4654      	mov	r4, sl
 8009e16:	2000      	movs	r0, #0
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e22:	3b30      	subs	r3, #48	@ 0x30
 8009e24:	2b09      	cmp	r3, #9
 8009e26:	d94b      	bls.n	8009ec0 <_svfiprintf_r+0x17c>
 8009e28:	b1b0      	cbz	r0, 8009e58 <_svfiprintf_r+0x114>
 8009e2a:	9207      	str	r2, [sp, #28]
 8009e2c:	e014      	b.n	8009e58 <_svfiprintf_r+0x114>
 8009e2e:	eba0 0308 	sub.w	r3, r0, r8
 8009e32:	fa09 f303 	lsl.w	r3, r9, r3
 8009e36:	4313      	orrs	r3, r2
 8009e38:	9304      	str	r3, [sp, #16]
 8009e3a:	46a2      	mov	sl, r4
 8009e3c:	e7d2      	b.n	8009de4 <_svfiprintf_r+0xa0>
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	1d19      	adds	r1, r3, #4
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	9103      	str	r1, [sp, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfbb      	ittet	lt
 8009e4a:	425b      	neglt	r3, r3
 8009e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e50:	9307      	strge	r3, [sp, #28]
 8009e52:	9307      	strlt	r3, [sp, #28]
 8009e54:	bfb8      	it	lt
 8009e56:	9204      	strlt	r2, [sp, #16]
 8009e58:	7823      	ldrb	r3, [r4, #0]
 8009e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e5c:	d10a      	bne.n	8009e74 <_svfiprintf_r+0x130>
 8009e5e:	7863      	ldrb	r3, [r4, #1]
 8009e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e62:	d132      	bne.n	8009eca <_svfiprintf_r+0x186>
 8009e64:	9b03      	ldr	r3, [sp, #12]
 8009e66:	1d1a      	adds	r2, r3, #4
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	9203      	str	r2, [sp, #12]
 8009e6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e70:	3402      	adds	r4, #2
 8009e72:	9305      	str	r3, [sp, #20]
 8009e74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f38 <_svfiprintf_r+0x1f4>
 8009e78:	7821      	ldrb	r1, [r4, #0]
 8009e7a:	2203      	movs	r2, #3
 8009e7c:	4650      	mov	r0, sl
 8009e7e:	f7f6 f9af 	bl	80001e0 <memchr>
 8009e82:	b138      	cbz	r0, 8009e94 <_svfiprintf_r+0x150>
 8009e84:	9b04      	ldr	r3, [sp, #16]
 8009e86:	eba0 000a 	sub.w	r0, r0, sl
 8009e8a:	2240      	movs	r2, #64	@ 0x40
 8009e8c:	4082      	lsls	r2, r0
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	3401      	adds	r4, #1
 8009e92:	9304      	str	r3, [sp, #16]
 8009e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e98:	4824      	ldr	r0, [pc, #144]	@ (8009f2c <_svfiprintf_r+0x1e8>)
 8009e9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e9e:	2206      	movs	r2, #6
 8009ea0:	f7f6 f99e 	bl	80001e0 <memchr>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d036      	beq.n	8009f16 <_svfiprintf_r+0x1d2>
 8009ea8:	4b21      	ldr	r3, [pc, #132]	@ (8009f30 <_svfiprintf_r+0x1ec>)
 8009eaa:	bb1b      	cbnz	r3, 8009ef4 <_svfiprintf_r+0x1b0>
 8009eac:	9b03      	ldr	r3, [sp, #12]
 8009eae:	3307      	adds	r3, #7
 8009eb0:	f023 0307 	bic.w	r3, r3, #7
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	9303      	str	r3, [sp, #12]
 8009eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eba:	4433      	add	r3, r6
 8009ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ebe:	e76a      	b.n	8009d96 <_svfiprintf_r+0x52>
 8009ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	2001      	movs	r0, #1
 8009ec8:	e7a8      	b.n	8009e1c <_svfiprintf_r+0xd8>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	3401      	adds	r4, #1
 8009ece:	9305      	str	r3, [sp, #20]
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	f04f 0c0a 	mov.w	ip, #10
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009edc:	3a30      	subs	r2, #48	@ 0x30
 8009ede:	2a09      	cmp	r2, #9
 8009ee0:	d903      	bls.n	8009eea <_svfiprintf_r+0x1a6>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0c6      	beq.n	8009e74 <_svfiprintf_r+0x130>
 8009ee6:	9105      	str	r1, [sp, #20]
 8009ee8:	e7c4      	b.n	8009e74 <_svfiprintf_r+0x130>
 8009eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eee:	4604      	mov	r4, r0
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e7f0      	b.n	8009ed6 <_svfiprintf_r+0x192>
 8009ef4:	ab03      	add	r3, sp, #12
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	462a      	mov	r2, r5
 8009efa:	4b0e      	ldr	r3, [pc, #56]	@ (8009f34 <_svfiprintf_r+0x1f0>)
 8009efc:	a904      	add	r1, sp, #16
 8009efe:	4638      	mov	r0, r7
 8009f00:	f7fc fe78 	bl	8006bf4 <_printf_float>
 8009f04:	1c42      	adds	r2, r0, #1
 8009f06:	4606      	mov	r6, r0
 8009f08:	d1d6      	bne.n	8009eb8 <_svfiprintf_r+0x174>
 8009f0a:	89ab      	ldrh	r3, [r5, #12]
 8009f0c:	065b      	lsls	r3, r3, #25
 8009f0e:	f53f af2d 	bmi.w	8009d6c <_svfiprintf_r+0x28>
 8009f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f14:	e72c      	b.n	8009d70 <_svfiprintf_r+0x2c>
 8009f16:	ab03      	add	r3, sp, #12
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	4b05      	ldr	r3, [pc, #20]	@ (8009f34 <_svfiprintf_r+0x1f0>)
 8009f1e:	a904      	add	r1, sp, #16
 8009f20:	4638      	mov	r0, r7
 8009f22:	f7fd f8ff 	bl	8007124 <_printf_i>
 8009f26:	e7ed      	b.n	8009f04 <_svfiprintf_r+0x1c0>
 8009f28:	0800d089 	.word	0x0800d089
 8009f2c:	0800d093 	.word	0x0800d093
 8009f30:	08006bf5 	.word	0x08006bf5
 8009f34:	08009c8f 	.word	0x08009c8f
 8009f38:	0800d08f 	.word	0x0800d08f

08009f3c <_sungetc_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	1c4b      	adds	r3, r1, #1
 8009f40:	4614      	mov	r4, r2
 8009f42:	d103      	bne.n	8009f4c <_sungetc_r+0x10>
 8009f44:	f04f 35ff 	mov.w	r5, #4294967295
 8009f48:	4628      	mov	r0, r5
 8009f4a:	bd38      	pop	{r3, r4, r5, pc}
 8009f4c:	8993      	ldrh	r3, [r2, #12]
 8009f4e:	f023 0320 	bic.w	r3, r3, #32
 8009f52:	8193      	strh	r3, [r2, #12]
 8009f54:	6853      	ldr	r3, [r2, #4]
 8009f56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009f58:	b2cd      	uxtb	r5, r1
 8009f5a:	b18a      	cbz	r2, 8009f80 <_sungetc_r+0x44>
 8009f5c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	dd08      	ble.n	8009f74 <_sungetc_r+0x38>
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	1e5a      	subs	r2, r3, #1
 8009f66:	6022      	str	r2, [r4, #0]
 8009f68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009f6c:	6863      	ldr	r3, [r4, #4]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	6063      	str	r3, [r4, #4]
 8009f72:	e7e9      	b.n	8009f48 <_sungetc_r+0xc>
 8009f74:	4621      	mov	r1, r4
 8009f76:	f000 fbf2 	bl	800a75e <__submore>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d0f1      	beq.n	8009f62 <_sungetc_r+0x26>
 8009f7e:	e7e1      	b.n	8009f44 <_sungetc_r+0x8>
 8009f80:	6921      	ldr	r1, [r4, #16]
 8009f82:	6822      	ldr	r2, [r4, #0]
 8009f84:	b141      	cbz	r1, 8009f98 <_sungetc_r+0x5c>
 8009f86:	4291      	cmp	r1, r2
 8009f88:	d206      	bcs.n	8009f98 <_sungetc_r+0x5c>
 8009f8a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009f8e:	42a9      	cmp	r1, r5
 8009f90:	d102      	bne.n	8009f98 <_sungetc_r+0x5c>
 8009f92:	3a01      	subs	r2, #1
 8009f94:	6022      	str	r2, [r4, #0]
 8009f96:	e7ea      	b.n	8009f6e <_sungetc_r+0x32>
 8009f98:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009f9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009fa6:	4623      	mov	r3, r4
 8009fa8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e7de      	b.n	8009f70 <_sungetc_r+0x34>

08009fb2 <__ssrefill_r>:
 8009fb2:	b510      	push	{r4, lr}
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009fb8:	b169      	cbz	r1, 8009fd6 <__ssrefill_r+0x24>
 8009fba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fbe:	4299      	cmp	r1, r3
 8009fc0:	d001      	beq.n	8009fc6 <__ssrefill_r+0x14>
 8009fc2:	f7fe fcdd 	bl	8008980 <_free_r>
 8009fc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fc8:	6063      	str	r3, [r4, #4]
 8009fca:	2000      	movs	r0, #0
 8009fcc:	6360      	str	r0, [r4, #52]	@ 0x34
 8009fce:	b113      	cbz	r3, 8009fd6 <__ssrefill_r+0x24>
 8009fd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	6923      	ldr	r3, [r4, #16]
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6063      	str	r3, [r4, #4]
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	f043 0320 	orr.w	r3, r3, #32
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fea:	e7f3      	b.n	8009fd4 <__ssrefill_r+0x22>

08009fec <__ssvfiscanf_r>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009ffc:	49a5      	ldr	r1, [pc, #660]	@ (800a294 <__ssvfiscanf_r+0x2a8>)
 8009ffe:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a000:	f10d 0804 	add.w	r8, sp, #4
 800a004:	49a4      	ldr	r1, [pc, #656]	@ (800a298 <__ssvfiscanf_r+0x2ac>)
 800a006:	4fa5      	ldr	r7, [pc, #660]	@ (800a29c <__ssvfiscanf_r+0x2b0>)
 800a008:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a00c:	4606      	mov	r6, r0
 800a00e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	7813      	ldrb	r3, [r2, #0]
 800a014:	2b00      	cmp	r3, #0
 800a016:	f000 8158 	beq.w	800a2ca <__ssvfiscanf_r+0x2de>
 800a01a:	5cf9      	ldrb	r1, [r7, r3]
 800a01c:	f011 0108 	ands.w	r1, r1, #8
 800a020:	f102 0501 	add.w	r5, r2, #1
 800a024:	d019      	beq.n	800a05a <__ssvfiscanf_r+0x6e>
 800a026:	6863      	ldr	r3, [r4, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	dd0f      	ble.n	800a04c <__ssvfiscanf_r+0x60>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	781a      	ldrb	r2, [r3, #0]
 800a030:	5cba      	ldrb	r2, [r7, r2]
 800a032:	0712      	lsls	r2, r2, #28
 800a034:	d401      	bmi.n	800a03a <__ssvfiscanf_r+0x4e>
 800a036:	462a      	mov	r2, r5
 800a038:	e7eb      	b.n	800a012 <__ssvfiscanf_r+0x26>
 800a03a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a03c:	3201      	adds	r2, #1
 800a03e:	9245      	str	r2, [sp, #276]	@ 0x114
 800a040:	6862      	ldr	r2, [r4, #4]
 800a042:	3301      	adds	r3, #1
 800a044:	3a01      	subs	r2, #1
 800a046:	6062      	str	r2, [r4, #4]
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	e7ec      	b.n	800a026 <__ssvfiscanf_r+0x3a>
 800a04c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a04e:	4621      	mov	r1, r4
 800a050:	4630      	mov	r0, r6
 800a052:	4798      	blx	r3
 800a054:	2800      	cmp	r0, #0
 800a056:	d0e9      	beq.n	800a02c <__ssvfiscanf_r+0x40>
 800a058:	e7ed      	b.n	800a036 <__ssvfiscanf_r+0x4a>
 800a05a:	2b25      	cmp	r3, #37	@ 0x25
 800a05c:	d012      	beq.n	800a084 <__ssvfiscanf_r+0x98>
 800a05e:	4699      	mov	r9, r3
 800a060:	6863      	ldr	r3, [r4, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f340 8093 	ble.w	800a18e <__ssvfiscanf_r+0x1a2>
 800a068:	6822      	ldr	r2, [r4, #0]
 800a06a:	7813      	ldrb	r3, [r2, #0]
 800a06c:	454b      	cmp	r3, r9
 800a06e:	f040 812c 	bne.w	800a2ca <__ssvfiscanf_r+0x2de>
 800a072:	6863      	ldr	r3, [r4, #4]
 800a074:	3b01      	subs	r3, #1
 800a076:	6063      	str	r3, [r4, #4]
 800a078:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a07a:	3201      	adds	r2, #1
 800a07c:	3301      	adds	r3, #1
 800a07e:	6022      	str	r2, [r4, #0]
 800a080:	9345      	str	r3, [sp, #276]	@ 0x114
 800a082:	e7d8      	b.n	800a036 <__ssvfiscanf_r+0x4a>
 800a084:	9141      	str	r1, [sp, #260]	@ 0x104
 800a086:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a088:	7853      	ldrb	r3, [r2, #1]
 800a08a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a08c:	bf02      	ittt	eq
 800a08e:	2310      	moveq	r3, #16
 800a090:	1c95      	addeq	r5, r2, #2
 800a092:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a094:	220a      	movs	r2, #10
 800a096:	46a9      	mov	r9, r5
 800a098:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a09c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a0a0:	2b09      	cmp	r3, #9
 800a0a2:	d91e      	bls.n	800a0e2 <__ssvfiscanf_r+0xf6>
 800a0a4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a2a0 <__ssvfiscanf_r+0x2b4>
 800a0a8:	2203      	movs	r2, #3
 800a0aa:	4650      	mov	r0, sl
 800a0ac:	f7f6 f898 	bl	80001e0 <memchr>
 800a0b0:	b138      	cbz	r0, 800a0c2 <__ssvfiscanf_r+0xd6>
 800a0b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a0b4:	eba0 000a 	sub.w	r0, r0, sl
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4083      	lsls	r3, r0
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	9341      	str	r3, [sp, #260]	@ 0x104
 800a0c0:	464d      	mov	r5, r9
 800a0c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a0c6:	2b78      	cmp	r3, #120	@ 0x78
 800a0c8:	d806      	bhi.n	800a0d8 <__ssvfiscanf_r+0xec>
 800a0ca:	2b57      	cmp	r3, #87	@ 0x57
 800a0cc:	d810      	bhi.n	800a0f0 <__ssvfiscanf_r+0x104>
 800a0ce:	2b25      	cmp	r3, #37	@ 0x25
 800a0d0:	d0c5      	beq.n	800a05e <__ssvfiscanf_r+0x72>
 800a0d2:	d857      	bhi.n	800a184 <__ssvfiscanf_r+0x198>
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d065      	beq.n	800a1a4 <__ssvfiscanf_r+0x1b8>
 800a0d8:	2303      	movs	r3, #3
 800a0da:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a0dc:	230a      	movs	r3, #10
 800a0de:	9342      	str	r3, [sp, #264]	@ 0x108
 800a0e0:	e078      	b.n	800a1d4 <__ssvfiscanf_r+0x1e8>
 800a0e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a0e4:	fb02 1103 	mla	r1, r2, r3, r1
 800a0e8:	3930      	subs	r1, #48	@ 0x30
 800a0ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a0ec:	464d      	mov	r5, r9
 800a0ee:	e7d2      	b.n	800a096 <__ssvfiscanf_r+0xaa>
 800a0f0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a0f4:	2a20      	cmp	r2, #32
 800a0f6:	d8ef      	bhi.n	800a0d8 <__ssvfiscanf_r+0xec>
 800a0f8:	a101      	add	r1, pc, #4	@ (adr r1, 800a100 <__ssvfiscanf_r+0x114>)
 800a0fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a0fe:	bf00      	nop
 800a100:	0800a1b3 	.word	0x0800a1b3
 800a104:	0800a0d9 	.word	0x0800a0d9
 800a108:	0800a0d9 	.word	0x0800a0d9
 800a10c:	0800a20d 	.word	0x0800a20d
 800a110:	0800a0d9 	.word	0x0800a0d9
 800a114:	0800a0d9 	.word	0x0800a0d9
 800a118:	0800a0d9 	.word	0x0800a0d9
 800a11c:	0800a0d9 	.word	0x0800a0d9
 800a120:	0800a0d9 	.word	0x0800a0d9
 800a124:	0800a0d9 	.word	0x0800a0d9
 800a128:	0800a0d9 	.word	0x0800a0d9
 800a12c:	0800a223 	.word	0x0800a223
 800a130:	0800a209 	.word	0x0800a209
 800a134:	0800a18b 	.word	0x0800a18b
 800a138:	0800a18b 	.word	0x0800a18b
 800a13c:	0800a18b 	.word	0x0800a18b
 800a140:	0800a0d9 	.word	0x0800a0d9
 800a144:	0800a1c5 	.word	0x0800a1c5
 800a148:	0800a0d9 	.word	0x0800a0d9
 800a14c:	0800a0d9 	.word	0x0800a0d9
 800a150:	0800a0d9 	.word	0x0800a0d9
 800a154:	0800a0d9 	.word	0x0800a0d9
 800a158:	0800a233 	.word	0x0800a233
 800a15c:	0800a1cd 	.word	0x0800a1cd
 800a160:	0800a1ab 	.word	0x0800a1ab
 800a164:	0800a0d9 	.word	0x0800a0d9
 800a168:	0800a0d9 	.word	0x0800a0d9
 800a16c:	0800a22f 	.word	0x0800a22f
 800a170:	0800a0d9 	.word	0x0800a0d9
 800a174:	0800a209 	.word	0x0800a209
 800a178:	0800a0d9 	.word	0x0800a0d9
 800a17c:	0800a0d9 	.word	0x0800a0d9
 800a180:	0800a1b3 	.word	0x0800a1b3
 800a184:	3b45      	subs	r3, #69	@ 0x45
 800a186:	2b02      	cmp	r3, #2
 800a188:	d8a6      	bhi.n	800a0d8 <__ssvfiscanf_r+0xec>
 800a18a:	2305      	movs	r3, #5
 800a18c:	e021      	b.n	800a1d2 <__ssvfiscanf_r+0x1e6>
 800a18e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a190:	4621      	mov	r1, r4
 800a192:	4630      	mov	r0, r6
 800a194:	4798      	blx	r3
 800a196:	2800      	cmp	r0, #0
 800a198:	f43f af66 	beq.w	800a068 <__ssvfiscanf_r+0x7c>
 800a19c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	f040 808b 	bne.w	800a2ba <__ssvfiscanf_r+0x2ce>
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	e08b      	b.n	800a2c2 <__ssvfiscanf_r+0x2d6>
 800a1aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a1ac:	f042 0220 	orr.w	r2, r2, #32
 800a1b0:	9241      	str	r2, [sp, #260]	@ 0x104
 800a1b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a1b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1b8:	9241      	str	r2, [sp, #260]	@ 0x104
 800a1ba:	2210      	movs	r2, #16
 800a1bc:	2b6e      	cmp	r3, #110	@ 0x6e
 800a1be:	9242      	str	r2, [sp, #264]	@ 0x108
 800a1c0:	d902      	bls.n	800a1c8 <__ssvfiscanf_r+0x1dc>
 800a1c2:	e005      	b.n	800a1d0 <__ssvfiscanf_r+0x1e4>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e002      	b.n	800a1d2 <__ssvfiscanf_r+0x1e6>
 800a1cc:	2308      	movs	r3, #8
 800a1ce:	9342      	str	r3, [sp, #264]	@ 0x108
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a1d4:	6863      	ldr	r3, [r4, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	dd39      	ble.n	800a24e <__ssvfiscanf_r+0x262>
 800a1da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a1dc:	0659      	lsls	r1, r3, #25
 800a1de:	d404      	bmi.n	800a1ea <__ssvfiscanf_r+0x1fe>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	781a      	ldrb	r2, [r3, #0]
 800a1e4:	5cba      	ldrb	r2, [r7, r2]
 800a1e6:	0712      	lsls	r2, r2, #28
 800a1e8:	d438      	bmi.n	800a25c <__ssvfiscanf_r+0x270>
 800a1ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	dc47      	bgt.n	800a280 <__ssvfiscanf_r+0x294>
 800a1f0:	466b      	mov	r3, sp
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	a941      	add	r1, sp, #260	@ 0x104
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f000 f86c 	bl	800a2d4 <_scanf_chars>
 800a1fc:	2801      	cmp	r0, #1
 800a1fe:	d064      	beq.n	800a2ca <__ssvfiscanf_r+0x2de>
 800a200:	2802      	cmp	r0, #2
 800a202:	f47f af18 	bne.w	800a036 <__ssvfiscanf_r+0x4a>
 800a206:	e7c9      	b.n	800a19c <__ssvfiscanf_r+0x1b0>
 800a208:	220a      	movs	r2, #10
 800a20a:	e7d7      	b.n	800a1bc <__ssvfiscanf_r+0x1d0>
 800a20c:	4629      	mov	r1, r5
 800a20e:	4640      	mov	r0, r8
 800a210:	f000 fa6c 	bl	800a6ec <__sccl>
 800a214:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a21a:	9341      	str	r3, [sp, #260]	@ 0x104
 800a21c:	4605      	mov	r5, r0
 800a21e:	2301      	movs	r3, #1
 800a220:	e7d7      	b.n	800a1d2 <__ssvfiscanf_r+0x1e6>
 800a222:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a228:	9341      	str	r3, [sp, #260]	@ 0x104
 800a22a:	2300      	movs	r3, #0
 800a22c:	e7d1      	b.n	800a1d2 <__ssvfiscanf_r+0x1e6>
 800a22e:	2302      	movs	r3, #2
 800a230:	e7cf      	b.n	800a1d2 <__ssvfiscanf_r+0x1e6>
 800a232:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a234:	06c3      	lsls	r3, r0, #27
 800a236:	f53f aefe 	bmi.w	800a036 <__ssvfiscanf_r+0x4a>
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a23e:	1d19      	adds	r1, r3, #4
 800a240:	9100      	str	r1, [sp, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	07c0      	lsls	r0, r0, #31
 800a246:	bf4c      	ite	mi
 800a248:	801a      	strhmi	r2, [r3, #0]
 800a24a:	601a      	strpl	r2, [r3, #0]
 800a24c:	e6f3      	b.n	800a036 <__ssvfiscanf_r+0x4a>
 800a24e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a250:	4621      	mov	r1, r4
 800a252:	4630      	mov	r0, r6
 800a254:	4798      	blx	r3
 800a256:	2800      	cmp	r0, #0
 800a258:	d0bf      	beq.n	800a1da <__ssvfiscanf_r+0x1ee>
 800a25a:	e79f      	b.n	800a19c <__ssvfiscanf_r+0x1b0>
 800a25c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a25e:	3201      	adds	r2, #1
 800a260:	9245      	str	r2, [sp, #276]	@ 0x114
 800a262:	6862      	ldr	r2, [r4, #4]
 800a264:	3a01      	subs	r2, #1
 800a266:	2a00      	cmp	r2, #0
 800a268:	6062      	str	r2, [r4, #4]
 800a26a:	dd02      	ble.n	800a272 <__ssvfiscanf_r+0x286>
 800a26c:	3301      	adds	r3, #1
 800a26e:	6023      	str	r3, [r4, #0]
 800a270:	e7b6      	b.n	800a1e0 <__ssvfiscanf_r+0x1f4>
 800a272:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a274:	4621      	mov	r1, r4
 800a276:	4630      	mov	r0, r6
 800a278:	4798      	blx	r3
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d0b0      	beq.n	800a1e0 <__ssvfiscanf_r+0x1f4>
 800a27e:	e78d      	b.n	800a19c <__ssvfiscanf_r+0x1b0>
 800a280:	2b04      	cmp	r3, #4
 800a282:	dc0f      	bgt.n	800a2a4 <__ssvfiscanf_r+0x2b8>
 800a284:	466b      	mov	r3, sp
 800a286:	4622      	mov	r2, r4
 800a288:	a941      	add	r1, sp, #260	@ 0x104
 800a28a:	4630      	mov	r0, r6
 800a28c:	f000 f87c 	bl	800a388 <_scanf_i>
 800a290:	e7b4      	b.n	800a1fc <__ssvfiscanf_r+0x210>
 800a292:	bf00      	nop
 800a294:	08009f3d 	.word	0x08009f3d
 800a298:	08009fb3 	.word	0x08009fb3
 800a29c:	0800cf89 	.word	0x0800cf89
 800a2a0:	0800d08f 	.word	0x0800d08f
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d0 <__ssvfiscanf_r+0x2e4>)
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f43f aec5 	beq.w	800a036 <__ssvfiscanf_r+0x4a>
 800a2ac:	466b      	mov	r3, sp
 800a2ae:	4622      	mov	r2, r4
 800a2b0:	a941      	add	r1, sp, #260	@ 0x104
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f7fd f856 	bl	8007364 <_scanf_float>
 800a2b8:	e7a0      	b.n	800a1fc <__ssvfiscanf_r+0x210>
 800a2ba:	89a3      	ldrh	r3, [r4, #12]
 800a2bc:	065b      	lsls	r3, r3, #25
 800a2be:	f53f af71 	bmi.w	800a1a4 <__ssvfiscanf_r+0x1b8>
 800a2c2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a2cc:	e7f9      	b.n	800a2c2 <__ssvfiscanf_r+0x2d6>
 800a2ce:	bf00      	nop
 800a2d0:	08007365 	.word	0x08007365

0800a2d4 <_scanf_chars>:
 800a2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d8:	4615      	mov	r5, r2
 800a2da:	688a      	ldr	r2, [r1, #8]
 800a2dc:	4680      	mov	r8, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	b932      	cbnz	r2, 800a2f0 <_scanf_chars+0x1c>
 800a2e2:	698a      	ldr	r2, [r1, #24]
 800a2e4:	2a00      	cmp	r2, #0
 800a2e6:	bf14      	ite	ne
 800a2e8:	f04f 32ff 	movne.w	r2, #4294967295
 800a2ec:	2201      	moveq	r2, #1
 800a2ee:	608a      	str	r2, [r1, #8]
 800a2f0:	6822      	ldr	r2, [r4, #0]
 800a2f2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a384 <_scanf_chars+0xb0>
 800a2f6:	06d1      	lsls	r1, r2, #27
 800a2f8:	bf5f      	itttt	pl
 800a2fa:	681a      	ldrpl	r2, [r3, #0]
 800a2fc:	1d11      	addpl	r1, r2, #4
 800a2fe:	6019      	strpl	r1, [r3, #0]
 800a300:	6816      	ldrpl	r6, [r2, #0]
 800a302:	2700      	movs	r7, #0
 800a304:	69a0      	ldr	r0, [r4, #24]
 800a306:	b188      	cbz	r0, 800a32c <_scanf_chars+0x58>
 800a308:	2801      	cmp	r0, #1
 800a30a:	d107      	bne.n	800a31c <_scanf_chars+0x48>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	781a      	ldrb	r2, [r3, #0]
 800a310:	6963      	ldr	r3, [r4, #20]
 800a312:	5c9b      	ldrb	r3, [r3, r2]
 800a314:	b953      	cbnz	r3, 800a32c <_scanf_chars+0x58>
 800a316:	2f00      	cmp	r7, #0
 800a318:	d031      	beq.n	800a37e <_scanf_chars+0xaa>
 800a31a:	e022      	b.n	800a362 <_scanf_chars+0x8e>
 800a31c:	2802      	cmp	r0, #2
 800a31e:	d120      	bne.n	800a362 <_scanf_chars+0x8e>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a328:	071b      	lsls	r3, r3, #28
 800a32a:	d41a      	bmi.n	800a362 <_scanf_chars+0x8e>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	06da      	lsls	r2, r3, #27
 800a330:	bf5e      	ittt	pl
 800a332:	682b      	ldrpl	r3, [r5, #0]
 800a334:	781b      	ldrbpl	r3, [r3, #0]
 800a336:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a33a:	682a      	ldr	r2, [r5, #0]
 800a33c:	686b      	ldr	r3, [r5, #4]
 800a33e:	3201      	adds	r2, #1
 800a340:	602a      	str	r2, [r5, #0]
 800a342:	68a2      	ldr	r2, [r4, #8]
 800a344:	3b01      	subs	r3, #1
 800a346:	3a01      	subs	r2, #1
 800a348:	606b      	str	r3, [r5, #4]
 800a34a:	3701      	adds	r7, #1
 800a34c:	60a2      	str	r2, [r4, #8]
 800a34e:	b142      	cbz	r2, 800a362 <_scanf_chars+0x8e>
 800a350:	2b00      	cmp	r3, #0
 800a352:	dcd7      	bgt.n	800a304 <_scanf_chars+0x30>
 800a354:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a358:	4629      	mov	r1, r5
 800a35a:	4640      	mov	r0, r8
 800a35c:	4798      	blx	r3
 800a35e:	2800      	cmp	r0, #0
 800a360:	d0d0      	beq.n	800a304 <_scanf_chars+0x30>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	f013 0310 	ands.w	r3, r3, #16
 800a368:	d105      	bne.n	800a376 <_scanf_chars+0xa2>
 800a36a:	68e2      	ldr	r2, [r4, #12]
 800a36c:	3201      	adds	r2, #1
 800a36e:	60e2      	str	r2, [r4, #12]
 800a370:	69a2      	ldr	r2, [r4, #24]
 800a372:	b102      	cbz	r2, 800a376 <_scanf_chars+0xa2>
 800a374:	7033      	strb	r3, [r6, #0]
 800a376:	6923      	ldr	r3, [r4, #16]
 800a378:	443b      	add	r3, r7
 800a37a:	6123      	str	r3, [r4, #16]
 800a37c:	2000      	movs	r0, #0
 800a37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a382:	bf00      	nop
 800a384:	0800cf89 	.word	0x0800cf89

0800a388 <_scanf_i>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	4698      	mov	r8, r3
 800a38e:	4b74      	ldr	r3, [pc, #464]	@ (800a560 <_scanf_i+0x1d8>)
 800a390:	460c      	mov	r4, r1
 800a392:	4682      	mov	sl, r0
 800a394:	4616      	mov	r6, r2
 800a396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a39a:	b087      	sub	sp, #28
 800a39c:	ab03      	add	r3, sp, #12
 800a39e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a3a2:	4b70      	ldr	r3, [pc, #448]	@ (800a564 <_scanf_i+0x1dc>)
 800a3a4:	69a1      	ldr	r1, [r4, #24]
 800a3a6:	4a70      	ldr	r2, [pc, #448]	@ (800a568 <_scanf_i+0x1e0>)
 800a3a8:	2903      	cmp	r1, #3
 800a3aa:	bf08      	it	eq
 800a3ac:	461a      	moveq	r2, r3
 800a3ae:	68a3      	ldr	r3, [r4, #8]
 800a3b0:	9201      	str	r2, [sp, #4]
 800a3b2:	1e5a      	subs	r2, r3, #1
 800a3b4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a3b8:	bf88      	it	hi
 800a3ba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a3be:	4627      	mov	r7, r4
 800a3c0:	bf82      	ittt	hi
 800a3c2:	eb03 0905 	addhi.w	r9, r3, r5
 800a3c6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a3ca:	60a3      	strhi	r3, [r4, #8]
 800a3cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a3d0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a3d4:	bf98      	it	ls
 800a3d6:	f04f 0900 	movls.w	r9, #0
 800a3da:	6023      	str	r3, [r4, #0]
 800a3dc:	463d      	mov	r5, r7
 800a3de:	f04f 0b00 	mov.w	fp, #0
 800a3e2:	6831      	ldr	r1, [r6, #0]
 800a3e4:	ab03      	add	r3, sp, #12
 800a3e6:	7809      	ldrb	r1, [r1, #0]
 800a3e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	f7f5 fef7 	bl	80001e0 <memchr>
 800a3f2:	b328      	cbz	r0, 800a440 <_scanf_i+0xb8>
 800a3f4:	f1bb 0f01 	cmp.w	fp, #1
 800a3f8:	d159      	bne.n	800a4ae <_scanf_i+0x126>
 800a3fa:	6862      	ldr	r2, [r4, #4]
 800a3fc:	b92a      	cbnz	r2, 800a40a <_scanf_i+0x82>
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	2108      	movs	r1, #8
 800a402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a406:	6061      	str	r1, [r4, #4]
 800a408:	6022      	str	r2, [r4, #0]
 800a40a:	6822      	ldr	r2, [r4, #0]
 800a40c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a410:	6022      	str	r2, [r4, #0]
 800a412:	68a2      	ldr	r2, [r4, #8]
 800a414:	1e51      	subs	r1, r2, #1
 800a416:	60a1      	str	r1, [r4, #8]
 800a418:	b192      	cbz	r2, 800a440 <_scanf_i+0xb8>
 800a41a:	6832      	ldr	r2, [r6, #0]
 800a41c:	1c51      	adds	r1, r2, #1
 800a41e:	6031      	str	r1, [r6, #0]
 800a420:	7812      	ldrb	r2, [r2, #0]
 800a422:	f805 2b01 	strb.w	r2, [r5], #1
 800a426:	6872      	ldr	r2, [r6, #4]
 800a428:	3a01      	subs	r2, #1
 800a42a:	2a00      	cmp	r2, #0
 800a42c:	6072      	str	r2, [r6, #4]
 800a42e:	dc07      	bgt.n	800a440 <_scanf_i+0xb8>
 800a430:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a434:	4631      	mov	r1, r6
 800a436:	4650      	mov	r0, sl
 800a438:	4790      	blx	r2
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f040 8085 	bne.w	800a54a <_scanf_i+0x1c2>
 800a440:	f10b 0b01 	add.w	fp, fp, #1
 800a444:	f1bb 0f03 	cmp.w	fp, #3
 800a448:	d1cb      	bne.n	800a3e2 <_scanf_i+0x5a>
 800a44a:	6863      	ldr	r3, [r4, #4]
 800a44c:	b90b      	cbnz	r3, 800a452 <_scanf_i+0xca>
 800a44e:	230a      	movs	r3, #10
 800a450:	6063      	str	r3, [r4, #4]
 800a452:	6863      	ldr	r3, [r4, #4]
 800a454:	4945      	ldr	r1, [pc, #276]	@ (800a56c <_scanf_i+0x1e4>)
 800a456:	6960      	ldr	r0, [r4, #20]
 800a458:	1ac9      	subs	r1, r1, r3
 800a45a:	f000 f947 	bl	800a6ec <__sccl>
 800a45e:	f04f 0b00 	mov.w	fp, #0
 800a462:	68a3      	ldr	r3, [r4, #8]
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d03d      	beq.n	800a4e6 <_scanf_i+0x15e>
 800a46a:	6831      	ldr	r1, [r6, #0]
 800a46c:	6960      	ldr	r0, [r4, #20]
 800a46e:	f891 c000 	ldrb.w	ip, [r1]
 800a472:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a476:	2800      	cmp	r0, #0
 800a478:	d035      	beq.n	800a4e6 <_scanf_i+0x15e>
 800a47a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a47e:	d124      	bne.n	800a4ca <_scanf_i+0x142>
 800a480:	0510      	lsls	r0, r2, #20
 800a482:	d522      	bpl.n	800a4ca <_scanf_i+0x142>
 800a484:	f10b 0b01 	add.w	fp, fp, #1
 800a488:	f1b9 0f00 	cmp.w	r9, #0
 800a48c:	d003      	beq.n	800a496 <_scanf_i+0x10e>
 800a48e:	3301      	adds	r3, #1
 800a490:	f109 39ff 	add.w	r9, r9, #4294967295
 800a494:	60a3      	str	r3, [r4, #8]
 800a496:	6873      	ldr	r3, [r6, #4]
 800a498:	3b01      	subs	r3, #1
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	6073      	str	r3, [r6, #4]
 800a49e:	dd1b      	ble.n	800a4d8 <_scanf_i+0x150>
 800a4a0:	6833      	ldr	r3, [r6, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	6033      	str	r3, [r6, #0]
 800a4a6:	68a3      	ldr	r3, [r4, #8]
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	60a3      	str	r3, [r4, #8]
 800a4ac:	e7d9      	b.n	800a462 <_scanf_i+0xda>
 800a4ae:	f1bb 0f02 	cmp.w	fp, #2
 800a4b2:	d1ae      	bne.n	800a412 <_scanf_i+0x8a>
 800a4b4:	6822      	ldr	r2, [r4, #0]
 800a4b6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a4ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a4be:	d1bf      	bne.n	800a440 <_scanf_i+0xb8>
 800a4c0:	2110      	movs	r1, #16
 800a4c2:	6061      	str	r1, [r4, #4]
 800a4c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4c8:	e7a2      	b.n	800a410 <_scanf_i+0x88>
 800a4ca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a4ce:	6022      	str	r2, [r4, #0]
 800a4d0:	780b      	ldrb	r3, [r1, #0]
 800a4d2:	f805 3b01 	strb.w	r3, [r5], #1
 800a4d6:	e7de      	b.n	800a496 <_scanf_i+0x10e>
 800a4d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4650      	mov	r0, sl
 800a4e0:	4798      	blx	r3
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d0df      	beq.n	800a4a6 <_scanf_i+0x11e>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	05d9      	lsls	r1, r3, #23
 800a4ea:	d50d      	bpl.n	800a508 <_scanf_i+0x180>
 800a4ec:	42bd      	cmp	r5, r7
 800a4ee:	d909      	bls.n	800a504 <_scanf_i+0x17c>
 800a4f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a4f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4f8:	4632      	mov	r2, r6
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	4798      	blx	r3
 800a4fe:	f105 39ff 	add.w	r9, r5, #4294967295
 800a502:	464d      	mov	r5, r9
 800a504:	42bd      	cmp	r5, r7
 800a506:	d028      	beq.n	800a55a <_scanf_i+0x1d2>
 800a508:	6822      	ldr	r2, [r4, #0]
 800a50a:	f012 0210 	ands.w	r2, r2, #16
 800a50e:	d113      	bne.n	800a538 <_scanf_i+0x1b0>
 800a510:	702a      	strb	r2, [r5, #0]
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	9e01      	ldr	r6, [sp, #4]
 800a516:	4639      	mov	r1, r7
 800a518:	4650      	mov	r0, sl
 800a51a:	47b0      	blx	r6
 800a51c:	f8d8 3000 	ldr.w	r3, [r8]
 800a520:	6821      	ldr	r1, [r4, #0]
 800a522:	1d1a      	adds	r2, r3, #4
 800a524:	f8c8 2000 	str.w	r2, [r8]
 800a528:	f011 0f20 	tst.w	r1, #32
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	d00f      	beq.n	800a550 <_scanf_i+0x1c8>
 800a530:	6018      	str	r0, [r3, #0]
 800a532:	68e3      	ldr	r3, [r4, #12]
 800a534:	3301      	adds	r3, #1
 800a536:	60e3      	str	r3, [r4, #12]
 800a538:	6923      	ldr	r3, [r4, #16]
 800a53a:	1bed      	subs	r5, r5, r7
 800a53c:	445d      	add	r5, fp
 800a53e:	442b      	add	r3, r5
 800a540:	6123      	str	r3, [r4, #16]
 800a542:	2000      	movs	r0, #0
 800a544:	b007      	add	sp, #28
 800a546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54a:	f04f 0b00 	mov.w	fp, #0
 800a54e:	e7ca      	b.n	800a4e6 <_scanf_i+0x15e>
 800a550:	07ca      	lsls	r2, r1, #31
 800a552:	bf4c      	ite	mi
 800a554:	8018      	strhmi	r0, [r3, #0]
 800a556:	6018      	strpl	r0, [r3, #0]
 800a558:	e7eb      	b.n	800a532 <_scanf_i+0x1aa>
 800a55a:	2001      	movs	r0, #1
 800a55c:	e7f2      	b.n	800a544 <_scanf_i+0x1bc>
 800a55e:	bf00      	nop
 800a560:	0800cbf4 	.word	0x0800cbf4
 800a564:	08009c71 	.word	0x08009c71
 800a568:	0800a999 	.word	0x0800a999
 800a56c:	0800d0aa 	.word	0x0800d0aa

0800a570 <__sflush_r>:
 800a570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a578:	0716      	lsls	r6, r2, #28
 800a57a:	4605      	mov	r5, r0
 800a57c:	460c      	mov	r4, r1
 800a57e:	d454      	bmi.n	800a62a <__sflush_r+0xba>
 800a580:	684b      	ldr	r3, [r1, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	dc02      	bgt.n	800a58c <__sflush_r+0x1c>
 800a586:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dd48      	ble.n	800a61e <__sflush_r+0xae>
 800a58c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a58e:	2e00      	cmp	r6, #0
 800a590:	d045      	beq.n	800a61e <__sflush_r+0xae>
 800a592:	2300      	movs	r3, #0
 800a594:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a598:	682f      	ldr	r7, [r5, #0]
 800a59a:	6a21      	ldr	r1, [r4, #32]
 800a59c:	602b      	str	r3, [r5, #0]
 800a59e:	d030      	beq.n	800a602 <__sflush_r+0x92>
 800a5a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	0759      	lsls	r1, r3, #29
 800a5a6:	d505      	bpl.n	800a5b4 <__sflush_r+0x44>
 800a5a8:	6863      	ldr	r3, [r4, #4]
 800a5aa:	1ad2      	subs	r2, r2, r3
 800a5ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5ae:	b10b      	cbz	r3, 800a5b4 <__sflush_r+0x44>
 800a5b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5b2:	1ad2      	subs	r2, r2, r3
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5b8:	6a21      	ldr	r1, [r4, #32]
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	47b0      	blx	r6
 800a5be:	1c43      	adds	r3, r0, #1
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	d106      	bne.n	800a5d2 <__sflush_r+0x62>
 800a5c4:	6829      	ldr	r1, [r5, #0]
 800a5c6:	291d      	cmp	r1, #29
 800a5c8:	d82b      	bhi.n	800a622 <__sflush_r+0xb2>
 800a5ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a674 <__sflush_r+0x104>)
 800a5cc:	410a      	asrs	r2, r1
 800a5ce:	07d6      	lsls	r6, r2, #31
 800a5d0:	d427      	bmi.n	800a622 <__sflush_r+0xb2>
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	6062      	str	r2, [r4, #4]
 800a5d6:	04d9      	lsls	r1, r3, #19
 800a5d8:	6922      	ldr	r2, [r4, #16]
 800a5da:	6022      	str	r2, [r4, #0]
 800a5dc:	d504      	bpl.n	800a5e8 <__sflush_r+0x78>
 800a5de:	1c42      	adds	r2, r0, #1
 800a5e0:	d101      	bne.n	800a5e6 <__sflush_r+0x76>
 800a5e2:	682b      	ldr	r3, [r5, #0]
 800a5e4:	b903      	cbnz	r3, 800a5e8 <__sflush_r+0x78>
 800a5e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5ea:	602f      	str	r7, [r5, #0]
 800a5ec:	b1b9      	cbz	r1, 800a61e <__sflush_r+0xae>
 800a5ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5f2:	4299      	cmp	r1, r3
 800a5f4:	d002      	beq.n	800a5fc <__sflush_r+0x8c>
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f7fe f9c2 	bl	8008980 <_free_r>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800a600:	e00d      	b.n	800a61e <__sflush_r+0xae>
 800a602:	2301      	movs	r3, #1
 800a604:	4628      	mov	r0, r5
 800a606:	47b0      	blx	r6
 800a608:	4602      	mov	r2, r0
 800a60a:	1c50      	adds	r0, r2, #1
 800a60c:	d1c9      	bne.n	800a5a2 <__sflush_r+0x32>
 800a60e:	682b      	ldr	r3, [r5, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0c6      	beq.n	800a5a2 <__sflush_r+0x32>
 800a614:	2b1d      	cmp	r3, #29
 800a616:	d001      	beq.n	800a61c <__sflush_r+0xac>
 800a618:	2b16      	cmp	r3, #22
 800a61a:	d11e      	bne.n	800a65a <__sflush_r+0xea>
 800a61c:	602f      	str	r7, [r5, #0]
 800a61e:	2000      	movs	r0, #0
 800a620:	e022      	b.n	800a668 <__sflush_r+0xf8>
 800a622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a626:	b21b      	sxth	r3, r3
 800a628:	e01b      	b.n	800a662 <__sflush_r+0xf2>
 800a62a:	690f      	ldr	r7, [r1, #16]
 800a62c:	2f00      	cmp	r7, #0
 800a62e:	d0f6      	beq.n	800a61e <__sflush_r+0xae>
 800a630:	0793      	lsls	r3, r2, #30
 800a632:	680e      	ldr	r6, [r1, #0]
 800a634:	bf08      	it	eq
 800a636:	694b      	ldreq	r3, [r1, #20]
 800a638:	600f      	str	r7, [r1, #0]
 800a63a:	bf18      	it	ne
 800a63c:	2300      	movne	r3, #0
 800a63e:	eba6 0807 	sub.w	r8, r6, r7
 800a642:	608b      	str	r3, [r1, #8]
 800a644:	f1b8 0f00 	cmp.w	r8, #0
 800a648:	dde9      	ble.n	800a61e <__sflush_r+0xae>
 800a64a:	6a21      	ldr	r1, [r4, #32]
 800a64c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a64e:	4643      	mov	r3, r8
 800a650:	463a      	mov	r2, r7
 800a652:	4628      	mov	r0, r5
 800a654:	47b0      	blx	r6
 800a656:	2800      	cmp	r0, #0
 800a658:	dc08      	bgt.n	800a66c <__sflush_r+0xfc>
 800a65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a65e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a662:	81a3      	strh	r3, [r4, #12]
 800a664:	f04f 30ff 	mov.w	r0, #4294967295
 800a668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a66c:	4407      	add	r7, r0
 800a66e:	eba8 0800 	sub.w	r8, r8, r0
 800a672:	e7e7      	b.n	800a644 <__sflush_r+0xd4>
 800a674:	dfbffffe 	.word	0xdfbffffe

0800a678 <_fflush_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	690b      	ldr	r3, [r1, #16]
 800a67c:	4605      	mov	r5, r0
 800a67e:	460c      	mov	r4, r1
 800a680:	b913      	cbnz	r3, 800a688 <_fflush_r+0x10>
 800a682:	2500      	movs	r5, #0
 800a684:	4628      	mov	r0, r5
 800a686:	bd38      	pop	{r3, r4, r5, pc}
 800a688:	b118      	cbz	r0, 800a692 <_fflush_r+0x1a>
 800a68a:	6a03      	ldr	r3, [r0, #32]
 800a68c:	b90b      	cbnz	r3, 800a692 <_fflush_r+0x1a>
 800a68e:	f7fd f909 	bl	80078a4 <__sinit>
 800a692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0f3      	beq.n	800a682 <_fflush_r+0xa>
 800a69a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a69c:	07d0      	lsls	r0, r2, #31
 800a69e:	d404      	bmi.n	800a6aa <_fflush_r+0x32>
 800a6a0:	0599      	lsls	r1, r3, #22
 800a6a2:	d402      	bmi.n	800a6aa <_fflush_r+0x32>
 800a6a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6a6:	f7fd fae2 	bl	8007c6e <__retarget_lock_acquire_recursive>
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	f7ff ff5f 	bl	800a570 <__sflush_r>
 800a6b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6b4:	07da      	lsls	r2, r3, #31
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	d4e4      	bmi.n	800a684 <_fflush_r+0xc>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	059b      	lsls	r3, r3, #22
 800a6be:	d4e1      	bmi.n	800a684 <_fflush_r+0xc>
 800a6c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6c2:	f7fd fad5 	bl	8007c70 <__retarget_lock_release_recursive>
 800a6c6:	e7dd      	b.n	800a684 <_fflush_r+0xc>

0800a6c8 <fiprintf>:
 800a6c8:	b40e      	push	{r1, r2, r3}
 800a6ca:	b503      	push	{r0, r1, lr}
 800a6cc:	4601      	mov	r1, r0
 800a6ce:	ab03      	add	r3, sp, #12
 800a6d0:	4805      	ldr	r0, [pc, #20]	@ (800a6e8 <fiprintf+0x20>)
 800a6d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6d6:	6800      	ldr	r0, [r0, #0]
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	f000 f989 	bl	800a9f0 <_vfiprintf_r>
 800a6de:	b002      	add	sp, #8
 800a6e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6e4:	b003      	add	sp, #12
 800a6e6:	4770      	bx	lr
 800a6e8:	200001d4 	.word	0x200001d4

0800a6ec <__sccl>:
 800a6ec:	b570      	push	{r4, r5, r6, lr}
 800a6ee:	780b      	ldrb	r3, [r1, #0]
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	2b5e      	cmp	r3, #94	@ 0x5e
 800a6f4:	bf0b      	itete	eq
 800a6f6:	784b      	ldrbeq	r3, [r1, #1]
 800a6f8:	1c4a      	addne	r2, r1, #1
 800a6fa:	1c8a      	addeq	r2, r1, #2
 800a6fc:	2100      	movne	r1, #0
 800a6fe:	bf08      	it	eq
 800a700:	2101      	moveq	r1, #1
 800a702:	3801      	subs	r0, #1
 800a704:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a708:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a70c:	42a8      	cmp	r0, r5
 800a70e:	d1fb      	bne.n	800a708 <__sccl+0x1c>
 800a710:	b90b      	cbnz	r3, 800a716 <__sccl+0x2a>
 800a712:	1e50      	subs	r0, r2, #1
 800a714:	bd70      	pop	{r4, r5, r6, pc}
 800a716:	f081 0101 	eor.w	r1, r1, #1
 800a71a:	54e1      	strb	r1, [r4, r3]
 800a71c:	4610      	mov	r0, r2
 800a71e:	4602      	mov	r2, r0
 800a720:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a724:	2d2d      	cmp	r5, #45	@ 0x2d
 800a726:	d005      	beq.n	800a734 <__sccl+0x48>
 800a728:	2d5d      	cmp	r5, #93	@ 0x5d
 800a72a:	d016      	beq.n	800a75a <__sccl+0x6e>
 800a72c:	2d00      	cmp	r5, #0
 800a72e:	d0f1      	beq.n	800a714 <__sccl+0x28>
 800a730:	462b      	mov	r3, r5
 800a732:	e7f2      	b.n	800a71a <__sccl+0x2e>
 800a734:	7846      	ldrb	r6, [r0, #1]
 800a736:	2e5d      	cmp	r6, #93	@ 0x5d
 800a738:	d0fa      	beq.n	800a730 <__sccl+0x44>
 800a73a:	42b3      	cmp	r3, r6
 800a73c:	dcf8      	bgt.n	800a730 <__sccl+0x44>
 800a73e:	3002      	adds	r0, #2
 800a740:	461a      	mov	r2, r3
 800a742:	3201      	adds	r2, #1
 800a744:	4296      	cmp	r6, r2
 800a746:	54a1      	strb	r1, [r4, r2]
 800a748:	dcfb      	bgt.n	800a742 <__sccl+0x56>
 800a74a:	1af2      	subs	r2, r6, r3
 800a74c:	3a01      	subs	r2, #1
 800a74e:	1c5d      	adds	r5, r3, #1
 800a750:	42b3      	cmp	r3, r6
 800a752:	bfa8      	it	ge
 800a754:	2200      	movge	r2, #0
 800a756:	18ab      	adds	r3, r5, r2
 800a758:	e7e1      	b.n	800a71e <__sccl+0x32>
 800a75a:	4610      	mov	r0, r2
 800a75c:	e7da      	b.n	800a714 <__sccl+0x28>

0800a75e <__submore>:
 800a75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a762:	460c      	mov	r4, r1
 800a764:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a766:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a76a:	4299      	cmp	r1, r3
 800a76c:	d11d      	bne.n	800a7aa <__submore+0x4c>
 800a76e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a772:	f7fe fcb3 	bl	80090dc <_malloc_r>
 800a776:	b918      	cbnz	r0, 800a780 <__submore+0x22>
 800a778:	f04f 30ff 	mov.w	r0, #4294967295
 800a77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a780:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a784:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a786:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a78a:	6360      	str	r0, [r4, #52]	@ 0x34
 800a78c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a790:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a794:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a798:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a79c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a7a0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a7a4:	6020      	str	r0, [r4, #0]
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e7e8      	b.n	800a77c <__submore+0x1e>
 800a7aa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a7ac:	0077      	lsls	r7, r6, #1
 800a7ae:	463a      	mov	r2, r7
 800a7b0:	f000 f855 	bl	800a85e <_realloc_r>
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d0de      	beq.n	800a778 <__submore+0x1a>
 800a7ba:	eb00 0806 	add.w	r8, r0, r6
 800a7be:	4601      	mov	r1, r0
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	f7fd fa55 	bl	8007c72 <memcpy>
 800a7c8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a7cc:	f8c4 8000 	str.w	r8, [r4]
 800a7d0:	e7e9      	b.n	800a7a6 <__submore+0x48>

0800a7d2 <memmove>:
 800a7d2:	4288      	cmp	r0, r1
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	eb01 0402 	add.w	r4, r1, r2
 800a7da:	d902      	bls.n	800a7e2 <memmove+0x10>
 800a7dc:	4284      	cmp	r4, r0
 800a7de:	4623      	mov	r3, r4
 800a7e0:	d807      	bhi.n	800a7f2 <memmove+0x20>
 800a7e2:	1e43      	subs	r3, r0, #1
 800a7e4:	42a1      	cmp	r1, r4
 800a7e6:	d008      	beq.n	800a7fa <memmove+0x28>
 800a7e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7f0:	e7f8      	b.n	800a7e4 <memmove+0x12>
 800a7f2:	4402      	add	r2, r0
 800a7f4:	4601      	mov	r1, r0
 800a7f6:	428a      	cmp	r2, r1
 800a7f8:	d100      	bne.n	800a7fc <memmove+0x2a>
 800a7fa:	bd10      	pop	{r4, pc}
 800a7fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a800:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a804:	e7f7      	b.n	800a7f6 <memmove+0x24>
	...

0800a808 <_sbrk_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d06      	ldr	r5, [pc, #24]	@ (800a824 <_sbrk_r+0x1c>)
 800a80c:	2300      	movs	r3, #0
 800a80e:	4604      	mov	r4, r0
 800a810:	4608      	mov	r0, r1
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	f7f7 fdce 	bl	80023b4 <_sbrk>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_sbrk_r+0x1a>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_sbrk_r+0x1a>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	20000970 	.word	0x20000970

0800a828 <abort>:
 800a828:	b508      	push	{r3, lr}
 800a82a:	2006      	movs	r0, #6
 800a82c:	f000 fab4 	bl	800ad98 <raise>
 800a830:	2001      	movs	r0, #1
 800a832:	f7f7 fd47 	bl	80022c4 <_exit>

0800a836 <_calloc_r>:
 800a836:	b570      	push	{r4, r5, r6, lr}
 800a838:	fba1 5402 	umull	r5, r4, r1, r2
 800a83c:	b93c      	cbnz	r4, 800a84e <_calloc_r+0x18>
 800a83e:	4629      	mov	r1, r5
 800a840:	f7fe fc4c 	bl	80090dc <_malloc_r>
 800a844:	4606      	mov	r6, r0
 800a846:	b928      	cbnz	r0, 800a854 <_calloc_r+0x1e>
 800a848:	2600      	movs	r6, #0
 800a84a:	4630      	mov	r0, r6
 800a84c:	bd70      	pop	{r4, r5, r6, pc}
 800a84e:	220c      	movs	r2, #12
 800a850:	6002      	str	r2, [r0, #0]
 800a852:	e7f9      	b.n	800a848 <_calloc_r+0x12>
 800a854:	462a      	mov	r2, r5
 800a856:	4621      	mov	r1, r4
 800a858:	f7fd f91d 	bl	8007a96 <memset>
 800a85c:	e7f5      	b.n	800a84a <_calloc_r+0x14>

0800a85e <_realloc_r>:
 800a85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a862:	4680      	mov	r8, r0
 800a864:	4615      	mov	r5, r2
 800a866:	460c      	mov	r4, r1
 800a868:	b921      	cbnz	r1, 800a874 <_realloc_r+0x16>
 800a86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a86e:	4611      	mov	r1, r2
 800a870:	f7fe bc34 	b.w	80090dc <_malloc_r>
 800a874:	b92a      	cbnz	r2, 800a882 <_realloc_r+0x24>
 800a876:	f7fe f883 	bl	8008980 <_free_r>
 800a87a:	2400      	movs	r4, #0
 800a87c:	4620      	mov	r0, r4
 800a87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a882:	f000 faa5 	bl	800add0 <_malloc_usable_size_r>
 800a886:	4285      	cmp	r5, r0
 800a888:	4606      	mov	r6, r0
 800a88a:	d802      	bhi.n	800a892 <_realloc_r+0x34>
 800a88c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a890:	d8f4      	bhi.n	800a87c <_realloc_r+0x1e>
 800a892:	4629      	mov	r1, r5
 800a894:	4640      	mov	r0, r8
 800a896:	f7fe fc21 	bl	80090dc <_malloc_r>
 800a89a:	4607      	mov	r7, r0
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d0ec      	beq.n	800a87a <_realloc_r+0x1c>
 800a8a0:	42b5      	cmp	r5, r6
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	bf28      	it	cs
 800a8a8:	4632      	movcs	r2, r6
 800a8aa:	f7fd f9e2 	bl	8007c72 <memcpy>
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	f7fe f865 	bl	8008980 <_free_r>
 800a8b6:	463c      	mov	r4, r7
 800a8b8:	e7e0      	b.n	800a87c <_realloc_r+0x1e>
	...

0800a8bc <_strtoul_l.constprop.0>:
 800a8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	4e34      	ldr	r6, [pc, #208]	@ (800a994 <_strtoul_l.constprop.0+0xd8>)
 800a8c2:	4686      	mov	lr, r0
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8cc:	5d37      	ldrb	r7, [r6, r4]
 800a8ce:	f017 0708 	ands.w	r7, r7, #8
 800a8d2:	d1f8      	bne.n	800a8c6 <_strtoul_l.constprop.0+0xa>
 800a8d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a8d6:	d12f      	bne.n	800a938 <_strtoul_l.constprop.0+0x7c>
 800a8d8:	782c      	ldrb	r4, [r5, #0]
 800a8da:	2701      	movs	r7, #1
 800a8dc:	1c85      	adds	r5, r0, #2
 800a8de:	f033 0010 	bics.w	r0, r3, #16
 800a8e2:	d109      	bne.n	800a8f8 <_strtoul_l.constprop.0+0x3c>
 800a8e4:	2c30      	cmp	r4, #48	@ 0x30
 800a8e6:	d12c      	bne.n	800a942 <_strtoul_l.constprop.0+0x86>
 800a8e8:	7828      	ldrb	r0, [r5, #0]
 800a8ea:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a8ee:	2858      	cmp	r0, #88	@ 0x58
 800a8f0:	d127      	bne.n	800a942 <_strtoul_l.constprop.0+0x86>
 800a8f2:	786c      	ldrb	r4, [r5, #1]
 800a8f4:	2310      	movs	r3, #16
 800a8f6:	3502      	adds	r5, #2
 800a8f8:	f04f 38ff 	mov.w	r8, #4294967295
 800a8fc:	2600      	movs	r6, #0
 800a8fe:	fbb8 f8f3 	udiv	r8, r8, r3
 800a902:	fb03 f908 	mul.w	r9, r3, r8
 800a906:	ea6f 0909 	mvn.w	r9, r9
 800a90a:	4630      	mov	r0, r6
 800a90c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a910:	f1bc 0f09 	cmp.w	ip, #9
 800a914:	d81c      	bhi.n	800a950 <_strtoul_l.constprop.0+0x94>
 800a916:	4664      	mov	r4, ip
 800a918:	42a3      	cmp	r3, r4
 800a91a:	dd2a      	ble.n	800a972 <_strtoul_l.constprop.0+0xb6>
 800a91c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a920:	d007      	beq.n	800a932 <_strtoul_l.constprop.0+0x76>
 800a922:	4580      	cmp	r8, r0
 800a924:	d322      	bcc.n	800a96c <_strtoul_l.constprop.0+0xb0>
 800a926:	d101      	bne.n	800a92c <_strtoul_l.constprop.0+0x70>
 800a928:	45a1      	cmp	r9, r4
 800a92a:	db1f      	blt.n	800a96c <_strtoul_l.constprop.0+0xb0>
 800a92c:	fb00 4003 	mla	r0, r0, r3, r4
 800a930:	2601      	movs	r6, #1
 800a932:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a936:	e7e9      	b.n	800a90c <_strtoul_l.constprop.0+0x50>
 800a938:	2c2b      	cmp	r4, #43	@ 0x2b
 800a93a:	bf04      	itt	eq
 800a93c:	782c      	ldrbeq	r4, [r5, #0]
 800a93e:	1c85      	addeq	r5, r0, #2
 800a940:	e7cd      	b.n	800a8de <_strtoul_l.constprop.0+0x22>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1d8      	bne.n	800a8f8 <_strtoul_l.constprop.0+0x3c>
 800a946:	2c30      	cmp	r4, #48	@ 0x30
 800a948:	bf0c      	ite	eq
 800a94a:	2308      	moveq	r3, #8
 800a94c:	230a      	movne	r3, #10
 800a94e:	e7d3      	b.n	800a8f8 <_strtoul_l.constprop.0+0x3c>
 800a950:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a954:	f1bc 0f19 	cmp.w	ip, #25
 800a958:	d801      	bhi.n	800a95e <_strtoul_l.constprop.0+0xa2>
 800a95a:	3c37      	subs	r4, #55	@ 0x37
 800a95c:	e7dc      	b.n	800a918 <_strtoul_l.constprop.0+0x5c>
 800a95e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a962:	f1bc 0f19 	cmp.w	ip, #25
 800a966:	d804      	bhi.n	800a972 <_strtoul_l.constprop.0+0xb6>
 800a968:	3c57      	subs	r4, #87	@ 0x57
 800a96a:	e7d5      	b.n	800a918 <_strtoul_l.constprop.0+0x5c>
 800a96c:	f04f 36ff 	mov.w	r6, #4294967295
 800a970:	e7df      	b.n	800a932 <_strtoul_l.constprop.0+0x76>
 800a972:	1c73      	adds	r3, r6, #1
 800a974:	d106      	bne.n	800a984 <_strtoul_l.constprop.0+0xc8>
 800a976:	2322      	movs	r3, #34	@ 0x22
 800a978:	f8ce 3000 	str.w	r3, [lr]
 800a97c:	4630      	mov	r0, r6
 800a97e:	b932      	cbnz	r2, 800a98e <_strtoul_l.constprop.0+0xd2>
 800a980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a984:	b107      	cbz	r7, 800a988 <_strtoul_l.constprop.0+0xcc>
 800a986:	4240      	negs	r0, r0
 800a988:	2a00      	cmp	r2, #0
 800a98a:	d0f9      	beq.n	800a980 <_strtoul_l.constprop.0+0xc4>
 800a98c:	b106      	cbz	r6, 800a990 <_strtoul_l.constprop.0+0xd4>
 800a98e:	1e69      	subs	r1, r5, #1
 800a990:	6011      	str	r1, [r2, #0]
 800a992:	e7f5      	b.n	800a980 <_strtoul_l.constprop.0+0xc4>
 800a994:	0800cf89 	.word	0x0800cf89

0800a998 <_strtoul_r>:
 800a998:	f7ff bf90 	b.w	800a8bc <_strtoul_l.constprop.0>

0800a99c <__sfputc_r>:
 800a99c:	6893      	ldr	r3, [r2, #8]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	b410      	push	{r4}
 800a9a4:	6093      	str	r3, [r2, #8]
 800a9a6:	da08      	bge.n	800a9ba <__sfputc_r+0x1e>
 800a9a8:	6994      	ldr	r4, [r2, #24]
 800a9aa:	42a3      	cmp	r3, r4
 800a9ac:	db01      	blt.n	800a9b2 <__sfputc_r+0x16>
 800a9ae:	290a      	cmp	r1, #10
 800a9b0:	d103      	bne.n	800a9ba <__sfputc_r+0x1e>
 800a9b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9b6:	f000 b933 	b.w	800ac20 <__swbuf_r>
 800a9ba:	6813      	ldr	r3, [r2, #0]
 800a9bc:	1c58      	adds	r0, r3, #1
 800a9be:	6010      	str	r0, [r2, #0]
 800a9c0:	7019      	strb	r1, [r3, #0]
 800a9c2:	4608      	mov	r0, r1
 800a9c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <__sfputs_r>:
 800a9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	460f      	mov	r7, r1
 800a9d0:	4614      	mov	r4, r2
 800a9d2:	18d5      	adds	r5, r2, r3
 800a9d4:	42ac      	cmp	r4, r5
 800a9d6:	d101      	bne.n	800a9dc <__sfputs_r+0x12>
 800a9d8:	2000      	movs	r0, #0
 800a9da:	e007      	b.n	800a9ec <__sfputs_r+0x22>
 800a9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e0:	463a      	mov	r2, r7
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7ff ffda 	bl	800a99c <__sfputc_r>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	d1f3      	bne.n	800a9d4 <__sfputs_r+0xa>
 800a9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9f0 <_vfiprintf_r>:
 800a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	b09d      	sub	sp, #116	@ 0x74
 800a9f8:	4614      	mov	r4, r2
 800a9fa:	4698      	mov	r8, r3
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	b118      	cbz	r0, 800aa08 <_vfiprintf_r+0x18>
 800aa00:	6a03      	ldr	r3, [r0, #32]
 800aa02:	b90b      	cbnz	r3, 800aa08 <_vfiprintf_r+0x18>
 800aa04:	f7fc ff4e 	bl	80078a4 <__sinit>
 800aa08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa0a:	07d9      	lsls	r1, r3, #31
 800aa0c:	d405      	bmi.n	800aa1a <_vfiprintf_r+0x2a>
 800aa0e:	89ab      	ldrh	r3, [r5, #12]
 800aa10:	059a      	lsls	r2, r3, #22
 800aa12:	d402      	bmi.n	800aa1a <_vfiprintf_r+0x2a>
 800aa14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa16:	f7fd f92a 	bl	8007c6e <__retarget_lock_acquire_recursive>
 800aa1a:	89ab      	ldrh	r3, [r5, #12]
 800aa1c:	071b      	lsls	r3, r3, #28
 800aa1e:	d501      	bpl.n	800aa24 <_vfiprintf_r+0x34>
 800aa20:	692b      	ldr	r3, [r5, #16]
 800aa22:	b99b      	cbnz	r3, 800aa4c <_vfiprintf_r+0x5c>
 800aa24:	4629      	mov	r1, r5
 800aa26:	4630      	mov	r0, r6
 800aa28:	f000 f938 	bl	800ac9c <__swsetup_r>
 800aa2c:	b170      	cbz	r0, 800aa4c <_vfiprintf_r+0x5c>
 800aa2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa30:	07dc      	lsls	r4, r3, #31
 800aa32:	d504      	bpl.n	800aa3e <_vfiprintf_r+0x4e>
 800aa34:	f04f 30ff 	mov.w	r0, #4294967295
 800aa38:	b01d      	add	sp, #116	@ 0x74
 800aa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3e:	89ab      	ldrh	r3, [r5, #12]
 800aa40:	0598      	lsls	r0, r3, #22
 800aa42:	d4f7      	bmi.n	800aa34 <_vfiprintf_r+0x44>
 800aa44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa46:	f7fd f913 	bl	8007c70 <__retarget_lock_release_recursive>
 800aa4a:	e7f3      	b.n	800aa34 <_vfiprintf_r+0x44>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa50:	2320      	movs	r3, #32
 800aa52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa56:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa5a:	2330      	movs	r3, #48	@ 0x30
 800aa5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac0c <_vfiprintf_r+0x21c>
 800aa60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa64:	f04f 0901 	mov.w	r9, #1
 800aa68:	4623      	mov	r3, r4
 800aa6a:	469a      	mov	sl, r3
 800aa6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa70:	b10a      	cbz	r2, 800aa76 <_vfiprintf_r+0x86>
 800aa72:	2a25      	cmp	r2, #37	@ 0x25
 800aa74:	d1f9      	bne.n	800aa6a <_vfiprintf_r+0x7a>
 800aa76:	ebba 0b04 	subs.w	fp, sl, r4
 800aa7a:	d00b      	beq.n	800aa94 <_vfiprintf_r+0xa4>
 800aa7c:	465b      	mov	r3, fp
 800aa7e:	4622      	mov	r2, r4
 800aa80:	4629      	mov	r1, r5
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7ff ffa1 	bl	800a9ca <__sfputs_r>
 800aa88:	3001      	adds	r0, #1
 800aa8a:	f000 80a7 	beq.w	800abdc <_vfiprintf_r+0x1ec>
 800aa8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa90:	445a      	add	r2, fp
 800aa92:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa94:	f89a 3000 	ldrb.w	r3, [sl]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	f000 809f 	beq.w	800abdc <_vfiprintf_r+0x1ec>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaa8:	f10a 0a01 	add.w	sl, sl, #1
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	9307      	str	r3, [sp, #28]
 800aab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aab4:	931a      	str	r3, [sp, #104]	@ 0x68
 800aab6:	4654      	mov	r4, sl
 800aab8:	2205      	movs	r2, #5
 800aaba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aabe:	4853      	ldr	r0, [pc, #332]	@ (800ac0c <_vfiprintf_r+0x21c>)
 800aac0:	f7f5 fb8e 	bl	80001e0 <memchr>
 800aac4:	9a04      	ldr	r2, [sp, #16]
 800aac6:	b9d8      	cbnz	r0, 800ab00 <_vfiprintf_r+0x110>
 800aac8:	06d1      	lsls	r1, r2, #27
 800aaca:	bf44      	itt	mi
 800aacc:	2320      	movmi	r3, #32
 800aace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aad2:	0713      	lsls	r3, r2, #28
 800aad4:	bf44      	itt	mi
 800aad6:	232b      	movmi	r3, #43	@ 0x2b
 800aad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aadc:	f89a 3000 	ldrb.w	r3, [sl]
 800aae0:	2b2a      	cmp	r3, #42	@ 0x2a
 800aae2:	d015      	beq.n	800ab10 <_vfiprintf_r+0x120>
 800aae4:	9a07      	ldr	r2, [sp, #28]
 800aae6:	4654      	mov	r4, sl
 800aae8:	2000      	movs	r0, #0
 800aaea:	f04f 0c0a 	mov.w	ip, #10
 800aaee:	4621      	mov	r1, r4
 800aaf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaf4:	3b30      	subs	r3, #48	@ 0x30
 800aaf6:	2b09      	cmp	r3, #9
 800aaf8:	d94b      	bls.n	800ab92 <_vfiprintf_r+0x1a2>
 800aafa:	b1b0      	cbz	r0, 800ab2a <_vfiprintf_r+0x13a>
 800aafc:	9207      	str	r2, [sp, #28]
 800aafe:	e014      	b.n	800ab2a <_vfiprintf_r+0x13a>
 800ab00:	eba0 0308 	sub.w	r3, r0, r8
 800ab04:	fa09 f303 	lsl.w	r3, r9, r3
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	46a2      	mov	sl, r4
 800ab0e:	e7d2      	b.n	800aab6 <_vfiprintf_r+0xc6>
 800ab10:	9b03      	ldr	r3, [sp, #12]
 800ab12:	1d19      	adds	r1, r3, #4
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	9103      	str	r1, [sp, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	bfbb      	ittet	lt
 800ab1c:	425b      	neglt	r3, r3
 800ab1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab22:	9307      	strge	r3, [sp, #28]
 800ab24:	9307      	strlt	r3, [sp, #28]
 800ab26:	bfb8      	it	lt
 800ab28:	9204      	strlt	r2, [sp, #16]
 800ab2a:	7823      	ldrb	r3, [r4, #0]
 800ab2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab2e:	d10a      	bne.n	800ab46 <_vfiprintf_r+0x156>
 800ab30:	7863      	ldrb	r3, [r4, #1]
 800ab32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab34:	d132      	bne.n	800ab9c <_vfiprintf_r+0x1ac>
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	1d1a      	adds	r2, r3, #4
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	9203      	str	r2, [sp, #12]
 800ab3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab42:	3402      	adds	r4, #2
 800ab44:	9305      	str	r3, [sp, #20]
 800ab46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac1c <_vfiprintf_r+0x22c>
 800ab4a:	7821      	ldrb	r1, [r4, #0]
 800ab4c:	2203      	movs	r2, #3
 800ab4e:	4650      	mov	r0, sl
 800ab50:	f7f5 fb46 	bl	80001e0 <memchr>
 800ab54:	b138      	cbz	r0, 800ab66 <_vfiprintf_r+0x176>
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	eba0 000a 	sub.w	r0, r0, sl
 800ab5c:	2240      	movs	r2, #64	@ 0x40
 800ab5e:	4082      	lsls	r2, r0
 800ab60:	4313      	orrs	r3, r2
 800ab62:	3401      	adds	r4, #1
 800ab64:	9304      	str	r3, [sp, #16]
 800ab66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab6a:	4829      	ldr	r0, [pc, #164]	@ (800ac10 <_vfiprintf_r+0x220>)
 800ab6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab70:	2206      	movs	r2, #6
 800ab72:	f7f5 fb35 	bl	80001e0 <memchr>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d03f      	beq.n	800abfa <_vfiprintf_r+0x20a>
 800ab7a:	4b26      	ldr	r3, [pc, #152]	@ (800ac14 <_vfiprintf_r+0x224>)
 800ab7c:	bb1b      	cbnz	r3, 800abc6 <_vfiprintf_r+0x1d6>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	3307      	adds	r3, #7
 800ab82:	f023 0307 	bic.w	r3, r3, #7
 800ab86:	3308      	adds	r3, #8
 800ab88:	9303      	str	r3, [sp, #12]
 800ab8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab8c:	443b      	add	r3, r7
 800ab8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab90:	e76a      	b.n	800aa68 <_vfiprintf_r+0x78>
 800ab92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab96:	460c      	mov	r4, r1
 800ab98:	2001      	movs	r0, #1
 800ab9a:	e7a8      	b.n	800aaee <_vfiprintf_r+0xfe>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	3401      	adds	r4, #1
 800aba0:	9305      	str	r3, [sp, #20]
 800aba2:	4619      	mov	r1, r3
 800aba4:	f04f 0c0a 	mov.w	ip, #10
 800aba8:	4620      	mov	r0, r4
 800abaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abae:	3a30      	subs	r2, #48	@ 0x30
 800abb0:	2a09      	cmp	r2, #9
 800abb2:	d903      	bls.n	800abbc <_vfiprintf_r+0x1cc>
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d0c6      	beq.n	800ab46 <_vfiprintf_r+0x156>
 800abb8:	9105      	str	r1, [sp, #20]
 800abba:	e7c4      	b.n	800ab46 <_vfiprintf_r+0x156>
 800abbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800abc0:	4604      	mov	r4, r0
 800abc2:	2301      	movs	r3, #1
 800abc4:	e7f0      	b.n	800aba8 <_vfiprintf_r+0x1b8>
 800abc6:	ab03      	add	r3, sp, #12
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	462a      	mov	r2, r5
 800abcc:	4b12      	ldr	r3, [pc, #72]	@ (800ac18 <_vfiprintf_r+0x228>)
 800abce:	a904      	add	r1, sp, #16
 800abd0:	4630      	mov	r0, r6
 800abd2:	f7fc f80f 	bl	8006bf4 <_printf_float>
 800abd6:	4607      	mov	r7, r0
 800abd8:	1c78      	adds	r0, r7, #1
 800abda:	d1d6      	bne.n	800ab8a <_vfiprintf_r+0x19a>
 800abdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abde:	07d9      	lsls	r1, r3, #31
 800abe0:	d405      	bmi.n	800abee <_vfiprintf_r+0x1fe>
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	059a      	lsls	r2, r3, #22
 800abe6:	d402      	bmi.n	800abee <_vfiprintf_r+0x1fe>
 800abe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abea:	f7fd f841 	bl	8007c70 <__retarget_lock_release_recursive>
 800abee:	89ab      	ldrh	r3, [r5, #12]
 800abf0:	065b      	lsls	r3, r3, #25
 800abf2:	f53f af1f 	bmi.w	800aa34 <_vfiprintf_r+0x44>
 800abf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abf8:	e71e      	b.n	800aa38 <_vfiprintf_r+0x48>
 800abfa:	ab03      	add	r3, sp, #12
 800abfc:	9300      	str	r3, [sp, #0]
 800abfe:	462a      	mov	r2, r5
 800ac00:	4b05      	ldr	r3, [pc, #20]	@ (800ac18 <_vfiprintf_r+0x228>)
 800ac02:	a904      	add	r1, sp, #16
 800ac04:	4630      	mov	r0, r6
 800ac06:	f7fc fa8d 	bl	8007124 <_printf_i>
 800ac0a:	e7e4      	b.n	800abd6 <_vfiprintf_r+0x1e6>
 800ac0c:	0800d089 	.word	0x0800d089
 800ac10:	0800d093 	.word	0x0800d093
 800ac14:	08006bf5 	.word	0x08006bf5
 800ac18:	0800a9cb 	.word	0x0800a9cb
 800ac1c:	0800d08f 	.word	0x0800d08f

0800ac20 <__swbuf_r>:
 800ac20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac22:	460e      	mov	r6, r1
 800ac24:	4614      	mov	r4, r2
 800ac26:	4605      	mov	r5, r0
 800ac28:	b118      	cbz	r0, 800ac32 <__swbuf_r+0x12>
 800ac2a:	6a03      	ldr	r3, [r0, #32]
 800ac2c:	b90b      	cbnz	r3, 800ac32 <__swbuf_r+0x12>
 800ac2e:	f7fc fe39 	bl	80078a4 <__sinit>
 800ac32:	69a3      	ldr	r3, [r4, #24]
 800ac34:	60a3      	str	r3, [r4, #8]
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	071a      	lsls	r2, r3, #28
 800ac3a:	d501      	bpl.n	800ac40 <__swbuf_r+0x20>
 800ac3c:	6923      	ldr	r3, [r4, #16]
 800ac3e:	b943      	cbnz	r3, 800ac52 <__swbuf_r+0x32>
 800ac40:	4621      	mov	r1, r4
 800ac42:	4628      	mov	r0, r5
 800ac44:	f000 f82a 	bl	800ac9c <__swsetup_r>
 800ac48:	b118      	cbz	r0, 800ac52 <__swbuf_r+0x32>
 800ac4a:	f04f 37ff 	mov.w	r7, #4294967295
 800ac4e:	4638      	mov	r0, r7
 800ac50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	6922      	ldr	r2, [r4, #16]
 800ac56:	1a98      	subs	r0, r3, r2
 800ac58:	6963      	ldr	r3, [r4, #20]
 800ac5a:	b2f6      	uxtb	r6, r6
 800ac5c:	4283      	cmp	r3, r0
 800ac5e:	4637      	mov	r7, r6
 800ac60:	dc05      	bgt.n	800ac6e <__swbuf_r+0x4e>
 800ac62:	4621      	mov	r1, r4
 800ac64:	4628      	mov	r0, r5
 800ac66:	f7ff fd07 	bl	800a678 <_fflush_r>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d1ed      	bne.n	800ac4a <__swbuf_r+0x2a>
 800ac6e:	68a3      	ldr	r3, [r4, #8]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	60a3      	str	r3, [r4, #8]
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	6022      	str	r2, [r4, #0]
 800ac7a:	701e      	strb	r6, [r3, #0]
 800ac7c:	6962      	ldr	r2, [r4, #20]
 800ac7e:	1c43      	adds	r3, r0, #1
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d004      	beq.n	800ac8e <__swbuf_r+0x6e>
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	07db      	lsls	r3, r3, #31
 800ac88:	d5e1      	bpl.n	800ac4e <__swbuf_r+0x2e>
 800ac8a:	2e0a      	cmp	r6, #10
 800ac8c:	d1df      	bne.n	800ac4e <__swbuf_r+0x2e>
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4628      	mov	r0, r5
 800ac92:	f7ff fcf1 	bl	800a678 <_fflush_r>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d0d9      	beq.n	800ac4e <__swbuf_r+0x2e>
 800ac9a:	e7d6      	b.n	800ac4a <__swbuf_r+0x2a>

0800ac9c <__swsetup_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	4b29      	ldr	r3, [pc, #164]	@ (800ad44 <__swsetup_r+0xa8>)
 800aca0:	4605      	mov	r5, r0
 800aca2:	6818      	ldr	r0, [r3, #0]
 800aca4:	460c      	mov	r4, r1
 800aca6:	b118      	cbz	r0, 800acb0 <__swsetup_r+0x14>
 800aca8:	6a03      	ldr	r3, [r0, #32]
 800acaa:	b90b      	cbnz	r3, 800acb0 <__swsetup_r+0x14>
 800acac:	f7fc fdfa 	bl	80078a4 <__sinit>
 800acb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acb4:	0719      	lsls	r1, r3, #28
 800acb6:	d422      	bmi.n	800acfe <__swsetup_r+0x62>
 800acb8:	06da      	lsls	r2, r3, #27
 800acba:	d407      	bmi.n	800accc <__swsetup_r+0x30>
 800acbc:	2209      	movs	r2, #9
 800acbe:	602a      	str	r2, [r5, #0]
 800acc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acc4:	81a3      	strh	r3, [r4, #12]
 800acc6:	f04f 30ff 	mov.w	r0, #4294967295
 800acca:	e033      	b.n	800ad34 <__swsetup_r+0x98>
 800accc:	0758      	lsls	r0, r3, #29
 800acce:	d512      	bpl.n	800acf6 <__swsetup_r+0x5a>
 800acd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acd2:	b141      	cbz	r1, 800ace6 <__swsetup_r+0x4a>
 800acd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acd8:	4299      	cmp	r1, r3
 800acda:	d002      	beq.n	800ace2 <__swsetup_r+0x46>
 800acdc:	4628      	mov	r0, r5
 800acde:	f7fd fe4f 	bl	8008980 <_free_r>
 800ace2:	2300      	movs	r3, #0
 800ace4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800acec:	81a3      	strh	r3, [r4, #12]
 800acee:	2300      	movs	r3, #0
 800acf0:	6063      	str	r3, [r4, #4]
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	f043 0308 	orr.w	r3, r3, #8
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	b94b      	cbnz	r3, 800ad16 <__swsetup_r+0x7a>
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad0c:	d003      	beq.n	800ad16 <__swsetup_r+0x7a>
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4628      	mov	r0, r5
 800ad12:	f000 f88b 	bl	800ae2c <__smakebuf_r>
 800ad16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad1a:	f013 0201 	ands.w	r2, r3, #1
 800ad1e:	d00a      	beq.n	800ad36 <__swsetup_r+0x9a>
 800ad20:	2200      	movs	r2, #0
 800ad22:	60a2      	str	r2, [r4, #8]
 800ad24:	6962      	ldr	r2, [r4, #20]
 800ad26:	4252      	negs	r2, r2
 800ad28:	61a2      	str	r2, [r4, #24]
 800ad2a:	6922      	ldr	r2, [r4, #16]
 800ad2c:	b942      	cbnz	r2, 800ad40 <__swsetup_r+0xa4>
 800ad2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad32:	d1c5      	bne.n	800acc0 <__swsetup_r+0x24>
 800ad34:	bd38      	pop	{r3, r4, r5, pc}
 800ad36:	0799      	lsls	r1, r3, #30
 800ad38:	bf58      	it	pl
 800ad3a:	6962      	ldrpl	r2, [r4, #20]
 800ad3c:	60a2      	str	r2, [r4, #8]
 800ad3e:	e7f4      	b.n	800ad2a <__swsetup_r+0x8e>
 800ad40:	2000      	movs	r0, #0
 800ad42:	e7f7      	b.n	800ad34 <__swsetup_r+0x98>
 800ad44:	200001d4 	.word	0x200001d4

0800ad48 <_raise_r>:
 800ad48:	291f      	cmp	r1, #31
 800ad4a:	b538      	push	{r3, r4, r5, lr}
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	d904      	bls.n	800ad5c <_raise_r+0x14>
 800ad52:	2316      	movs	r3, #22
 800ad54:	6003      	str	r3, [r0, #0]
 800ad56:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad5e:	b112      	cbz	r2, 800ad66 <_raise_r+0x1e>
 800ad60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad64:	b94b      	cbnz	r3, 800ad7a <_raise_r+0x32>
 800ad66:	4628      	mov	r0, r5
 800ad68:	f000 f830 	bl	800adcc <_getpid_r>
 800ad6c:	4622      	mov	r2, r4
 800ad6e:	4601      	mov	r1, r0
 800ad70:	4628      	mov	r0, r5
 800ad72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad76:	f000 b817 	b.w	800ada8 <_kill_r>
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d00a      	beq.n	800ad94 <_raise_r+0x4c>
 800ad7e:	1c59      	adds	r1, r3, #1
 800ad80:	d103      	bne.n	800ad8a <_raise_r+0x42>
 800ad82:	2316      	movs	r3, #22
 800ad84:	6003      	str	r3, [r0, #0]
 800ad86:	2001      	movs	r0, #1
 800ad88:	e7e7      	b.n	800ad5a <_raise_r+0x12>
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad90:	4620      	mov	r0, r4
 800ad92:	4798      	blx	r3
 800ad94:	2000      	movs	r0, #0
 800ad96:	e7e0      	b.n	800ad5a <_raise_r+0x12>

0800ad98 <raise>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	@ (800ada4 <raise+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f7ff bfd3 	b.w	800ad48 <_raise_r>
 800ada2:	bf00      	nop
 800ada4:	200001d4 	.word	0x200001d4

0800ada8 <_kill_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	@ (800adc8 <_kill_r+0x20>)
 800adac:	2300      	movs	r3, #0
 800adae:	4604      	mov	r4, r0
 800adb0:	4608      	mov	r0, r1
 800adb2:	4611      	mov	r1, r2
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	f7f7 fa75 	bl	80022a4 <_kill>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	d102      	bne.n	800adc4 <_kill_r+0x1c>
 800adbe:	682b      	ldr	r3, [r5, #0]
 800adc0:	b103      	cbz	r3, 800adc4 <_kill_r+0x1c>
 800adc2:	6023      	str	r3, [r4, #0]
 800adc4:	bd38      	pop	{r3, r4, r5, pc}
 800adc6:	bf00      	nop
 800adc8:	20000970 	.word	0x20000970

0800adcc <_getpid_r>:
 800adcc:	f7f7 ba62 	b.w	8002294 <_getpid>

0800add0 <_malloc_usable_size_r>:
 800add0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add4:	1f18      	subs	r0, r3, #4
 800add6:	2b00      	cmp	r3, #0
 800add8:	bfbc      	itt	lt
 800adda:	580b      	ldrlt	r3, [r1, r0]
 800addc:	18c0      	addlt	r0, r0, r3
 800adde:	4770      	bx	lr

0800ade0 <__swhatbuf_r>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	460c      	mov	r4, r1
 800ade4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade8:	2900      	cmp	r1, #0
 800adea:	b096      	sub	sp, #88	@ 0x58
 800adec:	4615      	mov	r5, r2
 800adee:	461e      	mov	r6, r3
 800adf0:	da0d      	bge.n	800ae0e <__swhatbuf_r+0x2e>
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adf8:	f04f 0100 	mov.w	r1, #0
 800adfc:	bf14      	ite	ne
 800adfe:	2340      	movne	r3, #64	@ 0x40
 800ae00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae04:	2000      	movs	r0, #0
 800ae06:	6031      	str	r1, [r6, #0]
 800ae08:	602b      	str	r3, [r5, #0]
 800ae0a:	b016      	add	sp, #88	@ 0x58
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
 800ae0e:	466a      	mov	r2, sp
 800ae10:	f000 f848 	bl	800aea4 <_fstat_r>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	dbec      	blt.n	800adf2 <__swhatbuf_r+0x12>
 800ae18:	9901      	ldr	r1, [sp, #4]
 800ae1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae22:	4259      	negs	r1, r3
 800ae24:	4159      	adcs	r1, r3
 800ae26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae2a:	e7eb      	b.n	800ae04 <__swhatbuf_r+0x24>

0800ae2c <__smakebuf_r>:
 800ae2c:	898b      	ldrh	r3, [r1, #12]
 800ae2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae30:	079d      	lsls	r5, r3, #30
 800ae32:	4606      	mov	r6, r0
 800ae34:	460c      	mov	r4, r1
 800ae36:	d507      	bpl.n	800ae48 <__smakebuf_r+0x1c>
 800ae38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	6123      	str	r3, [r4, #16]
 800ae40:	2301      	movs	r3, #1
 800ae42:	6163      	str	r3, [r4, #20]
 800ae44:	b003      	add	sp, #12
 800ae46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae48:	ab01      	add	r3, sp, #4
 800ae4a:	466a      	mov	r2, sp
 800ae4c:	f7ff ffc8 	bl	800ade0 <__swhatbuf_r>
 800ae50:	9f00      	ldr	r7, [sp, #0]
 800ae52:	4605      	mov	r5, r0
 800ae54:	4639      	mov	r1, r7
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7fe f940 	bl	80090dc <_malloc_r>
 800ae5c:	b948      	cbnz	r0, 800ae72 <__smakebuf_r+0x46>
 800ae5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae62:	059a      	lsls	r2, r3, #22
 800ae64:	d4ee      	bmi.n	800ae44 <__smakebuf_r+0x18>
 800ae66:	f023 0303 	bic.w	r3, r3, #3
 800ae6a:	f043 0302 	orr.w	r3, r3, #2
 800ae6e:	81a3      	strh	r3, [r4, #12]
 800ae70:	e7e2      	b.n	800ae38 <__smakebuf_r+0xc>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	6020      	str	r0, [r4, #0]
 800ae76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	9b01      	ldr	r3, [sp, #4]
 800ae7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae82:	b15b      	cbz	r3, 800ae9c <__smakebuf_r+0x70>
 800ae84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f000 f81d 	bl	800aec8 <_isatty_r>
 800ae8e:	b128      	cbz	r0, 800ae9c <__smakebuf_r+0x70>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	f023 0303 	bic.w	r3, r3, #3
 800ae96:	f043 0301 	orr.w	r3, r3, #1
 800ae9a:	81a3      	strh	r3, [r4, #12]
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	431d      	orrs	r5, r3
 800aea0:	81a5      	strh	r5, [r4, #12]
 800aea2:	e7cf      	b.n	800ae44 <__smakebuf_r+0x18>

0800aea4 <_fstat_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	4d07      	ldr	r5, [pc, #28]	@ (800aec4 <_fstat_r+0x20>)
 800aea8:	2300      	movs	r3, #0
 800aeaa:	4604      	mov	r4, r0
 800aeac:	4608      	mov	r0, r1
 800aeae:	4611      	mov	r1, r2
 800aeb0:	602b      	str	r3, [r5, #0]
 800aeb2:	f7f7 fa57 	bl	8002364 <_fstat>
 800aeb6:	1c43      	adds	r3, r0, #1
 800aeb8:	d102      	bne.n	800aec0 <_fstat_r+0x1c>
 800aeba:	682b      	ldr	r3, [r5, #0]
 800aebc:	b103      	cbz	r3, 800aec0 <_fstat_r+0x1c>
 800aebe:	6023      	str	r3, [r4, #0]
 800aec0:	bd38      	pop	{r3, r4, r5, pc}
 800aec2:	bf00      	nop
 800aec4:	20000970 	.word	0x20000970

0800aec8 <_isatty_r>:
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	4d06      	ldr	r5, [pc, #24]	@ (800aee4 <_isatty_r+0x1c>)
 800aecc:	2300      	movs	r3, #0
 800aece:	4604      	mov	r4, r0
 800aed0:	4608      	mov	r0, r1
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	f7f7 fa56 	bl	8002384 <_isatty>
 800aed8:	1c43      	adds	r3, r0, #1
 800aeda:	d102      	bne.n	800aee2 <_isatty_r+0x1a>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	b103      	cbz	r3, 800aee2 <_isatty_r+0x1a>
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	bd38      	pop	{r3, r4, r5, pc}
 800aee4:	20000970 	.word	0x20000970

0800aee8 <acos>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	ed2d 8b02 	vpush	{d8}
 800aeee:	ec55 4b10 	vmov	r4, r5, d0
 800aef2:	f000 fa3d 	bl	800b370 <__ieee754_acos>
 800aef6:	4622      	mov	r2, r4
 800aef8:	462b      	mov	r3, r5
 800aefa:	4620      	mov	r0, r4
 800aefc:	4629      	mov	r1, r5
 800aefe:	eeb0 8a40 	vmov.f32	s16, s0
 800af02:	eef0 8a60 	vmov.f32	s17, s1
 800af06:	f7f5 fe19 	bl	8000b3c <__aeabi_dcmpun>
 800af0a:	b9a8      	cbnz	r0, 800af38 <acos+0x50>
 800af0c:	ec45 4b10 	vmov	d0, r4, r5
 800af10:	f000 f8ba 	bl	800b088 <fabs>
 800af14:	4b0c      	ldr	r3, [pc, #48]	@ (800af48 <acos+0x60>)
 800af16:	ec51 0b10 	vmov	r0, r1, d0
 800af1a:	2200      	movs	r2, #0
 800af1c:	f7f5 fe04 	bl	8000b28 <__aeabi_dcmpgt>
 800af20:	b150      	cbz	r0, 800af38 <acos+0x50>
 800af22:	f7fc fe79 	bl	8007c18 <__errno>
 800af26:	ecbd 8b02 	vpop	{d8}
 800af2a:	2321      	movs	r3, #33	@ 0x21
 800af2c:	6003      	str	r3, [r0, #0]
 800af2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af32:	4806      	ldr	r0, [pc, #24]	@ (800af4c <acos+0x64>)
 800af34:	f7fc beac 	b.w	8007c90 <nan>
 800af38:	eeb0 0a48 	vmov.f32	s0, s16
 800af3c:	eef0 0a68 	vmov.f32	s1, s17
 800af40:	ecbd 8b02 	vpop	{d8}
 800af44:	bd38      	pop	{r3, r4, r5, pc}
 800af46:	bf00      	nop
 800af48:	3ff00000 	.word	0x3ff00000
 800af4c:	0800cd5b 	.word	0x0800cd5b

0800af50 <pow>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	ed2d 8b02 	vpush	{d8}
 800af56:	eeb0 8a40 	vmov.f32	s16, s0
 800af5a:	eef0 8a60 	vmov.f32	s17, s1
 800af5e:	ec55 4b11 	vmov	r4, r5, d1
 800af62:	f000 fc61 	bl	800b828 <__ieee754_pow>
 800af66:	4622      	mov	r2, r4
 800af68:	462b      	mov	r3, r5
 800af6a:	4620      	mov	r0, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	ec57 6b10 	vmov	r6, r7, d0
 800af72:	f7f5 fde3 	bl	8000b3c <__aeabi_dcmpun>
 800af76:	2800      	cmp	r0, #0
 800af78:	d13b      	bne.n	800aff2 <pow+0xa2>
 800af7a:	ec51 0b18 	vmov	r0, r1, d8
 800af7e:	2200      	movs	r2, #0
 800af80:	2300      	movs	r3, #0
 800af82:	f7f5 fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 800af86:	b1b8      	cbz	r0, 800afb8 <pow+0x68>
 800af88:	2200      	movs	r2, #0
 800af8a:	2300      	movs	r3, #0
 800af8c:	4620      	mov	r0, r4
 800af8e:	4629      	mov	r1, r5
 800af90:	f7f5 fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 800af94:	2800      	cmp	r0, #0
 800af96:	d146      	bne.n	800b026 <pow+0xd6>
 800af98:	ec45 4b10 	vmov	d0, r4, r5
 800af9c:	f000 f8f2 	bl	800b184 <finite>
 800afa0:	b338      	cbz	r0, 800aff2 <pow+0xa2>
 800afa2:	2200      	movs	r2, #0
 800afa4:	2300      	movs	r3, #0
 800afa6:	4620      	mov	r0, r4
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7f5 fd9f 	bl	8000aec <__aeabi_dcmplt>
 800afae:	b300      	cbz	r0, 800aff2 <pow+0xa2>
 800afb0:	f7fc fe32 	bl	8007c18 <__errno>
 800afb4:	2322      	movs	r3, #34	@ 0x22
 800afb6:	e01b      	b.n	800aff0 <pow+0xa0>
 800afb8:	ec47 6b10 	vmov	d0, r6, r7
 800afbc:	f000 f8e2 	bl	800b184 <finite>
 800afc0:	b9e0      	cbnz	r0, 800affc <pow+0xac>
 800afc2:	eeb0 0a48 	vmov.f32	s0, s16
 800afc6:	eef0 0a68 	vmov.f32	s1, s17
 800afca:	f000 f8db 	bl	800b184 <finite>
 800afce:	b1a8      	cbz	r0, 800affc <pow+0xac>
 800afd0:	ec45 4b10 	vmov	d0, r4, r5
 800afd4:	f000 f8d6 	bl	800b184 <finite>
 800afd8:	b180      	cbz	r0, 800affc <pow+0xac>
 800afda:	4632      	mov	r2, r6
 800afdc:	463b      	mov	r3, r7
 800afde:	4630      	mov	r0, r6
 800afe0:	4639      	mov	r1, r7
 800afe2:	f7f5 fdab 	bl	8000b3c <__aeabi_dcmpun>
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d0e2      	beq.n	800afb0 <pow+0x60>
 800afea:	f7fc fe15 	bl	8007c18 <__errno>
 800afee:	2321      	movs	r3, #33	@ 0x21
 800aff0:	6003      	str	r3, [r0, #0]
 800aff2:	ecbd 8b02 	vpop	{d8}
 800aff6:	ec47 6b10 	vmov	d0, r6, r7
 800affa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800affc:	2200      	movs	r2, #0
 800affe:	2300      	movs	r3, #0
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	f7f5 fd68 	bl	8000ad8 <__aeabi_dcmpeq>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d0f2      	beq.n	800aff2 <pow+0xa2>
 800b00c:	eeb0 0a48 	vmov.f32	s0, s16
 800b010:	eef0 0a68 	vmov.f32	s1, s17
 800b014:	f000 f8b6 	bl	800b184 <finite>
 800b018:	2800      	cmp	r0, #0
 800b01a:	d0ea      	beq.n	800aff2 <pow+0xa2>
 800b01c:	ec45 4b10 	vmov	d0, r4, r5
 800b020:	f000 f8b0 	bl	800b184 <finite>
 800b024:	e7c3      	b.n	800afae <pow+0x5e>
 800b026:	4f01      	ldr	r7, [pc, #4]	@ (800b02c <pow+0xdc>)
 800b028:	2600      	movs	r6, #0
 800b02a:	e7e2      	b.n	800aff2 <pow+0xa2>
 800b02c:	3ff00000 	.word	0x3ff00000

0800b030 <sqrt>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	ed2d 8b02 	vpush	{d8}
 800b036:	ec55 4b10 	vmov	r4, r5, d0
 800b03a:	f000 f8b9 	bl	800b1b0 <__ieee754_sqrt>
 800b03e:	4622      	mov	r2, r4
 800b040:	462b      	mov	r3, r5
 800b042:	4620      	mov	r0, r4
 800b044:	4629      	mov	r1, r5
 800b046:	eeb0 8a40 	vmov.f32	s16, s0
 800b04a:	eef0 8a60 	vmov.f32	s17, s1
 800b04e:	f7f5 fd75 	bl	8000b3c <__aeabi_dcmpun>
 800b052:	b990      	cbnz	r0, 800b07a <sqrt+0x4a>
 800b054:	2200      	movs	r2, #0
 800b056:	2300      	movs	r3, #0
 800b058:	4620      	mov	r0, r4
 800b05a:	4629      	mov	r1, r5
 800b05c:	f7f5 fd46 	bl	8000aec <__aeabi_dcmplt>
 800b060:	b158      	cbz	r0, 800b07a <sqrt+0x4a>
 800b062:	f7fc fdd9 	bl	8007c18 <__errno>
 800b066:	2321      	movs	r3, #33	@ 0x21
 800b068:	6003      	str	r3, [r0, #0]
 800b06a:	2200      	movs	r2, #0
 800b06c:	2300      	movs	r3, #0
 800b06e:	4610      	mov	r0, r2
 800b070:	4619      	mov	r1, r3
 800b072:	f7f5 fbf3 	bl	800085c <__aeabi_ddiv>
 800b076:	ec41 0b18 	vmov	d8, r0, r1
 800b07a:	eeb0 0a48 	vmov.f32	s0, s16
 800b07e:	eef0 0a68 	vmov.f32	s1, s17
 800b082:	ecbd 8b02 	vpop	{d8}
 800b086:	bd38      	pop	{r3, r4, r5, pc}

0800b088 <fabs>:
 800b088:	ec51 0b10 	vmov	r0, r1, d0
 800b08c:	4602      	mov	r2, r0
 800b08e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b092:	ec43 2b10 	vmov	d0, r2, r3
 800b096:	4770      	bx	lr

0800b098 <powf>:
 800b098:	b508      	push	{r3, lr}
 800b09a:	ed2d 8b04 	vpush	{d8-d9}
 800b09e:	eeb0 8a60 	vmov.f32	s16, s1
 800b0a2:	eeb0 9a40 	vmov.f32	s18, s0
 800b0a6:	f001 f903 	bl	800c2b0 <__ieee754_powf>
 800b0aa:	eeb4 8a48 	vcmp.f32	s16, s16
 800b0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b2:	eef0 8a40 	vmov.f32	s17, s0
 800b0b6:	d63e      	bvs.n	800b136 <powf+0x9e>
 800b0b8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c0:	d112      	bne.n	800b0e8 <powf+0x50>
 800b0c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ca:	d039      	beq.n	800b140 <powf+0xa8>
 800b0cc:	eeb0 0a48 	vmov.f32	s0, s16
 800b0d0:	f000 f863 	bl	800b19a <finitef>
 800b0d4:	b378      	cbz	r0, 800b136 <powf+0x9e>
 800b0d6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0de:	d52a      	bpl.n	800b136 <powf+0x9e>
 800b0e0:	f7fc fd9a 	bl	8007c18 <__errno>
 800b0e4:	2322      	movs	r3, #34	@ 0x22
 800b0e6:	e014      	b.n	800b112 <powf+0x7a>
 800b0e8:	f000 f857 	bl	800b19a <finitef>
 800b0ec:	b998      	cbnz	r0, 800b116 <powf+0x7e>
 800b0ee:	eeb0 0a49 	vmov.f32	s0, s18
 800b0f2:	f000 f852 	bl	800b19a <finitef>
 800b0f6:	b170      	cbz	r0, 800b116 <powf+0x7e>
 800b0f8:	eeb0 0a48 	vmov.f32	s0, s16
 800b0fc:	f000 f84d 	bl	800b19a <finitef>
 800b100:	b148      	cbz	r0, 800b116 <powf+0x7e>
 800b102:	eef4 8a68 	vcmp.f32	s17, s17
 800b106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b10a:	d7e9      	bvc.n	800b0e0 <powf+0x48>
 800b10c:	f7fc fd84 	bl	8007c18 <__errno>
 800b110:	2321      	movs	r3, #33	@ 0x21
 800b112:	6003      	str	r3, [r0, #0]
 800b114:	e00f      	b.n	800b136 <powf+0x9e>
 800b116:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11e:	d10a      	bne.n	800b136 <powf+0x9e>
 800b120:	eeb0 0a49 	vmov.f32	s0, s18
 800b124:	f000 f839 	bl	800b19a <finitef>
 800b128:	b128      	cbz	r0, 800b136 <powf+0x9e>
 800b12a:	eeb0 0a48 	vmov.f32	s0, s16
 800b12e:	f000 f834 	bl	800b19a <finitef>
 800b132:	2800      	cmp	r0, #0
 800b134:	d1d4      	bne.n	800b0e0 <powf+0x48>
 800b136:	eeb0 0a68 	vmov.f32	s0, s17
 800b13a:	ecbd 8b04 	vpop	{d8-d9}
 800b13e:	bd08      	pop	{r3, pc}
 800b140:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b144:	e7f7      	b.n	800b136 <powf+0x9e>
	...

0800b148 <sqrtf>:
 800b148:	b508      	push	{r3, lr}
 800b14a:	ed2d 8b02 	vpush	{d8}
 800b14e:	eeb0 8a40 	vmov.f32	s16, s0
 800b152:	f000 f907 	bl	800b364 <__ieee754_sqrtf>
 800b156:	eeb4 8a48 	vcmp.f32	s16, s16
 800b15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15e:	d60c      	bvs.n	800b17a <sqrtf+0x32>
 800b160:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b180 <sqrtf+0x38>
 800b164:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16c:	d505      	bpl.n	800b17a <sqrtf+0x32>
 800b16e:	f7fc fd53 	bl	8007c18 <__errno>
 800b172:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b176:	2321      	movs	r3, #33	@ 0x21
 800b178:	6003      	str	r3, [r0, #0]
 800b17a:	ecbd 8b02 	vpop	{d8}
 800b17e:	bd08      	pop	{r3, pc}
 800b180:	00000000 	.word	0x00000000

0800b184 <finite>:
 800b184:	b082      	sub	sp, #8
 800b186:	ed8d 0b00 	vstr	d0, [sp]
 800b18a:	9801      	ldr	r0, [sp, #4]
 800b18c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b190:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b194:	0fc0      	lsrs	r0, r0, #31
 800b196:	b002      	add	sp, #8
 800b198:	4770      	bx	lr

0800b19a <finitef>:
 800b19a:	ee10 3a10 	vmov	r3, s0
 800b19e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b1a2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b1a6:	bfac      	ite	ge
 800b1a8:	2000      	movge	r0, #0
 800b1aa:	2001      	movlt	r0, #1
 800b1ac:	4770      	bx	lr
	...

0800b1b0 <__ieee754_sqrt>:
 800b1b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	4a68      	ldr	r2, [pc, #416]	@ (800b358 <__ieee754_sqrt+0x1a8>)
 800b1b6:	ec55 4b10 	vmov	r4, r5, d0
 800b1ba:	43aa      	bics	r2, r5
 800b1bc:	462b      	mov	r3, r5
 800b1be:	4621      	mov	r1, r4
 800b1c0:	d110      	bne.n	800b1e4 <__ieee754_sqrt+0x34>
 800b1c2:	4622      	mov	r2, r4
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 fa1e 	bl	8000608 <__aeabi_dmul>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	f7f5 f862 	bl	800029c <__adddf3>
 800b1d8:	4604      	mov	r4, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	ec45 4b10 	vmov	d0, r4, r5
 800b1e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	2d00      	cmp	r5, #0
 800b1e6:	dc0e      	bgt.n	800b206 <__ieee754_sqrt+0x56>
 800b1e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b1ec:	4322      	orrs	r2, r4
 800b1ee:	d0f5      	beq.n	800b1dc <__ieee754_sqrt+0x2c>
 800b1f0:	b19d      	cbz	r5, 800b21a <__ieee754_sqrt+0x6a>
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 f84e 	bl	8000298 <__aeabi_dsub>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	460b      	mov	r3, r1
 800b200:	f7f5 fb2c 	bl	800085c <__aeabi_ddiv>
 800b204:	e7e8      	b.n	800b1d8 <__ieee754_sqrt+0x28>
 800b206:	152a      	asrs	r2, r5, #20
 800b208:	d115      	bne.n	800b236 <__ieee754_sqrt+0x86>
 800b20a:	2000      	movs	r0, #0
 800b20c:	e009      	b.n	800b222 <__ieee754_sqrt+0x72>
 800b20e:	0acb      	lsrs	r3, r1, #11
 800b210:	3a15      	subs	r2, #21
 800b212:	0549      	lsls	r1, r1, #21
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0fa      	beq.n	800b20e <__ieee754_sqrt+0x5e>
 800b218:	e7f7      	b.n	800b20a <__ieee754_sqrt+0x5a>
 800b21a:	462a      	mov	r2, r5
 800b21c:	e7fa      	b.n	800b214 <__ieee754_sqrt+0x64>
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	3001      	adds	r0, #1
 800b222:	02dc      	lsls	r4, r3, #11
 800b224:	d5fb      	bpl.n	800b21e <__ieee754_sqrt+0x6e>
 800b226:	1e44      	subs	r4, r0, #1
 800b228:	1b12      	subs	r2, r2, r4
 800b22a:	f1c0 0420 	rsb	r4, r0, #32
 800b22e:	fa21 f404 	lsr.w	r4, r1, r4
 800b232:	4323      	orrs	r3, r4
 800b234:	4081      	lsls	r1, r0
 800b236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b23a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b23e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b242:	07d2      	lsls	r2, r2, #31
 800b244:	bf5c      	itt	pl
 800b246:	005b      	lslpl	r3, r3, #1
 800b248:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b24c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b250:	bf58      	it	pl
 800b252:	0049      	lslpl	r1, r1, #1
 800b254:	2600      	movs	r6, #0
 800b256:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b25a:	106d      	asrs	r5, r5, #1
 800b25c:	0049      	lsls	r1, r1, #1
 800b25e:	2016      	movs	r0, #22
 800b260:	4632      	mov	r2, r6
 800b262:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b266:	1917      	adds	r7, r2, r4
 800b268:	429f      	cmp	r7, r3
 800b26a:	bfde      	ittt	le
 800b26c:	193a      	addle	r2, r7, r4
 800b26e:	1bdb      	suble	r3, r3, r7
 800b270:	1936      	addle	r6, r6, r4
 800b272:	0fcf      	lsrs	r7, r1, #31
 800b274:	3801      	subs	r0, #1
 800b276:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b27a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b27e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b282:	d1f0      	bne.n	800b266 <__ieee754_sqrt+0xb6>
 800b284:	4604      	mov	r4, r0
 800b286:	2720      	movs	r7, #32
 800b288:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b28c:	429a      	cmp	r2, r3
 800b28e:	eb00 0e0c 	add.w	lr, r0, ip
 800b292:	db02      	blt.n	800b29a <__ieee754_sqrt+0xea>
 800b294:	d113      	bne.n	800b2be <__ieee754_sqrt+0x10e>
 800b296:	458e      	cmp	lr, r1
 800b298:	d811      	bhi.n	800b2be <__ieee754_sqrt+0x10e>
 800b29a:	f1be 0f00 	cmp.w	lr, #0
 800b29e:	eb0e 000c 	add.w	r0, lr, ip
 800b2a2:	da42      	bge.n	800b32a <__ieee754_sqrt+0x17a>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	db40      	blt.n	800b32a <__ieee754_sqrt+0x17a>
 800b2a8:	f102 0801 	add.w	r8, r2, #1
 800b2ac:	1a9b      	subs	r3, r3, r2
 800b2ae:	458e      	cmp	lr, r1
 800b2b0:	bf88      	it	hi
 800b2b2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b2b6:	eba1 010e 	sub.w	r1, r1, lr
 800b2ba:	4464      	add	r4, ip
 800b2bc:	4642      	mov	r2, r8
 800b2be:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b2c2:	3f01      	subs	r7, #1
 800b2c4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b2c8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b2cc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b2d0:	d1dc      	bne.n	800b28c <__ieee754_sqrt+0xdc>
 800b2d2:	4319      	orrs	r1, r3
 800b2d4:	d01b      	beq.n	800b30e <__ieee754_sqrt+0x15e>
 800b2d6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b35c <__ieee754_sqrt+0x1ac>
 800b2da:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b360 <__ieee754_sqrt+0x1b0>
 800b2de:	e9da 0100 	ldrd	r0, r1, [sl]
 800b2e2:	e9db 2300 	ldrd	r2, r3, [fp]
 800b2e6:	f7f4 ffd7 	bl	8000298 <__aeabi_dsub>
 800b2ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	f7f5 fc03 	bl	8000b00 <__aeabi_dcmple>
 800b2fa:	b140      	cbz	r0, 800b30e <__ieee754_sqrt+0x15e>
 800b2fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b300:	e9da 0100 	ldrd	r0, r1, [sl]
 800b304:	e9db 2300 	ldrd	r2, r3, [fp]
 800b308:	d111      	bne.n	800b32e <__ieee754_sqrt+0x17e>
 800b30a:	3601      	adds	r6, #1
 800b30c:	463c      	mov	r4, r7
 800b30e:	1072      	asrs	r2, r6, #1
 800b310:	0863      	lsrs	r3, r4, #1
 800b312:	07f1      	lsls	r1, r6, #31
 800b314:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b318:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b31c:	bf48      	it	mi
 800b31e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b322:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b326:	4618      	mov	r0, r3
 800b328:	e756      	b.n	800b1d8 <__ieee754_sqrt+0x28>
 800b32a:	4690      	mov	r8, r2
 800b32c:	e7be      	b.n	800b2ac <__ieee754_sqrt+0xfc>
 800b32e:	f7f4 ffb5 	bl	800029c <__adddf3>
 800b332:	e9da 8900 	ldrd	r8, r9, [sl]
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4640      	mov	r0, r8
 800b33c:	4649      	mov	r1, r9
 800b33e:	f7f5 fbd5 	bl	8000aec <__aeabi_dcmplt>
 800b342:	b120      	cbz	r0, 800b34e <__ieee754_sqrt+0x19e>
 800b344:	1ca0      	adds	r0, r4, #2
 800b346:	bf08      	it	eq
 800b348:	3601      	addeq	r6, #1
 800b34a:	3402      	adds	r4, #2
 800b34c:	e7df      	b.n	800b30e <__ieee754_sqrt+0x15e>
 800b34e:	1c63      	adds	r3, r4, #1
 800b350:	f023 0401 	bic.w	r4, r3, #1
 800b354:	e7db      	b.n	800b30e <__ieee754_sqrt+0x15e>
 800b356:	bf00      	nop
 800b358:	7ff00000 	.word	0x7ff00000
 800b35c:	20000230 	.word	0x20000230
 800b360:	20000228 	.word	0x20000228

0800b364 <__ieee754_sqrtf>:
 800b364:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b368:	4770      	bx	lr
 800b36a:	0000      	movs	r0, r0
 800b36c:	0000      	movs	r0, r0
	...

0800b370 <__ieee754_acos>:
 800b370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b374:	ec55 4b10 	vmov	r4, r5, d0
 800b378:	49b7      	ldr	r1, [pc, #732]	@ (800b658 <__ieee754_acos+0x2e8>)
 800b37a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b37e:	428b      	cmp	r3, r1
 800b380:	d919      	bls.n	800b3b6 <__ieee754_acos+0x46>
 800b382:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800b386:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b38a:	4323      	orrs	r3, r4
 800b38c:	d106      	bne.n	800b39c <__ieee754_acos+0x2c>
 800b38e:	2d00      	cmp	r5, #0
 800b390:	f340 8210 	ble.w	800b7b4 <__ieee754_acos+0x444>
 800b394:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800b5e8 <__ieee754_acos+0x278>
 800b398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39c:	4622      	mov	r2, r4
 800b39e:	462b      	mov	r3, r5
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	f7f4 ff78 	bl	8000298 <__aeabi_dsub>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	f7f5 fa56 	bl	800085c <__aeabi_ddiv>
 800b3b0:	ec41 0b10 	vmov	d0, r0, r1
 800b3b4:	e7f0      	b.n	800b398 <__ieee754_acos+0x28>
 800b3b6:	49a9      	ldr	r1, [pc, #676]	@ (800b65c <__ieee754_acos+0x2ec>)
 800b3b8:	428b      	cmp	r3, r1
 800b3ba:	f200 8085 	bhi.w	800b4c8 <__ieee754_acos+0x158>
 800b3be:	4aa8      	ldr	r2, [pc, #672]	@ (800b660 <__ieee754_acos+0x2f0>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	f240 81fa 	bls.w	800b7ba <__ieee754_acos+0x44a>
 800b3c6:	4622      	mov	r2, r4
 800b3c8:	462b      	mov	r3, r5
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	f7f5 f91b 	bl	8000608 <__aeabi_dmul>
 800b3d2:	a387      	add	r3, pc, #540	@ (adr r3, 800b5f0 <__ieee754_acos+0x280>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	4606      	mov	r6, r0
 800b3da:	460f      	mov	r7, r1
 800b3dc:	f7f5 f914 	bl	8000608 <__aeabi_dmul>
 800b3e0:	a385      	add	r3, pc, #532	@ (adr r3, 800b5f8 <__ieee754_acos+0x288>)
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f7f4 ff59 	bl	800029c <__adddf3>
 800b3ea:	4632      	mov	r2, r6
 800b3ec:	463b      	mov	r3, r7
 800b3ee:	f7f5 f90b 	bl	8000608 <__aeabi_dmul>
 800b3f2:	a383      	add	r3, pc, #524	@ (adr r3, 800b600 <__ieee754_acos+0x290>)
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	f7f4 ff4e 	bl	8000298 <__aeabi_dsub>
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	463b      	mov	r3, r7
 800b400:	f7f5 f902 	bl	8000608 <__aeabi_dmul>
 800b404:	a380      	add	r3, pc, #512	@ (adr r3, 800b608 <__ieee754_acos+0x298>)
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f7f4 ff47 	bl	800029c <__adddf3>
 800b40e:	4632      	mov	r2, r6
 800b410:	463b      	mov	r3, r7
 800b412:	f7f5 f8f9 	bl	8000608 <__aeabi_dmul>
 800b416:	a37e      	add	r3, pc, #504	@ (adr r3, 800b610 <__ieee754_acos+0x2a0>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	f7f4 ff3c 	bl	8000298 <__aeabi_dsub>
 800b420:	4632      	mov	r2, r6
 800b422:	463b      	mov	r3, r7
 800b424:	f7f5 f8f0 	bl	8000608 <__aeabi_dmul>
 800b428:	a37b      	add	r3, pc, #492	@ (adr r3, 800b618 <__ieee754_acos+0x2a8>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f4 ff35 	bl	800029c <__adddf3>
 800b432:	4632      	mov	r2, r6
 800b434:	463b      	mov	r3, r7
 800b436:	f7f5 f8e7 	bl	8000608 <__aeabi_dmul>
 800b43a:	a379      	add	r3, pc, #484	@ (adr r3, 800b620 <__ieee754_acos+0x2b0>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	4680      	mov	r8, r0
 800b442:	4689      	mov	r9, r1
 800b444:	4630      	mov	r0, r6
 800b446:	4639      	mov	r1, r7
 800b448:	f7f5 f8de 	bl	8000608 <__aeabi_dmul>
 800b44c:	a376      	add	r3, pc, #472	@ (adr r3, 800b628 <__ieee754_acos+0x2b8>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f4 ff21 	bl	8000298 <__aeabi_dsub>
 800b456:	4632      	mov	r2, r6
 800b458:	463b      	mov	r3, r7
 800b45a:	f7f5 f8d5 	bl	8000608 <__aeabi_dmul>
 800b45e:	a374      	add	r3, pc, #464	@ (adr r3, 800b630 <__ieee754_acos+0x2c0>)
 800b460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b464:	f7f4 ff1a 	bl	800029c <__adddf3>
 800b468:	4632      	mov	r2, r6
 800b46a:	463b      	mov	r3, r7
 800b46c:	f7f5 f8cc 	bl	8000608 <__aeabi_dmul>
 800b470:	a371      	add	r3, pc, #452	@ (adr r3, 800b638 <__ieee754_acos+0x2c8>)
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	f7f4 ff0f 	bl	8000298 <__aeabi_dsub>
 800b47a:	4632      	mov	r2, r6
 800b47c:	463b      	mov	r3, r7
 800b47e:	f7f5 f8c3 	bl	8000608 <__aeabi_dmul>
 800b482:	4b78      	ldr	r3, [pc, #480]	@ (800b664 <__ieee754_acos+0x2f4>)
 800b484:	2200      	movs	r2, #0
 800b486:	f7f4 ff09 	bl	800029c <__adddf3>
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	4640      	mov	r0, r8
 800b490:	4649      	mov	r1, r9
 800b492:	f7f5 f9e3 	bl	800085c <__aeabi_ddiv>
 800b496:	4622      	mov	r2, r4
 800b498:	462b      	mov	r3, r5
 800b49a:	f7f5 f8b5 	bl	8000608 <__aeabi_dmul>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	a167      	add	r1, pc, #412	@ (adr r1, 800b640 <__ieee754_acos+0x2d0>)
 800b4a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4a8:	f7f4 fef6 	bl	8000298 <__aeabi_dsub>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f4 fef0 	bl	8000298 <__aeabi_dsub>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	a162      	add	r1, pc, #392	@ (adr r1, 800b648 <__ieee754_acos+0x2d8>)
 800b4be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c2:	f7f4 fee9 	bl	8000298 <__aeabi_dsub>
 800b4c6:	e773      	b.n	800b3b0 <__ieee754_acos+0x40>
 800b4c8:	2d00      	cmp	r5, #0
 800b4ca:	f280 80cf 	bge.w	800b66c <__ieee754_acos+0x2fc>
 800b4ce:	4b65      	ldr	r3, [pc, #404]	@ (800b664 <__ieee754_acos+0x2f4>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f7f4 fee1 	bl	800029c <__adddf3>
 800b4da:	4b63      	ldr	r3, [pc, #396]	@ (800b668 <__ieee754_acos+0x2f8>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f7f5 f893 	bl	8000608 <__aeabi_dmul>
 800b4e2:	a343      	add	r3, pc, #268	@ (adr r3, 800b5f0 <__ieee754_acos+0x280>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	460d      	mov	r5, r1
 800b4ec:	f7f5 f88c 	bl	8000608 <__aeabi_dmul>
 800b4f0:	a341      	add	r3, pc, #260	@ (adr r3, 800b5f8 <__ieee754_acos+0x288>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f7f4 fed1 	bl	800029c <__adddf3>
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	f7f5 f883 	bl	8000608 <__aeabi_dmul>
 800b502:	a33f      	add	r3, pc, #252	@ (adr r3, 800b600 <__ieee754_acos+0x290>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f4 fec6 	bl	8000298 <__aeabi_dsub>
 800b50c:	4622      	mov	r2, r4
 800b50e:	462b      	mov	r3, r5
 800b510:	f7f5 f87a 	bl	8000608 <__aeabi_dmul>
 800b514:	a33c      	add	r3, pc, #240	@ (adr r3, 800b608 <__ieee754_acos+0x298>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 febf 	bl	800029c <__adddf3>
 800b51e:	4622      	mov	r2, r4
 800b520:	462b      	mov	r3, r5
 800b522:	f7f5 f871 	bl	8000608 <__aeabi_dmul>
 800b526:	a33a      	add	r3, pc, #232	@ (adr r3, 800b610 <__ieee754_acos+0x2a0>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f4 feb4 	bl	8000298 <__aeabi_dsub>
 800b530:	4622      	mov	r2, r4
 800b532:	462b      	mov	r3, r5
 800b534:	f7f5 f868 	bl	8000608 <__aeabi_dmul>
 800b538:	a337      	add	r3, pc, #220	@ (adr r3, 800b618 <__ieee754_acos+0x2a8>)
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f7f4 fead 	bl	800029c <__adddf3>
 800b542:	4622      	mov	r2, r4
 800b544:	462b      	mov	r3, r5
 800b546:	f7f5 f85f 	bl	8000608 <__aeabi_dmul>
 800b54a:	a335      	add	r3, pc, #212	@ (adr r3, 800b620 <__ieee754_acos+0x2b0>)
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	4606      	mov	r6, r0
 800b552:	460f      	mov	r7, r1
 800b554:	4620      	mov	r0, r4
 800b556:	4629      	mov	r1, r5
 800b558:	f7f5 f856 	bl	8000608 <__aeabi_dmul>
 800b55c:	a332      	add	r3, pc, #200	@ (adr r3, 800b628 <__ieee754_acos+0x2b8>)
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f7f4 fe99 	bl	8000298 <__aeabi_dsub>
 800b566:	4622      	mov	r2, r4
 800b568:	462b      	mov	r3, r5
 800b56a:	f7f5 f84d 	bl	8000608 <__aeabi_dmul>
 800b56e:	a330      	add	r3, pc, #192	@ (adr r3, 800b630 <__ieee754_acos+0x2c0>)
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	f7f4 fe92 	bl	800029c <__adddf3>
 800b578:	4622      	mov	r2, r4
 800b57a:	462b      	mov	r3, r5
 800b57c:	f7f5 f844 	bl	8000608 <__aeabi_dmul>
 800b580:	a32d      	add	r3, pc, #180	@ (adr r3, 800b638 <__ieee754_acos+0x2c8>)
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f7f4 fe87 	bl	8000298 <__aeabi_dsub>
 800b58a:	4622      	mov	r2, r4
 800b58c:	462b      	mov	r3, r5
 800b58e:	f7f5 f83b 	bl	8000608 <__aeabi_dmul>
 800b592:	4b34      	ldr	r3, [pc, #208]	@ (800b664 <__ieee754_acos+0x2f4>)
 800b594:	2200      	movs	r2, #0
 800b596:	f7f4 fe81 	bl	800029c <__adddf3>
 800b59a:	ec45 4b10 	vmov	d0, r4, r5
 800b59e:	4680      	mov	r8, r0
 800b5a0:	4689      	mov	r9, r1
 800b5a2:	f7ff fe05 	bl	800b1b0 <__ieee754_sqrt>
 800b5a6:	ec55 4b10 	vmov	r4, r5, d0
 800b5aa:	4642      	mov	r2, r8
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	f7f5 f953 	bl	800085c <__aeabi_ddiv>
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	462b      	mov	r3, r5
 800b5ba:	f7f5 f825 	bl	8000608 <__aeabi_dmul>
 800b5be:	a320      	add	r3, pc, #128	@ (adr r3, 800b640 <__ieee754_acos+0x2d0>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f4 fe68 	bl	8000298 <__aeabi_dsub>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	f7f4 fe66 	bl	800029c <__adddf3>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	f7f4 fe62 	bl	800029c <__adddf3>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	a11c      	add	r1, pc, #112	@ (adr r1, 800b650 <__ieee754_acos+0x2e0>)
 800b5de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5e2:	e76e      	b.n	800b4c2 <__ieee754_acos+0x152>
 800b5e4:	f3af 8000 	nop.w
	...
 800b5f0:	0dfdf709 	.word	0x0dfdf709
 800b5f4:	3f023de1 	.word	0x3f023de1
 800b5f8:	7501b288 	.word	0x7501b288
 800b5fc:	3f49efe0 	.word	0x3f49efe0
 800b600:	b5688f3b 	.word	0xb5688f3b
 800b604:	3fa48228 	.word	0x3fa48228
 800b608:	0e884455 	.word	0x0e884455
 800b60c:	3fc9c155 	.word	0x3fc9c155
 800b610:	03eb6f7d 	.word	0x03eb6f7d
 800b614:	3fd4d612 	.word	0x3fd4d612
 800b618:	55555555 	.word	0x55555555
 800b61c:	3fc55555 	.word	0x3fc55555
 800b620:	b12e9282 	.word	0xb12e9282
 800b624:	3fb3b8c5 	.word	0x3fb3b8c5
 800b628:	1b8d0159 	.word	0x1b8d0159
 800b62c:	3fe6066c 	.word	0x3fe6066c
 800b630:	9c598ac8 	.word	0x9c598ac8
 800b634:	40002ae5 	.word	0x40002ae5
 800b638:	1c8a2d4b 	.word	0x1c8a2d4b
 800b63c:	40033a27 	.word	0x40033a27
 800b640:	33145c07 	.word	0x33145c07
 800b644:	3c91a626 	.word	0x3c91a626
 800b648:	54442d18 	.word	0x54442d18
 800b64c:	3ff921fb 	.word	0x3ff921fb
 800b650:	54442d18 	.word	0x54442d18
 800b654:	400921fb 	.word	0x400921fb
 800b658:	3fefffff 	.word	0x3fefffff
 800b65c:	3fdfffff 	.word	0x3fdfffff
 800b660:	3c600000 	.word	0x3c600000
 800b664:	3ff00000 	.word	0x3ff00000
 800b668:	3fe00000 	.word	0x3fe00000
 800b66c:	4622      	mov	r2, r4
 800b66e:	462b      	mov	r3, r5
 800b670:	496b      	ldr	r1, [pc, #428]	@ (800b820 <__ieee754_acos+0x4b0>)
 800b672:	2000      	movs	r0, #0
 800b674:	f7f4 fe10 	bl	8000298 <__aeabi_dsub>
 800b678:	4b6a      	ldr	r3, [pc, #424]	@ (800b824 <__ieee754_acos+0x4b4>)
 800b67a:	2200      	movs	r2, #0
 800b67c:	f7f4 ffc4 	bl	8000608 <__aeabi_dmul>
 800b680:	4604      	mov	r4, r0
 800b682:	460d      	mov	r5, r1
 800b684:	ec45 4b10 	vmov	d0, r4, r5
 800b688:	f7ff fd92 	bl	800b1b0 <__ieee754_sqrt>
 800b68c:	a34c      	add	r3, pc, #304	@ (adr r3, 800b7c0 <__ieee754_acos+0x450>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	ec59 8b10 	vmov	r8, r9, d0
 800b69a:	f7f4 ffb5 	bl	8000608 <__aeabi_dmul>
 800b69e:	a34a      	add	r3, pc, #296	@ (adr r3, 800b7c8 <__ieee754_acos+0x458>)
 800b6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a4:	f7f4 fdfa 	bl	800029c <__adddf3>
 800b6a8:	4622      	mov	r2, r4
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	f7f4 ffac 	bl	8000608 <__aeabi_dmul>
 800b6b0:	a347      	add	r3, pc, #284	@ (adr r3, 800b7d0 <__ieee754_acos+0x460>)
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	f7f4 fdef 	bl	8000298 <__aeabi_dsub>
 800b6ba:	4622      	mov	r2, r4
 800b6bc:	462b      	mov	r3, r5
 800b6be:	f7f4 ffa3 	bl	8000608 <__aeabi_dmul>
 800b6c2:	a345      	add	r3, pc, #276	@ (adr r3, 800b7d8 <__ieee754_acos+0x468>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	f7f4 fde8 	bl	800029c <__adddf3>
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	f7f4 ff9a 	bl	8000608 <__aeabi_dmul>
 800b6d4:	a342      	add	r3, pc, #264	@ (adr r3, 800b7e0 <__ieee754_acos+0x470>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f7f4 fddd 	bl	8000298 <__aeabi_dsub>
 800b6de:	4622      	mov	r2, r4
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	f7f4 ff91 	bl	8000608 <__aeabi_dmul>
 800b6e6:	a340      	add	r3, pc, #256	@ (adr r3, 800b7e8 <__ieee754_acos+0x478>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f4 fdd6 	bl	800029c <__adddf3>
 800b6f0:	4622      	mov	r2, r4
 800b6f2:	462b      	mov	r3, r5
 800b6f4:	f7f4 ff88 	bl	8000608 <__aeabi_dmul>
 800b6f8:	a33d      	add	r3, pc, #244	@ (adr r3, 800b7f0 <__ieee754_acos+0x480>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	4682      	mov	sl, r0
 800b700:	468b      	mov	fp, r1
 800b702:	4620      	mov	r0, r4
 800b704:	4629      	mov	r1, r5
 800b706:	f7f4 ff7f 	bl	8000608 <__aeabi_dmul>
 800b70a:	a33b      	add	r3, pc, #236	@ (adr r3, 800b7f8 <__ieee754_acos+0x488>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f7f4 fdc2 	bl	8000298 <__aeabi_dsub>
 800b714:	4622      	mov	r2, r4
 800b716:	462b      	mov	r3, r5
 800b718:	f7f4 ff76 	bl	8000608 <__aeabi_dmul>
 800b71c:	a338      	add	r3, pc, #224	@ (adr r3, 800b800 <__ieee754_acos+0x490>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f7f4 fdbb 	bl	800029c <__adddf3>
 800b726:	4622      	mov	r2, r4
 800b728:	462b      	mov	r3, r5
 800b72a:	f7f4 ff6d 	bl	8000608 <__aeabi_dmul>
 800b72e:	a336      	add	r3, pc, #216	@ (adr r3, 800b808 <__ieee754_acos+0x498>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f7f4 fdb0 	bl	8000298 <__aeabi_dsub>
 800b738:	4622      	mov	r2, r4
 800b73a:	462b      	mov	r3, r5
 800b73c:	f7f4 ff64 	bl	8000608 <__aeabi_dmul>
 800b740:	4b37      	ldr	r3, [pc, #220]	@ (800b820 <__ieee754_acos+0x4b0>)
 800b742:	2200      	movs	r2, #0
 800b744:	f7f4 fdaa 	bl	800029c <__adddf3>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	4650      	mov	r0, sl
 800b74e:	4659      	mov	r1, fp
 800b750:	f7f5 f884 	bl	800085c <__aeabi_ddiv>
 800b754:	4642      	mov	r2, r8
 800b756:	464b      	mov	r3, r9
 800b758:	f7f4 ff56 	bl	8000608 <__aeabi_dmul>
 800b75c:	2600      	movs	r6, #0
 800b75e:	4682      	mov	sl, r0
 800b760:	468b      	mov	fp, r1
 800b762:	4632      	mov	r2, r6
 800b764:	464b      	mov	r3, r9
 800b766:	4630      	mov	r0, r6
 800b768:	4649      	mov	r1, r9
 800b76a:	f7f4 ff4d 	bl	8000608 <__aeabi_dmul>
 800b76e:	4602      	mov	r2, r0
 800b770:	460b      	mov	r3, r1
 800b772:	4620      	mov	r0, r4
 800b774:	4629      	mov	r1, r5
 800b776:	f7f4 fd8f 	bl	8000298 <__aeabi_dsub>
 800b77a:	4632      	mov	r2, r6
 800b77c:	4604      	mov	r4, r0
 800b77e:	460d      	mov	r5, r1
 800b780:	464b      	mov	r3, r9
 800b782:	4640      	mov	r0, r8
 800b784:	4649      	mov	r1, r9
 800b786:	f7f4 fd89 	bl	800029c <__adddf3>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4620      	mov	r0, r4
 800b790:	4629      	mov	r1, r5
 800b792:	f7f5 f863 	bl	800085c <__aeabi_ddiv>
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	4650      	mov	r0, sl
 800b79c:	4659      	mov	r1, fp
 800b79e:	f7f4 fd7d 	bl	800029c <__adddf3>
 800b7a2:	4632      	mov	r2, r6
 800b7a4:	464b      	mov	r3, r9
 800b7a6:	f7f4 fd79 	bl	800029c <__adddf3>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	f7f4 fd75 	bl	800029c <__adddf3>
 800b7b2:	e5fd      	b.n	800b3b0 <__ieee754_acos+0x40>
 800b7b4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b810 <__ieee754_acos+0x4a0>
 800b7b8:	e5ee      	b.n	800b398 <__ieee754_acos+0x28>
 800b7ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b818 <__ieee754_acos+0x4a8>
 800b7be:	e5eb      	b.n	800b398 <__ieee754_acos+0x28>
 800b7c0:	0dfdf709 	.word	0x0dfdf709
 800b7c4:	3f023de1 	.word	0x3f023de1
 800b7c8:	7501b288 	.word	0x7501b288
 800b7cc:	3f49efe0 	.word	0x3f49efe0
 800b7d0:	b5688f3b 	.word	0xb5688f3b
 800b7d4:	3fa48228 	.word	0x3fa48228
 800b7d8:	0e884455 	.word	0x0e884455
 800b7dc:	3fc9c155 	.word	0x3fc9c155
 800b7e0:	03eb6f7d 	.word	0x03eb6f7d
 800b7e4:	3fd4d612 	.word	0x3fd4d612
 800b7e8:	55555555 	.word	0x55555555
 800b7ec:	3fc55555 	.word	0x3fc55555
 800b7f0:	b12e9282 	.word	0xb12e9282
 800b7f4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b7f8:	1b8d0159 	.word	0x1b8d0159
 800b7fc:	3fe6066c 	.word	0x3fe6066c
 800b800:	9c598ac8 	.word	0x9c598ac8
 800b804:	40002ae5 	.word	0x40002ae5
 800b808:	1c8a2d4b 	.word	0x1c8a2d4b
 800b80c:	40033a27 	.word	0x40033a27
 800b810:	54442d18 	.word	0x54442d18
 800b814:	400921fb 	.word	0x400921fb
 800b818:	54442d18 	.word	0x54442d18
 800b81c:	3ff921fb 	.word	0x3ff921fb
 800b820:	3ff00000 	.word	0x3ff00000
 800b824:	3fe00000 	.word	0x3fe00000

0800b828 <__ieee754_pow>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	b091      	sub	sp, #68	@ 0x44
 800b82e:	ed8d 1b00 	vstr	d1, [sp]
 800b832:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b836:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b83a:	ea5a 0001 	orrs.w	r0, sl, r1
 800b83e:	ec57 6b10 	vmov	r6, r7, d0
 800b842:	d113      	bne.n	800b86c <__ieee754_pow+0x44>
 800b844:	19b3      	adds	r3, r6, r6
 800b846:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b84a:	4152      	adcs	r2, r2
 800b84c:	4298      	cmp	r0, r3
 800b84e:	4b98      	ldr	r3, [pc, #608]	@ (800bab0 <__ieee754_pow+0x288>)
 800b850:	4193      	sbcs	r3, r2
 800b852:	f080 84ea 	bcs.w	800c22a <__ieee754_pow+0xa02>
 800b856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b85a:	4630      	mov	r0, r6
 800b85c:	4639      	mov	r1, r7
 800b85e:	f7f4 fd1d 	bl	800029c <__adddf3>
 800b862:	ec41 0b10 	vmov	d0, r0, r1
 800b866:	b011      	add	sp, #68	@ 0x44
 800b868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86c:	4a91      	ldr	r2, [pc, #580]	@ (800bab4 <__ieee754_pow+0x28c>)
 800b86e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b872:	4590      	cmp	r8, r2
 800b874:	463d      	mov	r5, r7
 800b876:	4633      	mov	r3, r6
 800b878:	d806      	bhi.n	800b888 <__ieee754_pow+0x60>
 800b87a:	d101      	bne.n	800b880 <__ieee754_pow+0x58>
 800b87c:	2e00      	cmp	r6, #0
 800b87e:	d1ea      	bne.n	800b856 <__ieee754_pow+0x2e>
 800b880:	4592      	cmp	sl, r2
 800b882:	d801      	bhi.n	800b888 <__ieee754_pow+0x60>
 800b884:	d10e      	bne.n	800b8a4 <__ieee754_pow+0x7c>
 800b886:	b169      	cbz	r1, 800b8a4 <__ieee754_pow+0x7c>
 800b888:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b88c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b890:	431d      	orrs	r5, r3
 800b892:	d1e0      	bne.n	800b856 <__ieee754_pow+0x2e>
 800b894:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b898:	18db      	adds	r3, r3, r3
 800b89a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b89e:	4152      	adcs	r2, r2
 800b8a0:	429d      	cmp	r5, r3
 800b8a2:	e7d4      	b.n	800b84e <__ieee754_pow+0x26>
 800b8a4:	2d00      	cmp	r5, #0
 800b8a6:	46c3      	mov	fp, r8
 800b8a8:	da3a      	bge.n	800b920 <__ieee754_pow+0xf8>
 800b8aa:	4a83      	ldr	r2, [pc, #524]	@ (800bab8 <__ieee754_pow+0x290>)
 800b8ac:	4592      	cmp	sl, r2
 800b8ae:	d84d      	bhi.n	800b94c <__ieee754_pow+0x124>
 800b8b0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b8b4:	4592      	cmp	sl, r2
 800b8b6:	f240 84c7 	bls.w	800c248 <__ieee754_pow+0xa20>
 800b8ba:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b8be:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b8c2:	2a14      	cmp	r2, #20
 800b8c4:	dd0f      	ble.n	800b8e6 <__ieee754_pow+0xbe>
 800b8c6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b8ca:	fa21 f402 	lsr.w	r4, r1, r2
 800b8ce:	fa04 f202 	lsl.w	r2, r4, r2
 800b8d2:	428a      	cmp	r2, r1
 800b8d4:	f040 84b8 	bne.w	800c248 <__ieee754_pow+0xa20>
 800b8d8:	f004 0401 	and.w	r4, r4, #1
 800b8dc:	f1c4 0402 	rsb	r4, r4, #2
 800b8e0:	2900      	cmp	r1, #0
 800b8e2:	d158      	bne.n	800b996 <__ieee754_pow+0x16e>
 800b8e4:	e00e      	b.n	800b904 <__ieee754_pow+0xdc>
 800b8e6:	2900      	cmp	r1, #0
 800b8e8:	d154      	bne.n	800b994 <__ieee754_pow+0x16c>
 800b8ea:	f1c2 0214 	rsb	r2, r2, #20
 800b8ee:	fa4a f402 	asr.w	r4, sl, r2
 800b8f2:	fa04 f202 	lsl.w	r2, r4, r2
 800b8f6:	4552      	cmp	r2, sl
 800b8f8:	f040 84a3 	bne.w	800c242 <__ieee754_pow+0xa1a>
 800b8fc:	f004 0401 	and.w	r4, r4, #1
 800b900:	f1c4 0402 	rsb	r4, r4, #2
 800b904:	4a6d      	ldr	r2, [pc, #436]	@ (800babc <__ieee754_pow+0x294>)
 800b906:	4592      	cmp	sl, r2
 800b908:	d12e      	bne.n	800b968 <__ieee754_pow+0x140>
 800b90a:	f1b9 0f00 	cmp.w	r9, #0
 800b90e:	f280 8494 	bge.w	800c23a <__ieee754_pow+0xa12>
 800b912:	496a      	ldr	r1, [pc, #424]	@ (800babc <__ieee754_pow+0x294>)
 800b914:	4632      	mov	r2, r6
 800b916:	463b      	mov	r3, r7
 800b918:	2000      	movs	r0, #0
 800b91a:	f7f4 ff9f 	bl	800085c <__aeabi_ddiv>
 800b91e:	e7a0      	b.n	800b862 <__ieee754_pow+0x3a>
 800b920:	2400      	movs	r4, #0
 800b922:	bbc1      	cbnz	r1, 800b996 <__ieee754_pow+0x16e>
 800b924:	4a63      	ldr	r2, [pc, #396]	@ (800bab4 <__ieee754_pow+0x28c>)
 800b926:	4592      	cmp	sl, r2
 800b928:	d1ec      	bne.n	800b904 <__ieee754_pow+0xdc>
 800b92a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b92e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b932:	431a      	orrs	r2, r3
 800b934:	f000 8479 	beq.w	800c22a <__ieee754_pow+0xa02>
 800b938:	4b61      	ldr	r3, [pc, #388]	@ (800bac0 <__ieee754_pow+0x298>)
 800b93a:	4598      	cmp	r8, r3
 800b93c:	d908      	bls.n	800b950 <__ieee754_pow+0x128>
 800b93e:	f1b9 0f00 	cmp.w	r9, #0
 800b942:	f2c0 8476 	blt.w	800c232 <__ieee754_pow+0xa0a>
 800b946:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b94a:	e78a      	b.n	800b862 <__ieee754_pow+0x3a>
 800b94c:	2402      	movs	r4, #2
 800b94e:	e7e8      	b.n	800b922 <__ieee754_pow+0xfa>
 800b950:	f1b9 0f00 	cmp.w	r9, #0
 800b954:	f04f 0000 	mov.w	r0, #0
 800b958:	f04f 0100 	mov.w	r1, #0
 800b95c:	da81      	bge.n	800b862 <__ieee754_pow+0x3a>
 800b95e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b962:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b966:	e77c      	b.n	800b862 <__ieee754_pow+0x3a>
 800b968:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b96c:	d106      	bne.n	800b97c <__ieee754_pow+0x154>
 800b96e:	4632      	mov	r2, r6
 800b970:	463b      	mov	r3, r7
 800b972:	4630      	mov	r0, r6
 800b974:	4639      	mov	r1, r7
 800b976:	f7f4 fe47 	bl	8000608 <__aeabi_dmul>
 800b97a:	e772      	b.n	800b862 <__ieee754_pow+0x3a>
 800b97c:	4a51      	ldr	r2, [pc, #324]	@ (800bac4 <__ieee754_pow+0x29c>)
 800b97e:	4591      	cmp	r9, r2
 800b980:	d109      	bne.n	800b996 <__ieee754_pow+0x16e>
 800b982:	2d00      	cmp	r5, #0
 800b984:	db07      	blt.n	800b996 <__ieee754_pow+0x16e>
 800b986:	ec47 6b10 	vmov	d0, r6, r7
 800b98a:	b011      	add	sp, #68	@ 0x44
 800b98c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	f7ff bc0e 	b.w	800b1b0 <__ieee754_sqrt>
 800b994:	2400      	movs	r4, #0
 800b996:	ec47 6b10 	vmov	d0, r6, r7
 800b99a:	9302      	str	r3, [sp, #8]
 800b99c:	f7ff fb74 	bl	800b088 <fabs>
 800b9a0:	9b02      	ldr	r3, [sp, #8]
 800b9a2:	ec51 0b10 	vmov	r0, r1, d0
 800b9a6:	bb53      	cbnz	r3, 800b9fe <__ieee754_pow+0x1d6>
 800b9a8:	4b44      	ldr	r3, [pc, #272]	@ (800babc <__ieee754_pow+0x294>)
 800b9aa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d002      	beq.n	800b9b8 <__ieee754_pow+0x190>
 800b9b2:	f1b8 0f00 	cmp.w	r8, #0
 800b9b6:	d122      	bne.n	800b9fe <__ieee754_pow+0x1d6>
 800b9b8:	f1b9 0f00 	cmp.w	r9, #0
 800b9bc:	da05      	bge.n	800b9ca <__ieee754_pow+0x1a2>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	493d      	ldr	r1, [pc, #244]	@ (800babc <__ieee754_pow+0x294>)
 800b9c6:	f7f4 ff49 	bl	800085c <__aeabi_ddiv>
 800b9ca:	2d00      	cmp	r5, #0
 800b9cc:	f6bf af49 	bge.w	800b862 <__ieee754_pow+0x3a>
 800b9d0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b9d4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b9d8:	ea58 0804 	orrs.w	r8, r8, r4
 800b9dc:	d108      	bne.n	800b9f0 <__ieee754_pow+0x1c8>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f7f4 fc57 	bl	8000298 <__aeabi_dsub>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	e794      	b.n	800b91a <__ieee754_pow+0xf2>
 800b9f0:	2c01      	cmp	r4, #1
 800b9f2:	f47f af36 	bne.w	800b862 <__ieee754_pow+0x3a>
 800b9f6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	e731      	b.n	800b862 <__ieee754_pow+0x3a>
 800b9fe:	0feb      	lsrs	r3, r5, #31
 800ba00:	3b01      	subs	r3, #1
 800ba02:	ea53 0204 	orrs.w	r2, r3, r4
 800ba06:	d102      	bne.n	800ba0e <__ieee754_pow+0x1e6>
 800ba08:	4632      	mov	r2, r6
 800ba0a:	463b      	mov	r3, r7
 800ba0c:	e7e9      	b.n	800b9e2 <__ieee754_pow+0x1ba>
 800ba0e:	3c01      	subs	r4, #1
 800ba10:	431c      	orrs	r4, r3
 800ba12:	d016      	beq.n	800ba42 <__ieee754_pow+0x21a>
 800ba14:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800baa0 <__ieee754_pow+0x278>
 800ba18:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ba1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba20:	f240 8112 	bls.w	800bc48 <__ieee754_pow+0x420>
 800ba24:	4b28      	ldr	r3, [pc, #160]	@ (800bac8 <__ieee754_pow+0x2a0>)
 800ba26:	459a      	cmp	sl, r3
 800ba28:	4b25      	ldr	r3, [pc, #148]	@ (800bac0 <__ieee754_pow+0x298>)
 800ba2a:	d916      	bls.n	800ba5a <__ieee754_pow+0x232>
 800ba2c:	4598      	cmp	r8, r3
 800ba2e:	d80b      	bhi.n	800ba48 <__ieee754_pow+0x220>
 800ba30:	f1b9 0f00 	cmp.w	r9, #0
 800ba34:	da0b      	bge.n	800ba4e <__ieee754_pow+0x226>
 800ba36:	2000      	movs	r0, #0
 800ba38:	b011      	add	sp, #68	@ 0x44
 800ba3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3e:	f000 bfc3 	b.w	800c9c8 <__math_oflow>
 800ba42:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800baa8 <__ieee754_pow+0x280>
 800ba46:	e7e7      	b.n	800ba18 <__ieee754_pow+0x1f0>
 800ba48:	f1b9 0f00 	cmp.w	r9, #0
 800ba4c:	dcf3      	bgt.n	800ba36 <__ieee754_pow+0x20e>
 800ba4e:	2000      	movs	r0, #0
 800ba50:	b011      	add	sp, #68	@ 0x44
 800ba52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba56:	f000 bfaf 	b.w	800c9b8 <__math_uflow>
 800ba5a:	4598      	cmp	r8, r3
 800ba5c:	d20c      	bcs.n	800ba78 <__ieee754_pow+0x250>
 800ba5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba62:	2200      	movs	r2, #0
 800ba64:	2300      	movs	r3, #0
 800ba66:	f7f5 f841 	bl	8000aec <__aeabi_dcmplt>
 800ba6a:	3800      	subs	r0, #0
 800ba6c:	bf18      	it	ne
 800ba6e:	2001      	movne	r0, #1
 800ba70:	f1b9 0f00 	cmp.w	r9, #0
 800ba74:	daec      	bge.n	800ba50 <__ieee754_pow+0x228>
 800ba76:	e7df      	b.n	800ba38 <__ieee754_pow+0x210>
 800ba78:	4b10      	ldr	r3, [pc, #64]	@ (800babc <__ieee754_pow+0x294>)
 800ba7a:	4598      	cmp	r8, r3
 800ba7c:	f04f 0200 	mov.w	r2, #0
 800ba80:	d924      	bls.n	800bacc <__ieee754_pow+0x2a4>
 800ba82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba86:	2300      	movs	r3, #0
 800ba88:	f7f5 f830 	bl	8000aec <__aeabi_dcmplt>
 800ba8c:	3800      	subs	r0, #0
 800ba8e:	bf18      	it	ne
 800ba90:	2001      	movne	r0, #1
 800ba92:	f1b9 0f00 	cmp.w	r9, #0
 800ba96:	dccf      	bgt.n	800ba38 <__ieee754_pow+0x210>
 800ba98:	e7da      	b.n	800ba50 <__ieee754_pow+0x228>
 800ba9a:	bf00      	nop
 800ba9c:	f3af 8000 	nop.w
 800baa0:	00000000 	.word	0x00000000
 800baa4:	3ff00000 	.word	0x3ff00000
 800baa8:	00000000 	.word	0x00000000
 800baac:	bff00000 	.word	0xbff00000
 800bab0:	fff00000 	.word	0xfff00000
 800bab4:	7ff00000 	.word	0x7ff00000
 800bab8:	433fffff 	.word	0x433fffff
 800babc:	3ff00000 	.word	0x3ff00000
 800bac0:	3fefffff 	.word	0x3fefffff
 800bac4:	3fe00000 	.word	0x3fe00000
 800bac8:	43f00000 	.word	0x43f00000
 800bacc:	4b5a      	ldr	r3, [pc, #360]	@ (800bc38 <__ieee754_pow+0x410>)
 800bace:	f7f4 fbe3 	bl	8000298 <__aeabi_dsub>
 800bad2:	a351      	add	r3, pc, #324	@ (adr r3, 800bc18 <__ieee754_pow+0x3f0>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	4604      	mov	r4, r0
 800bada:	460d      	mov	r5, r1
 800badc:	f7f4 fd94 	bl	8000608 <__aeabi_dmul>
 800bae0:	a34f      	add	r3, pc, #316	@ (adr r3, 800bc20 <__ieee754_pow+0x3f8>)
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	4606      	mov	r6, r0
 800bae8:	460f      	mov	r7, r1
 800baea:	4620      	mov	r0, r4
 800baec:	4629      	mov	r1, r5
 800baee:	f7f4 fd8b 	bl	8000608 <__aeabi_dmul>
 800baf2:	4b52      	ldr	r3, [pc, #328]	@ (800bc3c <__ieee754_pow+0x414>)
 800baf4:	4682      	mov	sl, r0
 800baf6:	468b      	mov	fp, r1
 800baf8:	2200      	movs	r2, #0
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	f7f4 fd83 	bl	8000608 <__aeabi_dmul>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	a148      	add	r1, pc, #288	@ (adr r1, 800bc28 <__ieee754_pow+0x400>)
 800bb08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb0c:	f7f4 fbc4 	bl	8000298 <__aeabi_dsub>
 800bb10:	4622      	mov	r2, r4
 800bb12:	462b      	mov	r3, r5
 800bb14:	f7f4 fd78 	bl	8000608 <__aeabi_dmul>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	4948      	ldr	r1, [pc, #288]	@ (800bc40 <__ieee754_pow+0x418>)
 800bb20:	f7f4 fbba 	bl	8000298 <__aeabi_dsub>
 800bb24:	4622      	mov	r2, r4
 800bb26:	4680      	mov	r8, r0
 800bb28:	4689      	mov	r9, r1
 800bb2a:	462b      	mov	r3, r5
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	4629      	mov	r1, r5
 800bb30:	f7f4 fd6a 	bl	8000608 <__aeabi_dmul>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	4640      	mov	r0, r8
 800bb3a:	4649      	mov	r1, r9
 800bb3c:	f7f4 fd64 	bl	8000608 <__aeabi_dmul>
 800bb40:	a33b      	add	r3, pc, #236	@ (adr r3, 800bc30 <__ieee754_pow+0x408>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f7f4 fd5f 	bl	8000608 <__aeabi_dmul>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4650      	mov	r0, sl
 800bb50:	4659      	mov	r1, fp
 800bb52:	f7f4 fba1 	bl	8000298 <__aeabi_dsub>
 800bb56:	4602      	mov	r2, r0
 800bb58:	460b      	mov	r3, r1
 800bb5a:	4680      	mov	r8, r0
 800bb5c:	4689      	mov	r9, r1
 800bb5e:	4630      	mov	r0, r6
 800bb60:	4639      	mov	r1, r7
 800bb62:	f7f4 fb9b 	bl	800029c <__adddf3>
 800bb66:	2400      	movs	r4, #0
 800bb68:	4632      	mov	r2, r6
 800bb6a:	463b      	mov	r3, r7
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	460d      	mov	r5, r1
 800bb70:	f7f4 fb92 	bl	8000298 <__aeabi_dsub>
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	4640      	mov	r0, r8
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	f7f4 fb8c 	bl	8000298 <__aeabi_dsub>
 800bb80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb88:	2300      	movs	r3, #0
 800bb8a:	9304      	str	r3, [sp, #16]
 800bb8c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bb90:	4606      	mov	r6, r0
 800bb92:	460f      	mov	r7, r1
 800bb94:	4652      	mov	r2, sl
 800bb96:	465b      	mov	r3, fp
 800bb98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb9c:	f7f4 fb7c 	bl	8000298 <__aeabi_dsub>
 800bba0:	4622      	mov	r2, r4
 800bba2:	462b      	mov	r3, r5
 800bba4:	f7f4 fd30 	bl	8000608 <__aeabi_dmul>
 800bba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbac:	4680      	mov	r8, r0
 800bbae:	4689      	mov	r9, r1
 800bbb0:	4630      	mov	r0, r6
 800bbb2:	4639      	mov	r1, r7
 800bbb4:	f7f4 fd28 	bl	8000608 <__aeabi_dmul>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4640      	mov	r0, r8
 800bbbe:	4649      	mov	r1, r9
 800bbc0:	f7f4 fb6c 	bl	800029c <__adddf3>
 800bbc4:	4652      	mov	r2, sl
 800bbc6:	465b      	mov	r3, fp
 800bbc8:	4606      	mov	r6, r0
 800bbca:	460f      	mov	r7, r1
 800bbcc:	4620      	mov	r0, r4
 800bbce:	4629      	mov	r1, r5
 800bbd0:	f7f4 fd1a 	bl	8000608 <__aeabi_dmul>
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	4680      	mov	r8, r0
 800bbda:	4689      	mov	r9, r1
 800bbdc:	4630      	mov	r0, r6
 800bbde:	4639      	mov	r1, r7
 800bbe0:	f7f4 fb5c 	bl	800029c <__adddf3>
 800bbe4:	4b17      	ldr	r3, [pc, #92]	@ (800bc44 <__ieee754_pow+0x41c>)
 800bbe6:	4299      	cmp	r1, r3
 800bbe8:	4604      	mov	r4, r0
 800bbea:	460d      	mov	r5, r1
 800bbec:	468a      	mov	sl, r1
 800bbee:	468b      	mov	fp, r1
 800bbf0:	f340 82ef 	ble.w	800c1d2 <__ieee754_pow+0x9aa>
 800bbf4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bbf8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bbfc:	4303      	orrs	r3, r0
 800bbfe:	f000 81e8 	beq.w	800bfd2 <__ieee754_pow+0x7aa>
 800bc02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc06:	2200      	movs	r2, #0
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f7f4 ff6f 	bl	8000aec <__aeabi_dcmplt>
 800bc0e:	3800      	subs	r0, #0
 800bc10:	bf18      	it	ne
 800bc12:	2001      	movne	r0, #1
 800bc14:	e710      	b.n	800ba38 <__ieee754_pow+0x210>
 800bc16:	bf00      	nop
 800bc18:	60000000 	.word	0x60000000
 800bc1c:	3ff71547 	.word	0x3ff71547
 800bc20:	f85ddf44 	.word	0xf85ddf44
 800bc24:	3e54ae0b 	.word	0x3e54ae0b
 800bc28:	55555555 	.word	0x55555555
 800bc2c:	3fd55555 	.word	0x3fd55555
 800bc30:	652b82fe 	.word	0x652b82fe
 800bc34:	3ff71547 	.word	0x3ff71547
 800bc38:	3ff00000 	.word	0x3ff00000
 800bc3c:	3fd00000 	.word	0x3fd00000
 800bc40:	3fe00000 	.word	0x3fe00000
 800bc44:	408fffff 	.word	0x408fffff
 800bc48:	4bd5      	ldr	r3, [pc, #852]	@ (800bfa0 <__ieee754_pow+0x778>)
 800bc4a:	402b      	ands	r3, r5
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	b92b      	cbnz	r3, 800bc5c <__ieee754_pow+0x434>
 800bc50:	4bd4      	ldr	r3, [pc, #848]	@ (800bfa4 <__ieee754_pow+0x77c>)
 800bc52:	f7f4 fcd9 	bl	8000608 <__aeabi_dmul>
 800bc56:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800bc5a:	468b      	mov	fp, r1
 800bc5c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800bc60:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bc64:	4413      	add	r3, r2
 800bc66:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc68:	4bcf      	ldr	r3, [pc, #828]	@ (800bfa8 <__ieee754_pow+0x780>)
 800bc6a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800bc6e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bc72:	459b      	cmp	fp, r3
 800bc74:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bc78:	dd08      	ble.n	800bc8c <__ieee754_pow+0x464>
 800bc7a:	4bcc      	ldr	r3, [pc, #816]	@ (800bfac <__ieee754_pow+0x784>)
 800bc7c:	459b      	cmp	fp, r3
 800bc7e:	f340 81a5 	ble.w	800bfcc <__ieee754_pow+0x7a4>
 800bc82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc84:	3301      	adds	r3, #1
 800bc86:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc88:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bc8c:	f04f 0a00 	mov.w	sl, #0
 800bc90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bc94:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bc96:	4bc6      	ldr	r3, [pc, #792]	@ (800bfb0 <__ieee754_pow+0x788>)
 800bc98:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc9c:	ed93 7b00 	vldr	d7, [r3]
 800bca0:	4629      	mov	r1, r5
 800bca2:	ec53 2b17 	vmov	r2, r3, d7
 800bca6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcaa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bcae:	f7f4 faf3 	bl	8000298 <__aeabi_dsub>
 800bcb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bcb6:	4606      	mov	r6, r0
 800bcb8:	460f      	mov	r7, r1
 800bcba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcbe:	f7f4 faed 	bl	800029c <__adddf3>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	49ba      	ldr	r1, [pc, #744]	@ (800bfb4 <__ieee754_pow+0x78c>)
 800bcca:	f7f4 fdc7 	bl	800085c <__aeabi_ddiv>
 800bcce:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	4639      	mov	r1, r7
 800bcda:	f7f4 fc95 	bl	8000608 <__aeabi_dmul>
 800bcde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bce2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bce6:	106d      	asrs	r5, r5, #1
 800bce8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bcec:	f04f 0b00 	mov.w	fp, #0
 800bcf0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bcf4:	4661      	mov	r1, ip
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bcfc:	4658      	mov	r0, fp
 800bcfe:	46e1      	mov	r9, ip
 800bd00:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bd04:	4614      	mov	r4, r2
 800bd06:	461d      	mov	r5, r3
 800bd08:	f7f4 fc7e 	bl	8000608 <__aeabi_dmul>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4630      	mov	r0, r6
 800bd12:	4639      	mov	r1, r7
 800bd14:	f7f4 fac0 	bl	8000298 <__aeabi_dsub>
 800bd18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	460f      	mov	r7, r1
 800bd20:	4620      	mov	r0, r4
 800bd22:	4629      	mov	r1, r5
 800bd24:	f7f4 fab8 	bl	8000298 <__aeabi_dsub>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd30:	f7f4 fab2 	bl	8000298 <__aeabi_dsub>
 800bd34:	465a      	mov	r2, fp
 800bd36:	464b      	mov	r3, r9
 800bd38:	f7f4 fc66 	bl	8000608 <__aeabi_dmul>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4630      	mov	r0, r6
 800bd42:	4639      	mov	r1, r7
 800bd44:	f7f4 faa8 	bl	8000298 <__aeabi_dsub>
 800bd48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bd4c:	f7f4 fc5c 	bl	8000608 <__aeabi_dmul>
 800bd50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd58:	4610      	mov	r0, r2
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	f7f4 fc54 	bl	8000608 <__aeabi_dmul>
 800bd60:	a37d      	add	r3, pc, #500	@ (adr r3, 800bf58 <__ieee754_pow+0x730>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	4604      	mov	r4, r0
 800bd68:	460d      	mov	r5, r1
 800bd6a:	f7f4 fc4d 	bl	8000608 <__aeabi_dmul>
 800bd6e:	a37c      	add	r3, pc, #496	@ (adr r3, 800bf60 <__ieee754_pow+0x738>)
 800bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd74:	f7f4 fa92 	bl	800029c <__adddf3>
 800bd78:	4622      	mov	r2, r4
 800bd7a:	462b      	mov	r3, r5
 800bd7c:	f7f4 fc44 	bl	8000608 <__aeabi_dmul>
 800bd80:	a379      	add	r3, pc, #484	@ (adr r3, 800bf68 <__ieee754_pow+0x740>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fa89 	bl	800029c <__adddf3>
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	462b      	mov	r3, r5
 800bd8e:	f7f4 fc3b 	bl	8000608 <__aeabi_dmul>
 800bd92:	a377      	add	r3, pc, #476	@ (adr r3, 800bf70 <__ieee754_pow+0x748>)
 800bd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd98:	f7f4 fa80 	bl	800029c <__adddf3>
 800bd9c:	4622      	mov	r2, r4
 800bd9e:	462b      	mov	r3, r5
 800bda0:	f7f4 fc32 	bl	8000608 <__aeabi_dmul>
 800bda4:	a374      	add	r3, pc, #464	@ (adr r3, 800bf78 <__ieee754_pow+0x750>)
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	f7f4 fa77 	bl	800029c <__adddf3>
 800bdae:	4622      	mov	r2, r4
 800bdb0:	462b      	mov	r3, r5
 800bdb2:	f7f4 fc29 	bl	8000608 <__aeabi_dmul>
 800bdb6:	a372      	add	r3, pc, #456	@ (adr r3, 800bf80 <__ieee754_pow+0x758>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	f7f4 fa6e 	bl	800029c <__adddf3>
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	462b      	mov	r3, r5
 800bdc8:	4620      	mov	r0, r4
 800bdca:	4629      	mov	r1, r5
 800bdcc:	f7f4 fc1c 	bl	8000608 <__aeabi_dmul>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	f7f4 fc16 	bl	8000608 <__aeabi_dmul>
 800bddc:	465a      	mov	r2, fp
 800bdde:	4604      	mov	r4, r0
 800bde0:	460d      	mov	r5, r1
 800bde2:	464b      	mov	r3, r9
 800bde4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bde8:	f7f4 fa58 	bl	800029c <__adddf3>
 800bdec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdf0:	f7f4 fc0a 	bl	8000608 <__aeabi_dmul>
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	462b      	mov	r3, r5
 800bdf8:	f7f4 fa50 	bl	800029c <__adddf3>
 800bdfc:	465a      	mov	r2, fp
 800bdfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800be02:	464b      	mov	r3, r9
 800be04:	4658      	mov	r0, fp
 800be06:	4649      	mov	r1, r9
 800be08:	f7f4 fbfe 	bl	8000608 <__aeabi_dmul>
 800be0c:	4b6a      	ldr	r3, [pc, #424]	@ (800bfb8 <__ieee754_pow+0x790>)
 800be0e:	2200      	movs	r2, #0
 800be10:	4606      	mov	r6, r0
 800be12:	460f      	mov	r7, r1
 800be14:	f7f4 fa42 	bl	800029c <__adddf3>
 800be18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800be1c:	f7f4 fa3e 	bl	800029c <__adddf3>
 800be20:	46d8      	mov	r8, fp
 800be22:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800be26:	460d      	mov	r5, r1
 800be28:	465a      	mov	r2, fp
 800be2a:	460b      	mov	r3, r1
 800be2c:	4640      	mov	r0, r8
 800be2e:	4649      	mov	r1, r9
 800be30:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800be34:	f7f4 fbe8 	bl	8000608 <__aeabi_dmul>
 800be38:	465c      	mov	r4, fp
 800be3a:	4680      	mov	r8, r0
 800be3c:	4689      	mov	r9, r1
 800be3e:	4b5e      	ldr	r3, [pc, #376]	@ (800bfb8 <__ieee754_pow+0x790>)
 800be40:	2200      	movs	r2, #0
 800be42:	4620      	mov	r0, r4
 800be44:	4629      	mov	r1, r5
 800be46:	f7f4 fa27 	bl	8000298 <__aeabi_dsub>
 800be4a:	4632      	mov	r2, r6
 800be4c:	463b      	mov	r3, r7
 800be4e:	f7f4 fa23 	bl	8000298 <__aeabi_dsub>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be5a:	f7f4 fa1d 	bl	8000298 <__aeabi_dsub>
 800be5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be62:	f7f4 fbd1 	bl	8000608 <__aeabi_dmul>
 800be66:	4622      	mov	r2, r4
 800be68:	4606      	mov	r6, r0
 800be6a:	460f      	mov	r7, r1
 800be6c:	462b      	mov	r3, r5
 800be6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be72:	f7f4 fbc9 	bl	8000608 <__aeabi_dmul>
 800be76:	4602      	mov	r2, r0
 800be78:	460b      	mov	r3, r1
 800be7a:	4630      	mov	r0, r6
 800be7c:	4639      	mov	r1, r7
 800be7e:	f7f4 fa0d 	bl	800029c <__adddf3>
 800be82:	4606      	mov	r6, r0
 800be84:	460f      	mov	r7, r1
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	4640      	mov	r0, r8
 800be8c:	4649      	mov	r1, r9
 800be8e:	f7f4 fa05 	bl	800029c <__adddf3>
 800be92:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800be96:	a33c      	add	r3, pc, #240	@ (adr r3, 800bf88 <__ieee754_pow+0x760>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	4658      	mov	r0, fp
 800be9e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800bea2:	460d      	mov	r5, r1
 800bea4:	f7f4 fbb0 	bl	8000608 <__aeabi_dmul>
 800bea8:	465c      	mov	r4, fp
 800beaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beae:	4642      	mov	r2, r8
 800beb0:	464b      	mov	r3, r9
 800beb2:	4620      	mov	r0, r4
 800beb4:	4629      	mov	r1, r5
 800beb6:	f7f4 f9ef 	bl	8000298 <__aeabi_dsub>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4630      	mov	r0, r6
 800bec0:	4639      	mov	r1, r7
 800bec2:	f7f4 f9e9 	bl	8000298 <__aeabi_dsub>
 800bec6:	a332      	add	r3, pc, #200	@ (adr r3, 800bf90 <__ieee754_pow+0x768>)
 800bec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800becc:	f7f4 fb9c 	bl	8000608 <__aeabi_dmul>
 800bed0:	a331      	add	r3, pc, #196	@ (adr r3, 800bf98 <__ieee754_pow+0x770>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	4606      	mov	r6, r0
 800bed8:	460f      	mov	r7, r1
 800beda:	4620      	mov	r0, r4
 800bedc:	4629      	mov	r1, r5
 800bede:	f7f4 fb93 	bl	8000608 <__aeabi_dmul>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	4630      	mov	r0, r6
 800bee8:	4639      	mov	r1, r7
 800beea:	f7f4 f9d7 	bl	800029c <__adddf3>
 800beee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bef0:	4b32      	ldr	r3, [pc, #200]	@ (800bfbc <__ieee754_pow+0x794>)
 800bef2:	4413      	add	r3, r2
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	f7f4 f9d0 	bl	800029c <__adddf3>
 800befc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bf02:	f7f4 fb17 	bl	8000534 <__aeabi_i2d>
 800bf06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf08:	4b2d      	ldr	r3, [pc, #180]	@ (800bfc0 <__ieee754_pow+0x798>)
 800bf0a:	4413      	add	r3, r2
 800bf0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf10:	4606      	mov	r6, r0
 800bf12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf16:	460f      	mov	r7, r1
 800bf18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf1c:	f7f4 f9be 	bl	800029c <__adddf3>
 800bf20:	4642      	mov	r2, r8
 800bf22:	464b      	mov	r3, r9
 800bf24:	f7f4 f9ba 	bl	800029c <__adddf3>
 800bf28:	4632      	mov	r2, r6
 800bf2a:	463b      	mov	r3, r7
 800bf2c:	f7f4 f9b6 	bl	800029c <__adddf3>
 800bf30:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800bf34:	4632      	mov	r2, r6
 800bf36:	463b      	mov	r3, r7
 800bf38:	4658      	mov	r0, fp
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	f7f4 f9ac 	bl	8000298 <__aeabi_dsub>
 800bf40:	4642      	mov	r2, r8
 800bf42:	464b      	mov	r3, r9
 800bf44:	f7f4 f9a8 	bl	8000298 <__aeabi_dsub>
 800bf48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf4c:	f7f4 f9a4 	bl	8000298 <__aeabi_dsub>
 800bf50:	465c      	mov	r4, fp
 800bf52:	4602      	mov	r2, r0
 800bf54:	e036      	b.n	800bfc4 <__ieee754_pow+0x79c>
 800bf56:	bf00      	nop
 800bf58:	4a454eef 	.word	0x4a454eef
 800bf5c:	3fca7e28 	.word	0x3fca7e28
 800bf60:	93c9db65 	.word	0x93c9db65
 800bf64:	3fcd864a 	.word	0x3fcd864a
 800bf68:	a91d4101 	.word	0xa91d4101
 800bf6c:	3fd17460 	.word	0x3fd17460
 800bf70:	518f264d 	.word	0x518f264d
 800bf74:	3fd55555 	.word	0x3fd55555
 800bf78:	db6fabff 	.word	0xdb6fabff
 800bf7c:	3fdb6db6 	.word	0x3fdb6db6
 800bf80:	33333303 	.word	0x33333303
 800bf84:	3fe33333 	.word	0x3fe33333
 800bf88:	e0000000 	.word	0xe0000000
 800bf8c:	3feec709 	.word	0x3feec709
 800bf90:	dc3a03fd 	.word	0xdc3a03fd
 800bf94:	3feec709 	.word	0x3feec709
 800bf98:	145b01f5 	.word	0x145b01f5
 800bf9c:	be3e2fe0 	.word	0xbe3e2fe0
 800bfa0:	7ff00000 	.word	0x7ff00000
 800bfa4:	43400000 	.word	0x43400000
 800bfa8:	0003988e 	.word	0x0003988e
 800bfac:	000bb679 	.word	0x000bb679
 800bfb0:	0800d0d8 	.word	0x0800d0d8
 800bfb4:	3ff00000 	.word	0x3ff00000
 800bfb8:	40080000 	.word	0x40080000
 800bfbc:	0800d0b8 	.word	0x0800d0b8
 800bfc0:	0800d0c8 	.word	0x0800d0c8
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfca:	e5d7      	b.n	800bb7c <__ieee754_pow+0x354>
 800bfcc:	f04f 0a01 	mov.w	sl, #1
 800bfd0:	e65e      	b.n	800bc90 <__ieee754_pow+0x468>
 800bfd2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c2a4 <__ieee754_pow+0xa7c>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	4630      	mov	r0, r6
 800bfda:	4639      	mov	r1, r7
 800bfdc:	f7f4 f95e 	bl	800029c <__adddf3>
 800bfe0:	4642      	mov	r2, r8
 800bfe2:	e9cd 0100 	strd	r0, r1, [sp]
 800bfe6:	464b      	mov	r3, r9
 800bfe8:	4620      	mov	r0, r4
 800bfea:	4629      	mov	r1, r5
 800bfec:	f7f4 f954 	bl	8000298 <__aeabi_dsub>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bff8:	f7f4 fd96 	bl	8000b28 <__aeabi_dcmpgt>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	f47f ae00 	bne.w	800bc02 <__ieee754_pow+0x3da>
 800c002:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c006:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c00a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c00e:	fa43 fa0a 	asr.w	sl, r3, sl
 800c012:	44da      	add	sl, fp
 800c014:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c018:	489d      	ldr	r0, [pc, #628]	@ (800c290 <__ieee754_pow+0xa68>)
 800c01a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c01e:	4108      	asrs	r0, r1
 800c020:	ea00 030a 	and.w	r3, r0, sl
 800c024:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c028:	f1c1 0114 	rsb	r1, r1, #20
 800c02c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c030:	fa4a fa01 	asr.w	sl, sl, r1
 800c034:	f1bb 0f00 	cmp.w	fp, #0
 800c038:	4640      	mov	r0, r8
 800c03a:	4649      	mov	r1, r9
 800c03c:	f04f 0200 	mov.w	r2, #0
 800c040:	bfb8      	it	lt
 800c042:	f1ca 0a00 	rsblt	sl, sl, #0
 800c046:	f7f4 f927 	bl	8000298 <__aeabi_dsub>
 800c04a:	4680      	mov	r8, r0
 800c04c:	4689      	mov	r9, r1
 800c04e:	4632      	mov	r2, r6
 800c050:	463b      	mov	r3, r7
 800c052:	4640      	mov	r0, r8
 800c054:	4649      	mov	r1, r9
 800c056:	f7f4 f921 	bl	800029c <__adddf3>
 800c05a:	2400      	movs	r4, #0
 800c05c:	a37c      	add	r3, pc, #496	@ (adr r3, 800c250 <__ieee754_pow+0xa28>)
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	4620      	mov	r0, r4
 800c064:	460d      	mov	r5, r1
 800c066:	f7f4 facf 	bl	8000608 <__aeabi_dmul>
 800c06a:	4642      	mov	r2, r8
 800c06c:	e9cd 0100 	strd	r0, r1, [sp]
 800c070:	464b      	mov	r3, r9
 800c072:	4620      	mov	r0, r4
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 f90f 	bl	8000298 <__aeabi_dsub>
 800c07a:	4602      	mov	r2, r0
 800c07c:	460b      	mov	r3, r1
 800c07e:	4630      	mov	r0, r6
 800c080:	4639      	mov	r1, r7
 800c082:	f7f4 f909 	bl	8000298 <__aeabi_dsub>
 800c086:	a374      	add	r3, pc, #464	@ (adr r3, 800c258 <__ieee754_pow+0xa30>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	f7f4 fabc 	bl	8000608 <__aeabi_dmul>
 800c090:	a373      	add	r3, pc, #460	@ (adr r3, 800c260 <__ieee754_pow+0xa38>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	4680      	mov	r8, r0
 800c098:	4689      	mov	r9, r1
 800c09a:	4620      	mov	r0, r4
 800c09c:	4629      	mov	r1, r5
 800c09e:	f7f4 fab3 	bl	8000608 <__aeabi_dmul>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4640      	mov	r0, r8
 800c0a8:	4649      	mov	r1, r9
 800c0aa:	f7f4 f8f7 	bl	800029c <__adddf3>
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0ba:	f7f4 f8ef 	bl	800029c <__adddf3>
 800c0be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0c2:	4680      	mov	r8, r0
 800c0c4:	4689      	mov	r9, r1
 800c0c6:	f7f4 f8e7 	bl	8000298 <__aeabi_dsub>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	f7f4 f8e1 	bl	8000298 <__aeabi_dsub>
 800c0d6:	4642      	mov	r2, r8
 800c0d8:	4606      	mov	r6, r0
 800c0da:	460f      	mov	r7, r1
 800c0dc:	464b      	mov	r3, r9
 800c0de:	4640      	mov	r0, r8
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	f7f4 fa91 	bl	8000608 <__aeabi_dmul>
 800c0e6:	a360      	add	r3, pc, #384	@ (adr r3, 800c268 <__ieee754_pow+0xa40>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	460d      	mov	r5, r1
 800c0f0:	f7f4 fa8a 	bl	8000608 <__aeabi_dmul>
 800c0f4:	a35e      	add	r3, pc, #376	@ (adr r3, 800c270 <__ieee754_pow+0xa48>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	f7f4 f8cd 	bl	8000298 <__aeabi_dsub>
 800c0fe:	4622      	mov	r2, r4
 800c100:	462b      	mov	r3, r5
 800c102:	f7f4 fa81 	bl	8000608 <__aeabi_dmul>
 800c106:	a35c      	add	r3, pc, #368	@ (adr r3, 800c278 <__ieee754_pow+0xa50>)
 800c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10c:	f7f4 f8c6 	bl	800029c <__adddf3>
 800c110:	4622      	mov	r2, r4
 800c112:	462b      	mov	r3, r5
 800c114:	f7f4 fa78 	bl	8000608 <__aeabi_dmul>
 800c118:	a359      	add	r3, pc, #356	@ (adr r3, 800c280 <__ieee754_pow+0xa58>)
 800c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11e:	f7f4 f8bb 	bl	8000298 <__aeabi_dsub>
 800c122:	4622      	mov	r2, r4
 800c124:	462b      	mov	r3, r5
 800c126:	f7f4 fa6f 	bl	8000608 <__aeabi_dmul>
 800c12a:	a357      	add	r3, pc, #348	@ (adr r3, 800c288 <__ieee754_pow+0xa60>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f7f4 f8b4 	bl	800029c <__adddf3>
 800c134:	4622      	mov	r2, r4
 800c136:	462b      	mov	r3, r5
 800c138:	f7f4 fa66 	bl	8000608 <__aeabi_dmul>
 800c13c:	4602      	mov	r2, r0
 800c13e:	460b      	mov	r3, r1
 800c140:	4640      	mov	r0, r8
 800c142:	4649      	mov	r1, r9
 800c144:	f7f4 f8a8 	bl	8000298 <__aeabi_dsub>
 800c148:	4604      	mov	r4, r0
 800c14a:	460d      	mov	r5, r1
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	4640      	mov	r0, r8
 800c152:	4649      	mov	r1, r9
 800c154:	f7f4 fa58 	bl	8000608 <__aeabi_dmul>
 800c158:	2200      	movs	r2, #0
 800c15a:	e9cd 0100 	strd	r0, r1, [sp]
 800c15e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c162:	4620      	mov	r0, r4
 800c164:	4629      	mov	r1, r5
 800c166:	f7f4 f897 	bl	8000298 <__aeabi_dsub>
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c172:	f7f4 fb73 	bl	800085c <__aeabi_ddiv>
 800c176:	4632      	mov	r2, r6
 800c178:	4604      	mov	r4, r0
 800c17a:	460d      	mov	r5, r1
 800c17c:	463b      	mov	r3, r7
 800c17e:	4640      	mov	r0, r8
 800c180:	4649      	mov	r1, r9
 800c182:	f7f4 fa41 	bl	8000608 <__aeabi_dmul>
 800c186:	4632      	mov	r2, r6
 800c188:	463b      	mov	r3, r7
 800c18a:	f7f4 f887 	bl	800029c <__adddf3>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4620      	mov	r0, r4
 800c194:	4629      	mov	r1, r5
 800c196:	f7f4 f87f 	bl	8000298 <__aeabi_dsub>
 800c19a:	4642      	mov	r2, r8
 800c19c:	464b      	mov	r3, r9
 800c19e:	f7f4 f87b 	bl	8000298 <__aeabi_dsub>
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	493b      	ldr	r1, [pc, #236]	@ (800c294 <__ieee754_pow+0xa6c>)
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	f7f4 f875 	bl	8000298 <__aeabi_dsub>
 800c1ae:	ec41 0b10 	vmov	d0, r0, r1
 800c1b2:	ee10 3a90 	vmov	r3, s1
 800c1b6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c1ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1be:	da30      	bge.n	800c222 <__ieee754_pow+0x9fa>
 800c1c0:	4650      	mov	r0, sl
 800c1c2:	f000 fb4d 	bl	800c860 <scalbn>
 800c1c6:	ec51 0b10 	vmov	r0, r1, d0
 800c1ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1ce:	f7ff bbd2 	b.w	800b976 <__ieee754_pow+0x14e>
 800c1d2:	4c31      	ldr	r4, [pc, #196]	@ (800c298 <__ieee754_pow+0xa70>)
 800c1d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1d8:	42a3      	cmp	r3, r4
 800c1da:	d91a      	bls.n	800c212 <__ieee754_pow+0x9ea>
 800c1dc:	4b2f      	ldr	r3, [pc, #188]	@ (800c29c <__ieee754_pow+0xa74>)
 800c1de:	440b      	add	r3, r1
 800c1e0:	4303      	orrs	r3, r0
 800c1e2:	d009      	beq.n	800c1f8 <__ieee754_pow+0x9d0>
 800c1e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	f7f4 fc7e 	bl	8000aec <__aeabi_dcmplt>
 800c1f0:	3800      	subs	r0, #0
 800c1f2:	bf18      	it	ne
 800c1f4:	2001      	movne	r0, #1
 800c1f6:	e42b      	b.n	800ba50 <__ieee754_pow+0x228>
 800c1f8:	4642      	mov	r2, r8
 800c1fa:	464b      	mov	r3, r9
 800c1fc:	f7f4 f84c 	bl	8000298 <__aeabi_dsub>
 800c200:	4632      	mov	r2, r6
 800c202:	463b      	mov	r3, r7
 800c204:	f7f4 fc86 	bl	8000b14 <__aeabi_dcmpge>
 800c208:	2800      	cmp	r0, #0
 800c20a:	d1eb      	bne.n	800c1e4 <__ieee754_pow+0x9bc>
 800c20c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c2ac <__ieee754_pow+0xa84>
 800c210:	e6f7      	b.n	800c002 <__ieee754_pow+0x7da>
 800c212:	469a      	mov	sl, r3
 800c214:	4b22      	ldr	r3, [pc, #136]	@ (800c2a0 <__ieee754_pow+0xa78>)
 800c216:	459a      	cmp	sl, r3
 800c218:	f63f aef3 	bhi.w	800c002 <__ieee754_pow+0x7da>
 800c21c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c220:	e715      	b.n	800c04e <__ieee754_pow+0x826>
 800c222:	ec51 0b10 	vmov	r0, r1, d0
 800c226:	4619      	mov	r1, r3
 800c228:	e7cf      	b.n	800c1ca <__ieee754_pow+0x9a2>
 800c22a:	491a      	ldr	r1, [pc, #104]	@ (800c294 <__ieee754_pow+0xa6c>)
 800c22c:	2000      	movs	r0, #0
 800c22e:	f7ff bb18 	b.w	800b862 <__ieee754_pow+0x3a>
 800c232:	2000      	movs	r0, #0
 800c234:	2100      	movs	r1, #0
 800c236:	f7ff bb14 	b.w	800b862 <__ieee754_pow+0x3a>
 800c23a:	4630      	mov	r0, r6
 800c23c:	4639      	mov	r1, r7
 800c23e:	f7ff bb10 	b.w	800b862 <__ieee754_pow+0x3a>
 800c242:	460c      	mov	r4, r1
 800c244:	f7ff bb5e 	b.w	800b904 <__ieee754_pow+0xdc>
 800c248:	2400      	movs	r4, #0
 800c24a:	f7ff bb49 	b.w	800b8e0 <__ieee754_pow+0xb8>
 800c24e:	bf00      	nop
 800c250:	00000000 	.word	0x00000000
 800c254:	3fe62e43 	.word	0x3fe62e43
 800c258:	fefa39ef 	.word	0xfefa39ef
 800c25c:	3fe62e42 	.word	0x3fe62e42
 800c260:	0ca86c39 	.word	0x0ca86c39
 800c264:	be205c61 	.word	0xbe205c61
 800c268:	72bea4d0 	.word	0x72bea4d0
 800c26c:	3e663769 	.word	0x3e663769
 800c270:	c5d26bf1 	.word	0xc5d26bf1
 800c274:	3ebbbd41 	.word	0x3ebbbd41
 800c278:	af25de2c 	.word	0xaf25de2c
 800c27c:	3f11566a 	.word	0x3f11566a
 800c280:	16bebd93 	.word	0x16bebd93
 800c284:	3f66c16c 	.word	0x3f66c16c
 800c288:	5555553e 	.word	0x5555553e
 800c28c:	3fc55555 	.word	0x3fc55555
 800c290:	fff00000 	.word	0xfff00000
 800c294:	3ff00000 	.word	0x3ff00000
 800c298:	4090cbff 	.word	0x4090cbff
 800c29c:	3f6f3400 	.word	0x3f6f3400
 800c2a0:	3fe00000 	.word	0x3fe00000
 800c2a4:	652b82fe 	.word	0x652b82fe
 800c2a8:	3c971547 	.word	0x3c971547
 800c2ac:	4090cc00 	.word	0x4090cc00

0800c2b0 <__ieee754_powf>:
 800c2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b4:	ee10 4a90 	vmov	r4, s1
 800c2b8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800c2bc:	ed2d 8b02 	vpush	{d8}
 800c2c0:	ee10 6a10 	vmov	r6, s0
 800c2c4:	eeb0 8a40 	vmov.f32	s16, s0
 800c2c8:	eef0 8a60 	vmov.f32	s17, s1
 800c2cc:	d10c      	bne.n	800c2e8 <__ieee754_powf+0x38>
 800c2ce:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800c2d2:	0076      	lsls	r6, r6, #1
 800c2d4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800c2d8:	f240 829c 	bls.w	800c814 <__ieee754_powf+0x564>
 800c2dc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800c2e0:	ecbd 8b02 	vpop	{d8}
 800c2e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2e8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800c2ec:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800c2f0:	d802      	bhi.n	800c2f8 <__ieee754_powf+0x48>
 800c2f2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c2f6:	d908      	bls.n	800c30a <__ieee754_powf+0x5a>
 800c2f8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800c2fc:	d1ee      	bne.n	800c2dc <__ieee754_powf+0x2c>
 800c2fe:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800c302:	0064      	lsls	r4, r4, #1
 800c304:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800c308:	e7e6      	b.n	800c2d8 <__ieee754_powf+0x28>
 800c30a:	2e00      	cmp	r6, #0
 800c30c:	da1e      	bge.n	800c34c <__ieee754_powf+0x9c>
 800c30e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800c312:	d22b      	bcs.n	800c36c <__ieee754_powf+0xbc>
 800c314:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800c318:	d332      	bcc.n	800c380 <__ieee754_powf+0xd0>
 800c31a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800c31e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800c322:	fa49 f503 	asr.w	r5, r9, r3
 800c326:	fa05 f303 	lsl.w	r3, r5, r3
 800c32a:	454b      	cmp	r3, r9
 800c32c:	d126      	bne.n	800c37c <__ieee754_powf+0xcc>
 800c32e:	f005 0501 	and.w	r5, r5, #1
 800c332:	f1c5 0502 	rsb	r5, r5, #2
 800c336:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800c33a:	d122      	bne.n	800c382 <__ieee754_powf+0xd2>
 800c33c:	2c00      	cmp	r4, #0
 800c33e:	f280 826f 	bge.w	800c820 <__ieee754_powf+0x570>
 800c342:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c346:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800c34a:	e7c9      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c34c:	2500      	movs	r5, #0
 800c34e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c352:	d1f0      	bne.n	800c336 <__ieee754_powf+0x86>
 800c354:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800c358:	f000 825c 	beq.w	800c814 <__ieee754_powf+0x564>
 800c35c:	d908      	bls.n	800c370 <__ieee754_powf+0xc0>
 800c35e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800c6c0 <__ieee754_powf+0x410>
 800c362:	2c00      	cmp	r4, #0
 800c364:	bfa8      	it	ge
 800c366:	eeb0 0a68 	vmovge.f32	s0, s17
 800c36a:	e7b9      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c36c:	2502      	movs	r5, #2
 800c36e:	e7ee      	b.n	800c34e <__ieee754_powf+0x9e>
 800c370:	2c00      	cmp	r4, #0
 800c372:	f280 8252 	bge.w	800c81a <__ieee754_powf+0x56a>
 800c376:	eeb1 0a68 	vneg.f32	s0, s17
 800c37a:	e7b1      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c37c:	2500      	movs	r5, #0
 800c37e:	e7da      	b.n	800c336 <__ieee754_powf+0x86>
 800c380:	2500      	movs	r5, #0
 800c382:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800c386:	d102      	bne.n	800c38e <__ieee754_powf+0xde>
 800c388:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c38c:	e7a8      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c38e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800c392:	d109      	bne.n	800c3a8 <__ieee754_powf+0xf8>
 800c394:	2e00      	cmp	r6, #0
 800c396:	db07      	blt.n	800c3a8 <__ieee754_powf+0xf8>
 800c398:	eeb0 0a48 	vmov.f32	s0, s16
 800c39c:	ecbd 8b02 	vpop	{d8}
 800c3a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a4:	f7fe bfde 	b.w	800b364 <__ieee754_sqrtf>
 800c3a8:	eeb0 0a48 	vmov.f32	s0, s16
 800c3ac:	f000 fa50 	bl	800c850 <fabsf>
 800c3b0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800c3b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800c3b8:	4647      	mov	r7, r8
 800c3ba:	d002      	beq.n	800c3c2 <__ieee754_powf+0x112>
 800c3bc:	f1b8 0f00 	cmp.w	r8, #0
 800c3c0:	d117      	bne.n	800c3f2 <__ieee754_powf+0x142>
 800c3c2:	2c00      	cmp	r4, #0
 800c3c4:	bfbc      	itt	lt
 800c3c6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800c3ca:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c3ce:	2e00      	cmp	r6, #0
 800c3d0:	da86      	bge.n	800c2e0 <__ieee754_powf+0x30>
 800c3d2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800c3d6:	ea58 0805 	orrs.w	r8, r8, r5
 800c3da:	d104      	bne.n	800c3e6 <__ieee754_powf+0x136>
 800c3dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c3e0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c3e4:	e77c      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c3e6:	2d01      	cmp	r5, #1
 800c3e8:	f47f af7a 	bne.w	800c2e0 <__ieee754_powf+0x30>
 800c3ec:	eeb1 0a40 	vneg.f32	s0, s0
 800c3f0:	e776      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c3f2:	0ff0      	lsrs	r0, r6, #31
 800c3f4:	3801      	subs	r0, #1
 800c3f6:	ea55 0300 	orrs.w	r3, r5, r0
 800c3fa:	d104      	bne.n	800c406 <__ieee754_powf+0x156>
 800c3fc:	ee38 8a48 	vsub.f32	s16, s16, s16
 800c400:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c404:	e76c      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c406:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800c40a:	d973      	bls.n	800c4f4 <__ieee754_powf+0x244>
 800c40c:	4bad      	ldr	r3, [pc, #692]	@ (800c6c4 <__ieee754_powf+0x414>)
 800c40e:	4598      	cmp	r8, r3
 800c410:	d808      	bhi.n	800c424 <__ieee754_powf+0x174>
 800c412:	2c00      	cmp	r4, #0
 800c414:	da0b      	bge.n	800c42e <__ieee754_powf+0x17e>
 800c416:	2000      	movs	r0, #0
 800c418:	ecbd 8b02 	vpop	{d8}
 800c41c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c420:	f000 bb60 	b.w	800cae4 <__math_oflowf>
 800c424:	4ba8      	ldr	r3, [pc, #672]	@ (800c6c8 <__ieee754_powf+0x418>)
 800c426:	4598      	cmp	r8, r3
 800c428:	d908      	bls.n	800c43c <__ieee754_powf+0x18c>
 800c42a:	2c00      	cmp	r4, #0
 800c42c:	dcf3      	bgt.n	800c416 <__ieee754_powf+0x166>
 800c42e:	2000      	movs	r0, #0
 800c430:	ecbd 8b02 	vpop	{d8}
 800c434:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c438:	f000 bb4e 	b.w	800cad8 <__math_uflowf>
 800c43c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c440:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c444:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800c6cc <__ieee754_powf+0x41c>
 800c448:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800c44c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c450:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c454:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c458:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c45c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c460:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800c6d0 <__ieee754_powf+0x420>
 800c464:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c468:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800c6d4 <__ieee754_powf+0x424>
 800c46c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c470:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800c6d8 <__ieee754_powf+0x428>
 800c474:	eef0 6a67 	vmov.f32	s13, s15
 800c478:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c47c:	ee16 3a90 	vmov	r3, s13
 800c480:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c484:	f023 030f 	bic.w	r3, r3, #15
 800c488:	ee06 3a90 	vmov	s13, r3
 800c48c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c490:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c494:	3d01      	subs	r5, #1
 800c496:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800c49a:	4305      	orrs	r5, r0
 800c49c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c4a0:	f024 040f 	bic.w	r4, r4, #15
 800c4a4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800c4a8:	bf18      	it	ne
 800c4aa:	eeb0 8a47 	vmovne.f32	s16, s14
 800c4ae:	ee07 4a10 	vmov	s14, r4
 800c4b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c4b6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c4ba:	ee07 3a90 	vmov	s15, r3
 800c4be:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c4c2:	ee07 4a10 	vmov	s14, r4
 800c4c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4ca:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c4ce:	ee17 1a10 	vmov	r1, s14
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c4d8:	f340 80dd 	ble.w	800c696 <__ieee754_powf+0x3e6>
 800c4dc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800c4e0:	f240 80ca 	bls.w	800c678 <__ieee754_powf+0x3c8>
 800c4e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ec:	bf4c      	ite	mi
 800c4ee:	2001      	movmi	r0, #1
 800c4f0:	2000      	movpl	r0, #0
 800c4f2:	e791      	b.n	800c418 <__ieee754_powf+0x168>
 800c4f4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c4f8:	bf01      	itttt	eq
 800c4fa:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c6dc <__ieee754_powf+0x42c>
 800c4fe:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c502:	f06f 0317 	mvneq.w	r3, #23
 800c506:	ee17 7a90 	vmoveq	r7, s15
 800c50a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800c50e:	bf18      	it	ne
 800c510:	2300      	movne	r3, #0
 800c512:	3a7f      	subs	r2, #127	@ 0x7f
 800c514:	441a      	add	r2, r3
 800c516:	4b72      	ldr	r3, [pc, #456]	@ (800c6e0 <__ieee754_powf+0x430>)
 800c518:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c51c:	429f      	cmp	r7, r3
 800c51e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c522:	dd06      	ble.n	800c532 <__ieee754_powf+0x282>
 800c524:	4b6f      	ldr	r3, [pc, #444]	@ (800c6e4 <__ieee754_powf+0x434>)
 800c526:	429f      	cmp	r7, r3
 800c528:	f340 80a4 	ble.w	800c674 <__ieee754_powf+0x3c4>
 800c52c:	3201      	adds	r2, #1
 800c52e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c532:	2600      	movs	r6, #0
 800c534:	4b6c      	ldr	r3, [pc, #432]	@ (800c6e8 <__ieee754_powf+0x438>)
 800c536:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c53a:	ee07 1a10 	vmov	s14, r1
 800c53e:	edd3 5a00 	vldr	s11, [r3]
 800c542:	4b6a      	ldr	r3, [pc, #424]	@ (800c6ec <__ieee754_powf+0x43c>)
 800c544:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c548:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c54c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c550:	1049      	asrs	r1, r1, #1
 800c552:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c556:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c55a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c55e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c562:	ee07 1a90 	vmov	s15, r1
 800c566:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c56a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c56e:	ee15 7a10 	vmov	r7, s10
 800c572:	401f      	ands	r7, r3
 800c574:	ee06 7a90 	vmov	s13, r7
 800c578:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c57c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c580:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c584:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c588:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c6f0 <__ieee754_powf+0x440>
 800c58c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c6f4 <__ieee754_powf+0x444>
 800c590:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c594:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c6f8 <__ieee754_powf+0x448>
 800c598:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c59c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c6cc <__ieee754_powf+0x41c>
 800c5a0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c5a4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c6fc <__ieee754_powf+0x44c>
 800c5a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c5ac:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c700 <__ieee754_powf+0x450>
 800c5b0:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c5b4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c5b8:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c5bc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c5c0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c5c4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c5c8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c5cc:	eef0 5a67 	vmov.f32	s11, s15
 800c5d0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c5d4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c5d8:	ee15 1a90 	vmov	r1, s11
 800c5dc:	4019      	ands	r1, r3
 800c5de:	ee05 1a90 	vmov	s11, r1
 800c5e2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c5e6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c5ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5ee:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c5f2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c5f6:	eeb0 6a67 	vmov.f32	s12, s15
 800c5fa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c5fe:	ee16 1a10 	vmov	r1, s12
 800c602:	4019      	ands	r1, r3
 800c604:	ee06 1a10 	vmov	s12, r1
 800c608:	eeb0 7a46 	vmov.f32	s14, s12
 800c60c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c610:	493c      	ldr	r1, [pc, #240]	@ (800c704 <__ieee754_powf+0x454>)
 800c612:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c61a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c708 <__ieee754_powf+0x458>
 800c61e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c70c <__ieee754_powf+0x45c>
 800c622:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c626:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c710 <__ieee754_powf+0x460>
 800c62a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c62e:	ed91 7a00 	vldr	s14, [r1]
 800c632:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c636:	ee07 2a10 	vmov	s14, r2
 800c63a:	eef0 6a67 	vmov.f32	s13, s15
 800c63e:	4a35      	ldr	r2, [pc, #212]	@ (800c714 <__ieee754_powf+0x464>)
 800c640:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c644:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c648:	ed92 5a00 	vldr	s10, [r2]
 800c64c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c650:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c654:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c658:	ee16 2a90 	vmov	r2, s13
 800c65c:	4013      	ands	r3, r2
 800c65e:	ee06 3a90 	vmov	s13, r3
 800c662:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c666:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c66a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c66e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c672:	e70f      	b.n	800c494 <__ieee754_powf+0x1e4>
 800c674:	2601      	movs	r6, #1
 800c676:	e75d      	b.n	800c534 <__ieee754_powf+0x284>
 800c678:	d152      	bne.n	800c720 <__ieee754_powf+0x470>
 800c67a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c718 <__ieee754_powf+0x468>
 800c67e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c682:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c686:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c68e:	f73f af29 	bgt.w	800c4e4 <__ieee754_powf+0x234>
 800c692:	2386      	movs	r3, #134	@ 0x86
 800c694:	e048      	b.n	800c728 <__ieee754_powf+0x478>
 800c696:	4a21      	ldr	r2, [pc, #132]	@ (800c71c <__ieee754_powf+0x46c>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d907      	bls.n	800c6ac <__ieee754_powf+0x3fc>
 800c69c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6a4:	bf4c      	ite	mi
 800c6a6:	2001      	movmi	r0, #1
 800c6a8:	2000      	movpl	r0, #0
 800c6aa:	e6c1      	b.n	800c430 <__ieee754_powf+0x180>
 800c6ac:	d138      	bne.n	800c720 <__ieee754_powf+0x470>
 800c6ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c6b2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ba:	dbea      	blt.n	800c692 <__ieee754_powf+0x3e2>
 800c6bc:	e7ee      	b.n	800c69c <__ieee754_powf+0x3ec>
 800c6be:	bf00      	nop
 800c6c0:	00000000 	.word	0x00000000
 800c6c4:	3f7ffff3 	.word	0x3f7ffff3
 800c6c8:	3f800007 	.word	0x3f800007
 800c6cc:	3eaaaaab 	.word	0x3eaaaaab
 800c6d0:	3fb8aa3b 	.word	0x3fb8aa3b
 800c6d4:	36eca570 	.word	0x36eca570
 800c6d8:	3fb8aa00 	.word	0x3fb8aa00
 800c6dc:	4b800000 	.word	0x4b800000
 800c6e0:	001cc471 	.word	0x001cc471
 800c6e4:	005db3d6 	.word	0x005db3d6
 800c6e8:	0800d0f8 	.word	0x0800d0f8
 800c6ec:	fffff000 	.word	0xfffff000
 800c6f0:	3e6c3255 	.word	0x3e6c3255
 800c6f4:	3e53f142 	.word	0x3e53f142
 800c6f8:	3e8ba305 	.word	0x3e8ba305
 800c6fc:	3edb6db7 	.word	0x3edb6db7
 800c700:	3f19999a 	.word	0x3f19999a
 800c704:	0800d0e8 	.word	0x0800d0e8
 800c708:	3f76384f 	.word	0x3f76384f
 800c70c:	3f763800 	.word	0x3f763800
 800c710:	369dc3a0 	.word	0x369dc3a0
 800c714:	0800d0f0 	.word	0x0800d0f0
 800c718:	3338aa3c 	.word	0x3338aa3c
 800c71c:	43160000 	.word	0x43160000
 800c720:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c724:	d971      	bls.n	800c80a <__ieee754_powf+0x55a>
 800c726:	15db      	asrs	r3, r3, #23
 800c728:	3b7e      	subs	r3, #126	@ 0x7e
 800c72a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c72e:	4118      	asrs	r0, r3
 800c730:	4408      	add	r0, r1
 800c732:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c736:	4a3c      	ldr	r2, [pc, #240]	@ (800c828 <__ieee754_powf+0x578>)
 800c738:	3b7f      	subs	r3, #127	@ 0x7f
 800c73a:	411a      	asrs	r2, r3
 800c73c:	4002      	ands	r2, r0
 800c73e:	ee07 2a10 	vmov	s14, r2
 800c742:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c746:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c74a:	f1c3 0317 	rsb	r3, r3, #23
 800c74e:	4118      	asrs	r0, r3
 800c750:	2900      	cmp	r1, #0
 800c752:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c756:	bfb8      	it	lt
 800c758:	4240      	neglt	r0, r0
 800c75a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c75e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c82c <__ieee754_powf+0x57c>
 800c762:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800c830 <__ieee754_powf+0x580>
 800c766:	ee17 3a10 	vmov	r3, s14
 800c76a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c76e:	f023 030f 	bic.w	r3, r3, #15
 800c772:	ee07 3a10 	vmov	s14, r3
 800c776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c77a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c77e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c782:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800c834 <__ieee754_powf+0x584>
 800c786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c78a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c78e:	eef0 6a67 	vmov.f32	s13, s15
 800c792:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c796:	eef0 5a66 	vmov.f32	s11, s13
 800c79a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c79e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c7a2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c7a6:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800c838 <__ieee754_powf+0x588>
 800c7aa:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800c83c <__ieee754_powf+0x58c>
 800c7ae:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c7b2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800c840 <__ieee754_powf+0x590>
 800c7b6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c7ba:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800c844 <__ieee754_powf+0x594>
 800c7be:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c7c2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c848 <__ieee754_powf+0x598>
 800c7c6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c7ca:	eeb0 6a66 	vmov.f32	s12, s13
 800c7ce:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c7d2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c7d6:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c7da:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c7de:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c7e2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c7e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c7ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c7f2:	ee10 3a10 	vmov	r3, s0
 800c7f6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c7fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7fe:	da06      	bge.n	800c80e <__ieee754_powf+0x55e>
 800c800:	f000 f8ea 	bl	800c9d8 <scalbnf>
 800c804:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c808:	e56a      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c80a:	2000      	movs	r0, #0
 800c80c:	e7a5      	b.n	800c75a <__ieee754_powf+0x4aa>
 800c80e:	ee00 3a10 	vmov	s0, r3
 800c812:	e7f7      	b.n	800c804 <__ieee754_powf+0x554>
 800c814:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c818:	e562      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c81a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800c84c <__ieee754_powf+0x59c>
 800c81e:	e55f      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c820:	eeb0 0a48 	vmov.f32	s0, s16
 800c824:	e55c      	b.n	800c2e0 <__ieee754_powf+0x30>
 800c826:	bf00      	nop
 800c828:	ff800000 	.word	0xff800000
 800c82c:	3f317218 	.word	0x3f317218
 800c830:	3f317200 	.word	0x3f317200
 800c834:	35bfbe8c 	.word	0x35bfbe8c
 800c838:	b5ddea0e 	.word	0xb5ddea0e
 800c83c:	3331bb4c 	.word	0x3331bb4c
 800c840:	388ab355 	.word	0x388ab355
 800c844:	bb360b61 	.word	0xbb360b61
 800c848:	3e2aaaab 	.word	0x3e2aaaab
 800c84c:	00000000 	.word	0x00000000

0800c850 <fabsf>:
 800c850:	ee10 3a10 	vmov	r3, s0
 800c854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c858:	ee00 3a10 	vmov	s0, r3
 800c85c:	4770      	bx	lr
	...

0800c860 <scalbn>:
 800c860:	b570      	push	{r4, r5, r6, lr}
 800c862:	ec55 4b10 	vmov	r4, r5, d0
 800c866:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c86a:	4606      	mov	r6, r0
 800c86c:	462b      	mov	r3, r5
 800c86e:	b991      	cbnz	r1, 800c896 <scalbn+0x36>
 800c870:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c874:	4323      	orrs	r3, r4
 800c876:	d03d      	beq.n	800c8f4 <scalbn+0x94>
 800c878:	4b35      	ldr	r3, [pc, #212]	@ (800c950 <scalbn+0xf0>)
 800c87a:	4620      	mov	r0, r4
 800c87c:	4629      	mov	r1, r5
 800c87e:	2200      	movs	r2, #0
 800c880:	f7f3 fec2 	bl	8000608 <__aeabi_dmul>
 800c884:	4b33      	ldr	r3, [pc, #204]	@ (800c954 <scalbn+0xf4>)
 800c886:	429e      	cmp	r6, r3
 800c888:	4604      	mov	r4, r0
 800c88a:	460d      	mov	r5, r1
 800c88c:	da0f      	bge.n	800c8ae <scalbn+0x4e>
 800c88e:	a328      	add	r3, pc, #160	@ (adr r3, 800c930 <scalbn+0xd0>)
 800c890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c894:	e01e      	b.n	800c8d4 <scalbn+0x74>
 800c896:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c89a:	4291      	cmp	r1, r2
 800c89c:	d10b      	bne.n	800c8b6 <scalbn+0x56>
 800c89e:	4622      	mov	r2, r4
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	f7f3 fcfa 	bl	800029c <__adddf3>
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	460d      	mov	r5, r1
 800c8ac:	e022      	b.n	800c8f4 <scalbn+0x94>
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c8b4:	3936      	subs	r1, #54	@ 0x36
 800c8b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c8ba:	4296      	cmp	r6, r2
 800c8bc:	dd0d      	ble.n	800c8da <scalbn+0x7a>
 800c8be:	2d00      	cmp	r5, #0
 800c8c0:	a11d      	add	r1, pc, #116	@ (adr r1, 800c938 <scalbn+0xd8>)
 800c8c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8c6:	da02      	bge.n	800c8ce <scalbn+0x6e>
 800c8c8:	a11d      	add	r1, pc, #116	@ (adr r1, 800c940 <scalbn+0xe0>)
 800c8ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ce:	a31a      	add	r3, pc, #104	@ (adr r3, 800c938 <scalbn+0xd8>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	f7f3 fe98 	bl	8000608 <__aeabi_dmul>
 800c8d8:	e7e6      	b.n	800c8a8 <scalbn+0x48>
 800c8da:	1872      	adds	r2, r6, r1
 800c8dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c8e0:	428a      	cmp	r2, r1
 800c8e2:	dcec      	bgt.n	800c8be <scalbn+0x5e>
 800c8e4:	2a00      	cmp	r2, #0
 800c8e6:	dd08      	ble.n	800c8fa <scalbn+0x9a>
 800c8e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c8ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c8f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c8f4:	ec45 4b10 	vmov	d0, r4, r5
 800c8f8:	bd70      	pop	{r4, r5, r6, pc}
 800c8fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c8fe:	da08      	bge.n	800c912 <scalbn+0xb2>
 800c900:	2d00      	cmp	r5, #0
 800c902:	a10b      	add	r1, pc, #44	@ (adr r1, 800c930 <scalbn+0xd0>)
 800c904:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c908:	dac1      	bge.n	800c88e <scalbn+0x2e>
 800c90a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c948 <scalbn+0xe8>)
 800c90c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c910:	e7bd      	b.n	800c88e <scalbn+0x2e>
 800c912:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c916:	3236      	adds	r2, #54	@ 0x36
 800c918:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c91c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c920:	4620      	mov	r0, r4
 800c922:	4b0d      	ldr	r3, [pc, #52]	@ (800c958 <scalbn+0xf8>)
 800c924:	4629      	mov	r1, r5
 800c926:	2200      	movs	r2, #0
 800c928:	e7d4      	b.n	800c8d4 <scalbn+0x74>
 800c92a:	bf00      	nop
 800c92c:	f3af 8000 	nop.w
 800c930:	c2f8f359 	.word	0xc2f8f359
 800c934:	01a56e1f 	.word	0x01a56e1f
 800c938:	8800759c 	.word	0x8800759c
 800c93c:	7e37e43c 	.word	0x7e37e43c
 800c940:	8800759c 	.word	0x8800759c
 800c944:	fe37e43c 	.word	0xfe37e43c
 800c948:	c2f8f359 	.word	0xc2f8f359
 800c94c:	81a56e1f 	.word	0x81a56e1f
 800c950:	43500000 	.word	0x43500000
 800c954:	ffff3cb0 	.word	0xffff3cb0
 800c958:	3c900000 	.word	0x3c900000

0800c95c <with_errno>:
 800c95c:	b510      	push	{r4, lr}
 800c95e:	ed2d 8b02 	vpush	{d8}
 800c962:	eeb0 8a40 	vmov.f32	s16, s0
 800c966:	eef0 8a60 	vmov.f32	s17, s1
 800c96a:	4604      	mov	r4, r0
 800c96c:	f7fb f954 	bl	8007c18 <__errno>
 800c970:	eeb0 0a48 	vmov.f32	s0, s16
 800c974:	eef0 0a68 	vmov.f32	s1, s17
 800c978:	ecbd 8b02 	vpop	{d8}
 800c97c:	6004      	str	r4, [r0, #0]
 800c97e:	bd10      	pop	{r4, pc}

0800c980 <xflow>:
 800c980:	4603      	mov	r3, r0
 800c982:	b507      	push	{r0, r1, r2, lr}
 800c984:	ec51 0b10 	vmov	r0, r1, d0
 800c988:	b183      	cbz	r3, 800c9ac <xflow+0x2c>
 800c98a:	4602      	mov	r2, r0
 800c98c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c990:	e9cd 2300 	strd	r2, r3, [sp]
 800c994:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c998:	f7f3 fe36 	bl	8000608 <__aeabi_dmul>
 800c99c:	ec41 0b10 	vmov	d0, r0, r1
 800c9a0:	2022      	movs	r0, #34	@ 0x22
 800c9a2:	b003      	add	sp, #12
 800c9a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9a8:	f7ff bfd8 	b.w	800c95c <with_errno>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	e7ee      	b.n	800c990 <xflow+0x10>
 800c9b2:	0000      	movs	r0, r0
 800c9b4:	0000      	movs	r0, r0
	...

0800c9b8 <__math_uflow>:
 800c9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9c0 <__math_uflow+0x8>
 800c9bc:	f7ff bfe0 	b.w	800c980 <xflow>
 800c9c0:	00000000 	.word	0x00000000
 800c9c4:	10000000 	.word	0x10000000

0800c9c8 <__math_oflow>:
 800c9c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9d0 <__math_oflow+0x8>
 800c9cc:	f7ff bfd8 	b.w	800c980 <xflow>
 800c9d0:	00000000 	.word	0x00000000
 800c9d4:	70000000 	.word	0x70000000

0800c9d8 <scalbnf>:
 800c9d8:	ee10 3a10 	vmov	r3, s0
 800c9dc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c9e0:	d02b      	beq.n	800ca3a <scalbnf+0x62>
 800c9e2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c9e6:	d302      	bcc.n	800c9ee <scalbnf+0x16>
 800c9e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c9ec:	4770      	bx	lr
 800c9ee:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c9f2:	d123      	bne.n	800ca3c <scalbnf+0x64>
 800c9f4:	4b24      	ldr	r3, [pc, #144]	@ (800ca88 <scalbnf+0xb0>)
 800c9f6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ca8c <scalbnf+0xb4>
 800c9fa:	4298      	cmp	r0, r3
 800c9fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ca00:	db17      	blt.n	800ca32 <scalbnf+0x5a>
 800ca02:	ee10 3a10 	vmov	r3, s0
 800ca06:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ca0a:	3a19      	subs	r2, #25
 800ca0c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ca10:	4288      	cmp	r0, r1
 800ca12:	dd15      	ble.n	800ca40 <scalbnf+0x68>
 800ca14:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800ca90 <scalbnf+0xb8>
 800ca18:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800ca94 <scalbnf+0xbc>
 800ca1c:	ee10 3a10 	vmov	r3, s0
 800ca20:	eeb0 7a67 	vmov.f32	s14, s15
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	bfb8      	it	lt
 800ca28:	eef0 7a66 	vmovlt.f32	s15, s13
 800ca2c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ca30:	4770      	bx	lr
 800ca32:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ca98 <scalbnf+0xc0>
 800ca36:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ca3a:	4770      	bx	lr
 800ca3c:	0dd2      	lsrs	r2, r2, #23
 800ca3e:	e7e5      	b.n	800ca0c <scalbnf+0x34>
 800ca40:	4410      	add	r0, r2
 800ca42:	28fe      	cmp	r0, #254	@ 0xfe
 800ca44:	dce6      	bgt.n	800ca14 <scalbnf+0x3c>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	dd06      	ble.n	800ca58 <scalbnf+0x80>
 800ca4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ca4e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ca52:	ee00 3a10 	vmov	s0, r3
 800ca56:	4770      	bx	lr
 800ca58:	f110 0f16 	cmn.w	r0, #22
 800ca5c:	da09      	bge.n	800ca72 <scalbnf+0x9a>
 800ca5e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800ca98 <scalbnf+0xc0>
 800ca62:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800ca9c <scalbnf+0xc4>
 800ca66:	ee10 3a10 	vmov	r3, s0
 800ca6a:	eeb0 7a67 	vmov.f32	s14, s15
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	e7d9      	b.n	800ca26 <scalbnf+0x4e>
 800ca72:	3019      	adds	r0, #25
 800ca74:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ca78:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ca7c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800caa0 <scalbnf+0xc8>
 800ca80:	ee07 3a90 	vmov	s15, r3
 800ca84:	e7d7      	b.n	800ca36 <scalbnf+0x5e>
 800ca86:	bf00      	nop
 800ca88:	ffff3cb0 	.word	0xffff3cb0
 800ca8c:	4c000000 	.word	0x4c000000
 800ca90:	7149f2ca 	.word	0x7149f2ca
 800ca94:	f149f2ca 	.word	0xf149f2ca
 800ca98:	0da24260 	.word	0x0da24260
 800ca9c:	8da24260 	.word	0x8da24260
 800caa0:	33000000 	.word	0x33000000

0800caa4 <with_errnof>:
 800caa4:	b510      	push	{r4, lr}
 800caa6:	ed2d 8b02 	vpush	{d8}
 800caaa:	eeb0 8a40 	vmov.f32	s16, s0
 800caae:	4604      	mov	r4, r0
 800cab0:	f7fb f8b2 	bl	8007c18 <__errno>
 800cab4:	eeb0 0a48 	vmov.f32	s0, s16
 800cab8:	ecbd 8b02 	vpop	{d8}
 800cabc:	6004      	str	r4, [r0, #0]
 800cabe:	bd10      	pop	{r4, pc}

0800cac0 <xflowf>:
 800cac0:	b130      	cbz	r0, 800cad0 <xflowf+0x10>
 800cac2:	eef1 7a40 	vneg.f32	s15, s0
 800cac6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800caca:	2022      	movs	r0, #34	@ 0x22
 800cacc:	f7ff bfea 	b.w	800caa4 <with_errnof>
 800cad0:	eef0 7a40 	vmov.f32	s15, s0
 800cad4:	e7f7      	b.n	800cac6 <xflowf+0x6>
	...

0800cad8 <__math_uflowf>:
 800cad8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cae0 <__math_uflowf+0x8>
 800cadc:	f7ff bff0 	b.w	800cac0 <xflowf>
 800cae0:	10000000 	.word	0x10000000

0800cae4 <__math_oflowf>:
 800cae4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800caec <__math_oflowf+0x8>
 800cae8:	f7ff bfea 	b.w	800cac0 <xflowf>
 800caec:	70000000 	.word	0x70000000

0800caf0 <_init>:
 800caf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caf2:	bf00      	nop
 800caf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caf6:	bc08      	pop	{r3}
 800caf8:	469e      	mov	lr, r3
 800cafa:	4770      	bx	lr

0800cafc <_fini>:
 800cafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafe:	bf00      	nop
 800cb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb02:	bc08      	pop	{r3}
 800cb04:	469e      	mov	lr, r3
 800cb06:	4770      	bx	lr
