
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b39c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800b540  0800b540  0001b540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9f8  0800b9f8  00020280  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba00  0800ba00  00020280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba00  0800ba00  0001ba00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba04  0800ba04  0001ba04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0800ba08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000280  0800bc88  00020280  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800bc88  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e87  00000000  00000000  000202f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ee  00000000  00000000  0003217a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00034b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd8  00000000  00000000  00035bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183a7  00000000  00000000  00036898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154b5  00000000  00000000  0004ec3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000921d5  00000000  00000000  000640f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b80  00000000  00000000  000f62cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000fbe4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000280 	.word	0x20000280
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b524 	.word	0x0800b524

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000284 	.word	0x20000284
 80001dc:	0800b524 	.word	0x0800b524

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800103c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <MX_GPIO_Init+0xb8>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MX_GPIO_Init+0xb8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <MX_GPIO_Init+0xbc>)
 800108e:	f001 ffbd 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_GPIO_Init+0xbc>)
 80010ac:	f001 fe2a 	bl	8002d04 <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020800 	.word	0x40020800

080010c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f001 ff9f 	bl	8003040 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f000 fc9c 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000029c 	.word	0x2000029c
 8001114:	40005400 	.word	0x40005400
 8001118:	00061a80 	.word	0x00061a80

0800111c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_I2C_MspInit+0x94>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d134      	bne.n	80011a8 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a1b      	ldr	r2, [pc, #108]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800115a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	2312      	movs	r3, #18
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800116c:	2304      	movs	r3, #4
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4810      	ldr	r0, [pc, #64]	; (80011b8 <HAL_I2C_MspInit+0x9c>)
 8001178:	f001 fdc4 	bl	8002d04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 8001186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800118a:	6413      	str	r3, [r2, #64]	; 0x40
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_I2C_MspInit+0x98>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	201f      	movs	r0, #31
 800119e:	f001 fce8 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011a2:	201f      	movs	r0, #31
 80011a4:	f001 fd01 	bl	8002baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020400 	.word	0x40020400

080011bc <PID_init>:
void apply_speed(); // applies the desired speed from -100 to 100 to robots.
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PID_init(PIDController *pid, float kp, float ki, float kd, float setpoint) {
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6178      	str	r0, [r7, #20]
 80011c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80011c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80011cc:	ed87 1a02 	vstr	s2, [r7, #8]
 80011d0:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->kp = kp;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]
    pid->integral = 0;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
}
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <PID_compute>:

float PID_compute(PIDController *pid, float input) {
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	ed87 0a00 	vstr	s0, [r7]
	float error = pid->setpoint - input;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	ed93 7a03 	vldr	s14, [r3, #12]
 800121a:	edd7 7a00 	vldr	s15, [r7]
 800121e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001222:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->integral += error;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	ed93 7a04 	vldr	s14, [r3, #16]
 800122c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edc3 7a04 	vstr	s15, [r3, #16]
    float derivative = error - pid->prev_error;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001240:	ed97 7a05 	vldr	s14, [r7, #20]
 8001244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001248:	edc7 7a04 	vstr	s15, [r7, #16]
    float output = pid->kp * error + pid->ki * pid->integral + pid->kd * derivative;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	ed93 7a00 	vldr	s14, [r3]
 8001252:	edd7 7a05 	vldr	s15, [r7, #20]
 8001256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	edd3 7a04 	vldr	s15, [r3, #16]
 8001266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 6a02 	vldr	s13, [r3, #8]
 8001274:	edd7 7a04 	vldr	s15, [r7, #16]
 8001278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001280:	edc7 7a03 	vstr	s15, [r7, #12]
    pid->prev_error = error;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	615a      	str	r2, [r3, #20]
    return output;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	ee07 3a90 	vmov	s15, r3
}
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <apply_speed>:

void apply_speed()
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
	// if current_speed = 0, stop!
	if (current_speed == 0)
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <apply_speed+0x124>)
 80012a8:	f993 3000 	ldrsb.w	r3, [r3]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d109      	bne.n	80012c4 <apply_speed+0x24>
	{
		TIM1->CCR1 = MOTOR_STOP;
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <apply_speed+0x128>)
 80012b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR3 = MOTOR_STOP;
 80012b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80012c0:	63da      	str	r2, [r3, #60]	; 0x3c
		return;
 80012c2:	e07b      	b.n	80013bc <apply_speed+0x11c>
	}
	// else
	// PID control
	MPU6050_Read_All(&hi2c1, &MPU6050);
 80012c4:	4941      	ldr	r1, [pc, #260]	; (80013cc <apply_speed+0x12c>)
 80012c6:	4842      	ldr	r0, [pc, #264]	; (80013d0 <apply_speed+0x130>)
 80012c8:	f000 fc1a 	bl	8001b00 <MPU6050_Read_All>
	current_Gz = MPU6050.Gz - Gz_mean;
 80012cc:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <apply_speed+0x12c>)
 80012ce:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80012d2:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <apply_speed+0x134>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f93e 	bl	8000558 <__aeabi_f2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4620      	mov	r0, r4
 80012e2:	4629      	mov	r1, r5
 80012e4:	f7fe ffd8 	bl	8000298 <__aeabi_dsub>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f7ff fc82 	bl	8000bf8 <__aeabi_d2f>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <apply_speed+0x138>)
 80012f8:	6013      	str	r3, [r2, #0]
	control_signal = PID_compute(&pid_m, current_Gz)/2;
 80012fa:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <apply_speed+0x138>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	4835      	ldr	r0, [pc, #212]	; (80013dc <apply_speed+0x13c>)
 8001306:	f7ff ff7f 	bl	8001208 <PID_compute>
 800130a:	eeb0 7a40 	vmov.f32	s14, s0
 800130e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <apply_speed+0x140>)
 8001318:	edc3 7a00 	vstr	s15, [r3]

	// core speed is a number in the range MOTOR_SLOW (>0) - MOTOR_MAX (<=100)
	int core_speed =  (MOTOR_SLOW_1 - MOTOR_MAX_1) / 100.0f * abs(current_speed);
 800131c:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <apply_speed+0x124>)
 800131e:	f993 3000 	ldrsb.w	r3, [r3]
 8001322:	2b00      	cmp	r3, #0
 8001324:	bfb8      	it	lt
 8001326:	425b      	neglt	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001332:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133e:	ee17 3a90 	vmov	r3, s15
 8001342:	607b      	str	r3, [r7, #4]
	if (current_speed > 0) // forward
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <apply_speed+0x124>)
 8001346:	f993 3000 	ldrsb.w	r3, [r3]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dd1b      	ble.n	8001386 <apply_speed+0xe6>
	{
		TIM1->CCR1 = MOTOR_SLOW_1 - core_speed + (int)control_signal;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f5c3 632f 	rsb	r3, r3, #2800	; 0xaf0
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <apply_speed+0x140>)
 8001356:	edd2 7a00 	vldr	s15, [r2]
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	ee17 2a90 	vmov	r2, s15
 8001362:	441a      	add	r2, r3
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <apply_speed+0x128>)
 8001366:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR3 = MOTOR_SLOW_2 + core_speed - (int)control_signal;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 800136e:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <apply_speed+0x140>)
 8001370:	edd2 7a00 	vldr	s15, [r2]
 8001374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001378:	ee17 2a90 	vmov	r2, s15
 800137c:	1a9a      	subs	r2, r3, r2
 800137e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
 8001384:	e01a      	b.n	80013bc <apply_speed+0x11c>
	}
	else // backward
	{
		TIM1->CCR1 = MOTOR_SLOW_2 + core_speed - (int)control_signal;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <apply_speed+0x140>)
 800138e:	edd2 7a00 	vldr	s15, [r2]
 8001392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001396:	ee17 2a90 	vmov	r2, s15
 800139a:	1a9a      	subs	r2, r3, r2
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <apply_speed+0x128>)
 800139e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR3 = MOTOR_SLOW_1 - core_speed + (int)control_signal;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f5c3 632f 	rsb	r3, r3, #2800	; 0xaf0
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <apply_speed+0x140>)
 80013a8:	edd2 7a00 	vldr	s15, [r2]
 80013ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b0:	ee17 2a90 	vmov	r2, s15
 80013b4:	441a      	add	r2, r3
 80013b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
	}
}
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bdb0      	pop	{r4, r5, r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000391 	.word	0x20000391
 80013c8:	40010000 	.word	0x40010000
 80013cc:	200002f0 	.word	0x200002f0
 80013d0:	2000029c 	.word	0x2000029c
 80013d4:	20000350 	.word	0x20000350
 80013d8:	20000388 	.word	0x20000388
 80013dc:	20000358 	.word	0x20000358
 80013e0:	2000038c 	.word	0x2000038c

080013e4 <speed_ctl>:

void speed_ctl()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	// if current_speed = 0, stop!
	if (current_speed == 0)
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <speed_ctl+0x48>)
 80013ea:	f993 3000 	ldrsb.w	r3, [r3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10a      	bne.n	8001408 <speed_ctl+0x24>
	{
		// renew PID controller, no I or D term should come from the previous movement
		// params = Kp, Ki, Kd, setpoint = 0
		PID_init(&pid_m, 1.5, 1, 0, 0);
 80013f2:	eddf 1a0f 	vldr	s3, [pc, #60]	; 8001430 <speed_ctl+0x4c>
 80013f6:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8001430 <speed_ctl+0x4c>
 80013fa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80013fe:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <speed_ctl+0x50>)
 8001404:	f7ff feda 	bl	80011bc <PID_init>
	}
	if (current_speed != speed)
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <speed_ctl+0x48>)
 800140a:	f993 2000 	ldrsb.w	r2, [r3]
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <speed_ctl+0x54>)
 8001410:	f993 3000 	ldrsb.w	r3, [r3]
 8001414:	429a      	cmp	r2, r3
 8001416:	d004      	beq.n	8001422 <speed_ctl+0x3e>
	{
		current_speed = speed;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <speed_ctl+0x54>)
 800141a:	f993 2000 	ldrsb.w	r2, [r3]
 800141e:	4b03      	ldr	r3, [pc, #12]	; (800142c <speed_ctl+0x48>)
 8001420:	701a      	strb	r2, [r3, #0]
			current_speed -= ACCELERATION;
			if (current_speed < speed)  // if it passed the desired speed
				current_speed = speed;
		}*/
	}
	apply_speed();
 8001422:	f7ff ff3d 	bl	80012a0 <apply_speed>
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000391 	.word	0x20000391
 8001430:	00000000 	.word	0x00000000
 8001434:	20000358 	.word	0x20000358
 8001438:	20000390 	.word	0x20000390
 800143c:	00000000 	.word	0x00000000

08001440 <rotate>:

void rotate(float angle)
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a01 	vstr	s0, [r7, #4]
	/*if (angle > 0)
		angle -= 7;
	else
		angle += 7;*/
	double total_Gz = 0;
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	e9c7 2304 	strd	r2, r3, [r7, #16]

	int delay = 5;
 8001456:	2305      	movs	r3, #5
 8001458:	60fb      	str	r3, [r7, #12]
	// freeze the robot slowly
	speed = 0;
 800145a:	4b69      	ldr	r3, [pc, #420]	; (8001600 <rotate+0x1c0>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
	while(current_speed != 0)
 8001460:	e001      	b.n	8001466 <rotate+0x26>
		speed_ctl();
 8001462:	f7ff ffbf 	bl	80013e4 <speed_ctl>
	while(current_speed != 0)
 8001466:	4b67      	ldr	r3, [pc, #412]	; (8001604 <rotate+0x1c4>)
 8001468:	f993 3000 	ldrsb.w	r3, [r3]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f8      	bne.n	8001462 <rotate+0x22>

	PID_init(&pid_r, 10, 0, 0, angle);
 8001470:	edd7 1a01 	vldr	s3, [r7, #4]
 8001474:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8001608 <rotate+0x1c8>
 8001478:	eddf 0a63 	vldr	s1, [pc, #396]	; 8001608 <rotate+0x1c8>
 800147c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001480:	4862      	ldr	r0, [pc, #392]	; (800160c <rotate+0x1cc>)
 8001482:	f7ff fe9b 	bl	80011bc <PID_init>
	while (abs(abs(total_Gz) - abs(angle)) > 0.1)
 8001486:	e091      	b.n	80015ac <rotate+0x16c>
	{
		control_signal = PID_compute(&pid_r, total_Gz);
 8001488:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800148c:	f7ff fbb4 	bl	8000bf8 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	ee00 3a10 	vmov	s0, r3
 8001496:	485d      	ldr	r0, [pc, #372]	; (800160c <rotate+0x1cc>)
 8001498:	f7ff feb6 	bl	8001208 <PID_compute>
 800149c:	eef0 7a40 	vmov.f32	s15, s0
 80014a0:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <rotate+0x1d0>)
 80014a2:	edc3 7a00 	vstr	s15, [r3]
		if (control_signal > 0) // cw
 80014a6:	4b5a      	ldr	r3, [pc, #360]	; (8001610 <rotate+0x1d0>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	dd1b      	ble.n	80014ee <rotate+0xae>
		{
			TIM1->CCR1 = MOTOR_SLOW_1 - control_signal;
 80014b6:	4b56      	ldr	r3, [pc, #344]	; (8001610 <rotate+0x1d0>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001614 <rotate+0x1d4>
 80014c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c4:	4b54      	ldr	r3, [pc, #336]	; (8001618 <rotate+0x1d8>)
 80014c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ca:	ee17 2a90 	vmov	r2, s15
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR3 = MOTOR_SLOW_1 - control_signal;
 80014d0:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <rotate+0x1d0>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001614 <rotate+0x1d4>
 80014da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e6:	ee17 2a90 	vmov	r2, s15
 80014ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80014ec:	e01a      	b.n	8001524 <rotate+0xe4>
		}
		else // ccw
		{
			TIM1->CCR1 = MOTOR_SLOW_2 + control_signal;;
 80014ee:	4b48      	ldr	r3, [pc, #288]	; (8001610 <rotate+0x1d0>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800161c <rotate+0x1dc>
 80014f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fc:	4b46      	ldr	r3, [pc, #280]	; (8001618 <rotate+0x1d8>)
 80014fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001502:	ee17 2a90 	vmov	r2, s15
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR3 = MOTOR_SLOW_2 + control_signal;;
 8001508:	4b41      	ldr	r3, [pc, #260]	; (8001610 <rotate+0x1d0>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800161c <rotate+0x1dc>
 8001512:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800151a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		HAL_Delay(delay);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fa24 	bl	8002974 <HAL_Delay>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 800152c:	493c      	ldr	r1, [pc, #240]	; (8001620 <rotate+0x1e0>)
 800152e:	483d      	ldr	r0, [pc, #244]	; (8001624 <rotate+0x1e4>)
 8001530:	f000 fae6 	bl	8001b00 <MPU6050_Read_All>
		current_Gz = (MPU6050.Gz - Gz_mean) * 1.18;
 8001534:	4b3a      	ldr	r3, [pc, #232]	; (8001620 <rotate+0x1e0>)
 8001536:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <rotate+0x1e8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f80a 	bl	8000558 <__aeabi_f2d>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe fea4 	bl	8000298 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	a327      	add	r3, pc, #156	; (adr r3, 80015f8 <rotate+0x1b8>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f853 	bl	8000608 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fb45 	bl	8000bf8 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	4a2e      	ldr	r2, [pc, #184]	; (800162c <rotate+0x1ec>)
 8001572:	6013      	str	r3, [r2, #0]
		total_Gz += current_Gz / 1000.0f * delay;
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <rotate+0x1ec>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8001630 <rotate+0x1f0>
 800157e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800158c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001590:	ee17 0a90 	vmov	r0, s15
 8001594:	f7fe ffe0 	bl	8000558 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015a0:	f7fe fe7c 	bl	800029c <__adddf3>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while (abs(abs(total_Gz) - abs(angle)) > 0.1)
 80015ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015b0:	f7ff fada 	bl	8000b68 <__aeabi_d2iz>
 80015b4:	4603      	mov	r3, r0
 80015b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015be:	edd7 7a01 	vldr	s15, [r7, #4]
 80015c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c6:	ee17 3a90 	vmov	r3, s15
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bfb8      	it	lt
 80015ce:	425b      	neglt	r3, r3
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bfb8      	it	lt
 80015d6:	425b      	neglt	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f73f af55 	bgt.w	8001488 <rotate+0x48>
	}

	TIM1->CCR1 = 0;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <rotate+0x1d8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR3 = 0;
 80015e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e8:	2200      	movs	r2, #0
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdb0      	pop	{r4, r5, r7, pc}
 80015f4:	f3af 8000 	nop.w
 80015f8:	ae147ae1 	.word	0xae147ae1
 80015fc:	3ff2e147 	.word	0x3ff2e147
 8001600:	20000390 	.word	0x20000390
 8001604:	20000391 	.word	0x20000391
 8001608:	00000000 	.word	0x00000000
 800160c:	20000370 	.word	0x20000370
 8001610:	2000038c 	.word	0x2000038c
 8001614:	452f0000 	.word	0x452f0000
 8001618:	40010000 	.word	0x40010000
 800161c:	4541c000 	.word	0x4541c000
 8001620:	200002f0 	.word	0x200002f0
 8001624:	2000029c 	.word	0x2000029c
 8001628:	20000350 	.word	0x20000350
 800162c:	20000388 	.word	0x20000388
 8001630:	447a0000 	.word	0x447a0000

08001634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163a:	f001 f929 	bl	8002890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163e:	f000 f967 	bl	8001910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001642:	f7ff fcdd 	bl	8001000 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001646:	f000 fed1 	bl	80023ec <MX_TIM1_Init>
  MX_TIM2_Init();
 800164a:	f000 ff6f 	bl	800252c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800164e:	f001 f87b 	bl	8002748 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001652:	f7ff fd35 	bl	80010c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8001656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165a:	f001 f98b 	bl	8002974 <HAL_Delay>
  while (MPU6050_Init(&hi2c1) == 1); //Initialise the MPU6050
 800165e:	bf00      	nop
 8001660:	4899      	ldr	r0, [pc, #612]	; (80018c8 <main+0x294>)
 8001662:	f000 f9f4 	bl	8001a4e <MPU6050_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b01      	cmp	r3, #1
 800166a:	d0f9      	beq.n	8001660 <main+0x2c>
  // calibrate MPU6050
  for(uint8_t interations = 0; interations < CALIB; interations++)
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]
 8001670:	e02c      	b.n	80016cc <main+0x98>
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001672:	4996      	ldr	r1, [pc, #600]	; (80018cc <main+0x298>)
 8001674:	4894      	ldr	r0, [pc, #592]	; (80018c8 <main+0x294>)
 8001676:	f000 fa43 	bl	8001b00 <MPU6050_Read_All>
	  Gz_mean += MPU6050.Gz;
 800167a:	4b95      	ldr	r3, [pc, #596]	; (80018d0 <main+0x29c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff6a 	bl	8000558 <__aeabi_f2d>
 8001684:	4b91      	ldr	r3, [pc, #580]	; (80018cc <main+0x298>)
 8001686:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800168a:	f7fe fe07 	bl	800029c <__adddf3>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff faaf 	bl	8000bf8 <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4a8c      	ldr	r2, [pc, #560]	; (80018d0 <main+0x29c>)
 800169e:	6013      	str	r3, [r2, #0]
	  Ay_mean += MPU6050.Ay;
 80016a0:	4b8c      	ldr	r3, [pc, #560]	; (80018d4 <main+0x2a0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff57 	bl	8000558 <__aeabi_f2d>
 80016aa:	4b88      	ldr	r3, [pc, #544]	; (80018cc <main+0x298>)
 80016ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80016b0:	f7fe fdf4 	bl	800029c <__adddf3>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f7ff fa9c 	bl	8000bf8 <__aeabi_d2f>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4a84      	ldr	r2, [pc, #528]	; (80018d4 <main+0x2a0>)
 80016c4:	6013      	str	r3, [r2, #0]
  for(uint8_t interations = 0; interations < CALIB; interations++)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	3301      	adds	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b63      	cmp	r3, #99	; 0x63
 80016d0:	d9cf      	bls.n	8001672 <main+0x3e>
  }
  Gz_mean /= CALIB;
 80016d2:	4b7f      	ldr	r3, [pc, #508]	; (80018d0 <main+0x29c>)
 80016d4:	ed93 7a00 	vldr	s14, [r3]
 80016d8:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80018d8 <main+0x2a4>
 80016dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e0:	4b7b      	ldr	r3, [pc, #492]	; (80018d0 <main+0x29c>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]
  Ay_mean /= CALIB;
 80016e6:	4b7b      	ldr	r3, [pc, #492]	; (80018d4 <main+0x2a0>)
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80018d8 <main+0x2a4>
 80016f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f4:	4b77      	ldr	r3, [pc, #476]	; (80018d4 <main+0x2a0>)
 80016f6:	edc3 7a00 	vstr	s15, [r3]

  HAL_TIM_PWM_Init(&htim1);
 80016fa:	4878      	ldr	r0, [pc, #480]	; (80018dc <main+0x2a8>)
 80016fc:	f003 f907 	bl	800490e <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim2);
 8001700:	4877      	ldr	r0, [pc, #476]	; (80018e0 <main+0x2ac>)
 8001702:	f003 f904 	bl	800490e <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001706:	2100      	movs	r1, #0
 8001708:	4874      	ldr	r0, [pc, #464]	; (80018dc <main+0x2a8>)
 800170a:	f003 f959 	bl	80049c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800170e:	2108      	movs	r1, #8
 8001710:	4873      	ldr	r0, [pc, #460]	; (80018e0 <main+0x2ac>)
 8001712:	f003 f955 	bl	80049c0 <HAL_TIM_PWM_Start>
  TIM1->CR1 = 0x01;
 8001716:	4b73      	ldr	r3, [pc, #460]	; (80018e4 <main+0x2b0>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  TIM2->CR1 = 0x01;
 800171c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 8001724:	2201      	movs	r2, #1
 8001726:	4970      	ldr	r1, [pc, #448]	; (80018e8 <main+0x2b4>)
 8001728:	4870      	ldr	r0, [pc, #448]	; (80018ec <main+0x2b8>)
 800172a:	f003 ffee 	bl	800570a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// check if there is any new command
	if (USART_recive == 1)
 800172e:	4b70      	ldr	r3, [pc, #448]	; (80018f0 <main+0x2bc>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d160      	bne.n	80017f8 <main+0x1c4>
	{
	  char *delimiter = " ";
 8001736:	4b6f      	ldr	r3, [pc, #444]	; (80018f4 <main+0x2c0>)
 8001738:	60bb      	str	r3, [r7, #8]
	  char *saveptr;
	  char *token;
	  token = strtok_r(rx_buffer, delimiter, &saveptr);
 800173a:	463b      	mov	r3, r7
 800173c:	461a      	mov	r2, r3
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	486d      	ldr	r0, [pc, #436]	; (80018f8 <main+0x2c4>)
 8001742:	f005 ffc6 	bl	80076d2 <strtok_r>
 8001746:	6078      	str	r0, [r7, #4]
	  if (token != NULL) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <main+0x124>
		  command = token[0];
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <main+0x2c8>)
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e002      	b.n	800175e <main+0x12a>
	  }
	  else
	  {
		  command = COMMAND_NC; // failed to read the command, so drop it
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <main+0x2c8>)
 800175a:	224e      	movs	r2, #78	; 0x4e
 800175c:	701a      	strb	r2, [r3, #0]
	  }
	  // commands with 1 or 2 arguments
	  if (command == COMMAND_MOVE || command == COMMAND_ROTATE || command == COMMAND_LOCATION || command == COMMAND_GOAL)
 800175e:	4b67      	ldr	r3, [pc, #412]	; (80018fc <main+0x2c8>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b4d      	cmp	r3, #77	; 0x4d
 8001764:	d00b      	beq.n	800177e <main+0x14a>
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <main+0x2c8>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b52      	cmp	r3, #82	; 0x52
 800176c:	d007      	beq.n	800177e <main+0x14a>
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <main+0x2c8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b4c      	cmp	r3, #76	; 0x4c
 8001774:	d003      	beq.n	800177e <main+0x14a>
 8001776:	4b61      	ldr	r3, [pc, #388]	; (80018fc <main+0x2c8>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b47      	cmp	r3, #71	; 0x47
 800177c:	d133      	bne.n	80017e6 <main+0x1b2>
	  {
		  token = strtok_r(NULL, delimiter, &saveptr);
 800177e:	463b      	mov	r3, r7
 8001780:	461a      	mov	r2, r3
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	2000      	movs	r0, #0
 8001786:	f005 ffa4 	bl	80076d2 <strtok_r>
 800178a:	6078      	str	r0, [r7, #4]
		  if (token != NULL) {
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <main+0x16c>
			  Arg1 = atoi(token);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f004 ff52 	bl	800663c <atoi>
 8001798:	4603      	mov	r3, r0
 800179a:	4a59      	ldr	r2, [pc, #356]	; (8001900 <main+0x2cc>)
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e002      	b.n	80017a6 <main+0x172>
		  }
		  else
		  {
			  command = COMMAND_NC; // failed to read arguments, so drop the command
 80017a0:	4b56      	ldr	r3, [pc, #344]	; (80018fc <main+0x2c8>)
 80017a2:	224e      	movs	r2, #78	; 0x4e
 80017a4:	701a      	strb	r2, [r3, #0]
		  }
		  // commands with a second argument
		  if (command == COMMAND_MOVE || command == COMMAND_LOCATION || command == COMMAND_GOAL)
 80017a6:	4b55      	ldr	r3, [pc, #340]	; (80018fc <main+0x2c8>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b4d      	cmp	r3, #77	; 0x4d
 80017ac:	d007      	beq.n	80017be <main+0x18a>
 80017ae:	4b53      	ldr	r3, [pc, #332]	; (80018fc <main+0x2c8>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b4c      	cmp	r3, #76	; 0x4c
 80017b4:	d003      	beq.n	80017be <main+0x18a>
 80017b6:	4b51      	ldr	r3, [pc, #324]	; (80018fc <main+0x2c8>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b47      	cmp	r3, #71	; 0x47
 80017bc:	d113      	bne.n	80017e6 <main+0x1b2>
		  {
			  token = strtok_r(NULL, delimiter, &saveptr);
 80017be:	463b      	mov	r3, r7
 80017c0:	461a      	mov	r2, r3
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	2000      	movs	r0, #0
 80017c6:	f005 ff84 	bl	80076d2 <strtok_r>
 80017ca:	6078      	str	r0, [r7, #4]
			  if (token != NULL) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <main+0x1ac>
				  Arg2 = atoi(token);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f004 ff32 	bl	800663c <atoi>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <main+0x2d0>)
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e002      	b.n	80017e6 <main+0x1b2>
			  }
			  else
			  {
				  command = COMMAND_NC; // failed to read arguments, so drop the command
 80017e0:	4b46      	ldr	r3, [pc, #280]	; (80018fc <main+0x2c8>)
 80017e2:	224e      	movs	r2, #78	; 0x4e
 80017e4:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  USART_recive = 0;
 80017e6:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <main+0x2bc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t *)("OK!"), sizeof("OK!"), 100);
 80017ec:	2364      	movs	r3, #100	; 0x64
 80017ee:	2204      	movs	r2, #4
 80017f0:	4945      	ldr	r1, [pc, #276]	; (8001908 <main+0x2d4>)
 80017f2:	483e      	ldr	r0, [pc, #248]	; (80018ec <main+0x2b8>)
 80017f4:	f003 fef7 	bl	80055e6 <HAL_UART_Transmit>
	}
	// handle current command
	switch(command)
 80017f8:	4b40      	ldr	r3, [pc, #256]	; (80018fc <main+0x2c8>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3b48      	subs	r3, #72	; 0x48
 80017fe:	2b0a      	cmp	r3, #10
 8001800:	d83a      	bhi.n	8001878 <main+0x244>
 8001802:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <main+0x1d4>)
 8001804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001808:	08001835 	.word	0x08001835
 800180c:	08001879 	.word	0x08001879
 8001810:	08001879 	.word	0x08001879
 8001814:	08001879 	.word	0x08001879
 8001818:	08001879 	.word	0x08001879
 800181c:	08001843 	.word	0x08001843
 8001820:	08001879 	.word	0x08001879
 8001824:	08001879 	.word	0x08001879
 8001828:	08001879 	.word	0x08001879
 800182c:	08001879 	.word	0x08001879
 8001830:	0800185d 	.word	0x0800185d
	case COMMAND_NC:
		// nothing to do
		break;
	case COMMAND_HALT:
		// stop both movement and rotation
		speed = 0;
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <main+0x2d8>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
		command = COMMAND_NC; // command done
 800183a:	4b30      	ldr	r3, [pc, #192]	; (80018fc <main+0x2c8>)
 800183c:	224e      	movs	r2, #78	; 0x4e
 800183e:	701a      	strb	r2, [r3, #0]
		break;
 8001840:	e01d      	b.n	800187e <main+0x24a>
	case COMMAND_MOVE:
		// set speed
		speed = Arg1;
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <main+0x2cc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b25a      	sxtb	r2, r3
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <main+0x2d8>)
 800184a:	701a      	strb	r2, [r3, #0]
		if (Arg2 == 0)
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <main+0x2d0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d113      	bne.n	800187c <main+0x248>
			command = COMMAND_NC; // command done
 8001854:	4b29      	ldr	r3, [pc, #164]	; (80018fc <main+0x2c8>)
 8001856:	224e      	movs	r2, #78	; 0x4e
 8001858:	701a      	strb	r2, [r3, #0]
		break;
 800185a:	e00f      	b.n	800187c <main+0x248>
	case COMMAND_ROTATE:
		rotate(Arg1);
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <main+0x2cc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	ee07 3a90 	vmov	s15, r3
 8001864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	f7ff fde8 	bl	8001440 <rotate>
		command = COMMAND_NC; // command done
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <main+0x2c8>)
 8001872:	224e      	movs	r2, #78	; 0x4e
 8001874:	701a      	strb	r2, [r3, #0]
		break;
 8001876:	e002      	b.n	800187e <main+0x24a>
	default:
		// TODO: implementation of other commands
		break;
 8001878:	bf00      	nop
 800187a:	e000      	b.n	800187e <main+0x24a>
		break;
 800187c:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//robot speed
	MPU6050_Read_All(&hi2c1, &MPU6050);
 800187e:	4913      	ldr	r1, [pc, #76]	; (80018cc <main+0x298>)
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <main+0x294>)
 8001882:	f000 f93d 	bl	8001b00 <MPU6050_Read_All>
	speed_ctl();
 8001886:	f7ff fdad 	bl	80013e4 <speed_ctl>
	HAL_Delay(100);
 800188a:	2064      	movs	r0, #100	; 0x64
 800188c:	f001 f872 	bl	8002974 <HAL_Delay>
	if (command == COMMAND_MOVE && Arg2 > 0)
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <main+0x2c8>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b4d      	cmp	r3, #77	; 0x4d
 8001896:	f47f af4a 	bne.w	800172e <main+0xfa>
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <main+0x2d0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f77f af45 	ble.w	800172e <main+0xfa>
	{
		Arg2 -= 100;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <main+0x2d0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3b64      	subs	r3, #100	; 0x64
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <main+0x2d0>)
 80018ac:	6013      	str	r3, [r2, #0]
		if (Arg2 <= 0)
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <main+0x2d0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f73f af3b 	bgt.w	800172e <main+0xfa>
		{
			speed = 0;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <main+0x2d8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
			command = COMMAND_NC;
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <main+0x2c8>)
 80018c0:	224e      	movs	r2, #78	; 0x4e
 80018c2:	701a      	strb	r2, [r3, #0]
	if (USART_recive == 1)
 80018c4:	e733      	b.n	800172e <main+0xfa>
 80018c6:	bf00      	nop
 80018c8:	2000029c 	.word	0x2000029c
 80018cc:	200002f0 	.word	0x200002f0
 80018d0:	20000350 	.word	0x20000350
 80018d4:	20000354 	.word	0x20000354
 80018d8:	42c80000 	.word	0x42c80000
 80018dc:	200003c8 	.word	0x200003c8
 80018e0:	20000410 	.word	0x20000410
 80018e4:	40010000 	.word	0x40010000
 80018e8:	200003b4 	.word	0x200003b4
 80018ec:	20000458 	.word	0x20000458
 80018f0:	200003b3 	.word	0x200003b3
 80018f4:	0800b540 	.word	0x0800b540
 80018f8:	20000394 	.word	0x20000394
 80018fc:	20000000 	.word	0x20000000
 8001900:	200003b8 	.word	0x200003b8
 8001904:	200003bc 	.word	0x200003bc
 8001908:	0800b544 	.word	0x0800b544
 800190c:	20000390 	.word	0x20000390

08001910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b094      	sub	sp, #80	; 0x50
 8001914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001916:	f107 0320 	add.w	r3, r7, #32
 800191a:	2230      	movs	r2, #48	; 0x30
 800191c:	2100      	movs	r1, #0
 800191e:	4618      	mov	r0, r3
 8001920:	f005 fea7 	bl	8007672 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	4b28      	ldr	r3, [pc, #160]	; (80019dc <SystemClock_Config+0xcc>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <SystemClock_Config+0xcc>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
 8001944:	4b25      	ldr	r3, [pc, #148]	; (80019dc <SystemClock_Config+0xcc>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <SystemClock_Config+0xd0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <SystemClock_Config+0xd0>)
 800195e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <SystemClock_Config+0xd0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001970:	2301      	movs	r3, #1
 8001972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197a:	2302      	movs	r3, #2
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 8001984:	2314      	movs	r3, #20
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198c:	2302      	movs	r3, #2
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001990:	2304      	movs	r3, #4
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fb11 	bl	8003fc0 <HAL_RCC_OscConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019a4:	f000 f84e 	bl	8001a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a8:	230f      	movs	r3, #15
 80019aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2102      	movs	r1, #2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fd73 	bl	80044b0 <HAL_RCC_ClockConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019d0:	f000 f838 	bl	8001a44 <Error_Handler>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3750      	adds	r7, #80	; 0x50
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);


  rx_buffer[rx_buffer_index++] = UART1_rxBuffer[0];
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_UART_RxCpltCallback+0x4c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	b2d1      	uxtb	r1, r2
 80019f4:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_UART_RxCpltCallback+0x4c>)
 80019f6:	7011      	strb	r1, [r2, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_UART_RxCpltCallback+0x50>)
 80019fc:	7819      	ldrb	r1, [r3, #0]
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_UART_RxCpltCallback+0x54>)
 8001a00:	5499      	strb	r1, [r3, r2]

  if ((UART1_rxBuffer[0] == '\r') || rx_buffer_index > 30) // end of data
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_UART_RxCpltCallback+0x50>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b0d      	cmp	r3, #13
 8001a08:	d003      	beq.n	8001a12 <HAL_UART_RxCpltCallback+0x2e>
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_UART_RxCpltCallback+0x4c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b1e      	cmp	r3, #30
 8001a10:	d905      	bls.n	8001a1e <HAL_UART_RxCpltCallback+0x3a>
  {
	  rx_buffer_index = 0;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_UART_RxCpltCallback+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
	  USART_recive = 1;
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_UART_RxCpltCallback+0x58>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
  }
  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4904      	ldr	r1, [pc, #16]	; (8001a34 <HAL_UART_RxCpltCallback+0x50>)
 8001a22:	4807      	ldr	r0, [pc, #28]	; (8001a40 <HAL_UART_RxCpltCallback+0x5c>)
 8001a24:	f003 fe71 	bl	800570a <HAL_UART_Receive_IT>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200003b2 	.word	0x200003b2
 8001a34:	200003b4 	.word	0x200003b4
 8001a38:	20000394 	.word	0x20000394
 8001a3c:	200003b3 	.word	0x200003b3
 8001a40:	20000458 	.word	0x20000458

08001a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a48:	b672      	cpsid	i
}
 8001a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <Error_Handler+0x8>

08001a4e <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b088      	sub	sp, #32
 8001a52:	af04      	add	r7, sp, #16
 8001a54:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001a56:	2364      	movs	r3, #100	; 0x64
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	f107 030f 	add.w	r3, r7, #15
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2301      	movs	r3, #1
 8001a66:	2275      	movs	r2, #117	; 0x75
 8001a68:	21d0      	movs	r1, #208	; 0xd0
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f001 fd26 	bl	80034bc <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b68      	cmp	r3, #104	; 0x68
 8001a74:	d13d      	bne.n	8001af2 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001a7a:	2364      	movs	r3, #100	; 0x64
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	f107 030e 	add.w	r3, r7, #14
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	226b      	movs	r2, #107	; 0x6b
 8001a8c:	21d0      	movs	r1, #208	; 0xd0
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 fc1a 	bl	80032c8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001a94:	2307      	movs	r3, #7
 8001a96:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001a98:	2364      	movs	r3, #100	; 0x64
 8001a9a:	9302      	str	r3, [sp, #8]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	f107 030e 	add.w	r3, r7, #14
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	2219      	movs	r2, #25
 8001aaa:	21d0      	movs	r1, #208	; 0xd0
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f001 fc0b 	bl	80032c8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ab6:	2364      	movs	r3, #100	; 0x64
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	2301      	movs	r3, #1
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	f107 030e 	add.w	r3, r7, #14
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	221c      	movs	r2, #28
 8001ac8:	21d0      	movs	r1, #208	; 0xd0
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f001 fbfc 	bl	80032c8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	f107 030e 	add.w	r3, r7, #14
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	221b      	movs	r2, #27
 8001ae6:	21d0      	movs	r1, #208	; 0xd0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f001 fbed 	bl	80032c8 <HAL_I2C_Mem_Write>
        return 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <MPU6050_Init+0xa6>
    }
    return 1;
 8001af2:	2301      	movs	r3, #1
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	0000      	movs	r0, r0
	...

08001b00 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b04:	b094      	sub	sp, #80	; 0x50
 8001b06:	af04      	add	r7, sp, #16
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001b0c:	2364      	movs	r3, #100	; 0x64
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	230e      	movs	r3, #14
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	223b      	movs	r2, #59	; 0x3b
 8001b1e:	21d0      	movs	r1, #208	; 0xd0
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f001 fccb 	bl	80034bc <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001b26:	7a3b      	ldrb	r3, [r7, #8]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	7a7b      	ldrb	r3, [r7, #9]
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001b38:	7abb      	ldrb	r3, [r7, #10]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	7afb      	ldrb	r3, [r7, #11]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21a      	sxth	r2, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001b4a:	7b3b      	ldrb	r3, [r7, #12]
 8001b4c:	021b      	lsls	r3, r3, #8
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	7b7b      	ldrb	r3, [r7, #13]
 8001b52:	b21b      	sxth	r3, r3
 8001b54:	4313      	orrs	r3, r2
 8001b56:	b21a      	sxth	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	b21b      	sxth	r3, r3
 8001b66:	4313      	orrs	r3, r2
 8001b68:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001b6a:	7c3b      	ldrb	r3, [r7, #16]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	7c7b      	ldrb	r3, [r7, #17]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001b7c:	7cbb      	ldrb	r3, [r7, #18]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	7cfb      	ldrb	r3, [r7, #19]
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b21a      	sxth	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001b8e:	7d3b      	ldrb	r3, [r7, #20]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	b21a      	sxth	r2, r3
 8001b94:	7d7b      	ldrb	r3, [r7, #21]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcc4 	bl	8000534 <__aeabi_i2d>
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4bbd      	ldr	r3, [pc, #756]	; (8001ea8 <MPU6050_Read_All+0x3a8>)
 8001bb2:	f7fe fe53 	bl	800085c <__aeabi_ddiv>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	6839      	ldr	r1, [r7, #0]
 8001bbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcb4 	bl	8000534 <__aeabi_i2d>
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4bb5      	ldr	r3, [pc, #724]	; (8001ea8 <MPU6050_Read_All+0x3a8>)
 8001bd2:	f7fe fe43 	bl	800085c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fca4 	bl	8000534 <__aeabi_i2d>
 8001bec:	a3a8      	add	r3, pc, #672	; (adr r3, 8001e90 <MPU6050_Read_All+0x390>)
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f7fe fe33 	bl	800085c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001c00:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001eac <MPU6050_Read_All+0x3ac>
 8001c10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c14:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001eb0 <MPU6050_Read_All+0x3b0>
 8001c18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc83 	bl	8000534 <__aeabi_i2d>
 8001c2e:	a39a      	add	r3, pc, #616	; (adr r3, 8001e98 <MPU6050_Read_All+0x398>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fe12 	bl	800085c <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc73 	bl	8000534 <__aeabi_i2d>
 8001c4e:	a392      	add	r3, pc, #584	; (adr r3, 8001e98 <MPU6050_Read_All+0x398>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	f7fe fe02 	bl	800085c <__aeabi_ddiv>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc63 	bl	8000534 <__aeabi_i2d>
 8001c6e:	a38a      	add	r3, pc, #552	; (adr r3, 8001e98 <MPU6050_Read_All+0x398>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fdf2 	bl	800085c <__aeabi_ddiv>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	6839      	ldr	r1, [r7, #0]
 8001c7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001c82:	f000 fe6b 	bl	800295c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b8a      	ldr	r3, [pc, #552]	; (8001eb4 <MPU6050_Read_All+0x3b4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc40 	bl	8000514 <__aeabi_ui2d>
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <MPU6050_Read_All+0x3b8>)
 8001c9a:	f7fe fddf 	bl	800085c <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001ca6:	f000 fe59 	bl	800295c <HAL_GetTick>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a81      	ldr	r2, [pc, #516]	; (8001eb4 <MPU6050_Read_All+0x3b4>)
 8001cae:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	fb03 f202 	mul.w	r2, r3, r2
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc2c 	bl	8000534 <__aeabi_i2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	ec43 2b10 	vmov	d0, r2, r3
 8001ce4:	f009 f8a6 	bl	800ae34 <sqrt>
 8001ce8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cf8:	f7fe feee 	bl	8000ad8 <__aeabi_dcmpeq>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d11f      	bne.n	8001d42 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fc13 	bl	8000534 <__aeabi_i2d>
 8001d0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d12:	f7fe fda3 	bl	800085c <__aeabi_ddiv>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	ec43 2b17 	vmov	d7, r2, r3
 8001d1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001d22:	eef0 0a67 	vmov.f32	s1, s15
 8001d26:	f009 f8b3 	bl	800ae90 <atan>
 8001d2a:	ec51 0b10 	vmov	r0, r1, d0
 8001d2e:	a35c      	add	r3, pc, #368	; (adr r3, 8001ea0 <MPU6050_Read_All+0x3a0>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc68 	bl	8000608 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001d40:	e005      	b.n	8001d4e <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d54:	425b      	negs	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbec 	bl	8000534 <__aeabi_i2d>
 8001d5c:	4682      	mov	sl, r0
 8001d5e:	468b      	mov	fp, r1
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbe4 	bl	8000534 <__aeabi_i2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b11 	vmov	d1, r2, r3
 8001d74:	ec4b ab10 	vmov	d0, sl, fp
 8001d78:	f009 f85a 	bl	800ae30 <atan2>
 8001d7c:	ec51 0b10 	vmov	r0, r1, d0
 8001d80:	a347      	add	r3, pc, #284	; (adr r3, 8001ea0 <MPU6050_Read_All+0x3a0>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	f7fe fc3f 	bl	8000608 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <MPU6050_Read_All+0x3bc>)
 8001d98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d9c:	f7fe fea6 	bl	8000aec <__aeabi_dcmplt>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <MPU6050_Read_All+0x2bc>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <MPU6050_Read_All+0x3c0>)
 8001db2:	f7fe feb9 	bl	8000b28 <__aeabi_dcmpgt>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d114      	bne.n	8001de6 <MPU6050_Read_All+0x2e6>
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <MPU6050_Read_All+0x3c0>)
 8001dc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dc6:	f7fe feaf 	bl	8000b28 <__aeabi_dcmpgt>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d015      	beq.n	8001dfc <MPU6050_Read_All+0x2fc>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <MPU6050_Read_All+0x3bc>)
 8001ddc:	f7fe fe86 	bl	8000aec <__aeabi_dcmplt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00a      	beq.n	8001dfc <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8001de6:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <MPU6050_Read_All+0x3c4>)
 8001de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dec:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001dfa:	e014      	b.n	8001e26 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001e02:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001e06:	eeb0 1a47 	vmov.f32	s2, s14
 8001e0a:	eef0 1a67 	vmov.f32	s3, s15
 8001e0e:	ed97 0b06 	vldr	d0, [r7, #24]
 8001e12:	482c      	ldr	r0, [pc, #176]	; (8001ec4 <MPU6050_Read_All+0x3c4>)
 8001e14:	f000 f85a 	bl	8001ecc <Kalman_getAngle>
 8001e18:	eeb0 7a40 	vmov.f32	s14, s0
 8001e1c:	eef0 7a60 	vmov.f32	s15, s1
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001e2c:	4690      	mov	r8, r2
 8001e2e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <MPU6050_Read_All+0x3c0>)
 8001e38:	4640      	mov	r0, r8
 8001e3a:	4649      	mov	r1, r9
 8001e3c:	f7fe fe74 	bl	8000b28 <__aeabi_dcmpgt>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e4c:	4614      	mov	r4, r2
 8001e4e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001e5e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001e62:	eeb0 1a47 	vmov.f32	s2, s14
 8001e66:	eef0 1a67 	vmov.f32	s3, s15
 8001e6a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001e6e:	4816      	ldr	r0, [pc, #88]	; (8001ec8 <MPU6050_Read_All+0x3c8>)
 8001e70:	f000 f82c 	bl	8001ecc <Kalman_getAngle>
 8001e74:	eeb0 7a40 	vmov.f32	s14, s0
 8001e78:	eef0 7a60 	vmov.f32	s15, s1
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 8001e82:	bf00      	nop
 8001e84:	3740      	adds	r7, #64	; 0x40
 8001e86:	46bd      	mov	sp, r7
 8001e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e8c:	f3af 8000 	nop.w
 8001e90:	00000000 	.word	0x00000000
 8001e94:	40cc2900 	.word	0x40cc2900
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	40606000 	.word	0x40606000
 8001ea0:	1a63c1f8 	.word	0x1a63c1f8
 8001ea4:	404ca5dc 	.word	0x404ca5dc
 8001ea8:	40d00000 	.word	0x40d00000
 8001eac:	43aa0000 	.word	0x43aa0000
 8001eb0:	42121eb8 	.word	0x42121eb8
 8001eb4:	200003c0 	.word	0x200003c0
 8001eb8:	408f4000 	.word	0x408f4000
 8001ebc:	c0568000 	.word	0xc0568000
 8001ec0:	40568000 	.word	0x40568000
 8001ec4:	20000050 	.word	0x20000050
 8001ec8:	20000008 	.word	0x20000008

08001ecc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001ecc:	b5b0      	push	{r4, r5, r7, lr}
 8001ece:	b096      	sub	sp, #88	; 0x58
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	61f8      	str	r0, [r7, #28]
 8001ed4:	ed87 0b04 	vstr	d0, [r7, #16]
 8001ed8:	ed87 1b02 	vstr	d1, [r7, #8]
 8001edc:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001ee6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eea:	f7fe f9d5 	bl	8000298 <__aeabi_dsub>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001efc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f04:	f7fe fb80 	bl	8000608 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	4629      	mov	r1, r5
 8001f10:	f7fe f9c4 	bl	800029c <__adddf3>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	69f9      	ldr	r1, [r7, #28]
 8001f1a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f2e:	f7fe fb6b 	bl	8000608 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f40:	f7fe f9aa 	bl	8000298 <__aeabi_dsub>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f52:	f7fe f9a1 	bl	8000298 <__aeabi_dsub>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe f99a 	bl	800029c <__adddf3>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f74:	f7fe fb48 	bl	8000608 <__aeabi_dmul>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	4629      	mov	r1, r5
 8001f80:	f7fe f98c 	bl	800029c <__adddf3>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	69f9      	ldr	r1, [r7, #28]
 8001f8a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f9e:	f7fe fb33 	bl	8000608 <__aeabi_dmul>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4629      	mov	r1, r5
 8001faa:	f7fe f975 	bl	8000298 <__aeabi_dsub>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	69f9      	ldr	r1, [r7, #28]
 8001fb4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fc8:	f7fe fb1e 	bl	8000608 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe f960 	bl	8000298 <__aeabi_dsub>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	69f9      	ldr	r1, [r7, #28]
 8001fde:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ff2:	f7fe fb09 	bl	8000608 <__aeabi_dmul>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	f7fe f94d 	bl	800029c <__adddf3>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	69f9      	ldr	r1, [r7, #28]
 8002008:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002018:	f7fe f940 	bl	800029c <__adddf3>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800202a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800202e:	f7fe fc15 	bl	800085c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002044:	f7fe fc0a 	bl	800085c <__aeabi_ddiv>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002056:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800205a:	f7fe f91d 	bl	8000298 <__aeabi_dsub>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800206c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002070:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002074:	f7fe fac8 	bl	8000608 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4620      	mov	r0, r4
 800207e:	4629      	mov	r1, r5
 8002080:	f7fe f90c 	bl	800029c <__adddf3>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	69f9      	ldr	r1, [r7, #28]
 800208a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002094:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002098:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800209c:	f7fe fab4 	bl	8000608 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4620      	mov	r0, r4
 80020a6:	4629      	mov	r1, r5
 80020a8:	f7fe f8f8 	bl	800029c <__adddf3>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	69f9      	ldr	r1, [r7, #28]
 80020b2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80020bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80020c6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80020d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020d8:	f7fe fa96 	bl	8000608 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe f8d8 	bl	8000298 <__aeabi_dsub>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	69f9      	ldr	r1, [r7, #28]
 80020ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80020f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002100:	f7fe fa82 	bl	8000608 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4620      	mov	r0, r4
 800210a:	4629      	mov	r1, r5
 800210c:	f7fe f8c4 	bl	8000298 <__aeabi_dsub>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	69f9      	ldr	r1, [r7, #28]
 8002116:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002120:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002128:	f7fe fa6e 	bl	8000608 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4620      	mov	r0, r4
 8002132:	4629      	mov	r1, r5
 8002134:	f7fe f8b0 	bl	8000298 <__aeabi_dsub>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	69f9      	ldr	r1, [r7, #28]
 800213e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002148:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800214c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002150:	f7fe fa5a 	bl	8000608 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4620      	mov	r0, r4
 800215a:	4629      	mov	r1, r5
 800215c:	f7fe f89c 	bl	8000298 <__aeabi_dsub>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	69f9      	ldr	r1, [r7, #28]
 8002166:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002170:	ec43 2b17 	vmov	d7, r2, r3
};
 8002174:	eeb0 0a47 	vmov.f32	s0, s14
 8002178:	eef0 0a67 	vmov.f32	s1, s15
 800217c:	3758      	adds	r7, #88	; 0x58
 800217e:	46bd      	mov	sp, r7
 8002180:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_MspInit+0x4c>)
 8002194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_MspInit+0x4c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_MspInit+0x4c>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_MspInit+0x4c>)
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_MspInit+0x4c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <NMI_Handler+0x4>

080021da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <MemManage_Handler+0x4>

080021e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002220:	f000 fb88 	bl	8002934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <USART1_IRQHandler+0x10>)
 800222e:	f003 fa9d 	bl	800576c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000458 	.word	0x20000458

0800223c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return 1;
 8002240:	2301      	movs	r3, #1
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_kill>:

int _kill(int pid, int sig)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002256:	f005 fa89 	bl	800776c <__errno>
 800225a:	4603      	mov	r3, r0
 800225c:	2216      	movs	r2, #22
 800225e:	601a      	str	r2, [r3, #0]
  return -1;
 8002260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_exit>:

void _exit (int status)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002274:	f04f 31ff 	mov.w	r1, #4294967295
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ffe7 	bl	800224c <_kill>
  while (1) {}    /* Make sure we hang here */
 800227e:	e7fe      	b.n	800227e <_exit+0x12>

08002280 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	e00a      	b.n	80022a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002292:	f3af 8000 	nop.w
 8002296:	4601      	mov	r1, r0
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	60ba      	str	r2, [r7, #8]
 800229e:	b2ca      	uxtb	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	3301      	adds	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbf0      	blt.n	8002292 <_read+0x12>
  }

  return len;
 80022b0:	687b      	ldr	r3, [r7, #4]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e009      	b.n	80022e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	60ba      	str	r2, [r7, #8]
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbf1      	blt.n	80022cc <_write+0x12>
  }
  return len;
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_close>:

int _close(int file)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231a:	605a      	str	r2, [r3, #4]
  return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_isatty>:

int _isatty(int file)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <_sbrk+0x5c>)
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <_sbrk+0x60>)
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <_sbrk+0x64>)
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <_sbrk+0x68>)
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d207      	bcs.n	800239c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800238c:	f005 f9ee 	bl	800776c <__errno>
 8002390:	4603      	mov	r3, r0
 8002392:	220c      	movs	r2, #12
 8002394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	e009      	b.n	80023b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <_sbrk+0x64>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <_sbrk+0x64>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	4a05      	ldr	r2, [pc, #20]	; (80023c0 <_sbrk+0x64>)
 80023ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ae:	68fb      	ldr	r3, [r7, #12]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20010000 	.word	0x20010000
 80023bc:	00000400 	.word	0x00000400
 80023c0:	200003c4 	.word	0x200003c4
 80023c4:	200005f0 	.word	0x200005f0

080023c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <SystemInit+0x20>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <SystemInit+0x20>)
 80023d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b096      	sub	sp, #88	; 0x58
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800240a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	615a      	str	r2, [r3, #20]
 800241c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2220      	movs	r2, #32
 8002422:	2100      	movs	r1, #0
 8002424:	4618      	mov	r0, r3
 8002426:	f005 f924 	bl	8007672 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800242a:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <MX_TIM1_Init+0x138>)
 800242c:	4a3e      	ldr	r2, [pc, #248]	; (8002528 <MX_TIM1_Init+0x13c>)
 800242e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8002430:	4b3c      	ldr	r3, [pc, #240]	; (8002524 <MX_TIM1_Init+0x138>)
 8002432:	2227      	movs	r2, #39	; 0x27
 8002434:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <MX_TIM1_Init+0x138>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <MX_TIM1_Init+0x138>)
 800243e:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002442:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002444:	4b37      	ldr	r3, [pc, #220]	; (8002524 <MX_TIM1_Init+0x138>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800244a:	4b36      	ldr	r3, [pc, #216]	; (8002524 <MX_TIM1_Init+0x138>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <MX_TIM1_Init+0x138>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002456:	4833      	ldr	r0, [pc, #204]	; (8002524 <MX_TIM1_Init+0x138>)
 8002458:	f002 fa0a 	bl	8004870 <HAL_TIM_Base_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002462:	f7ff faef 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800246c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002470:	4619      	mov	r1, r3
 8002472:	482c      	ldr	r0, [pc, #176]	; (8002524 <MX_TIM1_Init+0x138>)
 8002474:	f002 fc16 	bl	8004ca4 <HAL_TIM_ConfigClockSource>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800247e:	f7ff fae1 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002482:	4828      	ldr	r0, [pc, #160]	; (8002524 <MX_TIM1_Init+0x138>)
 8002484:	f002 fa43 	bl	800490e <HAL_TIM_PWM_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800248e:	f7ff fad9 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800249a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800249e:	4619      	mov	r1, r3
 80024a0:	4820      	ldr	r0, [pc, #128]	; (8002524 <MX_TIM1_Init+0x138>)
 80024a2:	f002 ff93 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80024ac:	f7ff faca 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b0:	2360      	movs	r3, #96	; 0x60
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024bc:	2300      	movs	r3, #0
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024c8:	2300      	movs	r3, #0
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d0:	2200      	movs	r2, #0
 80024d2:	4619      	mov	r1, r3
 80024d4:	4813      	ldr	r0, [pc, #76]	; (8002524 <MX_TIM1_Init+0x138>)
 80024d6:	f002 fb23 	bl	8004b20 <HAL_TIM_PWM_ConfigChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80024e0:	f7ff fab0 	bl	8001a44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4807      	ldr	r0, [pc, #28]	; (8002524 <MX_TIM1_Init+0x138>)
 8002508:	f002 ffce 	bl	80054a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002512:	f7ff fa97 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002516:	4803      	ldr	r0, [pc, #12]	; (8002524 <MX_TIM1_Init+0x138>)
 8002518:	f000 f8b4 	bl	8002684 <HAL_TIM_MspPostInit>

}
 800251c:	bf00      	nop
 800251e:	3758      	adds	r7, #88	; 0x58
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200003c8 	.word	0x200003c8
 8002528:	40010000 	.word	0x40010000

0800252c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08e      	sub	sp, #56	; 0x38
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002540:	f107 0320 	add.w	r3, r7, #32
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
 8002558:	615a      	str	r2, [r3, #20]
 800255a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <MX_TIM2_Init+0xe8>)
 800255e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002566:	2227      	movs	r2, #39	; 0x27
 8002568:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <MX_TIM2_Init+0xe8>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002572:	f649 4240 	movw	r2, #40000	; 0x9c40
 8002576:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <MX_TIM2_Init+0xe8>)
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002584:	4823      	ldr	r0, [pc, #140]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002586:	f002 f973 	bl	8004870 <HAL_TIM_Base_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002590:	f7ff fa58 	bl	8001a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800259a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259e:	4619      	mov	r1, r3
 80025a0:	481c      	ldr	r0, [pc, #112]	; (8002614 <MX_TIM2_Init+0xe8>)
 80025a2:	f002 fb7f 	bl	8004ca4 <HAL_TIM_ConfigClockSource>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025ac:	f7ff fa4a 	bl	8001a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025b0:	4818      	ldr	r0, [pc, #96]	; (8002614 <MX_TIM2_Init+0xe8>)
 80025b2:	f002 f9ac 	bl	800490e <HAL_TIM_PWM_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025bc:	f7ff fa42 	bl	8001a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025c8:	f107 0320 	add.w	r3, r7, #32
 80025cc:	4619      	mov	r1, r3
 80025ce:	4811      	ldr	r0, [pc, #68]	; (8002614 <MX_TIM2_Init+0xe8>)
 80025d0:	f002 fefc 	bl	80053cc <HAL_TIMEx_MasterConfigSynchronization>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80025da:	f7ff fa33 	bl	8001a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025de:	2360      	movs	r3, #96	; 0x60
 80025e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	2208      	movs	r2, #8
 80025f2:	4619      	mov	r1, r3
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <MX_TIM2_Init+0xe8>)
 80025f6:	f002 fa93 	bl	8004b20 <HAL_TIM_PWM_ConfigChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002600:	f7ff fa20 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002604:	4803      	ldr	r0, [pc, #12]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002606:	f000 f83d 	bl	8002684 <HAL_TIM_MspPostInit>

}
 800260a:	bf00      	nop
 800260c:	3738      	adds	r7, #56	; 0x38
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000410 	.word	0x20000410

08002618 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a15      	ldr	r2, [pc, #84]	; (800267c <HAL_TIM_Base_MspInit+0x64>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_TIM_Base_MspInit+0x68>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	4a13      	ldr	r2, [pc, #76]	; (8002680 <HAL_TIM_Base_MspInit+0x68>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6453      	str	r3, [r2, #68]	; 0x44
 800263a:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_TIM_Base_MspInit+0x68>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002646:	e012      	b.n	800266e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d10d      	bne.n	800266e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_TIM_Base_MspInit+0x68>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_TIM_Base_MspInit+0x68>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <HAL_TIM_Base_MspInit+0x68>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
 800266c:	68bb      	ldr	r3, [r7, #8]
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40010000 	.word	0x40010000
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a25      	ldr	r2, [pc, #148]	; (8002738 <HAL_TIM_MspPostInit+0xb4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d11f      	bne.n	80026e6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_TIM_MspPostInit+0xb8>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a23      	ldr	r2, [pc, #140]	; (800273c <HAL_TIM_MspPostInit+0xb8>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_TIM_MspPostInit+0xb8>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	4619      	mov	r1, r3
 80026de:	4818      	ldr	r0, [pc, #96]	; (8002740 <HAL_TIM_MspPostInit+0xbc>)
 80026e0:	f000 fb10 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026e4:	e023      	b.n	800272e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d11e      	bne.n	800272e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_TIM_MspPostInit+0xb8>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	4a10      	ldr	r2, [pc, #64]	; (800273c <HAL_TIM_MspPostInit+0xb8>)
 80026fa:	f043 0302 	orr.w	r3, r3, #2
 80026fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002700:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_TIM_MspPostInit+0xb8>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800270c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800271e:	2301      	movs	r3, #1
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <HAL_TIM_MspPostInit+0xc0>)
 800272a:	f000 faeb 	bl	8002d04 <HAL_GPIO_Init>
}
 800272e:	bf00      	nop
 8002730:	3728      	adds	r7, #40	; 0x28
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40010000 	.word	0x40010000
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000
 8002744:	40020400 	.word	0x40020400

08002748 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <MX_USART1_UART_Init+0x50>)
 8002750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002754:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 800276e:	220c      	movs	r2, #12
 8002770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	4b08      	ldr	r3, [pc, #32]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <MX_USART1_UART_Init+0x4c>)
 8002780:	f002 fee4 	bl	800554c <HAL_UART_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800278a:	f7ff f95b 	bl	8001a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000458 	.word	0x20000458
 8002798:	40011000 	.word	0x40011000

0800279c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <HAL_UART_MspInit+0x94>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d134      	bne.n	8002828 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]


    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b15      	ldr	r3, [pc, #84]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_UART_MspInit+0x98>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002808:	2307      	movs	r3, #7
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4619      	mov	r1, r3
 8002812:	4809      	ldr	r0, [pc, #36]	; (8002838 <HAL_UART_MspInit+0x9c>)
 8002814:	f000 fa76 	bl	8002d04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	2025      	movs	r0, #37	; 0x25
 800281e:	f000 f9a8 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002822:	2025      	movs	r0, #37	; 0x25
 8002824:	f000 f9c1 	bl	8002baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40011000 	.word	0x40011000
 8002834:	40023800 	.word	0x40023800
 8002838:	40020000 	.word	0x40020000

0800283c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800283c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002840:	480d      	ldr	r0, [pc, #52]	; (8002878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002842:	490e      	ldr	r1, [pc, #56]	; (800287c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002844:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002848:	e002      	b.n	8002850 <LoopCopyDataInit>

0800284a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800284c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284e:	3304      	adds	r3, #4

08002850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002854:	d3f9      	bcc.n	800284a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002858:	4c0b      	ldr	r4, [pc, #44]	; (8002888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800285c:	e001      	b.n	8002862 <LoopFillZerobss>

0800285e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002860:	3204      	adds	r2, #4

08002862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002864:	d3fb      	bcc.n	800285e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002866:	f7ff fdaf 	bl	80023c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800286a:	f004 ff85 	bl	8007778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800286e:	f7fe fee1 	bl	8001634 <main>
  bx  lr    
 8002872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002874:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800287c:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 8002880:	0800ba08 	.word	0x0800ba08
  ldr r2, =_sbss
 8002884:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002888:	200005ec 	.word	0x200005ec

0800288c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800288c:	e7fe      	b.n	800288c <ADC_IRQHandler>
	...

08002890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_Init+0x40>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0d      	ldr	r2, [pc, #52]	; (80028d0 <HAL_Init+0x40>)
 800289a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800289e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_Init+0x40>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <HAL_Init+0x40>)
 80028a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_Init+0x40>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_Init+0x40>)
 80028b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b8:	2003      	movs	r0, #3
 80028ba:	f000 f94f 	bl	8002b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028be:	200f      	movs	r0, #15
 80028c0:	f000 f808 	bl	80028d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028c4:	f7ff fc5e 	bl	8002184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023c00 	.word	0x40023c00

080028d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_InitTick+0x54>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_InitTick+0x58>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	4619      	mov	r1, r3
 80028e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 f967 	bl	8002bc6 <HAL_SYSTICK_Config>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e00e      	b.n	8002920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b0f      	cmp	r3, #15
 8002906:	d80a      	bhi.n	800291e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002908:	2200      	movs	r2, #0
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f000 f92f 	bl	8002b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <HAL_InitTick+0x5c>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	e000      	b.n	8002920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000098 	.word	0x20000098
 800292c:	200000a0 	.word	0x200000a0
 8002930:	2000009c 	.word	0x2000009c

08002934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_IncTick+0x20>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_IncTick+0x24>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4413      	add	r3, r2
 8002944:	4a04      	ldr	r2, [pc, #16]	; (8002958 <HAL_IncTick+0x24>)
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	200000a0 	.word	0x200000a0
 8002958:	2000049c 	.word	0x2000049c

0800295c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return uwTick;
 8002960:	4b03      	ldr	r3, [pc, #12]	; (8002970 <HAL_GetTick+0x14>)
 8002962:	681b      	ldr	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	2000049c 	.word	0x2000049c

08002974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800297c:	f7ff ffee 	bl	800295c <HAL_GetTick>
 8002980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d005      	beq.n	800299a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_Delay+0x44>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	461a      	mov	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800299a:	bf00      	nop
 800299c:	f7ff ffde 	bl	800295c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d8f7      	bhi.n	800299c <HAL_Delay+0x28>
  {
  }
}
 80029ac:	bf00      	nop
 80029ae:	bf00      	nop
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200000a0 	.word	0x200000a0

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	60d3      	str	r3, [r2, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <__NVIC_EnableIRQ+0x38>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db0a      	blt.n	8002a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	490c      	ldr	r1, [pc, #48]	; (8002aa8 <__NVIC_SetPriority+0x4c>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a84:	e00a      	b.n	8002a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <__NVIC_SetPriority+0x50>)
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	3b04      	subs	r3, #4
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	761a      	strb	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	bf28      	it	cs
 8002ace:	2304      	movcs	r3, #4
 8002ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d902      	bls.n	8002ae0 <NVIC_EncodePriority+0x30>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3b03      	subs	r3, #3
 8002ade:	e000      	b.n	8002ae2 <NVIC_EncodePriority+0x32>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	401a      	ands	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43d9      	mvns	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	4313      	orrs	r3, r2
         );
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3724      	adds	r7, #36	; 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b28:	d301      	bcc.n	8002b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e00f      	b.n	8002b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <SysTick_Config+0x40>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b36:	210f      	movs	r1, #15
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f7ff ff8e 	bl	8002a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <SysTick_Config+0x40>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <SysTick_Config+0x40>)
 8002b48:	2207      	movs	r2, #7
 8002b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000e010 	.word	0xe000e010

08002b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff29 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b84:	f7ff ff3e 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	6978      	ldr	r0, [r7, #20]
 8002b90:	f7ff ff8e 	bl	8002ab0 <NVIC_EncodePriority>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff5d 	bl	8002a5c <__NVIC_SetPriority>
}
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff31 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffa2 	bl	8002b18 <SysTick_Config>
 8002bd4:	4603      	mov	r3, r0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff feb6 	bl	800295c <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d008      	beq.n	8002c10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e052      	b.n	8002cb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0216 	bic.w	r2, r2, #22
 8002c1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d103      	bne.n	8002c40 <HAL_DMA_Abort+0x62>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0208 	bic.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c60:	e013      	b.n	8002c8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c62:	f7ff fe7b 	bl	800295c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d90c      	bls.n	8002c8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e015      	b.n	8002cb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e4      	bne.n	8002c62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	223f      	movs	r2, #63	; 0x3f
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d004      	beq.n	8002cdc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e00c      	b.n	8002cf6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2205      	movs	r2, #5
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e159      	b.n	8002fd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d20:	2201      	movs	r2, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	f040 8148 	bne.w	8002fce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d005      	beq.n	8002d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d130      	bne.n	8002db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2203      	movs	r2, #3
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 0201 	and.w	r2, r3, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d017      	beq.n	8002df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d123      	bne.n	8002e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3208      	adds	r2, #8
 8002e42:	69b9      	ldr	r1, [r7, #24]
 8002e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0203 	and.w	r2, r3, #3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80a2 	beq.w	8002fce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b57      	ldr	r3, [pc, #348]	; (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a56      	ldr	r2, [pc, #344]	; (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b54      	ldr	r3, [pc, #336]	; (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea6:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_GPIO_Init+0x2ec>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a49      	ldr	r2, [pc, #292]	; (8002ff4 <HAL_GPIO_Init+0x2f0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d019      	beq.n	8002f06 <HAL_GPIO_Init+0x202>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a48      	ldr	r2, [pc, #288]	; (8002ff8 <HAL_GPIO_Init+0x2f4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_GPIO_Init+0x1fe>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a47      	ldr	r2, [pc, #284]	; (8002ffc <HAL_GPIO_Init+0x2f8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00d      	beq.n	8002efe <HAL_GPIO_Init+0x1fa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a46      	ldr	r2, [pc, #280]	; (8003000 <HAL_GPIO_Init+0x2fc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <HAL_GPIO_Init+0x1f6>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a45      	ldr	r2, [pc, #276]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <HAL_GPIO_Init+0x1f2>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	e008      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002ef6:	2307      	movs	r3, #7
 8002ef8:	e006      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002efa:	2303      	movs	r3, #3
 8002efc:	e004      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e002      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002f06:	2300      	movs	r3, #0
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f002 0203 	and.w	r2, r2, #3
 8002f0e:	0092      	lsls	r2, r2, #2
 8002f10:	4093      	lsls	r3, r2
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f18:	4935      	ldr	r1, [pc, #212]	; (8002ff0 <HAL_GPIO_Init+0x2ec>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4a:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f74:	4a24      	ldr	r2, [pc, #144]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f7a:	4b23      	ldr	r3, [pc, #140]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f9e:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	f67f aea2 	bls.w	8002d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	40020000 	.word	0x40020000
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	40020800 	.word	0x40020800
 8003000:	40020c00 	.word	0x40020c00
 8003004:	40021000 	.word	0x40021000
 8003008:	40013c00 	.word	0x40013c00

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003028:	e003      	b.n	8003032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	041a      	lsls	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	619a      	str	r2, [r3, #24]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e12b      	b.n	80032aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe f858 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	; 0x24
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030a4:	f001 fbbc 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 80030a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4a81      	ldr	r2, [pc, #516]	; (80032b4 <HAL_I2C_Init+0x274>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d807      	bhi.n	80030c4 <HAL_I2C_Init+0x84>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a80      	ldr	r2, [pc, #512]	; (80032b8 <HAL_I2C_Init+0x278>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	e006      	b.n	80030d2 <HAL_I2C_Init+0x92>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a7d      	ldr	r2, [pc, #500]	; (80032bc <HAL_I2C_Init+0x27c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	bf94      	ite	ls
 80030cc:	2301      	movls	r3, #1
 80030ce:	2300      	movhi	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0e7      	b.n	80032aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a78      	ldr	r2, [pc, #480]	; (80032c0 <HAL_I2C_Init+0x280>)
 80030de:	fba2 2303 	umull	r2, r3, r2, r3
 80030e2:	0c9b      	lsrs	r3, r3, #18
 80030e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a6a      	ldr	r2, [pc, #424]	; (80032b4 <HAL_I2C_Init+0x274>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d802      	bhi.n	8003114 <HAL_I2C_Init+0xd4>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	3301      	adds	r3, #1
 8003112:	e009      	b.n	8003128 <HAL_I2C_Init+0xe8>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800311a:	fb02 f303 	mul.w	r3, r2, r3
 800311e:	4a69      	ldr	r2, [pc, #420]	; (80032c4 <HAL_I2C_Init+0x284>)
 8003120:	fba2 2303 	umull	r2, r3, r2, r3
 8003124:	099b      	lsrs	r3, r3, #6
 8003126:	3301      	adds	r3, #1
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800313a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	495c      	ldr	r1, [pc, #368]	; (80032b4 <HAL_I2C_Init+0x274>)
 8003144:	428b      	cmp	r3, r1
 8003146:	d819      	bhi.n	800317c <HAL_I2C_Init+0x13c>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e59      	subs	r1, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fbb1 f3f3 	udiv	r3, r1, r3
 8003156:	1c59      	adds	r1, r3, #1
 8003158:	f640 73fc 	movw	r3, #4092	; 0xffc
 800315c:	400b      	ands	r3, r1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_I2C_Init+0x138>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1e59      	subs	r1, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003170:	3301      	adds	r3, #1
 8003172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003176:	e051      	b.n	800321c <HAL_I2C_Init+0x1dc>
 8003178:	2304      	movs	r3, #4
 800317a:	e04f      	b.n	800321c <HAL_I2C_Init+0x1dc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d111      	bne.n	80031a8 <HAL_I2C_Init+0x168>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	440b      	add	r3, r1
 8003192:	fbb0 f3f3 	udiv	r3, r0, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319c:	2b00      	cmp	r3, #0
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e012      	b.n	80031ce <HAL_I2C_Init+0x18e>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	0099      	lsls	r1, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Init+0x196>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e022      	b.n	800321c <HAL_I2C_Init+0x1dc>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10e      	bne.n	80031fc <HAL_I2C_Init+0x1bc>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1e58      	subs	r0, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	440b      	add	r3, r1
 80031ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031fa:	e00f      	b.n	800321c <HAL_I2C_Init+0x1dc>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e58      	subs	r0, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	0099      	lsls	r1, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	6809      	ldr	r1, [r1, #0]
 8003220:	4313      	orrs	r3, r2
 8003222:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800324a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6911      	ldr	r1, [r2, #16]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68d2      	ldr	r2, [r2, #12]
 8003256:	4311      	orrs	r1, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	430b      	orrs	r3, r1
 800325e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	000186a0 	.word	0x000186a0
 80032b8:	001e847f 	.word	0x001e847f
 80032bc:	003d08ff 	.word	0x003d08ff
 80032c0:	431bde83 	.word	0x431bde83
 80032c4:	10624dd3 	.word	0x10624dd3

080032c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af02      	add	r7, sp, #8
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4603      	mov	r3, r0
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	460b      	mov	r3, r1
 80032dc:	813b      	strh	r3, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032e2:	f7ff fb3b 	bl	800295c <HAL_GetTick>
 80032e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	f040 80d9 	bne.w	80034a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2319      	movs	r3, #25
 80032fc:	2201      	movs	r2, #1
 80032fe:	496d      	ldr	r1, [pc, #436]	; (80034b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fc7f 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800330c:	2302      	movs	r3, #2
 800330e:	e0cc      	b.n	80034aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_I2C_Mem_Write+0x56>
 800331a:	2302      	movs	r3, #2
 800331c:	e0c5      	b.n	80034aa <HAL_I2C_Mem_Write+0x1e2>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d007      	beq.n	8003344 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003352:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2221      	movs	r2, #33	; 0x21
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2240      	movs	r2, #64	; 0x40
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a3a      	ldr	r2, [r7, #32]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337a:	b29a      	uxth	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4a4d      	ldr	r2, [pc, #308]	; (80034b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003384:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003386:	88f8      	ldrh	r0, [r7, #6]
 8003388:	893a      	ldrh	r2, [r7, #8]
 800338a:	8979      	ldrh	r1, [r7, #10]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	4603      	mov	r3, r0
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fab6 	bl	8003908 <I2C_RequestMemoryWrite>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d052      	beq.n	8003448 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e081      	b.n	80034aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fd00 	bl	8003db0 <I2C_WaitOnTXEFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00d      	beq.n	80033d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d107      	bne.n	80033ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e06b      	b.n	80034aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	781a      	ldrb	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d11b      	bne.n	8003448 <HAL_I2C_Mem_Write+0x180>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	2b00      	cmp	r3, #0
 8003416:	d017      	beq.n	8003448 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1aa      	bne.n	80033a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fcec 	bl	8003e32 <I2C_WaitOnBTFFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00d      	beq.n	800347c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2b04      	cmp	r3, #4
 8003466:	d107      	bne.n	8003478 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003476:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e016      	b.n	80034aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e000      	b.n	80034aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
  }
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	00100002 	.word	0x00100002
 80034b8:	ffff0000 	.word	0xffff0000

080034bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08c      	sub	sp, #48	; 0x30
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	4608      	mov	r0, r1
 80034c6:	4611      	mov	r1, r2
 80034c8:	461a      	mov	r2, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	817b      	strh	r3, [r7, #10]
 80034ce:	460b      	mov	r3, r1
 80034d0:	813b      	strh	r3, [r7, #8]
 80034d2:	4613      	mov	r3, r2
 80034d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034d6:	f7ff fa41 	bl	800295c <HAL_GetTick>
 80034da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	f040 8208 	bne.w	80038fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2319      	movs	r3, #25
 80034f0:	2201      	movs	r2, #1
 80034f2:	497b      	ldr	r1, [pc, #492]	; (80036e0 <HAL_I2C_Mem_Read+0x224>)
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 fb85 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003500:	2302      	movs	r3, #2
 8003502:	e1fb      	b.n	80038fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_I2C_Mem_Read+0x56>
 800350e:	2302      	movs	r3, #2
 8003510:	e1f4      	b.n	80038fc <HAL_I2C_Mem_Read+0x440>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d007      	beq.n	8003538 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003546:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2222      	movs	r2, #34	; 0x22
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2240      	movs	r2, #64	; 0x40
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a5b      	ldr	r2, [pc, #364]	; (80036e4 <HAL_I2C_Mem_Read+0x228>)
 8003578:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800357a:	88f8      	ldrh	r0, [r7, #6]
 800357c:	893a      	ldrh	r2, [r7, #8]
 800357e:	8979      	ldrh	r1, [r7, #10]
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	4603      	mov	r3, r0
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fa52 	bl	8003a34 <I2C_RequestMemoryRead>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1b0      	b.n	80038fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d113      	bne.n	80035ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	623b      	str	r3, [r7, #32]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	623b      	str	r3, [r7, #32]
 80035b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e184      	b.n	80038d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d11b      	bne.n	800360a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	2300      	movs	r3, #0
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	61fb      	str	r3, [r7, #28]
 80035f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e164      	b.n	80038d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	2b02      	cmp	r3, #2
 8003610:	d11b      	bne.n	800364a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003620:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003630:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	e144      	b.n	80038d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003660:	e138      	b.n	80038d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	2b03      	cmp	r3, #3
 8003668:	f200 80f1 	bhi.w	800384e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b01      	cmp	r3, #1
 8003672:	d123      	bne.n	80036bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003676:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fc1b 	bl	8003eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e139      	b.n	80038fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036ba:	e10b      	b.n	80038d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d14e      	bne.n	8003762 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ca:	2200      	movs	r2, #0
 80036cc:	4906      	ldr	r1, [pc, #24]	; (80036e8 <HAL_I2C_Mem_Read+0x22c>)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fa98 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e10e      	b.n	80038fc <HAL_I2C_Mem_Read+0x440>
 80036de:	bf00      	nop
 80036e0:	00100002 	.word	0x00100002
 80036e4:	ffff0000 	.word	0xffff0000
 80036e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003760:	e0b8      	b.n	80038d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	2200      	movs	r2, #0
 800376a:	4966      	ldr	r1, [pc, #408]	; (8003904 <HAL_I2C_Mem_Read+0x448>)
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fa49 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0bf      	b.n	80038fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	2200      	movs	r2, #0
 80037c6:	494f      	ldr	r1, [pc, #316]	; (8003904 <HAL_I2C_Mem_Read+0x448>)
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fa1b 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e091      	b.n	80038fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800384c:	e042      	b.n	80038d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fb2e 	bl	8003eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e04c      	b.n	80038fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d118      	bne.n	80038d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f47f aec2 	bne.w	8003662 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3728      	adds	r7, #40	; 0x28
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	00010004 	.word	0x00010004

08003908 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	4608      	mov	r0, r1
 8003912:	4611      	mov	r1, r2
 8003914:	461a      	mov	r2, r3
 8003916:	4603      	mov	r3, r0
 8003918:	817b      	strh	r3, [r7, #10]
 800391a:	460b      	mov	r3, r1
 800391c:	813b      	strh	r3, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	2200      	movs	r2, #0
 800393a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f960 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003958:	d103      	bne.n	8003962 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e05f      	b.n	8003a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003966:	897b      	ldrh	r3, [r7, #10]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003974:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	6a3a      	ldr	r2, [r7, #32]
 800397a:	492d      	ldr	r1, [pc, #180]	; (8003a30 <I2C_RequestMemoryWrite+0x128>)
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f998 	bl	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e04c      	b.n	8003a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a4:	6a39      	ldr	r1, [r7, #32]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa02 	bl	8003db0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d107      	bne.n	80039ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e02b      	b.n	8003a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d4:	893b      	ldrh	r3, [r7, #8]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	e021      	b.n	8003a24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039e0:	893b      	ldrh	r3, [r7, #8]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	6a39      	ldr	r1, [r7, #32]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f9dc 	bl	8003db0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00d      	beq.n	8003a1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d107      	bne.n	8003a16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e005      	b.n	8003a26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1a:	893b      	ldrh	r3, [r7, #8]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	00010002 	.word	0x00010002

08003a34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	461a      	mov	r2, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	817b      	strh	r3, [r7, #10]
 8003a46:	460b      	mov	r3, r1
 8003a48:	813b      	strh	r3, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f8c2 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a94:	d103      	bne.n	8003a9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e0aa      	b.n	8003bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aa2:	897b      	ldrh	r3, [r7, #10]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	6a3a      	ldr	r2, [r7, #32]
 8003ab6:	4952      	ldr	r1, [pc, #328]	; (8003c00 <I2C_RequestMemoryRead+0x1cc>)
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f8fa 	bl	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e097      	b.n	8003bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae0:	6a39      	ldr	r1, [r7, #32]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f964 	bl	8003db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00d      	beq.n	8003b0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d107      	bne.n	8003b06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e076      	b.n	8003bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b10:	893b      	ldrh	r3, [r7, #8]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	611a      	str	r2, [r3, #16]
 8003b1a:	e021      	b.n	8003b60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b1c:	893b      	ldrh	r3, [r7, #8]
 8003b1e:	0a1b      	lsrs	r3, r3, #8
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2c:	6a39      	ldr	r1, [r7, #32]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f93e 	bl	8003db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00d      	beq.n	8003b56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d107      	bne.n	8003b52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e050      	b.n	8003bf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b56:	893b      	ldrh	r3, [r7, #8]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b62:	6a39      	ldr	r1, [r7, #32]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f923 	bl	8003db0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00d      	beq.n	8003b8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d107      	bne.n	8003b88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e035      	b.n	8003bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f82b 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc2:	d103      	bne.n	8003bcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e013      	b.n	8003bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bd0:	897b      	ldrh	r3, [r7, #10]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	4906      	ldr	r1, [pc, #24]	; (8003c00 <I2C_RequestMemoryRead+0x1cc>)
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f863 	bl	8003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	00010002 	.word	0x00010002

08003c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c14:	e025      	b.n	8003c62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d021      	beq.n	8003c62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1e:	f7fe fe9d 	bl	800295c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d116      	bne.n	8003c62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e023      	b.n	8003caa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10d      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	43da      	mvns	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4013      	ands	r3, r2
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bf0c      	ite	eq
 8003c7e:	2301      	moveq	r3, #1
 8003c80:	2300      	movne	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	e00c      	b.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d0b6      	beq.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b084      	sub	sp, #16
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cc0:	e051      	b.n	8003d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd0:	d123      	bne.n	8003d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f043 0204 	orr.w	r2, r3, #4
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e046      	b.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d021      	beq.n	8003d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fe fe1b 	bl	800295c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e020      	b.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10c      	bne.n	8003d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf14      	ite	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	2300      	moveq	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	e00b      	b.n	8003da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	43da      	mvns	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d18d      	bne.n	8003cc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dbc:	e02d      	b.n	8003e1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f8ce 	bl	8003f60 <I2C_IsAcknowledgeFailed>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e02d      	b.n	8003e2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d021      	beq.n	8003e1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd6:	f7fe fdc1 	bl	800295c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d302      	bcc.n	8003dec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d116      	bne.n	8003e1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0220 	orr.w	r2, r3, #32
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e007      	b.n	8003e2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	d1ca      	bne.n	8003dbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e3e:	e02d      	b.n	8003e9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f88d 	bl	8003f60 <I2C_IsAcknowledgeFailed>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e02d      	b.n	8003eac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d021      	beq.n	8003e9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e58:	f7fe fd80 	bl	800295c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d302      	bcc.n	8003e6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d116      	bne.n	8003e9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e007      	b.n	8003eac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d1ca      	bne.n	8003e40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ec0:	e042      	b.n	8003f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d119      	bne.n	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0210 	mvn.w	r2, #16
 8003ed8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e029      	b.n	8003f58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f04:	f7fe fd2a 	bl	800295c <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d302      	bcc.n	8003f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d116      	bne.n	8003f48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e007      	b.n	8003f58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b40      	cmp	r3, #64	; 0x40
 8003f54:	d1b5      	bne.n	8003ec2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f76:	d11b      	bne.n	8003fb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f043 0204 	orr.w	r2, r3, #4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e267      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d075      	beq.n	80040ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fde:	4b88      	ldr	r3, [pc, #544]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d00c      	beq.n	8004004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fea:	4b85      	ldr	r3, [pc, #532]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d112      	bne.n	800401c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff6:	4b82      	ldr	r3, [pc, #520]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004002:	d10b      	bne.n	800401c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	4b7e      	ldr	r3, [pc, #504]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d05b      	beq.n	80040c8 <HAL_RCC_OscConfig+0x108>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d157      	bne.n	80040c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e242      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x74>
 8004026:	4b76      	ldr	r3, [pc, #472]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a75      	ldr	r2, [pc, #468]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e01d      	b.n	8004070 <HAL_RCC_OscConfig+0xb0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0x98>
 800403e:	4b70      	ldr	r3, [pc, #448]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6f      	ldr	r2, [pc, #444]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b6d      	ldr	r3, [pc, #436]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6c      	ldr	r2, [pc, #432]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e00b      	b.n	8004070 <HAL_RCC_OscConfig+0xb0>
 8004058:	4b69      	ldr	r3, [pc, #420]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a68      	ldr	r2, [pc, #416]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b66      	ldr	r3, [pc, #408]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a65      	ldr	r2, [pc, #404]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800406a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800406e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fe fc70 	bl	800295c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004080:	f7fe fc6c 	bl	800295c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e207      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b5b      	ldr	r3, [pc, #364]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0xc0>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fe fc5c 	bl	800295c <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fe fc58 	bl	800295c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e1f3      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ba:	4b51      	ldr	r3, [pc, #324]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0xe8>
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d063      	beq.n	800419e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040d6:	4b4a      	ldr	r3, [pc, #296]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e2:	4b47      	ldr	r3, [pc, #284]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d11c      	bne.n	8004128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ee:	4b44      	ldr	r3, [pc, #272]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d116      	bne.n	8004128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	4b41      	ldr	r3, [pc, #260]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_RCC_OscConfig+0x152>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e1c7      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4937      	ldr	r1, [pc, #220]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004126:	e03a      	b.n	800419e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004130:	4b34      	ldr	r3, [pc, #208]	; (8004204 <HAL_RCC_OscConfig+0x244>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fe fc11 	bl	800295c <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800413e:	f7fe fc0d 	bl	800295c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1a8      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4925      	ldr	r1, [pc, #148]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]
 8004170:	e015      	b.n	800419e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <HAL_RCC_OscConfig+0x244>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fe fbf0 	bl	800295c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004180:	f7fe fbec 	bl	800295c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e187      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d036      	beq.n	8004218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d016      	beq.n	80041e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b2:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_RCC_OscConfig+0x248>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fe fbd0 	bl	800295c <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fe fbcc 	bl	800295c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e167      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_RCC_OscConfig+0x240>)
 80041d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x200>
 80041de:	e01b      	b.n	8004218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_OscConfig+0x248>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e6:	f7fe fbb9 	bl	800295c <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ec:	e00e      	b.n	800420c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ee:	f7fe fbb5 	bl	800295c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d907      	bls.n	800420c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e150      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
 8004200:	40023800 	.word	0x40023800
 8004204:	42470000 	.word	0x42470000
 8004208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ea      	bne.n	80041ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8097 	beq.w	8004354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b81      	ldr	r3, [pc, #516]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	4b7d      	ldr	r3, [pc, #500]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	4a7c      	ldr	r2, [pc, #496]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	; 0x40
 8004246:	4b7a      	ldr	r3, [pc, #488]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b77      	ldr	r3, [pc, #476]	; (8004434 <HAL_RCC_OscConfig+0x474>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004262:	4b74      	ldr	r3, [pc, #464]	; (8004434 <HAL_RCC_OscConfig+0x474>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a73      	ldr	r2, [pc, #460]	; (8004434 <HAL_RCC_OscConfig+0x474>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7fe fb75 	bl	800295c <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fe fb71 	bl	800295c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e10c      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	4b6a      	ldr	r3, [pc, #424]	; (8004434 <HAL_RCC_OscConfig+0x474>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d106      	bne.n	80042aa <HAL_RCC_OscConfig+0x2ea>
 800429c:	4b64      	ldr	r3, [pc, #400]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	4a63      	ldr	r2, [pc, #396]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	6713      	str	r3, [r2, #112]	; 0x70
 80042a8:	e01c      	b.n	80042e4 <HAL_RCC_OscConfig+0x324>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x30c>
 80042b2:	4b5f      	ldr	r3, [pc, #380]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a5e      	ldr	r2, [pc, #376]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
 80042be:	4b5c      	ldr	r3, [pc, #368]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	4a5b      	ldr	r2, [pc, #364]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0x324>
 80042cc:	4b58      	ldr	r3, [pc, #352]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	4a57      	ldr	r2, [pc, #348]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	6713      	str	r3, [r2, #112]	; 0x70
 80042d8:	4b55      	ldr	r3, [pc, #340]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	4a54      	ldr	r2, [pc, #336]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80042de:	f023 0304 	bic.w	r3, r3, #4
 80042e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fe fb36 	bl	800295c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f2:	e00a      	b.n	800430a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7fe fb32 	bl	800295c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e0cb      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430a:	4b49      	ldr	r3, [pc, #292]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ee      	beq.n	80042f4 <HAL_RCC_OscConfig+0x334>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004318:	f7fe fb20 	bl	800295c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fe fb1c 	bl	800295c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0b5      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004336:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1ee      	bne.n	8004320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004348:	4b39      	ldr	r3, [pc, #228]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	4a38      	ldr	r2, [pc, #224]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 800434e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a1 	beq.w	80044a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800435e:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b08      	cmp	r3, #8
 8004368:	d05c      	beq.n	8004424 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d141      	bne.n	80043f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <HAL_RCC_OscConfig+0x478>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fe faf0 	bl	800295c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004380:	f7fe faec 	bl	800295c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e087      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	4b27      	ldr	r3, [pc, #156]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	019b      	lsls	r3, r3, #6
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	3b01      	subs	r3, #1
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	491b      	ldr	r1, [pc, #108]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c8:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <HAL_RCC_OscConfig+0x478>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fe fac5 	bl	800295c <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fe fac1 	bl	800295c <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e05c      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x416>
 80043f4:	e054      	b.n	80044a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <HAL_RCC_OscConfig+0x478>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fe faae 	bl	800295c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004404:	f7fe faaa 	bl	800295c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e045      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_RCC_OscConfig+0x470>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x444>
 8004422:	e03d      	b.n	80044a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e038      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
 8004430:	40023800 	.word	0x40023800
 8004434:	40007000 	.word	0x40007000
 8004438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <HAL_RCC_OscConfig+0x4ec>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d028      	beq.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d121      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d11a      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004474:	4293      	cmp	r3, r2
 8004476:	d111      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	3b01      	subs	r3, #1
 8004486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d107      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800

080044b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0cc      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b68      	ldr	r3, [pc, #416]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d90c      	bls.n	80044ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b65      	ldr	r3, [pc, #404]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b63      	ldr	r3, [pc, #396]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0b8      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004504:	4b59      	ldr	r3, [pc, #356]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4a58      	ldr	r2, [pc, #352]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800450e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800451c:	4b53      	ldr	r3, [pc, #332]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a52      	ldr	r2, [pc, #328]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004528:	4b50      	ldr	r3, [pc, #320]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	494d      	ldr	r1, [pc, #308]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d044      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b47      	ldr	r3, [pc, #284]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d119      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d003      	beq.n	800456e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456a:	2b03      	cmp	r3, #3
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456e:	4b3f      	ldr	r3, [pc, #252]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e06f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457e:	4b3b      	ldr	r3, [pc, #236]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e067      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458e:	4b37      	ldr	r3, [pc, #220]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f023 0203 	bic.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4934      	ldr	r1, [pc, #208]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a0:	f7fe f9dc 	bl	800295c <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	e00a      	b.n	80045be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a8:	f7fe f9d8 	bl	800295c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e04f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	4b2b      	ldr	r3, [pc, #172]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 020c 	and.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d1eb      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045d0:	4b25      	ldr	r3, [pc, #148]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d20c      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b22      	ldr	r3, [pc, #136]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e032      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4916      	ldr	r1, [pc, #88]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	490e      	ldr	r1, [pc, #56]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004636:	f000 f821 	bl	800467c <HAL_RCC_GetSysClockFreq>
 800463a:	4602      	mov	r2, r0
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	490a      	ldr	r1, [pc, #40]	; (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 8004648:	5ccb      	ldrb	r3, [r1, r3]
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fe f93c 	bl	80028d4 <HAL_InitTick>

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40023c00 	.word	0x40023c00
 800466c:	40023800 	.word	0x40023800
 8004670:	0800b548 	.word	0x0800b548
 8004674:	20000098 	.word	0x20000098
 8004678:	2000009c 	.word	0x2000009c

0800467c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b090      	sub	sp, #64	; 0x40
 8004682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	637b      	str	r3, [r7, #52]	; 0x34
 8004688:	2300      	movs	r3, #0
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468c:	2300      	movs	r3, #0
 800468e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004694:	4b59      	ldr	r3, [pc, #356]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b08      	cmp	r3, #8
 800469e:	d00d      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x40>
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	f200 80a1 	bhi.w	80047e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x34>
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ae:	e09b      	b.n	80047e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b53      	ldr	r3, [pc, #332]	; (8004800 <HAL_RCC_GetSysClockFreq+0x184>)
 80046b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046b4:	e09b      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b6:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_GetSysClockFreq+0x188>)
 80046b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046ba:	e098      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046bc:	4b4f      	ldr	r3, [pc, #316]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046c6:	4b4d      	ldr	r3, [pc, #308]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d028      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d2:	4b4a      	ldr	r3, [pc, #296]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	2200      	movs	r2, #0
 80046da:	623b      	str	r3, [r7, #32]
 80046dc:	627a      	str	r2, [r7, #36]	; 0x24
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046e4:	2100      	movs	r1, #0
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e8:	fb03 f201 	mul.w	r2, r3, r1
 80046ec:	2300      	movs	r3, #0
 80046ee:	fb00 f303 	mul.w	r3, r0, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	4a43      	ldr	r2, [pc, #268]	; (8004804 <HAL_RCC_GetSysClockFreq+0x188>)
 80046f6:	fba0 1202 	umull	r1, r2, r0, r2
 80046fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046fc:	460a      	mov	r2, r1
 80046fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004702:	4413      	add	r3, r2
 8004704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	2200      	movs	r2, #0
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	61fa      	str	r2, [r7, #28]
 800470e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004716:	f7fc fabf 	bl	8000c98 <__aeabi_uldivmod>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4613      	mov	r3, r2
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004722:	e053      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004724:	4b35      	ldr	r3, [pc, #212]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	099b      	lsrs	r3, r3, #6
 800472a:	2200      	movs	r2, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	617a      	str	r2, [r7, #20]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004736:	f04f 0b00 	mov.w	fp, #0
 800473a:	4652      	mov	r2, sl
 800473c:	465b      	mov	r3, fp
 800473e:	f04f 0000 	mov.w	r0, #0
 8004742:	f04f 0100 	mov.w	r1, #0
 8004746:	0159      	lsls	r1, r3, #5
 8004748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474c:	0150      	lsls	r0, r2, #5
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	ebb2 080a 	subs.w	r8, r2, sl
 8004756:	eb63 090b 	sbc.w	r9, r3, fp
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800476a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800476e:	ebb2 0408 	subs.w	r4, r2, r8
 8004772:	eb63 0509 	sbc.w	r5, r3, r9
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	00eb      	lsls	r3, r5, #3
 8004780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004784:	00e2      	lsls	r2, r4, #3
 8004786:	4614      	mov	r4, r2
 8004788:	461d      	mov	r5, r3
 800478a:	eb14 030a 	adds.w	r3, r4, sl
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	eb45 030b 	adc.w	r3, r5, fp
 8004794:	607b      	str	r3, [r7, #4]
 8004796:	f04f 0200 	mov.w	r2, #0
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a2:	4629      	mov	r1, r5
 80047a4:	028b      	lsls	r3, r1, #10
 80047a6:	4621      	mov	r1, r4
 80047a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ac:	4621      	mov	r1, r4
 80047ae:	028a      	lsls	r2, r1, #10
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b6:	2200      	movs	r2, #0
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	60fa      	str	r2, [r7, #12]
 80047bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047c0:	f7fc fa6a 	bl	8000c98 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4613      	mov	r3, r2
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_GetSysClockFreq+0x180>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	3301      	adds	r3, #1
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047e6:	e002      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3740      	adds	r7, #64	; 0x40
 80047f4:	46bd      	mov	sp, r7
 80047f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	00f42400 	.word	0x00f42400
 8004804:	017d7840 	.word	0x017d7840

08004808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000098 	.word	0x20000098

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a9b      	lsrs	r3, r3, #10
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	0800b558 	.word	0x0800b558

08004848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800484c:	f7ff ffdc 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004850:	4602      	mov	r2, r0
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0b5b      	lsrs	r3, r3, #13
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	4903      	ldr	r1, [pc, #12]	; (800486c <HAL_RCC_GetPCLK2Freq+0x24>)
 800485e:	5ccb      	ldrb	r3, [r1, r3]
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	0800b558 	.word	0x0800b558

08004870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e041      	b.n	8004906 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd febe 	bl	8002618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3304      	adds	r3, #4
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f000 fac0 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e041      	b.n	80049a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f839 	bl	80049ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f000 fa71 	bl	8004e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_TIM_PWM_Start+0x24>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e022      	b.n	8004a2a <HAL_TIM_PWM_Start+0x6a>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d109      	bne.n	80049fe <HAL_TIM_PWM_Start+0x3e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	e015      	b.n	8004a2a <HAL_TIM_PWM_Start+0x6a>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d109      	bne.n	8004a18 <HAL_TIM_PWM_Start+0x58>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	bf14      	ite	ne
 8004a10:	2301      	movne	r3, #1
 8004a12:	2300      	moveq	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	e008      	b.n	8004a2a <HAL_TIM_PWM_Start+0x6a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	bf14      	ite	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	2300      	moveq	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e068      	b.n	8004b04 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0x82>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a40:	e013      	b.n	8004a6a <HAL_TIM_PWM_Start+0xaa>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0x92>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a50:	e00b      	b.n	8004a6a <HAL_TIM_PWM_Start+0xaa>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_PWM_Start+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a60:	e003      	b.n	8004a6a <HAL_TIM_PWM_Start+0xaa>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fc84 	bl	8005380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a23      	ldr	r2, [pc, #140]	; (8004b0c <HAL_TIM_PWM_Start+0x14c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d107      	bne.n	8004a92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_TIM_PWM_Start+0x14c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d018      	beq.n	8004ace <HAL_TIM_PWM_Start+0x10e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d013      	beq.n	8004ace <HAL_TIM_PWM_Start+0x10e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <HAL_TIM_PWM_Start+0x150>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d00e      	beq.n	8004ace <HAL_TIM_PWM_Start+0x10e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a17      	ldr	r2, [pc, #92]	; (8004b14 <HAL_TIM_PWM_Start+0x154>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_TIM_PWM_Start+0x10e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a16      	ldr	r2, [pc, #88]	; (8004b18 <HAL_TIM_PWM_Start+0x158>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d004      	beq.n	8004ace <HAL_TIM_PWM_Start+0x10e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <HAL_TIM_PWM_Start+0x15c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d111      	bne.n	8004af2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b06      	cmp	r3, #6
 8004ade:	d010      	beq.n	8004b02 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af0:	e007      	b.n	8004b02 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40010000 	.word	0x40010000
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800
 8004b18:	40000c00 	.word	0x40000c00
 8004b1c:	40014000 	.word	0x40014000

08004b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e0ae      	b.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	f200 809f 	bhi.w	8004c8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004c8d 	.word	0x08004c8d
 8004b5c:	08004c8d 	.word	0x08004c8d
 8004b60:	08004c8d 	.word	0x08004c8d
 8004b64:	08004bc9 	.word	0x08004bc9
 8004b68:	08004c8d 	.word	0x08004c8d
 8004b6c:	08004c8d 	.word	0x08004c8d
 8004b70:	08004c8d 	.word	0x08004c8d
 8004b74:	08004c0b 	.word	0x08004c0b
 8004b78:	08004c8d 	.word	0x08004c8d
 8004b7c:	08004c8d 	.word	0x08004c8d
 8004b80:	08004c8d 	.word	0x08004c8d
 8004b84:	08004c4b 	.word	0x08004c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f9d0 	bl	8004f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0208 	orr.w	r2, r2, #8
 8004ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0204 	bic.w	r2, r2, #4
 8004bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	619a      	str	r2, [r3, #24]
      break;
 8004bc6:	e064      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa16 	bl	8005000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6999      	ldr	r1, [r3, #24]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	021a      	lsls	r2, r3, #8
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	619a      	str	r2, [r3, #24]
      break;
 8004c08:	e043      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fa61 	bl	80050d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0208 	orr.w	r2, r2, #8
 8004c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0204 	bic.w	r2, r2, #4
 8004c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69d9      	ldr	r1, [r3, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	61da      	str	r2, [r3, #28]
      break;
 8004c48:	e023      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 faab 	bl	80051ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69d9      	ldr	r1, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	021a      	lsls	r2, r3, #8
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	61da      	str	r2, [r3, #28]
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e0b4      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x186>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf8:	d03e      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0xd4>
 8004cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfe:	f200 8087 	bhi.w	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d06:	f000 8086 	beq.w	8004e16 <HAL_TIM_ConfigClockSource+0x172>
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	d87f      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b70      	cmp	r3, #112	; 0x70
 8004d12:	d01a      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0xa6>
 8004d14:	2b70      	cmp	r3, #112	; 0x70
 8004d16:	d87b      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b60      	cmp	r3, #96	; 0x60
 8004d1a:	d050      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x11a>
 8004d1c:	2b60      	cmp	r3, #96	; 0x60
 8004d1e:	d877      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b50      	cmp	r3, #80	; 0x50
 8004d22:	d03c      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0xfa>
 8004d24:	2b50      	cmp	r3, #80	; 0x50
 8004d26:	d873      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d058      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x13a>
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d86f      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b30      	cmp	r3, #48	; 0x30
 8004d32:	d064      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d34:	2b30      	cmp	r3, #48	; 0x30
 8004d36:	d86b      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d060      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d867      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d05c      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d05a      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	e062      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6899      	ldr	r1, [r3, #8]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f000 faf1 	bl	8005340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	609a      	str	r2, [r3, #8]
      break;
 8004d76:	e04f      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	6899      	ldr	r1, [r3, #8]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f000 fada 	bl	8005340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d9a:	609a      	str	r2, [r3, #8]
      break;
 8004d9c:	e03c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f000 fa4e 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2150      	movs	r1, #80	; 0x50
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 faa7 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e02c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f000 fa6d 	bl	80052aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2160      	movs	r1, #96	; 0x60
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fa97 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e01c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f000 fa2e 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2140      	movs	r1, #64	; 0x40
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 fa87 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004dfc:	e00c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f000 fa7e 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004e0e:	e003      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
      break;
 8004e14:	e000      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a34      	ldr	r2, [pc, #208]	; (8004f18 <TIM_Base_SetConfig+0xe4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00f      	beq.n	8004e6c <TIM_Base_SetConfig+0x38>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d00b      	beq.n	8004e6c <TIM_Base_SetConfig+0x38>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a31      	ldr	r2, [pc, #196]	; (8004f1c <TIM_Base_SetConfig+0xe8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d007      	beq.n	8004e6c <TIM_Base_SetConfig+0x38>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <TIM_Base_SetConfig+0xec>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d003      	beq.n	8004e6c <TIM_Base_SetConfig+0x38>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a2f      	ldr	r2, [pc, #188]	; (8004f24 <TIM_Base_SetConfig+0xf0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d108      	bne.n	8004e7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a25      	ldr	r2, [pc, #148]	; (8004f18 <TIM_Base_SetConfig+0xe4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01b      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8c:	d017      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <TIM_Base_SetConfig+0xe8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d013      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a21      	ldr	r2, [pc, #132]	; (8004f20 <TIM_Base_SetConfig+0xec>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00f      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <TIM_Base_SetConfig+0xf0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00b      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <TIM_Base_SetConfig+0xf4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d007      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <TIM_Base_SetConfig+0xf8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_Base_SetConfig+0x8a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	; (8004f30 <TIM_Base_SetConfig+0xfc>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d108      	bne.n	8004ed0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a08      	ldr	r2, [pc, #32]	; (8004f18 <TIM_Base_SetConfig+0xe4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d103      	bne.n	8004f04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	615a      	str	r2, [r3, #20]
}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40000c00 	.word	0x40000c00
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800

08004f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0303 	bic.w	r3, r3, #3
 8004f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0302 	bic.w	r3, r3, #2
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <TIM_OC1_SetConfig+0xc8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10c      	bne.n	8004faa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0308 	bic.w	r3, r3, #8
 8004f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <TIM_OC1_SetConfig+0xc8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d111      	bne.n	8004fd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	621a      	str	r2, [r3, #32]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	40010000 	.word	0x40010000

08005000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f023 0210 	bic.w	r2, r3, #16
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0320 	bic.w	r3, r3, #32
 800504a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <TIM_OC2_SetConfig+0xd4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10d      	bne.n	800507c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800507a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <TIM_OC2_SetConfig+0xd4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d113      	bne.n	80050ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800508a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000

080050d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <TIM_OC3_SetConfig+0xd0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10d      	bne.n	8005152 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800513c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <TIM_OC3_SetConfig+0xd0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d113      	bne.n	8005182 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	40010000 	.word	0x40010000

080051ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	031b      	lsls	r3, r3, #12
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a10      	ldr	r2, [pc, #64]	; (8005248 <TIM_OC4_SetConfig+0x9c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d109      	bne.n	8005220 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	019b      	lsls	r3, r3, #6
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000

0800524c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 030a 	bic.w	r3, r3, #10
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b087      	sub	sp, #28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0210 	bic.w	r2, r3, #16
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	031b      	lsls	r3, r3, #12
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	f043 0307 	orr.w	r3, r3, #7
 800532c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	021a      	lsls	r2, r3, #8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	431a      	orrs	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	2201      	movs	r2, #1
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1a      	ldr	r2, [r3, #32]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1a      	ldr	r2, [r3, #32]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	fa01 f303 	lsl.w	r3, r1, r3
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e050      	b.n	8005486 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d018      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005430:	d013      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a18      	ldr	r2, [pc, #96]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a16      	ldr	r2, [pc, #88]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a13      	ldr	r2, [pc, #76]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d10c      	bne.n	8005474 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4313      	orrs	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40010000 	.word	0x40010000
 8005498:	40000400 	.word	0x40000400
 800549c:	40000800 	.word	0x40000800
 80054a0:	40000c00 	.word	0x40000c00
 80054a4:	40014000 	.word	0x40014000

080054a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e03d      	b.n	8005540 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e03f      	b.n	80055de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fd f912 	bl	800279c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	; 0x24
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800558e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fddf 	bl	8006154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b08a      	sub	sp, #40	; 0x28
 80055ea:	af02      	add	r7, sp, #8
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b20      	cmp	r3, #32
 8005604:	d17c      	bne.n	8005700 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_UART_Transmit+0x2c>
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e075      	b.n	8005702 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_UART_Transmit+0x3e>
 8005620:	2302      	movs	r3, #2
 8005622:	e06e      	b.n	8005702 <HAL_UART_Transmit+0x11c>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2221      	movs	r2, #33	; 0x21
 8005636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800563a:	f7fd f98f 	bl	800295c <HAL_GetTick>
 800563e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	88fa      	ldrh	r2, [r7, #6]
 800564a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005654:	d108      	bne.n	8005668 <HAL_UART_Transmit+0x82>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	e003      	b.n	8005670 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800566c:	2300      	movs	r3, #0
 800566e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005678:	e02a      	b.n	80056d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2200      	movs	r2, #0
 8005682:	2180      	movs	r1, #128	; 0x80
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 fb1f 	bl	8005cc8 <UART_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e036      	b.n	8005702 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10b      	bne.n	80056b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	461a      	mov	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	3302      	adds	r3, #2
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	e007      	b.n	80056c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	3301      	adds	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1cf      	bne.n	800567a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2200      	movs	r2, #0
 80056e2:	2140      	movs	r1, #64	; 0x40
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 faef 	bl	8005cc8 <UART_WaitOnFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e006      	b.n	8005702 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e000      	b.n	8005702 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005700:	2302      	movs	r3, #2
  }
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	4613      	mov	r3, r2
 8005716:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b20      	cmp	r3, #32
 8005722:	d11d      	bne.n	8005760 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <HAL_UART_Receive_IT+0x26>
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e016      	b.n	8005762 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_UART_Receive_IT+0x38>
 800573e:	2302      	movs	r3, #2
 8005740:	e00f      	b.n	8005762 <HAL_UART_Receive_IT+0x58>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005750:	88fb      	ldrh	r3, [r7, #6]
 8005752:	461a      	mov	r2, r3
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fb24 	bl	8005da4 <UART_Start_Receive_IT>
 800575c:	4603      	mov	r3, r0
 800575e:	e000      	b.n	8005762 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b0ba      	sub	sp, #232	; 0xe8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005792:	2300      	movs	r3, #0
 8005794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005798:	2300      	movs	r3, #0
 800579a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800579e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a2:	f003 030f 	and.w	r3, r3, #15
 80057a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80057aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10f      	bne.n	80057d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_UART_IRQHandler+0x66>
 80057be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fc07 	bl	8005fde <UART_Receive_IT>
      return;
 80057d0:	e256      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80de 	beq.w	8005998 <HAL_UART_IRQHandler+0x22c>
 80057dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d106      	bne.n	80057f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80d1 	beq.w	8005998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00b      	beq.n	800581a <HAL_UART_IRQHandler+0xae>
 8005802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f043 0201 	orr.w	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_UART_IRQHandler+0xd2>
 8005826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d005      	beq.n	800583e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f043 0202 	orr.w	r2, r3, #2
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <HAL_UART_IRQHandler+0xf6>
 800584a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f043 0204 	orr.w	r2, r3, #4
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d011      	beq.n	8005892 <HAL_UART_IRQHandler+0x126>
 800586e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d105      	bne.n	8005886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800587a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0208 	orr.w	r2, r3, #8
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 81ed 	beq.w	8005c76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <HAL_UART_IRQHandler+0x14e>
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fb92 	bl	8005fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d103      	bne.n	80058e6 <HAL_UART_IRQHandler+0x17a>
 80058de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d04f      	beq.n	8005986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fa9a 	bl	8005e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d141      	bne.n	800597e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3314      	adds	r3, #20
 8005900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3314      	adds	r3, #20
 8005922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005926:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800592a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800593e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1d9      	bne.n	80058fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d013      	beq.n	8005976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005952:	4a7d      	ldr	r2, [pc, #500]	; (8005b48 <HAL_UART_IRQHandler+0x3dc>)
 8005954:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd f9af 	bl	8002cbe <HAL_DMA_Abort_IT>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d016      	beq.n	8005994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005970:	4610      	mov	r0, r2
 8005972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	e00e      	b.n	8005994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f990 	bl	8005c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	e00a      	b.n	8005994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f98c 	bl	8005c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	e006      	b.n	8005994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f988 	bl	8005c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005992:	e170      	b.n	8005c76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005994:	bf00      	nop
    return;
 8005996:	e16e      	b.n	8005c76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599c:	2b01      	cmp	r3, #1
 800599e:	f040 814a 	bne.w	8005c36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8143 	beq.w	8005c36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 813c 	beq.w	8005c36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	f040 80b4 	bne.w	8005b4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 8140 	beq.w	8005c7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a02:	429a      	cmp	r2, r3
 8005a04:	f080 8139 	bcs.w	8005c7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1a:	f000 8088 	beq.w	8005b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005a4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1d9      	bne.n	8005a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e1      	bne.n	8005a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3314      	adds	r3, #20
 8005ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e3      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afe:	f023 0310 	bic.w	r3, r3, #16
 8005b02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	330c      	adds	r3, #12
 8005b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005b10:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e3      	bne.n	8005aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fd f858 	bl	8002bde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f8b6 	bl	8005cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b44:	e099      	b.n	8005c7a <HAL_UART_IRQHandler+0x50e>
 8005b46:	bf00      	nop
 8005b48:	08005ee7 	.word	0x08005ee7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 808b 	beq.w	8005c7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8086 	beq.w	8005c7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b96:	647a      	str	r2, [r7, #68]	; 0x44
 8005b98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e3      	bne.n	8005b72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3314      	adds	r3, #20
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bce:	633a      	str	r2, [r7, #48]	; 0x30
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e3      	bne.n	8005baa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0310 	bic.w	r3, r3, #16
 8005c06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	617b      	str	r3, [r7, #20]
   return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e3      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f83e 	bl	8005cb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c34:	e023      	b.n	8005c7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <HAL_UART_IRQHandler+0x4ea>
 8005c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f95d 	bl	8005f0e <UART_Transmit_IT>
    return;
 8005c54:	e014      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00e      	beq.n	8005c80 <HAL_UART_IRQHandler+0x514>
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f99d 	bl	8005fae <UART_EndTransmit_IT>
    return;
 8005c74:	e004      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
    return;
 8005c76:	bf00      	nop
 8005c78:	e002      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
      return;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <HAL_UART_IRQHandler+0x514>
      return;
 8005c7e:	bf00      	nop
  }
}
 8005c80:	37e8      	adds	r7, #232	; 0xe8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop

08005c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b090      	sub	sp, #64	; 0x40
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd8:	e050      	b.n	8005d7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d04c      	beq.n	8005d7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ce8:	f7fc fe38 	bl	800295c <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d241      	bcs.n	8005d7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d18:	637a      	str	r2, [r7, #52]	; 0x34
 8005d1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e5      	bne.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3314      	adds	r3, #20
 8005d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3314      	adds	r3, #20
 8005d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d4c:	623a      	str	r2, [r7, #32]
 8005d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	69f9      	ldr	r1, [r7, #28]
 8005d52:	6a3a      	ldr	r2, [r7, #32]
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e00f      	b.n	8005d9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	4013      	ands	r3, r2
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2301      	moveq	r3, #1
 8005d8e:	2300      	movne	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d09f      	beq.n	8005cda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3740      	adds	r7, #64	; 0x40
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	88fa      	ldrh	r2, [r7, #6]
 8005dbc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	88fa      	ldrh	r2, [r7, #6]
 8005dc2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2222      	movs	r2, #34	; 0x22
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0220 	orr.w	r2, r2, #32
 8005e10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b095      	sub	sp, #84	; 0x54
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	330c      	adds	r3, #12
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	e853 3f00 	ldrex	r3, [r3]
 8005e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e48:	643a      	str	r2, [r7, #64]	; 0x40
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e5      	bne.n	8005e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3314      	adds	r3, #20
 8005e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f023 0301 	bic.w	r3, r3, #1
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3314      	adds	r3, #20
 8005e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e5      	bne.n	8005e5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d119      	bne.n	8005ecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f023 0310 	bic.w	r3, r3, #16
 8005eae:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb8:	61ba      	str	r2, [r7, #24]
 8005eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6979      	ldr	r1, [r7, #20]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005eda:	bf00      	nop
 8005edc:	3754      	adds	r7, #84	; 0x54
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff fecb 	bl	8005c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f06:	bf00      	nop
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b21      	cmp	r3, #33	; 0x21
 8005f20:	d13e      	bne.n	8005fa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2a:	d114      	bne.n	8005f56 <UART_Transmit_IT+0x48>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d110      	bne.n	8005f56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	1c9a      	adds	r2, r3, #2
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	621a      	str	r2, [r3, #32]
 8005f54:	e008      	b.n	8005f68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	1c59      	adds	r1, r3, #1
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6211      	str	r1, [r2, #32]
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	4619      	mov	r1, r3
 8005f76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10f      	bne.n	8005f9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e000      	b.n	8005fa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005fa0:	2302      	movs	r3, #2
  }
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff fe5a 	bl	8005c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b08c      	sub	sp, #48	; 0x30
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b22      	cmp	r3, #34	; 0x22
 8005ff0:	f040 80ab 	bne.w	800614a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffc:	d117      	bne.n	800602e <UART_Receive_IT+0x50>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d113      	bne.n	800602e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601c:	b29a      	uxth	r2, r3
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	1c9a      	adds	r2, r3, #2
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	629a      	str	r2, [r3, #40]	; 0x28
 800602c:	e026      	b.n	800607c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006040:	d007      	beq.n	8006052 <UART_Receive_IT+0x74>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <UART_Receive_IT+0x82>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	e008      	b.n	8006072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	b2db      	uxtb	r3, r3
 8006068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606c:	b2da      	uxtb	r2, r3
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29b      	uxth	r3, r3
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	4619      	mov	r1, r3
 800608a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800608c:	2b00      	cmp	r3, #0
 800608e:	d15a      	bne.n	8006146 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0220 	bic.w	r2, r2, #32
 800609e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68da      	ldr	r2, [r3, #12]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695a      	ldr	r2, [r3, #20]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d135      	bne.n	800613c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	330c      	adds	r3, #12
 80060dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	613b      	str	r3, [r7, #16]
   return(result);
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f023 0310 	bic.w	r3, r3, #16
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f6:	623a      	str	r2, [r7, #32]
 80060f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fa:	69f9      	ldr	r1, [r7, #28]
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	e841 2300 	strex	r3, r2, [r1]
 8006102:	61bb      	str	r3, [r7, #24]
   return(result);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1e5      	bne.n	80060d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0310 	and.w	r3, r3, #16
 8006114:	2b10      	cmp	r3, #16
 8006116:	d10a      	bne.n	800612e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fdbb 	bl	8005cb0 <HAL_UARTEx_RxEventCallback>
 800613a:	e002      	b.n	8006142 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7fb fc51 	bl	80019e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	e002      	b.n	800614c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	e000      	b.n	800614c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800614a:	2302      	movs	r3, #2
  }
}
 800614c:	4618      	mov	r0, r3
 800614e:	3730      	adds	r7, #48	; 0x30
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006158:	b0c0      	sub	sp, #256	; 0x100
 800615a:	af00      	add	r7, sp, #0
 800615c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800616c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006170:	68d9      	ldr	r1, [r3, #12]
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	ea40 0301 	orr.w	r3, r0, r1
 800617c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	431a      	orrs	r2, r3
 800618c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	431a      	orrs	r2, r3
 8006194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061ac:	f021 010c 	bic.w	r1, r1, #12
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061ba:	430b      	orrs	r3, r1
 80061bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ce:	6999      	ldr	r1, [r3, #24]
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	ea40 0301 	orr.w	r3, r0, r1
 80061da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b8f      	ldr	r3, [pc, #572]	; (8006420 <UART_SetConfig+0x2cc>)
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d005      	beq.n	80061f4 <UART_SetConfig+0xa0>
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	4b8d      	ldr	r3, [pc, #564]	; (8006424 <UART_SetConfig+0x2d0>)
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d104      	bne.n	80061fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061f4:	f7fe fb28 	bl	8004848 <HAL_RCC_GetPCLK2Freq>
 80061f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80061fc:	e003      	b.n	8006206 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061fe:	f7fe fb0f 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8006202:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006210:	f040 810c 	bne.w	800642c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006218:	2200      	movs	r2, #0
 800621a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800621e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006222:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006226:	4622      	mov	r2, r4
 8006228:	462b      	mov	r3, r5
 800622a:	1891      	adds	r1, r2, r2
 800622c:	65b9      	str	r1, [r7, #88]	; 0x58
 800622e:	415b      	adcs	r3, r3
 8006230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006236:	4621      	mov	r1, r4
 8006238:	eb12 0801 	adds.w	r8, r2, r1
 800623c:	4629      	mov	r1, r5
 800623e:	eb43 0901 	adc.w	r9, r3, r1
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800624e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006256:	4690      	mov	r8, r2
 8006258:	4699      	mov	r9, r3
 800625a:	4623      	mov	r3, r4
 800625c:	eb18 0303 	adds.w	r3, r8, r3
 8006260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006264:	462b      	mov	r3, r5
 8006266:	eb49 0303 	adc.w	r3, r9, r3
 800626a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800626e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800627a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800627e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006282:	460b      	mov	r3, r1
 8006284:	18db      	adds	r3, r3, r3
 8006286:	653b      	str	r3, [r7, #80]	; 0x50
 8006288:	4613      	mov	r3, r2
 800628a:	eb42 0303 	adc.w	r3, r2, r3
 800628e:	657b      	str	r3, [r7, #84]	; 0x54
 8006290:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006294:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006298:	f7fa fcfe 	bl	8000c98 <__aeabi_uldivmod>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4b61      	ldr	r3, [pc, #388]	; (8006428 <UART_SetConfig+0x2d4>)
 80062a2:	fba3 2302 	umull	r2, r3, r3, r2
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	011c      	lsls	r4, r3, #4
 80062aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80062b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80062bc:	4642      	mov	r2, r8
 80062be:	464b      	mov	r3, r9
 80062c0:	1891      	adds	r1, r2, r2
 80062c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80062c4:	415b      	adcs	r3, r3
 80062c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80062cc:	4641      	mov	r1, r8
 80062ce:	eb12 0a01 	adds.w	sl, r2, r1
 80062d2:	4649      	mov	r1, r9
 80062d4:	eb43 0b01 	adc.w	fp, r3, r1
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ec:	4692      	mov	sl, r2
 80062ee:	469b      	mov	fp, r3
 80062f0:	4643      	mov	r3, r8
 80062f2:	eb1a 0303 	adds.w	r3, sl, r3
 80062f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062fa:	464b      	mov	r3, r9
 80062fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006310:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006314:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006318:	460b      	mov	r3, r1
 800631a:	18db      	adds	r3, r3, r3
 800631c:	643b      	str	r3, [r7, #64]	; 0x40
 800631e:	4613      	mov	r3, r2
 8006320:	eb42 0303 	adc.w	r3, r2, r3
 8006324:	647b      	str	r3, [r7, #68]	; 0x44
 8006326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800632a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800632e:	f7fa fcb3 	bl	8000c98 <__aeabi_uldivmod>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4611      	mov	r1, r2
 8006338:	4b3b      	ldr	r3, [pc, #236]	; (8006428 <UART_SetConfig+0x2d4>)
 800633a:	fba3 2301 	umull	r2, r3, r3, r1
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	2264      	movs	r2, #100	; 0x64
 8006342:	fb02 f303 	mul.w	r3, r2, r3
 8006346:	1acb      	subs	r3, r1, r3
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800634e:	4b36      	ldr	r3, [pc, #216]	; (8006428 <UART_SetConfig+0x2d4>)
 8006350:	fba3 2302 	umull	r2, r3, r3, r2
 8006354:	095b      	lsrs	r3, r3, #5
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800635c:	441c      	add	r4, r3
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006362:	2200      	movs	r2, #0
 8006364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006368:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800636c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006370:	4642      	mov	r2, r8
 8006372:	464b      	mov	r3, r9
 8006374:	1891      	adds	r1, r2, r2
 8006376:	63b9      	str	r1, [r7, #56]	; 0x38
 8006378:	415b      	adcs	r3, r3
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800637c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006380:	4641      	mov	r1, r8
 8006382:	1851      	adds	r1, r2, r1
 8006384:	6339      	str	r1, [r7, #48]	; 0x30
 8006386:	4649      	mov	r1, r9
 8006388:	414b      	adcs	r3, r1
 800638a:	637b      	str	r3, [r7, #52]	; 0x34
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006398:	4659      	mov	r1, fp
 800639a:	00cb      	lsls	r3, r1, #3
 800639c:	4651      	mov	r1, sl
 800639e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063a2:	4651      	mov	r1, sl
 80063a4:	00ca      	lsls	r2, r1, #3
 80063a6:	4610      	mov	r0, r2
 80063a8:	4619      	mov	r1, r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	4642      	mov	r2, r8
 80063ae:	189b      	adds	r3, r3, r2
 80063b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b4:	464b      	mov	r3, r9
 80063b6:	460a      	mov	r2, r1
 80063b8:	eb42 0303 	adc.w	r3, r2, r3
 80063bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80063cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80063d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80063d4:	460b      	mov	r3, r1
 80063d6:	18db      	adds	r3, r3, r3
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063da:	4613      	mov	r3, r2
 80063dc:	eb42 0303 	adc.w	r3, r2, r3
 80063e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80063ea:	f7fa fc55 	bl	8000c98 <__aeabi_uldivmod>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <UART_SetConfig+0x2d4>)
 80063f4:	fba3 1302 	umull	r1, r3, r3, r2
 80063f8:	095b      	lsrs	r3, r3, #5
 80063fa:	2164      	movs	r1, #100	; 0x64
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	3332      	adds	r3, #50	; 0x32
 8006406:	4a08      	ldr	r2, [pc, #32]	; (8006428 <UART_SetConfig+0x2d4>)
 8006408:	fba2 2303 	umull	r2, r3, r2, r3
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	f003 0207 	and.w	r2, r3, #7
 8006412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4422      	add	r2, r4
 800641a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800641c:	e106      	b.n	800662c <UART_SetConfig+0x4d8>
 800641e:	bf00      	nop
 8006420:	40011000 	.word	0x40011000
 8006424:	40011400 	.word	0x40011400
 8006428:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800642c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006430:	2200      	movs	r2, #0
 8006432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800643a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800643e:	4642      	mov	r2, r8
 8006440:	464b      	mov	r3, r9
 8006442:	1891      	adds	r1, r2, r2
 8006444:	6239      	str	r1, [r7, #32]
 8006446:	415b      	adcs	r3, r3
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
 800644a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800644e:	4641      	mov	r1, r8
 8006450:	1854      	adds	r4, r2, r1
 8006452:	4649      	mov	r1, r9
 8006454:	eb43 0501 	adc.w	r5, r3, r1
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	00eb      	lsls	r3, r5, #3
 8006462:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006466:	00e2      	lsls	r2, r4, #3
 8006468:	4614      	mov	r4, r2
 800646a:	461d      	mov	r5, r3
 800646c:	4643      	mov	r3, r8
 800646e:	18e3      	adds	r3, r4, r3
 8006470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006474:	464b      	mov	r3, r9
 8006476:	eb45 0303 	adc.w	r3, r5, r3
 800647a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800648a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800649a:	4629      	mov	r1, r5
 800649c:	008b      	lsls	r3, r1, #2
 800649e:	4621      	mov	r1, r4
 80064a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064a4:	4621      	mov	r1, r4
 80064a6:	008a      	lsls	r2, r1, #2
 80064a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064ac:	f7fa fbf4 	bl	8000c98 <__aeabi_uldivmod>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4b60      	ldr	r3, [pc, #384]	; (8006638 <UART_SetConfig+0x4e4>)
 80064b6:	fba3 2302 	umull	r2, r3, r3, r2
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	011c      	lsls	r4, r3, #4
 80064be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80064c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80064cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80064d0:	4642      	mov	r2, r8
 80064d2:	464b      	mov	r3, r9
 80064d4:	1891      	adds	r1, r2, r2
 80064d6:	61b9      	str	r1, [r7, #24]
 80064d8:	415b      	adcs	r3, r3
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064e0:	4641      	mov	r1, r8
 80064e2:	1851      	adds	r1, r2, r1
 80064e4:	6139      	str	r1, [r7, #16]
 80064e6:	4649      	mov	r1, r9
 80064e8:	414b      	adcs	r3, r1
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064f8:	4659      	mov	r1, fp
 80064fa:	00cb      	lsls	r3, r1, #3
 80064fc:	4651      	mov	r1, sl
 80064fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006502:	4651      	mov	r1, sl
 8006504:	00ca      	lsls	r2, r1, #3
 8006506:	4610      	mov	r0, r2
 8006508:	4619      	mov	r1, r3
 800650a:	4603      	mov	r3, r0
 800650c:	4642      	mov	r2, r8
 800650e:	189b      	adds	r3, r3, r2
 8006510:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006514:	464b      	mov	r3, r9
 8006516:	460a      	mov	r2, r1
 8006518:	eb42 0303 	adc.w	r3, r2, r3
 800651c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	67bb      	str	r3, [r7, #120]	; 0x78
 800652a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006538:	4649      	mov	r1, r9
 800653a:	008b      	lsls	r3, r1, #2
 800653c:	4641      	mov	r1, r8
 800653e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006542:	4641      	mov	r1, r8
 8006544:	008a      	lsls	r2, r1, #2
 8006546:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800654a:	f7fa fba5 	bl	8000c98 <__aeabi_uldivmod>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4611      	mov	r1, r2
 8006554:	4b38      	ldr	r3, [pc, #224]	; (8006638 <UART_SetConfig+0x4e4>)
 8006556:	fba3 2301 	umull	r2, r3, r3, r1
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	2264      	movs	r2, #100	; 0x64
 800655e:	fb02 f303 	mul.w	r3, r2, r3
 8006562:	1acb      	subs	r3, r1, r3
 8006564:	011b      	lsls	r3, r3, #4
 8006566:	3332      	adds	r3, #50	; 0x32
 8006568:	4a33      	ldr	r2, [pc, #204]	; (8006638 <UART_SetConfig+0x4e4>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	095b      	lsrs	r3, r3, #5
 8006570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006574:	441c      	add	r4, r3
 8006576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800657a:	2200      	movs	r2, #0
 800657c:	673b      	str	r3, [r7, #112]	; 0x70
 800657e:	677a      	str	r2, [r7, #116]	; 0x74
 8006580:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	1891      	adds	r1, r2, r2
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	415b      	adcs	r3, r3
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006594:	4641      	mov	r1, r8
 8006596:	1851      	adds	r1, r2, r1
 8006598:	6039      	str	r1, [r7, #0]
 800659a:	4649      	mov	r1, r9
 800659c:	414b      	adcs	r3, r1
 800659e:	607b      	str	r3, [r7, #4]
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065ac:	4659      	mov	r1, fp
 80065ae:	00cb      	lsls	r3, r1, #3
 80065b0:	4651      	mov	r1, sl
 80065b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065b6:	4651      	mov	r1, sl
 80065b8:	00ca      	lsls	r2, r1, #3
 80065ba:	4610      	mov	r0, r2
 80065bc:	4619      	mov	r1, r3
 80065be:	4603      	mov	r3, r0
 80065c0:	4642      	mov	r2, r8
 80065c2:	189b      	adds	r3, r3, r2
 80065c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80065c6:	464b      	mov	r3, r9
 80065c8:	460a      	mov	r2, r1
 80065ca:	eb42 0303 	adc.w	r3, r2, r3
 80065ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	663b      	str	r3, [r7, #96]	; 0x60
 80065da:	667a      	str	r2, [r7, #100]	; 0x64
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80065e8:	4649      	mov	r1, r9
 80065ea:	008b      	lsls	r3, r1, #2
 80065ec:	4641      	mov	r1, r8
 80065ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f2:	4641      	mov	r1, r8
 80065f4:	008a      	lsls	r2, r1, #2
 80065f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80065fa:	f7fa fb4d 	bl	8000c98 <__aeabi_uldivmod>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <UART_SetConfig+0x4e4>)
 8006604:	fba3 1302 	umull	r1, r3, r3, r2
 8006608:	095b      	lsrs	r3, r3, #5
 800660a:	2164      	movs	r1, #100	; 0x64
 800660c:	fb01 f303 	mul.w	r3, r1, r3
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	3332      	adds	r3, #50	; 0x32
 8006616:	4a08      	ldr	r2, [pc, #32]	; (8006638 <UART_SetConfig+0x4e4>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	f003 020f 	and.w	r2, r3, #15
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4422      	add	r2, r4
 800662a:	609a      	str	r2, [r3, #8]
}
 800662c:	bf00      	nop
 800662e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006632:	46bd      	mov	sp, r7
 8006634:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006638:	51eb851f 	.word	0x51eb851f

0800663c <atoi>:
 800663c:	220a      	movs	r2, #10
 800663e:	2100      	movs	r1, #0
 8006640:	f000 b884 	b.w	800674c <strtol>

08006644 <_strtol_l.constprop.0>:
 8006644:	2b01      	cmp	r3, #1
 8006646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800664a:	d001      	beq.n	8006650 <_strtol_l.constprop.0+0xc>
 800664c:	2b24      	cmp	r3, #36	; 0x24
 800664e:	d906      	bls.n	800665e <_strtol_l.constprop.0+0x1a>
 8006650:	f001 f88c 	bl	800776c <__errno>
 8006654:	2316      	movs	r3, #22
 8006656:	6003      	str	r3, [r0, #0]
 8006658:	2000      	movs	r0, #0
 800665a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800665e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006744 <_strtol_l.constprop.0+0x100>
 8006662:	460d      	mov	r5, r1
 8006664:	462e      	mov	r6, r5
 8006666:	f815 4b01 	ldrb.w	r4, [r5], #1
 800666a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800666e:	f017 0708 	ands.w	r7, r7, #8
 8006672:	d1f7      	bne.n	8006664 <_strtol_l.constprop.0+0x20>
 8006674:	2c2d      	cmp	r4, #45	; 0x2d
 8006676:	d132      	bne.n	80066de <_strtol_l.constprop.0+0x9a>
 8006678:	782c      	ldrb	r4, [r5, #0]
 800667a:	2701      	movs	r7, #1
 800667c:	1cb5      	adds	r5, r6, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d05b      	beq.n	800673a <_strtol_l.constprop.0+0xf6>
 8006682:	2b10      	cmp	r3, #16
 8006684:	d109      	bne.n	800669a <_strtol_l.constprop.0+0x56>
 8006686:	2c30      	cmp	r4, #48	; 0x30
 8006688:	d107      	bne.n	800669a <_strtol_l.constprop.0+0x56>
 800668a:	782c      	ldrb	r4, [r5, #0]
 800668c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006690:	2c58      	cmp	r4, #88	; 0x58
 8006692:	d14d      	bne.n	8006730 <_strtol_l.constprop.0+0xec>
 8006694:	786c      	ldrb	r4, [r5, #1]
 8006696:	2310      	movs	r3, #16
 8006698:	3502      	adds	r5, #2
 800669a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800669e:	f108 38ff 	add.w	r8, r8, #4294967295
 80066a2:	f04f 0e00 	mov.w	lr, #0
 80066a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80066aa:	4676      	mov	r6, lr
 80066ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80066b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80066b4:	f1bc 0f09 	cmp.w	ip, #9
 80066b8:	d816      	bhi.n	80066e8 <_strtol_l.constprop.0+0xa4>
 80066ba:	4664      	mov	r4, ip
 80066bc:	42a3      	cmp	r3, r4
 80066be:	dd24      	ble.n	800670a <_strtol_l.constprop.0+0xc6>
 80066c0:	f1be 3fff 	cmp.w	lr, #4294967295
 80066c4:	d008      	beq.n	80066d8 <_strtol_l.constprop.0+0x94>
 80066c6:	45b1      	cmp	r9, r6
 80066c8:	d31c      	bcc.n	8006704 <_strtol_l.constprop.0+0xc0>
 80066ca:	d101      	bne.n	80066d0 <_strtol_l.constprop.0+0x8c>
 80066cc:	45a2      	cmp	sl, r4
 80066ce:	db19      	blt.n	8006704 <_strtol_l.constprop.0+0xc0>
 80066d0:	fb06 4603 	mla	r6, r6, r3, r4
 80066d4:	f04f 0e01 	mov.w	lr, #1
 80066d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066dc:	e7e8      	b.n	80066b0 <_strtol_l.constprop.0+0x6c>
 80066de:	2c2b      	cmp	r4, #43	; 0x2b
 80066e0:	bf04      	itt	eq
 80066e2:	782c      	ldrbeq	r4, [r5, #0]
 80066e4:	1cb5      	addeq	r5, r6, #2
 80066e6:	e7ca      	b.n	800667e <_strtol_l.constprop.0+0x3a>
 80066e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80066ec:	f1bc 0f19 	cmp.w	ip, #25
 80066f0:	d801      	bhi.n	80066f6 <_strtol_l.constprop.0+0xb2>
 80066f2:	3c37      	subs	r4, #55	; 0x37
 80066f4:	e7e2      	b.n	80066bc <_strtol_l.constprop.0+0x78>
 80066f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80066fa:	f1bc 0f19 	cmp.w	ip, #25
 80066fe:	d804      	bhi.n	800670a <_strtol_l.constprop.0+0xc6>
 8006700:	3c57      	subs	r4, #87	; 0x57
 8006702:	e7db      	b.n	80066bc <_strtol_l.constprop.0+0x78>
 8006704:	f04f 3eff 	mov.w	lr, #4294967295
 8006708:	e7e6      	b.n	80066d8 <_strtol_l.constprop.0+0x94>
 800670a:	f1be 3fff 	cmp.w	lr, #4294967295
 800670e:	d105      	bne.n	800671c <_strtol_l.constprop.0+0xd8>
 8006710:	2322      	movs	r3, #34	; 0x22
 8006712:	6003      	str	r3, [r0, #0]
 8006714:	4646      	mov	r6, r8
 8006716:	b942      	cbnz	r2, 800672a <_strtol_l.constprop.0+0xe6>
 8006718:	4630      	mov	r0, r6
 800671a:	e79e      	b.n	800665a <_strtol_l.constprop.0+0x16>
 800671c:	b107      	cbz	r7, 8006720 <_strtol_l.constprop.0+0xdc>
 800671e:	4276      	negs	r6, r6
 8006720:	2a00      	cmp	r2, #0
 8006722:	d0f9      	beq.n	8006718 <_strtol_l.constprop.0+0xd4>
 8006724:	f1be 0f00 	cmp.w	lr, #0
 8006728:	d000      	beq.n	800672c <_strtol_l.constprop.0+0xe8>
 800672a:	1e69      	subs	r1, r5, #1
 800672c:	6011      	str	r1, [r2, #0]
 800672e:	e7f3      	b.n	8006718 <_strtol_l.constprop.0+0xd4>
 8006730:	2430      	movs	r4, #48	; 0x30
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1b1      	bne.n	800669a <_strtol_l.constprop.0+0x56>
 8006736:	2308      	movs	r3, #8
 8006738:	e7af      	b.n	800669a <_strtol_l.constprop.0+0x56>
 800673a:	2c30      	cmp	r4, #48	; 0x30
 800673c:	d0a5      	beq.n	800668a <_strtol_l.constprop.0+0x46>
 800673e:	230a      	movs	r3, #10
 8006740:	e7ab      	b.n	800669a <_strtol_l.constprop.0+0x56>
 8006742:	bf00      	nop
 8006744:	0800b561 	.word	0x0800b561

08006748 <_strtol_r>:
 8006748:	f7ff bf7c 	b.w	8006644 <_strtol_l.constprop.0>

0800674c <strtol>:
 800674c:	4613      	mov	r3, r2
 800674e:	460a      	mov	r2, r1
 8006750:	4601      	mov	r1, r0
 8006752:	4802      	ldr	r0, [pc, #8]	; (800675c <strtol+0x10>)
 8006754:	6800      	ldr	r0, [r0, #0]
 8006756:	f7ff bf75 	b.w	8006644 <_strtol_l.constprop.0>
 800675a:	bf00      	nop
 800675c:	200000fc 	.word	0x200000fc

08006760 <__cvt>:
 8006760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	ec55 4b10 	vmov	r4, r5, d0
 8006768:	2d00      	cmp	r5, #0
 800676a:	460e      	mov	r6, r1
 800676c:	4619      	mov	r1, r3
 800676e:	462b      	mov	r3, r5
 8006770:	bfbb      	ittet	lt
 8006772:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006776:	461d      	movlt	r5, r3
 8006778:	2300      	movge	r3, #0
 800677a:	232d      	movlt	r3, #45	; 0x2d
 800677c:	700b      	strb	r3, [r1, #0]
 800677e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006780:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006784:	4691      	mov	r9, r2
 8006786:	f023 0820 	bic.w	r8, r3, #32
 800678a:	bfbc      	itt	lt
 800678c:	4622      	movlt	r2, r4
 800678e:	4614      	movlt	r4, r2
 8006790:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006794:	d005      	beq.n	80067a2 <__cvt+0x42>
 8006796:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800679a:	d100      	bne.n	800679e <__cvt+0x3e>
 800679c:	3601      	adds	r6, #1
 800679e:	2102      	movs	r1, #2
 80067a0:	e000      	b.n	80067a4 <__cvt+0x44>
 80067a2:	2103      	movs	r1, #3
 80067a4:	ab03      	add	r3, sp, #12
 80067a6:	9301      	str	r3, [sp, #4]
 80067a8:	ab02      	add	r3, sp, #8
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	ec45 4b10 	vmov	d0, r4, r5
 80067b0:	4653      	mov	r3, sl
 80067b2:	4632      	mov	r2, r6
 80067b4:	f001 f894 	bl	80078e0 <_dtoa_r>
 80067b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067bc:	4607      	mov	r7, r0
 80067be:	d102      	bne.n	80067c6 <__cvt+0x66>
 80067c0:	f019 0f01 	tst.w	r9, #1
 80067c4:	d022      	beq.n	800680c <__cvt+0xac>
 80067c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067ca:	eb07 0906 	add.w	r9, r7, r6
 80067ce:	d110      	bne.n	80067f2 <__cvt+0x92>
 80067d0:	783b      	ldrb	r3, [r7, #0]
 80067d2:	2b30      	cmp	r3, #48	; 0x30
 80067d4:	d10a      	bne.n	80067ec <__cvt+0x8c>
 80067d6:	2200      	movs	r2, #0
 80067d8:	2300      	movs	r3, #0
 80067da:	4620      	mov	r0, r4
 80067dc:	4629      	mov	r1, r5
 80067de:	f7fa f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 80067e2:	b918      	cbnz	r0, 80067ec <__cvt+0x8c>
 80067e4:	f1c6 0601 	rsb	r6, r6, #1
 80067e8:	f8ca 6000 	str.w	r6, [sl]
 80067ec:	f8da 3000 	ldr.w	r3, [sl]
 80067f0:	4499      	add	r9, r3
 80067f2:	2200      	movs	r2, #0
 80067f4:	2300      	movs	r3, #0
 80067f6:	4620      	mov	r0, r4
 80067f8:	4629      	mov	r1, r5
 80067fa:	f7fa f96d 	bl	8000ad8 <__aeabi_dcmpeq>
 80067fe:	b108      	cbz	r0, 8006804 <__cvt+0xa4>
 8006800:	f8cd 900c 	str.w	r9, [sp, #12]
 8006804:	2230      	movs	r2, #48	; 0x30
 8006806:	9b03      	ldr	r3, [sp, #12]
 8006808:	454b      	cmp	r3, r9
 800680a:	d307      	bcc.n	800681c <__cvt+0xbc>
 800680c:	9b03      	ldr	r3, [sp, #12]
 800680e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006810:	1bdb      	subs	r3, r3, r7
 8006812:	4638      	mov	r0, r7
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	b004      	add	sp, #16
 8006818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681c:	1c59      	adds	r1, r3, #1
 800681e:	9103      	str	r1, [sp, #12]
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	e7f0      	b.n	8006806 <__cvt+0xa6>

08006824 <__exponent>:
 8006824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006826:	4603      	mov	r3, r0
 8006828:	2900      	cmp	r1, #0
 800682a:	bfb8      	it	lt
 800682c:	4249      	neglt	r1, r1
 800682e:	f803 2b02 	strb.w	r2, [r3], #2
 8006832:	bfb4      	ite	lt
 8006834:	222d      	movlt	r2, #45	; 0x2d
 8006836:	222b      	movge	r2, #43	; 0x2b
 8006838:	2909      	cmp	r1, #9
 800683a:	7042      	strb	r2, [r0, #1]
 800683c:	dd2a      	ble.n	8006894 <__exponent+0x70>
 800683e:	f10d 0207 	add.w	r2, sp, #7
 8006842:	4617      	mov	r7, r2
 8006844:	260a      	movs	r6, #10
 8006846:	4694      	mov	ip, r2
 8006848:	fb91 f5f6 	sdiv	r5, r1, r6
 800684c:	fb06 1415 	mls	r4, r6, r5, r1
 8006850:	3430      	adds	r4, #48	; 0x30
 8006852:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006856:	460c      	mov	r4, r1
 8006858:	2c63      	cmp	r4, #99	; 0x63
 800685a:	f102 32ff 	add.w	r2, r2, #4294967295
 800685e:	4629      	mov	r1, r5
 8006860:	dcf1      	bgt.n	8006846 <__exponent+0x22>
 8006862:	3130      	adds	r1, #48	; 0x30
 8006864:	f1ac 0402 	sub.w	r4, ip, #2
 8006868:	f802 1c01 	strb.w	r1, [r2, #-1]
 800686c:	1c41      	adds	r1, r0, #1
 800686e:	4622      	mov	r2, r4
 8006870:	42ba      	cmp	r2, r7
 8006872:	d30a      	bcc.n	800688a <__exponent+0x66>
 8006874:	f10d 0209 	add.w	r2, sp, #9
 8006878:	eba2 020c 	sub.w	r2, r2, ip
 800687c:	42bc      	cmp	r4, r7
 800687e:	bf88      	it	hi
 8006880:	2200      	movhi	r2, #0
 8006882:	4413      	add	r3, r2
 8006884:	1a18      	subs	r0, r3, r0
 8006886:	b003      	add	sp, #12
 8006888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800688a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800688e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006892:	e7ed      	b.n	8006870 <__exponent+0x4c>
 8006894:	2330      	movs	r3, #48	; 0x30
 8006896:	3130      	adds	r1, #48	; 0x30
 8006898:	7083      	strb	r3, [r0, #2]
 800689a:	70c1      	strb	r1, [r0, #3]
 800689c:	1d03      	adds	r3, r0, #4
 800689e:	e7f1      	b.n	8006884 <__exponent+0x60>

080068a0 <_printf_float>:
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	ed2d 8b02 	vpush	{d8}
 80068a8:	b08d      	sub	sp, #52	; 0x34
 80068aa:	460c      	mov	r4, r1
 80068ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068b0:	4616      	mov	r6, r2
 80068b2:	461f      	mov	r7, r3
 80068b4:	4605      	mov	r5, r0
 80068b6:	f000 ff0f 	bl	80076d8 <_localeconv_r>
 80068ba:	f8d0 a000 	ldr.w	sl, [r0]
 80068be:	4650      	mov	r0, sl
 80068c0:	f7f9 fcde 	bl	8000280 <strlen>
 80068c4:	2300      	movs	r3, #0
 80068c6:	930a      	str	r3, [sp, #40]	; 0x28
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	9305      	str	r3, [sp, #20]
 80068cc:	f8d8 3000 	ldr.w	r3, [r8]
 80068d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068d4:	3307      	adds	r3, #7
 80068d6:	f023 0307 	bic.w	r3, r3, #7
 80068da:	f103 0208 	add.w	r2, r3, #8
 80068de:	f8c8 2000 	str.w	r2, [r8]
 80068e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068ea:	9307      	str	r3, [sp, #28]
 80068ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80068f0:	ee08 0a10 	vmov	s16, r0
 80068f4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80068f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068fc:	4b9e      	ldr	r3, [pc, #632]	; (8006b78 <_printf_float+0x2d8>)
 80068fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006902:	f7fa f91b 	bl	8000b3c <__aeabi_dcmpun>
 8006906:	bb88      	cbnz	r0, 800696c <_printf_float+0xcc>
 8006908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800690c:	4b9a      	ldr	r3, [pc, #616]	; (8006b78 <_printf_float+0x2d8>)
 800690e:	f04f 32ff 	mov.w	r2, #4294967295
 8006912:	f7fa f8f5 	bl	8000b00 <__aeabi_dcmple>
 8006916:	bb48      	cbnz	r0, 800696c <_printf_float+0xcc>
 8006918:	2200      	movs	r2, #0
 800691a:	2300      	movs	r3, #0
 800691c:	4640      	mov	r0, r8
 800691e:	4649      	mov	r1, r9
 8006920:	f7fa f8e4 	bl	8000aec <__aeabi_dcmplt>
 8006924:	b110      	cbz	r0, 800692c <_printf_float+0x8c>
 8006926:	232d      	movs	r3, #45	; 0x2d
 8006928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800692c:	4a93      	ldr	r2, [pc, #588]	; (8006b7c <_printf_float+0x2dc>)
 800692e:	4b94      	ldr	r3, [pc, #592]	; (8006b80 <_printf_float+0x2e0>)
 8006930:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006934:	bf94      	ite	ls
 8006936:	4690      	movls	r8, r2
 8006938:	4698      	movhi	r8, r3
 800693a:	2303      	movs	r3, #3
 800693c:	6123      	str	r3, [r4, #16]
 800693e:	9b05      	ldr	r3, [sp, #20]
 8006940:	f023 0304 	bic.w	r3, r3, #4
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	f04f 0900 	mov.w	r9, #0
 800694a:	9700      	str	r7, [sp, #0]
 800694c:	4633      	mov	r3, r6
 800694e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006950:	4621      	mov	r1, r4
 8006952:	4628      	mov	r0, r5
 8006954:	f000 f9da 	bl	8006d0c <_printf_common>
 8006958:	3001      	adds	r0, #1
 800695a:	f040 8090 	bne.w	8006a7e <_printf_float+0x1de>
 800695e:	f04f 30ff 	mov.w	r0, #4294967295
 8006962:	b00d      	add	sp, #52	; 0x34
 8006964:	ecbd 8b02 	vpop	{d8}
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	4642      	mov	r2, r8
 800696e:	464b      	mov	r3, r9
 8006970:	4640      	mov	r0, r8
 8006972:	4649      	mov	r1, r9
 8006974:	f7fa f8e2 	bl	8000b3c <__aeabi_dcmpun>
 8006978:	b140      	cbz	r0, 800698c <_printf_float+0xec>
 800697a:	464b      	mov	r3, r9
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfbc      	itt	lt
 8006980:	232d      	movlt	r3, #45	; 0x2d
 8006982:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006986:	4a7f      	ldr	r2, [pc, #508]	; (8006b84 <_printf_float+0x2e4>)
 8006988:	4b7f      	ldr	r3, [pc, #508]	; (8006b88 <_printf_float+0x2e8>)
 800698a:	e7d1      	b.n	8006930 <_printf_float+0x90>
 800698c:	6863      	ldr	r3, [r4, #4]
 800698e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006992:	9206      	str	r2, [sp, #24]
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	d13f      	bne.n	8006a18 <_printf_float+0x178>
 8006998:	2306      	movs	r3, #6
 800699a:	6063      	str	r3, [r4, #4]
 800699c:	9b05      	ldr	r3, [sp, #20]
 800699e:	6861      	ldr	r1, [r4, #4]
 80069a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069a4:	2300      	movs	r3, #0
 80069a6:	9303      	str	r3, [sp, #12]
 80069a8:	ab0a      	add	r3, sp, #40	; 0x28
 80069aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069ae:	ab09      	add	r3, sp, #36	; 0x24
 80069b0:	ec49 8b10 	vmov	d0, r8, r9
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6022      	str	r2, [r4, #0]
 80069b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069bc:	4628      	mov	r0, r5
 80069be:	f7ff fecf 	bl	8006760 <__cvt>
 80069c2:	9b06      	ldr	r3, [sp, #24]
 80069c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c6:	2b47      	cmp	r3, #71	; 0x47
 80069c8:	4680      	mov	r8, r0
 80069ca:	d108      	bne.n	80069de <_printf_float+0x13e>
 80069cc:	1cc8      	adds	r0, r1, #3
 80069ce:	db02      	blt.n	80069d6 <_printf_float+0x136>
 80069d0:	6863      	ldr	r3, [r4, #4]
 80069d2:	4299      	cmp	r1, r3
 80069d4:	dd41      	ble.n	8006a5a <_printf_float+0x1ba>
 80069d6:	f1ab 0302 	sub.w	r3, fp, #2
 80069da:	fa5f fb83 	uxtb.w	fp, r3
 80069de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069e2:	d820      	bhi.n	8006a26 <_printf_float+0x186>
 80069e4:	3901      	subs	r1, #1
 80069e6:	465a      	mov	r2, fp
 80069e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069ec:	9109      	str	r1, [sp, #36]	; 0x24
 80069ee:	f7ff ff19 	bl	8006824 <__exponent>
 80069f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069f4:	1813      	adds	r3, r2, r0
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	4681      	mov	r9, r0
 80069fa:	6123      	str	r3, [r4, #16]
 80069fc:	dc02      	bgt.n	8006a04 <_printf_float+0x164>
 80069fe:	6822      	ldr	r2, [r4, #0]
 8006a00:	07d2      	lsls	r2, r2, #31
 8006a02:	d501      	bpl.n	8006a08 <_printf_float+0x168>
 8006a04:	3301      	adds	r3, #1
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d09c      	beq.n	800694a <_printf_float+0xaa>
 8006a10:	232d      	movs	r3, #45	; 0x2d
 8006a12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a16:	e798      	b.n	800694a <_printf_float+0xaa>
 8006a18:	9a06      	ldr	r2, [sp, #24]
 8006a1a:	2a47      	cmp	r2, #71	; 0x47
 8006a1c:	d1be      	bne.n	800699c <_printf_float+0xfc>
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1bc      	bne.n	800699c <_printf_float+0xfc>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e7b9      	b.n	800699a <_printf_float+0xfa>
 8006a26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a2a:	d118      	bne.n	8006a5e <_printf_float+0x1be>
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	6863      	ldr	r3, [r4, #4]
 8006a30:	dd0b      	ble.n	8006a4a <_printf_float+0x1aa>
 8006a32:	6121      	str	r1, [r4, #16]
 8006a34:	b913      	cbnz	r3, 8006a3c <_printf_float+0x19c>
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	07d0      	lsls	r0, r2, #31
 8006a3a:	d502      	bpl.n	8006a42 <_printf_float+0x1a2>
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	440b      	add	r3, r1
 8006a40:	6123      	str	r3, [r4, #16]
 8006a42:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a44:	f04f 0900 	mov.w	r9, #0
 8006a48:	e7de      	b.n	8006a08 <_printf_float+0x168>
 8006a4a:	b913      	cbnz	r3, 8006a52 <_printf_float+0x1b2>
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	07d2      	lsls	r2, r2, #31
 8006a50:	d501      	bpl.n	8006a56 <_printf_float+0x1b6>
 8006a52:	3302      	adds	r3, #2
 8006a54:	e7f4      	b.n	8006a40 <_printf_float+0x1a0>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e7f2      	b.n	8006a40 <_printf_float+0x1a0>
 8006a5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a60:	4299      	cmp	r1, r3
 8006a62:	db05      	blt.n	8006a70 <_printf_float+0x1d0>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	6121      	str	r1, [r4, #16]
 8006a68:	07d8      	lsls	r0, r3, #31
 8006a6a:	d5ea      	bpl.n	8006a42 <_printf_float+0x1a2>
 8006a6c:	1c4b      	adds	r3, r1, #1
 8006a6e:	e7e7      	b.n	8006a40 <_printf_float+0x1a0>
 8006a70:	2900      	cmp	r1, #0
 8006a72:	bfd4      	ite	le
 8006a74:	f1c1 0202 	rsble	r2, r1, #2
 8006a78:	2201      	movgt	r2, #1
 8006a7a:	4413      	add	r3, r2
 8006a7c:	e7e0      	b.n	8006a40 <_printf_float+0x1a0>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	055a      	lsls	r2, r3, #21
 8006a82:	d407      	bmi.n	8006a94 <_printf_float+0x1f4>
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	4642      	mov	r2, r8
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	d12c      	bne.n	8006aec <_printf_float+0x24c>
 8006a92:	e764      	b.n	800695e <_printf_float+0xbe>
 8006a94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a98:	f240 80e0 	bls.w	8006c5c <_printf_float+0x3bc>
 8006a9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f7fa f818 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d034      	beq.n	8006b16 <_printf_float+0x276>
 8006aac:	4a37      	ldr	r2, [pc, #220]	; (8006b8c <_printf_float+0x2ec>)
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	f43f af51 	beq.w	800695e <_printf_float+0xbe>
 8006abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	db02      	blt.n	8006aca <_printf_float+0x22a>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	07d8      	lsls	r0, r3, #31
 8006ac8:	d510      	bpl.n	8006aec <_printf_float+0x24c>
 8006aca:	ee18 3a10 	vmov	r3, s16
 8006ace:	4652      	mov	r2, sl
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f af41 	beq.w	800695e <_printf_float+0xbe>
 8006adc:	f04f 0800 	mov.w	r8, #0
 8006ae0:	f104 091a 	add.w	r9, r4, #26
 8006ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	4543      	cmp	r3, r8
 8006aea:	dc09      	bgt.n	8006b00 <_printf_float+0x260>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	079b      	lsls	r3, r3, #30
 8006af0:	f100 8107 	bmi.w	8006d02 <_printf_float+0x462>
 8006af4:	68e0      	ldr	r0, [r4, #12]
 8006af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af8:	4298      	cmp	r0, r3
 8006afa:	bfb8      	it	lt
 8006afc:	4618      	movlt	r0, r3
 8006afe:	e730      	b.n	8006962 <_printf_float+0xc2>
 8006b00:	2301      	movs	r3, #1
 8006b02:	464a      	mov	r2, r9
 8006b04:	4631      	mov	r1, r6
 8006b06:	4628      	mov	r0, r5
 8006b08:	47b8      	blx	r7
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f43f af27 	beq.w	800695e <_printf_float+0xbe>
 8006b10:	f108 0801 	add.w	r8, r8, #1
 8006b14:	e7e6      	b.n	8006ae4 <_printf_float+0x244>
 8006b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	dc39      	bgt.n	8006b90 <_printf_float+0x2f0>
 8006b1c:	4a1b      	ldr	r2, [pc, #108]	; (8006b8c <_printf_float+0x2ec>)
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f af19 	beq.w	800695e <_printf_float+0xbe>
 8006b2c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b30:	4313      	orrs	r3, r2
 8006b32:	d102      	bne.n	8006b3a <_printf_float+0x29a>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	07d9      	lsls	r1, r3, #31
 8006b38:	d5d8      	bpl.n	8006aec <_printf_float+0x24c>
 8006b3a:	ee18 3a10 	vmov	r3, s16
 8006b3e:	4652      	mov	r2, sl
 8006b40:	4631      	mov	r1, r6
 8006b42:	4628      	mov	r0, r5
 8006b44:	47b8      	blx	r7
 8006b46:	3001      	adds	r0, #1
 8006b48:	f43f af09 	beq.w	800695e <_printf_float+0xbe>
 8006b4c:	f04f 0900 	mov.w	r9, #0
 8006b50:	f104 0a1a 	add.w	sl, r4, #26
 8006b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b56:	425b      	negs	r3, r3
 8006b58:	454b      	cmp	r3, r9
 8006b5a:	dc01      	bgt.n	8006b60 <_printf_float+0x2c0>
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5e:	e792      	b.n	8006a86 <_printf_float+0x1e6>
 8006b60:	2301      	movs	r3, #1
 8006b62:	4652      	mov	r2, sl
 8006b64:	4631      	mov	r1, r6
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f43f aef7 	beq.w	800695e <_printf_float+0xbe>
 8006b70:	f109 0901 	add.w	r9, r9, #1
 8006b74:	e7ee      	b.n	8006b54 <_printf_float+0x2b4>
 8006b76:	bf00      	nop
 8006b78:	7fefffff 	.word	0x7fefffff
 8006b7c:	0800b661 	.word	0x0800b661
 8006b80:	0800b665 	.word	0x0800b665
 8006b84:	0800b669 	.word	0x0800b669
 8006b88:	0800b66d 	.word	0x0800b66d
 8006b8c:	0800b671 	.word	0x0800b671
 8006b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b94:	429a      	cmp	r2, r3
 8006b96:	bfa8      	it	ge
 8006b98:	461a      	movge	r2, r3
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	4691      	mov	r9, r2
 8006b9e:	dc37      	bgt.n	8006c10 <_printf_float+0x370>
 8006ba0:	f04f 0b00 	mov.w	fp, #0
 8006ba4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ba8:	f104 021a 	add.w	r2, r4, #26
 8006bac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bae:	9305      	str	r3, [sp, #20]
 8006bb0:	eba3 0309 	sub.w	r3, r3, r9
 8006bb4:	455b      	cmp	r3, fp
 8006bb6:	dc33      	bgt.n	8006c20 <_printf_float+0x380>
 8006bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	db3b      	blt.n	8006c38 <_printf_float+0x398>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	07da      	lsls	r2, r3, #31
 8006bc4:	d438      	bmi.n	8006c38 <_printf_float+0x398>
 8006bc6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006bca:	eba2 0903 	sub.w	r9, r2, r3
 8006bce:	9b05      	ldr	r3, [sp, #20]
 8006bd0:	1ad2      	subs	r2, r2, r3
 8006bd2:	4591      	cmp	r9, r2
 8006bd4:	bfa8      	it	ge
 8006bd6:	4691      	movge	r9, r2
 8006bd8:	f1b9 0f00 	cmp.w	r9, #0
 8006bdc:	dc35      	bgt.n	8006c4a <_printf_float+0x3aa>
 8006bde:	f04f 0800 	mov.w	r8, #0
 8006be2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006be6:	f104 0a1a 	add.w	sl, r4, #26
 8006bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bee:	1a9b      	subs	r3, r3, r2
 8006bf0:	eba3 0309 	sub.w	r3, r3, r9
 8006bf4:	4543      	cmp	r3, r8
 8006bf6:	f77f af79 	ble.w	8006aec <_printf_float+0x24c>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	f43f aeaa 	beq.w	800695e <_printf_float+0xbe>
 8006c0a:	f108 0801 	add.w	r8, r8, #1
 8006c0e:	e7ec      	b.n	8006bea <_printf_float+0x34a>
 8006c10:	4613      	mov	r3, r2
 8006c12:	4631      	mov	r1, r6
 8006c14:	4642      	mov	r2, r8
 8006c16:	4628      	mov	r0, r5
 8006c18:	47b8      	blx	r7
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d1c0      	bne.n	8006ba0 <_printf_float+0x300>
 8006c1e:	e69e      	b.n	800695e <_printf_float+0xbe>
 8006c20:	2301      	movs	r3, #1
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	9205      	str	r2, [sp, #20]
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	f43f ae97 	beq.w	800695e <_printf_float+0xbe>
 8006c30:	9a05      	ldr	r2, [sp, #20]
 8006c32:	f10b 0b01 	add.w	fp, fp, #1
 8006c36:	e7b9      	b.n	8006bac <_printf_float+0x30c>
 8006c38:	ee18 3a10 	vmov	r3, s16
 8006c3c:	4652      	mov	r2, sl
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4628      	mov	r0, r5
 8006c42:	47b8      	blx	r7
 8006c44:	3001      	adds	r0, #1
 8006c46:	d1be      	bne.n	8006bc6 <_printf_float+0x326>
 8006c48:	e689      	b.n	800695e <_printf_float+0xbe>
 8006c4a:	9a05      	ldr	r2, [sp, #20]
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	4442      	add	r2, r8
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b8      	blx	r7
 8006c56:	3001      	adds	r0, #1
 8006c58:	d1c1      	bne.n	8006bde <_printf_float+0x33e>
 8006c5a:	e680      	b.n	800695e <_printf_float+0xbe>
 8006c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c5e:	2a01      	cmp	r2, #1
 8006c60:	dc01      	bgt.n	8006c66 <_printf_float+0x3c6>
 8006c62:	07db      	lsls	r3, r3, #31
 8006c64:	d53a      	bpl.n	8006cdc <_printf_float+0x43c>
 8006c66:	2301      	movs	r3, #1
 8006c68:	4642      	mov	r2, r8
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	f43f ae74 	beq.w	800695e <_printf_float+0xbe>
 8006c76:	ee18 3a10 	vmov	r3, s16
 8006c7a:	4652      	mov	r2, sl
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b8      	blx	r7
 8006c82:	3001      	adds	r0, #1
 8006c84:	f43f ae6b 	beq.w	800695e <_printf_float+0xbe>
 8006c88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006c94:	f7f9 ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c98:	b9d8      	cbnz	r0, 8006cd2 <_printf_float+0x432>
 8006c9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c9e:	f108 0201 	add.w	r2, r8, #1
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d10e      	bne.n	8006cca <_printf_float+0x42a>
 8006cac:	e657      	b.n	800695e <_printf_float+0xbe>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f43f ae50 	beq.w	800695e <_printf_float+0xbe>
 8006cbe:	f108 0801 	add.w	r8, r8, #1
 8006cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	4543      	cmp	r3, r8
 8006cc8:	dcf1      	bgt.n	8006cae <_printf_float+0x40e>
 8006cca:	464b      	mov	r3, r9
 8006ccc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cd0:	e6da      	b.n	8006a88 <_printf_float+0x1e8>
 8006cd2:	f04f 0800 	mov.w	r8, #0
 8006cd6:	f104 0a1a 	add.w	sl, r4, #26
 8006cda:	e7f2      	b.n	8006cc2 <_printf_float+0x422>
 8006cdc:	2301      	movs	r3, #1
 8006cde:	4642      	mov	r2, r8
 8006ce0:	e7df      	b.n	8006ca2 <_printf_float+0x402>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	464a      	mov	r2, r9
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4628      	mov	r0, r5
 8006cea:	47b8      	blx	r7
 8006cec:	3001      	adds	r0, #1
 8006cee:	f43f ae36 	beq.w	800695e <_printf_float+0xbe>
 8006cf2:	f108 0801 	add.w	r8, r8, #1
 8006cf6:	68e3      	ldr	r3, [r4, #12]
 8006cf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cfa:	1a5b      	subs	r3, r3, r1
 8006cfc:	4543      	cmp	r3, r8
 8006cfe:	dcf0      	bgt.n	8006ce2 <_printf_float+0x442>
 8006d00:	e6f8      	b.n	8006af4 <_printf_float+0x254>
 8006d02:	f04f 0800 	mov.w	r8, #0
 8006d06:	f104 0919 	add.w	r9, r4, #25
 8006d0a:	e7f4      	b.n	8006cf6 <_printf_float+0x456>

08006d0c <_printf_common>:
 8006d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d10:	4616      	mov	r6, r2
 8006d12:	4699      	mov	r9, r3
 8006d14:	688a      	ldr	r2, [r1, #8]
 8006d16:	690b      	ldr	r3, [r1, #16]
 8006d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	bfb8      	it	lt
 8006d20:	4613      	movlt	r3, r2
 8006d22:	6033      	str	r3, [r6, #0]
 8006d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d28:	4607      	mov	r7, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	b10a      	cbz	r2, 8006d32 <_printf_common+0x26>
 8006d2e:	3301      	adds	r3, #1
 8006d30:	6033      	str	r3, [r6, #0]
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	0699      	lsls	r1, r3, #26
 8006d36:	bf42      	ittt	mi
 8006d38:	6833      	ldrmi	r3, [r6, #0]
 8006d3a:	3302      	addmi	r3, #2
 8006d3c:	6033      	strmi	r3, [r6, #0]
 8006d3e:	6825      	ldr	r5, [r4, #0]
 8006d40:	f015 0506 	ands.w	r5, r5, #6
 8006d44:	d106      	bne.n	8006d54 <_printf_common+0x48>
 8006d46:	f104 0a19 	add.w	sl, r4, #25
 8006d4a:	68e3      	ldr	r3, [r4, #12]
 8006d4c:	6832      	ldr	r2, [r6, #0]
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	42ab      	cmp	r3, r5
 8006d52:	dc26      	bgt.n	8006da2 <_printf_common+0x96>
 8006d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d58:	1e13      	subs	r3, r2, #0
 8006d5a:	6822      	ldr	r2, [r4, #0]
 8006d5c:	bf18      	it	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	0692      	lsls	r2, r2, #26
 8006d62:	d42b      	bmi.n	8006dbc <_printf_common+0xb0>
 8006d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d68:	4649      	mov	r1, r9
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	47c0      	blx	r8
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d01e      	beq.n	8006db0 <_printf_common+0xa4>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	6922      	ldr	r2, [r4, #16]
 8006d76:	f003 0306 	and.w	r3, r3, #6
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	bf02      	ittt	eq
 8006d7e:	68e5      	ldreq	r5, [r4, #12]
 8006d80:	6833      	ldreq	r3, [r6, #0]
 8006d82:	1aed      	subeq	r5, r5, r3
 8006d84:	68a3      	ldr	r3, [r4, #8]
 8006d86:	bf0c      	ite	eq
 8006d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d8c:	2500      	movne	r5, #0
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	bfc4      	itt	gt
 8006d92:	1a9b      	subgt	r3, r3, r2
 8006d94:	18ed      	addgt	r5, r5, r3
 8006d96:	2600      	movs	r6, #0
 8006d98:	341a      	adds	r4, #26
 8006d9a:	42b5      	cmp	r5, r6
 8006d9c:	d11a      	bne.n	8006dd4 <_printf_common+0xc8>
 8006d9e:	2000      	movs	r0, #0
 8006da0:	e008      	b.n	8006db4 <_printf_common+0xa8>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4652      	mov	r2, sl
 8006da6:	4649      	mov	r1, r9
 8006da8:	4638      	mov	r0, r7
 8006daa:	47c0      	blx	r8
 8006dac:	3001      	adds	r0, #1
 8006dae:	d103      	bne.n	8006db8 <_printf_common+0xac>
 8006db0:	f04f 30ff 	mov.w	r0, #4294967295
 8006db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db8:	3501      	adds	r5, #1
 8006dba:	e7c6      	b.n	8006d4a <_printf_common+0x3e>
 8006dbc:	18e1      	adds	r1, r4, r3
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	2030      	movs	r0, #48	; 0x30
 8006dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dc6:	4422      	add	r2, r4
 8006dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	e7c7      	b.n	8006d64 <_printf_common+0x58>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	4649      	mov	r1, r9
 8006dda:	4638      	mov	r0, r7
 8006ddc:	47c0      	blx	r8
 8006dde:	3001      	adds	r0, #1
 8006de0:	d0e6      	beq.n	8006db0 <_printf_common+0xa4>
 8006de2:	3601      	adds	r6, #1
 8006de4:	e7d9      	b.n	8006d9a <_printf_common+0x8e>
	...

08006de8 <_printf_i>:
 8006de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	7e0f      	ldrb	r7, [r1, #24]
 8006dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006df0:	2f78      	cmp	r7, #120	; 0x78
 8006df2:	4691      	mov	r9, r2
 8006df4:	4680      	mov	r8, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	469a      	mov	sl, r3
 8006dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dfe:	d807      	bhi.n	8006e10 <_printf_i+0x28>
 8006e00:	2f62      	cmp	r7, #98	; 0x62
 8006e02:	d80a      	bhi.n	8006e1a <_printf_i+0x32>
 8006e04:	2f00      	cmp	r7, #0
 8006e06:	f000 80d4 	beq.w	8006fb2 <_printf_i+0x1ca>
 8006e0a:	2f58      	cmp	r7, #88	; 0x58
 8006e0c:	f000 80c0 	beq.w	8006f90 <_printf_i+0x1a8>
 8006e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e18:	e03a      	b.n	8006e90 <_printf_i+0xa8>
 8006e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e1e:	2b15      	cmp	r3, #21
 8006e20:	d8f6      	bhi.n	8006e10 <_printf_i+0x28>
 8006e22:	a101      	add	r1, pc, #4	; (adr r1, 8006e28 <_printf_i+0x40>)
 8006e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e28:	08006e81 	.word	0x08006e81
 8006e2c:	08006e95 	.word	0x08006e95
 8006e30:	08006e11 	.word	0x08006e11
 8006e34:	08006e11 	.word	0x08006e11
 8006e38:	08006e11 	.word	0x08006e11
 8006e3c:	08006e11 	.word	0x08006e11
 8006e40:	08006e95 	.word	0x08006e95
 8006e44:	08006e11 	.word	0x08006e11
 8006e48:	08006e11 	.word	0x08006e11
 8006e4c:	08006e11 	.word	0x08006e11
 8006e50:	08006e11 	.word	0x08006e11
 8006e54:	08006f99 	.word	0x08006f99
 8006e58:	08006ec1 	.word	0x08006ec1
 8006e5c:	08006f53 	.word	0x08006f53
 8006e60:	08006e11 	.word	0x08006e11
 8006e64:	08006e11 	.word	0x08006e11
 8006e68:	08006fbb 	.word	0x08006fbb
 8006e6c:	08006e11 	.word	0x08006e11
 8006e70:	08006ec1 	.word	0x08006ec1
 8006e74:	08006e11 	.word	0x08006e11
 8006e78:	08006e11 	.word	0x08006e11
 8006e7c:	08006f5b 	.word	0x08006f5b
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	1d1a      	adds	r2, r3, #4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	602a      	str	r2, [r5, #0]
 8006e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e90:	2301      	movs	r3, #1
 8006e92:	e09f      	b.n	8006fd4 <_printf_i+0x1ec>
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	682b      	ldr	r3, [r5, #0]
 8006e98:	0607      	lsls	r7, r0, #24
 8006e9a:	f103 0104 	add.w	r1, r3, #4
 8006e9e:	6029      	str	r1, [r5, #0]
 8006ea0:	d501      	bpl.n	8006ea6 <_printf_i+0xbe>
 8006ea2:	681e      	ldr	r6, [r3, #0]
 8006ea4:	e003      	b.n	8006eae <_printf_i+0xc6>
 8006ea6:	0646      	lsls	r6, r0, #25
 8006ea8:	d5fb      	bpl.n	8006ea2 <_printf_i+0xba>
 8006eaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	da03      	bge.n	8006eba <_printf_i+0xd2>
 8006eb2:	232d      	movs	r3, #45	; 0x2d
 8006eb4:	4276      	negs	r6, r6
 8006eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eba:	485a      	ldr	r0, [pc, #360]	; (8007024 <_printf_i+0x23c>)
 8006ebc:	230a      	movs	r3, #10
 8006ebe:	e012      	b.n	8006ee6 <_printf_i+0xfe>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	1d19      	adds	r1, r3, #4
 8006ec6:	6029      	str	r1, [r5, #0]
 8006ec8:	0605      	lsls	r5, r0, #24
 8006eca:	d501      	bpl.n	8006ed0 <_printf_i+0xe8>
 8006ecc:	681e      	ldr	r6, [r3, #0]
 8006ece:	e002      	b.n	8006ed6 <_printf_i+0xee>
 8006ed0:	0641      	lsls	r1, r0, #25
 8006ed2:	d5fb      	bpl.n	8006ecc <_printf_i+0xe4>
 8006ed4:	881e      	ldrh	r6, [r3, #0]
 8006ed6:	4853      	ldr	r0, [pc, #332]	; (8007024 <_printf_i+0x23c>)
 8006ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eda:	bf0c      	ite	eq
 8006edc:	2308      	moveq	r3, #8
 8006ede:	230a      	movne	r3, #10
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ee6:	6865      	ldr	r5, [r4, #4]
 8006ee8:	60a5      	str	r5, [r4, #8]
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	bfa2      	ittt	ge
 8006eee:	6821      	ldrge	r1, [r4, #0]
 8006ef0:	f021 0104 	bicge.w	r1, r1, #4
 8006ef4:	6021      	strge	r1, [r4, #0]
 8006ef6:	b90e      	cbnz	r6, 8006efc <_printf_i+0x114>
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	d04b      	beq.n	8006f94 <_printf_i+0x1ac>
 8006efc:	4615      	mov	r5, r2
 8006efe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f02:	fb03 6711 	mls	r7, r3, r1, r6
 8006f06:	5dc7      	ldrb	r7, [r0, r7]
 8006f08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	42bb      	cmp	r3, r7
 8006f10:	460e      	mov	r6, r1
 8006f12:	d9f4      	bls.n	8006efe <_printf_i+0x116>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d10b      	bne.n	8006f30 <_printf_i+0x148>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07de      	lsls	r6, r3, #31
 8006f1c:	d508      	bpl.n	8006f30 <_printf_i+0x148>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	6861      	ldr	r1, [r4, #4]
 8006f22:	4299      	cmp	r1, r3
 8006f24:	bfde      	ittt	le
 8006f26:	2330      	movle	r3, #48	; 0x30
 8006f28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f30:	1b52      	subs	r2, r2, r5
 8006f32:	6122      	str	r2, [r4, #16]
 8006f34:	f8cd a000 	str.w	sl, [sp]
 8006f38:	464b      	mov	r3, r9
 8006f3a:	aa03      	add	r2, sp, #12
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4640      	mov	r0, r8
 8006f40:	f7ff fee4 	bl	8006d0c <_printf_common>
 8006f44:	3001      	adds	r0, #1
 8006f46:	d14a      	bne.n	8006fde <_printf_i+0x1f6>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b004      	add	sp, #16
 8006f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	f043 0320 	orr.w	r3, r3, #32
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	4833      	ldr	r0, [pc, #204]	; (8007028 <_printf_i+0x240>)
 8006f5c:	2778      	movs	r7, #120	; 0x78
 8006f5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	6829      	ldr	r1, [r5, #0]
 8006f66:	061f      	lsls	r7, r3, #24
 8006f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f6c:	d402      	bmi.n	8006f74 <_printf_i+0x18c>
 8006f6e:	065f      	lsls	r7, r3, #25
 8006f70:	bf48      	it	mi
 8006f72:	b2b6      	uxthmi	r6, r6
 8006f74:	07df      	lsls	r7, r3, #31
 8006f76:	bf48      	it	mi
 8006f78:	f043 0320 	orrmi.w	r3, r3, #32
 8006f7c:	6029      	str	r1, [r5, #0]
 8006f7e:	bf48      	it	mi
 8006f80:	6023      	strmi	r3, [r4, #0]
 8006f82:	b91e      	cbnz	r6, 8006f8c <_printf_i+0x1a4>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	f023 0320 	bic.w	r3, r3, #32
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	e7a7      	b.n	8006ee0 <_printf_i+0xf8>
 8006f90:	4824      	ldr	r0, [pc, #144]	; (8007024 <_printf_i+0x23c>)
 8006f92:	e7e4      	b.n	8006f5e <_printf_i+0x176>
 8006f94:	4615      	mov	r5, r2
 8006f96:	e7bd      	b.n	8006f14 <_printf_i+0x12c>
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	6826      	ldr	r6, [r4, #0]
 8006f9c:	6961      	ldr	r1, [r4, #20]
 8006f9e:	1d18      	adds	r0, r3, #4
 8006fa0:	6028      	str	r0, [r5, #0]
 8006fa2:	0635      	lsls	r5, r6, #24
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0x1c4>
 8006fa8:	6019      	str	r1, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <_printf_i+0x1ca>
 8006fac:	0670      	lsls	r0, r6, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0x1c0>
 8006fb0:	8019      	strh	r1, [r3, #0]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	4615      	mov	r5, r2
 8006fb8:	e7bc      	b.n	8006f34 <_printf_i+0x14c>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	1d1a      	adds	r2, r3, #4
 8006fbe:	602a      	str	r2, [r5, #0]
 8006fc0:	681d      	ldr	r5, [r3, #0]
 8006fc2:	6862      	ldr	r2, [r4, #4]
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	f7f9 f90a 	bl	80001e0 <memchr>
 8006fcc:	b108      	cbz	r0, 8006fd2 <_printf_i+0x1ea>
 8006fce:	1b40      	subs	r0, r0, r5
 8006fd0:	6060      	str	r0, [r4, #4]
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	6123      	str	r3, [r4, #16]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fdc:	e7aa      	b.n	8006f34 <_printf_i+0x14c>
 8006fde:	6923      	ldr	r3, [r4, #16]
 8006fe0:	462a      	mov	r2, r5
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	4640      	mov	r0, r8
 8006fe6:	47d0      	blx	sl
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d0ad      	beq.n	8006f48 <_printf_i+0x160>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	079b      	lsls	r3, r3, #30
 8006ff0:	d413      	bmi.n	800701a <_printf_i+0x232>
 8006ff2:	68e0      	ldr	r0, [r4, #12]
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	4298      	cmp	r0, r3
 8006ff8:	bfb8      	it	lt
 8006ffa:	4618      	movlt	r0, r3
 8006ffc:	e7a6      	b.n	8006f4c <_printf_i+0x164>
 8006ffe:	2301      	movs	r3, #1
 8007000:	4632      	mov	r2, r6
 8007002:	4649      	mov	r1, r9
 8007004:	4640      	mov	r0, r8
 8007006:	47d0      	blx	sl
 8007008:	3001      	adds	r0, #1
 800700a:	d09d      	beq.n	8006f48 <_printf_i+0x160>
 800700c:	3501      	adds	r5, #1
 800700e:	68e3      	ldr	r3, [r4, #12]
 8007010:	9903      	ldr	r1, [sp, #12]
 8007012:	1a5b      	subs	r3, r3, r1
 8007014:	42ab      	cmp	r3, r5
 8007016:	dcf2      	bgt.n	8006ffe <_printf_i+0x216>
 8007018:	e7eb      	b.n	8006ff2 <_printf_i+0x20a>
 800701a:	2500      	movs	r5, #0
 800701c:	f104 0619 	add.w	r6, r4, #25
 8007020:	e7f5      	b.n	800700e <_printf_i+0x226>
 8007022:	bf00      	nop
 8007024:	0800b673 	.word	0x0800b673
 8007028:	0800b684 	.word	0x0800b684

0800702c <_scanf_float>:
 800702c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007030:	b087      	sub	sp, #28
 8007032:	4617      	mov	r7, r2
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	688b      	ldr	r3, [r1, #8]
 8007038:	1e5a      	subs	r2, r3, #1
 800703a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800703e:	bf83      	ittte	hi
 8007040:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007044:	195b      	addhi	r3, r3, r5
 8007046:	9302      	strhi	r3, [sp, #8]
 8007048:	2300      	movls	r3, #0
 800704a:	bf86      	itte	hi
 800704c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007050:	608b      	strhi	r3, [r1, #8]
 8007052:	9302      	strls	r3, [sp, #8]
 8007054:	680b      	ldr	r3, [r1, #0]
 8007056:	468b      	mov	fp, r1
 8007058:	2500      	movs	r5, #0
 800705a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800705e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007062:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007066:	4680      	mov	r8, r0
 8007068:	460c      	mov	r4, r1
 800706a:	465e      	mov	r6, fp
 800706c:	46aa      	mov	sl, r5
 800706e:	46a9      	mov	r9, r5
 8007070:	9501      	str	r5, [sp, #4]
 8007072:	68a2      	ldr	r2, [r4, #8]
 8007074:	b152      	cbz	r2, 800708c <_scanf_float+0x60>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b4e      	cmp	r3, #78	; 0x4e
 800707c:	d864      	bhi.n	8007148 <_scanf_float+0x11c>
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d83c      	bhi.n	80070fc <_scanf_float+0xd0>
 8007082:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007086:	b2c8      	uxtb	r0, r1
 8007088:	280e      	cmp	r0, #14
 800708a:	d93a      	bls.n	8007102 <_scanf_float+0xd6>
 800708c:	f1b9 0f00 	cmp.w	r9, #0
 8007090:	d003      	beq.n	800709a <_scanf_float+0x6e>
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800709e:	f1ba 0f01 	cmp.w	sl, #1
 80070a2:	f200 8113 	bhi.w	80072cc <_scanf_float+0x2a0>
 80070a6:	455e      	cmp	r6, fp
 80070a8:	f200 8105 	bhi.w	80072b6 <_scanf_float+0x28a>
 80070ac:	2501      	movs	r5, #1
 80070ae:	4628      	mov	r0, r5
 80070b0:	b007      	add	sp, #28
 80070b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80070ba:	2a0d      	cmp	r2, #13
 80070bc:	d8e6      	bhi.n	800708c <_scanf_float+0x60>
 80070be:	a101      	add	r1, pc, #4	; (adr r1, 80070c4 <_scanf_float+0x98>)
 80070c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070c4:	08007203 	.word	0x08007203
 80070c8:	0800708d 	.word	0x0800708d
 80070cc:	0800708d 	.word	0x0800708d
 80070d0:	0800708d 	.word	0x0800708d
 80070d4:	08007263 	.word	0x08007263
 80070d8:	0800723b 	.word	0x0800723b
 80070dc:	0800708d 	.word	0x0800708d
 80070e0:	0800708d 	.word	0x0800708d
 80070e4:	08007211 	.word	0x08007211
 80070e8:	0800708d 	.word	0x0800708d
 80070ec:	0800708d 	.word	0x0800708d
 80070f0:	0800708d 	.word	0x0800708d
 80070f4:	0800708d 	.word	0x0800708d
 80070f8:	080071c9 	.word	0x080071c9
 80070fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007100:	e7db      	b.n	80070ba <_scanf_float+0x8e>
 8007102:	290e      	cmp	r1, #14
 8007104:	d8c2      	bhi.n	800708c <_scanf_float+0x60>
 8007106:	a001      	add	r0, pc, #4	; (adr r0, 800710c <_scanf_float+0xe0>)
 8007108:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800710c:	080071bb 	.word	0x080071bb
 8007110:	0800708d 	.word	0x0800708d
 8007114:	080071bb 	.word	0x080071bb
 8007118:	0800724f 	.word	0x0800724f
 800711c:	0800708d 	.word	0x0800708d
 8007120:	08007169 	.word	0x08007169
 8007124:	080071a5 	.word	0x080071a5
 8007128:	080071a5 	.word	0x080071a5
 800712c:	080071a5 	.word	0x080071a5
 8007130:	080071a5 	.word	0x080071a5
 8007134:	080071a5 	.word	0x080071a5
 8007138:	080071a5 	.word	0x080071a5
 800713c:	080071a5 	.word	0x080071a5
 8007140:	080071a5 	.word	0x080071a5
 8007144:	080071a5 	.word	0x080071a5
 8007148:	2b6e      	cmp	r3, #110	; 0x6e
 800714a:	d809      	bhi.n	8007160 <_scanf_float+0x134>
 800714c:	2b60      	cmp	r3, #96	; 0x60
 800714e:	d8b2      	bhi.n	80070b6 <_scanf_float+0x8a>
 8007150:	2b54      	cmp	r3, #84	; 0x54
 8007152:	d077      	beq.n	8007244 <_scanf_float+0x218>
 8007154:	2b59      	cmp	r3, #89	; 0x59
 8007156:	d199      	bne.n	800708c <_scanf_float+0x60>
 8007158:	2d07      	cmp	r5, #7
 800715a:	d197      	bne.n	800708c <_scanf_float+0x60>
 800715c:	2508      	movs	r5, #8
 800715e:	e029      	b.n	80071b4 <_scanf_float+0x188>
 8007160:	2b74      	cmp	r3, #116	; 0x74
 8007162:	d06f      	beq.n	8007244 <_scanf_float+0x218>
 8007164:	2b79      	cmp	r3, #121	; 0x79
 8007166:	e7f6      	b.n	8007156 <_scanf_float+0x12a>
 8007168:	6821      	ldr	r1, [r4, #0]
 800716a:	05c8      	lsls	r0, r1, #23
 800716c:	d51a      	bpl.n	80071a4 <_scanf_float+0x178>
 800716e:	9b02      	ldr	r3, [sp, #8]
 8007170:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007174:	6021      	str	r1, [r4, #0]
 8007176:	f109 0901 	add.w	r9, r9, #1
 800717a:	b11b      	cbz	r3, 8007184 <_scanf_float+0x158>
 800717c:	3b01      	subs	r3, #1
 800717e:	3201      	adds	r2, #1
 8007180:	9302      	str	r3, [sp, #8]
 8007182:	60a2      	str	r2, [r4, #8]
 8007184:	68a3      	ldr	r3, [r4, #8]
 8007186:	3b01      	subs	r3, #1
 8007188:	60a3      	str	r3, [r4, #8]
 800718a:	6923      	ldr	r3, [r4, #16]
 800718c:	3301      	adds	r3, #1
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3b01      	subs	r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	607b      	str	r3, [r7, #4]
 8007198:	f340 8084 	ble.w	80072a4 <_scanf_float+0x278>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	3301      	adds	r3, #1
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	e766      	b.n	8007072 <_scanf_float+0x46>
 80071a4:	eb1a 0f05 	cmn.w	sl, r5
 80071a8:	f47f af70 	bne.w	800708c <_scanf_float+0x60>
 80071ac:	6822      	ldr	r2, [r4, #0]
 80071ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80071b2:	6022      	str	r2, [r4, #0]
 80071b4:	f806 3b01 	strb.w	r3, [r6], #1
 80071b8:	e7e4      	b.n	8007184 <_scanf_float+0x158>
 80071ba:	6822      	ldr	r2, [r4, #0]
 80071bc:	0610      	lsls	r0, r2, #24
 80071be:	f57f af65 	bpl.w	800708c <_scanf_float+0x60>
 80071c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071c6:	e7f4      	b.n	80071b2 <_scanf_float+0x186>
 80071c8:	f1ba 0f00 	cmp.w	sl, #0
 80071cc:	d10e      	bne.n	80071ec <_scanf_float+0x1c0>
 80071ce:	f1b9 0f00 	cmp.w	r9, #0
 80071d2:	d10e      	bne.n	80071f2 <_scanf_float+0x1c6>
 80071d4:	6822      	ldr	r2, [r4, #0]
 80071d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071de:	d108      	bne.n	80071f2 <_scanf_float+0x1c6>
 80071e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071e4:	6022      	str	r2, [r4, #0]
 80071e6:	f04f 0a01 	mov.w	sl, #1
 80071ea:	e7e3      	b.n	80071b4 <_scanf_float+0x188>
 80071ec:	f1ba 0f02 	cmp.w	sl, #2
 80071f0:	d055      	beq.n	800729e <_scanf_float+0x272>
 80071f2:	2d01      	cmp	r5, #1
 80071f4:	d002      	beq.n	80071fc <_scanf_float+0x1d0>
 80071f6:	2d04      	cmp	r5, #4
 80071f8:	f47f af48 	bne.w	800708c <_scanf_float+0x60>
 80071fc:	3501      	adds	r5, #1
 80071fe:	b2ed      	uxtb	r5, r5
 8007200:	e7d8      	b.n	80071b4 <_scanf_float+0x188>
 8007202:	f1ba 0f01 	cmp.w	sl, #1
 8007206:	f47f af41 	bne.w	800708c <_scanf_float+0x60>
 800720a:	f04f 0a02 	mov.w	sl, #2
 800720e:	e7d1      	b.n	80071b4 <_scanf_float+0x188>
 8007210:	b97d      	cbnz	r5, 8007232 <_scanf_float+0x206>
 8007212:	f1b9 0f00 	cmp.w	r9, #0
 8007216:	f47f af3c 	bne.w	8007092 <_scanf_float+0x66>
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007220:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007224:	f47f af39 	bne.w	800709a <_scanf_float+0x6e>
 8007228:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800722c:	6022      	str	r2, [r4, #0]
 800722e:	2501      	movs	r5, #1
 8007230:	e7c0      	b.n	80071b4 <_scanf_float+0x188>
 8007232:	2d03      	cmp	r5, #3
 8007234:	d0e2      	beq.n	80071fc <_scanf_float+0x1d0>
 8007236:	2d05      	cmp	r5, #5
 8007238:	e7de      	b.n	80071f8 <_scanf_float+0x1cc>
 800723a:	2d02      	cmp	r5, #2
 800723c:	f47f af26 	bne.w	800708c <_scanf_float+0x60>
 8007240:	2503      	movs	r5, #3
 8007242:	e7b7      	b.n	80071b4 <_scanf_float+0x188>
 8007244:	2d06      	cmp	r5, #6
 8007246:	f47f af21 	bne.w	800708c <_scanf_float+0x60>
 800724a:	2507      	movs	r5, #7
 800724c:	e7b2      	b.n	80071b4 <_scanf_float+0x188>
 800724e:	6822      	ldr	r2, [r4, #0]
 8007250:	0591      	lsls	r1, r2, #22
 8007252:	f57f af1b 	bpl.w	800708c <_scanf_float+0x60>
 8007256:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800725a:	6022      	str	r2, [r4, #0]
 800725c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007260:	e7a8      	b.n	80071b4 <_scanf_float+0x188>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007268:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800726c:	d006      	beq.n	800727c <_scanf_float+0x250>
 800726e:	0550      	lsls	r0, r2, #21
 8007270:	f57f af0c 	bpl.w	800708c <_scanf_float+0x60>
 8007274:	f1b9 0f00 	cmp.w	r9, #0
 8007278:	f43f af0f 	beq.w	800709a <_scanf_float+0x6e>
 800727c:	0591      	lsls	r1, r2, #22
 800727e:	bf58      	it	pl
 8007280:	9901      	ldrpl	r1, [sp, #4]
 8007282:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007286:	bf58      	it	pl
 8007288:	eba9 0101 	subpl.w	r1, r9, r1
 800728c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007290:	bf58      	it	pl
 8007292:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007296:	6022      	str	r2, [r4, #0]
 8007298:	f04f 0900 	mov.w	r9, #0
 800729c:	e78a      	b.n	80071b4 <_scanf_float+0x188>
 800729e:	f04f 0a03 	mov.w	sl, #3
 80072a2:	e787      	b.n	80071b4 <_scanf_float+0x188>
 80072a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80072a8:	4639      	mov	r1, r7
 80072aa:	4640      	mov	r0, r8
 80072ac:	4798      	blx	r3
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f43f aedf 	beq.w	8007072 <_scanf_float+0x46>
 80072b4:	e6ea      	b.n	800708c <_scanf_float+0x60>
 80072b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072be:	463a      	mov	r2, r7
 80072c0:	4640      	mov	r0, r8
 80072c2:	4798      	blx	r3
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	3b01      	subs	r3, #1
 80072c8:	6123      	str	r3, [r4, #16]
 80072ca:	e6ec      	b.n	80070a6 <_scanf_float+0x7a>
 80072cc:	1e6b      	subs	r3, r5, #1
 80072ce:	2b06      	cmp	r3, #6
 80072d0:	d825      	bhi.n	800731e <_scanf_float+0x2f2>
 80072d2:	2d02      	cmp	r5, #2
 80072d4:	d836      	bhi.n	8007344 <_scanf_float+0x318>
 80072d6:	455e      	cmp	r6, fp
 80072d8:	f67f aee8 	bls.w	80070ac <_scanf_float+0x80>
 80072dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072e4:	463a      	mov	r2, r7
 80072e6:	4640      	mov	r0, r8
 80072e8:	4798      	blx	r3
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	6123      	str	r3, [r4, #16]
 80072f0:	e7f1      	b.n	80072d6 <_scanf_float+0x2aa>
 80072f2:	9802      	ldr	r0, [sp, #8]
 80072f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80072fc:	9002      	str	r0, [sp, #8]
 80072fe:	463a      	mov	r2, r7
 8007300:	4640      	mov	r0, r8
 8007302:	4798      	blx	r3
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	3b01      	subs	r3, #1
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800730e:	fa5f fa8a 	uxtb.w	sl, sl
 8007312:	f1ba 0f02 	cmp.w	sl, #2
 8007316:	d1ec      	bne.n	80072f2 <_scanf_float+0x2c6>
 8007318:	3d03      	subs	r5, #3
 800731a:	b2ed      	uxtb	r5, r5
 800731c:	1b76      	subs	r6, r6, r5
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	05da      	lsls	r2, r3, #23
 8007322:	d52f      	bpl.n	8007384 <_scanf_float+0x358>
 8007324:	055b      	lsls	r3, r3, #21
 8007326:	d510      	bpl.n	800734a <_scanf_float+0x31e>
 8007328:	455e      	cmp	r6, fp
 800732a:	f67f aebf 	bls.w	80070ac <_scanf_float+0x80>
 800732e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007336:	463a      	mov	r2, r7
 8007338:	4640      	mov	r0, r8
 800733a:	4798      	blx	r3
 800733c:	6923      	ldr	r3, [r4, #16]
 800733e:	3b01      	subs	r3, #1
 8007340:	6123      	str	r3, [r4, #16]
 8007342:	e7f1      	b.n	8007328 <_scanf_float+0x2fc>
 8007344:	46aa      	mov	sl, r5
 8007346:	9602      	str	r6, [sp, #8]
 8007348:	e7df      	b.n	800730a <_scanf_float+0x2de>
 800734a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	2965      	cmp	r1, #101	; 0x65
 8007352:	f103 33ff 	add.w	r3, r3, #4294967295
 8007356:	f106 35ff 	add.w	r5, r6, #4294967295
 800735a:	6123      	str	r3, [r4, #16]
 800735c:	d00c      	beq.n	8007378 <_scanf_float+0x34c>
 800735e:	2945      	cmp	r1, #69	; 0x45
 8007360:	d00a      	beq.n	8007378 <_scanf_float+0x34c>
 8007362:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007366:	463a      	mov	r2, r7
 8007368:	4640      	mov	r0, r8
 800736a:	4798      	blx	r3
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007372:	3b01      	subs	r3, #1
 8007374:	1eb5      	subs	r5, r6, #2
 8007376:	6123      	str	r3, [r4, #16]
 8007378:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800737c:	463a      	mov	r2, r7
 800737e:	4640      	mov	r0, r8
 8007380:	4798      	blx	r3
 8007382:	462e      	mov	r6, r5
 8007384:	6825      	ldr	r5, [r4, #0]
 8007386:	f015 0510 	ands.w	r5, r5, #16
 800738a:	d158      	bne.n	800743e <_scanf_float+0x412>
 800738c:	7035      	strb	r5, [r6, #0]
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007398:	d11c      	bne.n	80073d4 <_scanf_float+0x3a8>
 800739a:	9b01      	ldr	r3, [sp, #4]
 800739c:	454b      	cmp	r3, r9
 800739e:	eba3 0209 	sub.w	r2, r3, r9
 80073a2:	d124      	bne.n	80073ee <_scanf_float+0x3c2>
 80073a4:	2200      	movs	r2, #0
 80073a6:	4659      	mov	r1, fp
 80073a8:	4640      	mov	r0, r8
 80073aa:	f002 fc45 	bl	8009c38 <_strtod_r>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	6821      	ldr	r1, [r4, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f011 0f02 	tst.w	r1, #2
 80073b8:	ec57 6b10 	vmov	r6, r7, d0
 80073bc:	f103 0204 	add.w	r2, r3, #4
 80073c0:	d020      	beq.n	8007404 <_scanf_float+0x3d8>
 80073c2:	9903      	ldr	r1, [sp, #12]
 80073c4:	600a      	str	r2, [r1, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	e9c3 6700 	strd	r6, r7, [r3]
 80073cc:	68e3      	ldr	r3, [r4, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60e3      	str	r3, [r4, #12]
 80073d2:	e66c      	b.n	80070ae <_scanf_float+0x82>
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0e4      	beq.n	80073a4 <_scanf_float+0x378>
 80073da:	9905      	ldr	r1, [sp, #20]
 80073dc:	230a      	movs	r3, #10
 80073de:	462a      	mov	r2, r5
 80073e0:	3101      	adds	r1, #1
 80073e2:	4640      	mov	r0, r8
 80073e4:	f7ff f9b0 	bl	8006748 <_strtol_r>
 80073e8:	9b04      	ldr	r3, [sp, #16]
 80073ea:	9e05      	ldr	r6, [sp, #20]
 80073ec:	1ac2      	subs	r2, r0, r3
 80073ee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073f2:	429e      	cmp	r6, r3
 80073f4:	bf28      	it	cs
 80073f6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073fa:	4912      	ldr	r1, [pc, #72]	; (8007444 <_scanf_float+0x418>)
 80073fc:	4630      	mov	r0, r6
 80073fe:	f000 f8d5 	bl	80075ac <siprintf>
 8007402:	e7cf      	b.n	80073a4 <_scanf_float+0x378>
 8007404:	f011 0f04 	tst.w	r1, #4
 8007408:	9903      	ldr	r1, [sp, #12]
 800740a:	600a      	str	r2, [r1, #0]
 800740c:	d1db      	bne.n	80073c6 <_scanf_float+0x39a>
 800740e:	f8d3 8000 	ldr.w	r8, [r3]
 8007412:	ee10 2a10 	vmov	r2, s0
 8007416:	ee10 0a10 	vmov	r0, s0
 800741a:	463b      	mov	r3, r7
 800741c:	4639      	mov	r1, r7
 800741e:	f7f9 fb8d 	bl	8000b3c <__aeabi_dcmpun>
 8007422:	b128      	cbz	r0, 8007430 <_scanf_float+0x404>
 8007424:	4808      	ldr	r0, [pc, #32]	; (8007448 <_scanf_float+0x41c>)
 8007426:	f000 f9cd 	bl	80077c4 <nanf>
 800742a:	ed88 0a00 	vstr	s0, [r8]
 800742e:	e7cd      	b.n	80073cc <_scanf_float+0x3a0>
 8007430:	4630      	mov	r0, r6
 8007432:	4639      	mov	r1, r7
 8007434:	f7f9 fbe0 	bl	8000bf8 <__aeabi_d2f>
 8007438:	f8c8 0000 	str.w	r0, [r8]
 800743c:	e7c6      	b.n	80073cc <_scanf_float+0x3a0>
 800743e:	2500      	movs	r5, #0
 8007440:	e635      	b.n	80070ae <_scanf_float+0x82>
 8007442:	bf00      	nop
 8007444:	0800b695 	.word	0x0800b695
 8007448:	0800b924 	.word	0x0800b924

0800744c <std>:
 800744c:	2300      	movs	r3, #0
 800744e:	b510      	push	{r4, lr}
 8007450:	4604      	mov	r4, r0
 8007452:	e9c0 3300 	strd	r3, r3, [r0]
 8007456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800745a:	6083      	str	r3, [r0, #8]
 800745c:	8181      	strh	r1, [r0, #12]
 800745e:	6643      	str	r3, [r0, #100]	; 0x64
 8007460:	81c2      	strh	r2, [r0, #14]
 8007462:	6183      	str	r3, [r0, #24]
 8007464:	4619      	mov	r1, r3
 8007466:	2208      	movs	r2, #8
 8007468:	305c      	adds	r0, #92	; 0x5c
 800746a:	f000 f902 	bl	8007672 <memset>
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <std+0x38>)
 8007470:	6263      	str	r3, [r4, #36]	; 0x24
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <std+0x3c>)
 8007474:	62a3      	str	r3, [r4, #40]	; 0x28
 8007476:	4b05      	ldr	r3, [pc, #20]	; (800748c <std+0x40>)
 8007478:	62e3      	str	r3, [r4, #44]	; 0x2c
 800747a:	4b05      	ldr	r3, [pc, #20]	; (8007490 <std+0x44>)
 800747c:	6224      	str	r4, [r4, #32]
 800747e:	6323      	str	r3, [r4, #48]	; 0x30
 8007480:	bd10      	pop	{r4, pc}
 8007482:	bf00      	nop
 8007484:	080075ed 	.word	0x080075ed
 8007488:	0800760f 	.word	0x0800760f
 800748c:	08007647 	.word	0x08007647
 8007490:	0800766b 	.word	0x0800766b

08007494 <stdio_exit_handler>:
 8007494:	4a02      	ldr	r2, [pc, #8]	; (80074a0 <stdio_exit_handler+0xc>)
 8007496:	4903      	ldr	r1, [pc, #12]	; (80074a4 <stdio_exit_handler+0x10>)
 8007498:	4803      	ldr	r0, [pc, #12]	; (80074a8 <stdio_exit_handler+0x14>)
 800749a:	f000 b869 	b.w	8007570 <_fwalk_sglue>
 800749e:	bf00      	nop
 80074a0:	200000a4 	.word	0x200000a4
 80074a4:	0800a001 	.word	0x0800a001
 80074a8:	200000b0 	.word	0x200000b0

080074ac <cleanup_stdio>:
 80074ac:	6841      	ldr	r1, [r0, #4]
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <cleanup_stdio+0x34>)
 80074b0:	4299      	cmp	r1, r3
 80074b2:	b510      	push	{r4, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	d001      	beq.n	80074bc <cleanup_stdio+0x10>
 80074b8:	f002 fda2 	bl	800a000 <_fflush_r>
 80074bc:	68a1      	ldr	r1, [r4, #8]
 80074be:	4b09      	ldr	r3, [pc, #36]	; (80074e4 <cleanup_stdio+0x38>)
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d002      	beq.n	80074ca <cleanup_stdio+0x1e>
 80074c4:	4620      	mov	r0, r4
 80074c6:	f002 fd9b 	bl	800a000 <_fflush_r>
 80074ca:	68e1      	ldr	r1, [r4, #12]
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <cleanup_stdio+0x3c>)
 80074ce:	4299      	cmp	r1, r3
 80074d0:	d004      	beq.n	80074dc <cleanup_stdio+0x30>
 80074d2:	4620      	mov	r0, r4
 80074d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074d8:	f002 bd92 	b.w	800a000 <_fflush_r>
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	bf00      	nop
 80074e0:	200004a0 	.word	0x200004a0
 80074e4:	20000508 	.word	0x20000508
 80074e8:	20000570 	.word	0x20000570

080074ec <global_stdio_init.part.0>:
 80074ec:	b510      	push	{r4, lr}
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <global_stdio_init.part.0+0x30>)
 80074f0:	4c0b      	ldr	r4, [pc, #44]	; (8007520 <global_stdio_init.part.0+0x34>)
 80074f2:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <global_stdio_init.part.0+0x38>)
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	4620      	mov	r0, r4
 80074f8:	2200      	movs	r2, #0
 80074fa:	2104      	movs	r1, #4
 80074fc:	f7ff ffa6 	bl	800744c <std>
 8007500:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007504:	2201      	movs	r2, #1
 8007506:	2109      	movs	r1, #9
 8007508:	f7ff ffa0 	bl	800744c <std>
 800750c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007510:	2202      	movs	r2, #2
 8007512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007516:	2112      	movs	r1, #18
 8007518:	f7ff bf98 	b.w	800744c <std>
 800751c:	200005d8 	.word	0x200005d8
 8007520:	200004a0 	.word	0x200004a0
 8007524:	08007495 	.word	0x08007495

08007528 <__sfp_lock_acquire>:
 8007528:	4801      	ldr	r0, [pc, #4]	; (8007530 <__sfp_lock_acquire+0x8>)
 800752a:	f000 b949 	b.w	80077c0 <__retarget_lock_acquire_recursive>
 800752e:	bf00      	nop
 8007530:	200005e1 	.word	0x200005e1

08007534 <__sfp_lock_release>:
 8007534:	4801      	ldr	r0, [pc, #4]	; (800753c <__sfp_lock_release+0x8>)
 8007536:	f000 b944 	b.w	80077c2 <__retarget_lock_release_recursive>
 800753a:	bf00      	nop
 800753c:	200005e1 	.word	0x200005e1

08007540 <__sinit>:
 8007540:	b510      	push	{r4, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	f7ff fff0 	bl	8007528 <__sfp_lock_acquire>
 8007548:	6a23      	ldr	r3, [r4, #32]
 800754a:	b11b      	cbz	r3, 8007554 <__sinit+0x14>
 800754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007550:	f7ff bff0 	b.w	8007534 <__sfp_lock_release>
 8007554:	4b04      	ldr	r3, [pc, #16]	; (8007568 <__sinit+0x28>)
 8007556:	6223      	str	r3, [r4, #32]
 8007558:	4b04      	ldr	r3, [pc, #16]	; (800756c <__sinit+0x2c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f5      	bne.n	800754c <__sinit+0xc>
 8007560:	f7ff ffc4 	bl	80074ec <global_stdio_init.part.0>
 8007564:	e7f2      	b.n	800754c <__sinit+0xc>
 8007566:	bf00      	nop
 8007568:	080074ad 	.word	0x080074ad
 800756c:	200005d8 	.word	0x200005d8

08007570 <_fwalk_sglue>:
 8007570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007574:	4607      	mov	r7, r0
 8007576:	4688      	mov	r8, r1
 8007578:	4614      	mov	r4, r2
 800757a:	2600      	movs	r6, #0
 800757c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007580:	f1b9 0901 	subs.w	r9, r9, #1
 8007584:	d505      	bpl.n	8007592 <_fwalk_sglue+0x22>
 8007586:	6824      	ldr	r4, [r4, #0]
 8007588:	2c00      	cmp	r4, #0
 800758a:	d1f7      	bne.n	800757c <_fwalk_sglue+0xc>
 800758c:	4630      	mov	r0, r6
 800758e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d907      	bls.n	80075a8 <_fwalk_sglue+0x38>
 8007598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800759c:	3301      	adds	r3, #1
 800759e:	d003      	beq.n	80075a8 <_fwalk_sglue+0x38>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4638      	mov	r0, r7
 80075a4:	47c0      	blx	r8
 80075a6:	4306      	orrs	r6, r0
 80075a8:	3568      	adds	r5, #104	; 0x68
 80075aa:	e7e9      	b.n	8007580 <_fwalk_sglue+0x10>

080075ac <siprintf>:
 80075ac:	b40e      	push	{r1, r2, r3}
 80075ae:	b500      	push	{lr}
 80075b0:	b09c      	sub	sp, #112	; 0x70
 80075b2:	ab1d      	add	r3, sp, #116	; 0x74
 80075b4:	9002      	str	r0, [sp, #8]
 80075b6:	9006      	str	r0, [sp, #24]
 80075b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075bc:	4809      	ldr	r0, [pc, #36]	; (80075e4 <siprintf+0x38>)
 80075be:	9107      	str	r1, [sp, #28]
 80075c0:	9104      	str	r1, [sp, #16]
 80075c2:	4909      	ldr	r1, [pc, #36]	; (80075e8 <siprintf+0x3c>)
 80075c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c8:	9105      	str	r1, [sp, #20]
 80075ca:	6800      	ldr	r0, [r0, #0]
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	a902      	add	r1, sp, #8
 80075d0:	f002 fb92 	bl	8009cf8 <_svfiprintf_r>
 80075d4:	9b02      	ldr	r3, [sp, #8]
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
 80075da:	b01c      	add	sp, #112	; 0x70
 80075dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e0:	b003      	add	sp, #12
 80075e2:	4770      	bx	lr
 80075e4:	200000fc 	.word	0x200000fc
 80075e8:	ffff0208 	.word	0xffff0208

080075ec <__sread>:
 80075ec:	b510      	push	{r4, lr}
 80075ee:	460c      	mov	r4, r1
 80075f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f4:	f000 f896 	bl	8007724 <_read_r>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	bfab      	itete	ge
 80075fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075fe:	89a3      	ldrhlt	r3, [r4, #12]
 8007600:	181b      	addge	r3, r3, r0
 8007602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007606:	bfac      	ite	ge
 8007608:	6563      	strge	r3, [r4, #84]	; 0x54
 800760a:	81a3      	strhlt	r3, [r4, #12]
 800760c:	bd10      	pop	{r4, pc}

0800760e <__swrite>:
 800760e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007612:	461f      	mov	r7, r3
 8007614:	898b      	ldrh	r3, [r1, #12]
 8007616:	05db      	lsls	r3, r3, #23
 8007618:	4605      	mov	r5, r0
 800761a:	460c      	mov	r4, r1
 800761c:	4616      	mov	r6, r2
 800761e:	d505      	bpl.n	800762c <__swrite+0x1e>
 8007620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007624:	2302      	movs	r3, #2
 8007626:	2200      	movs	r2, #0
 8007628:	f000 f86a 	bl	8007700 <_lseek_r>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	4632      	mov	r2, r6
 800763a:	463b      	mov	r3, r7
 800763c:	4628      	mov	r0, r5
 800763e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007642:	f000 b881 	b.w	8007748 <_write_r>

08007646 <__sseek>:
 8007646:	b510      	push	{r4, lr}
 8007648:	460c      	mov	r4, r1
 800764a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800764e:	f000 f857 	bl	8007700 <_lseek_r>
 8007652:	1c43      	adds	r3, r0, #1
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	bf15      	itete	ne
 8007658:	6560      	strne	r0, [r4, #84]	; 0x54
 800765a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800765e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007662:	81a3      	strheq	r3, [r4, #12]
 8007664:	bf18      	it	ne
 8007666:	81a3      	strhne	r3, [r4, #12]
 8007668:	bd10      	pop	{r4, pc}

0800766a <__sclose>:
 800766a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800766e:	f000 b837 	b.w	80076e0 <_close_r>

08007672 <memset>:
 8007672:	4402      	add	r2, r0
 8007674:	4603      	mov	r3, r0
 8007676:	4293      	cmp	r3, r2
 8007678:	d100      	bne.n	800767c <memset+0xa>
 800767a:	4770      	bx	lr
 800767c:	f803 1b01 	strb.w	r1, [r3], #1
 8007680:	e7f9      	b.n	8007676 <memset+0x4>

08007682 <__strtok_r>:
 8007682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007684:	b908      	cbnz	r0, 800768a <__strtok_r+0x8>
 8007686:	6810      	ldr	r0, [r2, #0]
 8007688:	b188      	cbz	r0, 80076ae <__strtok_r+0x2c>
 800768a:	4604      	mov	r4, r0
 800768c:	4620      	mov	r0, r4
 800768e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007692:	460f      	mov	r7, r1
 8007694:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007698:	b91e      	cbnz	r6, 80076a2 <__strtok_r+0x20>
 800769a:	b965      	cbnz	r5, 80076b6 <__strtok_r+0x34>
 800769c:	6015      	str	r5, [r2, #0]
 800769e:	4628      	mov	r0, r5
 80076a0:	e005      	b.n	80076ae <__strtok_r+0x2c>
 80076a2:	42b5      	cmp	r5, r6
 80076a4:	d1f6      	bne.n	8007694 <__strtok_r+0x12>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1f0      	bne.n	800768c <__strtok_r+0xa>
 80076aa:	6014      	str	r4, [r2, #0]
 80076ac:	7003      	strb	r3, [r0, #0]
 80076ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b0:	461c      	mov	r4, r3
 80076b2:	e00c      	b.n	80076ce <__strtok_r+0x4c>
 80076b4:	b915      	cbnz	r5, 80076bc <__strtok_r+0x3a>
 80076b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076ba:	460e      	mov	r6, r1
 80076bc:	f816 5b01 	ldrb.w	r5, [r6], #1
 80076c0:	42ab      	cmp	r3, r5
 80076c2:	d1f7      	bne.n	80076b4 <__strtok_r+0x32>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f3      	beq.n	80076b0 <__strtok_r+0x2e>
 80076c8:	2300      	movs	r3, #0
 80076ca:	f804 3c01 	strb.w	r3, [r4, #-1]
 80076ce:	6014      	str	r4, [r2, #0]
 80076d0:	e7ed      	b.n	80076ae <__strtok_r+0x2c>

080076d2 <strtok_r>:
 80076d2:	2301      	movs	r3, #1
 80076d4:	f7ff bfd5 	b.w	8007682 <__strtok_r>

080076d8 <_localeconv_r>:
 80076d8:	4800      	ldr	r0, [pc, #0]	; (80076dc <_localeconv_r+0x4>)
 80076da:	4770      	bx	lr
 80076dc:	200001f0 	.word	0x200001f0

080076e0 <_close_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4d06      	ldr	r5, [pc, #24]	; (80076fc <_close_r+0x1c>)
 80076e4:	2300      	movs	r3, #0
 80076e6:	4604      	mov	r4, r0
 80076e8:	4608      	mov	r0, r1
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	f7fa fe01 	bl	80022f2 <_close>
 80076f0:	1c43      	adds	r3, r0, #1
 80076f2:	d102      	bne.n	80076fa <_close_r+0x1a>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	b103      	cbz	r3, 80076fa <_close_r+0x1a>
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	200005dc 	.word	0x200005dc

08007700 <_lseek_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d07      	ldr	r5, [pc, #28]	; (8007720 <_lseek_r+0x20>)
 8007704:	4604      	mov	r4, r0
 8007706:	4608      	mov	r0, r1
 8007708:	4611      	mov	r1, r2
 800770a:	2200      	movs	r2, #0
 800770c:	602a      	str	r2, [r5, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f7fa fe16 	bl	8002340 <_lseek>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d102      	bne.n	800771e <_lseek_r+0x1e>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	b103      	cbz	r3, 800771e <_lseek_r+0x1e>
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	bd38      	pop	{r3, r4, r5, pc}
 8007720:	200005dc 	.word	0x200005dc

08007724 <_read_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4d07      	ldr	r5, [pc, #28]	; (8007744 <_read_r+0x20>)
 8007728:	4604      	mov	r4, r0
 800772a:	4608      	mov	r0, r1
 800772c:	4611      	mov	r1, r2
 800772e:	2200      	movs	r2, #0
 8007730:	602a      	str	r2, [r5, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	f7fa fda4 	bl	8002280 <_read>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_read_r+0x1e>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_read_r+0x1e>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200005dc 	.word	0x200005dc

08007748 <_write_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d07      	ldr	r5, [pc, #28]	; (8007768 <_write_r+0x20>)
 800774c:	4604      	mov	r4, r0
 800774e:	4608      	mov	r0, r1
 8007750:	4611      	mov	r1, r2
 8007752:	2200      	movs	r2, #0
 8007754:	602a      	str	r2, [r5, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	f7fa fdaf 	bl	80022ba <_write>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_write_r+0x1e>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_write_r+0x1e>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	200005dc 	.word	0x200005dc

0800776c <__errno>:
 800776c:	4b01      	ldr	r3, [pc, #4]	; (8007774 <__errno+0x8>)
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	200000fc 	.word	0x200000fc

08007778 <__libc_init_array>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	4d0d      	ldr	r5, [pc, #52]	; (80077b0 <__libc_init_array+0x38>)
 800777c:	4c0d      	ldr	r4, [pc, #52]	; (80077b4 <__libc_init_array+0x3c>)
 800777e:	1b64      	subs	r4, r4, r5
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	2600      	movs	r6, #0
 8007784:	42a6      	cmp	r6, r4
 8007786:	d109      	bne.n	800779c <__libc_init_array+0x24>
 8007788:	4d0b      	ldr	r5, [pc, #44]	; (80077b8 <__libc_init_array+0x40>)
 800778a:	4c0c      	ldr	r4, [pc, #48]	; (80077bc <__libc_init_array+0x44>)
 800778c:	f003 feca 	bl	800b524 <_init>
 8007790:	1b64      	subs	r4, r4, r5
 8007792:	10a4      	asrs	r4, r4, #2
 8007794:	2600      	movs	r6, #0
 8007796:	42a6      	cmp	r6, r4
 8007798:	d105      	bne.n	80077a6 <__libc_init_array+0x2e>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	f855 3b04 	ldr.w	r3, [r5], #4
 80077a0:	4798      	blx	r3
 80077a2:	3601      	adds	r6, #1
 80077a4:	e7ee      	b.n	8007784 <__libc_init_array+0xc>
 80077a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077aa:	4798      	blx	r3
 80077ac:	3601      	adds	r6, #1
 80077ae:	e7f2      	b.n	8007796 <__libc_init_array+0x1e>
 80077b0:	0800ba00 	.word	0x0800ba00
 80077b4:	0800ba00 	.word	0x0800ba00
 80077b8:	0800ba00 	.word	0x0800ba00
 80077bc:	0800ba04 	.word	0x0800ba04

080077c0 <__retarget_lock_acquire_recursive>:
 80077c0:	4770      	bx	lr

080077c2 <__retarget_lock_release_recursive>:
 80077c2:	4770      	bx	lr

080077c4 <nanf>:
 80077c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80077cc <nanf+0x8>
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	7fc00000 	.word	0x7fc00000

080077d0 <quorem>:
 80077d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	6903      	ldr	r3, [r0, #16]
 80077d6:	690c      	ldr	r4, [r1, #16]
 80077d8:	42a3      	cmp	r3, r4
 80077da:	4607      	mov	r7, r0
 80077dc:	db7e      	blt.n	80078dc <quorem+0x10c>
 80077de:	3c01      	subs	r4, #1
 80077e0:	f101 0814 	add.w	r8, r1, #20
 80077e4:	f100 0514 	add.w	r5, r0, #20
 80077e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077f6:	3301      	adds	r3, #1
 80077f8:	429a      	cmp	r2, r3
 80077fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80077fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007802:	fbb2 f6f3 	udiv	r6, r2, r3
 8007806:	d331      	bcc.n	800786c <quorem+0x9c>
 8007808:	f04f 0e00 	mov.w	lr, #0
 800780c:	4640      	mov	r0, r8
 800780e:	46ac      	mov	ip, r5
 8007810:	46f2      	mov	sl, lr
 8007812:	f850 2b04 	ldr.w	r2, [r0], #4
 8007816:	b293      	uxth	r3, r2
 8007818:	fb06 e303 	mla	r3, r6, r3, lr
 800781c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007820:	0c1a      	lsrs	r2, r3, #16
 8007822:	b29b      	uxth	r3, r3
 8007824:	ebaa 0303 	sub.w	r3, sl, r3
 8007828:	f8dc a000 	ldr.w	sl, [ip]
 800782c:	fa13 f38a 	uxtah	r3, r3, sl
 8007830:	fb06 220e 	mla	r2, r6, lr, r2
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	9b00      	ldr	r3, [sp, #0]
 8007838:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800783c:	b292      	uxth	r2, r2
 800783e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007842:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007846:	f8bd 3000 	ldrh.w	r3, [sp]
 800784a:	4581      	cmp	r9, r0
 800784c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007850:	f84c 3b04 	str.w	r3, [ip], #4
 8007854:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007858:	d2db      	bcs.n	8007812 <quorem+0x42>
 800785a:	f855 300b 	ldr.w	r3, [r5, fp]
 800785e:	b92b      	cbnz	r3, 800786c <quorem+0x9c>
 8007860:	9b01      	ldr	r3, [sp, #4]
 8007862:	3b04      	subs	r3, #4
 8007864:	429d      	cmp	r5, r3
 8007866:	461a      	mov	r2, r3
 8007868:	d32c      	bcc.n	80078c4 <quorem+0xf4>
 800786a:	613c      	str	r4, [r7, #16]
 800786c:	4638      	mov	r0, r7
 800786e:	f001 f9ef 	bl	8008c50 <__mcmp>
 8007872:	2800      	cmp	r0, #0
 8007874:	db22      	blt.n	80078bc <quorem+0xec>
 8007876:	3601      	adds	r6, #1
 8007878:	4629      	mov	r1, r5
 800787a:	2000      	movs	r0, #0
 800787c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007880:	f8d1 c000 	ldr.w	ip, [r1]
 8007884:	b293      	uxth	r3, r2
 8007886:	1ac3      	subs	r3, r0, r3
 8007888:	0c12      	lsrs	r2, r2, #16
 800788a:	fa13 f38c 	uxtah	r3, r3, ip
 800788e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007892:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007896:	b29b      	uxth	r3, r3
 8007898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800789c:	45c1      	cmp	r9, r8
 800789e:	f841 3b04 	str.w	r3, [r1], #4
 80078a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078a6:	d2e9      	bcs.n	800787c <quorem+0xac>
 80078a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078b0:	b922      	cbnz	r2, 80078bc <quorem+0xec>
 80078b2:	3b04      	subs	r3, #4
 80078b4:	429d      	cmp	r5, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	d30a      	bcc.n	80078d0 <quorem+0x100>
 80078ba:	613c      	str	r4, [r7, #16]
 80078bc:	4630      	mov	r0, r6
 80078be:	b003      	add	sp, #12
 80078c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	3b04      	subs	r3, #4
 80078c8:	2a00      	cmp	r2, #0
 80078ca:	d1ce      	bne.n	800786a <quorem+0x9a>
 80078cc:	3c01      	subs	r4, #1
 80078ce:	e7c9      	b.n	8007864 <quorem+0x94>
 80078d0:	6812      	ldr	r2, [r2, #0]
 80078d2:	3b04      	subs	r3, #4
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	d1f0      	bne.n	80078ba <quorem+0xea>
 80078d8:	3c01      	subs	r4, #1
 80078da:	e7eb      	b.n	80078b4 <quorem+0xe4>
 80078dc:	2000      	movs	r0, #0
 80078de:	e7ee      	b.n	80078be <quorem+0xee>

080078e0 <_dtoa_r>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	ed2d 8b04 	vpush	{d8-d9}
 80078e8:	69c5      	ldr	r5, [r0, #28]
 80078ea:	b093      	sub	sp, #76	; 0x4c
 80078ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078f0:	ec57 6b10 	vmov	r6, r7, d0
 80078f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80078f8:	9107      	str	r1, [sp, #28]
 80078fa:	4604      	mov	r4, r0
 80078fc:	920a      	str	r2, [sp, #40]	; 0x28
 80078fe:	930d      	str	r3, [sp, #52]	; 0x34
 8007900:	b975      	cbnz	r5, 8007920 <_dtoa_r+0x40>
 8007902:	2010      	movs	r0, #16
 8007904:	f000 fe2a 	bl	800855c <malloc>
 8007908:	4602      	mov	r2, r0
 800790a:	61e0      	str	r0, [r4, #28]
 800790c:	b920      	cbnz	r0, 8007918 <_dtoa_r+0x38>
 800790e:	4bae      	ldr	r3, [pc, #696]	; (8007bc8 <_dtoa_r+0x2e8>)
 8007910:	21ef      	movs	r1, #239	; 0xef
 8007912:	48ae      	ldr	r0, [pc, #696]	; (8007bcc <_dtoa_r+0x2ec>)
 8007914:	f002 fbf0 	bl	800a0f8 <__assert_func>
 8007918:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800791c:	6005      	str	r5, [r0, #0]
 800791e:	60c5      	str	r5, [r0, #12]
 8007920:	69e3      	ldr	r3, [r4, #28]
 8007922:	6819      	ldr	r1, [r3, #0]
 8007924:	b151      	cbz	r1, 800793c <_dtoa_r+0x5c>
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	604a      	str	r2, [r1, #4]
 800792a:	2301      	movs	r3, #1
 800792c:	4093      	lsls	r3, r2
 800792e:	608b      	str	r3, [r1, #8]
 8007930:	4620      	mov	r0, r4
 8007932:	f000 ff07 	bl	8008744 <_Bfree>
 8007936:	69e3      	ldr	r3, [r4, #28]
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	1e3b      	subs	r3, r7, #0
 800793e:	bfbb      	ittet	lt
 8007940:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007944:	9303      	strlt	r3, [sp, #12]
 8007946:	2300      	movge	r3, #0
 8007948:	2201      	movlt	r2, #1
 800794a:	bfac      	ite	ge
 800794c:	f8c8 3000 	strge.w	r3, [r8]
 8007950:	f8c8 2000 	strlt.w	r2, [r8]
 8007954:	4b9e      	ldr	r3, [pc, #632]	; (8007bd0 <_dtoa_r+0x2f0>)
 8007956:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800795a:	ea33 0308 	bics.w	r3, r3, r8
 800795e:	d11b      	bne.n	8007998 <_dtoa_r+0xb8>
 8007960:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007962:	f242 730f 	movw	r3, #9999	; 0x270f
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800796c:	4333      	orrs	r3, r6
 800796e:	f000 8593 	beq.w	8008498 <_dtoa_r+0xbb8>
 8007972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007974:	b963      	cbnz	r3, 8007990 <_dtoa_r+0xb0>
 8007976:	4b97      	ldr	r3, [pc, #604]	; (8007bd4 <_dtoa_r+0x2f4>)
 8007978:	e027      	b.n	80079ca <_dtoa_r+0xea>
 800797a:	4b97      	ldr	r3, [pc, #604]	; (8007bd8 <_dtoa_r+0x2f8>)
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	3308      	adds	r3, #8
 8007980:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	9800      	ldr	r0, [sp, #0]
 8007986:	b013      	add	sp, #76	; 0x4c
 8007988:	ecbd 8b04 	vpop	{d8-d9}
 800798c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007990:	4b90      	ldr	r3, [pc, #576]	; (8007bd4 <_dtoa_r+0x2f4>)
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	3303      	adds	r3, #3
 8007996:	e7f3      	b.n	8007980 <_dtoa_r+0xa0>
 8007998:	ed9d 7b02 	vldr	d7, [sp, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	ec51 0b17 	vmov	r0, r1, d7
 80079a2:	eeb0 8a47 	vmov.f32	s16, s14
 80079a6:	eef0 8a67 	vmov.f32	s17, s15
 80079aa:	2300      	movs	r3, #0
 80079ac:	f7f9 f894 	bl	8000ad8 <__aeabi_dcmpeq>
 80079b0:	4681      	mov	r9, r0
 80079b2:	b160      	cbz	r0, 80079ce <_dtoa_r+0xee>
 80079b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079b6:	2301      	movs	r3, #1
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8568 	beq.w	8008492 <_dtoa_r+0xbb2>
 80079c2:	4b86      	ldr	r3, [pc, #536]	; (8007bdc <_dtoa_r+0x2fc>)
 80079c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	e7da      	b.n	8007984 <_dtoa_r+0xa4>
 80079ce:	aa10      	add	r2, sp, #64	; 0x40
 80079d0:	a911      	add	r1, sp, #68	; 0x44
 80079d2:	4620      	mov	r0, r4
 80079d4:	eeb0 0a48 	vmov.f32	s0, s16
 80079d8:	eef0 0a68 	vmov.f32	s1, s17
 80079dc:	f001 fa4e 	bl	8008e7c <__d2b>
 80079e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80079e4:	4682      	mov	sl, r0
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	d07f      	beq.n	8007aea <_dtoa_r+0x20a>
 80079ea:	ee18 3a90 	vmov	r3, s17
 80079ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80079f6:	ec51 0b18 	vmov	r0, r1, d8
 80079fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80079fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007a06:	4619      	mov	r1, r3
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4b75      	ldr	r3, [pc, #468]	; (8007be0 <_dtoa_r+0x300>)
 8007a0c:	f7f8 fc44 	bl	8000298 <__aeabi_dsub>
 8007a10:	a367      	add	r3, pc, #412	; (adr r3, 8007bb0 <_dtoa_r+0x2d0>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fdf7 	bl	8000608 <__aeabi_dmul>
 8007a1a:	a367      	add	r3, pc, #412	; (adr r3, 8007bb8 <_dtoa_r+0x2d8>)
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f7f8 fc3c 	bl	800029c <__adddf3>
 8007a24:	4606      	mov	r6, r0
 8007a26:	4628      	mov	r0, r5
 8007a28:	460f      	mov	r7, r1
 8007a2a:	f7f8 fd83 	bl	8000534 <__aeabi_i2d>
 8007a2e:	a364      	add	r3, pc, #400	; (adr r3, 8007bc0 <_dtoa_r+0x2e0>)
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	f7f8 fde8 	bl	8000608 <__aeabi_dmul>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	4639      	mov	r1, r7
 8007a40:	f7f8 fc2c 	bl	800029c <__adddf3>
 8007a44:	4606      	mov	r6, r0
 8007a46:	460f      	mov	r7, r1
 8007a48:	f7f9 f88e 	bl	8000b68 <__aeabi_d2iz>
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4683      	mov	fp, r0
 8007a50:	2300      	movs	r3, #0
 8007a52:	4630      	mov	r0, r6
 8007a54:	4639      	mov	r1, r7
 8007a56:	f7f9 f849 	bl	8000aec <__aeabi_dcmplt>
 8007a5a:	b148      	cbz	r0, 8007a70 <_dtoa_r+0x190>
 8007a5c:	4658      	mov	r0, fp
 8007a5e:	f7f8 fd69 	bl	8000534 <__aeabi_i2d>
 8007a62:	4632      	mov	r2, r6
 8007a64:	463b      	mov	r3, r7
 8007a66:	f7f9 f837 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a6a:	b908      	cbnz	r0, 8007a70 <_dtoa_r+0x190>
 8007a6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a70:	f1bb 0f16 	cmp.w	fp, #22
 8007a74:	d857      	bhi.n	8007b26 <_dtoa_r+0x246>
 8007a76:	4b5b      	ldr	r3, [pc, #364]	; (8007be4 <_dtoa_r+0x304>)
 8007a78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	ec51 0b18 	vmov	r0, r1, d8
 8007a84:	f7f9 f832 	bl	8000aec <__aeabi_dcmplt>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d04e      	beq.n	8007b2a <_dtoa_r+0x24a>
 8007a8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007a90:	2300      	movs	r3, #0
 8007a92:	930c      	str	r3, [sp, #48]	; 0x30
 8007a94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a96:	1b5b      	subs	r3, r3, r5
 8007a98:	1e5a      	subs	r2, r3, #1
 8007a9a:	bf45      	ittet	mi
 8007a9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007aa0:	9305      	strmi	r3, [sp, #20]
 8007aa2:	2300      	movpl	r3, #0
 8007aa4:	2300      	movmi	r3, #0
 8007aa6:	9206      	str	r2, [sp, #24]
 8007aa8:	bf54      	ite	pl
 8007aaa:	9305      	strpl	r3, [sp, #20]
 8007aac:	9306      	strmi	r3, [sp, #24]
 8007aae:	f1bb 0f00 	cmp.w	fp, #0
 8007ab2:	db3c      	blt.n	8007b2e <_dtoa_r+0x24e>
 8007ab4:	9b06      	ldr	r3, [sp, #24]
 8007ab6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007aba:	445b      	add	r3, fp
 8007abc:	9306      	str	r3, [sp, #24]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9308      	str	r3, [sp, #32]
 8007ac2:	9b07      	ldr	r3, [sp, #28]
 8007ac4:	2b09      	cmp	r3, #9
 8007ac6:	d868      	bhi.n	8007b9a <_dtoa_r+0x2ba>
 8007ac8:	2b05      	cmp	r3, #5
 8007aca:	bfc4      	itt	gt
 8007acc:	3b04      	subgt	r3, #4
 8007ace:	9307      	strgt	r3, [sp, #28]
 8007ad0:	9b07      	ldr	r3, [sp, #28]
 8007ad2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ad6:	bfcc      	ite	gt
 8007ad8:	2500      	movgt	r5, #0
 8007ada:	2501      	movle	r5, #1
 8007adc:	2b03      	cmp	r3, #3
 8007ade:	f200 8085 	bhi.w	8007bec <_dtoa_r+0x30c>
 8007ae2:	e8df f003 	tbb	[pc, r3]
 8007ae6:	3b2e      	.short	0x3b2e
 8007ae8:	5839      	.short	0x5839
 8007aea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007aee:	441d      	add	r5, r3
 8007af0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007af4:	2b20      	cmp	r3, #32
 8007af6:	bfc1      	itttt	gt
 8007af8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007afc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007b00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007b04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007b08:	bfd6      	itet	le
 8007b0a:	f1c3 0320 	rsble	r3, r3, #32
 8007b0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007b12:	fa06 f003 	lslle.w	r0, r6, r3
 8007b16:	f7f8 fcfd 	bl	8000514 <__aeabi_ui2d>
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007b20:	3d01      	subs	r5, #1
 8007b22:	920e      	str	r2, [sp, #56]	; 0x38
 8007b24:	e76f      	b.n	8007a06 <_dtoa_r+0x126>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e7b3      	b.n	8007a92 <_dtoa_r+0x1b2>
 8007b2a:	900c      	str	r0, [sp, #48]	; 0x30
 8007b2c:	e7b2      	b.n	8007a94 <_dtoa_r+0x1b4>
 8007b2e:	9b05      	ldr	r3, [sp, #20]
 8007b30:	eba3 030b 	sub.w	r3, r3, fp
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	f1cb 0300 	rsb	r3, fp, #0
 8007b3a:	9308      	str	r3, [sp, #32]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b40:	e7bf      	b.n	8007ac2 <_dtoa_r+0x1e2>
 8007b42:	2300      	movs	r3, #0
 8007b44:	9309      	str	r3, [sp, #36]	; 0x24
 8007b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	dc52      	bgt.n	8007bf2 <_dtoa_r+0x312>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	9304      	str	r3, [sp, #16]
 8007b52:	461a      	mov	r2, r3
 8007b54:	920a      	str	r2, [sp, #40]	; 0x28
 8007b56:	e00b      	b.n	8007b70 <_dtoa_r+0x290>
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e7f3      	b.n	8007b44 <_dtoa_r+0x264>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b62:	445b      	add	r3, fp
 8007b64:	9301      	str	r3, [sp, #4]
 8007b66:	3301      	adds	r3, #1
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	bfb8      	it	lt
 8007b6e:	2301      	movlt	r3, #1
 8007b70:	69e0      	ldr	r0, [r4, #28]
 8007b72:	2100      	movs	r1, #0
 8007b74:	2204      	movs	r2, #4
 8007b76:	f102 0614 	add.w	r6, r2, #20
 8007b7a:	429e      	cmp	r6, r3
 8007b7c:	d93d      	bls.n	8007bfa <_dtoa_r+0x31a>
 8007b7e:	6041      	str	r1, [r0, #4]
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fd9f 	bl	80086c4 <_Balloc>
 8007b86:	9000      	str	r0, [sp, #0]
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	d139      	bne.n	8007c00 <_dtoa_r+0x320>
 8007b8c:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <_dtoa_r+0x308>)
 8007b8e:	4602      	mov	r2, r0
 8007b90:	f240 11af 	movw	r1, #431	; 0x1af
 8007b94:	e6bd      	b.n	8007912 <_dtoa_r+0x32>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e7e1      	b.n	8007b5e <_dtoa_r+0x27e>
 8007b9a:	2501      	movs	r5, #1
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	9307      	str	r3, [sp, #28]
 8007ba0:	9509      	str	r5, [sp, #36]	; 0x24
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	2200      	movs	r2, #0
 8007bac:	2312      	movs	r3, #18
 8007bae:	e7d1      	b.n	8007b54 <_dtoa_r+0x274>
 8007bb0:	636f4361 	.word	0x636f4361
 8007bb4:	3fd287a7 	.word	0x3fd287a7
 8007bb8:	8b60c8b3 	.word	0x8b60c8b3
 8007bbc:	3fc68a28 	.word	0x3fc68a28
 8007bc0:	509f79fb 	.word	0x509f79fb
 8007bc4:	3fd34413 	.word	0x3fd34413
 8007bc8:	0800b6a7 	.word	0x0800b6a7
 8007bcc:	0800b6be 	.word	0x0800b6be
 8007bd0:	7ff00000 	.word	0x7ff00000
 8007bd4:	0800b6a3 	.word	0x0800b6a3
 8007bd8:	0800b69a 	.word	0x0800b69a
 8007bdc:	0800b672 	.word	0x0800b672
 8007be0:	3ff80000 	.word	0x3ff80000
 8007be4:	0800b7a8 	.word	0x0800b7a8
 8007be8:	0800b716 	.word	0x0800b716
 8007bec:	2301      	movs	r3, #1
 8007bee:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf0:	e7d7      	b.n	8007ba2 <_dtoa_r+0x2c2>
 8007bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	e7ba      	b.n	8007b70 <_dtoa_r+0x290>
 8007bfa:	3101      	adds	r1, #1
 8007bfc:	0052      	lsls	r2, r2, #1
 8007bfe:	e7ba      	b.n	8007b76 <_dtoa_r+0x296>
 8007c00:	69e3      	ldr	r3, [r4, #28]
 8007c02:	9a00      	ldr	r2, [sp, #0]
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	9b04      	ldr	r3, [sp, #16]
 8007c08:	2b0e      	cmp	r3, #14
 8007c0a:	f200 80a8 	bhi.w	8007d5e <_dtoa_r+0x47e>
 8007c0e:	2d00      	cmp	r5, #0
 8007c10:	f000 80a5 	beq.w	8007d5e <_dtoa_r+0x47e>
 8007c14:	f1bb 0f00 	cmp.w	fp, #0
 8007c18:	dd38      	ble.n	8007c8c <_dtoa_r+0x3ac>
 8007c1a:	4bc0      	ldr	r3, [pc, #768]	; (8007f1c <_dtoa_r+0x63c>)
 8007c1c:	f00b 020f 	and.w	r2, fp, #15
 8007c20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007c28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007c2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007c30:	d019      	beq.n	8007c66 <_dtoa_r+0x386>
 8007c32:	4bbb      	ldr	r3, [pc, #748]	; (8007f20 <_dtoa_r+0x640>)
 8007c34:	ec51 0b18 	vmov	r0, r1, d8
 8007c38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c3c:	f7f8 fe0e 	bl	800085c <__aeabi_ddiv>
 8007c40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c44:	f008 080f 	and.w	r8, r8, #15
 8007c48:	2503      	movs	r5, #3
 8007c4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007f20 <_dtoa_r+0x640>
 8007c4e:	f1b8 0f00 	cmp.w	r8, #0
 8007c52:	d10a      	bne.n	8007c6a <_dtoa_r+0x38a>
 8007c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c58:	4632      	mov	r2, r6
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	f7f8 fdfe 	bl	800085c <__aeabi_ddiv>
 8007c60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c64:	e02b      	b.n	8007cbe <_dtoa_r+0x3de>
 8007c66:	2502      	movs	r5, #2
 8007c68:	e7ef      	b.n	8007c4a <_dtoa_r+0x36a>
 8007c6a:	f018 0f01 	tst.w	r8, #1
 8007c6e:	d008      	beq.n	8007c82 <_dtoa_r+0x3a2>
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007c78:	f7f8 fcc6 	bl	8000608 <__aeabi_dmul>
 8007c7c:	3501      	adds	r5, #1
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460f      	mov	r7, r1
 8007c82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007c86:	f109 0908 	add.w	r9, r9, #8
 8007c8a:	e7e0      	b.n	8007c4e <_dtoa_r+0x36e>
 8007c8c:	f000 809f 	beq.w	8007dce <_dtoa_r+0x4ee>
 8007c90:	f1cb 0600 	rsb	r6, fp, #0
 8007c94:	4ba1      	ldr	r3, [pc, #644]	; (8007f1c <_dtoa_r+0x63c>)
 8007c96:	4fa2      	ldr	r7, [pc, #648]	; (8007f20 <_dtoa_r+0x640>)
 8007c98:	f006 020f 	and.w	r2, r6, #15
 8007c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca4:	ec51 0b18 	vmov	r0, r1, d8
 8007ca8:	f7f8 fcae 	bl	8000608 <__aeabi_dmul>
 8007cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cb0:	1136      	asrs	r6, r6, #4
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2502      	movs	r5, #2
 8007cb6:	2e00      	cmp	r6, #0
 8007cb8:	d17e      	bne.n	8007db8 <_dtoa_r+0x4d8>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1d0      	bne.n	8007c60 <_dtoa_r+0x380>
 8007cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 8084 	beq.w	8007dd2 <_dtoa_r+0x4f2>
 8007cca:	4b96      	ldr	r3, [pc, #600]	; (8007f24 <_dtoa_r+0x644>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	4640      	mov	r0, r8
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	f7f8 ff0b 	bl	8000aec <__aeabi_dcmplt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d07b      	beq.n	8007dd2 <_dtoa_r+0x4f2>
 8007cda:	9b04      	ldr	r3, [sp, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d078      	beq.n	8007dd2 <_dtoa_r+0x4f2>
 8007ce0:	9b01      	ldr	r3, [sp, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dd39      	ble.n	8007d5a <_dtoa_r+0x47a>
 8007ce6:	4b90      	ldr	r3, [pc, #576]	; (8007f28 <_dtoa_r+0x648>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f7f8 fc8b 	bl	8000608 <__aeabi_dmul>
 8007cf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf6:	9e01      	ldr	r6, [sp, #4]
 8007cf8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007d02:	4628      	mov	r0, r5
 8007d04:	f7f8 fc16 	bl	8000534 <__aeabi_i2d>
 8007d08:	4642      	mov	r2, r8
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	f7f8 fc7c 	bl	8000608 <__aeabi_dmul>
 8007d10:	4b86      	ldr	r3, [pc, #536]	; (8007f2c <_dtoa_r+0x64c>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	f7f8 fac2 	bl	800029c <__adddf3>
 8007d18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d20:	9303      	str	r3, [sp, #12]
 8007d22:	2e00      	cmp	r6, #0
 8007d24:	d158      	bne.n	8007dd8 <_dtoa_r+0x4f8>
 8007d26:	4b82      	ldr	r3, [pc, #520]	; (8007f30 <_dtoa_r+0x650>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	f7f8 fab3 	bl	8000298 <__aeabi_dsub>
 8007d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d36:	4680      	mov	r8, r0
 8007d38:	4689      	mov	r9, r1
 8007d3a:	f7f8 fef5 	bl	8000b28 <__aeabi_dcmpgt>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f040 8296 	bne.w	8008270 <_dtoa_r+0x990>
 8007d44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007d48:	4640      	mov	r0, r8
 8007d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d4e:	4649      	mov	r1, r9
 8007d50:	f7f8 fecc 	bl	8000aec <__aeabi_dcmplt>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	f040 8289 	bne.w	800826c <_dtoa_r+0x98c>
 8007d5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007d5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f2c0 814e 	blt.w	8008002 <_dtoa_r+0x722>
 8007d66:	f1bb 0f0e 	cmp.w	fp, #14
 8007d6a:	f300 814a 	bgt.w	8008002 <_dtoa_r+0x722>
 8007d6e:	4b6b      	ldr	r3, [pc, #428]	; (8007f1c <_dtoa_r+0x63c>)
 8007d70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007d74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f280 80dc 	bge.w	8007f38 <_dtoa_r+0x658>
 8007d80:	9b04      	ldr	r3, [sp, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f300 80d8 	bgt.w	8007f38 <_dtoa_r+0x658>
 8007d88:	f040 826f 	bne.w	800826a <_dtoa_r+0x98a>
 8007d8c:	4b68      	ldr	r3, [pc, #416]	; (8007f30 <_dtoa_r+0x650>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	4640      	mov	r0, r8
 8007d92:	4649      	mov	r1, r9
 8007d94:	f7f8 fc38 	bl	8000608 <__aeabi_dmul>
 8007d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d9c:	f7f8 feba 	bl	8000b14 <__aeabi_dcmpge>
 8007da0:	9e04      	ldr	r6, [sp, #16]
 8007da2:	4637      	mov	r7, r6
 8007da4:	2800      	cmp	r0, #0
 8007da6:	f040 8245 	bne.w	8008234 <_dtoa_r+0x954>
 8007daa:	9d00      	ldr	r5, [sp, #0]
 8007dac:	2331      	movs	r3, #49	; 0x31
 8007dae:	f805 3b01 	strb.w	r3, [r5], #1
 8007db2:	f10b 0b01 	add.w	fp, fp, #1
 8007db6:	e241      	b.n	800823c <_dtoa_r+0x95c>
 8007db8:	07f2      	lsls	r2, r6, #31
 8007dba:	d505      	bpl.n	8007dc8 <_dtoa_r+0x4e8>
 8007dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc0:	f7f8 fc22 	bl	8000608 <__aeabi_dmul>
 8007dc4:	3501      	adds	r5, #1
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	1076      	asrs	r6, r6, #1
 8007dca:	3708      	adds	r7, #8
 8007dcc:	e773      	b.n	8007cb6 <_dtoa_r+0x3d6>
 8007dce:	2502      	movs	r5, #2
 8007dd0:	e775      	b.n	8007cbe <_dtoa_r+0x3de>
 8007dd2:	9e04      	ldr	r6, [sp, #16]
 8007dd4:	465f      	mov	r7, fp
 8007dd6:	e792      	b.n	8007cfe <_dtoa_r+0x41e>
 8007dd8:	9900      	ldr	r1, [sp, #0]
 8007dda:	4b50      	ldr	r3, [pc, #320]	; (8007f1c <_dtoa_r+0x63c>)
 8007ddc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007de0:	4431      	add	r1, r6
 8007de2:	9102      	str	r1, [sp, #8]
 8007de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007de6:	eeb0 9a47 	vmov.f32	s18, s14
 8007dea:	eef0 9a67 	vmov.f32	s19, s15
 8007dee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007df2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007df6:	2900      	cmp	r1, #0
 8007df8:	d044      	beq.n	8007e84 <_dtoa_r+0x5a4>
 8007dfa:	494e      	ldr	r1, [pc, #312]	; (8007f34 <_dtoa_r+0x654>)
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	f7f8 fd2d 	bl	800085c <__aeabi_ddiv>
 8007e02:	ec53 2b19 	vmov	r2, r3, d9
 8007e06:	f7f8 fa47 	bl	8000298 <__aeabi_dsub>
 8007e0a:	9d00      	ldr	r5, [sp, #0]
 8007e0c:	ec41 0b19 	vmov	d9, r0, r1
 8007e10:	4649      	mov	r1, r9
 8007e12:	4640      	mov	r0, r8
 8007e14:	f7f8 fea8 	bl	8000b68 <__aeabi_d2iz>
 8007e18:	4606      	mov	r6, r0
 8007e1a:	f7f8 fb8b 	bl	8000534 <__aeabi_i2d>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	f7f8 fa37 	bl	8000298 <__aeabi_dsub>
 8007e2a:	3630      	adds	r6, #48	; 0x30
 8007e2c:	f805 6b01 	strb.w	r6, [r5], #1
 8007e30:	ec53 2b19 	vmov	r2, r3, d9
 8007e34:	4680      	mov	r8, r0
 8007e36:	4689      	mov	r9, r1
 8007e38:	f7f8 fe58 	bl	8000aec <__aeabi_dcmplt>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d164      	bne.n	8007f0a <_dtoa_r+0x62a>
 8007e40:	4642      	mov	r2, r8
 8007e42:	464b      	mov	r3, r9
 8007e44:	4937      	ldr	r1, [pc, #220]	; (8007f24 <_dtoa_r+0x644>)
 8007e46:	2000      	movs	r0, #0
 8007e48:	f7f8 fa26 	bl	8000298 <__aeabi_dsub>
 8007e4c:	ec53 2b19 	vmov	r2, r3, d9
 8007e50:	f7f8 fe4c 	bl	8000aec <__aeabi_dcmplt>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f040 80b6 	bne.w	8007fc6 <_dtoa_r+0x6e6>
 8007e5a:	9b02      	ldr	r3, [sp, #8]
 8007e5c:	429d      	cmp	r5, r3
 8007e5e:	f43f af7c 	beq.w	8007d5a <_dtoa_r+0x47a>
 8007e62:	4b31      	ldr	r3, [pc, #196]	; (8007f28 <_dtoa_r+0x648>)
 8007e64:	ec51 0b19 	vmov	r0, r1, d9
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f7f8 fbcd 	bl	8000608 <__aeabi_dmul>
 8007e6e:	4b2e      	ldr	r3, [pc, #184]	; (8007f28 <_dtoa_r+0x648>)
 8007e70:	ec41 0b19 	vmov	d9, r0, r1
 8007e74:	2200      	movs	r2, #0
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f7f8 fbc5 	bl	8000608 <__aeabi_dmul>
 8007e7e:	4680      	mov	r8, r0
 8007e80:	4689      	mov	r9, r1
 8007e82:	e7c5      	b.n	8007e10 <_dtoa_r+0x530>
 8007e84:	ec51 0b17 	vmov	r0, r1, d7
 8007e88:	f7f8 fbbe 	bl	8000608 <__aeabi_dmul>
 8007e8c:	9b02      	ldr	r3, [sp, #8]
 8007e8e:	9d00      	ldr	r5, [sp, #0]
 8007e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e92:	ec41 0b19 	vmov	d9, r0, r1
 8007e96:	4649      	mov	r1, r9
 8007e98:	4640      	mov	r0, r8
 8007e9a:	f7f8 fe65 	bl	8000b68 <__aeabi_d2iz>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	f7f8 fb48 	bl	8000534 <__aeabi_i2d>
 8007ea4:	3630      	adds	r6, #48	; 0x30
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4640      	mov	r0, r8
 8007eac:	4649      	mov	r1, r9
 8007eae:	f7f8 f9f3 	bl	8000298 <__aeabi_dsub>
 8007eb2:	f805 6b01 	strb.w	r6, [r5], #1
 8007eb6:	9b02      	ldr	r3, [sp, #8]
 8007eb8:	429d      	cmp	r5, r3
 8007eba:	4680      	mov	r8, r0
 8007ebc:	4689      	mov	r9, r1
 8007ebe:	f04f 0200 	mov.w	r2, #0
 8007ec2:	d124      	bne.n	8007f0e <_dtoa_r+0x62e>
 8007ec4:	4b1b      	ldr	r3, [pc, #108]	; (8007f34 <_dtoa_r+0x654>)
 8007ec6:	ec51 0b19 	vmov	r0, r1, d9
 8007eca:	f7f8 f9e7 	bl	800029c <__adddf3>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	4649      	mov	r1, r9
 8007ed6:	f7f8 fe27 	bl	8000b28 <__aeabi_dcmpgt>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d173      	bne.n	8007fc6 <_dtoa_r+0x6e6>
 8007ede:	ec53 2b19 	vmov	r2, r3, d9
 8007ee2:	4914      	ldr	r1, [pc, #80]	; (8007f34 <_dtoa_r+0x654>)
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f7f8 f9d7 	bl	8000298 <__aeabi_dsub>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4640      	mov	r0, r8
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	f7f8 fdfb 	bl	8000aec <__aeabi_dcmplt>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f43f af2f 	beq.w	8007d5a <_dtoa_r+0x47a>
 8007efc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007efe:	1e6b      	subs	r3, r5, #1
 8007f00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f06:	2b30      	cmp	r3, #48	; 0x30
 8007f08:	d0f8      	beq.n	8007efc <_dtoa_r+0x61c>
 8007f0a:	46bb      	mov	fp, r7
 8007f0c:	e04a      	b.n	8007fa4 <_dtoa_r+0x6c4>
 8007f0e:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <_dtoa_r+0x648>)
 8007f10:	f7f8 fb7a 	bl	8000608 <__aeabi_dmul>
 8007f14:	4680      	mov	r8, r0
 8007f16:	4689      	mov	r9, r1
 8007f18:	e7bd      	b.n	8007e96 <_dtoa_r+0x5b6>
 8007f1a:	bf00      	nop
 8007f1c:	0800b7a8 	.word	0x0800b7a8
 8007f20:	0800b780 	.word	0x0800b780
 8007f24:	3ff00000 	.word	0x3ff00000
 8007f28:	40240000 	.word	0x40240000
 8007f2c:	401c0000 	.word	0x401c0000
 8007f30:	40140000 	.word	0x40140000
 8007f34:	3fe00000 	.word	0x3fe00000
 8007f38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f3c:	9d00      	ldr	r5, [sp, #0]
 8007f3e:	4642      	mov	r2, r8
 8007f40:	464b      	mov	r3, r9
 8007f42:	4630      	mov	r0, r6
 8007f44:	4639      	mov	r1, r7
 8007f46:	f7f8 fc89 	bl	800085c <__aeabi_ddiv>
 8007f4a:	f7f8 fe0d 	bl	8000b68 <__aeabi_d2iz>
 8007f4e:	9001      	str	r0, [sp, #4]
 8007f50:	f7f8 faf0 	bl	8000534 <__aeabi_i2d>
 8007f54:	4642      	mov	r2, r8
 8007f56:	464b      	mov	r3, r9
 8007f58:	f7f8 fb56 	bl	8000608 <__aeabi_dmul>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 f998 	bl	8000298 <__aeabi_dsub>
 8007f68:	9e01      	ldr	r6, [sp, #4]
 8007f6a:	9f04      	ldr	r7, [sp, #16]
 8007f6c:	3630      	adds	r6, #48	; 0x30
 8007f6e:	f805 6b01 	strb.w	r6, [r5], #1
 8007f72:	9e00      	ldr	r6, [sp, #0]
 8007f74:	1bae      	subs	r6, r5, r6
 8007f76:	42b7      	cmp	r7, r6
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	d134      	bne.n	8007fe8 <_dtoa_r+0x708>
 8007f7e:	f7f8 f98d 	bl	800029c <__adddf3>
 8007f82:	4642      	mov	r2, r8
 8007f84:	464b      	mov	r3, r9
 8007f86:	4606      	mov	r6, r0
 8007f88:	460f      	mov	r7, r1
 8007f8a:	f7f8 fdcd 	bl	8000b28 <__aeabi_dcmpgt>
 8007f8e:	b9c8      	cbnz	r0, 8007fc4 <_dtoa_r+0x6e4>
 8007f90:	4642      	mov	r2, r8
 8007f92:	464b      	mov	r3, r9
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f9c:	b110      	cbz	r0, 8007fa4 <_dtoa_r+0x6c4>
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	07db      	lsls	r3, r3, #31
 8007fa2:	d40f      	bmi.n	8007fc4 <_dtoa_r+0x6e4>
 8007fa4:	4651      	mov	r1, sl
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 fbcc 	bl	8008744 <_Bfree>
 8007fac:	2300      	movs	r3, #0
 8007fae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fb0:	702b      	strb	r3, [r5, #0]
 8007fb2:	f10b 0301 	add.w	r3, fp, #1
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f43f ace2 	beq.w	8007984 <_dtoa_r+0xa4>
 8007fc0:	601d      	str	r5, [r3, #0]
 8007fc2:	e4df      	b.n	8007984 <_dtoa_r+0xa4>
 8007fc4:	465f      	mov	r7, fp
 8007fc6:	462b      	mov	r3, r5
 8007fc8:	461d      	mov	r5, r3
 8007fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fce:	2a39      	cmp	r2, #57	; 0x39
 8007fd0:	d106      	bne.n	8007fe0 <_dtoa_r+0x700>
 8007fd2:	9a00      	ldr	r2, [sp, #0]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d1f7      	bne.n	8007fc8 <_dtoa_r+0x6e8>
 8007fd8:	9900      	ldr	r1, [sp, #0]
 8007fda:	2230      	movs	r2, #48	; 0x30
 8007fdc:	3701      	adds	r7, #1
 8007fde:	700a      	strb	r2, [r1, #0]
 8007fe0:	781a      	ldrb	r2, [r3, #0]
 8007fe2:	3201      	adds	r2, #1
 8007fe4:	701a      	strb	r2, [r3, #0]
 8007fe6:	e790      	b.n	8007f0a <_dtoa_r+0x62a>
 8007fe8:	4ba3      	ldr	r3, [pc, #652]	; (8008278 <_dtoa_r+0x998>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	f7f8 fb0c 	bl	8000608 <__aeabi_dmul>
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	460f      	mov	r7, r1
 8007ff8:	f7f8 fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d09e      	beq.n	8007f3e <_dtoa_r+0x65e>
 8008000:	e7d0      	b.n	8007fa4 <_dtoa_r+0x6c4>
 8008002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008004:	2a00      	cmp	r2, #0
 8008006:	f000 80ca 	beq.w	800819e <_dtoa_r+0x8be>
 800800a:	9a07      	ldr	r2, [sp, #28]
 800800c:	2a01      	cmp	r2, #1
 800800e:	f300 80ad 	bgt.w	800816c <_dtoa_r+0x88c>
 8008012:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008014:	2a00      	cmp	r2, #0
 8008016:	f000 80a5 	beq.w	8008164 <_dtoa_r+0x884>
 800801a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800801e:	9e08      	ldr	r6, [sp, #32]
 8008020:	9d05      	ldr	r5, [sp, #20]
 8008022:	9a05      	ldr	r2, [sp, #20]
 8008024:	441a      	add	r2, r3
 8008026:	9205      	str	r2, [sp, #20]
 8008028:	9a06      	ldr	r2, [sp, #24]
 800802a:	2101      	movs	r1, #1
 800802c:	441a      	add	r2, r3
 800802e:	4620      	mov	r0, r4
 8008030:	9206      	str	r2, [sp, #24]
 8008032:	f000 fc87 	bl	8008944 <__i2b>
 8008036:	4607      	mov	r7, r0
 8008038:	b165      	cbz	r5, 8008054 <_dtoa_r+0x774>
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	2b00      	cmp	r3, #0
 800803e:	dd09      	ble.n	8008054 <_dtoa_r+0x774>
 8008040:	42ab      	cmp	r3, r5
 8008042:	9a05      	ldr	r2, [sp, #20]
 8008044:	bfa8      	it	ge
 8008046:	462b      	movge	r3, r5
 8008048:	1ad2      	subs	r2, r2, r3
 800804a:	9205      	str	r2, [sp, #20]
 800804c:	9a06      	ldr	r2, [sp, #24]
 800804e:	1aed      	subs	r5, r5, r3
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	9306      	str	r3, [sp, #24]
 8008054:	9b08      	ldr	r3, [sp, #32]
 8008056:	b1f3      	cbz	r3, 8008096 <_dtoa_r+0x7b6>
 8008058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 80a3 	beq.w	80081a6 <_dtoa_r+0x8c6>
 8008060:	2e00      	cmp	r6, #0
 8008062:	dd10      	ble.n	8008086 <_dtoa_r+0x7a6>
 8008064:	4639      	mov	r1, r7
 8008066:	4632      	mov	r2, r6
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fd2b 	bl	8008ac4 <__pow5mult>
 800806e:	4652      	mov	r2, sl
 8008070:	4601      	mov	r1, r0
 8008072:	4607      	mov	r7, r0
 8008074:	4620      	mov	r0, r4
 8008076:	f000 fc7b 	bl	8008970 <__multiply>
 800807a:	4651      	mov	r1, sl
 800807c:	4680      	mov	r8, r0
 800807e:	4620      	mov	r0, r4
 8008080:	f000 fb60 	bl	8008744 <_Bfree>
 8008084:	46c2      	mov	sl, r8
 8008086:	9b08      	ldr	r3, [sp, #32]
 8008088:	1b9a      	subs	r2, r3, r6
 800808a:	d004      	beq.n	8008096 <_dtoa_r+0x7b6>
 800808c:	4651      	mov	r1, sl
 800808e:	4620      	mov	r0, r4
 8008090:	f000 fd18 	bl	8008ac4 <__pow5mult>
 8008094:	4682      	mov	sl, r0
 8008096:	2101      	movs	r1, #1
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fc53 	bl	8008944 <__i2b>
 800809e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	4606      	mov	r6, r0
 80080a4:	f340 8081 	ble.w	80081aa <_dtoa_r+0x8ca>
 80080a8:	461a      	mov	r2, r3
 80080aa:	4601      	mov	r1, r0
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 fd09 	bl	8008ac4 <__pow5mult>
 80080b2:	9b07      	ldr	r3, [sp, #28]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	4606      	mov	r6, r0
 80080b8:	dd7a      	ble.n	80081b0 <_dtoa_r+0x8d0>
 80080ba:	f04f 0800 	mov.w	r8, #0
 80080be:	6933      	ldr	r3, [r6, #16]
 80080c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080c4:	6918      	ldr	r0, [r3, #16]
 80080c6:	f000 fbef 	bl	80088a8 <__hi0bits>
 80080ca:	f1c0 0020 	rsb	r0, r0, #32
 80080ce:	9b06      	ldr	r3, [sp, #24]
 80080d0:	4418      	add	r0, r3
 80080d2:	f010 001f 	ands.w	r0, r0, #31
 80080d6:	f000 8094 	beq.w	8008202 <_dtoa_r+0x922>
 80080da:	f1c0 0320 	rsb	r3, r0, #32
 80080de:	2b04      	cmp	r3, #4
 80080e0:	f340 8085 	ble.w	80081ee <_dtoa_r+0x90e>
 80080e4:	9b05      	ldr	r3, [sp, #20]
 80080e6:	f1c0 001c 	rsb	r0, r0, #28
 80080ea:	4403      	add	r3, r0
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	9b06      	ldr	r3, [sp, #24]
 80080f0:	4403      	add	r3, r0
 80080f2:	4405      	add	r5, r0
 80080f4:	9306      	str	r3, [sp, #24]
 80080f6:	9b05      	ldr	r3, [sp, #20]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dd05      	ble.n	8008108 <_dtoa_r+0x828>
 80080fc:	4651      	mov	r1, sl
 80080fe:	461a      	mov	r2, r3
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fd39 	bl	8008b78 <__lshift>
 8008106:	4682      	mov	sl, r0
 8008108:	9b06      	ldr	r3, [sp, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	dd05      	ble.n	800811a <_dtoa_r+0x83a>
 800810e:	4631      	mov	r1, r6
 8008110:	461a      	mov	r2, r3
 8008112:	4620      	mov	r0, r4
 8008114:	f000 fd30 	bl	8008b78 <__lshift>
 8008118:	4606      	mov	r6, r0
 800811a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800811c:	2b00      	cmp	r3, #0
 800811e:	d072      	beq.n	8008206 <_dtoa_r+0x926>
 8008120:	4631      	mov	r1, r6
 8008122:	4650      	mov	r0, sl
 8008124:	f000 fd94 	bl	8008c50 <__mcmp>
 8008128:	2800      	cmp	r0, #0
 800812a:	da6c      	bge.n	8008206 <_dtoa_r+0x926>
 800812c:	2300      	movs	r3, #0
 800812e:	4651      	mov	r1, sl
 8008130:	220a      	movs	r2, #10
 8008132:	4620      	mov	r0, r4
 8008134:	f000 fb28 	bl	8008788 <__multadd>
 8008138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800813a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800813e:	4682      	mov	sl, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 81b0 	beq.w	80084a6 <_dtoa_r+0xbc6>
 8008146:	2300      	movs	r3, #0
 8008148:	4639      	mov	r1, r7
 800814a:	220a      	movs	r2, #10
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fb1b 	bl	8008788 <__multadd>
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	4607      	mov	r7, r0
 8008158:	f300 8096 	bgt.w	8008288 <_dtoa_r+0x9a8>
 800815c:	9b07      	ldr	r3, [sp, #28]
 800815e:	2b02      	cmp	r3, #2
 8008160:	dc59      	bgt.n	8008216 <_dtoa_r+0x936>
 8008162:	e091      	b.n	8008288 <_dtoa_r+0x9a8>
 8008164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008166:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800816a:	e758      	b.n	800801e <_dtoa_r+0x73e>
 800816c:	9b04      	ldr	r3, [sp, #16]
 800816e:	1e5e      	subs	r6, r3, #1
 8008170:	9b08      	ldr	r3, [sp, #32]
 8008172:	42b3      	cmp	r3, r6
 8008174:	bfbf      	itttt	lt
 8008176:	9b08      	ldrlt	r3, [sp, #32]
 8008178:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800817a:	9608      	strlt	r6, [sp, #32]
 800817c:	1af3      	sublt	r3, r6, r3
 800817e:	bfb4      	ite	lt
 8008180:	18d2      	addlt	r2, r2, r3
 8008182:	1b9e      	subge	r6, r3, r6
 8008184:	9b04      	ldr	r3, [sp, #16]
 8008186:	bfbc      	itt	lt
 8008188:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800818a:	2600      	movlt	r6, #0
 800818c:	2b00      	cmp	r3, #0
 800818e:	bfb7      	itett	lt
 8008190:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008194:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008198:	1a9d      	sublt	r5, r3, r2
 800819a:	2300      	movlt	r3, #0
 800819c:	e741      	b.n	8008022 <_dtoa_r+0x742>
 800819e:	9e08      	ldr	r6, [sp, #32]
 80081a0:	9d05      	ldr	r5, [sp, #20]
 80081a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80081a4:	e748      	b.n	8008038 <_dtoa_r+0x758>
 80081a6:	9a08      	ldr	r2, [sp, #32]
 80081a8:	e770      	b.n	800808c <_dtoa_r+0x7ac>
 80081aa:	9b07      	ldr	r3, [sp, #28]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	dc19      	bgt.n	80081e4 <_dtoa_r+0x904>
 80081b0:	9b02      	ldr	r3, [sp, #8]
 80081b2:	b9bb      	cbnz	r3, 80081e4 <_dtoa_r+0x904>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081ba:	b99b      	cbnz	r3, 80081e4 <_dtoa_r+0x904>
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081c2:	0d1b      	lsrs	r3, r3, #20
 80081c4:	051b      	lsls	r3, r3, #20
 80081c6:	b183      	cbz	r3, 80081ea <_dtoa_r+0x90a>
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	3301      	adds	r3, #1
 80081cc:	9305      	str	r3, [sp, #20]
 80081ce:	9b06      	ldr	r3, [sp, #24]
 80081d0:	3301      	adds	r3, #1
 80081d2:	9306      	str	r3, [sp, #24]
 80081d4:	f04f 0801 	mov.w	r8, #1
 80081d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f47f af6f 	bne.w	80080be <_dtoa_r+0x7de>
 80081e0:	2001      	movs	r0, #1
 80081e2:	e774      	b.n	80080ce <_dtoa_r+0x7ee>
 80081e4:	f04f 0800 	mov.w	r8, #0
 80081e8:	e7f6      	b.n	80081d8 <_dtoa_r+0x8f8>
 80081ea:	4698      	mov	r8, r3
 80081ec:	e7f4      	b.n	80081d8 <_dtoa_r+0x8f8>
 80081ee:	d082      	beq.n	80080f6 <_dtoa_r+0x816>
 80081f0:	9a05      	ldr	r2, [sp, #20]
 80081f2:	331c      	adds	r3, #28
 80081f4:	441a      	add	r2, r3
 80081f6:	9205      	str	r2, [sp, #20]
 80081f8:	9a06      	ldr	r2, [sp, #24]
 80081fa:	441a      	add	r2, r3
 80081fc:	441d      	add	r5, r3
 80081fe:	9206      	str	r2, [sp, #24]
 8008200:	e779      	b.n	80080f6 <_dtoa_r+0x816>
 8008202:	4603      	mov	r3, r0
 8008204:	e7f4      	b.n	80081f0 <_dtoa_r+0x910>
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	dc37      	bgt.n	800827c <_dtoa_r+0x99c>
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	2b02      	cmp	r3, #2
 8008210:	dd34      	ble.n	800827c <_dtoa_r+0x99c>
 8008212:	9b04      	ldr	r3, [sp, #16]
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	b963      	cbnz	r3, 8008234 <_dtoa_r+0x954>
 800821a:	4631      	mov	r1, r6
 800821c:	2205      	movs	r2, #5
 800821e:	4620      	mov	r0, r4
 8008220:	f000 fab2 	bl	8008788 <__multadd>
 8008224:	4601      	mov	r1, r0
 8008226:	4606      	mov	r6, r0
 8008228:	4650      	mov	r0, sl
 800822a:	f000 fd11 	bl	8008c50 <__mcmp>
 800822e:	2800      	cmp	r0, #0
 8008230:	f73f adbb 	bgt.w	8007daa <_dtoa_r+0x4ca>
 8008234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008236:	9d00      	ldr	r5, [sp, #0]
 8008238:	ea6f 0b03 	mvn.w	fp, r3
 800823c:	f04f 0800 	mov.w	r8, #0
 8008240:	4631      	mov	r1, r6
 8008242:	4620      	mov	r0, r4
 8008244:	f000 fa7e 	bl	8008744 <_Bfree>
 8008248:	2f00      	cmp	r7, #0
 800824a:	f43f aeab 	beq.w	8007fa4 <_dtoa_r+0x6c4>
 800824e:	f1b8 0f00 	cmp.w	r8, #0
 8008252:	d005      	beq.n	8008260 <_dtoa_r+0x980>
 8008254:	45b8      	cmp	r8, r7
 8008256:	d003      	beq.n	8008260 <_dtoa_r+0x980>
 8008258:	4641      	mov	r1, r8
 800825a:	4620      	mov	r0, r4
 800825c:	f000 fa72 	bl	8008744 <_Bfree>
 8008260:	4639      	mov	r1, r7
 8008262:	4620      	mov	r0, r4
 8008264:	f000 fa6e 	bl	8008744 <_Bfree>
 8008268:	e69c      	b.n	8007fa4 <_dtoa_r+0x6c4>
 800826a:	2600      	movs	r6, #0
 800826c:	4637      	mov	r7, r6
 800826e:	e7e1      	b.n	8008234 <_dtoa_r+0x954>
 8008270:	46bb      	mov	fp, r7
 8008272:	4637      	mov	r7, r6
 8008274:	e599      	b.n	8007daa <_dtoa_r+0x4ca>
 8008276:	bf00      	nop
 8008278:	40240000 	.word	0x40240000
 800827c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 80c8 	beq.w	8008414 <_dtoa_r+0xb34>
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	2d00      	cmp	r5, #0
 800828a:	dd05      	ble.n	8008298 <_dtoa_r+0x9b8>
 800828c:	4639      	mov	r1, r7
 800828e:	462a      	mov	r2, r5
 8008290:	4620      	mov	r0, r4
 8008292:	f000 fc71 	bl	8008b78 <__lshift>
 8008296:	4607      	mov	r7, r0
 8008298:	f1b8 0f00 	cmp.w	r8, #0
 800829c:	d05b      	beq.n	8008356 <_dtoa_r+0xa76>
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 fa0f 	bl	80086c4 <_Balloc>
 80082a6:	4605      	mov	r5, r0
 80082a8:	b928      	cbnz	r0, 80082b6 <_dtoa_r+0x9d6>
 80082aa:	4b83      	ldr	r3, [pc, #524]	; (80084b8 <_dtoa_r+0xbd8>)
 80082ac:	4602      	mov	r2, r0
 80082ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80082b2:	f7ff bb2e 	b.w	8007912 <_dtoa_r+0x32>
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	3202      	adds	r2, #2
 80082ba:	0092      	lsls	r2, r2, #2
 80082bc:	f107 010c 	add.w	r1, r7, #12
 80082c0:	300c      	adds	r0, #12
 80082c2:	f001 ff01 	bl	800a0c8 <memcpy>
 80082c6:	2201      	movs	r2, #1
 80082c8:	4629      	mov	r1, r5
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 fc54 	bl	8008b78 <__lshift>
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	3301      	adds	r3, #1
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082da:	4413      	add	r3, r2
 80082dc:	9308      	str	r3, [sp, #32]
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	46b8      	mov	r8, r7
 80082e6:	9306      	str	r3, [sp, #24]
 80082e8:	4607      	mov	r7, r0
 80082ea:	9b04      	ldr	r3, [sp, #16]
 80082ec:	4631      	mov	r1, r6
 80082ee:	3b01      	subs	r3, #1
 80082f0:	4650      	mov	r0, sl
 80082f2:	9301      	str	r3, [sp, #4]
 80082f4:	f7ff fa6c 	bl	80077d0 <quorem>
 80082f8:	4641      	mov	r1, r8
 80082fa:	9002      	str	r0, [sp, #8]
 80082fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008300:	4650      	mov	r0, sl
 8008302:	f000 fca5 	bl	8008c50 <__mcmp>
 8008306:	463a      	mov	r2, r7
 8008308:	9005      	str	r0, [sp, #20]
 800830a:	4631      	mov	r1, r6
 800830c:	4620      	mov	r0, r4
 800830e:	f000 fcbb 	bl	8008c88 <__mdiff>
 8008312:	68c2      	ldr	r2, [r0, #12]
 8008314:	4605      	mov	r5, r0
 8008316:	bb02      	cbnz	r2, 800835a <_dtoa_r+0xa7a>
 8008318:	4601      	mov	r1, r0
 800831a:	4650      	mov	r0, sl
 800831c:	f000 fc98 	bl	8008c50 <__mcmp>
 8008320:	4602      	mov	r2, r0
 8008322:	4629      	mov	r1, r5
 8008324:	4620      	mov	r0, r4
 8008326:	9209      	str	r2, [sp, #36]	; 0x24
 8008328:	f000 fa0c 	bl	8008744 <_Bfree>
 800832c:	9b07      	ldr	r3, [sp, #28]
 800832e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008330:	9d04      	ldr	r5, [sp, #16]
 8008332:	ea43 0102 	orr.w	r1, r3, r2
 8008336:	9b06      	ldr	r3, [sp, #24]
 8008338:	4319      	orrs	r1, r3
 800833a:	d110      	bne.n	800835e <_dtoa_r+0xa7e>
 800833c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008340:	d029      	beq.n	8008396 <_dtoa_r+0xab6>
 8008342:	9b05      	ldr	r3, [sp, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	dd02      	ble.n	800834e <_dtoa_r+0xa6e>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	f883 9000 	strb.w	r9, [r3]
 8008354:	e774      	b.n	8008240 <_dtoa_r+0x960>
 8008356:	4638      	mov	r0, r7
 8008358:	e7ba      	b.n	80082d0 <_dtoa_r+0x9f0>
 800835a:	2201      	movs	r2, #1
 800835c:	e7e1      	b.n	8008322 <_dtoa_r+0xa42>
 800835e:	9b05      	ldr	r3, [sp, #20]
 8008360:	2b00      	cmp	r3, #0
 8008362:	db04      	blt.n	800836e <_dtoa_r+0xa8e>
 8008364:	9907      	ldr	r1, [sp, #28]
 8008366:	430b      	orrs	r3, r1
 8008368:	9906      	ldr	r1, [sp, #24]
 800836a:	430b      	orrs	r3, r1
 800836c:	d120      	bne.n	80083b0 <_dtoa_r+0xad0>
 800836e:	2a00      	cmp	r2, #0
 8008370:	dded      	ble.n	800834e <_dtoa_r+0xa6e>
 8008372:	4651      	mov	r1, sl
 8008374:	2201      	movs	r2, #1
 8008376:	4620      	mov	r0, r4
 8008378:	f000 fbfe 	bl	8008b78 <__lshift>
 800837c:	4631      	mov	r1, r6
 800837e:	4682      	mov	sl, r0
 8008380:	f000 fc66 	bl	8008c50 <__mcmp>
 8008384:	2800      	cmp	r0, #0
 8008386:	dc03      	bgt.n	8008390 <_dtoa_r+0xab0>
 8008388:	d1e1      	bne.n	800834e <_dtoa_r+0xa6e>
 800838a:	f019 0f01 	tst.w	r9, #1
 800838e:	d0de      	beq.n	800834e <_dtoa_r+0xa6e>
 8008390:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008394:	d1d8      	bne.n	8008348 <_dtoa_r+0xa68>
 8008396:	9a01      	ldr	r2, [sp, #4]
 8008398:	2339      	movs	r3, #57	; 0x39
 800839a:	7013      	strb	r3, [r2, #0]
 800839c:	462b      	mov	r3, r5
 800839e:	461d      	mov	r5, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083a6:	2a39      	cmp	r2, #57	; 0x39
 80083a8:	d06c      	beq.n	8008484 <_dtoa_r+0xba4>
 80083aa:	3201      	adds	r2, #1
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e747      	b.n	8008240 <_dtoa_r+0x960>
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	dd07      	ble.n	80083c4 <_dtoa_r+0xae4>
 80083b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80083b8:	d0ed      	beq.n	8008396 <_dtoa_r+0xab6>
 80083ba:	9a01      	ldr	r2, [sp, #4]
 80083bc:	f109 0301 	add.w	r3, r9, #1
 80083c0:	7013      	strb	r3, [r2, #0]
 80083c2:	e73d      	b.n	8008240 <_dtoa_r+0x960>
 80083c4:	9b04      	ldr	r3, [sp, #16]
 80083c6:	9a08      	ldr	r2, [sp, #32]
 80083c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d043      	beq.n	8008458 <_dtoa_r+0xb78>
 80083d0:	4651      	mov	r1, sl
 80083d2:	2300      	movs	r3, #0
 80083d4:	220a      	movs	r2, #10
 80083d6:	4620      	mov	r0, r4
 80083d8:	f000 f9d6 	bl	8008788 <__multadd>
 80083dc:	45b8      	cmp	r8, r7
 80083de:	4682      	mov	sl, r0
 80083e0:	f04f 0300 	mov.w	r3, #0
 80083e4:	f04f 020a 	mov.w	r2, #10
 80083e8:	4641      	mov	r1, r8
 80083ea:	4620      	mov	r0, r4
 80083ec:	d107      	bne.n	80083fe <_dtoa_r+0xb1e>
 80083ee:	f000 f9cb 	bl	8008788 <__multadd>
 80083f2:	4680      	mov	r8, r0
 80083f4:	4607      	mov	r7, r0
 80083f6:	9b04      	ldr	r3, [sp, #16]
 80083f8:	3301      	adds	r3, #1
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	e775      	b.n	80082ea <_dtoa_r+0xa0a>
 80083fe:	f000 f9c3 	bl	8008788 <__multadd>
 8008402:	4639      	mov	r1, r7
 8008404:	4680      	mov	r8, r0
 8008406:	2300      	movs	r3, #0
 8008408:	220a      	movs	r2, #10
 800840a:	4620      	mov	r0, r4
 800840c:	f000 f9bc 	bl	8008788 <__multadd>
 8008410:	4607      	mov	r7, r0
 8008412:	e7f0      	b.n	80083f6 <_dtoa_r+0xb16>
 8008414:	9b04      	ldr	r3, [sp, #16]
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	9d00      	ldr	r5, [sp, #0]
 800841a:	4631      	mov	r1, r6
 800841c:	4650      	mov	r0, sl
 800841e:	f7ff f9d7 	bl	80077d0 <quorem>
 8008422:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	f805 9b01 	strb.w	r9, [r5], #1
 800842c:	1aea      	subs	r2, r5, r3
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	4293      	cmp	r3, r2
 8008432:	dd07      	ble.n	8008444 <_dtoa_r+0xb64>
 8008434:	4651      	mov	r1, sl
 8008436:	2300      	movs	r3, #0
 8008438:	220a      	movs	r2, #10
 800843a:	4620      	mov	r0, r4
 800843c:	f000 f9a4 	bl	8008788 <__multadd>
 8008440:	4682      	mov	sl, r0
 8008442:	e7ea      	b.n	800841a <_dtoa_r+0xb3a>
 8008444:	9b01      	ldr	r3, [sp, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfc8      	it	gt
 800844a:	461d      	movgt	r5, r3
 800844c:	9b00      	ldr	r3, [sp, #0]
 800844e:	bfd8      	it	le
 8008450:	2501      	movle	r5, #1
 8008452:	441d      	add	r5, r3
 8008454:	f04f 0800 	mov.w	r8, #0
 8008458:	4651      	mov	r1, sl
 800845a:	2201      	movs	r2, #1
 800845c:	4620      	mov	r0, r4
 800845e:	f000 fb8b 	bl	8008b78 <__lshift>
 8008462:	4631      	mov	r1, r6
 8008464:	4682      	mov	sl, r0
 8008466:	f000 fbf3 	bl	8008c50 <__mcmp>
 800846a:	2800      	cmp	r0, #0
 800846c:	dc96      	bgt.n	800839c <_dtoa_r+0xabc>
 800846e:	d102      	bne.n	8008476 <_dtoa_r+0xb96>
 8008470:	f019 0f01 	tst.w	r9, #1
 8008474:	d192      	bne.n	800839c <_dtoa_r+0xabc>
 8008476:	462b      	mov	r3, r5
 8008478:	461d      	mov	r5, r3
 800847a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800847e:	2a30      	cmp	r2, #48	; 0x30
 8008480:	d0fa      	beq.n	8008478 <_dtoa_r+0xb98>
 8008482:	e6dd      	b.n	8008240 <_dtoa_r+0x960>
 8008484:	9a00      	ldr	r2, [sp, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d189      	bne.n	800839e <_dtoa_r+0xabe>
 800848a:	f10b 0b01 	add.w	fp, fp, #1
 800848e:	2331      	movs	r3, #49	; 0x31
 8008490:	e796      	b.n	80083c0 <_dtoa_r+0xae0>
 8008492:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <_dtoa_r+0xbdc>)
 8008494:	f7ff ba99 	b.w	80079ca <_dtoa_r+0xea>
 8008498:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800849a:	2b00      	cmp	r3, #0
 800849c:	f47f aa6d 	bne.w	800797a <_dtoa_r+0x9a>
 80084a0:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <_dtoa_r+0xbe0>)
 80084a2:	f7ff ba92 	b.w	80079ca <_dtoa_r+0xea>
 80084a6:	9b01      	ldr	r3, [sp, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dcb5      	bgt.n	8008418 <_dtoa_r+0xb38>
 80084ac:	9b07      	ldr	r3, [sp, #28]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	f73f aeb1 	bgt.w	8008216 <_dtoa_r+0x936>
 80084b4:	e7b0      	b.n	8008418 <_dtoa_r+0xb38>
 80084b6:	bf00      	nop
 80084b8:	0800b716 	.word	0x0800b716
 80084bc:	0800b671 	.word	0x0800b671
 80084c0:	0800b69a 	.word	0x0800b69a

080084c4 <_free_r>:
 80084c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084c6:	2900      	cmp	r1, #0
 80084c8:	d044      	beq.n	8008554 <_free_r+0x90>
 80084ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ce:	9001      	str	r0, [sp, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f1a1 0404 	sub.w	r4, r1, #4
 80084d6:	bfb8      	it	lt
 80084d8:	18e4      	addlt	r4, r4, r3
 80084da:	f000 f8e7 	bl	80086ac <__malloc_lock>
 80084de:	4a1e      	ldr	r2, [pc, #120]	; (8008558 <_free_r+0x94>)
 80084e0:	9801      	ldr	r0, [sp, #4]
 80084e2:	6813      	ldr	r3, [r2, #0]
 80084e4:	b933      	cbnz	r3, 80084f4 <_free_r+0x30>
 80084e6:	6063      	str	r3, [r4, #4]
 80084e8:	6014      	str	r4, [r2, #0]
 80084ea:	b003      	add	sp, #12
 80084ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084f0:	f000 b8e2 	b.w	80086b8 <__malloc_unlock>
 80084f4:	42a3      	cmp	r3, r4
 80084f6:	d908      	bls.n	800850a <_free_r+0x46>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	1961      	adds	r1, r4, r5
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf01      	itttt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	1949      	addeq	r1, r1, r5
 8008506:	6021      	streq	r1, [r4, #0]
 8008508:	e7ed      	b.n	80084e6 <_free_r+0x22>
 800850a:	461a      	mov	r2, r3
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	b10b      	cbz	r3, 8008514 <_free_r+0x50>
 8008510:	42a3      	cmp	r3, r4
 8008512:	d9fa      	bls.n	800850a <_free_r+0x46>
 8008514:	6811      	ldr	r1, [r2, #0]
 8008516:	1855      	adds	r5, r2, r1
 8008518:	42a5      	cmp	r5, r4
 800851a:	d10b      	bne.n	8008534 <_free_r+0x70>
 800851c:	6824      	ldr	r4, [r4, #0]
 800851e:	4421      	add	r1, r4
 8008520:	1854      	adds	r4, r2, r1
 8008522:	42a3      	cmp	r3, r4
 8008524:	6011      	str	r1, [r2, #0]
 8008526:	d1e0      	bne.n	80084ea <_free_r+0x26>
 8008528:	681c      	ldr	r4, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	6053      	str	r3, [r2, #4]
 800852e:	440c      	add	r4, r1
 8008530:	6014      	str	r4, [r2, #0]
 8008532:	e7da      	b.n	80084ea <_free_r+0x26>
 8008534:	d902      	bls.n	800853c <_free_r+0x78>
 8008536:	230c      	movs	r3, #12
 8008538:	6003      	str	r3, [r0, #0]
 800853a:	e7d6      	b.n	80084ea <_free_r+0x26>
 800853c:	6825      	ldr	r5, [r4, #0]
 800853e:	1961      	adds	r1, r4, r5
 8008540:	428b      	cmp	r3, r1
 8008542:	bf04      	itt	eq
 8008544:	6819      	ldreq	r1, [r3, #0]
 8008546:	685b      	ldreq	r3, [r3, #4]
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	bf04      	itt	eq
 800854c:	1949      	addeq	r1, r1, r5
 800854e:	6021      	streq	r1, [r4, #0]
 8008550:	6054      	str	r4, [r2, #4]
 8008552:	e7ca      	b.n	80084ea <_free_r+0x26>
 8008554:	b003      	add	sp, #12
 8008556:	bd30      	pop	{r4, r5, pc}
 8008558:	200005e4 	.word	0x200005e4

0800855c <malloc>:
 800855c:	4b02      	ldr	r3, [pc, #8]	; (8008568 <malloc+0xc>)
 800855e:	4601      	mov	r1, r0
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	f000 b823 	b.w	80085ac <_malloc_r>
 8008566:	bf00      	nop
 8008568:	200000fc 	.word	0x200000fc

0800856c <sbrk_aligned>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4e0e      	ldr	r6, [pc, #56]	; (80085a8 <sbrk_aligned+0x3c>)
 8008570:	460c      	mov	r4, r1
 8008572:	6831      	ldr	r1, [r6, #0]
 8008574:	4605      	mov	r5, r0
 8008576:	b911      	cbnz	r1, 800857e <sbrk_aligned+0x12>
 8008578:	f001 fd96 	bl	800a0a8 <_sbrk_r>
 800857c:	6030      	str	r0, [r6, #0]
 800857e:	4621      	mov	r1, r4
 8008580:	4628      	mov	r0, r5
 8008582:	f001 fd91 	bl	800a0a8 <_sbrk_r>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d00a      	beq.n	80085a0 <sbrk_aligned+0x34>
 800858a:	1cc4      	adds	r4, r0, #3
 800858c:	f024 0403 	bic.w	r4, r4, #3
 8008590:	42a0      	cmp	r0, r4
 8008592:	d007      	beq.n	80085a4 <sbrk_aligned+0x38>
 8008594:	1a21      	subs	r1, r4, r0
 8008596:	4628      	mov	r0, r5
 8008598:	f001 fd86 	bl	800a0a8 <_sbrk_r>
 800859c:	3001      	adds	r0, #1
 800859e:	d101      	bne.n	80085a4 <sbrk_aligned+0x38>
 80085a0:	f04f 34ff 	mov.w	r4, #4294967295
 80085a4:	4620      	mov	r0, r4
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	200005e8 	.word	0x200005e8

080085ac <_malloc_r>:
 80085ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085b0:	1ccd      	adds	r5, r1, #3
 80085b2:	f025 0503 	bic.w	r5, r5, #3
 80085b6:	3508      	adds	r5, #8
 80085b8:	2d0c      	cmp	r5, #12
 80085ba:	bf38      	it	cc
 80085bc:	250c      	movcc	r5, #12
 80085be:	2d00      	cmp	r5, #0
 80085c0:	4607      	mov	r7, r0
 80085c2:	db01      	blt.n	80085c8 <_malloc_r+0x1c>
 80085c4:	42a9      	cmp	r1, r5
 80085c6:	d905      	bls.n	80085d4 <_malloc_r+0x28>
 80085c8:	230c      	movs	r3, #12
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	2600      	movs	r6, #0
 80085ce:	4630      	mov	r0, r6
 80085d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086a8 <_malloc_r+0xfc>
 80085d8:	f000 f868 	bl	80086ac <__malloc_lock>
 80085dc:	f8d8 3000 	ldr.w	r3, [r8]
 80085e0:	461c      	mov	r4, r3
 80085e2:	bb5c      	cbnz	r4, 800863c <_malloc_r+0x90>
 80085e4:	4629      	mov	r1, r5
 80085e6:	4638      	mov	r0, r7
 80085e8:	f7ff ffc0 	bl	800856c <sbrk_aligned>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	4604      	mov	r4, r0
 80085f0:	d155      	bne.n	800869e <_malloc_r+0xf2>
 80085f2:	f8d8 4000 	ldr.w	r4, [r8]
 80085f6:	4626      	mov	r6, r4
 80085f8:	2e00      	cmp	r6, #0
 80085fa:	d145      	bne.n	8008688 <_malloc_r+0xdc>
 80085fc:	2c00      	cmp	r4, #0
 80085fe:	d048      	beq.n	8008692 <_malloc_r+0xe6>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	4631      	mov	r1, r6
 8008604:	4638      	mov	r0, r7
 8008606:	eb04 0903 	add.w	r9, r4, r3
 800860a:	f001 fd4d 	bl	800a0a8 <_sbrk_r>
 800860e:	4581      	cmp	r9, r0
 8008610:	d13f      	bne.n	8008692 <_malloc_r+0xe6>
 8008612:	6821      	ldr	r1, [r4, #0]
 8008614:	1a6d      	subs	r5, r5, r1
 8008616:	4629      	mov	r1, r5
 8008618:	4638      	mov	r0, r7
 800861a:	f7ff ffa7 	bl	800856c <sbrk_aligned>
 800861e:	3001      	adds	r0, #1
 8008620:	d037      	beq.n	8008692 <_malloc_r+0xe6>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	442b      	add	r3, r5
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	f8d8 3000 	ldr.w	r3, [r8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d038      	beq.n	80086a2 <_malloc_r+0xf6>
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	42a2      	cmp	r2, r4
 8008634:	d12b      	bne.n	800868e <_malloc_r+0xe2>
 8008636:	2200      	movs	r2, #0
 8008638:	605a      	str	r2, [r3, #4]
 800863a:	e00f      	b.n	800865c <_malloc_r+0xb0>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	1b52      	subs	r2, r2, r5
 8008640:	d41f      	bmi.n	8008682 <_malloc_r+0xd6>
 8008642:	2a0b      	cmp	r2, #11
 8008644:	d917      	bls.n	8008676 <_malloc_r+0xca>
 8008646:	1961      	adds	r1, r4, r5
 8008648:	42a3      	cmp	r3, r4
 800864a:	6025      	str	r5, [r4, #0]
 800864c:	bf18      	it	ne
 800864e:	6059      	strne	r1, [r3, #4]
 8008650:	6863      	ldr	r3, [r4, #4]
 8008652:	bf08      	it	eq
 8008654:	f8c8 1000 	streq.w	r1, [r8]
 8008658:	5162      	str	r2, [r4, r5]
 800865a:	604b      	str	r3, [r1, #4]
 800865c:	4638      	mov	r0, r7
 800865e:	f104 060b 	add.w	r6, r4, #11
 8008662:	f000 f829 	bl	80086b8 <__malloc_unlock>
 8008666:	f026 0607 	bic.w	r6, r6, #7
 800866a:	1d23      	adds	r3, r4, #4
 800866c:	1af2      	subs	r2, r6, r3
 800866e:	d0ae      	beq.n	80085ce <_malloc_r+0x22>
 8008670:	1b9b      	subs	r3, r3, r6
 8008672:	50a3      	str	r3, [r4, r2]
 8008674:	e7ab      	b.n	80085ce <_malloc_r+0x22>
 8008676:	42a3      	cmp	r3, r4
 8008678:	6862      	ldr	r2, [r4, #4]
 800867a:	d1dd      	bne.n	8008638 <_malloc_r+0x8c>
 800867c:	f8c8 2000 	str.w	r2, [r8]
 8008680:	e7ec      	b.n	800865c <_malloc_r+0xb0>
 8008682:	4623      	mov	r3, r4
 8008684:	6864      	ldr	r4, [r4, #4]
 8008686:	e7ac      	b.n	80085e2 <_malloc_r+0x36>
 8008688:	4634      	mov	r4, r6
 800868a:	6876      	ldr	r6, [r6, #4]
 800868c:	e7b4      	b.n	80085f8 <_malloc_r+0x4c>
 800868e:	4613      	mov	r3, r2
 8008690:	e7cc      	b.n	800862c <_malloc_r+0x80>
 8008692:	230c      	movs	r3, #12
 8008694:	603b      	str	r3, [r7, #0]
 8008696:	4638      	mov	r0, r7
 8008698:	f000 f80e 	bl	80086b8 <__malloc_unlock>
 800869c:	e797      	b.n	80085ce <_malloc_r+0x22>
 800869e:	6025      	str	r5, [r4, #0]
 80086a0:	e7dc      	b.n	800865c <_malloc_r+0xb0>
 80086a2:	605b      	str	r3, [r3, #4]
 80086a4:	deff      	udf	#255	; 0xff
 80086a6:	bf00      	nop
 80086a8:	200005e4 	.word	0x200005e4

080086ac <__malloc_lock>:
 80086ac:	4801      	ldr	r0, [pc, #4]	; (80086b4 <__malloc_lock+0x8>)
 80086ae:	f7ff b887 	b.w	80077c0 <__retarget_lock_acquire_recursive>
 80086b2:	bf00      	nop
 80086b4:	200005e0 	.word	0x200005e0

080086b8 <__malloc_unlock>:
 80086b8:	4801      	ldr	r0, [pc, #4]	; (80086c0 <__malloc_unlock+0x8>)
 80086ba:	f7ff b882 	b.w	80077c2 <__retarget_lock_release_recursive>
 80086be:	bf00      	nop
 80086c0:	200005e0 	.word	0x200005e0

080086c4 <_Balloc>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	69c6      	ldr	r6, [r0, #28]
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	b976      	cbnz	r6, 80086ec <_Balloc+0x28>
 80086ce:	2010      	movs	r0, #16
 80086d0:	f7ff ff44 	bl	800855c <malloc>
 80086d4:	4602      	mov	r2, r0
 80086d6:	61e0      	str	r0, [r4, #28]
 80086d8:	b920      	cbnz	r0, 80086e4 <_Balloc+0x20>
 80086da:	4b18      	ldr	r3, [pc, #96]	; (800873c <_Balloc+0x78>)
 80086dc:	4818      	ldr	r0, [pc, #96]	; (8008740 <_Balloc+0x7c>)
 80086de:	216b      	movs	r1, #107	; 0x6b
 80086e0:	f001 fd0a 	bl	800a0f8 <__assert_func>
 80086e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086e8:	6006      	str	r6, [r0, #0]
 80086ea:	60c6      	str	r6, [r0, #12]
 80086ec:	69e6      	ldr	r6, [r4, #28]
 80086ee:	68f3      	ldr	r3, [r6, #12]
 80086f0:	b183      	cbz	r3, 8008714 <_Balloc+0x50>
 80086f2:	69e3      	ldr	r3, [r4, #28]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086fa:	b9b8      	cbnz	r0, 800872c <_Balloc+0x68>
 80086fc:	2101      	movs	r1, #1
 80086fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008702:	1d72      	adds	r2, r6, #5
 8008704:	0092      	lsls	r2, r2, #2
 8008706:	4620      	mov	r0, r4
 8008708:	f001 fd14 	bl	800a134 <_calloc_r>
 800870c:	b160      	cbz	r0, 8008728 <_Balloc+0x64>
 800870e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008712:	e00e      	b.n	8008732 <_Balloc+0x6e>
 8008714:	2221      	movs	r2, #33	; 0x21
 8008716:	2104      	movs	r1, #4
 8008718:	4620      	mov	r0, r4
 800871a:	f001 fd0b 	bl	800a134 <_calloc_r>
 800871e:	69e3      	ldr	r3, [r4, #28]
 8008720:	60f0      	str	r0, [r6, #12]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e4      	bne.n	80086f2 <_Balloc+0x2e>
 8008728:	2000      	movs	r0, #0
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	6802      	ldr	r2, [r0, #0]
 800872e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008732:	2300      	movs	r3, #0
 8008734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008738:	e7f7      	b.n	800872a <_Balloc+0x66>
 800873a:	bf00      	nop
 800873c:	0800b6a7 	.word	0x0800b6a7
 8008740:	0800b727 	.word	0x0800b727

08008744 <_Bfree>:
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	69c6      	ldr	r6, [r0, #28]
 8008748:	4605      	mov	r5, r0
 800874a:	460c      	mov	r4, r1
 800874c:	b976      	cbnz	r6, 800876c <_Bfree+0x28>
 800874e:	2010      	movs	r0, #16
 8008750:	f7ff ff04 	bl	800855c <malloc>
 8008754:	4602      	mov	r2, r0
 8008756:	61e8      	str	r0, [r5, #28]
 8008758:	b920      	cbnz	r0, 8008764 <_Bfree+0x20>
 800875a:	4b09      	ldr	r3, [pc, #36]	; (8008780 <_Bfree+0x3c>)
 800875c:	4809      	ldr	r0, [pc, #36]	; (8008784 <_Bfree+0x40>)
 800875e:	218f      	movs	r1, #143	; 0x8f
 8008760:	f001 fcca 	bl	800a0f8 <__assert_func>
 8008764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008768:	6006      	str	r6, [r0, #0]
 800876a:	60c6      	str	r6, [r0, #12]
 800876c:	b13c      	cbz	r4, 800877e <_Bfree+0x3a>
 800876e:	69eb      	ldr	r3, [r5, #28]
 8008770:	6862      	ldr	r2, [r4, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008778:	6021      	str	r1, [r4, #0]
 800877a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800877e:	bd70      	pop	{r4, r5, r6, pc}
 8008780:	0800b6a7 	.word	0x0800b6a7
 8008784:	0800b727 	.word	0x0800b727

08008788 <__multadd>:
 8008788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878c:	690d      	ldr	r5, [r1, #16]
 800878e:	4607      	mov	r7, r0
 8008790:	460c      	mov	r4, r1
 8008792:	461e      	mov	r6, r3
 8008794:	f101 0c14 	add.w	ip, r1, #20
 8008798:	2000      	movs	r0, #0
 800879a:	f8dc 3000 	ldr.w	r3, [ip]
 800879e:	b299      	uxth	r1, r3
 80087a0:	fb02 6101 	mla	r1, r2, r1, r6
 80087a4:	0c1e      	lsrs	r6, r3, #16
 80087a6:	0c0b      	lsrs	r3, r1, #16
 80087a8:	fb02 3306 	mla	r3, r2, r6, r3
 80087ac:	b289      	uxth	r1, r1
 80087ae:	3001      	adds	r0, #1
 80087b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80087b4:	4285      	cmp	r5, r0
 80087b6:	f84c 1b04 	str.w	r1, [ip], #4
 80087ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80087be:	dcec      	bgt.n	800879a <__multadd+0x12>
 80087c0:	b30e      	cbz	r6, 8008806 <__multadd+0x7e>
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	42ab      	cmp	r3, r5
 80087c6:	dc19      	bgt.n	80087fc <__multadd+0x74>
 80087c8:	6861      	ldr	r1, [r4, #4]
 80087ca:	4638      	mov	r0, r7
 80087cc:	3101      	adds	r1, #1
 80087ce:	f7ff ff79 	bl	80086c4 <_Balloc>
 80087d2:	4680      	mov	r8, r0
 80087d4:	b928      	cbnz	r0, 80087e2 <__multadd+0x5a>
 80087d6:	4602      	mov	r2, r0
 80087d8:	4b0c      	ldr	r3, [pc, #48]	; (800880c <__multadd+0x84>)
 80087da:	480d      	ldr	r0, [pc, #52]	; (8008810 <__multadd+0x88>)
 80087dc:	21ba      	movs	r1, #186	; 0xba
 80087de:	f001 fc8b 	bl	800a0f8 <__assert_func>
 80087e2:	6922      	ldr	r2, [r4, #16]
 80087e4:	3202      	adds	r2, #2
 80087e6:	f104 010c 	add.w	r1, r4, #12
 80087ea:	0092      	lsls	r2, r2, #2
 80087ec:	300c      	adds	r0, #12
 80087ee:	f001 fc6b 	bl	800a0c8 <memcpy>
 80087f2:	4621      	mov	r1, r4
 80087f4:	4638      	mov	r0, r7
 80087f6:	f7ff ffa5 	bl	8008744 <_Bfree>
 80087fa:	4644      	mov	r4, r8
 80087fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008800:	3501      	adds	r5, #1
 8008802:	615e      	str	r6, [r3, #20]
 8008804:	6125      	str	r5, [r4, #16]
 8008806:	4620      	mov	r0, r4
 8008808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880c:	0800b716 	.word	0x0800b716
 8008810:	0800b727 	.word	0x0800b727

08008814 <__s2b>:
 8008814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008818:	460c      	mov	r4, r1
 800881a:	4615      	mov	r5, r2
 800881c:	461f      	mov	r7, r3
 800881e:	2209      	movs	r2, #9
 8008820:	3308      	adds	r3, #8
 8008822:	4606      	mov	r6, r0
 8008824:	fb93 f3f2 	sdiv	r3, r3, r2
 8008828:	2100      	movs	r1, #0
 800882a:	2201      	movs	r2, #1
 800882c:	429a      	cmp	r2, r3
 800882e:	db09      	blt.n	8008844 <__s2b+0x30>
 8008830:	4630      	mov	r0, r6
 8008832:	f7ff ff47 	bl	80086c4 <_Balloc>
 8008836:	b940      	cbnz	r0, 800884a <__s2b+0x36>
 8008838:	4602      	mov	r2, r0
 800883a:	4b19      	ldr	r3, [pc, #100]	; (80088a0 <__s2b+0x8c>)
 800883c:	4819      	ldr	r0, [pc, #100]	; (80088a4 <__s2b+0x90>)
 800883e:	21d3      	movs	r1, #211	; 0xd3
 8008840:	f001 fc5a 	bl	800a0f8 <__assert_func>
 8008844:	0052      	lsls	r2, r2, #1
 8008846:	3101      	adds	r1, #1
 8008848:	e7f0      	b.n	800882c <__s2b+0x18>
 800884a:	9b08      	ldr	r3, [sp, #32]
 800884c:	6143      	str	r3, [r0, #20]
 800884e:	2d09      	cmp	r5, #9
 8008850:	f04f 0301 	mov.w	r3, #1
 8008854:	6103      	str	r3, [r0, #16]
 8008856:	dd16      	ble.n	8008886 <__s2b+0x72>
 8008858:	f104 0909 	add.w	r9, r4, #9
 800885c:	46c8      	mov	r8, r9
 800885e:	442c      	add	r4, r5
 8008860:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008864:	4601      	mov	r1, r0
 8008866:	3b30      	subs	r3, #48	; 0x30
 8008868:	220a      	movs	r2, #10
 800886a:	4630      	mov	r0, r6
 800886c:	f7ff ff8c 	bl	8008788 <__multadd>
 8008870:	45a0      	cmp	r8, r4
 8008872:	d1f5      	bne.n	8008860 <__s2b+0x4c>
 8008874:	f1a5 0408 	sub.w	r4, r5, #8
 8008878:	444c      	add	r4, r9
 800887a:	1b2d      	subs	r5, r5, r4
 800887c:	1963      	adds	r3, r4, r5
 800887e:	42bb      	cmp	r3, r7
 8008880:	db04      	blt.n	800888c <__s2b+0x78>
 8008882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008886:	340a      	adds	r4, #10
 8008888:	2509      	movs	r5, #9
 800888a:	e7f6      	b.n	800887a <__s2b+0x66>
 800888c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008890:	4601      	mov	r1, r0
 8008892:	3b30      	subs	r3, #48	; 0x30
 8008894:	220a      	movs	r2, #10
 8008896:	4630      	mov	r0, r6
 8008898:	f7ff ff76 	bl	8008788 <__multadd>
 800889c:	e7ee      	b.n	800887c <__s2b+0x68>
 800889e:	bf00      	nop
 80088a0:	0800b716 	.word	0x0800b716
 80088a4:	0800b727 	.word	0x0800b727

080088a8 <__hi0bits>:
 80088a8:	0c03      	lsrs	r3, r0, #16
 80088aa:	041b      	lsls	r3, r3, #16
 80088ac:	b9d3      	cbnz	r3, 80088e4 <__hi0bits+0x3c>
 80088ae:	0400      	lsls	r0, r0, #16
 80088b0:	2310      	movs	r3, #16
 80088b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088b6:	bf04      	itt	eq
 80088b8:	0200      	lsleq	r0, r0, #8
 80088ba:	3308      	addeq	r3, #8
 80088bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088c0:	bf04      	itt	eq
 80088c2:	0100      	lsleq	r0, r0, #4
 80088c4:	3304      	addeq	r3, #4
 80088c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088ca:	bf04      	itt	eq
 80088cc:	0080      	lsleq	r0, r0, #2
 80088ce:	3302      	addeq	r3, #2
 80088d0:	2800      	cmp	r0, #0
 80088d2:	db05      	blt.n	80088e0 <__hi0bits+0x38>
 80088d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088d8:	f103 0301 	add.w	r3, r3, #1
 80088dc:	bf08      	it	eq
 80088de:	2320      	moveq	r3, #32
 80088e0:	4618      	mov	r0, r3
 80088e2:	4770      	bx	lr
 80088e4:	2300      	movs	r3, #0
 80088e6:	e7e4      	b.n	80088b2 <__hi0bits+0xa>

080088e8 <__lo0bits>:
 80088e8:	6803      	ldr	r3, [r0, #0]
 80088ea:	f013 0207 	ands.w	r2, r3, #7
 80088ee:	d00c      	beq.n	800890a <__lo0bits+0x22>
 80088f0:	07d9      	lsls	r1, r3, #31
 80088f2:	d422      	bmi.n	800893a <__lo0bits+0x52>
 80088f4:	079a      	lsls	r2, r3, #30
 80088f6:	bf49      	itett	mi
 80088f8:	085b      	lsrmi	r3, r3, #1
 80088fa:	089b      	lsrpl	r3, r3, #2
 80088fc:	6003      	strmi	r3, [r0, #0]
 80088fe:	2201      	movmi	r2, #1
 8008900:	bf5c      	itt	pl
 8008902:	6003      	strpl	r3, [r0, #0]
 8008904:	2202      	movpl	r2, #2
 8008906:	4610      	mov	r0, r2
 8008908:	4770      	bx	lr
 800890a:	b299      	uxth	r1, r3
 800890c:	b909      	cbnz	r1, 8008912 <__lo0bits+0x2a>
 800890e:	0c1b      	lsrs	r3, r3, #16
 8008910:	2210      	movs	r2, #16
 8008912:	b2d9      	uxtb	r1, r3
 8008914:	b909      	cbnz	r1, 800891a <__lo0bits+0x32>
 8008916:	3208      	adds	r2, #8
 8008918:	0a1b      	lsrs	r3, r3, #8
 800891a:	0719      	lsls	r1, r3, #28
 800891c:	bf04      	itt	eq
 800891e:	091b      	lsreq	r3, r3, #4
 8008920:	3204      	addeq	r2, #4
 8008922:	0799      	lsls	r1, r3, #30
 8008924:	bf04      	itt	eq
 8008926:	089b      	lsreq	r3, r3, #2
 8008928:	3202      	addeq	r2, #2
 800892a:	07d9      	lsls	r1, r3, #31
 800892c:	d403      	bmi.n	8008936 <__lo0bits+0x4e>
 800892e:	085b      	lsrs	r3, r3, #1
 8008930:	f102 0201 	add.w	r2, r2, #1
 8008934:	d003      	beq.n	800893e <__lo0bits+0x56>
 8008936:	6003      	str	r3, [r0, #0]
 8008938:	e7e5      	b.n	8008906 <__lo0bits+0x1e>
 800893a:	2200      	movs	r2, #0
 800893c:	e7e3      	b.n	8008906 <__lo0bits+0x1e>
 800893e:	2220      	movs	r2, #32
 8008940:	e7e1      	b.n	8008906 <__lo0bits+0x1e>
	...

08008944 <__i2b>:
 8008944:	b510      	push	{r4, lr}
 8008946:	460c      	mov	r4, r1
 8008948:	2101      	movs	r1, #1
 800894a:	f7ff febb 	bl	80086c4 <_Balloc>
 800894e:	4602      	mov	r2, r0
 8008950:	b928      	cbnz	r0, 800895e <__i2b+0x1a>
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <__i2b+0x24>)
 8008954:	4805      	ldr	r0, [pc, #20]	; (800896c <__i2b+0x28>)
 8008956:	f240 1145 	movw	r1, #325	; 0x145
 800895a:	f001 fbcd 	bl	800a0f8 <__assert_func>
 800895e:	2301      	movs	r3, #1
 8008960:	6144      	str	r4, [r0, #20]
 8008962:	6103      	str	r3, [r0, #16]
 8008964:	bd10      	pop	{r4, pc}
 8008966:	bf00      	nop
 8008968:	0800b716 	.word	0x0800b716
 800896c:	0800b727 	.word	0x0800b727

08008970 <__multiply>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	4691      	mov	r9, r2
 8008976:	690a      	ldr	r2, [r1, #16]
 8008978:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800897c:	429a      	cmp	r2, r3
 800897e:	bfb8      	it	lt
 8008980:	460b      	movlt	r3, r1
 8008982:	460c      	mov	r4, r1
 8008984:	bfbc      	itt	lt
 8008986:	464c      	movlt	r4, r9
 8008988:	4699      	movlt	r9, r3
 800898a:	6927      	ldr	r7, [r4, #16]
 800898c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008990:	68a3      	ldr	r3, [r4, #8]
 8008992:	6861      	ldr	r1, [r4, #4]
 8008994:	eb07 060a 	add.w	r6, r7, sl
 8008998:	42b3      	cmp	r3, r6
 800899a:	b085      	sub	sp, #20
 800899c:	bfb8      	it	lt
 800899e:	3101      	addlt	r1, #1
 80089a0:	f7ff fe90 	bl	80086c4 <_Balloc>
 80089a4:	b930      	cbnz	r0, 80089b4 <__multiply+0x44>
 80089a6:	4602      	mov	r2, r0
 80089a8:	4b44      	ldr	r3, [pc, #272]	; (8008abc <__multiply+0x14c>)
 80089aa:	4845      	ldr	r0, [pc, #276]	; (8008ac0 <__multiply+0x150>)
 80089ac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80089b0:	f001 fba2 	bl	800a0f8 <__assert_func>
 80089b4:	f100 0514 	add.w	r5, r0, #20
 80089b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089bc:	462b      	mov	r3, r5
 80089be:	2200      	movs	r2, #0
 80089c0:	4543      	cmp	r3, r8
 80089c2:	d321      	bcc.n	8008a08 <__multiply+0x98>
 80089c4:	f104 0314 	add.w	r3, r4, #20
 80089c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80089cc:	f109 0314 	add.w	r3, r9, #20
 80089d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089d4:	9202      	str	r2, [sp, #8]
 80089d6:	1b3a      	subs	r2, r7, r4
 80089d8:	3a15      	subs	r2, #21
 80089da:	f022 0203 	bic.w	r2, r2, #3
 80089de:	3204      	adds	r2, #4
 80089e0:	f104 0115 	add.w	r1, r4, #21
 80089e4:	428f      	cmp	r7, r1
 80089e6:	bf38      	it	cc
 80089e8:	2204      	movcc	r2, #4
 80089ea:	9201      	str	r2, [sp, #4]
 80089ec:	9a02      	ldr	r2, [sp, #8]
 80089ee:	9303      	str	r3, [sp, #12]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d80c      	bhi.n	8008a0e <__multiply+0x9e>
 80089f4:	2e00      	cmp	r6, #0
 80089f6:	dd03      	ble.n	8008a00 <__multiply+0x90>
 80089f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d05b      	beq.n	8008ab8 <__multiply+0x148>
 8008a00:	6106      	str	r6, [r0, #16]
 8008a02:	b005      	add	sp, #20
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	f843 2b04 	str.w	r2, [r3], #4
 8008a0c:	e7d8      	b.n	80089c0 <__multiply+0x50>
 8008a0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a12:	f1ba 0f00 	cmp.w	sl, #0
 8008a16:	d024      	beq.n	8008a62 <__multiply+0xf2>
 8008a18:	f104 0e14 	add.w	lr, r4, #20
 8008a1c:	46a9      	mov	r9, r5
 8008a1e:	f04f 0c00 	mov.w	ip, #0
 8008a22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a26:	f8d9 1000 	ldr.w	r1, [r9]
 8008a2a:	fa1f fb82 	uxth.w	fp, r2
 8008a2e:	b289      	uxth	r1, r1
 8008a30:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a38:	f8d9 2000 	ldr.w	r2, [r9]
 8008a3c:	4461      	add	r1, ip
 8008a3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a42:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a4a:	b289      	uxth	r1, r1
 8008a4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a50:	4577      	cmp	r7, lr
 8008a52:	f849 1b04 	str.w	r1, [r9], #4
 8008a56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a5a:	d8e2      	bhi.n	8008a22 <__multiply+0xb2>
 8008a5c:	9a01      	ldr	r2, [sp, #4]
 8008a5e:	f845 c002 	str.w	ip, [r5, r2]
 8008a62:	9a03      	ldr	r2, [sp, #12]
 8008a64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a68:	3304      	adds	r3, #4
 8008a6a:	f1b9 0f00 	cmp.w	r9, #0
 8008a6e:	d021      	beq.n	8008ab4 <__multiply+0x144>
 8008a70:	6829      	ldr	r1, [r5, #0]
 8008a72:	f104 0c14 	add.w	ip, r4, #20
 8008a76:	46ae      	mov	lr, r5
 8008a78:	f04f 0a00 	mov.w	sl, #0
 8008a7c:	f8bc b000 	ldrh.w	fp, [ip]
 8008a80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a84:	fb09 220b 	mla	r2, r9, fp, r2
 8008a88:	4452      	add	r2, sl
 8008a8a:	b289      	uxth	r1, r1
 8008a8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a90:	f84e 1b04 	str.w	r1, [lr], #4
 8008a94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008a98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008a9c:	f8be 1000 	ldrh.w	r1, [lr]
 8008aa0:	fb09 110a 	mla	r1, r9, sl, r1
 8008aa4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008aa8:	4567      	cmp	r7, ip
 8008aaa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008aae:	d8e5      	bhi.n	8008a7c <__multiply+0x10c>
 8008ab0:	9a01      	ldr	r2, [sp, #4]
 8008ab2:	50a9      	str	r1, [r5, r2]
 8008ab4:	3504      	adds	r5, #4
 8008ab6:	e799      	b.n	80089ec <__multiply+0x7c>
 8008ab8:	3e01      	subs	r6, #1
 8008aba:	e79b      	b.n	80089f4 <__multiply+0x84>
 8008abc:	0800b716 	.word	0x0800b716
 8008ac0:	0800b727 	.word	0x0800b727

08008ac4 <__pow5mult>:
 8008ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac8:	4615      	mov	r5, r2
 8008aca:	f012 0203 	ands.w	r2, r2, #3
 8008ace:	4606      	mov	r6, r0
 8008ad0:	460f      	mov	r7, r1
 8008ad2:	d007      	beq.n	8008ae4 <__pow5mult+0x20>
 8008ad4:	4c25      	ldr	r4, [pc, #148]	; (8008b6c <__pow5mult+0xa8>)
 8008ad6:	3a01      	subs	r2, #1
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ade:	f7ff fe53 	bl	8008788 <__multadd>
 8008ae2:	4607      	mov	r7, r0
 8008ae4:	10ad      	asrs	r5, r5, #2
 8008ae6:	d03d      	beq.n	8008b64 <__pow5mult+0xa0>
 8008ae8:	69f4      	ldr	r4, [r6, #28]
 8008aea:	b97c      	cbnz	r4, 8008b0c <__pow5mult+0x48>
 8008aec:	2010      	movs	r0, #16
 8008aee:	f7ff fd35 	bl	800855c <malloc>
 8008af2:	4602      	mov	r2, r0
 8008af4:	61f0      	str	r0, [r6, #28]
 8008af6:	b928      	cbnz	r0, 8008b04 <__pow5mult+0x40>
 8008af8:	4b1d      	ldr	r3, [pc, #116]	; (8008b70 <__pow5mult+0xac>)
 8008afa:	481e      	ldr	r0, [pc, #120]	; (8008b74 <__pow5mult+0xb0>)
 8008afc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008b00:	f001 fafa 	bl	800a0f8 <__assert_func>
 8008b04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b08:	6004      	str	r4, [r0, #0]
 8008b0a:	60c4      	str	r4, [r0, #12]
 8008b0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008b10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b14:	b94c      	cbnz	r4, 8008b2a <__pow5mult+0x66>
 8008b16:	f240 2171 	movw	r1, #625	; 0x271
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f7ff ff12 	bl	8008944 <__i2b>
 8008b20:	2300      	movs	r3, #0
 8008b22:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b26:	4604      	mov	r4, r0
 8008b28:	6003      	str	r3, [r0, #0]
 8008b2a:	f04f 0900 	mov.w	r9, #0
 8008b2e:	07eb      	lsls	r3, r5, #31
 8008b30:	d50a      	bpl.n	8008b48 <__pow5mult+0x84>
 8008b32:	4639      	mov	r1, r7
 8008b34:	4622      	mov	r2, r4
 8008b36:	4630      	mov	r0, r6
 8008b38:	f7ff ff1a 	bl	8008970 <__multiply>
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4630      	mov	r0, r6
 8008b42:	f7ff fdff 	bl	8008744 <_Bfree>
 8008b46:	4647      	mov	r7, r8
 8008b48:	106d      	asrs	r5, r5, #1
 8008b4a:	d00b      	beq.n	8008b64 <__pow5mult+0xa0>
 8008b4c:	6820      	ldr	r0, [r4, #0]
 8008b4e:	b938      	cbnz	r0, 8008b60 <__pow5mult+0x9c>
 8008b50:	4622      	mov	r2, r4
 8008b52:	4621      	mov	r1, r4
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7ff ff0b 	bl	8008970 <__multiply>
 8008b5a:	6020      	str	r0, [r4, #0]
 8008b5c:	f8c0 9000 	str.w	r9, [r0]
 8008b60:	4604      	mov	r4, r0
 8008b62:	e7e4      	b.n	8008b2e <__pow5mult+0x6a>
 8008b64:	4638      	mov	r0, r7
 8008b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b6a:	bf00      	nop
 8008b6c:	0800b870 	.word	0x0800b870
 8008b70:	0800b6a7 	.word	0x0800b6a7
 8008b74:	0800b727 	.word	0x0800b727

08008b78 <__lshift>:
 8008b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	6849      	ldr	r1, [r1, #4]
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b86:	68a3      	ldr	r3, [r4, #8]
 8008b88:	4607      	mov	r7, r0
 8008b8a:	4691      	mov	r9, r2
 8008b8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b90:	f108 0601 	add.w	r6, r8, #1
 8008b94:	42b3      	cmp	r3, r6
 8008b96:	db0b      	blt.n	8008bb0 <__lshift+0x38>
 8008b98:	4638      	mov	r0, r7
 8008b9a:	f7ff fd93 	bl	80086c4 <_Balloc>
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	b948      	cbnz	r0, 8008bb6 <__lshift+0x3e>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	4b28      	ldr	r3, [pc, #160]	; (8008c48 <__lshift+0xd0>)
 8008ba6:	4829      	ldr	r0, [pc, #164]	; (8008c4c <__lshift+0xd4>)
 8008ba8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008bac:	f001 faa4 	bl	800a0f8 <__assert_func>
 8008bb0:	3101      	adds	r1, #1
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	e7ee      	b.n	8008b94 <__lshift+0x1c>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f100 0114 	add.w	r1, r0, #20
 8008bbc:	f100 0210 	add.w	r2, r0, #16
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	4553      	cmp	r3, sl
 8008bc4:	db33      	blt.n	8008c2e <__lshift+0xb6>
 8008bc6:	6920      	ldr	r0, [r4, #16]
 8008bc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bcc:	f104 0314 	add.w	r3, r4, #20
 8008bd0:	f019 091f 	ands.w	r9, r9, #31
 8008bd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bdc:	d02b      	beq.n	8008c36 <__lshift+0xbe>
 8008bde:	f1c9 0e20 	rsb	lr, r9, #32
 8008be2:	468a      	mov	sl, r1
 8008be4:	2200      	movs	r2, #0
 8008be6:	6818      	ldr	r0, [r3, #0]
 8008be8:	fa00 f009 	lsl.w	r0, r0, r9
 8008bec:	4310      	orrs	r0, r2
 8008bee:	f84a 0b04 	str.w	r0, [sl], #4
 8008bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bf6:	459c      	cmp	ip, r3
 8008bf8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bfc:	d8f3      	bhi.n	8008be6 <__lshift+0x6e>
 8008bfe:	ebac 0304 	sub.w	r3, ip, r4
 8008c02:	3b15      	subs	r3, #21
 8008c04:	f023 0303 	bic.w	r3, r3, #3
 8008c08:	3304      	adds	r3, #4
 8008c0a:	f104 0015 	add.w	r0, r4, #21
 8008c0e:	4584      	cmp	ip, r0
 8008c10:	bf38      	it	cc
 8008c12:	2304      	movcc	r3, #4
 8008c14:	50ca      	str	r2, [r1, r3]
 8008c16:	b10a      	cbz	r2, 8008c1c <__lshift+0xa4>
 8008c18:	f108 0602 	add.w	r6, r8, #2
 8008c1c:	3e01      	subs	r6, #1
 8008c1e:	4638      	mov	r0, r7
 8008c20:	612e      	str	r6, [r5, #16]
 8008c22:	4621      	mov	r1, r4
 8008c24:	f7ff fd8e 	bl	8008744 <_Bfree>
 8008c28:	4628      	mov	r0, r5
 8008c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c32:	3301      	adds	r3, #1
 8008c34:	e7c5      	b.n	8008bc2 <__lshift+0x4a>
 8008c36:	3904      	subs	r1, #4
 8008c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c40:	459c      	cmp	ip, r3
 8008c42:	d8f9      	bhi.n	8008c38 <__lshift+0xc0>
 8008c44:	e7ea      	b.n	8008c1c <__lshift+0xa4>
 8008c46:	bf00      	nop
 8008c48:	0800b716 	.word	0x0800b716
 8008c4c:	0800b727 	.word	0x0800b727

08008c50 <__mcmp>:
 8008c50:	b530      	push	{r4, r5, lr}
 8008c52:	6902      	ldr	r2, [r0, #16]
 8008c54:	690c      	ldr	r4, [r1, #16]
 8008c56:	1b12      	subs	r2, r2, r4
 8008c58:	d10e      	bne.n	8008c78 <__mcmp+0x28>
 8008c5a:	f100 0314 	add.w	r3, r0, #20
 8008c5e:	3114      	adds	r1, #20
 8008c60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c70:	42a5      	cmp	r5, r4
 8008c72:	d003      	beq.n	8008c7c <__mcmp+0x2c>
 8008c74:	d305      	bcc.n	8008c82 <__mcmp+0x32>
 8008c76:	2201      	movs	r2, #1
 8008c78:	4610      	mov	r0, r2
 8008c7a:	bd30      	pop	{r4, r5, pc}
 8008c7c:	4283      	cmp	r3, r0
 8008c7e:	d3f3      	bcc.n	8008c68 <__mcmp+0x18>
 8008c80:	e7fa      	b.n	8008c78 <__mcmp+0x28>
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295
 8008c86:	e7f7      	b.n	8008c78 <__mcmp+0x28>

08008c88 <__mdiff>:
 8008c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	4606      	mov	r6, r0
 8008c90:	4611      	mov	r1, r2
 8008c92:	4620      	mov	r0, r4
 8008c94:	4690      	mov	r8, r2
 8008c96:	f7ff ffdb 	bl	8008c50 <__mcmp>
 8008c9a:	1e05      	subs	r5, r0, #0
 8008c9c:	d110      	bne.n	8008cc0 <__mdiff+0x38>
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7ff fd0f 	bl	80086c4 <_Balloc>
 8008ca6:	b930      	cbnz	r0, 8008cb6 <__mdiff+0x2e>
 8008ca8:	4b3a      	ldr	r3, [pc, #232]	; (8008d94 <__mdiff+0x10c>)
 8008caa:	4602      	mov	r2, r0
 8008cac:	f240 2137 	movw	r1, #567	; 0x237
 8008cb0:	4839      	ldr	r0, [pc, #228]	; (8008d98 <__mdiff+0x110>)
 8008cb2:	f001 fa21 	bl	800a0f8 <__assert_func>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc0:	bfa4      	itt	ge
 8008cc2:	4643      	movge	r3, r8
 8008cc4:	46a0      	movge	r8, r4
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ccc:	bfa6      	itte	ge
 8008cce:	461c      	movge	r4, r3
 8008cd0:	2500      	movge	r5, #0
 8008cd2:	2501      	movlt	r5, #1
 8008cd4:	f7ff fcf6 	bl	80086c4 <_Balloc>
 8008cd8:	b920      	cbnz	r0, 8008ce4 <__mdiff+0x5c>
 8008cda:	4b2e      	ldr	r3, [pc, #184]	; (8008d94 <__mdiff+0x10c>)
 8008cdc:	4602      	mov	r2, r0
 8008cde:	f240 2145 	movw	r1, #581	; 0x245
 8008ce2:	e7e5      	b.n	8008cb0 <__mdiff+0x28>
 8008ce4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ce8:	6926      	ldr	r6, [r4, #16]
 8008cea:	60c5      	str	r5, [r0, #12]
 8008cec:	f104 0914 	add.w	r9, r4, #20
 8008cf0:	f108 0514 	add.w	r5, r8, #20
 8008cf4:	f100 0e14 	add.w	lr, r0, #20
 8008cf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008cfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d00:	f108 0210 	add.w	r2, r8, #16
 8008d04:	46f2      	mov	sl, lr
 8008d06:	2100      	movs	r1, #0
 8008d08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d10:	fa11 f88b 	uxtah	r8, r1, fp
 8008d14:	b299      	uxth	r1, r3
 8008d16:	0c1b      	lsrs	r3, r3, #16
 8008d18:	eba8 0801 	sub.w	r8, r8, r1
 8008d1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d20:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d24:	fa1f f888 	uxth.w	r8, r8
 8008d28:	1419      	asrs	r1, r3, #16
 8008d2a:	454e      	cmp	r6, r9
 8008d2c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d30:	f84a 3b04 	str.w	r3, [sl], #4
 8008d34:	d8e8      	bhi.n	8008d08 <__mdiff+0x80>
 8008d36:	1b33      	subs	r3, r6, r4
 8008d38:	3b15      	subs	r3, #21
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	3304      	adds	r3, #4
 8008d40:	3415      	adds	r4, #21
 8008d42:	42a6      	cmp	r6, r4
 8008d44:	bf38      	it	cc
 8008d46:	2304      	movcc	r3, #4
 8008d48:	441d      	add	r5, r3
 8008d4a:	4473      	add	r3, lr
 8008d4c:	469e      	mov	lr, r3
 8008d4e:	462e      	mov	r6, r5
 8008d50:	4566      	cmp	r6, ip
 8008d52:	d30e      	bcc.n	8008d72 <__mdiff+0xea>
 8008d54:	f10c 0203 	add.w	r2, ip, #3
 8008d58:	1b52      	subs	r2, r2, r5
 8008d5a:	f022 0203 	bic.w	r2, r2, #3
 8008d5e:	3d03      	subs	r5, #3
 8008d60:	45ac      	cmp	ip, r5
 8008d62:	bf38      	it	cc
 8008d64:	2200      	movcc	r2, #0
 8008d66:	4413      	add	r3, r2
 8008d68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008d6c:	b17a      	cbz	r2, 8008d8e <__mdiff+0x106>
 8008d6e:	6107      	str	r7, [r0, #16]
 8008d70:	e7a4      	b.n	8008cbc <__mdiff+0x34>
 8008d72:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d76:	fa11 f288 	uxtah	r2, r1, r8
 8008d7a:	1414      	asrs	r4, r2, #16
 8008d7c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d80:	b292      	uxth	r2, r2
 8008d82:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d86:	f84e 2b04 	str.w	r2, [lr], #4
 8008d8a:	1421      	asrs	r1, r4, #16
 8008d8c:	e7e0      	b.n	8008d50 <__mdiff+0xc8>
 8008d8e:	3f01      	subs	r7, #1
 8008d90:	e7ea      	b.n	8008d68 <__mdiff+0xe0>
 8008d92:	bf00      	nop
 8008d94:	0800b716 	.word	0x0800b716
 8008d98:	0800b727 	.word	0x0800b727

08008d9c <__ulp>:
 8008d9c:	b082      	sub	sp, #8
 8008d9e:	ed8d 0b00 	vstr	d0, [sp]
 8008da2:	9a01      	ldr	r2, [sp, #4]
 8008da4:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <__ulp+0x48>)
 8008da6:	4013      	ands	r3, r2
 8008da8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dc08      	bgt.n	8008dc2 <__ulp+0x26>
 8008db0:	425b      	negs	r3, r3
 8008db2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008db6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008dba:	da04      	bge.n	8008dc6 <__ulp+0x2a>
 8008dbc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008dc0:	4113      	asrs	r3, r2
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	e008      	b.n	8008dd8 <__ulp+0x3c>
 8008dc6:	f1a2 0314 	sub.w	r3, r2, #20
 8008dca:	2b1e      	cmp	r3, #30
 8008dcc:	bfda      	itte	le
 8008dce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008dd2:	40da      	lsrle	r2, r3
 8008dd4:	2201      	movgt	r2, #1
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	ec41 0b10 	vmov	d0, r0, r1
 8008de0:	b002      	add	sp, #8
 8008de2:	4770      	bx	lr
 8008de4:	7ff00000 	.word	0x7ff00000

08008de8 <__b2d>:
 8008de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dec:	6906      	ldr	r6, [r0, #16]
 8008dee:	f100 0814 	add.w	r8, r0, #20
 8008df2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008df6:	1f37      	subs	r7, r6, #4
 8008df8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f7ff fd53 	bl	80088a8 <__hi0bits>
 8008e02:	f1c0 0320 	rsb	r3, r0, #32
 8008e06:	280a      	cmp	r0, #10
 8008e08:	600b      	str	r3, [r1, #0]
 8008e0a:	491b      	ldr	r1, [pc, #108]	; (8008e78 <__b2d+0x90>)
 8008e0c:	dc15      	bgt.n	8008e3a <__b2d+0x52>
 8008e0e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008e12:	fa22 f30c 	lsr.w	r3, r2, ip
 8008e16:	45b8      	cmp	r8, r7
 8008e18:	ea43 0501 	orr.w	r5, r3, r1
 8008e1c:	bf34      	ite	cc
 8008e1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e22:	2300      	movcs	r3, #0
 8008e24:	3015      	adds	r0, #21
 8008e26:	fa02 f000 	lsl.w	r0, r2, r0
 8008e2a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008e2e:	4303      	orrs	r3, r0
 8008e30:	461c      	mov	r4, r3
 8008e32:	ec45 4b10 	vmov	d0, r4, r5
 8008e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3a:	45b8      	cmp	r8, r7
 8008e3c:	bf3a      	itte	cc
 8008e3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008e42:	f1a6 0708 	subcc.w	r7, r6, #8
 8008e46:	2300      	movcs	r3, #0
 8008e48:	380b      	subs	r0, #11
 8008e4a:	d012      	beq.n	8008e72 <__b2d+0x8a>
 8008e4c:	f1c0 0120 	rsb	r1, r0, #32
 8008e50:	fa23 f401 	lsr.w	r4, r3, r1
 8008e54:	4082      	lsls	r2, r0
 8008e56:	4322      	orrs	r2, r4
 8008e58:	4547      	cmp	r7, r8
 8008e5a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008e5e:	bf8c      	ite	hi
 8008e60:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008e64:	2200      	movls	r2, #0
 8008e66:	4083      	lsls	r3, r0
 8008e68:	40ca      	lsrs	r2, r1
 8008e6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	e7de      	b.n	8008e30 <__b2d+0x48>
 8008e72:	ea42 0501 	orr.w	r5, r2, r1
 8008e76:	e7db      	b.n	8008e30 <__b2d+0x48>
 8008e78:	3ff00000 	.word	0x3ff00000

08008e7c <__d2b>:
 8008e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e80:	460f      	mov	r7, r1
 8008e82:	2101      	movs	r1, #1
 8008e84:	ec59 8b10 	vmov	r8, r9, d0
 8008e88:	4616      	mov	r6, r2
 8008e8a:	f7ff fc1b 	bl	80086c4 <_Balloc>
 8008e8e:	4604      	mov	r4, r0
 8008e90:	b930      	cbnz	r0, 8008ea0 <__d2b+0x24>
 8008e92:	4602      	mov	r2, r0
 8008e94:	4b24      	ldr	r3, [pc, #144]	; (8008f28 <__d2b+0xac>)
 8008e96:	4825      	ldr	r0, [pc, #148]	; (8008f2c <__d2b+0xb0>)
 8008e98:	f240 310f 	movw	r1, #783	; 0x30f
 8008e9c:	f001 f92c 	bl	800a0f8 <__assert_func>
 8008ea0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ea4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ea8:	bb2d      	cbnz	r5, 8008ef6 <__d2b+0x7a>
 8008eaa:	9301      	str	r3, [sp, #4]
 8008eac:	f1b8 0300 	subs.w	r3, r8, #0
 8008eb0:	d026      	beq.n	8008f00 <__d2b+0x84>
 8008eb2:	4668      	mov	r0, sp
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	f7ff fd17 	bl	80088e8 <__lo0bits>
 8008eba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ebe:	b1e8      	cbz	r0, 8008efc <__d2b+0x80>
 8008ec0:	f1c0 0320 	rsb	r3, r0, #32
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	430b      	orrs	r3, r1
 8008eca:	40c2      	lsrs	r2, r0
 8008ecc:	6163      	str	r3, [r4, #20]
 8008ece:	9201      	str	r2, [sp, #4]
 8008ed0:	9b01      	ldr	r3, [sp, #4]
 8008ed2:	61a3      	str	r3, [r4, #24]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bf14      	ite	ne
 8008ed8:	2202      	movne	r2, #2
 8008eda:	2201      	moveq	r2, #1
 8008edc:	6122      	str	r2, [r4, #16]
 8008ede:	b1bd      	cbz	r5, 8008f10 <__d2b+0x94>
 8008ee0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ee4:	4405      	add	r5, r0
 8008ee6:	603d      	str	r5, [r7, #0]
 8008ee8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008eec:	6030      	str	r0, [r6, #0]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	b003      	add	sp, #12
 8008ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008efa:	e7d6      	b.n	8008eaa <__d2b+0x2e>
 8008efc:	6161      	str	r1, [r4, #20]
 8008efe:	e7e7      	b.n	8008ed0 <__d2b+0x54>
 8008f00:	a801      	add	r0, sp, #4
 8008f02:	f7ff fcf1 	bl	80088e8 <__lo0bits>
 8008f06:	9b01      	ldr	r3, [sp, #4]
 8008f08:	6163      	str	r3, [r4, #20]
 8008f0a:	3020      	adds	r0, #32
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	e7e5      	b.n	8008edc <__d2b+0x60>
 8008f10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f18:	6038      	str	r0, [r7, #0]
 8008f1a:	6918      	ldr	r0, [r3, #16]
 8008f1c:	f7ff fcc4 	bl	80088a8 <__hi0bits>
 8008f20:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f24:	e7e2      	b.n	8008eec <__d2b+0x70>
 8008f26:	bf00      	nop
 8008f28:	0800b716 	.word	0x0800b716
 8008f2c:	0800b727 	.word	0x0800b727

08008f30 <__ratio>:
 8008f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	4688      	mov	r8, r1
 8008f36:	4669      	mov	r1, sp
 8008f38:	4681      	mov	r9, r0
 8008f3a:	f7ff ff55 	bl	8008de8 <__b2d>
 8008f3e:	a901      	add	r1, sp, #4
 8008f40:	4640      	mov	r0, r8
 8008f42:	ec55 4b10 	vmov	r4, r5, d0
 8008f46:	f7ff ff4f 	bl	8008de8 <__b2d>
 8008f4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f52:	eba3 0c02 	sub.w	ip, r3, r2
 8008f56:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f5a:	1a9b      	subs	r3, r3, r2
 8008f5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f60:	ec51 0b10 	vmov	r0, r1, d0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	bfd6      	itet	le
 8008f68:	460a      	movle	r2, r1
 8008f6a:	462a      	movgt	r2, r5
 8008f6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f70:	468b      	mov	fp, r1
 8008f72:	462f      	mov	r7, r5
 8008f74:	bfd4      	ite	le
 8008f76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008f7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008f7e:	4620      	mov	r0, r4
 8008f80:	ee10 2a10 	vmov	r2, s0
 8008f84:	465b      	mov	r3, fp
 8008f86:	4639      	mov	r1, r7
 8008f88:	f7f7 fc68 	bl	800085c <__aeabi_ddiv>
 8008f8c:	ec41 0b10 	vmov	d0, r0, r1
 8008f90:	b003      	add	sp, #12
 8008f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f96 <__copybits>:
 8008f96:	3901      	subs	r1, #1
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	1149      	asrs	r1, r1, #5
 8008f9c:	6914      	ldr	r4, [r2, #16]
 8008f9e:	3101      	adds	r1, #1
 8008fa0:	f102 0314 	add.w	r3, r2, #20
 8008fa4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008fa8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008fac:	1f05      	subs	r5, r0, #4
 8008fae:	42a3      	cmp	r3, r4
 8008fb0:	d30c      	bcc.n	8008fcc <__copybits+0x36>
 8008fb2:	1aa3      	subs	r3, r4, r2
 8008fb4:	3b11      	subs	r3, #17
 8008fb6:	f023 0303 	bic.w	r3, r3, #3
 8008fba:	3211      	adds	r2, #17
 8008fbc:	42a2      	cmp	r2, r4
 8008fbe:	bf88      	it	hi
 8008fc0:	2300      	movhi	r3, #0
 8008fc2:	4418      	add	r0, r3
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	4288      	cmp	r0, r1
 8008fc8:	d305      	bcc.n	8008fd6 <__copybits+0x40>
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	f853 6b04 	ldr.w	r6, [r3], #4
 8008fd0:	f845 6f04 	str.w	r6, [r5, #4]!
 8008fd4:	e7eb      	b.n	8008fae <__copybits+0x18>
 8008fd6:	f840 3b04 	str.w	r3, [r0], #4
 8008fda:	e7f4      	b.n	8008fc6 <__copybits+0x30>

08008fdc <__any_on>:
 8008fdc:	f100 0214 	add.w	r2, r0, #20
 8008fe0:	6900      	ldr	r0, [r0, #16]
 8008fe2:	114b      	asrs	r3, r1, #5
 8008fe4:	4298      	cmp	r0, r3
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	db11      	blt.n	800900e <__any_on+0x32>
 8008fea:	dd0a      	ble.n	8009002 <__any_on+0x26>
 8008fec:	f011 011f 	ands.w	r1, r1, #31
 8008ff0:	d007      	beq.n	8009002 <__any_on+0x26>
 8008ff2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ff6:	fa24 f001 	lsr.w	r0, r4, r1
 8008ffa:	fa00 f101 	lsl.w	r1, r0, r1
 8008ffe:	428c      	cmp	r4, r1
 8009000:	d10b      	bne.n	800901a <__any_on+0x3e>
 8009002:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009006:	4293      	cmp	r3, r2
 8009008:	d803      	bhi.n	8009012 <__any_on+0x36>
 800900a:	2000      	movs	r0, #0
 800900c:	bd10      	pop	{r4, pc}
 800900e:	4603      	mov	r3, r0
 8009010:	e7f7      	b.n	8009002 <__any_on+0x26>
 8009012:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009016:	2900      	cmp	r1, #0
 8009018:	d0f5      	beq.n	8009006 <__any_on+0x2a>
 800901a:	2001      	movs	r0, #1
 800901c:	e7f6      	b.n	800900c <__any_on+0x30>

0800901e <sulp>:
 800901e:	b570      	push	{r4, r5, r6, lr}
 8009020:	4604      	mov	r4, r0
 8009022:	460d      	mov	r5, r1
 8009024:	ec45 4b10 	vmov	d0, r4, r5
 8009028:	4616      	mov	r6, r2
 800902a:	f7ff feb7 	bl	8008d9c <__ulp>
 800902e:	ec51 0b10 	vmov	r0, r1, d0
 8009032:	b17e      	cbz	r6, 8009054 <sulp+0x36>
 8009034:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009038:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800903c:	2b00      	cmp	r3, #0
 800903e:	dd09      	ble.n	8009054 <sulp+0x36>
 8009040:	051b      	lsls	r3, r3, #20
 8009042:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009046:	2400      	movs	r4, #0
 8009048:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800904c:	4622      	mov	r2, r4
 800904e:	462b      	mov	r3, r5
 8009050:	f7f7 fada 	bl	8000608 <__aeabi_dmul>
 8009054:	bd70      	pop	{r4, r5, r6, pc}
	...

08009058 <_strtod_l>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	ed2d 8b02 	vpush	{d8}
 8009060:	b09b      	sub	sp, #108	; 0x6c
 8009062:	4604      	mov	r4, r0
 8009064:	9213      	str	r2, [sp, #76]	; 0x4c
 8009066:	2200      	movs	r2, #0
 8009068:	9216      	str	r2, [sp, #88]	; 0x58
 800906a:	460d      	mov	r5, r1
 800906c:	f04f 0800 	mov.w	r8, #0
 8009070:	f04f 0900 	mov.w	r9, #0
 8009074:	460a      	mov	r2, r1
 8009076:	9215      	str	r2, [sp, #84]	; 0x54
 8009078:	7811      	ldrb	r1, [r2, #0]
 800907a:	292b      	cmp	r1, #43	; 0x2b
 800907c:	d04c      	beq.n	8009118 <_strtod_l+0xc0>
 800907e:	d83a      	bhi.n	80090f6 <_strtod_l+0x9e>
 8009080:	290d      	cmp	r1, #13
 8009082:	d834      	bhi.n	80090ee <_strtod_l+0x96>
 8009084:	2908      	cmp	r1, #8
 8009086:	d834      	bhi.n	80090f2 <_strtod_l+0x9a>
 8009088:	2900      	cmp	r1, #0
 800908a:	d03d      	beq.n	8009108 <_strtod_l+0xb0>
 800908c:	2200      	movs	r2, #0
 800908e:	920a      	str	r2, [sp, #40]	; 0x28
 8009090:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009092:	7832      	ldrb	r2, [r6, #0]
 8009094:	2a30      	cmp	r2, #48	; 0x30
 8009096:	f040 80b4 	bne.w	8009202 <_strtod_l+0x1aa>
 800909a:	7872      	ldrb	r2, [r6, #1]
 800909c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80090a0:	2a58      	cmp	r2, #88	; 0x58
 80090a2:	d170      	bne.n	8009186 <_strtod_l+0x12e>
 80090a4:	9302      	str	r3, [sp, #8]
 80090a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	ab16      	add	r3, sp, #88	; 0x58
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	4a8e      	ldr	r2, [pc, #568]	; (80092e8 <_strtod_l+0x290>)
 80090b0:	ab17      	add	r3, sp, #92	; 0x5c
 80090b2:	a915      	add	r1, sp, #84	; 0x54
 80090b4:	4620      	mov	r0, r4
 80090b6:	f001 f8bb 	bl	800a230 <__gethex>
 80090ba:	f010 070f 	ands.w	r7, r0, #15
 80090be:	4605      	mov	r5, r0
 80090c0:	d005      	beq.n	80090ce <_strtod_l+0x76>
 80090c2:	2f06      	cmp	r7, #6
 80090c4:	d12a      	bne.n	800911c <_strtod_l+0xc4>
 80090c6:	3601      	adds	r6, #1
 80090c8:	2300      	movs	r3, #0
 80090ca:	9615      	str	r6, [sp, #84]	; 0x54
 80090cc:	930a      	str	r3, [sp, #40]	; 0x28
 80090ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f040 857f 	bne.w	8009bd4 <_strtod_l+0xb7c>
 80090d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d8:	b1db      	cbz	r3, 8009112 <_strtod_l+0xba>
 80090da:	4642      	mov	r2, r8
 80090dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80090e0:	ec43 2b10 	vmov	d0, r2, r3
 80090e4:	b01b      	add	sp, #108	; 0x6c
 80090e6:	ecbd 8b02 	vpop	{d8}
 80090ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ee:	2920      	cmp	r1, #32
 80090f0:	d1cc      	bne.n	800908c <_strtod_l+0x34>
 80090f2:	3201      	adds	r2, #1
 80090f4:	e7bf      	b.n	8009076 <_strtod_l+0x1e>
 80090f6:	292d      	cmp	r1, #45	; 0x2d
 80090f8:	d1c8      	bne.n	800908c <_strtod_l+0x34>
 80090fa:	2101      	movs	r1, #1
 80090fc:	910a      	str	r1, [sp, #40]	; 0x28
 80090fe:	1c51      	adds	r1, r2, #1
 8009100:	9115      	str	r1, [sp, #84]	; 0x54
 8009102:	7852      	ldrb	r2, [r2, #1]
 8009104:	2a00      	cmp	r2, #0
 8009106:	d1c3      	bne.n	8009090 <_strtod_l+0x38>
 8009108:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800910a:	9515      	str	r5, [sp, #84]	; 0x54
 800910c:	2b00      	cmp	r3, #0
 800910e:	f040 855f 	bne.w	8009bd0 <_strtod_l+0xb78>
 8009112:	4642      	mov	r2, r8
 8009114:	464b      	mov	r3, r9
 8009116:	e7e3      	b.n	80090e0 <_strtod_l+0x88>
 8009118:	2100      	movs	r1, #0
 800911a:	e7ef      	b.n	80090fc <_strtod_l+0xa4>
 800911c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800911e:	b13a      	cbz	r2, 8009130 <_strtod_l+0xd8>
 8009120:	2135      	movs	r1, #53	; 0x35
 8009122:	a818      	add	r0, sp, #96	; 0x60
 8009124:	f7ff ff37 	bl	8008f96 <__copybits>
 8009128:	9916      	ldr	r1, [sp, #88]	; 0x58
 800912a:	4620      	mov	r0, r4
 800912c:	f7ff fb0a 	bl	8008744 <_Bfree>
 8009130:	3f01      	subs	r7, #1
 8009132:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009134:	2f04      	cmp	r7, #4
 8009136:	d806      	bhi.n	8009146 <_strtod_l+0xee>
 8009138:	e8df f007 	tbb	[pc, r7]
 800913c:	201d0314 	.word	0x201d0314
 8009140:	14          	.byte	0x14
 8009141:	00          	.byte	0x00
 8009142:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009146:	05e9      	lsls	r1, r5, #23
 8009148:	bf48      	it	mi
 800914a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800914e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009152:	0d1b      	lsrs	r3, r3, #20
 8009154:	051b      	lsls	r3, r3, #20
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1b9      	bne.n	80090ce <_strtod_l+0x76>
 800915a:	f7fe fb07 	bl	800776c <__errno>
 800915e:	2322      	movs	r3, #34	; 0x22
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	e7b4      	b.n	80090ce <_strtod_l+0x76>
 8009164:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009168:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800916c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009170:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009174:	e7e7      	b.n	8009146 <_strtod_l+0xee>
 8009176:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80092f0 <_strtod_l+0x298>
 800917a:	e7e4      	b.n	8009146 <_strtod_l+0xee>
 800917c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009180:	f04f 38ff 	mov.w	r8, #4294967295
 8009184:	e7df      	b.n	8009146 <_strtod_l+0xee>
 8009186:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	9215      	str	r2, [sp, #84]	; 0x54
 800918c:	785b      	ldrb	r3, [r3, #1]
 800918e:	2b30      	cmp	r3, #48	; 0x30
 8009190:	d0f9      	beq.n	8009186 <_strtod_l+0x12e>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d09b      	beq.n	80090ce <_strtod_l+0x76>
 8009196:	2301      	movs	r3, #1
 8009198:	f04f 0a00 	mov.w	sl, #0
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80091a2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80091a6:	46d3      	mov	fp, sl
 80091a8:	220a      	movs	r2, #10
 80091aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80091ac:	7806      	ldrb	r6, [r0, #0]
 80091ae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80091b2:	b2d9      	uxtb	r1, r3
 80091b4:	2909      	cmp	r1, #9
 80091b6:	d926      	bls.n	8009206 <_strtod_l+0x1ae>
 80091b8:	494c      	ldr	r1, [pc, #304]	; (80092ec <_strtod_l+0x294>)
 80091ba:	2201      	movs	r2, #1
 80091bc:	f000 ff62 	bl	800a084 <strncmp>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d030      	beq.n	8009226 <_strtod_l+0x1ce>
 80091c4:	2000      	movs	r0, #0
 80091c6:	4632      	mov	r2, r6
 80091c8:	9005      	str	r0, [sp, #20]
 80091ca:	465e      	mov	r6, fp
 80091cc:	4603      	mov	r3, r0
 80091ce:	2a65      	cmp	r2, #101	; 0x65
 80091d0:	d001      	beq.n	80091d6 <_strtod_l+0x17e>
 80091d2:	2a45      	cmp	r2, #69	; 0x45
 80091d4:	d113      	bne.n	80091fe <_strtod_l+0x1a6>
 80091d6:	b91e      	cbnz	r6, 80091e0 <_strtod_l+0x188>
 80091d8:	9a04      	ldr	r2, [sp, #16]
 80091da:	4302      	orrs	r2, r0
 80091dc:	d094      	beq.n	8009108 <_strtod_l+0xb0>
 80091de:	2600      	movs	r6, #0
 80091e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80091e2:	1c6a      	adds	r2, r5, #1
 80091e4:	9215      	str	r2, [sp, #84]	; 0x54
 80091e6:	786a      	ldrb	r2, [r5, #1]
 80091e8:	2a2b      	cmp	r2, #43	; 0x2b
 80091ea:	d074      	beq.n	80092d6 <_strtod_l+0x27e>
 80091ec:	2a2d      	cmp	r2, #45	; 0x2d
 80091ee:	d078      	beq.n	80092e2 <_strtod_l+0x28a>
 80091f0:	f04f 0c00 	mov.w	ip, #0
 80091f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80091f8:	2909      	cmp	r1, #9
 80091fa:	d97f      	bls.n	80092fc <_strtod_l+0x2a4>
 80091fc:	9515      	str	r5, [sp, #84]	; 0x54
 80091fe:	2700      	movs	r7, #0
 8009200:	e09e      	b.n	8009340 <_strtod_l+0x2e8>
 8009202:	2300      	movs	r3, #0
 8009204:	e7c8      	b.n	8009198 <_strtod_l+0x140>
 8009206:	f1bb 0f08 	cmp.w	fp, #8
 800920a:	bfd8      	it	le
 800920c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800920e:	f100 0001 	add.w	r0, r0, #1
 8009212:	bfda      	itte	le
 8009214:	fb02 3301 	mlale	r3, r2, r1, r3
 8009218:	9309      	strle	r3, [sp, #36]	; 0x24
 800921a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800921e:	f10b 0b01 	add.w	fp, fp, #1
 8009222:	9015      	str	r0, [sp, #84]	; 0x54
 8009224:	e7c1      	b.n	80091aa <_strtod_l+0x152>
 8009226:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	9215      	str	r2, [sp, #84]	; 0x54
 800922c:	785a      	ldrb	r2, [r3, #1]
 800922e:	f1bb 0f00 	cmp.w	fp, #0
 8009232:	d037      	beq.n	80092a4 <_strtod_l+0x24c>
 8009234:	9005      	str	r0, [sp, #20]
 8009236:	465e      	mov	r6, fp
 8009238:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800923c:	2b09      	cmp	r3, #9
 800923e:	d912      	bls.n	8009266 <_strtod_l+0x20e>
 8009240:	2301      	movs	r3, #1
 8009242:	e7c4      	b.n	80091ce <_strtod_l+0x176>
 8009244:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	9215      	str	r2, [sp, #84]	; 0x54
 800924a:	785a      	ldrb	r2, [r3, #1]
 800924c:	3001      	adds	r0, #1
 800924e:	2a30      	cmp	r2, #48	; 0x30
 8009250:	d0f8      	beq.n	8009244 <_strtod_l+0x1ec>
 8009252:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009256:	2b08      	cmp	r3, #8
 8009258:	f200 84c1 	bhi.w	8009bde <_strtod_l+0xb86>
 800925c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800925e:	9005      	str	r0, [sp, #20]
 8009260:	2000      	movs	r0, #0
 8009262:	930b      	str	r3, [sp, #44]	; 0x2c
 8009264:	4606      	mov	r6, r0
 8009266:	3a30      	subs	r2, #48	; 0x30
 8009268:	f100 0301 	add.w	r3, r0, #1
 800926c:	d014      	beq.n	8009298 <_strtod_l+0x240>
 800926e:	9905      	ldr	r1, [sp, #20]
 8009270:	4419      	add	r1, r3
 8009272:	9105      	str	r1, [sp, #20]
 8009274:	4633      	mov	r3, r6
 8009276:	eb00 0c06 	add.w	ip, r0, r6
 800927a:	210a      	movs	r1, #10
 800927c:	4563      	cmp	r3, ip
 800927e:	d113      	bne.n	80092a8 <_strtod_l+0x250>
 8009280:	1833      	adds	r3, r6, r0
 8009282:	2b08      	cmp	r3, #8
 8009284:	f106 0601 	add.w	r6, r6, #1
 8009288:	4406      	add	r6, r0
 800928a:	dc1a      	bgt.n	80092c2 <_strtod_l+0x26a>
 800928c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800928e:	230a      	movs	r3, #10
 8009290:	fb03 2301 	mla	r3, r3, r1, r2
 8009294:	9309      	str	r3, [sp, #36]	; 0x24
 8009296:	2300      	movs	r3, #0
 8009298:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800929a:	1c51      	adds	r1, r2, #1
 800929c:	9115      	str	r1, [sp, #84]	; 0x54
 800929e:	7852      	ldrb	r2, [r2, #1]
 80092a0:	4618      	mov	r0, r3
 80092a2:	e7c9      	b.n	8009238 <_strtod_l+0x1e0>
 80092a4:	4658      	mov	r0, fp
 80092a6:	e7d2      	b.n	800924e <_strtod_l+0x1f6>
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	f103 0301 	add.w	r3, r3, #1
 80092ae:	dc03      	bgt.n	80092b8 <_strtod_l+0x260>
 80092b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092b2:	434f      	muls	r7, r1
 80092b4:	9709      	str	r7, [sp, #36]	; 0x24
 80092b6:	e7e1      	b.n	800927c <_strtod_l+0x224>
 80092b8:	2b10      	cmp	r3, #16
 80092ba:	bfd8      	it	le
 80092bc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80092c0:	e7dc      	b.n	800927c <_strtod_l+0x224>
 80092c2:	2e10      	cmp	r6, #16
 80092c4:	bfdc      	itt	le
 80092c6:	230a      	movle	r3, #10
 80092c8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80092cc:	e7e3      	b.n	8009296 <_strtod_l+0x23e>
 80092ce:	2300      	movs	r3, #0
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	2301      	movs	r3, #1
 80092d4:	e780      	b.n	80091d8 <_strtod_l+0x180>
 80092d6:	f04f 0c00 	mov.w	ip, #0
 80092da:	1caa      	adds	r2, r5, #2
 80092dc:	9215      	str	r2, [sp, #84]	; 0x54
 80092de:	78aa      	ldrb	r2, [r5, #2]
 80092e0:	e788      	b.n	80091f4 <_strtod_l+0x19c>
 80092e2:	f04f 0c01 	mov.w	ip, #1
 80092e6:	e7f8      	b.n	80092da <_strtod_l+0x282>
 80092e8:	0800b880 	.word	0x0800b880
 80092ec:	0800b87c 	.word	0x0800b87c
 80092f0:	7ff00000 	.word	0x7ff00000
 80092f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80092f6:	1c51      	adds	r1, r2, #1
 80092f8:	9115      	str	r1, [sp, #84]	; 0x54
 80092fa:	7852      	ldrb	r2, [r2, #1]
 80092fc:	2a30      	cmp	r2, #48	; 0x30
 80092fe:	d0f9      	beq.n	80092f4 <_strtod_l+0x29c>
 8009300:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009304:	2908      	cmp	r1, #8
 8009306:	f63f af7a 	bhi.w	80091fe <_strtod_l+0x1a6>
 800930a:	3a30      	subs	r2, #48	; 0x30
 800930c:	9208      	str	r2, [sp, #32]
 800930e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009310:	920c      	str	r2, [sp, #48]	; 0x30
 8009312:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009314:	1c57      	adds	r7, r2, #1
 8009316:	9715      	str	r7, [sp, #84]	; 0x54
 8009318:	7852      	ldrb	r2, [r2, #1]
 800931a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800931e:	f1be 0f09 	cmp.w	lr, #9
 8009322:	d938      	bls.n	8009396 <_strtod_l+0x33e>
 8009324:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009326:	1a7f      	subs	r7, r7, r1
 8009328:	2f08      	cmp	r7, #8
 800932a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800932e:	dc03      	bgt.n	8009338 <_strtod_l+0x2e0>
 8009330:	9908      	ldr	r1, [sp, #32]
 8009332:	428f      	cmp	r7, r1
 8009334:	bfa8      	it	ge
 8009336:	460f      	movge	r7, r1
 8009338:	f1bc 0f00 	cmp.w	ip, #0
 800933c:	d000      	beq.n	8009340 <_strtod_l+0x2e8>
 800933e:	427f      	negs	r7, r7
 8009340:	2e00      	cmp	r6, #0
 8009342:	d14f      	bne.n	80093e4 <_strtod_l+0x38c>
 8009344:	9904      	ldr	r1, [sp, #16]
 8009346:	4301      	orrs	r1, r0
 8009348:	f47f aec1 	bne.w	80090ce <_strtod_l+0x76>
 800934c:	2b00      	cmp	r3, #0
 800934e:	f47f aedb 	bne.w	8009108 <_strtod_l+0xb0>
 8009352:	2a69      	cmp	r2, #105	; 0x69
 8009354:	d029      	beq.n	80093aa <_strtod_l+0x352>
 8009356:	dc26      	bgt.n	80093a6 <_strtod_l+0x34e>
 8009358:	2a49      	cmp	r2, #73	; 0x49
 800935a:	d026      	beq.n	80093aa <_strtod_l+0x352>
 800935c:	2a4e      	cmp	r2, #78	; 0x4e
 800935e:	f47f aed3 	bne.w	8009108 <_strtod_l+0xb0>
 8009362:	499b      	ldr	r1, [pc, #620]	; (80095d0 <_strtod_l+0x578>)
 8009364:	a815      	add	r0, sp, #84	; 0x54
 8009366:	f001 f9a3 	bl	800a6b0 <__match>
 800936a:	2800      	cmp	r0, #0
 800936c:	f43f aecc 	beq.w	8009108 <_strtod_l+0xb0>
 8009370:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	2b28      	cmp	r3, #40	; 0x28
 8009376:	d12f      	bne.n	80093d8 <_strtod_l+0x380>
 8009378:	4996      	ldr	r1, [pc, #600]	; (80095d4 <_strtod_l+0x57c>)
 800937a:	aa18      	add	r2, sp, #96	; 0x60
 800937c:	a815      	add	r0, sp, #84	; 0x54
 800937e:	f001 f9ab 	bl	800a6d8 <__hexnan>
 8009382:	2805      	cmp	r0, #5
 8009384:	d128      	bne.n	80093d8 <_strtod_l+0x380>
 8009386:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009388:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800938c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009390:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009394:	e69b      	b.n	80090ce <_strtod_l+0x76>
 8009396:	9f08      	ldr	r7, [sp, #32]
 8009398:	210a      	movs	r1, #10
 800939a:	fb01 2107 	mla	r1, r1, r7, r2
 800939e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80093a2:	9208      	str	r2, [sp, #32]
 80093a4:	e7b5      	b.n	8009312 <_strtod_l+0x2ba>
 80093a6:	2a6e      	cmp	r2, #110	; 0x6e
 80093a8:	e7d9      	b.n	800935e <_strtod_l+0x306>
 80093aa:	498b      	ldr	r1, [pc, #556]	; (80095d8 <_strtod_l+0x580>)
 80093ac:	a815      	add	r0, sp, #84	; 0x54
 80093ae:	f001 f97f 	bl	800a6b0 <__match>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	f43f aea8 	beq.w	8009108 <_strtod_l+0xb0>
 80093b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ba:	4988      	ldr	r1, [pc, #544]	; (80095dc <_strtod_l+0x584>)
 80093bc:	3b01      	subs	r3, #1
 80093be:	a815      	add	r0, sp, #84	; 0x54
 80093c0:	9315      	str	r3, [sp, #84]	; 0x54
 80093c2:	f001 f975 	bl	800a6b0 <__match>
 80093c6:	b910      	cbnz	r0, 80093ce <_strtod_l+0x376>
 80093c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ca:	3301      	adds	r3, #1
 80093cc:	9315      	str	r3, [sp, #84]	; 0x54
 80093ce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80095ec <_strtod_l+0x594>
 80093d2:	f04f 0800 	mov.w	r8, #0
 80093d6:	e67a      	b.n	80090ce <_strtod_l+0x76>
 80093d8:	4881      	ldr	r0, [pc, #516]	; (80095e0 <_strtod_l+0x588>)
 80093da:	f000 fe85 	bl	800a0e8 <nan>
 80093de:	ec59 8b10 	vmov	r8, r9, d0
 80093e2:	e674      	b.n	80090ce <_strtod_l+0x76>
 80093e4:	9b05      	ldr	r3, [sp, #20]
 80093e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e8:	1afb      	subs	r3, r7, r3
 80093ea:	f1bb 0f00 	cmp.w	fp, #0
 80093ee:	bf08      	it	eq
 80093f0:	46b3      	moveq	fp, r6
 80093f2:	2e10      	cmp	r6, #16
 80093f4:	9308      	str	r3, [sp, #32]
 80093f6:	4635      	mov	r5, r6
 80093f8:	bfa8      	it	ge
 80093fa:	2510      	movge	r5, #16
 80093fc:	f7f7 f88a 	bl	8000514 <__aeabi_ui2d>
 8009400:	2e09      	cmp	r6, #9
 8009402:	4680      	mov	r8, r0
 8009404:	4689      	mov	r9, r1
 8009406:	dd13      	ble.n	8009430 <_strtod_l+0x3d8>
 8009408:	4b76      	ldr	r3, [pc, #472]	; (80095e4 <_strtod_l+0x58c>)
 800940a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800940e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009412:	f7f7 f8f9 	bl	8000608 <__aeabi_dmul>
 8009416:	4680      	mov	r8, r0
 8009418:	4650      	mov	r0, sl
 800941a:	4689      	mov	r9, r1
 800941c:	f7f7 f87a 	bl	8000514 <__aeabi_ui2d>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f6 ff38 	bl	800029c <__adddf3>
 800942c:	4680      	mov	r8, r0
 800942e:	4689      	mov	r9, r1
 8009430:	2e0f      	cmp	r6, #15
 8009432:	dc38      	bgt.n	80094a6 <_strtod_l+0x44e>
 8009434:	9b08      	ldr	r3, [sp, #32]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f43f ae49 	beq.w	80090ce <_strtod_l+0x76>
 800943c:	dd24      	ble.n	8009488 <_strtod_l+0x430>
 800943e:	2b16      	cmp	r3, #22
 8009440:	dc0b      	bgt.n	800945a <_strtod_l+0x402>
 8009442:	4968      	ldr	r1, [pc, #416]	; (80095e4 <_strtod_l+0x58c>)
 8009444:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	f7f7 f8da 	bl	8000608 <__aeabi_dmul>
 8009454:	4680      	mov	r8, r0
 8009456:	4689      	mov	r9, r1
 8009458:	e639      	b.n	80090ce <_strtod_l+0x76>
 800945a:	9a08      	ldr	r2, [sp, #32]
 800945c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009460:	4293      	cmp	r3, r2
 8009462:	db20      	blt.n	80094a6 <_strtod_l+0x44e>
 8009464:	4c5f      	ldr	r4, [pc, #380]	; (80095e4 <_strtod_l+0x58c>)
 8009466:	f1c6 060f 	rsb	r6, r6, #15
 800946a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800946e:	4642      	mov	r2, r8
 8009470:	464b      	mov	r3, r9
 8009472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009476:	f7f7 f8c7 	bl	8000608 <__aeabi_dmul>
 800947a:	9b08      	ldr	r3, [sp, #32]
 800947c:	1b9e      	subs	r6, r3, r6
 800947e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009482:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009486:	e7e3      	b.n	8009450 <_strtod_l+0x3f8>
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	3316      	adds	r3, #22
 800948c:	db0b      	blt.n	80094a6 <_strtod_l+0x44e>
 800948e:	9b05      	ldr	r3, [sp, #20]
 8009490:	1bdf      	subs	r7, r3, r7
 8009492:	4b54      	ldr	r3, [pc, #336]	; (80095e4 <_strtod_l+0x58c>)
 8009494:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800949c:	4640      	mov	r0, r8
 800949e:	4649      	mov	r1, r9
 80094a0:	f7f7 f9dc 	bl	800085c <__aeabi_ddiv>
 80094a4:	e7d6      	b.n	8009454 <_strtod_l+0x3fc>
 80094a6:	9b08      	ldr	r3, [sp, #32]
 80094a8:	1b75      	subs	r5, r6, r5
 80094aa:	441d      	add	r5, r3
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	dd70      	ble.n	8009592 <_strtod_l+0x53a>
 80094b0:	f015 030f 	ands.w	r3, r5, #15
 80094b4:	d00a      	beq.n	80094cc <_strtod_l+0x474>
 80094b6:	494b      	ldr	r1, [pc, #300]	; (80095e4 <_strtod_l+0x58c>)
 80094b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094bc:	4642      	mov	r2, r8
 80094be:	464b      	mov	r3, r9
 80094c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094c4:	f7f7 f8a0 	bl	8000608 <__aeabi_dmul>
 80094c8:	4680      	mov	r8, r0
 80094ca:	4689      	mov	r9, r1
 80094cc:	f035 050f 	bics.w	r5, r5, #15
 80094d0:	d04d      	beq.n	800956e <_strtod_l+0x516>
 80094d2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80094d6:	dd22      	ble.n	800951e <_strtod_l+0x4c6>
 80094d8:	2500      	movs	r5, #0
 80094da:	46ab      	mov	fp, r5
 80094dc:	9509      	str	r5, [sp, #36]	; 0x24
 80094de:	9505      	str	r5, [sp, #20]
 80094e0:	2322      	movs	r3, #34	; 0x22
 80094e2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80095ec <_strtod_l+0x594>
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	f04f 0800 	mov.w	r8, #0
 80094ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f43f aded 	beq.w	80090ce <_strtod_l+0x76>
 80094f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80094f6:	4620      	mov	r0, r4
 80094f8:	f7ff f924 	bl	8008744 <_Bfree>
 80094fc:	9905      	ldr	r1, [sp, #20]
 80094fe:	4620      	mov	r0, r4
 8009500:	f7ff f920 	bl	8008744 <_Bfree>
 8009504:	4659      	mov	r1, fp
 8009506:	4620      	mov	r0, r4
 8009508:	f7ff f91c 	bl	8008744 <_Bfree>
 800950c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800950e:	4620      	mov	r0, r4
 8009510:	f7ff f918 	bl	8008744 <_Bfree>
 8009514:	4629      	mov	r1, r5
 8009516:	4620      	mov	r0, r4
 8009518:	f7ff f914 	bl	8008744 <_Bfree>
 800951c:	e5d7      	b.n	80090ce <_strtod_l+0x76>
 800951e:	4b32      	ldr	r3, [pc, #200]	; (80095e8 <_strtod_l+0x590>)
 8009520:	9304      	str	r3, [sp, #16]
 8009522:	2300      	movs	r3, #0
 8009524:	112d      	asrs	r5, r5, #4
 8009526:	4640      	mov	r0, r8
 8009528:	4649      	mov	r1, r9
 800952a:	469a      	mov	sl, r3
 800952c:	2d01      	cmp	r5, #1
 800952e:	dc21      	bgt.n	8009574 <_strtod_l+0x51c>
 8009530:	b10b      	cbz	r3, 8009536 <_strtod_l+0x4de>
 8009532:	4680      	mov	r8, r0
 8009534:	4689      	mov	r9, r1
 8009536:	492c      	ldr	r1, [pc, #176]	; (80095e8 <_strtod_l+0x590>)
 8009538:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800953c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009540:	4642      	mov	r2, r8
 8009542:	464b      	mov	r3, r9
 8009544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009548:	f7f7 f85e 	bl	8000608 <__aeabi_dmul>
 800954c:	4b27      	ldr	r3, [pc, #156]	; (80095ec <_strtod_l+0x594>)
 800954e:	460a      	mov	r2, r1
 8009550:	400b      	ands	r3, r1
 8009552:	4927      	ldr	r1, [pc, #156]	; (80095f0 <_strtod_l+0x598>)
 8009554:	428b      	cmp	r3, r1
 8009556:	4680      	mov	r8, r0
 8009558:	d8be      	bhi.n	80094d8 <_strtod_l+0x480>
 800955a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800955e:	428b      	cmp	r3, r1
 8009560:	bf86      	itte	hi
 8009562:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80095f4 <_strtod_l+0x59c>
 8009566:	f04f 38ff 	movhi.w	r8, #4294967295
 800956a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800956e:	2300      	movs	r3, #0
 8009570:	9304      	str	r3, [sp, #16]
 8009572:	e07b      	b.n	800966c <_strtod_l+0x614>
 8009574:	07ea      	lsls	r2, r5, #31
 8009576:	d505      	bpl.n	8009584 <_strtod_l+0x52c>
 8009578:	9b04      	ldr	r3, [sp, #16]
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f7 f843 	bl	8000608 <__aeabi_dmul>
 8009582:	2301      	movs	r3, #1
 8009584:	9a04      	ldr	r2, [sp, #16]
 8009586:	3208      	adds	r2, #8
 8009588:	f10a 0a01 	add.w	sl, sl, #1
 800958c:	106d      	asrs	r5, r5, #1
 800958e:	9204      	str	r2, [sp, #16]
 8009590:	e7cc      	b.n	800952c <_strtod_l+0x4d4>
 8009592:	d0ec      	beq.n	800956e <_strtod_l+0x516>
 8009594:	426d      	negs	r5, r5
 8009596:	f015 020f 	ands.w	r2, r5, #15
 800959a:	d00a      	beq.n	80095b2 <_strtod_l+0x55a>
 800959c:	4b11      	ldr	r3, [pc, #68]	; (80095e4 <_strtod_l+0x58c>)
 800959e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095a2:	4640      	mov	r0, r8
 80095a4:	4649      	mov	r1, r9
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	f7f7 f957 	bl	800085c <__aeabi_ddiv>
 80095ae:	4680      	mov	r8, r0
 80095b0:	4689      	mov	r9, r1
 80095b2:	112d      	asrs	r5, r5, #4
 80095b4:	d0db      	beq.n	800956e <_strtod_l+0x516>
 80095b6:	2d1f      	cmp	r5, #31
 80095b8:	dd1e      	ble.n	80095f8 <_strtod_l+0x5a0>
 80095ba:	2500      	movs	r5, #0
 80095bc:	46ab      	mov	fp, r5
 80095be:	9509      	str	r5, [sp, #36]	; 0x24
 80095c0:	9505      	str	r5, [sp, #20]
 80095c2:	2322      	movs	r3, #34	; 0x22
 80095c4:	f04f 0800 	mov.w	r8, #0
 80095c8:	f04f 0900 	mov.w	r9, #0
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	e78d      	b.n	80094ec <_strtod_l+0x494>
 80095d0:	0800b66e 	.word	0x0800b66e
 80095d4:	0800b894 	.word	0x0800b894
 80095d8:	0800b666 	.word	0x0800b666
 80095dc:	0800b69d 	.word	0x0800b69d
 80095e0:	0800b924 	.word	0x0800b924
 80095e4:	0800b7a8 	.word	0x0800b7a8
 80095e8:	0800b780 	.word	0x0800b780
 80095ec:	7ff00000 	.word	0x7ff00000
 80095f0:	7ca00000 	.word	0x7ca00000
 80095f4:	7fefffff 	.word	0x7fefffff
 80095f8:	f015 0310 	ands.w	r3, r5, #16
 80095fc:	bf18      	it	ne
 80095fe:	236a      	movne	r3, #106	; 0x6a
 8009600:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80099a4 <_strtod_l+0x94c>
 8009604:	9304      	str	r3, [sp, #16]
 8009606:	4640      	mov	r0, r8
 8009608:	4649      	mov	r1, r9
 800960a:	2300      	movs	r3, #0
 800960c:	07ea      	lsls	r2, r5, #31
 800960e:	d504      	bpl.n	800961a <_strtod_l+0x5c2>
 8009610:	e9da 2300 	ldrd	r2, r3, [sl]
 8009614:	f7f6 fff8 	bl	8000608 <__aeabi_dmul>
 8009618:	2301      	movs	r3, #1
 800961a:	106d      	asrs	r5, r5, #1
 800961c:	f10a 0a08 	add.w	sl, sl, #8
 8009620:	d1f4      	bne.n	800960c <_strtod_l+0x5b4>
 8009622:	b10b      	cbz	r3, 8009628 <_strtod_l+0x5d0>
 8009624:	4680      	mov	r8, r0
 8009626:	4689      	mov	r9, r1
 8009628:	9b04      	ldr	r3, [sp, #16]
 800962a:	b1bb      	cbz	r3, 800965c <_strtod_l+0x604>
 800962c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009630:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009634:	2b00      	cmp	r3, #0
 8009636:	4649      	mov	r1, r9
 8009638:	dd10      	ble.n	800965c <_strtod_l+0x604>
 800963a:	2b1f      	cmp	r3, #31
 800963c:	f340 811e 	ble.w	800987c <_strtod_l+0x824>
 8009640:	2b34      	cmp	r3, #52	; 0x34
 8009642:	bfde      	ittt	le
 8009644:	f04f 33ff 	movle.w	r3, #4294967295
 8009648:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800964c:	4093      	lslle	r3, r2
 800964e:	f04f 0800 	mov.w	r8, #0
 8009652:	bfcc      	ite	gt
 8009654:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009658:	ea03 0901 	andle.w	r9, r3, r1
 800965c:	2200      	movs	r2, #0
 800965e:	2300      	movs	r3, #0
 8009660:	4640      	mov	r0, r8
 8009662:	4649      	mov	r1, r9
 8009664:	f7f7 fa38 	bl	8000ad8 <__aeabi_dcmpeq>
 8009668:	2800      	cmp	r0, #0
 800966a:	d1a6      	bne.n	80095ba <_strtod_l+0x562>
 800966c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009672:	4633      	mov	r3, r6
 8009674:	465a      	mov	r2, fp
 8009676:	4620      	mov	r0, r4
 8009678:	f7ff f8cc 	bl	8008814 <__s2b>
 800967c:	9009      	str	r0, [sp, #36]	; 0x24
 800967e:	2800      	cmp	r0, #0
 8009680:	f43f af2a 	beq.w	80094d8 <_strtod_l+0x480>
 8009684:	9a08      	ldr	r2, [sp, #32]
 8009686:	9b05      	ldr	r3, [sp, #20]
 8009688:	2a00      	cmp	r2, #0
 800968a:	eba3 0307 	sub.w	r3, r3, r7
 800968e:	bfa8      	it	ge
 8009690:	2300      	movge	r3, #0
 8009692:	930c      	str	r3, [sp, #48]	; 0x30
 8009694:	2500      	movs	r5, #0
 8009696:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800969a:	9312      	str	r3, [sp, #72]	; 0x48
 800969c:	46ab      	mov	fp, r5
 800969e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a0:	4620      	mov	r0, r4
 80096a2:	6859      	ldr	r1, [r3, #4]
 80096a4:	f7ff f80e 	bl	80086c4 <_Balloc>
 80096a8:	9005      	str	r0, [sp, #20]
 80096aa:	2800      	cmp	r0, #0
 80096ac:	f43f af18 	beq.w	80094e0 <_strtod_l+0x488>
 80096b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	3202      	adds	r2, #2
 80096b6:	f103 010c 	add.w	r1, r3, #12
 80096ba:	0092      	lsls	r2, r2, #2
 80096bc:	300c      	adds	r0, #12
 80096be:	f000 fd03 	bl	800a0c8 <memcpy>
 80096c2:	ec49 8b10 	vmov	d0, r8, r9
 80096c6:	aa18      	add	r2, sp, #96	; 0x60
 80096c8:	a917      	add	r1, sp, #92	; 0x5c
 80096ca:	4620      	mov	r0, r4
 80096cc:	f7ff fbd6 	bl	8008e7c <__d2b>
 80096d0:	ec49 8b18 	vmov	d8, r8, r9
 80096d4:	9016      	str	r0, [sp, #88]	; 0x58
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f43f af02 	beq.w	80094e0 <_strtod_l+0x488>
 80096dc:	2101      	movs	r1, #1
 80096de:	4620      	mov	r0, r4
 80096e0:	f7ff f930 	bl	8008944 <__i2b>
 80096e4:	4683      	mov	fp, r0
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f43f aefa 	beq.w	80094e0 <_strtod_l+0x488>
 80096ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80096ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80096f0:	2e00      	cmp	r6, #0
 80096f2:	bfab      	itete	ge
 80096f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80096f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80096f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80096fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80096fe:	bfac      	ite	ge
 8009700:	eb06 0a03 	addge.w	sl, r6, r3
 8009704:	1b9f      	sublt	r7, r3, r6
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	1af6      	subs	r6, r6, r3
 800970a:	4416      	add	r6, r2
 800970c:	4ba0      	ldr	r3, [pc, #640]	; (8009990 <_strtod_l+0x938>)
 800970e:	3e01      	subs	r6, #1
 8009710:	429e      	cmp	r6, r3
 8009712:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009716:	f280 80c4 	bge.w	80098a2 <_strtod_l+0x84a>
 800971a:	1b9b      	subs	r3, r3, r6
 800971c:	2b1f      	cmp	r3, #31
 800971e:	eba2 0203 	sub.w	r2, r2, r3
 8009722:	f04f 0101 	mov.w	r1, #1
 8009726:	f300 80b0 	bgt.w	800988a <_strtod_l+0x832>
 800972a:	fa01 f303 	lsl.w	r3, r1, r3
 800972e:	930e      	str	r3, [sp, #56]	; 0x38
 8009730:	2300      	movs	r3, #0
 8009732:	930d      	str	r3, [sp, #52]	; 0x34
 8009734:	eb0a 0602 	add.w	r6, sl, r2
 8009738:	9b04      	ldr	r3, [sp, #16]
 800973a:	45b2      	cmp	sl, r6
 800973c:	4417      	add	r7, r2
 800973e:	441f      	add	r7, r3
 8009740:	4653      	mov	r3, sl
 8009742:	bfa8      	it	ge
 8009744:	4633      	movge	r3, r6
 8009746:	42bb      	cmp	r3, r7
 8009748:	bfa8      	it	ge
 800974a:	463b      	movge	r3, r7
 800974c:	2b00      	cmp	r3, #0
 800974e:	bfc2      	ittt	gt
 8009750:	1af6      	subgt	r6, r6, r3
 8009752:	1aff      	subgt	r7, r7, r3
 8009754:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800975a:	2b00      	cmp	r3, #0
 800975c:	dd17      	ble.n	800978e <_strtod_l+0x736>
 800975e:	4659      	mov	r1, fp
 8009760:	461a      	mov	r2, r3
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff f9ae 	bl	8008ac4 <__pow5mult>
 8009768:	4683      	mov	fp, r0
 800976a:	2800      	cmp	r0, #0
 800976c:	f43f aeb8 	beq.w	80094e0 <_strtod_l+0x488>
 8009770:	4601      	mov	r1, r0
 8009772:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009774:	4620      	mov	r0, r4
 8009776:	f7ff f8fb 	bl	8008970 <__multiply>
 800977a:	900b      	str	r0, [sp, #44]	; 0x2c
 800977c:	2800      	cmp	r0, #0
 800977e:	f43f aeaf 	beq.w	80094e0 <_strtod_l+0x488>
 8009782:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009784:	4620      	mov	r0, r4
 8009786:	f7fe ffdd 	bl	8008744 <_Bfree>
 800978a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800978c:	9316      	str	r3, [sp, #88]	; 0x58
 800978e:	2e00      	cmp	r6, #0
 8009790:	f300 808c 	bgt.w	80098ac <_strtod_l+0x854>
 8009794:	9b08      	ldr	r3, [sp, #32]
 8009796:	2b00      	cmp	r3, #0
 8009798:	dd08      	ble.n	80097ac <_strtod_l+0x754>
 800979a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800979c:	9905      	ldr	r1, [sp, #20]
 800979e:	4620      	mov	r0, r4
 80097a0:	f7ff f990 	bl	8008ac4 <__pow5mult>
 80097a4:	9005      	str	r0, [sp, #20]
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f ae9a 	beq.w	80094e0 <_strtod_l+0x488>
 80097ac:	2f00      	cmp	r7, #0
 80097ae:	dd08      	ble.n	80097c2 <_strtod_l+0x76a>
 80097b0:	9905      	ldr	r1, [sp, #20]
 80097b2:	463a      	mov	r2, r7
 80097b4:	4620      	mov	r0, r4
 80097b6:	f7ff f9df 	bl	8008b78 <__lshift>
 80097ba:	9005      	str	r0, [sp, #20]
 80097bc:	2800      	cmp	r0, #0
 80097be:	f43f ae8f 	beq.w	80094e0 <_strtod_l+0x488>
 80097c2:	f1ba 0f00 	cmp.w	sl, #0
 80097c6:	dd08      	ble.n	80097da <_strtod_l+0x782>
 80097c8:	4659      	mov	r1, fp
 80097ca:	4652      	mov	r2, sl
 80097cc:	4620      	mov	r0, r4
 80097ce:	f7ff f9d3 	bl	8008b78 <__lshift>
 80097d2:	4683      	mov	fp, r0
 80097d4:	2800      	cmp	r0, #0
 80097d6:	f43f ae83 	beq.w	80094e0 <_strtod_l+0x488>
 80097da:	9a05      	ldr	r2, [sp, #20]
 80097dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80097de:	4620      	mov	r0, r4
 80097e0:	f7ff fa52 	bl	8008c88 <__mdiff>
 80097e4:	4605      	mov	r5, r0
 80097e6:	2800      	cmp	r0, #0
 80097e8:	f43f ae7a 	beq.w	80094e0 <_strtod_l+0x488>
 80097ec:	68c3      	ldr	r3, [r0, #12]
 80097ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80097f0:	2300      	movs	r3, #0
 80097f2:	60c3      	str	r3, [r0, #12]
 80097f4:	4659      	mov	r1, fp
 80097f6:	f7ff fa2b 	bl	8008c50 <__mcmp>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	da60      	bge.n	80098c0 <_strtod_l+0x868>
 80097fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009800:	ea53 0308 	orrs.w	r3, r3, r8
 8009804:	f040 8084 	bne.w	8009910 <_strtod_l+0x8b8>
 8009808:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800980c:	2b00      	cmp	r3, #0
 800980e:	d17f      	bne.n	8009910 <_strtod_l+0x8b8>
 8009810:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009814:	0d1b      	lsrs	r3, r3, #20
 8009816:	051b      	lsls	r3, r3, #20
 8009818:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800981c:	d978      	bls.n	8009910 <_strtod_l+0x8b8>
 800981e:	696b      	ldr	r3, [r5, #20]
 8009820:	b913      	cbnz	r3, 8009828 <_strtod_l+0x7d0>
 8009822:	692b      	ldr	r3, [r5, #16]
 8009824:	2b01      	cmp	r3, #1
 8009826:	dd73      	ble.n	8009910 <_strtod_l+0x8b8>
 8009828:	4629      	mov	r1, r5
 800982a:	2201      	movs	r2, #1
 800982c:	4620      	mov	r0, r4
 800982e:	f7ff f9a3 	bl	8008b78 <__lshift>
 8009832:	4659      	mov	r1, fp
 8009834:	4605      	mov	r5, r0
 8009836:	f7ff fa0b 	bl	8008c50 <__mcmp>
 800983a:	2800      	cmp	r0, #0
 800983c:	dd68      	ble.n	8009910 <_strtod_l+0x8b8>
 800983e:	9904      	ldr	r1, [sp, #16]
 8009840:	4a54      	ldr	r2, [pc, #336]	; (8009994 <_strtod_l+0x93c>)
 8009842:	464b      	mov	r3, r9
 8009844:	2900      	cmp	r1, #0
 8009846:	f000 8084 	beq.w	8009952 <_strtod_l+0x8fa>
 800984a:	ea02 0109 	and.w	r1, r2, r9
 800984e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009852:	dc7e      	bgt.n	8009952 <_strtod_l+0x8fa>
 8009854:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009858:	f77f aeb3 	ble.w	80095c2 <_strtod_l+0x56a>
 800985c:	4b4e      	ldr	r3, [pc, #312]	; (8009998 <_strtod_l+0x940>)
 800985e:	4640      	mov	r0, r8
 8009860:	4649      	mov	r1, r9
 8009862:	2200      	movs	r2, #0
 8009864:	f7f6 fed0 	bl	8000608 <__aeabi_dmul>
 8009868:	4b4a      	ldr	r3, [pc, #296]	; (8009994 <_strtod_l+0x93c>)
 800986a:	400b      	ands	r3, r1
 800986c:	4680      	mov	r8, r0
 800986e:	4689      	mov	r9, r1
 8009870:	2b00      	cmp	r3, #0
 8009872:	f47f ae3f 	bne.w	80094f4 <_strtod_l+0x49c>
 8009876:	2322      	movs	r3, #34	; 0x22
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	e63b      	b.n	80094f4 <_strtod_l+0x49c>
 800987c:	f04f 32ff 	mov.w	r2, #4294967295
 8009880:	fa02 f303 	lsl.w	r3, r2, r3
 8009884:	ea03 0808 	and.w	r8, r3, r8
 8009888:	e6e8      	b.n	800965c <_strtod_l+0x604>
 800988a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800988e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009892:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009896:	36e2      	adds	r6, #226	; 0xe2
 8009898:	fa01 f306 	lsl.w	r3, r1, r6
 800989c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80098a0:	e748      	b.n	8009734 <_strtod_l+0x6dc>
 80098a2:	2100      	movs	r1, #0
 80098a4:	2301      	movs	r3, #1
 80098a6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80098aa:	e743      	b.n	8009734 <_strtod_l+0x6dc>
 80098ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098ae:	4632      	mov	r2, r6
 80098b0:	4620      	mov	r0, r4
 80098b2:	f7ff f961 	bl	8008b78 <__lshift>
 80098b6:	9016      	str	r0, [sp, #88]	; 0x58
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f47f af6b 	bne.w	8009794 <_strtod_l+0x73c>
 80098be:	e60f      	b.n	80094e0 <_strtod_l+0x488>
 80098c0:	46ca      	mov	sl, r9
 80098c2:	d171      	bne.n	80099a8 <_strtod_l+0x950>
 80098c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098ca:	b352      	cbz	r2, 8009922 <_strtod_l+0x8ca>
 80098cc:	4a33      	ldr	r2, [pc, #204]	; (800999c <_strtod_l+0x944>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d12a      	bne.n	8009928 <_strtod_l+0x8d0>
 80098d2:	9b04      	ldr	r3, [sp, #16]
 80098d4:	4641      	mov	r1, r8
 80098d6:	b1fb      	cbz	r3, 8009918 <_strtod_l+0x8c0>
 80098d8:	4b2e      	ldr	r3, [pc, #184]	; (8009994 <_strtod_l+0x93c>)
 80098da:	ea09 0303 	and.w	r3, r9, r3
 80098de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098e2:	f04f 32ff 	mov.w	r2, #4294967295
 80098e6:	d81a      	bhi.n	800991e <_strtod_l+0x8c6>
 80098e8:	0d1b      	lsrs	r3, r3, #20
 80098ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098ee:	fa02 f303 	lsl.w	r3, r2, r3
 80098f2:	4299      	cmp	r1, r3
 80098f4:	d118      	bne.n	8009928 <_strtod_l+0x8d0>
 80098f6:	4b2a      	ldr	r3, [pc, #168]	; (80099a0 <_strtod_l+0x948>)
 80098f8:	459a      	cmp	sl, r3
 80098fa:	d102      	bne.n	8009902 <_strtod_l+0x8aa>
 80098fc:	3101      	adds	r1, #1
 80098fe:	f43f adef 	beq.w	80094e0 <_strtod_l+0x488>
 8009902:	4b24      	ldr	r3, [pc, #144]	; (8009994 <_strtod_l+0x93c>)
 8009904:	ea0a 0303 	and.w	r3, sl, r3
 8009908:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800990c:	f04f 0800 	mov.w	r8, #0
 8009910:	9b04      	ldr	r3, [sp, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1a2      	bne.n	800985c <_strtod_l+0x804>
 8009916:	e5ed      	b.n	80094f4 <_strtod_l+0x49c>
 8009918:	f04f 33ff 	mov.w	r3, #4294967295
 800991c:	e7e9      	b.n	80098f2 <_strtod_l+0x89a>
 800991e:	4613      	mov	r3, r2
 8009920:	e7e7      	b.n	80098f2 <_strtod_l+0x89a>
 8009922:	ea53 0308 	orrs.w	r3, r3, r8
 8009926:	d08a      	beq.n	800983e <_strtod_l+0x7e6>
 8009928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800992a:	b1e3      	cbz	r3, 8009966 <_strtod_l+0x90e>
 800992c:	ea13 0f0a 	tst.w	r3, sl
 8009930:	d0ee      	beq.n	8009910 <_strtod_l+0x8b8>
 8009932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009934:	9a04      	ldr	r2, [sp, #16]
 8009936:	4640      	mov	r0, r8
 8009938:	4649      	mov	r1, r9
 800993a:	b1c3      	cbz	r3, 800996e <_strtod_l+0x916>
 800993c:	f7ff fb6f 	bl	800901e <sulp>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	ec51 0b18 	vmov	r0, r1, d8
 8009948:	f7f6 fca8 	bl	800029c <__adddf3>
 800994c:	4680      	mov	r8, r0
 800994e:	4689      	mov	r9, r1
 8009950:	e7de      	b.n	8009910 <_strtod_l+0x8b8>
 8009952:	4013      	ands	r3, r2
 8009954:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009958:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800995c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009960:	f04f 38ff 	mov.w	r8, #4294967295
 8009964:	e7d4      	b.n	8009910 <_strtod_l+0x8b8>
 8009966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009968:	ea13 0f08 	tst.w	r3, r8
 800996c:	e7e0      	b.n	8009930 <_strtod_l+0x8d8>
 800996e:	f7ff fb56 	bl	800901e <sulp>
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	ec51 0b18 	vmov	r0, r1, d8
 800997a:	f7f6 fc8d 	bl	8000298 <__aeabi_dsub>
 800997e:	2200      	movs	r2, #0
 8009980:	2300      	movs	r3, #0
 8009982:	4680      	mov	r8, r0
 8009984:	4689      	mov	r9, r1
 8009986:	f7f7 f8a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800998a:	2800      	cmp	r0, #0
 800998c:	d0c0      	beq.n	8009910 <_strtod_l+0x8b8>
 800998e:	e618      	b.n	80095c2 <_strtod_l+0x56a>
 8009990:	fffffc02 	.word	0xfffffc02
 8009994:	7ff00000 	.word	0x7ff00000
 8009998:	39500000 	.word	0x39500000
 800999c:	000fffff 	.word	0x000fffff
 80099a0:	7fefffff 	.word	0x7fefffff
 80099a4:	0800b8a8 	.word	0x0800b8a8
 80099a8:	4659      	mov	r1, fp
 80099aa:	4628      	mov	r0, r5
 80099ac:	f7ff fac0 	bl	8008f30 <__ratio>
 80099b0:	ec57 6b10 	vmov	r6, r7, d0
 80099b4:	ee10 0a10 	vmov	r0, s0
 80099b8:	2200      	movs	r2, #0
 80099ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80099be:	4639      	mov	r1, r7
 80099c0:	f7f7 f89e 	bl	8000b00 <__aeabi_dcmple>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d071      	beq.n	8009aac <_strtod_l+0xa54>
 80099c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d17c      	bne.n	8009ac8 <_strtod_l+0xa70>
 80099ce:	f1b8 0f00 	cmp.w	r8, #0
 80099d2:	d15a      	bne.n	8009a8a <_strtod_l+0xa32>
 80099d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d15d      	bne.n	8009a98 <_strtod_l+0xa40>
 80099dc:	4b90      	ldr	r3, [pc, #576]	; (8009c20 <_strtod_l+0xbc8>)
 80099de:	2200      	movs	r2, #0
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f7 f882 	bl	8000aec <__aeabi_dcmplt>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d15c      	bne.n	8009aa6 <_strtod_l+0xa4e>
 80099ec:	4630      	mov	r0, r6
 80099ee:	4639      	mov	r1, r7
 80099f0:	4b8c      	ldr	r3, [pc, #560]	; (8009c24 <_strtod_l+0xbcc>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	f7f6 fe08 	bl	8000608 <__aeabi_dmul>
 80099f8:	4606      	mov	r6, r0
 80099fa:	460f      	mov	r7, r1
 80099fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009a00:	9606      	str	r6, [sp, #24]
 8009a02:	9307      	str	r3, [sp, #28]
 8009a04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009a0c:	4b86      	ldr	r3, [pc, #536]	; (8009c28 <_strtod_l+0xbd0>)
 8009a0e:	ea0a 0303 	and.w	r3, sl, r3
 8009a12:	930d      	str	r3, [sp, #52]	; 0x34
 8009a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a16:	4b85      	ldr	r3, [pc, #532]	; (8009c2c <_strtod_l+0xbd4>)
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	f040 8090 	bne.w	8009b3e <_strtod_l+0xae6>
 8009a1e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009a22:	ec49 8b10 	vmov	d0, r8, r9
 8009a26:	f7ff f9b9 	bl	8008d9c <__ulp>
 8009a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a2e:	ec51 0b10 	vmov	r0, r1, d0
 8009a32:	f7f6 fde9 	bl	8000608 <__aeabi_dmul>
 8009a36:	4642      	mov	r2, r8
 8009a38:	464b      	mov	r3, r9
 8009a3a:	f7f6 fc2f 	bl	800029c <__adddf3>
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4979      	ldr	r1, [pc, #484]	; (8009c28 <_strtod_l+0xbd0>)
 8009a42:	4a7b      	ldr	r2, [pc, #492]	; (8009c30 <_strtod_l+0xbd8>)
 8009a44:	4019      	ands	r1, r3
 8009a46:	4291      	cmp	r1, r2
 8009a48:	4680      	mov	r8, r0
 8009a4a:	d944      	bls.n	8009ad6 <_strtod_l+0xa7e>
 8009a4c:	ee18 2a90 	vmov	r2, s17
 8009a50:	4b78      	ldr	r3, [pc, #480]	; (8009c34 <_strtod_l+0xbdc>)
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d104      	bne.n	8009a60 <_strtod_l+0xa08>
 8009a56:	ee18 3a10 	vmov	r3, s16
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	f43f ad40 	beq.w	80094e0 <_strtod_l+0x488>
 8009a60:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009c34 <_strtod_l+0xbdc>
 8009a64:	f04f 38ff 	mov.w	r8, #4294967295
 8009a68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f7fe fe6a 	bl	8008744 <_Bfree>
 8009a70:	9905      	ldr	r1, [sp, #20]
 8009a72:	4620      	mov	r0, r4
 8009a74:	f7fe fe66 	bl	8008744 <_Bfree>
 8009a78:	4659      	mov	r1, fp
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f7fe fe62 	bl	8008744 <_Bfree>
 8009a80:	4629      	mov	r1, r5
 8009a82:	4620      	mov	r0, r4
 8009a84:	f7fe fe5e 	bl	8008744 <_Bfree>
 8009a88:	e609      	b.n	800969e <_strtod_l+0x646>
 8009a8a:	f1b8 0f01 	cmp.w	r8, #1
 8009a8e:	d103      	bne.n	8009a98 <_strtod_l+0xa40>
 8009a90:	f1b9 0f00 	cmp.w	r9, #0
 8009a94:	f43f ad95 	beq.w	80095c2 <_strtod_l+0x56a>
 8009a98:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009bf0 <_strtod_l+0xb98>
 8009a9c:	4f60      	ldr	r7, [pc, #384]	; (8009c20 <_strtod_l+0xbc8>)
 8009a9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009aa2:	2600      	movs	r6, #0
 8009aa4:	e7ae      	b.n	8009a04 <_strtod_l+0x9ac>
 8009aa6:	4f5f      	ldr	r7, [pc, #380]	; (8009c24 <_strtod_l+0xbcc>)
 8009aa8:	2600      	movs	r6, #0
 8009aaa:	e7a7      	b.n	80099fc <_strtod_l+0x9a4>
 8009aac:	4b5d      	ldr	r3, [pc, #372]	; (8009c24 <_strtod_l+0xbcc>)
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f7f6 fda8 	bl	8000608 <__aeabi_dmul>
 8009ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aba:	4606      	mov	r6, r0
 8009abc:	460f      	mov	r7, r1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d09c      	beq.n	80099fc <_strtod_l+0x9a4>
 8009ac2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009ac6:	e79d      	b.n	8009a04 <_strtod_l+0x9ac>
 8009ac8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009bf8 <_strtod_l+0xba0>
 8009acc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009ad0:	ec57 6b17 	vmov	r6, r7, d7
 8009ad4:	e796      	b.n	8009a04 <_strtod_l+0x9ac>
 8009ad6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	46ca      	mov	sl, r9
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1c2      	bne.n	8009a68 <_strtod_l+0xa10>
 8009ae2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ae8:	0d1b      	lsrs	r3, r3, #20
 8009aea:	051b      	lsls	r3, r3, #20
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d1bb      	bne.n	8009a68 <_strtod_l+0xa10>
 8009af0:	4630      	mov	r0, r6
 8009af2:	4639      	mov	r1, r7
 8009af4:	f7f7 f8e8 	bl	8000cc8 <__aeabi_d2lz>
 8009af8:	f7f6 fd58 	bl	80005ac <__aeabi_l2d>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4630      	mov	r0, r6
 8009b02:	4639      	mov	r1, r7
 8009b04:	f7f6 fbc8 	bl	8000298 <__aeabi_dsub>
 8009b08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b0e:	ea43 0308 	orr.w	r3, r3, r8
 8009b12:	4313      	orrs	r3, r2
 8009b14:	4606      	mov	r6, r0
 8009b16:	460f      	mov	r7, r1
 8009b18:	d054      	beq.n	8009bc4 <_strtod_l+0xb6c>
 8009b1a:	a339      	add	r3, pc, #228	; (adr r3, 8009c00 <_strtod_l+0xba8>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	f7f6 ffe4 	bl	8000aec <__aeabi_dcmplt>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	f47f ace5 	bne.w	80094f4 <_strtod_l+0x49c>
 8009b2a:	a337      	add	r3, pc, #220	; (adr r3, 8009c08 <_strtod_l+0xbb0>)
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	f7f6 fff8 	bl	8000b28 <__aeabi_dcmpgt>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d095      	beq.n	8009a68 <_strtod_l+0xa10>
 8009b3c:	e4da      	b.n	80094f4 <_strtod_l+0x49c>
 8009b3e:	9b04      	ldr	r3, [sp, #16]
 8009b40:	b333      	cbz	r3, 8009b90 <_strtod_l+0xb38>
 8009b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b48:	d822      	bhi.n	8009b90 <_strtod_l+0xb38>
 8009b4a:	a331      	add	r3, pc, #196	; (adr r3, 8009c10 <_strtod_l+0xbb8>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	4630      	mov	r0, r6
 8009b52:	4639      	mov	r1, r7
 8009b54:	f7f6 ffd4 	bl	8000b00 <__aeabi_dcmple>
 8009b58:	b1a0      	cbz	r0, 8009b84 <_strtod_l+0xb2c>
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f7f7 f82b 	bl	8000bb8 <__aeabi_d2uiz>
 8009b62:	2801      	cmp	r0, #1
 8009b64:	bf38      	it	cc
 8009b66:	2001      	movcc	r0, #1
 8009b68:	f7f6 fcd4 	bl	8000514 <__aeabi_ui2d>
 8009b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460f      	mov	r7, r1
 8009b72:	bb23      	cbnz	r3, 8009bbe <_strtod_l+0xb66>
 8009b74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b78:	9010      	str	r0, [sp, #64]	; 0x40
 8009b7a:	9311      	str	r3, [sp, #68]	; 0x44
 8009b7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009b8c:	1a9b      	subs	r3, r3, r2
 8009b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009b94:	eeb0 0a48 	vmov.f32	s0, s16
 8009b98:	eef0 0a68 	vmov.f32	s1, s17
 8009b9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009ba0:	f7ff f8fc 	bl	8008d9c <__ulp>
 8009ba4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009ba8:	ec53 2b10 	vmov	r2, r3, d0
 8009bac:	f7f6 fd2c 	bl	8000608 <__aeabi_dmul>
 8009bb0:	ec53 2b18 	vmov	r2, r3, d8
 8009bb4:	f7f6 fb72 	bl	800029c <__adddf3>
 8009bb8:	4680      	mov	r8, r0
 8009bba:	4689      	mov	r9, r1
 8009bbc:	e78d      	b.n	8009ada <_strtod_l+0xa82>
 8009bbe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009bc2:	e7db      	b.n	8009b7c <_strtod_l+0xb24>
 8009bc4:	a314      	add	r3, pc, #80	; (adr r3, 8009c18 <_strtod_l+0xbc0>)
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	f7f6 ff8f 	bl	8000aec <__aeabi_dcmplt>
 8009bce:	e7b3      	b.n	8009b38 <_strtod_l+0xae0>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8009bd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	f7ff ba7c 	b.w	80090d6 <_strtod_l+0x7e>
 8009bde:	2a65      	cmp	r2, #101	; 0x65
 8009be0:	f43f ab75 	beq.w	80092ce <_strtod_l+0x276>
 8009be4:	2a45      	cmp	r2, #69	; 0x45
 8009be6:	f43f ab72 	beq.w	80092ce <_strtod_l+0x276>
 8009bea:	2301      	movs	r3, #1
 8009bec:	f7ff bbaa 	b.w	8009344 <_strtod_l+0x2ec>
 8009bf0:	00000000 	.word	0x00000000
 8009bf4:	bff00000 	.word	0xbff00000
 8009bf8:	00000000 	.word	0x00000000
 8009bfc:	3ff00000 	.word	0x3ff00000
 8009c00:	94a03595 	.word	0x94a03595
 8009c04:	3fdfffff 	.word	0x3fdfffff
 8009c08:	35afe535 	.word	0x35afe535
 8009c0c:	3fe00000 	.word	0x3fe00000
 8009c10:	ffc00000 	.word	0xffc00000
 8009c14:	41dfffff 	.word	0x41dfffff
 8009c18:	94a03595 	.word	0x94a03595
 8009c1c:	3fcfffff 	.word	0x3fcfffff
 8009c20:	3ff00000 	.word	0x3ff00000
 8009c24:	3fe00000 	.word	0x3fe00000
 8009c28:	7ff00000 	.word	0x7ff00000
 8009c2c:	7fe00000 	.word	0x7fe00000
 8009c30:	7c9fffff 	.word	0x7c9fffff
 8009c34:	7fefffff 	.word	0x7fefffff

08009c38 <_strtod_r>:
 8009c38:	4b01      	ldr	r3, [pc, #4]	; (8009c40 <_strtod_r+0x8>)
 8009c3a:	f7ff ba0d 	b.w	8009058 <_strtod_l>
 8009c3e:	bf00      	nop
 8009c40:	20000100 	.word	0x20000100

08009c44 <__ssputs_r>:
 8009c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c48:	688e      	ldr	r6, [r1, #8]
 8009c4a:	461f      	mov	r7, r3
 8009c4c:	42be      	cmp	r6, r7
 8009c4e:	680b      	ldr	r3, [r1, #0]
 8009c50:	4682      	mov	sl, r0
 8009c52:	460c      	mov	r4, r1
 8009c54:	4690      	mov	r8, r2
 8009c56:	d82c      	bhi.n	8009cb2 <__ssputs_r+0x6e>
 8009c58:	898a      	ldrh	r2, [r1, #12]
 8009c5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c5e:	d026      	beq.n	8009cae <__ssputs_r+0x6a>
 8009c60:	6965      	ldr	r5, [r4, #20]
 8009c62:	6909      	ldr	r1, [r1, #16]
 8009c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c68:	eba3 0901 	sub.w	r9, r3, r1
 8009c6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c70:	1c7b      	adds	r3, r7, #1
 8009c72:	444b      	add	r3, r9
 8009c74:	106d      	asrs	r5, r5, #1
 8009c76:	429d      	cmp	r5, r3
 8009c78:	bf38      	it	cc
 8009c7a:	461d      	movcc	r5, r3
 8009c7c:	0553      	lsls	r3, r2, #21
 8009c7e:	d527      	bpl.n	8009cd0 <__ssputs_r+0x8c>
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7fe fc93 	bl	80085ac <_malloc_r>
 8009c86:	4606      	mov	r6, r0
 8009c88:	b360      	cbz	r0, 8009ce4 <__ssputs_r+0xa0>
 8009c8a:	6921      	ldr	r1, [r4, #16]
 8009c8c:	464a      	mov	r2, r9
 8009c8e:	f000 fa1b 	bl	800a0c8 <memcpy>
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c9c:	81a3      	strh	r3, [r4, #12]
 8009c9e:	6126      	str	r6, [r4, #16]
 8009ca0:	6165      	str	r5, [r4, #20]
 8009ca2:	444e      	add	r6, r9
 8009ca4:	eba5 0509 	sub.w	r5, r5, r9
 8009ca8:	6026      	str	r6, [r4, #0]
 8009caa:	60a5      	str	r5, [r4, #8]
 8009cac:	463e      	mov	r6, r7
 8009cae:	42be      	cmp	r6, r7
 8009cb0:	d900      	bls.n	8009cb4 <__ssputs_r+0x70>
 8009cb2:	463e      	mov	r6, r7
 8009cb4:	6820      	ldr	r0, [r4, #0]
 8009cb6:	4632      	mov	r2, r6
 8009cb8:	4641      	mov	r1, r8
 8009cba:	f000 f9c9 	bl	800a050 <memmove>
 8009cbe:	68a3      	ldr	r3, [r4, #8]
 8009cc0:	1b9b      	subs	r3, r3, r6
 8009cc2:	60a3      	str	r3, [r4, #8]
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	4433      	add	r3, r6
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	f000 fdae 	bl	800a832 <_realloc_r>
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d1e0      	bne.n	8009c9e <__ssputs_r+0x5a>
 8009cdc:	6921      	ldr	r1, [r4, #16]
 8009cde:	4650      	mov	r0, sl
 8009ce0:	f7fe fbf0 	bl	80084c4 <_free_r>
 8009ce4:	230c      	movs	r3, #12
 8009ce6:	f8ca 3000 	str.w	r3, [sl]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf6:	e7e9      	b.n	8009ccc <__ssputs_r+0x88>

08009cf8 <_svfiprintf_r>:
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	4698      	mov	r8, r3
 8009cfe:	898b      	ldrh	r3, [r1, #12]
 8009d00:	061b      	lsls	r3, r3, #24
 8009d02:	b09d      	sub	sp, #116	; 0x74
 8009d04:	4607      	mov	r7, r0
 8009d06:	460d      	mov	r5, r1
 8009d08:	4614      	mov	r4, r2
 8009d0a:	d50e      	bpl.n	8009d2a <_svfiprintf_r+0x32>
 8009d0c:	690b      	ldr	r3, [r1, #16]
 8009d0e:	b963      	cbnz	r3, 8009d2a <_svfiprintf_r+0x32>
 8009d10:	2140      	movs	r1, #64	; 0x40
 8009d12:	f7fe fc4b 	bl	80085ac <_malloc_r>
 8009d16:	6028      	str	r0, [r5, #0]
 8009d18:	6128      	str	r0, [r5, #16]
 8009d1a:	b920      	cbnz	r0, 8009d26 <_svfiprintf_r+0x2e>
 8009d1c:	230c      	movs	r3, #12
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	e0d0      	b.n	8009ec8 <_svfiprintf_r+0x1d0>
 8009d26:	2340      	movs	r3, #64	; 0x40
 8009d28:	616b      	str	r3, [r5, #20]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d2e:	2320      	movs	r3, #32
 8009d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d38:	2330      	movs	r3, #48	; 0x30
 8009d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ee0 <_svfiprintf_r+0x1e8>
 8009d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d42:	f04f 0901 	mov.w	r9, #1
 8009d46:	4623      	mov	r3, r4
 8009d48:	469a      	mov	sl, r3
 8009d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d4e:	b10a      	cbz	r2, 8009d54 <_svfiprintf_r+0x5c>
 8009d50:	2a25      	cmp	r2, #37	; 0x25
 8009d52:	d1f9      	bne.n	8009d48 <_svfiprintf_r+0x50>
 8009d54:	ebba 0b04 	subs.w	fp, sl, r4
 8009d58:	d00b      	beq.n	8009d72 <_svfiprintf_r+0x7a>
 8009d5a:	465b      	mov	r3, fp
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7ff ff6f 	bl	8009c44 <__ssputs_r>
 8009d66:	3001      	adds	r0, #1
 8009d68:	f000 80a9 	beq.w	8009ebe <_svfiprintf_r+0x1c6>
 8009d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d6e:	445a      	add	r2, fp
 8009d70:	9209      	str	r2, [sp, #36]	; 0x24
 8009d72:	f89a 3000 	ldrb.w	r3, [sl]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 80a1 	beq.w	8009ebe <_svfiprintf_r+0x1c6>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d86:	f10a 0a01 	add.w	sl, sl, #1
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	9307      	str	r3, [sp, #28]
 8009d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d92:	931a      	str	r3, [sp, #104]	; 0x68
 8009d94:	4654      	mov	r4, sl
 8009d96:	2205      	movs	r2, #5
 8009d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d9c:	4850      	ldr	r0, [pc, #320]	; (8009ee0 <_svfiprintf_r+0x1e8>)
 8009d9e:	f7f6 fa1f 	bl	80001e0 <memchr>
 8009da2:	9a04      	ldr	r2, [sp, #16]
 8009da4:	b9d8      	cbnz	r0, 8009dde <_svfiprintf_r+0xe6>
 8009da6:	06d0      	lsls	r0, r2, #27
 8009da8:	bf44      	itt	mi
 8009daa:	2320      	movmi	r3, #32
 8009dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009db0:	0711      	lsls	r1, r2, #28
 8009db2:	bf44      	itt	mi
 8009db4:	232b      	movmi	r3, #43	; 0x2b
 8009db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dba:	f89a 3000 	ldrb.w	r3, [sl]
 8009dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc0:	d015      	beq.n	8009dee <_svfiprintf_r+0xf6>
 8009dc2:	9a07      	ldr	r2, [sp, #28]
 8009dc4:	4654      	mov	r4, sl
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	f04f 0c0a 	mov.w	ip, #10
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dd2:	3b30      	subs	r3, #48	; 0x30
 8009dd4:	2b09      	cmp	r3, #9
 8009dd6:	d94d      	bls.n	8009e74 <_svfiprintf_r+0x17c>
 8009dd8:	b1b0      	cbz	r0, 8009e08 <_svfiprintf_r+0x110>
 8009dda:	9207      	str	r2, [sp, #28]
 8009ddc:	e014      	b.n	8009e08 <_svfiprintf_r+0x110>
 8009dde:	eba0 0308 	sub.w	r3, r0, r8
 8009de2:	fa09 f303 	lsl.w	r3, r9, r3
 8009de6:	4313      	orrs	r3, r2
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	46a2      	mov	sl, r4
 8009dec:	e7d2      	b.n	8009d94 <_svfiprintf_r+0x9c>
 8009dee:	9b03      	ldr	r3, [sp, #12]
 8009df0:	1d19      	adds	r1, r3, #4
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	9103      	str	r1, [sp, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	bfbb      	ittet	lt
 8009dfa:	425b      	neglt	r3, r3
 8009dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8009e00:	9307      	strge	r3, [sp, #28]
 8009e02:	9307      	strlt	r3, [sp, #28]
 8009e04:	bfb8      	it	lt
 8009e06:	9204      	strlt	r2, [sp, #16]
 8009e08:	7823      	ldrb	r3, [r4, #0]
 8009e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e0c:	d10c      	bne.n	8009e28 <_svfiprintf_r+0x130>
 8009e0e:	7863      	ldrb	r3, [r4, #1]
 8009e10:	2b2a      	cmp	r3, #42	; 0x2a
 8009e12:	d134      	bne.n	8009e7e <_svfiprintf_r+0x186>
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	1d1a      	adds	r2, r3, #4
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	9203      	str	r2, [sp, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bfb8      	it	lt
 8009e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e24:	3402      	adds	r4, #2
 8009e26:	9305      	str	r3, [sp, #20]
 8009e28:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ef0 <_svfiprintf_r+0x1f8>
 8009e2c:	7821      	ldrb	r1, [r4, #0]
 8009e2e:	2203      	movs	r2, #3
 8009e30:	4650      	mov	r0, sl
 8009e32:	f7f6 f9d5 	bl	80001e0 <memchr>
 8009e36:	b138      	cbz	r0, 8009e48 <_svfiprintf_r+0x150>
 8009e38:	9b04      	ldr	r3, [sp, #16]
 8009e3a:	eba0 000a 	sub.w	r0, r0, sl
 8009e3e:	2240      	movs	r2, #64	; 0x40
 8009e40:	4082      	lsls	r2, r0
 8009e42:	4313      	orrs	r3, r2
 8009e44:	3401      	adds	r4, #1
 8009e46:	9304      	str	r3, [sp, #16]
 8009e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e4c:	4825      	ldr	r0, [pc, #148]	; (8009ee4 <_svfiprintf_r+0x1ec>)
 8009e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e52:	2206      	movs	r2, #6
 8009e54:	f7f6 f9c4 	bl	80001e0 <memchr>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d038      	beq.n	8009ece <_svfiprintf_r+0x1d6>
 8009e5c:	4b22      	ldr	r3, [pc, #136]	; (8009ee8 <_svfiprintf_r+0x1f0>)
 8009e5e:	bb1b      	cbnz	r3, 8009ea8 <_svfiprintf_r+0x1b0>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	3307      	adds	r3, #7
 8009e64:	f023 0307 	bic.w	r3, r3, #7
 8009e68:	3308      	adds	r3, #8
 8009e6a:	9303      	str	r3, [sp, #12]
 8009e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6e:	4433      	add	r3, r6
 8009e70:	9309      	str	r3, [sp, #36]	; 0x24
 8009e72:	e768      	b.n	8009d46 <_svfiprintf_r+0x4e>
 8009e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e78:	460c      	mov	r4, r1
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	e7a6      	b.n	8009dcc <_svfiprintf_r+0xd4>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	3401      	adds	r4, #1
 8009e82:	9305      	str	r3, [sp, #20]
 8009e84:	4619      	mov	r1, r3
 8009e86:	f04f 0c0a 	mov.w	ip, #10
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e90:	3a30      	subs	r2, #48	; 0x30
 8009e92:	2a09      	cmp	r2, #9
 8009e94:	d903      	bls.n	8009e9e <_svfiprintf_r+0x1a6>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0c6      	beq.n	8009e28 <_svfiprintf_r+0x130>
 8009e9a:	9105      	str	r1, [sp, #20]
 8009e9c:	e7c4      	b.n	8009e28 <_svfiprintf_r+0x130>
 8009e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e7f0      	b.n	8009e8a <_svfiprintf_r+0x192>
 8009ea8:	ab03      	add	r3, sp, #12
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	462a      	mov	r2, r5
 8009eae:	4b0f      	ldr	r3, [pc, #60]	; (8009eec <_svfiprintf_r+0x1f4>)
 8009eb0:	a904      	add	r1, sp, #16
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	f7fc fcf4 	bl	80068a0 <_printf_float>
 8009eb8:	1c42      	adds	r2, r0, #1
 8009eba:	4606      	mov	r6, r0
 8009ebc:	d1d6      	bne.n	8009e6c <_svfiprintf_r+0x174>
 8009ebe:	89ab      	ldrh	r3, [r5, #12]
 8009ec0:	065b      	lsls	r3, r3, #25
 8009ec2:	f53f af2d 	bmi.w	8009d20 <_svfiprintf_r+0x28>
 8009ec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ec8:	b01d      	add	sp, #116	; 0x74
 8009eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ece:	ab03      	add	r3, sp, #12
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	462a      	mov	r2, r5
 8009ed4:	4b05      	ldr	r3, [pc, #20]	; (8009eec <_svfiprintf_r+0x1f4>)
 8009ed6:	a904      	add	r1, sp, #16
 8009ed8:	4638      	mov	r0, r7
 8009eda:	f7fc ff85 	bl	8006de8 <_printf_i>
 8009ede:	e7eb      	b.n	8009eb8 <_svfiprintf_r+0x1c0>
 8009ee0:	0800b8d0 	.word	0x0800b8d0
 8009ee4:	0800b8da 	.word	0x0800b8da
 8009ee8:	080068a1 	.word	0x080068a1
 8009eec:	08009c45 	.word	0x08009c45
 8009ef0:	0800b8d6 	.word	0x0800b8d6

08009ef4 <__sflush_r>:
 8009ef4:	898a      	ldrh	r2, [r1, #12]
 8009ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009efa:	4605      	mov	r5, r0
 8009efc:	0710      	lsls	r0, r2, #28
 8009efe:	460c      	mov	r4, r1
 8009f00:	d458      	bmi.n	8009fb4 <__sflush_r+0xc0>
 8009f02:	684b      	ldr	r3, [r1, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dc05      	bgt.n	8009f14 <__sflush_r+0x20>
 8009f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dc02      	bgt.n	8009f14 <__sflush_r+0x20>
 8009f0e:	2000      	movs	r0, #0
 8009f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f16:	2e00      	cmp	r6, #0
 8009f18:	d0f9      	beq.n	8009f0e <__sflush_r+0x1a>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f20:	682f      	ldr	r7, [r5, #0]
 8009f22:	6a21      	ldr	r1, [r4, #32]
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	d032      	beq.n	8009f8e <__sflush_r+0x9a>
 8009f28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	075a      	lsls	r2, r3, #29
 8009f2e:	d505      	bpl.n	8009f3c <__sflush_r+0x48>
 8009f30:	6863      	ldr	r3, [r4, #4]
 8009f32:	1ac0      	subs	r0, r0, r3
 8009f34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f36:	b10b      	cbz	r3, 8009f3c <__sflush_r+0x48>
 8009f38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f3a:	1ac0      	subs	r0, r0, r3
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f42:	6a21      	ldr	r1, [r4, #32]
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b0      	blx	r6
 8009f48:	1c43      	adds	r3, r0, #1
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	d106      	bne.n	8009f5c <__sflush_r+0x68>
 8009f4e:	6829      	ldr	r1, [r5, #0]
 8009f50:	291d      	cmp	r1, #29
 8009f52:	d82b      	bhi.n	8009fac <__sflush_r+0xb8>
 8009f54:	4a29      	ldr	r2, [pc, #164]	; (8009ffc <__sflush_r+0x108>)
 8009f56:	410a      	asrs	r2, r1
 8009f58:	07d6      	lsls	r6, r2, #31
 8009f5a:	d427      	bmi.n	8009fac <__sflush_r+0xb8>
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	6062      	str	r2, [r4, #4]
 8009f60:	04d9      	lsls	r1, r3, #19
 8009f62:	6922      	ldr	r2, [r4, #16]
 8009f64:	6022      	str	r2, [r4, #0]
 8009f66:	d504      	bpl.n	8009f72 <__sflush_r+0x7e>
 8009f68:	1c42      	adds	r2, r0, #1
 8009f6a:	d101      	bne.n	8009f70 <__sflush_r+0x7c>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b903      	cbnz	r3, 8009f72 <__sflush_r+0x7e>
 8009f70:	6560      	str	r0, [r4, #84]	; 0x54
 8009f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f74:	602f      	str	r7, [r5, #0]
 8009f76:	2900      	cmp	r1, #0
 8009f78:	d0c9      	beq.n	8009f0e <__sflush_r+0x1a>
 8009f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f7e:	4299      	cmp	r1, r3
 8009f80:	d002      	beq.n	8009f88 <__sflush_r+0x94>
 8009f82:	4628      	mov	r0, r5
 8009f84:	f7fe fa9e 	bl	80084c4 <_free_r>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	6360      	str	r0, [r4, #52]	; 0x34
 8009f8c:	e7c0      	b.n	8009f10 <__sflush_r+0x1c>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4628      	mov	r0, r5
 8009f92:	47b0      	blx	r6
 8009f94:	1c41      	adds	r1, r0, #1
 8009f96:	d1c8      	bne.n	8009f2a <__sflush_r+0x36>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0c5      	beq.n	8009f2a <__sflush_r+0x36>
 8009f9e:	2b1d      	cmp	r3, #29
 8009fa0:	d001      	beq.n	8009fa6 <__sflush_r+0xb2>
 8009fa2:	2b16      	cmp	r3, #22
 8009fa4:	d101      	bne.n	8009faa <__sflush_r+0xb6>
 8009fa6:	602f      	str	r7, [r5, #0]
 8009fa8:	e7b1      	b.n	8009f0e <__sflush_r+0x1a>
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	e7ad      	b.n	8009f10 <__sflush_r+0x1c>
 8009fb4:	690f      	ldr	r7, [r1, #16]
 8009fb6:	2f00      	cmp	r7, #0
 8009fb8:	d0a9      	beq.n	8009f0e <__sflush_r+0x1a>
 8009fba:	0793      	lsls	r3, r2, #30
 8009fbc:	680e      	ldr	r6, [r1, #0]
 8009fbe:	bf08      	it	eq
 8009fc0:	694b      	ldreq	r3, [r1, #20]
 8009fc2:	600f      	str	r7, [r1, #0]
 8009fc4:	bf18      	it	ne
 8009fc6:	2300      	movne	r3, #0
 8009fc8:	eba6 0807 	sub.w	r8, r6, r7
 8009fcc:	608b      	str	r3, [r1, #8]
 8009fce:	f1b8 0f00 	cmp.w	r8, #0
 8009fd2:	dd9c      	ble.n	8009f0e <__sflush_r+0x1a>
 8009fd4:	6a21      	ldr	r1, [r4, #32]
 8009fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fd8:	4643      	mov	r3, r8
 8009fda:	463a      	mov	r2, r7
 8009fdc:	4628      	mov	r0, r5
 8009fde:	47b0      	blx	r6
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	dc06      	bgt.n	8009ff2 <__sflush_r+0xfe>
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	e78e      	b.n	8009f10 <__sflush_r+0x1c>
 8009ff2:	4407      	add	r7, r0
 8009ff4:	eba8 0800 	sub.w	r8, r8, r0
 8009ff8:	e7e9      	b.n	8009fce <__sflush_r+0xda>
 8009ffa:	bf00      	nop
 8009ffc:	dfbffffe 	.word	0xdfbffffe

0800a000 <_fflush_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	690b      	ldr	r3, [r1, #16]
 800a004:	4605      	mov	r5, r0
 800a006:	460c      	mov	r4, r1
 800a008:	b913      	cbnz	r3, 800a010 <_fflush_r+0x10>
 800a00a:	2500      	movs	r5, #0
 800a00c:	4628      	mov	r0, r5
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	b118      	cbz	r0, 800a01a <_fflush_r+0x1a>
 800a012:	6a03      	ldr	r3, [r0, #32]
 800a014:	b90b      	cbnz	r3, 800a01a <_fflush_r+0x1a>
 800a016:	f7fd fa93 	bl	8007540 <__sinit>
 800a01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0f3      	beq.n	800a00a <_fflush_r+0xa>
 800a022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a024:	07d0      	lsls	r0, r2, #31
 800a026:	d404      	bmi.n	800a032 <_fflush_r+0x32>
 800a028:	0599      	lsls	r1, r3, #22
 800a02a:	d402      	bmi.n	800a032 <_fflush_r+0x32>
 800a02c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a02e:	f7fd fbc7 	bl	80077c0 <__retarget_lock_acquire_recursive>
 800a032:	4628      	mov	r0, r5
 800a034:	4621      	mov	r1, r4
 800a036:	f7ff ff5d 	bl	8009ef4 <__sflush_r>
 800a03a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a03c:	07da      	lsls	r2, r3, #31
 800a03e:	4605      	mov	r5, r0
 800a040:	d4e4      	bmi.n	800a00c <_fflush_r+0xc>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	059b      	lsls	r3, r3, #22
 800a046:	d4e1      	bmi.n	800a00c <_fflush_r+0xc>
 800a048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a04a:	f7fd fbba 	bl	80077c2 <__retarget_lock_release_recursive>
 800a04e:	e7dd      	b.n	800a00c <_fflush_r+0xc>

0800a050 <memmove>:
 800a050:	4288      	cmp	r0, r1
 800a052:	b510      	push	{r4, lr}
 800a054:	eb01 0402 	add.w	r4, r1, r2
 800a058:	d902      	bls.n	800a060 <memmove+0x10>
 800a05a:	4284      	cmp	r4, r0
 800a05c:	4623      	mov	r3, r4
 800a05e:	d807      	bhi.n	800a070 <memmove+0x20>
 800a060:	1e43      	subs	r3, r0, #1
 800a062:	42a1      	cmp	r1, r4
 800a064:	d008      	beq.n	800a078 <memmove+0x28>
 800a066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a06a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a06e:	e7f8      	b.n	800a062 <memmove+0x12>
 800a070:	4402      	add	r2, r0
 800a072:	4601      	mov	r1, r0
 800a074:	428a      	cmp	r2, r1
 800a076:	d100      	bne.n	800a07a <memmove+0x2a>
 800a078:	bd10      	pop	{r4, pc}
 800a07a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a07e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a082:	e7f7      	b.n	800a074 <memmove+0x24>

0800a084 <strncmp>:
 800a084:	b510      	push	{r4, lr}
 800a086:	b16a      	cbz	r2, 800a0a4 <strncmp+0x20>
 800a088:	3901      	subs	r1, #1
 800a08a:	1884      	adds	r4, r0, r2
 800a08c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a090:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a094:	429a      	cmp	r2, r3
 800a096:	d103      	bne.n	800a0a0 <strncmp+0x1c>
 800a098:	42a0      	cmp	r0, r4
 800a09a:	d001      	beq.n	800a0a0 <strncmp+0x1c>
 800a09c:	2a00      	cmp	r2, #0
 800a09e:	d1f5      	bne.n	800a08c <strncmp+0x8>
 800a0a0:	1ad0      	subs	r0, r2, r3
 800a0a2:	bd10      	pop	{r4, pc}
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	e7fc      	b.n	800a0a2 <strncmp+0x1e>

0800a0a8 <_sbrk_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	4d06      	ldr	r5, [pc, #24]	; (800a0c4 <_sbrk_r+0x1c>)
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	4608      	mov	r0, r1
 800a0b2:	602b      	str	r3, [r5, #0]
 800a0b4:	f7f8 f952 	bl	800235c <_sbrk>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d102      	bne.n	800a0c2 <_sbrk_r+0x1a>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	b103      	cbz	r3, 800a0c2 <_sbrk_r+0x1a>
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	200005dc 	.word	0x200005dc

0800a0c8 <memcpy>:
 800a0c8:	440a      	add	r2, r1
 800a0ca:	4291      	cmp	r1, r2
 800a0cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0d0:	d100      	bne.n	800a0d4 <memcpy+0xc>
 800a0d2:	4770      	bx	lr
 800a0d4:	b510      	push	{r4, lr}
 800a0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0de:	4291      	cmp	r1, r2
 800a0e0:	d1f9      	bne.n	800a0d6 <memcpy+0xe>
 800a0e2:	bd10      	pop	{r4, pc}
 800a0e4:	0000      	movs	r0, r0
	...

0800a0e8 <nan>:
 800a0e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0f0 <nan+0x8>
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	00000000 	.word	0x00000000
 800a0f4:	7ff80000 	.word	0x7ff80000

0800a0f8 <__assert_func>:
 800a0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0fa:	4614      	mov	r4, r2
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <__assert_func+0x2c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4605      	mov	r5, r0
 800a104:	68d8      	ldr	r0, [r3, #12]
 800a106:	b14c      	cbz	r4, 800a11c <__assert_func+0x24>
 800a108:	4b07      	ldr	r3, [pc, #28]	; (800a128 <__assert_func+0x30>)
 800a10a:	9100      	str	r1, [sp, #0]
 800a10c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a110:	4906      	ldr	r1, [pc, #24]	; (800a12c <__assert_func+0x34>)
 800a112:	462b      	mov	r3, r5
 800a114:	f000 fbca 	bl	800a8ac <fiprintf>
 800a118:	f000 fbda 	bl	800a8d0 <abort>
 800a11c:	4b04      	ldr	r3, [pc, #16]	; (800a130 <__assert_func+0x38>)
 800a11e:	461c      	mov	r4, r3
 800a120:	e7f3      	b.n	800a10a <__assert_func+0x12>
 800a122:	bf00      	nop
 800a124:	200000fc 	.word	0x200000fc
 800a128:	0800b8e9 	.word	0x0800b8e9
 800a12c:	0800b8f6 	.word	0x0800b8f6
 800a130:	0800b924 	.word	0x0800b924

0800a134 <_calloc_r>:
 800a134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a136:	fba1 2402 	umull	r2, r4, r1, r2
 800a13a:	b94c      	cbnz	r4, 800a150 <_calloc_r+0x1c>
 800a13c:	4611      	mov	r1, r2
 800a13e:	9201      	str	r2, [sp, #4]
 800a140:	f7fe fa34 	bl	80085ac <_malloc_r>
 800a144:	9a01      	ldr	r2, [sp, #4]
 800a146:	4605      	mov	r5, r0
 800a148:	b930      	cbnz	r0, 800a158 <_calloc_r+0x24>
 800a14a:	4628      	mov	r0, r5
 800a14c:	b003      	add	sp, #12
 800a14e:	bd30      	pop	{r4, r5, pc}
 800a150:	220c      	movs	r2, #12
 800a152:	6002      	str	r2, [r0, #0]
 800a154:	2500      	movs	r5, #0
 800a156:	e7f8      	b.n	800a14a <_calloc_r+0x16>
 800a158:	4621      	mov	r1, r4
 800a15a:	f7fd fa8a 	bl	8007672 <memset>
 800a15e:	e7f4      	b.n	800a14a <_calloc_r+0x16>

0800a160 <rshift>:
 800a160:	6903      	ldr	r3, [r0, #16]
 800a162:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a16a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a16e:	f100 0414 	add.w	r4, r0, #20
 800a172:	dd45      	ble.n	800a200 <rshift+0xa0>
 800a174:	f011 011f 	ands.w	r1, r1, #31
 800a178:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a17c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a180:	d10c      	bne.n	800a19c <rshift+0x3c>
 800a182:	f100 0710 	add.w	r7, r0, #16
 800a186:	4629      	mov	r1, r5
 800a188:	42b1      	cmp	r1, r6
 800a18a:	d334      	bcc.n	800a1f6 <rshift+0x96>
 800a18c:	1a9b      	subs	r3, r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	1eea      	subs	r2, r5, #3
 800a192:	4296      	cmp	r6, r2
 800a194:	bf38      	it	cc
 800a196:	2300      	movcc	r3, #0
 800a198:	4423      	add	r3, r4
 800a19a:	e015      	b.n	800a1c8 <rshift+0x68>
 800a19c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1a0:	f1c1 0820 	rsb	r8, r1, #32
 800a1a4:	40cf      	lsrs	r7, r1
 800a1a6:	f105 0e04 	add.w	lr, r5, #4
 800a1aa:	46a1      	mov	r9, r4
 800a1ac:	4576      	cmp	r6, lr
 800a1ae:	46f4      	mov	ip, lr
 800a1b0:	d815      	bhi.n	800a1de <rshift+0x7e>
 800a1b2:	1a9a      	subs	r2, r3, r2
 800a1b4:	0092      	lsls	r2, r2, #2
 800a1b6:	3a04      	subs	r2, #4
 800a1b8:	3501      	adds	r5, #1
 800a1ba:	42ae      	cmp	r6, r5
 800a1bc:	bf38      	it	cc
 800a1be:	2200      	movcc	r2, #0
 800a1c0:	18a3      	adds	r3, r4, r2
 800a1c2:	50a7      	str	r7, [r4, r2]
 800a1c4:	b107      	cbz	r7, 800a1c8 <rshift+0x68>
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	1b1a      	subs	r2, r3, r4
 800a1ca:	42a3      	cmp	r3, r4
 800a1cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a1d0:	bf08      	it	eq
 800a1d2:	2300      	moveq	r3, #0
 800a1d4:	6102      	str	r2, [r0, #16]
 800a1d6:	bf08      	it	eq
 800a1d8:	6143      	streq	r3, [r0, #20]
 800a1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1de:	f8dc c000 	ldr.w	ip, [ip]
 800a1e2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a1e6:	ea4c 0707 	orr.w	r7, ip, r7
 800a1ea:	f849 7b04 	str.w	r7, [r9], #4
 800a1ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1f2:	40cf      	lsrs	r7, r1
 800a1f4:	e7da      	b.n	800a1ac <rshift+0x4c>
 800a1f6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a1fa:	f847 cf04 	str.w	ip, [r7, #4]!
 800a1fe:	e7c3      	b.n	800a188 <rshift+0x28>
 800a200:	4623      	mov	r3, r4
 800a202:	e7e1      	b.n	800a1c8 <rshift+0x68>

0800a204 <__hexdig_fun>:
 800a204:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a208:	2b09      	cmp	r3, #9
 800a20a:	d802      	bhi.n	800a212 <__hexdig_fun+0xe>
 800a20c:	3820      	subs	r0, #32
 800a20e:	b2c0      	uxtb	r0, r0
 800a210:	4770      	bx	lr
 800a212:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a216:	2b05      	cmp	r3, #5
 800a218:	d801      	bhi.n	800a21e <__hexdig_fun+0x1a>
 800a21a:	3847      	subs	r0, #71	; 0x47
 800a21c:	e7f7      	b.n	800a20e <__hexdig_fun+0xa>
 800a21e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a222:	2b05      	cmp	r3, #5
 800a224:	d801      	bhi.n	800a22a <__hexdig_fun+0x26>
 800a226:	3827      	subs	r0, #39	; 0x27
 800a228:	e7f1      	b.n	800a20e <__hexdig_fun+0xa>
 800a22a:	2000      	movs	r0, #0
 800a22c:	4770      	bx	lr
	...

0800a230 <__gethex>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	4617      	mov	r7, r2
 800a236:	680a      	ldr	r2, [r1, #0]
 800a238:	b085      	sub	sp, #20
 800a23a:	f102 0b02 	add.w	fp, r2, #2
 800a23e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a242:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a246:	4681      	mov	r9, r0
 800a248:	468a      	mov	sl, r1
 800a24a:	9302      	str	r3, [sp, #8]
 800a24c:	32fe      	adds	r2, #254	; 0xfe
 800a24e:	eb02 030b 	add.w	r3, r2, fp
 800a252:	46d8      	mov	r8, fp
 800a254:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	2830      	cmp	r0, #48	; 0x30
 800a25c:	d0f7      	beq.n	800a24e <__gethex+0x1e>
 800a25e:	f7ff ffd1 	bl	800a204 <__hexdig_fun>
 800a262:	4604      	mov	r4, r0
 800a264:	2800      	cmp	r0, #0
 800a266:	d138      	bne.n	800a2da <__gethex+0xaa>
 800a268:	49a7      	ldr	r1, [pc, #668]	; (800a508 <__gethex+0x2d8>)
 800a26a:	2201      	movs	r2, #1
 800a26c:	4640      	mov	r0, r8
 800a26e:	f7ff ff09 	bl	800a084 <strncmp>
 800a272:	4606      	mov	r6, r0
 800a274:	2800      	cmp	r0, #0
 800a276:	d169      	bne.n	800a34c <__gethex+0x11c>
 800a278:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a27c:	465d      	mov	r5, fp
 800a27e:	f7ff ffc1 	bl	800a204 <__hexdig_fun>
 800a282:	2800      	cmp	r0, #0
 800a284:	d064      	beq.n	800a350 <__gethex+0x120>
 800a286:	465a      	mov	r2, fp
 800a288:	7810      	ldrb	r0, [r2, #0]
 800a28a:	2830      	cmp	r0, #48	; 0x30
 800a28c:	4690      	mov	r8, r2
 800a28e:	f102 0201 	add.w	r2, r2, #1
 800a292:	d0f9      	beq.n	800a288 <__gethex+0x58>
 800a294:	f7ff ffb6 	bl	800a204 <__hexdig_fun>
 800a298:	2301      	movs	r3, #1
 800a29a:	fab0 f480 	clz	r4, r0
 800a29e:	0964      	lsrs	r4, r4, #5
 800a2a0:	465e      	mov	r6, fp
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	4615      	mov	r5, r2
 800a2a8:	3201      	adds	r2, #1
 800a2aa:	7828      	ldrb	r0, [r5, #0]
 800a2ac:	f7ff ffaa 	bl	800a204 <__hexdig_fun>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d1f8      	bne.n	800a2a6 <__gethex+0x76>
 800a2b4:	4994      	ldr	r1, [pc, #592]	; (800a508 <__gethex+0x2d8>)
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	f7ff fee3 	bl	800a084 <strncmp>
 800a2be:	b978      	cbnz	r0, 800a2e0 <__gethex+0xb0>
 800a2c0:	b946      	cbnz	r6, 800a2d4 <__gethex+0xa4>
 800a2c2:	1c6e      	adds	r6, r5, #1
 800a2c4:	4632      	mov	r2, r6
 800a2c6:	4615      	mov	r5, r2
 800a2c8:	3201      	adds	r2, #1
 800a2ca:	7828      	ldrb	r0, [r5, #0]
 800a2cc:	f7ff ff9a 	bl	800a204 <__hexdig_fun>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d1f8      	bne.n	800a2c6 <__gethex+0x96>
 800a2d4:	1b73      	subs	r3, r6, r5
 800a2d6:	009e      	lsls	r6, r3, #2
 800a2d8:	e004      	b.n	800a2e4 <__gethex+0xb4>
 800a2da:	2400      	movs	r4, #0
 800a2dc:	4626      	mov	r6, r4
 800a2de:	e7e1      	b.n	800a2a4 <__gethex+0x74>
 800a2e0:	2e00      	cmp	r6, #0
 800a2e2:	d1f7      	bne.n	800a2d4 <__gethex+0xa4>
 800a2e4:	782b      	ldrb	r3, [r5, #0]
 800a2e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a2ea:	2b50      	cmp	r3, #80	; 0x50
 800a2ec:	d13d      	bne.n	800a36a <__gethex+0x13a>
 800a2ee:	786b      	ldrb	r3, [r5, #1]
 800a2f0:	2b2b      	cmp	r3, #43	; 0x2b
 800a2f2:	d02f      	beq.n	800a354 <__gethex+0x124>
 800a2f4:	2b2d      	cmp	r3, #45	; 0x2d
 800a2f6:	d031      	beq.n	800a35c <__gethex+0x12c>
 800a2f8:	1c69      	adds	r1, r5, #1
 800a2fa:	f04f 0b00 	mov.w	fp, #0
 800a2fe:	7808      	ldrb	r0, [r1, #0]
 800a300:	f7ff ff80 	bl	800a204 <__hexdig_fun>
 800a304:	1e42      	subs	r2, r0, #1
 800a306:	b2d2      	uxtb	r2, r2
 800a308:	2a18      	cmp	r2, #24
 800a30a:	d82e      	bhi.n	800a36a <__gethex+0x13a>
 800a30c:	f1a0 0210 	sub.w	r2, r0, #16
 800a310:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a314:	f7ff ff76 	bl	800a204 <__hexdig_fun>
 800a318:	f100 3cff 	add.w	ip, r0, #4294967295
 800a31c:	fa5f fc8c 	uxtb.w	ip, ip
 800a320:	f1bc 0f18 	cmp.w	ip, #24
 800a324:	d91d      	bls.n	800a362 <__gethex+0x132>
 800a326:	f1bb 0f00 	cmp.w	fp, #0
 800a32a:	d000      	beq.n	800a32e <__gethex+0xfe>
 800a32c:	4252      	negs	r2, r2
 800a32e:	4416      	add	r6, r2
 800a330:	f8ca 1000 	str.w	r1, [sl]
 800a334:	b1dc      	cbz	r4, 800a36e <__gethex+0x13e>
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bf14      	ite	ne
 800a33c:	f04f 0800 	movne.w	r8, #0
 800a340:	f04f 0806 	moveq.w	r8, #6
 800a344:	4640      	mov	r0, r8
 800a346:	b005      	add	sp, #20
 800a348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a34c:	4645      	mov	r5, r8
 800a34e:	4626      	mov	r6, r4
 800a350:	2401      	movs	r4, #1
 800a352:	e7c7      	b.n	800a2e4 <__gethex+0xb4>
 800a354:	f04f 0b00 	mov.w	fp, #0
 800a358:	1ca9      	adds	r1, r5, #2
 800a35a:	e7d0      	b.n	800a2fe <__gethex+0xce>
 800a35c:	f04f 0b01 	mov.w	fp, #1
 800a360:	e7fa      	b.n	800a358 <__gethex+0x128>
 800a362:	230a      	movs	r3, #10
 800a364:	fb03 0002 	mla	r0, r3, r2, r0
 800a368:	e7d0      	b.n	800a30c <__gethex+0xdc>
 800a36a:	4629      	mov	r1, r5
 800a36c:	e7e0      	b.n	800a330 <__gethex+0x100>
 800a36e:	eba5 0308 	sub.w	r3, r5, r8
 800a372:	3b01      	subs	r3, #1
 800a374:	4621      	mov	r1, r4
 800a376:	2b07      	cmp	r3, #7
 800a378:	dc0a      	bgt.n	800a390 <__gethex+0x160>
 800a37a:	4648      	mov	r0, r9
 800a37c:	f7fe f9a2 	bl	80086c4 <_Balloc>
 800a380:	4604      	mov	r4, r0
 800a382:	b940      	cbnz	r0, 800a396 <__gethex+0x166>
 800a384:	4b61      	ldr	r3, [pc, #388]	; (800a50c <__gethex+0x2dc>)
 800a386:	4602      	mov	r2, r0
 800a388:	21e4      	movs	r1, #228	; 0xe4
 800a38a:	4861      	ldr	r0, [pc, #388]	; (800a510 <__gethex+0x2e0>)
 800a38c:	f7ff feb4 	bl	800a0f8 <__assert_func>
 800a390:	3101      	adds	r1, #1
 800a392:	105b      	asrs	r3, r3, #1
 800a394:	e7ef      	b.n	800a376 <__gethex+0x146>
 800a396:	f100 0a14 	add.w	sl, r0, #20
 800a39a:	2300      	movs	r3, #0
 800a39c:	495a      	ldr	r1, [pc, #360]	; (800a508 <__gethex+0x2d8>)
 800a39e:	f8cd a004 	str.w	sl, [sp, #4]
 800a3a2:	469b      	mov	fp, r3
 800a3a4:	45a8      	cmp	r8, r5
 800a3a6:	d342      	bcc.n	800a42e <__gethex+0x1fe>
 800a3a8:	9801      	ldr	r0, [sp, #4]
 800a3aa:	f840 bb04 	str.w	fp, [r0], #4
 800a3ae:	eba0 000a 	sub.w	r0, r0, sl
 800a3b2:	1080      	asrs	r0, r0, #2
 800a3b4:	6120      	str	r0, [r4, #16]
 800a3b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a3ba:	4658      	mov	r0, fp
 800a3bc:	f7fe fa74 	bl	80088a8 <__hi0bits>
 800a3c0:	683d      	ldr	r5, [r7, #0]
 800a3c2:	eba8 0000 	sub.w	r0, r8, r0
 800a3c6:	42a8      	cmp	r0, r5
 800a3c8:	dd59      	ble.n	800a47e <__gethex+0x24e>
 800a3ca:	eba0 0805 	sub.w	r8, r0, r5
 800a3ce:	4641      	mov	r1, r8
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f7fe fe03 	bl	8008fdc <__any_on>
 800a3d6:	4683      	mov	fp, r0
 800a3d8:	b1b8      	cbz	r0, 800a40a <__gethex+0x1da>
 800a3da:	f108 33ff 	add.w	r3, r8, #4294967295
 800a3de:	1159      	asrs	r1, r3, #5
 800a3e0:	f003 021f 	and.w	r2, r3, #31
 800a3e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a3e8:	f04f 0b01 	mov.w	fp, #1
 800a3ec:	fa0b f202 	lsl.w	r2, fp, r2
 800a3f0:	420a      	tst	r2, r1
 800a3f2:	d00a      	beq.n	800a40a <__gethex+0x1da>
 800a3f4:	455b      	cmp	r3, fp
 800a3f6:	dd06      	ble.n	800a406 <__gethex+0x1d6>
 800a3f8:	f1a8 0102 	sub.w	r1, r8, #2
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f7fe fded 	bl	8008fdc <__any_on>
 800a402:	2800      	cmp	r0, #0
 800a404:	d138      	bne.n	800a478 <__gethex+0x248>
 800a406:	f04f 0b02 	mov.w	fp, #2
 800a40a:	4641      	mov	r1, r8
 800a40c:	4620      	mov	r0, r4
 800a40e:	f7ff fea7 	bl	800a160 <rshift>
 800a412:	4446      	add	r6, r8
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	42b3      	cmp	r3, r6
 800a418:	da41      	bge.n	800a49e <__gethex+0x26e>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4648      	mov	r0, r9
 800a41e:	f7fe f991 	bl	8008744 <_Bfree>
 800a422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a424:	2300      	movs	r3, #0
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a42c:	e78a      	b.n	800a344 <__gethex+0x114>
 800a42e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a432:	2a2e      	cmp	r2, #46	; 0x2e
 800a434:	d014      	beq.n	800a460 <__gethex+0x230>
 800a436:	2b20      	cmp	r3, #32
 800a438:	d106      	bne.n	800a448 <__gethex+0x218>
 800a43a:	9b01      	ldr	r3, [sp, #4]
 800a43c:	f843 bb04 	str.w	fp, [r3], #4
 800a440:	f04f 0b00 	mov.w	fp, #0
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	465b      	mov	r3, fp
 800a448:	7828      	ldrb	r0, [r5, #0]
 800a44a:	9303      	str	r3, [sp, #12]
 800a44c:	f7ff feda 	bl	800a204 <__hexdig_fun>
 800a450:	9b03      	ldr	r3, [sp, #12]
 800a452:	f000 000f 	and.w	r0, r0, #15
 800a456:	4098      	lsls	r0, r3
 800a458:	ea4b 0b00 	orr.w	fp, fp, r0
 800a45c:	3304      	adds	r3, #4
 800a45e:	e7a1      	b.n	800a3a4 <__gethex+0x174>
 800a460:	45a8      	cmp	r8, r5
 800a462:	d8e8      	bhi.n	800a436 <__gethex+0x206>
 800a464:	2201      	movs	r2, #1
 800a466:	4628      	mov	r0, r5
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	f7ff fe0b 	bl	800a084 <strncmp>
 800a46e:	4926      	ldr	r1, [pc, #152]	; (800a508 <__gethex+0x2d8>)
 800a470:	9b03      	ldr	r3, [sp, #12]
 800a472:	2800      	cmp	r0, #0
 800a474:	d1df      	bne.n	800a436 <__gethex+0x206>
 800a476:	e795      	b.n	800a3a4 <__gethex+0x174>
 800a478:	f04f 0b03 	mov.w	fp, #3
 800a47c:	e7c5      	b.n	800a40a <__gethex+0x1da>
 800a47e:	da0b      	bge.n	800a498 <__gethex+0x268>
 800a480:	eba5 0800 	sub.w	r8, r5, r0
 800a484:	4621      	mov	r1, r4
 800a486:	4642      	mov	r2, r8
 800a488:	4648      	mov	r0, r9
 800a48a:	f7fe fb75 	bl	8008b78 <__lshift>
 800a48e:	eba6 0608 	sub.w	r6, r6, r8
 800a492:	4604      	mov	r4, r0
 800a494:	f100 0a14 	add.w	sl, r0, #20
 800a498:	f04f 0b00 	mov.w	fp, #0
 800a49c:	e7ba      	b.n	800a414 <__gethex+0x1e4>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	42b3      	cmp	r3, r6
 800a4a2:	dd73      	ble.n	800a58c <__gethex+0x35c>
 800a4a4:	1b9e      	subs	r6, r3, r6
 800a4a6:	42b5      	cmp	r5, r6
 800a4a8:	dc34      	bgt.n	800a514 <__gethex+0x2e4>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d023      	beq.n	800a4f8 <__gethex+0x2c8>
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d025      	beq.n	800a500 <__gethex+0x2d0>
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d115      	bne.n	800a4e4 <__gethex+0x2b4>
 800a4b8:	42b5      	cmp	r5, r6
 800a4ba:	d113      	bne.n	800a4e4 <__gethex+0x2b4>
 800a4bc:	2d01      	cmp	r5, #1
 800a4be:	d10b      	bne.n	800a4d8 <__gethex+0x2a8>
 800a4c0:	9a02      	ldr	r2, [sp, #8]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	f8ca 3000 	str.w	r3, [sl]
 800a4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a4d4:	601c      	str	r4, [r3, #0]
 800a4d6:	e735      	b.n	800a344 <__gethex+0x114>
 800a4d8:	1e69      	subs	r1, r5, #1
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f7fe fd7e 	bl	8008fdc <__any_on>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d1ed      	bne.n	800a4c0 <__gethex+0x290>
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	4648      	mov	r0, r9
 800a4e8:	f7fe f92c 	bl	8008744 <_Bfree>
 800a4ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	6013      	str	r3, [r2, #0]
 800a4f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a4f6:	e725      	b.n	800a344 <__gethex+0x114>
 800a4f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1f2      	bne.n	800a4e4 <__gethex+0x2b4>
 800a4fe:	e7df      	b.n	800a4c0 <__gethex+0x290>
 800a500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1dc      	bne.n	800a4c0 <__gethex+0x290>
 800a506:	e7ed      	b.n	800a4e4 <__gethex+0x2b4>
 800a508:	0800b87c 	.word	0x0800b87c
 800a50c:	0800b716 	.word	0x0800b716
 800a510:	0800b925 	.word	0x0800b925
 800a514:	f106 38ff 	add.w	r8, r6, #4294967295
 800a518:	f1bb 0f00 	cmp.w	fp, #0
 800a51c:	d133      	bne.n	800a586 <__gethex+0x356>
 800a51e:	f1b8 0f00 	cmp.w	r8, #0
 800a522:	d004      	beq.n	800a52e <__gethex+0x2fe>
 800a524:	4641      	mov	r1, r8
 800a526:	4620      	mov	r0, r4
 800a528:	f7fe fd58 	bl	8008fdc <__any_on>
 800a52c:	4683      	mov	fp, r0
 800a52e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a532:	2301      	movs	r3, #1
 800a534:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a538:	f008 081f 	and.w	r8, r8, #31
 800a53c:	fa03 f308 	lsl.w	r3, r3, r8
 800a540:	4213      	tst	r3, r2
 800a542:	4631      	mov	r1, r6
 800a544:	4620      	mov	r0, r4
 800a546:	bf18      	it	ne
 800a548:	f04b 0b02 	orrne.w	fp, fp, #2
 800a54c:	1bad      	subs	r5, r5, r6
 800a54e:	f7ff fe07 	bl	800a160 <rshift>
 800a552:	687e      	ldr	r6, [r7, #4]
 800a554:	f04f 0802 	mov.w	r8, #2
 800a558:	f1bb 0f00 	cmp.w	fp, #0
 800a55c:	d04a      	beq.n	800a5f4 <__gethex+0x3c4>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d016      	beq.n	800a592 <__gethex+0x362>
 800a564:	2b03      	cmp	r3, #3
 800a566:	d018      	beq.n	800a59a <__gethex+0x36a>
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d109      	bne.n	800a580 <__gethex+0x350>
 800a56c:	f01b 0f02 	tst.w	fp, #2
 800a570:	d006      	beq.n	800a580 <__gethex+0x350>
 800a572:	f8da 3000 	ldr.w	r3, [sl]
 800a576:	ea4b 0b03 	orr.w	fp, fp, r3
 800a57a:	f01b 0f01 	tst.w	fp, #1
 800a57e:	d10f      	bne.n	800a5a0 <__gethex+0x370>
 800a580:	f048 0810 	orr.w	r8, r8, #16
 800a584:	e036      	b.n	800a5f4 <__gethex+0x3c4>
 800a586:	f04f 0b01 	mov.w	fp, #1
 800a58a:	e7d0      	b.n	800a52e <__gethex+0x2fe>
 800a58c:	f04f 0801 	mov.w	r8, #1
 800a590:	e7e2      	b.n	800a558 <__gethex+0x328>
 800a592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a594:	f1c3 0301 	rsb	r3, r3, #1
 800a598:	930f      	str	r3, [sp, #60]	; 0x3c
 800a59a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d0ef      	beq.n	800a580 <__gethex+0x350>
 800a5a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5a4:	f104 0214 	add.w	r2, r4, #20
 800a5a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a5ac:	9301      	str	r3, [sp, #4]
 800a5ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	4694      	mov	ip, r2
 800a5b6:	f852 1b04 	ldr.w	r1, [r2], #4
 800a5ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a5be:	d01e      	beq.n	800a5fe <__gethex+0x3ce>
 800a5c0:	3101      	adds	r1, #1
 800a5c2:	f8cc 1000 	str.w	r1, [ip]
 800a5c6:	f1b8 0f02 	cmp.w	r8, #2
 800a5ca:	f104 0214 	add.w	r2, r4, #20
 800a5ce:	d13d      	bne.n	800a64c <__gethex+0x41c>
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	42ab      	cmp	r3, r5
 800a5d6:	d10b      	bne.n	800a5f0 <__gethex+0x3c0>
 800a5d8:	1169      	asrs	r1, r5, #5
 800a5da:	2301      	movs	r3, #1
 800a5dc:	f005 051f 	and.w	r5, r5, #31
 800a5e0:	fa03 f505 	lsl.w	r5, r3, r5
 800a5e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5e8:	421d      	tst	r5, r3
 800a5ea:	bf18      	it	ne
 800a5ec:	f04f 0801 	movne.w	r8, #1
 800a5f0:	f048 0820 	orr.w	r8, r8, #32
 800a5f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a5f6:	601c      	str	r4, [r3, #0]
 800a5f8:	9b02      	ldr	r3, [sp, #8]
 800a5fa:	601e      	str	r6, [r3, #0]
 800a5fc:	e6a2      	b.n	800a344 <__gethex+0x114>
 800a5fe:	4290      	cmp	r0, r2
 800a600:	f842 3c04 	str.w	r3, [r2, #-4]
 800a604:	d8d6      	bhi.n	800a5b4 <__gethex+0x384>
 800a606:	68a2      	ldr	r2, [r4, #8]
 800a608:	4593      	cmp	fp, r2
 800a60a:	db17      	blt.n	800a63c <__gethex+0x40c>
 800a60c:	6861      	ldr	r1, [r4, #4]
 800a60e:	4648      	mov	r0, r9
 800a610:	3101      	adds	r1, #1
 800a612:	f7fe f857 	bl	80086c4 <_Balloc>
 800a616:	4682      	mov	sl, r0
 800a618:	b918      	cbnz	r0, 800a622 <__gethex+0x3f2>
 800a61a:	4b1b      	ldr	r3, [pc, #108]	; (800a688 <__gethex+0x458>)
 800a61c:	4602      	mov	r2, r0
 800a61e:	2184      	movs	r1, #132	; 0x84
 800a620:	e6b3      	b.n	800a38a <__gethex+0x15a>
 800a622:	6922      	ldr	r2, [r4, #16]
 800a624:	3202      	adds	r2, #2
 800a626:	f104 010c 	add.w	r1, r4, #12
 800a62a:	0092      	lsls	r2, r2, #2
 800a62c:	300c      	adds	r0, #12
 800a62e:	f7ff fd4b 	bl	800a0c8 <memcpy>
 800a632:	4621      	mov	r1, r4
 800a634:	4648      	mov	r0, r9
 800a636:	f7fe f885 	bl	8008744 <_Bfree>
 800a63a:	4654      	mov	r4, sl
 800a63c:	6922      	ldr	r2, [r4, #16]
 800a63e:	1c51      	adds	r1, r2, #1
 800a640:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a644:	6121      	str	r1, [r4, #16]
 800a646:	2101      	movs	r1, #1
 800a648:	6151      	str	r1, [r2, #20]
 800a64a:	e7bc      	b.n	800a5c6 <__gethex+0x396>
 800a64c:	6921      	ldr	r1, [r4, #16]
 800a64e:	4559      	cmp	r1, fp
 800a650:	dd0b      	ble.n	800a66a <__gethex+0x43a>
 800a652:	2101      	movs	r1, #1
 800a654:	4620      	mov	r0, r4
 800a656:	f7ff fd83 	bl	800a160 <rshift>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	3601      	adds	r6, #1
 800a65e:	42b3      	cmp	r3, r6
 800a660:	f6ff aedb 	blt.w	800a41a <__gethex+0x1ea>
 800a664:	f04f 0801 	mov.w	r8, #1
 800a668:	e7c2      	b.n	800a5f0 <__gethex+0x3c0>
 800a66a:	f015 051f 	ands.w	r5, r5, #31
 800a66e:	d0f9      	beq.n	800a664 <__gethex+0x434>
 800a670:	9b01      	ldr	r3, [sp, #4]
 800a672:	441a      	add	r2, r3
 800a674:	f1c5 0520 	rsb	r5, r5, #32
 800a678:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a67c:	f7fe f914 	bl	80088a8 <__hi0bits>
 800a680:	42a8      	cmp	r0, r5
 800a682:	dbe6      	blt.n	800a652 <__gethex+0x422>
 800a684:	e7ee      	b.n	800a664 <__gethex+0x434>
 800a686:	bf00      	nop
 800a688:	0800b716 	.word	0x0800b716

0800a68c <L_shift>:
 800a68c:	f1c2 0208 	rsb	r2, r2, #8
 800a690:	0092      	lsls	r2, r2, #2
 800a692:	b570      	push	{r4, r5, r6, lr}
 800a694:	f1c2 0620 	rsb	r6, r2, #32
 800a698:	6843      	ldr	r3, [r0, #4]
 800a69a:	6804      	ldr	r4, [r0, #0]
 800a69c:	fa03 f506 	lsl.w	r5, r3, r6
 800a6a0:	432c      	orrs	r4, r5
 800a6a2:	40d3      	lsrs	r3, r2
 800a6a4:	6004      	str	r4, [r0, #0]
 800a6a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6aa:	4288      	cmp	r0, r1
 800a6ac:	d3f4      	bcc.n	800a698 <L_shift+0xc>
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}

0800a6b0 <__match>:
 800a6b0:	b530      	push	{r4, r5, lr}
 800a6b2:	6803      	ldr	r3, [r0, #0]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ba:	b914      	cbnz	r4, 800a6c2 <__match+0x12>
 800a6bc:	6003      	str	r3, [r0, #0]
 800a6be:	2001      	movs	r0, #1
 800a6c0:	bd30      	pop	{r4, r5, pc}
 800a6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a6ca:	2d19      	cmp	r5, #25
 800a6cc:	bf98      	it	ls
 800a6ce:	3220      	addls	r2, #32
 800a6d0:	42a2      	cmp	r2, r4
 800a6d2:	d0f0      	beq.n	800a6b6 <__match+0x6>
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7f3      	b.n	800a6c0 <__match+0x10>

0800a6d8 <__hexnan>:
 800a6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6dc:	680b      	ldr	r3, [r1, #0]
 800a6de:	6801      	ldr	r1, [r0, #0]
 800a6e0:	115e      	asrs	r6, r3, #5
 800a6e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a6e6:	f013 031f 	ands.w	r3, r3, #31
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	bf18      	it	ne
 800a6ee:	3604      	addne	r6, #4
 800a6f0:	2500      	movs	r5, #0
 800a6f2:	1f37      	subs	r7, r6, #4
 800a6f4:	4682      	mov	sl, r0
 800a6f6:	4690      	mov	r8, r2
 800a6f8:	9301      	str	r3, [sp, #4]
 800a6fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800a6fe:	46b9      	mov	r9, r7
 800a700:	463c      	mov	r4, r7
 800a702:	9502      	str	r5, [sp, #8]
 800a704:	46ab      	mov	fp, r5
 800a706:	784a      	ldrb	r2, [r1, #1]
 800a708:	1c4b      	adds	r3, r1, #1
 800a70a:	9303      	str	r3, [sp, #12]
 800a70c:	b342      	cbz	r2, 800a760 <__hexnan+0x88>
 800a70e:	4610      	mov	r0, r2
 800a710:	9105      	str	r1, [sp, #20]
 800a712:	9204      	str	r2, [sp, #16]
 800a714:	f7ff fd76 	bl	800a204 <__hexdig_fun>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d14f      	bne.n	800a7bc <__hexnan+0xe4>
 800a71c:	9a04      	ldr	r2, [sp, #16]
 800a71e:	9905      	ldr	r1, [sp, #20]
 800a720:	2a20      	cmp	r2, #32
 800a722:	d818      	bhi.n	800a756 <__hexnan+0x7e>
 800a724:	9b02      	ldr	r3, [sp, #8]
 800a726:	459b      	cmp	fp, r3
 800a728:	dd13      	ble.n	800a752 <__hexnan+0x7a>
 800a72a:	454c      	cmp	r4, r9
 800a72c:	d206      	bcs.n	800a73c <__hexnan+0x64>
 800a72e:	2d07      	cmp	r5, #7
 800a730:	dc04      	bgt.n	800a73c <__hexnan+0x64>
 800a732:	462a      	mov	r2, r5
 800a734:	4649      	mov	r1, r9
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff ffa8 	bl	800a68c <L_shift>
 800a73c:	4544      	cmp	r4, r8
 800a73e:	d950      	bls.n	800a7e2 <__hexnan+0x10a>
 800a740:	2300      	movs	r3, #0
 800a742:	f1a4 0904 	sub.w	r9, r4, #4
 800a746:	f844 3c04 	str.w	r3, [r4, #-4]
 800a74a:	f8cd b008 	str.w	fp, [sp, #8]
 800a74e:	464c      	mov	r4, r9
 800a750:	461d      	mov	r5, r3
 800a752:	9903      	ldr	r1, [sp, #12]
 800a754:	e7d7      	b.n	800a706 <__hexnan+0x2e>
 800a756:	2a29      	cmp	r2, #41	; 0x29
 800a758:	d155      	bne.n	800a806 <__hexnan+0x12e>
 800a75a:	3102      	adds	r1, #2
 800a75c:	f8ca 1000 	str.w	r1, [sl]
 800a760:	f1bb 0f00 	cmp.w	fp, #0
 800a764:	d04f      	beq.n	800a806 <__hexnan+0x12e>
 800a766:	454c      	cmp	r4, r9
 800a768:	d206      	bcs.n	800a778 <__hexnan+0xa0>
 800a76a:	2d07      	cmp	r5, #7
 800a76c:	dc04      	bgt.n	800a778 <__hexnan+0xa0>
 800a76e:	462a      	mov	r2, r5
 800a770:	4649      	mov	r1, r9
 800a772:	4620      	mov	r0, r4
 800a774:	f7ff ff8a 	bl	800a68c <L_shift>
 800a778:	4544      	cmp	r4, r8
 800a77a:	d934      	bls.n	800a7e6 <__hexnan+0x10e>
 800a77c:	f1a8 0204 	sub.w	r2, r8, #4
 800a780:	4623      	mov	r3, r4
 800a782:	f853 1b04 	ldr.w	r1, [r3], #4
 800a786:	f842 1f04 	str.w	r1, [r2, #4]!
 800a78a:	429f      	cmp	r7, r3
 800a78c:	d2f9      	bcs.n	800a782 <__hexnan+0xaa>
 800a78e:	1b3b      	subs	r3, r7, r4
 800a790:	f023 0303 	bic.w	r3, r3, #3
 800a794:	3304      	adds	r3, #4
 800a796:	3e03      	subs	r6, #3
 800a798:	3401      	adds	r4, #1
 800a79a:	42a6      	cmp	r6, r4
 800a79c:	bf38      	it	cc
 800a79e:	2304      	movcc	r3, #4
 800a7a0:	4443      	add	r3, r8
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f843 2b04 	str.w	r2, [r3], #4
 800a7a8:	429f      	cmp	r7, r3
 800a7aa:	d2fb      	bcs.n	800a7a4 <__hexnan+0xcc>
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	b91b      	cbnz	r3, 800a7b8 <__hexnan+0xe0>
 800a7b0:	4547      	cmp	r7, r8
 800a7b2:	d126      	bne.n	800a802 <__hexnan+0x12a>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	2005      	movs	r0, #5
 800a7ba:	e025      	b.n	800a808 <__hexnan+0x130>
 800a7bc:	3501      	adds	r5, #1
 800a7be:	2d08      	cmp	r5, #8
 800a7c0:	f10b 0b01 	add.w	fp, fp, #1
 800a7c4:	dd06      	ble.n	800a7d4 <__hexnan+0xfc>
 800a7c6:	4544      	cmp	r4, r8
 800a7c8:	d9c3      	bls.n	800a752 <__hexnan+0x7a>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7d0:	2501      	movs	r5, #1
 800a7d2:	3c04      	subs	r4, #4
 800a7d4:	6822      	ldr	r2, [r4, #0]
 800a7d6:	f000 000f 	and.w	r0, r0, #15
 800a7da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a7de:	6020      	str	r0, [r4, #0]
 800a7e0:	e7b7      	b.n	800a752 <__hexnan+0x7a>
 800a7e2:	2508      	movs	r5, #8
 800a7e4:	e7b5      	b.n	800a752 <__hexnan+0x7a>
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d0df      	beq.n	800a7ac <__hexnan+0xd4>
 800a7ec:	f1c3 0320 	rsb	r3, r3, #32
 800a7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f4:	40da      	lsrs	r2, r3
 800a7f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	f846 3c04 	str.w	r3, [r6, #-4]
 800a800:	e7d4      	b.n	800a7ac <__hexnan+0xd4>
 800a802:	3f04      	subs	r7, #4
 800a804:	e7d2      	b.n	800a7ac <__hexnan+0xd4>
 800a806:	2004      	movs	r0, #4
 800a808:	b007      	add	sp, #28
 800a80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a80e <__ascii_mbtowc>:
 800a80e:	b082      	sub	sp, #8
 800a810:	b901      	cbnz	r1, 800a814 <__ascii_mbtowc+0x6>
 800a812:	a901      	add	r1, sp, #4
 800a814:	b142      	cbz	r2, 800a828 <__ascii_mbtowc+0x1a>
 800a816:	b14b      	cbz	r3, 800a82c <__ascii_mbtowc+0x1e>
 800a818:	7813      	ldrb	r3, [r2, #0]
 800a81a:	600b      	str	r3, [r1, #0]
 800a81c:	7812      	ldrb	r2, [r2, #0]
 800a81e:	1e10      	subs	r0, r2, #0
 800a820:	bf18      	it	ne
 800a822:	2001      	movne	r0, #1
 800a824:	b002      	add	sp, #8
 800a826:	4770      	bx	lr
 800a828:	4610      	mov	r0, r2
 800a82a:	e7fb      	b.n	800a824 <__ascii_mbtowc+0x16>
 800a82c:	f06f 0001 	mvn.w	r0, #1
 800a830:	e7f8      	b.n	800a824 <__ascii_mbtowc+0x16>

0800a832 <_realloc_r>:
 800a832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a836:	4680      	mov	r8, r0
 800a838:	4614      	mov	r4, r2
 800a83a:	460e      	mov	r6, r1
 800a83c:	b921      	cbnz	r1, 800a848 <_realloc_r+0x16>
 800a83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a842:	4611      	mov	r1, r2
 800a844:	f7fd beb2 	b.w	80085ac <_malloc_r>
 800a848:	b92a      	cbnz	r2, 800a856 <_realloc_r+0x24>
 800a84a:	f7fd fe3b 	bl	80084c4 <_free_r>
 800a84e:	4625      	mov	r5, r4
 800a850:	4628      	mov	r0, r5
 800a852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a856:	f000 f842 	bl	800a8de <_malloc_usable_size_r>
 800a85a:	4284      	cmp	r4, r0
 800a85c:	4607      	mov	r7, r0
 800a85e:	d802      	bhi.n	800a866 <_realloc_r+0x34>
 800a860:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a864:	d812      	bhi.n	800a88c <_realloc_r+0x5a>
 800a866:	4621      	mov	r1, r4
 800a868:	4640      	mov	r0, r8
 800a86a:	f7fd fe9f 	bl	80085ac <_malloc_r>
 800a86e:	4605      	mov	r5, r0
 800a870:	2800      	cmp	r0, #0
 800a872:	d0ed      	beq.n	800a850 <_realloc_r+0x1e>
 800a874:	42bc      	cmp	r4, r7
 800a876:	4622      	mov	r2, r4
 800a878:	4631      	mov	r1, r6
 800a87a:	bf28      	it	cs
 800a87c:	463a      	movcs	r2, r7
 800a87e:	f7ff fc23 	bl	800a0c8 <memcpy>
 800a882:	4631      	mov	r1, r6
 800a884:	4640      	mov	r0, r8
 800a886:	f7fd fe1d 	bl	80084c4 <_free_r>
 800a88a:	e7e1      	b.n	800a850 <_realloc_r+0x1e>
 800a88c:	4635      	mov	r5, r6
 800a88e:	e7df      	b.n	800a850 <_realloc_r+0x1e>

0800a890 <__ascii_wctomb>:
 800a890:	b149      	cbz	r1, 800a8a6 <__ascii_wctomb+0x16>
 800a892:	2aff      	cmp	r2, #255	; 0xff
 800a894:	bf85      	ittet	hi
 800a896:	238a      	movhi	r3, #138	; 0x8a
 800a898:	6003      	strhi	r3, [r0, #0]
 800a89a:	700a      	strbls	r2, [r1, #0]
 800a89c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a8a0:	bf98      	it	ls
 800a8a2:	2001      	movls	r0, #1
 800a8a4:	4770      	bx	lr
 800a8a6:	4608      	mov	r0, r1
 800a8a8:	4770      	bx	lr
	...

0800a8ac <fiprintf>:
 800a8ac:	b40e      	push	{r1, r2, r3}
 800a8ae:	b503      	push	{r0, r1, lr}
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	ab03      	add	r3, sp, #12
 800a8b4:	4805      	ldr	r0, [pc, #20]	; (800a8cc <fiprintf+0x20>)
 800a8b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ba:	6800      	ldr	r0, [r0, #0]
 800a8bc:	9301      	str	r3, [sp, #4]
 800a8be:	f000 f83f 	bl	800a940 <_vfiprintf_r>
 800a8c2:	b002      	add	sp, #8
 800a8c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8c8:	b003      	add	sp, #12
 800a8ca:	4770      	bx	lr
 800a8cc:	200000fc 	.word	0x200000fc

0800a8d0 <abort>:
 800a8d0:	b508      	push	{r3, lr}
 800a8d2:	2006      	movs	r0, #6
 800a8d4:	f000 fa0c 	bl	800acf0 <raise>
 800a8d8:	2001      	movs	r0, #1
 800a8da:	f7f7 fcc7 	bl	800226c <_exit>

0800a8de <_malloc_usable_size_r>:
 800a8de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e2:	1f18      	subs	r0, r3, #4
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	bfbc      	itt	lt
 800a8e8:	580b      	ldrlt	r3, [r1, r0]
 800a8ea:	18c0      	addlt	r0, r0, r3
 800a8ec:	4770      	bx	lr

0800a8ee <__sfputc_r>:
 800a8ee:	6893      	ldr	r3, [r2, #8]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	b410      	push	{r4}
 800a8f6:	6093      	str	r3, [r2, #8]
 800a8f8:	da08      	bge.n	800a90c <__sfputc_r+0x1e>
 800a8fa:	6994      	ldr	r4, [r2, #24]
 800a8fc:	42a3      	cmp	r3, r4
 800a8fe:	db01      	blt.n	800a904 <__sfputc_r+0x16>
 800a900:	290a      	cmp	r1, #10
 800a902:	d103      	bne.n	800a90c <__sfputc_r+0x1e>
 800a904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a908:	f000 b934 	b.w	800ab74 <__swbuf_r>
 800a90c:	6813      	ldr	r3, [r2, #0]
 800a90e:	1c58      	adds	r0, r3, #1
 800a910:	6010      	str	r0, [r2, #0]
 800a912:	7019      	strb	r1, [r3, #0]
 800a914:	4608      	mov	r0, r1
 800a916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <__sfputs_r>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	4606      	mov	r6, r0
 800a920:	460f      	mov	r7, r1
 800a922:	4614      	mov	r4, r2
 800a924:	18d5      	adds	r5, r2, r3
 800a926:	42ac      	cmp	r4, r5
 800a928:	d101      	bne.n	800a92e <__sfputs_r+0x12>
 800a92a:	2000      	movs	r0, #0
 800a92c:	e007      	b.n	800a93e <__sfputs_r+0x22>
 800a92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a932:	463a      	mov	r2, r7
 800a934:	4630      	mov	r0, r6
 800a936:	f7ff ffda 	bl	800a8ee <__sfputc_r>
 800a93a:	1c43      	adds	r3, r0, #1
 800a93c:	d1f3      	bne.n	800a926 <__sfputs_r+0xa>
 800a93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a940 <_vfiprintf_r>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	460d      	mov	r5, r1
 800a946:	b09d      	sub	sp, #116	; 0x74
 800a948:	4614      	mov	r4, r2
 800a94a:	4698      	mov	r8, r3
 800a94c:	4606      	mov	r6, r0
 800a94e:	b118      	cbz	r0, 800a958 <_vfiprintf_r+0x18>
 800a950:	6a03      	ldr	r3, [r0, #32]
 800a952:	b90b      	cbnz	r3, 800a958 <_vfiprintf_r+0x18>
 800a954:	f7fc fdf4 	bl	8007540 <__sinit>
 800a958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a95a:	07d9      	lsls	r1, r3, #31
 800a95c:	d405      	bmi.n	800a96a <_vfiprintf_r+0x2a>
 800a95e:	89ab      	ldrh	r3, [r5, #12]
 800a960:	059a      	lsls	r2, r3, #22
 800a962:	d402      	bmi.n	800a96a <_vfiprintf_r+0x2a>
 800a964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a966:	f7fc ff2b 	bl	80077c0 <__retarget_lock_acquire_recursive>
 800a96a:	89ab      	ldrh	r3, [r5, #12]
 800a96c:	071b      	lsls	r3, r3, #28
 800a96e:	d501      	bpl.n	800a974 <_vfiprintf_r+0x34>
 800a970:	692b      	ldr	r3, [r5, #16]
 800a972:	b99b      	cbnz	r3, 800a99c <_vfiprintf_r+0x5c>
 800a974:	4629      	mov	r1, r5
 800a976:	4630      	mov	r0, r6
 800a978:	f000 f93a 	bl	800abf0 <__swsetup_r>
 800a97c:	b170      	cbz	r0, 800a99c <_vfiprintf_r+0x5c>
 800a97e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a980:	07dc      	lsls	r4, r3, #31
 800a982:	d504      	bpl.n	800a98e <_vfiprintf_r+0x4e>
 800a984:	f04f 30ff 	mov.w	r0, #4294967295
 800a988:	b01d      	add	sp, #116	; 0x74
 800a98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98e:	89ab      	ldrh	r3, [r5, #12]
 800a990:	0598      	lsls	r0, r3, #22
 800a992:	d4f7      	bmi.n	800a984 <_vfiprintf_r+0x44>
 800a994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a996:	f7fc ff14 	bl	80077c2 <__retarget_lock_release_recursive>
 800a99a:	e7f3      	b.n	800a984 <_vfiprintf_r+0x44>
 800a99c:	2300      	movs	r3, #0
 800a99e:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a0:	2320      	movs	r3, #32
 800a9a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9aa:	2330      	movs	r3, #48	; 0x30
 800a9ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ab60 <_vfiprintf_r+0x220>
 800a9b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9b4:	f04f 0901 	mov.w	r9, #1
 800a9b8:	4623      	mov	r3, r4
 800a9ba:	469a      	mov	sl, r3
 800a9bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9c0:	b10a      	cbz	r2, 800a9c6 <_vfiprintf_r+0x86>
 800a9c2:	2a25      	cmp	r2, #37	; 0x25
 800a9c4:	d1f9      	bne.n	800a9ba <_vfiprintf_r+0x7a>
 800a9c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a9ca:	d00b      	beq.n	800a9e4 <_vfiprintf_r+0xa4>
 800a9cc:	465b      	mov	r3, fp
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7ff ffa2 	bl	800a91c <__sfputs_r>
 800a9d8:	3001      	adds	r0, #1
 800a9da:	f000 80a9 	beq.w	800ab30 <_vfiprintf_r+0x1f0>
 800a9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9e0:	445a      	add	r2, fp
 800a9e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f000 80a1 	beq.w	800ab30 <_vfiprintf_r+0x1f0>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9f8:	f10a 0a01 	add.w	sl, sl, #1
 800a9fc:	9304      	str	r3, [sp, #16]
 800a9fe:	9307      	str	r3, [sp, #28]
 800aa00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa04:	931a      	str	r3, [sp, #104]	; 0x68
 800aa06:	4654      	mov	r4, sl
 800aa08:	2205      	movs	r2, #5
 800aa0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa0e:	4854      	ldr	r0, [pc, #336]	; (800ab60 <_vfiprintf_r+0x220>)
 800aa10:	f7f5 fbe6 	bl	80001e0 <memchr>
 800aa14:	9a04      	ldr	r2, [sp, #16]
 800aa16:	b9d8      	cbnz	r0, 800aa50 <_vfiprintf_r+0x110>
 800aa18:	06d1      	lsls	r1, r2, #27
 800aa1a:	bf44      	itt	mi
 800aa1c:	2320      	movmi	r3, #32
 800aa1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa22:	0713      	lsls	r3, r2, #28
 800aa24:	bf44      	itt	mi
 800aa26:	232b      	movmi	r3, #43	; 0x2b
 800aa28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa2c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa30:	2b2a      	cmp	r3, #42	; 0x2a
 800aa32:	d015      	beq.n	800aa60 <_vfiprintf_r+0x120>
 800aa34:	9a07      	ldr	r2, [sp, #28]
 800aa36:	4654      	mov	r4, sl
 800aa38:	2000      	movs	r0, #0
 800aa3a:	f04f 0c0a 	mov.w	ip, #10
 800aa3e:	4621      	mov	r1, r4
 800aa40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa44:	3b30      	subs	r3, #48	; 0x30
 800aa46:	2b09      	cmp	r3, #9
 800aa48:	d94d      	bls.n	800aae6 <_vfiprintf_r+0x1a6>
 800aa4a:	b1b0      	cbz	r0, 800aa7a <_vfiprintf_r+0x13a>
 800aa4c:	9207      	str	r2, [sp, #28]
 800aa4e:	e014      	b.n	800aa7a <_vfiprintf_r+0x13a>
 800aa50:	eba0 0308 	sub.w	r3, r0, r8
 800aa54:	fa09 f303 	lsl.w	r3, r9, r3
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	9304      	str	r3, [sp, #16]
 800aa5c:	46a2      	mov	sl, r4
 800aa5e:	e7d2      	b.n	800aa06 <_vfiprintf_r+0xc6>
 800aa60:	9b03      	ldr	r3, [sp, #12]
 800aa62:	1d19      	adds	r1, r3, #4
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	9103      	str	r1, [sp, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	bfbb      	ittet	lt
 800aa6c:	425b      	neglt	r3, r3
 800aa6e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa72:	9307      	strge	r3, [sp, #28]
 800aa74:	9307      	strlt	r3, [sp, #28]
 800aa76:	bfb8      	it	lt
 800aa78:	9204      	strlt	r2, [sp, #16]
 800aa7a:	7823      	ldrb	r3, [r4, #0]
 800aa7c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa7e:	d10c      	bne.n	800aa9a <_vfiprintf_r+0x15a>
 800aa80:	7863      	ldrb	r3, [r4, #1]
 800aa82:	2b2a      	cmp	r3, #42	; 0x2a
 800aa84:	d134      	bne.n	800aaf0 <_vfiprintf_r+0x1b0>
 800aa86:	9b03      	ldr	r3, [sp, #12]
 800aa88:	1d1a      	adds	r2, r3, #4
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	9203      	str	r2, [sp, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	bfb8      	it	lt
 800aa92:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa96:	3402      	adds	r4, #2
 800aa98:	9305      	str	r3, [sp, #20]
 800aa9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ab70 <_vfiprintf_r+0x230>
 800aa9e:	7821      	ldrb	r1, [r4, #0]
 800aaa0:	2203      	movs	r2, #3
 800aaa2:	4650      	mov	r0, sl
 800aaa4:	f7f5 fb9c 	bl	80001e0 <memchr>
 800aaa8:	b138      	cbz	r0, 800aaba <_vfiprintf_r+0x17a>
 800aaaa:	9b04      	ldr	r3, [sp, #16]
 800aaac:	eba0 000a 	sub.w	r0, r0, sl
 800aab0:	2240      	movs	r2, #64	; 0x40
 800aab2:	4082      	lsls	r2, r0
 800aab4:	4313      	orrs	r3, r2
 800aab6:	3401      	adds	r4, #1
 800aab8:	9304      	str	r3, [sp, #16]
 800aaba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aabe:	4829      	ldr	r0, [pc, #164]	; (800ab64 <_vfiprintf_r+0x224>)
 800aac0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aac4:	2206      	movs	r2, #6
 800aac6:	f7f5 fb8b 	bl	80001e0 <memchr>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d03f      	beq.n	800ab4e <_vfiprintf_r+0x20e>
 800aace:	4b26      	ldr	r3, [pc, #152]	; (800ab68 <_vfiprintf_r+0x228>)
 800aad0:	bb1b      	cbnz	r3, 800ab1a <_vfiprintf_r+0x1da>
 800aad2:	9b03      	ldr	r3, [sp, #12]
 800aad4:	3307      	adds	r3, #7
 800aad6:	f023 0307 	bic.w	r3, r3, #7
 800aada:	3308      	adds	r3, #8
 800aadc:	9303      	str	r3, [sp, #12]
 800aade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae0:	443b      	add	r3, r7
 800aae2:	9309      	str	r3, [sp, #36]	; 0x24
 800aae4:	e768      	b.n	800a9b8 <_vfiprintf_r+0x78>
 800aae6:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaea:	460c      	mov	r4, r1
 800aaec:	2001      	movs	r0, #1
 800aaee:	e7a6      	b.n	800aa3e <_vfiprintf_r+0xfe>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	3401      	adds	r4, #1
 800aaf4:	9305      	str	r3, [sp, #20]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	f04f 0c0a 	mov.w	ip, #10
 800aafc:	4620      	mov	r0, r4
 800aafe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab02:	3a30      	subs	r2, #48	; 0x30
 800ab04:	2a09      	cmp	r2, #9
 800ab06:	d903      	bls.n	800ab10 <_vfiprintf_r+0x1d0>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0c6      	beq.n	800aa9a <_vfiprintf_r+0x15a>
 800ab0c:	9105      	str	r1, [sp, #20]
 800ab0e:	e7c4      	b.n	800aa9a <_vfiprintf_r+0x15a>
 800ab10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab14:	4604      	mov	r4, r0
 800ab16:	2301      	movs	r3, #1
 800ab18:	e7f0      	b.n	800aafc <_vfiprintf_r+0x1bc>
 800ab1a:	ab03      	add	r3, sp, #12
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	462a      	mov	r2, r5
 800ab20:	4b12      	ldr	r3, [pc, #72]	; (800ab6c <_vfiprintf_r+0x22c>)
 800ab22:	a904      	add	r1, sp, #16
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7fb febb 	bl	80068a0 <_printf_float>
 800ab2a:	4607      	mov	r7, r0
 800ab2c:	1c78      	adds	r0, r7, #1
 800ab2e:	d1d6      	bne.n	800aade <_vfiprintf_r+0x19e>
 800ab30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab32:	07d9      	lsls	r1, r3, #31
 800ab34:	d405      	bmi.n	800ab42 <_vfiprintf_r+0x202>
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	059a      	lsls	r2, r3, #22
 800ab3a:	d402      	bmi.n	800ab42 <_vfiprintf_r+0x202>
 800ab3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab3e:	f7fc fe40 	bl	80077c2 <__retarget_lock_release_recursive>
 800ab42:	89ab      	ldrh	r3, [r5, #12]
 800ab44:	065b      	lsls	r3, r3, #25
 800ab46:	f53f af1d 	bmi.w	800a984 <_vfiprintf_r+0x44>
 800ab4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab4c:	e71c      	b.n	800a988 <_vfiprintf_r+0x48>
 800ab4e:	ab03      	add	r3, sp, #12
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	462a      	mov	r2, r5
 800ab54:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <_vfiprintf_r+0x22c>)
 800ab56:	a904      	add	r1, sp, #16
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7fc f945 	bl	8006de8 <_printf_i>
 800ab5e:	e7e4      	b.n	800ab2a <_vfiprintf_r+0x1ea>
 800ab60:	0800b8d0 	.word	0x0800b8d0
 800ab64:	0800b8da 	.word	0x0800b8da
 800ab68:	080068a1 	.word	0x080068a1
 800ab6c:	0800a91d 	.word	0x0800a91d
 800ab70:	0800b8d6 	.word	0x0800b8d6

0800ab74 <__swbuf_r>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	460e      	mov	r6, r1
 800ab78:	4614      	mov	r4, r2
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	b118      	cbz	r0, 800ab86 <__swbuf_r+0x12>
 800ab7e:	6a03      	ldr	r3, [r0, #32]
 800ab80:	b90b      	cbnz	r3, 800ab86 <__swbuf_r+0x12>
 800ab82:	f7fc fcdd 	bl	8007540 <__sinit>
 800ab86:	69a3      	ldr	r3, [r4, #24]
 800ab88:	60a3      	str	r3, [r4, #8]
 800ab8a:	89a3      	ldrh	r3, [r4, #12]
 800ab8c:	071a      	lsls	r2, r3, #28
 800ab8e:	d525      	bpl.n	800abdc <__swbuf_r+0x68>
 800ab90:	6923      	ldr	r3, [r4, #16]
 800ab92:	b31b      	cbz	r3, 800abdc <__swbuf_r+0x68>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	6922      	ldr	r2, [r4, #16]
 800ab98:	1a98      	subs	r0, r3, r2
 800ab9a:	6963      	ldr	r3, [r4, #20]
 800ab9c:	b2f6      	uxtb	r6, r6
 800ab9e:	4283      	cmp	r3, r0
 800aba0:	4637      	mov	r7, r6
 800aba2:	dc04      	bgt.n	800abae <__swbuf_r+0x3a>
 800aba4:	4621      	mov	r1, r4
 800aba6:	4628      	mov	r0, r5
 800aba8:	f7ff fa2a 	bl	800a000 <_fflush_r>
 800abac:	b9e0      	cbnz	r0, 800abe8 <__swbuf_r+0x74>
 800abae:	68a3      	ldr	r3, [r4, #8]
 800abb0:	3b01      	subs	r3, #1
 800abb2:	60a3      	str	r3, [r4, #8]
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	6022      	str	r2, [r4, #0]
 800abba:	701e      	strb	r6, [r3, #0]
 800abbc:	6962      	ldr	r2, [r4, #20]
 800abbe:	1c43      	adds	r3, r0, #1
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d004      	beq.n	800abce <__swbuf_r+0x5a>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	07db      	lsls	r3, r3, #31
 800abc8:	d506      	bpl.n	800abd8 <__swbuf_r+0x64>
 800abca:	2e0a      	cmp	r6, #10
 800abcc:	d104      	bne.n	800abd8 <__swbuf_r+0x64>
 800abce:	4621      	mov	r1, r4
 800abd0:	4628      	mov	r0, r5
 800abd2:	f7ff fa15 	bl	800a000 <_fflush_r>
 800abd6:	b938      	cbnz	r0, 800abe8 <__swbuf_r+0x74>
 800abd8:	4638      	mov	r0, r7
 800abda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abdc:	4621      	mov	r1, r4
 800abde:	4628      	mov	r0, r5
 800abe0:	f000 f806 	bl	800abf0 <__swsetup_r>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d0d5      	beq.n	800ab94 <__swbuf_r+0x20>
 800abe8:	f04f 37ff 	mov.w	r7, #4294967295
 800abec:	e7f4      	b.n	800abd8 <__swbuf_r+0x64>
	...

0800abf0 <__swsetup_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4b2a      	ldr	r3, [pc, #168]	; (800ac9c <__swsetup_r+0xac>)
 800abf4:	4605      	mov	r5, r0
 800abf6:	6818      	ldr	r0, [r3, #0]
 800abf8:	460c      	mov	r4, r1
 800abfa:	b118      	cbz	r0, 800ac04 <__swsetup_r+0x14>
 800abfc:	6a03      	ldr	r3, [r0, #32]
 800abfe:	b90b      	cbnz	r3, 800ac04 <__swsetup_r+0x14>
 800ac00:	f7fc fc9e 	bl	8007540 <__sinit>
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac0a:	0718      	lsls	r0, r3, #28
 800ac0c:	d422      	bmi.n	800ac54 <__swsetup_r+0x64>
 800ac0e:	06d9      	lsls	r1, r3, #27
 800ac10:	d407      	bmi.n	800ac22 <__swsetup_r+0x32>
 800ac12:	2309      	movs	r3, #9
 800ac14:	602b      	str	r3, [r5, #0]
 800ac16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac1a:	81a3      	strh	r3, [r4, #12]
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac20:	e034      	b.n	800ac8c <__swsetup_r+0x9c>
 800ac22:	0758      	lsls	r0, r3, #29
 800ac24:	d512      	bpl.n	800ac4c <__swsetup_r+0x5c>
 800ac26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac28:	b141      	cbz	r1, 800ac3c <__swsetup_r+0x4c>
 800ac2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac2e:	4299      	cmp	r1, r3
 800ac30:	d002      	beq.n	800ac38 <__swsetup_r+0x48>
 800ac32:	4628      	mov	r0, r5
 800ac34:	f7fd fc46 	bl	80084c4 <_free_r>
 800ac38:	2300      	movs	r3, #0
 800ac3a:	6363      	str	r3, [r4, #52]	; 0x34
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	2300      	movs	r3, #0
 800ac46:	6063      	str	r3, [r4, #4]
 800ac48:	6923      	ldr	r3, [r4, #16]
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	89a3      	ldrh	r3, [r4, #12]
 800ac4e:	f043 0308 	orr.w	r3, r3, #8
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	b94b      	cbnz	r3, 800ac6c <__swsetup_r+0x7c>
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac62:	d003      	beq.n	800ac6c <__swsetup_r+0x7c>
 800ac64:	4621      	mov	r1, r4
 800ac66:	4628      	mov	r0, r5
 800ac68:	f000 f884 	bl	800ad74 <__smakebuf_r>
 800ac6c:	89a0      	ldrh	r0, [r4, #12]
 800ac6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac72:	f010 0301 	ands.w	r3, r0, #1
 800ac76:	d00a      	beq.n	800ac8e <__swsetup_r+0x9e>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60a3      	str	r3, [r4, #8]
 800ac7c:	6963      	ldr	r3, [r4, #20]
 800ac7e:	425b      	negs	r3, r3
 800ac80:	61a3      	str	r3, [r4, #24]
 800ac82:	6923      	ldr	r3, [r4, #16]
 800ac84:	b943      	cbnz	r3, 800ac98 <__swsetup_r+0xa8>
 800ac86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac8a:	d1c4      	bne.n	800ac16 <__swsetup_r+0x26>
 800ac8c:	bd38      	pop	{r3, r4, r5, pc}
 800ac8e:	0781      	lsls	r1, r0, #30
 800ac90:	bf58      	it	pl
 800ac92:	6963      	ldrpl	r3, [r4, #20]
 800ac94:	60a3      	str	r3, [r4, #8]
 800ac96:	e7f4      	b.n	800ac82 <__swsetup_r+0x92>
 800ac98:	2000      	movs	r0, #0
 800ac9a:	e7f7      	b.n	800ac8c <__swsetup_r+0x9c>
 800ac9c:	200000fc 	.word	0x200000fc

0800aca0 <_raise_r>:
 800aca0:	291f      	cmp	r1, #31
 800aca2:	b538      	push	{r3, r4, r5, lr}
 800aca4:	4604      	mov	r4, r0
 800aca6:	460d      	mov	r5, r1
 800aca8:	d904      	bls.n	800acb4 <_raise_r+0x14>
 800acaa:	2316      	movs	r3, #22
 800acac:	6003      	str	r3, [r0, #0]
 800acae:	f04f 30ff 	mov.w	r0, #4294967295
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
 800acb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800acb6:	b112      	cbz	r2, 800acbe <_raise_r+0x1e>
 800acb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acbc:	b94b      	cbnz	r3, 800acd2 <_raise_r+0x32>
 800acbe:	4620      	mov	r0, r4
 800acc0:	f000 f830 	bl	800ad24 <_getpid_r>
 800acc4:	462a      	mov	r2, r5
 800acc6:	4601      	mov	r1, r0
 800acc8:	4620      	mov	r0, r4
 800acca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acce:	f000 b817 	b.w	800ad00 <_kill_r>
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d00a      	beq.n	800acec <_raise_r+0x4c>
 800acd6:	1c59      	adds	r1, r3, #1
 800acd8:	d103      	bne.n	800ace2 <_raise_r+0x42>
 800acda:	2316      	movs	r3, #22
 800acdc:	6003      	str	r3, [r0, #0]
 800acde:	2001      	movs	r0, #1
 800ace0:	e7e7      	b.n	800acb2 <_raise_r+0x12>
 800ace2:	2400      	movs	r4, #0
 800ace4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ace8:	4628      	mov	r0, r5
 800acea:	4798      	blx	r3
 800acec:	2000      	movs	r0, #0
 800acee:	e7e0      	b.n	800acb2 <_raise_r+0x12>

0800acf0 <raise>:
 800acf0:	4b02      	ldr	r3, [pc, #8]	; (800acfc <raise+0xc>)
 800acf2:	4601      	mov	r1, r0
 800acf4:	6818      	ldr	r0, [r3, #0]
 800acf6:	f7ff bfd3 	b.w	800aca0 <_raise_r>
 800acfa:	bf00      	nop
 800acfc:	200000fc 	.word	0x200000fc

0800ad00 <_kill_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d07      	ldr	r5, [pc, #28]	; (800ad20 <_kill_r+0x20>)
 800ad04:	2300      	movs	r3, #0
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	602b      	str	r3, [r5, #0]
 800ad0e:	f7f7 fa9d 	bl	800224c <_kill>
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	d102      	bne.n	800ad1c <_kill_r+0x1c>
 800ad16:	682b      	ldr	r3, [r5, #0]
 800ad18:	b103      	cbz	r3, 800ad1c <_kill_r+0x1c>
 800ad1a:	6023      	str	r3, [r4, #0]
 800ad1c:	bd38      	pop	{r3, r4, r5, pc}
 800ad1e:	bf00      	nop
 800ad20:	200005dc 	.word	0x200005dc

0800ad24 <_getpid_r>:
 800ad24:	f7f7 ba8a 	b.w	800223c <_getpid>

0800ad28 <__swhatbuf_r>:
 800ad28:	b570      	push	{r4, r5, r6, lr}
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad30:	2900      	cmp	r1, #0
 800ad32:	b096      	sub	sp, #88	; 0x58
 800ad34:	4615      	mov	r5, r2
 800ad36:	461e      	mov	r6, r3
 800ad38:	da0d      	bge.n	800ad56 <__swhatbuf_r+0x2e>
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ad40:	f04f 0100 	mov.w	r1, #0
 800ad44:	bf0c      	ite	eq
 800ad46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ad4a:	2340      	movne	r3, #64	; 0x40
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	6031      	str	r1, [r6, #0]
 800ad50:	602b      	str	r3, [r5, #0]
 800ad52:	b016      	add	sp, #88	; 0x58
 800ad54:	bd70      	pop	{r4, r5, r6, pc}
 800ad56:	466a      	mov	r2, sp
 800ad58:	f000 f848 	bl	800adec <_fstat_r>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	dbec      	blt.n	800ad3a <__swhatbuf_r+0x12>
 800ad60:	9901      	ldr	r1, [sp, #4]
 800ad62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ad66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ad6a:	4259      	negs	r1, r3
 800ad6c:	4159      	adcs	r1, r3
 800ad6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad72:	e7eb      	b.n	800ad4c <__swhatbuf_r+0x24>

0800ad74 <__smakebuf_r>:
 800ad74:	898b      	ldrh	r3, [r1, #12]
 800ad76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad78:	079d      	lsls	r5, r3, #30
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	460c      	mov	r4, r1
 800ad7e:	d507      	bpl.n	800ad90 <__smakebuf_r+0x1c>
 800ad80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	6123      	str	r3, [r4, #16]
 800ad88:	2301      	movs	r3, #1
 800ad8a:	6163      	str	r3, [r4, #20]
 800ad8c:	b002      	add	sp, #8
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	ab01      	add	r3, sp, #4
 800ad92:	466a      	mov	r2, sp
 800ad94:	f7ff ffc8 	bl	800ad28 <__swhatbuf_r>
 800ad98:	9900      	ldr	r1, [sp, #0]
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	f7fd fc05 	bl	80085ac <_malloc_r>
 800ada2:	b948      	cbnz	r0, 800adb8 <__smakebuf_r+0x44>
 800ada4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada8:	059a      	lsls	r2, r3, #22
 800adaa:	d4ef      	bmi.n	800ad8c <__smakebuf_r+0x18>
 800adac:	f023 0303 	bic.w	r3, r3, #3
 800adb0:	f043 0302 	orr.w	r3, r3, #2
 800adb4:	81a3      	strh	r3, [r4, #12]
 800adb6:	e7e3      	b.n	800ad80 <__smakebuf_r+0xc>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	6020      	str	r0, [r4, #0]
 800adbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	9b00      	ldr	r3, [sp, #0]
 800adc4:	6163      	str	r3, [r4, #20]
 800adc6:	9b01      	ldr	r3, [sp, #4]
 800adc8:	6120      	str	r0, [r4, #16]
 800adca:	b15b      	cbz	r3, 800ade4 <__smakebuf_r+0x70>
 800adcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800add0:	4630      	mov	r0, r6
 800add2:	f000 f81d 	bl	800ae10 <_isatty_r>
 800add6:	b128      	cbz	r0, 800ade4 <__smakebuf_r+0x70>
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	f023 0303 	bic.w	r3, r3, #3
 800adde:	f043 0301 	orr.w	r3, r3, #1
 800ade2:	81a3      	strh	r3, [r4, #12]
 800ade4:	89a3      	ldrh	r3, [r4, #12]
 800ade6:	431d      	orrs	r5, r3
 800ade8:	81a5      	strh	r5, [r4, #12]
 800adea:	e7cf      	b.n	800ad8c <__smakebuf_r+0x18>

0800adec <_fstat_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d07      	ldr	r5, [pc, #28]	; (800ae0c <_fstat_r+0x20>)
 800adf0:	2300      	movs	r3, #0
 800adf2:	4604      	mov	r4, r0
 800adf4:	4608      	mov	r0, r1
 800adf6:	4611      	mov	r1, r2
 800adf8:	602b      	str	r3, [r5, #0]
 800adfa:	f7f7 fa86 	bl	800230a <_fstat>
 800adfe:	1c43      	adds	r3, r0, #1
 800ae00:	d102      	bne.n	800ae08 <_fstat_r+0x1c>
 800ae02:	682b      	ldr	r3, [r5, #0]
 800ae04:	b103      	cbz	r3, 800ae08 <_fstat_r+0x1c>
 800ae06:	6023      	str	r3, [r4, #0]
 800ae08:	bd38      	pop	{r3, r4, r5, pc}
 800ae0a:	bf00      	nop
 800ae0c:	200005dc 	.word	0x200005dc

0800ae10 <_isatty_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4d06      	ldr	r5, [pc, #24]	; (800ae2c <_isatty_r+0x1c>)
 800ae14:	2300      	movs	r3, #0
 800ae16:	4604      	mov	r4, r0
 800ae18:	4608      	mov	r0, r1
 800ae1a:	602b      	str	r3, [r5, #0]
 800ae1c:	f7f7 fa85 	bl	800232a <_isatty>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	d102      	bne.n	800ae2a <_isatty_r+0x1a>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	b103      	cbz	r3, 800ae2a <_isatty_r+0x1a>
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	200005dc 	.word	0x200005dc

0800ae30 <atan2>:
 800ae30:	f000 bab2 	b.w	800b398 <__ieee754_atan2>

0800ae34 <sqrt>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	ed2d 8b02 	vpush	{d8}
 800ae3a:	ec55 4b10 	vmov	r4, r5, d0
 800ae3e:	f000 f9d1 	bl	800b1e4 <__ieee754_sqrt>
 800ae42:	4622      	mov	r2, r4
 800ae44:	462b      	mov	r3, r5
 800ae46:	4620      	mov	r0, r4
 800ae48:	4629      	mov	r1, r5
 800ae4a:	eeb0 8a40 	vmov.f32	s16, s0
 800ae4e:	eef0 8a60 	vmov.f32	s17, s1
 800ae52:	f7f5 fe73 	bl	8000b3c <__aeabi_dcmpun>
 800ae56:	b990      	cbnz	r0, 800ae7e <sqrt+0x4a>
 800ae58:	2200      	movs	r2, #0
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	4629      	mov	r1, r5
 800ae60:	f7f5 fe44 	bl	8000aec <__aeabi_dcmplt>
 800ae64:	b158      	cbz	r0, 800ae7e <sqrt+0x4a>
 800ae66:	f7fc fc81 	bl	800776c <__errno>
 800ae6a:	2321      	movs	r3, #33	; 0x21
 800ae6c:	6003      	str	r3, [r0, #0]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2300      	movs	r3, #0
 800ae72:	4610      	mov	r0, r2
 800ae74:	4619      	mov	r1, r3
 800ae76:	f7f5 fcf1 	bl	800085c <__aeabi_ddiv>
 800ae7a:	ec41 0b18 	vmov	d8, r0, r1
 800ae7e:	eeb0 0a48 	vmov.f32	s0, s16
 800ae82:	eef0 0a68 	vmov.f32	s1, s17
 800ae86:	ecbd 8b02 	vpop	{d8}
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	0000      	movs	r0, r0
	...

0800ae90 <atan>:
 800ae90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	ec55 4b10 	vmov	r4, r5, d0
 800ae98:	4bc3      	ldr	r3, [pc, #780]	; (800b1a8 <atan+0x318>)
 800ae9a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ae9e:	429e      	cmp	r6, r3
 800aea0:	46ab      	mov	fp, r5
 800aea2:	dd18      	ble.n	800aed6 <atan+0x46>
 800aea4:	4bc1      	ldr	r3, [pc, #772]	; (800b1ac <atan+0x31c>)
 800aea6:	429e      	cmp	r6, r3
 800aea8:	dc01      	bgt.n	800aeae <atan+0x1e>
 800aeaa:	d109      	bne.n	800aec0 <atan+0x30>
 800aeac:	b144      	cbz	r4, 800aec0 <atan+0x30>
 800aeae:	4622      	mov	r2, r4
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	f7f5 f9f1 	bl	800029c <__adddf3>
 800aeba:	4604      	mov	r4, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	e006      	b.n	800aece <atan+0x3e>
 800aec0:	f1bb 0f00 	cmp.w	fp, #0
 800aec4:	f300 8131 	bgt.w	800b12a <atan+0x29a>
 800aec8:	a59b      	add	r5, pc, #620	; (adr r5, 800b138 <atan+0x2a8>)
 800aeca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aece:	ec45 4b10 	vmov	d0, r4, r5
 800aed2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed6:	4bb6      	ldr	r3, [pc, #728]	; (800b1b0 <atan+0x320>)
 800aed8:	429e      	cmp	r6, r3
 800aeda:	dc14      	bgt.n	800af06 <atan+0x76>
 800aedc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800aee0:	429e      	cmp	r6, r3
 800aee2:	dc0d      	bgt.n	800af00 <atan+0x70>
 800aee4:	a396      	add	r3, pc, #600	; (adr r3, 800b140 <atan+0x2b0>)
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	ee10 0a10 	vmov	r0, s0
 800aeee:	4629      	mov	r1, r5
 800aef0:	f7f5 f9d4 	bl	800029c <__adddf3>
 800aef4:	4baf      	ldr	r3, [pc, #700]	; (800b1b4 <atan+0x324>)
 800aef6:	2200      	movs	r2, #0
 800aef8:	f7f5 fe16 	bl	8000b28 <__aeabi_dcmpgt>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d1e6      	bne.n	800aece <atan+0x3e>
 800af00:	f04f 3aff 	mov.w	sl, #4294967295
 800af04:	e02b      	b.n	800af5e <atan+0xce>
 800af06:	f000 f963 	bl	800b1d0 <fabs>
 800af0a:	4bab      	ldr	r3, [pc, #684]	; (800b1b8 <atan+0x328>)
 800af0c:	429e      	cmp	r6, r3
 800af0e:	ec55 4b10 	vmov	r4, r5, d0
 800af12:	f300 80bf 	bgt.w	800b094 <atan+0x204>
 800af16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800af1a:	429e      	cmp	r6, r3
 800af1c:	f300 80a0 	bgt.w	800b060 <atan+0x1d0>
 800af20:	ee10 2a10 	vmov	r2, s0
 800af24:	ee10 0a10 	vmov	r0, s0
 800af28:	462b      	mov	r3, r5
 800af2a:	4629      	mov	r1, r5
 800af2c:	f7f5 f9b6 	bl	800029c <__adddf3>
 800af30:	4ba0      	ldr	r3, [pc, #640]	; (800b1b4 <atan+0x324>)
 800af32:	2200      	movs	r2, #0
 800af34:	f7f5 f9b0 	bl	8000298 <__aeabi_dsub>
 800af38:	2200      	movs	r2, #0
 800af3a:	4606      	mov	r6, r0
 800af3c:	460f      	mov	r7, r1
 800af3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af42:	4620      	mov	r0, r4
 800af44:	4629      	mov	r1, r5
 800af46:	f7f5 f9a9 	bl	800029c <__adddf3>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4630      	mov	r0, r6
 800af50:	4639      	mov	r1, r7
 800af52:	f7f5 fc83 	bl	800085c <__aeabi_ddiv>
 800af56:	f04f 0a00 	mov.w	sl, #0
 800af5a:	4604      	mov	r4, r0
 800af5c:	460d      	mov	r5, r1
 800af5e:	4622      	mov	r2, r4
 800af60:	462b      	mov	r3, r5
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	f7f5 fb4f 	bl	8000608 <__aeabi_dmul>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4680      	mov	r8, r0
 800af70:	4689      	mov	r9, r1
 800af72:	f7f5 fb49 	bl	8000608 <__aeabi_dmul>
 800af76:	a374      	add	r3, pc, #464	; (adr r3, 800b148 <atan+0x2b8>)
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	4606      	mov	r6, r0
 800af7e:	460f      	mov	r7, r1
 800af80:	f7f5 fb42 	bl	8000608 <__aeabi_dmul>
 800af84:	a372      	add	r3, pc, #456	; (adr r3, 800b150 <atan+0x2c0>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f7f5 f987 	bl	800029c <__adddf3>
 800af8e:	4632      	mov	r2, r6
 800af90:	463b      	mov	r3, r7
 800af92:	f7f5 fb39 	bl	8000608 <__aeabi_dmul>
 800af96:	a370      	add	r3, pc, #448	; (adr r3, 800b158 <atan+0x2c8>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	f7f5 f97e 	bl	800029c <__adddf3>
 800afa0:	4632      	mov	r2, r6
 800afa2:	463b      	mov	r3, r7
 800afa4:	f7f5 fb30 	bl	8000608 <__aeabi_dmul>
 800afa8:	a36d      	add	r3, pc, #436	; (adr r3, 800b160 <atan+0x2d0>)
 800afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afae:	f7f5 f975 	bl	800029c <__adddf3>
 800afb2:	4632      	mov	r2, r6
 800afb4:	463b      	mov	r3, r7
 800afb6:	f7f5 fb27 	bl	8000608 <__aeabi_dmul>
 800afba:	a36b      	add	r3, pc, #428	; (adr r3, 800b168 <atan+0x2d8>)
 800afbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc0:	f7f5 f96c 	bl	800029c <__adddf3>
 800afc4:	4632      	mov	r2, r6
 800afc6:	463b      	mov	r3, r7
 800afc8:	f7f5 fb1e 	bl	8000608 <__aeabi_dmul>
 800afcc:	a368      	add	r3, pc, #416	; (adr r3, 800b170 <atan+0x2e0>)
 800afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd2:	f7f5 f963 	bl	800029c <__adddf3>
 800afd6:	4642      	mov	r2, r8
 800afd8:	464b      	mov	r3, r9
 800afda:	f7f5 fb15 	bl	8000608 <__aeabi_dmul>
 800afde:	a366      	add	r3, pc, #408	; (adr r3, 800b178 <atan+0x2e8>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	4680      	mov	r8, r0
 800afe6:	4689      	mov	r9, r1
 800afe8:	4630      	mov	r0, r6
 800afea:	4639      	mov	r1, r7
 800afec:	f7f5 fb0c 	bl	8000608 <__aeabi_dmul>
 800aff0:	a363      	add	r3, pc, #396	; (adr r3, 800b180 <atan+0x2f0>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	f7f5 f94f 	bl	8000298 <__aeabi_dsub>
 800affa:	4632      	mov	r2, r6
 800affc:	463b      	mov	r3, r7
 800affe:	f7f5 fb03 	bl	8000608 <__aeabi_dmul>
 800b002:	a361      	add	r3, pc, #388	; (adr r3, 800b188 <atan+0x2f8>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	f7f5 f946 	bl	8000298 <__aeabi_dsub>
 800b00c:	4632      	mov	r2, r6
 800b00e:	463b      	mov	r3, r7
 800b010:	f7f5 fafa 	bl	8000608 <__aeabi_dmul>
 800b014:	a35e      	add	r3, pc, #376	; (adr r3, 800b190 <atan+0x300>)
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	f7f5 f93d 	bl	8000298 <__aeabi_dsub>
 800b01e:	4632      	mov	r2, r6
 800b020:	463b      	mov	r3, r7
 800b022:	f7f5 faf1 	bl	8000608 <__aeabi_dmul>
 800b026:	a35c      	add	r3, pc, #368	; (adr r3, 800b198 <atan+0x308>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f7f5 f934 	bl	8000298 <__aeabi_dsub>
 800b030:	4632      	mov	r2, r6
 800b032:	463b      	mov	r3, r7
 800b034:	f7f5 fae8 	bl	8000608 <__aeabi_dmul>
 800b038:	4602      	mov	r2, r0
 800b03a:	460b      	mov	r3, r1
 800b03c:	4640      	mov	r0, r8
 800b03e:	4649      	mov	r1, r9
 800b040:	f7f5 f92c 	bl	800029c <__adddf3>
 800b044:	4622      	mov	r2, r4
 800b046:	462b      	mov	r3, r5
 800b048:	f7f5 fade 	bl	8000608 <__aeabi_dmul>
 800b04c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	d14b      	bne.n	800b0ee <atan+0x25e>
 800b056:	4620      	mov	r0, r4
 800b058:	4629      	mov	r1, r5
 800b05a:	f7f5 f91d 	bl	8000298 <__aeabi_dsub>
 800b05e:	e72c      	b.n	800aeba <atan+0x2a>
 800b060:	ee10 0a10 	vmov	r0, s0
 800b064:	4b53      	ldr	r3, [pc, #332]	; (800b1b4 <atan+0x324>)
 800b066:	2200      	movs	r2, #0
 800b068:	4629      	mov	r1, r5
 800b06a:	f7f5 f915 	bl	8000298 <__aeabi_dsub>
 800b06e:	4b51      	ldr	r3, [pc, #324]	; (800b1b4 <atan+0x324>)
 800b070:	4606      	mov	r6, r0
 800b072:	460f      	mov	r7, r1
 800b074:	2200      	movs	r2, #0
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	f7f5 f90f 	bl	800029c <__adddf3>
 800b07e:	4602      	mov	r2, r0
 800b080:	460b      	mov	r3, r1
 800b082:	4630      	mov	r0, r6
 800b084:	4639      	mov	r1, r7
 800b086:	f7f5 fbe9 	bl	800085c <__aeabi_ddiv>
 800b08a:	f04f 0a01 	mov.w	sl, #1
 800b08e:	4604      	mov	r4, r0
 800b090:	460d      	mov	r5, r1
 800b092:	e764      	b.n	800af5e <atan+0xce>
 800b094:	4b49      	ldr	r3, [pc, #292]	; (800b1bc <atan+0x32c>)
 800b096:	429e      	cmp	r6, r3
 800b098:	da1d      	bge.n	800b0d6 <atan+0x246>
 800b09a:	ee10 0a10 	vmov	r0, s0
 800b09e:	4b48      	ldr	r3, [pc, #288]	; (800b1c0 <atan+0x330>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	f7f5 f8f8 	bl	8000298 <__aeabi_dsub>
 800b0a8:	4b45      	ldr	r3, [pc, #276]	; (800b1c0 <atan+0x330>)
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	460f      	mov	r7, r1
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	f7f5 faa8 	bl	8000608 <__aeabi_dmul>
 800b0b8:	4b3e      	ldr	r3, [pc, #248]	; (800b1b4 <atan+0x324>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f7f5 f8ee 	bl	800029c <__adddf3>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	f7f5 fbc8 	bl	800085c <__aeabi_ddiv>
 800b0cc:	f04f 0a02 	mov.w	sl, #2
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	460d      	mov	r5, r1
 800b0d4:	e743      	b.n	800af5e <atan+0xce>
 800b0d6:	462b      	mov	r3, r5
 800b0d8:	ee10 2a10 	vmov	r2, s0
 800b0dc:	4939      	ldr	r1, [pc, #228]	; (800b1c4 <atan+0x334>)
 800b0de:	2000      	movs	r0, #0
 800b0e0:	f7f5 fbbc 	bl	800085c <__aeabi_ddiv>
 800b0e4:	f04f 0a03 	mov.w	sl, #3
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	e737      	b.n	800af5e <atan+0xce>
 800b0ee:	4b36      	ldr	r3, [pc, #216]	; (800b1c8 <atan+0x338>)
 800b0f0:	4e36      	ldr	r6, [pc, #216]	; (800b1cc <atan+0x33c>)
 800b0f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	f7f5 f8cd 	bl	8000298 <__aeabi_dsub>
 800b0fe:	4622      	mov	r2, r4
 800b100:	462b      	mov	r3, r5
 800b102:	f7f5 f8c9 	bl	8000298 <__aeabi_dsub>
 800b106:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b112:	f7f5 f8c1 	bl	8000298 <__aeabi_dsub>
 800b116:	f1bb 0f00 	cmp.w	fp, #0
 800b11a:	4604      	mov	r4, r0
 800b11c:	460d      	mov	r5, r1
 800b11e:	f6bf aed6 	bge.w	800aece <atan+0x3e>
 800b122:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b126:	461d      	mov	r5, r3
 800b128:	e6d1      	b.n	800aece <atan+0x3e>
 800b12a:	a51d      	add	r5, pc, #116	; (adr r5, 800b1a0 <atan+0x310>)
 800b12c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b130:	e6cd      	b.n	800aece <atan+0x3e>
 800b132:	bf00      	nop
 800b134:	f3af 8000 	nop.w
 800b138:	54442d18 	.word	0x54442d18
 800b13c:	bff921fb 	.word	0xbff921fb
 800b140:	8800759c 	.word	0x8800759c
 800b144:	7e37e43c 	.word	0x7e37e43c
 800b148:	e322da11 	.word	0xe322da11
 800b14c:	3f90ad3a 	.word	0x3f90ad3a
 800b150:	24760deb 	.word	0x24760deb
 800b154:	3fa97b4b 	.word	0x3fa97b4b
 800b158:	a0d03d51 	.word	0xa0d03d51
 800b15c:	3fb10d66 	.word	0x3fb10d66
 800b160:	c54c206e 	.word	0xc54c206e
 800b164:	3fb745cd 	.word	0x3fb745cd
 800b168:	920083ff 	.word	0x920083ff
 800b16c:	3fc24924 	.word	0x3fc24924
 800b170:	5555550d 	.word	0x5555550d
 800b174:	3fd55555 	.word	0x3fd55555
 800b178:	2c6a6c2f 	.word	0x2c6a6c2f
 800b17c:	bfa2b444 	.word	0xbfa2b444
 800b180:	52defd9a 	.word	0x52defd9a
 800b184:	3fadde2d 	.word	0x3fadde2d
 800b188:	af749a6d 	.word	0xaf749a6d
 800b18c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b190:	fe231671 	.word	0xfe231671
 800b194:	3fbc71c6 	.word	0x3fbc71c6
 800b198:	9998ebc4 	.word	0x9998ebc4
 800b19c:	3fc99999 	.word	0x3fc99999
 800b1a0:	54442d18 	.word	0x54442d18
 800b1a4:	3ff921fb 	.word	0x3ff921fb
 800b1a8:	440fffff 	.word	0x440fffff
 800b1ac:	7ff00000 	.word	0x7ff00000
 800b1b0:	3fdbffff 	.word	0x3fdbffff
 800b1b4:	3ff00000 	.word	0x3ff00000
 800b1b8:	3ff2ffff 	.word	0x3ff2ffff
 800b1bc:	40038000 	.word	0x40038000
 800b1c0:	3ff80000 	.word	0x3ff80000
 800b1c4:	bff00000 	.word	0xbff00000
 800b1c8:	0800b9a8 	.word	0x0800b9a8
 800b1cc:	0800b988 	.word	0x0800b988

0800b1d0 <fabs>:
 800b1d0:	ec51 0b10 	vmov	r0, r1, d0
 800b1d4:	ee10 2a10 	vmov	r2, s0
 800b1d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1dc:	ec43 2b10 	vmov	d0, r2, r3
 800b1e0:	4770      	bx	lr
	...

0800b1e4 <__ieee754_sqrt>:
 800b1e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e8:	ec55 4b10 	vmov	r4, r5, d0
 800b1ec:	4e67      	ldr	r6, [pc, #412]	; (800b38c <__ieee754_sqrt+0x1a8>)
 800b1ee:	43ae      	bics	r6, r5
 800b1f0:	ee10 0a10 	vmov	r0, s0
 800b1f4:	ee10 2a10 	vmov	r2, s0
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	462b      	mov	r3, r5
 800b1fc:	d10d      	bne.n	800b21a <__ieee754_sqrt+0x36>
 800b1fe:	f7f5 fa03 	bl	8000608 <__aeabi_dmul>
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	4620      	mov	r0, r4
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f5 f847 	bl	800029c <__adddf3>
 800b20e:	4604      	mov	r4, r0
 800b210:	460d      	mov	r5, r1
 800b212:	ec45 4b10 	vmov	d0, r4, r5
 800b216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21a:	2d00      	cmp	r5, #0
 800b21c:	dc0b      	bgt.n	800b236 <__ieee754_sqrt+0x52>
 800b21e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b222:	4326      	orrs	r6, r4
 800b224:	d0f5      	beq.n	800b212 <__ieee754_sqrt+0x2e>
 800b226:	b135      	cbz	r5, 800b236 <__ieee754_sqrt+0x52>
 800b228:	f7f5 f836 	bl	8000298 <__aeabi_dsub>
 800b22c:	4602      	mov	r2, r0
 800b22e:	460b      	mov	r3, r1
 800b230:	f7f5 fb14 	bl	800085c <__aeabi_ddiv>
 800b234:	e7eb      	b.n	800b20e <__ieee754_sqrt+0x2a>
 800b236:	1509      	asrs	r1, r1, #20
 800b238:	f000 808d 	beq.w	800b356 <__ieee754_sqrt+0x172>
 800b23c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b240:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b248:	07c9      	lsls	r1, r1, #31
 800b24a:	bf5c      	itt	pl
 800b24c:	005b      	lslpl	r3, r3, #1
 800b24e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b252:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b256:	bf58      	it	pl
 800b258:	0052      	lslpl	r2, r2, #1
 800b25a:	2500      	movs	r5, #0
 800b25c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b260:	1076      	asrs	r6, r6, #1
 800b262:	0052      	lsls	r2, r2, #1
 800b264:	f04f 0e16 	mov.w	lr, #22
 800b268:	46ac      	mov	ip, r5
 800b26a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b26e:	eb0c 0001 	add.w	r0, ip, r1
 800b272:	4298      	cmp	r0, r3
 800b274:	bfde      	ittt	le
 800b276:	1a1b      	suble	r3, r3, r0
 800b278:	eb00 0c01 	addle.w	ip, r0, r1
 800b27c:	186d      	addle	r5, r5, r1
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	f1be 0e01 	subs.w	lr, lr, #1
 800b284:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b288:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b28c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b290:	d1ed      	bne.n	800b26e <__ieee754_sqrt+0x8a>
 800b292:	4674      	mov	r4, lr
 800b294:	2720      	movs	r7, #32
 800b296:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b29a:	4563      	cmp	r3, ip
 800b29c:	eb01 000e 	add.w	r0, r1, lr
 800b2a0:	dc02      	bgt.n	800b2a8 <__ieee754_sqrt+0xc4>
 800b2a2:	d113      	bne.n	800b2cc <__ieee754_sqrt+0xe8>
 800b2a4:	4290      	cmp	r0, r2
 800b2a6:	d811      	bhi.n	800b2cc <__ieee754_sqrt+0xe8>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	eb00 0e01 	add.w	lr, r0, r1
 800b2ae:	da57      	bge.n	800b360 <__ieee754_sqrt+0x17c>
 800b2b0:	f1be 0f00 	cmp.w	lr, #0
 800b2b4:	db54      	blt.n	800b360 <__ieee754_sqrt+0x17c>
 800b2b6:	f10c 0801 	add.w	r8, ip, #1
 800b2ba:	eba3 030c 	sub.w	r3, r3, ip
 800b2be:	4290      	cmp	r0, r2
 800b2c0:	bf88      	it	hi
 800b2c2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b2c6:	1a12      	subs	r2, r2, r0
 800b2c8:	440c      	add	r4, r1
 800b2ca:	46c4      	mov	ip, r8
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	3f01      	subs	r7, #1
 800b2d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b2d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b2d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b2dc:	d1dd      	bne.n	800b29a <__ieee754_sqrt+0xb6>
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	d01b      	beq.n	800b31a <__ieee754_sqrt+0x136>
 800b2e2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b390 <__ieee754_sqrt+0x1ac>
 800b2e6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b394 <__ieee754_sqrt+0x1b0>
 800b2ea:	e9da 0100 	ldrd	r0, r1, [sl]
 800b2ee:	e9db 2300 	ldrd	r2, r3, [fp]
 800b2f2:	f7f4 ffd1 	bl	8000298 <__aeabi_dsub>
 800b2f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4640      	mov	r0, r8
 800b300:	4649      	mov	r1, r9
 800b302:	f7f5 fbfd 	bl	8000b00 <__aeabi_dcmple>
 800b306:	b140      	cbz	r0, 800b31a <__ieee754_sqrt+0x136>
 800b308:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b30c:	e9da 0100 	ldrd	r0, r1, [sl]
 800b310:	e9db 2300 	ldrd	r2, r3, [fp]
 800b314:	d126      	bne.n	800b364 <__ieee754_sqrt+0x180>
 800b316:	3501      	adds	r5, #1
 800b318:	463c      	mov	r4, r7
 800b31a:	106a      	asrs	r2, r5, #1
 800b31c:	0863      	lsrs	r3, r4, #1
 800b31e:	07e9      	lsls	r1, r5, #31
 800b320:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b324:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b328:	bf48      	it	mi
 800b32a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b32e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b332:	461c      	mov	r4, r3
 800b334:	e76d      	b.n	800b212 <__ieee754_sqrt+0x2e>
 800b336:	0ad3      	lsrs	r3, r2, #11
 800b338:	3815      	subs	r0, #21
 800b33a:	0552      	lsls	r2, r2, #21
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0fa      	beq.n	800b336 <__ieee754_sqrt+0x152>
 800b340:	02dc      	lsls	r4, r3, #11
 800b342:	d50a      	bpl.n	800b35a <__ieee754_sqrt+0x176>
 800b344:	f1c1 0420 	rsb	r4, r1, #32
 800b348:	fa22 f404 	lsr.w	r4, r2, r4
 800b34c:	1e4d      	subs	r5, r1, #1
 800b34e:	408a      	lsls	r2, r1
 800b350:	4323      	orrs	r3, r4
 800b352:	1b41      	subs	r1, r0, r5
 800b354:	e772      	b.n	800b23c <__ieee754_sqrt+0x58>
 800b356:	4608      	mov	r0, r1
 800b358:	e7f0      	b.n	800b33c <__ieee754_sqrt+0x158>
 800b35a:	005b      	lsls	r3, r3, #1
 800b35c:	3101      	adds	r1, #1
 800b35e:	e7ef      	b.n	800b340 <__ieee754_sqrt+0x15c>
 800b360:	46e0      	mov	r8, ip
 800b362:	e7aa      	b.n	800b2ba <__ieee754_sqrt+0xd6>
 800b364:	f7f4 ff9a 	bl	800029c <__adddf3>
 800b368:	e9da 8900 	ldrd	r8, r9, [sl]
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4640      	mov	r0, r8
 800b372:	4649      	mov	r1, r9
 800b374:	f7f5 fbba 	bl	8000aec <__aeabi_dcmplt>
 800b378:	b120      	cbz	r0, 800b384 <__ieee754_sqrt+0x1a0>
 800b37a:	1ca0      	adds	r0, r4, #2
 800b37c:	bf08      	it	eq
 800b37e:	3501      	addeq	r5, #1
 800b380:	3402      	adds	r4, #2
 800b382:	e7ca      	b.n	800b31a <__ieee754_sqrt+0x136>
 800b384:	3401      	adds	r4, #1
 800b386:	f024 0401 	bic.w	r4, r4, #1
 800b38a:	e7c6      	b.n	800b31a <__ieee754_sqrt+0x136>
 800b38c:	7ff00000 	.word	0x7ff00000
 800b390:	20000270 	.word	0x20000270
 800b394:	20000278 	.word	0x20000278

0800b398 <__ieee754_atan2>:
 800b398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b39c:	ec57 6b11 	vmov	r6, r7, d1
 800b3a0:	4273      	negs	r3, r6
 800b3a2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800b520 <__ieee754_atan2+0x188>
 800b3a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b3aa:	4333      	orrs	r3, r6
 800b3ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b3b0:	4543      	cmp	r3, r8
 800b3b2:	ec51 0b10 	vmov	r0, r1, d0
 800b3b6:	ee11 5a10 	vmov	r5, s2
 800b3ba:	d80a      	bhi.n	800b3d2 <__ieee754_atan2+0x3a>
 800b3bc:	4244      	negs	r4, r0
 800b3be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b3c2:	4304      	orrs	r4, r0
 800b3c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b3c8:	4544      	cmp	r4, r8
 800b3ca:	ee10 9a10 	vmov	r9, s0
 800b3ce:	468e      	mov	lr, r1
 800b3d0:	d907      	bls.n	800b3e2 <__ieee754_atan2+0x4a>
 800b3d2:	4632      	mov	r2, r6
 800b3d4:	463b      	mov	r3, r7
 800b3d6:	f7f4 ff61 	bl	800029c <__adddf3>
 800b3da:	ec41 0b10 	vmov	d0, r0, r1
 800b3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b3e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b3ea:	4334      	orrs	r4, r6
 800b3ec:	d103      	bne.n	800b3f6 <__ieee754_atan2+0x5e>
 800b3ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3f2:	f7ff bd4d 	b.w	800ae90 <atan>
 800b3f6:	17bc      	asrs	r4, r7, #30
 800b3f8:	f004 0402 	and.w	r4, r4, #2
 800b3fc:	ea53 0909 	orrs.w	r9, r3, r9
 800b400:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b404:	d107      	bne.n	800b416 <__ieee754_atan2+0x7e>
 800b406:	2c02      	cmp	r4, #2
 800b408:	d05f      	beq.n	800b4ca <__ieee754_atan2+0x132>
 800b40a:	2c03      	cmp	r4, #3
 800b40c:	d1e5      	bne.n	800b3da <__ieee754_atan2+0x42>
 800b40e:	a140      	add	r1, pc, #256	; (adr r1, 800b510 <__ieee754_atan2+0x178>)
 800b410:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b414:	e7e1      	b.n	800b3da <__ieee754_atan2+0x42>
 800b416:	4315      	orrs	r5, r2
 800b418:	d106      	bne.n	800b428 <__ieee754_atan2+0x90>
 800b41a:	f1be 0f00 	cmp.w	lr, #0
 800b41e:	da5f      	bge.n	800b4e0 <__ieee754_atan2+0x148>
 800b420:	a13d      	add	r1, pc, #244	; (adr r1, 800b518 <__ieee754_atan2+0x180>)
 800b422:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b426:	e7d8      	b.n	800b3da <__ieee754_atan2+0x42>
 800b428:	4542      	cmp	r2, r8
 800b42a:	d10f      	bne.n	800b44c <__ieee754_atan2+0xb4>
 800b42c:	4293      	cmp	r3, r2
 800b42e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b432:	d107      	bne.n	800b444 <__ieee754_atan2+0xac>
 800b434:	2c02      	cmp	r4, #2
 800b436:	d84c      	bhi.n	800b4d2 <__ieee754_atan2+0x13a>
 800b438:	4b33      	ldr	r3, [pc, #204]	; (800b508 <__ieee754_atan2+0x170>)
 800b43a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b43e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b442:	e7ca      	b.n	800b3da <__ieee754_atan2+0x42>
 800b444:	2c02      	cmp	r4, #2
 800b446:	d848      	bhi.n	800b4da <__ieee754_atan2+0x142>
 800b448:	4b30      	ldr	r3, [pc, #192]	; (800b50c <__ieee754_atan2+0x174>)
 800b44a:	e7f6      	b.n	800b43a <__ieee754_atan2+0xa2>
 800b44c:	4543      	cmp	r3, r8
 800b44e:	d0e4      	beq.n	800b41a <__ieee754_atan2+0x82>
 800b450:	1a9b      	subs	r3, r3, r2
 800b452:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b456:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b45a:	da1e      	bge.n	800b49a <__ieee754_atan2+0x102>
 800b45c:	2f00      	cmp	r7, #0
 800b45e:	da01      	bge.n	800b464 <__ieee754_atan2+0xcc>
 800b460:	323c      	adds	r2, #60	; 0x3c
 800b462:	db1e      	blt.n	800b4a2 <__ieee754_atan2+0x10a>
 800b464:	4632      	mov	r2, r6
 800b466:	463b      	mov	r3, r7
 800b468:	f7f5 f9f8 	bl	800085c <__aeabi_ddiv>
 800b46c:	ec41 0b10 	vmov	d0, r0, r1
 800b470:	f7ff feae 	bl	800b1d0 <fabs>
 800b474:	f7ff fd0c 	bl	800ae90 <atan>
 800b478:	ec51 0b10 	vmov	r0, r1, d0
 800b47c:	2c01      	cmp	r4, #1
 800b47e:	d013      	beq.n	800b4a8 <__ieee754_atan2+0x110>
 800b480:	2c02      	cmp	r4, #2
 800b482:	d015      	beq.n	800b4b0 <__ieee754_atan2+0x118>
 800b484:	2c00      	cmp	r4, #0
 800b486:	d0a8      	beq.n	800b3da <__ieee754_atan2+0x42>
 800b488:	a317      	add	r3, pc, #92	; (adr r3, 800b4e8 <__ieee754_atan2+0x150>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	f7f4 ff03 	bl	8000298 <__aeabi_dsub>
 800b492:	a317      	add	r3, pc, #92	; (adr r3, 800b4f0 <__ieee754_atan2+0x158>)
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	e014      	b.n	800b4c4 <__ieee754_atan2+0x12c>
 800b49a:	a117      	add	r1, pc, #92	; (adr r1, 800b4f8 <__ieee754_atan2+0x160>)
 800b49c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4a0:	e7ec      	b.n	800b47c <__ieee754_atan2+0xe4>
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	e7e9      	b.n	800b47c <__ieee754_atan2+0xe4>
 800b4a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	e794      	b.n	800b3da <__ieee754_atan2+0x42>
 800b4b0:	a30d      	add	r3, pc, #52	; (adr r3, 800b4e8 <__ieee754_atan2+0x150>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f4 feef 	bl	8000298 <__aeabi_dsub>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	a10c      	add	r1, pc, #48	; (adr r1, 800b4f0 <__ieee754_atan2+0x158>)
 800b4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4c4:	f7f4 fee8 	bl	8000298 <__aeabi_dsub>
 800b4c8:	e787      	b.n	800b3da <__ieee754_atan2+0x42>
 800b4ca:	a109      	add	r1, pc, #36	; (adr r1, 800b4f0 <__ieee754_atan2+0x158>)
 800b4cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4d0:	e783      	b.n	800b3da <__ieee754_atan2+0x42>
 800b4d2:	a10b      	add	r1, pc, #44	; (adr r1, 800b500 <__ieee754_atan2+0x168>)
 800b4d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4d8:	e77f      	b.n	800b3da <__ieee754_atan2+0x42>
 800b4da:	2000      	movs	r0, #0
 800b4dc:	2100      	movs	r1, #0
 800b4de:	e77c      	b.n	800b3da <__ieee754_atan2+0x42>
 800b4e0:	a105      	add	r1, pc, #20	; (adr r1, 800b4f8 <__ieee754_atan2+0x160>)
 800b4e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4e6:	e778      	b.n	800b3da <__ieee754_atan2+0x42>
 800b4e8:	33145c07 	.word	0x33145c07
 800b4ec:	3ca1a626 	.word	0x3ca1a626
 800b4f0:	54442d18 	.word	0x54442d18
 800b4f4:	400921fb 	.word	0x400921fb
 800b4f8:	54442d18 	.word	0x54442d18
 800b4fc:	3ff921fb 	.word	0x3ff921fb
 800b500:	54442d18 	.word	0x54442d18
 800b504:	3fe921fb 	.word	0x3fe921fb
 800b508:	0800b9c8 	.word	0x0800b9c8
 800b50c:	0800b9e0 	.word	0x0800b9e0
 800b510:	54442d18 	.word	0x54442d18
 800b514:	c00921fb 	.word	0xc00921fb
 800b518:	54442d18 	.word	0x54442d18
 800b51c:	bff921fb 	.word	0xbff921fb
 800b520:	7ff00000 	.word	0x7ff00000

0800b524 <_init>:
 800b524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b526:	bf00      	nop
 800b528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b52a:	bc08      	pop	{r3}
 800b52c:	469e      	mov	lr, r3
 800b52e:	4770      	bx	lr

0800b530 <_fini>:
 800b530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b532:	bf00      	nop
 800b534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b536:	bc08      	pop	{r3}
 800b538:	469e      	mov	lr, r3
 800b53a:	4770      	bx	lr
